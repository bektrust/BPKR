#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Устанавливает статус документа
//
// Параметры:
//  Документ             - ДокументСсылка.* - документ
//  Статус               - ПеречислениеСсылка.* - новый статус документа
//  ДополнительныйСтатус - ПеречислениеСсылка.* - новый дополнительный статус документа
//
// Возвращаемое значение:
//  Булево - Истина, если статус документа изменен
//
Функция УстановитьСтатусыДокумента(Документ, Статус = Неопределено, ДополнительныйСтатус = Неопределено, СтатусСчетаФактуры = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Документ) Тогда
		МассивДокументов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Документ);
		СтатусИзменен = УстановитьСтатусыДокументов(МассивДокументов, Статус, ДополнительныйСтатус, СтатусСчетаФактуры);
	Иначе
		СтатусИзменен = Ложь;
	КонецЕсли;
	
	Возврат СтатусИзменен;
	
КонецФункции

// Устанавливает статус нескольких документов.
// Статус может быть измененен только у тех документов, на редактирование которых у пользователя есть права.
//
// Параметры:
//  МассивДокументов     - Массив - содержит ссылки на документы (должны быть одного вида!)
//  Статус               - ПеречислениеСсылка.* - новый статус документа, Неопределено, если статус менять не нужно
//  ДополнительныйСтатус - ПеречислениеСсылка.* - новый дополнительный статус документа, Неопределено, если статус
//                                                менять не нужно
//
// Возвращаемое значение:
//  Булево - Истина, если статус хотя бы одного документа изменен
//
Функция УстановитьСтатусыДокументов(МассивДокументов, Статус = Неопределено, ДополнительныйСтатус = Неопределено, СтатусСчетаФактуры = Неопределено) Экспорт
	
	СтатусИзменен = Ложь;
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат СтатусИзменен;
	КонецЕсли;
	
	ИзменитьСтатус = (Статус <> Неопределено);
	ИзменитьДополнительныйСтатус = (ДополнительныйСтатус <> Неопределено);
	ИзменитьСтатусСчетаФактуры = (СтатусСчетаФактуры <> Неопределено);
	
	Если Не ИзменитьСтатус 
		И Не ИзменитьДополнительныйСтатус 
		И Не ИзменитьСтатусСчетаФактуры Тогда
		Возврат СтатусИзменен;
	КонецЕсли;
	
	МетаданныеДокумента = МассивДокументов[0].Метаданные();
	ВыполнитьПроверкуПравДоступа("Редактирование", МетаданныеДокумента);
	
	ИмяДокумента = МетаданныеДокумента.Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Запрос.Параметры.Вставить("СтатусОплатыПоУмолчанию",   Перечисления.СтатусОплатыСчета.СтатусНовогоДокумента());
	
	ТекстЗапроса = // Имя таблицы с документами может быть заменено ниже
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДокументов.Организация КАК Организация,
	|	ТаблицаДокументов.Ссылка КАК Документ,
	|	ЕСТЬNULL(СтатусыДокументов.Статус, &СтатусОплатыПоУмолчанию) КАК Статус
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК ТаблицаДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
	|		ПО ТаблицаДокументов.Организация = СтатусыДокументов.Организация
	|			И ТаблицаДокументов.Ссылка = СтатусыДокументов.Документ
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивДокументов)";
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "СчетНаОплатуПокупателю", ИмяДокумента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если (Не ИзменитьСтатус Или Выборка.Статус = Статус)
			И (Не ИзменитьДополнительныйСтатус Или Выборка.ДополнительныйСтатус = ДополнительныйСтатус) 
			И (Не ИзменитьСтатусСчетаФактуры Или Выборка.СтатусСчетаФактуры = СтатусСчетаФактуры) Тогда
			Продолжить;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		
		// При записи набора, удаляем статусы, относящиеся к другой организации
		НаборЗаписей = РегистрыСведений.СтатусыДокументов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Выборка.Документ);
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Если ИзменитьСтатус Тогда
			Запись.Статус = Статус;
		КонецЕсли;
		Если ИзменитьДополнительныйСтатус Тогда
			Запись.ДополнительныйСтатус = ДополнительныйСтатус;
		КонецЕсли;
		Если ИзменитьСтатусСчетаФактуры Тогда
			Запись.СтатусСчетаФактуры = СтатусСчетаФактуры;
		КонецЕсли;
		
		НаборЗаписей.Записать();
		
		УстановитьПривилегированныйРежим(Ложь);
		
		СтатусИзменен = Истина;
		
	КонецЦикла;
	
	Возврат СтатусИзменен;
	
КонецФункции

// Возвращает текущий статус документа
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация
//  Документ    - ДокументСсылка.* - документ
//
// Возвращаемое значение:
//  Структура - стуктура статусов документа со свойствами:
//    * Статус - ПеречислениеСсылка - основной статус документа
//    * ДополнительныйСтатус - ПеречислениеСсылка - дополнительный статус документа
//
Функция ПолучитьСтатусыДокумента(Документ, Организация) Экспорт
	
	Если ЗначениеЗаполнено(Документ) Тогда
		КоллекцияСтатусов = ПолучитьСтатусыДокументов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Документ), Организация);
		СтатусыДокумента = КоллекцияСтатусов[Документ];
	КонецЕсли;
	
	Если СтатусыДокумента = Неопределено Тогда
		СтатусыДокумента = СтатусНовогоДокумента(Документ);
	КонецЕсли;
	
	Возврат СтатусыДокумента;
	
КонецФункции

// Возвращает текущие статусы документов
//
// Параметры:
//  МассивДокументов - Массив - массив ссылок на документы
//  Организация- СправочникСсылка.Организации - организация
//
// Возвращаемое значение:
//  Соответствие:
//    Ключ - ссылка на документ
//    Значение - Структура статусов документа со свойствами:
//      * Статус - ПеречислениеСсылка - основной статус документа
//      * ДополнительныйСтатус - ПеречислениеСсылка - дополнительный статус документа
//
Функция ПолучитьСтатусыДокументов(МассивДокументов, Организация = Неопределено) Экспорт
	
	КоллекцияСтатусов = Новый Соответствие;
	Для Каждого Документ Из МассивДокументов Цикл
		КоллекцияСтатусов.Вставить(Документ, СтатусНовогоДокумента(Документ));
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СтатусыДокументов.Документ,
	|	СтатусыДокументов.Статус
	|ИЗ
	|	РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
	|ГДЕ
	|	&УсловиеПоОрганизации
	|	И СтатусыДокументов.Документ В(&МассивДокументов)";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Если Организация <> Неопределено Тогда
		Запрос.УстановитьПараметр("Организация", Организация);
		УсловиеПоОрганизации = "СтатусыДокументов.Организация = &Организация";
	Иначе
		УсловиеПоОрганизации = "ИСТИНА";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&УсловиеПоОрганизации", УсловиеПоОрганизации);
	
	// Данные о статусах не считаем секретными и для производительности читаем их привилегированно,
	// так как они читаются при открытии формы.
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(КоллекцияСтатусов[Выборка.Документ], Выборка);
	КонецЦикла;
	
	Возврат КоллекцияСтатусов;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает статус документа по умолчанию
//
// Параметры:
//   Документ - ДокументСсылка - ссылка на документ
//
// Возвращаемое значение:
//  Структура - стуктура статусов документа со свойствами:
//    * Статус - ПеречислениеСсылка - основной статус документа
//    * ДополнительныйСтатус - ПеречислениеСсылка - дополнительный статус документа
//
Функция СтатусНовогоДокумента(Документ)
	
	Результат = Новый Структура("Статус, ДополнительныйСтатус");
	
	ТипДокумента = ТипЗнч(Документ);
	
	Если ТипДокумента = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		
		Результат.Статус = Перечисления.СтатусОплатыСчета.СтатусНовогоДокумента();
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		
		Результат.Статус = Перечисления.СтатусОплатыСчета.СтатусНовогоДокумента();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли