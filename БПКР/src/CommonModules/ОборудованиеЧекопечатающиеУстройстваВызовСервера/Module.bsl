
#Область ПрограммныйИнтерфейс

// Заполнить структуру фискализации чека
//
// Возвращаемое значение:
//  Структура.
Функция ПараметрыФискализацииЧека() Экспорт
	
	ПараметрыФискализации = Новый Структура();

	ПараметрыФискализации.Вставить("Кассир");
	ПараметрыФискализации.Вставить("КассирИНН");
	ПараметрыФискализации.Вставить("КассирПароль");

	ПараметрыФискализации.Вставить("ДокументОснование");
	ПараметрыФискализации.Вставить("ИдентификаторФискальнойЗаписи");
	
	ПараметрыФискализации.Вставить("Организация");
	ПараметрыФискализации.Вставить("ТорговыйОбъект");
	ПараметрыФискализации.Вставить("КорректируемыйДокумент");
	ПараметрыФискализации.Вставить("ЕстьПерсональныеДанные", Ложь);
	ПараметрыФискализации.Вставить("СубъектПерсональныхДанных");
	ПараметрыФискализации.Вставить("ТипПерсональныхДанных");
	
	ПараметрыФискализации.Вставить("ТипРасчета");
	ПараметрыФискализации.Вставить("ТипДокумента");
	ПараметрыФискализации.Вставить("ТипИнкассации");
	
	ПараметрыФискализации.Вставить("РевизияИнтерфейса");
	ПараметрыФискализации.Вставить("ШиринаСтроки");
	ПараметрыФискализации.Вставить("РегистрационныйНомерККТ");
	ПараметрыФискализации.Вставить("ДополнительныйРеквизит");
	
	ПараметрыФискализации.Вставить("НомерСменыККТ"   , 0); // Номер смены.
	ПараметрыФискализации.Вставить("НомерЧекаККТ"    , 0); // Номер фискального чека.
	ПараметрыФискализации.Вставить("ДатаВремяЧека"); // Дата и время фискализации чека на ККТ.
	
	ПараметрыФискализации.Вставить("СуммаЧека", 0);
	ПараметрыФискализации.Вставить("ОплатаНаличные" , 0);                   
	ПараметрыФискализации.Вставить("ОплатаЭлектронно", 0);
	ПараметрыФискализации.Вставить("ОплатаПредоплата", 0);  
	ПараметрыФискализации.Вставить("ОплатаПостоплата", 0);
	
	ПараметрыФискализации.Вставить("ФискальныйПризнак" , ""); // Фискальный признак документа.
	ПараметрыФискализации.Вставить("АдресСайтаПроверки", ""); // Адрес сайта проверки ФНС.
	
	ПараметрыФискализации.Вставить("Электронно"       , Ложь);
	ПараметрыФискализации.Вставить("Отправляет1СSMS"  , Ложь);
	ПараметрыФискализации.Вставить("Отправляет1СEmail", Ложь);
	ПараметрыФискализации.Вставить("АвтономныйРежим"  , Ложь);
	ПараметрыФискализации.Вставить("ПокупательEmail"   ); // Строка,Необязательно - Адрес электронной почты покупателя.
	ПараметрыФискализации.Вставить("ПокупательНомер"   ); // Строка,Необязательно - Телефонный номер покупателя. В формате +{Ц}.
	
	ПараметрыФискализации.Вставить("ДанныеЧекаXML");
	ПараметрыФискализации.Вставить("ДанныеЧекаXMLПерсональныеДанные");
	ПараметрыФискализации.Вставить("РезультатОперацииXML");
	ПараметрыФискализации.Вставить("ТекстСообщения");
	
	ПараметрыФискализации.Вставить("ТекущееСостояние", ПараметрыФискальнойОперации());
	
	ПараметрыФискализации.Вставить("ПринтерДляПечати");
	
	ПараметрыФискализации.Вставить("Результат", Истина);
	ПараметрыФискализации.Вставить("ОперацияЗаписана", Истина);
	ПараметрыФискализации.Вставить("ТекстОшибки");
	
	ПараметрыФискализации.Вставить("СтатусСмены", 0);
	ПараметрыФискализации.Вставить("ТестовыеЧеки");

	ПараметрыФискализации.Вставить("ЕдиныйЧек", Ложь);
	
	ПараметрыФискализации.Вставить("ИдентификаторОплатыПлатежнойСистемы");
	ПараметрыФискализации.Вставить("ТипПлатежнойСистемы");         
	
	ПараметрыФискализации.Вставить("ДетализацияОплатыДобавлено", Ложь);
	ПараметрыФискализации.Вставить("QRКодДобавлено", Ложь);
	
	Возврат ПараметрыФискализации;
	
КонецФункции 

// Параметры фискальной операции.
// 
// Возвращаемое значение:
//  Структура - Параметры фискальной операции:
//  * Кассир - ОпределяемыйТип.СубъектПерсональныхДанныхБПО
//  * ДокументОснование - ОпределяемыйТип.ОснованиеФискальнойОперацииБПО
//  * Организация - ОпределяемыйТип.ОрганизацияБПО
//  * ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектБПО
//  * НомерСменыККТ - Число -
//  * НомерЧекаККТ - Число -
//  * СтатусСмены - Число -
//  * ДатаВремя - Дата
//  * ПараметрыXML - Строка -
//  * РезультатXML - Строка -
//  * КассоваяСмена - ДокументСсылка.КассоваяСмена
//  * ТестовыеЧеки - Булево
//  * ДополнительныеПараметры - Любое 
//  * Результат - Булево -
//  * ТекстОшибки - Строка
Функция ПараметрыФискальнойОперации() Экспорт
	
	ДанныеОперации = Новый Структура();
	ДанныеОперации.Вставить("Кассир");
	ДанныеОперации.Вставить("ДокументОснование");
	ДанныеОперации.Вставить("Организация");
	ДанныеОперации.Вставить("ТорговыйОбъект");
	
	ДанныеОперации.Вставить("НомерСменыККТ" , 0);
	ДанныеОперации.Вставить("НомерЧекаККТ"  , 0);
	ДанныеОперации.Вставить("СтатусСмены", 0);
	ДанныеОперации.Вставить("ДатаВремя");
	ДанныеОперации.Вставить("ПараметрыXML", "");
	ДанныеОперации.Вставить("РезультатXML", "");
	ДанныеОперации.Вставить("КассоваяСмена");
	ДанныеОперации.Вставить("ТестовыеЧеки");
	ДанныеОперации.Вставить("ДополнительныеПараметры");
	ДанныеОперации.Вставить("Результат", Истина);
	ДанныеОперации.Вставить("ТекстОшибки");
	
	ДанныеОперации.Вставить("ПринтерДляПечати", Неопределено);
	
	Возврат ДанныеОперации;
	
КонецФункции 

// Подготовить данные операции, перед выполнением команды.
// 
// Параметры:
//  ПараметрыПодключения - Структура - см. МенеджерОборудованияКлиентСервер.ПараметрыПодключения()
//  Команда - Строка - команда для выполнения
//  ПараметрыОперации - Структура - 
// 
// Возвращаемое значение:
//  Структура - Подготовить данные операции:
//  * Кассир - ОпределяемыйТип.СубъектПерсональныхДанныхБПО
//  * КассирИНН - Число
//  * ДокументОснование - ОпределяемыйТип.ОснованиеФискальнойОперацииБПО
//  * ИдентификаторФискальнойЗаписи - УникальныйИдентификатор
//  * Организация - ОпределяемыйТип.ОрганизацияБПО.
//  * ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектБПО
//  * КорректируемыйДокумент - ОпределяемыйТип.ОснованиеКассовогоЧекаКоррекцииБПО
//  * ЕстьПерсональныеДанные - Булево -
//  * СубъектПерсональныхДанных - ОпределяемыйТип.СубъектПерсональныхДанныхБПО
//  * ТипПерсональныхДанных - ПеречислениеСсылка.ТипыПерсональныхДанныхККТ.
//  * ТипРасчета - ПеречислениеСсылка.ТипыРасчетаДенежнымиСредствами
//  * ТипДокумента - ПеречислениеСсылка.ТипыФискальныхДокументовККТ
//  * РевизияИнтерфейса - Число -
//  * ШиринаСтроки - Число - 
//  * РегистрационныйНомерККТ - Число
//  * ЗаводскойНомерФН - Число - 
//  * ДополнительныйРеквизит - Число - 
//  * НомерСменыККТ - Число -
//  * НомерЧекаККТ - Число -
//  * НомерЧекаЗаСмену - Число -
//  * ДатаВремяЧека - Дата
//  * СуммаЧека - Число -
//  * ОплатаНаличные - Число -
//  * ОплатаЭлектронно - Число -
//  * ОплатаПредоплата - Число -
//  * ОплатаПостоплата - Число -
//  * ОплатаВстречноеПредоставление - Число -
//  * ФискальныйПризнак - Строка -
//  * АдресСайтаПроверки - Строка -
//  * Электронно - Булево -
//  * Отправляет1СSMS - Булево -
//  * Отправляет1СEmail - Булево -
//  * АвтономныйРежим - Булево -
//  * ДанныеЧекаXML - Строка
//  * ДанныеЧекаXMLПерсональныеДанные - Строка 
//  * РезультатОперацииXML - Булево
//  * ТекстСообщения - Строка
//  * ТекущееСостояние - Структура -:
//    ** НомерСменыККТ - Число -
//    ** НомерЧекаККТ - Число -
//    ** СтатусСмены - Число -
//    ** ДатаВремя - Дата
//    ** ПараметрыXML - Строка -
//    ** РезультатXML - Строка -
//    ** КассоваяСмена - ДокументСсылка.КассоваяСмена
//    ** ТестовыеЧеки - Булево
//    ** Результат - Булево -
//    ** ТекстОшибки - Строка
//  * ЧекКоррекцииСторно - Булево
//  * СформироватьЧекКоррекции - Булево -
//  * НеприменениеККТ - Булево -
//  * ВерсияФФДККТ11 - Булево -
//  * Результат - Булево -
//  * ОперацияЗаписана - Булево -
//  * ТекстОшибки - Строка
//  * СтатусСмены - Число -
//  * ТестовыеЧеки - Булево
//  * ЕдиныйЧек - Булево -
//  * ИдентификаторОплатыПлатежнойСистемы - УникальныйИдентификатор
//  * ТипПлатежнойСистемы - ПеречислениеСсылка.ТипыПлатежнойСистемыККТ
Функция ПодготовитьДанныеОперации(ПараметрыПодключения, Команда, ПараметрыОперации) Экспорт
	
	ДанныеОперации = Новый Структура();
	ДанныеОперации.Вставить("Результат", Истина);
	ДанныеОперации.Вставить("ТекстОшибки");
	
	// Для всех операций проверяем корректность ИНН кассира.
	Если ПараметрыОперации <> Неопределено И ПараметрыОперации.Свойство("КассирИНН") И НЕ ПустаяСтрока(ПараметрыОперации.КассирИНН) Тогда
		ОписаниеОшибки = "";
		Если НЕ ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ИННСоответствуетТребованиям(ПараметрыОперации.КассирИНН, Ложь, ОписаниеОшибки) Тогда
			ТекстОшибки = НСтр("ru = 'ИНН кассира некорректен (%Ошибка%)'");
			ОписаниеОшибки = СтрЗаменить(ТекстОшибки, "%Ошибка%", ОписаниеОшибки);
			ДанныеОперации.Результат = Ложь;
			ДанныеОперации.ТекстОшибки = ОписаниеОшибки;
			Возврат ДанныеОперации;
		КонецЕсли;
	КонецЕсли;
	
	// Для всех операций проверяем корректность ИНН организации.
	Если  ПараметрыОперации <> Неопределено И ПараметрыОперации.Свойство("ОрганизацияИНН") И НЕ ПустаяСтрока(ПараметрыОперации.ОрганизацияИНН) Тогда
		Если СтрДлина(ПараметрыОперации.ОрганизацияИНН) <> 14 Тогда
			ОписаниеОшибки = НСтр("ru = 'Неверная длина ИНН организации.'");
			ДанныеОперации.Результат = Ложь;
			ДанныеОперации.ТекстОшибки = ОписаниеОшибки;
			Возврат ДанныеОперации;
		КонецЕсли;
	КонецЕсли;
	
	Если Команда = "CheckFiscalization" Тогда
		       
		СтатусПоследнейСмены = ПолучитьСтатусПоследнейСмены(ПараметрыПодключения.ИдентификаторУстройства);
		Если Не СтатусПоследнейСмены.Активна = Истина Тогда
			ОписаниеОшибки = НСтр("ru='Кассовая смена не открыта или истекла.'");
			ДанныеОперации.Результат = Ложь;
			ДанныеОперации.ТекстОшибки = ОписаниеОшибки;
			Возврат ДанныеОперации;
		Иначе
			// Форматно логический контроль
			ОписаниеОшибки = "";
			Если НЕ ВыполненаПроверкаОбязательностиИПравильностиЗаполненияТэгов(ПараметрыОперации, ПараметрыПодключения.ИдентификаторУстройства, ОписаниеОшибки) Тогда
				ДанныеОперации.Результат = Ложь;
				ДанныеОперации.ТекстОшибки = ОписаниеОшибки;
				Возврат ДанныеОперации;
			КонецЕсли;
			Отказ = Ложь;
			ИсправленыОсновныеПараметры = Ложь;
			ПривестиДанныеКТребуемомуФормату(ПараметрыОперации, Отказ, ОписаниеОшибки, ИсправленыОсновныеПараметры);
			Если Отказ Тогда
				ДанныеОперации.Результат = Ложь;
				ДанныеОперации.ТекстОшибки = ОписаниеОшибки;
				Возврат ДанныеОперации;
			КонецЕсли;
		КонецЕсли;
		
		// Параметры фискализации чека
		ПараметрыФискализации = ПараметрыФискализацииЧека();
		
		Если ПараметрыПодключения.ТипОборудования = "ККТ" Тогда
			
			// Параметры регистрации ККТ
			ПараметрыРегистрации = ПараметрыРегистрацииУстройства(ПараметрыПодключения.ИдентификаторУстройства);

			ПараметрыФискализации.ПринтерДляПечати = ПараметрыПодключения.ИдентификаторУстройства.ПринтерДляПечати;
		
			ПараметрыОперации = СформироватьШаблонЧека(ПараметрыОперации, ПараметрыПодключения.ТипОборудования, , ПараметрыПодключения.ИдентификаторУстройства);
			
			ПараметрыФискализации.РегистрационныйНомерККТ = ?(ПараметрыРегистрации.Свойство("РегистрационныйНомерККТ"), ПараметрыРегистрации.РегистрационныйНомерККТ, "");
			ПараметрыФискализации.ШиринаСтроки      = ?(ПараметрыПодключения.Свойство("ШиринаСтроки") И  ПараметрыПодключения.ШиринаСтроки > 0, ПараметрыПодключения.ШиринаСтроки, 32);
			ПараметрыФискализации.РевизияИнтерфейса = ПараметрыПодключения.РевизияИнтерфейса;
			ПараметрыФискализации.ДокументОснование = ПараметрыОперации.ДокументОснование;
			ПараметрыФискализации.ИдентификаторФискальнойЗаписи = ПараметрыОперации.ИдентификаторФискальнойЗаписи;
			ПараметрыФискализации.Организация       = ПараметрыОперации.Организация;
			ПараметрыФискализации.ТорговыйОбъект    = ПараметрыОперации.ТорговыйОбъект;
			ПараметрыФискализации.ДополнительныйРеквизит = ПараметрыОперации.ДополнительныйРеквизит;  
			ПараметрыФискализации.СубъектПерсональныхДанных = ПараметрыОперации.СубъектПерсональныхДанных;
			ПараметрыФискализации.ЕстьПерсональныеДанные    = ПараметрыОперации.ЕстьПерсональныеДанные;
			Если ПараметрыОперации.Свойство("ИдентификаторОплатыПлатежнойСистемы") Тогда 
				ПараметрыФискализации.ИдентификаторОплатыПлатежнойСистемы = ПараметрыОперации.ИдентификаторОплатыПлатежнойСистемы;
			КонецЕсли;
			Если ПараметрыОперации.Свойство("ТипПлатежнойСистемы") Тогда 
				ПараметрыФискализации.ТипПлатежнойСистемы = ПараметрыОперации.ТипПлатежнойСистемы;
			КонецЕсли;
			Если ПараметрыОперации.Свойство("КорректируемыйДокумент") Тогда 
				ПараметрыФискализации.КорректируемыйДокумент = ПараметрыОперации.КорректируемыйДокумент;
			КонецЕсли;
			ПараметрыФискализации.Кассир       = ПараметрыОперации.Кассир;
			ПараметрыФискализации.КассирИНН    = ПараметрыОперации.КассирИНН;
			ПараметрыФискализации.КассирПароль = ПараметрыОперации.КассирПароль;
			ПараметрыФискализации.Электронно   = ПараметрыОперации.Электронно;
			ПараметрыФискализации.Отправляет1СSMS   = ПараметрыОперации.Отправляет1СSMS;
			Если ПараметрыОперации.Отправляет1СSMS Тогда
				ПараметрыФискализации.ПокупательНомер = ПараметрыОперации.ПокупательНомер;
			КонецЕсли;
			ПараметрыФискализации.Отправляет1СEmail = ПараметрыОперации.Отправляет1СEmail;
			Если ПараметрыОперации.Отправляет1СEmail Тогда
				ПараметрыФискализации.ПокупательEmail = ПараметрыОперации.ПокупательEmail;
			КонецЕсли;
			ПараметрыФискализации.ТипДокумента = Перечисления.ТипыФискальныхДокументовККТ.КассовыйЧек;
			СформироватьXMLПакетДляФискализацияЧека(ПараметрыОперации, ПараметрыФискализации);
			
			Если ПараметрыФискализации.ЕстьПерсональныеДанные Тогда
				Если ПустаяСтрока(ПараметрыФискализации.ДатаВремяЧека) Тогда
					ДатаВремяЧека = МенеджерОборудованияВызовСервера.ДатаСеанса();
				Иначе
					ДатаВремяЧека = ПараметрыФискализации.ДатаВремяЧека;
				КонецЕсли;
				СведенияОПокупателе = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыПерсональныеДанныеПокупателя();
				ПараметрыФискализации.ТипПерсональныхДанных = ПараметрыОперации.ТипПерсональныхДанных;
				МенеджерОборудованияВызовСервераПереопределяемый.ОбработкаЗаполненияПерсональныхДанных(СведенияОПокупателе, ПараметрыФискализации.СубъектПерсональныхДанных, 
					ПараметрыФискализации.ТипПерсональныхДанных, ДатаВремяЧека);
				СформироватьXMLПакетДляФискализацияЧека(ПараметрыОперации, ПараметрыФискализации, Истина, СведенияОПокупателе, ПараметрыФискализации.ТипПерсональныхДанных);
			КонецЕсли;
			
			ПараметрыФискализации.ТекущееСостояние.ПараметрыXML = ПолучитьXMLПакетДляОперации(ПараметрыОперации, ПараметрыПодключения.РевизияИнтерфейса);
			
		ИначеЕсли ПараметрыПодключения.ТипОборудования = "ПринтерЧеков" Тогда
			
			ПараметрыОперации = СформироватьШаблонЧека(ПараметрыОперации, ПараметрыПодключения.ТипОборудования, , ПараметрыПодключения.ИдентификаторУстройства);
			ТекстЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.СформироватьТекстНефискальногоЧека(ПараметрыОперации, ПараметрыПодключения.ШиринаСтроки);
			ПараметрыФискализации.ТестовыеЧеки = ПолучитьXMLПакетДляТекста(ТекстЧека, ПараметрыПодключения.РевизияИнтерфейса);
			
		КонецЕсли;
		
		Если ПараметрыОперации.НефискальныеДокументы <> Неопределено И ПараметрыОперации.НефискальныеДокументы.Количество() > 0 Тогда
			Если ПараметрыФискализации.ТестовыеЧеки = Неопределено Тогда
				ПараметрыФискализации.ТестовыеЧеки = Новый Массив();
			КонецЕсли;
			ШиринаСтроки = ?(ЗначениеЗаполнено(ПараметрыФискализации.ШиринаСтроки), ПараметрыФискализации.ШиринаСтроки, ПараметрыПодключения.ШиринаСтроки);
			ЗаполнитьXMLПакетыДляТекстовогоДокумента(
				ПараметрыФискализации.ТестовыеЧеки, 
				ПараметрыОперации.НефискальныеДокументы, 
				ПараметрыПодключения, 
				ШиринаСтроки);
		КонецЕсли;
		
		Возврат ПараметрыФискализации;
		
		
	ИначеЕсли Команда = "PrintText" Тогда
		
		ДанныеОперации.Вставить("ТестовыеЧеки", ПолучитьXMLПакетДляТекста(ПараметрыОперации.СтрокиТекста, ПараметрыПодключения.РевизияИнтерфейса));
		Возврат ДанныеОперации;
		
	ИначеЕсли Команда = "PrintQRCode" Тогда
		
		ТестовыйЧек = Новый Массив();
		Если Не ПустаяСтрока(ПараметрыОперации.QRКод.ЗначениеКода) Тогда
			
			СтрокаЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыТекстовойСтрокиЧека();
			ТестовыйЧек.Добавить(СтрокаЧека);
			
			СтрокаЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыШтрихкодВСтрокеЧека("QR", ПараметрыОперации.QRКод.ЗначениеКода);
			ТестовыйЧек.Добавить(СтрокаЧека);
			
			СтрокаЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыТекстовойСтрокиЧека();
			ТестовыйЧек.Добавить(СтрокаЧека);
				
			Если Не ПустаяСтрока(ПараметрыОперации.ТипПлатежнойСистемы) Тогда
				СтрокаЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыТекстовойСтрокиЧека(ПараметрыОперации.ТипПлатежнойСистемы);
				СтрокаЧека.Выравнивание = "Центр";
				ТестовыйЧек.Добавить(СтрокаЧека);
			КонецЕсли;
			
			СтрокаЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыТекстовойСтрокиЧека(ПараметрыОперации.QRКод.ТекстПользователя);
			СтрокаЧека.Выравнивание = "Центр";
			ТестовыйЧек.Добавить(СтрокаЧека);
			
			Если ЗначениеЗаполнено(ПараметрыОперации.СуммаОперации) Тогда
				ФорматЧисла = "ЧРД=.;ЧЦ=12;ЧДЦ=2;ЧН=0.00;ЧГ=0";
				ТекстСуммаОперации = СтрШаблон(НСтр("ru='Сумма операции: %1'"), Формат(ПараметрыОперации.СуммаОперации, ФорматЧисла));
				СтрокаЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыТекстовойСтрокиЧека(ТекстСуммаОперации);
				СтрокаЧека.Выравнивание = "Центр";
				ТестовыйЧек.Добавить(СтрокаЧека);
			КонецЕсли;
			
			СтрокаЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыТекстовойСтрокиЧека();
			ТестовыйЧек.Добавить(СтрокаЧека);
		КонецЕсли;
		
		НефискальныеДокументы = Новый Массив();
		НефискальныеДокументы.Добавить(ТестовыйЧек);
		
		ТестовыеЧеки =  Новый Массив();
		ЗаполнитьXMLПакетыДляТекстовогоДокумента(
			ТестовыеЧеки, НефискальныеДокументы, 
			ПараметрыПодключения, 
			ПараметрыПодключения.ШиринаСтроки);
		ДанныеОперации.Вставить("ТестовыеЧеки", ТестовыеЧеки);
		
		Возврат ДанныеОперации;
		
	ИначеЕсли Команда = "OpenShift"  Тогда
		
		ДанныеОперации = ПараметрыФискальнойОперации();
		Если ПараметрыОперации.Свойство("ДополнительныеПараметры") Тогда
			ДанныеОперации.ДополнительныеПараметры = ПараметрыОперации.ДополнительныеПараметры;
		КонецЕсли;
		 
		Если Не ПередОткрытиемКассовойСмены(ПараметрыПодключения, ДанныеОперации) Тогда
			Возврат ДанныеОперации;
		КонецЕсли;
			
		Если ПараметрыПодключения.ТипОборудования = "ККТ" Тогда
			ДанныеОперации.ПараметрыXML = ПолучитьXMLПакетДляОперации(ПараметрыОперации, ПараметрыПодключения.РевизияИнтерфейса);
		ИначеЕсли ПараметрыПодключения.ТипОборудования = "ПринтерЧеков" Тогда
			ТекстЧека = НСтр("ru='НЕФИСКАЛЬНЫЙ РЕЖИМ'");
			ТекстЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.СформироватьТекстНефискальногоДокумента(5, ПараметрыОперации, ПараметрыПодключения.ШиринаСтроки); 
			ДанныеОперации.ТестовыеЧеки = ПолучитьXMLПакетДляТекста(ТекстЧека, ПараметрыПодключения.РевизияИнтерфейса);
		КонецЕсли;
		
		ДанныеОперации.ПринтерДляПечати = ПараметрыПодключения.ИдентификаторУстройства.ПринтерДляПечати;
		
		Возврат ДанныеОперации;
		
	ИначеЕсли Команда = "CloseShift" Тогда
		
		ДанныеОперации = ПараметрыФискальнойОперации();
		Если ПараметрыОперации.Свойство("ДополнительныеПараметры") Тогда
			ДанныеОперации.ДополнительныеПараметры = ПараметрыОперации.ДополнительныеПараметры;
		КонецЕсли;
		
		Если Не ПередЗакрытиемКассовойСмены(ПараметрыПодключения, ДанныеОперации) Тогда
			Возврат ДанныеОперации;
		КонецЕсли;
		
		Если ПараметрыПодключения.ТипОборудования = "ККТ" Тогда
			ДанныеОперации.ПараметрыXML = ПолучитьXMLПакетДляОперации(ПараметрыОперации, ПараметрыПодключения.РевизияИнтерфейса);
		ИначеЕсли ПараметрыПодключения.ТипОборудования = "ПринтерЧеков" Тогда
			ТекстЧека = НСтр("ru='НЕФИСКАЛЬНЫЙ РЕЖИМ'");
			ТекстЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.СформироватьТекстНефискальногоДокумента(1, ПараметрыОперации, ПараметрыПодключения.ШиринаСтроки); 
			ДанныеОперации.ТестовыеЧеки = ПолучитьXMLПакетДляТекста(ТекстЧека, ПараметрыПодключения.РевизияИнтерфейса);
		КонецЕсли;
		
		ДанныеОперации.ПринтерДляПечати = ПараметрыПодключения.ИдентификаторУстройства.ПринтерДляПечати;
		
		Возврат ДанныеОперации;
		
	ИначеЕсли Команда = "ReportCurrentStatusOfSettlements" Или Команда = "GetCurrentStatus"  Тогда
		
		Если ПараметрыОперации = Неопределено Тогда
			ПараметрыОперации = Новый Структура();
		КонецЕсли;
		
		ДанныеОперации = ПараметрыФискальнойОперации();
		ДанныеОперации.ПараметрыXML = ПолучитьXMLПакетДляОперации(ПараметрыОперации, ПараметрыПодключения.РевизияИнтерфейса);
		Возврат ДанныеОперации;
		
	ИначеЕсли Команда = "PrintXReport"  Тогда
		
		Если ПараметрыОперации = Неопределено Тогда
			ПараметрыОперации = Новый Структура();
		КонецЕсли;
		
		ДанныеОперации = ПараметрыФискальнойОперации();
		
		Если ПараметрыПодключения.ТипОборудования = "ККТ" Тогда
			
			ДанныеОперации.ПараметрыXML = ПолучитьXMLПакетДляОперации(ПараметрыОперации, ПараметрыПодключения.РевизияИнтерфейса);
			
		ИначеЕсли ПараметрыПодключения.ТипОборудования = "ПринтерЧеков" Тогда
			ТекстЧека = НСтр("ru='НЕФИСКАЛЬНЫЙ РЕЖИМ'");
			ТекстЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.СформироватьТекстНефискальногоДокумента(4, ПараметрыОперации, ПараметрыПодключения.ШиринаСтроки); 
			ДанныеОперации.ТестовыеЧеки = ПолучитьXMLПакетДляТекста(ТекстЧека, ПараметрыПодключения.РевизияИнтерфейса);
		КонецЕсли;
		
		ДанныеОперации.ПринтерДляПечати = ПараметрыПодключения.ИдентификаторУстройства.ПринтерДляПечати;
	
		Возврат ДанныеОперации;
		
	ИначеЕсли Команда = "Encash" Тогда
		
		ПараметрыФискализации = ПараметрыФискализацииЧека();
		Если ПараметрыОперации.ТипИнкассации = 0 Тогда
			ПараметрыФискализации.ТипДокумента = Перечисления.ТипыФискальныхДокументовККТ.Выемка
		Иначе
			ПараметрыФискализации.ТипДокумента = Перечисления.ТипыФискальныхДокументовККТ.Внесение
		КонецЕсли;
		ПараметрыФискализации.ТипИнкассации = ПараметрыОперации.ТипИнкассации; 
		
		Если ПараметрыПодключения.ТипОборудования = "ККТ" Тогда
			
			ПараметрыРегистрации = ПараметрыРегистрацииУстройства(ПараметрыПодключения.ИдентификаторУстройства);
			
			ПараметрыФискализации.РегистрационныйНомерККТ = ?(ПараметрыРегистрации.Свойство("РегистрационныйНомерККТ"), ПараметрыРегистрации.РегистрационныйНомерККТ, "");
			ПараметрыФискализации.ШиринаСтроки      = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32);
			ПараметрыФискализации.РевизияИнтерфейса = ПараметрыПодключения.РевизияИнтерфейса;
			
			Если ПараметрыОперации.Свойство("ДокументОснование") Тогда 
				ПараметрыФискализации.ДокументОснование = ПараметрыОперации.ДокументОснование;
			КонецЕсли;
			Если ПараметрыОперации.Свойство("Кассир") Тогда
				ПараметрыФискализации.Кассир = ПараметрыОперации.Кассир;
			КонецЕсли;
			Если ПараметрыОперации.Свойство("Организация") Тогда
				ПараметрыФискализации.Организация = ПараметрыОперации.Организация;
			КонецЕсли;
			Если ПараметрыОперации.Свойство("ТорговыйОбъект") Тогда
				ПараметрыФискализации.ТорговыйОбъект = ПараметрыОперации.ТорговыйОбъект;
			КонецЕсли;
			ПараметрыФискализации.СуммаЧека      = ПараметрыОперации.Сумма;
			ПараметрыФискализации.ОплатаНаличные = ПараметрыОперации.Сумма;
			ПараметрыФискализации.ДанныеЧекаXML  = ПолучитьXMLПакетДляОперации(ПараметрыОперации, ПараметрыПодключения.РевизияИнтерфейса);
			
		ИначеЕсли ПараметрыПодключения.ТипОборудования = "ПринтерЧеков" Тогда
			
			ТекстЧека = НСтр("ru='НЕФИСКАЛЬНЫЙ РЕЖИМ'") + Символы.ПС;
			ТекстЧека = ТекстЧека + НСтр("ru='СУММА ='") + Символы.НПП + Формат(ПараметрыОперации.Сумма, "ЧРД=.;ЧЦ=12;ЧДЦ=2;ЧН=0.00;ЧГ=0");
			ТекстЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.СформироватьТекстНефискальногоДокумента(?(ПараметрыОперации.ТипИнкассации = 1, 2, 3), 
				ПараметрыОперации,  ПараметрыПодключения.ШиринаСтроки, ТекстЧека);
			ПараметрыФискализации.ТестовыеЧеки = ПолучитьXMLПакетДляТекста(ТекстЧека, ПараметрыПодключения.РевизияИнтерфейса);
			
		КонецЕсли;
		
		ПараметрыФискализации.ПринтерДляПечати = ПараметрыПодключения.ИдентификаторУстройства.ПринтерДляПечати;
		
		Возврат ПараметрыФискализации;
		
	ИначеЕсли Команда = "OperationFN" Тогда
		
		ДанныеОперации = ПараметрыФискальнойОперации();
		ДанныеОперации.Вставить("ТипОперации", ПараметрыОперации.ТипОперации);
		РевизияИнтерфейса  = ПараметрыПодключения.РевизияИнтерфейса;
		ДанныеОперации.ПараметрыXML = СформироватьТаблицуПараметровДляОперацииФН(ПараметрыОперации, РевизияИнтерфейса);
		Возврат ДанныеОперации;
		
	
	КонецЕсли
	
КонецФункции

// Обработать данные операции после выполнения команды.
// 
// Параметры:
//  ПараметрыПодключения - Структура - см. МенеджерОборудованияКлиентСервер.ПараметрыПодключения()
//  Команда - Строка - команда для выполнения
//  РезультатВыполнения - Структура - 
//  ДанныеОперации - Структура - 
Процедура ОбработатьДанныеОперации(ПараметрыПодключения, Команда, РезультатВыполнения, ДанныеОперации) Экспорт
	
	РевизияИнтерфейса = ПараметрыПодключения.РевизияИнтерфейса;
	
	Если Команда = "CheckFiscalization" Тогда
		
		Если ПараметрыПодключения.ИдентификаторОбъекта = "ОнлайнКасса" Тогда
			ДанныеОтвета = РезультатВыполнения.РезультатОперации.ДанныеОтвета;
			
			РезультатВыполнения.Вставить("НомерСменыККТ" , ДанныеОтвета.result.numberShift);
			РезультатВыполнения.Вставить("НомерЧекаККТ"  , ДанныеОтвета.result.number);
			РезультатВыполнения.Вставить("СтатусСмены", 2);
			РезультатВыполнения.Вставить("ДатаВремяЧека"          , ДанныеОтвета.result.date);
			РезультатВыполнения.Вставить("ФискальныйПризнак"      , ДанныеОтвета.result.ofmResponse.fields.ФискальныйПризнакДокумента);
			РезультатВыполнения.Вставить("АдресСайтаПроверки"     , "");
			РезультатВыполнения.Вставить("РегистрационныйНомерККТ", ДанныеОтвета.result.ofmResponse.fields.РегистрационныйНомерККМ);
			РезультатВыполнения.Вставить("ДанныеЧекаXML"          , ДанныеОперации.ДанныеЧекаXML);
			РезультатВыполнения.Вставить("ОперацияЗаписана"       , Истина);
			РезультатВыполнения.Вставить("ПараметрыФискализации"  , ДанныеОперации);
			РезультатВыполнения.Вставить("Организация"  		  , РезультатВыполнения.ИдентификаторУстройства.Организация);
			РезультатВыполнения.Вставить("ТорговыйОбъект"  		  , РезультатВыполнения.ПараметрыФискализации.ДокументОснование.Склад);
			
			ЗаполнитьЗначенияСвойств(ДанныеОперации, РезультатВыполнения);
		Иначе
			Если РевизияИнтерфейса >= 3000 Тогда // Версия стандарта 3.0 (ОФД 1.1)
				// Заполнить результаты фискализация чека из XML пакета.
				ЗаполнитьРезультатыФискализацияЧекаИзXMLПакета(ДанныеОперации);
			КонецЕсли;
			
			РезультатВыполнения.Вставить("НомерСменыККТ" , ДанныеОперации.НомерСменыККТ);
			РезультатВыполнения.Вставить("НомерЧекаККТ"  , ДанныеОперации.НомерЧекаККТ);
			РезультатВыполнения.Вставить("СтатусСмены", 2);
			РезультатВыполнения.Вставить("ДатаВремяЧека"          , ДанныеОперации.ДатаВремяЧека);
			РезультатВыполнения.Вставить("ФискальныйПризнак"      , ДанныеОперации.ФискальныйПризнак);
			РезультатВыполнения.Вставить("АдресСайтаПроверки"     , ДанныеОперации.АдресСайтаПроверки);
			РезультатВыполнения.Вставить("РегистрационныйНомерККТ", ДанныеОперации.РегистрационныйНомерККТ);
			РезультатВыполнения.Вставить("ДанныеЧекаXML"          , ДанныеОперации.ДанныеЧекаXML);
			РезультатВыполнения.Вставить("ОперацияЗаписана"       , Истина);
			РезультатВыполнения.Вставить("ПараметрыФискализации"  , ДанныеОперации);
			
		КонецЕсли;
		
		Попытка
			// Записать фискальную операцию.
			ЗаписатьФискальнуюОперацию(ДанныеОперации);
		Исключение
			РезультатВыполнения.ОперацияЗаписана = Ложь;
		КонецПопытки;
		
		// отправить электронный чек через рассылку
		Если (ДанныеОперации.Отправляет1СSMS Или ДанныеОперации.Отправляет1СEmail) Тогда
			
			МодульРассылкаЭлектронныхЧеков = ОбщегоНазначения.ОбщийМодуль("РассылкаЭлектронныхЧеков");
			МодульРассылкаЭлектронныхЧековВызовСервера = ОбщегоНазначения.ОбщийМодуль("РассылкаЭлектронныхЧековВызовСервера");
			Если МодульРассылкаЭлектронныхЧеков <> Неопределено Тогда
				
				ТекстСообщения = РассылкаЭлектронныхЧеков.ШаблонАтрибутовЧекаДляОтсылки(ДанныеОперации);
				РассылкаЭлектронныхЧековВызовСервера.НачатьОтправкуЭлектронногоЧека(
					ДанныеОперации,
					ТекстСообщения, 
					ДанныеОперации.ПокупательEmail, 
					ДанныеОперации.ПокупательНомер);
			КонецЕсли;
			
		КонецЕсли;
		
		
	ИначеЕсли Команда = "PrintReceiptCorrection" Тогда
		
		// Заполнить результаты фискализация чека из XML пакета.
		ЗаполнитьРезультатыФискализацияЧекаИзXMLПакета(ДанныеОперации); 
		
		РезультатВыполнения.Вставить("НомерСменыККТ" , ДанныеОперации.НомерСменыККТ);
		РезультатВыполнения.Вставить("НомерЧекаККТ"  , ДанныеОперации.НомерЧекаККТ);
		РезультатВыполнения.Вставить("СтатусСмены", 2);
		РезультатВыполнения.Вставить("ДатаВремяЧека"          , ДанныеОперации.ДатаВремяЧека);
		РезультатВыполнения.Вставить("ФискальныйПризнак"      , ДанныеОперации.ФискальныйПризнак);
		РезультатВыполнения.Вставить("АдресСайтаПроверки"     , ДанныеОперации.АдресСайтаПроверки);
		РезультатВыполнения.Вставить("РегистрационныйНомерККТ", ДанныеОперации.РегистрационныйНомерККТ);
		РезультатВыполнения.Вставить("ДанныеЧекаXML"          , ДанныеОперации.ДанныеЧекаXML);
		РезультатВыполнения.Вставить("ОперацияЗаписана"       , Истина);
		РезультатВыполнения.Вставить("ПараметрыФискализации"  , ДанныеОперации);

		Попытка
			// Записать фискальную операцию.
			ЗаписатьФискальнуюОперацию(ДанныеОперации);
		Исключение
			РезультатВыполнения.ОперацияЗаписана = Ложь;
		КонецПопытки;
		
	ИначеЕсли Команда = "CloseShift" Тогда
		
		Если ПараметрыПодключения.ИдентификаторОбъекта = "ОнлайнКасса" Тогда
			ОтветОФД = РезультатВыполнения.РезультатОперации.ДанныеОтвета.result;
			РезультатВыполнения.Вставить("НомерСменыККТ" , ОтветОФД.ofmResponse.fields.НомерСмены);
			РезультатВыполнения.Вставить("НомерЧекаККТ"  , ОтветОФД.ofmResponse.fields.НомерФД);
			РезультатВыполнения.Вставить("СтатусСмены"   , 1);
			РезультатВыполнения.Вставить("КассоваяСмена" , ДанныеОперации.КассоваяСмена);
			РезультатВыполнения.Вставить("ИдентификаторСмены", ДанныеОперации.ИдентификаторСмены); 
			
		Иначе
			РезультатВыполнения.Вставить("НомерСменыККТ", ДанныеОперации.НомерСменыККТ);
			РезультатВыполнения.Вставить("НомерЧекаККТ" , ДанныеОперации.НомерЧекаККТ);
			РезультатВыполнения.Вставить("СтатусСмены"  , ДанныеОперации.СтатусСмены);
			РезультатВыполнения.Вставить("КассоваяСмена" , ДанныеОперации.КассоваяСмена);
			
			Если РевизияИнтерфейса >= 3000 Тогда // Версия стандарта 3.0 (ОФД 1.1)
				ФискальныеДанныеСтруктура = ПолучитьПараметрыСменыИзXMLПакета(ДанныеОперации.РезультатXML, РевизияИнтерфейса);
				РезультатВыполнения.НомерСменыККТ = ФискальныеДанныеСтруктура.НомерСменыККТ;
				РезультатВыполнения.НомерЧекаККТ = ФискальныеДанныеСтруктура.НомерЧекаККТ;
				РезультатВыполнения.СтатусСмены = ФискальныеДанныеСтруктура.СтатусСмены;
			Иначе
				ФискальныеДанныеСтруктура = ПолучитьПараметрыСменыИзXMLПакета(ДанныеОперации.РезультатXML);
				ФискальныеДанныеСтруктура.НомерСменыККТ = ДанныеОперации.НомерСменыККТ;
				ФискальныеДанныеСтруктура.СтатусСмены   = 1; // Закрыта
			КонецЕсли;
				
			РезультатВыполнения.Вставить("ФискальныеДанныеСтруктура", ФискальныеДанныеСтруктура);
			РезультатВыполнения.Вставить("ФискальныеДанныеXMLСтрока", ДанныеОперации.РезультатXML);
			Если ДанныеОперации.Свойство("ДополнительныеПараметры") Тогда
				РезультатВыполнения.Вставить("ДополнительныеПараметры", ДанныеОперации.ДополнительныеПараметры);
			КонецЕсли;
		КонецЕсли;
		
		ПослеЗакрытияКассовойСмены(ПараметрыПодключения, РезультатВыполнения);
	
	ИначеЕсли Команда = "OpenShift" Тогда
		
		Если ПараметрыПодключения.ИдентификаторОбъекта = "ОнлайнКасса" Тогда
			ОтветОФД = РезультатВыполнения.РезультатОперации.ДанныеОтвета.result;
			РезультатВыполнения.Вставить("НомерСменыККТ" , ОтветОФД.ofmResponse.fields.НомерСмены);
			РезультатВыполнения.Вставить("НомерЧекаККТ"  , ОтветОФД.ofmResponse.fields.НомерФД);
			РезультатВыполнения.Вставить("СтатусСмены"   , 2);
			РезультатВыполнения.Вставить("ИдентификаторСмены", ДанныеОперации.ИдентификаторСмены); 
			//РезультатВыполнения.Вставить("КассоваяСмена" , ДанныеОперации.КассоваяСмена);
		Иначе
			РезультатВыполнения.Вставить("НомерСменыККТ" , ДанныеОперации.НомерСменыККТ);
			РезультатВыполнения.Вставить("НомерЧекаККТ"  , ДанныеОперации.НомерЧекаККТ);
			РезультатВыполнения.Вставить("СтатусСмены"   , ДанныеОперации.СтатусСмены);
			РезультатВыполнения.Вставить("КассоваяСмена" , ДанныеОперации.КассоваяСмена);
			
			ФискальныеДанныеСтруктура = ПолучитьПараметрыСменыИзXMLПакета(ДанныеОперации.РезультатXML, РевизияИнтерфейса);
			РезультатВыполнения.НомерСменыККТ = ФискальныеДанныеСтруктура.НомерСменыККТ;
			РезультатВыполнения.НомерЧекаККТ = ФискальныеДанныеСтруктура.НомерЧекаККТ;
			РезультатВыполнения.СтатусСмены = ФискальныеДанныеСтруктура.СтатусСмены;
			РезультатВыполнения.Вставить("ФискальныеДанныеСтруктура", ФискальныеДанныеСтруктура);
			РезультатВыполнения.Вставить("ФискальныеДанныеXMLСтрока", ДанныеОперации.РезультатXML);
			Если ДанныеОперации.Свойство("ДополнительныеПараметры") Тогда
				РезультатВыполнения.Вставить("ДополнительныеПараметры", ДанныеОперации.ДополнительныеПараметры);
			КонецЕсли;
				
			Если ДанныеОперации.Свойство("ПараметрыККТ") И Не ПустаяСтрока(ДанныеОперации.ПараметрыККТ)  Тогда 
				ПараметрыККТ = ПараметрыИзXMLПакетаККТ(ДанныеОперации.ПараметрыККТ, РевизияИнтерфейса);
				РезультатВыполнения.Вставить("ПараметрыККТ" , ПараметрыККТ);     
				СохранитьПараметрыРегистрацииУстройства(ПараметрыПодключения.ИдентификаторУстройства, ПараметрыККТ);
				
				Если ПараметрыККТ.Свойство("ВерсияФФДККТ") И ПараметрыККТ.ВерсияФФДККТ <> "1.2" Тогда
					// Письмо Федеральной налоговой службы от 28 октября 2021 г. № ПА-4-20/15207@ О переходе ККТ на ФФД 1.2
					Если МенеджерОборудования.ВедетсяУчетПродукцииИСМП() Тогда
						ТекстСообщения = НСтр("ru='При осуществлении расчетов за маркированные товары необходимо перейти на ККТ с ФФД версии 1.2 в срок до 01.02.2022.'") + Символы.ПС 
						+ НСтр("ru='Письмо ФНС от 28 октября 2021 г. № ПА-4-20/15207@ «О переходе ККТ на ФФД 1.2»'"); 
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		ПослеОткрытияКассовойСмены(ПараметрыПодключения, РезультатВыполнения);
		
	ИначеЕсли Команда = "GetDataKKT" Тогда
		           
		ПараметрыККТ = ПараметрыИзXMLПакетаККТ(РезультатВыполнения.ПараметрыККТXML, РевизияИнтерфейса);
		РезультатВыполнения.Вставить("ПараметрыККТ" , ПараметрыККТ);
		               
		СохранитьПараметрыРегистрацииУстройства(ПараметрыПодключения.ИдентификаторУстройства, ПараметрыККТ);
		
	ИначеЕсли Команда = "GetCurrentStatus" Тогда
		
		Если РевизияИнтерфейса >= 3000 Тогда // Версия стандарта 3.0 (ОФД 1.1)
			ФискальныеДанныеСтруктура = ПолучитьПараметрыСменыИзXMLПакета(ДанныеОперации.РезультатXML, РевизияИнтерфейса);
			НомерСменыККТ  = ФискальныеДанныеСтруктура.НомерСменыККТ;
			НомерЧекаККТ   = ФискальныеДанныеСтруктура.НомерЧекаККТ;
			СтатусСмены = ФискальныеДанныеСтруктура.СтатусСмены;     
		Иначе
			ФискальныеДанныеСтруктура = ПолучитьПараметрыСостоянияИзXMLПакета(ДанныеОперации.РезультатXML);
			НомерСменыККТ  = ДанныеОперации.НомерСменыККТ;
			НомерЧекаККТ   = ДанныеОперации.НомерЧекаККТ;
			СтатусСмены = ДанныеОперации.СтатусСмены;
		КонецЕсли;
		РезультатВыполнения.Вставить("НомерСменыККТ" , НомерСменыККТ);
		РезультатВыполнения.Вставить("НомерЧекаККТ"  , НомерЧекаККТ);
		РезультатВыполнения.Вставить("СтатусСмены", СтатусСмены);
		РезультатВыполнения.Вставить("ФискальныеДанные", ФискальныеДанныеСтруктура);
		
	
		
	ИначеЕсли Команда = "OperationFN" Тогда
		
		Если ДанныеОперации.Свойство("ПараметрыККТ") И Не ПустаяСтрока(ДанныеОперации.ПараметрыККТ)  Тогда 
			ПараметрыККТ = ПараметрыИзXMLПакетаККТ(ДанныеОперации.ПараметрыККТ, РевизияИнтерфейса);
			РезультатВыполнения.Вставить("ПараметрыККТ" , ПараметрыККТ);     
			СохранитьПараметрыРегистрацииУстройства(ПараметрыПодключения.ИдентификаторУстройства, ПараметрыККТ);
		КонецЕсли;
		
	КонецЕсли
	
КонецПроцедуры

#Область ПараметрыРегистрации

// Процедура предназначена для сохранения параметров регистрации устройства
// 
// Параметры:
//  Идентификатор - СправочникСсылка.ПодключаемоеОборудование - Идентификатор устройства - 
//  ПараметрыРегистрации - Структура -  
//
// Возвращаемое значение:
//  Булево.
Функция СохранитьПараметрыРегистрацииУстройства(Идентификатор, ПараметрыРегистрации) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ПодключаемоеОборудование.Ссылка
		|ИЗ
		|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
		|ГДЕ
		|	ПодключаемоеОборудование.Ссылка = &Идентификатор");
		
		Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
		РезультатЗапроса = Запрос.Выполнить();
		
		БлокировкаДанных = Новый БлокировкаДанных();
		ЭлементБлокировки = БлокировкаДанных.Добавить("Справочник.ПодключаемоеОборудование");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Идентификатор);
		БлокировкаДанных.Заблокировать();		
		
		ТаблицаРезультатов = РезультатЗапроса.Выгрузить();
		
		ОбъектСсылка = ТаблицаРезультатов[0].Ссылка;
		ОбъектСправочника = ОбъектСсылка.ПолучитьОбъект();
		ОбъектСправочника.ПараметрыРегистрации.Очистить();
		Для Каждого ПараметрРегистрации Из ПараметрыРегистрации Цикл
			НоваяСтрока = ОбъектСправочника.ПараметрыРегистрации.Добавить();
			НоваяСтрока.НаименованиеПараметра = ПараметрРегистрации.Ключ;
			НоваяСтрока.ЗначениеПараметра = ПараметрРегистрации.Значение;
		КонецЦикла;
		ОбъектСправочника.Записать();
		Результат = Истина;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Результат = Ложь;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;

КонецФункции

// Функция возвращает по идентификатору устройства параметры регистрации.
// 
// Параметры:
//  Идентификатор - Идентификатор устройства - 
//
// Возвращаемое значение:
//  Структура.
//
Функция ПараметрыРегистрацииУстройства(Идентификатор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодключаемоеОборудование.Ссылка КАК Ссылка,
		|	ПодключаемоеОборудованиеПараметрыРегистрации.НаименованиеПараметра КАК НаименованиеПараметра,
		|	ПодключаемоеОборудованиеПараметрыРегистрации.ЗначениеПараметра КАК ЗначениеПараметра
		|ИЗ
		|	Справочник.ПодключаемоеОборудование.ПараметрыРегистрации КАК ПодключаемоеОборудованиеПараметрыРегистрации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
		|		ПО ПодключаемоеОборудованиеПараметрыРегистрации.Ссылка = ПодключаемоеОборудование.Ссылка
		|ГДЕ
		|	(ПодключаемоеОборудование.Ссылка = &Идентификатор)";
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ЕстьДанные = Ложь;
	ДанныеХранения = Новый Структура();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		ДанныеХранения.Вставить(ВыборкаДетальныеЗаписи.НаименованиеПараметра, ВыборкаДетальныеЗаписи.ЗначениеПараметра);
		ЕстьДанные = Истина;
	КонецЦикла;
	
	РезультатОперации = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыРегистрацииККТ();
	РезультатОперации.Вставить("ЕстьДанные", ЕстьДанные);
	
	Если ЕстьДанные Тогда
		РезультатОперации.РегистрационныйНомерККТ = ДанныеХранения.РегистрационныйНомерККТ;
		РезультатОперации.ОрганизацияНазвание     = ДанныеХранения.ОрганизацияНазвание;
		РезультатОперации.ОрганизацияИНН          = ДанныеХранения.ОрганизацияИНН;
		
		Если ДанныеХранения.Свойство("АдресПроведенияРасчетов") Тогда
			РезультатОперации.АдресПроведенияРасчетов = ДанныеХранения.АдресПроведенияРасчетов; 
		КонецЕсли;
		Если ДанныеХранения.Свойство("МестоПроведенияРасчетов") Тогда
			РезультатОперации.МестоПроведенияРасчетов = ДанныеХранения.МестоПроведенияРасчетов; 
		КонецЕсли;
		
		РезультатОперации.КодСистемыНалогообложения = ДанныеХранения.КодСистемыНалогообложения;
		Если ДанныеХранения.Свойство("ПризнакПлательщикаНДС") Тогда
			РезультатОперации.ПризнакПлательщикаНДС = Булево(ДанныеХранения.ПризнакПлательщикаНДС);
		КонецЕсли;
		
		Если ДанныеХранения.Свойство("ПризнакАвтономногоРежима") И НЕ ПустаяСтрока(ДанныеХранения.ПризнакАвтономногоРежима) Тогда
			РезультатОперации.ПризнакАвтономногоРежима = Булево(ДанныеХранения.ПризнакАвтономногоРежима); 
		КонецЕсли;
		
		

		РезультатОперации.ОрганизацияОФДИНН      = ДанныеХранения.ОрганизацияОФДИНН;
		РезультатОперации.ОрганизацияОФДНазвание = ДанныеХранения.ОрганизацияОФДНазвание;
		Если ДанныеХранения.Свойство("ПризнакФискализации") И НЕ ПустаяСтрока(ДанныеХранения.ПризнакФискализации) Тогда
			РезультатОперации.ПризнакФискализации = Булево(ДанныеХранения.ПризнакФискализации); 
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// Обновляет параметры регистрации ККТ
//
// Параметры:
//   ПараметрыРегистрацииТаблица - ТаблицаЗначений - 
//   ПараметрыРегистрации - ТаблицаЗначений - 
Процедура ОбновитьПараметрыРегистрацииККТ(ПараметрыРегистрацииТаблица, ПараметрыРегистрации) Экспорт
	
	Для Каждого ПараметрРегистрации Из ПараметрыРегистрации Цикл
		
		Параметр = ПараметрыРегистрацииТаблица.Добавить();
		НаименованиеПараметра = ПараметрРегистрации.НаименованиеПараметра;
		ЗначениеПараметра     = ПараметрРегистрации.ЗначениеПараметра;
		
		Если НаименованиеПараметра = "РегистрационныйНомерККТ" Тогда
			НаименованиеПараметра = НСтр("ru='Регистрационный номер ККТ'")
		ИначеЕсли НаименованиеПараметра = "ОрганизацияНазвание" Тогда
			НаименованиеПараметра = НСтр("ru='Название организации'")
		ИначеЕсли НаименованиеПараметра = "ОрганизацияИНН" Тогда
			НаименованиеПараметра = НСтр("ru='ИНН организации'")
		ИначеЕсли НаименованиеПараметра = "АдресПроведенияРасчетов" Тогда
			НаименованиеПараметра = НСтр("ru='Адрес проведения расчетов'")
		ИначеЕсли НаименованиеПараметра = "КодСистемыНалогообложения" Тогда
			НаименованиеПараметра = НСтр("ru='Система налогообложения'");
			ЗначениеПараметра = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.НаименованиеСистемыНалогообложения(Число(ЗначениеПараметра));
	
		ИначеЕсли НаименованиеПараметра = "ПризнакАвтономногоРежима" Тогда
			НаименованиеПараметра = НСтр("ru='Автономный режим'")
		ИначеЕсли НаименованиеПараметра = "ОрганизацияОФДИНН" Тогда
			НаименованиеПараметра = НСтр("ru='ОФД ИНН'")
		ИначеЕсли НаименованиеПараметра = "ОрганизацияОФДНазвание" Тогда
			НаименованиеПараметра = НСтр("ru='Наименование ОФД'")
		ИначеЕсли НаименованиеПараметра = "ЗаводскойНомерККТ" Тогда
			НаименованиеПараметра = НСтр("ru='Заводской номер ККТ'")
		ИначеЕсли НаименованиеПараметра = "ПризнакФискализации" Тогда
			НаименованиеПараметра = НСтр("ru='Признак фискализации'")
		ИначеЕсли НаименованиеПараметра = "МестоПроведенияРасчетов" Тогда
			НаименованиеПараметра = НСтр("ru='Место проведения расчетов'")
		ИначеЕсли НаименованиеПараметра = "ПризнакПлательщикаНДС" Тогда
			НаименованиеПараметра = НСтр("ru='Признак плательщика НДС'")
		ИначеЕсли НаименованиеПараметра = "ОтправительEmail" Тогда
			НаименованиеПараметра = НСтр("ru='Адрес электронной почты отправителя чека'");
		ИначеЕсли НаименованиеПараметра = "АдресСайтаОФД" Тогда
			НаименованиеПараметра = НСтр("ru='Адрес сайта ОФД в сети «Интернет»'");
		КонецЕсли;
			
		Параметр.НаименованиеПараметра = НаименованиеПараметра;
		Параметр.ЗначениеПараметра     = ЗначениеПараметра;
	КонецЦикла;
	
КонецПроцедуры


		
#КонецОбласти

#Область ФискальныеОперации

// Записать операцию в журнал фискальных операций.
//
// Параметры:
//   ПараметрыФискализации - Структура - 
Процедура ЗаписатьФискальнуюОперацию(ПараметрыФискализации) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПустаяСтрока(ПараметрыФискализации.ИдентификаторФискальнойЗаписи) Тогда
		ИдентификаторЗаписи = Строка(Новый УникальныйИдентификатор);
	Иначе
		ИдентификаторЗаписи = ПараметрыФискализации.ИдентификаторФискальнойЗаписи;
	КонецЕсли;
	// ФискальныеОперации
	НаборЗаписей = РегистрыСведений.ФискальныеОперации.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументОснование.Установить(ПараметрыФискализации.ДокументОснование, Истина);
	НаборЗаписей.Отбор.ИдентификаторЗаписи.Установить(ИдентификаторЗаписи, Истина);
	
	НоваяСтрока = НаборЗаписей.Добавить();
	НоваяСтрока.Дата = ПараметрыФискализации.ДатаВремяЧека;
	НоваяСтрока.ИдентификаторЗаписи = ИдентификаторЗаписи;
	НоваяСтрока.ДокументОснование = ПараметрыФискализации.ДокументОснование;
	НоваяСтрока.ФискальныйПризнак = ПараметрыФискализации.ФискальныйПризнак;
	НоваяСтрока.ТипДокумента      = ПараметрыФискализации.ТипДокумента; 
	НоваяСтрока.Организация       = ПараметрыФискализации.Организация;
	НоваяСтрока.ТорговыйОбъект    = ПараметрыФискализации.ТорговыйОбъект;
	НоваяСтрока.ТипРасчета        = ПараметрыФискализации.ТипРасчета;
	НоваяСтрока.НомерСменыККМ     = ПараметрыФискализации.НомерСменыККТ;
	НоваяСтрока.НомерЧекаККМ      = ПараметрыФискализации.НомерЧекаККТ;
	НоваяСтрока.Сумма            = ПараметрыФискализации.СуммаЧека;
	НоваяСтрока.ОплатаНаличные   = ПараметрыФискализации.ОплатаНаличные;
	НоваяСтрока.ОплатаЭлектронно = ПараметрыФискализации.ОплатаЭлектронно;
	НоваяСтрока.ОплатаПостоплата = ПараметрыФискализации.ОплатаПостоплата;
	НоваяСтрока.ОплатаПредоплата = ПараметрыФискализации.ОплатаПредоплата;
	НоваяСтрока.ДополнительныйРеквизит  = ПараметрыФискализации.ДополнительныйРеквизит;
	НоваяСтрока.АдресСайтаПроверки      = ПараметрыФискализации.АдресСайтаПроверки;
	НоваяСтрока.РегистрационныйНомерККТ = ПараметрыФискализации.РегистрационныйНомерККТ; 
	НоваяСтрока.КорректируемыйДокумент  = ПараметрыФискализации.КорректируемыйДокумент;
	НоваяСтрока.СубъектПерсональныхДанных = ПараметрыФискализации.СубъектПерсональныхДанных;
	НоваяСтрока.ЕдиныйЧек                 = ПараметрыФискализации.ЕдиныйЧек;
	НоваяСтрока.ТипПлатежнойСистемы       = ПараметрыФискализации.ТипПлатежнойСистемы;
	НоваяСтрока.ИдентификаторОплатыПлатежнойСистемы  = ПараметрыФискализации.ИдентификаторОплатыПлатежнойСистемы;    
	Если ПараметрыФискализации.ДанныеЧекаXML <> Неопределено Тогда
		НоваяСтрока.ДанныеXML = Новый ХранилищеЗначения(ПараметрыФискализации.ДанныеЧекаXML);
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Получить данные журнала фискальных операций.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ-основание.
//  ИдентификаторЗаписи - РегистрСведенийЗапись.ФискальныеОперации - запись фискальной операции.
//  ТипыДокументов - ПеречислениеСсылка.ТипыФискальныхДокументовККТ - типы документов.
//  ТипРасчета - ПеречислениеСсылка.ТипыРасчетаДенежнымиСредствами - тип расчета.
// 
// Возвращаемое значение:
//  Структура - Структура по свойствами:
//   * НомерСменыККМ - Число - Номер чека ККМ.
//   * Сумма - Число - Сумма.
//   * ДокументОснование - ДокументСсылка - Документ-основание.
//   * ДанныеXML - ХранилищеЗначения - Данные чека, переданные в ККТ (XML).
//
Функция ДанныеФискальнойОперации(ДокументСсылка, ИдентификаторЗаписи = Неопределено, ТипыДокументов = Неопределено, ТипРасчета = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ФискальныеОперации.ИдентификаторЗаписи     КАК ИдентификаторЗаписи,  
	|	ФискальныеОперации.Дата                    КАК Дата,
	|	ФискальныеОперации.НомерЧекаККМ            КАК НомерЧекаККМ,
	|	ФискальныеОперации.НомерСменыККМ           КАК НомерСменыККМ,
	|	ФискальныеОперации.ТипДокумента            КАК ТипДокумента,
	|	ФискальныеОперации.ТипРасчета              КАК ТипРасчета,
	|	ФискальныеОперации.Организация             КАК Организация,
	|	ФискальныеОперации.ТорговыйОбъект          КАК ТорговыйОбъект,
	|	ФискальныеОперации.РегистрационныйНомерККТ КАК РегистрационныйНомерККТ,
	|	ФискальныеОперации.ДокументОснование       КАК ДокументОснование, 
	|	ФискальныеОперации.КорректируемыйДокумент  КАК КорректируемыйДокумент,
	|	ФискальныеОперации.Сумма                   КАК Сумма,         
	|	ФискальныеОперации.ФискальныйПризнак       КАК ФискальныйПризнак,
	|	ФискальныеОперации.ДополнительныйРеквизит  КАК ДополнительныйРеквизит, 
	|	ФискальныеОперации.ЕдиныйЧек               КАК ЕдиныйЧек,
	|	ФискальныеОперации.ИдентификаторОплатыПлатежнойСистемы КАК ИдентификаторОплатыПлатежнойСистемы,  
	|	ФискальныеОперации.ТипПлатежнойСистемы     КАК ТипПлатежнойСистемы,
	|	ФискальныеОперации.ДанныеXML               КАК ДанныеXML
	|ИЗ
	|	РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|ГДЕ
	|	(ФискальныеОперации.ДокументОснование = &ДокументСсылка)"
		+ ?(ИдентификаторЗаписи = Неопределено, "", " И (ФискальныеОперации.ИдентификаторЗаписи = &ИдентификаторЗаписи)")
		+ ?(ТипыДокументов = Неопределено, "", " И (ФискальныеОперации.ТипДокумента В (&ТипыДокументов))")
		+ ?(ТипРасчета = Неопределено, "", " И (ФискальныеОперации.ТипРасчета = &ТипРасчета)")
		+ " УПОРЯДОЧИТЬ ПО ФискальныеОперации.Дата УБЫВ, ФискальныеОперации.НомерСменыККМ УБЫВ");
		
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Если ИдентификаторЗаписи <> Неопределено Тогда
		Запрос.УстановитьПараметр("ИдентификаторЗаписи", ИдентификаторЗаписи);
	КонецЕсли;
	
	Если ТипыДокументов <> Неопределено Тогда
		// Подготовка типов документов для запроса.
		МассивТипыДокументов = Новый Массив();
		Если ТипЗнч(ТипыДокументов) = Тип("Массив") Тогда
			Для Каждого ТипДокумента Из ТипыДокументов Цикл
				МассивТипыДокументов.Добавить(ТипДокумента);
			КонецЦикла;
		Иначе
			МассивТипыДокументов.Добавить(ТипыДокументов);
		КонецЕсли;
		Запрос.УстановитьПараметр("ТипыДокументов", МассивТипыДокументов);
	КонецЕсли;
	
	Если ТипРасчета <> Неопределено Тогда
		Запрос.УстановитьПараметр("ТипРасчета", ТипРасчета);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ФискальнаяОперация = Новый Структура;
		ФискальнаяОперация.Вставить("ИдентификаторЗаписи");
		ФискальнаяОперация.Вставить("Дата");
		ФискальнаяОперация.Вставить("НомерЧекаККМ");
		ФискальнаяОперация.Вставить("НомерСменыККМ");
		ФискальнаяОперация.Вставить("РегистрационныйНомерККТ");
		ФискальнаяОперация.Вставить("ТипДокумента");
		ФискальнаяОперация.Вставить("ТипРасчета");
		ФискальнаяОперация.Вставить("Организация");
		ФискальнаяОперация.Вставить("ТорговыйОбъект");
		ФискальнаяОперация.Вставить("Сумма");
		ФискальнаяОперация.Вставить("ДокументОснование");
		ФискальнаяОперация.Вставить("КорректируемыйДокумент");
		ФискальнаяОперация.Вставить("ФискальныйПризнак");
		ФискальнаяОперация.Вставить("ДополнительныйРеквизит");  	
		ФискальнаяОперация.Вставить("ЕдиныйЧек");
		ФискальнаяОперация.Вставить("ДанныеXML");
		ФискальнаяОперация.Вставить("ИдентификаторОплатыПлатежнойСистемы"); 
		ФискальнаяОперация.Вставить("ТипПлатежнойСистемы"); 
		ЗаполнитьЗначенияСвойств(ФискальнаяОперация, Выборка);
		Возврат ФискальнаяОперация;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Получить данные журнала фискальных операций.
//
// Параметры:
//  ИдентификаторЗаписи - РегистрСведенийЗапись.ФискальныеОперации - Идентификатор записи.
// 
// Возвращаемое значение:
// РегистрСведенийЗапись.ФискальныеОперации.
Функция ФискальнаяОперацииПоИдентификатору(ИдентификаторЗаписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ФискальныеОперации.ИдентификаторЗаписи     КАК ИдентификаторЗаписи,
	|	ФискальныеОперации.Дата                    КАК Дата,
	|	ФискальныеОперации.НомерЧекаККМ            КАК НомерЧекаККМ,
	|	ФискальныеОперации.НомерСменыККМ           КАК НомерСменыККМ,
	|	ФискальныеОперации.ТипДокумента            КАК ТипДокумента,
	|	ФискальныеОперации.ТипРасчета              КАК ТипРасчета,
	|	ФискальныеОперации.Организация             КАК Организация,
	|	ФискальныеОперации.ТорговыйОбъект          КАК ТорговыйОбъект,
	|	ФискальныеОперации.РегистрационныйНомерККТ КАК РегистрационныйНомерККТ,
	|	ФискальныеОперации.ДокументОснование       КАК ДокументОснование, 
	|	ФискальныеОперации.КорректируемыйДокумент  КАК КорректируемыйДокумент,
	|	ФискальныеОперации.Сумма                   КАК Сумма, 
	|	ФискальныеОперации.ФискальныйПризнак       КАК ФискальныйПризнак,
	|	ФискальныеОперации.ДополнительныйРеквизит  КАК ДополнительныйРеквизит,     
	|	ФискальныеОперации.ЕдиныйЧек               КАК ЕдиныйЧек,
	|	ФискальныеОперации.ИдентификаторОплатыПлатежнойСистемы КАК ИдентификаторОплатыПлатежнойСистемы,  
	|	ФискальныеОперации.ТипПлатежнойСистемы     КАК ТипПлатежнойСистемы,
	|	ФискальныеОперации.ДанныеXML               КАК ДанныеXML
	|ИЗ
	|	РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|ГДЕ
	|	(ИдентификаторЗаписи = &ИдентификаторЗаписи)");
	
	Запрос.УстановитьПараметр("ИдентификаторЗаписи", ИдентификаторЗаписи);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ФискальнаяОперация = Новый Структура;
		ФискальнаяОперация.Вставить("ИдентификаторЗаписи");
		ФискальнаяОперация.Вставить("Дата");
		ФискальнаяОперация.Вставить("НомерЧекаККМ");
		ФискальнаяОперация.Вставить("НомерСменыККМ");
		ФискальнаяОперация.Вставить("РегистрационныйНомерККТ");
		ФискальнаяОперация.Вставить("ТипДокумента");
		ФискальнаяОперация.Вставить("ТипРасчета");
		ФискальнаяОперация.Вставить("Организация");
		ФискальнаяОперация.Вставить("ТорговыйОбъект");
		ФискальнаяОперация.Вставить("Сумма");
		ФискальнаяОперация.Вставить("ДокументОснование");
		ФискальнаяОперация.Вставить("КорректируемыйДокумент");
		ФискальнаяОперация.Вставить("ФискальныйПризнак");
		ФискальнаяОперация.Вставить("ДополнительныйРеквизит");
		ФискальнаяОперация.Вставить("ЕдиныйЧек");
		ФискальнаяОперация.Вставить("ДанныеXML");         
		ФискальнаяОперация.Вставить("ИдентификаторОплатыПлатежнойСистемы"); 
		ФискальнаяОперация.Вставить("ТипПлатежнойСистемы"); 
		ЗаполнитьЗначенияСвойств(ФискальнаяОперация, Выборка);
		Возврат ФискальнаяОперация;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Получить список журнала фискальных операций.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ-основание.
//  ТипыДокументов - ПеречислениеСсылка.ТипыФискальныхДокументовККТ - типы фискальных документов.
//  ТипРасчета - ПеречислениеСсылка.ТипыРасчетаДенежнымиСредствами - типы расчета.
// 
// Возвращаемое значение:
//  Структура - Структура по свойствами:
//   * НомерСменыККМ - Число - Номер чека ККМ.
//   * Сумма - Число - Сумма.
//   * ДокументОснование - ОпределяемыйТип.ОснованиеФискальнойОперацииБПО - Документ-основание.
//   * ДанныеXML - ХранилищеЗначения - Данные чека, переданные в ККТ (XML).
//
Функция СписокФискальныхОпераций(ДокументСсылка, ТипыДокументов = Неопределено, ТипРасчета = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ 
	|	ФискальныеОперации.ИдентификаторЗаписи     КАК ИдентификаторЗаписи,
	|	ФискальныеОперации.НомерЧекаККМ            КАК НомерЧекаККМ,
	|	ФискальныеОперации.НомерСменыККМ           КАК НомерСменыККМ,
	|	ФискальныеОперации.ТипДокумента            КАК ТипДокумента,
	|	ФискальныеОперации.ТипРасчета              КАК ТипРасчета,
	|	ФискальныеОперации.Организация             КАК Организация,
	|	ФискальныеОперации.ТорговыйОбъект          КАК ТорговыйОбъект,
	|	ФискальныеОперации.РегистрационныйНомерККТ КАК РегистрационныйНомерККТ,
	|	ФискальныеОперации.ДокументОснование       КАК ДокументОснование, 
	|	ФискальныеОперации.КорректируемыйДокумент  КАК КорректируемыйДокумент,
	|	ФискальныеОперации.Сумма                   КАК Сумма, 
	|	ФискальныеОперации.ФискальныйПризнак       КАК ФискальныйПризнак,
	|	ФискальныеОперации.ДополнительныйРеквизит  КАК ДополнительныйРеквизит,
	|	ФискальныеОперации.ДанныеXML               КАК ДанныеXML
	|ИЗ
	|	РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|ГДЕ
	|	(ФискальныеОперации.ДокументОснование = &ДокументСсылка)"
		+ ?(ТипыДокументов = Неопределено, "", " И (ФискальныеОперации.ТипДокумента В (&ТипыДокументов))")
		+ ?(ТипРасчета = Неопределено, "", " И (ФискальныеОперации.ТипРасчета = &ТипРасчета)")
		+ " УПОРЯДОЧИТЬ ПО ФискальныеОперации.Дата УБЫВ, ФискальныеОперации.НомерСменыККМ УБЫВ");
		
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Если ТипыДокументов <> Неопределено Тогда
		// Подготовка типов документов для запроса.
		МассивТипыДокументов = Новый Массив();
		Если ТипЗнч(ТипыДокументов) = Тип("Массив") Тогда
			Для Каждого ТипДокумента Из ТипыДокументов Цикл
				МассивТипыДокументов.Добавить(ТипДокумента);
			КонецЦикла;
		Иначе
			МассивТипыДокументов.Добавить(ТипыДокументов);
		КонецЕсли;
		Запрос.УстановитьПараметр("ТипыДокументов", МассивТипыДокументов);
	КонецЕсли;
	
	Если ТипРасчета <> Неопределено Тогда
		Запрос.УстановитьПараметр("ТипРасчета", ТипРасчета);
	КонецЕсли;
	
	СписокОпераций = Новый Массив(); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ФискальнаяОперация = Новый Структура;
		ФискальнаяОперация.Вставить("ИдентификаторЗаписи");
		ФискальнаяОперация.Вставить("НомерЧекаККМ");
		ФискальнаяОперация.Вставить("НомерСменыККМ");
		ФискальнаяОперация.Вставить("РегистрационныйНомерККТ");
		ФискальнаяОперация.Вставить("ТипДокумента");
		ФискальнаяОперация.Вставить("ТипРасчета");
		ФискальнаяОперация.Вставить("Организация");
		ФискальнаяОперация.Вставить("ТорговыйОбъект");
		ФискальнаяОперация.Вставить("Сумма");
		ФискальнаяОперация.Вставить("ДокументОснование");
		ФискальнаяОперация.Вставить("КорректируемыйДокумент");
		ФискальнаяОперация.Вставить("ФискальныйПризнак");
		ФискальнаяОперация.Вставить("ДополнительныйРеквизит");
		ФискальнаяОперация.Вставить("ДанныеXML");
		ЗаполнитьЗначенияСвойств(ФискальнаяОперация, Выборка);
		СписокОпераций.Добавить(ФискальнаяОперация);
	КонецЦикла;
	
	Возврат СписокОпераций;
	
КонецФункции

#КонецОбласти

#Область ОчередьЧековККТ 

// Добавить чек в очередь чеков ККТ.
//
// Параметры:
//  ПараметрыЧекаККТ - Структура - Параметры чека ККТ:
//  * ПозицииЧека - Массив из См. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыФискальнойСтрокиЧека - .
// 
// Возвращаемое значение:
//  РегистрСведенийЗапись.ОчередьЧековККТ.
Функция ДобавитьЧекВОчередьЧековККТ(ПараметрыЧекаККТ) Экспорт
	                                            
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		Если ПустаяСтрока(ПараметрыЧекаККТ.ИдентификаторФискальнойЗаписи) Тогда
			ИдентификаторЗаписи = Строка(Новый УникальныйИдентификатор);
		Иначе
			ИдентификаторЗаписи = ПараметрыЧекаККТ.ИдентификаторФискальнойЗаписи;
		КонецЕсли;
		
		Блокировка = Новый БлокировкаДанных();
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьЧековККТ");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("ДокументОснование", ПараметрыЧекаККТ.ДокументОснование);
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторЗаписи", ИдентификаторЗаписи);
		Блокировка.Заблокировать();
		
		// ОчередьЧековККТ
		НаборЗаписей = РегистрыСведений.ОчередьЧековККТ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументОснование.Установить(ПараметрыЧекаККТ.ДокументОснование, Истина);
		НаборЗаписей.Отбор.ИдентификаторЗаписи.Установить(ИдентификаторЗаписи, Истина);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			
			ФискальнаяОперации = ФискальнаяОперацииПоИдентификатору(ИдентификаторЗаписи);
			
			НоваяСтрока = НаборЗаписей.Добавить();
			Если ФискальнаяОперации <> Неопределено И Не ПустаяСтрока(ФискальнаяОперации.ФискальныйПризнак) Тогда
				НоваяСтрока.СтатусЧека = Перечисления.СтатусЧекаККТВОчереди.Фискализирован;
			Иначе
				НоваяСтрока.СтатусЧека = Перечисления.СтатусЧекаККТВОчереди.Новый;
			КонецЕсли;
			НоваяСтрока.Дата = ТекущаяДатаСеанса();
			НоваяСтрока.ИдентификаторЗаписи = ИдентификаторЗаписи;
			НоваяСтрока.ДокументОснование = ПараметрыЧекаККТ.ДокументОснование;
			НоваяСтрока.ТипДокумента      = Перечисления.ТипыФискальныхДокументовККТ.КассовыйЧек;
			НоваяСтрока.Организация       = ПараметрыЧекаККТ.Организация;
			НоваяСтрока.ОрганизацияИНН    = ПараметрыЧекаККТ.ОрганизацияИНН;
			НоваяСтрока.ТорговыйОбъект    = ПараметрыЧекаККТ.ТорговыйОбъект;         
			НоваяСтрока.СубъектПерсональныхДанных = ПараметрыЧекаККТ.СубъектПерсональныхДанных;
			НоваяСтрока.ТипРасчета        = ПараметрыЧекаККТ.ТипРасчета;
			Содержание = "";
			Сумма = 0;
			Для Каждого ПозицияЧека Из ПараметрыЧекаККТ.ПозицииЧека Цикл 
				Если ПозицияЧека.Свойство("ФискальнаяСтрока") Тогда
					Сумма = Сумма + ПозицияЧека.Сумма;
					Если Не ПустаяСтрока(Содержание) Тогда
						Содержание = Содержание + Символы.НПП + ПозицияЧека.Наименование
					Иначе
						Содержание = ПозицияЧека.Наименование
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			НоваяСтрока.Сумма      = Сумма;
			НоваяСтрока.Содержание = Содержание;
			НоваяСтрока.ДанныеЧека = Новый ХранилищеЗначения(ПараметрыЧекаККТ);
			НаборЗаписей.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		Возврат Неопределено;
	КонецПопытки;
	
	МенеджерОборудованияВызовСервера.СоздатьСообщениеФискализации(ИдентификаторЗаписи, ПараметрыЧекаККТ.ОрганизацияИНН);
	
	Возврат ИдентификаторЗаписи;
	
КонецФункции

// Данные чека из очереди.
//
// Параметры:
//  ИдентификаторЗаписи - РегистрСведенийЗапись.ФискальныеОперации - Идентификатор записи.
// 
// Возвращаемое значение:
//  Структура.
Функция ДанныеЧекаВОчереди(ИдентификаторЗаписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОчередьЧековККТ.ИдентификаторЗаписи     КАК ИдентификаторЗаписи,
	|	ОчередьЧековККТ.ТипДокумента            КАК ТипДокумента,
	|	ОчередьЧековККТ.ТипРасчета              КАК ТипРасчета,
	|	ОчередьЧековККТ.Организация             КАК Организация,
	|	ОчередьЧековККТ.СтатусЧека              КАК СтатусЧека,
	|	ОчередьЧековККТ.ТорговыйОбъект          КАК ТорговыйОбъект,
	|	ОчередьЧековККТ.ДокументОснование       КАК ДокументОснование, 
	|	ОчередьЧековККТ.Сумма                   КАК Сумма, 
	|	ОчередьЧековККТ.ДанныеЧека              КАК ДанныеЧека
	|ИЗ
	|	РегистрСведений.ОчередьЧековККТ КАК ОчередьЧековККТ
	|ГДЕ
	|	(ОчередьЧековККТ.ИдентификаторЗаписи = &ИдентификаторЗаписи)
	|УПОРЯДОЧИТЬ ПО ОчередьЧековККТ.Дата УБЫВ");
		
	Запрос.УстановитьПараметр("ИдентификаторЗаписи", ИдентификаторЗаписи);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДанныеЧека = Новый Структура;
		ДанныеЧека.Вставить("ИдентификаторЗаписи");
		ДанныеЧека.Вставить("ТипДокумента");
		ДанныеЧека.Вставить("ТипРасчета");
		ДанныеЧека.Вставить("СтатусЧека");
		ДанныеЧека.Вставить("Организация");
		ДанныеЧека.Вставить("ТорговыйОбъект");
		ДанныеЧека.Вставить("Сумма");
		ДанныеЧека.Вставить("ДокументОснование");
		ЗаполнитьЗначенияСвойств(ДанныеЧека, Выборка);
		ДанныеЧека.Вставить("ДанныеЧека", Выборка.ДанныеЧека.Получить());
		Возврат ДанныеЧека;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Чеки в очереди на фискализацию.
//
// Возвращаемое значение:
//  Массив.
Функция ЧекиВОчередиНаФискализацию() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОчередьЧековККТ.ИдентификаторЗаписи     КАК ИдентификаторЗаписи,
	|	ОчередьЧековККТ.ТипДокумента            КАК ТипДокумента,
	|	ОчередьЧековККТ.ТипРасчета              КАК ТипРасчета,
	|	ОчередьЧековККТ.Организация             КАК Организация,
	|	ОчередьЧековККТ.СтатусЧека              КАК СтатусЧека,
	|	ОчередьЧековККТ.ТорговыйОбъект          КАК ТорговыйОбъект,
	|	ОчередьЧековККТ.ДокументОснование       КАК ДокументОснование, 
	|	ОчередьЧековККТ.Сумма                   КАК Сумма,
	|	ОчередьЧековККТ.ДанныеЧека              КАК ДанныеЧека
	|ИЗ
	|	РегистрСведений.ОчередьЧековККТ КАК ОчередьЧековККТ
	|ГДЕ
	|	(ОчередьЧековККТ.СтатусЧека = ЗНАЧЕНИЕ(Перечисление.СтатусЧекаККТВОчереди.Новый)) ИЛИ
	|	(ОчередьЧековККТ.СтатусЧека = ЗНАЧЕНИЕ(Перечисление.СтатусЧекаККТВОчереди.Ошибка))
	|УПОРЯДОЧИТЬ ПО ОчередьЧековККТ.Дата УБЫВ");
	
	ЧекиНаФискализацию = Новый Массив();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеЧека = Новый Структура;
		ДанныеЧека.Вставить("ИдентификаторЗаписи");
		ДанныеЧека.Вставить("ТипДокумента");
		ДанныеЧека.Вставить("ТипРасчета");
		ДанныеЧека.Вставить("СтатусЧека");
		ДанныеЧека.Вставить("Организация");
		ДанныеЧека.Вставить("ТорговыйОбъект");
		ДанныеЧека.Вставить("Сумма");
		ДанныеЧека.Вставить("ДокументОснование");
		ЗаполнитьЗначенияСвойств(ДанныеЧека, Выборка);
		ДанныеЧека.Вставить("ДанныеЧека", Выборка.ДанныеЧека.Получить());
		
		ЧекиНаФискализацию.Добавить(ДанныеЧека);
	КонецЦикла;
	
	Возврат ЧекиНаФискализацию;
	
КонецФункции

// Удалить чек из очереди.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ-основание.
// 
Процедура УдалитьЧекИзОчереди(ДокументСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ОчередьЧековККТ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументОснование.Установить(ДокументСсылка);
	НаборЗаписей.Очистить(); 
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

// Очистить очередь чеков.
//
Процедура ОчиститьОчередьЧеков() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ОчередьЧековККТ.СоздатьНаборЗаписей();
	НаборЗаписей.Очистить(); 
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

// Записать статус чека в очереди.
//
// Параметры:
//  ПараметрыФискализации - Структура 
//  СтатусЧека - ПеречислениеСсылка.СтатусЧекаККТВОчереди
//  ОборудованиеККТ - СправочникСсылка.ПодключаемоеОборудование -
//  ТекстОшибки - Строка
Процедура ЗаписатьСтатусЧекаВОчереди(ПараметрыФискализации, СтатусЧека, ОборудованиеККТ = Неопределено, ТекстОшибки = Неопределено) Экспорт
	                                            
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
	
		Если ПустаяСтрока(ПараметрыФискализации.ИдентификаторФискальнойЗаписи) Тогда
			ИдентификаторЗаписи = Новый УникальныйИдентификатор;
		Иначе
			ИдентификаторЗаписи = ПараметрыФискализации.ИдентификаторФискальнойЗаписи;
		КонецЕсли;
		
		Блокировка = Новый БлокировкаДанных();
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьЧековККТ");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("ДокументОснование", ПараметрыФискализации.ДокументОснование);
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторЗаписи", ИдентификаторЗаписи);
		Блокировка.Заблокировать();
		
		// ОчередьЧековККТ
		НаборЗаписей = РегистрыСведений.ОчередьЧековККТ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументОснование.Установить(ПараметрыФискализации.ДокументОснование, Истина);
		НаборЗаписей.Отбор.ИдентификаторЗаписи.Установить(ИдентификаторЗаписи, Истина);
		НаборЗаписей.Прочитать();
		
		Для Каждого НоваяСтрока Из НаборЗаписей Цикл
			НоваяСтрока.СтатусЧека  = СтатусЧека;     
			НоваяСтрока.ТекстОшибки = ТекстОшибки;
			Если ОборудованиеККТ <> Неопределено Тогда
				НоваяСтрока.ОборудованиеККТ  = ОборудованиеККТ; 
			КонецЕсли;
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Запись статуса чека в очереди'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Возврат;
	КонецПопытки;
	
	Если СтатусЧека = Перечисления.СтатусЧекаККТВОчереди.Фискализирован Тогда
		ИдентификаторФискальнойЗаписи = ПараметрыФискализации.ИдентификаторФискальнойЗаписи;
		РезультатФискализации = ФискальнаяОперацииПоИдентификатору(ИдентификаторФискальнойЗаписи);
		МенеджерОборудованияВызовСервераПереопределяемый.ФискализацияЧекаВОчереди(ИдентификаторФискальнойЗаписи, ПараметрыФискализации, ОборудованиеККТ, РезультатФискализации);
	КонецЕсли;
		
	
КонецПроцедуры

// Данные чека из очереди.
//
// Параметры:
//  ИдентификаторЗаписи - РегистрСведенийЗапись.ФискальныеОперации - Идентификатор записи.
// 
// Возвращаемое значение:
//  Структура.
Функция ПолучитьСтатусЧекаВОчереди(ИдентификаторЗаписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ФискальныеОперации.ФискальныйПризнак    КАК ФискальныйПризнак,
	|	ФискальныеОперации.НомерСменыККМ        КАК НомерСменыККМ,
	|	ФискальныеОперации.НомерЧекаККМ         КАК НомерЧекаККМ,
	|	ФискальныеОперации.ИдентификаторЗаписи КАК ИдентификаторЗаписи
	|ПОМЕСТИТЬ ФискализированныеЧеки
	|ИЗ
	|	РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|ГДЕ
	|	ФискальныеОперации.ИдентификаторЗаписи = &ИдентификаторЗаписи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФискализированныеЧеки.ФискальныйПризнак КАК ФискальныйПризнак,
	|	ФискализированныеЧеки.НомерСменыККМ КАК НомерСменыККМ,
	|	ФискализированныеЧеки.НомерЧекаККМ КАК НомерЧекаККМ,
	|	ОчередьЧековККТ.ИдентификаторЗаписи КАК ИдентификаторЗаписи,
	|	ОчередьЧековККТ.СтатусЧека КАК СтатусЧека,
	|	ОчередьЧековККТ.ДокументОснование КАК ДокументОснование,
	|	ОчередьЧековККТ.ТекстОшибки КАК ТекстОшибки
	|ИЗ
	|	РегистрСведений.ОчередьЧековККТ КАК ОчередьЧековККТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФискализированныеЧеки КАК ФискализированныеЧеки
	|		ПО (ФискализированныеЧеки.ИдентификаторЗаписи = ОчередьЧековККТ.ИдентификаторЗаписи)
	|ГДЕ
	|	ОчередьЧековККТ.ИдентификаторЗаписи = &ИдентификаторЗаписи
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОчередьЧековККТ.Дата УБЫВ");
		
	Запрос.УстановитьПараметр("ИдентификаторЗаписи", ИдентификаторЗаписи);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДанныеЧека = Новый Структура;
		ДанныеЧека.Вставить("ИдентификаторЗаписи");
		ДанныеЧека.Вставить("СтатусЧека");
		ДанныеЧека.Вставить("ФискальныйПризнак");
		ДанныеЧека.Вставить("НомерСменыККМ");
		ДанныеЧека.Вставить("НомерЧекаККМ");
		ДанныеЧека.Вставить("ДокументОснование");
		ДанныеЧека.Вставить("ТекстОшибки");
		
		ЗаполнитьЗначенияСвойств(ДанныеЧека, Выборка);
		Возврат ДанныеЧека;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Данные чека из очереди по фискальный признаку и номеру чеку ККМ.
// 
// Параметры:
//  ФискальныйПризнак - Строка - Фискальный признак
//  НомерЧекаККМ - Строка - Номер чека ККМ
// 
// Возвращаемое значение:
//  Неопределено, Структура - Получить фискальную операцию:
//  * ДокументОснование - ОпределяемыйТип.ОснованиеФискальнойОперацииБПО.
//  * ИдентификаторЗаписи - УникальныйИдентификатор.
//  * ФискальныйПризнак - Строка - 
//  * НомерСменыККМ - Число.
//  * НомерЧекаККМ - Число. 
Функция ПолучитьФискальнуюОперацию(ФискальныйПризнак, НомерЧекаККМ = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Текст = "ВЫБРАТЬ ПЕРВЫЕ 1                          
	|	ОчередьЧековККТ.ДокументОснование    КАК ДокументОснование,
	|	ОчередьЧековККТ.ИдентификаторЗаписи  КАК ИдентификаторЗаписи,
	|	ФискальныеОперации.ФискальныйПризнак    КАК ФискальныйПризнак,
	|	ФискальныеОперации.НомерСменыККМ        КАК НомерСменыККМ,
	|	ФискальныеОперации.НомерЧекаККМ         КАК НомерЧекаККМ
	|ИЗ
	|	РегистрСведений.ОчередьЧековККТ КАК ОчередьЧековККТ
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|	ПО ОчередьЧековККТ.ИдентификаторЗаписи = ФискальныеОперации.ИдентификаторЗаписи
	|ГДЕ
	|	(ФискальныеОперации.ФискальныйПризнак = &ФискальныйПризнак)";
	Если Не ПустаяСтрока(НомерЧекаККМ) Тогда
		Текст = Текст + Символы.НПП + "И (ФискальныеОперации.НомерЧекаККМ = &НомерЧекаККМ)";
	КонецЕсли;
	
	Запрос = Новый Запрос(Текст);
	Запрос.УстановитьПараметр("ФискальныйПризнак", ФискальныйПризнак);
	Если Не ПустаяСтрока(НомерЧекаККМ) Тогда
		Запрос.УстановитьПараметр("НомерЧекаККМ", Число(НомерЧекаККМ));
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДанныеЧека = Новый Структура;
		ДанныеЧека.Вставить("ДокументОснование");
		ДанныеЧека.Вставить("ИдентификаторЗаписи");
		ДанныеЧека.Вставить("ФискальныйПризнак");
		ДанныеЧека.Вставить("НомерСменыККМ");
		ДанныеЧека.Вставить("НомерЧекаККМ");
		ЗаполнитьЗначенияСвойств(ДанныеЧека, Выборка);
		Возврат ДанныеЧека;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ФормированиеДанныхККТ


//	Возврат Результат;
//	
//КонецФункции


// Сформировать таблицу параметров в XML для операции с ФН.
// 
// Параметры:
//  СтруктураПараметров - Структура
//  РевизияИнтерфейса - Число - Ревизия интерфейса
//
// Возвращаемое значение:
//  ЗаписьXML.
//
Функция СформироватьТаблицуПараметровДляОперацииФН(СтруктураПараметров, РевизияИнтерфейса = 0) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML; 
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("ParametersFiscal");
		ЗаписьXML.ЗаписатьАтрибут("CashierName" , XMLСтрока(?(СтруктураПараметров.Свойство("Кассир")   , XMLСтрока(СтруктураПараметров.Кассир), НСтр("ru='Администратор'"))));
		ЗаписьXML.ЗаписатьАтрибут("CashierINN"  , XMLСтрока(?(СтруктураПараметров.Свойство("КассирИНН"), XMLСтрока(СтруктураПараметров.КассирИНН), "")));
		ЗаписьXML.ЗаписатьАтрибут("CashierPassword"  , XMLСтрока(?(СтруктураПараметров.Свойство("КассирПароль"), XMLСтрока(СтруктураПараметров.КассирПароль), "")));

		ЗаписьXML.ЗаписатьАтрибут("KKTNumber"         , XMLСтрока(СтруктураПараметров.РегистрационныйНомерККТ));
		ЗаписьXML.ЗаписатьАтрибут("CompanyName"       , XMLСтрока(СтруктураПараметров.ОрганизацияНазвание));
		ЗаписьXML.ЗаписатьАтрибут("INN"               , XMLСтрока(СтруктураПараметров.ОрганизацияИНН));
		ЗаписьXML.ЗаписатьАтрибут("SaleAddress"       , XMLСтрока(СтруктураПараметров.АдресПроведенияРасчетов));
		ЗаписьXML.ЗаписатьАтрибут("SaleLocation"      , XMLСтрока(СтруктураПараметров.МестоПроведенияРасчетов));
		ЗаписьXML.ЗаписатьАтрибут("TaxationSystem"    , XMLСтрока(СтруктураПараметров.КодСистемыНалогообложения));
		ЗаписьXML.ЗаписатьАтрибут("VatPayerMark"      , XMLСтрока(СтруктураПараметров.ПризнакПлательщикаНДС));
		ЗаписьXML.ЗаписатьАтрибут("IsOffline"         , XMLСтрока(СтруктураПараметров.ПризнакАвтономногоРежима));
		ЗаписьXML.ЗаписатьАтрибут("OFDCompany"        , XMLСтрока(СтруктураПараметров.ОрганизацияОФДНазвание));
		ЗаписьXML.ЗаписатьАтрибут("OFDCompanyINN"     , XMLСтрока(СтруктураПараметров.ОрганизацияОФДИНН));
		Если Не ПустаяСтрока(СтруктураПараметров.ОтправительEmail) Тогда
			ЗаписьXML.ЗаписатьАтрибут("SenderEmail", XMLСтрока(СтруктураПараметров.ОтправительEmail));
		КонецЕсли;
		
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Получить таблицу параметров из ККТ.
// 
// Параметры:
//  Данные - Структура - Данные.
//  РевизияИнтерфейса - Число - Ревизия интерфейса
// 
// Возвращаемое значение:
//  Структура - Параметры из XMLПакета ККТ:
//  * ПризнакФискализации - Строка.
//  * НомерДокументаФискализации - Число.
//  * ДатаВремяФискализации - Дата.
Функция ПараметрыИзXMLПакетаККТ(Данные, РевизияИнтерфейса = 0) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML; 
	ЧтениеXML.УстановитьСтроку(Данные);
	ЧтениеXML.ПерейтиКСодержимому();
	
	Параметры = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыРегистрацииККТ();
	Параметры.Вставить("ТипОборудования", Перечисления.ТипыПодключаемогоОборудования.ККТ);
	
		
		Если (ЧтениеXML.Имя = "Parameters" Или ЧтениеXML.Имя = "TableParametersKKT") И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
			
			
			
			// ФФД 1.0
			Параметры.РегистрационныйНомерККТ    = СокрЛП(ЧтениеXML.ЗначениеАтрибута("KKTNumber"));
			Параметры.ЗаводскойНомерККТ          = СокрЛП(ЧтениеXML.ЗначениеАтрибута("KKTSerialNumber"));
			Параметры.ОрганизацияНазвание        = ЧтениеXML.ЗначениеАтрибута("CompanyName");
			Параметры.ОрганизацияИНН             = СокрЛП(ЧтениеXML.ЗначениеАтрибута("INN"));
			Параметры.АдресПроведенияРасчетов    = ЧтениеXML.ЗначениеАтрибута("SaleAddress");
			Параметры.МестоПроведенияРасчетов    = ЧтениеXML.ЗначениеАтрибута("SaleLocation");
			Параметры.КодСистемыНалогообложения  = ЧтениеXML.ЗначениеАтрибута("TaxationSystem");
			Параметры.ПризнакПлательщикаНДС		 = ВРег(ЧтениеXML.ЗначениеАтрибута("VatPayerMark")) = "TRUE";
			Параметры.ПризнакАвтономногоРежима   = ВРег(ЧтениеXML.ЗначениеАтрибута("IsOffline")) = "TRUE";
			Параметры.ОрганизацияОФДНазвание     = ЧтениеXML.ЗначениеАтрибута("OFDCompany");
			Параметры.ОрганизацияОФДИНН          = СокрЛП(ЧтениеXML.ЗначениеАтрибута("OFDCompanyINN"));
			Параметры.ПризнакФискализации        = ВРег(ЧтениеXML.ЗначениеАтрибута("Fiscal")) = "TRUE";
			Параметры.ОтправительEmail           = ЧтениеXML.ЗначениеАтрибута("SenderEmail");
			Параметры.АдресСайтаОФД              = ЧтениеXML.ЗначениеАтрибута("FNSURL");
		КонецЕсли;
	

	Возврат Параметры;
	
КонецФункции

// Процедура формирует XML пакет для Фискализация чека.
// 
// Параметры:
//  ОбщиеПараметры - Структура - параметры чека
//  ПараметрыФискализации - Структура - параметры фискализации чека.
//  ВключатьПерсональныеДанные - Булево - Включать персональные данные.
//  ПерсональныеДанные - см. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыПерсональныеДанныеПокупателя.
//  ТипПерсональныхДанных - ПеречислениеСсылка.ТипыПерсональныхДанныхККТ - Тип персональных данных.
Процедура СформироватьXMLПакетДляФискализацияЧека(ОбщиеПараметры, ПараметрыФискализации, ВключатьПерсональныеДанные = Ложь, 
	ПерсональныеДанные = Неопределено, ТипПерсональныхДанных = Неопределено) Экспорт
	
	ПозицииЧека  = ОбщиеПараметры.ПозицииЧека;
	ТаблицаОплат = ОбщиеПараметры.ТаблицаОплат;
	Электронно   = ОбщиеПараметры.Электронно;

	ТипРасчета = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.КодРасчетаДенежнымиСредствами(ОбщиеПараметры.ТипРасчета);
	
	// Таблица оплат
	СуммаЧека = 0;
	СуммаНаличные       = 0;
	СуммаЭлектронно     = 0;
	СуммаПредоплата     = 0;
	СуммаПостоплата     = 0;

	Если ТаблицаОплат <> Неопределено Тогда
		Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл
			Если ТаблицаОплат[ИндексОплаты].ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно Тогда
				СуммаЭлектронно = СуммаЭлектронно + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = Перечисления.ТипыОплатыККТ.Предоплата Тогда
				СуммаПредоплата = СуммаПредоплата + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = Перечисления.ТипыОплатыККТ.Постоплата Тогда
				СуммаПостоплата = СуммаПостоплата + ТаблицаОплат[ИндексОплаты].Сумма;
			Иначе
				СуммаНаличные = СуммаНаличные + ТаблицаОплат[ИндексОплаты].Сумма;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ОплатаНеНаличными = СуммаЭлектронно + СуммаПостоплата + СуммаПредоплата; 
	
	Если ОбщиеПараметры.Свойство("ДетализацияОплаты") И ОбщиеПараметры.ДетализацияОплаты.Количество() > 0 И НЕ ПараметрыФискализации.ДетализацияОплатыДобавлено Тогда
		
		ПараметрыФискализации.ДетализацияОплатыДобавлено = Истина;
		
		СтрокаЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыТекстовойСтрокиЧека();
		ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаЧека);
		
		ТекстСтроки = НСтр("ru='ДЕТАЛИЗАЦИЯ ОПЛАТЫ'");
		СтрокаЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыТекстовойСтрокиЧека(ТекстСтроки);
		СтрокаЧека.Выравнивание = "Центр";
		ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаЧека);
		
		ФорматЧисла = "ЧРД=.;ЧЦ=12;ЧДЦ=2;ЧН=0.00;ЧГ=0";
		Для Каждого ДетализацияОплаты Из ОбщиеПараметры.ДетализацияОплаты Цикл
			ТекстСтроки = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ВыстроитьПоля(ДетализацияОплаты.НаименованиеТипаОплаты,
				Формат(ДетализацияОплаты.Сумма, ФорматЧисла), ПараметрыФискализации.ШиринаСтроки);
			СтрокаЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыТекстовойСтрокиЧека(ТекстСтроки);
			ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаЧека);
		КонецЦикла       
	КонецЕсли;
	
	Если ОбщиеПараметры.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств Тогда
 		Если ОбщиеПараметры.Свойство("QRКод") И Не ПустаяСтрока(ОбщиеПараметры.QRКод.ЗначениеКода) И НЕ ПараметрыФискализации.QRКодДобавлено Тогда
			
			ПараметрыФискализации.QRКодДобавлено = Истина;
			
			СтрокаЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыТекстовойСтрокиЧека();
			ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаЧека);
		
			СтрокаЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыШтрихкодВСтрокеЧека("QR", ОбщиеПараметры.QRКод.ЗначениеКода);
			ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаЧека);
		
			СтрокаЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыТекстовойСтрокиЧека();
			ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаЧека);
		
			Если НЕ ПустаяСтрока(ОбщиеПараметры.ТипПлатежнойСистемы) Тогда
				СтрокаЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыТекстовойСтрокиЧека(ОбщиеПараметры.ТипПлатежнойСистемы);
				СтрокаЧека.Выравнивание = "Центр";
				ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаЧека);
			КонецЕсли;
			Если НЕ ПустаяСтрока(ОбщиеПараметры.QRКод.ТекстПользователя) Тогда
				СтрокаЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыТекстовойСтрокиЧека(ОбщиеПараметры.QRКод.ТекстПользователя);
				СтрокаЧека.Выравнивание = "Центр";
				ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаЧека); 
			КонецЕсли;
			
			СтрокаЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыТекстовойСтрокиЧека();
			ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаЧека);    
			
		КонецЕсли;
	КонецЕсли;
	
	// Пакетная печать чека. Подготовка пакета.
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("CheckPackage");
	
		ЗаписьXML.ЗаписатьНачалоЭлемента("Parameters");
		ЗаписьXML.ЗаписатьАтрибут("CashierName",  XMLСтрока(ОбщиеПараметры.Кассир));
		Если Не ПустаяСтрока(ОбщиеПараметры.КассирИНН) Тогда 
			ЗаписьXML.ЗаписатьАтрибут("CashierINN", XMLСтрока(ОбщиеПараметры.КассирИНН));
		КонецЕсли;
		Если Не ПустаяСтрока(ОбщиеПараметры.КассирПароль) Тогда 
			ЗаписьXML.ЗаписатьАтрибут("CashierPassword", XMLСтрока(ОбщиеПараметры.КассирПароль));
		КонецЕсли;
		ЗаписьXML.ЗаписатьАтрибут("OperationType", XMLСтрока(ТипРасчета));
		
		Если Не ПустаяСтрока(ОбщиеПараметры.ОтправительEmail) И Электронно Тогда // Отправитель Email указывается только для Электронно.
			ЗаписьXML.ЗаписатьАтрибут("SenderEmail", XMLСтрока(ОбщиеПараметры.ОтправительEmail));
		КонецЕсли;
		
		
		// Email отправляет средствами 1C
		Если ОбщиеПараметры.Свойство("Отправляет1СEmail") И НЕ ОбщиеПараметры.Отправляет1СEmail Тогда
			ЗаписьXML.ЗаписатьАтрибут("CustomerEmail", XMLСтрока(?(ОбщиеПараметры.Свойство("ПокупательEmail"), ОбщиеПараметры.ПокупательEmail, "")));
		КонецЕсли;
		// SMS отправляет средствами 1C
		Если ОбщиеПараметры.Свойство("Отправляет1СSMS") И НЕ ОбщиеПараметры.Отправляет1СSMS Тогда
			ПокупательНомер = ?(ОбщиеПараметры.Свойство("ПокупательНомер"), ОбщиеПараметры.ПокупательНомер, "");
			Если Не ПустаяСтрока(ПокупательНомер) И Лев(ПокупательНомер, 1) <> "+" Тогда
				ПокупательНомер = "+" + ПокупательНомер;
			КонецЕсли;
			ЗаписьXML.ЗаписатьАтрибут("CustomerPhone", XMLСтрока(ПокупательНомер));
		КонецЕсли;
		
		Если ПараметрыФискализации.РевизияИнтерфейса < 3004 Тогда
			
			Получатель = ОбщиеПараметры.Получатель;
			Если ПустаяСтрока(Получатель) Тогда
				Получатель = ОбщиеПараметры.СведенияОПокупателе.Покупатель;
			КонецЕсли;
			ПолучательИНН = ОбщиеПараметры.ПолучательИНН;
			Если ПустаяСтрока(ПолучательИНН) Тогда
				ПолучательИНН = ОбщиеПараметры.СведенияОПокупателе.ПокупательИНН;
			КонецЕсли;
			Если ПерсональныеДанные <> Неопределено Тогда
				Если ТипПерсональныхДанных = Перечисления.ТипыПерсональныхДанныхККТ.ИНН Тогда
					ПолучательИНН = ПерсональныеДанные.ИНН;
				ИначеЕсли Не ПустаяСтрока(ПерсональныеДанные.ДанныеДокумента) Тогда      
					Получатель = СтрШаблон("<%1> <%2>", Получатель, ПерсональныеДанные.ДанныеДокумента); 
				КонецЕсли;
			КонецЕсли;
			Если Не ПустаяСтрока(Получатель) Тогда
				ЗаписьXML.ЗаписатьАтрибут("CustomerInfo", XMLСтрока(Получатель));
			КонецЕсли;
			Если Не ПустаяСтрока(ПолучательИНН) Тогда
				ЗаписьXML.ЗаписатьАтрибут("CustomerINN", XMLСтрока(ПолучательИНН));
			КонецЕсли;
			
		Иначе
			Если ОбщиеПараметры.Свойство("НомерАвтомата") И НЕ ПустаяСтрока(ОбщиеПараметры.НомерАвтомата) Тогда
				ЗаписьXML.ЗаписатьАтрибут("AutomatNumber", XMLСтрока(ОбщиеПараметры.НомерАвтомата));
			КонецЕсли;
		КонецЕсли;
		
		//Если ОбщиеПараметры.Свойство("ПризнакАгента") И НЕ ПустаяСтрока(ОбщиеПараметры.ПризнакАгента) Тогда
		//	ПризнакАгента = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.КодПризнакаАгента(ОбщиеПараметры.ПризнакАгента);
		//	ЗаписьXML.ЗаписатьАтрибут("AgentType", XMLСтрока(ПризнакАгента));
		//КонецЕсли;
		
		Если ОбщиеПараметры.Свойство("ДополнительныйРеквизит") И НЕ ПустаяСтрока(ОбщиеПараметры.ДополнительныйРеквизит) Тогда  
			ЗаписьXML.ЗаписатьАтрибут("AdditionalAttribute", XMLСтрока(ОбщиеПараметры.ДополнительныйРеквизит));
		КонецЕсли;
		
		
		Если Не ПустаяСтрока(ОбщиеПараметры.НомерЧекаОснования) Тогда 
			ЗаписьXML.ЗаписатьАтрибут("ReturnCheckNumber", XMLСтрока(ОбщиеПараметры.НомерЧекаОснования));
		КонецЕсли;
		
		Если Не ПустаяСтрока(ОбщиеПараметры.УУИДЧека) Тогда 
			ЗаписьXML.ЗаписатьАтрибут("ExternalGUID", XMLСтрока(ОбщиеПараметры.УУИДЧека));
		КонецЕсли;
		
		Если ОбщиеПараметры.Свойство("ДополнительныйРеквизитПользователя") Тогда
			ЗаписатьДополнительныйРеквизитПользователя(ЗаписьXML, ОбщиеПараметры.ДополнительныйРеквизитПользователя);
		КонецЕсли;
		
		ЗаписатьСведенияОПокупателе(ЗаписьXML, ОбщиеПараметры, ПерсональныеДанные, ТипПерсональныхДанных);
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		// Табличная часть
		Если ОбщиеПараметры.ПозицииЧека <> Неопределено Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
			Для ИндексМассива = 0 По ОбщиеПараметры.ПозицииЧека.Количество() - 1 Цикл
				ТекущаяПозиция = ОбщиеПараметры.ПозицииЧека[ИндексМассива]; //см. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыФискальнойСтрокиЧека
				
				Если ТекущаяПозиция.Свойство("ФискальнаяСтрока") Тогда // Фискальная строка
					
					Если ТекущаяПозиция.ЦенаСоСкидками = 0 И ТекущаяПозиция.Сумма > 0 И ТекущаяПозиция.Количество > 0 Тогда
						ЦенаСоСкидками = Окр(ТекущаяПозиция.Сумма / ТекущаяПозиция.Количество, 2); 
					Иначе
						ЦенаСоСкидками = ТекущаяПозиция.ЦенаСоСкидками; 
					КонецЕсли;
					ЗаписьXML.ЗаписатьНачалоЭлемента("FiscalString");
					ЗаписьXML.ЗаписатьАтрибут("Name"              , XMLСтрока(ТекущаяПозиция.Наименование)); // Наименование товара.
					ЗаписьXML.ЗаписатьАтрибут("Code"              , XMLСтрока(ТекущаяПозиция.Код)); // Код товара.
					ЗаписьXML.ЗаписатьАтрибут("Quantity"          , XMLСтрока(ТекущаяПозиция.Количество)); // Количество товара.
					ЗаписьXML.ЗаписатьАтрибут("PriceWithDiscount" , XMLСтрока(ЦенаСоСкидками)); // Цена единицы товара с учетом скидок/наценок.
					ЗаписьXML.ЗаписатьАтрибут("AmountWithDiscount", XMLСтрока(ТекущаяПозиция.Сумма)); // Конечная сумма по позиции чека с учетом всех скидок/наценок.
					ЗаписьXML.ЗаписатьАтрибут("DiscountAmount"    , XMLСтрока(ТекущаяПозиция.СуммаСкидок)); // Сумма скидок и наценок.
					
					
					КодСтавкиНДС = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.КодСтавкиНДС(ТекущаяПозиция.СтавкаНДС);
					ЗаписьXML.ЗаписатьАтрибут("VATRate", XMLСтрока(КодСтавкиНДС)); // Ставка НДС
					Если ТекущаяПозиция.Свойство("СуммаНДС") Тогда
						ЗаписьXML.ЗаписатьАтрибут("VATAmount", XMLСтрока(ТекущаяПозиция.СуммаНДС));
					КонецЕсли;
					
					КодСтавкиНСП = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.КодСтавкиНСП(ТекущаяПозиция.СтавкаНСП);
					ЗаписьXML.ЗаписатьАтрибут("STRate", XMLСтрока(КодСтавкиНСП)); // Ставка НСП
					Если ТекущаяПозиция.Свойство("СуммаНСП") Тогда
						ЗаписьXML.ЗаписатьАтрибут("STAmount", XMLСтрока(ТекущаяПозиция.СуммаНСП));
					КонецЕсли;
		
					Если ТекущаяПозиция.Свойство("ПризнакСпособаРасчета") И НЕ ПустаяСтрока(ТекущаяПозиция.ПризнакСпособаРасчета) Тогда
						ПризнакСпособаРасчета = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.КодПризнакаСпособаРасчета(ТекущаяПозиция.ПризнакСпособаРасчета);
						ЗаписьXML.ЗаписатьАтрибут("PaymentMethod", XMLСтрока(ПризнакСпособаРасчета));
					КонецЕсли;
					
					ПризнакПредметаРасчета = Неопределено;
					Если ТекущаяПозиция.Свойство("ПризнакПредметаРасчета") И НЕ ПустаяСтрока(ТекущаяПозиция.ПризнакПредметаРасчета) Тогда
						ПризнакПредметаРасчета = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.КодПризнакаПредметаРасчета(ТекущаяПозиция.ПризнакПредметаРасчета);
						Если ПризнакПредметаРасчета <> Неопределено Тогда
							ЗаписьXML.ЗаписатьАтрибут("CalculationSubject", XMLСтрока(ПризнакПредметаРасчета));
						КонецЕсли;
					КонецЕсли;
					
					
					Если ТекущаяПозиция.Свойство("ЕдиницаИзмерения") И ТекущаяПозиция.ЕдиницаИзмерения <> Неопределено Тогда
						ЗаписьXML.ЗаписатьАтрибут("MeasurementUnit", XMLСтрока(Лев(ТекущаяПозиция.ЕдиницаИзмерения, 16)));
					КонецЕсли;
					
					Если ТекущаяПозиция.Свойство("КодТНВЭД") И ТекущаяПозиция.КодТНВЭД <> Неопределено Тогда
						ЗаписьXML.ЗаписатьАтрибут("TNVED", XMLСтрока(ТекущаяПозиция.КодТНВЭД));
					КонецЕсли;
					
					Если ТекущаяПозиция.Свойство("КодГКЭД") И ТекущаяПозиция.КодГКЭД <> Неопределено Тогда
						ЗаписьXML.ЗаписатьАтрибут("GKED", XMLСтрока(ТекущаяПозиция.КодГКЭД));
					КонецЕсли;
					
					Если ТекущаяПозиция.Свойство("ДополнительныйРеквизит") Тогда // Тэг 1191
						
						ДополнительныйРеквизит = "";
						Если НЕ ПустаяСтрока(ТекущаяПозиция.ДополнительныйРеквизит) Тогда
							ДополнительныйРеквизит = ТекущаяПозиция.ДополнительныйРеквизит;
						КонецЕсли;
						Если Не ПустаяСтрока(ДополнительныйРеквизит) Тогда 
							ЗаписьXML.ЗаписатьАтрибут("AdditionalAttribute", XMLСтрока(ДополнительныйРеквизит));  // Тэг 1191
						КонецЕсли;
						
					КонецЕсли;
					

					//	ДробноеКоличество = ТекущаяПозиция.ДробноеКоличество;
					//	Если Не ПустаяСтрока(ДробноеКоличество.Числитель) И Не ПустаяСтрока(ДробноеКоличество.Знаменатель) Тогда
					//		Если Число(ДробноеКоличество.Числитель) > 0 И Число(ДробноеКоличество.Знаменатель) > 0 Тогда
					//			ЗаписьXML.ЗаписатьНачалоЭлемента("FractionalQuantity");
					//			ЗаписьXML.ЗаписатьАтрибут("Numerator", XMLСтрока(ДробноеКоличество.Числитель));
					//			ЗаписьXML.ЗаписатьАтрибут("Denominator", XMLСтрока(ДробноеКоличество.Знаменатель));
					//			ЗаписьXML.ЗаписатьКонецЭлемента();
					//		КонецЕсли;
					//	КонецЕсли;
					//КонецЕсли;
					Если Не ПустаяСтрока(ТекущаяПозиция.КонтрольнаяМарка) Тогда
						ЗаписьXML.ЗаписатьАтрибут("MarkingCode", XMLСтрока(ТекущаяПозиция.КонтрольнаяМарка));
					КонецЕсли; 
					Если НЕ ПустаяСтрока(ТекущаяПозиция.КодМаркировки) Тогда
						ЗаписьXML.ЗаписатьАтрибут("MarkingType", XMLСтрока(ТекущаяПозиция.КодМаркировки));
					КонецЕсли;	
					
					ЗаписатьДанныеПоставщика(ЗаписьXML, ТекущаяПозиция.ДанныеПоставщика, ПараметрыФискализации.РевизияИнтерфейса);
					ЗаписьXML.ЗаписатьКонецЭлемента();
					СуммаЧека = СуммаЧека + ТекущаяПозиция.Сумма;
			
				ИначеЕсли ТекущаяПозиция.Свойство("ТекстоваяСтрока") Тогда // Текстовая строка
					Если ТекущаяПозиция.Свойство("ПереносСтроки") И ТекущаяПозиция.ПереносСтроки Тогда 
						ТекстовыеСтроки = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПостроитьПолеПереносом(ТекущаяПозиция.Текст, ПараметрыФискализации.ШиринаСтроки);
					Иначе
						ТекстовыеСтроки = ТекущаяПозиция.Текст;
					КонецЕсли;
					Выравнивание = ?(ТекущаяПозиция.Свойство("Выравнивание"),  ТекущаяПозиция.Выравнивание, "Лево"); 
					Для НомерСтроки = 1 По СтрЧислоСтрок(ТекстовыеСтроки) Цикл
						ВыделеннаяСтрока = СтрПолучитьСтроку(ТекстовыеСтроки, НомерСтроки);
						ВыделеннаяСтрока = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ВыровнятьПоле(ВыделеннаяСтрока, ПараметрыФискализации.ШиринаСтроки, Выравнивание); 
						ЗаписьXML.ЗаписатьНачалоЭлемента("TextString");
						ЗаписьXML.ЗаписатьАтрибут("Text", XMLСтрока(ВыделеннаяСтрока));
						ЗаписьXML.ЗаписатьКонецЭлемента();  
					КонецЦикла;
					
				ИначеЕсли ТекущаяПозиция.Свойство("ШтрихКод") Тогда // Штрихкод
					ЗаписьXML.ЗаписатьНачалоЭлемента("Barcode");
					ЗаписьXML.ЗаписатьАтрибут("Type" , XMLСтрока(ТекущаяПозиция.ТипШтрихкода));
					// Значение штрихкода. Штрихкод кодируется текстом в кодировке Base64.
					Если ПараметрыФискализации.РевизияИнтерфейса >= 3003 Тогда
						ШтрихКодBase64 = МенеджерОборудованияВызовСервера.ШтрихкодВBase64(ТекущаяПозиция.ШтрихКод);
						Если ТекущаяПозиция.Свойство("ШтрихКодBase64")
							И НЕ ПустаяСтрока(ТекущаяПозиция.ШтрихКодBase64) Тогда
							ШтрихКодBase64 = ТекущаяПозиция.ШтрихКодBase64;
						КонецЕсли;
						ЗаписьXML.ЗаписатьАтрибут("ValueBase64", XMLСтрока(ШтрихКодBase64));
					Иначе
					ЗаписьXML.ЗаписатьАтрибут("Value", XMLСтрока(ТекущаяПозиция.ШтрихКод));
					КонецЕсли;
					ЗаписьXML.ЗаписатьКонецЭлемента();
				КонецЕсли;
			КонецЦикла;
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		// Таблица оплат
		Если ТаблицаОплат <> Неопределено Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("Payments");
				ЗаписьXML.ЗаписатьАтрибут("Cash", XMLСтрока(СуммаНаличные));
				ЗаписьXML.ЗаписатьАтрибут("ElectronicPayment", XMLСтрока(СуммаЭлектронно));
				ЗаписьXML.ЗаписатьАтрибут("PrePayment", XMLСтрока(СуммаПредоплата));
				ЗаписьXML.ЗаписатьАтрибут("PostPayment", XMLСтрока(СуммаПостоплата));
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ДанныеЧекаXML = ЗаписьXML.Закрыть();
	
	Если ВключатьПерсональныеДанные Тогда
		ПараметрыФискализации.ДанныеЧекаXMLПерсональныеДанные = ДанныеЧекаXML;
	Иначе
		ПараметрыФискализации.ДанныеЧекаXML = ДанныеЧекаXML;
		ПараметрыФискализации.ТипРасчета = ОбщиеПараметры.ТипРасчета;
		ПараметрыФискализации.СуммаЧека = СуммаЧека;
		ПараметрыФискализации.ОплатаНаличные    = ?(СуммаНаличные + ОплатаНеНаличными > СуммаЧека, СуммаЧека - ОплатаНеНаличными, СуммаНаличные); 
		ПараметрыФискализации.ОплатаЭлектронно  = СуммаЭлектронно;
		ПараметрыФискализации.ОплатаПостоплата  = СуммаПостоплата;
		ПараметрыФискализации.ОплатаПредоплата  = СуммаПредоплата;
	КонецЕсли;
	
КонецПроцедуры


//	КонецЕсли;
//	
//КонецПроцедуры

// Получить XMLПакет для операции.
// 
// Параметры:
//  ОбщиеПараметры - Структура, Булево - Общие параметры
//  РевизияИнтерфейса - Число - Ревизия интерфейса
// 
// Возвращаемое значение:
//  Строка - Получить XMLПакет для операции
Функция ПолучитьXMLПакетДляОперации(ОбщиеПараметры, РевизияИнтерфейса = 0) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("InputParameters");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Parameters");
	
	ЗаписьXML.ЗаписатьАтрибут("CashierName", ?(ОбщиеПараметры.Свойство("Кассир"), XMLСтрока(ОбщиеПараметры.Кассир), НСтр("ru='Администратор'")));
	ЗаписьXML.ЗаписатьАтрибут("CashierINN" , ?(ОбщиеПараметры.Свойство("КассирИНН"), XMLСтрока(ОбщиеПараметры.КассирИНН), ""));
	ЗаписьXML.ЗаписатьАтрибут("CashierPassword" , ?(ОбщиеПараметры.Свойство("КассирПароль"), XMLСтрока(ОбщиеПараметры.КассирПароль), ""));
	Если ОбщиеПараметры.Свойство("АдресРасчетов") И НЕ ПустаяСтрока(ОбщиеПараметры.АдресРасчетов) Тогда   
		ЗаписьXML.ЗаписатьАтрибут("SaleAddress", XMLСтрока(ОбщиеПараметры.АдресРасчетов));
	КонецЕсли;
	Если ОбщиеПараметры.Свойство("МестоРасчетов") И НЕ ПустаяСтрока(ОбщиеПараметры.МестоРасчетов) Тогда  
		ЗаписьXML.ЗаписатьАтрибут("SaleLocation", XMLСтрока(ОбщиеПараметры.МестоРасчетов));
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции   

// Получить XMLПакет для текста.
// 
// Параметры:
//  СтрокаТекста - Строка, Структура - Строка текста
//  РевизияИнтерфейса - Число - Ревизия интерфейса
// 
// Возвращаемое значение:
//  Массив из ЗаписьXML - Получить XMLПакет для текста.
Функция ПолучитьXMLПакетДляТекста(СтрокаТекста, РевизияИнтерфейса = 0) Экспорт
	
	Результат = Новый Массив();
	
	// Пакетная печать чека. Подготовка пакета.
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Document");
	                              
	Если НЕ ПустаяСтрока(СтрокаТекста) Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
		
		Для НомерСтроки = 1 По СтрЧислоСтрок(СтрокаТекста) Цикл
			
			ВыделеннаяСтрока = СтрПолучитьСтроку(СтрокаТекста, НомерСтроки);
			
			Если (Найти(ВыделеннаяСтрока, "[отрезка]") > 0)
				 Или (Найти(ВыделеннаяСтрока, "[cut]") > 0) Тогда
				 
				// Завершаем запись текущего пакета. 
				ЗаписьXML.ЗаписатьКонецЭлемента();
				ЗаписьXML.ЗаписатьКонецЭлемента();
				Текст = ЗаписьXML.Закрыть();
				Результат.Добавить(Текст);
				
				// Новый пакет.
				ЗаписьXML = Новый ЗаписьXML();
				ЗаписьXML.УстановитьСтроку("UTF-8");
				ЗаписьXML.ЗаписатьОбъявлениеXML();
				ЗаписьXML.ЗаписатьНачалоЭлемента("Document");
				ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
				
			ИначеЕсли (Найти(ВыделеннаяСтрока, "|ШтрихКод|") > 0) Тогда
				ВыделеннаяСтрока = Сред(ВыделеннаяСтрока, СтрДлина("|ШтрихКод|") + 1);
				ВремТипШтрихкода = Сред(ВыделеннаяСтрока, 1, Найти(ВыделеннаяСтрока, "|") - 1);
	 			ВремШтрихКод = Сред(ВыделеннаяСтрока, Найти(ВыделеннаяСтрока, "|") + 1); 
				ЗаписьXML.ЗаписатьНачалоЭлемента("Barcode");
				Если РевизияИнтерфейса >= 3000 Тогда  // Версия стандарта 3.0 (ОФД 1.1)
					ЗаписьXML.ЗаписатьАтрибут("Type", XMLСтрока(ВремТипШтрихкода));
					// Значение штрихкода. Штрихкод кодируется текстом в кодировке Base64.
					Если РевизияИнтерфейса >= 3003 Тогда
						ШтрихКодBase64 = МенеджерОборудованияВызовСервера.ШтрихкодВBase64(ВремШтрихКод);
						ЗаписьXML.ЗаписатьАтрибут("ValueBase64", XMLСтрока(ШтрихКодBase64));
					Иначе
						ЗаписьXML.ЗаписатьАтрибут("Value", XMLСтрока(ВремШтрихКод));
					КонецЕсли;
				Иначе
					ЗаписьXML.ЗаписатьАтрибут("BarcodeType", XMLСтрока(ВремТипШтрихкода));
					ЗаписьXML.ЗаписатьАтрибут("Barcode", XMLСтрока(ВремШтрихКод));
				КонецЕсли;
				ЗаписьXML.ЗаписатьКонецЭлемента();
			Иначе
				ЗаписьXML.ЗаписатьНачалоЭлемента("TextString");
				ЗаписьXML.ЗаписатьАтрибут("Text", XMLСтрока(ВыделеннаяСтрока));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
		
	ЗаписьXML.ЗаписатьКонецЭлемента();
	Текст = ЗаписьXML.Закрыть();
	
	Результат.Добавить(Текст);
	
	Возврат Результат;

КонецФункции  

// Получить параметры состояния из XML пакета.
// 
// Параметры:
//  Данные - Произвольный.
//  НомерСмены - Неопределено - Номер смены
// 
// Возвращаемое значение:
//  Структура - Получить параметры состояния из XMLПакета:
//  * ДатаСменыККТ - Число -
//  * НомерСменыККТ - Число -
//  * НомерЧекаККТ - Число -
//  * НомерЧекаЗаСмену - Число -
//  * СтатусСмены - Неопределено -
//  * СчетчикиОперацийПриход - Структура -:
//    * КоличествоЧеков - Число.
//    * СуммаЧеков - Число.
//    * КоличествоЧековКоррекции - Число.
//    * СуммаЧековКоррекции - Число.
//  * СчетчикиОперацийВозвратПрихода - Структура -:
//    * КоличествоЧеков - Число.
//    * СуммаЧеков - Число.
//    * КоличествоЧековКоррекции - Число.
//    * СуммаЧековКоррекции - Число.
//  * СчетчикиОперацийРасход - Структура -:
//    * КоличествоЧеков - Число.
//    * СуммаЧеков - Число.
//    * КоличествоЧековКоррекции - Число.
//    * СуммаЧековКоррекции - Число.
//  * СчетчикиОперацийВозвратРасхода - Структура -:
//    * КоличествоЧеков - Число.
//    * СуммаЧеков - Число.
//    * КоличествоЧековКоррекции - Число.
//    * СуммаЧековКоррекции - Число.
//  * КоличествоЧеков - Число.
//  * ОстатокНаличных - Число.
//  * ПревышеноВремяОжиданияОтветаОФД - Булево -
//  * КоличествоНепереданныхФД - Неопределено -
//  * НомерПервогоНепереданногоФД - Неопределено -
//  * ДатаПервогоНепереданногоФД - Неопределено -
//  * НеобходимаСрочнаяЗаменаФН - Булево -
//  * ПамятьФНПереполнена - Булево -
//  * РесурсФНИсчерпан - Булево -
Функция ПолучитьПараметрыСостоянияИзXMLПакета(Данные, НомерСмены = Неопределено) Экспорт
	
	Параметры = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыНормализуемыхФискальныхДанных();
	Параметры.НомерСменыККТ = НомерСмены;
	
	Если Не ПустаяСтрока(Данные) Тогда
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(Данные);
		ЧтениеXML.ПерейтиКСодержимому();
		Если ЧтениеXML.Имя = "StatusParameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ЧтениеXML.Прочитать() И ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
				КоличествоНепереданныхФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentsCounter");
				Параметры.КоличествоНепереданныхФД    = ?(ПустаяСтрока(КоличествоНепереданныхФД), 0, Число(КоличествоНепереданныхФД));
				Параметры.НомерПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstNumber");
				ДатаПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstDateTime");
				Если НЕ ПустаяСтрока(ДатаПервогоНепереданногоФД) Тогда
					Параметры.ДатаПервогоНепереданногоФД = XMLЗначение(Тип("Дата"), ДатаПервогоНепереданногоФД);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Получить таблицу параметров смены из ККТ.
//
// Параметры:
//  ДанныеXML - Строка - строка XML
//  РевизияИнтерфейса - Число - ревизия интерфейса 
//
// Возвращаемое значение:
//  Структура.
//
Функция ПолучитьПараметрыСменыИзXMLПакета(ДанныеXML, РевизияИнтерфейса = 0) Экспорт
	
	Параметры = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыНормализуемыхФискальныхДанных();
	
	Если Не ПустаяСтрока(ДанныеXML) Тогда
		
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(ДанныеXML);
		ЧтениеXML.ПерейтиКСодержимому();
		
			
			Если ЧтениеXML.Имя = "OutputParameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Если ЧтениеXML.Прочитать() И ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
					Параметры.НомерСменыККТ = ЧтениеXML.ЗначениеАтрибута("ShiftNumber");
					Параметры.НомерЧекаККТ  = ЧтениеXML.ЗначениеАтрибута("CheckNumber");
					ДатаСменыККТ = ЧтениеXML.ЗначениеАтрибута("DateTime");
					Если НЕ ПустаяСтрока(ДатаСменыККТ) Тогда
						Параметры.ДатаСменыККТ = XMLЗначение(Тип("Дата"), ДатаСменыККТ);
					КонецЕсли;
					Параметры.СтатусСмены      = Число(ЧтениеXML.ЗначениеАтрибута("ShiftState"));
					Параметры.ОстатокНаличных  = ЧтениеXML.ЗначениеАтрибута("CashBalance");
					Параметры.ПамятьФППереполнена = ВРег(ЧтениеXML.ЗначениеАтрибута("FPOverflow")) = "TRUE";
					Параметры.ПамятьУПФДПереполнена = ВРег(ЧтениеXML.ЗначениеАтрибута("UPFDOverflow")) = "TRUE";
					Параметры.СтатусОФД = ЧтениеXML.ЗначениеАтрибута("OFDStatus");

					КоличествоНепереданныхФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentsCounter");
					Параметры.КоличествоНепереданныхФД    = ?(ПустаяСтрока(КоличествоНепереданныхФД), 0, Число(КоличествоНепереданныхФД));
					Параметры.НомерПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstNumber");
					ДатаПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstDateTime");
					Если НЕ ПустаяСтрока(ДатаПервогоНепереданногоФД) Тогда
						Параметры.ДатаПервогоНепереданногоФД = XMLЗначение(Тип("Дата"), ДатаПервогоНепереданногоФД);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Заполнить результаты фискализация чека из XML пакета.
//
// Параметры:
//  ПараметрыФискализации - Структура 
Процедура ЗаполнитьРезультатыФискализацияЧекаИзXMLПакета(ПараметрыФискализации) Экспорт
	
	Если Не ПустаяСтрока(ПараметрыФискализации.РезультатОперацииXML) Тогда
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(ПараметрыФискализации.РезультатОперацииXML);
		ЧтениеXML.ПерейтиКСодержимому();
		Если ЧтениеXML.Имя = "DocumentOutputParameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ЧтениеXML.Прочитать() И ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
				ПараметрыФискализации.НомерСменыККТ = ЧтениеXML.ЗначениеАтрибута("ShiftNumber");
				ПараметрыФискализации.НомерЧекаККТ  = ЧтениеXML.ЗначениеАтрибута("CheckNumber");
				ПараметрыФискализации.ФискальныйПризнак  = ЧтениеXML.ЗначениеАтрибута("FiscalSign");
				ПараметрыФискализации.АдресСайтаПроверки = ЧтениеXML.ЗначениеАтрибута("AddressSiteInspections");
				ДатаВремяЧека = ЧтениеXML.ЗначениеАтрибута("DateTime");
				Если НЕ ПустаяСтрока(ДатаВремяЧека) Тогда
					ПараметрыФискализации.ДатаВремяЧека = XMLЗначение(Тип("Дата"), ДатаВремяЧека);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет XML пакет для печати текстового документа
// 
// Параметры:
//  ТестовыеЧеки - Массив - 
//  НефискальныеДокументы - Массив - 
//  ПараметрыПодключения - Структура - см. МенеджерОборудованияКлиентСервер.ПараметрыПодключения()
//  ШиринаСтроки - Число - ширина строки печатающего устройства
Процедура ЗаполнитьXMLПакетыДляТекстовогоДокумента(ТестовыеЧеки, НефискальныеДокументы, ПараметрыПодключения, ШиринаСтроки = 32) Экспорт
	РевизияИнтерфейса = ПараметрыПодключения.РевизияИнтерфейса;
	ТипОборудования = ПараметрыПодключения.ТипОборудования;
	
	Для Каждого ПозицииЧека Из НефискальныеДокументы Цикл
		
		// Пакетная печать чека. Подготовка пакета.
		ЗаписьXML = Новый ЗаписьXML();
		ЗаписьXML.УстановитьСтроку("UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписьXML.ЗаписатьНачалоЭлемента("Document");
		
		// Табличная часть
		Если ПозицииЧека <> Неопределено Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
			Для ИндексМассива = 0 По ПозицииЧека.Количество() - 1 Цикл
				ТекущаяПозиция = ПозицииЧека[ИндексМассива];
				Если ТекущаяПозиция.Свойство("ФискальнаяСтрока") Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("FiscalString");
					ЗаписьXML.ЗаписатьАтрибут("Name"      , XMLСтрока(ТекущаяПозиция.Наименование));
					ЗаписьXML.ЗаписатьАтрибут("Quantity"  , XMLСтрока(ТекущаяПозиция.Количество));
					ЗаписьXML.ЗаписатьАтрибут("Price"     , XMLСтрока(ТекущаяПозиция.Цена));
					ЗаписьXML.ЗаписатьАтрибут("Amount"    , XMLСтрока(ТекущаяПозиция.Сумма));
					КодСтавкиНДС = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.КодСтавкиНДС(ТекущаяПозиция.СтавкаНДС);
					ЗаписьXML.ЗаписатьАтрибут("VATRate"    , XMLСтрока(ТекущаяПозиция.КодСтавкиНДС));
					КодСтавкиНСП = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.КодСтавкиНСП(ТекущаяПозиция.СтавкаНСП);
					ЗаписьXML.ЗаписатьАтрибут("STRate"     , XMLСтрока(ТекущаяПозиция.КодСтавкиНСП));
					ЗаписьXML.ЗаписатьКонецЭлемента();					
				ИначеЕсли ТекущаяПозиция.Свойство("ТекстоваяСтрока") Тогда
					Если ТекущаяПозиция.Свойство("ПереносСтроки") И ТекущаяПозиция.ПереносСтроки Тогда 
						ТекстовыеСтроки = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПостроитьПолеПереносом(ТекущаяПозиция.Текст, ШиринаСтроки);
					Иначе
						ТекстовыеСтроки = ТекущаяПозиция.Текст;
					КонецЕсли;
					Выравнивание = ?(ТекущаяПозиция.Свойство("Выравнивание"),  ТекущаяПозиция.Выравнивание, "Лево"); 
					Для НомерСтроки = 1 По СтрЧислоСтрок(ТекстовыеСтроки) Цикл
						ВыделеннаяСтрока = СтрПолучитьСтроку(ТекстовыеСтроки, НомерСтроки);
						ВыделеннаяСтрока = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ВыровнятьПоле(ВыделеннаяСтрока, ШиринаСтроки, Выравнивание); 
						ЗаписьXML.ЗаписатьНачалоЭлемента("TextString");
						ЗаписьXML.ЗаписатьАтрибут("Text", XMLСтрока(ВыделеннаяСтрока));
						ЗаписьXML.ЗаписатьКонецЭлемента();  
					КонецЦикла;
				ИначеЕсли ТекущаяПозиция.Свойство("ШтрихКод") Тогда // Штрихкод
					ЗаписьXML.ЗаписатьНачалоЭлемента("Barcode");
					Если РевизияИнтерфейса >= 3003 Тогда
						ЗаписьXML.ЗаписатьАтрибут("Type" , XMLСтрока(ТекущаяПозиция.ТипШтрихкода));
						// Значение штрихкода. Штрихкод кодируется текстом в кодировке Base64.
						ШтрихКодBase64 = МенеджерОборудованияВызовСервера.ШтрихкодВBase64(ТекущаяПозиция.ШтрихКод);
						Если ТекущаяПозиция.Свойство("ШтрихКодBase64")
							И НЕ ПустаяСтрока(ТекущаяПозиция.ШтрихКодBase64) Тогда
							ШтрихКодBase64 = ТекущаяПозиция.ШтрихКодBase64;
						КонецЕсли;
						ЗаписьXML.ЗаписатьАтрибут("ValueBase64", XMLСтрока(ШтрихКодBase64));
					ИначеЕсли РевизияИнтерфейса >= 3000 И ТипОборудования = "ККТ" Тогда
						ЗаписьXML.ЗаписатьАтрибут("Type" , XMLСтрока(ТекущаяПозиция.ТипШтрихкода));
						ЗаписьXML.ЗаписатьАтрибут("Value", XMLСтрока(ТекущаяПозиция.ШтрихКод));
					Иначе
						ЗаписьXML.ЗаписатьАтрибут("BarcodeType" , XMLСтрока(ТекущаяПозиция.ТипШтрихкода));
						ЗаписьXML.ЗаписатьАтрибут("Barcode", XMLСтрока(ТекущаяПозиция.ШтрихКод));
					КонецЕсли;
					ЗаписьXML.ЗаписатьКонецЭлемента();
				КонецЕсли;
		КонецЦикла;
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		Текст = ЗаписьXML.Закрыть();
		ТестовыеЧеки.Добавить(Текст);
		
	КонецЦикла;
	
КонецПроцедуры  

// Получить структуру чека из XML.
// 
// Параметры:
//  ДанныеXML - Строка -Данные XML
// 
// Возвращаемое значение:
//  Структура - Загрузить данные фискализации из XML:
//  * ДанныеКоррекции - Структура -:
//    ** НомерПредписания - Число -
//    ** ДатаКоррекции - Дата -
//    ** ОписаниеКоррекции - Строка -
//    ** ТипКоррекции - Число -
//  * НеприменениеККТ - Булево -
//  * КорректируемыйДокумент - Произвольный -
//  * ЕстьПерсональныеДанные - Булево -
//  * ИндивидуальныйРежимПодготовкиДанныхКПередачеВОФД - Булево -
//  * ДопустимоеРасхождениеФорматноЛогическогоКонтроля - Число -
//  * СпособФорматноЛогическогоКонтроля - Неопределено -
//  * СформироватьЧекКоррекции - Булево -
//  * ДополнительныйРеквизитПользователя - Структура -:
//    ** Значение - Произвольный -
//    ** Наименование - Строка -
//  * ДополнительныйРеквизит - Неопределено -
//  * НефискальныеДокументы - Массив из ОпределяемыйТип.ОснованиеФискальнойОперацииБПО -
//  * КассаККМ - Произвольный -
//  * ШаблонЧека - Произвольный -
//  * ТаблицаОплат - Массив -
//  * ПозицииЧека - Массив -
//  * КопийЧека - Число -
//  * ТекстПодвала - Строка -
//  * ТекстШапки - Строка -
//  * ДатаВремя - Дата -
//  * НомерСмены - Число -
//  * НомерЧека - Строка -
//  * НомерКассы - Строка -
//  * НаименованиеМагазина - Строка -
//  * АдресМагазина - Строка -
//  * ОрганизацияКПП - Строка -
//  * ОрганизацияИНН - Строка -
//  * ОрганизацияНазвание - Строка -
//  * СерийныйНомер - Строка -
//  * ПолучательИНН - Строка -
//  * Получатель - Строка -
//  * ДанныеПоставщика - Структура -:
//    ** ИНН - Строка -
//    ** Наименование - Строка -
//    ** Телефон - Строка -
//  * ДанныеАгента - Структура -:
//    ** ОператорПоПриемуПлатежей - Структура -:
//       *** Телефон - Неопределено -
//    ** ОператорПеревода - Структура -:
//       *** Телефон - Строка -
//       *** Наименование - Строка -
//       *** Адрес - Строка -
//       *** ИНН - Строка -
//    ** ПлатежныйАгент - Структура -:
//       *** Операция - Строка -
//       *** Телефон - Строка -
//  * ПризнакАгента - Неопределено -
//  * ПокупательНомер - Строка -
//  * ПокупательEmail - Строка -
//  * ОтправительEmail - Строка -
//  * МестоРасчетов - Строка -
//  * АдресРасчетов - Строка -
//  * СистемаНалогообложения - ПеречислениеСсылка.ТипыСистемНалогообложенияККТ -
//  * Отправляет1СEmail - Булево -
//  * Отправляет1СSMS - Булево -
//  * ТипРасчета - ПеречислениеСсылка.ТипыРасчетаДенежнымиСредствами -
//  * Электронно - Булево -
//  * ТорговыйОбъект - Неопределено -
//  * Организация - Неопределено -
//  * ИдентификаторФискальнойЗаписи - Неопределено -
//  * ДокументОснование - Неопределено -
//  * КассирИНН - Неопределено -
//  * Кассир - Строка -
//  * КорректируемыйДокумент - ОпределяемыйТип.ОснованиеКассовогоЧекаКоррекцииБПО
//  * НеприменениеККТ - Булево -
//  * ДанныеКоррекции - Структура -:
//    ** ТипКоррекции - Число -
//    ** ОписаниеКоррекции - Строка
//    ** ДатаКоррекции - Дата
//    ** НомерПредписания  - Число
Функция ЗагрузитьДанныеФискализацииИзXML(ДанныеXML) Экспорт
	
	ОбщиеПараметры = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииФискализацииЧека();
	
	ФискальнаяСтрока = Неопределено;
	
	Если Не ПустаяСтрока(ДанныеXML) Тогда
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(ДанныеXML);
		ЧтениеXML.ПерейтиКСодержимому();
		Если ЧтениеXML.Имя = "CheckPackage" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Пока ЧтениеXML.Прочитать() Цикл
				Если ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
					ТипРасчета = ?(ЧтениеXML.ЗначениеАтрибута("PaymentType") <> Неопределено, ЧтениеXML.ЗначениеАтрибута("PaymentType"), ЧтениеXML.ЗначениеАтрибута("OperationType"));
					ОбщиеПараметры.ТипРасчета = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.РасчетДенежнымиСредствамиПоКоду(Число(ТипРасчета));
					
					
					ОбщиеПараметры.Кассир = ЧтениеXML.ЗначениеАтрибута("CashierName");
					ОбщиеПараметры.КассирИНН = ЧтениеXML.ЗначениеАтрибута("CashierINN");
					ОбщиеПараметры.КассирПароль = ЧтениеXML.ЗначениеАтрибута("CashierPassword");
					
					ОбщиеПараметры.ОтправительEmail = ЧтениеXML.ЗначениеАтрибута("SenderEmail");
					ОбщиеПараметры.ПокупательEmail = ЧтениеXML.ЗначениеАтрибута("CustomerEmail");
					ОбщиеПараметры.ПокупательНомер = ЧтениеXML.ЗначениеАтрибута("CustomerPhone");
					
					ОбщиеПараметры.ДополнительныйРеквизит = ЧтениеXML.ЗначениеАтрибута("AdditionalAttribute");
					ОбщиеПараметры.Получатель    = ЧтениеXML.ЗначениеАтрибута("CustomerInfo");
					ОбщиеПараметры.ПолучательИНН = ЧтениеXML.ЗначениеАтрибута("CustomerINN");
				КонецЕсли;
				
				
				Если ЧтениеXML.Имя = "CustomerDetail" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда   
					ОбщиеПараметры.СведенияОПокупателе.Покупатель = ЗначениеXMLАтрибута(ЧтениеXML, "Info");
					ОбщиеПараметры.СведенияОПокупателе.ПокупательИНН = ЗначениеXMLАтрибута(ЧтениеXML, "INN");
					ОбщиеПараметры.СведенияОПокупателе.ПокупательАдрес = ЗначениеXMLАтрибута(ЧтениеXML, "Address");
				КонецЕсли;
				
				
				Если ЧтениеXML.Имя = "UserAttribute" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда   
					ОбщиеПараметры.ДополнительныйРеквизитПользователя.Наименование = ЗначениеXMLАтрибута(ЧтениеXML, "Name");
					ОбщиеПараметры.ДополнительныйРеквизитПользователя.Значение = ЗначениеXMLАтрибута(ЧтениеXML, "Value");
				КонецЕсли;
		
				Если ЧтениеXML.Имя = "Positions" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
					
					Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.Имя = "Positions" И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
						
						Если ЧтениеXML.Имя = "FiscalString" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
							ФискальнаяСтрока = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыФискальнойСтрокиЧека();
							
							ФискальнаяСтрока.Наименование =  ЗначениеXMLАтрибута(ЧтениеXML, "Name");
							ФискальнаяСтрока.Код =  ЗначениеXMLАтрибута(ЧтениеXML, "Code");
							ФискальнаяСтрока.Количество   =  Число(ЗначениеXMLАтрибута(ЧтениеXML, "Quantity", , 0));
							
							ФискальнаяСтрока.ЦенаСоСкидками =  Число(ЗначениеXMLАтрибута(ЧтениеXML, "PriceWithDiscount", , 0));
							ФискальнаяСтрока.Сумма          =  Число(ЗначениеXMLАтрибута(ЧтениеXML, "AmountWithDiscount", "SumWithDiscount", 0));
							СуммаСкидок = ЗначениеXMLАтрибута(ЧтениеXML, "DiscountAmount", "DiscountSum", 0);
							Если Не ПустаяСтрока(СуммаСкидок) Тогда
								ФискальнаяСтрока.СуммаСкидок  =  Число(СуммаСкидок);
							КонецЕсли;
							ФискальнаяСтрока.ЕдиницаИзмерения = ЗначениеXMLАтрибута(ЧтениеXML, "MeasurementUnit");
							
							ФискальнаяСтрока.КодТНВЭД = ЗначениеXMLАтрибута(ЧтениеXML, "TNVED");
							ФискальнаяСтрока.КодГКЭД = ЗначениеXMLАтрибута(ЧтениеXML, "GKED");
							
							КодСтавкиНДС = ЗначениеXMLАтрибута(ЧтениеXML, "VATRate");
							ФискальнаяСтрока.СтавкаНДС = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.СтавкаНДСПоКоду(КодСтавкиНДС);
							
							СуммаНДС = ЗначениеXMLАтрибута(ЧтениеXML, "VATAmount",, 0);
							Если Не ПустаяСтрока(СуммаНДС) Тогда
								ФискальнаяСтрока.СуммаНДС = Число(СуммаНДС);
							КонецЕсли;
							
							КодСтавкиНСП = ЗначениеXMLАтрибута(ЧтениеXML, "STRate");
							ФискальнаяСтрока.СтавкаНСП = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.СтавкаНСППоКоду(КодСтавкиНСП);
							
							СуммаНСП = ЗначениеXMLАтрибута(ЧтениеXML, "STAmount",, 0);
							Если Не ПустаяСтрока(СуммаНСП) Тогда
								ФискальнаяСтрока.СуммаНСП = Число(СуммаНСП);
							КонецЕсли;
							
							ПризнакСпособаРасчета = Число(ЗначениеXMLАтрибута(ЧтениеXML, "SignMethodCalculation", "PaymentMethod", 0));
							ФискальнаяСтрока.ПризнакСпособаРасчета = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПризнакСпособаРасчетаПоКоду(ПризнакСпособаРасчета);
							
							ПризнакПредметаРасчета = Число(ЗначениеXMLАтрибута(ЧтениеXML, "SignCalculationObject", "CalculationSubject", 0));
							ФискальнаяСтрока.ПризнакПредметаРасчета =  ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПризнакПредметаРасчетаПоКоду(ПризнакПредметаРасчета);
							
							ФискальнаяСтрока.ДополнительныйРеквизит = ЗначениеXMLАтрибута(ЧтениеXML, "AdditionalAttribute");
							
							Если ЧтениеXML.ЗначениеАтрибута("MarkingCode") <> Неопределено Тогда
								ФискальнаяСтрока.КонтрольнаяМарка = ЧтениеXML.ЗначениеАтрибута("MarkingCode"); 
							КонецЕсли;
							
							Если ЧтениеXML.ЗначениеАтрибута("MarkingType") <> Неопределено Тогда
								ФискальнаяСтрока.КодМаркировки = ЧтениеXML.ЗначениеАтрибута("MarkingType"); 
							КонецЕсли;
							
							ОбщиеПараметры.ПозицииЧека.Добавить(ФискальнаяСтрока);
						КонецЕсли;
						
						
						//Если ЧтениеXML.Имя = "PurveyorData" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда   
						//	Если ФискальнаяСтрока <> Неопределено Тогда
						//		ФискальнаяСтрока.ДанныеПоставщика.Наименование = ЗначениеXMLАтрибута(ЧтениеXML, "PurveyorName");
						//		ФискальнаяСтрока.ДанныеПоставщика.Телефон = ЗначениеXMLАтрибута(ЧтениеXML, "PurveyorPhone");
						//		ФискальнаяСтрока.ДанныеПоставщика.ИНН = ЗначениеXMLАтрибута(ЧтениеXML, "PurveyorVATIN");
						//	КонецЕсли;
						//КонецЕсли;
							
						Если ЧтениеXML.Имя = "VendorData" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда   
							Если ФискальнаяСтрока <> Неопределено Тогда
								ФискальнаяСтрока.ДанныеПоставщика.Наименование = ЗначениеXMLАтрибута(ЧтениеXML, "VendorName");
								ФискальнаяСтрока.ДанныеПоставщика.Телефон = ЗначениеXMLАтрибута(ЧтениеXML, "VendorPhone");
								ФискальнаяСтрока.ДанныеПоставщика.ИНН = ЗначениеXMLАтрибута(ЧтениеXML, "VendorINN");
							КонецЕсли;
						КонецЕсли;
						
						
						Если ЧтениеXML.Имя = "TextString" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
							Текст = ЗначениеXMLАтрибута(ЧтениеXML, "Text");
							ТекстоваяСтрока = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыТекстовойСтрокиЧека(Текст);
							ОбщиеПараметры.ПозицииЧека.Добавить(ТекстоваяСтрока);
						КонецЕсли;
						
						Если ЧтениеXML.Имя = "Barcode" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
							ТипШтрихкодаЗнач = ЗначениеXMLАтрибута(ЧтениеXML, "Type");
							ШтрихКодЗнач = ЗначениеXMLАтрибута(ЧтениеXML, "Value");
							ШтрихКодBase64 = ЗначениеXMLАтрибута(ЧтениеXML, "ValueBase64");
							СтрокаШтрихКод = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыШтрихкодВСтрокеЧека(ТипШтрихкодаЗнач, ШтрихКодЗнач, ШтрихКодBase64); 
							ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаШтрихКод);
						КонецЕсли;
						
					КонецЦикла;  
					
				КонецЕсли;
				
				Если ЧтениеXML.Имя = "Payments" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
					
					СуммаНаличные   = Число(ЗначениеXMLАтрибута(ЧтениеXML, "Cash", , 0));
					СуммаЭлектронно = Число(ЗначениеXMLАтрибута(ЧтениеXML, "ElectronicPayment", , 0));
					СуммаПостоплата = Число(ЗначениеXMLАтрибута(ЧтениеXML, "Credit", "PostPayment", 0));
					СуммаПредоплата = Число(ЗначениеXMLАтрибута(ЧтениеXML, "AdvancePayment", "PrePayment", 0));
					
					Если СуммаНаличные > 0 Тогда
						СтрокаОплаты = Новый Структура();
						СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Наличные"));
						СтрокаОплаты.Вставить("Сумма", СуммаНаличные);
						ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
					КонецЕсли;
					
					Если СуммаЭлектронно > 0 Тогда
						СтрокаОплаты = Новый Структура();
						СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Электронно"));
						СтрокаОплаты.Вставить("Сумма", СуммаЭлектронно);
						ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
					КонецЕсли;
					
					Если СуммаПостоплата > 0 Тогда
						СтрокаОплаты = Новый Структура();
						СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Постоплата"));
						СтрокаОплаты.Вставить("Сумма", СуммаПостоплата);
						ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
					КонецЕсли;
					
					Если СуммаПредоплата > 0 Тогда
						СтрокаОплаты = Новый Структура();
						СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Предоплата"));
						СтрокаОплаты.Вставить("Сумма", СуммаПредоплата);
						ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
					КонецЕсли;
					
					
				КонецЕсли;
				
			КонецЦикла; 
			
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат ОбщиеПараметры;
	
КонецФункции



//// Получить результаты запроса ОИСМ КМ из XML пакета.
//// 
//// Параметры:
////  ДанныеXML - Строка - XML.
////  Параметры - Неопределено - Параметры
//// 
//// Возвращаемое значение:
////  Неопределено, Структура - Получить результаты ОИСМКМИз XMLПакета:
//// * ИдентификаторЗапроса - УникальныйИдентификатор.
//// * СтатусРезультата - ПеречислениеСсылка.СтатусРезультатаЗапросаКМ.
//// * РезультатПроверкиОИСМ - Булево -
//// * КодРезультатаПроверкиОИСМ - Число -
//// * РезультатПроверкиОИСМПредставление - Строка -
//// * РезультатПроверкиСведенийОТоваре - Булево
//// * РезультатПроверкиСведенийОТовареПФ - Булево
//// * КодОбработкиЗапроса -Число
//// * СтатусОбработкиЗапроса - ПеречислениеСсылка.СтатусОбработкиЗапросаКМ.
//// * СтатусТовара - Неопределено -
//Функция ПолучитьРезультатыОИСМКМИзXMLПакета(ДанныеXML, Параметры = Неопределено) Экспорт
//	
//	Если Параметры = Неопределено Тогда
//		Параметры = Новый Структура();
//	КонецЕсли;
//	Параметры.Вставить("ИдентификаторЗапроса");
//	Параметры.Вставить("СтатусРезультата");
//	Параметры.Вставить("РезультатПроверкиОИСМ", Ложь);
//	Параметры.Вставить("КодРезультатаПроверкиОИСМ", 0);
//	Параметры.Вставить("РезультатПроверкиОИСМПредставление", "00000000");

//	Параметры.Вставить("РезультатПроверкиСведенийОТоваре");
//	Параметры.Вставить("РезультатПроверкиСведенийОТовареПФ");
//	Параметры.Вставить("КодОбработкиЗапроса");
//	Параметры.Вставить("СтатусОбработкиЗапроса");


#КонецОбласти

// Выполняет проверку обязательности заполняет тэгов.
//
// Параметры:
//  Параметры - Структура 
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование
//  ОписаниеОшибки - Строка
// 
// Возвращаемое значение:
//  Булево.
Функция ВыполненаПроверкаОбязательностиИПравильностиЗаполненияТэгов(Параметры, ИдентификаторУстройства, ОписаниеОшибки) Экспорт
	
	Если ИспользуетсяКассовыеСмены() Тогда
		МодульФорматноЛогическийКонтрольВызовСервера = ОбщегоНазначения.ОбщийМодуль("ФорматноЛогическийКонтрольВызовСервера");
		МодульФорматноЛогическийКонтрольВызовСервера.ВыполнитьКоррекциюЗаполненияТэгов(Параметры, ИдентификаторУстройства, ОписаниеОшибки);
		Возврат МодульФорматноЛогическийКонтрольВызовСервера.ВыполненаПроверкаОбязательностиИПравильностиЗаполненияТэгов(Параметры, ИдентификаторУстройства, ОписаниеОшибки);
	Иначе
		ВызватьИсключение НСтр("ru='Выполнение команды невозможно, поскольку подсистемы ККТ, ФР, Принтер чеков недоступны.'");
	КонецЕсли;
	
КонецФункции

// Процедура приводит к формату согласованному с ФНС.
//
// Параметры:
//  ОсновныеПараметры - см. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииФискализацииЧека
//  Отказ - Булево
//  ОписаниеОшибки - Строка
//  ИсправленыОсновныеПараметры - Булево
Процедура ПривестиДанныеКТребуемомуФормату(ОсновныеПараметры, Отказ, ОписаниеОшибки, ИсправленыОсновныеПараметры) Экспорт
	
	Если ИспользуетсяКассовыеСмены() Тогда
		МодульФорматноЛогическийКонтрольКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ФорматноЛогическийКонтрольКлиентСервер");
		МодульФорматноЛогическийКонтрольКлиентСервер.ПривестиДанныеКТребуемомуФормату(ОсновныеПараметры, Отказ, ОписаниеОшибки, ИсправленыОсновныеПараметры);
	Иначе
		ВызватьИсключение НСтр("ru='Выполнение команды невозможно, поскольку подсистемы ККТ, ФР, Принтер чеков недоступны.'");
	КонецЕсли;
	
КонецПроцедуры

// Функция формирует шаблон чека.
//
// Параметры:
//  ОбщиеПараметры - Структура - см.ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииФискализацииЧека().
//  ТипОборудования - Строка - типы оборудования строкой.
//  ДополнительныйТекст - Строка - дополнительный текст шаблона чека.
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование
//
// Возвращаемое значение:
//  Структура.
Функция СформироватьШаблонЧека(ОбщиеПараметры, ТипОборудования, ДополнительныйТекст = Неопределено, ИдентификаторУстройства = Неопределено) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	ШаблонЧека = МенеджерОборудованияВызовСервераПереопределяемый.СформироватьШаблонЧека(ОбщиеПараметры, ДополнительныйТекст, СтандартнаяОбработка, ТипОборудования); 
	Если СтандартнаяОбработка Тогда
		Возврат ОбщиеПараметры;
	Иначе
		Возврат ШаблонЧека;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеДанныхККТ


Процедура ЗаписатьДанныеПоставщика(ЗаписьXML, ДанныеПоставщика, РевизияИнтерфейса = 0)
	
		ЗаписьXML.ЗаписатьНачалоЭлемента("VendorData");
		Если Не ПустаяСтрока(ДанныеПоставщика.Телефон) Тогда // Телефон поставщика
			ЗаписьXML.ЗаписатьАтрибут("VendorPhone" , XMLСтрока(ДанныеПоставщика.Телефон));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеПоставщика.Наименование) Тогда // Наименование поставщика
			ЗаписьXML.ЗаписатьАтрибут("VendorName" , XMLСтрока(ДанныеПоставщика.Наименование));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеПоставщика.ИНН) Тогда // ИНН поставщика
			ЗаписьXML.ЗаписатьАтрибут("VendorINN" , XMLСтрока(ДанныеПоставщика.ИНН));
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры


Процедура ЗаписатьДополнительныйРеквизитПользователя(ЗаписьXML, ДополнительныйРеквизитПользователя);
	
	Если ПустаяСтрока(ДополнительныйРеквизитПользователя.Наименование) 
		И ПустаяСтрока(ДополнительныйРеквизитПользователя.Значение) Тогда
			Возврат;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("UserAttribute");
	Если Не ПустаяСтрока(ДополнительныйРеквизитПользователя.Наименование) Тогда // Наименование дополнительного реквизита пользователя.
		ЗаписьXML.ЗаписатьАтрибут("Name" , XMLСтрока(ДополнительныйРеквизитПользователя.Наименование));
	КонецЕсли;
	Если Не ПустаяСтрока(ДополнительныйРеквизитПользователя.Значение) Тогда // Значение дополнительного реквизита пользователя.
		ЗаписьXML.ЗаписатьАтрибут("Value", XMLСтрока(ДополнительныйРеквизитПользователя.Значение));
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры



Процедура ЗаписатьСведенияОПокупателе(ЗаписьXML, ОбщиеПараметры, ПерсональныеДанные = Неопределено, ТипПерсональныхДанных = Неопределено);
	
	СведенияОПокупателе = ОбщиеПараметры.СведенияОПокупателе; 
	
	Покупатель = СведенияОПокупателе.Покупатель;
	Если ПустаяСтрока(Покупатель) Тогда
		Покупатель = ОбщиеПараметры.Получатель;
	КонецЕсли;
	
	Если ПерсональныеДанные <> Неопределено И ТипПерсональныхДанных <> Неопределено И ТипПерсональныхДанных = Перечисления.ТипыПерсональныхДанныхККТ.ИНН Тогда
		ПокупательИНН = ПерсональныеДанные.ИНН
	Иначе
		ПокупательИНН = СведенияОПокупателе.ПокупательИНН;
	КонецЕсли;
	
	Если ПустаяСтрока(ПокупательИНН) Тогда
		ПокупательИНН = ОбщиеПараметры.ПолучательИНН;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("CustomerDetail");
	
	Если Не ПустаяСтрока(Покупатель) Тогда
		ЗаписьXML.ЗаписатьАтрибут("Info",  XMLСтрока(Покупатель));
	КонецЕсли;
	Если Не ПустаяСтрока(ПокупательИНН) Тогда
		ЗаписьXML.ЗаписатьАтрибут("INN",  XMLСтрока(ПокупательИНН));
	КонецЕсли;
	Если Не ПустаяСтрока(СведенияОПокупателе.ПокупательАдрес) Тогда
		ЗаписьXML.ЗаписатьАтрибут("Address",  XMLСтрока(СведенияОПокупателе.ПокупательАдрес));
	КонецЕсли;
	
	Если ПерсональныеДанные <> Неопределено И ТипПерсональныхДанных <> Неопределено И ТипПерсональныхДанных = Перечисления.ТипыПерсональныхДанныхККТ.ПаспортныеДанные Тогда
		
		Если Не ПустаяСтрока(ПерсональныеДанные.Гражданство) Тогда
			ЗаписьXML.ЗаписатьАтрибут("Citizenship",  XMLСтрока(ПерсональныеДанные.Гражданство));
		КонецЕсли;
		
		
		Если Не ПустаяСтрока(ПерсональныеДанные.ДанныеДокумента) Тогда
			ЗаписьXML.ЗаписатьАтрибут("DocumentData",  XMLСтрока(ПерсональныеДанные.ДанныеДокумента));
		КонецЕсли;
		
		Если Не ПустаяСтрока(ПерсональныеДанные.ДатаРождения) Тогда
			// АПК: 1367-выкл, АПК: 335-выкл особенность локального законодательства
			ДатаРождения = Формат(ПерсональныеДанные.ДатаРождения, "ДФ=""дд.ММ.гггг""");
			// АПК: 1367-вкл, АПК: 335-вкл 
			ЗаписьXML.ЗаписатьАтрибут("DateOfBirth",  ДатаРождения);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Функция ЗначениеXMLАтрибута(ЧтениеXML, ИмяАтрибута, ДопИмяАтрибута = Неопределено, ЗначениеПоУмолчанию = Неопределено)
	
	Результат = ЗначениеПоУмолчанию;
	Если ЧтениеXML.ЗначениеАтрибута(ИмяАтрибута) <> Неопределено Тогда  
		Результат = ЧтениеXML.ЗначениеАтрибута(ИмяАтрибута);
	ИначеЕсли НЕ ПустаяСтрока(ДопИмяАтрибута) И ЧтениеXML.ЗначениеАтрибута(ДопИмяАтрибута) <> Неопределено Тогда
		Результат = ЧтениеXML.ЗначениеАтрибута(ДопИмяАтрибута);
	КонецЕсли;
	
	Возврат Результат; 
	
КонецФункции

#КонецОбласти

#Область КассоваяСмена

// Возвращает Истина, если используется подсистемы фискальных устройств и эти подсистемы существует в конфигурации.
// Предназначена для реализации вызова необязательной подсистемы (условного вызова).
//
// У хотя бы одной "функциональной" подсистемы включен флажок "Включать в командный интерфейс".
//
// Возвращаемое значение:
//  Булево.
//
Функция ИспользуетсяКассовыеСмены()
	
	Возврат МенеджерОборудованияВызовСервера.ИспользуетсяКассоваяСмена();
	
КонецФункции

Функция ПередОткрытиемКассовойСмены(ПараметрыПодключения, ДанныеОперации)
	
	Результат = Истина;                    
	
	Если ИспользуетсяКассовыеСмены() Тогда
		ОписаниеКассовойСмены = ОписаниеПоследнейКассовойСмены(ПараметрыПодключения.ИдентификаторУстройства);
		Если ОписаниеКассовойСмены <> Неопределено И ОписаниеКассовойСмены.Статус = Перечисления.СтатусыКассовойСмены.Открыта Тогда
			ДанныеОперации.Результат = Ложь;
			ДанныеОперации.ТекстОшибки = НСтр("ru='Кассовая смена уже открыта.'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;  
	
КонецФункции

Функция ПередЗакрытиемКассовойСмены(ПараметрыПодключения, ДанныеОперации)
	
	Результат = Истина;
	
	Если ИспользуетсяКассовыеСмены() Тогда
		ОписаниеКассовойСмены = ОписаниеПоследнейКассовойСмены(ПараметрыПодключения.ИдентификаторУстройства);
		Если ОписаниеКассовойСмены = Неопределено Тогда
			ДанныеОперации.КассоваяСмена = НоваяКассоваяСмена(ПараметрыПодключения.ИдентификаторУстройства, ДанныеОперации);
		ИначеЕсли ОписаниеКассовойСмены.Статус = Перечисления.СтатусыКассовойСмены.Открыта Тогда
			ДанныеОперации.КассоваяСмена = ОписаниеКассовойСмены.КассоваяСмена;
		Иначе
			ДанныеОперации.Результат = Ложь;
			ДанныеОперации.ТекстОшибки = НСтр("ru='Кассовая смена уже закрыта.'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;  
	
КонецФункции

Функция ПослеОткрытияКассовойСмены(ПараметрыПодключения, РезультатВыполнения)
	
	Результат = Истина;
	
	НоваяКассоваяСмена(ПараметрыПодключения.ИдентификаторУстройства, РезультатВыполнения);
	
	Возврат Результат;
	
КонецФункции

Функция ПослеЗакрытияКассовойСмены(ПараметрыПодключения, РезультатВыполнения)
	
	Результат = Истина;
	
	ЗакрытьКассовуюСмену(РезультатВыполнения); 
	
	Возврат Результат;
	
КонецФункции

// Для внутреннего использования
//
Функция ПолучитьСтатусПоследнейСмены(ИдентификаторУстройства) 
	
	Если ИспользуетсяКассовыеСмены() Тогда
		МодульКассовыеСменыВызовСервера = ОбщегоНазначения.ОбщийМодуль("КассовыеСменыВызовСервера");
		Возврат МодульКассовыеСменыВызовСервера.СтатусПоследнейСмены(ИдентификаторУстройства);
	Иначе
		ВызватьИсключение НСтр("ru='Выполнение команды невозможно, поскольку подсистемы ККТ, ФР, Принтер чеков недоступны.'");
	КонецЕсли;
	
КонецФункции

// Для внутреннего использования
//
Функция НоваяКассоваяСмена(ФискальноеУстройство, ДанныеОперации) 
	
	Если ИспользуетсяКассовыеСмены() Тогда
		МодульКассовыеСменыВызовСервера = ОбщегоНазначения.ОбщийМодуль("КассовыеСменыВызовСервера");
		Возврат МодульКассовыеСменыВызовСервера.НоваяКассоваяСмена(ФискальноеУстройство, ДанныеОперации);
	Иначе
		ВызватьИсключение НСтр("ru='Выполнение команды невозможно, поскольку подсистемы ККТ, ФР, Принтер чеков недоступны.'");
	КонецЕсли;
	
КонецФункции

// Для внутреннего использования
//
Процедура ЗакрытьКассовуюСмену(ДанныеОперации) 
	
	Если ИспользуетсяКассовыеСмены() Тогда
		МодульКассовыеСменыВызовСервера = ОбщегоНазначения.ОбщийМодуль("КассовыеСменыВызовСервера");
		МодульКассовыеСменыВызовСервера.ЗакрытьКассовуюСмену(ДанныеОперации);
	Иначе
		ВызватьИсключение НСтр("ru='Выполнение команды невозможно, поскольку подсистемы ККТ, ФР, Принтер чеков недоступны.'");
	КонецЕсли;
	
КонецПроцедуры

// Для внутреннего использования
///
Функция ОписаниеПоследнейКассовойСмены(ФискальноеУстройство) 
	
	Если ИспользуетсяКассовыеСмены() Тогда
		МодульКассовыеСменыВызовСервера = ОбщегоНазначения.ОбщийМодуль("КассовыеСменыВызовСервера");
		Возврат МодульКассовыеСменыВызовСервера.ОписаниеПоследнейКассовойСмены(ФискальноеУстройство);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Служебные

// Получить обработки запроса КМ по коду.
//
Функция СтатусОбработкиЗапросаКМПоКоду(КодОбработкиЗапроса) 
	
	СтатусОбработки = Новый Соответствие(); 
	
	СтатусОбработки.Вставить(0, ПредопределенноеЗначение("Перечисление.СтатусОбработкиЗапросаКМ.КорректныйФормат"));
	СтатусОбработки.Вставить(1, ПредопределенноеЗначение("Перечисление.СтатусОбработкиЗапросаКМ.НекорректныйФормат"));
	СтатусОбработки.Вставить(2, ПредопределенноеЗначение("Перечисление.СтатусОбработкиЗапросаКМ.НекорректныйФорматКМ"));
	
	Возврат СтатусОбработки.Получить(Число(КодОбработкиЗапроса));
	
КонецФункции

// Получить результат проверки сведений о товаре.
//
Функция РезультатПроверкиСведенийОТоваре(РезультатПроверки)
	
	РезультатыПроверки = Новый Соответствие();
	
	РезультатыПроверки.Вставить("00000000", НСтр("ru='Проверка КП КМ не выполнена, статус товара ОИСМ не проверен'"));
	РезультатыПроверки.Вставить("00000001", НСтр("ru='Проверка КП КМ выполнена в ФН с отрицательным результатом, статус товара ОИСМ не проверен'"));
	РезультатыПроверки.Вставить("00000011", НСтр("ru='Проверка КП КМ выполнена с положительным результатом, статус товара ОИСМ не проверен'"));
	РезультатыПроверки.Вставить("00010000", НСтр("ru='Проверка КП КМ не выполнена, статус товара ОИСМ не проверен (ККТ функционирует в автономном режиме)'"));
	РезультатыПроверки.Вставить("00010001", НСтр("ru='Проверка КП КМ выполнена в ФН с отрицательным результатом, статус товара ОИСМ не проверен (ККТ функционирует в автономном режиме)'"));
	РезультатыПроверки.Вставить("00010011", НСтр("ru='Проверка КП КМ выполнена в ФН с положительным результатом, статус товара ОИСМ не проверен (ККТ функционирует в автономном режиме)'"));
	РезультатыПроверки.Вставить("00000101", НСтр("ru='Проверка КП КМ выполнена с отрицательным результатом, статус товара у ОИСМ некорректен'"));
	РезультатыПроверки.Вставить("00000111", НСтр("ru='Проверка КП КМ выполнена с положительным результатом, статус товара у ОИСМ некорректен'"));
	РезультатыПроверки.Вставить("00001111", НСтр("ru='Проверка КП КМ выполнена с положительным результатом, статус товара у ОИСМ корректен'"));
	
	Возврат РезультатыПроверки.Получить(РезультатПроверки);
	
КонецФункции

// Получить результат проверки сведений о товаре.
//
Функция РезультатПроверкиСведенийОТовареПФ(РезультатПроверки)
	
	РезультатыПроверки = Новый Соответствие();
	
	РезультатыПроверки.Вставить("00000000", "[М]");  // Не локализовывать, утверждено ФФД.
	РезультатыПроверки.Вставить("00000001", "[М-]"); // Не локализовывать, утверждено ФФД.
	РезультатыПроверки.Вставить("00000011", "[М]");  // Не локализовывать, утверждено ФФД.
	РезультатыПроверки.Вставить("00010000", "[М]");  // Не локализовывать, утверждено ФФД.
	РезультатыПроверки.Вставить("00010001", "[М-]"); // Не локализовывать, утверждено ФФД.
	РезультатыПроверки.Вставить("00010011", "[М]");  // Не локализовывать, утверждено ФФД.
	РезультатыПроверки.Вставить("00000101", "[М-]"); // Не локализовывать, утверждено ФФД.
	РезультатыПроверки.Вставить("00000111", "[М-]"); // Не локализовывать, утверждено ФФД.
	РезультатыПроверки.Вставить("00001111", "[М+]"); // Не локализовывать, утверждено ФФД.
	
	Возврат РезультатыПроверки.Получить(РезультатПроверки);
	
КонецФункции

#КонецОбласти

#КонецОбласти