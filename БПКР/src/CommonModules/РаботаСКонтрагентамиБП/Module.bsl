///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Ping

// Функция - Проверить доступ к сервисам
// 
// Возвращаемое значение:
//  Булево - есть или нет доступ
//
Функция ПроверитьДоступКСервисам() Экспорт
	
	ИдентификаторСервиса = "ping";
	ЗаписатьИнформациюВЖурналРегистрации(НСтр("ru = 'Проверка доступа'"), ИдентификаторСервиса);
		
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыПолучения = ПараметрыАутентификацииНаСайте();
	УстановитьПривилегированныйРежим(Ложь);
	
	ДополнитьПараметрыПолученияДаннымиСтатистики(ПараметрыПолучения);
	
	URL = БазовыйURLСервиса() + ИдентификаторСервиса;
	Результат = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(URL, ПараметрыПолучения);
	
	Если Результат.КодСостояния = 200 Тогда 
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область Контрагенты

// Возвращает реквизиты юридического лица (наименование, адрес, коды и т.д.).
//
// Параметры:
//	ИНН - Строка - ИНН юридического лица, реквизиты которого надо получить.
//
// Возвращаемое значение:
//	Структура - реквизиты юридического лица.
//		* ИНН - Строка - ИНН юридического лица.
//		* Наименование - Строка - представление юридического лица в учетной программе.
//		* НаименованиеПолное - Строка - полное наименование юридического лица.
//		* НаименованиеСокращенное - Строка - сокращенное наименование юридического лица.
//		* ПравоваяФорма - Строка, Неопределено - правовая форма юридического лица.
//		* ЮридическийАдрес - Структура, Неопределено - данные о юридическом адресе.
//			** КонтактнаяИнформация - Строка - данные в формате JSON для заполнения реквизита
//				"Значение" контактной информации в табличной части КонтактнаяИнформация объекта
//				(см. описание подсистемы "Контактная информация" Библиотеки стандартных подсистем).
//			** Представление - Строка - представление адреса.
//			** Комментарий - Строка - произвольный комментарий.
//			** Корректный - Булево - адрес является корректным по данным ФИАС;
//		* Телефон - Структура, Неопределено - данные о телефоне.
//			** КонтактнаяИнформация - Строка - данные в формате JSON для заполнения реквизита
//				"Значение" контактной информации в табличной части КонтактнаяИнформация объекта
//				(см. описание подсистемы "Контактная информация" Библиотеки стандартных подсистем).
//			** Представление - Строка - представление телефона.
//			** Комментарий - Строка - произвольный комментарий.
//		* Руководитель - Структура, Неопределено - данные о руководителе.
//			** Должность - Строка - должность руководителя.
//			** Фамилия - Строка - фамилия руководителя.
//			** Имя - Строка - имя руководителя.
//			** Отчество - Строка - отчество руководителя.
//			** Представление - Строка - ФИО руководителя.
//			** ИНН - Строка - ИНН руководителя.
//			** ДатаЗаписи - Дата - дата записи о руководителе.
//		* ОписаниеОшибки - Строка - описание возникшей ошибки.
//			Для обработки ошибки на клиентской части необходимо использовать метод
//			РаботаСКонтрагентамиКлиентБП.ОбработатьОшибку.
//
Функция РеквизитыЮридическогоЛицаПоИНН(Знач ИНН) Экспорт
	
	ИдентификаторСервиса = "findContractorByTin";
	
	ТекстСообщения = СтрШаблон(НСтр("ru = 'Получение реквизитов юридического лица для ИНН %1'"), ИНН);
	ЗаписатьИнформациюВЖурналРегистрации(ТекстСообщения, ИдентификаторСервиса);
		
	РеквизитыКонтрагента = НовыеРеквизитыЮридическогоЛица();
	
	URLСервиса = БазовыйURLСервиса() + ИдентификаторСервиса;
	
	ПараметрыСервиса = Новый Структура;
	ПараметрыСервиса.Вставить("URLСервиса", URLСервиса);
	ПараметрыСервиса.Вставить("ИНН", ИНН);
	РезультатОперации = ЗагрузитьСодержимоеИзИнтернет(ИдентификаторСервиса, ПараметрыСервиса);
	
	Если РезультатОперации.КодСостояния = 200 Тогда
		Результат = ПолучитьПараметрыИзJSON(РезультатОперации.Содержимое);	
		ЗаполнитьЗначенияСвойств(РеквизитыКонтрагента, Результат);
		
		РеквизитыКонтрагента.ЮридическийАдрес = Результат.Адрес;
		
		//Если ЗначениеЗаполнено(Результат.КодПравовойФормы) Тогда 
		//	РеквизитыКонтрагента.КодПравовойФормы = Перечисления.КодыПравовойФормы[Результат.КодПравовойФормы];
		//КонецЕсли;
		
		Если ЗначениеЗаполнено(Результат.КодРайона) Тогда 
			РеквизитыКонтрагента.ГНС = Справочники.ГНС.НайтиПоКоду(Результат.КодРайона);
		КонецЕсли;	
	Иначе
		ЗаписатьОшибкуВЖурналРегистрации(РезультатОперации.ИнформацияОбОшибке, ИдентификаторСервиса);
		ТекстСообщения = СтрШаблон(НСтр("ru = '%1 %2'"), РезультатОперации.СообщениеОбОшибке, РезультатОперации.Содержимое);
		РеквизитыКонтрагента.ОписаниеОшибки = ТекстСообщения;
	КонецЕсли;	
	
	РеквизитыКонтрагента.ИНН = ИНН;

	Возврат РеквизитыКонтрагента;
	
КонецФункции

// Возвращает Истина, если сервис 1С:Контрагент подключен.
//
// Возвращаемое значение:
//   Булево
//
Функция Сервис1СКонтрагентПодключен() Экспорт
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	УстановитьПривилегированныйРежим(Истина);
	РеквизитыНалоговогоОргана = РеквизитыЮридическогоЛицаПоИНН("00305200510030");
	УстановитьПривилегированныйРежим(Ложь);
	УстановитьОтключениеБезопасногоРежима(Ложь);
	
	СервисПодключен = Не ЗначениеЗаполнено(РеквизитыНалоговогоОргана.ОписаниеОшибки);
	
	Возврат СервисПодключен;
	
КонецФункции

#КонецОбласти

#Область ПрочиеКлассификаторы

// Возвращает классификатор.
//
// Параметры:
//  ИдентификаторСервиса	 - Строка	 - Имя, как оно задано в сервисе
// 
// Возвращаемое значение:
//  XML - Классификатор.
//
Функция РеквизитыКлассификатор(ИдентификаторСервиса) Экспорт
	
	ЗаписатьИнформациюВЖурналРегистрации(НСтр("ru = 'Получение классификатора'"), ИдентификаторСервиса);
		
	РеквизитыКлассификатора = НовыеРеквизитыКлассификатор();
	
	URLСервиса = БазовыйURLСервиса() + "getСlassifier";
	
	ПараметрыСервиса = Новый Структура;
	ПараметрыСервиса.Вставить("URLСервиса", URLСервиса);
	РезультатОперации = ЗагрузитьСодержимоеИзИнтернет(ИдентификаторСервиса, ПараметрыСервиса);
	
	Если РезультатОперации.КодСостояния = 200 Тогда
		Результат = ПолучитьПараметрыИзJSON(РезультатОперации.Содержимое);	
		ЗаполнитьЗначенияСвойств(РеквизитыКлассификатора, Результат);
	Иначе
		ЗаписатьОшибкуВЖурналРегистрации(РезультатОперации.ИнформацияОбОшибке, ИдентификаторСервиса);
		ТекстСообщения = СтрШаблон(НСтр("ru = '%1 %2'"), РезультатОперации.СообщениеОбОшибке, РезультатОперации.Содержимое);
		РеквизитыКлассификатора.ОписаниеОшибки = ТекстСообщения;
	КонецЕсли;	
	
	Возврат РеквизитыКлассификатора;
	
КонецФункции

// Возвращает ставки налогов.
//
// Параметры:
//  ИдентификаторСервиса	 - Строка	 - Имя, как оно задано в сервисе
// 
// Возвращаемое значение:
//  XML - ставки.
//
Функция РеквизитыСтавкиНалогов(ИдентификаторСервиса) Экспорт
	
	ЗаписатьИнформациюВЖурналРегистрации(НСтр("ru = 'Получение ставок налогов'"), ИдентификаторСервиса);
		
	РеквизитыКлассификатора = НовыеРеквизитыКлассификатор();
	
	URLСервиса = БазовыйURLСервиса() + "getRates";
	
	ПараметрыСервиса = Новый Структура;
	ПараметрыСервиса.Вставить("URLСервиса", URLСервиса);
	РезультатОперации = ЗагрузитьСодержимоеИзИнтернет(ИдентификаторСервиса, ПараметрыСервиса);
	
	Если РезультатОперации.КодСостояния = 200 Тогда
		Результат = ПолучитьПараметрыИзJSON(РезультатОперации.Содержимое);	
		ЗаполнитьЗначенияСвойств(РеквизитыКлассификатора, Результат);
	Иначе
		ЗаписатьОшибкуВЖурналРегистрации(РезультатОперации.ИнформацияОбОшибке, ИдентификаторСервиса);
		ТекстСообщения = СтрШаблон(НСтр("ru = '%1 %2'"), РезультатОперации.СообщениеОбОшибке, РезультатОперации.Содержимое);
		РеквизитыКлассификатора.ОписаниеОшибки = ТекстСообщения;
	КонецЕсли;	
	
	Возврат РеквизитыКлассификатора;
	
КонецФункции

#КонецОбласти

#Область ЭлектронныеСчетаФактуры

// Возвращает XDTO для формироания xml.
//
// Возвращаемое значение:
//	Структура - реквизиты юридического лица.
//		* ИмяПакета - Строка - URI пространства имен.
//		* ОписаниеОшибки - Строка - описание ошибки.
//		* Прокси - WSПрокси - прокси для выбора сервиса.
//
Функция РеквизитыЭлектроннойСФ() Экспорт 

	ИдентификаторСервиса = "ElectronicInvoice";
	ЗаписатьИнформациюВЖурналРегистрации(НСтр("ru = 'Получение пакета ElectronicInvoice'"), ИдентификаторСервиса);
		
	ОписаниеОшибки = "";
	Реквизиты = НовыеРеквизитыЭлектроннойСФ();
	
	ПараметрыСервиса = ПараметрыСервисаЭлектроннойСФ();
	
	ИмяМетода = "getXDTOPackage";
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		ОбъектXDTO = Неопределено;
		Прокси = ПроксиСервиса(
			ПараметрыСервиса.URL,
			ПараметрыСервиса.URIПространстваИмен,
			ПараметрыСервиса.Имя,
			ПараметрыСервиса.ИмяТочкиПодключения,
			ОписаниеОшибки);
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		
		ВходныеПараметры = Прокси.ФабрикаXDTO.Создать(
			Прокси.ФабрикаXDTO.Тип(ПараметрыСервиса.URIПространстваИмен, ИмяМетода));
		
		ВходныеПараметры.additionalParameters =
			ДополнительныеПараметрыВызоваОперацииСервиса(
				Прокси.ФабрикаXDTO,
				"http://company1c.com/orgregister/base");
		
		Попытка
			Результат = Прокси.getXDTOPackage(ВходныеПараметры);
			Реквизиты.ИмяПакета = Результат;
			Реквизиты.Прокси = Прокси;
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки     = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
		
	КонецЕсли;
	
	ОбработатьОшибкуСервиса(
		Результат,
		ОписаниеОшибки,
		"Классификатор",
		ИмяМетода,
		ИдентификаторСервиса,
		Реквизиты);
	
	Если ЗначениеЗаполнено(Реквизиты.ОписаниеОшибки) Тогда
		Возврат Реквизиты;
	КонецЕсли;
	
	Возврат Реквизиты;

КонецФункции

Функция ПроксиСервиса(URLМестоположенияWSDL, URIПространстваИмен, ИмяСервиса, ИмяТочкиПодключения, ОписаниеОшибки, ДанныеАутентификации = Неопределено)
	
	Прокси = Неопределено;
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		// Создание WSПрокси с аутентификацией по тикету аутентификации.
		ПараметрыПодключения = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
		ПараметрыПодключения.АдресWSDL				= URLМестоположенияWSDL;
		ПараметрыПодключения.URIПространстваИмен 	= URIПространстваИмен;
		ПараметрыПодключения.ИмяСервиса				= ИмяСервиса;
		ПараметрыПодключения.ИмяПользователя 		= ДанныеАутентификации.ИмяПользователя;
		ПараметрыПодключения.Пароль 				= ДанныеАутентификации.Пароль;
		ПараметрыПодключения.Таймаут             	= 60;
		
		ОшибкаАутентификации = Ложь;
		
		// Попытка создания объекта без аутентификации (по данным Кэш).
		Попытка
			Прокси = ОбщегоНазначения.СоздатьWSПрокси(ПараметрыПодключения);
		Исключение
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
		Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
			ОписаниеОшибкиВРег = ВРег(ОписаниеОшибки);
			ОшибкаАутентификации = (СтрНайти(ОписаниеОшибкиВРег, """STATUS"":401") > 0
				Или СтрНайти(ОписаниеОшибкиВРег, "SERVER-9:") > 0);
		КонецЕсли;
		
		Если ОшибкаАутентификации Тогда
			
			// Нет описания WSDL в кэше программных интерфейсов.
			// Получить новое описание с использованием тикета, новое описание
			// будет сохранено в кэше программных интерфейсов.
			ОписаниеОшибки = "";
			УстановитьПривилегированныйРежим(Истина);
			
			// Работа в модели сервиса.
			МодульИнтернетПоддержкаПользователейВМоделиСервиса =
				ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователейВМоделиСервиса");
			РезультатПолученияТикета = МодульИнтернетПоддержкаПользователейВМоделиСервиса.ТикетАутентификацииНаПорталеПоддержки(
				URLМестоположенияWSDL);
			
			УстановитьПривилегированныйРежим(Ложь);
			
			Если Не ПустаяСтрока(РезультатПолученияТикета.КодОшибки) Тогда
				ЗаписатьИнформациюВЖурналРегистрации(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось получить тикет аутентификации для создания описания сервиса %1.
							|Код ошибки: %2.
							|Для аутентификации использован логин ""fresh"".'"),
						URLМестоположенияWSDL,
						РезультатПолученияТикета.КодОшибки),
					"РаботаСКонтрагентами");
				ПараметрыПодключения.ИмяПользователя = "fresh";
				ПараметрыПодключения.Пароль          = "fresh";
			Иначе
				ПараметрыПодключения.ИмяПользователя = "AUTH_TOKEN";
				ПараметрыПодключения.Пароль          = РезультатПолученияТикета.Тикет;
			КонецЕсли;
			
			Попытка
				Прокси = ОбщегоНазначения.СоздатьWSПрокси(ПараметрыПодключения);
			Исключение
				ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецПопытки;
			
		КонецЕсли;
		
	Иначе
		// Создание WSПрокси в обычном режиме с аутентификацией по логину и паролю.
		Если ДанныеАутентификации = Неопределено Тогда 
			УстановитьПривилегированныйРежим(Истина);
			ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
			УстановитьПривилегированныйРежим(Ложь);
			Если ДанныеАутентификации = Неопределено Тогда
				ОписаниеОшибки = "НеУказаныПараметрыАутентификации";
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;	
		
		ПараметрыПодключения = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
		ПараметрыПодключения.АдресWSDL           = URLМестоположенияWSDL;
		ПараметрыПодключения.URIПространстваИмен = URIПространстваИмен;
		ПараметрыПодключения.ИмяСервиса          = ИмяСервиса;
		ПараметрыПодключения.ИмяПользователя     = ДанныеАутентификации.Логин;
		ПараметрыПодключения.Пароль              = ДанныеАутентификации.Пароль;
		ПараметрыПодключения.Таймаут             = 60;
		
		Попытка
			Прокси = ОбщегоНазначения.СоздатьWSПрокси(ПараметрыПодключения);
		Исключение
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции

Функция ДополнительныеПараметрыВызоваОперацииСервиса(ФабрикаXDTOСервиса, URIПространстваИмен, Организация = Неопределено)
	
	ИмяКонфигурации = ИнтернетПоддержкаПользователей.ИмяКонфигурации();
	ВерсияКонфигурации = ИнтернетПоддержкаПользователей.ВерсияКонфигурации();
	ТипДополнительныеПараметрыXDTO = ФабрикаXDTOСервиса.Тип(URIПространстваИмен, "AdditionalParameters");
	ТипДополнительныйПараметрXDTO = ФабрикаXDTOСервиса.Тип(URIПространстваИмен, "AdditionalParameter");
	
	Результат = ФабрикаXDTOСервиса.Создать(ТипДополнительныеПараметрыXDTO);
	
	ДополнительныйПараметрXDTO = ФабрикаXDTOСервиса.Создать(ТипДополнительныйПараметрXDTO);
	ДополнительныйПараметрXDTO.name  = "configurationName";
	ДополнительныйПараметрXDTO.value = ИмяКонфигурации;
	Результат.Parameter.Добавить(ДополнительныйПараметрXDTO);
	
	ДополнительныйПараметрXDTO = ФабрикаXDTOСервиса.Создать(ТипДополнительныйПараметрXDTO);
	ДополнительныйПараметрXDTO.name  = "configurationVersion";
	ДополнительныйПараметрXDTO.value = ВерсияКонфигурации;
	Результат.Parameter.Добавить(ДополнительныйПараметрXDTO);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		ИмяПользователя = "fresh";
		Пароль = "fresh";
	Иначе 
		УстановитьПривилегированныйРежим(Истина);
		ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		УстановитьПривилегированныйРежим(Ложь);
		ИмяПользователя = ДанныеАутентификации.Логин;
		Пароль = ДанныеАутентификации.Пароль;
	КонецЕсли;	                             	
	
	ДополнительныйПараметрXDTO = ФабрикаXDTOСервиса.Создать(ТипДополнительныйПараметрXDTO);
	ДополнительныйПараметрXDTO.name  = "login";
	ДополнительныйПараметрXDTO.value = ИмяПользователя;
	Результат.Parameter.Добавить(ДополнительныйПараметрXDTO);
	
	ДополнительныйПараметрXDTO = ФабрикаXDTOСервиса.Создать(ТипДополнительныйПараметрXDTO);
	ДополнительныйПараметрXDTO.name  = "password";
	ДополнительныйПараметрXDTO.value = Пароль;
	Результат.Parameter.Добавить(ДополнительныйПараметрXDTO);
	
	Если Организация = Неопределено Тогда 
		Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;	
	
	ДополнительныйПараметрXDTO = ФабрикаXDTOСервиса.Создать(ТипДополнительныйПараметрXDTO);
	ДополнительныйПараметрXDTO.name  = "organizationName";
	ДополнительныйПараметрXDTO.value = СокрЛП(Организация.НаименованиеПолное);
	Результат.Parameter.Добавить(ДополнительныйПараметрXDTO);
	
	ДополнительныйПараметрXDTO = ФабрикаXDTOСервиса.Создать(ТипДополнительныйПараметрXDTO);
	ДополнительныйПараметрXDTO.name  = "organizationTIN";
	ДополнительныйПараметрXDTO.value = Организация.ИНН;
	Результат.Parameter.Добавить(ДополнительныйПараметрXDTO);
	
	СисИнфо = Новый СистемнаяИнформация;
	ДополнительныйПараметрXDTO = ФабрикаXDTOСервиса.Создать(ТипДополнительныйПараметрXDTO);
	ДополнительныйПараметрXDTO.name  = "appVersion";
	ДополнительныйПараметрXDTO.value = СисИнфо.ВерсияПриложения;
	Результат.Parameter.Добавить(ДополнительныйПараметрXDTO);
	
	ДополнительныйПараметрXDTO = ФабрикаXDTOСервиса.Создать(ТипДополнительныйПараметрXDTO);
	ДополнительныйПараметрXDTO.name  = "protocolVersion";
	ДополнительныйПараметрXDTO.value = "v1";
	Результат.Parameter.Добавить(ДополнительныйПараметрXDTO);

	Возврат Результат;
	
КонецФункции

Процедура ОбработатьОшибкуСервиса(ОбъектXDTO, ОписаниеОшибки, Сервис, ИмяМетода, ИдентификаторУслуги, Результат)
	
	Если ОбъектXDTO <> Неопределено И Не ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	КодОсновногоЯзыка  = ОбщегоНазначения.КодОсновногоЯзыка(); // Для записи события в журнал регистрации.
	ОписаниеОшибкиВРег = ВРег(ОписаниеОшибки);
	
	Если ОписаниеОшибкиВРег = ВРег("НеУказаныПараметрыАутентификации")
		Или ОписаниеОшибкиВРег = ВРег("НеУказанПароль") Тогда
		
		Результат.ОписаниеОшибки = "НеУказаныПараметрыАутентификации";
		ЗаписатьИнформациюВЖурналРегистрации(НСтр("ru = 'Интернет-поддержка пользователей не подключена.'"), Сервис);
	Иначе
		
		Результат.ОписаниеОшибки = НСтр("ru='Ошибка при работе с сервисом (подробнее см. Журнал регистрации)'");
		ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при работе с сервисом.
					|%1.'"),
				ОписаниеОшибки), Сервис);		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЭлектронныеТоварноТранспортныеНакладные

// Возвращает XDTO для формироания xml.
//
// Возвращаемое значение:
//	Структура - реквизиты юридического лица.
//		* ИмяПакета - Строка - URI пространства имен.
//		* ОписаниеОшибки - Строка - описание ошибки.
//		* Прокси - WSПрокси - прокси для выбора сервиса.
//
Функция РеквизитыЭлектроннойТТН(ВидОперации) Экспорт 

	Если ВидОперации = Перечисления.ВидыОперацийТТН.Оприходование
		ИЛИ ВидОперации = Перечисления.ВидыОперацийТТН.ВыгрузкаОстатков Тогда
		ИдентификаторСервиса = "ElectronicProductInvoicePosting";
		ЗаписатьИнформациюВЖурналРегистрации(НСтр("ru = 'Получение пакета ElectronicProductInvoicePosting'"), ИдентификаторСервиса);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийТТН.Перемещение Тогда
		ИдентификаторСервиса = "ElectronicProductInvoiceTransfer";
		ЗаписатьИнформациюВЖурналРегистрации(НСтр("ru = 'Получение пакета ElectronicProductInvoiceTransfer'"), ИдентификаторСервиса);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийТТН.Реализация
		ИЛИ ВидОперации = Перечисления.ВидыОперацийТТН.Возврат Тогда
		ИдентификаторСервиса = "ElectronicProductInvoiceSelling";
		ЗаписатьИнформациюВЖурналРегистрации(НСтр("ru = 'Получение пакета ElectronicProductInvoiceSelling'"), ИдентификаторСервиса);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийТТН.Списание Тогда
		ИдентификаторСервиса = "ElectronicProductInvoiceWriteoff";
		ЗаписатьИнформациюВЖурналРегистрации(НСтр("ru = 'Получение пакета ElectronicProductInvoiceWriteoff'"), ИдентификаторСервиса);	
	КонецЕсли;	
		
	ОписаниеОшибки = "";
	Реквизиты = НовыеРеквизитыЭлектроннойСФ();
	
	ПараметрыСервиса = ПараметрыСервисаЭлектроннойТТН(ВидОперации);
	
	ИмяМетода = "getXDTOPackage";
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		ОбъектXDTO = Неопределено;
		Прокси = ПроксиСервиса(
			ПараметрыСервиса.URL,
			ПараметрыСервиса.URIПространстваИмен,
			ПараметрыСервиса.Имя,
			ПараметрыСервиса.ИмяТочкиПодключения,
			ОписаниеОшибки);
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		
		ВходныеПараметры = Прокси.ФабрикаXDTO.Создать(
			Прокси.ФабрикаXDTO.Тип(ПараметрыСервиса.URIПространстваИмен, ИмяМетода));
		
		ВходныеПараметры.additionalParameters =
			ДополнительныеПараметрыВызоваОперацииСервиса(
				Прокси.ФабрикаXDTO,
				"http://company1c.com/orgregister/base");
		
		Попытка
			Результат = Прокси.getXDTOPackage(ВходныеПараметры);
			Реквизиты.ИмяПакета = Результат;
			Реквизиты.Прокси = Прокси;
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки     = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
		
	КонецЕсли;
	
	ОбработатьОшибкуСервиса(
		Результат,
		ОписаниеОшибки,
		"Классификатор",
		ИмяМетода,
		ИдентификаторСервиса,
		Реквизиты);
	
	Если ЗначениеЗаполнено(Реквизиты.ОписаниеОшибки) Тогда
		Возврат Реквизиты;
	КонецЕсли;
	
	Возврат Реквизиты;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПараметрыАутентификацииНаСайте()
	Результат = Новый Структура;
	Результат.Вставить("Пользователь", "");
	Результат.Вставить("Пароль", "");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
		ДанныеАутентификации = МодульИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		Если ДанныеАутентификации <> Неопределено Тогда
			Результат.Пользователь = ДанныеАутентификации.Логин;
			Результат.Пароль = ДанныеАутентификации.Пароль;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Процедура ДополнитьПараметрыПолученияДаннымиСтатистики(ПараметрыПолучения, Организация = Неопределено) Экспорт 
	
	ПараметрыПолученияФайла = ПолучениеФайловИзИнтернетаКлиентСервер.ПараметрыПолученияФайла();
	ЗаполнитьЗначенияСвойств(ПараметрыПолученияФайла, ПараметрыПолучения); 
	
	ПараметрыПолученияФайла.Заголовки.Вставить("configurationName", ИнтернетПоддержкаПользователей.ИмяКонфигурации());
	ПараметрыПолученияФайла.Заголовки.Вставить("configurationVersion", ИнтернетПоддержкаПользователей.ВерсияКонфигурации());
	
	Если ПараметрыПолучения.Свойство("Пользователь")
		И ПараметрыПолучения.Свойство("Пароль") Тогда
		ПараметрыПолученияФайла.Заголовки.Вставить("login", ПараметрыПолучения.Пользователь);
		ПараметрыПолученияФайла.Заголовки.Вставить("password", ПараметрыПолучения.Пароль);
	КонецЕсли;	
	
	Если Организация = Неопределено Тогда 
		Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;	
	ПараметрыПолученияФайла.Заголовки.Вставить("organizationName", Организация.НаименованиеПолное);
	ПараметрыПолученияФайла.Заголовки.Вставить("organizationTin", Организация.ИНН);

	СисИнфо = Новый СистемнаяИнформация;
	ПараметрыПолученияФайла.Заголовки.Вставить("appVersion", СисИнфо.ВерсияПриложения);
	
	ПараметрыПолученияФайла.Заголовки.Вставить("protocolVersion", "v1");
	
	ПараметрыПолучения = ПараметрыПолученияФайла;
	
КонецПроцедуры

Функция ПолучитьПараметрыИзJSON(СтрокаJSON)
	
	ЧтениеДанныхСообщения = Новый ЧтениеJSON;
	ЧтениеДанныхСообщения.УстановитьСтроку(СтрокаJSON);
	
	// Выполнить чтение данных в структуру Данные с помощью объекта чтения (Чтение).
	Результат = ПрочитатьJSON(ЧтениеДанныхСообщения);
	// Завершить работу с файлом.
	ЧтениеДанныхСообщения.Закрыть();	

	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьОшибкуВЖурналРегистрации(Сообщение, ИдентификаторСервиса) Экспорт
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации() + "." + ИдентификаторСервиса,
		УровеньЖурналаРегистрации.Ошибка,,, Сообщение);
КонецПроцедуры

Процедура ЗаписатьИнформациюВЖурналРегистрации(Сообщение, ИдентификаторСервиса)
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации() + "." + ИдентификаторСервиса,
		УровеньЖурналаРегистрации.Информация,,, Сообщение);
КонецПроцедуры

Функция ИмяСобытияЖурналаРегистрации()
	Возврат НСтр("ru = 'Работа с контрагентами'", ОбщегоНазначения.КодОсновногоЯзыка());
КонецФункции

Функция ПараметрыКоманды(ИдентификаторСервиса, ПараметрыПолучения, ПараметрыСервиса, Организация = Неопределено)

	Если Организация = Неопределено Тогда 
		Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;	
	
	Данные = Новый Структура;
	Данные.Вставить("configurationName", ИнтернетПоддержкаПользователей.ИмяКонфигурации());
	Данные.Вставить("configurationVersion", ИнтернетПоддержкаПользователей.ВерсияКонфигурации());
	Данные.Вставить("login", ПараметрыПолучения.Пользователь);
	Данные.Вставить("password", ПараметрыПолучения.Пароль);
	Данные.Вставить("organizationTin", Организация.ИНН);
	Данные.Вставить("organizationName", Организация.НаименованиеПолное);
	
	СисИнфо = Новый СистемнаяИнформация;
	Данные.Вставить("appVersion", СисИнфо.ВерсияПриложения);
	
	Если ИдентификаторСервиса = "findContractorByTin" Тогда 
		Данные.Вставить("contractorTin", ПараметрыСервиса.ИНН);
	ИначеЕсли ИдентификаторСервиса = "updateUser" Тогда
		ПараметрыПолучения.Пользователь = "WebUser";
		ПараметрыПолучения.Пароль = "WebUser";
	КонецЕсли;	
	
	СоответствиеИдентификаторов = Новый Структура;
	СоответствиеИдентификаторов.Вставить("classificationBanks", "КлассификаторБанков");
	СоответствиеИдентификаторов.Вставить("classificationPaymentCodes", "КодыПлатежей");
	СоответствиеИдентификаторов.Вставить("classificationGKED", "КлассификаторГКЭД");
	СоответствиеИдентификаторов.Вставить("classificationFeaturesMovementGoodsCodes", "КодыОсобенностейПеремещенияТоваров");
	СоответствиеИдентификаторов.Вставить("classificationConditionDelivery", "КлассификаторУсловийПоставки");
	СоответствиеИдентификаторов.Вставить("classificationNatureTransaction", "КлассификаторХарактераСделки");
	СоответствиеИдентификаторов.Вставить("classificationZonalCoef", "КлассификаторЗональныеКоэффициенты");
	СоответствиеИдентификаторов.Вставить("classificationCommercialCoef", "КлассификаторКоммерческогоИспользования");
	
	СоответствиеИдентификаторов.Вставить("districts", "Районы");
	СоответствиеИдентификаторов.Вставить("regions", "Области");
	
	СоответствиеИдентификаторов.Вставить("VATDeliveryCodes", "КодыПоставокНДС");
	СоответствиеИдентификаторов.Вставить("IndustryCoefficients", "ОтраслевыеКоэффициентыНалогНаИмущество");
	СоответствиеИдентификаторов.Вставить("RegionalCoefficients", "РегиональныеКоэффициентыНалогНаИмущество"); 
	СоответствиеИдентификаторов.Вставить("ReasonsWriteOff", "ПричиныСписания"); 
	СоответствиеИдентификаторов.Вставить("ReasonsReceipt", "ПричиныОприходования"); 

	СоответствиеИдентификаторов.Вставить("ratesLandTaxDistricts", "СтавкиЗемельногоНалогаРайоны");
	СоответствиеИдентификаторов.Вставить("ratesLandTaxRegions", "СтавкиЗемельногоНалогаОбласти");
	
	СоответствиеИдентификаторов.Вставить("WallMaterial", "ВидыМатериаловСтенНалогНаИмущество");
	СоответствиеИдентификаторов.Вставить("ratesWallMaterial", "ШкалаОценкиСтоимостиВидовМатериаловСтен");
	
	СоответствиеИдентификаторов.Вставить("TransportTypes", "ВидыТранспортаНалогНаИмущество");
	СоответствиеИдентификаторов.Вставить("ratesTransportTypes", "ШкалаОценкиСтоимостиВидовТранспорта");
	
	СоответствиеИдентификаторов.Вставить("ratesAdjustmentFactor", "КорректировочныеКоэффициентыНалогаНаИмущество");
	
	СоответствиеИдентификаторов.Вставить("TaxAccountingGroups", "ГруппыНалоговогоУчетаОС");
	СоответствиеИдентификаторов.Вставить("ratesDepreciation", "НормыАмортизацииГруппНалоговогоУчетаОС");
	
	Если СоответствиеИдентификаторов.Свойство(ИдентификаторСервиса) Тогда  
		Данные.Вставить("classifierName", СоответствиеИдентификаторов[ИдентификаторСервиса]);
	КонецЕсли;	
	
	// Создать объект записи и открыть файл, в который будет выполняться запись.
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб);
	ЗаписьДанныхСообщения.УстановитьСтроку(ПараметрыЗаписиJSON);

	// Выполнить запись данных (Данные) с помощью объекта записи (Запись).
	ЗаписатьJSON(ЗаписьДанныхСообщения, Данные);
	
	Возврат ЗаписьДанныхСообщения.Закрыть();

КонецФункции

// Функция - Загрузить содержимое из интернет
//
// Параметры:
//  ИдентификаторСервиса - Строка	 - Идентификатор сервиса
//  ПарамтерыСервиса	 - Структура	 - Дополнительные параметры 
// 
// Возвращаемое значение:
//  Ответ - Структура
//
Функция ЗагрузитьСодержимоеИзИнтернет(ИдентификаторСервиса, ПараметрыСервиса)

	УстановитьПривилегированныйРежим(Истина);
	ПараметрыПолучения = ПараметрыАутентификацииНаСайте();
	УстановитьПривилегированныйРежим(Ложь);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");

	ДопПараметрыЗапроса = Новый Структура;
	ДопПараметрыЗапроса.Вставить("Метод" , "POST");
	ДопПараметрыЗапроса.Вставить("Заголовки" , Заголовки);
	ДопПараметрыЗапроса.Вставить("ФорматОтвета" , 1);
	ДопПараметрыЗапроса.Вставить("ДанныеДляОбработки", ПараметрыКоманды(ИдентификаторСервиса, ПараметрыПолучения, ПараметрыСервиса));
	ДопПараметрыЗапроса.Вставить("ФорматДанныхДляОбработки", 1);

	Возврат ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		ПараметрыСервиса.URLСервиса,
		ПараметрыПолучения.Пользователь,
		ПараметрыПолучения.Пароль,
		ДопПараметрыЗапроса);

КонецФункции // ЗагрузитьСодержимоеИзИнтернет()

#Область Тарификация

// Производит регистрацию организации на сервере услуг.
//
// Параметры:
//  Организация	 - СправочникСсылка.Организация	 - Организация дл которой необходимо подключить услуги.
//
Процедура ЗарегистрироватьОрганизациюНаСервере(Организация = Неопределено) Экспорт

	ИдентификаторСервиса = "updateUser";
	
	ТекстСообщения = НСтр("ru = 'Регистрация организации'");
	ЗаписатьИнформациюВЖурналРегистрации(ТекстСообщения, ИдентификаторСервиса);
		
	URLСервиса = "https://fresh.1c-cloud.kg/a/its/hs/users/" + ИдентификаторСервиса;
	
	ПараметрыСервиса = Новый Структура;
	ПараметрыСервиса.Вставить("URLСервиса", URLСервиса);
	РезультатОперации = ЗагрузитьСодержимоеИзИнтернет(ИдентификаторСервиса, ПараметрыСервиса);
	
	Если РезультатОперации.КодСостояния = 200 Тогда
		Результат = ПолучитьПараметрыИзJSON(РезультатОперации.Содержимое);
	Иначе
		ВызватьИсключение РезультатОперации.Содержимое;
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

Функция БазовыйURLСервиса()
	Возврат "https://fresh.1c-cloud.kg/a/ak/hs/serv/";
КонецФункции

Функция ПараметрыСервисаЭлектроннойСФ()
	
	Результат = Новый Структура;
	Результат.Вставить("URL", "https://fresh.1c-cloud.kg/a/ak/ws/ElectronicInvoiceWsGetService?wsdl");
	Результат.Вставить("Имя", "ElectronicInvoiceWsGetService");
	Результат.Вставить("URIПространстваИмен", "http://ws.electronicinvoice.company1c.com");
	Результат.Вставить("ИмяТочкиПодключения", "ElectronicInvoiceWsGetPort");
	
	Возврат Результат;
	
КонецФункции

Функция НовыеРеквизитыЮридическогоЛица()

	РеквизитыОрганизации = Новый Структура;
	
	// Заполняется на основе данных ЕГРЮЛ.
	РеквизитыОрганизации.Вставить("ИНН");
	РеквизитыОрганизации.Вставить("Наименование");
	РеквизитыОрганизации.Вставить("НаименованиеПолное");
	РеквизитыОрганизации.Вставить("НаименованиеСокращенное");
	РеквизитыОрганизации.Вставить("Статус");
	РеквизитыОрганизации.Вставить("КодПоОКПО");
	РеквизитыОрганизации.Вставить("ГНС");
	
	// Следующие свойства могут содержать Неопределено в случае отсутствия в сервисе данных.
	//РеквизитыОрганизации.Вставить("КодПравовойФормы");
	РеквизитыОрганизации.Вставить("ЮридическийАдрес");
	РеквизитыОрганизации.Вставить("Телефон");
	РеквизитыОрганизации.Вставить("Руководитель");
	
	// Служебный реквизит
	РеквизитыОрганизации.Вставить("ОписаниеОшибки");
	
	Возврат РеквизитыОрганизации;

КонецФункции

Функция НовыеРеквизитыКлассификатор()

	Реквизиты = Новый Структура;
	Реквизиты.Вставить("КлассификаторXML");

	// Служебный реквизит
	Реквизиты.Вставить("ОписаниеОшибки");
	
	Возврат Реквизиты;

КонецФункции

Функция НовыеРеквизитыЭлектроннойСФ()

	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Прокси");
	Реквизиты.Вставить("ИмяПакета");

	// Служебный реквизит
	Реквизиты.Вставить("ОписаниеОшибки");
	
	Возврат Реквизиты;

КонецФункции

Функция ПараметрыСервисаЭлектроннойТТН(ВидОперации)
	
	Если ВидОперации = Перечисления.ВидыОперацийТТН.Оприходование
		ИЛИ ВидОперации = Перечисления.ВидыОперацийТТН.ВыгрузкаОстатков Тогда
		Результат = Новый Структура;
		Результат.Вставить("URL", "https://fresh.1c-cloud.kg/a/ak/ws/ElectronicProductInvoicePostingWsGetService?wsdl");
		Результат.Вставить("Имя", "ElectronicProductInvoicePostingWsGetService");
		Результат.Вставить("URIПространстваИмен", "http://ws.electronicproductinvoiceposting.company1c.com");
		Результат.Вставить("ИмяТочкиПодключения", "ElectronicProductInvoicePostingWsGetPort");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийТТН.Перемещение Тогда
		Результат = Новый Структура;
		Результат.Вставить("URL", "https://fresh.1c-cloud.kg/a/ak/ws/ElectronicProductInvoiceTransferWsGetService?wsdl");
		Результат.Вставить("Имя", "ElectronicProductInvoiceTransferWsGetService");
		Результат.Вставить("URIПространстваИмен", "http://ws.electronicproductinvoicetransfer.company1c.com");
		Результат.Вставить("ИмяТочкиПодключения", "ElectronicProductInvoiceTransferWsGetPort");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийТТН.Реализация
		ИЛИ ВидОперации = Перечисления.ВидыОперацийТТН.Возврат Тогда
		Результат = Новый Структура;
		Результат.Вставить("URL", "https://fresh.1c-cloud.kg/a/ak/ws/ElectronicProductInvoiceSellingWsGetService?wsdl");
		Результат.Вставить("Имя", "ElectronicProductInvoiceSellingWsGetService");
		Результат.Вставить("URIПространстваИмен", "http://ws.electronicproductinvoiceselling.company1c.com");
		Результат.Вставить("ИмяТочкиПодключения", "ElectronicProductInvoiceSellingWsGetPort");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийТТН.Списание Тогда
		Результат = Новый Структура;
		Результат.Вставить("URL", "https://fresh.1c-cloud.kg/a/ak/ws/ElectronicProductInvoiceWriteoffWsGetService?wsdl");
		Результат.Вставить("Имя", "ElectronicProductInvoiceWriteoffWsGetService");
		Результат.Вставить("URIПространстваИмен", "http://ws.electronicproductinvoicewriteoff.company1c.com");
		Результат.Вставить("ИмяТочкиПодключения", "ElectronicProductInvoiceWriteoffWsGetPort");	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
