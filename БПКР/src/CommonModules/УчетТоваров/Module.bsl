
#Область ПодготовкаСписанияТоваров

Функция ПодготовитьТаблицуСписанныеТовары(ТаблицаТовары, ТаблицаРеквизиты, Отказ) Экспорт
	
	МатериалыДляОценкиСтоимости = Новый Структура("СписанныеТовары", ТаблицаТовары);
	
	МатериалыСОценкойСтоимости = ПодготовитьТаблицыСписанныеТовары(
		МатериалыДляОценкиСтоимости,
		ТаблицаРеквизиты,
		Отказ);
		
	Возврат МатериалыСОценкойСтоимости.СписанныеТовары;

КонецФункции

Функция ПодготовитьТаблицуСписанныеТоварыСУчетомВозврата(ТаблицаТовары, ТаблицаВозвраты, ТаблицаРеквизиты, Отказ) Экспорт
	
	МатериалыДляОценкиСтоимости = Новый Структура("СписанныеТовары", ТаблицаТовары);
	
	МатериалыСОценкойСтоимости = ПодготовитьТаблицыСписанныеТоварыСУчетомВозврата(
		МатериалыДляОценкиСтоимости,
		ТаблицаРеквизиты,
		ТаблицаВозвраты,
		Отказ);
		
	Возврат МатериалыСОценкойСтоимости.СписанныеТовары;

КонецФункции

// Подготавливает таблицы расхода товаров, в которых нужна расчетная оценка стоимости списания.
// при этом для списания учитываются партии возвращенные тем же документом
// Параметры:
//  ТаблицыТовары - Структура - Содержит таблицы значений с списком товаров, оценку которых нужно получить
//  ТаблицаРеквизиты - ТаблицаЗначений - Таблица с реквизитами документа, влияющими на списание товаров
//  ТаблицаВозвраты - ТаблицаЗначений - Таблица с остатками возвращенных партий
//  Отказ - Булево - Признак ошибки, выявленной в ходе подготовки таблицы
// 
Функция ПодготовитьТаблицыСписанныеТоварыСУчетомВозврата(ТаблицыТовары, ТаблицаРеквизиты, ТаблицаВозвраты, Отказ) Экспорт
	
	Параметры = ПодготовитьРеквизитыСписанныеТовары(ТаблицаРеквизиты, ТаблицаВозвраты);
	
	СписанныеТовары = Новый Структура;
	
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Для Каждого КлючИЗначение Из ТаблицыТовары Цикл	
			СписанныеТовары.Вставить(КлючИЗначение.Ключ, ПолучитьПустуюТаблицуСписанныеТовары());
		КонецЦикла;
		Возврат СписанныеТовары;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	НадоРассчитать = Новый Структура;
	НадоОценить    = Новый Структура;
	
	// Подготовим данные для расчета стоимости списания
	Для Каждого КлючИЗначение Из ТаблицыТовары Цикл
		
		ИмяТаблицы    = КлючИЗначение.Ключ;
		ДанныеТаблицы = КлючИЗначение.Значение;
		
		СписанныеТовары.Вставить(ИмяТаблицы, ПолучитьПустуюТаблицуСписанныеТовары());
		Если ДанныеТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыТаблицыТовары = ПодготовитьПараметрыТаблицыСписанныеТовары(ДанныеТаблицы, ТаблицаРеквизиты);
		
		ТаблицаТовары          = ПараметрыТаблицыТовары.ТаблицаТовары;
		ТаблицаНадоРассчитать  = ТаблицаТовары.СкопироватьКолонки();
		
		// Отделим запасы, которые будут списаны по указанной в документе стоимости,
		// от запасов, стоимость которых будет расчитана на основании остатков.
		// Строки, стоимость которых считать не надо, сразу запишем в СписанныеТовары.
		Для Каждого СтрокаТаблицыТовары Из ТаблицаТовары Цикл
			
			Если СтрокаТаблицыТовары.Себестоимость > 0 Тогда
				
				// Стоимость указана в документе
				
				НоваяСтрока = СписанныеТовары[ИмяТаблицы].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыТовары);
				НоваяСтрока.Партия             = СтрокаТаблицыТовары.ДокументОприходования;
				НоваяСтрока.СуммаСписания      = СтрокаТаблицыТовары.Себестоимость;
			Иначе 
				
				// Надо рассчитать
				НоваяСтрока = ТаблицаНадоРассчитать.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыТовары);
				
			КонецЕсли;

		КонецЦикла; // По строкам ТаблицаТовары
		
		Если ТаблицаНадоРассчитать.Количество() > 0 Тогда
			НадоРассчитать.Вставить(ИмяТаблицы, ТаблицаНадоРассчитать);
		КонецЕсли;

	КонецЦикла; // По элементам ТаблицыТовары
	
	Для Каждого КлючИЗначение Из НадоОценить Цикл
		
		ИмяТаблицы             = КлючИЗначение.Ключ;
		ТаблицаНадоОценить     = КлючИЗначение.Значение;
		ТаблицаСписанныеТовары = СписанныеТовары[ИмяТаблицы];
		
		Для Каждого СтрокаТаблицы Из ТаблицаНадоОценить Цикл
			
			НоваяСтрока = ТаблицаСписанныеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
		КонецЦикла;
		
	КонецЦикла;
		
	Если НадоРассчитать.Количество() = 0 Тогда

		Для каждого КлючИЗначение Из СписанныеТовары Цикл
			КлючИЗначение.Значение.Сортировать("ИмяСписка, НомерСтроки");
		КонецЦикла;

		Возврат СписанныеТовары;

	КонецЕсли;
	
	// Нужно рассчитать стоимость списания - определить её на основании остатков.

	// Подготовим таблицу, по которой отберем остатки
	ОтборОстатков = Новый ТаблицаЗначений();
	ОтборОстатков.Колонки.Добавить("СчетУчета",    Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ОтборОстатков.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ОтборОстатков.Колонки.Добавить("Склад",        Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ОтборОстатков.Колонки.Добавить("Контрагент",   Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	
	Для Каждого КлючИЗначение Из НадоРассчитать Цикл
		Для Каждого СтрокаТаблицы Из КлючИЗначение.Значение Цикл
			НоваяСтрока = ОтборОстатков.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Контрагент = Реквизиты.Контрагент;
		КонецЦикла;
	КонецЦикла;
	
	// Спишем остатки из таблицы
	СпособОценкиТМЗПоСредней = БухгалтерскийУчетСервер.СпособОценкиТМЗ(Реквизиты.Период, Реквизиты.Организация) = Перечисления.СпособыОценки.ПоСредней;

	// Получим остатки
	МоментВремени = Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор);
	ТаблицаОстатки = ПолучитьОстаткиТоваров(
		МоментВремени,
		Реквизиты.Организация,
		ОтборОстатков,
		Параметры.ТаблицаВозвраты);
		
	ТаблицаОстатки.Индексы.Добавить("Номенклатура, СчетУчета");
	ТаблицаОстатки.Индексы.Добавить("НомерСтроки");

	КонтролироватьОстаток = БухгалтерскийУчетСервер.ВыполнитьКонтрольОстатков();
	
	Для Каждого КлючИЗначение Из НадоРассчитать Цикл
		
		ИмяТаблицы             = КлючИЗначение.Ключ;
		ТаблицаНадоРассчитать  = КлючИЗначение.Значение;
		ТаблицаСписанныеТовары = СписанныеТовары[ИмяТаблицы];
		
		СписатьОстаткиТоваров(
			ТаблицаНадоРассчитать,
			ТаблицаОстатки,
			ТаблицаСписанныеТовары,
			СпособОценкиТМЗПоСредней,
			КонтролироватьОстаток,
			Реквизиты,
			Отказ);
			
	КонецЦикла;
	
	Возврат СписанныеТовары;

КонецФункции

// Подготавливает таблицы расхода товаров, в которых нужна расчетная оценка стоимости списания.
//
// Параметры:
//  ТаблицыТовары - Структура - Содержит таблицы значений с списком товаров, оценку которых нужно получить
//  ТаблицаРеквизиты - ТаблицаЗначений - Таблица с реквизитами документа, влияющими на списание товаров
//  Отказ - Булево - Признак ошибки, выявленной в ходе подготовки таблицы
// 
Функция ПодготовитьТаблицыСписанныеТовары(ТаблицыТовары, ТаблицаРеквизиты, Отказ) Экспорт

	Возврат ПодготовитьТаблицыСписанныеТоварыСУчетомВозврата(ТаблицыТовары, ТаблицаРеквизиты, Неопределено, Отказ);

КонецФункции

Процедура СписатьОстаткиТоваров(ТаблицаСписаниеПоОстаткам, ТаблицаОстатки, ТаблицаСписанныеТовары, СпособОценкиМПЗПоСредней, КонтролироватьОстаток, Реквизиты, Отказ)
	
	ТаблицаОшибок = ТаблицаСписаниеПоОстаткам.СкопироватьКолонки("ИмяСписка, СинонимСписка, НомерСтроки, Количество");
	ТаблицаОшибок.Колонки.Добавить("КоличествоОсталосьПогасить", Новый ОписаниеТипов("Число"));

	ПустойСклад = Справочники.Склады.ПустаяСсылка();
	
	Для Каждого СтрокаДокумента Из ТаблицаСписаниеПоОстаткам Цикл
		
		КоличествоОсталосьПогасить = СтрокаДокумента.Количество;
		
		Если ТаблицаОстатки.Количество() <> 0 Тогда
		
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура", СтрокаДокумента.Номенклатура);
			ПараметрыОтбора.Вставить("СчетУчета", СтрокаДокумента.СчетУчета);
			
			// Добавление партии, если непосредственно в документе
			Если ЗначениеЗаполнено(СтрокаДокумента.ДокументОприходования) Тогда
				Если НЕ СпособОценкиМПЗПоСредней
					И БухгалтерскийУчетСервер.НаСчетеВедетсяПартионныйУчет(СтрокаДокумента.СчетУчета) Тогда
					ПараметрыОтбора.Вставить("ДокументОприходования", СтрокаДокумента.ДокументОприходования);
				КонецЕсли;
			КонецЕсли;
			
			ПартииОстатков = ТаблицаОстатки.Скопировать(ПараметрыОтбора);
			ПартииОстатков.Сортировать("ДокументОприходованияДата, ДокументОприходования", Новый СравнениеЗначений);
			
			// Списание по партиям
			Для Каждого СтрокаПартии Из ПартииОстатков Цикл
				
				Если КоличествоОсталосьПогасить <= 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если СтрокаПартии.КоличествоПоСкладу <= 0
					ИЛИ СтрокаПартии.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если БухгалтерскийУчетСервер.ВедетсяУчетПоСкладам(СтрокаДокумента.СчетУчета) Тогда
					Если СтрокаПартии.Склад <> СтрокаДокумента.Склад
						И НЕ СтрокаПартии.Склад = ПустойСклад Тогда // пустые склады могут остаться со времени, когда не было учета по складам
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Количество = Мин(СтрокаПартии.КоличествоПоСкладу, КоличествоОсталосьПогасить);
				
				Стоимость = Окр(СтрокаПартии.Стоимость * Количество / СтрокаПартии.Количество, 2, 1);
				
				КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - Количество;
				
				СтрокаТаблицыОстатки = ТаблицаОстатки.Найти(СтрокаПартии.НомерСтроки, "НомерСтроки");
				СтрокаТаблицыОстатки.Количество         = СтрокаТаблицыОстатки.Количество - Количество;
				СтрокаТаблицыОстатки.Стоимость          = СтрокаТаблицыОстатки.Стоимость - Стоимость;
				СтрокаТаблицыОстатки.КоличествоПоСкладу = СтрокаТаблицыОстатки.КоличествоПоСкладу - Количество;
				
				СписаннаяПартия = ТаблицаСписанныеТовары.Добавить();
				ЗаполнитьЗначенияСвойств(СписаннаяПартия, СтрокаДокумента);
				СписаннаяПартия.Партия              = СтрокаПартии.ДокументОприходования;
				СписаннаяПартия.Склад               = СтрокаПартии.Склад;
				СписаннаяПартия.Количество          = Количество;
				СписаннаяПартия.СуммаСписания       = Стоимость;
			КонецЦикла;
		КонецЕсли;
		
		// Если это документ корректировки стоимости, то нужно только получить остатки.
		Если НЕ ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.КорректировкаСтоимостиПоступления") Тогда
			
			// Несписанное количество добавим отдельной строкой в таблицу списанных партий.
			Если КоличествоОсталосьПогасить > 0 Тогда
				
				СписаннаяПартия               = ТаблицаСписанныеТовары.Добавить();
				ЗаполнитьЗначенияСвойств(СписаннаяПартия, СтрокаДокумента);
				СписаннаяПартия.СчетУчета     = СтрокаДокумента.СчетУчета;
				СписаннаяПартия.Количество    = КоличествоОсталосьПогасить;
				
			КонецЕсли;
			
			// Добавление ошибки
			Если КоличествоОсталосьПогасить > 0 И КонтролироватьОстаток Тогда
				СтрокаТаблицыОшибок = ТаблицаОшибок.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыОшибок, СтрокаДокумента);
				СтрокаТаблицыОшибок.КоличествоОсталосьПогасить = КоличествоОсталосьПогасить;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	Если ТаблицаОшибок.Количество() > 0 Тогда
		Для каждого СтрокаТаблицыОшибок Из ТаблицаОшибок Цикл
		
			ВывестиСообщениеОбОшибке(
				СтрокаТаблицыОшибок.Количество, 
				СтрокаТаблицыОшибок.КоличествоОсталосьПогасить, 
				Реквизиты.Регистратор, 
				СтрокаТаблицыОшибок.ИмяСписка, 
				СтрокаТаблицыОшибок.СинонимСписка, 
				СтрокаТаблицыОшибок.НомерСтроки, 
				Отказ);
		
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ВывестиСообщениеОбОшибке(Количество, КоличествоОсталосьПогасить, Регистратор, ИмяСписка = "", СинонимСписка = "", НомерСтроки = "", Отказ)

	ТекстОшибки = НСтр("ru = 'Указанное количество превышает остаток. Остаток: %1; Не хватает: %2'");
		
	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
		Количество - КоличествоОсталосьПогасить,
		КоличествоОсталосьПогасить);
		
	ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
		?(ЗначениеЗаполнено(ИмяСписка), "Колонка", "Поле"), 
		"Корректность",
		НСтр("ru = 'Количество'"),
		НомерСтроки,
		СинонимСписка,
		ТекстОшибки);
	
		
	Если НЕ ЗначениеЗаполнено(ИмяСписка) Тогда
		ПолеКоличество	= "Количество";
	Иначе
		ПолеКоличество	= ИмяСписка + "[" + Формат(НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Количество";
	КонецЕсли;
	
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Регистратор, ПолеКоличество, "Объект", Отказ);

КонецПроцедуры

Функция ПодготовитьПараметрыТаблицыСписанныеТовары(ТаблицаТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТовары
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"             	// <Строка,0> - имя списка в документе
	+ "СинонимСписка,"         	// <Строка,0> - синоним списка
	+ "Период,"                	// <Дата> - период движения
	+ "НомерСтроки,"           	// <Число> - номер строки в списке
	+ "СчетУчета,"             	// <ПланСчетовСсылка.Хозрасчетный> - счет учета, с которого списывается номенклатура
	+ "Номенклатура,"          	// <СправочникСсылка.Номенклатура> - списываемая номенклатура
	+ "Склад,"                 	// <СправочникСсылка.Склад> - склад, с которого списывается номенклатура
	+ "ДокументОприходования," 	// <ДокументСсылка.*> - документ поступления номенклатуры (партия), указанный в документе списания
	+ "Себестоимость,"         	// <Число,15,2> - сумма списываемой номенклатуры, указанная в документе списания
	+ "Количество,"            	// <Число,15,3> - количество списываемой номенклатуры
	+ "КорСчетСписания,"       	// <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который списывается номенклатура
	+ "КорСубконто1,"          	// - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто2,"          	// - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто3";			// - значение субконто счета, на который списывается номенклатура
	
	Параметры.Вставить("ТаблицаТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты
	СписокОбязательныхКолонок = ""
	+ "Регистратор,"   // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"        // <Дата> - период движений - дата документа
	+ "Организация,"   // <СправочникСсылка.Организации>
	+ "Содержание";    // <Строка,150>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьРеквизитыСписанныеТовары(ТаблицаРеквизиты, ТаблицаВозвраты)
	
	Параметры = Новый Структура;
	
	СписокОбязательныхКолонок = ""
	+ "Регистратор,"   // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"        // <Дата> - период движений - дата документа
	+ "Организация,"   // <СправочникСсылка.Организации>
	+ "Контрагент,"    // <СправочникСсылка.Контрагенты>
	+ "Содержание";    // <Строка,150>
	
	Параметры.Вставить("Реквизиты", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
		
	СписокОбязательныхКолонок = ""
	+ "Партия,"			// <ДокументСсылка.*> - документ учета партии
	+ "Количество,"		// <Число (15,3)> - количество возвращенной партии
	+ "Номенклатура,"	// <СправочникСсылка.Номенклатура> 
	+ "Склад,"			// <Число(15,2)> сумма возврата по партии
	+ "СуммаСписания,"		// <Число(15,2)> сумма возврата по партии
	+ "СчетУчета";		// <ПланСчетовСсылка.Хозрасчетный>
	
	Параметры.Вставить("ТаблицаВозвраты", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаВозвраты, СписокОбязательныхКолонок));
		
	Возврат Параметры;
КонецФункции

#КонецОбласти

#Область СписаниеТоваров

Процедура СформироватьДвиженияСписаниеТоваров(ТаблицаСписанныеТовары, ТаблицаРеквизиты, Движения, Отказ, ДополнительныеСвойства) Экспорт

	Параметры = ПодготовитьПараметрыСписаниеТоваров(ТаблицаСписанныеТовары, ТаблицаРеквизиты);

	Если Параметры.Реквизиты.Количество() = 0
		ИЛИ Параметры.ТаблицаСписанныеТовары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];
	
	СпособОценкиТМЗ = БухгалтерскийУчетСервер.СпособОценкиТМЗ(Реквизиты.Период, Реквизиты.Организация);
	ВедетсяУчетПоПартиям = СпособОценкиТМЗ <> Перечисления.СпособыОценки.ПоСредней;	
	ВидСубконтоПартии = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;
	ВедетсяУчетПроизводстваПоЗаказам = ПолучитьФункциональнуюОпцию("УчетПроизводстваПоЗаказам");
	
	// Переопределение содержания
	НазваниеОбъектаВСодержании = СтрНайти(Реквизиты.Содержание, НСтр("ru = ' товаров'"));
	Если НазваниеОбъектаВСодержании Тогда
		Реквизиты.Содержание = СтрЗаменить(Реквизиты.Содержание, НСтр("ru = ' товаров'"), " %1");
	КонецЕсли;
	
	ДокументРеализации = ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.РеализацияТоваровУслуг") 
		Или ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.РеализацияУслугПоПереработке")
		Или ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.РозничнаяПродажа")
		Или ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг")
		Или ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах");
	ДокументВозврата = ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя");
	
	СвойстваСчетаКеш = Новый Соответствие;

	Для Каждого СтрокаПартии Из Параметры.ТаблицаСписанныеТовары Цикл

		ЗаказНаПроизводство = Ложь;
		Если ВедетсяУчетПроизводстваПоЗаказам 
			И (СтрокаПартии.КорСчетСписания = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство 
			ИЛИ СтрокаПартии.КорСчетСписания = ПланыСчетов.Хозрасчетный.ПроизводствоПолуфабрикатов) Тогда
			ЗаказНаПроизводство = Истина;		
		КонецЕсли;
		
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = СтрокаПартии.Период;
		Проводка.Организация = Реквизиты.Организация;
		
		// Переопределение содержания
		Если НазваниеОбъектаВСодержании Тогда
			Проводка.Содержание = СтрШаблон(Реквизиты.Содержание,
				БухгалтерскийУчетВызовСервераПовтИсп.НазваниеОбъектаПоСчетуУчета(СтрокаПартии.СчетУчета));
		Иначе
			Проводка.Содержание = СокрЛП(Реквизиты.Содержание);
		КонецЕсли;

		Проводка.СчетКт = СтрокаПартии.СчетУчета;

		СвойстваСчетаКт = СвойстваСчетаКеш[Проводка.СчетКт];
		Если СвойстваСчетаКт = Неопределено Тогда   // первое использование счета
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			СвойстваСчетаКеш.Вставить(Проводка.СчетКт, СвойстваСчетаКт);
		КонецЕсли;
		
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаПартии.Номенклатура);
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", СтрокаПартии.Склад);
		Если ВедетсяУчетПоПартиям ИЛИ СвойстваСчетаКт.Забалансовый Тогда
			БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии", СтрокаПартии.Партия);
		КонецЕсли;
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Реквизиты.Контрагент);
		
		Если СвойстваСчетаКт.Количественный Тогда
			Проводка.КоличествоКт = СтрокаПартии.Количество;
		КонецЕсли;
		
		СвойстваСчетаДт = СвойстваСчетаКеш[СтрокаПартии.КорСчетСписания];
		Если СвойстваСчетаДт = Неопределено Тогда   // первое использование счета
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаПартии.КорСчетСписания);
			СвойстваСчетаКеш.Вставить(СтрокаПартии.КорСчетСписания, СвойстваСчетаДт);
		КонецЕсли;
		
		Если СвойстваСчетаДт.Забалансовый = СвойстваСчетаКт.Забалансовый Тогда

			Проводка.СчетДт	= СтрокаПартии.КорСчетСписания;

			// Цикл субконто по строке партий
			Для НомерСубконто = 1 По 3 Цикл
				КорСубконто = СтрокаПартии["КорСубконто" + НомерСубконто];
				
				Если КорСубконто = Неопределено Тогда 
					Продолжить;
				КонецЕсли;	
					
				// Определение положения субконто по типу
				// За исключением партии при НЕ парионном учете				
				Если СвойстваСчетаДт.ВидСубконто1ТипЗначения <> Неопределено
					И СвойстваСчетаДт.ВидСубконто1ТипЗначения.СодержитТип(ТипЗнч(КорСубконто)) Тогда 
					Если НЕ ВедетсяУчетПоПартиям И СвойстваСчетаДт.ВидСубконто1 = ВидСубконтоПартии Тогда 
						Продолжить;
					КонецЕсли;	
					БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СвойстваСчетаДт.ВидСубконто1, КорСубконто);
				ИначеЕсли СвойстваСчетаДт.ВидСубконто2ТипЗначения <> Неопределено
					И СвойстваСчетаДт.ВидСубконто2ТипЗначения.СодержитТип(ТипЗнч(КорСубконто)) Тогда 
					Если НЕ ВедетсяУчетПоПартиям И СвойстваСчетаДт.ВидСубконто1 = ВидСубконтоПартии Тогда 
						Продолжить;
					КонецЕсли;	
					БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СвойстваСчетаДт.ВидСубконто2, КорСубконто);
				ИначеЕсли СвойстваСчетаДт.ВидСубконто3ТипЗначения <> Неопределено
					И СвойстваСчетаДт.ВидСубконто3ТипЗначения.СодержитТип(ТипЗнч(КорСубконто)) Тогда 
					Если НЕ ВедетсяУчетПоПартиям И СвойстваСчетаДт.ВидСубконто1 = ВидСубконтоПартии Тогда 
						Продолжить;
					КонецЕсли;	
					БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СвойстваСчетаДт.ВидСубконто3, КорСубконто);
				КонецЕсли;
			КонецЦикла;
			
			// Если корсубконто для списания явно не указано, подставляем совпадающие по типу значения
			// из других полей таблицы.
			
			// Цикл по видам субконто на счете Дт.
			Для НомерСубконто = 1 По 3 Цикл
				
				ВидСубконто = СвойстваСчетаДт["ВидСубконто" + НомерСубконто];
				
				Если ЗначениеЗаполнено(ВидСубконто) Тогда
					
					КорСубконто = Проводка.СубконтоДт[ВидСубконто];
					Если ЗначениеЗаполнено(КорСубконто) Тогда
						Продолжить;
					КонецЕсли;
				
					ТипЗначенияВидаСубконто = СвойстваСчетаДт["ВидСубконто" + НомерСубконто + "ТипЗначения"];
					
					Если ТипЗначенияВидаСубконто.СодержитТип(Тип("СправочникСсылка.Номенклатура")) Тогда
						КорСубконто = СтрокаПартии.Номенклатура;
					
					ИначеЕсли ТипЗначенияВидаСубконто.СодержитТип(Тип("СправочникСсылка.Организации")) Тогда
						КорСубконто = Реквизиты.Организация;
					
					ИначеЕсли ТипЗначенияВидаСубконто.СодержитТип(Тип("СправочникСсылка.Склады")) Тогда
						Если ЗначениеЗаполнено(СтрокаПартии.Склад) Тогда
							КорСубконто = СтрокаПартии.Склад;
						КонецЕсли;
					ИначеЕсли ТипЗначенияВидаСубконто.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
						Если ЗначениеЗаполнено(Реквизиты.Контрагент) Тогда
							КорСубконто = Реквизиты.Контрагент;
						КонецЕсли;
					КонецЕсли;
					
					БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
						ВидСубконто, КорСубконто);
						
				КонецЕсли;
				
			КонецЦикла;
			
			Если (ВедетсяУчетПоПартиям ИЛИ СвойстваСчетаДт.Забалансовый) И НЕ ЗаказНаПроизводство Тогда
				БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
					"Партии", СтрокаПартии.Партия);
			КонецЕсли;

			Если СвойстваСчетаДт.Количественный Тогда
				Проводка.КоличествоДт = СтрокаПартии.Количество;
			КонецЕсли;
		КонецЕсли;	

		Проводка.Сумма = СтрокаПартии.СуммаСписания;
		
		// Заполнение себестоимости в регистре накопления "Продажи".
		Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаПродажи")
			И (ДокументРеализации Или ДокументВозврата) Тогда 
			НайденныеСтроки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажи.НайтиСтроки(Новый Структура("Номенклатура", СтрокаПартии.Номенклатура));
			
			Если ДокументВозврата 
				И НЕ ЗначениеЗаполнено(ТаблицаРеквизиты[0].Сделка) Тогда
				СкладыватьСебестоимость = Ложь;
			Иначе
				СкладыватьСебестоимость = Истина;
			КонецЕсли;	
			
			// Строки при проведении сгруппированы.
			// В результате поиска должен быть массив не более 1 строки.
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				// Увеличис себестоимость, в случае ведения учета по партиям.
				НайденнаяСтрока.Себестоимость = ?(СкладыватьСебестоимость, НайденнаяСтрока.Себестоимость, 0) + СтрокаПартии.СуммаСписания;	
			КонецЦикла;	
		КонецЕсли;	
		
	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыСписаниеТоваров(ТаблицаСписанныеТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаСписанныеТовары

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"        	// <Строка,0> - имя списка в документе
	+ "СинонимСписка,"    	// <Строка,0> - синоним списка
	+ "Период,"           	// <Дата> - дата списания
	+ "НомерСтроки,"      	// <Число> - номер строки в списке
	+ "СчетУчета,"        	// <ПланСчетовСсылка.Хозрасчетный> - счет учета, с которого списывается номенклатура
	+ "Номенклатура,"     	// <СправочникСсылка.Номенклатура> - списываемая номенклатура
	+ "Склад,"            	// <СправочникСсылка.Склад> - склад, с которого списывается номенклатура
	+ "Партия,"           	// <ДокументСсылка.*> - документ поступления номенклатуры (партия)
	+ "Себестоимость,"    	// <Число,15,2> - сумма списываемой номенклатуры, указанная в документе списания
	+ "Количество,"       	// <Число,15,3> - количество списываемой номенклатуры
	+ "КорСчетСписания,"  	// <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который списывается номенклатура
	+ "КорСубконто1,"     	// - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто2,"     	// - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто3,"     	// - значение субконто счета, на который списывается номенклатура
	+ "СуммаСписания";		// <Число,15,2> - сумма временных разниц (ПБУ 18/02) в стоимости списываемой номенклатуры, определенной по данным остатков
	
	Параметры.Вставить("ТаблицаСписанныеТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСписанныеТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор," // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"      // <Дата> - период движений - дата документа
	+ "Организация," // <СправочникСсылка.Организации>
	+ "Контрагент,"  // <СправочникСсылка.Контрагенты>
	+ "Содержание";  // <Строка,150>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

#КонецОбласти

#Область ПеремещениеТоваров

Процедура СформироватьДвиженияПеремещениеТоваров(ТаблицаСписанныеТовары, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПеремещениеТоваров(ТаблицаСписанныеТовары, ТаблицаРеквизиты);
	Если Параметры.Реквизиты.Количество() = 0
		ИЛИ Параметры.ТаблицаСписанныеТовары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	СпособОценкиТМЗ = БухгалтерскийУчетСервер.СпособОценкиТМЗ(Реквизиты.Период, Реквизиты.Организация);
	ВедетсяУчетПоПартиям = СпособОценкиТМЗ <> Перечисления.СпособыОценки.ПоСредней;
	ВидСубконтоПартии = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;

	СвойстваСчетаКеш = Новый Соответствие;

	Для Каждого СтрокаПартии Из Параметры.ТаблицаСписанныеТовары Цикл

		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СокрЛП(Реквизиты.Содержание);

		Проводка.СчетДт	= СтрокаПартии.КорСчетСписания;
		СвойстваСчета = СвойстваСчетаКеш[Проводка.СчетДт];
		Если СвойстваСчета = Неопределено Тогда   // первое использование счета
			СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			СвойстваСчетаКеш.Вставить(Проводка.СчетДт, СвойстваСчета);
		КонецЕсли;
		
		БухгалтерскийУчетСервер.УстановитьСубконтоПоКешуСвойствСчета(
			Проводка.СчетДт, 
			Проводка.СубконтоДт, 
			СвойстваСчетаКеш, 
			СтрокаПартии.КорСубконто1,
			СтрокаПартии.КорСубконто2,
			СтрокаПартии.КорСубконто3);
		
		Если ВедетсяУчетПоПартиям 
			Или СвойстваСчета.Забалансовый Тогда
			БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", СтрокаПартии.Партия);
		КонецЕсли;

		Если СвойстваСчета.Количественный Тогда
			Проводка.КоличествоДт = СтрокаПартии.Количество;
		КонецЕсли;

		Проводка.СчетКт = СтрокаПартии.СчетУчета;
		СвойстваСчета = СвойстваСчетаКеш[Проводка.СчетКт];
		Если СвойстваСчета = Неопределено Тогда   // первое использование счета
			СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			СвойстваСчетаКеш.Вставить(Проводка.СчетКт, СвойстваСчета);
		КонецЕсли;
		
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаПартии.Номенклатура);
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", Реквизиты.Склад);
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии", СтрокаПартии.Партия);

		Если СвойстваСчета.Количественный Тогда
			Проводка.КоличествоКт = СтрокаПартии.Количество;
		КонецЕсли;

		Проводка.Сумма = СтрокаПартии.СуммаСписания;

		// Очистка сумм в проводке при перемещении между складами,
		// если не ведется суммовой учет по складам
		Если Проводка.СчетДт = Проводка.СчетКт Тогда

			Если БухгалтерскийУчетСервер.ВедетсяУчетПоСкладам(Проводка.СчетДт)
				И НЕ БухгалтерскийУчетСервер.ВедетсяСуммовойУчетПоСкладам(Проводка.СчетДт)  Тогда

				ОчиститьСумму = Истина;

				// Проверка, что дебетовая и кредитовая часть проводки отличаются не только складом.
				// В этом случае очистка суммы не производится.
				Для Индекс = 1 По СвойстваСчета.КоличествоСубконто Цикл
					ВидСубконто = СвойстваСчета["ВидСубконто" + Индекс];
					Если ВидСубконто <> ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады
						И Проводка.СубконтоДт[ВидСубконто] <> Проводка.СубконтоКт[ВидСубконто] Тогда
						ОчиститьСумму = Ложь;
					КонецЕсли;
				КонецЦикла;

				Если ОчиститьСумму Тогда
					Проводка.Сумма = 0;
				КонецЕсли;

			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыПеремещениеТоваров(ТаблицаСписанныеТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаСписанныеТовары

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"        	// <Строка,0> - имя списка в документе
	+ "СинонимСписка,"    	// <Строка,0> - синоним списка
	+ "НомерСтроки,"      	// <Число> - номер строки в списке
	+ "СчетУчета,"        	// <ПланСчетовСсылка.Хозрасчетный> - счет учета, с которого списывается номенклатура
	+ "Номенклатура,"     	// <СправочникСсылка.Номенклатура> - списываемая номенклатура
	+ "Партия,"           	// <ДокументСсылка.*> - документ поступления номенклатуры (партия)
	+ "Себестоимость,"    	// <Число,15,2> - сумма списываемой номенклатуры, указанная в документе списания
	+ "Количество,"       	// <Число,15,3> - количество списываемой номенклатуры
	+ "КорСчетСписания,"  	// <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который списывается номенклатура
	+ "КорСубконто1,"     	// - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто2,"     	// - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто3,"     	// - значение субконто счета, на который списывается номенклатура
	+ "СуммаСписания";  	// <Число,15,2> - сумма временных разниц (ПБУ 18/02) в стоимости списываемой номенклатуры, определенной по данным остатков

	Параметры.Вставить("ТаблицаСписанныеТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСписанныеТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      		// <Дата> - период движений - дата документа
	+ "Организация," 		// <СправочникСсылка.Организации>
	+ "Склад,"   			// <СправочникСсылка.Склад> - склад, с которого списывается номенклатура
	//+ "СкладПолучатель,"    // <СправочникСсылка.Склад> - склад, с на который оприходуется номенклатура
	+ "Содержание";  		// <Строка,150>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

#КонецОбласти

#Область ВозвратТоваров

Процедура СформироватьДвиженияВозвратТоваровПоставщику(ТаблицаТовары, ТаблицаСписанныеТовары, ТаблицаРеквизиты, Движения, Отказ, ПрямыеПроводки) Экспорт
	
	Параметры = ПодготовитьПараметрыВозвратТоваровПоставщику(ТаблицаТовары, ТаблицаСписанныеТовары, ТаблицаРеквизиты);
	
	Если Параметры.Реквизиты.Количество() = 0
		ИЛИ Параметры.ТаблицаСписанныеТовары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	СпособОценкиТМЗ = БухгалтерскийУчетСервер.СпособОценкиТМЗ(Реквизиты.Период, Реквизиты.Организация);
	
	СвойстваСчетаКеш = Новый Соответствие;
	
	Для Каждого СтрокаПартии Из Параметры.ТаблицаСписанныеТовары Цикл
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ИмяСписка", СтрокаПартии.ИмяСписка);
		СтруктураОтбора.Вставить("НомерСтроки", СтрокаПартии.НомерСтроки);
		СтрокаТаблицыТовары = Параметры.ТаблицаТовары.НайтиСтроки(СтруктураОтбора)[0];
		СодержаниеПроводки  = ?(ПустаяСтрока(СтрокаПартии.Содержание), Реквизиты.Содержание, СтрокаПартии.Содержание);
		
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СодержаниеПроводки;
		 
		Если ПрямыеПроводки Тогда
			Проводка.СчетДт	= СтрокаПартии.КорСчетСписания;
			СвойстваСчета = СвойстваСчетаКеш[Проводка.СчетДт];
			Если СвойстваСчета = Неопределено Тогда   // первое использование счета
				СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
				СвойстваСчетаКеш.Вставить(Проводка.СчетДт, СвойстваСчета);
			КонецЕсли;
			
			БухгалтерскийУчетСервер.УстановитьСубконтоПоКешуСвойствСчета(
				Проводка.СчетДт, 
				Проводка.СубконтоДт, 
				СвойстваСчетаКеш, 
				СтрокаПартии.КорСубконто1,
				СтрокаПартии.КорСубконто2,
				СтрокаПартии.КорСубконто3);
			
			Если СвойстваСчета.Валютный Тогда
				Проводка.ВалютаДт = Реквизиты.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт = ?(СтрокаТаблицыТовары.Количество = 0, СтрокаПартии.СуммаСписания,
					СтрокаПартии.СуммаСписания * СтрокаТаблицыТовары.СуммаВзаиморасчетов / СтрокаТаблицыТовары.Сумма);
			КонецЕсли;
				
			Проводка.СчетКт = СтрокаПартии.СчетУчета;
			СвойстваСчета = СвойстваСчетаКеш[Проводка.СчетКт];
			Если СвойстваСчета = Неопределено Тогда   // первое использование счета
				СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
				СвойстваСчетаКеш.Вставить(Проводка.СчетКт, СвойстваСчета);
			КонецЕсли;
			
			БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаПартии.Номенклатура);
			БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", СтрокаПартии.Склад);
			БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии", СтрокаПартии.Партия);
			
			Если СвойстваСчета.Количественный Тогда
				Проводка.КоличествоКт = СтрокаПартии.Количество;
			КонецЕсли;
			
		Иначе
			Проводка.СчетДт	= СтрокаПартии.СчетУчета;
			СвойстваСчета = СвойстваСчетаКеш[Проводка.СчетДт];
			Если СвойстваСчета = Неопределено Тогда   // первое использование счета
				СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
				СвойстваСчетаКеш.Вставить(Проводка.СчетДт, СвойстваСчета);
			КонецЕсли;
			
			БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаПартии.Номенклатура);
			БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", СтрокаПартии.Склад);
			БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", СтрокаПартии.Партия);
			
			Если СвойстваСчета.Количественный Тогда
				Проводка.КоличествоДт = СтрокаПартии.Количество;
			КонецЕсли;
			
			Проводка.СчетКт = СтрокаПартии.КорСчетСписания;
			СвойстваСчета = СвойстваСчетаКеш[Проводка.СчетКт];
			Если СвойстваСчета = Неопределено Тогда   // первое использование счета
				СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
				СвойстваСчетаКеш.Вставить(Проводка.СчетКт, СвойстваСчета);
			КонецЕсли;
			
			БухгалтерскийУчетСервер.УстановитьСубконтоПоКешуСвойствСчета(
				Проводка.СчетКт, 
				Проводка.СубконтоКт, 
				СвойстваСчетаКеш, 
				СтрокаПартии.КорСубконто1,
				СтрокаПартии.КорСубконто2,
				СтрокаПартии.КорСубконто3);
			
			Если СвойстваСчета.Валютный Тогда
				Проводка.ВалютаКт = Реквизиты.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = ?(СтрокаТаблицыТовары.Количество = 0, СтрокаПартии.СуммаСписания,
					СтрокаПартии.СуммаСписания * СтрокаТаблицыТовары.СуммаВзаиморасчетов / СтрокаТаблицыТовары.Сумма);
			КонецЕсли;
		КонецЕсли;
		
		Проводка.Сумма = СтрокаПартии.СуммаСписания;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыВозвратТоваровПоставщику(ТаблицаТовары, ТаблицаСписанныеТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТовары

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"           			// <Строка,0> - имя списка в документе
	+ "НомерСтроки,"         			// <Число> - номер строки в списке
	+ "Количество,"         		 	// <Число,15,3> - количество списываемой номенклатуры
	+ "Сумма,"            				// <Число,15,2> - сумма списываемой номенклатуры
	+ "СуммаВзаиморасчетов," 			// <Число,15,2> - сумма списываемой номенклатуры в валюте расчетов с контрагентом (при расчетах в валюте)
	+ "СебестоимостьУказанаВДокументе"; // <Булево> - Истина, если сумма себестоимости указана в строке табличной части документа

	Параметры.Вставить("ТаблицаТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.ТаблицаСписанныеТовары

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"        // <Строка,0> - имя списка в документе
	+ "СинонимСписка,"    // <Строка,0> - синоним списка
	+ "НомерСтроки,"      // <Число> - номер строки в списке
	+ "СчетУчета,"        // <ПланСчетовСсылка.Хозрасчетный> - счет учета, с которого списывается номенклатура
	+ "Номенклатура,"     // <СправочникСсылка.Номенклатура> - списываемая номенклатура
	+ "Склад,"            // <СправочникСсылка.Склад> - склад, с которого списывается номенклатура
	+ "Партия,"           // <ДокументСсылка.*> - документ поступления номенклатуры (партия)
	+ "Себестоимость,"    // <Число,15,2> - сумма списываемой номенклатуры, указанная в документе списания
	+ "Количество,"       // <Число,15,3> - количество списываемой номенклатуры
	+ "КорСчетСписания,"  // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который списывается номенклатура
	+ "КорСубконто1,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто2,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто3,"     // - значение субконто счета, на который списывается номенклатура
	+ "СуммаСписания,"    // <Число,15,2> - сумма временных разниц (ПБУ 18/02) в стоимости списываемой номенклатуры, определенной по данным остатков
	+ "Содержание";       // <Строка,0>   - содержание проводки

	Параметры.Вставить("ТаблицаСписанныеТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСписанныеТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"               // <Дата> - период движений - дата документа
	+ "Организация,"          // <СправочникСсылка.Организации>
	+ "Содержание,"           // <Строка,150>
	+ "ВалютаВзаиморасчетов"; // <СправочникСсылка.Валюты> - валюта расчетов с контрагентом (при расчетах в валюте)

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

#КонецОбласти

#Область ВозвратТоваровОтПокупателя

Функция ПодготовитьТаблицуВозвращенныеСписанныеТовары(ТаблицаТовары, ТаблицаСчетаУчетаТоваров, ТаблицаСписокНоменклатуры, ТаблицаРеквизиты, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаТовары)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
	    Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаРезультата = ПолучитьПустуюТаблицуСписанныеТовары();
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Если Не Реквизиты.УказанДокументОтгрузки
	 Или Не ЗначениеЗаполнено(ТаблицаСчетаУчетаТоваров) Тогда
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаТовары, ТаблицаРезультата);
		Возврат ТаблицаРезультата;
	КонецЕсли;
	
	СтруктураСчетовДляЗапроса = РазделитьСчетаУчетаПоПартионномуУчету(ТаблицаСчетаУчетаТоваров);
	ЕстьСчетаПартионные   = СтруктураСчетовДляЗапроса.СчетаПартионные.Количество() <> 0;
	ЕстьСчетаНеПартионные = СтруктураСчетовДляЗапроса.СчетаНеПартионные.Количество() <> 0;
	Если Не ЕстьСчетаПартионные И Не ЕстьСчетаНеПартионные Тогда
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаТовары, ТаблицаРезультата);
		Возврат ТаблицаРезультата;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыВозвращенныеСписанныеТовары(ТаблицаТовары, ТаблицаСчетаУчетаТоваров, ТаблицаСписокНоменклатуры, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	ДатаДокументаРеализации = Реквизиты.ДатаДокументаРеализации;
	ВозвратПрошлогоМесяца = НачалоМесяца(Реквизиты.Период) <> НачалоМесяца(ДатаДокументаРеализации);

	ВедетсяСуммовойУчетПоСкладам = БухгалтерскийУчетСервер.ВедетсяСуммовойУчетПоСкладам(ПланыСчетов.Хозрасчетный.Товары);
	
	МетаданныеСделки = Реквизиты.Сделка.Метаданные();
	ЕстьСкладОтгрузки = ОбщегоНазначения.ЕстьРеквизитОбъекта("Склад", МетаданныеСделки);
	
	РеквизитыСделки = Новый Структура();
	Если ЕстьСкладОтгрузки Тогда
		РеквизитыСделки.Вставить("Склад");
	КонецЕсли;

	Если РеквизитыСделки.Количество() > 0 Тогда
		РеквизитыСделки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Реквизиты.Сделка, РеквизитыСделки);
	КонецЕсли;
	
	Если ЕстьСкладОтгрузки Тогда
		СкладОтгрузки = РеквизитыСделки.Склад;
	КонецЕсли;
	
	ИспользоватьОтборПоСкладуОтгрузки = ВедетсяСуммовойУчетПоСкладам И ЕстьСкладОтгрузки;
	
	Если ВозвратПрошлогоМесяца Тогда
		ТекстЗапроса = ТекстЗапросаВозвращенныеСписанныеТоварыПрошлогоМесяца(
			ЕстьСчетаНеПартионные,
			ЕстьСчетаПартионные,
			ИспользоватьОтборПоСкладуОтгрузки);
	Иначе
		ТекстЗапроса = ТекстЗапросаВозвращенныеСписанныеТоварыТекущегоМесяца(ЕстьСчетаНеПартионные, ЕстьСчетаПартионные);
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + 
	"ВЫБРАТЬ
	|	ВТ_СписанныеТовары.Номенклатура КАК Номенклатура,
	|	ВТ_СписанныеТовары.Партия КАК Партия,
	|	ВТ_СписанныеТовары.СчетУчета КАК СчетУчета,
	|	ЕСТЬNULL(РеквизитыДокументаПартии.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПартии,
	|	СУММА(ВТ_СписанныеТовары.Сумма) КАК Сумма,
	|	СУММА(ВТ_СписанныеТовары.Количество) КАК Количество,
	|	СУММА(ВТ_СписанныеТовары.КоличествоОтгружено) КАК КоличествоОтгружено
	|ИЗ
	|	ВТ_СписанныеТовары КАК ВТ_СписанныеТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументаПартии
	|		ПО (РеквизитыДокументаПартии.Организация = &Организация)
	|			И ВТ_СписанныеТовары.Партия = РеквизитыДокументаПартии.Документ
	|ГДЕ
	|	ВТ_СписанныеТовары.Номенклатура В(&Товары)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_СписанныеТовары.Номенклатура,
	|	ВТ_СписанныеТовары.СчетУчета,
	|	ВТ_СписанныеТовары.Партия,
	|	ЕСТЬNULL(РеквизитыДокументаПартии.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1))
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВТ_СписанныеТовары.Количество) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_СписанныеТовары.Номенклатура,
	|	ДатаПартии УБЫВ";

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Организация",        Реквизиты.Организация);
	Запрос.УстановитьПараметр("Регистратор",        Реквизиты.Сделка);
	Запрос.УстановитьПараметр("СчетКтПартионный",   СтруктураСчетовДляЗапроса.СчетаПартионные);
	Запрос.УстановитьПараметр("СчетКтНеПартионный", СтруктураСчетовДляЗапроса.СчетаНеПартионные);
	Запрос.УстановитьПараметр("НачТекущегоМесяца",  НачалоМесяца(Реквизиты.Период));
	Запрос.УстановитьПараметр("КонДата",            Реквизиты.Период);
	Запрос.УстановитьПараметр("НачМесяцаРеализации",НачалоМесяца(ДатаДокументаРеализации));	
	Запрос.УстановитьПараметр("КонМесяцаРеализации",КонецМесяца(ДатаДокументаРеализации));
	Запрос.УстановитьПараметр("Товары",             Параметры.СписокНоменклатуры.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("СкладОтгрузки",      СкладОтгрузки);

	// Виды субконто при отсутствии партионного учета.
	ВидыСубконтоБезПартий = Новый Массив;
	ВидыСубконтоБезПартий.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	Если ИспользоватьОтборПоСкладуОтгрузки Тогда
		ВидыСубконтоБезПартий.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	Запрос.УстановитьПараметр("ВидыСубконтоБезПартий", ВидыСубконтоБезПартий);

	// Виды субконто при количественном учете по складам.
	ВидыСубконтоБезПартийСклады = Новый Массив;
	ВидыСубконтоБезПартийСклады.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоБезПартийСклады.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	Запрос.УстановитьПараметр("ВидыСубконтоБезПартийСклады", ВидыСубконтоБезПартий);

	// Виды субконто с учетом партий.
	ВидыСубконтоПартий = Новый Массив;
	ВидыСубконтоПартий.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоПартий.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	Если ИспользоватьОтборПоСкладуОтгрузки Тогда
		ВидыСубконтоПартий.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	Запрос.УстановитьПараметр("ВидыСубконтоПартий", ВидыСубконтоПартий);

	// Всегда 3 вида субконто.
	ВидыСубконтоПартийСклады = Новый Массив;
	ВидыСубконтоПартийСклады.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоПартийСклады.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	ВидыСубконтоПартийСклады.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	Запрос.УстановитьПараметр("ВидыСубконтоПартийСклады", ВидыСубконтоПартийСклады);
	
	Запрос.УстановитьПараметр("ЭтотВозврат", Реквизиты.Регистратор);

	ТаблицаОтгрузок = Запрос.Выполнить().Выгрузить();

	Для Каждого СтрокаВозврата Из Параметры.ТаблицаТовары Цикл

		КоличествоНеПодобраноПартии = СтрокаВозврата.Количество;

		ОтгруженныеПартии = ТаблицаОтгрузок.НайтиСтроки(Новый Структура("Номенклатура, СчетУчета", СтрокаВозврата.Номенклатура, СтрокаВозврата.СчетУчета));
		Для Каждого СтрокаОтгрузки Из ОтгруженныеПартии Цикл
			
			НоваяСтрока = ТаблицаРезультата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВозврата);
			НоваяСтрока.Партия = СтрокаОтгрузки.Партия;
			НоваяСтрока.Сделка = Реквизиты.Сделка;
			
			КоличествоВозвращено = Мин(КоличествоНеПодобраноПартии, СтрокаОтгрузки.КоличествоОтгружено);

			Если КоличествоВозвращено > СтрокаОтгрузки.Количество Тогда
				// Текущий возврат больше, чем очередная партия, т.е. фактически возвращают несколько разных партий.
				НоваяСтрока.Количество         = СтрокаОтгрузки.Количество;
				НоваяСтрока.СуммаСписания      = СтрокаОтгрузки.Сумма;
			Иначе
				// Полный или частичный возврат партии.
				НоваяСтрока.Количество         = КоличествоВозвращено;
				Коэфф                          = КоличествоВозвращено / СтрокаОтгрузки.Количество;
				НоваяСтрока.СуммаСписания      = Окр(СтрокаОтгрузки.Сумма   * Коэфф, 2);
			КонецЕсли;
			
			Если ВозвратПрошлогоМесяца Тогда
				НоваяСтрока.Себестоимость = НоваяСтрока.СуммаСписания;
			КонецЕсли;

			КоличествоНеПодобраноПартии = КоличествоНеПодобраноПартии - НоваяСтрока.Количество;
			
			СтрокаОтгрузки.Количество 			= СтрокаОтгрузки.Количество - НоваяСтрока.Количество;
			СтрокаОтгрузки.КоличествоОтгружено 	= СтрокаОтгрузки.КоличествоОтгружено - НоваяСтрока.Количество;
			СтрокаОтгрузки.Сумма 				= СтрокаОтгрузки.Сумма - НоваяСтрока.СуммаСписания;

			Если КоличествоНеПодобраноПартии = 0 Тогда
				Прервать;
			КонецЕсли;

		КонецЦикла;

		// Если в документе указан документ реализации по которому было отгружено больше,
		// чем возвращается, то эту разницу отнесем на пустую партию.
		Если КоличествоНеПодобраноПартии > 0 Тогда
			ТекстСообщения = НСтр("ru = 'Документом ""%1"" было реализовано ""%2"" на ""%3"" ед. меньше, чем возвращается.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения,
				СокрЛП(Реквизиты.Сделка),
				СтрокаВозврата.Номенклатура,
				КоличествоНеПодобраноПартии);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				Реквизиты.Регистратор,
				СтрокаВозврата.ИмяСписка+"[" + Формат(СтрокаВозврата.НомерСтроки - 1, "ЧН=0; ЧГ=")+"].Количество",
				"Объект",
				Отказ);
		КонецЕсли;

	КонецЦикла;

	Возврат ТаблицаРезультата;

КонецФункции

Функция ТекстЗапросаВозвращенныеСписанныеТоварыДокументыОтгрузки()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Регистратор КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ДокументыОтгрузки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВозвратыТоваров.Регистратор
	|ИЗ
	|	РегистрНакопления.ВозвратыТоваров КАК ВозвратыТоваров
	|ГДЕ
	|	ВозвратыТоваров.Сделка = &Регистратор
	|	И ВозвратыТоваров.Период <= &КонДата
	|	И ВозвратыТоваров.Активность
	|	И ВозвратыТоваров.Регистратор <> &ЭтотВозврат";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();

КонецФункции

Функция ТекстЗапросаВозвращенныеСписанныеТоварыПартии()

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХозрасчетныйСубконто.Значение КАК Партия
	|ПОМЕСТИТЬ ВременнаяТаблицаПартии
	|ИЗ
	|	ВТ_ДокументыОтгрузки КАК ВТ_ДокументыОтгрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	|		ПО ВТ_ДокументыОтгрузки.Ссылка = ХозрасчетныйСубконто.Регистратор
	|ГДЕ
	|	ХозрасчетныйСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит)
	|	И ХозрасчетныйСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партия";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();

КонецФункции

Функция ТекстЗапросаВозвращенныеСписанныеТоварыПрошлогоМесяца(ЕстьСчетаНеПартионные, ЕстьСчетаПартионные, ИспользоватьОтборПоСкладуОтгрузки)

	ТекстЗапроса = ТекстЗапросаВозвращенныеСписанныеТоварыДокументыОтгрузки();

	Если ЕстьСчетаПартионные Тогда
		// Определим, какие партии списали документы отгрузки и будет возвращать только их.
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаВозвращенныеСписанныеТоварыПартии();
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + 
	"// 0 - Списанные товары по счетам с партионным учетом
	|ВЫБРАТЬ 
	|	ХозрасчетныйОбороты.Субконто1 КАК Номенклатура,
	|	ХозрасчетныйОбороты.Субконто2 КАК Партия,
	|	ХозрасчетныйОбороты.Счет КАК СчетУчета,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК Сумма,
	|	СУММА(ХозрасчетныйОбороты.КоличествоОборотКт) КАК Количество,
	|	0 КАК КоличествоОтгружено
	|ПОМЕСТИТЬ ВТ_СписанныеТовары
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачМесяцаРеализации,
	|			&КонМесяцаРеализации,
	|			,
	|			Счет В (&СчетКтПартионный),
	|			&ВидыСубконтоПартий,
	|			Организация = &Организация
	|				И Субконто1 В (&Товары)
	|				И Субконто2 В
	|					(ВЫБРАТЬ
	|						ВременнаяТаблицаПартии.Партия
	|					ИЗ
	|						ВременнаяТаблицаПартии)
	|				И &УсловиеПоСкладуСубконто3,
	|			,
	|			) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто1,
	|	ХозрасчетныйОбороты.Субконто2,
	|	ХозрасчетныйОбороты.Счет
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// 1 - Списанные товары по счетам без партионного учета
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1,
	|	НЕОПРЕДЕЛЕНО,
	|	ХозрасчетныйОбороты.Счет,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт),
	|	СУММА(ХозрасчетныйОбороты.КоличествоОборотКт),
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачМесяцаРеализации,
	|			&КонМесяцаРеализации,
	|			,
	|			Счет В (&СчетКтНеПартионный),
	|			&ВидыСубконтоБезПартий,
	|			Организация = &Организация
	|				И Субконто1 В (&Товары)
	|				И &УсловиеПоСкладуСубконто2,
	|			,
	|			) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто1,
	|	ХозрасчетныйОбороты.Счет
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// 2 - Возвраты прошлых периодов и без указания сделки по счетам с партиооным учетом
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии)
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии)
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии)
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ХозрасчетныйДвиженияССубконто.СчетКт,
	|	-ХозрасчетныйДвиженияССубконто.Сумма,
	|	-ХозрасчетныйДвиженияССубконто.КоличествоКт,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			&НачМесяцаРеализации,
	|			&КонМесяцаРеализации,
	|			Организация = &Организация
	|				И СчетКт В (&СчетКтПартионный)
	|				И КоличествоКт < 0
	|				И ВидСубконтоКт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|				И СубконтоКт1 В (&Товары)
	|				И ВидСубконтоКт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии)
	|				И СубконтоКт2 В
	|					(ВЫБРАТЬ
	|						ВременнаяТаблицаПартии.Партия
	|					ИЗ
	|						ВременнаяТаблицаПартии)
	|				И &УсловиеПоСкладуДвиженияССубконто3,
	|			,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// 3 - Возвраты прошлых периодов и без указания сделки по счетам без партионного учета
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	НЕОПРЕДЕЛЕНО,
	|	ХозрасчетныйДвиженияССубконто.СчетКт,
	|	-ХозрасчетныйДвиженияССубконто.Сумма,
	|	-ХозрасчетныйДвиженияССубконто.КоличествоКт,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			&НачМесяцаРеализации,
	|			&КонМесяцаРеализации,
	|			Организация = &Организация
	|				И СчетКт В (&СчетКтНеПартионный)
	|				И КоличествоКт < 0
	|				И ВидСубконтоКт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|				И СубконтоКт1 В (&Товары)
	|				И &УсловиеПоСкладуДвиженияССубконто2,
	|			,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// 4 - Перемещение между складами при отсутствии суммового учета по складам по счетам с партионным учетом
	|ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СубконтоКт1,
	|	ХозрасчетныйОборотыДтКт.СубконтоКт2,
	|	ХозрасчетныйОборотыДтКт.СчетКт,
	|	0,
	|	-СУММА(ХозрасчетныйОборотыДтКт.КоличествоОборотКт),
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачМесяцаРеализации,
	|			&КонМесяцаРеализации,
	|			,
	|			СчетДт В (&СчетКтПартионный),
	|			&ВидыСубконтоПартийСклады,
	|			СчетКт В (&СчетКтПартионный),
	|			&ВидыСубконтоПартийСклады,
	|			Организация = &Организация
	|				И СубконтоДт1 В (&Товары)
	|				И СубконтоКт1 В (&Товары)
	|				И СубконтоКт2 В
	|					(ВЫБРАТЬ
	|						ВременнаяТаблицаПартии.Партия
	|					ИЗ
	|						ВременнаяТаблицаПартии)
	|				И &УсловиеПоСкладуСубконтоКт3) КАК ХозрасчетныйОборотыДтКт
	|ГДЕ
	|	ХозрасчетныйОборотыДтКт.СчетДт = ХозрасчетныйОборотыДтКт.СчетКт
	|	И ХозрасчетныйОборотыДтКт.СубконтоДт1 = ХозрасчетныйОборотыДтКт.СубконтоКт1
	|	И ХозрасчетныйОборотыДтКт.СубконтоДт2 = ХозрасчетныйОборотыДтКт.СубконтоКт2
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОборотыДтКт.СубконтоКт1,
	|	ХозрасчетныйОборотыДтКт.СубконтоКт2,
	|	ХозрасчетныйОборотыДтКт.СчетКт
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// 5 - Перемещение между складами при отсутствии суммового учета по складам по счетам без партионного учета
	|ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО,
	|	ХозрасчетныйОборотыДтКт.СчетКт,
	|	0,
	|	-СУММА(ХозрасчетныйОборотыДтКт.КоличествоОборотКт),
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачМесяцаРеализации,
	|			&КонМесяцаРеализации,
	|			,
	|			СчетДт В (&СчетКтНеПартионный),
	|			&ВидыСубконтоБезПартийСклады,
	|			СчетКт В (&СчетКтНеПартионный),
	|			&ВидыСубконтоБезПартийСклады,
	|			Организация = &Организация
	|				И СубконтоДт1 В (&Товары)
	|				И СубконтоКт1 В (&Товары)
	|				И &УсловиеПоСкладуСубконтоКт2) КАК ХозрасчетныйОборотыДтКт
	|ГДЕ
	|	ХозрасчетныйОборотыДтКт.СчетДт = ХозрасчетныйОборотыДтКт.СчетКт
	|	И ХозрасчетныйОборотыДтКт.СубконтоДт1 = ХозрасчетныйОборотыДтКт.СубконтоКт1
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОборотыДтКт.СубконтоКт1,
	|	ХозрасчетныйОборотыДтКт.СчетКт
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// 6 - Отгрузки по документам цепочки
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии)
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии)
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии)
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ХозрасчетныйДвиженияССубконто.СчетКт,
	|	0,
	|	0,
	|	ХозрасчетныйДвиженияССубконто.КоличествоКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			&НачМесяцаРеализации,
	|			&КонДата,
	|			Организация = &Организация
	|				И Регистратор = &Регистратор
	|				И СчетКт В (&СчетКтПартионный, &СчетКтНеПартионный)
	|				И ВидСубконтоКт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|				И СубконтоКт1 В (&Товары),
	|			,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// 7 - Возвраты по документам цепочки
	|ВЫБРАТЬ
	|	ВозвратыТоваровОбороты.Номенклатура,
	|	ВозвратыТоваровОбороты.Партия,
	|	ВозвратыТоваровОбороты.СчетУчета,
	|	0,
	|	0,
	|	-ВозвратыТоваровОбороты.КоличествоОборот
	|ИЗ
	|	РегистрНакопления.ВозвратыТоваров.Обороты(
	|			&НачМесяцаРеализации,
	|			&КонДата,
	|			Регистратор,
	|			Сделка = &Регистратор
	|				И Организация = &Организация
	|				И СчетУчета В (&СчетКтПартионный, &СчетКтНеПартионный)
	|				И Номенклатура В (&Товары)) КАК ВозвратыТоваровОбороты
	|ГДЕ
	|	ВозвратыТоваровОбороты.Регистратор <> &ЭтотВозврат";

	Если ИспользоватьОтборПоСкладуОтгрузки Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоСкладуСубконтоКт2", "СубконтоКт2 = &СкладОтгрузки");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоСкладуСубконтоКт3", "СубконтоКт3 = &СкладОтгрузки");
	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоСкладуСубконто2", "Субконто2 = &СкладОтгрузки");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоСкладуСубконто3", "Субконто3 = &СкладОтгрузки");

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоСкладуДвиженияССубконто2", "
			|	ВидСубконтоКт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады)
			|			И СубконтоКт2 = &СкладОтгрузки");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоСкладуДвиженияССубконто3", "
			|	ВидСубконтоКт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады)
			|			И СубконтоКт3 = &СкладОтгрузки");
		
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоСкладуСубконтоКт2", "ИСТИНА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоСкладуСубконтоКт3", "ИСТИНА");
	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоСкладуСубконто2", "ИСТИНА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоСкладуСубконто3", "ИСТИНА");

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоСкладуДвиженияССубконто2", "ИСТИНА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоСкладуДвиженияССубконто3", "ИСТИНА");
		
	КонецЕсли;
	
	// Исключим запросы, которые не требуются, исходя из настроек плана счетов.
	// Удаляем, начиная с последних запросов, чтобы индексы запросов были корректными. 
	Счет1610 = ПланыСчетов.Хозрасчетный.Товары;
	ВедетсяУчетПоСкладам = БухгалтерскийУчетСервер.ВедетсяУчетПоСкладам(Счет1610);
	ВедетсяСуммовойУчетПоСкладам = БухгалтерскийУчетСервер.ВедетсяСуммовойУчетПоСкладам(Счет1610);

	// Удалим запросы к счетам только с количественным учетом по складам, если такого нет.
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	ИндексПоследнегоПакетаЗапросов = СхемаЗапроса.ПакетЗапросов.Количество() - 1;
	
	Если ВедетсяСуммовойУчетПоСкладам ИЛИ НЕ ВедетсяУчетПоСкладам Тогда
		// Либо складов нет вообще либо ведется суммовой учет по складам, отдельно обрабатывать перемещения между складами не требуется.
		СхемаЗапроса.ПакетЗапросов[ИндексПоследнегоПакетаЗапросов].Операторы.Удалить(5);
		СхемаЗапроса.ПакетЗапросов[ИндексПоследнегоПакетаЗапросов].Операторы.Удалить(4);

	ИначеЕсли ЕстьСчетаПартионные И НЕ ЕстьСчетаНеПартионные Тогда
		// Если только партионные счета и учет по складам ведется
		СхемаЗапроса.ПакетЗапросов[ИндексПоследнегоПакетаЗапросов].Операторы.Удалить(5);

	ИначеЕсли НЕ ЕстьСчетаПартионные И ЕстьСчетаНеПартионные Тогда
		// Если только непартионные счета и учет по складам ведется
		СхемаЗапроса.ПакетЗапросов[ИндексПоследнегоПакетаЗапросов].Операторы.Удалить(4);

	КонецЕсли; 

	Если НЕ (ЕстьСчетаПартионные И ЕстьСчетаНеПартионные) Тогда

		Если ЕстьСчетаПартионные Тогда
			// Удалим запрос к счетам без партий (кроме перемещений - учтено в предыдущем шаге).
			СхемаЗапроса.ПакетЗапросов[ИндексПоследнегоПакетаЗапросов].Операторы.Удалить(3);
			СхемаЗапроса.ПакетЗапросов[ИндексПоследнегоПакетаЗапросов].Операторы.Удалить(1);
		Иначе
			// Удалим запрос к счетам с партиями.
			СхемаЗапроса.ПакетЗапросов[ИндексПоследнегоПакетаЗапросов].Операторы.Удалить(2);
			СхемаЗапроса.ПакетЗапросов[ИндексПоследнегоПакетаЗапросов].Операторы.Удалить(0);
		КонецЕсли;

	КонецЕсли;

	Возврат СхемаЗапроса.ПолучитьТекстЗапроса() + ОбщегоНазначения.РазделительПакетаЗапросов();

КонецФункции

Функция ТекстЗапросаВозвращенныеСписанныеТоварыТекущегоМесяца(ЕстьСчетаНеПартионные, ЕстьСчетаПартионные)

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии)
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии)
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии)
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Партия,
	|	ХозрасчетныйДвиженияССубконто.СчетКт КАК СчетУчета,
	|	ХозрасчетныйДвиженияССубконто.Сумма КАК Сумма,
	|	ХозрасчетныйДвиженияССубконто.КоличествоКт КАК Количество,
	|	ХозрасчетныйДвиженияССубконто.КоличествоКт КАК КоличествоОтгружено
	|ПОМЕСТИТЬ ВТ_СписанныеТовары
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			&НачТекущегоМесяца,
	|			&КонДата,
	|			СчетКт В (&СчетКтПартионный, &СчетКтНеПартионный)
	|				И Регистратор = &Регистратор
	|				И Организация = &Организация
	|				И ВидСубконтоКт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|				И СубконтоКт1 В (&Товары),
	|			,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|ГДЕ
	|	ХозрасчетныйДвиженияССубконто.КоличествоКт >= 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратыТоваровОбороты.Номенклатура,
	|	ВЫБОР
	|		КОГДА ВозвратыТоваровОбороты.СчетУчета В (&СчетКтПартионный)
	|			ТОГДА ВозвратыТоваровОбороты.Партия
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВозвратыТоваровОбороты.СчетУчета,
	|	0,
	|	0,
	|	-ВозвратыТоваровОбороты.КоличествоОборот
	|ИЗ
	|	РегистрНакопления.ВозвратыТоваров.Обороты(
	|			&НачТекущегоМесяца,
	|			&КонДата,
	|			Регистратор,
	|			Организация = &Организация
	|				И СчетУчета В (&СчетКтПартионный, &СчетКтНеПартионный)
	|				И Номенклатура В (&Товары)
	|				И Сделка = &Регистратор) КАК ВозвратыТоваровОбороты
	|ГДЕ
	|	ВозвратыТоваровОбороты.Регистратор <> &ЭтотВозврат";

	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
КонецФункции

Функция ПодготовитьПараметрыТаблицыВозвращенныеСписанныеТовары(ТаблицаТовары, ТаблицаСчетаУчетаТоваров, ТаблицаСписокНоменклатуры, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТовары

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"        // <Строка,0> - имя списка в документе
	+ "СинонимСписка,"    // <Строка,0> - синоним списка
	+ "Период,"           // <Дата> - дата списания
	+ "НомерСтроки,"      // <Число> - номер строки в списке
	+ "СчетУчета,"        // <ПланСчетовСсылка.Хозрасчетный> - счет учета, с которого списывается номенклатура
	+ "Номенклатура,"     // <СправочникСсылка.Номенклатура> - списываемая номенклатура
	+ "Склад,"            // <СправочникСсылка.Склад> - склад, с которого списывается номенклатура
	+ "Партия,"           // <ДокументСсылка.*> - документ поступления номенклатуры (партия)
	+ "Себестоимость,"    // <Число,15,2> - сумма списываемой номенклатуры, указанная в документе списания
	+ "Количество,"       // <Число,15,3> - количество списываемой номенклатуры
	+ "КорСчетСписания,"  // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который списывается номенклатура
	+ "КорСубконто1,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто2,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто3,"     // - значение субконто счета, на который списывается номенклатура
	+ "СуммаСписания";  // <Число,15,2> - сумма временных разниц (ПБУ 18/02) в стоимости списываемой номенклатуры, определенной по данным остатков
	
	Параметры.Вставить("ТаблицаТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТовары, СписокОбязательныхКолонок));

	СписокОбязательныхКолонок = ""
	+ "СчетУчета";     // <Булево>
	
	Параметры.Вставить("СчетаУчетаТоваров",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСчетаУчетаТоваров, СписокОбязательныхКолонок));

	СписокОбязательныхКолонок = ""
	+ "Номенклатура";     // <СправочникСсылка.Номенклатура> - ссылка на номенклатуру, по которой будет определяться партия
	
	Параметры.Вставить("СписокНоменклатуры",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСписокНоменклатуры, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                 // <Дата> - период движений - дата документа
	+ "Регистратор,"            // <ДокументСсылка>
	+ "Организация,"            // <СправочникСсылка.Организации>
	+ "УказанДокументОтгрузки," // <Булево>
	+ "ДатаДокументаРеализации," // <Дата>
	+ "Сделка";                 // <ДокументСсылка>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;
	
КонецФункции

Функция РазделитьСчетаУчетаПоПартионномуУчету(ТаблицаСчетаУчетаТоваров)

	СтруктураСчетов = Новый Структура;
	СтруктураСчетов.Вставить("СчетаПартионные",   Новый Массив);
	СтруктураСчетов.Вставить("СчетаНеПартионные", Новый Массив);

	Для каждого СтрокаСчета Из ТаблицаСчетаУчетаТоваров Цикл
		Если БухгалтерскийУчетСервер.НаСчетеВедетсяПартионныйУчет(СтрокаСчета.СчетУчета) Тогда
			СтруктураСчетов.СчетаПартионные.Добавить(СтрокаСчета.СчетУчета);
		Иначе
			СтруктураСчетов.СчетаНеПартионные.Добавить(СтрокаСчета.СчетУчета);
		КонецЕсли;
	КонецЦикла;

	Возврат СтруктураСчетов;

КонецФункции

Процедура ПроставитьСторноТаблицы(Таблица, СтруктураПолейДляСторно, Множитель) Экспорт
	
	Если Таблица = Неопределено
		ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Сторнируем 
	Для Каждого Строка Из Таблица Цикл
		Для каждого КолонкаСторно Из СтруктураПолейДляСторно Цикл
			Строка[КолонкаСторно.Ключ] = Множитель * Строка[КолонкаСторно.Ключ];
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДвиженияСписанияТоваровВозвратОтПокупателя(ТаблицаСписанныеТовары, ТаблицаРеквизиты, Движения, Отказ, ДополнительныеСвойства) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты)
	 Или Не ЗначениеЗаполнено(ТаблицаСписанныеТовары) Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьДвиженияСписаниеТоваров(ТаблицаСписанныеТовары, ТаблицаРеквизиты, Движения, Отказ, ДополнительныеСвойства);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Параметры = ПодготовитьПараметрыСписаниеТоваровВозвратОтПокупателя(ТаблицаСписанныеТовары, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Для каждого СтрокаПартии Из Параметры.ТаблицаСписанныеТовары Цикл
		
		Если ЗначениеЗаполнено(СтрокаПартии.Сделка) Тогда
			Движение = Движения.ВозвратыТоваров.Добавить();
			
			Движение.Период       = Реквизиты.Период;
			Движение.Организация  = Реквизиты.Организация;
			Движение.СчетУчета    = СтрокаПартии.СчетУчета;
			Движение.Сделка       = СтрокаПартии.Сделка;
			Движение.Номенклатура = СтрокаПартии.Номенклатура;
			Движение.Партия       = СтрокаПартии.Партия;
			Движение.Количество   = -СтрокаПартии.Количество;
		КонецЕсли; 
		
	КонецЦикла;

	Движения.ВозвратыТоваров.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыСписаниеТоваровВозвратОтПокупателя(ТаблицаСписанныеТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаСписанныеТовары

	СписокОбязательныхКолонок = ""
	+ "СчетУчета,"        // <ПланСчетовСсылка.Хозрасчетный> - счет учета, с которого списывается номенклатура
	+ "Номенклатура,"     // <СправочникСсылка.Номенклатура> - списываемая номенклатура
	+ "Партия,"           // <ДокументСсылка.*> - документ поступления номенклатуры (партия)
	+ "Сделка,"           // <ДокументСсылка.*> - документ поступления номенклатуры (партия)
	+ "Количество";       // <Число,15,3> - количество списываемой номенклатуры
	
	Параметры.Вставить("ТаблицаСписанныеТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСписанныеТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор," // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"      // <Дата> - период движений - дата документа
	+ "Организация"; // <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

#КонецОбласти

#Область ИзменениеСебестоимостиОстатковТоваров

Процедура СформироватьДвиженияИзменениеСебестоимостиОстатковТоваров(ТаблицаТовары, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыИзменениеСебестоимостиОстатковТоваров(ТаблицаТовары, ТаблицаРеквизиты);
	
	Если Параметры.ТаблицаТовары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	СпособОценкиТМЗ = БухгалтерскийУчетСервер.СпособОценкиТМЗ(Реквизиты.Период, Реквизиты.Организация);
	ВедетсяУчетПоПартиям = СпособОценкиТМЗ <> Перечисления.СпособыОценки.ПоСредней;
	
	СвойстваСчетаКеш = Новый Соответствие;

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаТовары Цикл
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СокрЛП(СтрокаТаблицы.Содержание);
		
		Проводка.СчетДт = СтрокаТаблицы.СчетУчета;
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",       СтрокаТаблицы.Склад);
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС",    СтрокаТаблицы.СтавкаНДС);
		Если ВедетсяУчетПоПартиям Тогда
			БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", СтрокаТаблицы.ДокументОприходования);
		КонецЕсли;
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы", СтрокаТаблицы.СтатьяЗатрат);
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат",         СтрокаТаблицы.СтатьяЗатрат);
		
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		
		Проводка.СчетКт = СтрокаТаблицы.КорСчет;
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаТаблицы.ВидКорСубконто1, СтрокаТаблицы.КорСубконто1);
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаТаблицы.ВидКорСубконто2, СтрокаТаблицы.КорСубконто2);
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаТаблицы.ВидКорСубконто3, СтрокаТаблицы.КорСубконто3);
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		
		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт        = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВзаиморасчетов;
		КонецЕсли;
		
		Проводка.Сумма = СтрокаТаблицы.Сумма;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыИзменениеСебестоимостиОстатковТоваров(ТаблицаТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТовары

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"           // <Число> - номер строки в списке
	+ "Номенклатура,"          // <СправочникСсылка.Номенклатура> - изменяемая номенклатура
	+ "СчетУчета,"             // <ПланСчетовСсылка.Хозрасчетный> - счет, на котором изменяется себестоимость остатков товаров
	+ "Склад,"                 // <СправочникСсылка.Склад> - склад, с которого списывается номенклатура
	+ "ДокументОприходования," // <ДокументСсылка.*> - документ поступления номенклатуры (партия), указанный в документе списания
	+ "СтавкаНДС,"             // <ПеречислениеСсылка.СтавкиНДС> - ставка НДС
	+ "КорСчет,"               // <ПланСчетовСсылка.Хозрасчетный> - корреспондирующий счет (счет учета взаиморасчетов)
	+ "КорСубконто1,"          // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто2,"          // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто3,"          // - значение субконто счета, на который списывается номенклатура
	+ "Сумма,"               	// <Число,15,2> - сумма изменения себестоимости в БУ
	+ "СуммаВзаиморасчетов,"   // <Число,15,2> - сумма изменения себестоимости для отражения во взаиморасчетах с контрагентом
	+ "Содержание";            // <Строка,150> - содержание проводки

	Параметры.Вставить("ТаблицаТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТовары, СписокОбязательныхКолонок));


	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                   // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                        // <Дата> - период движений - дата документа
	+ "Организация,"                   // <СправочникСсылка.Организация> - организация, из которой возвращается товар
	+ "Контрагент,"                    // <СправочникСсылка.Контрагенты> - поставщик товара
	+ "ВалютаВзаиморасчетов";          // <СправочникСсылка.Валюты> - валюта взаиморасчетов с контрагентом (при расчетах в валюте)

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

#КонецОбласти

#Область ПоступлениеТоваров

Процедура СформироватьДвиженияПоступлениеТоваров(ТаблицаТовары, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыПоступлениеТоваров(ТаблицаТовары, ТаблицаРеквизиты);
	
	Если Параметры.ТаблицаТовары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	СпособОценкиТМЗ = БухгалтерскийУчетСервер.СпособОценкиТМЗ(Реквизиты.Период, Реквизиты.Организация);
	ВедетсяУчетПоПартиям = СпособОценкиТМЗ <> Перечисления.СпособыОценки.ПоСредней;
	
	СвойстваСчетаКеш = Новый Соответствие;

	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаТовары Цикл
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СокрЛП(СтрокаТаблицы.Содержание);
		
		Проводка.СчетДт = СтрокаТаблицы.СчетУчета;
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);		
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", СтрокаТаблицы.Склад);
		
		Если ВедетсяУчетПоПартиям Тогда
			БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", Реквизиты.Регистратор);
		КонецЕсли;
		
		СвойстваСчета = СвойстваСчетаКеш[Проводка.СчетДт];
		Если СвойстваСчета = Неопределено Тогда   // первое использование счета
			СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			СвойстваСчетаКеш.Вставить(Проводка.СчетДт, СвойстваСчета);
		КонецЕсли;
		
		Если СвойстваСчета.Количественный Тогда
			Проводка.КоличествоДт = СтрокаТаблицы.Количество;
		КонецЕсли;
		
		Проводка.СчетКт = СтрокаТаблицы.КорСчет;
		
		СвойстваСчета = СвойстваСчетаКеш[Проводка.СчетКт];
		Если СвойстваСчета = Неопределено Тогда   // первое использование счета
			СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			СвойстваСчетаКеш.Вставить(Проводка.СчетКт, СвойстваСчета);
		КонецЕсли;
		
		БухгалтерскийУчетСервер.УстановитьСубконтоПоКешуСвойствСчета(
			Проводка.СчетКт, 
			Проводка.СубконтоКт, 
			СвойстваСчетаКеш, 
			СтрокаТаблицы.КорСубконто1,
			СтрокаТаблицы.КорСубконто2,
			СтрокаТаблицы.КорСубконто3);
		
		Если СвойстваСчета.Валютный Тогда
			Проводка.ВалютаКт        = СтрокаТаблицы.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВзаиморасчетов;
		КонецЕсли;
		
		Проводка.Сумма = СтрокаТаблицы.Сумма;
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыПоступлениеТоваров(ТаблицаТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТовары
	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"         	// <Число> - номер строки в списке
	+ "Номенклатура,"        	// <СправочникСсылка.Номенклатура> - поступающий товар
	+ "СуммаВзаиморасчетов," 	// <Число,15,2> - сумма в валюте взаиморасчетов
	+ "Сумма,"             		// <Число,15,2> - сумма в валюте регламентированного учета
	+ "Количество,"          	// <Число,15,3> - количество поступающего товара
	+ "СчетУчета,"           	// <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который приходуется товар
	+ "КорСчет,"             	// <ПланСчетовСсылка.Хозрасчетный> - счет учета, с которого поступает товар
	+ "КорСубконто1,"        	// <Характеристика.ВидыСубконтоХозрасчетные> - значение субконто счета, с которого поступает товар
	+ "КорСубконто2,"        	// <Характеристика.ВидыСубконтоХозрасчетные> - значение субконто счета, с которого поступает товар
	+ "КорСубконто3,"        	// <Характеристика.ВидыСубконтоХозрасчетные> - значение субконто счета, с которого поступает товар
	+ "Содержание,"          	// <Строка,150> - содержание проводки	
	+ "ВалютаВзаиморасчетов," 	// <СправочникСсылка.Валюты> - валюта взаиморасчетов
	+ "Склад"; 					// <СправочникСсылка.Склады> - склад, на который поступает товар
	
	Параметры.Вставить("ТаблицаТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты
	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организация> - организация, в которую поступает товар
	+ "ВалютаРегламентированногоУчета"; // <СправочникСсылка.Валюты> - валюта регламентированного учета
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

#КонецОбласти

#Область ОприходованиеТоваров

Процедура СформироватьДвиженияОприходованиеТоваров(ТаблицаТовары, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыОприходованиеТоваров(ТаблицаТовары, ТаблицаРеквизиты);

	Если Параметры.ТаблицаТовары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	СпособОценкиТМЗ = БухгалтерскийУчетСервер.СпособОценкиТМЗ(Реквизиты.Период, Реквизиты.Организация);
	ВедетсяУчетПоПартиям = СпособОценкиТМЗ <> Перечисления.СпособыОценки.ПоСредней;

	СвойстваСчетаКеш = Новый Соответствие;

	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаТовары Цикл

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СокрЛП(СтрокаТаблицы.Содержание);
		Проводка.КорректироватьНУ  = Реквизиты.КорректироватьНУ;

		Проводка.СчетДт = СтрокаТаблицы.СчетУчета;
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", Реквизиты.Склад);
		Если ВедетсяУчетПоПартиям Тогда
			БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", Реквизиты.Регистратор);
		КонецЕсли;

		СвойстваСчета = СвойстваСчетаКеш[Проводка.СчетДт];
		Если СвойстваСчета = Неопределено Тогда   // первое использование счета
			СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			СвойстваСчетаКеш.Вставить(Проводка.СчетДт, СвойстваСчета);
		КонецЕсли;
		
		Если СвойстваСчета.Количественный Тогда
			Проводка.КоличествоДт = СтрокаТаблицы.Количество;
		КонецЕсли;
		
		Проводка.СчетКт = СтрокаТаблицы.КорСчет;
		
		СвойстваСчета = СвойстваСчетаКеш[Проводка.СчетКт];
		Если СвойстваСчета = Неопределено Тогда   // первое использование счета
			СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			СвойстваСчетаКеш.Вставить(Проводка.СчетКт, СвойстваСчета);
		КонецЕсли;
		
		БухгалтерскийУчетСервер.УстановитьСубконтоПоКешуСвойствСчета(
			Проводка.СчетКт, 
			Проводка.СубконтоКт, 
			СвойстваСчетаКеш, 
			СтрокаТаблицы.КорСубконто1,
			СтрокаТаблицы.КорСубконто2,
			СтрокаТаблицы.КорСубконто3);
		
		Проводка.Сумма = СтрокаТаблицы.Сумма;

		//// Цикл субконто по строке партий
		//Для НомерСубконто = 1 По 3 Цикл
		//	КорСубконто = СтрокаТаблицы["КорСубконто" + НомерСубконто];
		//	
		//	// Определение положения субконто по типу
		//	Если СвойстваСчетаКт.ВидСубконто1ТипЗначения <> Неопределено
		//		И СвойстваСчетаКт.ВидСубконто1ТипЗначения.СодержитТип(ТипЗнч(КорСубконто)) Тогда 
		//		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СвойстваСчетаКт.ВидСубконто1, КорСубконто);
		//	ИначеЕсли СвойстваСчетаКт.ВидСубконто2ТипЗначения <> Неопределено
		//		И СвойстваСчетаКт.ВидСубконто2ТипЗначения.СодержитТип(ТипЗнч(КорСубконто)) Тогда 
		//		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СвойстваСчетаКт.ВидСубконто2, КорСубконто);
		//	ИначеЕсли СвойстваСчетаКт.ВидСубконто3ТипЗначения <> Неопределено
		//		И СвойстваСчетаКт.ВидСубконто3ТипЗначения.СодержитТип(ТипЗнч(КорСубконто)) Тогда 
		//		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СвойстваСчетаКт.ВидСубконто3, КорСубконто);
		//	КонецЕсли;
		//КонецЦикла;
		
	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыОприходованиеТоваров(ТаблицаТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТовары

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"       // <Число> - номер строки в списке
	+ "Номенклатура,"      // <СправочникСсылка.Номенклатура> - оприходуемый товар
	+ "Сумма,"             // <Число,15,2> - сумма в валюте регламентированного учета
	+ "Количество,"        // <Число,15,3> - количество оприходуемого товара
	+ "СчетУчета,"         // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который приходуется товар
	+ "КорСчет,"           // <ПланСчетовСсылка.Хозрасчетный> - счет учета, с которого поступает товар
	+ "КорСубконто1,"      // <Характеристика.ВидыСубконтоХозрасчетные> - значение субконто счета, с которого поступает товар
	+ "КорСубконто2,"      // <Характеристика.ВидыСубконтоХозрасчетные> - значение субконто счета, с которого поступает товар
	+ "КорСубконто3,"      // <Характеристика.ВидыСубконтоХозрасчетные> - значение субконто счета, с которого поступает товар
	+ "Содержание";        // <Строка,150> - содержание проводки

	Параметры.Вставить("ТаблицаТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                   // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                        // <Дата> - период движений - дата документа
	+ "Организация,"                   // <СправочникСсылка.Организация> - организация, в которую приходуется товар
	+ "Склад,"                         // <СправочникСсылка.Склады> - склад, на который приходуется товар
	+ "КорректироватьНУ";              // <Булево> - Истина, если стоит признак ПриходСОсновногоСредства

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

#КонецОбласти

#Область ГотоваяПродукция

Процедура СформироватьДвиженияГотоваяПродукция(ТаблицаГотоваяПродукция, ТаблицаРеквизитыГП, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыГотоваяПродукция(ТаблицаГотоваяПродукция, ТаблицаРеквизитыГП);

	Если Параметры.ТаблицаРеквизитыГП.Количество() = 0
		ИЛИ Параметры.ТаблицаГотоваяПродукция.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.ТаблицаРеквизитыГП[0];
		
	ВидСубконтоПартии = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;
	
	СвойстваСчетаКеш = Новый Соответствие;

	Для Каждого СтрокаПартии Из Параметры.ТаблицаГотоваяПродукция Цикл

		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание = Реквизиты.Содержание;

		Проводка.СчетДт	= СтрокаПартии.СчетУчета;

		СвойстваСчета = СвойстваСчетаКеш[Проводка.СчетДт];
		Если СвойстваСчета = Неопределено Тогда   // первое использование счета
			СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			СвойстваСчетаКеш.Вставить(Проводка.СчетДт, СвойстваСчета);
		КонецЕсли;
		
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СвойстваСчета.ВидСубконто1, СтрокаПартии.Номенклатура);
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СвойстваСчета.ВидСубконто2, СтрокаПартии.Склад);
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СвойстваСчета.ВидСубконто3, СтрокаПартии.Заказ);

		Если СвойстваСчета.Количественный Тогда
			Проводка.КоличествоДт = СтрокаПартии.Количество;
		КонецЕсли;

		Проводка.СчетКт = СтрокаПартии.КорСчет;
		
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаПартии.Номенклатура);
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии", СтрокаПартии.Заказ);
		
		Проводка.Сумма = СтрокаПартии.Сумма;
	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыГотоваяПродукция(ТаблицаГотоваяПродукция, ТаблицаРеквизитыГП)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТовары

	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"      // <СправочникСсылка.Номенклатура> - готовая продукция
	+ "Склад,"             // <СправочникСсылка.Склады> - склад, на который приходуется готовая продукция
	+ "Заказ,"             // <ДокументСсылка.ЗаказНаПроизводство> - выполненный заказ
	+ "Сумма,"             // <Число,15,2> - сумма в валюте регламентированного учета
	+ "Количество,"        // <Число,15,3> - количество готовой продукции
	+ "СчетУчета,"         // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который приходуется готовая продукция
	+ "КорСчет";           // <ПланСчетовСсылка.Хозрасчетный> - счет учета, с которого поступает готовая продукция

	Параметры.Вставить("ТаблицаГотоваяПродукция",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаГотоваяПродукция, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"        // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"             // <Дата> - период движений - дата документа
	+ "Организация,"        // <СправочникСсылка.Организация> - организация, в которую приходуется товар
	+ "Содержание";        	// <Строка,150> - содержание проводки

	Параметры.Вставить("ТаблицаРеквизитыГП",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизитыГП, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

#КонецОбласти

#Область ПоступлениеМатериаловВПереработку

Процедура СформироватьДвиженияПоступлениеМатериаловВПереработку(ТаблицаТовары, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПоступлениеМатериаловВПереработку(ТаблицаТовары, ТаблицаРеквизиты);

	Если Параметры.ТаблицаТовары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаТовары Цикл

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СокрЛП(СтрокаТаблицы.Содержание);

		Проводка.СчетДт = СтрокаТаблицы.СчетУчета;
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", Реквизиты.Склад);
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Реквизиты.Контрагент);

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

		Если СвойстваСчетаДт.Количественный Тогда
			Проводка.КоличествоДт = СтрокаТаблицы.Количество;
		КонецЕсли;

		Проводка.Сумма = СтрокаТаблицы.Сумма;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыПоступлениеМатериаловВПереработку(ТаблицаТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТовары

	СписокОбязательныхКолонок = ""
	+ "Номенклатура," 	// <СправочникСсылка.Номенклатура> - номенклатура поступающих материалов
	+ "Сумма,"     		// <Число,15,2> - сумма в валюте регламентированного учета
	+ "Количество,"   	// <Число,15,3> - количество поступающих материалов
	+ "СчетУчета,"    	// <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который приходуются материалы
	+ "Содержание";   	// <Строка,150> - содержание проводки

	Параметры.Вставить("ТаблицаТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"   // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"        // <Дата> - период движений - дата документа
	+ "Организация,"   // <СправочникСсылка.Организация> - организация, в которую поступают материалы
	+ "Склад,"         // <СправочникСсылка.Склады> - склад, на который поступают материалы
	+ "Контрагент";    // <СправочникСсылка.Контрагенты> - заказчик, от которого поступают материалы в переработку

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

#КонецОбласти

#Область Комплектация

Функция ПодготовитьТаблицуКомплектующихКомплектация(ТаблицаСписанныеТовары, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыТаблицыКомплектующихКомплектация(ТаблицаСписанныеТовары, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	ТаблицаКомплектующие = Параметры.ТаблицаСписанныеТовары.Скопировать();
	ТаблицаКомплектующие.Колонки.Добавить("КоличествоДт", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));

	Если ТаблицаКомплектующие.Количество() = 0 Тогда
		Возврат ТаблицаКомплектующие;
	КонецЕсли;

	// Распределим количество комплектов по таблице списания
	КоличествоОсталосьПогасить = ТаблицаКомплектующие.Итог("Количество");

	КоличествоОсталосьПогаситьДт = Реквизиты.КоличествоКомплектов;

	Для Каждого СтрокаКомплектующей Из ТаблицаКомплектующие Цикл

		Если СтрокаКомплектующей.Количество = КоличествоОсталосьПогасить Тогда
			СтрокаКомплектующей.КоличествоДт = КоличествоОсталосьПогаситьДт;
		Иначе
			СтрокаКомплектующей.КоличествоДт = КоличествоОсталосьПогаситьДт * СтрокаКомплектующей.Количество
			/ КоличествоОсталосьПогасить;
		КонецЕсли;
		КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - СтрокаКомплектующей.Количество;
		КоличествоОсталосьПогаситьДт = КоличествоОсталосьПогаситьДт - СтрокаКомплектующей.КоличествоДт;

	КонецЦикла;

	Возврат ТаблицаКомплектующие;

КонецФункции

Функция ПодготовитьПараметрыТаблицыКомплектующихКомплектация(ТаблицаСписанныеТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаСписанныеТовары

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"        // <Строка,0> - имя списка в документе
	+ "СинонимСписка,"    // <Строка,0> - синоним списка
	+ "НомерСтроки,"      // <Число> - номер строки в списке
	+ "СчетУчета,"        // <ПланСчетовСсылка.Хозрасчетный> - счет учета, с которого списывается номенклатура
	+ "Номенклатура,"     // <СправочникСсылка.Номенклатура> - списываемая номенклатура
	+ "Склад,"            // <СправочникСсылка.Склад> - склад, с которого списывается номенклатура
	+ "Партия,"           // <ДокументСсылка.*> - документ поступления номенклатуры (партия)
	+ "Себестоимость,"    // <Число,15,2> - сумма списываемой номенклатуры, указанная в документе списания
	+ "Количество,"       // <Число,15,3> - количество списываемой номенклатуры
	+ "КорСчетСписания,"  // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который списывается номенклатура
	+ "КорСубконто1,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто2,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто3,"     // - значение субконто счета, на который списывается номенклатура
	+ "СуммаСписания";  // <Число,15,2> - сумма временных разниц (ПБУ 18/02) в стоимости списываемой номенклатуры, определенной по данным остатков

	Параметры.Вставить("ТаблицаСписанныеТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСписанныеТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "КоличествоКомплектов"; // <Число, 15, 3> - количество комплектов, которое должно получиться в результате
		// комплектации

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьТаблицуКомплектующихРазукомплектация(ТаблицаТовары, ТаблицаСписанныеТовары, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыТаблицыКомплектующихРазукомплектация(ТаблицаТовары, ТаблицаСписанныеТовары);

	ТаблицаКомплектующие = Параметры.ТаблицаСписанныеТовары.Скопировать();
	ТаблицаКомплектующие.Колонки.Добавить("КоличествоДт", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));

	Если ТаблицаКомплектующие.Количество() = 0 Тогда
		Возврат ТаблицаКомплектующие;
	КонецЕсли;

	// Распределим количества комплектующих по таблице спсисания
	ТекущийНомерСтроки = -1;
	КоличествоОсталосьПогасить = 0;
	КоличествоОсталосьПогаситьДт = 0;
	Для Каждого СтрокаКомплектующей Из ТаблицаКомплектующие Цикл
		Если СтрокаКомплектующей.НомерСтроки <> ТекущийНомерСтроки Тогда
			ТекущийНомерСтроки = СтрокаКомплектующей.НомерСтроки;
			СтрокаТаблицыТовары = ТаблицаТовары[ТекущийНомерСтроки - 1];
			КоличествоОсталосьПогасить = СтрокаТаблицыТовары.Количество;
			КоличествоОсталосьПогаситьДт = СтрокаТаблицыТовары.КоличествоКомплектующих;
		КонецЕсли;

		Если СтрокаКомплектующей.Количество = КоличествоОсталосьПогасить Тогда
			СтрокаКомплектующей.КоличествоДт = КоличествоОсталосьПогаситьДт;
		Иначе
			СтрокаКомплектующей.КоличествоДт = КоличествоОсталосьПогаситьДт * СтрокаКомплектующей.Количество
				/ КоличествоОсталосьПогасить;
		КонецЕсли;

		КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - СтрокаКомплектующей.Количество;
		КоличествоОсталосьПогаситьДт = КоличествоОсталосьПогаситьДт - СтрокаКомплектующей.КоличествоДт;
	КонецЦикла;

	Возврат ТаблицаКомплектующие;

КонецФункции

Функция ПодготовитьПараметрыТаблицыКомплектующихРазукомплектация(ТаблицаТовары, ТаблицаСписанныеТовары)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТовары

	СписокОбязательныхКолонок = ""
	+ "Количество,"               // <Число,15,3> - количество исходных комплектов
	+ "КоличествоКомплектующих";  // <Число,15,2> - количество комплектующих получаемых в результате разукомплектации

	Параметры.Вставить("ТаблицаТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.ТаблицаСписанныеТовары

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"        // <Строка,0> - имя списка в документе
	+ "СинонимСписка,"    // <Строка,0> - синоним списка
	+ "НомерСтроки,"      // <Число> - номер строки в списке
	+ "СчетУчета,"        // <ПланСчетовСсылка.Хозрасчетный> - счет учета, с которого списывается номенклатура
	+ "Номенклатура,"     // <СправочникСсылка.Номенклатура> - списываемая номенклатура
	+ "Склад,"            // <СправочникСсылка.Склад> - склад, с которого списывается номенклатура
	+ "Партия,"           // <ДокументСсылка.*> - документ поступления номенклатуры (партия)
	+ "Себестоимость,"    // <Число,15,2> - сумма списываемой номенклатуры, указанная в документе списания
	+ "Количество,"       // <Число,15,3> - количество списываемой номенклатуры
	+ "КорСчетСписания,"  // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который списывается номенклатура
	+ "КорСубконто1,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто2,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто3,"     // - значение субконто счета, на который списывается номенклатура
	+ "СуммаСписания";  // <Число,15,2> - сумма временных разниц (ПБУ 18/02) в стоимости списываемой номенклатуры, определенной по данным остатков

	Параметры.Вставить("ТаблицаСписанныеТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСписанныеТовары, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияКомплектация(ТаблицаКомплектующие, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыКомплектация(ТаблицаКомплектующие, ТаблицаРеквизиты);

	Если Параметры.ТаблицаКомплектующие.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	СпособОценкиТМЗ = БухгалтерскийУчетСервер.СпособОценкиТМЗ(Реквизиты.Период, Реквизиты.Организация);
	ВедетсяУчетПоПартиям = СпособОценкиТМЗ <> Перечисления.СпособыОценки.ПоСредней;

	Для каждого СтрокаПартии Из Параметры.ТаблицаКомплектующие Цикл

		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СокрЛП(Реквизиты.Содержание);

		Проводка.СчетКт = СтрокаПартии.СчетУчета;
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаПартии.Номенклатура);
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", СтрокаПартии.Склад);
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии", СтрокаПартии.Партия);
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Реквизиты.Контрагент);

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

		Если СвойстваСчетаКт.Количественный Тогда
			Проводка.КоличествоКт = СтрокаПартии.Количество;
		КонецЕсли;

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаПартии.КорСчетСписания);

		Если ВедетсяУчетПоПартиям Тогда
			Проводка.СубконтоДт.Партии = СтрокаПартии.Партия;
		КонецЕсли;

		Проводка.СчетДт = СтрокаПартии.КорСчетСписания;
		Для НомерСубконто = 1 По 3 Цикл
			ВидСубконто = СтрокаПартии["ВидКорСубконто" + НомерСубконто];
			Если НЕ ВедетсяУчетПоПартиям И ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии Тогда
				Продолжить;
			КонецЕсли;
			БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
				ВидСубконто, СтрокаПартии["КорСубконто" + НомерСубконто]);
		КонецЦикла;

		Если СвойстваСчетаДт.Количественный Тогда
			Проводка.КоличествоДт = СтрокаПартии.КоличествоДт;
		КонецЕсли;

		Проводка.Сумма = СтрокаПартии.СуммаСписания;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыКомплектация(ТаблицаКомплектующие, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаКомплектующие

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"        // <Строка,0> - имя списка в документе
	+ "СинонимСписка,"    // <Строка,0> - синоним списка
	+ "НомерСтроки,"      // <Число> - номер строки в списке
	+ "СчетУчета,"        // <ПланСчетовСсылка.Хозрасчетный> - счет учета, с которого списывается номенклатура
	+ "Номенклатура,"     // <СправочникСсылка.Номенклатура> - списываемая номенклатура
	+ "Склад,"            // <СправочникСсылка.Склад> - склад, с которого списывается номенклатура
	+ "Партия,"           // <ДокументСсылка.*> - документ поступления номенклатуры (партия)
	+ "Себестоимость,"    // <Число,15,2> - сумма списываемой номенклатуры, указанная в документе списания
	+ "Количество,"       // <Число,15,3> - количество списываемой номенклатуры
	+ "КоличествоДт,"     // <Число,15,3> - количество получаемой номенклатуры
	+ "КорСчетСписания,"  // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который списывается номенклатура
	+ "КорСубконто1,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто2,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто3,"     // - значение субконто счета, на который списывается номенклатура
	+ "СуммаСписания";  // <Число,15,2> - сумма временных разниц (ПБУ 18/02) в стоимости списываемой номенклатуры, определенной по данным остатков

	Параметры.Вставить("ТаблицаКомплектующие",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаКомплектующие, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата> - период движений - дата документа
	+ "Организация," // <СправочникСсылка.Организации>
	+ "Контрагент,"  // <СправочникСсылка.Контрагенты>
	+ "Содержание";  // <Строка,150>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПустуюТаблицуСписанныеТовары() Экспорт
	
	ТаблицаСписанныеТовары = Новый ТаблицаЗначений;
	ТаблицаСписанныеТовары.Колонки.Добавить("ИмяСписка",		ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаСписанныеТовары.Колонки.Добавить("СинонимСписка",	ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаСписанныеТовары.Колонки.Добавить("Период",			ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаСписанныеТовары.Колонки.Добавить("НомерСтроки",		ОбщегоНазначения.ОписаниеТипаЧисло(5, 0));
	ТаблицаСписанныеТовары.Колонки.Добавить("СчетУчета",		Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаСписанныеТовары.Колонки.Добавить("Номенклатура",		Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаСписанныеТовары.Колонки.Добавить("Склад",			Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаСписанныеТовары.Колонки.Добавить("Партия",			Документы.ТипВсеСсылки());
	ТаблицаСписанныеТовары.Колонки.Добавить("Сделка",			Документы.ТипВсеСсылки());
	ТаблицаСписанныеТовары.Колонки.Добавить("Себестоимость",	ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаСписанныеТовары.Колонки.Добавить("Количество",		ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ТаблицаСписанныеТовары.Колонки.Добавить("КорСчетСписания",	Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаСписанныеТовары.Колонки.Добавить("КорСубконто1");
	ТаблицаСписанныеТовары.Колонки.Добавить("КорСубконто2");
	ТаблицаСписанныеТовары.Колонки.Добавить("КорСубконто3");
	ТаблицаСписанныеТовары.Колонки.Добавить("СуммаСписания",	ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаСписанныеТовары.Колонки.Добавить("Содержание",		ОбщегоНазначения.ОписаниеТипаСтрока(0));

	ТаблицаСписанныеТовары.Колонки.Добавить("КлючСтроки",		ОбщегоНазначения.ОписаниеТипаЧисло(5));
	
	Возврат ТаблицаСписанныеТовары;
	
КонецФункции

Функция ПолучитьОстаткиТоваров(МоментВремени, Организация, ТаблицаСписания, ТаблицаВозвраты = Неопределено) Экспорт
	
	МассивСчетовУчета = РазличныеЗначенияКолонкиТаблицы(ТаблицаСписания, "СчетУчета");
	
	// Наложение блокировки на регистр Хозрасчетный для получения остатков
	Если ТранзакцияАктивна() И ОбщегоНазначенияБПВызовСервераПовтИсп.ИспользоватьУправляемыеБлокировки() Тогда
		Блокировка = Новый БлокировкаДанных;
		ТаблицаСписания.Индексы.Добавить("СчетУчета");
		
		Для каждого СчетУчета Из МассивСчетовУчета Цикл
			// Отдельная блокировка по каждому счету учета
			СуммовойУчетПоСкладам = БухгалтерскийУчетСервер.ВедетсяСуммовойУчетПоСкладам(СчетУчета);
			//Если СуммовойУчетПоСкладам Тогда
			//	ТаблицаСписанияПоСчету = ТаблицаСписания.Скопировать(Новый Структура("СчетУчета", СчетУчета), "Номенклатура,Склад");
			//	ТаблицаСписанияПоСчету.Свернуть("Номенклатура,Склад");
			//Иначе
			//	ТаблицаСписанияПоСчету = ТаблицаСписания.Скопировать(Новый Структура("СчетУчета", СчетУчета), "Номенклатура");
			//	ТаблицаСписанияПоСчету.Свернуть("Номенклатура");
			//КонецЕсли;
			Если СуммовойУчетПоСкладам Тогда
				Если БухгалтерскийУчетСервер.НаСчетеВедетсяУчетПоКонтрагентам(СчетУчета) Тогда
					ТаблицаСписанияПоСчету = ТаблицаСписания.Скопировать(Новый Структура("СчетУчета", СчетУчета), "Номенклатура,Контрагент,Склад");
					ТаблицаСписанияПоСчету.Свернуть("Номенклатура,Контрагент,Склад");
				Иначе
					ТаблицаСписанияПоСчету = ТаблицаСписания.Скопировать(Новый Структура("СчетУчета", СчетУчета), "Номенклатура,Склад");
					ТаблицаСписанияПоСчету.Свернуть("Номенклатура,Склад");
				КонецЕсли;
			Иначе
				Если БухгалтерскийУчетСервер.НаСчетеВедетсяУчетПоКонтрагентам(СчетУчета) Тогда
					ТаблицаСписанияПоСчету = ТаблицаСписания.Скопировать(Новый Структура("СчетУчета", СчетУчета), "Номенклатура,Контрагент");
					ТаблицаСписанияПоСчету.Свернуть("Номенклатура,Контрагент");
				Иначе
					ТаблицаСписанияПоСчету = ТаблицаСписания.Скопировать(Новый Структура("СчетУчета", СчетУчета), "Номенклатура");
					ТаблицаСписанияПоСчету.Свернуть("Номенклатура");
				КонецЕсли;
			КонецЕсли;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Хозрасчетный");
			ЭлементБлокировки.УстановитьЗначение("Период",      Новый Диапазон(, МоментВремени.Дата));
			ЭлементБлокировки.УстановитьЗначение("Организация", Организация);
			ЭлементБлокировки.УстановитьЗначение("Счет",        СчетУчета);
			СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетУчета);
			ЭлементБлокировки.ИсточникДанных = ТаблицаСписанияПоСчету;
			Для Ном = 1 По СвойстваСчета.КоличествоСубконто Цикл
				Если СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура
					И НЕ СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыНаХранении Тогда // Обход ошибки при наложении блокировки
					ЭлементБлокировки.ИспользоватьИзИсточникаДанных(
					ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура, "Номенклатура");
				ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады 
					И СуммовойУчетПоСкладам Тогда
					// Если нет суммового учета по складам - суммы получаются запросом без отбора по складам,
					// поэтому блокировать склады не нужно
					ЭлементБлокировки.ИспользоватьИзИсточникаДанных(
						ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "Склад");
				ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты Тогда
					ЭлементБлокировки.ИспользоватьИзИсточникаДанных(
					ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты, "Контрагент");
				КонецЕсли;	
			КонецЦикла;
			
		КонецЦикла;
		
		Блокировка.Заблокировать();
	КонецЕсли;
	
	// Получение остатков номенклатуры
	МассивНоменклатуры = РазличныеЗначенияКолонкиТаблицы(ТаблицаСписания, "Номенклатура");
	МассивСкладов      = РазличныеЗначенияКолонкиТаблицы(ТаблицаСписания, "Склад");
	МассивКонтрагентов = РазличныеЗначенияКолонкиТаблицы(ТаблицаСписания, "Контрагент");
	
	// Сортировка счетов учета
	СчетаУчетаН   = Новый Массив; // счета с суммовым учетом только по номенклатуре
	СчетаУчетаНС  = Новый Массив; // счета с суммовым учетом по номенклатуре и складам
	СчетаУчетаНП  = Новый Массив; // счета с суммовым учетом по номенклатуре и партиям
	СчетаУчетаНПС = Новый Массив; // счета с суммовым учетом по номенклатуре, складам и партиям
	СчетаУчетаНК  = Новый Массив; // счета с суммовым учетом по контрагентам, и номенклатуре
	СчетаУчетаНПК = Новый Массив; // счета с суммовым учетом по контрагентам, номенклатуре и партиям
	СчетаУчетаНКС = Новый Массив; // счета с суммовым учетом по контрагентам, номенклатуре и складам
	
	СчетаУчетаН_Склад  = Новый Массив; // счета с суммовым учетом только по номенклатуре и количественным по складу
	СчетаУчетаНП_Склад = Новый Массив; // счета с суммовым учетом по номенклатуре и партиям и количественным по складу
	СчетаУчетаНК_Склад = Новый Массив; // счета с суммовым учетом по номенклатуре и контрагентам и количественным по складу
	
	СортировкаСчетовУчета(МассивСчетовУчета,
	                      СчетаУчетаН,
	                      СчетаУчетаНС,
	                      СчетаУчетаНП,
	                      СчетаУчетаНПС,
	                      СчетаУчетаНК,
	                      СчетаУчетаНПК,
	                      СчетаУчетаНКС,
	                      СчетаУчетаН_Склад,
	                      СчетаУчетаНП_Склад,
	                      СчетаУчетаНК_Склад);

	ВидыСубконтоН = Новый Массив;
	ВидысубконтоН.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);

	ВидыСубконтоНС = Новый Массив;
	ВидысубконтоНС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидысубконтоНС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);

	ВидыСубконтоНП = Новый Массив;
	ВидысубконтоНП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидысубконтоНП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);

	ВидыСубконтоНПС = Новый Массив;
	ВидыСубконтоНПС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоНПС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	ВидыСубконтоНПС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);

	ВидыСубконтоНК = Новый Массив;
	ВидыСубконтоНК.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоНК.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);

	ВидыСубконтоНПК = Новый Массив;
	ВидыСубконтоНПК.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоНПК.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	ВидыСубконтоНПК.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	
	ВидыСубконтоНКС = Новый Массив;
	ВидыСубконтоНКС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоНКС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоНКС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментВремени",      МоментВремени);
	Запрос.УстановитьПараметр("Организация",        Организация);
	Запрос.УстановитьПараметр("МассивКонтрагентов", МассивКонтрагентов);
	Запрос.УстановитьПараметр("МассивСкладов",      МассивСкладов);
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	Запрос.УстановитьПараметр("СчетаУчетаН",        СчетаУчетаН);
	Запрос.УстановитьПараметр("СчетаУчетаНС",       СчетаУчетаНС);
	Запрос.УстановитьПараметр("СчетаУчетаНП",       СчетаУчетаНП);
	Запрос.УстановитьПараметр("СчетаУчетаНПС",      СчетаУчетаНПС);
	Запрос.УстановитьПараметр("СчетаУчетаН_Склад",  СчетаУчетаН_Склад);
	Запрос.УстановитьПараметр("СчетаУчетаНП_Склад", СчетаУчетаНП_Склад);
	Запрос.УстановитьПараметр("СчетаУчетаНК",       СчетаУчетаНК);
	Запрос.УстановитьПараметр("СчетаУчетаНПК",      СчетаУчетаНПК);
	Запрос.УстановитьПараметр("СчетаУчетаНКС",      СчетаУчетаНКС);
	Запрос.УстановитьПараметр("СчетаУчетаН_Склад",  СчетаУчетаН_Склад);
	Запрос.УстановитьПараметр("СчетаУчетаНП_Склад", СчетаУчетаНП_Склад);
	Запрос.УстановитьПараметр("СчетаУчетаНК_Склад", СчетаУчетаНК_Склад);
	Запрос.УстановитьПараметр("ВидысубконтоН",      ВидысубконтоН);
	Запрос.УстановитьПараметр("ВидысубконтоНС",     ВидысубконтоНС);
	Запрос.УстановитьПараметр("ВидысубконтоНП",     ВидысубконтоНП);
	Запрос.УстановитьПараметр("ВидыСубконтоНПС",    ВидыСубконтоНПС);
	Запрос.УстановитьПараметр("ВидыСубконтоНК",     ВидыСубконтоНК);
	Запрос.УстановитьПараметр("ВидыСубконтоНПК",    ВидыСубконтоНПК);
	Запрос.УстановитьПараметр("ВидыСубконтоНКС",    ВидыСубконтоНКС);
	Запрос.УстановитьПараметр("ПустойСклад",        Справочники.Склады.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяПартия",       Документы.ПоступлениеТоваровУслуг.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойКонтрагент",   Справочники.Контрагенты.ПустаяСсылка());
	
	ТекстСуммыКоличественныхСкладов = "";
	Текст = "";
	
	// Если не ведется суммовой учет по складам, соберем остатки без учета складов	
	Если СчетаУчетаН_Склад.Количество() > 0 Тогда
		
		ТекстСуммыКоличественныхСкладов = ТекстСуммыКоличественныхСкладов + 
			"ВЫБРАТЬ
			|	Остатки.Счет КАК СчетУчета,
			|	Остатки.Субконто1 КАК Номенклатура,
			|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
			|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Стоимость
			|ПОМЕСТИТЬ ТаблицаСчетаУчетаН
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|			&МоментВремени,
			|			Счет В (&СчетаУчетаН),
			|			&ВидыСубконтоН,
			|				Субконто1 В (&МассивНоменклатуры)
			|				И Организация = &Организация) КАК Остатки
			|
			|СГРУППИРОВАТЬ ПО
			|	Остатки.Счет,
			|	Остатки.Субконто1
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	СчетУчета,
			|	Номенклатура
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОстаткиПоСкладам.Счет КАК СчетУчета,
			|	ОстаткиПоСкладам.Субконто1 КАК Номенклатура,
			|	ЕСТЬNULL(ОстаткиПоСкладам.Субконто2, &ПустойСклад) КАК Склад,
			|	СУММА(ЕСТЬNULL(ОстаткиПоСкладам.КоличествоОстатокДт, 0)) КАК КоличествоОстатокДт
			|ПОМЕСТИТЬ ТаблицаСчетаУчетаН_Склад
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|			&МоментВремени,
			|			Счет В (&СчетаУчетаН_Склад),
			|			&ВидыСубконтоНС,
			|				Субконто1 В (&МассивНоменклатуры)
			|				И Субконто2 В (&МассивСкладов)
			|				И Организация = &Организация) КАК ОстаткиПоСкладам
			|
			|СГРУППИРОВАТЬ ПО
			|	ОстаткиПоСкладам.Счет,
			|	ОстаткиПоСкладам.Субконто1,
			|	ОстаткиПоСкладам.Субконто2
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	СчетУчета,
			|	Номенклатура;";

	КонецЕсли;
	
	Если СчетаУчетаНП_Склад.Количество() > 0 Тогда
		
		ТекстСуммыКоличественныхСкладов = ТекстСуммыКоличественныхСкладов + 
			"ВЫБРАТЬ
			|	Остатки.Счет КАК СчетУчета,
			|	Остатки.Субконто1 КАК Номенклатура,
			|	ЕСТЬNULL(Остатки.Субконто2, &ПустаяПартия) КАК ДокументОприходования,
			|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
			|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Стоимость
			|ПОМЕСТИТЬ ТаблицаСчетаУчетаНП
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|			&МоментВремени,
			|			Счет В (&СчетаУчетаНП),
			|			&ВидыСубконтоНП,
			|				Субконто1 В (&МассивНоменклатуры)
			|				И Организация = &Организация) КАК Остатки
			|
			|СГРУППИРОВАТЬ ПО
			|	Остатки.Счет,
			|	Остатки.Субконто1,
			|	Остатки.Субконто2
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	СчетУчета,
			|	Номенклатура,
			|	ДокументОприходования
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОстаткиПоСкладам.Счет КАК СчетУчета,
			|	ОстаткиПоСкладам.Субконто1 КАК Номенклатура,
			|	ЕСТЬNULL(ОстаткиПоСкладам.Субконто2, &ПустаяПартия) КАК ДокументОприходования,
			|	ЕСТЬNULL(ОстаткиПоСкладам.Субконто3, &ПустойСклад) КАК Склад,
			|	СУММА(ЕСТЬNULL(ОстаткиПоСкладам.КоличествоОстатокДт, 0)) КАК КоличествоОстатокДт
			|ПОМЕСТИТЬ ТаблицаСчетаУчетаНП_Склад
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|			&МоментВремени,
			|			Счет В (&СчетаУчетаНП_Склад),
			|			&ВидыСубконтоНПС,
			|				Субконто1 В (&МассивНоменклатуры)
			|				И Субконто3 В (&МассивСкладов)
			|				И Организация = &Организация) КАК ОстаткиПоСкладам
			|
			|СГРУППИРОВАТЬ ПО
			|	ОстаткиПоСкладам.Счет,
			|	ОстаткиПоСкладам.Субконто1,
			|	ОстаткиПоСкладам.Субконто2,
			|	ОстаткиПоСкладам.Субконто3
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	СчетУчета,
			|	Номенклатура,
			|	ДокументОприходования;";
		
	КонецЕсли;
	
	Если СчетаУчетаНК_Склад.Количество() > 0 Тогда
		
		ТекстСуммыКоличественныхСкладов = ТекстСуммыКоличественныхСкладов + "
		|ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	ЕСТЬNULL(Остатки.Субконто2, &ПустойКонтрагент) КАК Контрагент,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Стоимость
		|ПОМЕСТИТЬ ТаблицаСчетаУчетаНК
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&МоментВремени,
		|			Счет В (&СчетаУчетаНК),
		|			&ВидыСубконтоНК,
		|			Субконто1 В (&МассивНоменклатуры)
		|				И Субконто2 В (&МассивКонтрагентов)
		|				И Организация = &Организация) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Субконто1,
		|	Остатки.Субконто2
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетУчета,
		|	Номенклатура,
		|	Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	ОстаткиПоСкладам.Счет КАК СчетУчета,
		|	ОстаткиПоСкладам.Субконто1 КАК Номенклатура,
		|	ЕСТЬNULL(ОстаткиПоСкладам.Субконто2, &ПустойКонтрагент) КАК Контрагент,
		|	ЕСТЬNULL(ОстаткиПоСкладам.Субконто3, &ПустойСклад) КАК Склад,
		|	СУММА(ЕСТЬNULL(ОстаткиПоСкладам.КоличествоОстатокДт, 0)) КАК КоличествоОстатокДт
		|ПОМЕСТИТЬ ТаблицаСчетаУчетаНК_Склад
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&МоментВремени,
		|			Счет В (&СчетаУчетаНК_Склад),
		|			&ВидыСубконтоНКС,
		|			Субконто1 В (&МассивНоменклатуры)
		|				И Субконто2 В (&МассивКонтрагентов)
		|				И Субконто3 В (&МассивСкладов)
		|				И Организация = &Организация) КАК ОстаткиПоСкладам
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиПоСкладам.Счет,
		|	ОстаткиПоСкладам.Субконто1,
		|	ОстаткиПоСкладам.Субконто2,
		|	ОстаткиПоСкладам.Субконто3
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетУчета,
		|	Номенклатура,
		|	Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";

	КонецЕсли;
	
	Если ТаблицаВозвраты <> Неопределено И ТаблицаВозвраты.Количество() > 0 Тогда
		
		Запрос.УстановитьПараметр("ТаблицаВозвраты",    ТаблицаВозвраты);
	
		Текст = Текст + 
			"ВЫБРАТЬ
			|	ТаблицаВозвраты.Партия,
			|	ТаблицаВозвраты.Склад,
			|	ТаблицаВозвраты.Номенклатура,
			|	&Организация,
			|	ТаблицаВозвраты.СчетУчета,
			|	ТаблицаВозвраты.Количество КАК Количество,
			|	ТаблицаВозвраты.СуммаСписания КАК СуммаСписания
			|ПОМЕСТИТЬ ТаблицаВозвраты
			|ИЗ
			|	&ТаблицаВозвраты КАК ТаблицаВозвраты
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаВозвраты.СчетУчета КАК СчетУчета,
			|	ТаблицаВозвраты.Номенклатура КАК Номенклатура,
			|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
			|	ТаблицаВозвраты.Партия КАК ДокументОприходования,
			|	ТаблицаВозвраты.Склад КАК Склад,
			|	ТаблицаВозвраты.Организация КАК Организация,
			|	СУММА(ТаблицаВозвраты.Количество) КАК КоличествоПоСкладу,
			|	СУММА(ТаблицаВозвраты.Количество) КАК Количество,
			|	СУММА(ТаблицаВозвраты.СуммаСписания) КАК Стоимость
			|ИЗ
			|	ТаблицаВозвраты КАК ТаблицаВозвраты
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаВозвраты.СчетУчета,
			|	ТаблицаВозвраты.Номенклатура,
			|	ТаблицаВозвраты.Склад,
			|	ТаблицаВозвраты.Партия,
			|	ТаблицаВозвраты.Организация";
	КонецЕсли;
	
	Если СчетаУчетаН.Количество() > 0 И СчетаУчетаН_Склад.Количество() = 0 Тогда
		
		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + 
			"ВЫБРАТЬ
			|	Остатки.Счет КАК СчетУчета,
			|	Остатки.Субконто1 КАК Номенклатура,
			|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
			|	&ПустаяПартия КАК ДокументОприходования,
			|	&ПустойСклад КАК Склад,
			|	Остатки.Организация КАК Организация,
			|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
			|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
			|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Стоимость
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|			&МоментВремени,
			|			Счет В (&СчетаУчетаН),
			|			&ВидыСубконтоН,
			|				Субконто1 В (&МассивНоменклатуры)
			|				И Организация = &Организация) КАК Остатки
			|
			|СГРУППИРОВАТЬ ПО
			|	Остатки.Счет,
			|	Остатки.Субконто1,
			|	Остатки.Организация";

	ИначеЕсли СчетаУчетаН.Количество() > 0 Тогда
		
		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст +
			"ВЫБРАТЬ
			|	ОстаткиПоСкладам.СчетУчета,
			|	ОстаткиПоСкладам.Номенклатура,
			|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
			|	&ПустаяПартия КАК ДокументОприходования,
			|	ОстаткиПоСкладам.Склад,
			|	&Организация КАК Организация,
			|	СУММА(ЕСТЬNULL(ОстаткиПоСкладам.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
			|	СУММА(ЕСТЬNULL(СуммовыеОстатки.Количество, 0)) КАК Количество,
			|	СУММА(ЕСТЬNULL(СуммовыеОстатки.Стоимость, 0)) КАК Стоимость
			|ИЗ
			|	ТаблицаСчетаУчетаН_Склад КАК ОстаткиПоСкладам
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетаУчетаН КАК СуммовыеОстатки
			|		ПО ОстаткиПоСкладам.СчетУчета = СуммовыеОстатки.СчетУчета
			|			И ОстаткиПоСкладам.Номенклатура = СуммовыеОстатки.Номенклатура
			|
			|СГРУППИРОВАТЬ ПО
			|	ОстаткиПоСкладам.СчетУчета,
			|	ОстаткиПоСкладам.Номенклатура,
			|	ОстаткиПоСкладам.Склад";

	КонецЕсли;

	Если СчетаУчетаНС.Количество() > 0 Тогда

		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + 
			"ВЫБРАТЬ
			|	Остатки.Счет КАК СчетУчета,
			|	Остатки.Субконто1 КАК Номенклатура,
			|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
			|	&ПустаяПартия КАК ДокументОприходования,
			|	Остатки.Субконто2 КАК Склад,
			|	Остатки.Организация КАК Организация,
			|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
			|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
			|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Стоимость
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|			&МоментВремени,
			|			Счет В (&СчетаУчетаНС),
			|			&ВидыСубконтоНС,
			|				Субконто1 В (&МассивНоменклатуры)
			|				И Субконто2 В (&МассивСкладов)
			|				И Организация = &Организация) КАК Остатки
			|
			|СГРУППИРОВАТЬ ПО
			|	Остатки.Счет,
			|	Остатки.Субконто1,
			|	Остатки.Субконто2,
			|	Остатки.Организация";

	КонецЕсли;

	Если СчетаУчетаНП.Количество() > 0 И СчетаУчетаНП_Склад.Количество() =  0 Тогда

		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
		
		Текст = Текст + 
			"ВЫБРАТЬ
			|	Остатки.Счет КАК СчетУчета,
			|	Остатки.Субконто1 КАК Номенклатура,
			|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
			|	Остатки.Субконто2 КАК ДокументОприходования,
			|	&ПустойСклад КАК Склад,
			|	Остатки.Организация КАК Организация,
			|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
			|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
			|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Стоимость
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|			&МоментВремени,
			|			Счет В (&СчетаУчетаНП),
			|			&ВидыСубконтоНП,
			|				Субконто1 В (&МассивНоменклатуры)
			|				И Организация = &Организация) КАК Остатки
			|
			|СГРУППИРОВАТЬ ПО
			|	Остатки.Счет,
			|	Остатки.Субконто1,
			|	Остатки.Субконто2,
			|	Остатки.Организация";
		
	ИначеЕсли СчетаУчетаНП.Количество() > 0 Тогда
		//СчетаУчетаНП_Склад.Количество() >  0
		
		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + 
			"ВЫБРАТЬ
			|	ОстаткиПоСкладам.СчетУчета,
			|	ОстаткиПоСкладам.Номенклатура,
			|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
			|	ОстаткиПоСкладам.ДокументОприходования,
			|	ОстаткиПоСкладам.Склад,
			|	&Организация КАК Организация,
			|	СУММА(ЕСТЬNULL(ОстаткиПоСкладам.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
			|	СУММА(ЕСТЬNULL(СуммовыеОстатки.Количество, 0)) КАК Количество,
			|	СУММА(ЕСТЬNULL(СуммовыеОстатки.Стоимость, 0)) КАК Стоимость
			|ИЗ
			|	ТаблицаСчетаУчетаНП_Склад КАК ОстаткиПоСкладам
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетаУчетаНП КАК СуммовыеОстатки
			|		ПО ОстаткиПоСкладам.СчетУчета = СуммовыеОстатки.СчетУчета
			|			И ОстаткиПоСкладам.Номенклатура = СуммовыеОстатки.Номенклатура
			|			И ОстаткиПоСкладам.ДокументОприходования = СуммовыеОстатки.ДокументОприходования
			|
			|СГРУППИРОВАТЬ ПО
			|	ОстаткиПоСкладам.СчетУчета,
			|	ОстаткиПоСкладам.Номенклатура,
			|	ОстаткиПоСкладам.ДокументОприходования,
			|	ОстаткиПоСкладам.Склад";

	КонецЕсли;

	Если СчетаУчетаНПС.Количество() > 0 Тогда

		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + 
			"ВЫБРАТЬ
			|	Остатки.Счет КАК СчетУчета,
			|	Остатки.Субконто1 КАК Номенклатура,
			|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
			|	Остатки.Субконто2 КАК ДокументОприходования,
			|	Остатки.Субконто3 КАК Склад,
			|	Остатки.Организация КАК Организация,
			|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
			|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
			|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Стоимость
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|			&МоментВремени,
			|			Счет В (&СчетаУчетаНПС),
			|			&ВидыСубконтоНПС,
			|				Субконто1 В (&МассивНоменклатуры)
			|				И Субконто3 В (&МассивСкладов)
			|				И Организация = &Организация) КАК Остатки
			|
			|СГРУППИРОВАТЬ ПО
			|	Остатки.Счет,
			|	Остатки.Субконто1,
			|	Остатки.Субконто2,
			|	Остатки.Субконто3,
			|	Остатки.Организация";

	КонецЕсли;

	Если СчетаУчетаНК.Количество() > 0 И СчетаУчетаНК_Склад.Количество() = 0 Тогда // субкомиссия
		
		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
		
		Текст = Текст + "
		|ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
		|	&ПустаяПартия КАК ДокументОприходования,
		|	&ПустойСклад КАК Склад,
		|	Остатки.Организация КАК Организация,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Стоимость
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&МоментВремени,
		|			Счет В (&СчетаУчетаНК),
		|			&ВидыСубконтоНК,
		|			Субконто1 В (&МассивНоменклатуры)
		|				И Субконто2 В (&МассивКонтрагентов)
		|				И Организация = &Организация) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Субконто1,
		|	Остатки.Субконто2,
		|	Остатки.Организация";

	ИначеЕсли СчетаУчетаНК.Количество() > 0 Тогда
		//СчетаУчетаНК_Склад.Количество() > 0
		
		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + "
		|ВЫБРАТЬ
		|	ОстаткиПоСкладам.СчетУчета,
		|	ОстаткиПоСкладам.Номенклатура,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
		|	&ПустаяПартия КАК ДокументОприходования,
		|	ОстаткиПоСкладам.Склад,
		|	&Организация КАК Организация,
		|	СУММА(ЕСТЬNULL(ОстаткиПоСкладам.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
		|	СУММА(ЕСТЬNULL(СуммовыеОстатки.Количество, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(СуммовыеОстатки.Стоимость, 0)) КАК Стоимость
		|ИЗ
		|	ТаблицаСчетаУчетаНК_Склад КАК ОстаткиПоСкладам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетаУчетаНК КАК СуммовыеОстатки
		|		ПО ОстаткиПоСкладам.СчетУчета = СуммовыеОстатки.СчетУчета
		|			И ОстаткиПоСкладам.Номенклатура = СуммовыеОстатки.Номенклатура
		|			И ОстаткиПоСкладам.Контрагент = СуммовыеОстатки.Контрагент
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиПоСкладам.СчетУчета,
		|	ОстаткиПоСкладам.Номенклатура,
		|	ОстаткиПоСкладам.Контрагент,
		|	ОстаткиПоСкладам.Склад";

	КонецЕсли;
	
	Если СчетаУчетаНКС.Количество() > 0 Тогда // дав. сырье

		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + "
		|ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
		|	&ПустаяПартия КАК ДокументОприходования,
		|	Остатки.Субконто3 КАК Склад,
		|	Остатки.Организация КАК Организация,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Стоимость
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&МоментВремени,
		|			Счет В (&СчетаУчетаНКС),
		|			&ВидыСубконтоНКС,
		|				Субконто1 В (&МассивНоменклатуры)
		|				И Субконто2 В (&МассивКонтрагентов)
		|				И Субконто3 В (&МассивСкладов)
		|				И Организация = &Организация) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Субконто1,
		|	Остатки.Субконто2,
		|	Остатки.Субконто3,
		|	Остатки.Организация";

	КонецЕсли;
	
	Текст = ТекстСуммыКоличественныхСкладов + Текст;
	
	Запрос.Текст = Текст;

	Результат = Запрос.Выполнить().Выгрузить();

	Если СчетаУчетаНПС.Количество() + СчетаУчетаНП.Количество() <> 0 Тогда
		ОбщегоНазначенияБПВызовСервера.ДобавитьДатуДокументаКРезультатуЗапроса(Результат,"ДокументОприходования", "ДокументОприходованияДата");
		Результат.Сортировать("ДокументОприходованияДата, ДокументОприходования", Новый СравнениеЗначений);
	КонецЕсли;

	Результат.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(10,0));
	НомерСтроки = 1;
	Для каждого СтрокаРезультата Из Результат Цикл
		СтрокаРезультата.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;

	Возврат Результат;

КонецФункции 

Процедура СортировкаСчетовУчета(СчетаУчета,
	СчетаУчетаН,
	СчетаУчетаНС,
	СчетаУчетаНП,
	СчетаУчетаНПС,
	СчетаУчетаНК,
	СчетаУчетаНПК,
	СчетаУчетаНКС,
	СчетаУчетаН_Склад,
	СчетаУчетаНП_Склад,
	СчетаУчетаНК_Склад) Экспорт
	
	Для каждого Счет Из СчетаУчета Цикл
		
		НаСчетеВедетсяСуммовойУчетПоСкладам = БухгалтерскийУчетСервер.ВедетсяСуммовойУчетПоСкладам(Счет);
		НаСчетеВедетсяПартионныйУчет        = БухгалтерскийУчетСервер.НаСчетеВедетсяПартионныйУчет(Счет);
		НаСчетеВедетсяУчетПоКонтрагентам    = БухгалтерскийУчетСервер.НаСчетеВедетсяУчетПоКонтрагентам(Счет);
		НаСчетеВедетсяУчетПоСкладам         = БухгалтерскийУчетСервер.ВедетсяУчетПоСкладам(Счет);
		
		Если НаСчетеВедетсяСуммовойУчетПоСкладам
			И НаСчетеВедетсяПартионныйУчет Тогда
			СчетаУчетаНПС.Добавить(Счет);
			
		ИначеЕсли НаСчетеВедетсяПартионныйУчет
			И НаСчетеВедетсяУчетПоКонтрагентам Тогда
			СчетаУчетаНПК.Добавить(Счет);
			
		ИначеЕсли НаСчетеВедетсяСуммовойУчетПоСкладам
			И НаСчетеВедетсяУчетПоКонтрагентам Тогда
			СчетаУчетаНКС.Добавить(Счет);
			
		ИначеЕсли НаСчетеВедетсяПартионныйУчет Тогда
			СчетаУчетаНП.Добавить(Счет);
			Если НаСчетеВедетсяУчетПоСкладам Тогда
				СчетаУчетаНП_Склад.Добавить(Счет);
			КонецЕсли;
			
		ИначеЕсли НаСчетеВедетсяУчетПоКонтрагентам Тогда
			СчетаУчетаНК.Добавить(Счет);
			Если НаСчетеВедетсяУчетПоСкладам Тогда
				СчетаУчетаНК_Склад.Добавить(Счет);
			КонецЕсли;
			
		ИначеЕсли НаСчетеВедетсяСуммовойУчетПоСкладам Тогда
			СчетаУчетаНС.Добавить(Счет);
			
		Иначе
			СчетаУчетаН.Добавить(Счет);
			Если НаСчетеВедетсяУчетПоСкладам Тогда
				СчетаУчетаН_Склад.Добавить(Счет);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция РазличныеЗначенияКолонкиТаблицы(ТаблицаЗначений, ИмяКолонки)

	ВсеЗначенияКолонки = ТаблицаЗначений.ВыгрузитьКолонку(ИмяКолонки);
	РазличныеЗначения  = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(ВсеЗначенияКолонки);
	Возврат РазличныеЗначения;

КонецФункции

#КонецОбласти

