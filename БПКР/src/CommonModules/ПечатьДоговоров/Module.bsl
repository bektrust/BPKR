////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для печати договоров.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Подготавливает текст и вложения договора из шаблона внутри фонового задания.
// Заполнение самого форматированного документа по подготовленным данным необходимо производить
// на стороне вызывающего сеанса.
//
// Параметры:
//	ПараметрыЗаполнения - Структура - Содержит параметры для вызова процедуры ЗаполнитьТекстДоговораПоШаблону().
//	АдресХранилища - Строка - Адрес временного хранилища, в которое поместить 
//							результат выполнения функции ЗаполнитьТекстДоговораПоШаблону().
//
Процедура ЗаполнитьТекстДоговораПоШаблонуВФоне(ПараметрыЗаполнения, АдресХранилища) Экспорт
	
	ФорматированныйДокумент = Новый ФорматированныйДокумент;
		
	ЗаполнитьТекстДоговораПоШаблону(ПараметрыЗаполнения.ШаблонДоговора,
									ФорматированныйДокумент,
									ПараметрыЗаполнения.СсылкаНаОбъект);
	
	Результат = Новый Структура();
	Результат.Вставить("ТекстHTML");
	Результат.Вставить("Вложения");
	
	ФорматированныйДокумент.ПолучитьHTML(Результат.ТекстHTML, Результат.Вложения);
									
	ПоместитьВоВременноеХранилище(Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9)), АдресХранилища);
	
КонецПроцедуры

// Процедура копирует текст договора из шаблона в форматированный документ
// и заменяет подставляемые параметры на их значения.
//
// Параметры:
//	ШаблонДоговора - СправочникСсылка.ШаблоныДоговоров
//	ФорматированныйДокумент - ФорматированныйДокумент, которые необходимо заполнить
//	СсылкаНаОбъект - СправочникСсылка.ДоговорыКонтрагентов
//				   - ДокументСсылка.СчетНаОплатуПокупателям 
//		    	   - ссылка на договор или документ, из которого вызвана печать текста договора
//
Процедура ЗаполнитьТекстДоговораПоШаблону(ШаблонДоговора, ФорматированныйДокумент, СсылкаНаОбъект) Экспорт

	Если ОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности() Тогда
		Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			КлючеваяОперация = "ЗаполнениеДоговораИзСчетаПоШаблону";
		Иначе
			КлючеваяОперация = "ЗаполнениеДоговораПоШаблону";
		КонецЕсли;
		ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	КонецЕсли;
	
	СведенияОСделке = СведенияОСделке(СсылкаНаОбъект, ШаблонДоговора);

	Если СведенияОСделке = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеШаблона = Справочники.ШаблоныДоговоров.ДанныеШаблонаДоговора(ШаблонДоговора);
	ТекстHTML = ДанныеШаблона.ТекстHTML;
	
	Если НЕ ЗначениеЗаполнено(ТекстHTML) Тогда
		Возврат;
	КонецЕсли;
	
	ФорматированныйДокумент.УстановитьHTML(ТекстHTML, ДанныеШаблона.Вложения);
	
	// Заменяем параметры по тексту на значения из базы.
	ЦветФонаЗаменяемогоПараметра = ЦветФонаЗаменяемогоПараметра();
	ЦветПоУмолчанию = ПечатьДоговоровКлиентСервер.ЦветФонаПоУмолчанию();
	
	ЭлементыКОбнулению = Новый Массив;
	
	ЗакладкаКонцаДокумента = ФорматированныйДокумент.ПолучитьЗакладкуКонца();
	
	ЗначенияСоставногоПараметра = Новый Массив;
	
	ОбластьНачалоПараметра = ФорматированныйДокумент.НайтиТекст("{");
	Пока ОбластьНачалоПараметра <> Неопределено Цикл
	
		ОбластьКонецПараметра = ФорматированныйДокумент.НайтиТекст("}", ОбластьНачалоПараметра.ЗакладкаНачала);
		Если ОбластьКонецПараметра = Неопределено Тогда
			// Для параметра не задана закрывающая скобка и он продолжается до конца текста, поэтому выходим из цикла.
			Прервать;
		КонецЕсли;
		
		МассивЭлементов = ФорматированныйДокумент.СформироватьЭлементы(
			ОбластьНачалоПараметра.ЗакладкаНачала, ОбластьКонецПараметра.ЗакладкаКонца);
			
		ЭлементыКОбнулению.Очистить();
		ПоследнийТекстовыйЭлемент = Неопределено;
			
		Сч = 0;
		ДлинаДобавленногоТекста = 0;
		Пока Сч < МассивЭлементов.Количество() Цикл
			
			ЭлементДокумента = МассивЭлементов[Сч];
		
			Если ТипЗнч(ЭлементДокумента) <> Тип("ТекстФорматированногоДокумента") Тогда
				Сч = Сч + 1;
				Продолжить;
			КонецЕсли;

			ИмяПараметра = ЭлементДокумента.Текст;
			
			// Возможно, что из-за форматирования текст параметра разбился на несколько html-элементов
			// и надо собрать их в один
			Пока Сч < МассивЭлементов.Количество() - 1
				И Прав(ИмяПараметра, 1) <> "}" Цикл
				
				СледующийЭлементДокумента = МассивЭлементов[Сч + 1];
				Если ТипЗнч(СледующийЭлементДокумента) <> Тип("ТекстФорматированногоДокумента") Тогда
					Прервать;
				КонецЕсли;
				
				ИмяПараметра = ИмяПараметра + СледующийЭлементДокумента.Текст;
				Сч = Сч + 1;
				
				ЭлементыКОбнулению.Добавить(СледующийЭлементДокумента);
				
			КонецЦикла;
			
			Если Лев(ИмяПараметра, 1) = "{" Тогда
				ИмяПараметра = Сред(ИмяПараметра, 2);
			КонецЕсли;
			Если Прав(ИмяПараметра, 1) = "}" Тогда
				ИмяПараметра = Сред(ИмяПараметра, 1, СтрДлина(ИмяПараметра) - 1);
			КонецЕсли;
			
			Успешно = Истина;
			Если ЗначениеЗаполнено(ИмяПараметра) Тогда
				Значение = ЗначениеПараметра(ИмяПараметра, СведенияОСделке, ЗначенияСоставногоПараметра, Успешно);
				Если СтрНайти(Значение, "%1%") > 0 Тогда
					// Это составной параметр, вставляем его значение по частям
					
					ДлинаДобавленногоТекста = ДлинаДобавленногоТекста 
						+ ВставитьСоставноеЗначение(Значение, ЗначенияСоставногоПараметра, ФорматированныйДокумент, ЭлементДокумента);
					ЗначенияСоставногоПараметра.Очистить();
					Значение = "";
				Иначе
					ДлинаДобавленногоТекста = ДлинаДобавленногоТекста +  СтрДлина(Значение);
				КонецЕсли;
				
				ЭлементДокумента.Текст = Значение;
			Иначе
				ЭлементДокумента.Текст = "";
			КонецЕсли;
			
			Для Каждого Элемент Из ЭлементыКОбнулению Цикл
				Элемент.Текст = "";
			КонецЦикла;
			
			Если Успешно Тогда
				// Заменяем цвет фона по умолчанию
				Если ЭлементДокумента.ЦветФона = ЦветФонаЗаменяемогоПараметра Тогда
					ЭлементДокумента.ЦветФона = ЦветПоУмолчанию;
					ПоследнийТекстовыйЭлемент = ЭлементДокумента;
				КонецЕсли;
				
				Для Каждого Элемент Из ЭлементыКОбнулению Цикл
					Если Элемент.ЦветФона = ЦветФонаЗаменяемогоПараметра Тогда
						Элемент.ЦветФона = ЦветПоУмолчанию;
						ПоследнийТекстовыйЭлемент = Элемент;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Сч = Сч + 1;
			
		КонецЦикла;

		// При расположении подряд нескольких параметров между ними могут появляться 
		// пробелы или знаки препинания, закрашенные цветом ЦветФонаЗаменяемогоПараметра. 
		// Чтобы после замены всех соседних параметров эти пробелы не выделялсь, снимем у них фон.
		Если ПоследнийТекстовыйЭлемент <> Неопределено Тогда
			
			ЕстьДанные = ПоследнийТекстовыйЭлемент.ЗакладкаКонца <> ЗакладкаКонцаДокумента;
			
			Пока ЕстьДанные Цикл
				ПозицияПоследнегоТекстовогоЭлемента = ФорматированныйДокумент.ПолучитьПозициюПоЗакладке(
					ПоследнийТекстовыйЭлемент.ЗакладкаКонца);
				
				ПозицияКонцаДокумента = ФорматированныйДокумент.ПолучитьПозициюПоЗакладке(ЗакладкаКонцаДокумента);
				
				ПозицияПоследнегоТекстовогоЭлемента = Мин(ПозицияПоследнегоТекстовогоЭлемента + ДлинаДобавленногоТекста + 1, ПозицияКонцаДокумента);
				ЗакладкаПоПозиции = ФорматированныйДокумент.ПолучитьЗакладкуПоПозиции(ПозицияПоследнегоТекстовогоЭлемента);
				
				МассивЭлементов = ФорматированныйДокумент.ПолучитьЭлементы(ПоследнийТекстовыйЭлемент.ЗакладкаКонца, ЗакладкаПоПозиции);
				ПоследнийТекстовыйЭлемент = Неопределено;
				Для Каждого ЭлементДокумента Из МассивЭлементов Цикл
					Если ТипЗнч(ЭлементДокумента) <> Тип("ТекстФорматированногоДокумента") Тогда
						ПоследнийТекстовыйЭлемент = Неопределено;
						Прервать;
					КонецЕсли;
					
					Если СтрНайти(ЭлементДокумента.Текст, "{") > 0 Тогда
						// Начало нового параметра, дальше не обрабатываем
						ПоследнийТекстовыйЭлемент = Неопределено;
						Прервать;
					КонецЕсли;
					
					Если ЭлементДокумента.ЦветФона = ЦветФонаЗаменяемогоПараметра Тогда
						ЭлементДокумента.ЦветФона = ЦветПоУмолчанию;
						ПоследнийТекстовыйЭлемент = ЭлементДокумента;
					КонецЕсли;
					
				КонецЦикла;
				
				Если ПоследнийТекстовыйЭлемент = Неопределено Тогда
					ЕстьДанные = Ложь;
				ИначеЕсли ФорматированныйДокумент.ПолучитьПозициюПоЗакладке(ПоследнийТекстовыйЭлемент.ЗакладкаКонца) <= ПозицияПоследнегоТекстовогоЭлемента Тогда
					ЕстьДанные = Ложь;
				Иначе
					ЕстьДанные = ПоследнийТекстовыйЭлемент.ЗакладкаКонца <> ЗакладкаКонцаДокумента;
				КонецЕсли;
				
			КонецЦикла;

		КонецЕсли;
		
		// Ищем следующий параметр
		ОбластьНачалоПараметра = ФорматированныйДокумент.НайтиТекст("{", ОбластьНачалоПараметра.ЗакладкаНачала);
		
	КонецЦикла;

	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачалаЗамера);
	
КонецПроцедуры

// Возвращает структуру со сведениями о сделке.
//
// Параметр:
//	СсылкаНаОбъект  - СправочникСсылка.ДоговорКонтрагента, ДокументСсылка.СчетНаОплатуПокупателю
//					- договор или счет на оплату, из которого вызвано заполнение текста договора.
//
// Возвращаемое значение:
//	Структура с ключами:
//		* СведенияОДоговоре -  структура сведений о договоре
//							- см. Справочники.ДоговорыКонтрагентов.ПодготовитьПараметрыПечатиТекстаДоговора()
//		* СведенияОКонтрагенте - структура сведений о контрагенте
//							- см. БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице()
//		* СведенияОбОрганизации - структура сведений об организации
//							- см. БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице()
//		* СведенияОСчетеНаОплату - структура сведений о счете на оплату (если передан он)
//							- см. Документы.СчетНаОплатуПокупателю.ПодготовитьПараметрыПечатиТекстаДоговора()
//
Функция СведенияОСделке(СсылкаНаОбъект, ШаблонДоговора) Экспорт

	ДоговорКонтрагента = ДоговорКонтрагентаДляОбъекта(СсылкаНаОбъект);

	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Возврат Неопределено;
	КонецЕсли;

	СведенияОДоговоре = Справочники.ДоговорыКонтрагентов.ПодготовитьПараметрыПечатиТекстаДоговора(
		ДоговорКонтрагента);
	Если ЗначениеЗаполнено(ШаблонДоговора) Тогда
		СведенияОДоговоре.ИмяМакета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ШаблонДоговора, "ИмяМакета");
	КонецЕсли;
		
	ДатаСреза = ?(ЗначениеЗаполнено(СведенияОДоговоре.ДатаДоговора), СведенияОДоговоре.ДатаДоговора, ТекущаяДатаСеанса());
	
	ЭтоСчетНаОплату = ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетНаОплатуПокупателю");
	
	Если ЭтоСчетНаОплату Тогда
		СведенияОСчетеНаОплату = Документы.СчетНаОплатуПокупателю.ПодготовитьПараметрыПечатиТекстаДоговора(СсылкаНаОбъект);
	КонецЕсли;
	
	СведенияОбОрганизации = БухгалтерскийУчетСервер.ПолучитьСведенияОбОрганизации(
		?(СведенияОСчетеНаОплату <> Неопределено, СведенияОСчетеНаОплату.Организация, СведенияОДоговоре.Организация),
		ДатаСреза);
	
	СведенияОКонтрагенте = БухгалтерскийУчетСервер.ПолучитьСведенияОКонтрагенте(СведенияОДоговоре.Владелец);
	
	// Получим таблицу доп. свойств и реквизитов договора
	//ТаблицаДопСвойств = УправлениеСвойствами.ЗначенияСвойств(ДоговорКонтрагента, Истина, Истина);
	//ДопзаполнитьНаименованиеДопСвойств(ТаблицаДопСвойств);
	//СведенияОДоговоре.Вставить("ТаблицаДопСвойств", ТаблицаДопСвойств);
	//
	//ТаблицаДопСвойств = УправлениеСвойствами.ЗначенияСвойств(СведенияОДоговоре.Организация, Истина, Истина);
	//ДопзаполнитьНаименованиеДопСвойств(ТаблицаДопСвойств);
	//СведенияОбОрганизации.Вставить("ТаблицаДопСвойств", ТаблицаДопСвойств);
	
	ТаблицаДопСвойств = УправлениеСвойствами.ЗначенияСвойств(СведенияОДоговоре.Владелец, Истина, Истина);
	ДопзаполнитьНаименованиеДопСвойств(ТаблицаДопСвойств);
	СведенияОКонтрагенте.Вставить("ТаблицаДопСвойств", ТаблицаДопСвойств);
	
	Если ЭтоСчетНаОплату Тогда
		ТаблицаДопСвойств = УправлениеСвойствами.ЗначенияСвойств(СсылкаНаОбъект, Ложь, Истина);
		ДопзаполнитьНаименованиеДопСвойств(ТаблицаДопСвойств);
		СведенияОСчетеНаОплату.Вставить("ТаблицаДопСвойств", ТаблицаДопСвойств);
	КонецЕсли;

	Результат = Новый Структура();
	Результат.Вставить("СведенияОДоговоре", СведенияОДоговоре);
	Результат.Вставить("СведенияОКонтрагенте", СведенияОКонтрагенте);
	Результат.Вставить("СведенияОбОрганизации", СведенияОбОрганизации);
	Результат.Вставить("СведенияОСчетеНаОплату", СведенияОСчетеНаОплату);

	Возврат Результат;

КонецФункции

Функция ЗначениеПараметра(Знач ИмяПараметра, СведенияОСделке, ЗначенияСоставногоПараметра, Успешно) Экспорт

	ИмяПараметра = ВРег(ИмяПараметра);
	СведенияОДоговоре 		= СведенияОСделке.СведенияОДоговоре;
	СведенияОКонтрагенте 	= СведенияОСделке.СведенияОКонтрагенте;
	СведенияОбОрганизации 	= СведенияОСделке.СведенияОбОрганизации;
	СведенияОСчетеНаОплату	= СведенияОСделке.СведенияОСчетеНаОплату;
	Результат = Неопределено;
	Успешно = Истина;
	
	Если ИмяПараметра = Врег("АдресЭлектроннойПочтыКонтрагента") Тогда
		
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.Email) Тогда
			Результат = СведенияОКонтрагенте.Email;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 20);
			Успешно = Ложь;
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("АдресЭлектроннойПочтыОрганизации") Тогда
	
		Если ЗначениеЗаполнено(СведенияОбОрганизации.Email) Тогда
			Результат = СведенияОбОрганизации.Email;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 20);
			Успешно = Ложь;
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("БанковскиеРеквизитыКонтрагента") Тогда
	
		ПрефиксНомерСчета = НСтр("ru = 'р/с'");
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.НомерСчета) Тогда
			НомерСчета = СведенияОКонтрагенте.НомерСчета;
		Иначе
			НомерСчета = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 20);
			Успешно = Ложь;
		КонецЕсли;
	
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.Банк) Тогда
			Банк = СведенияОКонтрагенте.Банк;
		Иначе
			Банк = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
			Успешно = Ложь;
		КонецЕсли;
		
		ПрефиксБИК = НСтр("ru = 'БИК'");
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.БИКБанка) Тогда
			БИК = СведенияОКонтрагенте.БИКБанка;
		Иначе
			БИК = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 9);
			Успешно = Ложь;
		КонецЕсли;
		
		ПрефиксКоррСчет = НСтр("ru = 'к/с'");
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.КоррСчетБанка) Тогда
			КоррСчет = СведенияОКонтрагенте.КоррСчетБанка;
		Иначе
			КоррСчет = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 20);
			Успешно = Ложь;
		КонецЕсли;
		
		// Формируем строку вида "р/с %1% в банке %2%, БИК %3%, к/с %4%"
		Подстроки = Новый Массив;
		Подстроки.Добавить(ПрефиксНомерСчета); 
		Подстроки.Добавить("%1%"); 
		Подстроки.Добавить(НСтр("ru = 'в банке'")); 
		Подстроки.Добавить("%2%,"); 
		Подстроки.Добавить(ПрефиксБИК); 
		Подстроки.Добавить("%3%,"); 
		Подстроки.Добавить(ПрефиксКоррСчет); 
		Подстроки.Добавить("%4%"); 

		Результат = СтрСоединить(Подстроки, " ");

		ЗначенияСоставногоПараметра.Добавить(НомерСчета);
		ЗначенияСоставногоПараметра.Добавить(Банк);
		ЗначенияСоставногоПараметра.Добавить(БИК);
		ЗначенияСоставногоПараметра.Добавить(КоррСчет);
		
	ИначеЕсли ИмяПараметра = Врег("БанковскиеРеквизитыОрганизации") Тогда

		ПрефиксНомерСчета = НСтр("ru = 'р/с'");
		Если ЗначениеЗаполнено(СведенияОбОрганизации.НомерСчета) Тогда
			НомерСчета = СведенияОбОрганизации.НомерСчета;
		Иначе
			НомерСчета = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 20);
			Успешно = Ложь;
		КонецЕсли;
	
		Если ЗначениеЗаполнено(СведенияОбОрганизации.Банк) Тогда
			Банк = СведенияОбОрганизации.Банк;
		Иначе
			Банк = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
			Успешно = Ложь;
		КонецЕсли;
		
		ПрефиксБИК = НСтр("ru = 'БИК'");
		Если ЗначениеЗаполнено(СведенияОбОрганизации.БИКБанка) Тогда
			БИКБанка = СведенияОбОрганизации.БИКБанка;
		Иначе
			БИК = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 9);
			Успешно = Ложь;
		КонецЕсли;
		
		ПрефиксКоррСчет = НСтр("ru = 'к/с'");
		Если ЗначениеЗаполнено(СведенияОбОрганизации.КоррСчетБанка) Тогда
			КоррСчет = СведенияОбОрганизации.КоррСчетБанка;
		Иначе
			КоррСчет = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 20);
			Успешно = Ложь;
		КонецЕсли;

		// Формируем строку вида "р/с %1% в банке %2%, БИК %3%, к/с %4%"
		Подстроки = Новый Массив;
		Подстроки.Добавить(ПрефиксНомерСчета); 
		Подстроки.Добавить("%1%"); 
		Подстроки.Добавить(НСтр("ru = 'в банке'")); 
		Подстроки.Добавить("%2%,"); 
		Подстроки.Добавить(ПрефиксБИК); 
		Подстроки.Добавить("%3%,"); 
		Подстроки.Добавить(ПрефиксКоррСчет); 
		Подстроки.Добавить("%4%"); 

		Результат = СтрСоединить(Подстроки, " ");

		ЗначенияСоставногоПараметра.Добавить(НомерСчета);
		ЗначенияСоставногоПараметра.Добавить(Банк);
		ЗначенияСоставногоПараметра.Добавить(БИК);
		ЗначенияСоставногоПараметра.Добавить(КоррСчет);

	ИначеЕсли ИмяПараметра = Врег("ГородПоЮридическомуАдресуКонтрагента") Тогда
		
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.Город) Тогда
			Результат = СведенияОКонтрагенте.Город;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("ГородПоЮридическомуАдресуОрганизации") Тогда
		
		Если ЗначениеЗаполнено(СведенияОбОрганизации.Город) Тогда
			Результат = СведенияОбОрганизации.Город;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
			Успешно = Ложь;
		КонецЕсли;
		
	ИначеЕсли ИмяПараметра = Врег("ДатаДоговора") Тогда 
		
		Если ЗначениеЗаполнено(СведенияОДоговоре.ДатаДоговора) Тогда
			Результат = Формат(СведенияОДоговоре.ДатаДоговора, "ДЛФ=DD");
		Иначе
			Результат = НСтр("ru = '"" __ "" ______________ 20__ г.'");
			Успешно = Ложь;                   
		КонецЕсли;                 
	
	ИначеЕсли ИмяПараметра = Врег("ДокументУдостоверяющийЛичностьКонтрагента") Тогда

		Если СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			// Для юридических лиц параметр не применяется, может присутствовать в шаблоне
			// при использовании единого шаблона для юр.лиц и физ.лиц.
			Результат = "";
		ИначеЕсли ЗначениеЗаполнено(СведенияОКонтрагенте.ДокументУдостоверяющийЛичность) Тогда
			Результат = СведенияОКонтрагенте.ДокументУдостоверяющийЛичность;
		Иначе
			// Вставляем строку без переносов, чтобы сработало автоперенос в форматированном документе.
			Результат = НСтр("ru = 'Паспорт гражданина КР, серия %1%, № %2% выдан: %3%, действует до: %4%, %5%, № подр. %6%'");
			ЗначенияСоставногоПараметра.Добавить("____"); 	// серия
			ЗначенияСоставногоПараметра.Добавить("______"); // номер
			ЗначенияСоставногоПараметра.Добавить("______________ 20__ г."); // выдан
			ЗначенияСоставногоПараметра.Добавить("______________ 20__ г."); // действует до
			ЗначенияСоставногоПараметра.Добавить("_________________________________"); // кем выдан
			ЗначенияСоставногоПараметра.Добавить("_______"); // № подразделения
			
			Успешно = Ложь;
		КонецЕсли;
	
	ИначеЕсли СтрНачинаетсяС(ИмяПараметра, Врег("ДолжностьРуководителяКонтрагента")) Тогда
		
		Если ЗначениеЗаполнено(СведенияОДоговоре.ДолжностьРуководителяКонтрагента) Тогда
			
			Падеж = ПечатьДоговоровКлиентСервер.ПадежПоИмениПараметра(ИмяПараметра);
			ПустойДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка(); // для любого договора
			Результат = СклонениеПредставленийОбъектов.ПросклонятьПредставление(
				СведенияОДоговоре.ДолжностьРуководителяКонтрагента, Падеж, ПустойДоговор);
				
		ИначеЕсли СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			// У физического лица может и не быть должности, если, например, он действует сам за себя.
			Результат = "";
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли СтрНачинаетсяС(ИмяПараметра, Врег("ДолжностьРуководителяОрганизации")) Тогда
		
		Если ЗначениеЗаполнено(СведенияОДоговоре.ДолжностьРуководителя) Тогда
			
			Падеж = ПечатьДоговоровКлиентСервер.ПадежПоИмениПараметра(ИмяПараметра);
			Результат = СклонениеПредставленийОбъектов.ПросклонятьПредставление(
					Строка(СведенияОДоговоре.ДолжностьРуководителя), Падеж, СведенияОДоговоре.ДолжностьРуководителя);
			
		ИначеЕсли СведенияОбОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			// У физического лица может и не быть должности, если, например, он действует сам за себя.
			Результат = "";
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
			Успешно = Ложь;
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("ИНН_Контрагента") Тогда
	
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.ИНН) Тогда
			ИНН = СведенияОКонтрагенте.ИНН;
		ИначеЕсли СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			ИНН = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 12);
			Успешно = Ложь;
		Иначе
			ИНН = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 10);
			Успешно = Ложь;
		КонецЕсли;
		
		Результат = НСтр("ru = 'ИНН: %1%'");
		ЗначенияСоставногоПараметра.Добавить(ИНН);
	
	ИначеЕсли ИмяПараметра = Врег("ИНН_Организации") Тогда
	
		Если ЗначениеЗаполнено(СведенияОбОрганизации.ИНН) Тогда
			ИНН = СведенияОбОрганизации.ИНН;
		ИначеЕсли СведенияОбОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			ИНН = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 12);
			Успешно = Ложь;
		Иначе
			ИНН = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 10);
			Успешно = Ложь;
		КонецЕсли;

		Результат = НСтр("ru = 'ИНН: %1%'");
		ЗначенияСоставногоПараметра.Добавить(ИНН);

	ИначеЕсли ИмяПараметра = Врег("НомерДоговора") Тогда
		
		Если ЗначениеЗаполнено(СведенияОДоговоре.НомерДоговора) Тогда
			Результат = СведенияОДоговоре.НомерДоговора;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 10);
			Успешно = Ложь;
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("ОКПОКонтрагента") Тогда
	
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.ОКПО) Тогда
			ОКПО = СведенияОКонтрагенте.ОКПО;
		Иначе
			ОКПО = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 15);
			Успешно = Ложь;
		КонецЕсли;
		
		Результат = НСтр("ru = 'ОКПО: %1%'");
		ЗначенияСоставногоПараметра.Добавить(ОКПО);

	ИначеЕсли ИмяПараметра = Врег("ОКПООрганизации") Тогда
	
		Если ЗначениеЗаполнено(СведенияОбОрганизации.ОКПО) Тогда
			ОКПО = СведенияОбОрганизации.ОКПО;
		Иначе
			ОКПО = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 15);
			Успешно = Ложь;
		КонецЕсли;
		
		Результат = НСтр("ru = 'ОКПО: %1%'");
		ЗначенияСоставногоПараметра.Добавить(ОКПО);
		
	ИначеЕсли ИмяПараметра = Врег("ОснованиеПолномочийРуководителяКонтрагента") Тогда
	
		Если СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			Результат = НСтр("ru = 'Устава'");
		ИначеЕсли СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			Результат = "";
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 10);
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("ОснованиеПолномочийРуководителяОрганизации") Тогда
	
		Если СведенияОбОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			Результат = НСтр("ru = 'Устава'");
		ИначеЕсли СведенияОбОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			Результат = "";
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 10);
			Успешно = Ложь;	
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("ПолноеНаименованиеОрганизации") Тогда
	
		Если ЗначениеЗаполнено(СведенияОбОрганизации.НаименованиеПолное) Тогда
			Результат = СведенияОбОрганизации.НаименованиеПолное;
		ИначеЕсли ЗначениеЗаполнено(СведенияОбОрганизации.Наименование) Тогда
			Результат = СведенияОбОрганизации.Наименование;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 50);
			Успешно = Ложь;
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("ПолноеНаименованиеКонтрагента") Тогда

		Если ЗначениеЗаполнено(СведенияОКонтрагенте.НаименованиеПолное) Тогда
			Результат = СведенияОКонтрагенте.НаименованиеПолное;
		ИначеЕсли ЗначениеЗаполнено(СведенияОКонтрагенте.Наименование) Тогда
			Результат = СведенияОКонтрагенте.Наименование;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 50);
			Успешно = Ложь;
		КонецЕсли;
		
	ИначеЕсли ИмяПараметра = Врег("ПочтовыйАдресКонтрагента") Тогда
	
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.АдрПочт) Тогда
			Результат = СведенияОКонтрагенте.АдрПочт;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 50);
			Успешно = Ложь;
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("ПочтовыйАдресОрганизации") Тогда

		Если ЗначениеЗаполнено(СведенияОбОрганизации.АдрПочт) Тогда
			Результат = СведенияОбОрганизации.АдрПочт;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 50);
			Успешно = Ложь;
		КонецЕсли;
		
	ИначеЕсли ИмяПараметра = Врег("ПредставительКонтрагента") Тогда
		
		Результат = ЗначениеПараметраПредставительКонтрагента(СведенияОСделке, ЗначенияСоставногоПараметра, Успешно);

	ИначеЕсли ИмяПараметра = Врег("ПредставительОрганизации") Тогда

		Результат = ЗначениеПараметраПредставительОрганизации(СведенияОСделке, ЗначенияСоставногоПараметра, Успешно);
		
	ИначеЕсли СтрНачинаетсяС(ИмяПараметра, Врег("РуководительКонтрагента")) Тогда
		
		Падеж = ПечатьДоговоровКлиентСервер.ПадежПоИмениПараметра(ИмяПараметра);
		
		Если ЗначениеЗаполнено(СведенияОДоговоре.РуководительКонтрагента) Тогда
			
			РуководительКонтрагентаПол = ПечатьДоговоровКлиентСервер.ПорядковыйНомерПола(СведенияОДоговоре.ПолРуководителяКонтрагента);
			Результат = СклонениеПредставленийОбъектов.ПросклонятьФИО(
				СведенияОДоговоре.РуководительКонтрагента,
				Падеж,
				ПустойДоговор,
				РуководительКонтрагентаПол);
			
		ИначеЕсли СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			// У физического лица может не быть руководителя, тогда выводим его самого
			ПолФизическогоЛица = СведенияОКонтрагенте.ФизЛицо.Пол;
			РуководительКонтрагентаПол = ПечатьДоговоровКлиентСервер.ПорядковыйНомерПола(ПолФизическогоЛица);
			Результат = СклонениеПредставленийОбъектов.ПросклонятьФИО(
				СведенияОКонтрагенте.НаименованиеПолное,
				Падеж,
				СведенияОДоговоре.Владелец,
				РуководительКонтрагентаПол);
			
		Иначе
			
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
			Успешно = Ложь;
			
		КонецЕсли;
		
	ИначеЕсли СтрНачинаетсяС(ИмяПараметра, Врег("РуководительОрганизации")) Тогда
		
		Если ЗначениеЗаполнено(СведенияОДоговоре.Руководитель) Тогда
			
			Падеж = ПечатьДоговоровКлиентСервер.ПадежПоИмениПараметра(ИмяПараметра);
			РуководительПол = ПечатьДоговоровКлиентСервер.ПорядковыйНомерПола(СведенияОДоговоре.РуководительПол);
			Результат = СклонениеПредставленийОбъектов.ПросклонятьФИО(
				СведенияОДоговоре.РуководительФИО,
				Падеж,
				СведенияОДоговоре.Руководитель,
				РуководительПол);
			
		Иначе
			
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
			Успешно = Ложь;
			
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("СловоИменуемоеДляКонтрагента") Тогда
		
		Если СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			ПолФизическогоЛица = СведенияОКонтрагенте.ФизЛицо.Пол;
			Если ПолФизическогоЛица = Перечисления.ПолФизическогоЛица.Мужской Тогда
				ОкончаниеМорфемы = "ый";
			ИначеЕсли ПолФизическогоЛица = Перечисления.ПолФизическогоЛица.Женский Тогда
				ОкончаниеМорфемы = "ая";
			Иначе
				ОкончаниеМорфемы = "ое (-ый, -ая)";
			КонецЕсли;
		ИначеЕсли СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			ОкончаниеМорфемы = "ое";
		Иначе
			ОкончаниеМорфемы = "ое (-ый, -ая)";
		КонецЕсли;
		
		Результат = "именуем" + ОкончаниеМорфемы;
		
	ИначеЕсли ИмяПараметра = Врег("СловоИменуемоеДляОрганизации") Тогда
		
		Если Лев(СведенияОбОрганизации.ИНН, "1") = "2" Тогда
			ОкончаниеМорфемы = "ый";
		ИначеЕсли Лев(СведенияОбОрганизации.ИНН, "1") = "1" Тогда
			ОкончаниеМорфемы = "ая";
		Иначе
			ОкончаниеМорфемы = "ое";
		КонецЕсли;
		
		Результат = "именуем" + ОкончаниеМорфемы;
		
	//ИначеЕсли ИмяПараметра = Врег("СрокДействияДоговора") Тогда
	//
	//	Если ЗначениеЗаполнено(СведенияОДоговоре.СрокДействия) Тогда
	//		Результат = Формат(СведенияОДоговоре.СрокДействия, "ДЛФ=DD");
	//	Иначе
	//		Результат = НСтр("ru = '"" __ "" ______________ 20__ г.'");
	//		Успешно = Ложь;                   
	//	КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("СрокОплатыПоДоговору") Тогда
	
		Если ЗначениеЗаполнено(СведенияОДоговоре.СрокОплаты) Тогда
			Результат = Формат(СведенияОДоговоре.СрокОплаты, "ЧГ=");
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 3);
			Успешно = Ложь;
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("СуммаДокумента") Тогда
		
		Если СведенияОСчетеНаОплату <> Неопределено
			И ЗначениеЗаполнено(СведенияОСчетеНаОплату.СуммаДокумента) Тогда
			Результат = БухгалтерскийУчетСервер.ФорматСумм(
				СведенияОСчетеНаОплату.СуммаДокумента, СведенияОСчетеНаОплату.ВалютаДокумента);
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 15);
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("СуммаДокументаПрописью") Тогда
		
		Если СведенияОСчетеНаОплату <> Неопределено
			И ЗначениеЗаполнено(СведенияОСчетеНаОплату.СуммаДокумента) Тогда
			Результат = БухгалтерскийУчетСервер.СформироватьСуммуПрописью(
				СведенияОСчетеНаОплату.СуммаДокумента, СведенияОСчетеНаОплату.ВалютаДокумента);
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("СуммаДокументаБезНДС") Тогда
		
		Если СведенияОСчетеНаОплату <> Неопределено
			И СведенияОСчетеНаОплату.СуммаДокумента - СведенияОСчетеНаОплату.СуммаНДС <> 0 Тогда
			Результат = БухгалтерскийУчетСервер.ФорматСумм(
				СведенияОСчетеНаОплату.СуммаДокумента - СведенияОСчетеНаОплату.СуммаНДС, СведенияОСчетеНаОплату.ВалютаДокумента);
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 15);
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("СуммаДокументаБезНДСПрописью") Тогда
		
		Если СведенияОСчетеНаОплату <> Неопределено
			И СведенияОСчетеНаОплату.СуммаДокумента - СведенияОСчетеНаОплату.СуммаНДС <> 0 Тогда
			Результат = БухгалтерскийУчетСервер.СформироватьСуммуПрописью(
				СведенияОСчетеНаОплату.СуммаДокумента - СведенияОСчетеНаОплату.СуммаНДС, СведенияОСчетеНаОплату.ВалютаДокумента);
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("СуммаНДС") Тогда
		
		Если СведенияОСчетеНаОплату <> Неопределено Тогда
			Если ЗначениеЗаполнено(СведенияОСчетеНаОплату.СуммаНДС) Тогда
				Результат = БухгалтерскийУчетСервер.ФорматСумм(
					СведенияОСчетеНаОплату.СуммаНДС, СведенияОСчетеНаОплату.ВалютаДокумента);
			Иначе
				Результат = НСтр("ru = 'Без налога (НДС)'");
			КонецЕсли;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 15);
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("СуммаНДСПрописью") Тогда
		
		Если СведенияОСчетеНаОплату <> Неопределено Тогда
			Если ЗначениеЗаполнено(СведенияОСчетеНаОплату.СуммаНДС) Тогда
				Результат = БухгалтерскийУчетСервер.СформироватьСуммуПрописью(
					СведенияОСчетеНаОплату.СуммаНДС, СведенияОСчетеНаОплату.ВалютаДокумента);
			Иначе
				Результат = НСтр("ru = 'Без налога (НДС)'");
			КонецЕсли;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 15);
			Успешно = Ложь;
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("ТелефонКонтрагента") Тогда
		
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.Тел) Тогда
			Результат = СведенияОКонтрагенте.Тел;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 20);
			Успешно = Ложь;
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("ТелефонОрганизации") Тогда

		Если ЗначениеЗаполнено(СведенияОбОрганизации.Тел) Тогда
			Результат = СведенияОбОрганизации.Тел;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 20);
			Успешно = Ложь;
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("ФаксКонтрагента") Тогда

		Если ЗначениеЗаполнено(СведенияОКонтрагенте.Факс) Тогда
			Результат = СведенияОКонтрагенте.Факс;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 20);
			Успешно = Ложь;
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("ФаксОрганизации") Тогда

		Если ЗначениеЗаполнено(СведенияОбОрганизации.Факс) Тогда
			Результат = СведенияОбОрганизации.Факс;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 20);
			Успешно = Ложь;
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("ФактическийАдресКонтрагента") Тогда
	
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.АдрФакт) Тогда
			Результат = СведенияОКонтрагенте.АдрФакт;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 50);
			Успешно = Ложь;
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("ФактическийАдресОрганизации") Тогда

		Если ЗначениеЗаполнено(СведенияОбОрганизации.АдрФакт) Тогда
			Результат = СведенияОбОрганизации.АдрФакт;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 50);
			Успешно = Ложь;
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("ЮридическийАдресКонтрагента") Тогда

		Если ЗначениеЗаполнено(СведенияОКонтрагенте.АдрЮР) Тогда
			Результат = СведенияОКонтрагенте.АдрЮР;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 50);
			Успешно = Ложь;
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("ЮридическийАдресОрганизации") Тогда
	
		Если ЗначениеЗаполнено(СведенияОбОрганизации.АдрЮР) Тогда
			Результат = СведенияОбОрганизации.АдрЮР;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 50);
			Успешно = Ложь;
		КонецЕсли;
	ИначеЕсли ИмяПараметра = ВРег("УсловиеОплаты") Тогда
		//Если ЗначениеЗаполнено(СведенияОДоговоре.ДатаОплаты) Тогда
		//	Результат = СтрШаблон(НСтр("ru = 'не позднее %1'"), Формат(СведенияОДоговоре.ДатаОплаты, "ДЛФ=DD"));
		//Иначе
			СрокОплатыПоУмолчанию = 3;
			СрокОплаты =
				?(ЗначениеЗаполнено(СведенияОДоговоре.СрокОплаты), СведенияОДоговоре.СрокОплаты, СрокОплатыПоУмолчанию);
			НадписьДни = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			   НСтр("ru=';%1 день;;%1 дня;%1 дней;%1 дня';'"), СрокОплаты);
			Если СведенияОДоговоре.ИмяМакета = "ДоговорПодряда" Тогда
				Результат = НСтр("ru = 'в течение %1 %2 после подписания Сторонами акта сдачи-приемки Работ.'");
			ИначеЕсли СведенияОДоговоре.ИмяМакета = "ДоговорОказанияУслуг" Тогда
				Результат = НСтр("ru = 'не позднее %1 %2 до начала оказания Услуг Исполнителем.'");
			Иначе
				Результат = НСтр("ru = 'в течение %1 %2'");
			КонецЕсли;
			Результат = СтрШаблон(Результат, СрокОплаты, НадписьДни);
		//КонецЕсли;
	//ИначеЕсли ИмяПараметра = ВРег("ДатаОплатыПоДоговору") Тогда
	//	
	//	Если ЗначениеЗаполнено(СведенияОДоговоре.ДатаОплаты) Тогда
	//		Результат = Формат(СведенияОДоговоре.ДатаОплаты, "ДЛФ=DD");
	//	Иначе
	//		Результат = НСтр("ru = '"" __ "" ______________ 20__ г.'");
	//		Успешно = Ложь;                   
	//	КонецЕсли;
	Иначе
		// Пытаемся найти в таблицах доп. свойств
		//СтрокаТаблицы = СведенияОДоговоре.ТаблицаДопСвойств.Найти(ИмяПараметра, "НаименованиеСвойства");
		//Если СтрокаТаблицы = Неопределено Тогда
		//	СтрокаТаблицы = СведенияОКонтрагенте.ТаблицаДопСвойств.Найти(ИмяПараметра, "НаименованиеСвойства");
		//КонецЕсли;
		//Если СтрокаТаблицы = Неопределено Тогда
		//	СтрокаТаблицы = СведенияОбОрганизации.ТаблицаДопСвойств.Найти(ИмяПараметра, "НаименованиеСвойства");
		//КонецЕсли;
		//Если СтрокаТаблицы = Неопределено
		Если СведенияОСчетеНаОплату <> Неопределено Тогда
			СтрокаТаблицы = СведенияОСчетеНаОплату.ТаблицаДопСвойств.Найти(ИмяПараметра, "НаименованиеСвойства");
		КонецЕсли;
		
		Если СтрокаТаблицы <> Неопределено Тогда
			Результат = ПредставлениеДопСвойства(СтрокаТаблицы);
		КонецЕсли;
		
		Если Результат = Неопределено Тогда
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
			Успешно = Ложь;
		КонецЕсли;
	
	КонецЕсли;

	// Для некоторых параметров может быть пустая строка, 
	// поэтому проверяем только на Неопределено.
	Если Результат = Неопределено Тогда
		Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
		Успешно = Ложь;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Вставляет в форматированный документ текст значения для составного параметра таким образом,
// чтобы оставить выделение только для частей параметра, а поясняющий текст возле них - без выделения.
//
// Параметры:
// 	СтрокаЗначения - Строка - текст значения для вставки. В тексте с помощью % выделены места, 
//							  в которые будут подставляться параметры.
//							  Например, "в лице %1% %2%, действующего(-ей) на основании %3".
//	ЗначенияСоставногоПараметра - Массив - значения отдельных частей параметра в том порядке, как они указаны в СтрокаЗначения.
//	ФорматированныйДокумент - ФорматированныйДокумент - документ, в котором производится замена.
//	ЭлементДокументаСПараметром - ТекстФорматированногоДокумента - элемент форматированного документа,
//								содержащий параметр, который сейчас заменяется на значение.
// 
Функция ВставитьСоставноеЗначение(СтрокаЗначения, ЗначенияСоставногоПараметра, ФорматированныйДокумент, ЭлементДокументаСПараметром) Экспорт 
	ДлинаДобавленногоТекста = 0;

	МассивПодстрок 		= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаЗначения, "%");
	ЗакладкаКонца 		= ЭлементДокументаСПараметром.ЗакладкаКонца;
	ЦветПоУмолчанию 	= ПечатьДоговоровКлиентСервер.ЦветФонаПоУмолчанию();

	Для Каждого Подстрока Из МассивПодстрок Цикл
	
		ЗаменяемыйТекст = Подстрока;
		СнятьВыделение 	= Истина;
		
		Если ЗначениеЗаполнено(ЗаменяемыйТекст) 
			И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СокрЛП(ЗаменяемыйТекст)) Тогда
			НомерПараметра = Число(СокрЛП(ЗаменяемыйТекст));
			Если НомерПараметра <= ЗначенияСоставногоПараметра.Количество() Тогда
				ЗаменяемыйТекст = ЗначенияСоставногоПараметра[НомерПараметра - 1];
				СнятьВыделение = Лев(ЗаменяемыйТекст, 1) <> "_";
			Иначе
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В строке ""%1"" номер параметра %2 превышает количество элементов в массиве ЗначенияСоставногоПараметра'"),
					СтрокаЗначения,
					НомерПараметра);
			КонецЕсли;
		КонецЕсли;
		
		НовыйЭлемент = ФорматированныйДокумент.Вставить(ЗакладкаКонца, ЗаменяемыйТекст, Тип("ТекстФорматированногоДокумента"));
		Если НовыйЭлемент <> Неопределено Тогда // В случае пустых строк элемент документ может не создаваться.
			ДлинаДобавленногоТекста = ДлинаДобавленногоТекста + СтрДлина(ЗаменяемыйТекст);

			// Оставляем исходный шрифт элемента
			НовыйЭлемент.Шрифт = ЭлементДокументаСПараметром.Шрифт;

			Если СнятьВыделение Тогда
				НовыйЭлемент.ЦветФона 	= ЦветПоУмолчанию;
			Иначе
				НовыйЭлемент.ЦветФона 	= ЭлементДокументаСПараметром.ЦветФона;
			КонецЕсли;
			
			// Запомним место вставки следующего элемента
			ЗакладкаКонца = НовыйЭлемент.ЗакладкаКонца;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДлинаДобавленногоТекста;

КонецФункции

Функция ДоговорКонтрагентаДляОбъекта(СсылкаНаОбъект) Экспорт

	Результат = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();

	Если ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Результат = СсылкаНаОбъект;
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ДоговорыКонтрагентовПрисоединенныеФайлы") Тогда
		Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "ВладелецФайла");
	Иначе
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(СсылкаНаОбъект));
		Если МетаданныеОбъекта <> Неопределено Тогда
			Если МетаданныеОбъекта.Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено Тогда
				Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "ДоговорКонтрагента");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ФайлДоговораДляОбъекта(СсылкаНаОбъект) Экспорт

	Результат = Справочники.ДоговорыКонтрагентовПрисоединенныеФайлы.ПустаяСсылка();

	ДоговорКонтрагента = ДоговорКонтрагентаДляОбъекта(СсылкаНаОбъект);
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ФайлДоговора");
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция НомерИДатаДоговораДляОбъекта(СсылкаНаОбъект) Экспорт

	Результат = Новый Структура();
	Результат.Вставить("НомерДоговора", "");
	Результат.Вставить("ДатаДоговора",	'0001-01-01');

	ДоговорКонтрагента = ДоговорКонтрагентаДляОбъекта(СсылкаНаОбъект);
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "НомерДоговора, ДатаДоговора");
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ЦветФонаЗаменяемогоПараметра() Экспорт

	// Обращение к цвету фона через ЦветаСтиля.ФонЗаменяемогоПараметра 
	// возвращает цвет, которые не может быть сохранен в HTML (его составляющие RGB = -1).
	// Для возможности сохранения в HTML получаем абсолютный цвет.
	МетаданныеЭлементаСтиля = Метаданные.ЭлементыСтиля.ФонЗаменяемогоПараметра;
	
	Возврат Новый Цвет(МетаданныеЭлементаСтиля.Значение.Красный, 
						МетаданныеЭлементаСтиля.Значение.Зеленый,
						МетаданныеЭлементаСтиля.Значение.Синий);

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДопзаполнитьНаименованиеДопСвойств(ТаблицаДопСвойств)

	Если ТаблицаДопСвойств.Колонки.Найти("НаименованиеСвойства") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеТипаСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДлинаНаименования);
	ТаблицаДопСвойств.Колонки.Добавить("НаименованиеСвойства", ОписаниеТипаСтрока);
	
	МассивСвойств = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаДопСвойств, "Свойство");
	РеквизитыСвойств = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСвойств, "Наименование");
	
	Для Каждого СтрокаТаблицы Из ТаблицаДопСвойств Цикл
		
		Сведения = РеквизитыСвойств[СтрокаТаблицы.Свойство];
		Если Сведения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы.НаименованиеСвойства = ВРег(Сведения.Наименование);
	
	КонецЦикла;
	
	ТаблицаДопСвойств.Индексы.Добавить("НаименованиеСвойства");

КонецПроцедуры

// Возвращает текстовое представление для доп. свойства и реквизита.
//
Функция ПредставлениеДопСвойства(СтрокаТаблицыДопСвойств)

	Результат = Неопределено;

	Если НЕ ЗначениеЗаполнено(СтрокаТаблицыДопСвойств.Значение) Тогда
		Возврат Результат;
	КонецЕсли;

	Если ТипЗнч(СтрокаТаблицыДопСвойств.Значение) = Тип("Строка") Тогда
		Результат = СокрЛП(СтрокаТаблицыДопСвойств.Значение);

	Иначе
		// Для доп. свойств можно задать собственный формат представления, если он задан, 
		// то используем его.
		
		СведенияОДопСвойстве = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТаблицыДопСвойств.Свойство, "ФорматСвойства");
		Если ЗначениеЗаполнено(СведенияОДопСвойстве.ФорматСвойства) Тогда
			Результат = Формат(СтрокаТаблицыДопСвойств.Значение, СведенияОДопСвойстве.ФорматСвойства);
		Иначе
			Если ТипЗнч(СтрокаТаблицыДопСвойств.Значение) = Тип("Дата")
				И СтрокаТаблицыДопСвойств.Значение = НачалоДня(СтрокаТаблицыДопСвойств.Значение) Тогда
				// Дату, которая указана как начало дня, выводим без времени.
				Результат = Формат(СтрокаТаблицыДопСвойств.Значение, "ДЛФ=DD");
			Иначе
				Результат = СокрЛП(СтрокаТаблицыДопСвойств.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ЗначениеПараметраПредставительКонтрагента(СведенияОСделке, ЗначенияСоставногоПараметра, Успешно)
	
	СведенияОДоговоре    = СведенияОСделке.СведенияОДоговоре;
	СведенияОКонтрагенте = СведенияОСделке.СведенияОКонтрагенте;
	
	Успешно1 = Истина;
	Успешно2 = Истина;
	Успешно3 = Истина;
	
	ПустойДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка(); // для любого договора
	
	Должность = ЗначениеПараметра("ДолжностьРуководителяКонтрагентаРодительныйПадеж", 
			СведенияОСделке, ЗначенияСоставногоПараметра, Успешно1);
			
	Руководитель = ЗначениеПараметра("РуководительКонтрагентаРодительныйПадеж", 
			СведенияОСделке, ЗначенияСоставногоПараметра, Успешно2);
			
	РуководительКонтрагентаПол = Неопределено;
	Если ЗначениеЗаполнено(СведенияОДоговоре.РуководительКонтрагента) Тогда
		РуководительКонтрагентаПол = ПечатьДоговоровКлиентСервер.ПорядковыйНомерПола(СведенияОДоговоре.ПолРуководителяКонтрагента);
	ИначеЕсли СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		// У физического лица может не быть руководителя, тогда выводим его самого
		ПолФизическогоЛица = СведенияОКонтрагенте.ФизЛицо.Пол;
		РуководительКонтрагентаПол = ПечатьДоговоровКлиентСервер.ПорядковыйНомерПола(ПолФизическогоЛица);
	КонецЕсли;
	ТекстСУчетомПола = СклонениеСловаДействующий(РуководительКонтрагентаПол, 2); // родительный падеж
	
	Основание = ЗначениеПараметра("ОснованиеПолномочийРуководителяКонтрагента", 
		СведенияОСделке, ЗначенияСоставногоПараметра, Успешно3);
	
	Результат = НСтр("ru = ', в лице %1% %2%, %3% на основании %4%'");
	ЗначенияСоставногоПараметра.Добавить(Должность);
	ЗначенияСоставногоПараметра.Добавить(Руководитель);
	ЗначенияСоставногоПараметра.Добавить(ТекстСУчетомПола);
	ЗначенияСоставногоПараметра.Добавить(Основание);
	
	Успешно = Успешно1 И Успешно2 И Успешно3;

	Если СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		// От имени юридического лица всегда действует какое-то физическое лицо
		Успешно = Успешно1 И Успешно2 И Успешно3;
	Иначе
		Если ЗначениеЗаполнено(Руководитель) 
			И ЗначениеЗаполнено(СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("_", Руководитель, ""))
			И СтрНайти(СведенияОКонтрагенте.НаименованиеПолное, СведенияОДоговоре.РуководительКонтрагента) = 0 Тогда
			// Физическое лицо действует не самостоятельно, а выдало кому-то доверенность.
			Успешно = Успешно1 И Успешно2 И Успешно3;
		Иначе
			// Физическое лицо действует самостоятельно, ничего не показываем.
			Результат = "";
			ЗначенияСоставногоПараметра.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

Функция ЗначениеПараметраПредставительОрганизации(СведенияОСделке, ЗначенияСоставногоПараметра, Успешно)
	
	СведенияОбОрганизации = СведенияОСделке.СведенияОбОрганизации;
	СведенияОДоговоре     = СведенияОСделке.СведенияОДоговоре;
	
	Успешно1 = Истина;
	Успешно2 = Истина;
	Успешно3 = Истина;
	
	Должность = ЗначениеПараметра("ДолжностьРуководителяОрганизацииРодительныйПадеж",
			СведенияОСделке, ЗначенияСоставногоПараметра, Успешно1);
			
	Руководитель = ЗначениеПараметра("РуководительОрганизацииРодительныйПадеж",
			СведенияОСделке, ЗначенияСоставногоПараметра, Успешно2);
		
	РуководительПол = ПечатьДоговоровКлиентСервер.ПорядковыйНомерПола(СведенияОДоговоре.РуководительПол);
	ТекстСУчетомПола = СклонениеСловаДействующий(РуководительПол, 2); // родительный падеж
	
	Основание = ЗначениеПараметра("ОснованиеПолномочийРуководителяОрганизации", 
		СведенияОСделке, ЗначенияСоставногоПараметра, Успешно3);
		
	Успешно = Успешно1 И Успешно2 И Успешно3;
	
	Результат = НСтр("ru = ', в лице %1% %2%, %3% на основании %4%'");
	ЗначенияСоставногоПараметра.Добавить(Должность);
	ЗначенияСоставногоПараметра.Добавить(Руководитель);
	ЗначенияСоставногоПараметра.Добавить(ТекстСУчетомПола);
	ЗначенияСоставногоПараметра.Добавить(Основание);
	
	Возврат Результат;
		
КонецФункции

// Возвращает слово "действующий" с правильным окончанием, учитывающим пол и падеж.
//
Функция СклонениеСловаДействующий(Пол, Падеж)
	
	Если Не ЗначениеЗаполнено(Пол) Тогда
		Если Падеж = 2 Тогда
			ТекстСУчетомПола = НСтр("ru = 'действующего (-ей)'");
		ИначеЕсли Падеж = 3 Тогда
			ТекстСУчетомПола = НСтр("ru = 'действующему (-ей)'");
		ИначеЕсли Падеж = 4 Тогда
			ТекстСУчетомПола = НСтр("ru = 'действующего (-ую)'");
		ИначеЕсли Падеж = 5 Тогда
			ТекстСУчетомПола = НСтр("ru = 'действующим (-ей)'");
		ИначеЕсли Падеж = 6 Тогда
			ТекстСУчетомПола = НСтр("ru = 'действующем (-ей)'");
		Иначе
			ТекстСУчетомПола = НСтр("ru = 'действующий (-ая)'");
		КонецЕсли;
	Иначе
		Если Падеж = 2 Тогда
			ТекстСУчетомПола = ?(Пол = 2, НСтр("ru = 'действующей'"), НСтр("ru = 'действующего'"));
		ИначеЕсли Падеж = 3 Тогда
			ТекстСУчетомПола = ?(Пол = 2, НСтр("ru = 'действующей'"), НСтр("ru = 'действующему'"));
		ИначеЕсли Падеж = 4 Тогда
			ТекстСУчетомПола = ?(Пол = 2, НСтр("ru = 'действующую'"), НСтр("ru = 'действующего'"));
		ИначеЕсли Падеж = 5 Тогда
			ТекстСУчетомПола = ?(Пол = 2, НСтр("ru = 'действующей'"), НСтр("ru = 'действующим'"));
		ИначеЕсли Падеж = 6 Тогда
			ТекстСУчетомПола = ?(Пол = 2, НСтр("ru = 'действующей'"), НСтр("ru = 'действующем'"));
		Иначе
			ТекстСУчетомПола = ?(Пол = 2, НСтр("ru = 'действующая'"), НСтр("ru = 'действующий'"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстСУчетомПола;
	
КонецФункции

#КонецОбласти
