////////////////////////////////////////////////////////////////////////////////
// Подсистема "Работа с номенклатурой".
// ОбщийМодуль.РаботаСНоменклатуройСлужебный.
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ВыполнениеМетодов

// Выполнение команды сервиса.
//
// Параметры:
//   ПараметрыКоманды - Структура - параметры вызова или имя команды.
//   Отказ - Булево - признак ошибки выполнения.
// Возврат
//   Строка, Массив, Структура - возвращаемые данные сервиса.
//
Функция ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ) Экспорт
	
	// Получение параметров соединения м сервисом.
	СохранятьПараметрыСеанса = Ложь;
	ПараметрыСоединения = ПараметрыСоединенияССервисом(ПараметрыКоманды.Аутентификация, Отказ);
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыКоманды.Таймаут) Тогда
		ПараметрыСоединения.Таймаут = ПараметрыКоманды.Таймаут;
	КонецЕсли;
	
	// Общая ошибка.
	ПараметрыКоманды.Ошибки.Вставить(401, НСтр("ru = 'Ошибка аутентификации.'"));
	ПараметрыКоманды.Ошибки.Вставить(429, НСтр("ru = 'Превышено количество запросов к сервису.'"));
	ПараметрыКоманды.Ошибки.Вставить(500, НСтр("ru = 'Внутренняя ошибка сервиса.'"));
	ПараметрыКоманды.Ошибки.Вставить(502, НСтр("ru = 'Внутренняя ошибка сервиса.'"));
	
	// Установка соединения  в сервисом.
	Попытка
		Соединение = Новый HTTPСоединение(ПараметрыСоединения.ИмяСервера, ПараметрыСоединения.Порт,,,
			ПараметрыСоединения.Прокси, ПараметрыСоединения.Таймаут, ПараметрыСоединения.ЗащищенноеСоединение);
	Исключение
		ТекстСообщения = НСтр("ru='Отсутствует соединение с сервисом 1С:Номенклатура'")
			+ Символы.ПС + НСтр("ru ='Подробности см. в журнале регистрации.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		ВыполнитьЗаписьСобытияВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), УровеньЖурналаРегистрации.Ошибка);
		Возврат Неопределено;
	КонецПопытки;

	// Установка параметров запроса.
	HTTPЗапрос = Новый HTTPЗапрос(ПараметрыКоманды.Адрес);
	
	// Установка заголовков запроса.
	Для каждого ЭлементКоллекции Из ПараметрыСоединения.Заголовки Цикл
		HTTPЗапрос.Заголовки.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
	КонецЦикла;
	Если ПараметрыКоманды.Свойство("Заголовки") Тогда
		Для каждого ПараметрЗаголовка Из ПараметрыКоманды.Заголовки Цикл
			HTTPЗапрос.Заголовки.Вставить(ПараметрЗаголовка.Ключ, ПараметрЗаголовка.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыКоманды.Данные) Тогда
		Если ТипЗнч(ПараметрыКоманды.Данные) = Тип("ДвоичныеДанные") Тогда
			HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ПараметрыКоманды.Данные);
		Иначе
			HTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыКоманды.Данные);
		КонецЕсли;
	КонецЕсли;
	
	// Выполнение запроса HTTP к сервису.
	Попытка
		
		Если ВРег(ПараметрыКоманды.Метод) = "GET" Тогда
			HTTPОтвет = Соединение.Получить(HTTPЗапрос);
		ИначеЕсли ВРег(ПараметрыКоманды.Метод) = "POST" Тогда
			HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		ИначеЕсли ВРег(ПараметрыКоманды.Метод) = "PUT" Тогда
			HTTPОтвет = Соединение.Записать(HTTPЗапрос);
		ИначеЕсли ВРег(ПараметрыКоманды.Метод) = "DELETE" Тогда
			HTTPЗапрос.Заголовки.Вставить("Content-Length", СтрДлина(HTTPЗапрос.ПолучитьТелоКакСтроку()));
			HTTPОтвет = Соединение.Удалить(HTTPЗапрос);
		Иначе
			ВызватьИсключение НСтр("ru = 'Ошибка выполнения команды сервиса.'");
		КонецЕсли;
		
		КодСостояния = HTTPОтвет.КодСостояния;
		Данные = HTTPОтвет.ПолучитьТелоКакСтроку();
		
	Исключение
		ПараметрыОшибки = Новый Структура("ПодробныйТекстОшибки", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат ОбработатьОшибкуСервиса(ПараметрыКоманды, 0, ПараметрыОшибки, Отказ);
	КонецПопытки;
	
	// Обработка результата запроса.
	Результат = ОбработатьОтветСервиса(ПараметрыКоманды, КодСостояния, Данные, Отказ);
	
	Возврат Результат;
	
КонецФункции

// Идентификатор минимального набора полей.
// 
// Возвращаемое значение:
//   Строка - идентификатор.
//
Функция НаборПолейМинимальный() Экспорт
	
	// Минимальный набор полей возвращаемых полей fieldSet.
	// Дает описание ссылки на объект, содержит только идентификатор и текстовое представление объекта.
	
	Возврат "min";
	
КонецФункции

// Идентификатор стандартного набора полей.
// 
// Возвращаемое значение:
//   Строка - идентификатор.
//
Функция НаборПолейСтандартный() Экспорт
	
	// Стандартный набор возвращаемых полей fieldSet.
	// Содержит поля набора min и дополнительные поля, необходимые для отображения списка или дерева объектов.
	
	Возврат "standard";
	
КонецФункции

// Идентификатор максимального набора полей.
// 
// Возвращаемое значение:
//   Строка - идентификатор.
//
Функция НаборПолейМаксимальный() Экспорт
	
	// Максимальный набор возвращаемых полей fieldSet.
	// Содержит поля standard и все остальные, используется в основном для работы с конкретным объектом,
	// как правило для создания этого объекта на клиентской стороне.
	
	Возврат "max";
	
КонецФункции

#КонецОбласти

#Область РаботаСДанными

// Получение вида номенклатуры информационной базы по идентификаторам.
//
// Параметры:
//  ИдентификаторыКатегорий	 - Массив (Строка) - массив идентификаторов.
// 
// Возвращаемое значение:
//  Массив - массив ссылок.
//
Функция ВидыНоменклатурыПоИдентификаторам(ИдентификаторыКатегорий) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ВидНоменклатуры КАК ВидНоменклатуры
	|ИЗ
	|	РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеВидовНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ИдентификаторКатегории В(&ИдентификаторыКатегорий)";
	
	Запрос.УстановитьПараметр("ИдентификаторыКатегорий", ИдентификаторыКатегорий);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидНоменклатуры");
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Конвертирует дату из формата UnixTime в тип Дата.
// Параметры:
//   Источник - Число - число в формате UnixTime, например 1405955187848899.
//
Функция ДатаИзUnixTime(Источник) Экспорт
	
	Возврат МестноеВремя(Дата(1970, 1, 1, 0 ,0, 0) + Источник / 1000);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеМетодыAPI

// Общие параметры вызова команд сервиса.
//
Функция ОписаниеПараметровКомандыСервиса() Экспорт
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("Наименование");   // Полное наименование метода.
	ПараметрыКоманды.Вставить("Адрес");          // Адрес URI метода.
	ПараметрыКоманды.Вставить("Метод");          // Метод HTTP соединения, например POST.
	ПараметрыКоманды.Вставить("Таймаут");        // Длительность ожидания ответа.
	ПараметрыКоманды.Вставить("Данные");         // Двоичные данные или строка.
	ПараметрыКоманды.Вставить("Аутентификация"); // Требуется аутентификация.
	ПараметрыКоманды.Вставить("БлокироватьСообщенияОбОшибках"); // Не выводить сообщения об ошибках.
	ПараметрыКоманды.Вставить("Результат");      // Свойство возврата результата, например "path[0].cat".
	ПараметрыКоманды.Вставить("Обработка");      // Описание обработки данных результата.
	ПараметрыКоманды.Вставить("ДополнительныеПараметры"); // Дополнительные параметры.
	ПараметрыКоманды.Вставить("Ошибки",          Новый Соответствие); // Соответствие ошибок, например: (404, "Не найдено").
	
	Возврат ПараметрыКоманды;
		
КонецФункции

// Общие настройки для подключения к сервису 1С:Бизнес-сеть.
//
Функция ПараметрыСоединенияССервисом(НеобходимаАутентификация, Отказ)

	ПараметрыСоединения = Новый Структура;
	ПараметрыСоединения.Вставить("ИмяСервера", "catalog-api.1c.ru");
	ПараметрыСоединения.Вставить("Порт", 443);
	ПараметрыСоединения.Вставить("Таймаут", 30);
	ПараметрыСоединения.Вставить("Прокси", ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси("https"));
	ПараметрыСоединения.Вставить("ЗащищенноеСоединение",
		ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(, Новый СертификатыУдостоверяющихЦентровОС));
		
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json;charset=UTF-8");
	
	Если НеобходимаАутентификация = Истина Тогда
		// Получение тикета интернет-поддержки.
		УстановитьПривилегированныйРежим(Истина);
		ТикетАутентификации = ИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки("1c-nomenklatura");
		УстановитьПривилегированныйРежим(Ложь);
		Если ЗначениеЗаполнено(ТикетАутентификации.КодОшибки) Тогда
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось подключиться к порталу интернет-поддержки по причине:
					|%1'"),
				ТикетАутентификации.СообщениеОбОшибке);
			ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки,,,, Отказ);
			Возврат Неопределено;
		КонецЕсли;
		Заголовки.Вставить("Authorization", "Basic " + СтрокаBase64БезBOM("AUTH_TOKEN:" + ТикетАутентификации.Тикет));
	КонецЕсли;
	ПараметрыСоединения.Вставить("Заголовки", Заголовки);
		
	Возврат ПараметрыСоединения;

КонецФункции

Функция СтрокаBase64БезBOM(СтрокаДанных)

	ПотокВПамяти = Новый ПотокВПамяти();
	Текст = Новый ЗаписьТекста(ПотокВПамяти, КодировкаТекста.UTF8, , Символы.ПС);
	Текст.Записать(СтрокаДанных);
	Текст.Закрыть();
	ДвоичныеДанные = ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();
	СтрокаФорматBase64 = Base64Строка(ДвоичныеДанные);
	
	СтрокаФорматBase64 = СтрЗаменить(СтрокаФорматBase64, Символы.ВК, "");
	СтрокаФорматBase64 = СтрЗаменить(СтрокаФорматBase64, Символы.ПС, "");
	
	Возврат СтрокаФорматBase64;

КонецФункции


// Обработка ответа сервиса.
//
// Параметры:
//  ПараметрыКоманды - Структура - параметры команды, см.БизнесСеть.ОписаниеПараметровКомандыСервиса().
//  КодСостояния	 - Строка - код состояния ответа HTTP-соединения.
//  Данные			 - Структура, Строка - возвращаемые данные сервиса.
//  Отказ			 - Булево - результат проверки.
// 
// Возвращаемое значение:
//  Произвольный - возвращаемый результат обработки.
//
Функция ОбработатьОтветСервиса(ПараметрыКоманды, КодСостояния, Данные, Отказ)
	
	// Инициализация возврата ошибки.
	Результат = Неопределено;
	
	Если ПараметрыКоманды.Ошибки.Получить(КодСостояния) <> Неопределено Тогда
		Возврат ОбработатьОшибкуСервиса(ПараметрыКоманды, КодСостояния, Данные, Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыКоманды.Результат) Тогда
		Данные = ЗначениеИзСтрокиJSON(Данные);
		Данные = ПолучитьЗначенияДанныеСтруктурыПоАбсолютномуПути(Данные, ПараметрыКоманды.Результат, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПараметрыКоманды.Обработка <> Неопределено Тогда
		Результат = ОбработатьРезультатОтветаСервиса(ПараметрыКоманды.Обработка, КодСостояния,
			Данные, Отказ);
	Иначе
		Результат = ЗначениеИзСтрокиJSON(Данные);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьОшибкуСервиса(ПараметрыКоманды, КодСостояния, Результат, Отказ)

	ТекстОшибки = ПараметрыКоманды.Ошибки.Получить(КодСостояния);
	
	Если ТекстОшибки = Ложь Тогда
		Возврат Ложь;
	ИначеЕсли ПустаяСтрока(ТекстОшибки) Тогда
		ТекстОшибки = НСтр("ru = 'Работа с номенклатурой.Ошибка'");
	КонецЕсли;
	
	Отказ = Истина;
	
	ТекстОшибкиСервиса = "";
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Свойство("message") Тогда
			ТекстОшибкиСервиса = Результат.message;
		ИначеЕсли Результат.Свойство("error_description") Тогда
			ТекстОшибкиСервиса = Результат.error_description;
		ИначеЕсли Результат.Свойство("ПодробныйТекстОшибки") Тогда
			ТекстОшибкиСервиса = Результат.ПодробныйТекстОшибки;
		КонецЕсли;
	КонецЕсли;
	
	ПодробныйТекстОшибки = ТекстОшибки
		+ ?(КодСостояния > 200, Символы.ПС + НСтр("ru = 'Код состояния:'") + " " + КодСостояния, "")
		+ Символы.ПС + ПараметрыКоманды.Адрес
		+ ?(ТекстОшибкиСервиса = "", "", Символы.ПС + ТекстОшибкиСервиса);
	
	Если Не (ПараметрыКоманды.Свойство("БлокироватьСообщенияОбОшибках")
		И ПараметрыКоманды.БлокироватьСообщенияОбОшибках = Истина) Тогда
		Если Пользователи.ЭтоПолноправныйПользователь() Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru ='Подробности см. в журнале регистрации.'");
		КонецЕсли;
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с номенклатурой.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())
		+ ПараметрыКоманды.Наименование, УровеньЖурналаРегистрации.Ошибка,,, ПодробныйТекстОшибки);
		
	Возврат Неопределено;
КонецФункции

Функция ОбработатьРезультатОтветаСервиса(Обработка, КодСостояния, Данные, Отказ)
	
	ЗначениеДанных = ЗначениеИзСтрокиJSON(Данные);
	
	Если ТипЗнч(Обработка) = Тип("ТаблицаЗначений")
		И ТипЗнч(ЗначениеДанных) = Тип("Массив") Тогда
		
		Результат = МассивСтруктурВТаблицуЗначений(ЗначениеДанных, Обработка);
		
	ИначеЕсли ТипЗнч(Обработка) = Тип("Строка") Тогда
		
		Результат = ПреобразоватьЗначениеСервиса(ЗначениеДанных, Обработка, КодСостояния);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТипОбъектаXDTO(Путь, URIПространстваИмен = "http://catalog-api.1c.ru/XMLSchema")
	
	МассивПути = Новый СписокЗначений;
	МассивПути.ЗагрузитьЗначения(СтрРазделить(Путь, "."));
	МассивПути = МассивПути.ВыгрузитьЗначения();
		
	ПервыйЭлемент = МассивПути[0];
	Если Лев(ПервыйЭлемент,1) = "{" И Прав(ПервыйЭлемент,1) = "}" Тогда
		ИмяПакета = Сред(ПервыйЭлемент, 2, СтрДлина(ПервыйЭлемент) - 2);
		Коллекция = ФабрикаXDTO.Пакеты.Получить(ИмяПакета).КорневыеСвойства;
	Иначе
		ТипОбъекта = ФабрикаXDTO.Тип(URIПространстваИмен, ПервыйЭлемент);
		Коллекция = ТипОбъекта.Свойства;
	КонецЕсли;
	
	МассивПути.Удалить(0);
	Пока МассивПути.Количество() > 0 Цикл
		
		Если Коллекция = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Свойство = Коллекция.Получить(МассивПути[0]);
		Если Свойство = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ТипОбъекта = Свойство.Тип;
		МассивПути.Удалить(0);
		Попытка
			Коллекция = ТипОбъекта.Свойства;
		Исключение
			Коллекция = Неопределено;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ТипОбъекта;
	
КонецФункции

// Типы получаемых данных.
// 
// Возвращаемое значение:
//  Структура - описание типов:
//   * Простой         - простой тип.
//   * Строка          - тип Строка.
//   * Число           - тип Число.
//   * Булево          - тип Булево.
//   * Структура       - тип Структура.
//   * Дата            - тип Дата.
//   * ТаблицаЗначений - тип ТаблицаЗначений.
//
Функция Типы()
	
	Результат = Новый Структура;
	Результат.Вставить("Простой",   Новый ОписаниеТипов("Строка, Булево, Число, Дата"));
	Результат.Вставить("Булево",    Новый ОписаниеТипов("Булево"));
	Результат.Вставить("Число",     Новый ОписаниеТипов("Число"));
	Результат.Вставить("Дата",      Новый ОписаниеТипов("Дата"));
	Результат.Вставить("Строка",    Новый ОписаниеТипов("Строка"));
	Результат.Вставить("Структура", Новый ОписаниеТипов("Структура"));
	Результат.Вставить("Массив",    Новый ОписаниеТипов("Массив"));
	Результат.Вставить("Таблица",   Новый ОписаниеТипов("ТаблицаЗначений"));
	
	Возврат Результат;
	
КонецФункции


#КонецОбласти

#Область ОписаниеВозвращаемыхЗначений

// Описание эталонной карточки номенклатуры Nomenclature.
//
Функция ОписаниеТаблицыНоменклатуры()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ЕдиницаИзмерения",        Типы().Структура,   "unit|Nomenclature.unit");
	Результат.Колонки.Добавить("ШтрихКоды",               Типы().Массив,      "barcodes");
	Результат.Колонки.Добавить("Изображения",             Типы().Таблица,     "images|Nomenclature.images");
	Результат.Колонки.Добавить("Классификаторы",          Типы().Таблица,     "classifiers|Nomenclature.classifiers");
	Результат.Колонки.Добавить("Характеристики",          Типы().Таблица,     "features|Nomenclature.features");
	Результат.Колонки.Добавить("ДополнительныеРеквизиты", Типы().Таблица,     "attributes|Nomenclature.attributes");
	Результат.Колонки.Добавить("Идентификатор",           Типы().Строка,      "id");
	Результат.Колонки.Добавить("Наименование",            Типы().Строка,      "name");
	Результат.Колонки.Добавить("ИдентификаторКатегории",  Типы().Строка,      "categoryId");
	Результат.Колонки.Добавить("НаименованиеКатегории",   Типы().Строка,      "categoryName");
	Результат.Колонки.Добавить("СтавкаНДС",               Типы().Строка,       "vat");
	Результат.Колонки.Добавить("Тип",                     Типы().Строка,      "type|ДесериализоватьТипНоменклатуры");
	Результат.Колонки.Добавить("УчетГТД",                 Типы().Булево,      "requiredGTD");
	Результат.Колонки.Добавить("УчастникЕГАИС",           Типы().Булево,      "alcoholContaining");
	Результат.Колонки.Добавить("УчастникГИСМ",            Типы().Булево,      "requiredGISM");
	Результат.Колонки.Добавить("ОблагаетсяАкцизом",       Типы().Булево,      "excisable");
	Результат.Колонки.Добавить("НаименованиеДляПечати",   Типы().Строка,      "nameShort");
	Результат.Колонки.Добавить("ИдентификаторБренда",     Типы().Строка,      "brandId");
	Результат.Колонки.Добавить("НаименованиеБренда",      Типы().Строка,      "brandName");
	Результат.Колонки.Добавить("ИдентификаторПроизводителя", Типы().Строка,   "manufacturerId");
	Результат.Колонки.Добавить("НаименованиеПроизводителя",  Типы().Строка,   "manufacturerName");
	Результат.Колонки.Добавить("Артикул",                 Типы().Строка,      "manufacturerCode");
	Результат.Колонки.Добавить("Описание",                Типы().Строка,      "description");
	Результат.Колонки.Добавить("ИдентификаторРекламнойЗаписи", Типы().Строка, "advertId");
	Результат.Колонки.Добавить("ДатаИзменения",           Типы().Дата,        "modified|ДесериализоватьДату");
	Результат.Колонки.Добавить("ЗаполненныеРеквизиты",    Типы().Массив,      "propertiesHavingValue|Nomenclature.propertiesHavingValue");
	Результат.Колонки.Добавить("РеквизитыХарактеристик",  Типы().Массив,      "featuresAttributes");
	Результат.Колонки.Добавить("Вес",                     Типы().Структура,   "weight|Nomenclature.dimensionalProperties");
	Результат.Колонки.Добавить("Объем",                   Типы().Структура,   "volume|Nomenclature.dimensionalProperties");
	Результат.Колонки.Добавить("Площадь",                 Типы().Структура,   "area|Nomenclature.dimensionalProperties");
	Результат.Колонки.Добавить("Длина",                   Типы().Структура,   "length|Nomenclature.dimensionalProperties");
	Результат.Колонки.Добавить("КоличествоВУпаковке",     Типы().Структура,   "itemCount|Nomenclature.itemCount");
	Результат.Колонки.Добавить("КоличествоХарактеристик", Типы().Число,      "featureCount");
	
	Возврат Результат;
	
КонецФункции

// Описание типа классификатора рубрики Nomenclature.classifiers.
//
Функция ОписаниеТаблицыКлассификатораНоменклатуры()
	
	Типы().Строка = Новый ОписаниеТипов("Строка");
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Наименование",  Типы().Строка, "name");
	Результат.Колонки.Добавить("Идентификатор", Типы().Строка, "code");
	Результат.Колонки.Добавить("Описание",      Типы().Строка, "description");
	
	Возврат Результат;

КонецФункции

// Описание типа характеристик номенклатуры Nomenclature.features.
//
Функция ОписаниеТаблицыХарактеристикНоменклатуры()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Штрихкоды",     Новый ОписаниеТипов("Массив"), "barcodes" );
	Результат.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"), "featureId");
	Результат.Колонки.Добавить("Наименование",  Новый ОписаниеТипов("Строка"), "name");
	
	Возврат Результат;
	
КонецФункции

// Описание типа характеристик категории Category.features.
//
Функция ОписаниеТаблицыХарактеристикКатегорий()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Наименование",            Типы().Строка,  "name");
	Результат.Колонки.Добавить("ДополнительныеРеквизиты", Типы().Таблица, "attributes|Category.features.attributes");
	Результат.Колонки.Добавить("Идентификаторы",          Типы().Массив,  "featureIds");
	
	Возврат Результат;
	
КонецФункции

// Описание поиска дополнительных реквизитов NomenclatureResponse.nomenclatures.attributes.
//
Функция ОписаниеТаблицыДополнительныхРеквизитовНоменклатуры()
	
	ПростойТип = Новый ОписаниеТипов("Строка, Булево, Число, Дата");
	Типы().Строка  = Новый ОписаниеТипов("Строка");
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Идентификатор",              Типы().Строка,  "attributeId");
	Результат.Колонки.Добавить("Наименование",               Типы().Строка,  "name");
	Результат.Колонки.Добавить("Значение",                   ПростойТип, "value");
	Результат.Колонки.Добавить("ИдентификаторЗначения",      Типы().Строка,  "valueId.id");
	Результат.Колонки.Добавить("СтроковоеЗначение",          Типы().Строка,  "valueId.value");
	Результат.Колонки.Добавить("КодКлассификатора",          Типы().Строка,  "classifier.code");
	Результат.Колонки.Добавить("НаименованиеКлассификатора", Типы().Строка,  "classifier.name");
	Результат.Колонки.Добавить("ОписаниеКлассификатора",     Типы().Строка,  "classifier.description");
	
	Возврат Результат;
	
КонецФункции

// Описание поиска реквизитов категории CategoryResponse.categories.attributes
//
Функция ОписаниеТаблицыРеквизитовКатегорий()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Идентификатор",          Типы().Строка,  "attributeId");
	Результат.Колонки.Добавить("ИдентификаторыЗначений", Типы().Массив,  "valueIds");
	Результат.Колонки.Добавить("Наименование",           Типы().Строка, "name");
	Результат.Колонки.Добавить("Обязательный",           Типы().Строка,  "required");
	Результат.Колонки.Добавить("МинимальноеЗначение",    Типы().Строка,  "min");
	Результат.Колонки.Добавить("МаксимальноеЗначение",   Типы().Строка,  "max");
	Результат.Колонки.Добавить("Ранг",                   Типы().Число,   "rank");
	Результат.Колонки.Добавить("ДатаИзменения",          Типы().Дата,    "modified|ДесериализоватьДату");
	Результат.Колонки.Добавить("Тип",                    Типы().Строка,  "type|ДесериализоватьТипЗначения");
	
	Возврат Результат;
	
КонецФункции

// Описание поиска реквизитов AttributeResponse.attributes
//
Функция ОписаниеТаблицыДополнительныхРеквизитов()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Идентификатор", Типы().Строка, "id");
	Результат.Колонки.Добавить("Наименование",  Типы().Строка, "name");
	Результат.Колонки.Добавить("Тип",           Типы().Строка, "type|ДесериализоватьТипЗначения");
	Результат.Колонки.Добавить("ДатаИзменения", Типы().Дата,   "modified|ДесериализоватьДату");
	Результат.Колонки.Добавить("ИдентификаторыКатегорий", Типы().Массив,    "categoryIds");
	Результат.Колонки.Добавить("ЕдиницаИзмерения",        Типы().Структура, "unit|Attribute.unit");
	
	Возврат Результат;
	
КонецФункции

// Описание поиска значений реквизитов AttributeValueResponse.attributeValues.
//
Функция ОписаниеТаблицыЗначенияДополнительныхРеквизитов()

	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Идентификатор",           Типы().Строка,  "id");
	Результат.Колонки.Добавить("Значение",                Типы().Строка,  "value");
	Результат.Колонки.Добавить("ДатаИзменения",           Типы().Дата,    "modified|ДесериализоватьДату");
	Результат.Колонки.Добавить("ДополнительныеРеквизиты", Типы().Таблица, "reference|AttributeValueResponse.attributeValues.reference");
	
	Возврат Результат;
	
КонецФункции

// Описание поиска значений категорий с дополнительными реквизитами
// AttributeValuesByCategoriesResponse.attributeValuesByCategories.
//
Функция ОписаниеТаблицыЗначенияДополнительныхРеквизитовКатегорий()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ИдентификаторКатегории",                Типы().Строка, "categoryId");
	Результат.Колонки.Добавить("НаименованиеКатегории",                 Типы().Строка, "categoryName");
	Результат.Колонки.Добавить("ИдентификаторДополнительногоРеквизита", Типы().Строка, "attributeId");
	Результат.Колонки.Добавить("НаименованиеДополнительногоРеквизита",  Типы().Строка, "attributeName");
	Результат.Колонки.Добавить("Значения",                              Типы().Таблица,
		"values|AttributeValuesByCategoriesResponse.attributeValuesByCategories.values");
	
	Возврат Результат;
	
КонецФункции

// Описание поиска характеристик FeatureResponse.FeatureResponse.
//
Функция ОписаниеТаблицыХарактеристики()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Идентификатор",           Типы().Строка, "id");
	Результат.Колонки.Добавить("Наименование",            Типы().Строка, "value");
	Результат.Колонки.Добавить("ДатаИзменения",           Типы().Дата,   "modified|ДесериализоватьДату");
	Результат.Колонки.Добавить("ДополнительныеРеквизиты", Типы().Таблица,
		"attributes|Feature.attributes");
	Результат.Колонки.Добавить("ИдентификаторыКатегорий", Типы().Массив, "categoryIds");
	
	Возврат Результат;
	
КонецФункции

// Описание поиска рекламных записей AdvertResponse.adverts.
//
Функция ОписаниеТаблицыРекламныеЗаписи()

	Типы().Строка = Новый ОписаниеТипов("Строка");
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Идентификатор", Типы().Строка, "id");
	Результат.Колонки.Добавить("Наименование",  Типы().Строка, "name");
	Результат.Колонки.Добавить("Сайт",          Типы().Строка, "site");
	Результат.Колонки.Добавить("БаннерURL",     Типы().Строка, "bannerImageLink");
	Результат.Колонки.Добавить("ЛоготипURL",    Типы().Строка, "logoIconLink");
	
	Возврат Результат;
	
КонецФункции

// Описание единиц измерения Nomenclature.unit.
//
Функция ОписаниеТаблицыЕдиницыИзмеренияНоменклатуры()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ОКЕИ",                   Типы().Строка, "okei");
	Результат.Колонки.Добавить("Наименование",           Типы().Строка, "name");
	Результат.Колонки.Добавить("ПолноеНаименование",     Типы().Строка, "fullName");
	Результат.Колонки.Добавить("ВнутреннееНаименование", Типы().Строка, "interName");
	Результат.Колонки.Добавить("Тип",                    Типы().Строка, "type");
	Результат.Колонки.Добавить("БазовыйОКЕИ",            Типы().Строка, "baseOKEI");
	Результат.Колонки.Добавить("ЧислительКратности",     Типы().Число,  "baseUnitCount");
	Результат.Колонки.Добавить("ЗнаменательКратности",   Типы().Число,  "unitCount");
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеТаблицыМернойХарактеристики()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ЧислительКратности",   Типы().Число,     "unitCount");
	Результат.Колонки.Добавить("ЗнаменательКратности", Типы().Число,     "baseUnitCount");
	Результат.Колонки.Добавить("ЕдиницаИзмерения",     Типы().Структура, "unit|Nomenclature.unit");
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеТаблицыМерныхХарактеристикКатегорий()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Вес",                 Типы().Структура, "weight|Category.metrics");
	Результат.Колонки.Добавить("Объем",               Типы().Структура, "volume|Category.metrics");
	Результат.Колонки.Добавить("Длина",               Типы().Структура, "length|Category.metrics");
	Результат.Колонки.Добавить("Площадь",             Типы().Структура, "area|Category.metrics");
	Результат.Колонки.Добавить("КоличествоВУпаковке", Типы().Структура, "itemCount|Category.metrics");
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеТаблицыМернойХарактеристикиКатегории()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("МинимальноеЗначение",  Типы().Число, "min");
	Результат.Колонки.Добавить("МаксимальноеЗначение", Типы().Число, "max");
	Результат.Колонки.Добавить("ЕдиницаИзмерения",     Типы().Структура, "unit|Nomenclature.unit");
	
	Возврат Результат;
		
КонецФункции

Функция ОписаниеТаблицыКоличестваВУпаковке()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Количество",       Типы().Число, "unitCount");
	Результат.Колонки.Добавить("ЕдиницаИзмерения", Типы().Структура,  "unit|Nomenclature.unit");
	
	Возврат Результат;
	
КонецФункции

// Описание единиц измерения Attribute.unit.
//
Функция ОписаниеТаблицыЕдиницыИзмеренияДополнительныхРеквизитов()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ОКЕИ",                   Типы().Строка, "okei");
	Результат.Колонки.Добавить("Наименование",           Типы().Строка, "name");
	Результат.Колонки.Добавить("ПолноеНаименование",     Типы().Строка, "fullName");
	Результат.Колонки.Добавить("ВнутреннееНаименование", Типы().Строка, "interName");
	Результат.Колонки.Добавить("Тип",                    Типы().Строка, "type");
	Результат.Колонки.Добавить("БазовыйОКЕИ",            Типы().Строка, "baseOKEI");
	Результат.Колонки.Добавить("ЧислительКратности",     Типы().Число,  "baseUnitCount");
	Результат.Колонки.Добавить("ЗнаменательКратности",   Типы().Число,  "unitCount");
	
	Возврат Результат;
	
КонецФункции

// Описание единиц измерения Unit.
//
Функция ОписаниеТаблицыЕдиницыИзмеренияОКЕИ()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ОКЕИ",                     Типы().Строка, "okei");
	Результат.Колонки.Добавить("Наименование",             Типы().Строка, "name");
	Результат.Колонки.Добавить("НациональноеОбозначение",  Типы().Строка, "nationalSymbol");
	Результат.Колонки.Добавить("МеждународноеОбозначение", Типы().Строка, "internationalSymbol");
	Результат.Колонки.Добавить("НациональныйКод",          Типы().Строка, "nationalCodeMark");
	Результат.Колонки.Добавить("МеждународныйКод",         Типы().Строка, "internationalCodeMark");
	Результат.Колонки.Добавить("Тип",                      Типы().Строка, "type");
	Результат.Колонки.Добавить("ЧислительКратности",         Типы().Число,  "baseUnitCount");
	
	Возврат Результат;
	
КонецФункции

// Описание поиска брендов BrandResponse.brands.
//
Функция ОписаниеТаблицыБренды()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Идентификатор",              Типы().Строка, "id");
	Результат.Колонки.Добавить("Наименование",               Типы().Строка, "name");
	Результат.Колонки.Добавить("ИдентификаторПроизводителя", Типы().Строка, "manufacturerId");
	Результат.Колонки.Добавить("НаименованиеПроизводителя",  Типы().Строка, "manufacturerName");
	Результат.Колонки.Добавить("ДатаИзменения",              Типы().Дата,   "modified|ДесериализоватьДату");
	Результат.Колонки.Добавить("Логотипы",                   Типы().Массив, "images");
	
	Возврат Результат;
	
КонецФункции

// Описание поиска производителей ManufacturerResponse.manufacturers.
//
Функция ОписаниеТаблицыПроизводители()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Идентификатор",    Типы().Строка, "id");
	Результат.Колонки.Добавить("Наименование",     Типы().Строка, "name");
	Результат.Колонки.Добавить("GLN",              Типы().Строка, "gln");
	Результат.Колонки.Добавить("ИНН",              Типы().Строка, "inn");
	Результат.Колонки.Добавить("КПП",              Типы().Строка, "kpp");
	Результат.Колонки.Добавить("Сайт",             Типы().Строка, "site");
	Результат.Колонки.Добавить("Адрес",            Типы().Строка, "address");
	Результат.Колонки.Добавить("Факс",             Типы().Строка, "fax");
	Результат.Колонки.Добавить("Телефоны",         Типы().Массив, "phones");
	Результат.Колонки.Добавить("ЭлектроннаяПочта", Типы().Массив, "emails");
	Результат.Колонки.Добавить("ДатаИзменения",    Типы().Дата,   "modified|ДесериализоватьДату");
	Результат.Колонки.Добавить("Логотипы",         Типы().Массив, "images");
	Возврат Результат;
	
КонецФункции

// Описание категорий Category.
//
Функция ОписаниеТаблицыКатегории()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ДополнительныеРеквизиты",      Типы().Таблица,   "attributes|CategoryResponse.categories.attributes");
	Результат.Колонки.Добавить("Характеристики",               Типы().Структура, "features|CategoryResponse.categories.features");
	Результат.Колонки.Добавить("Классификаторы",               Типы().Таблица,   "classifiers|CategoryResponse.categories.classifiers");
	Результат.Колонки.Добавить("Изображения",                  Типы().Массив,    "images");
	Результат.Колонки.Добавить("Идентификатор",                Типы().Строка,    "id");
	Результат.Колонки.Добавить("Наименование",                 Типы().Строка,    "name");
	Результат.Колонки.Добавить("ИдентификаторРодителя",        Типы().Строка,    "parentId");
	Результат.Колонки.Добавить("НаименованиеРодителя",         Типы().Строка,    "parentName");
	Результат.Колонки.Добавить("КоличествоПодчиненных",        Типы().Число,     "childrenCount");
	Результат.Колонки.Добавить("Ранг",                         Типы().Число,     "rank");	
	Результат.Колонки.Добавить("СтавкаНДС",                    Типы().Строка,     "vat");
	Результат.Колонки.Добавить("Тип",                          Типы().Строка,     "type|ДесериализоватьТипНоменклатуры");
	Результат.Колонки.Добавить("УчастникЕГАИС",                Типы().Булево,    "alcoholContaining");
	Результат.Колонки.Добавить("УчастникГИСМ",                 Типы().Булево,    "requiredGISM");
	Результат.Колонки.Добавить("Описание",                     Типы().Строка,    "description");
	Результат.Колонки.Добавить("ОтсылочныйИдентификатор",      Типы().Строка,    "referenceId");
	Результат.Колонки.Добавить("ИдентификаторРекламнойЗаписи", Типы().Строка,    "advertId");
	Результат.Колонки.Добавить("ДатаИзменения",                Типы().Дата,      "modified|ДесериализоватьДату");
	Результат.Колонки.Добавить("МерныеХарактеристики",         Типы().Структура, "metrics|CategoryResponse.categories.metrics");
	
	Возврат Результат;
	
КонецФункции

// Описание категорий NomenclatureByBarcodes.
//
Функция ОписаниеТаблицыНоменклатурыПоШтрихкодам()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Идентификатор",    Типы().Строка,  "id");
	Результат.Колонки.Добавить("Наименование",     Типы().Строка,  "name");
	Результат.Колонки.Добавить("НаименованиеЕдиницыИзмерения", Типы().Строка,  "unitName");
	Результат.Колонки.Добавить("ШтрихКоды",        Типы().Массив,  "barcodes");
	Результат.Колонки.Добавить("Характеристики",   Типы().Таблица, "features");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПреобразованиеДанных

// Получение данных из строки в формате JSON.
//
Функция ЗначениеИзСтрокиJSON(Значение)
	
	// Проверка типа JSON
	Если ТипЗнч(Значение) <> Тип("Строка") Тогда
		Возврат Значение;
	КонецЕсли;
	ПервыйСимвол = Лев(Значение, 1);
	Если ПервыйСимвол <> "[" И ПервыйСимвол <> "{" Тогда
		Возврат Значение;
	КонецЕсли;
	
	Результат = Неопределено;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	Попытка
		ЧтениеJSON.УстановитьСтроку(Значение);
		Результат = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с номенклатурой.Преобразование данных'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Получение значения в формате JSON.
//
Функция ЗначениеВФорматJSON(Данные, ПараметрыЗаписи = Неопределено)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
	ЗаписатьJSON(ЗаписьJSON, Данные);
	Результат = ЗаписьJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

// Преобразование объекта XDTO в формат JSON.
//
// Параметры:
//  ОбъектXDTO	 - ОбъектXDTO - значение данных модели XDTO.
//  Уровень		 - Число - уровень вложенности.
// 
// Возвращаемое значение:
//  Строка - строка значения в формате JSON.
//
Функция ЗначениеXDTOВФорматJSON(Знач ЗначениеXDTO, Знач Уровень = 0)
	
	Если ЗначениеXDTO = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	ЗаписьJSON.УстановитьСтроку();
	
	ПрочитатьОбъектXDTOВЗаписьJSON(ЗначениеXDTO, ЗаписьJSON, Уровень);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

// Чтение значения объекта XTDO в запись JSON.
//
// Параметры:
//  ОбъектXDTO	 - Произвольный - элемент XDTO.
//  ЗаписьJSON	 - ЗаписьJSON - запись JSON.
//  Уровень		 - Число - уровень вложенности.
//
Процедура ПрочитатьОбъектXDTOВЗаписьJSON(Знач ЗначениеXDTO, ЗаписьJSON, Знач Уровень = 0)
	
	Если ТипЗнч(ЗначениеXDTO) = Тип("СписокXDTO") Тогда
		Если ЗначениеXDTO.Количество() Тогда
			Если Уровень > 0 Тогда
				ЗаписьJSON.ЗаписатьИмяСвойства(ЗначениеXDTO.ВладеющееСвойство.Имя);
			КонецЕсли;
			ЗаписьJSON.ЗаписатьНачалоМассива();
			Для каждого ЭлементСпискаXDTO Из ЗначениеXDTO Цикл
				ПрочитатьОбъектXDTOВЗаписьJSON(ЭлементСпискаXDTO, ЗаписьJSON, Уровень);
			КонецЦикла;
			ЗаписьJSON.ЗаписатьКонецМассива();
		Иначе
			ЗаписьJSON.ЗаписатьНачалоМассива();
			ЗаписьJSON.ЗаписатьКонецМассива();
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЗначениеXDTO) = Тип("ОбъектXDTO") Тогда
		Если Уровень > 0 Или ЗначениеXDTO.Свойства().Количество() > 1 Тогда
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
		КонецЕсли;
		Для каждого СвойствоXDTO Из ЗначениеXDTO.Свойства() Цикл
			Если ТипЗнч(ЗначениеXDTO[СвойствоXDTO.Имя]) = Тип("СписокXDTO") Тогда
				Если СвойствоXDTO.НижняяГраница > 0 
					ИЛИ ЗначениеXDTO[СвойствоXDTO.Имя].Количество() <> 0 
					ИЛИ Уровень = -1 Тогда
					ПрочитатьОбъектXDTOВЗаписьJSON(ЗначениеXDTO.ПолучитьСписок(СвойствоXDTO.Имя), ЗаписьJSON, Уровень + 1);
				КонецЕсли;
			ИначеЕсли ТипЗнч(ЗначениеXDTO[СвойствоXDTO.Имя]) = Тип("ОбъектXDTO") Тогда
				ЗаписьJSON.ЗаписатьИмяСвойства(СвойствоXDTO.Имя);
				ПрочитатьОбъектXDTOВЗаписьJSON(ЗначениеXDTO.Получить(СвойствоXDTO.Имя), ЗаписьJSON, Уровень + 1);
			Иначе	
				ЗначениеСвойства = ЗначениеJSON(ЗначениеXDTO.Получить(СвойствоXDTO.Имя));
				Если НЕ ЗначениеЗаполнено(ЗначениеСвойства) И СвойствоXDTO.НижняяГраница = 0 Тогда
					Продолжить;
				КонецЕсли;
				ЗаписьJSON.ЗаписатьИмяСвойства(СвойствоXDTO.Имя);	
				ЗаписьJSON.ЗаписатьЗначение(ЗначениеСвойства);
			КонецЕсли;
		КонецЦикла;
		Если Уровень > 0 Или ЗначениеXDTO.Свойства().Количество() > 1 Тогда
			ЗаписьJSON.ЗаписатьКонецОбъекта();
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЗначениеXDTO) <> Неопределено Тогда
		ЗаписьJSON.ЗаписатьЗначение(ЗначениеJSON(ЗначениеXDTO));
	КонецЕсли;
	
КонецПроцедуры

// Получение значение JSON простого типа (строка, число, дата, булево).
//
// Параметры:
//  Значение - Произвольный - значение преобразования.
// 
// Возвращаемое значение:
//  Строка, Число, Дата, Булево - преобразованное значение.
//
Функция ЗначениеJSON(Знач Значение)
	
	Если ТипЗнч(Значение) = Тип("Дата") Тогда
		Значение = Формат(Значение, "ДФ=yyyy-MM-dd; ДП=null");
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") И Значение = 0 Тогда
		Значение = Строка(Значение);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Заполнение массива приемника по массиву источника.
//
// Параметры:
//  МассивПриемник - Коллекция - коллекция приемник для заполнения, например ЗначениеXDTO, массив.
//  МассивИсточник - Коллекция - коллекция источник.
//
Процедура ДополнитьМассив(МассивПриемник, МассивИсточник)
	
	Если Не ЗначениеЗаполнено(МассивИсточник)
		ИЛИ ТипЗнч(МассивИсточник) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ЗначениеМассива Из МассивИсточник Цикл
		МассивПриемник.Добавить(ЗначениеМассива);
	КонецЦикла;
	
КонецПроцедуры

// Формирование строки параметров для HTTP запроса в формате "?Параметр1=Значение1&Параметр2...".
//
// Параметры:
//  Адрес	 - Строка - адрес ресурса.
//  Имя		 - Строка - имя параметра.
//  Значение - Строка - значение параметра.
//
Процедура ДобавитьПараметрАдресаHTML(Адрес, Имя, Знач Значение)
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		Значение = Формат(Значение, "ЧГ=");
	КонецЕсли; 
	
	Адрес = Адрес + ?(СтрНайти(Адрес, "?") = 0, "?", "&") + Имя + "=" + Значение;
	
КонецПроцедуры

// Получение структуры данных по абсолютному пути.
// Параметры:
//  Путь - Строка - например, "pathToRoot[0].categories".
//
// Возвращаемое значение:
//  Произвольный - возвращаемые данные.
//
Функция ПолучитьЗначенияДанныеСтруктурыПоАбсолютномуПути(Значение, Путь, Отказ)
	
	СвойстваПути = СтрРазделить(Путь, ".");
	Результат = ЗначениеСвойстваСтруктурыВРекурсии(Значение, СвойстваПути, Отказ);
	Возврат Результат;
	
КонецФункции

// Получить значение данных структуры в рекурсии.
//
// Параметры:
//  Значение - Произвольный - значения обработки.
//  СвойстваПути - Массив - элементы пути, например  pathToRoot[0]; categories.
//  Отказ - Булево - признак ошибки при разборе.
//
Функция ЗначениеСвойстваСтруктурыВРекурсии(Знач Значение, Знач СвойстваПути, Отказ = Ложь)
	
	Свойство = СвойстваПути[0];
	МеткаКоллекции = СтрНайти(Свойство, "[");
	ИндексКоллекции = Неопределено;
	Если МеткаКоллекции <> 0 Тогда
		ИндексКоллекции = Сред(Свойство, МеткаКоллекции + 1);
		ИндексКоллекции = Лев(ИндексКоллекции, СтрДлина(ИндексКоллекции) - 1);
		Свойство = Лев(Свойство, МеткаКоллекции - 1);
	КонецЕсли;
	
	// Проверка свойства структуры.
	Если ТипЗнч(Значение) <> Тип("Структура")
		ИЛИ Значение.Свойство(Свойство) = Ложь Тогда
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	// Поиск нового элемента
	Если МеткаКоллекции = 0 Тогда
		Значение = Значение[Свойство];
	Иначе
		Значение = Значение[Свойство][Число(ИндексКоллекции)];
	КонецЕсли;
	
	Если СвойстваПути.Количество() = 1 Тогда
		// Последний элемент пути.
		Возврат Значение;
	Иначе
		СвойстваПути.Удалить(0);
		Возврат ЗначениеСвойстваСтруктурыВРекурсии(Значение, СвойстваПути, Отказ);
	КонецЕсли;
	
КонецФункции

// Преобразование коллекции массива структур в коллекцию таблицу значений.
//
// Параметры:
//  Данные				 	- Массив - массив структур данных для преобразования.
//  ОписаниеТаблицыЗначений	- ТаблицаЗначений - описание результирующей таблицы.
// 
// Возвращаемое значение:
//  Массив - результат преобразования.
//
Функция КоллекцияМассивовСтруктурВКоллекциюТаблицЗначений(Данные, ОписаниеПолучателя, Свойство = "")

	Если ТипЗнч(Данные) <> Тип("Массив") Тогда
		Возврат Данные;
	КонецЕсли;
	
	Результат = Новый Массив;
	Для каждого ЭлементКоллекции Из Данные Цикл
		
		Если ЗначениеЗаполнено(Свойство) Тогда
			Значение = ЭлементКоллекции[Свойство];
		Иначе
			Значение = ЭлементКоллекции;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Значение)
			ИЛИ (ТипЗнч(Значение) <> Тип("Массив") И Значение.Количество() = 0) Тогда
				Результат.Добавить(ОписаниеПолучателя.Скопировать());
		Иначе
			Результат.Добавить(МассивСтруктурВТаблицуЗначений(Значение,	ОписаниеПолучателя));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Преобразование массива структур в таблицу значений.
//
// Параметры:
//  Коллекция				 - Массив - массив структура.
//  ОписаниеТаблицыЗначений	 - ТаблицаЗначений - описание результирующей таблицы.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - результат преобразования.
//
Функция МассивСтруктурВТаблицуЗначений(Источник, ОписаниеТаблицыЗначений)
	
	Если ТипЗнч(Источник) <> Тип("Массив")
		ИЛИ Источник.Количество() = 0 Тогда
		Возврат ОписаниеТаблицыЗначений;
	КонецЕсли;
	
	ПравилаПреобразования = Новый Структура;
	РеквизитыВСтруктуре = Новый Массив;
	
	// Создание колонок без типов.
	ТаблицаОбработки = Новый ТаблицаЗначений;
	Для каждого КолонкаТаблицыОписания Из ОписаниеТаблицыЗначений.Колонки Цикл
		
		// Поиск правил преобразования.
		ИмяСвойстваИсточника = КолонкаТаблицыОписания.Заголовок;
		РазделительПравила = СтрНайти(ИмяСвойстваИсточника, "|");
		ИмяПравила = "";
		Если РазделительПравила <> 0 Тогда
			ИмяСвойстваИсточника = СокрП(Лев(ИмяСвойстваИсточника, РазделительПравила - 1));
			ИмяПравила = Сред(КолонкаТаблицыОписания.Заголовок, РазделительПравила + 1);
		КонецЕсли;
		
		// Поиск реквизитов в структуре.
		Если СтрНайти(ИмяСвойстваИсточника, ".") Тогда
			ИмяСвойстваИсточника = СтрЗаменить(ИмяСвойстваИсточника, ".", "_");
			РеквизитыВСтруктуре.Добавить(ИмяСвойстваИсточника);
		КонецЕсли;
		
		// Добавления правила преобразования
		Если РазделительПравила <> 0 Тогда
			ПравилаПреобразования.Вставить(ИмяСвойстваИсточника, ИмяПравила);
		КонецЕсли;
		
		ТаблицаОбработки.Колонки.Добавить(ИмяСвойстваИсточника,, КолонкаТаблицыОписания.Имя);
		
	КонецЦикла;
	
	// Заполнение данных таблицы обработки.
	Для каждого СтрокаИсточника Из Источник Цикл
		НоваяСтрока = ТаблицаОбработки.Добавить();
		Если СтрокаИсточника <> Неопределено Тогда // Возможно значение неопределено.
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
		КонецЕсли;
		
		// Заполнение реквизитов в структуре.
		Для каждого ИмяРеквизита Из РеквизитыВСтруктуре Цикл
			СоставСтруктурыРеквизита = СтрРазделить(ИмяРеквизита, "_");
			НоваяСтрока[ИмяРеквизита] = ЗначениеСвойстваСтруктурыВРекурсии(СтрокаИсточника,	СоставСтруктурыРеквизита);
		КонецЦикла;
		
	КонецЦикла;
	
	// Обработка по правилам преобразования.
	Для каждого ЭлементПреобразования Из ПравилаПреобразования Цикл
		ДанныеОбработки = ТаблицаОбработки.ВыгрузитьКолонку(ЭлементПреобразования.Ключ);
		ОбработанныеЗначения = ПреобразоватьЗначениеСервиса(ДанныеОбработки, ЭлементПреобразования.Значение);
		Если ТипЗнч(ОбработанныеЗначения) = Тип("Массив") Тогда
			ТаблицаОбработки.ЗагрузитьКолонку(ОбработанныеЗначения, ЭлементПреобразования.Ключ);
		КонецЕсли;
	КонецЦикла; 
	
	// Обратное переименование колонок.
	Для каждого КолонкаТаблицыОбработки Из ТаблицаОбработки.Колонки Цикл
		КолонкаТаблицыОбработки.Имя = КолонкаТаблицыОбработки.Заголовок;
	КонецЦикла;
	
	// Заполнение таблицы результата.
	Результат = ОписаниеТаблицыЗначений.Скопировать();
	Для каждого СтрокаТаблицы Из ТаблицаОбработки Цикл
		ЗаполнитьЗначенияСвойств(Результат.Добавить(), СтрокаТаблицы);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Преобразовать значение полученное из сервиса.
//
// Параметры:
//  Данные			- Произвольный - данные, полученные из сервиса.
//  Правило			- Строка - имя обработчика.
//  КодСостояния	- Число - код состояния ответа сервиса.
// 
// Возвращаемое значение:
//  Произвольный - возвращаемое значение разбора.
//
Функция ПреобразоватьЗначениеСервиса(Значение, Правило, КодСостояния = 200)
	
	Если Правило = "CategoryPathToRootResponse.pathToRoot" Тогда
		
		// Разобрать список родительских категорий.
		Результат = КоллекцияМассивовСтруктурВКоллекциюТаблицЗначений(Значение, 
			ОписаниеТаблицыКатегории(), "categories");
		Возврат Результат;
		
	ИначеЕсли Правило = "Nomenclature.classifiers" Тогда
		
		// Разобрать классификатор номенклатуры
		Результат = МассивСтруктурВТаблицуЗначений(Значение, ОписаниеТаблицыКлассификатораНоменклатуры());
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Результат);
		
	ИначеЕсли Правило = "Nomenclature.propertiesHavingValue" Тогда
		
		Результат = Новый Массив;
		
		Для каждого ЭлементКоллекции Из Значение Цикл
			ПреобразованныеЗначения = Новый Массив;
			ПреобразоватьИменаРеквизитов(ЭлементКоллекции, ПреобразованныеЗначения, ОписаниеТаблицыНоменклатуры());			
			Результат.Добавить(ПреобразованныеЗначения);
		КонецЦикла;
		
		Возврат Результат;
				
	ИначеЕсли Правило = "Nomenclature.images" Тогда
		
		ОписаниеТаблицыИзображенийНоменклатуры = Новый ТаблицаЗначений;
		ОписаниеТаблицыИзображенийНоменклатуры.Колонки.Добавить("ИзображениеURL", Типы().Строка, "link");
		
		// Разобрать изображения номенклатуры.
		Результат = КоллекцияМассивовСтруктурВКоллекциюТаблицЗначений(Значение, ОписаниеТаблицыИзображенийНоменклатуры);
		Возврат Результат;
		
	ИначеЕсли Правило = "Nomenclature.features" Тогда
		
		// Разобрать характеристики номенклатуры
		Результат = КоллекцияМассивовСтруктурВКоллекциюТаблицЗначений(Значение,
			ОписаниеТаблицыХарактеристикНоменклатуры());
		Возврат Результат;
			
	ИначеЕсли Правило = "Nomenclature.attributes" Тогда
		
		// Разобрать дополнительные реквизиты номенклатуры.
		Результат = КоллекцияМассивовСтруктурВКоллекциюТаблицЗначений(Значение,
			ОписаниеТаблицыДополнительныхРеквизитовНоменклатуры());
		Возврат Результат;
		
	ИначеЕсли Правило = "Nomenclature.unit" Тогда
		
		// Разобрать единицы измерения номенклатуры
		Результат = МассивСтруктурВТаблицуЗначений(Значение, ОписаниеТаблицыЕдиницыИзмеренияНоменклатуры());
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Результат);
		
	ИначеЕсли Правило = "Nomenclature.dimensionalProperties" Тогда
		
		// Разобрать мерные характеристики
		Результат = МассивСтруктурВТаблицуЗначений(Значение, ОписаниеТаблицыМернойХарактеристики());
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Результат);
		
	ИначеЕсли Правило = "Nomenclature.itemCount"  Тогда
		
		// Разобрать количество в упаковке
		Результат = МассивСтруктурВТаблицуЗначений(Значение, ОписаниеТаблицыКоличестваВУпаковке());
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Результат);
		
	ИначеЕсли Правило = "CategoryResponse.categories.attributes" Тогда
		
		// Разобрать реквизиты категории
		Результат = КоллекцияМассивовСтруктурВКоллекциюТаблицЗначений(Значение,
			ОписаниеТаблицыРеквизитовКатегорий());
		Возврат Результат;
		
	ИначеЕсли Правило = "CategoryResponse.categories.features" Тогда
		
		// Разобрать характеристики категории
		Результат = МассивСтруктурВТаблицуЗначений(Значение, ОписаниеТаблицыХарактеристикКатегорий());
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Результат);
		
	ИначеЕсли Правило = "CategoryResponse.categories.metrics" Тогда
		
		// Разобрать мерные характеристики
		Результат = МассивСтруктурВТаблицуЗначений(Значение, ОписаниеТаблицыМерныхХарактеристикКатегорий());
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Результат);
		
	ИначеЕсли Правило = "Category.metrics" Тогда
		
		// Разобрать мерную характеристику категории
		Результат = МассивСтруктурВТаблицуЗначений(Значение, ОписаниеТаблицыМернойХарактеристикиКатегории());
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Результат);
		
	ИначеЕсли Правило = "Category.features.attributes" Тогда
		
		// Разобрать реквизиты характеристик категории
		ОписаниеТаблицыРеквизитов = Новый ТаблицаЗначений;
		ОписаниеТаблицыРеквизитов.Колонки.Добавить("Идентификатор", Типы().Строка, "id");
		ОписаниеТаблицыРеквизитов.Колонки.Добавить("Наименование",  Типы().Строка, "name");
		ОписаниеТаблицыРеквизитов.Колонки.Добавить("Тип",           Типы().Строка, "type|ДесериализоватьТипЗначения");
		
		Результат = КоллекцияМассивовСтруктурВКоллекциюТаблицЗначений(Значение, ОписаниеТаблицыРеквизитов);
		Возврат Результат;
		
	ИначеЕсли Правило = "CategoryResponse.categories.classifiers" Тогда
		
		// Разобрать классификаторы категорий
		ОписаниеТаблицыКлассификатора = Новый ТаблицаЗначений;
		ОписаниеТаблицыКлассификатора.Колонки.Добавить("Наименование",  Типы().Строка, "name");
		ОписаниеТаблицыКлассификатора.Колонки.Добавить("Идентификатор", Типы().Строка, "code");
		ОписаниеТаблицыКлассификатора.Колонки.Добавить("Описание",      Типы().Строка, "description");
		
		Результат = МассивСтруктурВТаблицуЗначений(Значение, ОписаниеТаблицыКлассификатора);
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Результат);
		
	ИначеЕсли Правило = "Feature.attributes" Тогда 
		
		// Разобрать дополнительные реквизиты характеристик.
		ОписаниеТаблицыРеквизитов = Новый ТаблицаЗначений;
		ОписаниеТаблицыРеквизитов.Колонки.Добавить("Идентификатор", Типы().Строка,    "attributeId");
		ОписаниеТаблицыРеквизитов.Колонки.Добавить("Наименование",  Типы().Строка,    "name");
		ОписаниеТаблицыРеквизитов.Колонки.Добавить("Значение",      Неопределено, "value");
		ОписаниеТаблицыРеквизитов.Колонки.Добавить("ИдентификаторЗначения",      Типы().Строка, "valueId.id");
		ОписаниеТаблицыРеквизитов.Колонки.Добавить("СтроковоеЗначение",    Типы().Строка, "valueId.value");
		ОписаниеТаблицыРеквизитов.Колонки.Добавить("КодКлассификатора",          Типы().Строка, "classifier.code");
		ОписаниеТаблицыРеквизитов.Колонки.Добавить("НаименованиеКлассификатора", Типы().Строка, "classifier.name");
		ОписаниеТаблицыРеквизитов.Колонки.Добавить("ОписаниеКлассификатора",     Типы().Строка, "classifier.description");
		
		Результат = КоллекцияМассивовСтруктурВКоллекциюТаблицЗначений(Значение, ОписаниеТаблицыРеквизитов);
		Возврат Результат;
		
	ИначеЕсли Правило = "Attribute.unit" Тогда
		
		Результат = МассивСтруктурВТаблицуЗначений(Значение, ОписаниеТаблицыЕдиницыИзмеренияДополнительныхРеквизитов());
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Результат);
		
	ИначеЕсли Правило = "AttributeValuesByCategoriesResponse.attributeValuesByCategories.values" Тогда
		
		// Значения дополнительных атрибутов категорий.
		ОписаниеТаблицыЗначений = Новый ТаблицаЗначений;
		ОписаниеТаблицыЗначений.Колонки.Добавить("Идентификатор", Типы().Строка, "id");
		ОписаниеТаблицыЗначений.Колонки.Добавить("Наименование",  Типы().Строка, "value");
		ОписаниеТаблицыЗначений.Колонки.Добавить("ДатаИзменения", Типы().Дата,   "modified|ДесериализоватьДату");
		
		Результат = КоллекцияМассивовСтруктурВКоллекциюТаблицЗначений(Значение, ОписаниеТаблицыЗначений);
		Возврат Результат;
		
	ИначеЕсли Правило = "AttributeValueResponse.attributeValues.reference" Тогда
		
		// Значения дополнительных реквизитов категорий.
		ОписаниеТаблицыЗначений = Новый ТаблицаЗначений;
		ОписаниеТаблицыЗначений.Колонки.Добавить("ИдентификаторКатегории", Типы().Строка, "categoryId");
		ОписаниеТаблицыЗначений.Колонки.Добавить("НаименованиеКатегории",  Типы().Строка, "categoryName");
		ОписаниеТаблицыЗначений.Колонки.Добавить("Идентификатор",          Типы().Строка, "attributeId");
		ОписаниеТаблицыЗначений.Колонки.Добавить("Наименование",           Типы().Строка, "attributeName");
		
		Результат = МассивСтруктурВТаблицуЗначений(Значение, ОписаниеТаблицыЗначений);
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Результат);
		
	ИначеЕсли Правило = "ДесериализоватьСтавкуНДС" Тогда
		
		Результат = Новый Массив;
		Для каждого ЭлементКоллекции Из Значение Цикл
			Результат.Добавить(ЭлементКоллекции);
		КонецЦикла;
		
		Возврат Результат;
		
	ИначеЕсли Правило = "ДесериализоватьДату" Тогда
		
		Если ТипЗнч(Значение) = Тип("Массив") Тогда
			Результат = Новый Массив;
			Для каждого ЭлементКоллекции Из Значение Цикл
				Если ЗначениеЗаполнено(ЭлементКоллекции) Тогда
					Результат.Добавить(ДатаИзUnixTime(ЭлементКоллекции));
				Иначе
					Результат.Добавить(Неопределено);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Результат = ДатаИзUnixTime(Значение);
		КонецЕсли;
		Возврат Результат;
		
	ИначеЕсли Правило = "ДесериализоватьТипЗначения" Тогда
		
		Результат = Новый Массив;
		Для каждого ЗначениеТипа Из Значение Цикл
			Если ЗначениеЗаполнено(ЗначениеТипа) Тогда
				Результат.Добавить(ДесериализоватьТипЗначенияСервиса(ЗначениеТипа));
			Иначе
				Результат.Добавить(Неопределено);
			КонецЕсли;
		КонецЦикла;

		Возврат Результат;
		
	ИначеЕсли Правило = "ДесериализоватьТипНоменклатуры" Тогда
		
		Результат = Новый Массив;
		Для каждого ЗначениеТипа Из Значение Цикл
			Если ЗначениеЗаполнено(ЗначениеТипа) Тогда
				Результат.Добавить(ДесериализоватьТипНоменклатурыСервиса(ЗначениеТипа));
			Иначе
				Результат.Добавить(Неопределено);
			КонецЕсли;
		КонецЦикла;

		Возврат Результат;
		
	ИначеЕсли Правило = "ИстинаПоКоду200" Тогда 
		
		Результат = (КодСостояния = 200);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДесериализоватьТипЗначенияСервиса(Значение)
	
	Если Значение = "string"           Тогда Результат = НСтр("ru = 'Строка'");
	ИначеЕсли Значение = "number"      Тогда Результат = НСтр("ru = 'Число'");
	ИначеЕсли Значение = "boolean"     Тогда Результат = НСтр("ru = 'Булево'");
	ИначеЕсли Значение = "date"        Тогда Результат = НСтр("ru = 'Булево'");
	ИначеЕсли Значение = "enumeration" Тогда Результат = НСтр("ru = 'Список'");
	ИначеЕсли Значение = "classifier"  Тогда Результат = НСтр("ru = 'Классификатор'");
	Иначе Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДесериализоватьТипНоменклатурыСервиса(Значение)
	
	Если Значение = "Service" Тогда
		Результат = НСтр("ru = 'Услуга'");
	ИначеЕсли Значение = "Product" Тогда
		Результат = НСтр("ru = 'Товар'");
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Процедура ПреобразоватьИменаРеквизитов(ИсходныеИмена, ИтоговыеИмена, ТаблицаСоответствияПолей)
	
	Если ИсходныеИмена = Неопределено Тогда
		ИтоговыеИмена = Новый Массив;
		Возврат;
	КонецЕсли;
	
	Для Счетчик = 0 По ИсходныеИмена.ВГраница() Цикл
		
		ИмяПреобразовано = Ложь;
		
		Для каждого Колонка Из ТаблицаСоответствияПолей.Колонки Цикл
			
			ИмяИзСервиса = "";
			
			Если СтрНайти(Колонка.Заголовок, "|") <> 0 Тогда
				ИмяИзСервиса = Лев(Колонка.Заголовок, СтрНайти(Колонка.Заголовок, "|") - 1);	
			Иначе
				ИмяИзСервиса = Колонка.Заголовок;
			КонецЕсли;
			
			Если СтрСравнить(ИсходныеИмена[Счетчик], ИмяИзСервиса) = 0 Тогда
				ИтоговыеИмена.Добавить(Колонка.Имя);
				ИмяПреобразовано = Истина;
			КонецЕсли;	
			
		КонецЦикла;
		
		Если Не ИмяПреобразовано Тогда
			ИтоговыеИмена.Добавить(ИсходныеИмена[Счетчик]);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ВыполнитьЗаписьСобытияВЖурналРегистрации(ОписаниеСобытия, УровеньВажности,
	ОбъектМетаданных = Неопределено, ДанныеСсылка = Неопределено, РежимТранзакции = Неопределено)
	
	ИмяСобытия = НСтр("ru = 'Электронное взаимодействие.Работа с номенклатурой'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	УровеньВажностиСобытия = ?(ТипЗнч(УровеньВажности) = Тип("УровеньЖурналаРегистрации"),
		УровеньВажности, УровеньЖурналаРегистрации.Ошибка);
			
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньВажностиСобытия, ОбъектМетаданных, 
		ДанныеСсылка, ОписаниеСобытия, РежимТранзакции);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
