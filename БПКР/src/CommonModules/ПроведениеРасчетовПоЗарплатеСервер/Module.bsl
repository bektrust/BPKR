
#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСЧЕТА ЗАПИСЕЙ РЕГИСТРОВ РАСЧЕТА

// Алгоритм обработки данных в последовательности категорий расчета
//
// Параметры:
//  ИмяРегистра				 - Строка - имя регистра расчета
//  НаборЗаписейРегистра	 - РегистрРасчетаНаборЗаписей	- набор записей регистра расчета
//  ТабличнаяЧастьДокумента	 - ТабличнаяЧасть - табличная часть документа для синхронизации
// 	Ошибки 					 - Массив - массив сообщений пользователю
Процедура РассчитатьЗаписиРегистраРасчета(ИмяРегистра, НаборЗаписейРегистра, ТабличнаяЧастьДокумента, Ошибки = Неопределено, 
		МассивСтрокДляУдаления = Неопределено, ДополнительныеСвойства = Неопределено) Экспорт 
		
	Если НаборЗаписейРегистра.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Если МассивСтрокДляУдаления = Неопределено Тогда 
		МассивСтрокДляУдаления = Новый Массив;
	КонецЕсли;	
	
	ДополнительныеПоказатели = Новый Структура;
	ДополнительныеПоказатели.Вставить("Период", '00010101'); 
	ДополнительныеПоказатели.Вставить("ПериодРегистрации", '00010101'); 
	ДополнительныеПоказатели.Вставить("Организация", Неопределено); 
	
	Если НЕ ДополнительныеСвойства = Неопределено Тогда
		ДополнительныеПоказатели.ПериодРегистрации = НачалоМесяца(ДополнительныеСвойства.ДляПроведения.Дата);
		ДополнительныеПоказатели.Период = ДополнительныеСвойства.ДляПроведения.Дата;
		ДополнительныеПоказатели.Организация = ДополнительныеСвойства.ДляПроведения.Организация;
	КонецЕсли;	
	
	ИмяПланаВидовРасчета = Метаданные.РегистрыРасчета[ИмяРегистра].ПланВидовРасчета.Имя;
	
	Регистратор = НаборЗаписейРегистра.Отбор.Регистратор.Значение;
	
	ДанныеУчетнойПолитики = БухгалтерскийУчетСервер.ПолучитьДанныеУчетнойПолитикиПоПерсоналу(ДополнительныеПоказатели.Период, ДополнительныеПоказатели.Организация); 
	УчетЗаработнойПлатыВВалюте = ПолучитьФункциональнуюОпцию("УчетЗаработнойПлатыВВалюте");
	
	// получение массива видов расчета из набора записей
	ТаблицаВидовРасчета = НаборЗаписейРегистра.Выгрузить();
	ТаблицаВидовРасчета.Свернуть("ВидРасчета");
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВидыРасчета.КатегорияРасчета КАК КатегорияРасчета,
		|	ВидыРасчета.СпособРасчета КАК СпособРасчета,
		|	ВидыРасчета.ТребуетсяРасчетБазы КАК ТребуетсяРасчетБазы";
		
	Если ИмяРегистра = "Начисления" Тогда 
		ТекстЗапроса = ТекстЗапроса + ",
		|	ВидыРасчета.РасчетОтОбратного КАК РасчетОтОбратного,
		|	ВидыРасчета.ТребуетсяРасчетВремениВЧасах КАК ТребуетсяРасчетВремениВЧасах";
	ИначеЕсли ИмяРегистра = "Удержания" Тогда 
		ТекстЗапроса = ТекстЗапроса + ",
		|	ЛОЖЬ КАК РасчетОтОбратного,
		|	ЛОЖЬ КАК ТребуетсяРасчетВремениВЧасах";
	КонецЕсли;
		
	ТекстЗапроса = ТекстЗапроса + ",
		|	ВЫБОР
		|		КОГДА ВидыРасчета.ТребуетсяРасчетБазы
		|				И ВидыРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ПроизвольнаяФормула)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТребуетсяРасчетБазыВРазрезе,
		|	ВидыРасчета.ТребуетсяРасчетВремени КАК ТребуетсяРасчетВремени
		|ИЗ
		|	ПланВидовРасчета." + ИмяПланаВидовРасчета + " КАК ВидыРасчета
		|ГДЕ
		|	ВидыРасчета.Ссылка В(&ВидыРасчетов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидыРасчета.КатегорияРасчета.Порядок
		|ИТОГИ ПО
		|	КатегорияРасчета";
		
	Запрос = Новый Запрос;	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВидыРасчетов", ТаблицаВидовРасчета.ВыгрузитьКолонку("ВидРасчета"));
	
	ВыборкаКатегорий = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаКатегорий.Следующий() Цикл 
		// анализ необходимых данных для оптимизации запроса к данным
		ВложеннаяВыборка = ВыборкаКатегорий.Выбрать();
		
		// получение структуры необходимых данных для расчетов текущей категории
		НеобходимыеДанные = Новый Структура;
		НеобходимыеДанные.Вставить("ТребуетсяРасчетБазы", Ложь);
		НеобходимыеДанные.Вставить("ТребуетсяРасчетБазыВРазрезе", Ложь);
		НеобходимыеДанные.Вставить("ТребуетсяРасчетВремени", Ложь);
		НеобходимыеДанные.Вставить("ТребуетсяРасчетВремениВЧасах", Ложь);
		НеобходимыеДанные.Вставить("РасчетОтОбратного", Ложь);
		НеобходимыеДанные.Вставить("УчетЗаработнойПлатыВВалюте", УчетЗаработнойПлатыВВалюте);
		
		Пока ВложеннаяВыборка.Следующий() Цикл 
			НеобходимыеДанные.ТребуетсяРасчетБазы = ?(НеобходимыеДанные.ТребуетсяРасчетБазы, Истина, ВложеннаяВыборка.ТребуетсяРасчетБазы);
			НеобходимыеДанные.ТребуетсяРасчетБазыВРазрезе = ?(НеобходимыеДанные.ТребуетсяРасчетБазыВРазрезе, Истина, ВложеннаяВыборка.ТребуетсяРасчетБазыВРазрезе);
			НеобходимыеДанные.ТребуетсяРасчетВремени = ?(НеобходимыеДанные.ТребуетсяРасчетВремени, Истина, ВложеннаяВыборка.ТребуетсяРасчетВремени);
			НеобходимыеДанные.ТребуетсяРасчетВремениВЧасах = ?(НеобходимыеДанные.ТребуетсяРасчетВремениВЧасах, Истина, ВложеннаяВыборка.ТребуетсяРасчетВремениВЧасах);
			НеобходимыеДанные.РасчетОтОбратного = ?(НеобходимыеДанные.РасчетОтОбратного, Истина, ВложеннаяВыборка.РасчетОтОбратного);
		КонецЦикла;
		
		ДанныеДляРасчета = ПолучитьДанныеДляРасчета(ИмяРегистра, ВыборкаКатегорий.КатегорияРасчета, НеобходимыеДанные, Регистратор, ДополнительныеПоказатели);
		ДанныеДляРасчета.Вставить("ДанныеУчетнойПолитики", ДанныеУчетнойПолитики);
		ДанныеДляРасчета.Вставить("УчетЗаработнойПлатыВВалюте", УчетЗаработнойПлатыВВалюте);
		
		РассчитатьЗаписиНабора(ИмяРегистра, ДанныеДляРасчета.ИсходныеДанные, НаборЗаписейРегистра, ТабличнаяЧастьДокумента, ДанныеДляРасчета, Ошибки, МассивСтрокДляУдаления);

		НаборЗаписейРегистра.Записать(, Истина);
	КонецЦикла;
КонецПроцедуры

// Механизм получения данных для расчета ресурсов регистра расчета
// по каждой категории расчета
//
// Параметры:
//  ИмяРегистра			 - 	 - 
//  КатегорияРасчета	 - 	 - 
//  НеобходимыеДанные	 - 	 - 
//  Регистратор			 - 	 - 
// Возвращаемое значение:
//   - 
Функция ПолучитьДанныеДляРасчета(ИмяРегистра, КатегорияРасчета, НеобходимыеДанные, Регистратор, ДополнительныеПоказатели) Экспорт 
	
	Запрос = Новый Запрос();
	
	Измерения = Новый Массив(2);
	Измерения[0] = "ФизЛицо";
	Измерения[1] = "Организация";
	
	Запрос.УстановитьПараметр("ИзмеренияОсновного", 	Измерения);
	Запрос.УстановитьПараметр("ИзмеренияБазового",  	Измерения);
	Запрос.УстановитьПараметр("Регистратор",  			Регистратор);
	Запрос.УстановитьПараметр("КатегорияРасчета",		КатегорияРасчета);
	
	Если НеобходимыеДанные.ТребуетсяРасчетВремениВЧасах 
		Или НеобходимыеДанные.ТребуетсяРасчетВремени Тогда 
		Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ДополнительныеПоказатели.ПериодРегистрации));
		Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ДополнительныеПоказатели.ПериодРегистрации));
	КонецЕсли;	
	
	Если НеобходимыеДанные.УчетЗаработнойПлатыВВалюте Тогда 
		Запрос.УстановитьПараметр("Период", ДополнительныеПоказатели.Период);
	КонецЕсли;	
	
	ИндексДополнительнойТаблицы = 0;
	ИндексТаблицыИсходныеДанные = 0;
	
	ТекстыЗапроса = Новый Массив;
	
	Если ИмяРегистра = "Начисления" Тогда 
		
		Если НеобходимыеДанные.ТребуетсяРасчетВремениВЧасах Тогда 	
			ИндексДополнительнойТаблицы = ИндексДополнительнойТаблицы + 1;
			ИндексТаблицыИсходныеДанные = ИндексДополнительнойТаблицы;
			
			// Неявки.
			ТекстЗапроса = 
				"ВЫБРАТЬ
				|	Начисления.НомерСтроки КАК НомерСтроки,
				|	Начисления.ФизЛицо КАК ФизЛицо,
				|	СУММА(ТабельПоЧасамНеявки.ЧасовНеявки) КАК ЧасовНеявки
				|ПОМЕСТИТЬ ВременнаяТаблицаТабельПоЧасамНеявки
				|ИЗ
				|	РегистрРасчета.Начисления КАК Начисления
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.ВидыНачислений.ВытесняющиеВидыРасчета КАК ВидыНачисленийВытесняющиеВидыРасчета
				|		ПО Начисления.ВидРасчета = ВидыНачисленийВытесняющиеВидыРасчета.Ссылка
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТабельПоЧасам КАК ТабельПоЧасамНеявки
				|		ПО Начисления.Организация = ТабельПоЧасамНеявки.Организация
				|			И Начисления.ФизЛицо = ТабельПоЧасамНеявки.ФизЛицо
				|			И (ТабельПоЧасамНеявки.Дата МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
				|			И (ТабельПоЧасамНеявки.ВидРасчета = ВидыНачисленийВытесняющиеВидыРасчета.ВидРасчета)
				|ГДЕ
				|	Начисления.Регистратор = &Регистратор
				|	И Начисления.ВидРасчета.КатегорияРасчета = &КатегорияРасчета
				|
				|СГРУППИРОВАТЬ ПО
				|	Начисления.НомерСтроки,
				|	Начисления.ФизЛицо
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	ФизЛицо,
				|	НомерСтроки";
			ТекстыЗапроса.Добавить(ТекстЗапроса);
		КонецЕсли;	
		
		// формирование текста запроса
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|Начисления.НомерСтроки 							КАК НомерСтроки,
			|Начисления.ФизЛицо 								КАК ФизЛицо,
			|Начисления.Валюта 									КАК Валюта,
			|Начисления.ВидРасчета.ТребуетсяРасчетВремени 		КАК ТребуетсяРасчетВремени,
			|Начисления.ВидРасчета.ТребуетсяРасчетВремениВЧасах КАК ТребуетсяРасчетВремениВЧасах,
			|Начисления.ВидРасчета.ЗачетОтработанногоВремени 	КАК ЗачетОтработанногоВремени,
			|Начисления.ВидРасчета.КоличествоЧасов				КАК КоличествоЧасов,
			|Начисления.ВидРасчета.Коэффициент1					КАК Коэффициент1,
			|Начисления.ВидРасчета.Коэффициент2					КАК Коэффициент2,
			|Начисления.ВидРасчета.Доля 						КАК Доля,
			|Начисления.ВидРасчета.Формула						КАК Формула,
			|Начисления.ВидРасчета.СпособРасчета 				КАК СпособРасчета,
			|Начисления.ВидРасчета.РасчетОтОбратного 			КАК РасчетОтОбратного";
		
		Если НеобходимыеДанные.ТребуетсяРасчетВремени Тогда 
			ТекстЗапроса = ТекстЗапроса + ",
			|ЕстьNULL(НачисленияДанныеГрафика.ЗначениеЧасовПериодДействия, 0) КАК ЗначениеЧасовПериодДействия,
			|ЕстьNULL(НачисленияДанныеГрафика.ЗначениеЧасовФактическийПериодДействия, 0) КАК ЗначениеЧасовФактическийПериодДействия,
			|ЕстьNULL(НачисленияДанныеГрафика.ЗначениеДнейПериодДействия, 0) КАК ЗначениеДнейПериодДействия,
			|ЕстьNULL(НачисленияДанныеГрафика.ЗначениеДнейФактическийПериодДействия, 0) КАК ЗначениеДнейФактическийПериодДействия";
			
			ТекстЗапроса = ТекстЗапроса + ",
			|СУММА(ЕстьNULL(ТабельПоЧасамОтработки.ДнейОтработки, 0)) КАК ДнейОтработки";
		КонецЕсли;
		
		Если НеобходимыеДанные.ТребуетсяРасчетВремениВЧасах Тогда 
			ТекстЗапроса = ТекстЗапроса + ",
			|СУММА(ЕстьNULL(ТабельПоЧасамОтработки.ЧасовОтработки, 0)) КАК ЧасовОтработки,
			|СУММА(ЕстьNULL(ТабельПоЧасамНеявки.ЧасовНеявки, 0)) КАК ЧасовНеявки";			
		КонецЕсли;	
		
		Если НеобходимыеДанные.ТребуетсяРасчетБазы Тогда 
			ТекстЗапроса = ТекстЗапроса + ",
			|ЕстьNULL(НачисленияБазаНачисления.РезультатБаза, 0) КАК РезультатБаза";
		КонецЕсли;
		
		Если НеобходимыеДанные.УчетЗаработнойПлатыВВалюте Тогда 
			ТекстЗапроса = ТекстЗапроса + ",
			|ЕстьNULL(КурсыВалютЗаработнаяПлатаСрезПоследних.Курс, 0) КАК Курс,
			|ЕстьNULL(КурсыВалютЗаработнаяПлатаСрезПоследних.Кратность, 1) КАК Кратность";
		КонецЕсли;		
		
		ТекстЗапроса = ТекстЗапроса + "
			|ИЗ РегистрРасчета.Начисления КАК Начисления";
		 
		Если НеобходимыеДанные.ТребуетсяРасчетВремени Тогда 
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления.ДанныеГрафика(Регистратор = &Регистратор И ВидРасчета.КатегорияРасчета = &КатегорияРасчета) КАК НачисленияДанныеГрафика
			|ПО НачисленияДанныеГрафика.НомерСтроки = Начисления.НомерСтроки";
			
			// Отработки.
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТабельПоЧасам КАК ТабельПоЧасамОтработки
			|ПО (Начисления.Организация = ТабельПоЧасамОтработки.Организация)
			|	И (Начисления.ФизЛицо = ТабельПоЧасамОтработки.ФизЛицо)
			|	И (ТабельПоЧасамОтработки.Дата МЕЖДУ &НачалоПериода И &КонецПериода)
			|	И (ТабельПоЧасамОтработки.Дата МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
			|	И Начисления.ВидРасчета.ЗачетОтработанногоВремени";
		КонецЕсли;		
			
		Если НеобходимыеДанные.ТребуетсяРасчетВремениВЧасах Тогда 	
			// Неявки.
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаТабельПоЧасамНеявки КАК ТабельПоЧасамНеявки
			|ПО (Начисления.НомерСтроки = ТабельПоЧасамНеявки.НомерСтроки)
			|	И (Начисления.ФизЛицо = ТабельПоЧасамНеявки.ФизЛицо)";
		КонецЕсли;	
		
		Если НеобходимыеДанные.ТребуетсяРасчетБазы Тогда 
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления.БазаНачисления(&ИзмеренияОсновного, &ИзмеренияБазового, , Регистратор = &Регистратор и ВидРасчета.КатегорияРасчета = &КатегорияРасчета) КАК НачисленияБазаНачисления
			|ПО НачисленияБазаНачисления.НомерСтроки = Начисления.НомерСтроки";
		КонецЕсли;
		
		Если НеобходимыеДанные.УчетЗаработнойПлатыВВалюте Тогда 
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютЗаработнаяПлата.СрезПоследних(&Период, ) КАК КурсыВалютЗаработнаяПлатаСрезПоследних
			|ПО КурсыВалютЗаработнаяПлатаСрезПоследних.Валюта = Начисления.Валюта";
		КонецЕсли;	
		
		ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ Начисления.Регистратор = &Регистратор И Начисления.ВидРасчета.КатегорияРасчета = &КатегорияРасчета";
		
		// Группировка только при расчете времени в часах.
		Если НеобходимыеДанные.ТребуетсяРасчетВремениВЧасах
			Или НеобходимыеДанные.ТребуетсяРасчетВремени Тогда
			ТекстЗапроса = ТекстЗапроса + "
				|СГРУППИРОВАТЬ ПО
				|Начисления.НомерСтроки,
				|Начисления.ФизЛицо,
				|Начисления.Валюта,
				|Начисления.ВидРасчета.ТребуетсяРасчетВремени,
				|Начисления.ВидРасчета.ТребуетсяРасчетВремениВЧасах,
				|Начисления.ВидРасчета.ЗачетОтработанногоВремени,
				|Начисления.ВидРасчета.КоличествоЧасов,
				|Начисления.ВидРасчета.Коэффициент1,
				|Начисления.ВидРасчета.Коэффициент2,
				|Начисления.ВидРасчета.Доля,
				|Начисления.ВидРасчета.Формула,
				|Начисления.ВидРасчета.СпособРасчета,
				|Начисления.ВидРасчета.РасчетОтОбратного";
		
			Если НеобходимыеДанные.ТребуетсяРасчетВремени Тогда 
				ТекстЗапроса = ТекстЗапроса + ",
				|ЕСТЬNULL(НачисленияДанныеГрафика.ЗначениеЧасовПериодДействия, 0),
				|ЕСТЬNULL(НачисленияДанныеГрафика.ЗначениеЧасовФактическийПериодДействия, 0),
				|ЕСТЬNULL(НачисленияДанныеГрафика.ЗначениеДнейПериодДействия, 0),
				|ЕСТЬNULL(НачисленияДанныеГрафика.ЗначениеДнейФактическийПериодДействия, 0)";
			КонецЕсли;	
		
			Если НеобходимыеДанные.ТребуетсяРасчетБазы Тогда 
				ТекстЗапроса = ТекстЗапроса + ",
				|ЕстьNULL(НачисленияБазаНачисления.РезультатБаза, 0)";
			КонецЕсли;
		
			Если НеобходимыеДанные.УчетЗаработнойПлатыВВалюте Тогда 
				ТекстЗапроса = ТекстЗапроса + ",
				|ЕстьNULL(КурсыВалютЗаработнаяПлатаСрезПоследних.Курс, 0),
				|ЕстьNULL(КурсыВалютЗаработнаяПлатаСрезПоследних.Кратность, 1)";
			КонецЕсли;
		КонецЕсли;	
		
		ТекстЗапроса = ТекстЗапроса + "
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
		Если НеобходимыеДанные.ТребуетсяРасчетБазыВРазрезе Тогда 
			ИндексДополнительнойТаблицы = ИндексДополнительнойТаблицы + 1;
			ИндексТаблицаРазрезы = ИндексДополнительнойТаблицы;
			
			Разрезы = Новый Массив(1);
			Разрезы[0] = "ВидРасчета";
			Запрос.УстановитьПараметр("Разрезы", Разрезы);
			
			ТекстЗапроса =
				"ВЫБРАТЬ
				|Начисления.НомерСтроки КАК НомерСтроки,
				
				|НачисленияБазаНачисления.ВидРасчетаРазрез КАК ВидРасчетаРазрез,
				|ЕСТЬNULL(НачисленияБазаНачисления.РезультатБаза, 0) КАК РезультатБаза
				
				|ИЗ РегистрРасчета.Начисления КАК Начисления
				
				|ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления.БазаНачисления(&ИзмеренияОсновного, &ИзмеренияБазового, &Разрезы, Регистратор = &Регистратор И ВидРасчета.КатегорияРасчета = &КатегорияРасчета) КАК НачисленияБазаНачисления
				|ПО НачисленияБазаНачисления.НомерСтроки = Начисления.НомерСтроки
				
				|ГДЕ Начисления.Регистратор = &Регистратор И Начисления.ВидРасчета.КатегорияРасчета = &КатегорияРасчета
				|УПОРЯДОЧИТЬ ПО
				|	НомерСтроки";
			
			ТекстыЗапроса.Добавить(ТекстЗапроса);
		КонецЕсли;	
		
		Если НеобходимыеДанные.РасчетОтОбратного Тогда 
			ИндексДополнительнойТаблицы = ИндексДополнительнойТаблицы + 5; // есть временные таблицы.
			ИндексТаблицаСтавкиНалогов = ИндексДополнительнойТаблицы;

			Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ДополнительныеПоказатели.ПериодРегистрации));
			Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ДополнительныеПоказатели.ПериодРегистрации));

			// Сотрудники для отбора
			ТекстЗапроса =  
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Начисления.Организация КАК Организация,
				|	Начисления.ФизЛицо КАК ФизЛицо
				|ПОМЕСТИТЬ ВременнаяТаблицаНачисления
				|ИЗ
				|	РегистрРасчета.Начисления КАК Начисления
				|ГДЕ
				|	Начисления.Регистратор = &Регистратор
				|	И Начисления.ВидРасчета.КатегорияРасчета = &КатегорияРасчета
				|	И Начисления.ВидРасчета.РасчетОтОбратного
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Организация,
				|	ФизЛицо";
			ТекстыЗапроса.Добавить(ТекстЗапроса);
			
			// Получение списка сотрудников, принятых или уволенных в течении месяца- определение больше 15 дней.
			// Остальные сотрудники по умолчанию больше 15 дней.
			ТекстЗапроса = 
				"ВЫБРАТЬ
				|	СотрудникиСрезПоследних.ФизЛицо КАК ФизЛицо,
				|	ДЕНЬ(СотрудникиСрезПоследних.Период) КАК ДеньПриема,
				|	0 КАК ДеньУвольнения
				|ПОМЕСТИТЬ ВременнаяТаблицаСотрудники
				|ИЗ
				|	РегистрСведений.Сотрудники.СрезПоследних(
				|			&КонецПериода,
				|			Период МЕЖДУ &НачалоПериода И &КонецПериода
				|				И ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием)
				|				И (Организация, ФизЛицо) В
				|					(ВЫБРАТЬ
				|						ВременнаяТаблицаНачисления.Организация КАК Организация,
				|						ВременнаяТаблицаНачисления.ФизЛицо КАК ФизЛицо
				|					ИЗ
				|						ВременнаяТаблицаНачисления КАК ВременнаяТаблицаНачисления)) КАК СотрудникиСрезПоследних
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	СотрудникиСрезПоследних.ФизЛицо,
				|	0,
				|	ДЕНЬ(СотрудникиСрезПоследних.Период)
				|ИЗ
				|	РегистрСведений.Сотрудники.СрезПоследних(
				|			&КонецПериода,
				|			Период МЕЖДУ &НачалоПериода И &КонецПериода
				|				И ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
				|				И (Организация, ФизЛицо) В
				|					(ВЫБРАТЬ
				|						ВременнаяТаблицаНачисления.Организация КАК Организация,
				|						ВременнаяТаблицаНачисления.ФизЛицо КАК ФизЛицо
				|					ИЗ
				|						ВременнаяТаблицаНачисления КАК ВременнаяТаблицаНачисления)) КАК СотрудникиСрезПоследних
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВременнаяТаблицаСотрудники.ФизЛицо КАК ФизЛицо,
				|	ВЫБОР
				|		КОГДА ВЫБОР
				|				КОГДА СУММА(ВременнаяТаблицаСотрудники.ДеньУвольнения) = 0
				|					ТОГДА ДЕНЬ(&КонецПериода)
				|				ИНАЧЕ СУММА(ВременнаяТаблицаСотрудники.ДеньУвольнения)
				|			КОНЕЦ - СУММА(ВременнаяТаблицаСотрудники.ДеньПриема) >= 15
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК Больше15дней
				|ПОМЕСТИТЬ ВременнаяТаблицаСотрудникиОтработаноДней
				|ИЗ
				|	ВременнаяТаблицаСотрудники КАК ВременнаяТаблицаСотрудники
				|
				|СГРУППИРОВАТЬ ПО
				|	ВременнаяТаблицаСотрудники.ФизЛицо
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	ФизЛицо";
			ТекстыЗапроса.Добавить(ТекстЗапроса);
			
			// В случае если ранее был оформлен документ в текущем периоде
			// с расчетом от обратного, то в текущем документе не нужно применять вычет
			ТекстЗапроса = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Начисления.ФизЛицо КАК ФизЛицо,
				|	ИСТИНА КАК ВычетРанееПрименен
				|ПОМЕСТИТЬ ВременнаяТаблицаРанееНачисления
				|ИЗ
				|	РегистрРасчета.Начисления КАК Начисления
				|ГДЕ
				|	Начисления.ПериодРегистрации = &НачалоПериода
				|	И НЕ Начисления.Регистратор = &Регистратор
				|	И (Начисления.Организация, Начисления.ФизЛицо) В
				|			(ВЫБРАТЬ
				|				ВременнаяТаблицаНачисления.Организация КАК Организация,
				|				ВременнаяТаблицаНачисления.ФизЛицо КАК ФизЛицо
				|			ИЗ
				|				ВременнаяТаблицаНачисления КАК ВременнаяТаблицаНачисления)
				|	И Начисления.ВидРасчета.РасчетОтОбратного
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	ФизЛицо";
			ТекстыЗапроса.Добавить(ТекстЗапроса);
			
			// Налоговые ставки.
			ТекстЗапроса = 
				"ВЫБРАТЬ
				|	Начисления.НомерСтроки КАК НомерСтроки,
				|	Начисления.ВидРасчета.ОблагаетсяПН КАК ОблагаетсяПН,
				|	Начисления.ВидРасчета.ОблагаетсяСФ КАК ОблагаетсяСФ,
				|	Начисления.ВидРасчета.ОблагаетсяПрофВзнос КАК ОблагаетсяПрофВзнос,
				|	ЕСТЬNULL(СтавкиНалоговЗаработнойПлатыСрезПоследних.СтавкаПФР, 0) КАК СтавкаПФР,
				|	ЕСТЬNULL(СтавкиНалоговЗаработнойПлатыСрезПоследних.СтавкаГНПФР, 0) КАК СтавкаГНПФР,
				|	ЕСТЬNULL(СтавкиНалоговЗаработнойПлатыСрезПоследних.СтавкаПН, 0) КАК СтавкаПН,
				|	ЕСТЬNULL(СтавкиНалоговЗаработнойПлатыСрезПоследних.Вычеты, 0) КАК Вычеты,
				|	ЕСТЬNULL(СтавкиНалоговЗаработнойПлатыСрезПоследних.НеВычитатьПФ, ЛОЖЬ) КАК НеВычитатьПФ,
				|	ЕСТЬNULL(СтатусыСотрудниковСрезПоследних.ДопВычет, 0) КАК ДопВычет,
				|	ЕСТЬNULL(ВременнаяТаблицаСотрудникиОтработаноДней.Больше15дней, ИСТИНА) КАК ОтработаноБольше15дней,
				|	ЕСТЬNULL(ВременнаяТаблицаРанееНачисления.ВычетРанееПрименен, ЛОЖЬ) КАК ВычетРанееПрименен
				|ИЗ
				|	РегистрРасчета.Начисления КАК Начисления
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыСотрудников.СрезПоследних(
				|				&КонецПериода,
				|				(Организация, ФизЛицо) В
				|					(ВЫБРАТЬ
				|						ВременнаяТаблицаНачисления.Организация КАК Организация,
				|						ВременнаяТаблицаНачисления.ФизЛицо КАК ФизЛицо
				|					ИЗ
				|						ВременнаяТаблицаНачисления КАК ВременнаяТаблицаНачисления)) КАК СтатусыСотрудниковСрезПоследних
				|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНалоговЗаработнойПлаты.СрезПоследних(&КонецПериода, ) КАК СтавкиНалоговЗаработнойПлатыСрезПоследних
				|			ПО СтатусыСотрудниковСрезПоследних.Статус = СтавкиНалоговЗаработнойПлатыСрезПоследних.Статус
				|		ПО Начисления.ФизЛицо = СтатусыСотрудниковСрезПоследних.ФизЛицо
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСотрудникиОтработаноДней КАК ВременнаяТаблицаСотрудникиОтработаноДней
				|		ПО Начисления.ФизЛицо = ВременнаяТаблицаСотрудникиОтработаноДней.ФизЛицо
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаРанееНачисления КАК ВременнаяТаблицаРанееНачисления
				|		ПО Начисления.ФизЛицо = ВременнаяТаблицаРанееНачисления.ФизЛицо
				|ГДЕ
				|	Начисления.Регистратор = &Регистратор
				|	И Начисления.ВидРасчета.КатегорияРасчета = &КатегорияРасчета
				|	И Начисления.ВидРасчета.РасчетОтОбратного
				|
				|УПОРЯДОЧИТЬ ПО
				|	НомерСтроки";
			ТекстыЗапроса.Добавить(ТекстЗапроса);
		КонецЕсли;	
		
	ИначеЕсли ИмяРегистра = "Удержания" Тогда 
		
		// формирование текста запроса
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|Удержания.НомерСтроки 								КАК НомерСтроки,
			|Удержания.ВидРасчета.ТребуетсяРасчетБазы 			КАК ТребуетсяРасчетБазы,
			|Удержания.ВидРасчета.ТребуетсяРасчетВремени 		КАК ТребуетсяРасчетВремени,
			|ЛОЖЬ										 		КАК ТребуетсяРасчетВремениВЧасах,
			|Удержания.ВидРасчета.СпособРасчета 				КАК СпособРасчета";
				
		Если НеобходимыеДанные.ТребуетсяРасчетБазы Тогда 
			ТекстЗапроса = ТекстЗапроса + ",
			|ЕстьNULL(УдержанияБазаНачисления.РезультатБаза, 0) КАК РезультатБаза";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
			|ИЗ РегистрРасчета.Удержания КАК Удержания";	
		
		Если НеобходимыеДанные.ТребуетсяРасчетБазы Тогда 
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.Удержания.БазаНачисления(&ИзмеренияОсновного, &ИзмеренияБазового, ,Регистратор = &Регистратор) КАК УдержанияБазаНачисления
			|ПО УдержанияБазаНачисления.НомерСтроки = Удержания.НомерСтроки";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ Удержания.Регистратор = &Регистратор
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
		ТекстыЗапроса.Добавить(ТекстЗапроса);
	КонецЕсли;
	
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ДанныеДляРасчета = Новый Структура;
	ДанныеДляРасчета.Вставить("ИсходныеДанные", МассивРезультатов[ИндексТаблицыИсходныеДанные].Выбрать());
	ДанныеДляРасчета.Вставить("ТаблицаРазрезы", ?(НеобходимыеДанные.ТребуетсяРасчетБазыВРазрезе, МассивРезультатов[ИндексТаблицаРазрезы].Выгрузить(), Неопределено));
	ДанныеДляРасчета.Вставить("ТаблицаСтавкиНалогов", ?(НеобходимыеДанные.РасчетОтОбратного, МассивРезультатов[ИндексТаблицаСтавкиНалогов].Выгрузить(), Неопределено));
	
	Возврат ДанныеДляРасчета;
КонецФункции	

// Механизм обработки в цикле записей из набора записей расчитываемого регистра расчета
//
// Параметры:
//  ИмяРегистра				 - 	 - 
//  ИсходныеДанные			 - 	 - 
//  НаборЗаписейРегистра	 - 	 - 
//  ТабличнаяЧастьДокумента	 - 	 - 
//  ТаблицаРазрезы			 - 	 - 
//  Ошибки					 - 	 - 
//  МассивСтрокДляУдаления	 - 	 - 
//
Процедура РассчитатьЗаписиНабора(ИмяРегистра, ИсходныеДанные, НаборЗаписейРегистра, ТабличнаяЧастьДокумента, ДанныеДляРасчета, Ошибки, МассивСтрокДляУдаления) Экспорт 
	МассивСообщений = Новый Массив;
	
	ДополнительныеПараметры = Новый Структура("НормаДней, НормаЧасов", 0, 0);
	ДополнительныеПараметры.Вставить("КэшВычетРанееПрименен", Новый Соответствие);
	
	СтруктураПоиска = Новый Структура("НомерСтроки");
	Для Каждого СтрокаДвижений Из НаборЗаписейРегистра Цикл 
		СтруктураПоиска.НомерСтроки = СтрокаДвижений.НомерСтроки;
		
		Если ИсходныеДанные.НайтиСледующий(СтруктураПоиска) Тогда
			// Расчет каждой записи набора записей
			РассчитатьЗаписьРегистраРасчета(ИмяРегистра, СтрокаДвижений, ИсходныеДанные, ДанныеДляРасчета, Ошибки, ДополнительныеПараметры);
			
			Если ТабличнаяЧастьДокумента = Неопределено Тогда 
				Продолжить;
			КонецЕсли;	
			
			// получаем текущую строку
			СтрокаТабличнойЧасти = ТабличнаяЧастьДокумента.Получить(НаборЗаписейРегистра.Индекс(СтрокаДвижений));
			
			Если СтрокаТабличнойЧасти = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			СтрокаТабличнойЧасти.Результат = СтрокаДвижений.Результат;
			
			Если ИмяРегистра = "Начисления" Тогда
				Если НЕ СтрокаТабличнойЧасти.РучнаяКорректировка Тогда 
					СтрокаТабличнойЧасти.ОтработаноДней = СтрокаДвижений.ОтработаноДней;
					СтрокаТабличнойЧасти.ОтработаноЧасов = СтрокаДвижений.ОтработаноЧасов;
				КонецЕсли;	
				
				СтрокаТабличнойЧасти.НормаДней = ДополнительныеПараметры.НормаДней;
				СтрокаТабличнойЧасти.НормаЧасов = ДополнительныеПараметры.НормаЧасов;
			КонецЕсли;	
			
			// Удаление сроки с нулевым результатом
			Если СтрокаДвижений.Результат = 0 Тогда 
				МассивСтрокДляУдаления.Добавить(СтрокаТабличнойЧасти);	
				Продолжить;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры	

// Алгоритмы расчета начислений и удержаний в соответствии со способами расчета
// процедуру вызываем при расчете каждой записи из набора записей регистра расчета.
//
// Параметры:
//  ИмяРегистра		 - 	 - 
//  СтрокаДвижений	 - 	 - 
//  ИсходныеДанные	 - 	 - 
//  ТаблицаРазрезы	 - 	 - 
//  Ошибки			 - 	 - 
//
Процедура РассчитатьЗаписьРегистраРасчета(ИмяРегистра, СтрокаДвижений, ИсходныеДанные, ДанныеДляРасчета, Ошибки, ДополнительныеПараметры) Экспорт 
	
	ВидРасчета = СтрокаДвижений.ВидРасчета;
	СпособРасчета = ИсходныеДанные.СпособРасчета;
	
	Результат 		= 0;
	ФактДней		= 0;
	ФактЧасов		= 0;
	НормаДней       = 0;
	НормаЧасов      = 0;
	ДнейОтработки 	= 0;
	ЧасовОтработки 	= 0;
	ЧасовНеявки		= 0;

	Если ИсходныеДанные.ТребуетсяРасчетВремени Тогда 
		ФактДней		= ?(СтрокаДвижений.РучнаяКорректировка, СтрокаДвижений.ОтработаноДней, ИсходныеДанные.ЗначениеДнейФактическийПериодДействия);
		ФактЧасов		= ?(СтрокаДвижений.РучнаяКорректировка, СтрокаДвижений.ОтработаноЧасов, ИсходныеДанные.ЗначениеЧасовФактическийПериодДействия); 
		НормаДней       = ИсходныеДанные.ЗначениеДнейПериодДействия;
		НормаЧасов      = ИсходныеДанные.ЗначениеЧасовПериодДействия;
		
		// Корректировка дней по данным табеля.
		ДнейОтработки = ?(СтрокаДвижений.РучнаяКорректировка, 0, ИсходныеДанные.ДнейОтработки);
		
		Если СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоМесячнойСтавкеПоДням
			Или СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоДневнойСтавке
			Или СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула Тогда 
			ФактДней = ФактДней + ДнейОтработки;
		КонецЕсли;
	КонецЕсли;	
	
	// Корректировка часов по данным табеля.
	Если ИсходныеДанные.ТребуетсяРасчетВремениВЧасах
		И НЕ СтрокаДвижений.РучнаяКорректировка Тогда 
		ЧасовОтработки = ?(СтрокаДвижений.РучнаяКорректировка, 0, ИсходныеДанные.ЧасовОтработки);
		ЧасовНеявки = ?(СтрокаДвижений.РучнаяКорректировка, 0, ИсходныеДанные.ЧасовНеявки);
		
		Если СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоЧасовойСтавке
			Или СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоМесячнойСтавкеПоЧасам
			Или СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула Тогда 
			ФактЧасов = ФактЧасов + ЧасовОтработки - ЧасовНеявки;
		КонецЕсли;	
	КонецЕсли;	
	
	ДополнительныеПараметры.НормаДней = 0;
	ДополнительныеПараметры.НормаЧасов = 0;
	
	ШаблонТекстаСообщения = "";
	
	Если ИмяРегистра = "Начисления" Тогда 
		
		РасчетОтОбратного = ИсходныеДанные.РасчетОтОбратного;
		
		// этот "Если..." нужно расширять при появлении новых способов расчета		
		
		// Процентом (формула = РезультатБаза * Размер)
		Если СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.Процентом") Тогда 
			Если ИсходныеДанные.РезультатБаза = 0 Тогда 
				ШаблонТекстаСообщения = НСтр("ru = 'Не определены базовые начисления для вида расчета ""%1""; сотрудник ""%2"".'");
			Иначе
				Результат = ИсходныеДанные.РезультатБаза * СтрокаДвижений.Размер / 100;
			КонецЕсли;	

		// Фиксированной суммой (формула = Размер)
		ИначеЕсли СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ФиксированнойСуммой") Тогда
			Результат = СтрокаДвижений.Размер;
			
		// По месячной ставке по дням (формула = Размер * ФактДней / НормаДней)
		ИначеЕсли СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ПоМесячнойСтавкеПоДням") Тогда
			Если НормаДней = 0 Или ФактДней = 0 Тогда 
				ШаблонТекстаСообщения = НСтр("ru = 'Нет рабочих дней в заданном периоде для вида расчета ""%1""; сотрудник ""%2"".'");
			Иначе	
				Результат = СтрокаДвижений.Размер * (ФактДней / НормаДней);
			КонецЕсли;
			
		// По месячной ставке по часам (формула = Размер * ФактЧасов / НормаЧасов)
		ИначеЕсли СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ПоМесячнойСтавкеПоЧасам") Тогда
			Если НормаЧасов = 0 Или ФактЧасов = 0 Тогда 
				ШаблонТекстаСообщения = НСтр("ru = 'Нет рабочих часов в заданном периоде для вида расчета ""%1""; сотрудник ""%2"".'");
			Иначе	
				Результат = СтрокаДвижений.Размер * (ФактЧасов / НормаЧасов);
			КонецЕсли;
			
		// По дневной ставке (формула = Размер * ФактДней)
		ИначеЕсли СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ПоДневнойСтавке") Тогда
			Если ФактДней = 0 Тогда 
				ШаблонТекстаСообщения = НСтр("ru = 'Нет рабочих дней в заданном периоде для вида расчета ""%1""; сотрудник ""%2"".'");
			Иначе	
				Результат = СтрокаДвижений.Размер * ФактДней;
			КонецЕсли;
			
		// По часовой ставке (формула = Размер * ФактЧасов)
		ИначеЕсли СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ПоЧасовойСтавке") Тогда
			Если ФактЧасов = 0 Тогда 
				ШаблонТекстаСообщения = НСтр("ru = 'Нет рабочих часов в заданном периоде для вида расчета ""%1""; сотрудник ""%2"".'");
			Иначе	
				Результат = СтрокаДвижений.Размер * ФактЧасов;
			КонецЕсли;
			
		// Ночные, Праздничные, 
		
		// Работа сверхурочно (формула = РазмерОсновногоВидаРасчета / НормаЧасов * ФактЧасов * Коэффициент)
		ИначеЕсли СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.РаботаСверхурочно") Тогда
			ФактДней = СтрокаДвижений.ОтработаноДней;
			ФактЧасов = СтрокаДвижений.ОтработаноЧасов;
			
			Если НормаЧасов = 0 Или ФактЧасов = 0 Тогда 
				ШаблонТекстаСообщения = НСтр("ru = 'Нет рабочих часов в заданном периоде; вид расчета ""%1""; сотрудник ""%2"".'");
			ИначеЕсли ИсходныеДанные.КоличествоЧасов > 0 
				И ИсходныеДанные.Коэффициент1 = 0 Тогда 
				ШаблонТекстаСообщения = НСтр("ru = 'Не указан коэффициент (1); вид расчета ""%1""; сотрудник ""%2"".'");
			ИначеЕсли ИсходныеДанные.Коэффициент2 = 0 Тогда 
				ШаблонТекстаСообщения = НСтр("ru = 'Не указан коэффициент (2); вид расчета ""%1""; сотрудник ""%2"".'");
			Иначе
				// Разделение количества часов на применение первого и второго коэффициентов.
				КоличествоЧасов = Мин(ФактЧасов, ИсходныеДанные.КоличествоЧасов);
				ОстатокЧасов = ФактЧасов - КоличествоЧасов;
				
				// Расчет результатов.				
				Результат1 = СтрокаДвижений.Размер / НормаЧасов * КоличествоЧасов * ИсходныеДанные.Коэффициент1;
				Результат2 = СтрокаДвижений.Размер / НормаЧасов * ОстатокЧасов * ИсходныеДанные.Коэффициент2;
				
				Результат = Результат1 + Результат2;
			КонецЕсли;
			
		// Выходные/парздничные (формула = РазмерОсновногоВидаРасчета / НормаЧасов * ФактЧасов * Коэффициент)
		ИначеЕсли СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ВыходныеИПраздничные") Тогда
			ФактДней = СтрокаДвижений.ОтработаноДней;
			ФактЧасов = СтрокаДвижений.ОтработаноЧасов;
			
			Если НормаЧасов = 0 Или ФактЧасов = 0 Тогда 
				ШаблонТекстаСообщения = НСтр("ru = 'Нет рабочих часов в заданном периоде; вид расчета ""%1""; сотрудник ""%2"".'");
			ИначеЕсли ИсходныеДанные.Коэффициент1 = 0 Тогда 
				ШаблонТекстаСообщения = НСтр("ru = 'Не указан коэффициент (1); вид расчета ""%1""; сотрудник ""%2"".'");
			Иначе
				Результат = СтрокаДвижений.Размер / НормаЧасов * ФактЧасов * ИсходныеДанные.Коэффициент1;
			КонецЕсли;
			
		// Произвольная формула.
		ИначеЕсли СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ПроизвольнаяФормула") Тогда 
			//ФактДней = СтрокаДвижений.ОтработаноДней;
			//ФактЧасов = СтрокаДвижений.ОтработаноЧасов;
			
			Если СтрНайти(ИсходныеДанные.Формула, "НормаДней") > 0 И НормаДней = 0 Тогда 
				ШаблонТекстаСообщения = НСтр("ru = 'Нет рабочих дней в заданном периоде для вида расчета ""%1""; сотрудник ""%2"".'");
			ИначеЕсли СтрНайти(ИсходныеДанные.Формула, "ФактДней") > 0 И ФактДней = 0 Тогда 
				ШаблонТекстаСообщения = НСтр("ru = 'Нет фактических рабочих дней в заданном периоде для вида расчета ""%1""; сотрудник ""%2"".'");
			ИначеЕсли СтрНайти(ИсходныеДанные.Формула, "НормаЧасов") > 0 И НормаЧасов = 0 Тогда 
				ШаблонТекстаСообщения = НСтр("ru = 'Нет рабочих часов в заданном периоде; вид расчета ""%1""; сотрудник ""%2"".'");
			ИначеЕсли СтрНайти(ИсходныеДанные.Формула, "ФактЧасов") > 0 И ФактЧасов = 0 Тогда 
				ШаблонТекстаСообщения = НСтр("ru = 'Нет фактических рабочих часов в заданном периоде; вид расчета ""%1""; сотрудник ""%2"".'");
			ИначеЕсли ИсходныеДанные.Формула = "" Тогда 
				Результат = 0;
			Иначе 
				Результат = РасчетПоПроизвольнойФормуле(СтрокаДвижений, ИсходныеДанные, НормаДней, НормаЧасов, ФактДней, ФактЧасов, 
					ДанныеДляРасчета.ТаблицаРазрезы, ШаблонТекстаСообщения);
			КонецЕсли;	
		КонецЕсли;	
			
		Если ВидРасчета.ЗачетОтработанногоВремени Тогда 
			СтрокаДвижений.ОтработаноДней = ФактДней * ?(СтрокаДвижений.Сторно, -1, 1);
			СтрокаДвижений.ОтработаноЧасов = ФактЧасов * ?(СтрокаДвижений.Сторно, -1, 1);
			
			ДополнительныеПараметры.НормаДней = НормаДней;
			ДополнительныеПараметры.НормаЧасов = НормаЧасов;
		КонецЕсли;
		
		// Учет заработной платы в валюте.
		Если ДанныеДляРасчета.УчетЗаработнойПлатыВВалюте Тогда 
			Если ИсходныеДанные.Курс = 0 Тогда 
				ШаблонТекстаСообщения = НСтр("ru = 'Не задан курс валют для расчета заработной платы для вида расчета ""%1""; сотрудник ""%2"".'");
			КонецЕсли; 
			
			Результат = Результат * ИсходныеДанные.Курс / ИсходныеДанные.Кратность;			
		КонецЕсли;		
		
		////////////////////////////////////////////////////////////////////////////////
		// РАСЧЕТ ОТ ОБРАТНОГО
		
		Если РасчетОтОбратного И ШаблонТекстаСообщения = "" Тогда 
			СтрокаДвижений.Результат = Результат;
			Результат = РасчетОтОбратного(СтрокаДвижений, ИсходныеДанные, ДанныеДляРасчета, ШаблонТекстаСообщения, ДополнительныеПараметры);
		КонецЕсли;	
		
	ИначеЕсли ИмяРегистра = "Удержания"	 Тогда 
		// этот "Если..." нужно расширять при появлении новых способов расчета		
		
		// Процентом (формула = РезультатБаза * Размер)
		Если СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаУдержаний.Процентом") Тогда 
			Если ИсходныеДанные.РезультатБаза = 0 Тогда 
				ШаблонТекстаСообщения = НСтр("ru = 'Не определены базовые начисления для вида расчета ""%1""; сотрудник ""%2"".'");
			ИначеЕсли ИсходныеДанные.РезультатБаза <= СтрокаДвижений.РазмерВычета Тогда 
				ШаблонТекстаСообщения = НСтр("ru = 'Размер вычета налоговых сумм превышает базовые начисления для вида расчета ""%1""; сотрудник ""%2"".'");
			Иначе
				Результат = (ИсходныеДанные.РезультатБаза - СтрокаДвижений.РазмерВычета) * СтрокаДвижений.Размер / 100;
			КонецЕсли;	
			
		// Фиксированной суммой (формула = Размер)
		ИначеЕсли СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаУдержаний.ФиксированнойСуммой") Тогда
			Результат = СтрокаДвижений.Размер;
		КонецЕсли;		
	КонецЕсли;	
	
	СтрокаДвижений.Результат = Результат * ?(СтрокаДвижений.Сторно, -1, 1);
	
	Если НЕ ШаблонТекстаСообщения = "" Тогда 
		ТекстДляОднойОшибки = СтрШаблон(ШаблонТекстаСообщения, ВидРасчета, СтрокаДвижений.ФизЛицо);
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	Неопределено, ТекстДляОднойОшибки, ИмяРегистра,, ТекстДляОднойОшибки);
	КонецЕсли;	
КонецПроцедуры	

// Производит расчет по произвольной формуле
//
// Возвращаемое значение:
//  Результат - Число
//
Функция РасчетПоПроизвольнойФормуле(СтрокаДвижений, ИсходныеДанные, НормаДней, НормаЧасов, ФактДней, ФактЧасов, ТаблицаРазрезы, ШаблонТекстаСообщения)
	Результат = 0;
	
	ТаблицаРазрезы.Индексы.Добавить("НомерСтроки, ВидРасчетаРазрез");	
	
	ФормулаДляРасчета = ИсходныеДанные.Формула;	
	ФормулаДляРасчета = СтрЗаменить(ФормулаДляРасчета, "[НормаДней]", НормаДней);
	ФормулаДляРасчета = СтрЗаменить(ФормулаДляРасчета, "[НормаЧасов]", НормаЧасов);
	ФормулаДляРасчета = СтрЗаменить(ФормулаДляРасчета, "[ФактДней]", ФактДней);
	ФормулаДляРасчета = СтрЗаменить(ФормулаДляРасчета, "[ФактЧасов]", ФактЧасов);
	
	Размер = СтрокаДвижений.Размер;
	Размер = СтрЗаменить(Размер, Символы.НПП, "");
	Размер = СтрЗаменить(Размер, ",", ".");
	ФормулаДляРасчета = СтрЗаменить(ФормулаДляРасчета, "[Размер]", Размер);
	
	// формирование текста запроса
	Пока СтрНайти(ФормулаДляРасчета, "[") > 0
		И СтрНайти(ФормулаДляРасчета, "]") > 0 Цикл 
		
		Позиция1 = СтрНайти(ФормулаДляРасчета, "[");
		Позиция2 = СтрНайти(ФормулаДляРасчета, "]") + 1;
		
		НаименованиеВидаРасчетаФормулы = Сред(ФормулаДляРасчета, Позиция1, Позиция2 - Позиция1);
		
		НаименованиеВидаРасчета = СтрЗаменить(НаименованиеВидаРасчетаФормулы, "[", "");
		НаименованиеВидаРасчета = СтрЗаменить(НаименованиеВидаРасчета, "]", "");

		ВидРасчетаРазрез = ПланыВидовРасчета.ВидыНачислений.НайтиПоНаименованию(НаименованиеВидаРасчета, Истина);
		
		РезультатВидРасчетаРазрез = 0;
		Если ЗначениеЗаполнено(ВидРасчетаРазрез) Тогда 
			НайденныеСтроки = ТаблицаРазрезы.НайтиСтроки(Новый Структура("НомерСтроки, ВидРасчетаРазрез", СтрокаДвижений.НомерСтроки, ВидРасчетаРазрез));
			Если НайденныеСтроки.Количество() > 0 Тогда 
				РезультатВидРасчетаРазрез = НайденныеСтроки[0].РезультатБаза;	
			КонецЕсли;	
		КонецЕсли;	
		
		Если РезультатВидРасчетаРазрез = 0 Тогда
			ШаблонТекстаСообщения = НСтр("ru = 'Не определен результат начисления для вида расчета ""%1""; сотрудник ""%2"". Результат по виду начислений ""%ВидРасчетаРазрез%"" равен 0.'");
			ШаблонТекстаСообщения = СтрЗаменить(ШаблонТекстаСообщения, "%ВидРасчетаРазрез%", НаименованиеВидаРасчета);
		КонецЕсли;
		
		РезультатВидРасчетаРазрез = СтрЗаменить(РезультатВидРасчетаРазрез, Символы.НПП, "");
		РезультатВидРасчетаРазрез = СтрЗаменить(РезультатВидРасчетаРазрез, ",", ".");
		
		ФормулаДляРасчета = СтрЗаменить(ФормулаДляРасчета, НаименованиеВидаРасчетаФормулы, РезультатВидРасчетаРазрез);
	КонецЦикла;	

	Попытка
		Результат = Вычислить(ФормулаДляРасчета);
	Исключение
		ШаблонТекстаСообщения = НСтр("ru = '%ТекстОшибки%; вид расчета ""%1""; сотрудник ""%2"".'");
		ШаблонТекстаСообщения = СтрЗаменить(ШаблонТекстаСообщения, "%ТекстОшибки%",  ОписаниеОшибки());
	КонецПопытки;		
	
	Возврат Результат;
КонецФункции // РасчетПоПроизвольнойФормуле()

// Производит расчет от обратного
//
// Возвращаемое значение:
//  Результат - Число
//
Функция РасчетОтОбратного(СтрокаДвижений, ИсходныеДанные, ДанныеДляРасчета, ШаблонТекстаСообщения, ДополнительныеПараметры)
	Результат = 0;
	
	ДанныеУчетнойПолитики = ДанныеДляРасчета.ДанныеУчетнойПолитики;
	
	// Налоговые ставки.
	ТаблицаСтавкиНалогов = ДанныеДляРасчета.ТаблицаСтавкиНалогов;
	ТаблицаСтавкиНалогов.Индексы.Добавить("НомерСтроки");	
	НайденныеСтроки = ТаблицаСтавкиНалогов.НайтиСтроки(Новый Структура("НомерСтроки", СтрокаДвижений.НомерСтроки));
	Если НайденныеСтроки.Количество() = 0 Тогда 
		ШаблонТекстаСообщения = НСтр("ru = 'Не определены налоговые ставки.'");
		ШаблонТекстаСообщения = НСтр("ru = '%ТекстОшибки%; вид расчета ""%1""; сотрудник ""%2"".'");
		ШаблонТекстаСообщения = СтрЗаменить(ШаблонТекстаСообщения, "%ТекстОшибки%",  ОписаниеОшибки());

		Возврат Результат;
	КонецЕсли;	
		
	СтрокаДанныеДляРасчета = НайденныеСтроки[0];
	// Соц.фонд.
	СтавкаПФР 	= ?(СтрокаДанныеДляРасчета.ОблагаетсяСФ, СтрокаДанныеДляРасчета.СтавкаПФР, 0) / 100;
	СтавкаГНПФР = ?(СтрокаДанныеДляРасчета.ОблагаетсяСФ, СтрокаДанныеДляРасчета.СтавкаГНПФР, 0) / 100;
	СтавкаСФ = СтавкаПФР + СтавкаГНПФР;
	НеВычитатьПФ = СтрокаДанныеДляРасчета.НеВычитатьПФ;	
	
	// Подоходный налог.
	СтавкаПН = ?(СтрокаДанныеДляРасчета.ОблагаетсяПН, СтрокаДанныеДляРасчета.СтавкаПН, 0) / 100;
	ВычетРанееПримененВТекущемДокументе = ?(ДополнительныеПараметры.КэшВычетРанееПрименен.Получить(СтрокаДвижений.ФизЛицо) = Неопределено, Ложь, Истина);
	
	Вычеты = ?(СтрокаДанныеДляРасчета.ОтработаноБольше15дней 
		И НЕ СтрокаДанныеДляРасчета.ВычетРанееПрименен 
		И НЕ ВычетРанееПримененВТекущемДокументе, 
		СтрокаДанныеДляРасчета.Вычеты + СтрокаДанныеДляРасчета.ДопВычет, 0) * 100;
		
	Если СтрокаДанныеДляРасчета.ОблагаетсяПН 
			И Вычеты > 0 И НЕ ВычетРанееПримененВТекущемДокументе Тогда 
		ДополнительныеПараметры.КэшВычетРанееПрименен.Вставить(СтрокаДвижений.ФизЛицо, Истина);		
	КонецЕсли;	
		
	// Проф.взнос.
	СтавкаПрофВзнос = ?(СтрокаДанныеДляРасчета.ОблагаетсяПрофВзнос, ДанныеУчетнойПолитики.СтавкаПрофВзнос, 0) / 100;

	// Расчет в зависимоти от вычета соц.фонда при расчете подоходного налога.
	Если НеВычитатьПФ Тогда 
		// Учет расчета проф.взноса
		// Проф.взноса нет.
		Если СтавкаПрофВзнос = 0 Тогда  
			Результат = (СтрокаДвижений.Результат - Вычеты * СтавкаПН)
				/ (1 - СтавкаСФ - СтавкаПН);
		// Проф.взнос за вычетом налогов.
		// или Проф.взнос за вычетом только ПФР и ГНПФР.
		ИначеЕсли ДанныеУчетнойПолитики.ПрофВзносЗаВычетомПФРиГНПФР Тогда 
			Результат = (СтрокаДвижений.Результат - Вычеты * СтавкаПН * (1 - СтавкаПрофВзнос)) 
				/ (1 - СтавкаСФ - СтавкаПН 
				- СтавкаПрофВзнос
				+ СтавкаСФ * СтавкаПрофВзнос);
		// Проф.взнос за вычетом только ПН.		
		ИначеЕсли ДанныеУчетнойПолитики.ПрофВзносЗаВычетомПН Тогда
			Результат = (СтрокаДвижений.Результат - Вычеты * СтавкаПН * (1 - СтавкаПрофВзнос)) 
				/ (1 - СтавкаСФ - СтавкаПН 
				- СтавкаПрофВзнос);
		КонецЕсли;		
	Иначе
		// Учет расчета проф.взноса
		// Проф.взноса нет.
		Если СтавкаПрофВзнос = 0 Тогда  
			Результат = (СтрокаДвижений.Результат - Вычеты * СтавкаПН)
				/ (1 - СтавкаСФ - СтавкаПН + СтавкаСФ * СтавкаПН);
		// Проф.взнос за вычетом налогов.
		ИначеЕсли ДанныеУчетнойПолитики.ПрофВзносЗаВычетомПФРиГНПФР
			И ДанныеУчетнойПолитики.ПрофВзносЗаВычетомПН Тогда 
			Результат = (СтрокаДвижений.Результат - Вычеты * СтавкаПН * (1 - СтавкаПрофВзнос)) 
				/ (1 - СтавкаСФ - СтавкаПН + СтавкаСФ * СтавкаПН 
				- СтавкаПрофВзнос + СтавкаСФ * СтавкаПрофВзнос 
				+ СтавкаПрофВзнос * СтавкаПН
				- СтавкаСФ * СтавкаПН * СтавкаПрофВзнос);
		// Проф.взнос за вычетом только ПФР и ГНПФР.		
		ИначеЕсли ДанныеУчетнойПолитики.ПрофВзносЗаВычетомПФРиГНПФР Тогда 
			Результат = (СтрокаДвижений.Результат - Вычеты * СтавкаПН) 
				/ (1 - СтавкаСФ - СтавкаПН + СтавкаСФ * СтавкаПН 
				- СтавкаПрофВзнос + СтавкаСФ * СтавкаПрофВзнос);
		// Проф.взнос за вычетом только ПН.		
		ИначеЕсли ДанныеУчетнойПолитики.ПрофВзносЗаВычетомПН Тогда
			Результат = (СтрокаДвижений.Результат - Вычеты * СтавкаПН * (1 - СтавкаПрофВзнос)) 
				/ (1 - СтавкаСФ - СтавкаПН + СтавкаСФ * СтавкаПН 
				- СтавкаПрофВзнос + СтавкаПН * СтавкаПрофВзнос 
				- СтавкаСФ * СтавкаПН * СтавкаПрофВзнос);
		КонецЕсли;		
	КонецЕсли;
	
	Результат = Окр(Результат, 2);
	
	// Корректировка Результата
	// Произведем расчет налогов от полученного результата
	// и отнимим налоги- в итоге результат должен быть равен результату из строки движений
	// иначе увеличим/уменьшим на разницу.
	
	// Соц.фонд.
	СуммаПФР = Окр(Результат * СтавкаПФР, 2);
	СуммаГНПФР = Окр(Результат * СтавкаГНПФР, 2);
	
	// Подоходный налог.
	Если НеВычитатьПФ Тогда 			
		СуммаПН = Окр((Результат - Вычеты) * СтавкаПН, 2);
	Иначе 	
		СуммаПН = Окр((Результат - СуммаПФР - СуммаГНПФР - Вычеты) * СтавкаПН, 2);
	КонецЕсли;
	
	// Проф.взнос.
	СуммаПрофВзнос = Окр((Результат 
		- ?(ДанныеУчетнойПолитики.ПрофВзносЗаВычетомПФРиГНПФР, СуммаПФР + СуммаГНПФР, 0)
		- ?(ДанныеУчетнойПолитики.ПрофВзносЗаВычетомПН, СуммаПН, 0)) * СтавкаПрофВзнос, 2);
	
	Разница = СтрокаДвижений.Результат - (Результат - СуммаПФР - СуммаГНПФР - СуммаПН - СуммаПрофВзнос);
	
	Если СуммаПН > 0 Тогда  
		Результат = Результат + Разница;				
	Иначе
		Результат = СтрокаДвижений.Результат * (1 - СтавкаПрофВзнос) / (1 - СтавкаСФ - СтавкаПрофВзнос + СтавкаСФ * СтавкаПрофВзнос);
		Результат = Окр(Результат, 2);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции // РасчетПоПроизвольнойФормуле()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ГРАФИКАМИ

// Функция возвращает структура с количеством дней графика работ за период
//
// Параметры:
//  ГрафикРаботы  	- СправочникСсылка.ГрафикиРаботы - график работы, по которому работает сотрудник
//  ДатаНачала 		- Дата - дата начала
//  ДатаОкончания 	- Дата - дата окончания
//
// Возвращаемое значение:
//   Структура, количество дней в графике
//
Функция КоличествоДнейГрафикаРаботы(ГрафикРаботы, ДатаНачала, ДатаОкончания) Экспорт 

	КоличествоДней = Новый Структура();
	КоличествоДней.Вставить("ГрафикРаботы", ГрафикРаботы);
	КоличествоДней.Вставить("КоличествоДней", 0); 
	КоличествоДней.Вставить("КоличествоДнейРабочий", 0); 
	КоличествоДней.Вставить("КоличествоДнейПредпраздничный", 0); 
	КоличествоДней.Вставить("КоличествоДнейСуббота", 0);
	КоличествоДней.Вставить("КоличествоДнейВоскресенье", 0); 
	КоличествоДней.Вставить("КоличествоДнейПраздник", 0);
	КоличествоДней.Вставить("КоличествоДнейВыходной", 0);
	КоличествоДней.Вставить("КоличествоДнейБезПраздник", 0);
	КоличествоДней.Вставить("КоличествоДнейНеРабочих", 0);
	
	КоличествоДней.Вставить("КоличествоЧасов", 0); 
	КоличествоДней.Вставить("КоличествоЧасовРабочий", 0); 
	КоличествоДней.Вставить("КоличествоЧасовПредпраздничный", 0); 
	КоличествоДней.Вставить("КоличествоЧасовСуббота", 0); 
	КоличествоДней.Вставить("КоличествоЧасовВоскресенье", 0); 
	КоличествоДней.Вставить("КоличествоЧасовПраздник", 0); 
	КоличествоДней.Вставить("КоличествоЧасовВыходной", 0); 
	КоличествоДней.Вставить("КоличествоЧасовБезПраздник", 0); 
	КоличествоДней.Вставить("КоличествоЧасовНеРабочих", 0);
	
	КоличествоДней.Вставить("ЗначениеДней", 0); 
	КоличествоДней.Вставить("ЗначениеЧасов", 0);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КалендариГрафиковРабот.ГрафикРаботы,
		|	СУММА(1) КАК КоличествоДней,
		|	СУММА(ВЫБОР
		|			КОГДА КалендариГрафиковРабот.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоДнейРабочий,
		|	СУММА(ВЫБОР
		|			КОГДА КалендариГрафиковРабот.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоДнейПредпраздничный,
		|	СУММА(ВЫБОР
		|			КОГДА КалендариГрафиковРабот.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Выходной)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоДнейВыходной,
		|	СУММА(ВЫБОР
		|			КОГДА КалендариГрафиковРабот.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Суббота)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоДнейСуббота,
		|	СУММА(ВЫБОР
		|			КОГДА КалендариГрафиковРабот.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Воскресенье)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоДнейВоскресенье,
		|	СУММА(ВЫБОР
		|			КОГДА КалендариГрафиковРабот.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоДнейПраздник,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ КалендариГрафиковРабот.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоДнейБезПраздник,
		|	СУММА(ВЫБОР
		|			КОГДА ЗначениеДней = 0
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоДнейНеРабочих,
		
		// часов
		|	СУММА(ЗначениеЧасов) КАК КоличествоЧасов,
		|	СУММА(ВЫБОР
		|			КОГДА КалендариГрафиковРабот.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
		|				ТОГДА ЗначениеЧасов
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоЧасовРабочий,
		|	СУММА(ВЫБОР
		|			КОГДА КалендариГрафиковРабот.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
		|				ТОГДА ЗначениеЧасов
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоЧасовПредпраздничный,
		|	СУММА(ВЫБОР
		|			КОГДА КалендариГрафиковРабот.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Выходной)
		|				ТОГДА ЗначениеЧасов
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоЧасовВыходной,
		|	СУММА(ВЫБОР
		|			КОГДА КалендариГрафиковРабот.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Суббота)
		|				И ЗначениеЧасов = 0 		
		|				ТОГДА &НормаЧасовЗаполнения
		|			КОГДА КалендариГрафиковРабот.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Суббота)
		|				И НЕ ЗначениеЧасов = 0 
		|				ТОГДА ЗначениеЧасов
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоЧасовСуббота,
		|	СУММА(ВЫБОР
		|			КОГДА КалендариГрафиковРабот.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Воскресенье)
		|				И ЗначениеЧасов = 0 		
		|				ТОГДА &НормаЧасовЗаполнения
		|			КОГДА КалендариГрафиковРабот.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Воскресенье)
		|				И НЕ ЗначениеЧасов = 0 		
		|				ТОГДА ЗначениеЧасов
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоЧасовВоскресенье,
		|	СУММА(ВЫБОР
		|			КОГДА КалендариГрафиковРабот.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
		|				И ЗначениеЧасов = 0 		
		|				ТОГДА &НормаЧасовЗаполнения
		|			КОГДА КалендариГрафиковРабот.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
		|				И НЕ ЗначениеЧасов = 0 		
		|				ТОГДА ЗначениеЧасов
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоЧасовПраздник,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ КалендариГрафиковРабот.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
		|				ТОГДА ЗначениеЧасов
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоЧасовБезПраздник,
		|	СУММА(ВЫБОР
		|			КОГДА ЗначениеДней = 0
		|				ТОГДА &НормаЧасовЗаполнения
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоЧасовНеРабочих,
		
		|	СУММА(КалендариГрафиковРабот.ЗначениеДней) КАК ЗначениеДней,
		|	СУММА(КалендариГрафиковРабот.ЗначениеЧасов) КАК ЗначениеЧасов
		|ИЗ
		|	РегистрСведений.КалендариГрафиковРабот КАК КалендариГрафиковРабот
		|ГДЕ
		|	КалендариГрафиковРабот.ГрафикРаботы = &ГрафикРаботы
		|	И КалендариГрафиковРабот.Год МЕЖДУ &ГодНачалоПериода И &ГодКонецПериода
		|	И КалендариГрафиковРабот.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	КалендариГрафиковРабот.ГрафикРаботы";
	Запрос.УстановитьПараметр("ГодНачалоПериода", Год(ДатаНачала));
	Запрос.УстановитьПараметр("ГодКонецПериода", Год(ДатаОкончания));
	Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", ДатаОкончания);
	Запрос.УстановитьПараметр("ГрафикРаботы", ГрафикРаботы);
	Запрос.УстановитьПараметр("НормаЧасовЗаполнения", ГрафикРаботы.НормаЧасовЗаполнения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		ЗаполнитьЗначенияСвойств(КоличествоДней, ВыборкаДетальныеЗаписи);	
	КонецЕсли;	

	Возврат КоличествоДней;
КонецФункции // КоличествоДней()

// Функция возвращает Дату, к которой добавлены дни
//
// Параметры:
//  ГрафикРаботы  	- СправочникСсылка.ГрафикиРаботы - график работы, по которому работает сотрудник
//  ДатаНачала 		- Дата - дата начала
//  КоличествоДней	- Число - количество дней, которое нужно добавить
//  МассивВидыДней 	- Массив из Перечисление.ВидыДнейПроизводственногоКалендаря - по каким видам дня нужно добавить
//
// Возвращаемое значение:
//   Структура, количество дней в графике
//
Функция ДобавитьКДатеПоГрафику(ГрафикРаботы, ДатаНачала, КоличествоДней, МассивВидыДней = Неопределено) Экспорт 

	Если МассивВидыДней = Неопределено Тогда 
		МассивВидыДней = Новый Массив;
		МассивВидыДней.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
		МассивВидыДней.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота);
		МассивВидыДней.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье);
		МассивВидыДней.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
		МассивВидыДней.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник);
		МассивВидыДней.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Выходной);
	КонецЕсли;	
	
	ДатаОкончания = ДатаНачала;
	Дней = СтрЗаменить(КоличествоДней,Символы.НПП,"");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ " + Дней + "
		|	КалендариГрафиковРабот.ГрафикРаботы,
		|	КалендариГрафиковРабот.ВидДня КАК ВидДня,
		|	КалендариГрафиковРабот.Дата КАК Дата
		|ПОМЕСТИТЬ ВременнаяТаблицаДни
		|ИЗ
		|	РегистрСведений.КалендариГрафиковРабот КАК КалендариГрафиковРабот
		|ГДЕ
		|	КалендариГрафиковРабот.ГрафикРаботы = &ГрафикРаботы
		|	И КалендариГрафиковРабот.Год >= &ГодНачалоПериода
		|	И КалендариГрафиковРабот.Дата >= &НачалоПериода
		|	И КалендариГрафиковРабот.ВидДня В(&МассивВидыДней)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВременнаяТаблицаДни.Дата) КАК ДатаОкончания
		|ИЗ
		|	ВременнаяТаблицаДни КАК ВременнаяТаблицаДни";
	Запрос.УстановитьПараметр("ГодНачалоПериода", Год(ДатаНачала));
	Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
	Запрос.УстановитьПараметр("ГрафикРаботы", ГрафикРаботы);
	Запрос.УстановитьПараметр("МассивВидыДней", МассивВидыДней);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		ДатаОкончания = ВыборкаДетальныеЗаписи.ДатаОкончания;	
	КонецЕсли;	

	Возврат ДатаОкончания;
КонецФункции // КоличествоДней()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ ПО СРЕДНЕМУ ЗАРАБОТКУ

// Процедура заполняет табличную часть Среднего заработка
//
// Параметры:
//  ПериодРасчетаСреднегоЗаработка	 - Число							- Количество месяцев для расчета среднего заработка
//  НачалоПериода					 - Дата	 							- Начало периода расчета базы среднего заработка
//  КонецПериода					 - Дата	 							- Окончание периода расчета базы среднего заработка
//  ГрафикРаботы					 - СправочникСсылка.ГрафикиРаботы	- Ссылка на справочник графики работ для отбора
//  ДокументСсылка					 - ДокументСсылка	 				- Ссылка на документ
//  НеполныеМесяцы					 - Перечисление.НеполныеМесяцы	 	- Признак, что делать с неполными месяцами
//  ТабличнаяЧастьДокумента			 - ТабличнаяЧасть 	 				- Табличная часть документа для заполнения
// 	Ошибки 					 		 - Массив 							- Массив сообщений пользователю
// 	ДополнительныеПараметры 		 - Структура 						- Структура с дополнительными параметрами для расчета
Процедура ЗаполнитьТабличнуюЧастьСреднийЗаработок(ПериодРасчетаСреднегоЗаработка, НачалоПериода, КонецПериода, 
			ГрафикРаботы, ДокументСсылка, НеполныеМесяцы, ТабличнаяЧастьДокумента, 
			Ошибки = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт 
			
	КоличествоМесяцев = ПериодРасчетаСреднегоЗаработка;
	
	Запрос = Новый Запрос();
	
	Измерения = Новый Массив(2);
	Измерения[0] = "ФизЛицо";
	Измерения[1] = "Организация";
	
	Разрезы = Новый Массив(2);
	Разрезы[0] = "ПериодРегистрации";
	Разрезы[1] = "ВидРасчета";
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаФакт.ФизЛицо,
		|	ТаблицаФакт.Результат,
		|	ТаблицаФакт.ОтработаноДней,
		|	ТаблицаФакт.ПериодРегистрации КАК ПериодРегистрации,
		|	ТаблицаНорма.НормаДней,
		|	ТаблицаНорма.НормаЧасов
		|ИЗ
		|	(ВЫБРАТЬ
		|		Начисления.ФизЛицо КАК ФизЛицо,
		|		СУММА(ВЫБОР
		|				КОГДА НачисленияБазаНачисления.ВидРасчетаРазрез.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ГодоваяПремия)
		|					ТОГДА НачисленияБазаНачисления.РезультатБаза / НачисленияБазаНачисления.ВидРасчетаРазрез.Доля
		|				ИНАЧЕ НачисленияБазаНачисления.РезультатБаза
		|			КОНЕЦ) КАК Результат,
		|		СУММА(ВЫБОР
		|				КОГДА НачисленияБазаНачисления.ВидРасчетаРазрез.ЗачетОтработанногоВремени
		|					ТОГДА НачисленияБазаНачисления.ОтработаноДнейБаза
		|				ИНАЧЕ 0
		|			КОНЕЦ) КАК ОтработаноДней,
		|		НачисленияБазаНачисления.ПериодРегистрацииРазрез КАК ПериодРегистрации
		|	ИЗ
		|		РегистрРасчета.Начисления КАК Начисления
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления.БазаНачисления(
		|					&ИзмеренияОсновного,
		|					&ИзмеренияБазового,
		|					&Разрезы,
		|					Регистратор = &Регистратор) КАК НачисленияБазаНачисления
		|			ПО Начисления.НомерСтроки = НачисленияБазаНачисления.НомерСтроки
		|	ГДЕ
		|		Начисления.Регистратор = &Регистратор
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Начисления.ФизЛицо,
		|		НачисленияБазаНачисления.ПериодРегистрацииРазрез) КАК ТаблицаФакт
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ГрафикиРаботы.ГрафикРаботы КАК ГрафикРаботы,
		|			НАЧАЛОПЕРИОДА(ГрафикиРаботы.Дата, МЕСЯЦ) КАК ПериодРегистрации,
		|			СУММА(ГрафикиРаботы.ЗначениеДней) КАК НормаДней,
		|			СУММА(ГрафикиРаботы.ЗначениеЧасов) КАК НормаЧасов
		|		ИЗ
		|			РегистрСведений.КалендариГрафиковРабот КАК ГрафикиРаботы
		|		ГДЕ
		|			ГрафикиРаботы.ГрафикРаботы = &ГрафикРаботы
		|			И ГрафикиРаботы.Год МЕЖДУ &ГодБазовыйПериодНачало И &ГодБазовыйПериодКонец
		|			И ГрафикиРаботы.Дата МЕЖДУ &БазовыйПериодНачало И &БазовыйПериодКонец
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ГрафикиРаботы.ГрафикРаботы,
		|			НАЧАЛОПЕРИОДА(ГрафикиРаботы.Дата, МЕСЯЦ)) КАК ТаблицаНорма
		|		ПО ТаблицаФакт.ПериодРегистрации = ТаблицаНорма.ПериодРегистрации
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПериодРегистрации УБЫВ";
	// Для факт	
	Запрос.УстановитьПараметр("ИзмеренияБазового",  	Измерения);
	Запрос.УстановитьПараметр("ИзмеренияОсновного",  	Измерения);
	Запрос.УстановитьПараметр("Разрезы",  				Разрезы);
	Запрос.УстановитьПараметр("Регистратор",  			ДокументСсылка);
	// Для норма
	Запрос.УстановитьПараметр("ГрафикРаботы",  			ГрафикРаботы);
	Запрос.УстановитьПараметр("ГодБазовыйПериодНачало",	Год(НачалоПериода));
	Запрос.УстановитьПараметр("ГодБазовыйПериодКонец", 	Год(КонецПериода));
	Запрос.УстановитьПараметр("БазовыйПериодНачало",	НачалоПериода);//01.11.15	
	Запрос.УстановитьПараметр("БазовыйПериодКонец", 	КонецПериода);	// 310116
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		ТекстСообщения = НСтр("ru = 'Нет данных для заполнения. Заполнение документа отменено.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	, ТекстСообщения, Неопределено);
		
		Возврат;
	КонецЕсли;	
	
	Ошибки = Неопределено;
	
	// Определение по методу расчета- как будет получена база
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если КоличествоМесяцев = 0 Тогда
			Прервать;
		КонецЕсли;	
		
		Если НеполныеМесяцы = ПредопределенноеЗначение("Перечисление.НеполныеМесяцы.Отбрасывать") Тогда 
			// 1. Если выбран метод "Отбрасывать" - все не полностью отработанные месяцы не будут учитываться		
			Если НЕ ВыборкаДетальныеЗаписи.ОтработаноДней = ВыборкаДетальныеЗаписи.НормаДней Тогда 
				Продолжить;
			КонецЕсли;	
			
			СтрокаТабличнойЧасти = ТабличнаяЧастьДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаДетальныеЗаписи);
			
			Если НЕ ДополнительныеПараметры = Неопределено Тогда
				СтрокаТабличнойЧасти.КоэффициентРасчета = ДополнительныеПараметры.КоэффициентРасчета;
			КонецЕсли;	
			
		ИначеЕсли НеполныеМесяцы = ПредопределенноеЗначение("Перечисление.НеполныеМесяцы.Дополнять") Тогда	
			// 2. Если выбран метод "Дополнять" - то по полученным данным в месяце расчет ежедневного дохода и дополнение до
			// полного месяца
			СтрокаТабличнойЧасти = ТабличнаяЧастьДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаДетальныеЗаписи);
			
			Если НЕ ДополнительныеПараметры = Неопределено Тогда
				СтрокаТабличнойЧасти.КоэффициентРасчета = ДополнительныеПараметры.КоэффициентРасчета;
			КонецЕсли;	
			
			Если ВыборкаДетальныеЗаписи.ОтработаноДней > 0 И
				НЕ ВыборкаДетальныеЗаписи.ОтработаноДней = ВыборкаДетальныеЗаписи.НормаДней Тогда 
				СтрокаТабличнойЧасти.Результат = СтрокаТабличнойЧасти.Результат / ВыборкаДетальныеЗаписи.ОтработаноДней * ВыборкаДетальныеЗаписи.НормаДней;			
			КонецЕсли;	
			
		ИначеЕсли НеполныеМесяцы = ПредопределенноеЗначение("Перечисление.НеполныеМесяцы.НеИзменять") Тогда	
			// 3. Если выбран метод "Не изменять" - то ничего не менять, если это не расчет для документа "Отпуск"	
			СтрокаТабличнойЧасти = ТабличнаяЧастьДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаДетальныеЗаписи);
			
			Если НЕ ДополнительныеПараметры = Неопределено Тогда
				
				Если ДополнительныеПараметры.РасчетПоРабочимДням Тогда
					
					// 3.1. Если КоэффициентРасчета = 0, то берутся отработанные дни в качестве коэффициента.
					Если ДополнительныеПараметры.КоэффициентРасчета = 0 Тогда
						СтрокаТабличнойЧасти.КоэффициентРасчета = ВыборкаДетальныеЗаписи.ОтработаноДней;
						
					// 3.2. Если отработано дней меньше, чем норма дней, 
					//		то берется минимальное из двух значений - отработано дней и коэффициент.	
					Иначе
						Если ВыборкаДетальныеЗаписи.ОтработаноДней = ВыборкаДетальныеЗаписи.НормаДней Тогда
							СтрокаТабличнойЧасти.КоэффициентРасчета = ДополнительныеПараметры.КоэффициентРасчета;
						Иначе	
							СтрокаТабличнойЧасти.КоэффициентРасчета = ВыборкаДетальныеЗаписи.ОтработаноДней;	
						КонецЕсли;	
					КонецЕсли;	
				Иначе
					Если ВыборкаДетальныеЗаписи.ОтработаноДней < ВыборкаДетальныеЗаписи.НормаДней Тогда
						СтрокаТабличнойЧасти.КоэффициентРасчета = ВыборкаДетальныеЗаписи.ОтработаноДней;
					Иначе	
						СтрокаТабличнойЧасти.КоэффициентРасчета = ДополнительныеПараметры.КоэффициентРасчета;	
					КонецЕсли;
				КонецЕсли;					
			КонецЕсли;	
		КонецЕсли;	
		
		КоличествоМесяцев = КоличествоМесяцев - 1;
	КонецЦикла;
КонецПроцедуры // ЗаполнитьТабличнуюЧастьСреднийЗаработок()

// Процедура заполняет табличную часть по перидам регистрации
//
// Параметры:
//  Объект							 - ДокументОбъект					- Объект для заполнения
//  НачалоПериода					 - Дата	 							- Начало периода расчета базы среднего заработка
//  КонецПериода					 - Дата	 							- Окончание периода расчета базы среднего заработка
//  ПериодРегистрации				 - Дата	 							- Месяц- в который нужно определить результат
//  ВидРасчета					 	 - ПланВидовРасчета	 				- Ссылка на план видов расчета
//  ГрафикРаботы					 - СправочникСсылка.ГрафикиРаботы	- Ссылка на справочник графики работ для отбора
//  Результат					 	 - Число	 						- Результат начисления
//  ТабличнаяЧастьДокумента			 - ТабличнаяЧасть 	 				- Табличная часть документа для заполнения
// 	Ошибки 					 		 - Массив 							- Массив сообщений пользователю
Процедура ЗаполнитьТабличнуюЧастьПоПериодам(Объект, НачалоПериода, КонецПериода, 
			ПериодРегистрации, ВидРасчета, МетодРасчета, ГрафикРаботы, Результат, ТабличнаяЧастьДокумента = "Начисления", Ошибки = Неопределено) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.ГрафикРаботы,
		|	&ВидРасчета КАК ВидРасчета,
		|	ВложенныйЗапрос.ОтработаноДней * &Результат КАК Результат,
		|	ВложенныйЗапрос.ПериодРегистрации КАК ПериодРегистрации,
		|	ВложенныйЗапрос.ОтработаноДней,
		|	ВложенныйЗапрос.ДатаНачала,
		|	ВложенныйЗапрос.ДатаОкончания
		|ИЗ
		|	(ВЫБРАТЬ
		|		КалендариГрафиковРабот.ГрафикРаботы КАК ГрафикРаботы,
		|		НАЧАЛОПЕРИОДА(КалендариГрафиковРабот.Дата, МЕСЯЦ) КАК ПериодРегистрации,
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КалендариГрафиковРабот.Дата) КАК ОтработаноДней,
		|		ВЫБОР
		|			КОГДА НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ) = НАЧАЛОПЕРИОДА(КалендариГрафиковРабот.Дата, МЕСЯЦ)
		|				ТОГДА &НачалоПериода
		|			ИНАЧЕ НАЧАЛОПЕРИОДА(КалендариГрафиковРабот.Дата, МЕСЯЦ)
		|		КОНЕЦ КАК ДатаНачала,
		|		ВЫБОР
		|			КОГДА КОНЕЦПЕРИОДА(&КонецПериода, МЕСЯЦ) = КОНЕЦПЕРИОДА(КалендариГрафиковРабот.Дата, МЕСЯЦ)
		|				ТОГДА &КонецПериода
		|			ИНАЧЕ КОНЕЦПЕРИОДА(КалендариГрафиковРабот.Дата, МЕСЯЦ)
		|		КОНЕЦ КАК ДатаОкончания
		|	ИЗ
		|		РегистрСведений.КалендариГрафиковРабот КАК КалендариГрафиковРабот
		|	ГДЕ
		|		КалендариГрафиковРабот.ГрафикРаботы = &ГрафикРаботы
		|		И (КалендариГрафиковРабот.Год = &ГодНачалоПериода
		|				ИЛИ КалендариГрафиковРабот.Год = &ГодКонецПериода)
		|		И КалендариГрафиковРабот.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|		И НЕ КалендариГрафиковРабот.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
		|		И НЕ КалендариГрафиковРабот.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Воскресенье)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		КалендариГрафиковРабот.ГрафикРаботы,
		|		НАЧАЛОПЕРИОДА(КалендариГрафиковРабот.Дата, МЕСЯЦ),
		|		ВЫБОР
		|			КОГДА НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ) = НАЧАЛОПЕРИОДА(КалендариГрафиковРабот.Дата, МЕСЯЦ)
		|				ТОГДА &НачалоПериода
		|			ИНАЧЕ НАЧАЛОПЕРИОДА(КалендариГрафиковРабот.Дата, МЕСЯЦ)
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА КОНЕЦПЕРИОДА(&КонецПериода, МЕСЯЦ) = КОНЕЦПЕРИОДА(КалендариГрафиковРабот.Дата, МЕСЯЦ)
		|				ТОГДА &КонецПериода
		|			ИНАЧЕ КОНЕЦПЕРИОДА(КалендариГрафиковРабот.Дата, МЕСЯЦ)
		|		КОНЕЦ) КАК ВложенныйЗапрос
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПериодРегистрации";
	Запрос.УстановитьПараметр("ГодНачалоПериода", Год(НачалоПериода));
	Запрос.УстановитьПараметр("ГодКонецПериода", Год(КонецПериода));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("ВидРасчета", ВидРасчета);
	Запрос.УстановитьПараметр("ГрафикРаботы", ГрафикРаботы);
	Запрос.УстановитьПараметр("Результат", Результат);
	Если Не МетодРасчета.РасчетПоРабочимДням Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И НЕ КалендариГрафиковРабот.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Воскресенье)","");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		     СТЧ = Объект[ТабличнаяЧастьДокумента].Добавить();
			 ЗаполнитьЗначенияСвойств(СТЧ,Выборка);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоПериодам()

// Функция - получает нормы для расчета больничных листов
// в зависимости от общего стажа работы
//
// Параметры:
//  КоличествоЛетСтажа	- Число - количество лет
// Возвращаемое значение:
//  Размеры - Структура
Функция НормыБольничныхЛистов(КоличествоЛетСтажа) Экспорт 
	Возврат ПроведениеРасчетовПоЗарплатеСерверПовтИсп.НормыБольничныхЛистов(КоличествоЛетСтажа);
КонецФункции // СведенияОСотруднике()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ ПО СОТРУДНИКУ

// Функция - получает Сведения о сотруднике
//
// Параметры:
//  Период		 - Дата	 							- Период отбора для получения данных
//  Организация	 - СправочникСсылка.Организации	 	- Организация для отбора
//  ФизЛицо		 - СправочникСсылка.ФизическиеЛица	- Сотрудник, по которому нужно получить сведения
// Возвращаемое значение:
//  СведенияОСотруднике - Структура
Функция СведенияОСотруднике(Период, Организация, ФизЛицо) Экспорт 
	Возврат ПроведениеРасчетовПоЗарплатеСерверПовтИсп.СведенияОСотруднике(КонецДня(Период), Организация, ФизЛицо);
КонецФункции // СведенияОСотруднике()

// Функция - получает Статус сотрудника
//
// Параметры:
//  Период		 - Дата	 							- Период отбора для получения данных
//  Организация	 - СправочникСсылка.Организации	 	- Организация для отбора
//  ФизЛицо		 - СправочникСсылка.ФизическиеЛица	- Сотрудник, по которому нужно получить сведения
// Возвращаемое значение:
//  Структура
Функция СтатусСотрудникаКакНалогоплательщика(Период, Организация, ФизЛицо) Экспорт 
	Возврат ПроведениеРасчетовПоЗарплатеСерверПовтИсп.СтатусСотрудникаКакНалогоплательщика(КонецДня(Период), Организация, ФизЛицо);
КонецФункции // СтатусСотрудникаКакНалогоплательщика()

// Функция - Сведения о стаже сотрудника
//
// Параметры:
//  Период		 - Дата - Период, по который нужно рассчитать стаж. 
//  Организация	 - СправочникСсылка.Организации	- Организация для отбора.
//  ФизЛицо		 - СправочникСсылка.ФизическиеЛица - Сотрудник, по которому нужно получить сведения. 
// 
// Возвращаемое значение:
//  Структура -  Лет, месяце, Дней
//
Функция СведенияОСтажеСотрудника(Период, Организация, ФизЛицо) Экспорт 
	
	// 1. Трудовая деятельность
	// 2. От даты приема на работу до текущей даты
	// 3. Общий стаж из приема на работу
	// Приоритетным является заполнение трудовой деятельности по отношению к общему стажу из приказа о приеме
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТрудоваяДеятельностьФизическихЛиц.ДатаНачала КАК ДатаНачала,
		|	ТрудоваяДеятельностьФизическихЛиц.ДатаОкончания КАК ДатаОкончания
		|ИЗ
		|	РегистрСведений.ТрудоваяДеятельностьФизическихЛиц КАК ТрудоваяДеятельностьФизическихЛиц
		|ГДЕ
		|	ТрудоваяДеятельностьФизическихЛиц.ФизЛицо = &ФизЛицо
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СотрудникиСрезПервых.Период,
		|	&Период
		|ИЗ
		|	РегистрСведений.Сотрудники.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И ФизЛицо = &ФизЛицо
		|				И ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием)) КАК СотрудникиСрезПервых
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаНачала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтажиСотрудниковСрезПоследних.КоличествоЛет КАК КоличествоЛет,
		|	СтажиСотрудниковСрезПоследних.КоличествоМесяцев КАК КоличествоМесяцев,
		|	СтажиСотрудниковСрезПоследних.КоличествоДней КАК КоличествоДней
		|ИЗ
		|	РегистрСведений.СтажиСотрудников.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И ФизЛицо = &ФизЛицо) КАК СтажиСотрудниковСрезПоследних";
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДетальныеЗаписи = МассивРезультатовЗапроса[0].Выбрать();
	
	Лет = 0;
	Месяцев = 0;
	Дней = 0;
	
	// Учет общего стажа из приказа о приеме.
	Если ВыборкаДетальныеЗаписи.Количество() = 1 Тогда 
		ВыборкаДетальныеЗаписиСтаж = МассивРезультатовЗапроса[1].Выбрать();
		Если ВыборкаДетальныеЗаписиСтаж.Следующий() Тогда 
			Лет = ВыборкаДетальныеЗаписиСтаж.КоличествоЛет;
			Месяцев = ВыборкаДетальныеЗаписиСтаж.КоличествоМесяцев;
			Дней = ВыборкаДетальныеЗаписиСтаж.КоличествоДней;
		КонецЕсли;	
	КонецЕсли;	
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ГодНачала = Год(ВыборкаДетальныеЗаписи.ДатаНачала);
		МесяцНачала = Месяц(ВыборкаДетальныеЗаписи.ДатаНачала);
		ДеньНачала = День(ВыборкаДетальныеЗаписи.ДатаНачала);
		
		ГодОкончания = Год(ВыборкаДетальныеЗаписи.ДатаОкончания);
		МесяцОкончания = Месяц(ВыборкаДетальныеЗаписи.ДатаОкончания);
		ДеньОкончания = День(ВыборкаДетальныеЗаписи.ДатаОкончания);
		
		// Расчет количества лет.
		КоличествоЛет = ГодОкончания - ГодНачала;
		// Корректировка.
		Если МесяцНачала > МесяцОкончания
			Или (МесяцНачала = МесяцОкончания И ДеньНачала > ДеньОкончания) Тогда 
			КоличествоЛет = КоличествоЛет - 1;
		КонецЕсли;	
		
		// Расчет количества месяцев.
		КоличествоМесяцев = МесяцОкончания - МесяцНачала;
		// Корректировка.
		Если КоличествоМесяцев < 0 Тогда 
			КоличествоМесяцев = КоличествоМесяцев + 12;
		КонецЕсли;
		Если ДеньНачала > ДеньОкончания Тогда 
			КоличествоМесяцев = КоличествоМесяцев - 1;
		КонецЕсли;		
		
		// Расчет количества дней.
		Если ДеньОкончания >= ДеньНачала Тогда 
			КоличествоДней = ДеньОкончания - ДеньНачала + 1;
		Иначе 
			КоличествоДней = ДеньОкончания - ДеньНачала + 31;
		КонецЕсли;	
		
		// Итоги
		Лет = Лет + КоличествоЛет;
		Месяцев = Месяцев + КоличествоМесяцев;
		Дней = Дней + КоличествоДней;
	КонецЦикла;
	
	// Корректировка итогов
	Если Дней > 30 Тогда 
		КоличествоМесяцев = Цел(Дней / 30);		
		Месяцев = Месяцев + КоличествоМесяцев;
		Дней = Дней - КоличествоМесяцев * 30;
	КонецЕсли;
	
	Если Месяцев > 12 Тогда 
		КоличествоЛет = Цел(Месяцев / 12);
		Лет = Лет + КоличествоЛет;
		Месяцев = Месяцев - КоличествоЛет * 12;
	КонецЕсли;	
	
	СтруктураСтажа = Новый Структура();
	СтруктураСтажа.Вставить("Лет", Лет);
	СтруктураСтажа.Вставить("Месяцев", Месяцев);
	СтруктураСтажа.Вставить("Дней", Дней);
	
	Возврат СтруктураСтажа;
	
КонецФункции

// Возвращает курс валюты на дату.
//
// Параметры:
//   Валюта    - СправочникСсылка.Валюты - валюта, для которой получается курс.
//   ДатаКурса - Дата - дата, на которую получается курс.
//
// Возвращаемое значение: 
//   Структура:
//    * Курс      - Число - курс валюты на указанную дату.
//    * Кратность - Число - кратность валюты на указанную дату.
//    * Валюта    - СправочникСсылка.Валюты - ссылка валюты.
//    * ДатаКурса - Дата - дата получения курса.
//
Функция ПолучитьКурсВалюты(Валюта, ДатаКурса) Экспорт
	
	Результат = РегистрыСведений.КурсыВалютЗаработнаяПлата.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", Валюта));
	
	Результат.Вставить("Валюта",    Валюта);
	Результат.Вставить("ДатаКурса", ДатаКурса);
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОТРАЖЕНИЯ В УЧЕТЕ

// Функция формирует пустую структуру для заполнения данных для отбора получения Способа отражения
//
Функция СтруктураОтбораСпособыОтраженияЗаработнойПлаты() Экспорт 

	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Подразделение", "");
	СтруктураОтбора.Вставить("ВидРасчета", "");
	
	Возврат СтруктураОтбора;	

КонецФункции 

// Функция получает способ отражения заработной платы
//
// Параметры:
//  СтруктураОтбора  - Структура - структура параметров для выборки наиболее близкого значения из регистра
//		* Подразделение 				- СправочникСсылка.ПодразделенияОрганизаций
//      * ВидРасчетаНачисления			- ПланВидовРасчетаСсылка.ВидыНачислений
//
// Возвращаемое значение:
//		СпособРасчета - СправочникСсылка.СпособыОтраженияЗаработнойПлаты
//
Функция СпособОтраженияЗаработнойПлаты(СтруктураОтбора) Экспорт 
	Возврат ПроведениеРасчетовПоЗарплатеСерверПовтИсп.СпособОтраженияЗаработнойПлаты(СтруктураОтбора);
КонецФункции // СпособОтраженияЗаработнойПлаты()

#КонецОбласти
