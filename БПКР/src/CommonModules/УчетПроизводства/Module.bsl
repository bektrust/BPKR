
#Область ПрограммныйИнтерфейс

// УЧЕТ ПЛАНОВОЙ СТОИМОСТИ ВЫПУЩЕННОЙ ПРОДУКЦИИ

Процедура СформироватьДвиженияПлановаяСтоимостьВыпущеннойПродукции(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаПродукция = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродукция;
	ТаблицаРеквизиты = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРеквизиты;
	
	Если Не ЗначениеЗаполнено(ТаблицаПродукция)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПлановаяСтоимостьВыпущеннойПродукции(ТаблицаПродукция, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	СпособОценкиТМЗ = БухгалтерскийУчетСервер.СпособОценкиТМЗ(Реквизиты.Период, Реквизиты.Организация);
	ВедетсяУчетПоПартиям = СпособОценкиТМЗ <> Перечисления.СпособыОценки.ПоСредней;

	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаПродукция Цикл

		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание = СтрокаТаблицы.Содержание;

		Проводка.СчетДт = СтрокаТаблицы.СчетУчета;
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", СтрокаТаблицы.Склад);
		Если ВедетсяУчетПоПартиям Тогда
			БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", Реквизиты.Регистратор);
		КонецЕсли;
	
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		
		Если СвойстваСчетаДт.Количественный Тогда
			Проводка.КоличествоДт = СтрокаТаблицы.Количество;
		КонецЕсли;

		Проводка.СчетКт = СтрокаТаблицы.СчетЗатрат;
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппаЗатрат);
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", СтрокаТаблицы.ПодразделениеЗатрат);

		Проводка.Сумма = СтрокаТаблицы.СуммаПлановая;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

// УЧЕТ ПЛАНОВОЙ СТОИМОСТИ ВЫПУЩЕННЫХ УСЛУГ

Процедура СформироватьДвиженияПлановаяСтоимостьВыпущенныхУслуг(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаУслуги = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУслуги;
	ТаблицаРеквизиты = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРеквизиты;
	
	Если Не ЗначениеЗаполнено(ТаблицаУслуги)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПлановаяСтоимостьВыпущенныхУслуг(ТаблицаУслуги, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаУслуги Цикл
	
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание = СтрокаТаблицы.Содержание;

		Проводка.СчетДт	= СтрокаТаблицы.СчетСписания;
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоСписания1);
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоСписания2);
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоСписания3);
	
		Проводка.СчетКт = СтрокаТаблицы.СчетЗатрат;
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппаЗатрат);
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", СтрокаТаблицы.ПодразделениеЗатрат);

		Проводка.Сумма = СтрокаТаблицы.ПлановаяСтоимость;
	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

// УЧЕТ ПЛАНОВОЙ СТОИМОСТИ ВЫПУЩЕННЫХ УСЛУГ ПО ПЕРЕРАБОТКЕ

Процедура СформироватьДвиженияПлановаяСтоимостьУслугПоПереработке(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаУслуги = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУслуги;
	ТаблицаРеквизиты = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРеквизиты;
	
	Если Не ЗначениеЗаполнено(ТаблицаУслуги) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПлановаяСтоимостьУслугПоПереработке(ТаблицаУслуги, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаУслуги Цикл
	
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СтрокаТаблицы.Содержание;
		Проводка.Сумма       = СтрокаТаблицы.Сумма;
		
		// Дт
		
		Проводка.СчетДт	= СтрокаТаблицы.СчетРасходов;
		
		БухгалтерскийУчетСервер.УстановитьСубконто(
			Проводка.СчетДт, 
			Проводка.СубконтоДт, 
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы, 
			СтрокаТаблицы.НоменклатурнаяГруппа);
			
		//БухгалтерскийУчетСервер.УстановитьСубконто(
		//	Проводка.СчетДт, 
		//	Проводка.СубконтоДт, 
		//	ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, 
		//	СтрокаТаблицы.ВидДеятельности);
		//	
		//БухгалтерскийУчетСервер.УстановитьСубконто(
		//	Проводка.СчетДт, 
		//	Проводка.СубконтоДт, 
		//	ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РеализуемыеАктивы, 
		//	СтрокаТаблицы.Номенклатура);
	
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		
		Если СвойстваСчетаДт.Количественный Тогда
			Проводка.КоличествоДт = СтрокаТаблицы.Количество;
		КонецЕсли;

		// Кт
		
		Проводка.СчетКт = СтрокаТаблицы.СчетЗатрат;
		
		БухгалтерскийУчетСервер.УстановитьСубконто(
			Проводка.СчетКт, 
			Проводка.СубконтоКт, 
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура,
			СтрокаТаблицы.НоменклатураЗатрат);

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		
		Если СвойстваСчетаКт.Количественный Тогда
			Проводка.КоличествоКт = СтрокаТаблицы.Количество;
		КонецЕсли;
		
	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

// ВЫПУСК ПРОДУКЦИИ, УСЛУГ

Процедура СформироватьДвиженияВыпускПродукции(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаВыпуск = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаВыпуск;
	ТаблицаРеквизиты = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРеквизиты;
	
	Если Не ЗначениеЗаполнено(ТаблицаВыпуск)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыВыпускПродукцииУслуг(ТаблицаВыпуск, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаВыпуск Цикл

		// Отражение выпуска в регистре накопления ВыпускПродукцииУслуг
		Движение = Движения.ВыпускПродукцииУслуг.Добавить();

		Движение.Период = Реквизиты.Период;
		Движение.Организация = Реквизиты.Организация;
		Движение.Продукция = СтрокаТаблицы.Номенклатура;
		
		Движение.СчетЗатрат = СтрокаТаблицы.СчетЗатрат;
		Движение.Подразделение = СтрокаТаблицы.ПодразделениеЗатрат;
		Движение.НоменклатурнаяГруппа = СтрокаТаблицы.НоменклатурнаяГруппаЗатрат;
		Движение.Спецификация = СтрокаТаблицы.Спецификация;
		
		Движение.СчетСписания = СтрокаТаблицы.СчетСписания;
		//Движение.ПодразделениеСписания = СтрокаТаблицы.ПодразделениеСписания;

		СвойстваСчетаСписания = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Движение.СчетСписания);
		Если СвойстваСчетаСписания.КоличествоСубконто > 0 Тогда
			Движение.СубконтоСписания1 = СтрокаТаблицы.СубконтоСписания1;
		КонецЕсли;
		Если СвойстваСчетаСписания.КоличествоСубконто > 1 Тогда
			Движение.СубконтоСписания2 = СтрокаТаблицы.СубконтоСписания2;
		КонецЕсли;
		Если СвойстваСчетаСписания.КоличествоСубконто > 2 Тогда
			Движение.СубконтоСписания3 = СтрокаТаблицы.СубконтоСписания3;
		КонецЕсли;

		Движение.Количество = СтрокаТаблицы.Количество;
		Движение.ПлановаяСтоимость = СтрокаТаблицы.ПлановаяСтоимость;

	КонецЦикла;

	Движения.ВыпускПродукцииУслуг.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияВыпускУслуг(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаУслуги = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУслуги;
	ТаблицаРеквизиты = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРеквизиты;
	
	Если Не ЗначениеЗаполнено(ТаблицаУслуги)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыВыпускПродукцииУслуг(ТаблицаУслуги, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаВыпуск Цикл

		// Отражение выпуска в регистре накопления ВыпускПродукцииУслуг
		Движение = Движения.ВыпускПродукцииУслуг.Добавить();

		Движение.Период = Реквизиты.Период;
		Движение.Организация = Реквизиты.Организация;
		Движение.Продукция = СтрокаТаблицы.Номенклатура;
		
		Движение.СчетЗатрат            = СтрокаТаблицы.СчетЗатрат;
		Движение.Подразделение         = СтрокаТаблицы.ПодразделениеЗатрат;
		Движение.НоменклатурнаяГруппа  = СтрокаТаблицы.НоменклатурнаяГруппаЗатрат;
		
		Движение.СчетСписания          = СтрокаТаблицы.СчетСписания;
		//Движение.ПодразделениеСписания = СтрокаТаблицы.ПодразделениеСписания;

		СвойстваСчетаСписания = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Движение.СчетСписания);
		Если СвойстваСчетаСписания.КоличествоСубконто > 0 Тогда
			Движение.СубконтоСписания1 = СтрокаТаблицы.СубконтоСписания1;
		КонецЕсли;
		Если СвойстваСчетаСписания.КоличествоСубконто > 1 Тогда
			Движение.СубконтоСписания2 = СтрокаТаблицы.СубконтоСписания2;
		КонецЕсли;
		Если СвойстваСчетаСписания.КоличествоСубконто > 2 Тогда
			Движение.СубконтоСписания3 = СтрокаТаблицы.СубконтоСписания3;
		КонецЕсли;

		Движение.Количество        = СтрокаТаблицы.Количество;
		Движение.ПлановаяСтоимость = СтрокаТаблицы.ПлановаяСтоимость;

	КонецЦикла;

	Движения.ВыпускПродукцииУслуг.Записывать = Истина;

КонецПроцедуры

// ВЫПУСК ВОЗВРАТНЫХ ОТХОДОВ

Процедура СформироватьДвиженияВыпускОтходов(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаОтходы = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаОтходы;
	ТаблицаРеквизиты = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРеквизиты;
	
	Если Не ЗначениеЗаполнено(ТаблицаОтходы)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыВыпускОтходов(ТаблицаОтходы, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	СпособОценкиТМЗ = БухгалтерскийУчетСервер.СпособОценкиТМЗ(Реквизиты.Период, Реквизиты.Организация);
	ВедетсяУчетПоПартиям = СпособОценкиТМЗ <> Перечисления.СпособыОценки.ПоСредней;
	
	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаОтходы Цикл
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание = Реквизиты.Содержание;
		
		Проводка.СчетКт = СтрокаТаблицы.СчетУчета;
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТаблицы.Номенклатура);
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", СтрокаТаблицы.Склад);
		Если ВедетсяУчетПоПартиям Тогда
			БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии", Реквизиты.Регистратор);
		КонецЕсли;
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		
		Если СвойстваСчетаКт.Количественный Тогда
			Проводка.КоличествоКт = - СтрокаТаблицы.Количество;
		КонецЕсли;
		
		Проводка.СчетДт = СтрокаТаблицы.СчетЗатрат;
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппаЗатрат);
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтрокаТаблицы.ПодразделениеЗатрат);
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат", СтрокаТаблицы.СтатьяЗатрат);
			
		Проводка.Сумма = - СтрокаТаблицы.Сумма;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

// УЧЕТ Комплектации

Процедура СформироватьДвиженияКомплектация(ТаблицаКомплекты, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаКомплекты)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыКомплектация(ТаблицаКомплекты, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	СпособОценкиТМЗ = БухгалтерскийУчетСервер.СпособОценкиТМЗ(Реквизиты.Период, Реквизиты.Организация);
	ВедетсяУчетПоПартиям = СпособОценкиТМЗ <> Перечисления.СпособыОценки.ПоСредней;

	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаКомплекты Цикл

		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание = Реквизиты.Содержание;

		Проводка.СчетДт = СтрокаТаблицы.СчетУчета;
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", СтрокаТаблицы.Склад);
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Местонахождение", СтрокаТаблицы.Склад);
		Если ВедетсяУчетПоПартиям Тогда
			БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", Реквизиты.Регистратор);
		КонецЕсли;
	
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		
		Если СвойстваСчетаДт.Количественный Тогда
			Проводка.КоличествоДт = СтрокаТаблицы.Количество;
		КонецЕсли;

		Проводка.СчетКт = СтрокаТаблицы.СчетЗатрат;

		Проводка.Сумма = СтрокаТаблицы.Сумма;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

// СЧЕТА УЧЕТА В ДОКУМЕНТАХ

Процедура ОграничитьВыборСчетамиПрямыхРасходов(ЭлементФормы) Экспорт
	
	Правила    = ПредопределенныеСчетаПрямыхРасходов();
	Исключения = Новый Массив;
	Исключения.Добавить(ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья); // Фактически, это счет запасов, а не расходов
	
	УсловияОтбора = БухгалтерскийУчетСервер.НовыеУсловияОтбораСубсчетов();
	УсловияОтбора.ИспользоватьВПроводках = Истина; // Исключить запрещенные для использования в проводках
	УсловияОтбора.Валютный               = Неопределено; // Не важно, валютные или нет
	УсловияОтбора.Забалансовый           = Ложь;   // Исключить забалансовые
	УсловияОтбора.СчетаИсключения        = Исключения;
	
	СчетаДляОтбора = БухгалтерскийУчетСервер.СформироватьМассивСубсчетовПоОтбору(Правила, УсловияОтбора);
		
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораСчета(ЭлементФормы, СчетаДляОтбора);
	
КонецПроцедуры

// Возвращает предопределенные счета учета расходов основного и вспомогательного производства
//
// Возвращаемое значение:
//  Массив значений типа ПланСчетовСсылка.Хозрасчетный
//
Функция ПредопределенныеСчетаПрямыхРасходов() Экспорт
	
	СчетаРасходов = Новый Массив();
	СчетаРасходов.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство); // есть исключения
	СчетаРасходов.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательноеПроизводство);
	
	Возврат СчетаРасходов;
	
КонецФункции

// СПИСКИ СЧЕТОВ УЧЕТА ЗАТРАТ

// Возвращает предопределенные счета учета общепроизводственных и общехозяйственных расходов
//
// Возвращаемое значение:
//  Массив значений типа ПланСчетовСсылка.Хозрасчетный
//
Функция ПредопределенныеСчетаКосвенныхРасходов() Экспорт
	
	СчетаРасходов = Новый Массив();
	СчетаРасходов.Добавить(ПланыСчетов.Хозрасчетный.ПроизводственныеРасходы);
	СчетаРасходов.Добавить(ПланыСчетов.Хозрасчетный.ОбщиеИАдминистративныеРасходы);
	
	Возврат СчетаРасходов;

КонецФункции

// УЧЕТ КОРРЕКТИРОВКИ СТОИМОСТИ ВЫПУЩЕННОЙ ПРОДУКЦИИ

Процедура КорректировкаСебестоимостиПродукции(ТаблицаРеквизиты, Движения, Ошибки, СуммаКорректировкиИтого) Экспорт

	Параметры = ПодготовитьПараметрыКорректировкаСтоимостиВыпущеннойПродукции(ТаблицаРеквизиты);

	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения.Хозрасчетный.Записывать = Истина;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	// Определение порядка распределения по выпуску продукции текущего месяца.
	
	// Выпуст продукции.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВыпускПродукцииУслугОбороты.Продукция КАК Продукция,
		|	ВыпускПродукцииУслугОбороты.СчетЗатрат КАК СчетЗатрат,
		|	ВыпускПродукцииУслугОбороты.Подразделение КАК Подразделение,
		|	ВыпускПродукцииУслугОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	ВыпускПродукцииУслугОбороты.НоменклатурнаяГруппа.ПорядокРаспределения КАК ПорядокРаспределения,
		|	ВыпускПродукцииУслугОбороты.Спецификация КАК Спецификация,
		|	ВыпускПродукцииУслугОбороты.СчетСписания КАК СчетСписания,
		|	ВыпускПродукцииУслугОбороты.СубконтоСписания1 КАК Номенклатура,
		|	ВыпускПродукцииУслугОбороты.СубконтоСписания2 КАК Склад,
		|	ВыпускПродукцииУслугОбороты.СубконтоСписания3 КАК Партия,
		|	ВыпускПродукцииУслугОбороты.ПлановаяСтоимостьОборот КАК ПлановаяСтоимостьОборот,
		|	ВыпускПродукцииУслугОбороты.КоличествоОборот КАК КоличествоОборот
		|ПОМЕСТИТЬ ВременнаяТаблицаВыпускПродукции
		|ИЗ
		|	РегистрНакопления.ВыпускПродукцииУслуг.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация) КАК ВыпускПродукцииУслугОбороты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Продукция,
		|	СчетЗатрат,
		|	Подразделение,
		|	НоменклатурнаяГруппа";
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПСервер.ТекстРазделителяЗапросовПакета();
	
	// Незавершенное производство.
	ТекстЗапросаФрагмент =	
		"ВЫБРАТЬ
		|	НезавершенноеПроизводствоОбороты.СчетЗатрат КАК СчетЗатрат,
		|	НезавершенноеПроизводствоОбороты.Подразделение КАК Подразделение,
		|	НезавершенноеПроизводствоОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	НезавершенноеПроизводствоОбороты.СуммаОборот КАК СуммаНЗП
		|ПОМЕСТИТЬ ВременнаяТаблицаНезавершенноеПроизводство
		|ИЗ
		|	РегистрНакопления.НезавершенноеПроизводство.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация) КАК НезавершенноеПроизводствоОбороты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетЗатрат,
		|	Подразделение,
		|	НоменклатурнаяГруппа";
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаФрагмент + ОбщегоНазначенияБПСервер.ТекстРазделителяЗапросовПакета();
	
	// Определение уровня вхождения.
	ТекстЗапросаФрагмент =	
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВременнаяТаблицаВыпускПродукции.СчетСписания КАК СчетУчета,
		|	ВременнаяТаблицаВыпускПродукции.Продукция КАК Продукция
		|ИЗ
		|	ВременнаяТаблицаВыпускПродукции КАК ВременнаяТаблицаВыпускПродукции";
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаФрагмент + ОбщегоНазначенияБПСервер.ТекстРазделителяЗапросовПакета();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Реквизиты.Период));
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецМесяца(Реквизиты.Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаПродукция = МассивРезультатов[2].Выгрузить();
	ТаблицаПродукция.Индексы.Добавить("Продукция");
	
	//МассивПродукции = РазличныеЗначенияКолонкиТаблицы(ТаблицаПродукция, "Продукция");
	МассивСчетовУчета = РазличныеЗначенияКолонкиТаблицы(ТаблицаПродукция, "СчетУчета");
	
	//ТаблицаУровней = Справочники.СпецификацииНоменклатуры.ОпределениеУровня(МассивПродукции);
	//Для Каждого СтрокаТаблицы Из ТаблицаУровней Цикл 
	//	НайденныеСтроки = ТаблицаПродукция.НайтиСтроки(Новый Структура("Продукция", СтрокаТаблицы.Элемент));
	//	Если НайденныеСтроки.Количество() = 0 Тогда 
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	НайденныеСтроки[0].Порядок = Мин(СтрокаТаблицы.Уровень, 2);
	//КонецЦикла;	
	
	// Сортировка счетов учета
	СчетаУчетаНС  = Новый Массив; // счета с суммовым учетом по номенклатуре и складам
	СчетаУчетаНПС = Новый Массив; // счета с суммовым учетом по номенклатуре, складам и партиям
	СчетаУчетаТоваровНС  = Новый Массив; // счета с суммовым учетом по номенклатуре и складам
	СчетаУчетаТоваровНПС = Новый Массив; // счета с суммовым учетом по номенклатуре, складам и партиям

	СортировкаСчетовУчета(МассивСчетовУчета, СчетаУчетаНС, СчетаУчетаНПС);
	
	// Все счета товаров для корректировки списания.
	СчетаУчетаТоваровПредопределенные = Новый Массив;
	СчетаУчетаТоваровПредопределенные.Добавить(ПланыСчетов.Хозрасчетный.ТоварноМатериальныеЗапасы);       
	СчетаУчетаТоваровПредопределенные.Добавить(ПланыСчетов.Хозрасчетный.ЗапасыВспомогательныхМатериалов);       
	СчетаУчетаТоваров = БухгалтерскийУчетСервер.СформироватьМассивСубсчетов(СчетаУчетаТоваровПредопределенные);

	СортировкаСчетовУчета(МассивСчетовУчета, СчетаУчетаТоваровНС, СчетаУчетаТоваровНПС);

	СчетаУчетаПрямыхРасходов = ПредопределенныеСчетаПрямыхРасходов();

	ВидыСубконтоНС = Новый Массив;
	ВидыСубконтоНС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоНС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);

	ВидыСубконтоНПС = Новый Массив;
	ВидыСубконтоНПС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоНПС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	ВидыСубконтоНПС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	
	ВидыСубконтоПрямыхРасходов = Новый Массив;
	ВидыСубконтоПрямыхРасходов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения);
	ВидыСубконтоПрямыхРасходов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);

	СпособОценкиТМЗ = БухгалтерскийУчетСервер.СпособОценкиТМЗ(Реквизиты.Период, Реквизиты.Организация);
	ВедетсяУчетПоПартиям = СпособОценкиТМЗ <> Перечисления.СпособыОценки.ПоСредней;

	// Остатки на начало.
	// Получение количество остатка на начало для корректировки списания.
	ТекстЗапроса =	
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК Счет,
		|	ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,
		|	ХозрасчетныйОстатки.Субконто2 КАК Склад,
		|	ХозрасчетныйОстатки.Субконто3 КАК Партия,
		|	ХозрасчетныйОстатки.КоличествоОстаток КАК КоличествоОстаток
		|ПОМЕСТИТЬ ВременнаяТаблицаОстатки
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&НачалоПериода,
		|			Счет В (&СчетаУчетаНПС),
		|			&ВидыСубконтоНПС,
		|			Организация = &Организация
		|				И Субконто1 В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВременнаяТаблицаВыпускПродукции.Продукция
		|					ИЗ
		|						ВременнаяТаблицаВыпускПродукции КАК ВременнаяТаблицаВыпускПродукции)) КАК ХозрасчетныйОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет,
		|	ХозрасчетныйОстатки.Субконто1,
		|	ХозрасчетныйОстатки.Субконто2,
		|	НЕОПРЕДЕЛЕНО,
		|	ХозрасчетныйОстатки.КоличествоОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&НачалоПериода,
		|			Счет В (&СчетаУчетаНС),
		|			&ВидыСубконтоНС,
		|			Организация = &Организация
		|				И Субконто1 В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВременнаяТаблицаВыпускПродукции.Продукция
		|					ИЗ
		|						ВременнаяТаблицаВыпускПродукции КАК ВременнаяТаблицаВыпускПродукции)) КАК ХозрасчетныйОстатки";
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПСервер.ТекстРазделителяЗапросовПакета();
	
	// Поступление за период
	// Для корректировки списания.
	ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ХозрасчетныйОборотыДтКт.СчетДт КАК Счет,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Номенклатура,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт2 КАК Склад,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт3 КАК Партия,
		|	ХозрасчетныйОборотыДтКт.КоличествоОборотДт КАК КоличествоПриход
		|ПОМЕСТИТЬ ВременнаяТаблицаОбороты
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			СчетДт В (&СчетаУчетаНПС),
		|			&ВидыСубконтоНПС,
		|			НЕ СчетКт В (&СчетаУчетаНПС),
		|			,
		|			Организация = &Организация
		|				И СубконтоДт1 В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВременнаяТаблицаВыпускПродукции.Продукция
		|					ИЗ
		|						ВременнаяТаблицаВыпускПродукции КАК ВременнаяТаблицаВыпускПродукции)) КАК ХозрасчетныйОборотыДтКт
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОборотыДтКт.СчетДт,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт1,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО,
		|	ХозрасчетныйОборотыДтКт.КоличествоОборотДт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			СчетДт В (&СчетаУчетаНС),
		|			&ВидыСубконтоНС,
		|			НЕ СчетКт В (&СчетаУчетаНС),
		|			,
		|			Организация = &Организация
		|				И СубконтоДт1 В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВременнаяТаблицаВыпускПродукции.Продукция
		|					ИЗ
		|						ВременнаяТаблицаВыпускПродукции КАК ВременнаяТаблицаВыпускПродукции)) КАК ХозрасчетныйОборотыДтКт";
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапроса;

	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Реквизиты.Период));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Реквизиты.Период));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("СчетаУчетаНС", СчетаУчетаНС);
	Запрос.УстановитьПараметр("СчетаУчетаНПС", СчетаУчетаНПС);
	Запрос.УстановитьПараметр("ВидыСубконтоНС", ВидыСубконтоНС);
	Запрос.УстановитьПараметр("ВидыСубконтоНПС", ВидыСубконтоНПС);
	//Запрос.УстановитьПараметр("МассивПродукции", МассивПродукции);
	Запрос.Выполнить();
	
	// Обход по порядку.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВременнаяТаблицаВыпускПродукции.Продукция КАК Продукция,
		|	ВременнаяТаблицаВыпускПродукции.ПорядокРаспределения КАК ПорядокРаспределения
		|ИЗ
		|	ВременнаяТаблицаВыпускПродукции КАК ВременнаяТаблицаВыпускПродукции
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВременнаяТаблицаВыпускПродукции.ПорядокРаспределения
		|ИТОГИ ПО
		|	ПорядокРаспределения";
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПорядок = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПорядок.Следующий() Цикл
		
		ВыборкаДетальныеЗаписи = ВыборкаПорядок.Выбрать();
		
		МассивПродукцииПорядок = Новый Массив;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			МассивПродукцииПорядок.Добавить(ВыборкаДетальныеЗаписи.Продукция);
		КонецЦикла;
		
		Если МассивПродукцииПорядок.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;	
		
		ИндексТаблицы = 0;
		
		// Корректировка себестоимости продукции.
		// По этапам.
		// Первыми корректируются суммы первичных полуфабрикатов,
		// далее полуфабрикатов второго уровня и т.д. до готовой продукции.

		// Таблица выпустка с отбором по продукции.
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	ВременнаяТаблицаВыпускМассивПродукции.Продукция КАК Продукция,
			|	ВременнаяТаблицаВыпускМассивПродукции.СчетЗатрат КАК СчетЗатрат,
			|	ВременнаяТаблицаВыпускМассивПродукции.Подразделение КАК Подразделение,
			|	ВременнаяТаблицаВыпускМассивПродукции.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
			|	ВременнаяТаблицаВыпускМассивПродукции.Спецификация КАК Спецификация,
			|	ВременнаяТаблицаВыпускМассивПродукции.СчетСписания КАК СчетСписания,
			|	ВременнаяТаблицаВыпускМассивПродукции.Номенклатура КАК Номенклатура,
			|	ВременнаяТаблицаВыпускМассивПродукции.Склад КАК Склад,
			|	ВременнаяТаблицаВыпускМассивПродукции.Партия КАК Партия,
			|	ВременнаяТаблицаВыпускМассивПродукции.ПлановаяСтоимостьОборот КАК ПлановаяСтоимостьОборот,
			|	ВременнаяТаблицаВыпускМассивПродукции.КоличествоОборот КАК КоличествоОборот
			|ПОМЕСТИТЬ ВременнаяТаблицаВыпускМассивПродукции
			|ИЗ
			|	ВременнаяТаблицаВыпускПродукции КАК ВременнаяТаблицаВыпускМассивПродукции
			|ГДЕ
			|	ВременнаяТаблицаВыпускМассивПродукции.Продукция В(&МассивПродукции)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	СчетЗатрат,
			|	Подразделение,
			|	НоменклатурнаяГруппа";
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПСервер.ТекстРазделителяЗапросовПакета();
		
		// Сумма затрат.
		ИндексТаблицы = ИндексТаблицы + 1;
		ИндексВременнаяТаблицаЗатраты = ИндексТаблицы;
		
		ТекстЗапросаФрагмент =
			"ВЫБРАТЬ
			|	ХозрасчетныйОстатки.Счет КАК СчетЗатрат,
			|	ХозрасчетныйОстатки.Субконто1 КАК Подразделение,
			|	ХозрасчетныйОстатки.Субконто2 КАК НоменклатурнаяГруппа,
			|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаЗатрат
			|ПОМЕСТИТЬ ВременнаяТаблицаЗатраты
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|			&НачалоПериода,
			|			Счет В ИЕРАРХИИ (&СчетаПрямыхРасходов),
			|			&ВидыСубконтоПрямыхРасходов,
			|			Организация = &Организация
			|				И (Субконто1, Субконто2) В
			|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|						ВременнаяТаблицаВыпускМассивПродукции.Подразделение,
			|						ВременнаяТаблицаВыпускМассивПродукции.НоменклатурнаяГруппа
			|					ИЗ
			|						ВременнаяТаблицаВыпускМассивПродукции КАК ВременнаяТаблицаВыпускМассивПродукции)) КАК ХозрасчетныйОстатки
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ХозрасчетныйОборотыДтКт.СчетДт,
			|	ХозрасчетныйОборотыДтКт.СубконтоДт1,
			|	ХозрасчетныйОборотыДтКт.СубконтоДт2,
			|	ХозрасчетныйОборотыДтКт.СуммаОборот
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
			|			&НачалоПериода,
			|			&КонецПериода,
			|			,
			|			СчетДт В ИЕРАРХИИ (&СчетаПрямыхРасходов),
			|			&ВидыСубконтоПрямыхРасходов,
			|			,
			|			,
			|			Организация = &Организация
			|				И (СубконтоДт1, СубконтоДт2) В
			|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|						ВременнаяТаблицаВыпускМассивПродукции.Подразделение,
			|						ВременнаяТаблицаВыпускМассивПродукции.НоменклатурнаяГруппа
			|					ИЗ
			|						ВременнаяТаблицаВыпускМассивПродукции КАК ВременнаяТаблицаВыпускМассивПродукции)) КАК ХозрасчетныйОборотыДтКт
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВременнаяТаблицаНезавершенноеПроизводство.СчетЗатрат,
			|	ВременнаяТаблицаНезавершенноеПроизводство.Подразделение,
			|	ВременнаяТаблицаНезавершенноеПроизводство.НоменклатурнаяГруппа,
			|	-ВременнаяТаблицаНезавершенноеПроизводство.СуммаНЗП
			|ИЗ
			|	ВременнаяТаблицаНезавершенноеПроизводство КАК ВременнаяТаблицаНезавершенноеПроизводство
			|ГДЕ
			|	(ВременнаяТаблицаНезавершенноеПроизводство.СчетЗатрат, ВременнаяТаблицаНезавершенноеПроизводство.Подразделение, ВременнаяТаблицаНезавершенноеПроизводство.НоменклатурнаяГруппа) В
			|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|				ВременнаяТаблицаВыпускМассивПродукции.СчетЗатрат,
			|				ВременнаяТаблицаВыпускМассивПродукции.Подразделение,
			|				ВременнаяТаблицаВыпускМассивПродукции.НоменклатурнаяГруппа
			|			ИЗ
			|				ВременнаяТаблицаВыпускМассивПродукции КАК ВременнаяТаблицаВыпускМассивПродукции)";
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаФрагмент + ОбщегоНазначенияБПСервер.ТекстРазделителяЗапросовПакета();

		// Сумма затрат (группировка).
		ИндексТаблицы = ИндексТаблицы + 1;
		ИндексВременнаяТаблицаЗатраты = ИндексТаблицы;
		
		ТекстЗапросаФрагмент =
			"ВЫБРАТЬ
			|	ВременнаяТаблицаЗатраты.СчетЗатрат КАК СчетЗатрат,
			|	ВременнаяТаблицаЗатраты.Подразделение КАК Подразделение,
			|	ВременнаяТаблицаЗатраты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
			|	СУММА(ВременнаяТаблицаЗатраты.СуммаЗатрат) КАК СуммаЗатрат
			|ПОМЕСТИТЬ ВременнаяТаблицаЗатратыИтог
			|ИЗ
			|	ВременнаяТаблицаЗатраты КАК ВременнаяТаблицаЗатраты
			|
			|СГРУППИРОВАТЬ ПО
			|	ВременнаяТаблицаЗатраты.СчетЗатрат,
			|	ВременнаяТаблицаЗатраты.Подразделение,
			|	ВременнаяТаблицаЗатраты.НоменклатурнаяГруппа";
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаФрагмент + ОбщегоНазначенияБПСервер.ТекстРазделителяЗапросовПакета();
		
		// Определение стратегии распределения.
		Если Реквизиты.БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ПлановаяСебестоимость Тогда
			
			// Данные для корректировки себестоимости.
			// Устанавливается связь по Счету затрат, Подразделению, Номенклатурной группе.
			// Определяется показатель рапределения и сумма, подлежащая распределению.
			ИндексТаблицы = ИндексТаблицы + 1;
			ИндексКРаспределению = ИндексТаблицы;

			ТекстЗапросаФрагмент =
				"ВЫБРАТЬ
				|	ВременнаяТаблицаВыпускМассивПродукции.СчетЗатрат КАК СчетЗатрат,
				|	ВременнаяТаблицаВыпускМассивПродукции.Подразделение КАК Подразделение,
				|	ВременнаяТаблицаВыпускМассивПродукции.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
				|	ВременнаяТаблицаВыпускМассивПродукции.СчетСписания КАК СчетУчета,
				|	ВременнаяТаблицаВыпускМассивПродукции.Номенклатура КАК Номенклатура,
				|	ВременнаяТаблицаВыпускМассивПродукции.Склад КАК Склад,
				|	ВременнаяТаблицаВыпускМассивПродукции.Партия КАК Партия,
				|	ВременнаяТаблицаВыпускМассивПродукции.ПлановаяСтоимостьОборот КАК ПлановаяСтоимостьОборот,
				|	ВременнаяТаблицаВыпускМассивПродукции.ПлановаяСтоимостьОборот КАК ПоказательРаспределения,
				|	ВременнаяТаблицаЗатратыИтог.СуммаЗатрат КАК СуммаЗатрат
				|ИЗ
				|	ВременнаяТаблицаЗатратыИтог КАК ВременнаяТаблицаЗатратыИтог
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаВыпускМассивПродукции КАК ВременнаяТаблицаВыпускМассивПродукции
				|		ПО ВременнаяТаблицаЗатратыИтог.СчетЗатрат = ВременнаяТаблицаВыпускМассивПродукции.СчетЗатрат
				|			И ВременнаяТаблицаЗатратыИтог.Подразделение = ВременнаяТаблицаВыпускМассивПродукции.Подразделение
				|			И ВременнаяТаблицаЗатратыИтог.НоменклатурнаяГруппа = ВременнаяТаблицаВыпускМассивПродукции.НоменклатурнаяГруппа
				|ИТОГИ
				|	МАКСИМУМ(СуммаЗатрат)
				|ПО
				|	СчетЗатрат,
				|	Подразделение,
				|	НоменклатурнаяГруппа";
			ТекстЗапроса = ТекстЗапроса + ТекстЗапросаФрагмент + ОбщегоНазначенияБПСервер.ТекстРазделителяЗапросовПакета();

			// Дополнительные данные для корректировки списания.
			// Определяется количество выпуска за текущий месяц и остаток на начало месяца.
			ИндексТаблицы = ИндексТаблицы + 1;
			ИндексКоличесвоОстатка = ИндексТаблицы;
			
			ТекстЗапросаФрагмент =
				"ВЫБРАТЬ
				|	ВременнаяТаблицаВыпускМассивПродукции.СчетСписания КАК СчетУчета,
				|	ВременнаяТаблицаВыпускМассивПродукции.Номенклатура КАК Номенклатура,
				|	ВременнаяТаблицаВыпускМассивПродукции.Склад КАК Склад,
				|	ВременнаяТаблицаВыпускМассивПродукции.Партия КАК Партия,
				//|	СУММА(ВременнаяТаблицаВыпускМассивПродукции.КоличествоОборот) КАК КоличествоВыпуска,
				|	МАКСИМУМ(ЕСТЬNULL(ВременнаяТаблицаОбороты.КоличествоПриход, 0)) КАК КоличествоПриход,
				|	МАКСИМУМ(ЕСТЬNULL(ВременнаяТаблицаОстатки.КоличествоОстаток, 0)) КАК КоличествоОстаток
				|ИЗ
				|	ВременнаяТаблицаВыпускМассивПродукции КАК ВременнаяТаблицаВыпускМассивПродукции
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОстатки КАК ВременнаяТаблицаОстатки
				|		ПО ВременнаяТаблицаВыпускМассивПродукции.СчетСписания = ВременнаяТаблицаОстатки.Счет
				|			И ВременнаяТаблицаВыпускМассивПродукции.Номенклатура = ВременнаяТаблицаОстатки.Номенклатура
				|			И ВременнаяТаблицаВыпускМассивПродукции.Склад = ВременнаяТаблицаОстатки.Склад
				|			И ВременнаяТаблицаВыпускМассивПродукции.Партия = ВременнаяТаблицаОстатки.Партия
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОбороты КАК ВременнаяТаблицаОбороты
				|		ПО ВременнаяТаблицаВыпускМассивПродукции.СчетСписания = ВременнаяТаблицаОбороты.Счет
				|			И ВременнаяТаблицаВыпускМассивПродукции.Номенклатура = ВременнаяТаблицаОбороты.Номенклатура
				|			И ВременнаяТаблицаВыпускМассивПродукции.Склад = ВременнаяТаблицаОбороты.Склад
				|			И ВременнаяТаблицаВыпускМассивПродукции.Партия = ВременнаяТаблицаОбороты.Партия
				|
				|СГРУППИРОВАТЬ ПО
				|	ВременнаяТаблицаВыпускМассивПродукции.СчетСписания,
				|	ВременнаяТаблицаВыпускМассивПродукции.Номенклатура,
				|	ВременнаяТаблицаВыпускМассивПродукции.Склад,
				|	ВременнаяТаблицаВыпускМассивПродукции.Партия";
			ТекстЗапроса = ТекстЗапроса + ТекстЗапросаФрагмент + ОбщегоНазначенияБПСервер.ТекстРазделителяЗапросовПакета();
		
		ИначеЕсли Реквизиты.БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.МатериальныеЗатраты Тогда 
			// Материальные затраты.
			Текст = "";
			
			// Получение нормы расхода из спецификации для определения показателя расхода.
			ИндексТаблицы = ИндексТаблицы + 1;
			ИндексВременнаяТаблицаСпецификация = ИндексТаблицы;

			Текст = Текст + 
				"ВЫБРАТЬ
				|	ВременнаяТаблицаВыпускМассивПродукции.СчетЗатрат КАК СчетЗатрат,
				|	ВременнаяТаблицаВыпускМассивПродукции.Подразделение КАК Подразделение,
				|	ВременнаяТаблицаВыпускМассивПродукции.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
				|	ВременнаяТаблицаВыпускМассивПродукции.СчетСписания КАК СчетУчета,
				|	ВременнаяТаблицаВыпускМассивПродукции.Спецификация КАК Спецификация,
				|	ВременнаяТаблицаВыпускМассивПродукции.Номенклатура КАК Номенклатура,
				|	ВременнаяТаблицаВыпускМассивПродукции.Склад КАК Склад,
				|	ВременнаяТаблицаВыпускМассивПродукции.Партия КАК Партия,
				|	ВременнаяТаблицаВыпускМассивПродукции.ПлановаяСтоимостьОборот КАК ПлановаяСтоимостьОборот,
				|	СпецификацииНоменклатурыИсходныеКомплектующие.Номенклатура КАК НоменклатураСписания,
				|	ЕСТЬNULL(СпецификацииНоменклатурыИсходныеКомплектующие.Количество / СпецификацииНоменклатурыИсходныеКомплектующие.Ссылка.Количество * ВременнаяТаблицаВыпускМассивПродукции.КоличествоОборот, 0) КАК НормаРасхода
				|ПОМЕСТИТЬ ВременнаяТаблицаСпецификация
				|ИЗ
				|	ВременнаяТаблицаВыпускМассивПродукции КАК ВременнаяТаблицаВыпускМассивПродукции
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпецификацииНоменклатуры.ИсходныеКомплектующие КАК СпецификацииНоменклатурыИсходныеКомплектующие
				|		ПО ВременнаяТаблицаВыпускМассивПродукции.Спецификация = СпецификацииНоменклатурыИсходныеКомплектующие.Ссылка";
			Текст = Текст + ОбщегоНазначенияБПСервер.ТекстРазделителяЗапросовПакета();
			
			// Данные для корректировки себестоимости.
			// Устанавливается связь по Счету затрат, Подразделению, Номенклатурной группе.
			// Определяется показатель рапределения и сумма, подлежащая распределению.
			ИндексТаблицы = ИндексТаблицы + 1;
			ИндексКРаспределению = ИндексТаблицы;

			Текст = Текст + 
				"ВЫБРАТЬ
				|	ВременнаяТаблицаСпецификация.СчетЗатрат КАК СчетЗатрат,
				|	ВременнаяТаблицаСпецификация.Подразделение КАК Подразделение,
				|	ВременнаяТаблицаСпецификация.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
				|	ВременнаяТаблицаСпецификация.СчетУчета КАК СчетУчета,
				|	ВременнаяТаблицаСпецификация.Номенклатура КАК Номенклатура,
				|	ВременнаяТаблицаСпецификация.Склад КАК Склад,
				|	ВременнаяТаблицаСпецификация.Партия КАК Партия,
				|	МАКСИМУМ(ВременнаяТаблицаСпецификация.ПлановаяСтоимостьОборот) КАК ПлановаяСтоимостьОборот,
				|	СУММА(ВременнаяТаблицаСпецификация.НормаРасхода * ВЫБОР
				|			КОГДА ЕСТЬNULL(ХозрасчетныйОбороты.КоличествоОборотКт, 0) = 0
				|				ТОГДА 0
				|			ИНАЧЕ ХозрасчетныйОбороты.СуммаОборотКт / ХозрасчетныйОбороты.КоличествоОборотКт
				|		КОНЕЦ) КАК ПоказательРаспределения,
				|	МАКСИМУМ(ВременнаяТаблицаЗатратыИтог.СуммаЗатрат) КАК СуммаЗатрат
				|ИЗ
				|	ВременнаяТаблицаСпецификация КАК ВременнаяТаблицаСпецификация
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Обороты(
				|				&НачалоПериода,
				|				&КонецПериода,
				|				,
				|				,
				|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура),
				|				Организация = &Организация
				|					И Субконто1 В
				|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
				|							ВременнаяТаблицаСпецификация.НоменклатураСписания
				|						ИЗ
				|							ВременнаяТаблицаСпецификация КАК ВременнаяТаблицаСпецификация)
				|					И (КорСубконто1, КорСубконто2) В
				|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
				|							ВременнаяТаблицаСпецификация.Подразделение,
				|							ВременнаяТаблицаСпецификация.НоменклатурнаяГруппа
				|						ИЗ
				|							ВременнаяТаблицаСпецификация КАК ВременнаяТаблицаСпецификация),
				|				КорСчет В (&СчетаПрямыхРасходов),
				|				&ВидыСубконтоПрямыхРасходов) КАК ХозрасчетныйОбороты
				|		ПО ВременнаяТаблицаСпецификация.СчетЗатрат = ХозрасчетныйОбороты.КорСчет
				|			И ВременнаяТаблицаСпецификация.Подразделение = ХозрасчетныйОбороты.КорСубконто1
				|			И ВременнаяТаблицаСпецификация.НоменклатурнаяГруппа = ХозрасчетныйОбороты.КорСубконто2
				|			И ВременнаяТаблицаСпецификация.НоменклатураСписания = ХозрасчетныйОбороты.Субконто1
				|			И (ХозрасчетныйОбороты.КоличествоОборотКт > 0)
				|			И (НЕ ХозрасчетныйОбороты.СуммаОборотКт = 0)
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаЗатратыИтог КАК ВременнаяТаблицаЗатратыИтог
				|		ПО ВременнаяТаблицаСпецификация.СчетЗатрат = ВременнаяТаблицаЗатратыИтог.СчетЗатрат
				|			И ВременнаяТаблицаСпецификация.Подразделение = ВременнаяТаблицаЗатратыИтог.Подразделение
				|			И ВременнаяТаблицаСпецификация.НоменклатурнаяГруппа = ВременнаяТаблицаЗатратыИтог.НоменклатурнаяГруппа
				|
				|СГРУППИРОВАТЬ ПО
				|	ВременнаяТаблицаСпецификация.СчетЗатрат,
				|	ВременнаяТаблицаСпецификация.Подразделение,
				|	ВременнаяТаблицаСпецификация.НоменклатурнаяГруппа,
				|	ВременнаяТаблицаСпецификация.СчетУчета,
				|	ВременнаяТаблицаСпецификация.Номенклатура,
				|	ВременнаяТаблицаСпецификация.Склад,
				|	ВременнаяТаблицаСпецификация.Партия
				|ИТОГИ
				|	МАКСИМУМ(СуммаЗатрат)
				|ПО
				|	СчетЗатрат,
				|	Подразделение,
				|	НоменклатурнаяГруппа";
			Текст = Текст + ОбщегоНазначенияБПСервер.ТекстРазделителяЗапросовПакета();
			
			// Если есть счета с субконто партии.	
			Если СчетаУчетаНПС.Количество() > 0 Тогда
				
				// Дополнительные данные для корректировки списания.
				// Определяется количество выпуска за текущий месяц и остаток на начало месяца.
				ИндексТаблицы = ИндексТаблицы + 1;
				ИндексКоличесвоОстатка = ИндексТаблицы;

				Текст = Текст + 
					"ВЫБРАТЬ
					|	ХозрасчетныйОбороты.КорСчет КАК СчетУчета,
					|	ХозрасчетныйОбороты.КорСубконто1 КАК Номенклатура,
					|	ХозрасчетныйОбороты.КорСубконто2 КАК Склад,
					|	ХозрасчетныйОбороты.КорСубконто3 КАК Партия,
					//|	СУММА(ВременнаяТаблицаВыпускМассивПродукции.КоличествоОборот) КАК КоличествоВыпуска,
					|	МАКСИМУМ(ЕСТЬNULL(ВременнаяТаблицаОбороты.КоличествоПриход, 0)) КАК КоличествоПриход,
					|	МАКСИМУМ(ЕСТЬNULL(ВременнаяТаблицаОстатки.КоличествоОстаток, 0)) КАК КоличествоОстаток
					|ИЗ
					|	РегистрБухгалтерии.Хозрасчетный.Обороты(
					|			&НачалоПериода,
					|			&КонецПериода,
					|			,
					|			Счет В ИЕРАРХИИ (&СчетаПрямыхРасходов),
					|			&ВидыСубконтоПрямыхРасходов,
					|			Организация = &Организация
					|				И (КорСубконто1, КорСубконто2, КорСубконто3) В
					|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
					|						ВременнаяТаблицаВыпускМассивПродукции.Номенклатура,
					|						ВременнаяТаблицаВыпускМассивПродукции.Склад,
					|						ВременнаяТаблицаВыпускМассивПродукции.Партия
					|					ИЗ
					|						ВременнаяТаблицаВыпускМассивПродукции КАК ВременнаяТаблицаВыпускМассивПродукции),
					|			КорСчет В (&СчетаУчетаТоваровНПС),
					|			&ВидыСубконтоНПС) КАК ХозрасчетныйОбороты
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаВыпускМассивПродукции КАК ВременнаяТаблицаВыпускМассивПродукции
					|		ПО ХозрасчетныйОбороты.КорСчет = ВременнаяТаблицаВыпускМассивПродукции.СчетСписания
					|			И ХозрасчетныйОбороты.КорСубконто1 = ВременнаяТаблицаВыпускМассивПродукции.Номенклатура
					|			И ХозрасчетныйОбороты.КорСубконто2 = ВременнаяТаблицаВыпускМассивПродукции.Склад
					|			И ХозрасчетныйОбороты.КорСубконто3 = ВременнаяТаблицаВыпускМассивПродукции.Партия
					|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОстатки КАК ВременнаяТаблицаОстатки
					|		ПО ХозрасчетныйОбороты.КорСчет = ВременнаяТаблицаОстатки.Счет
					|			И ХозрасчетныйОбороты.КорСубконто1 = ВременнаяТаблицаОстатки.Номенклатура
					|			И ХозрасчетныйОбороты.КорСубконто2 = ВременнаяТаблицаОстатки.Склад
					|			И ХозрасчетныйОбороты.КорСубконто3 = ВременнаяТаблицаОстатки.Партия
					|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОбороты КАК ВременнаяТаблицаОбороты
					|		ПО ХозрасчетныйОбороты.КорСчет = ВременнаяТаблицаОбороты.Счет
					|			И ХозрасчетныйОбороты.КорСубконто1 = ВременнаяТаблицаОбороты.Номенклатура
					|			И ХозрасчетныйОбороты.КорСубконто2 = ВременнаяТаблицаОбороты.Склад
					|			И ХозрасчетныйОбороты.КорСубконто3 = ВременнаяТаблицаОбороты.Партия
					|ГДЕ
					|	ХозрасчетныйОбороты.КоличествоКорОборотКт > 0
					|	И НЕ ХозрасчетныйОбороты.СуммаОборотКт = 0
					|
					|СГРУППИРОВАТЬ ПО
					|	ХозрасчетныйОбороты.КорСчет,
					|	ХозрасчетныйОбороты.КорСубконто1,
					|	ХозрасчетныйОбороты.КорСубконто2,
					|	ХозрасчетныйОбороты.КорСубконто3";
			Иначе 
				
				// Дополнительные данные для корректировки списания.
				// Определяется количество выпуска за текущий месяц и остаток на начало месяца.
				ИндексТаблицы = ИндексТаблицы + 1;
				ИндексКоличесвоОстатка = ИндексТаблицы;

				Текст = Текст + 
					"ВЫБРАТЬ
					|	ХозрасчетныйОбороты.КорСчет КАК СчетУчета,
					|	ХозрасчетныйОбороты.КорСубконто1 КАК Номенклатура,
					|	ХозрасчетныйОбороты.КорСубконто2 КАК Склад,
					|	НЕОПРЕДЕЛЕНО КАК Партия,
					//|	СУММА(ВременнаяТаблицаВыпускМассивПродукции.КоличествоОборот) КАК КоличествоВыпуска,
					|	МАКСИМУМ(ЕСТЬNULL(ВременнаяТаблицаОбороты.КоличествоПриход, 0)) КАК КоличествоПриход,
					|	МАКСИМУМ(ЕСТЬNULL(ВременнаяТаблицаОстатки.КоличествоОстаток, 0)) КАК КоличествоОстаток
					|ИЗ
					|	РегистрБухгалтерии.Хозрасчетный.Обороты(
					|			&НачалоПериода,
					|			&КонецПериода,
					|			,
					|			Счет В ИЕРАРХИИ (&СчетаПрямыхРасходов),
					|			&ВидыСубконтоПрямыхРасходов,
					|			Организация = &Организация
					|				И (КорСубконто1, КорСубконто2) В
					|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
					|						ВременнаяТаблицаВыпускМассивПродукции.Номенклатура,
					|						ВременнаяТаблицаВыпускМассивПродукции.Склад
					|					ИЗ
					|						ВременнаяТаблицаВыпускМассивПродукции КАК ВременнаяТаблицаВыпускМассивПродукции),
					|			КорСчет В (&СчетаУчетаТоваровНС),
					|			&ВидыCубконтоНС) КАК ХозрасчетныйОбороты
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаВыпускМассивПродукции КАК ВременнаяТаблицаВыпускМассивПродукции
					|		ПО ХозрасчетныйОбороты.КорСчет = ВременнаяТаблицаВыпускМассивПродукции.СчетСписания
					|			И ХозрасчетныйОбороты.КорСубконто1 = ВременнаяТаблицаВыпускМассивПродукции.Номенклатура
					|			И ХозрасчетныйОбороты.КорСубконто2 = ВременнаяТаблицаВыпускМассивПродукции.Склад
					|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОстатки КАК ВременнаяТаблицаОстатки
					|		ПО ХозрасчетныйОбороты.КорСчет = ВременнаяТаблицаОстатки.Счет
					|			И ХозрасчетныйОбороты.КорСубконто1 = ВременнаяТаблицаОстатки.Номенклатура
					|			И ХозрасчетныйОбороты.КорСубконто2 = ВременнаяТаблицаОстатки.Склад
					|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОбороты КАК ВременнаяТаблицаОбороты
					|		ПО ХозрасчетныйОбороты.КорСчет = ВременнаяТаблицаОбороты.Счет
					|			И ХозрасчетныйОбороты.КорСубконто1 = ВременнаяТаблицаОбороты.Номенклатура
					|			И ХозрасчетныйОбороты.КорСубконто2 = ВременнаяТаблицаОбороты.Склад
					|ГДЕ
					|	ХозрасчетныйОбороты.КоличествоКорОборотКт > 0
					|	И НЕ ХозрасчетныйОбороты.СуммаОборотКт = 0
					|
					|СГРУППИРОВАТЬ ПО
					|	ХозрасчетныйОбороты.КорСчет,
					|	ХозрасчетныйОбороты.КорСубконто1,
					|	ХозрасчетныйОбороты.КорСубконто2";
			КонецЕсли;

			ТекстЗапроса = ТекстЗапроса + Текст + ОбщегоНазначенияБПСервер.ТекстРазделителяЗапросовПакета();
		КонецЕсли;		
		
		// Корректировка списания.
		Текст = "";
		
		// Если есть счета с субконто партии.	
		ИндексТаблицы = ИндексТаблицы + 1;
		ИндексКорректировкаСписания = ИндексТаблицы;

		Если СчетаУчетаНПС.Количество() > 0 Тогда
			Текст = Текст +
			"ВЫБРАТЬ
			|	ХозрасчетныйОбороты.Счет КАК СчетУчета,
			|	ХозрасчетныйОбороты.Субконто1 КАК Номенклатура,
			|	ХозрасчетныйОбороты.Субконто2 КАК Склад,
			|	ХозрасчетныйОбороты.Субконто3 КАК Партия,
			|	ХозрасчетныйОбороты.КорСчет КАК СчетДт,
			|	ХозрасчетныйОбороты.КорСубконто1 КАК СубконтоДт1,
			|	ХозрасчетныйОбороты.КорСубконто2 КАК СубконтоДт2,
			|	ХозрасчетныйОбороты.КорСубконто3 КАК СубконтоДт3,
			|	ХозрасчетныйОбороты.КоличествоОборотКт КАК Количество
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Обороты(
			|			&НачалоПериода,
			|			&КонецПериода,
			|			,
			|			Счет В (&СчетаУчетаНПС),
			|			&ВидыСубконтоНПС,
			|			Организация = &Организация
			|				И (Субконто1) В
			|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|						ВременнаяТаблицаВыпускМассивПродукции.Номенклатура
			|					ИЗ
			|						ВременнаяТаблицаВыпускМассивПродукции КАК ВременнаяТаблицаВыпускМассивПродукции),
			|			,
			|			) КАК ХозрасчетныйОбороты";
		Иначе 
			Текст = Текст + 
			"ВЫБРАТЬ
			|	ХозрасчетныйОбороты.Счет КАК СчетУчета,
			|	ХозрасчетныйОбороты.Субконто1 КАК Номенклатура,
			|	ХозрасчетныйОбороты.Субконто2 КАК Склад,
			|	НЕОПРЕДЕЛЕНО КАК Партия,
			|	ХозрасчетныйОбороты.КорСчет КАК СчетДт,
			|	ХозрасчетныйОбороты.КорСубконто1 КАК СубконтоДт1,
			|	ХозрасчетныйОбороты.КорСубконто2 КАК СубконтоДт2,
			|	ХозрасчетныйОбороты.КорСубконто3 КАК СубконтоДт3,
			|	ХозрасчетныйОбороты.КоличествоОборотКт КАК Количество
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Обороты(
			|			&НачалоПериода,
			|			&КонецПериода,
			|			,
			|			Счет В (&СчетаУчетаНС),
			|			&ВидыCубконтоНС,
			|			Организация = &Организация
			|				И Субконто1 В
			|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|						ВременнаяТаблицаВыпускМассивПродукции.Номенклатура
			|					ИЗ
			|						ВременнаяТаблицаВыпускМассивПродукции КАК ВременнаяТаблицаВыпускМассивПродукции),
			|			,
			|			) КАК ХозрасчетныйОбороты
			|
			|УПОРЯДОЧИТЬ ПО
			|	СчетУчета,
			|	Номенклатура,
			|	Склад,
			|	Партия";
		КонецЕсли;	
		ТекстЗапроса = ТекстЗапроса + Текст + ОбщегоНазначенияБПСервер.ТекстРазделителяЗапросовПакета();
		
		// Таблицы зависят от отбора по продукции.
		ТекстЗапросаФрагмент = "";
		Если НЕ ИндексВременнаяТаблицаСпецификация = Неопределено Тогда 
			ТекстЗапросаФрагмент = ТекстЗапросаФрагмент + "УНИЧТОЖИТЬ ВременнаяТаблицаСпецификация;" + Символы.ПС;
		КонецЕсли;	

		ТекстЗапросаФрагмент = ТекстЗапросаФрагмент +
			"УНИЧТОЖИТЬ ВременнаяТаблицаВыпускМассивПродукции;
			|УНИЧТОЖИТЬ ВременнаяТаблицаЗатраты;
			|УНИЧТОЖИТЬ ВременнаяТаблицаЗатратыИтог";

		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаФрагмент + ОбщегоНазначенияБПСервер.ТекстРазделителяЗапросовПакета();


		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = ТекстЗапроса;

		Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Реквизиты.Период));
		Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецМесяца(Реквизиты.Период), ВидГраницы.Включая));
		Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
		Запрос.УстановитьПараметр("МассивПродукции", МассивПродукцииПорядок);
		
		Запрос.УстановитьПараметр("СчетаПрямыхРасходов", СчетаУчетаПрямыхРасходов);
		
		Запрос.УстановитьПараметр("ВидыСубконтоПрямыхРасходов", ВидыСубконтоПрямыхРасходов);
		
		Запрос.УстановитьПараметр("СчетаУчетаНС", СчетаУчетаНС);
		Запрос.УстановитьПараметр("СчетаУчетаНПС", СчетаУчетаНПС);
		Запрос.УстановитьПараметр("ВидыCубконтоНС", ВидыСубконтоНС);
		Запрос.УстановитьПараметр("ВидыСубконтоНПС", ВидыСубконтоНПС);
		
		Запрос.УстановитьПараметр("СчетаУчетаТоваровНС", СчетаУчетаТоваровНС);
		Запрос.УстановитьПараметр("СчетаУчетаТоваровНПС", СчетаУчетаТоваровНПС);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		ТаблицаДанныеДляКорректировкиСписания = МассивРезультатов[ИндексКоличесвоОстатка].Выгрузить();
		ТаблицаСписанныеТовары = МассивРезультатов[ИндексКорректировкаСписания].Выгрузить();
		
		МассивПродукцииКорректировкиСписания = Новый Массив;
		
		ВыборкаСчетЗатрат = МассивРезультатов[ИндексКРаспределению].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСчетЗатрат.Следующий() Цикл
			ВыборкаПодразделение = ВыборкаСчетЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
			Пока ВыборкаПодразделение.Следующий() Цикл
				ВыборкаНоменклатурнаяГруппа = ВыборкаПодразделение.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
				Пока ВыборкаНоменклатурнаяГруппа.Следующий() Цикл
					СуммаЗатрат = ВыборкаНоменклатурнаяГруппа.СуммаЗатрат;
					Если СуммаЗатрат = 0 Тогда 
						Продолжить;
					КонецЕсли;	
					
					МассивКоэффициентов = Новый Массив;	
					
					ВыборкаДетальныеЗаписи = ВыборкаНоменклатурнаяГруппа.Выбрать();
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						Если ВыборкаДетальныеЗаписи.ПоказательРаспределения = 0 Тогда 
							ТекстСообщения = СтрШаблон(НСтр("ru = 'Корректировка себестоимости продукции. Показатель распределения равен нулю.
											|База распределения: %1; Подразделение: %2; Номенклатурная группа: %3'"),
											Реквизиты.БазаРаспределения, ВыборкаНоменклатурнаяГруппа.Подразделение, ВыборкаНоменклатурнаяГруппа.НоменклатурнаяГруппа);
							ВызватьИсключение ТекстСообщения;
						КонецЕсли;	
						
						МассивКоэффициентов.Добавить(ВыборкаДетальныеЗаписи.ПоказательРаспределения);
					КонецЦикла;				
					
					МассивСуммКорректировки = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(СуммаЗатрат, МассивКоэффициентов);
					Если МассивСуммКорректировки = Неопределено Тогда
						ТекстСообщения = СтрШаблон(НСтр("ru = 'Корректировка себестоимости продукции. Не удалось распределить сумма корректировки.
										|База распределения: %1; Подразделение: %2; Номенклатурная группа: %3'"),
										Реквизиты.БазаРаспределения, ВыборкаНоменклатурнаяГруппа.Подразделение, ВыборкаНоменклатурнаяГруппа.НоменклатурнаяГруппа);
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстСообщения, Неопределено);                              		
						Продолжить;
					КонецЕсли;	

					ИндексВМассиве = 0;

					ВыборкаДетальныеЗаписи.Сбросить();
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						
						СуммаФактическихЗатрат = МассивСуммКорректировки[ИндексВМассиве];
						СуммаКорректировки = СуммаФактическихЗатрат - ВыборкаДетальныеЗаписи.ПлановаяСтоимостьОборот;
						
						ИндексВМассиве = ИндексВМассиве + 1;
						
						Если СуммаКорректировки = 0 Тогда 
							Продолжить;
						КонецЕсли;	
						
						Проводка = Движения.Хозрасчетный.Добавить();
						Проводка.Период = Реквизиты.Период;
						Проводка.Организация = Реквизиты.Организация;
						Проводка.Содержание = НСтр("ru = 'Корректировка себестоимости продукции'");

						Проводка.СчетДт = ВыборкаДетальныеЗаписи.СчетУчета;
						БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", ВыборкаДетальныеЗаписи.Номенклатура);
						БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", ВыборкаДетальныеЗаписи.Склад);
						Если ВедетсяУчетПоПартиям Тогда
							БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", ВыборкаДетальныеЗаписи.Партия);
						КонецЕсли;
					
						Проводка.СчетКт = ВыборкаДетальныеЗаписи.СчетЗатрат;
						БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", ВыборкаДетальныеЗаписи.НоменклатурнаяГруппа);
						БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", ВыборкаДетальныеЗаписи.Подразделение);

						Проводка.Сумма = СуммаКорректировки;
						СуммаКорректировкиИтого = СуммаКорректировкиИтого + СуммаКорректировки;
						
						// Корректировка списания или прочего выбытия(перемещения).
						
						// Нечего корректировать.
						Если ТаблицаСписанныеТовары.Количество() = 0 Тогда 
							Продолжить;
						КонецЕсли;	
						// Определение количества корректировки для расчета себестоимости.
						СтруктураОтбора = Новый Структура;
						СтруктураОтбора.Вставить("СчетУчета", ВыборкаДетальныеЗаписи.СчетУчета);
						СтруктураОтбора.Вставить("Номенклатура", ВыборкаДетальныеЗаписи.Номенклатура);
						СтруктураОтбора.Вставить("Склад", ВыборкаДетальныеЗаписи.Склад);
						СтруктураОтбора.Вставить("Партия", ВыборкаДетальныеЗаписи.Партия);

						НайденныеСтроки = ТаблицаДанныеДляКорректировкиСписания.НайтиСтроки(СтруктураОтбора);

						// Расчет количества корректировки.
						КоличествоКорректировки = 0;
						Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
							КоличествоКорректировки = НайденнаяСтрока.КоличествоОстаток + НайденнаяСтрока.КоличествоПриход;
						КонецЦикла;	
						Если КоличествоКорректировки = 0 Тогда 
							Продолжить;
						КонецЕсли;
						
						ЦенаКорректировки = СуммаКорректировки / КоличествоКорректировки; // Без округления.
						
						// Отбор.
						СтруктураОтбора = Новый Структура;
						СтруктураОтбора.Вставить("СчетУчета", ВыборкаДетальныеЗаписи.СчетУчета);
						СтруктураОтбора.Вставить("Номенклатура", ВыборкаДетальныеЗаписи.Номенклатура);
						СтруктураОтбора.Вставить("Склад", ВыборкаДетальныеЗаписи.Склад);
						СтруктураОтбора.Вставить("Партия", ВыборкаДетальныеЗаписи.Партия);
						
						НайденныеСтроки = ТаблицаСписанныеТовары.НайтиСтроки(СтруктураОтбора);
						Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
							
							Если ТипЗнч(НайденнаяСтрока.СубконтоДт2) = Тип("СправочникСсылка.НоменклатурныеГруппы")
								И ВыборкаДетальныеЗаписи.НоменклатурнаяГруппа.ПорядокРаспределения >= НайденнаяСтрока.СубконтоДт2.ПорядокРаспределения Тогда 
								ТекстСообщения = СтрШаблон(НСтр("ru = 'Корректировка списания себестоимости продукции. Порядок распределения настроен не верно.
												|Номенклатурная группа корректировки: %1; Подразделение: %2; Номенклатурная группа списания: %3'"),
												ВыборкаДетальныеЗаписи.НоменклатурнаяГруппа, ВыборкаНоменклатурнаяГруппа.Подразделение, НайденнаяСтрока.СубконтоДт2);
								ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстСообщения, Неопределено);                              		
								Прервать;
							КонецЕсли;	
							
							Проводка = Движения.Хозрасчетный.Добавить();
							Проводка.Период = Реквизиты.Период;
							Проводка.Организация = Реквизиты.Организация;
							Проводка.Содержание = НСтр("ru = 'Корректировка списания себестоимости продукции'");

							Проводка.СчетДт = НайденнаяСтрока.СчетДт;
							БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, НайденнаяСтрока.СубконтоДт1);
							БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, НайденнаяСтрока.СубконтоДт2);
							БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, НайденнаяСтрока.СубконтоДт3);
						
							Проводка.СчетКт = НайденнаяСтрока.СчетУчета;
							БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", НайденнаяСтрока.Номенклатура);
							БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", НайденнаяСтрока.Склад);
							Если ВедетсяУчетПоПартиям Тогда
								БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии", НайденнаяСтрока.Партия);
							КонецЕсли;

							Проводка.Сумма = НайденнаяСтрока.Количество * ЦенаКорректировки;
							
							МассивПродукцииКорректировкиСписания.Добавить(НайденнаяСтрока.Номенклатура);
						КонецЦикла;
						
						//Если КорректировкаКопейки Тогда 
						//	// Распределение погрешности округления корректировки.
						//	// Копейка относится к завершающей проводке,
						//	// в случае если количество списано в 0.
						//	
						//	// Если есть счета с субконто партии.	
						//	Текст = "";
						//	Если СчетаУчетаНПС.Количество() > 0 Тогда
						//		Текст = Текст +
						//		"ВЫБРАТЬ
						//		|	ХозрасчетныйОстатки.Счет КАК СчетУчета,
						//		|	ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,
						//		|	ХозрасчетныйОстатки.Субконто2 КАК Склад,
						//		|	ХозрасчетныйОстатки.Субконто3 КАК Партия,
						//		|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток
						//		|ИЗ
						//		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
						//		|			&КонецПериода,
						//		|			Счет = &СчетУчета,
						//		|			&ВидыСубконтоНПС,
						//		|			Организация = &Организация
						//		|				И Субконто1 = &Номенклатура) КАК ХозрасчетныйОстатки
						//		|ГДЕ
						//		|	ХозрасчетныйОстатки.КоличествоОстаток = 0
						//		|	И НЕ ХозрасчетныйОстатки.СуммаОстаток = 0";		
						//	Иначе 
						//		Текст = Текст + 
						//		"ВЫБРАТЬ
						//		|	ХозрасчетныйОстатки.Счет КАК СчетУчета,
						//		|	ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,
						//		|	ХозрасчетныйОстатки.Субконто2 КАК Склад,
						//		|	НЕОПРЕДЕЛЕНО КАК Партия,
						//		|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток
						//		|ИЗ
						//		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
						//		|			&КонецПериода,
						//		|			Счет = &СчетУчета,
						//		|			&ВидыСубконтоНС,
						//		|			Организация = &Организация
						//		|				И Субконто1 = &Номенклатура) КАК ХозрасчетныйОстатки
						//		|ГДЕ
						//		|	ХозрасчетныйОстатки.КоличествоОстаток = 0
						//		|	И НЕ ХозрасчетныйОстатки.СуммаОстаток = 0";
						//	КонецЕсли;	
						//	Запрос = Новый Запрос;
						//	Запрос.Текст = Текст;
						//	
						//	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецМесяца(Реквизиты.Период), ВидГраницы.Включая));
						//	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
						//	Запрос.УстановитьПараметр("СчетУчета", ВыборкаДетальныеЗаписи.СчетУчета);
						//	Запрос.УстановитьПараметр("ВидыСубконтоНС", ВидыСубконтоНС);
						//	Запрос.УстановитьПараметр("ВидыСубконтоНПС", ВидыСубконтоНПС);
						//	Запрос.УстановитьПараметр("Номенклатура", ВыборкаДетальныеЗаписи.Номенклатура);
						//	
						//	РезультатЗапроса = Запрос.Выполнить();
						//	Если НЕ РезультатЗапроса.Пустой() Тогда 
						//		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
						//	
						//		// Если проводки сделал текущий документ,
						//		// то остаток отнесем на pавершающую проводку списания со счета.
						//		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						//			Проводка.Сумма = Проводка.Сумма + ВыборкаДетальныеЗаписи.СуммаОстаток;
						//		КонецЦикла;
						//	КонецЕсли;
						//КонецЕсли;						
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;

		Движения.Хозрасчетный.Записать(Ложь);
		
		Если МассивПродукцииКорректировкиСписания.Количество() > 0 Тогда 
			// Распределение погрешности округления корректировки.
			// Копейка относится к завершающей проводке,
			// в случае если количество списано в 0.
			
			// Если есть счета с субконто партии.	
			Текст = "";
			Если СчетаУчетаНПС.Количество() > 0 Тогда
				Текст = Текст +
				"ВЫБРАТЬ
				|	ХозрасчетныйОстатки.Счет КАК СчетУчета,
				|	ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,
				|	ХозрасчетныйОстатки.Субконто2 КАК Склад,
				|	ХозрасчетныйОстатки.Субконто3 КАК Партия,
				|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток
				|ПОМЕСТИТЬ ВременнаяТаблицаОстатки
				|ИЗ
				|	РегистрБухгалтерии.Хозрасчетный.Остатки(
				|			&КонецПериода,
				|			Счет В (&СчетаУчетаНПС),
				|			&ВидыСубконтоНПС,
				|			Организация = &Организация
				|				И Субконто1 В (&МассивПродукции)) КАК ХозрасчетныйОстатки
				|ГДЕ
				|	ХозрасчетныйОстатки.КоличествоОстаток = 0
				|	И НЕ ХозрасчетныйОстатки.СуммаОстаток = 0";		
				Текст = Текст + ОбщегоНазначенияБПСервер.ТекстРазделителяЗапросовПакета();
				
				Текст = Текст + 
				"ВЫБРАТЬ
				|	МАКСИМУМ(ХозрасчетныйДвиженияССубконто.НомерСтроки) КАК НомерСтроки,
				|	ВременнаяТаблицаОстатки.СуммаОстаток КАК СуммаОстаток
				|ИЗ
				|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
				|			,
				|			,
				|			Регистратор = &Регистратор
				|				И (СчетКт, СубконтоКт1, СубконтоКт2, СубконтоКт3) В
				|					(ВЫБРАТЬ
				|						ВременнаяТаблицаОстатки.СчетУчета КАК СчетУчета,
				|						ВременнаяТаблицаОстатки.Номенклатура КАК Номенклатура,
				|						ВременнаяТаблицаОстатки.Склад КАК Склад,
				|						ВременнаяТаблицаОстатки.Партия КАК Партия
				|					ИЗ
				|						ВременнаяТаблицаОстатки КАК ВременнаяТаблицаОстатки),
				|			,
				|			) КАК ХозрасчетныйДвиженияССубконто
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОстатки КАК ВременнаяТаблицаОстатки
				|		ПО ХозрасчетныйДвиженияССубконто.СчетКт = ВременнаяТаблицаОстатки.СчетУчета
				|			И ХозрасчетныйДвиженияССубконто.СубконтоКт1 = ВременнаяТаблицаОстатки.Номенклатура
				|			И ХозрасчетныйДвиженияССубконто.СубконтоКт2 = ВременнаяТаблицаОстатки.Склад
				|			И ХозрасчетныйДвиженияССубконто.СубконтоКт3 = ВременнаяТаблицаОстатки.Партия
				|
				|СГРУППИРОВАТЬ ПО
				|	ВременнаяТаблицаОстатки.СуммаОстаток";
			Иначе 
				Текст = Текст + 
				"ВЫБРАТЬ
				|	ХозрасчетныйОстатки.Счет КАК СчетУчета,
				|	ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,
				|	ХозрасчетныйОстатки.Субконто2 КАК Склад,
				|	НЕОПРЕДЕЛЕНО КАК Партия,
				|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток
				|ПОМЕСТИТЬ ВременнаяТаблицаОстатки
				|ИЗ
				|	РегистрБухгалтерии.Хозрасчетный.Остатки(
				|			&КонецПериода,
				|			Счет В (&СчетаУчетаНС),
				|			&ВидыСубконтоНС,
				|			Организация = &Организация
				|				И Субконто1 В (&МассивПродукции)) КАК ХозрасчетныйОстатки
				|ГДЕ
				|	ХозрасчетныйОстатки.КоличествоОстаток = 0
				|	И НЕ ХозрасчетныйОстатки.СуммаОстаток = 0";
				Текст = Текст + ОбщегоНазначенияБПСервер.ТекстРазделителяЗапросовПакета();
				
				Текст = Текст + 
				"ВЫБРАТЬ
				|	МАКСИМУМ(ХозрасчетныйДвиженияССубконто.НомерСтроки) КАК НомерСтроки,
				|	ВременнаяТаблицаОстатки.СуммаОстаток КАК СуммаОстаток
				|ИЗ
				|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
				|			,
				|			,
				|			Регистратор = &Регистратор
				|				И (СчетКт, СубконтоКт1, СубконтоКт2) В
				|					(ВЫБРАТЬ
				|						ВременнаяТаблицаОстатки.СчетУчета КАК СчетУчета,
				|						ВременнаяТаблицаОстатки.Номенклатура КАК Номенклатура,
				|						ВременнаяТаблицаОстатки.Склад КАК Склад
				|					ИЗ
				|						ВременнаяТаблицаОстатки КАК ВременнаяТаблицаОстатки),
				|			,
				|			) КАК ХозрасчетныйДвиженияССубконто
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОстатки КАК ВременнаяТаблицаОстатки
				|		ПО ХозрасчетныйДвиженияССубконто.СчетКт = ВременнаяТаблицаОстатки.СчетУчета
				|			И ХозрасчетныйДвиженияССубконто.СубконтоКт1 = ВременнаяТаблицаОстатки.Номенклатура
				|			И ХозрасчетныйДвиженияССубконто.СубконтоКт2 = ВременнаяТаблицаОстатки.Склад
				|
				|СГРУППИРОВАТЬ ПО
				|	ВременнаяТаблицаОстатки.СуммаОстаток";
			КонецЕсли;	
			Запрос = Новый Запрос;
			Запрос.Текст = Текст;
			
			Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецМесяца(Реквизиты.Период), ВидГраницы.Включая));
			Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
			Запрос.УстановитьПараметр("Регистратор", Реквизиты.Регистратор);
			Запрос.УстановитьПараметр("СчетаУчетаНС", СчетаУчетаНС);
			Запрос.УстановитьПараметр("СчетаУчетаНПС", СчетаУчетаНПС);
			Запрос.УстановитьПараметр("ВидыСубконтоНС", ВидыСубконтоНС);
			Запрос.УстановитьПараметр("ВидыСубконтоНПС", ВидыСубконтоНПС);
			Запрос.УстановитьПараметр("МассивПродукции", МассивПродукцииКорректировкиСписания);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда 
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
				НаборЗаписейХозрасчетный = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
				НаборЗаписейХозрасчетный.Отбор.Регистратор.Установить(Реквизиты.Регистратор);
				НаборЗаписейХозрасчетный.Прочитать();	

				// Если проводки сделал текущий документ,
				// то остаток отнесем на pавершающую проводку списания со счета.
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Проводка = НаборЗаписейХозрасчетный[ВыборкаДетальныеЗаписи.НомерСтроки - 1];
					Проводка.Сумма = Проводка.Сумма + ВыборкаДетальныеЗаписи.СуммаОстаток;
				КонецЦикла;
				// Перезапись всех движений.
				// Переделать- перенести вверх и анализировать при корректировки списания.
				НаборЗаписейХозрасчетный.Записать();
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	
	МенеджерВременныхТаблиц.Закрыть();

	// Корректировку копейки нужно делать в цикле выше
	// так как это может быть полуфабрикат
	// пока не реализовано, так как не столкнулись
	// добавлен возврат, код ниже может пригодиться.
	Возврат;	
	// Распределение погрешности округления корректировки.
	// Копейка относится к завершающей проводке,
	// в случае если количество списано в 0.
	
	// Если есть счета с субконто партии.	
	Текст = "";
	Если СчетаУчетаНПС.Количество() > 0 Тогда
		Текст = Текст +
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК СчетУчета,
		|	ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,
		|	ХозрасчетныйОстатки.Субконто2 КАК Склад,
		|	ХозрасчетныйОстатки.Субконто3 КАК Партия,
		|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток
		|ПОМЕСТИТЬ ВременнаяТаблицаОстатки
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&КонецПериода,
		|			Счет В (&СчетаУчетаНПС),
		|			&ВидыСубконтоНПС,
		|			Организация = &Организация
		|				И Субконто1 В (&МассивПродукции)) КАК ХозрасчетныйОстатки
		|ГДЕ
		|	ХозрасчетныйОстатки.КоличествоОстаток = 0
		|	И НЕ ХозрасчетныйОстатки.СуммаОстаток = 0";		
		Текст = Текст + ОбщегоНазначенияБПСервер.ТекстРазделителяЗапросовПакета();
		
		Текст = Текст + 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ХозрасчетныйДвиженияССубконто.НомерСтроки) КАК НомерСтроки,
		|	ВременнаяТаблицаОстатки.СуммаОстаток КАК СуммаОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
		|			,
		|			,
		|			Регистратор = &Регистратор
		|				И (СчетКт, СубконтоКт1, СубконтоКт2, СубконтоКт3) В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаОстатки.СчетУчета КАК СчетУчета,
		|						ВременнаяТаблицаОстатки.Номенклатура КАК Номенклатура,
		|						ВременнаяТаблицаОстатки.Склад КАК Склад,
		|						ВременнаяТаблицаОстатки.Партия КАК Партия
		|					ИЗ
		|						ВременнаяТаблицаОстатки КАК ВременнаяТаблицаОстатки),
		|			,
		|			) КАК ХозрасчетныйДвиженияССубконто
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОстатки КАК ВременнаяТаблицаОстатки
		|		ПО ХозрасчетныйДвиженияССубконто.СчетКт = ВременнаяТаблицаОстатки.СчетУчета
		|			И ХозрасчетныйДвиженияССубконто.СубконтоКт1 = ВременнаяТаблицаОстатки.Номенклатура
		|			И ХозрасчетныйДвиженияССубконто.СубконтоКт2 = ВременнаяТаблицаОстатки.Склад
		|			И ХозрасчетныйДвиженияССубконто.СубконтоКт3 = ВременнаяТаблицаОстатки.Партия
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаОстатки.СуммаОстаток";
	Иначе 
		Текст = Текст + 
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК СчетУчета,
		|	ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,
		|	ХозрасчетныйОстатки.Субконто2 КАК Склад,
		|	НЕОПРЕДЕЛЕНО КАК Партия,
		|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток
		|ПОМЕСТИТЬ ВременнаяТаблицаОстатки
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&КонецПериода,
		|			Счет В (&СчетаУчетаНС),
		|			&ВидыСубконтоНС,
		|			Организация = &Организация
		|				И Субконто1 В (&МассивПродукции)) КАК ХозрасчетныйОстатки
		|ГДЕ
		|	ХозрасчетныйОстатки.КоличествоОстаток = 0
		|	И НЕ ХозрасчетныйОстатки.СуммаОстаток = 0";
		Текст = Текст + ОбщегоНазначенияБПСервер.ТекстРазделителяЗапросовПакета();
		
		Текст = Текст + 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ХозрасчетныйДвиженияССубконто.НомерСтроки) КАК НомерСтроки,
		|	ВременнаяТаблицаОстатки.СуммаОстаток КАК СуммаОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
		|			,
		|			,
		|			Регистратор = &Регистратор
		|				И (СчетКт, СубконтоКт1, СубконтоКт2) В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаОстатки.СчетУчета КАК СчетУчета,
		|						ВременнаяТаблицаОстатки.Номенклатура КАК Номенклатура,
		|						ВременнаяТаблицаОстатки.Склад КАК Склад
		|					ИЗ
		|						ВременнаяТаблицаОстатки КАК ВременнаяТаблицаОстатки),
		|			,
		|			) КАК ХозрасчетныйДвиженияССубконто
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОстатки КАК ВременнаяТаблицаОстатки
		|		ПО ХозрасчетныйДвиженияССубконто.СчетКт = ВременнаяТаблицаОстатки.СчетУчета
		|			И ХозрасчетныйДвиженияССубконто.СубконтоКт1 = ВременнаяТаблицаОстатки.Номенклатура
		|			И ХозрасчетныйДвиженияССубконто.СубконтоКт2 = ВременнаяТаблицаОстатки.Склад
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаОстатки.СуммаОстаток";
	КонецЕсли;	
	Запрос = Новый Запрос;
	Запрос.Текст = Текст;
	
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецМесяца(Реквизиты.Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Регистратор", Реквизиты.Регистратор);
	Запрос.УстановитьПараметр("СчетаУчетаНС", СчетаУчетаНС);
	Запрос.УстановитьПараметр("СчетаУчетаНПС", СчетаУчетаНПС);
	Запрос.УстановитьПараметр("ВидыСубконтоНС", ВидыСубконтоНС);
	Запрос.УстановитьПараметр("ВидыСубконтоНПС", ВидыСубконтоНПС);
	
	МассивПродукции = РазличныеЗначенияКолонкиТаблицы(ТаблицаПродукция, "Продукция");
	Запрос.УстановитьПараметр("МассивПродукции", МассивПродукции);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда 
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
		// Если проводки сделал текущий документ,
		// то остаток отнесем на pавершающую проводку списания со счета.
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Проводка = Движения.Хозрасчетный[ВыборкаДетальныеЗаписи.НомерСтроки - 1];
			Проводка.Сумма = Проводка.Сумма + ВыборкаДетальныеЗаписи.СуммаОстаток;
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры

Процедура КорректировкаСебестоимостиПродукцииПерепроведение(ТаблицаРеквизиты, Движения, Ошибки, СуммаКорректировкиИтого) Экспорт

	Параметры = ПодготовитьПараметрыКорректировкаСтоимостиВыпущеннойПродукции(ТаблицаРеквизиты);

	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.Хозрасчетный.Записывать = Истина;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	СпособОценкиТМЗ = БухгалтерскийУчетСервер.СпособОценкиТМЗ(Реквизиты.Период, Реквизиты.Организация);
	ВедетсяУчетПоПартиям = СпособОценкиТМЗ <> Перечисления.СпособыОценки.ПоСредней;
	
	// Определение порядка корректировки выпуска готовой продукции по номенклатурным группам
	
	// Выпуст продукции.
	// Получение всего выпуска продукции.
	// Далее эта таблица будет использоваться в цикле для выборки с отбором по продукции в зависимости от порядка корректировки.
	
	Если Реквизиты.БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ПлановаяСебестоимость Тогда
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	ВыпускПродукцииУслугОбороты.ПериодСекунда КАК ПериодСекунда,
			|	ВыпускПродукцииУслугОбороты.Продукция КАК Продукция,
			|	ВыпускПродукцииУслугОбороты.СчетЗатрат КАК СчетЗатрат,
			|	ВыпускПродукцииУслугОбороты.Подразделение КАК Подразделение,
			|	ВыпускПродукцииУслугОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
			|	ВыпускПродукцииУслугОбороты.НоменклатурнаяГруппа.ПорядокРаспределения КАК ПорядокРаспределения,
			|	ВыпускПродукцииУслугОбороты.Спецификация КАК Спецификация,
			|	ВыпускПродукцииУслугОбороты.СчетСписания КАК СчетСписания,
			|	ВыпускПродукцииУслугОбороты.СубконтоСписания1 КАК Номенклатура,
			|	ВыпускПродукцииУслугОбороты.СубконтоСписания2 КАК Склад,
			|	ВыпускПродукцииУслугОбороты.СубконтоСписания3 КАК Партия,
			|	ВыпускПродукцииУслугОбороты.ПлановаяСтоимостьОборот КАК ПлановаяСтоимостьОборот,
			|	0 КАК ФактическаяСтоимостьОборот,
			|	ВыпускПродукцииУслугОбороты.КоличествоОборот КАК КоличествоОборот
			|ПОМЕСТИТЬ ВременнаяТаблицаВесьВыпускПродукции
			|ИЗ
			|	РегистрНакопления.ВыпускПродукцииУслуг.Обороты(&НачалоПериода, &КонецПериода, Авто, Организация = &Организация) КАК ВыпускПродукцииУслугОбороты
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Продукция,
			|	СчетЗатрат,
			|	Подразделение,
			|	НоменклатурнаяГруппа,
			|	ПериодСекунда";
	Иначе
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	ВыпускПродукцииУслугОбороты.ПериодСекунда КАК ПериодСекунда,
			|	ВыпускПродукцииУслугОбороты.Продукция КАК Продукция,
			|	ВыпускПродукцииУслугОбороты.СчетЗатрат КАК СчетЗатрат,
			|	ВыпускПродукцииУслугОбороты.Подразделение КАК Подразделение,
			|	ВыпускПродукцииУслугОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
			|	ВыпускПродукцииУслугОбороты.НоменклатурнаяГруппа.ПорядокРаспределения КАК ПорядокРаспределения,
			|	ВыпускПродукцииУслугОбороты.Спецификация КАК Спецификация,
			|	ВыпускПродукцииУслугОбороты.СчетСписания КАК СчетСписания,
			|	ВыпускПродукцииУслугОбороты.СубконтоСписания1 КАК Номенклатура,
			|	ВыпускПродукцииУслугОбороты.СубконтоСписания2 КАК Склад,
			|	ВыпускПродукцииУслугОбороты.СубконтоСписания3 КАК Партия,
			|	ВыпускПродукцииУслугОбороты.ПлановаяСтоимостьОборот КАК ПлановаяСтоимостьОборот,
			|	ЕСТЬNULL(ХозрасчетныйОборотыДтКт.СуммаОборот, 0) КАК ФактическаяСтоимостьОборот,
			|	ВыпускПродукцииУслугОбороты.КоличествоОборот КАК КоличествоОборот
			|ПОМЕСТИТЬ ВременнаяТаблицаВесьВыпускПродукции
			|ИЗ
			|	РегистрНакопления.ВыпускПродукцииУслуг.Обороты(&НачалоПериода, &КонецПериода, Авто, Организация = &Организация) КАК ВыпускПродукцииУслугОбороты
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериода, &КонецПериода, Авто, СчетДт В ИЕРАРХИИ (&СчетаПрямыхРасходов), &ВидыСубконтоПрямыхРасходов, , , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
			|		ПО ВыпускПродукцииУслугОбороты.Регистратор = ХозрасчетныйОборотыДтКт.Регистратор
			|			И ВыпускПродукцииУслугОбороты.НоменклатурнаяГруппа = ХозрасчетныйОборотыДтКт.СубконтоДт2
			|			И ВыпускПродукцииУслугОбороты.Подразделение = ХозрасчетныйОборотыДтКт.СубконтоДт1
			|ГДЕ
			|	ВыпускПродукцииУслугОбороты.Регистратор <> &ССЫЛКА";	
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПСервер.ТекстРазделителяЗапросовПакета();

	// Незавершенное производство.
	ТекстЗапросаФрагмент =	
		"ВЫБРАТЬ
		|	НезавершенноеПроизводствоОбороты.СчетЗатрат КАК СчетЗатрат,
		|	НезавершенноеПроизводствоОбороты.Подразделение КАК Подразделение,
		|	НезавершенноеПроизводствоОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	НезавершенноеПроизводствоОбороты.СуммаОборот КАК СуммаНЗП
		|ПОМЕСТИТЬ ВременнаяТаблицаНезавершенноеПроизводство
		|ИЗ
		|	РегистрНакопления.НезавершенноеПроизводство.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация) КАК НезавершенноеПроизводствоОбороты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетЗатрат,
		|	Подразделение,
		|	НоменклатурнаяГруппа";
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаФрагмент + ОбщегоНазначенияБПСервер.ТекстРазделителяЗапросовПакета();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Реквизиты.Период));
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецМесяца(Реквизиты.Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонецПериодаИсключая", Новый Граница(Реквизиты.Регистратор.МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Ссылка", Реквизиты.Регистратор);
	                                              
	Запрос.УстановитьПараметр("СчетаПрямыхРасходов", ПредопределенныеСчетаПрямыхРасходов()); // Счета 1630, 1633.
	
	ВидыСубконтоПрямыхРасходов = Новый Массив;
	ВидыСубконтоПрямыхРасходов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения);
	ВидыСубконтоПрямыхРасходов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	Запрос.УстановитьПараметр("ВидыСубконтоПрямыхРасходов", ВидыСубконтоПрямыхРасходов);
	
	Запрос.Выполнить();
	
	// Обход по порядку распределения.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВременнаяТаблицаВесьВыпускПродукции.Продукция КАК Продукция,
		|	ВременнаяТаблицаВесьВыпускПродукции.ПорядокРаспределения КАК ПорядокРаспределения
		|ИЗ
		|	ВременнаяТаблицаВесьВыпускПродукции КАК ВременнаяТаблицаВесьВыпускПродукции
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВременнаяТаблицаВесьВыпускПродукции.ПорядокРаспределения
		|ИТОГИ ПО
		|	ПорядокРаспределения";
	РезультатЗапроса = Запрос.Выполнить();
	
	// Корректировка себестоимости продукции.
	// По этапам.
	// Первыми корректируются суммы полуфабрикатов самого нижнего уровня,
	// далее полуфабрикатов уровня ближе к готовой продукции и т.д. до готовой продукции.
	ВыборкаПорядок = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПорядок.Следующий() Цикл
		
		// Массив для отбора по продукции на текущем шаге.
		МассивПродукцииПорядок = Новый Массив;
		
		ВыборкаДетальныеЗаписи = ВыборкаПорядок.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			МассивПродукцииПорядок.Добавить(ВыборкаДетальныеЗаписи.Продукция);
		КонецЦикла;
		
		Если МассивПродукцииПорядок.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;	
		
		// Таблица выпустка с отбором по продукции.
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	ВременнаяТаблицаВесьВыпускПродукции.Продукция КАК Продукция,
			|	ВременнаяТаблицаВесьВыпускПродукции.СчетЗатрат КАК СчетЗатрат,
			|	ВременнаяТаблицаВесьВыпускПродукции.Подразделение КАК Подразделение,
			|	ВременнаяТаблицаВесьВыпускПродукции.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
			|	ВременнаяТаблицаВесьВыпускПродукции.Спецификация КАК Спецификация,
			|	ВременнаяТаблицаВесьВыпускПродукции.СчетСписания КАК СчетСписания,
			|	ВременнаяТаблицаВесьВыпускПродукции.Номенклатура КАК Номенклатура,
			|	ВременнаяТаблицаВесьВыпускПродукции.Склад КАК Склад,
			|	ВременнаяТаблицаВесьВыпускПродукции.Партия КАК Партия,
			|	СУММА(ВременнаяТаблицаВесьВыпускПродукции.ПлановаяСтоимостьОборот) КАК ПлановаяСтоимостьОборот,
			|	СУММА(ВременнаяТаблицаВесьВыпускПродукции.КоличествоОборот) КАК КоличествоОборот
			|ПОМЕСТИТЬ ВременнаяТаблицаВыпускМассивПродукции
			|ИЗ
			|	ВременнаяТаблицаВесьВыпускПродукции КАК ВременнаяТаблицаВесьВыпускПродукции
			|ГДЕ
			|	ВременнаяТаблицаВесьВыпускПродукции.Продукция В(&МассивПродукции)
			|
			|СГРУППИРОВАТЬ ПО
			|	ВременнаяТаблицаВесьВыпускПродукции.Продукция,
			|	ВременнаяТаблицаВесьВыпускПродукции.СчетЗатрат,
			|	ВременнаяТаблицаВесьВыпускПродукции.Подразделение,
			|	ВременнаяТаблицаВесьВыпускПродукции.НоменклатурнаяГруппа,
			|	ВременнаяТаблицаВесьВыпускПродукции.Спецификация,
			|	ВременнаяТаблицаВесьВыпускПродукции.СчетСписания,
			|	ВременнаяТаблицаВесьВыпускПродукции.Номенклатура,
			|	ВременнаяТаблицаВесьВыпускПродукции.Склад,
			|	ВременнаяТаблицаВесьВыпускПродукции.Партия
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	СчетЗатрат,
			|	Подразделение,
			|	НоменклатурнаяГруппа";
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПСервер.ТекстРазделителяЗапросовПакета();
		
		// Сумма затрат.
		// Выборка остатков по счетам прямых расходов.
		// Выборка оборотов Дт по счетам прямых расходов.
		// За минусом незавершенного производства.
		ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ
			|	ХозрасчетныйОстатки.Счет КАК СчетЗатрат,
			|	ХозрасчетныйОстатки.Субконто1 КАК Подразделение,
			|	ХозрасчетныйОстатки.Субконто2 КАК НоменклатурнаяГруппа,
			|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаЗатрат
			|ПОМЕСТИТЬ ВременнаяТаблицаЗатратыПромежуточная
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|			&НачалоПериода,
			|			Счет В ИЕРАРХИИ (&СчетаПрямыхРасходов),
			|			&ВидыСубконтоПрямыхРасходов,
			|			Организация = &Организация
			|				И (Субконто1, Субконто2) В
			|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|						ВременнаяТаблицаВыпускМассивПродукции.Подразделение,
			|						ВременнаяТаблицаВыпускМассивПродукции.НоменклатурнаяГруппа
			|					ИЗ
			|						ВременнаяТаблицаВыпускМассивПродукции КАК ВременнаяТаблицаВыпускМассивПродукции)) КАК ХозрасчетныйОстатки
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ХозрасчетныйОборотыДтКт.СчетДт,
			|	ХозрасчетныйОборотыДтКт.СубконтоДт1,
			|	ХозрасчетныйОборотыДтКт.СубконтоДт2,
			|	ХозрасчетныйОборотыДтКт.СуммаОборот
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
			|			&НачалоПериода,
			|			&КонецПериода,
			|			,
			|			СчетДт В ИЕРАРХИИ (&СчетаПрямыхРасходов),
			|			&ВидыСубконтоПрямыхРасходов,
			|			,
			|			,
			|			Организация = &Организация
			|				И (СубконтоДт1, СубконтоДт2) В
			|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|						ВременнаяТаблицаВыпускМассивПродукции.Подразделение,
			|						ВременнаяТаблицаВыпускМассивПродукции.НоменклатурнаяГруппа
			|					ИЗ
			|						ВременнаяТаблицаВыпускМассивПродукции КАК ВременнаяТаблицаВыпускМассивПродукции)) КАК ХозрасчетныйОборотыДтКт
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВременнаяТаблицаНезавершенноеПроизводство.СчетЗатрат,
			|	ВременнаяТаблицаНезавершенноеПроизводство.Подразделение,
			|	ВременнаяТаблицаНезавершенноеПроизводство.НоменклатурнаяГруппа,
			|	-ВременнаяТаблицаНезавершенноеПроизводство.СуммаНЗП
			|ИЗ
			|	ВременнаяТаблицаНезавершенноеПроизводство КАК ВременнаяТаблицаНезавершенноеПроизводство
			|ГДЕ
			|	(ВременнаяТаблицаНезавершенноеПроизводство.СчетЗатрат, ВременнаяТаблицаНезавершенноеПроизводство.Подразделение, ВременнаяТаблицаНезавершенноеПроизводство.НоменклатурнаяГруппа) В
			|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|				ВременнаяТаблицаВыпускМассивПродукции.СчетЗатрат,
			|				ВременнаяТаблицаВыпускМассивПродукции.Подразделение,
			|				ВременнаяТаблицаВыпускМассивПродукции.НоменклатурнаяГруппа
			|			ИЗ
			|				ВременнаяТаблицаВыпускМассивПродукции КАК ВременнаяТаблицаВыпускМассивПродукции)";
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПСервер.ТекстРазделителяЗапросовПакета();

		// Сумма затрат (группировка).
		ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ
			|	ВременнаяТаблицаЗатратыПромежуточная.СчетЗатрат КАК СчетЗатрат,
			|	ВременнаяТаблицаЗатратыПромежуточная.Подразделение КАК Подразделение,
			|	ВременнаяТаблицаЗатратыПромежуточная.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
			|	СУММА(ВременнаяТаблицаЗатратыПромежуточная.СуммаЗатрат) КАК СуммаЗатрат
			|ПОМЕСТИТЬ ВременнаяТаблицаЗатраты
			|ИЗ
			|	ВременнаяТаблицаЗатратыПромежуточная КАК ВременнаяТаблицаЗатратыПромежуточная
			|
			|СГРУППИРОВАТЬ ПО
			|	ВременнаяТаблицаЗатратыПромежуточная.СчетЗатрат,
			|	ВременнаяТаблицаЗатратыПромежуточная.Подразделение,
			|	ВременнаяТаблицаЗатратыПромежуточная.НоменклатурнаяГруппа
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВременнаяТаблицаЗатратыПромежуточная";
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПСервер.ТекстРазделителяЗапросовПакета();
		
		// Определение стратегии распределения.
		Если Реквизиты.БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ПлановаяСебестоимость Тогда
			
			// Данные для корректировки себестоимости.
			// Устанавливается связь по Счету затрат, Подразделению, Номенклатурной группе.
			// Определяется показатель рапределения и сумма, подлежащая распределению.
			ТекстЗапроса = ТекстЗапроса +
				"ВЫБРАТЬ
				|	ВременнаяТаблицаВыпускМассивПродукции.СчетЗатрат КАК СчетЗатрат,
				|	ВременнаяТаблицаВыпускМассивПродукции.Подразделение КАК Подразделение,
				|	ВременнаяТаблицаВыпускМассивПродукции.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
				|	ВременнаяТаблицаВыпускМассивПродукции.Продукция КАК Продукция,
				|	ВременнаяТаблицаВыпускМассивПродукции.СчетСписания КАК СчетУчета,
				|	ВременнаяТаблицаВыпускМассивПродукции.Номенклатура КАК Номенклатура,
				|	ВременнаяТаблицаВыпускМассивПродукции.Склад КАК Склад,
				|	ВременнаяТаблицаВыпускМассивПродукции.Партия КАК Партия,
				|	ВременнаяТаблицаВыпускМассивПродукции.ПлановаяСтоимостьОборот КАК ПлановаяСтоимостьОборот,
				|	ВременнаяТаблицаВыпускМассивПродукции.ПлановаяСтоимостьОборот КАК ПоказательРаспределения,
				|	ВременнаяТаблицаЗатраты.СуммаЗатрат КАК СуммаЗатрат
				|ИЗ
				|	ВременнаяТаблицаЗатраты КАК ВременнаяТаблицаЗатраты
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаВыпускМассивПродукции КАК ВременнаяТаблицаВыпускМассивПродукции
				|		ПО ВременнаяТаблицаЗатраты.СчетЗатрат = ВременнаяТаблицаВыпускМассивПродукции.СчетЗатрат
				|			И ВременнаяТаблицаЗатраты.Подразделение = ВременнаяТаблицаВыпускМассивПродукции.Подразделение
				|			И ВременнаяТаблицаЗатраты.НоменклатурнаяГруппа = ВременнаяТаблицаВыпускМассивПродукции.НоменклатурнаяГруппа
				|ИТОГИ
				|	МАКСИМУМ(СуммаЗатрат)
				|ПО
				|	СчетЗатрат,
				|	Подразделение,
				|	НоменклатурнаяГруппа";
			ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПСервер.ТекстРазделителяЗапросовПакета();

		ИначеЕсли Реквизиты.БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.МатериальныеЗатраты Тогда 
			
			// Получение нормы расхода из спецификации для определения показателя расхода.
			ТекстЗапроса = ТекстЗапроса + 
				"ВЫБРАТЬ
				|	ВременнаяТаблицаВыпускМассивПродукции.СчетЗатрат КАК СчетЗатрат,
				|	ВременнаяТаблицаВыпускМассивПродукции.Подразделение КАК Подразделение,
				|	ВременнаяТаблицаВыпускМассивПродукции.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
				|	ВременнаяТаблицаВыпускМассивПродукции.Продукция КАК Продукция,
				|	ВременнаяТаблицаВыпускМассивПродукции.СчетСписания КАК СчетУчета,
				|	ВременнаяТаблицаВыпускМассивПродукции.Спецификация КАК Спецификация,
				|	ВременнаяТаблицаВыпускМассивПродукции.Номенклатура КАК Номенклатура,
				|	ВременнаяТаблицаВыпускМассивПродукции.Склад КАК Склад,
				|	ВременнаяТаблицаВыпускМассивПродукции.Партия КАК Партия,
				|	ВременнаяТаблицаВыпускМассивПродукции.ПлановаяСтоимостьОборот КАК ПлановаяСтоимостьОборот,
				|	СпецификацииНоменклатурыИсходныеКомплектующие.Номенклатура КАК НоменклатураСписания,
				|	ЕСТЬNULL(СпецификацииНоменклатурыИсходныеКомплектующие.Количество / СпецификацииНоменклатурыИсходныеКомплектующие.Ссылка.Количество * ВременнаяТаблицаВыпускМассивПродукции.КоличествоОборот, 0) КАК НормаРасхода
				|ПОМЕСТИТЬ ВременнаяТаблицаСпецификация
				|ИЗ
				|	ВременнаяТаблицаВыпускМассивПродукции КАК ВременнаяТаблицаВыпускМассивПродукции
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпецификацииНоменклатуры.ИсходныеКомплектующие КАК СпецификацииНоменклатурыИсходныеКомплектующие
				|		ПО ВременнаяТаблицаВыпускМассивПродукции.Спецификация = СпецификацииНоменклатурыИсходныеКомплектующие.Ссылка";
			ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПСервер.ТекстРазделителяЗапросовПакета();
			
			// Данные для корректировки себестоимости.
			// Устанавливается связь по Счету затрат, Подразделению, Номенклатурной группе.
			// Определяется показатель рапределения и сумма, подлежащая распределению.
			ТекстЗапроса = ТекстЗапроса + 
				"ВЫБРАТЬ
				|	ВременнаяТаблицаСпецификация.СчетЗатрат КАК СчетЗатрат,
				|	ВременнаяТаблицаСпецификация.Подразделение КАК Подразделение,
				|	ВременнаяТаблицаСпецификация.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
				|	ВременнаяТаблицаСпецификация.Продукция КАК Продукция,
				|	ВременнаяТаблицаСпецификация.СчетУчета КАК СчетУчета,
				|	ВременнаяТаблицаСпецификация.Номенклатура КАК Номенклатура,
				|	ВременнаяТаблицаСпецификация.Склад КАК Склад,
				|	ВременнаяТаблицаСпецификация.Партия КАК Партия,
				|	МАКСИМУМ(ВременнаяТаблицаСпецификация.ПлановаяСтоимостьОборот) КАК ПлановаяСтоимостьОборот,
				|	СУММА(ВременнаяТаблицаСпецификация.НормаРасхода * ВЫБОР
				|			КОГДА ЕСТЬNULL(ХозрасчетныйОбороты.КоличествоОборотКт, 0) = 0
				|				ТОГДА 0
				|			ИНАЧЕ ХозрасчетныйОбороты.СуммаОборотКт / ХозрасчетныйОбороты.КоличествоОборотКт
				|		КОНЕЦ) КАК ПоказательРаспределения,
				|	МАКСИМУМ(ВременнаяТаблицаЗатраты.СуммаЗатрат) КАК СуммаЗатрат
				|ИЗ
				|	ВременнаяТаблицаСпецификация КАК ВременнаяТаблицаСпецификация
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Обороты(
				|				&НачалоПериода,
				|				&КонецПериода,
				|				,
				|				,
				|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура),
				|				Организация = &Организация
				|					И Субконто1 В
				|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
				|							ВременнаяТаблицаСпецификация.НоменклатураСписания
				|						ИЗ
				|							ВременнаяТаблицаСпецификация КАК ВременнаяТаблицаСпецификация)
				|					И (КорСубконто1, КорСубконто2) В
				|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
				|							ВременнаяТаблицаСпецификация.Подразделение,
				|							ВременнаяТаблицаСпецификация.НоменклатурнаяГруппа
				|						ИЗ
				|							ВременнаяТаблицаСпецификация КАК ВременнаяТаблицаСпецификация),
				|				КорСчет В (&СчетаПрямыхРасходов),
				|				&ВидыСубконтоПрямыхРасходов) КАК ХозрасчетныйОбороты
				|		ПО ВременнаяТаблицаСпецификация.СчетЗатрат = ХозрасчетныйОбороты.КорСчет
				|			И ВременнаяТаблицаСпецификация.Подразделение = ХозрасчетныйОбороты.КорСубконто1
				|			И ВременнаяТаблицаСпецификация.НоменклатурнаяГруппа = ХозрасчетныйОбороты.КорСубконто2
				|			И ВременнаяТаблицаСпецификация.НоменклатураСписания = ХозрасчетныйОбороты.Субконто1
				|			И (ХозрасчетныйОбороты.КоличествоОборотКт > 0)
				|			И (НЕ ХозрасчетныйОбороты.СуммаОборотКт = 0)
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаЗатраты КАК ВременнаяТаблицаЗатраты
				|		ПО ВременнаяТаблицаСпецификация.СчетЗатрат = ВременнаяТаблицаЗатраты.СчетЗатрат
				|			И ВременнаяТаблицаСпецификация.Подразделение = ВременнаяТаблицаЗатраты.Подразделение
				|			И ВременнаяТаблицаСпецификация.НоменклатурнаяГруппа = ВременнаяТаблицаЗатраты.НоменклатурнаяГруппа
				|
				|СГРУППИРОВАТЬ ПО
				|	ВременнаяТаблицаСпецификация.СчетЗатрат,
				|	ВременнаяТаблицаСпецификация.Подразделение,
				|	ВременнаяТаблицаСпецификация.НоменклатурнаяГруппа,
				|	ВременнаяТаблицаСпецификация.СчетУчета,
				|	ВременнаяТаблицаСпецификация.Номенклатура,
				|	ВременнаяТаблицаСпецификация.Склад,
				|	ВременнаяТаблицаСпецификация.Партия,
				|	ВременнаяТаблицаСпецификация.Продукция
				|ИТОГИ
				|	МАКСИМУМ(СуммаЗатрат)
				|ПО
				|	СчетЗатрат,
				|	Подразделение,
				|	НоменклатурнаяГруппа
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ВременнаяТаблицаСпецификация";
			ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПСервер.ТекстРазделителяЗапросовПакета();
		КонецЕсли;		
		
		// Уничтожение временных таблиц для следующего шага цикла.
		ТекстЗапроса = ТекстЗапроса +
			"УНИЧТОЖИТЬ ВременнаяТаблицаВыпускМассивПродукции;
			|УНИЧТОЖИТЬ ВременнаяТаблицаЗатраты";
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПСервер.ТекстРазделителяЗапросовПакета();

		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = ТекстЗапроса;

		Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Реквизиты.Период));
		Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецМесяца(Реквизиты.Период), ВидГраницы.Включая)); // С учетом движений этого документа.
		Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
		Запрос.УстановитьПараметр("МассивПродукции", МассивПродукцииПорядок);
		
		Запрос.УстановитьПараметр("СчетаПрямыхРасходов", ПредопределенныеСчетаПрямыхРасходов()); // Счета 1630, 1633.
		
		ВидыСубконтоПрямыхРасходов = Новый Массив;
		ВидыСубконтоПрямыхРасходов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения);
		ВидыСубконтоПрямыхРасходов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
		Запрос.УстановитьПараметр("ВидыСубконтоПрямыхРасходов", ВидыСубконтоПрямыхРасходов);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ДатаПервогоВыпуска = КонецМесяца(Реквизиты.Период);
		
		ВыборкаСчетЗатрат = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСчетЗатрат.Следующий() Цикл
			
			ВыборкаПодразделение = ВыборкаСчетЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПодразделение.Следующий() Цикл
				
				ВыборкаНоменклатурнаяГруппа = ВыборкаПодразделение.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаНоменклатурнаяГруппа.Следующий() Цикл
					// Распределение суммы затрат.
					СуммаЗатрат = ВыборкаНоменклатурнаяГруппа.СуммаЗатрат;
					Если СуммаЗатрат = 0 Тогда 
						Продолжить;
					КонецЕсли;	
					
					МассивКоэффициентов = Новый Массив;	
					ВыборкаДетальныеЗаписи = ВыборкаНоменклатурнаяГруппа.Выбрать();
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						Если ВыборкаДетальныеЗаписи.ПоказательРаспределения = 0 Тогда 
							ТекстСообщения = СтрШаблон(НСтр("ru = 'Корректировка себестоимости продукции. Показатель распределения равен нулю.
											|База распределения: %1; Подразделение: %2; Номенклатурная группа: %3'"),
											Реквизиты.БазаРаспределения, ВыборкаНоменклатурнаяГруппа.Подразделение, ВыборкаНоменклатурнаяГруппа.НоменклатурнаяГруппа);
							ВызватьИсключение ТекстСообщения;
						КонецЕсли;	
						
						МассивКоэффициентов.Добавить(ВыборкаДетальныеЗаписи.ПоказательРаспределения);
					КонецЦикла;				
					
					МассивСуммКорректировки = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(СуммаЗатрат, МассивКоэффициентов);
					Если МассивСуммКорректировки = Неопределено Тогда
						ТекстСообщения = СтрШаблон(НСтр("ru = 'Корректировка себестоимости продукции. Не удалось распределить сумму корректировки.
										|База распределения: %1; Подразделение: %2; Номенклатурная группа: %3'"),
										Реквизиты.БазаРаспределения, ВыборкаНоменклатурнаяГруппа.Подразделение, ВыборкаНоменклатурнаяГруппа.НоменклатурнаяГруппа);
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстСообщения, Неопределено);                              		
						Продолжить;
					КонецЕсли;	

					ИндексВМассиве = 0;

					ВыборкаДетальныеЗаписи.Сбросить();
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						
						// Расчет суммы корректировки.
						СуммаФактическихЗатрат = МассивСуммКорректировки[ИндексВМассиве];
						СуммаКорректировки = СуммаФактическихЗатрат - ВыборкаДетальныеЗаписи.ПлановаяСтоимостьОборот;
						ИндексВМассиве = ИндексВМассиве + 1;
						
						Если СуммаКорректировки = 0 Тогда 
							Продолжить;
						КонецЕсли;	
						
						// Распределение суммы корректировки по выпускам.
						Запрос = Новый Запрос;
						Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
						Запрос.Текст = 
							"ВЫБРАТЬ
							|	ВременнаяТаблицаВесьВыпускПродукции.ПериодСекунда КАК ПериодСекунда,
							|	ВременнаяТаблицаВесьВыпускПродукции.СчетЗатрат КАК СчетЗатрат,
							|	ВременнаяТаблицаВесьВыпускПродукции.Подразделение КАК Подразделение,
							|	ВременнаяТаблицаВесьВыпускПродукции.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
							|	ВЫБОР
							|		КОГДА &БазаРаспределения = Значение(Перечисление.БазыРаспределенияКосвенныхРасходов.МатериальныеЗатраты)
							|			ТОГДА ВременнаяТаблицаВесьВыпускПродукции.ФактическаяСтоимостьОборот
							|		ИНАЧЕ ВременнаяТаблицаВесьВыпускПродукции.ПлановаяСтоимостьОборот
							|	КОНЕЦ КАК ПоказательРаспределения
							|ИЗ
							|	ВременнаяТаблицаВесьВыпускПродукции КАК ВременнаяТаблицаВесьВыпускПродукции
							|ГДЕ
							|	ВременнаяТаблицаВесьВыпускПродукции.СчетЗатрат = &СчетЗатрат
							|	И ВременнаяТаблицаВесьВыпускПродукции.Подразделение = &Подразделение
							|	И ВременнаяТаблицаВесьВыпускПродукции.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
							|	И ВременнаяТаблицаВесьВыпускПродукции.Продукция = &Продукция
							|
							|УПОРЯДОЧИТЬ ПО
							|	ПериодСекунда";
						Запрос.УстановитьПараметр("СчетЗатрат", ВыборкаДетальныеЗаписи.СчетЗатрат);
						Запрос.УстановитьПараметр("Подразделение", ВыборкаДетальныеЗаписи.Подразделение);
						Запрос.УстановитьПараметр("НоменклатурнаяГруппа", ВыборкаДетальныеЗаписи.НоменклатурнаяГруппа);
						Запрос.УстановитьПараметр("Продукция", ВыборкаДетальныеЗаписи.Продукция);
						Запрос.УстановитьПараметр("БазаРаспределения", Реквизиты.БазаРаспределения);
						  
						РезультатЗапроса = Запрос.Выполнить();
						
						МассивКоэффициентов = Новый Массив;	
						
						ВыборкаДетальныеЗаписиВыпуск = РезультатЗапроса.Выбрать();
						Пока ВыборкаДетальныеЗаписиВыпуск.Следующий() Цикл
							Если ВыборкаДетальныеЗаписиВыпуск.ПоказательРаспределения = 0 Тогда 
								ТекстСообщения = СтрШаблон(НСтр("ru = 'Корректировка себестоимости продукции. Показатель распределения по выпускам равен нулю.
												|База распределения: %1; Подразделение: %2; Номенклатурная группа: %3'"),
												Реквизиты.БазаРаспределения, ВыборкаНоменклатурнаяГруппа.Подразделение, ВыборкаНоменклатурнаяГруппа.НоменклатурнаяГруппа);
								ВызватьИсключение ТекстСообщения;
							КонецЕсли;	
							
							МассивКоэффициентов.Добавить(ВыборкаДетальныеЗаписиВыпуск.ПоказательРаспределения);
						КонецЦикла;				
						
						МассивСуммКорректировкиПоВыпускам = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(СуммаКорректировки, МассивКоэффициентов);
						Если МассивСуммКорректировкиПоВыпускам = Неопределено Тогда
							ТекстСообщения = СтрШаблон(НСтр("ru = 'Корректировка себестоимости продукции. Не удалось распределить сумму корректировки по выпускам.
											|База распределения: %1; Подразделение: %2; Номенклатурная группа: %3'"),
											Реквизиты.БазаРаспределения, ВыборкаНоменклатурнаяГруппа.Подразделение, ВыборкаНоменклатурнаяГруппа.НоменклатурнаяГруппа);
							ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстСообщения, Неопределено);                              		
							Продолжить;
						КонецЕсли;	
						
						ИндексВМассивеВыпуска = 0;
						
						ВыборкаДетальныеЗаписиВыпуск.Сбросить();
						Пока ВыборкаДетальныеЗаписиВыпуск.Следующий() Цикл
							
							СуммаКорректировкиВыпуска = МассивСуммКорректировкиПоВыпускам[ИндексВМассивеВыпуска];
							ИндексВМассивеВыпуска = ИндексВМассивеВыпуска + 1;
							
							Если СуммаКорректировкиВыпуска = 0 Тогда 
								Продолжить;
							КонецЕсли;	
							
							Проводка = Движения.Хозрасчетный.Добавить();
							// Период устанавливается как Дата документа выпуска.
							Проводка.Период = ВыборкаДетальныеЗаписиВыпуск.ПериодСекунда;
							Проводка.Организация = Реквизиты.Организация;
							Проводка.Содержание = НСтр("ru = 'Корректировка себестоимости продукции'");

							Проводка.СчетДт = ВыборкаДетальныеЗаписи.СчетУчета;
							БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", ВыборкаДетальныеЗаписи.Номенклатура);
							БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", ВыборкаДетальныеЗаписи.Склад);
							Если ВедетсяУчетПоПартиям Тогда
								БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", ВыборкаДетальныеЗаписи.Партия);
							КонецЕсли;
						
							Проводка.СчетКт = ВыборкаДетальныеЗаписи.СчетЗатрат;
							БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", ВыборкаДетальныеЗаписи.НоменклатурнаяГруппа);
							БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", ВыборкаДетальныеЗаписи.Подразделение);

							Проводка.Сумма = СуммаКорректировкиВыпуска;
							
							// Сумма для отображения в форме Закрытия месяца.
							СуммаКорректировкиИтого = СуммаКорректировкиИтого + СуммаКорректировкиВыпуска;
							
							// Период первого выпуска.
							ДатаПервогоВыпуска = Мин(ДатаПервогоВыпуска, ВыборкаДетальныеЗаписиВыпуск.ПериодСекунда); 
						КонецЦикла;	
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		// Предварительная запись движений,
		// так как полуфабрикаты влияют на себестоимость готовой продукции.
		Движения.Хозрасчетный.Записать(Ложь);
		
		// Перепроведение всех движений по Номенклатуре выпуска.
		// Выбирается только выбытие по всем счетам.
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
			|	ХозрасчетныйОбороты.ПериодСекунда КАК ПериодСекунда
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Авто, , ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура), Субконто1 В (&МассивПродукцииПорядок), , ) КАК ХозрасчетныйОбороты
			|ГДЕ
			|	НЕ ХозрасчетныйОбороты.СуммаОборотКт = 0
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПериодСекунда";
		Запрос.УстановитьПараметр("НачалоПериода", ДатаПервогоВыпуска);
		Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Реквизиты.Период));
		Запрос.УстановитьПараметр("МассивПродукцииПорядок", МассивПродукцииПорядок);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ДокументОбъект = ВыборкаДетальныеЗаписи.Регистратор.ПолучитьОбъект();
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект,,, РежимЗаписиДокумента.Проведение);
		КонецЦикла;
	КонецЦикла;
	
	МенеджерВременныхТаблиц.Закрыть();

КонецПроцедуры

Процедура СортировкаСчетовУчета(СчетаУчета,	СчетаУчетаНС, СчетаУчетаНПС) Экспорт
	
	Для Каждого Счет Из СчетаУчета Цикл
		
		НаСчетеВедетсяПартионныйУчет = БухгалтерскийУчетСервер.НаСчетеВедетсяПартионныйУчет(Счет);
		
		Если НаСчетеВедетсяПартионныйУчет Тогда
			СчетаУчетаНПС.Добавить(Счет);
		Иначе
			СчетаУчетаНС.Добавить(Счет);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПодготовитьПараметрыПлановаяСтоимостьВыпущеннойПродукции(ТаблицаПродукция, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПродукция

	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"               // <СправочникСсылка.Номенклатура> - номенклатура выпущенной продукции
	+ "СчетЗатрат,"                 // <ПланСчетовСсылка.Хозрасчетный> - счет учета затрат на выпуск продукции
	+ "ПодразделениеЗатрат,"        // <Ссылка на справочник подразделений> - подразделение, выпустившее продукцию
	+ "НоменклатурнаяГруппаЗатрат," // <СправочникСсылка.НомеклатурныеГруппы> - номеклатурная группа выпущенной продукции
	+ "СчетУчета,"                  // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на которой поступает продукция
	+ "Склад,"                      // <СправочникСсылка.Склады> - склад, на который поступает продукция
	+ "Количество,"                 // <Число,15,3> - количество выпущенной продукции
	+ "СуммаПлановая,"              // <Число,15,2> - плановая стоимость выпущенной продукции
	+ "Содержание";                 // <Строка,150> - содержание проводки

	Параметры.Вставить("ТаблицаПродукция", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПродукция, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                     // <Дата> - период движений - дата документа
	+ "Организация";                // <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыПлановаяСтоимостьВыпущенныхУслуг(ТаблицаУслуги, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаУслуги

	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"               // <СправочникСсылка.Номенклатура> - номенклатура оказанных услуг
	+ "СчетЗатрат,"                 // <ПланСчетовСсылка.Хозрасчетный> - счет учета затрат на выпуск услуг
	+ "ПодразделениеЗатрат,"        // <Ссылка на справочник подразделений> - производственное подразделение, оказавшее услуги
	+ "НоменклатурнаяГруппаЗатрат," // <СправочникСсылка.НомеклатурныеГруппы> - номеклатурная группа оказанных услуг
	+ "СчетСписания,"               // <ПланСчетовСсылка.Хозрасчетный> - счет списания плановой стоимости услуг
	//+ "ВидСубконтоСписания1,"       // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета списания
	//+ "ВидСубконтоСписания2,"       // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета списания
	//+ "ВидСубконтоСписания3,"       // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета списания
	+ "СубконтоСписания1,"          // - значение субконто счета списания
	+ "СубконтоСписания2,"          // - значение субконто счета списания
	+ "СубконтоСписания3,"          // - значение субконто счета списания
	+ "Количество,"                 // <Число,15,3> - объем оказанных услуг, выраженный в количественном показателе
	+ "ПлановаяСтоимость,"          // <Число,15,2> - плановая стоимость оказанных услуг
	+ "Содержание";                 // <Строка,150> - содержание проводки

	Параметры.Вставить("ТаблицаУслуги", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаУслуги, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                     // <Дата> - период движений - дата документа
	+ "Организация";                // <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыПлановаяСтоимостьУслугПоПереработке(ТаблицаУслуги, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаУслуги

	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"               // <СправочникСсылка.Номенклатура> - номенклатура оказанных услуг
	
	+ "СчетЗатрат,"                 // <ПланСчетовСсылка.Хозрасчетный> - счет учета затрат на выпуск услуг
	+ "НоменклатураЗатрат,"         // <СправочникСсылка.Номенклатура> - номенклатура, в разрезе которой учитываются затраты на оказание услуг
	
	+ "СчетРасходов,"               // <ПланСчетовСсылка.Хозрасчетный> - счет учета расходов
	+ "НоменклатурнаяГруппа,"       // <Характеристика.ВидыСубконтоХозрасчетные> - субконто НоменклатурнаяГруппа
	
	+ "Количество,"                 // <Число,15,3> - объем оказанных услуг в количественном выражении
	+ "Сумма,"                      // <Число,15,2> - плановая стоимость оказанных услуг
	+ "Содержание";                 // <Строка,150> - содержание проводки

	Параметры.Вставить("ТаблицаУслуги", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаУслуги, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                     // <Дата> - период движений - дата документа
	+ "Организация";                // <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыВыпускПродукцииУслуг(ТаблицаВыпуск, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаВыпуск

	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"                          // <СправочникСсылка.Номенклатура> - номенклатура выпущенной продукции, услуг
	+ "СчетЗатрат,"                            // <ПланСчетовСсылка.Хозрасчетный> - счет учета затрат на выпуск продукции, услуг
	+ "ПодразделениеЗатрат,"                   // <Ссылка на справочник подразделений> - производственное подразделение, выпустившее продукцию, услуги
	+ "НоменклатурнаяГруппаЗатрат,"            // <СправочникСсылка.НомеклатурныеГруппы> - номеклатурная группа выпущенной продукции, услуг
	+ "Спецификация,"            				// <СправочникСсылка.Спецификации> - спецификация выпущенной продукции, услуг
	+ "СчетСписания,"                          // <ПланСчетовСсылка.Хозрасчетный> - счет списания плановой стоимости продукции, услуг
	+ "СубконтоСписания1,"                     // - значение субконто счета списания
	+ "СубконтоСписания2,"                     // - значение субконто счета списания
	+ "СубконтоСписания3,"                     // - значение субконто счета списания
	+ "Количество,"                            // <Число,15,3> - количество выпущенной продукции, услуг
	+ "ПлановаяСтоимость";                     // <Число,15,2> - плановая стоимость выпущенной продукции, услуг
	Параметры.Вставить("ТаблицаВыпуск", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВыпуск, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                                // <Дата> - период движений - дата документа
	+ "Организация";                           // <СправочникСсылка.Организации>
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыВыпускОтходов(ТаблицаОтходы, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОтходы

	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"               // <СправочникСсылка.Номенклатура> - номенклатура выпущенных возвратных отходов
	+ "СчетЗатрат,"                 // <ПланСчетовСсылка.Хозрасчетный> - счет учета затрат на выпуск продукции
	+ "ПодразделениеЗатрат,"        // <Ссылка на справочник подразделений> - производственное подразделение, выпустившее продукцию, услуги
	+ "НоменклатурнаяГруппаЗатрат," // <СправочникСсылка.НомеклатурныеГруппы> - номеклатурная группа выпущенной продукции
	+ "Продукция,"                  // <СправочникСсылка.Номенклатура> - выпущенная продукция
	+ "СтатьяЗатрат,"               // <СправочникСсылка.СтатьяЗатрат> - статья учета затрат на выпуск продукции
	+ "СчетУчета,"                  // <ПланСчетовСсылка.Хозрасчетный> - счет учета возвратных отходов
	+ "Склад,"                      // <СправочникСсылка.Склады> - склад, на который поступают отходы
	+ "Количество,"                 // <Число,15,3> - количество выпущенных возвратных отходов
	+ "Сумма";                      // <Число,15,2> - себестоимость выпущенных возвратных отходов

	Параметры.Вставить("ТаблицаОтходы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаОтходы, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                     // <Дата> - период движений - дата документа
	+ "Организация,"                // <СправочникСсылка.Организации>
	+ "Содержание";                 // <Строка,150> - содержание проводки

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыКорректировкаСтоимостиВыпущеннойПродукции(ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                     // <Дата> - период движений - дата документа
	+ "Организация,"                // <СправочникСсылка.Организации>
	+ "БазаРаспределения";          // <ПеречислениеСсылка.БазыРаспределенияКосвенныхРасходов>

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыКомплектация(ТаблицаКомплекты, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаКомплекты

	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"	// <СправочникСсылка.Номенклатура> - номенклатура комплекта
	+ "СчетЗатрат,"		// <ПланСчетовСсылка.Хозрасчетный> - счет учета затрат на комплекти
	+ "СчетУчета,"		// <ПланСчетовСсылка.Хозрасчетный> - счет учета, на которой поступает комплект
	+ "Склад,"			// <СправочникСсылка.Склады> - склад, на который поступает комплект
	+ "Количество,"		// <Число,15,3> - количество выпущенных комплектов
	+ "Сумма";			// <Число,15,2> - стоимость комплекта

	Параметры.Вставить("ТаблицаКомплекты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаКомплекты, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"	// <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"			// <Дата> - период движений - дата документа
	+ "Организация,"	// <СправочникСсылка.Организации>
	+ "Содержание";		// <Строка,150> - содержание проводки

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция РазличныеЗначенияКолонкиТаблицы(ТаблицаЗначений, ИмяКолонки)

	ВсеЗначенияКолонки = ТаблицаЗначений.ВыгрузитьКолонку(ИмяКолонки);
	РазличныеЗначения  = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(ВсеЗначенияКолонки);
	Возврат РазличныеЗначения;

КонецФункции

#КонецОбласти
