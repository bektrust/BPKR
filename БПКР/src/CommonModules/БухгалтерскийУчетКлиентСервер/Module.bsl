
#Область ПрограммныйИнтерфейс

// Функция - Шаблон параметров проверки ИНН
// 
// Возвращаемое значение:
//  Структура - 
//
Функция ШаблонПараметровПроверкиИНН() Экспорт
	
	ШаблонПараметров = Новый Структура(); 
	ШаблонПараметров.Вставить("ПроверитьИНН", Ложь);	
	ШаблонПараметров.Вставить("ИНН", "");
	ШаблонПараметров.Вставить("ДатаРождения", '00010101');
	ШаблонПараметров.Вставить("ЭтоЮрЛицо", Ложь);	
	Возврат ШаблонПараметров;
	
КонецФункции	

// Функция выполняет проверку корректности введенных ИНН
//
// Параметры:
//  СтруктураПараметров	 - Структура - Обязательные ключи структуры:
//  * ИНН - Строка
//  * ЭтоЮрЛицо - Булево
//  * ПроверитьИНН - Булево
//  * ДатаРождения - Дата
// 
// Возвращаемое значение:
//  РезультатПроверки - Структура
//
Функция ПроверитьКорректностьИНН(Знач СтруктураПараметров) Экспорт
	// 1. Заполненость ИНН если нет то дальнейшие проверки не нужны
	// 2. Для спр. Контрагенты и спр. ФизЛица д.б. длина ИНН = 14, если нет то дальнейшие проверки не нужны
	// 3. ИНН должен состоять только из цифр
	// 4. Проверка тип контрагента для спр. Контаргенты
	// 5. Для спр. Контрагенты вид контрагента ЮрЛицо
	// 5.1 Проверка 1-й цифры - не больше 5
	// 5.2 Проверка дня месяца
	// 5.3 Проверка месяца
	// 5.4 Проверка года < 1901
	// 6. Для спр. Контрагенты вид контрагента ФизЛицо и спр. ФизЛица
	// 6.1 Проверка 1-ой цифры - 1 или 2
	// 6.2 Проверка соответствия ИНН дню рождения
	// 6.3 Проверка корректности месяца рождения в ИНН 
	// 6.4 Проверка корректности года рождения в ИНН
	// 6.5 Проверка соответствует ли указаная дата рождения дате рождения в ИНН
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ИННВведенКорректно",               Истина);
	РезультатПроверки.Вставить("РасширенноеПредставлениеИНН",      СтруктураПараметров.ИНН);
	РезультатПроверки.Вставить("НадписьПоясненияНекорректногоИНН", "");
	РезультатПроверки.Вставить("ПустойИНН",                        Ложь);
	РезультатПроверки.Вставить("ОшибокПоИННнет",                   СтруктураПараметров.ПроверитьИНН);
	
	ИНН      = СокрП(СтруктураПараметров.ИНН);
	ДлинаИНН = СтрДлина(ИНН);
	Если НЕ ЗначениеЗаполнено(ИНН) Тогда
		// 1. Заполненость ИНН если нет то дальнейшие проверки не нужны
		РезультатПроверки.ИННВведенКорректно = Ложь;
		РезультатПроверки.ПустойИНН 		 = Истина;
		РезультатПроверки.ОшибокПоИННнет	 = Ложь;
	Иначе
		
		Если НЕ СтруктураПараметров.ПроверитьИНН Тогда 
			Возврат РезультатПроверки;
		КонецЕсли;	

		Если Не ДлинаИНН = 14 Тогда 
			// 2. Для спр. Контрагенты и спр. ФизЛица д.б. длина ИНН = 14, если нет то дальнейшие проверки не нужны
			РезультатПроверки.НадписьПоясненияНекорректногоИНН = "Длина ИНН должна быть 14 знаков";
			РезультатПроверки.ИННВведенКорректно = Ложь;
			РезультатПроверки.ОшибокПоИННнет	 = Ложь;
			ТекстДляНекорректногоИНН = НСтр("ru = '%1
			|ИНН содержит не 14 цифр'");
			РезультатПроверки.РасширенноеПредставлениеИНН = СтрШаблон(ТекстДляНекорректногоИНН, ИНН);
		КонецЕсли		
		
	КонецЕсли;
	
	Если РезультатПроверки.ОшибокПоИННнет Тогда
		
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИНН) Тогда
			// 3. ИНН должен состоять только из цифр
			РезультатПроверки.ИННВведенКорректно = Ложь;
			РезультатПроверки.НадписьПоясненияНекорректногоИНН = НСтр("ru = 'ИНН должен включать только цифры'");
			ТекстДляНекорректногоИНН = НСтр("ru = '%1
			|ИНН содержит не только цифры'");
			РезультатПроверки.РасширенноеПредставлениеИНН = СтрШаблон(ТекстДляНекорректногоИНН, ИНН);
			РезультатПроверки.ОшибокПоИННнет = Ложь;
		КонецЕсли
		
	КонецЕсли;
	
	
	Если РезультатПроверки.ОшибокПоИННнет Тогда
		
		Если СтруктураПараметров.ЭтоЮрлицо = Неопределено Тогда 
			// 4. Проверка тип контрагента для спр. Контаргенты
			РезультатПроверки.ИННВведенКорректно = Ложь;
			РезультатПроверки.НадписьПоясненияНекорректногоИНН = НСтр("ru = 'Неизвестен вид контрагента. Укажите вид контрагента'");
			РезультатПроверки.ОшибокПоИННнет = Ложь;	
		КонецЕсли
		
	КонецЕсли;	
	
	Если РезультатПроверки.ОшибокПоИННнет Тогда
		// 5. Для спр. Контрагенты вид контрагента ЮрЛицо
		
		Если НЕ СтруктураПараметров.ПроверитьИНН Тогда 
			РезультатПроверки.ИННВведенКорректно = Ложь;
			РезультатПроверки.ОшибокПоИННнет 	 = Ложь;	
		КонецЕсли;
		
		
		Если СтруктураПараметров.ЭтоЮрлицо Тогда
			// 5.1 Проверка 1-й цифры - не больше 5
			Если РезультатПроверки.ОшибокПоИННнет Тогда
				
				ПерваяЦифра = Число(Лев(ИНН,1));
				Если ПерваяЦифра > 5 Тогда 
					РезультатПроверки.ИННВведенКорректно = Ложь;
					РезультатПроверки.НадписьПоясненияНекорректногоИНН = НСтр("ru = 'Первая цифра ИНН не может быть больше 5'");
					ТекстДляНекорректногоИНН = НСтр("ru = '%1
					|ИНН не соответствует формату'");
					РезультатПроверки.РасширенноеПредставлениеИНН = СтрШаблон(ТекстДляНекорректногоИНН, ИНН);
					РезультатПроверки.ОшибокПоИННнет = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			// 5.2 Проверка дня месяца
			Если РезультатПроверки.ОшибокПоИННнет Тогда
				
				ДеньМесяца = Число(Сред(ИНН,2,2));
				Если ДеньМесяца > 31 
					ИЛИ ДеньМесяца = 0 Тогда 
					РезультатПроверки.ИННВведенКорректно = Ложь;
					РезультатПроверки.НадписьПоясненияНекорректногоИНН = НСтр("ru = 'Вторая и третья цифры ИНН должны соответствовать дню месяца даты регистрации'");
					ТекстДляНекорректногоИНН = НСтр("ru = '%1
					|ИНН не соответствует формату'");
					РезультатПроверки.РасширенноеПредставлениеИНН = СтрШаблон(ТекстДляНекорректногоИНН, ИНН);
					РезультатПроверки.ОшибокПоИННнет = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			// 5.3 Проверка месяца
			Если РезультатПроверки.ОшибокПоИННнет Тогда
				
				Месяц = Число(Сред(ИНН,4,2));
				Если Месяц > 12 
					ИЛИ Месяц = 0 Тогда 
					РезультатПроверки.ИННВведенКорректно = Ложь;
					РезультатПроверки.НадписьПоясненияНекорректногоИНН = НСтр("ru = 'Четвертая и пятая цифры ИНН должны соответствовать месяцу даты регистрации'");
					ТекстДляНекорректногоИНН = НСтр("ru = '%1
					|ИНН не соответствует формату'");
					РезультатПроверки.РасширенноеПредставлениеИНН = СтрШаблон(ТекстДляНекорректногоИНН, ИНН);
					РезультатПроверки.ОшибокПоИННнет = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			// 5.4 Проверка года < 1901
			Если РезультатПроверки.ОшибокПоИННнет Тогда
				
				ГодИНН = Число(Сред(ИНН,6,4));
				Если ПерваяЦифра = 0 
					И (ГодИНН < 1901 ИЛИ ГодИНН > Год(ТекущаяДата())) Тогда 
					РезультатПроверки.ИННВведенКорректно = Ложь;
					РезультатПроверки.НадписьПоясненияНекорректногоИНН = НСтр("ru = 'Цифры с шестой по девятую ИНН должны соответствовать году регистрации'");
					ТекстДляНекорректногоИНН = НСтр("ru = '%1
					|ИНН не соответствует формату'");
					РезультатПроверки.РасширенноеПредставлениеИНН = СтрШаблон(ТекстДляНекорректногоИНН, ИНН);
					РезультатПроверки.ОшибокПоИННнет = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			// 6. Для спр. Контрагенты вид контрагента ФизЛицо и спр. ФизЛица
			Если РезультатПроверки.ОшибокПоИННнет Тогда
				// 6.1 проверка 1-ой цифры - 1 или 2
				Если Не Лев(СтруктураПараметров.ИНН,1) = "1" И Не Лев(СтруктураПараметров.ИНН,1) = "2" Тогда 
					РезультатПроверки.ИННВведенКорректно = Ложь;
					РезультатПроверки.ОшибокПоИННнет     = Ложь;
					РезультатПроверки.НадписьПоясненияНекорректногоИНН = "Первая цифра ИНН должна быть 1 для женщин или 2 для мужчин";
					ТекстДляНекорректногоИНН = НСтр("ru = '%1
					|ИНН не соответствует формату'");
					РезультатПроверки.РасширенноеПредставлениеИНН = СтрШаблон(ТекстДляНекорректногоИНН, ИНН);
				КонецЕсли;
				
			КонецЕсли;
			
			Если РезультатПроверки.ОшибокПоИННнет Тогда
				// 6.2 Проверка соответствия ИНН дню рождения
				ДеньМесяца = Число(Сред(СтруктураПараметров.ИНН,2,2));
				Если ДеньМесяца > 31 ИЛИ ДеньМесяца = 0 Тогда
					РезультатПроверки.ИННВведенКорректно = Ложь;
					РезультатПроверки.ОшибокПоИННнет     = Ложь;
					РезультатПроверки.НадписьПоясненияНекорректногоИНН = "Вторая и третья цифра ИНН должно соответствовать дню рождения физлица";
					ТекстДляНекорректногоИНН = НСтр("ru = '%1
					|ИНН не соответствует формату'");
					РезультатПроверки.РасширенноеПредставлениеИНН = СтрШаблон(ТекстДляНекорректногоИНН, ИНН);
				КонецЕсли;
				
			КонецЕсли;
			
			Если РезультатПроверки.ОшибокПоИННнет Тогда
				// 6.3 Проверка корректности месяца рождения в ИНН 
				Месяц = Число(Сред(СтруктураПараметров.ИНН,4,2));
				Если Месяц > 12 ИЛИ Месяц = 0 Тогда
					РезультатПроверки.ИННВведенКорректно = Ложь;
					РезультатПроверки.ОшибокПоИННнет     = Ложь;
					РезультатПроверки.НадписьПоясненияНекорректногоИНН = "Четвертая и пятая цифра ИНН должно соответствовать месяцу рождения";
					ТекстДляНекорректногоИНН = НСтр("ru = '%1
					|ИНН не соответствует формату'");
					РезультатПроверки.РасширенноеПредставлениеИНН = СтрШаблон(ТекстДляНекорректногоИНН, ИНН);
				КонецЕсли;
				
			КонецЕсли;
			
			Если РезультатПроверки.ОшибокПоИННнет Тогда
				// 6.4  Проверка корректности года рождения в ИНН
				ГодИНН = Число(Сред(СтруктураПараметров.ИНН,6,4));
				Если ГодИНН < 1901 ИЛИ ГодИНН > Год(ТекущаяДата()) Тогда
					РезультатПроверки.ИННВведенКорректно = Ложь;
					РезультатПроверки.ОшибокПоИННнет     = Ложь;
					РезультатПроверки.НадписьПоясненияНекорректногоИНН = "Цифры ИНН с 6 по 9 должно соответствовать году рождения"; 
					ТекстДляНекорректногоИНН = НСтр("ru = '%1
					|ИНН не соответствует формату'");
					РезультатПроверки.РасширенноеПредставлениеИНН = СтрШаблон(ТекстДляНекорректногоИНН, ИНН);
				КонецЕсли;
				
			КонецЕсли;
			
			Если РезультатПроверки.ОшибокПоИННнет Тогда
				// 6.5 Проверка соответствует ли указаная дата рождения дате рождения в ИНН
				ДатаИНН = Дата(Сред(СтруктураПараметров.ИНН,6,4) + Сред(СтруктураПараметров.ИНН,4,2) + Сред(СтруктураПараметров.ИНН,2,2));
				Если ЗначениеЗаполнено(СтруктураПараметров.ДатаРождения) Тогда 
					
					Если Не ДатаИНН = СтруктураПараметров.ДатаРождения Тогда 
						РезультатПроверки.ИННВведенКорректно = Ложь;
						РезультатПроверки.ОшибокПоИННнет     = Ложь;
						РезультатПроверки.НадписьПоясненияНекорректногоИНН = "Дата рождения ФизЛица должна совпадать с датой рождения в его ИНН";	
						ТекстДляНекорректногоИНН = НСтр("ru = '%1
						|ИНН не соответствует формату'");
						РезультатПроверки.РасширенноеПредставлениеИНН = СтрШаблон(ТекстДляНекорректногоИНН, ИНН);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	Возврат РезультатПроверки;
	
КонецФункции	

// Устанавливает картинку группе, в которой расположен элемент управления Комментарий.
//
// Параметры:
//  ГруппаДополнительно	 	- ЭлементФормы	 - группа, в которой расположен комментарий.
//  Комментарий  			- Строка - текст комментария.
//
Процедура УстановитьКартинкуДляКомментария(ГруппаДополнительно, Комментарий) Экспорт
	
	ГруппаДополнительно.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Комментарий);
	
КонецПроцедуры

// Возвращает массив для установки параметров выбора договора для документа.
//
// Параметры
//	Документ  - любой документ, предусматривающий договор контрагента
//	ВидОперации  - вид операции документа.
//
// Возвращаемое значение:
//	<Массив>   - список видов договора, доступных для документа.
//
Функция ПолучитьМассивПараметровВыбораДоговора(Документ, ВидОперации = Неопределено) Экспорт  

	НовыйМассив = Новый Массив();
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ОплатаПоставщику") Тогда
			// Формирование параметра выбора.
			НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
		ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратПокупателю") Тогда
			НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
		ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.РасчетыПоЗаймам") Тогда
			НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
		ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ПрочийРасход") Тогда
			НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
			НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаОтПокупателя")
			Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.РозничнаяВыручка") Тогда
			НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
		ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратОтПоставщика") Тогда
			НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
		ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.РасчетыПоЗаймам") Тогда
			НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
		ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПрочийПриход") Тогда
			НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
			НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
		КонецЕсли;

	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
		
		Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ОплатаПоставщику") Тогда
			НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
		ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ВозвратПокупателю") Тогда
			НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
		ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.РасчетыПоЗаймам") Тогда
			НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
		ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ПрочийРасход") Тогда
			НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
			НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
		КонецЕсли;

	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") Тогда
		
		Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.ОплатаОтПокупателя")
			Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.ПоступлениОтПродажПоДоговорамЭквайринга") Тогда
			НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
		ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.ВозвратОтПоставщика") Тогда
			НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
		ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.РасчетыПоЗаймам")
			Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.ПоступлениОтПродажПоДоговорамЭквайринга") Тогда
			НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
		ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.ПрочийПриход") Тогда
			НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
			НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
		КонецЕсли;
	Иначе 
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
	КонецЕсли;	
		
	Возврат НовыйМассив;
	
КонецФункции 

Процедура УстановитьНачальныеСвойстваСубконтоШапки(Форма, Объект, ПараметрыУстановки) Экспорт
	
	УстановитьСвойстваСубконтоШапки(Форма, Объект, ПараметрыУстановки);
	
	ДанныеОбъекта = ДанныеУстановкиПараметровСубконто(Объект, ПараметрыУстановки);
	
	УстановитьПараметрыВыбораСубконто(Форма, Объект, ПараметрыУстановки, ДанныеОбъекта);
	
КонецПроцедуры

Процедура УстановитьНачальныеСвойстваСубконтоТаблицы(Таблица, ПараметрыУстановки) Экспорт
	
	Для каждого СтрокаТаблицы Из Таблица Цикл
		
		УстановитьДоступностьСубконтоСтроки(СтрокаТаблицы, ПараметрыУстановки);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьНачальныеСвойстваСубконтоСтроки(Форма, СтрокаТаблицы, ПараметрыУстановки) Экспорт
	
	УстановитьСвойстваСубконтоСтроки(Форма, СтрокаТаблицы, ПараметрыУстановки);
	
	ДанныеОбъекта = ДанныеУстановкиПараметровСубконто(СтрокаТаблицы, ПараметрыУстановки);
	
	УстановитьПараметрыВыбораСубконто(Форма, СтрокаТаблицы, ПараметрыУстановки, ДанныеОбъекта);
	
КонецПроцедуры

Процедура УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(Форма, Объект, ПараметрыУстановки) Экспорт
	
	УстановитьСвойстваСубконтоШапки(Форма, Объект, ПараметрыУстановки);
	
	ДанныеОбъекта = ДанныеУстановкиПараметровСубконто(Объект, ПараметрыУстановки);
	
	УстановитьПараметрыВыбораСубконто(Форма, Объект, ПараметрыУстановки, ДанныеОбъекта);
	
	УстановитьЗначенияСубконтоПоУмолчанию(Объект, ПараметрыУстановки);
	
КонецПроцедуры

Процедура УстановитьСвойстваСубконтоСтрокиПриИзмененииСчета(Форма, СтрокаТаблицы, ПараметрыУстановки) Экспорт
	
	УстановитьДоступностьСубконтоСтроки(СтрокаТаблицы, ПараметрыУстановки);
	
	УстановитьСвойстваСубконтоСтроки(Форма, СтрокаТаблицы, ПараметрыУстановки);
	
	УстановитьЗначенияСубконтоПоУмолчанию(СтрокаТаблицы, ПараметрыУстановки);

	ДанныеОбъекта = ДанныеУстановкиПараметровСубконто(СтрокаТаблицы, ПараметрыУстановки);
	
	УстановитьПараметрыВыбораСубконто(Форма, СтрокаТаблицы, ПараметрыУстановки, ДанныеОбъекта);

КонецПроцедуры

Процедура УстановитьСвойстваСубконтоШапкиПриИзмененииСубконто(Форма, Объект, НомерСубконто, ПараметрыУстановки) Экспорт
	
	ДанныеОбъекта = ДанныеУстановкиПараметровСубконто(Объект, ПараметрыУстановки);
	
	УстановитьПараметрыВыбораСубконто(Форма, Объект, ПараметрыУстановки, ДанныеОбъекта);
	
	ОчиститьСубконтоПриИзмененииСубконто(Объект, НомерСубконто, ПараметрыУстановки, ДанныеОбъекта);
	
КонецПроцедуры

Процедура УстановитьСвойстваСубконтоСтрокиПриИзмененииСубконто(Форма, СтрокаТаблицы, НомерСубконто, ПараметрыУстановки) Экспорт
	
	ДанныеОбъекта = ДанныеУстановкиПараметровСубконто(СтрокаТаблицы, ПараметрыУстановки);
	
	УстановитьПараметрыВыбораСубконто(Форма, СтрокаТаблицы, ПараметрыУстановки, ДанныеОбъекта);
	
	ОчиститьСубконтоПриИзмененииСубконто(СтрокаТаблицы, НомерСубконто, ПараметрыУстановки, ДанныеОбъекта);
	
	ЗаполнитьВалютуСтрокиПриИзмененииСубконто(СтрокаТаблицы, ПараметрыУстановки, ДанныеОбъекта);
	
КонецПроцедуры

Процедура УстановитьСвойстваСубконтоШапкиПриИзмененииОрганизации(Форма, Объект, ПараметрыУстановки) Экспорт
	
	ОчиститьСубконтоПриИзмененииОрганизации(Объект, ПараметрыУстановки);
	
	ДанныеОбъекта = ДанныеУстановкиПараметровСубконто(Объект, ПараметрыУстановки);
	
	УстановитьПараметрыВыбораСубконто(Форма, Объект, ПараметрыУстановки, ДанныеОбъекта);
	
	УстановитьЗначенияСубконтоПоУмолчанию(Объект, ПараметрыУстановки);
	
КонецПроцедуры

Процедура УстановитьСвойстваСубконтоТаблицыПриИзмененииОрганизации(Таблица, ПараметрыУстановки) Экспорт
	
	Для каждого СтрокаТаблицы Из Таблица Цикл
		
		ОчиститьСубконтоПриИзмененииОрганизации(СтрокаТаблицы, ПараметрыУстановки);
		
		УстановитьЗначенияСубконтоПоУмолчанию(СтрокаТаблицы, ПараметрыУстановки);
		
	КонецЦикла;
	
КонецПроцедуры

Функция НовыеПараметрыУстановкиСвойствСубконто() Экспорт
	
	Результат = Новый Структура;
	
	ПоляФормы = Новый Структура;
	ПоляФормы.Вставить("Субконто1");
	ПоляФормы.Вставить("Субконто2");
	ПоляФормы.Вставить("Субконто3");
	Результат.Вставить("ПоляФормы", ПоляФормы);
	
	ПоляОбъекта = Новый Структура;
	ПоляОбъекта.Вставить("СчетУчета", "СчетУчета");
	ПоляОбъекта.Вставить("Субконто1");
	ПоляОбъекта.Вставить("Субконто2");
	ПоляОбъекта.Вставить("Субконто3");
	Результат.Вставить("ПоляОбъекта", ПоляОбъекта);
	
	ДопРеквизиты = Новый Структура;
	Результат.Вставить("ДопРеквизиты", ДопРеквизиты);
	
	Результат.Вставить("ЗначенияПоУмолчанию", Новый Соответствие); // См. также ПредопределенныеЗначенияСубконтоПоУмолчанию()
	
	Результат.Вставить("СкрыватьСубконто", Истина);
	Результат.Вставить("ЗаполнятьВалютуИзСубконто", Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыУстановкиСвойствСубконтоПоШаблону(СубконтоФормы, СубконтоОбъекта, СчетУчетаОбъекта) Экспорт
	
	Результат = НовыеПараметрыУстановкиСвойствСубконто();
	
	Если НЕ ПустаяСтрока(СубконтоФормы) Тогда
		Для Индекс = 1 По 3 Цикл
			Результат.ПоляФормы["Субконто" + Индекс] = СубконтоФормы + Индекс;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СубконтоОбъекта) Тогда
		Для Индекс = 1 По 3 Цикл
			Результат.ПоляОбъекта["Субконто" + Индекс] = СубконтоОбъекта + Индекс;
		КонецЦикла;
	КонецЕсли;
	Если НЕ ПустаяСтрока(СчетУчетаОбъекта) Тогда
		Результат.ПоляОбъекта.СчетУчета = СчетУчетаОбъекта;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеУстановкиПараметровСубконто(Объект, ПараметрыУстановки) Экспорт
	
	Результат = Новый Структура;
	
	ПоляОбъекта  = ПараметрыУстановки.ПоляОбъекта;
	ДопРеквизиты = ПараметрыУстановки.ДопРеквизиты;
	
	Для Индекс = 1 По 3 Цикл
		Если НЕ ЗначениеЗаполнено(ПоляОбъекта["Субконто" + Индекс]) Тогда
			Продолжить;
		КонецЕсли;
		ЗначениеСубконто = Объект[ПоляОбъекта["Субконто" + Индекс]];
		ТипСубконто = ТипЗнч(ЗначениеСубконто);
		Если ТипСубконто= Тип("СправочникСсылка.Контрагенты") Тогда
			Результат.Вставить("Контрагент", ЗначениеСубконто);
		ИначеЕсли ТипСубконто= Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			Результат.Вставить("ДоговорКонтрагента", ЗначениеСубконто);
		ИначеЕсли ТипСубконто = Тип("СправочникСсылка.Номенклатура") Тогда
			Результат.Вставить("Номенклатура", ЗначениеСубконто);
		ИначеЕсли ТипСубконто = Тип("СправочникСсылка.Склады") Тогда
			Результат.Вставить("Склад", ЗначениеСубконто);
		КонецЕсли;
	КонецЦикла;
	Результат.Вставить("СчетУчета", Объект[ПоляОбъекта.СчетУчета]);
	
	Если ПоляОбъекта.Свойство("Организация") Тогда
		Результат.Вставить("Организация", Объект[ПоляОбъекта.Организация]);
	КонецЕсли;
	
	Для каждого ДопРеквизит Из ДопРеквизиты Цикл
		Результат.Вставить(ДопРеквизит.Ключ, ДопРеквизит.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Процедура установки типа и видимости субконто в зависимости от выбранного счета
//
// Параметры:
//	Счет			 - <План счетов> - Счет, для которого необходимо настроить тип и видимость субконто
//	Форма			 - <Управляемая форма> - Форма, которая содержит ПоляФормы и ЗаголовкиПолей
//	ПоляФормы		 - <Структура> - Ключи, которой Субконто1, Субконто2, Субконто3, 
//									 а значения имена соответствующих полей на форме (поля субконто)
//	ЗаголовкиПолей	 - <Структура> ИЛИ <Неопределено> - Ключи, которой Субконто1, Субконто2, Субконто3
//									 а значения имена соответствующих полей на форме (заголовки субконто)
//	ЭтоТаблица		 - <Булево>		 - Признак того, где выполняется настройка субконто. 
//	СкрыватьСубконто - <Булево>		 - Признак того, нужно ли для этой формы дополнительно скрывать субконто, влияет на выполнении функции НужноСкрытьСубконто
//
Процедура ПриВыбореСчета(Счет, Форма, ПоляФормы, ЗаголовкиПолей = Неопределено, ЭтоТаблица = Ложь, СкрыватьСубконто = Истина) Экспорт
	
	ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	
	Для Индекс = 1 По 3 Цикл
		ТипЗначенияСубконто = ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"];
		Если Индекс <= ДанныеСчета.КоличествоСубконто И НЕ НужноСкрытьСубконто(СкрыватьСубконто, ТипЗначенияСубконто) Тогда
			Если ЭтоТаблица Тогда
				Если ПоляФормы.Свойство("Субконто" + Индекс) Тогда
					Форма.Элементы[ПоляФормы["Субконто" + Индекс]].ОграничениеТипа = ТипЗначенияСубконто;
					Форма.Элементы[ПоляФормы["Субконто" + Индекс]].ПодсказкаВвода  = ДанныеСчета["ВидСубконто" + Индекс + "Наименование"];
				КонецЕсли;
			Иначе
				Если ЗаголовкиПолей <> Неопределено И ЗаголовкиПолей.Свойство("Субконто" + Индекс) Тогда
					// Заголовок может быть не выведен на форму
					ЭлементФормыЗаголовок = Форма.Элементы.Найти(ЗаголовкиПолей["Субконто" + Индекс]);
					Если ЭлементФормыЗаголовок <> Неопределено Тогда
						ЭлементФормыЗаголовок.Видимость = Истина;
					КонецЕсли;
					Форма[ЗаголовкиПолей["Субконто" + Индекс]] = ДанныеСчета["ВидСубконто" + Индекс + "Наименование"] + ":";
				КонецЕсли;
				Если ПоляФормы.Свойство("Субконто" + Индекс) Тогда
					Форма.Элементы[ПоляФормы["Субконто" + Индекс]].Видимость       = Истина;
					Форма.Элементы[ПоляФормы["Субконто" + Индекс]].ОграничениеТипа = ТипЗначенияСубконто;
				КонецЕсли;
			КонецЕсли;
		Иначе 
			// Ничего делать не надо, т.к. не доступные поля будут скрыты
			Если Не ЭтоТаблица Тогда
				Если ЗаголовкиПолей <> Неопределено И ЗаголовкиПолей.Свойство("Субконто" + Индекс) Тогда
					// Заголовок может быть не выведен на форму
					ЭлементФормыЗаголовок = Форма.Элементы.Найти(ЗаголовкиПолей["Субконто" + Индекс]);
					Если ЭлементФормыЗаголовок <> Неопределено Тогда
						ЭлементФормыЗаголовок.Видимость	 = Ложь;
					КонецЕсли;
					Форма[ЗаголовкиПолей["Субконто" + Индекс]] = "";
				КонецЕсли;
				Если ПоляФормы.Свойство("Субконто" + Индекс) Тогда
					Форма.Элементы[ПоляФормы["Субконто" + Индекс]].Видимость       = Ложь;
					Форма.Элементы[ПоляФормы["Субконто" + Индекс]].ОграничениеТипа = Новый ОписаниеТипов("Неопределено");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура установки типа, значения и доступности субконто в зависимости от выбранного счета
//
// Параметры:
//  Счет			 - ПланСчетовСсылка.Хозрасчетный - Счет, для которого необходимо настроить тип и видимость субконто.
//  Объект			 - УправляемаяФорма				 - Объект, который содержит поля формы (так же может быть передано СтрокаТабличнойЧасти).
//  ПоляОбъекта		 - Структура:
//		*Субконто1 - Строка- Имя поля
//  	*Субконто2 - Строка- Имя поля
//  	*Субконто3 - Строка- Имя поля
//  ЭтоТаблица		 - Булево						 - Признак что обрабатывается таблица.
//  ЗначенияСубконто - Соответствие, Неопределено	 - Значения субконто, где ключ Вид субконто, а значение - значение для подстановки.
//  СкрыватьСубконто - Булево						 - Признак того, нужно ли для этой формы дополнительно скрывать субконто, влияет на выполнении функции СкрытьСубконто.
//
Процедура ПриИзмененииСчета(Счет, Объект, ПоляОбъекта, ЭтоТаблица = Ложь, ЗначенияСубконто = Неопределено, СкрыватьСубконто = Истина) Экспорт
	
	ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	Для Индекс = 1 По 3 Цикл
		Если ПоляОбъекта.Свойство("Субконто" + Индекс) Тогда
			Если Индекс <= ДанныеСчета.КоличествоСубконто Тогда
				ТипЗначенияСубконто = ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"];
				ЗначениеСубконто = ТипЗначенияСубконто.ПривестиЗначение(Объект[ПоляОбъекта["Субконто" + Индекс]]);
				ЗначениеСубконтоПоУмолчанию = ?(ЗначенияСубконто = Неопределено, ЗначенияСубконто, ЗначенияСубконто.Получить(ДанныеСчета["ВидСубконто" + Индекс]));
				Если ЗначениеЗаполнено(ЗначениеСубконто) ИЛИ (НЕ ЗначениеЗаполнено(ЗначениеСубконтоПоУмолчанию)) Тогда
					Объект[ПоляОбъекта["Субконто" + Индекс]] = ЗначениеСубконто;
				Иначе
					Объект[ПоляОбъекта["Субконто" + Индекс]] = ЗначениеСубконтоПоУмолчанию;
				КонецЕсли;
			Иначе 
				Объект[ПоляОбъекта["Субконто" + Индекс]] = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭтоТаблица Тогда
		УстановитьДоступностьСубконто(Счет, Объект, ПоляОбъекта, СкрыватьСубконто);
	КонецЕсли;
	
КонецПроцедуры

// Процедура установки доступности субконто в зависимости от выбранного счета
//	Счет			 - <План счетов> - Счет, для которого необходимо настроить тип и видимость субконто
//	Объект			 - <Управляемая форма> ИЛИ <Строка табличной части> - Объект, который содержит ПоляФормы
//	ПоляОбъекта		 - <Структура> - Ключи, которой Субконто1, Субконто2, Субконто3, 
//									 а значения имена соответствующих полей на форме (поля субконто)
//	СкрыватьСубконто - <Булево>		 - Признак того, нужно ли для этой формы дополнительно скрывать субконто, влияет на выполнении функции НужноСкрытьСубконто
//
Процедура УстановитьДоступностьСубконто(Счет, Объект, ПоляОбъекта, СкрыватьСубконто = Истина) Экспорт
	
	ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	
	Для Индекс = 1 По 3 Цикл
		Если ПоляОбъекта.Свойство("Субконто" + Индекс) Тогда
			ТипЗначенияСубконто = ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"];
			Если НужноСкрытьСубконто(СкрыватьСубконто, ТипЗначенияСубконто) Тогда
				Объект[ПоляОбъекта["Субконто" + Индекс] + "Доступность"] = Ложь;
			Иначе
				Объект[ПоляОбъекта["Субконто" + Индекс] + "Доступность"] = (Индекс <= ДанныеСчета.КоличествоСубконто);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПоляОбъекта.Свойство("Валютный") Тогда
		Объект[ПоляОбъекта["Валютный"] + "Доступность"] = ДанныеСчета.Валютный;
	КонецЕсли;
	
	Если ПоляОбъекта.Свойство("Количественный") Тогда
		Объект[ПоляОбъекта["Количественный"] + "Доступность"] = ДанныеСчета.Количественный;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Объект, ШаблонИмяПоляОбъекта, ШаблонИмяЭлементаФормы, СписокПараметров) Экспорт
	
	ВидыПараметров = Новый Соответствие;
	ВидыПараметров.Вставить(Тип("СправочникСсылка.БанковскиеСчета"), "БанковскийСчет");
	ВидыПараметров.Вставить(Тип("СправочникСсылка.Кассы"), "Касса");
	ВидыПараметров.Вставить(Тип("СправочникСсылка.ПодразделенияОрганизаций"), "Подразделение");
	ВидыПараметров.Вставить(Тип("СправочникСсылка.ДоговорыКонтрагентов"), "Договор");
	ВидыПараметров.Вставить(Тип("СправочникСсылка.Субконто"), "Субконто");
	
	ОчищатьСвязанныеСубконто = Ложь;
	ТипыСвязанныхСубконто    = Неопределено;
	Если ТипЗнч(Форма.ТекущийЭлемент) = Тип("ТаблицаФормы") Тогда
		ТекущийЭлемент = Форма.ТекущийЭлемент.ТекущийЭлемент;
	Иначе
		ТекущийЭлемент = Форма.ТекущийЭлемент;
	КонецЕсли;
	ИмяТекущегоЭлемента = ?(ТипЗнч(ТекущийЭлемент) = Тип("ПолеФормы"), ТекущийЭлемент.Имя, "");
	
	Для Индекс = 1 По 3 Цикл
		ИмяЭлементаФормы = СтрЗаменить(ШаблонИмяЭлементаФормы, "%Индекс%", Индекс);
		ИмяПоляОбъекта   = СтрЗаменить(ШаблонИмяПоляОбъекта  , "%Индекс%", Индекс);
		ТипПоляОбъекта   = ТипЗнч(Объект[ИмяПоляОбъекта]);
		
		ВидПараметра = ВидыПараметров[ТипПоляОбъекта];
		
		Если ВидПараметра <> Неопределено Тогда
			
			МассивПараметров = Новый Массив();
			Если ВидПараметра = "Договор" Тогда
				Если СписокПараметров.Свойство("Организация") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Организация", СписокПараметров.Организация));
				КонецЕсли;
				Если СписокПараметров.Свойство("Контрагент") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", СписокПараметров.Контрагент));
				КонецЕсли;
				Если СписокПараметров.Свойство("Валюта") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВалютаРасчетов", СписокПараметров.Валюта));
				КонецЕсли;
			ИначеЕсли ВидПараметра = "БанковскийСчет" Тогда
				Если СписокПараметров.Свойство("Организация") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", СписокПараметров.Организация));
				КонецЕсли;	
				Если СписокПараметров.Свойство("Контрагент") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", СписокПараметров.Контрагент));
				КонецЕсли;
				Если СписокПараметров.Свойство("ВалютаДенежныхСредств") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВалютаДенежныхСредств", СписокПараметров.ВалютаДенежныхСредств));
				КонецЕсли;
			ИначеЕсли ВидПараметра = "Касса" Тогда
				МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", СписокПараметров.Организация));
				Если СписокПараметров.Свойство("ВалютаДенежныхСредств") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВалютаДенежныхСредств", СписокПараметров.ВалютаДенежныхСредств));
				КонецЕсли;
			ИначеЕсли ВидПараметра = "Субконто"
				И СписокПараметров.Свойство("СчетУчета") Тогда
				СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СписокПараметров.СчетУчета);
				МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", СвойстваСчета["ВидСубконто" + Индекс]));
			ИначеЕсли ВидПараметра = "Подразделение" Тогда
				МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", СписокПараметров.Организация));
			КонецЕсли;
			
			Если МассивПараметров.Количество() > 0 Тогда
				ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
				Форма.Элементы[ИмяЭлементаФормы].ПараметрыВыбора = ПараметрыВыбора;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОчищатьСвязанныеСубконто 
			И ЗначениеЗаполнено(Объект[ИмяПоляОбъекта]) Тогда
			
			Если ТипыСвязанныхСубконто = Неопределено Тогда
				ВсеТипыСвязанныхСубконто = БухгалтерскийУчетВызовСервераПовтИсп.ВсеТипыСвязанныхСубконто();
				ТипыСвязанныхСубконто    = Новый ОписаниеТипов(Новый Массив);
				Для каждого Параметр Из СписокПараметров Цикл
					Если ВсеТипыСвязанныхСубконто[Параметр.Ключ] <> Неопределено Тогда
						ТипыСвязанныхСубконто = Новый ОписаниеТипов(ТипыСвязанныхСубконто, 
							ВсеТипыСвязанныхСубконто[Параметр.Ключ].Типы());
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если ТипыСвязанныхСубконто.СодержитТип(ТипПоляОбъекта) Тогда
				Объект[ИмяПоляОбъекта] = Новый (ТипПоляОбъекта);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИмяТекущегоЭлемента = ИмяЭлементаФормы Тогда
			ОчищатьСвязанныеСубконто = Истина; // Очищаются только субконто с номером больше текущего
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура изменяет параметры выбора для ПоляВвода управляемой формы:
//
// Параметры:
//	ЭлементФормыСчет - ПолеВвода управляемой формы, для которого изменяется параметр выбора 
//  МассивСчетов                 - <Массив> ИЛИ <Неопределено> - счета, которыми нужно ограничить список. 
//	                                   Если не заполнено - ограничения не будет
//  ОтборПоПризнакуВалютный      - <Булево> ИЛИ <Неопределено> - Значение для установки соответствующего параметра выбора. 
//                                     Если неопределено, параметр выбора не устанавливается.
//  ОтборПоПризнакуЗабалансовый   - <Булево> ИЛИ <Неопределено> - Значение для установки соответствующего параметра выбора. 
//                                     Если неопределено, параметр выбора не устанавливается.
//  ОтборПоПризнакуСчетГруппа    - <Булево> ИЛИ <Неопределено> - Значение для установки соответствующего параметра выбора. 
//                                     Если неопределено, параметр выбора не устанавливается.
//
//
Процедура ИзменитьПараметрыВыбораСчета(ЭлементФормыСчет, МассивСчетов, ОтборПоПризнакуВалютный = Неопределено, ОтборПоПризнакуЗабалансовый = Неопределено, ОтборПоПризнакуСчетГруппа = Ложь) Экспорт
	
	МассивОтборов = Новый Массив;
	Если ОтборПоПризнакуСчетГруппа <> Неопределено Тогда
		МассивОтборов.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", ОтборПоПризнакуСчетГруппа));
	КонецЕсли;
	
	Если ОтборПоПризнакуВалютный <> Неопределено Тогда
		МассивОтборов.Добавить(Новый ПараметрВыбора("Отбор.Валютный", ОтборПоПризнакуВалютный));
	КонецЕсли;
	
	Если ОтборПоПризнакуЗабалансовый <> Неопределено Тогда
		МассивОтборов.Добавить(Новый ПараметрВыбора("Отбор.Забалансовый", ОтборПоПризнакуЗабалансовый));
	КонецЕсли;
	
	Если МассивСчетов <> Неопределено И МассивСчетов.Количество() > 0 Тогда
		МассивОтборов.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(МассивСчетов)));
	КонецЕсли;
	
	ПараметрыВыбора = Новый ФиксированныйМассив(МассивОтборов);
	ЭлементФормыСчет.ПараметрыВыбора = ПараметрыВыбора;
	
КонецПроцедуры

Функция ТипСумма() Экспорт
	
	Возврат Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, РазрядностьДробнойЧастиСумм()));
	
КонецФункции

Функция РазрядностьДробнойЧастиСумм() Экспорт
	
	Возврат 2;
	
КонецФункции

Функция ПолучитьКодыПравовойФормы() Экспорт 

	КодыПравовойФормы = Новый Массив;
	КодыПравовойФормы.Добавить("ОсОО");
	КодыПравовойФормы.Добавить("ОО");
	КодыПравовойФормы.Добавить("ОАО");
	КодыПравовойФормы.Добавить("ЗАО");
	
	Возврат КодыПравовойФормы;
	
КонецФункции // ПолучитьКодыПравовойФормы()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьДоступностьСубконтоСтроки(СтрокаТаблицы, ПараметрыУстановки)
	
	ПоляОбъекта  = ПараметрыУстановки.ПоляОбъекта;
	
	ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы[ПоляОбъекта.СчетУчета]);
	
	Для Индекс = 1 По 3 Цикл
		Если ЗначениеЗаполнено(ПоляОбъекта["Субконто" + Индекс]) Тогда
			ТипЗначенияСубконто = ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"];
			СтрокаТаблицы[ПоляОбъекта["Субконто" + Индекс] + "Доступность"] = ДанныеСчета.КоличествоСубконто >= Индекс
				И НЕ НужноСкрытьСубконто(ПараметрыУстановки.СкрыватьСубконто, ТипЗначенияСубконто);
		КонецЕсли;
	КонецЦикла;
	
	Если ПоляОбъекта.Свойство("Валютный")
		И ЗначениеЗаполнено(ПоляОбъекта.Валютный) Тогда
		СтрокаТаблицы[ПоляОбъекта.Валютный] = ДанныеСчета.Валютный;
	КонецЕсли;
	
	Если ПоляОбъекта.Свойство("Количественный")
		И ЗначениеЗаполнено(ПоляОбъекта.Количественный) Тогда
		СтрокаТаблицы[ПоляОбъекта.Количественный] = ДанныеСчета.Количественный;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметрыВыбораСубконто(Форма, Объект, ПараметрыУстановки, ДанныеОбъекта)
	
	Элементы = Форма.Элементы;
	
	ПоляОбъекта = ПараметрыУстановки.ПоляОбъекта;
	ПоляФормы   = ПараметрыУстановки.ПоляФормы;
	
	ВидыПараметров = Новый Соответствие;
	ВидыПараметров.Вставить(Тип("СправочникСсылка.БанковскиеСчета"), "БанковскийСчет");
	ВидыПараметров.Вставить(Тип("СправочникСсылка.Кассы"), "Касса");
	ВидыПараметров.Вставить(Тип("СправочникСсылка.ПодразделенияОрганизаций"), "Подразделение");
	ВидыПараметров.Вставить(Тип("СправочникСсылка.ДоговорыКонтрагентов"), "Договор");
	ВидыПараметров.Вставить(Тип("СправочникСсылка.Субконто"), "Субконто");
	
	Для Индекс = 1 По 3 Цикл
		Если НЕ ЗначениеЗаполнено(ПоляФормы["Субконто" + Индекс])
			ИЛИ НЕ ЗначениеЗаполнено(ПоляОбъекта["Субконто" + Индекс]) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементФормыСубконто = Элементы.Найти(ПоляФормы["Субконто" + Индекс]);
		Если ЭлементФормыСубконто = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТипСубконто   = ТипЗнч(Объект[ПоляОбъекта["Субконто" + Индекс]]);
		ВидПараметров = ВидыПараметров[ТипСубконто];
		Если ВидПараметров <> Неопределено Тогда
			
			МассивПараметров = Новый Массив();
			Если ВидПараметров = "Договор" Тогда
				Если ДанныеОбъекта.Свойство("Организация") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Организация", ДанныеОбъекта.Организация));
				КонецЕсли;
				Если ДанныеОбъекта.Свойство("Контрагент") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", ДанныеОбъекта.Контрагент));
				КонецЕсли;
				Если ДанныеОбъекта.Свойство("Валюта") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВалютаРасчетов", ДанныеОбъекта.Валюта));
				КонецЕсли;
			ИначеЕсли ВидПараметров = "БанковскийСчет" Тогда
				Если ДанныеОбъекта.Свойство("Организация") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", ДанныеОбъекта.Организация));
				КонецЕсли;
				Если ДанныеОбъекта.Свойство("Контрагент") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", ДанныеОбъекта.Контрагент));
				КонецЕсли;
				Если ДанныеОбъекта.Свойство("ВалютаДенежныхСредств") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВалютаДенежныхСредств", ДанныеОбъекта.ВалютаДенежныхСредств));
				КонецЕсли;
			ИначеЕсли ВидПараметров = "Касса" Тогда
				Если ДанныеОбъекта.Свойство("Организация") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", ДанныеОбъекта.Организация));
				КонецЕсли;
				Если ДанныеОбъекта.Свойство("ВалютаДенежныхСредств") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВалютаДенежныхСредств", ДанныеОбъекта.ВалютаДенежныхСредств));
				КонецЕсли;
			ИначеЕсли ВидПараметров = "Субконто" И ДанныеОбъекта.Свойство("СчетУчета") Тогда
				СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеОбъекта.СчетУчета);
				МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", СвойстваСчета["ВидСубконто" + Индекс]));
			ИначеЕсли ВидПараметров = "Подразделение" Тогда
				Если ДанныеОбъекта.Свойство("Организация") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", ДанныеОбъекта.Организация));
				КонецЕсли;
			КонецЕсли;
			
			Если МассивПараметров.Количество() > 0 Тогда
				ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
				ЭлементФормыСубконто.ПараметрыВыбора = ПараметрыВыбора;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьСубконтоПриИзмененииСубконто(Объект, НомерСубконто, ПараметрыУстановки, ДанныеОбъекта)
	
	ПоляОбъекта  = ПараметрыУстановки.ПоляОбъекта;
	
	ВсеТипыСвязанныхСубконто = БухгалтерскийУчетВызовСервераПовтИсп.ВсеТипыСвязанныхСубконто();
	ТипыСубконтоДляОчистки   = Новый ОписаниеТипов(Новый Массив);
	Для каждого СвойствоОбъекта Из ДанныеОбъекта Цикл
		СвязанныеТипы = ВсеТипыСвязанныхСубконто[СвойствоОбъекта.Ключ];
		Если СвязанныеТипы <> Неопределено Тогда
			ТипыСубконтоДляОчистки = Новый ОписаниеТипов(ТипыСубконтоДляОчистки, СвязанныеТипы.Типы());
		КонецЕсли;
	КонецЦикла;
	
	Для Индекс = НомерСубконто + 1 По 3 Цикл
		
		Если НЕ ЗначениеЗаполнено(ПоляОбъекта["Субконто" + Индекс]) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяСубконто = ПоляОбъекта["Субконто" + Индекс];
		ТипСубконто = ТипЗнч(Объект[ИмяСубконто]);
		
		Если ЗначениеЗаполнено(Объект[ИмяСубконто])
			И ТипыСубконтоДляОчистки.СодержитТип(ТипСубконто) Тогда
			Объект[ИмяСубконто] = Новый (ТипСубконто);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьСубконтоПриИзмененииОрганизации(Объект, ПараметрыУстановки)
	
	ВсеТипыСвязанныхСубконто   = БухгалтерскийУчетВызовСервераПовтИсп.ВсеТипыСвязанныхСубконто();
	ТипыСвязанныеСОрганизацией = ВсеТипыСвязанныхСубконто["Организация"];
	
	ПоляОбъекта = ПараметрыУстановки.ПоляОбъекта;
	
	Для каждого ПолеОбъекта Из ПоляОбъекта Цикл
		ИмяПоля = ПолеОбъекта.Значение;
		Если ЗначениеЗаполнено(ИмяПоля)
			И ЗначениеЗаполнено(Объект[ИмяПоля]) Тогда
			ТипПоля = ТипЗнч(Объект[ИмяПоля]);
			Если ТипыСвязанныеСОрганизацией.СодержитТип(ТипПоля) Тогда
				Объект[ИмяПоля] = Новый (ТипПоля);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСвойстваСубконтоШапки(Форма, Объект, ПараметрыУстановки)
	
	Элементы = Форма.Элементы;
	
	ПоляОбъекта = ПараметрыУстановки.ПоляОбъекта;
	ПоляФормы   = ПараметрыУстановки.ПоляФормы;
	
	ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект[ПоляОбъекта.СчетУчета]);
	
	Для Индекс = 1 По 3 Цикл
		Если НЕ ЗначениеЗаполнено(ПоляФормы["Субконто" + Индекс]) Тогда
			Продолжить;
		КонецЕсли;
		ПолеСубконто = Элементы.Найти(ПоляФормы["Субконто" + Индекс]);
		Если ПолеСубконто <> Неопределено Тогда
			ПоказатьСубконто = ДанныеСчета.КоличествоСубконто >= Индекс
				И НЕ НужноСкрытьСубконто(ПараметрыУстановки.СкрыватьСубконто, ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"]);
			ПолеСубконто.Видимость = ПоказатьСубконто;
			Если ПоказатьСубконто Тогда
				ПолеСубконто.Заголовок = ДанныеСчета["ВидСубконто" + Индекс + "Наименование"];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСвойстваСубконтоСтроки(Форма, СтрокаТаблицы, ПараметрыУстановки)
	
	Элементы = Форма.Элементы;
	
	ПоляОбъекта = ПараметрыУстановки.ПоляОбъекта;
	ПоляФормы   = ПараметрыУстановки.ПоляФормы;
	
	ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы[ПоляОбъекта.СчетУчета]);
	
	Для Индекс = 1 По ДанныеСчета.КоличествоСубконто Цикл
		Если ЗначениеЗаполнено(ПоляФормы["Субконто" + Индекс]) Тогда
			ПолеСубконто = Элементы[ПоляФормы["Субконто" + Индекс]];
			ПолеСубконто.ПодсказкаВвода = ДанныеСчета["ВидСубконто" + Индекс + "Наименование"];
			ПолеСубконто.ОграничениеТипа = ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"];
			
			// Формирование значения.
			ИмяПоля = ПараметрыУстановки.ПоляОбъекта["Субконто" + Индекс];			
			ЗначениеСубконто = ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"].ПривестиЗначение(СтрокаТаблицы[ИмяПоля]);
			СтрокаТаблицы[ИмяПоля] = ЗначениеСубконто;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПредопределенныеЗначенияСубконтоПоУмолчанию()
	
	ЗначенияПоУмолчанию = Новый Соответствие;
	
	ЗначенияПоУмолчанию.Вставить(
		ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы"),
		БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа());
		
	Возврат ЗначенияПоУмолчанию;
	
КонецФункции

Процедура УстановитьЗначенияСубконтоПоУмолчанию(Объект, ПараметрыУстановки)
	
	ПоляОбъекта  = ПараметрыУстановки.ПоляОбъекта;
	ДопРеквизиты = ПараметрыУстановки.ДопРеквизиты;
	
	ЗначенияПоУмолчанию = ПредопределенныеЗначенияСубконтоПоУмолчанию();
	Для Каждого КлючИЗначение Из ПараметрыУстановки.ЗначенияПоУмолчанию Цикл
		ЗначенияПоУмолчанию.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект[ПоляОбъекта.СчетУчета]);
	
	Для Индекс = 1 По 3 Цикл
		
		ИмяПоля = ПоляОбъекта["Субконто" + Индекс];
		Если НЕ ЗначениеЗаполнено(ИмяПоля) 
			ИЛИ ЗначениеЗаполнено(Объект[ИмяПоля]) Тогда
			Продолжить;
		КонецЕсли;
		
		ТипСубконто = ТипЗнч(Объект[ИмяПоля]);
		ЗначениеПоУмолчанию = ЗначенияПоУмолчанию[ДанныеСчета["ВидСубконто" + Индекс]];
		Если ЗначениеЗаполнено(ЗначениеПоУмолчанию) Тогда
			Объект[ИмяПоля] = ЗначениеПоУмолчанию;
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

// Функция определяет, нужно ли скрывать данное субконто
//
// Параметры:
//	СкрыватьСубконто - Булево - - Признак того, нужно ли для этой формы дополнительно скрывать субконто
//	ТипЗначенияСубконто - Описание типов 
//
Функция НужноСкрытьСубконто(СкрыватьСубконто, ТипЗначенияСубконто)
	
	Если СкрыватьСубконто Тогда
		Возврат ТипЗначенияСубконто = Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы")
			И БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу();
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьВалютуСтрокиПриИзмененииСубконто(СтрокаТаблицы, ПараметрыУстановки, ДанныеОбъекта)
	Если ПараметрыУстановки.ЗаполнятьВалютуИзСубконто 
		И СтрокаТаблицы.Свойство("Валюта") Тогда 
		
		СтрокаТаблицы.Валюта = ДанныеОбъекта.ВалютаСубконто;
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти
