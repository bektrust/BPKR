#Область ПрограммныйИнтерфейс

#Область СтатусыДокументов

// Возвращает право на редактирование статусов документов
//
// Возвращаемое значение:
//  Булево
//
Функция ПравоИзмененияСтатусовДокументов(МетаданныеДокумента) Экспорт
	
	// Право на изменение статусов определяется правом на редактирование данных документа.
	
	Возврат ПравоДоступа("Редактирование", МетаданныеДокумента);
	
КонецФункции

// Возвращает право на просмотр статусов документов
//
// Возвращаемое значение:
//  Булево
//
Функция ПравоЧтенияСтатусовДокументов() Экспорт
	
	Возврат ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.СтатусыДокументов);
	
КонецФункции

// Формирует движения по регистру СтатусыДокументов
//
// Параметры:
//   ТаблицаСтатусов - ТаблицаЗначений - описание см. в ПодготовитьПараметрыСтатусовДокументов()
//   ТаблицаРеквизитов - ТаблицаЗначений - описание см. в ПодготовитьПараметрыСтатусовДокументов()
//
Процедура СформироватьДвиженияСтатусовДокументов(ТаблицаСтатусов, ТаблицаРеквизитов) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов)
	 Или Не ЗначениеЗаполнено(ТаблицаСтатусов) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыСтатусовДокументов(ТаблицаСтатусов, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаСтатуса Из Параметры.СтатусыДокументов Цикл
		
		// При записи набора, удаляем статусы, относящиеся к другой организации
		НаборЗаписей = РегистрыСведений.СтатусыДокументов.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Документ.Установить(СтрокаСтатуса.Документ);
		
		Запись = НаборЗаписей.Добавить();
		Запись.Организация = Реквизиты.Организация;
		Запись.Документ    = СтрокаСтатуса.Документ;
		Запись.Статус      = СтрокаСтатуса.Статус;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьПараметрыСтатусовДокументов(ТаблицаСтатусов, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СтатусыДокументов
	
	СписокОбязательныхКолонок = ""
		+ "Документ," // <ДокументСсылка.*> - документ
		+ "Статус"; // <ПеречислениеСсылка.*> - статус
	
	Параметры.Вставить("СтатусыДокументов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСтатусов, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Организация"; // <СправочникСсылка.Организации> - организация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

// Добавляет общее условное оформление форм списков документа СчетНаОплатуПокупателю
//
// Параметры:
//   УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - настройки условного оформления формы
//
Процедура УстановитьУсловноеОформлениеСтатусовСчетовНаОплату(УсловноеОформление) Экспорт
	
	// Вся строка серым, если счет отменен
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Список");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Оплата", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтатусОплатыСчета.Отменен);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ДосьеВторостепеннаяНадписьЦвет);
	
	// Статус оплаты красным, если не оплачен, но хотя бы частично отгружен
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Оплата");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Оплата", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтатусОплатыСчета.НеОплачен);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
	// Статус оплаты красным, если частично оплачен
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Оплата");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Оплата", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтатусОплатыСчета.ОплаченЧастично);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
	// Статус оплаты зеленым, если оплачен
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Оплата");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Оплата", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтатусОплатыСчета.Оплачен);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ЗеленыйЛес);
	
	// Статус отгузки красным, если не отгружен, но хотя бы частично оплачен
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Отгрузка");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Оплата", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СтатусОплатыСчета.Отменен);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Оплата", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СтатусОплатыСчета.НеОплачен);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
	// Статус отгрузки красным, если частично отгружен
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Отгрузка");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Оплата", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СтатусОплатыСчета.Отменен);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
	// Статус отгрузки зеленым, если отгружен
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Отгрузка");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Оплата", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СтатусОплатыСчета.Отменен);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ЗеленыйЛес);
	
КонецПроцедуры

// Добавляет общее условное оформление форм списков документа СчетНаОплатуПоставщика.
//
// Параметры:
//   УсловноеОформлениеСписка - УсловноеОформлениеКомпоновкиДанных - настройки условного оформления динамического списка.
//
Процедура УстановитьУсловноеОформлениеСтатусовСчетовНаОплатуПоставщика(УсловноеОформлениеСписка) Экспорт
	
	// Вся строка серым, если счет отменен.
	
	ЭлементУО = УсловноеОформлениеСписка.Элементы.Добавить();
	
	//КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Список");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Оплата", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтатусОплатыСчета.Отменен);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ДосьеВторостепеннаяНадписьЦвет);
	
	// Статус оплаты красным, если не оплачен, но хотя бы частично получен.
	
	ЭлементУО = УсловноеОформлениеСписка.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Оплата");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Оплата", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтатусОплатыСчета.НеОплачен);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
	// Статус оплаты красным, если частично оплачен.
	
	ЭлементУО = УсловноеОформлениеСписка.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Оплата");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Оплата", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтатусОплатыСчета.ОплаченЧастично);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
	// Статус оплаты зеленым, если оплачен.
	
	ЭлементУО = УсловноеОформлениеСписка.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Оплата");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Оплата", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтатусОплатыСчета.Оплачен);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ЗеленыйЛес);
	
	// Статус поступления красным, если не получен, но хотя бы частично оплачен.
	
	ЭлементУО = УсловноеОформлениеСписка.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Поступление");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Оплата", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СтатусОплатыСчета.Отменен);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Оплата", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СтатусОплатыСчета.НеОплачен);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
	// Статус поступления красным, если частично получен.
	
	ЭлементУО = УсловноеОформлениеСписка.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Поступление");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Оплата", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СтатусОплатыСчета.Отменен);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
	// Статус поступления зеленым, если получен.
	
	ЭлементУО = УсловноеОформлениеСписка.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Поступление");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Оплата", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СтатусОплатыСчета.Отменен);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ЗеленыйЛес);
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеСтатусовСчетовФактур(УсловноеОформлениеСписка) Экспорт
	
	ЭлементУО = УсловноеОформлениеСписка.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетФактура");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ГруппаОтбора1.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора2,
		"Проведен", ВидСравненияКомпоновкиДанных.Равно,
		Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти