// Конвертация БП от 05.01.2022 12:35:38
#Область ПрограммныйИнтерфейс

// Процедура, выполняемая перед началом конвертации данных.
//
// Параметры:
//   КомпонентыОбмена - Структура - структура компонентов обмена.
//
Процедура ПередКонвертацией(КомпонентыОбмена) Экспорт

	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
	//ВидыЦенНоменклатуры = Новый СписокЗначений;
	//ВидыЦенНоменклатуры.ЗагрузитьЗначения(КомпонентыОбмена.УзелКорреспондента.ВидыЦенНоменклатуры.ВыгрузитьКолонку("ВидЦенНоменклатуры"));
	//ПараметрыКонвертации.Вставить("ВидыЦенНоменклатуры", ВидыЦенНоменклатуры);
	
	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.ЗагрузитьЗначения(КомпонентыОбмена.УзелКорреспондента.Организации.ВыгрузитьКолонку("Организация"));
	ПараметрыКонвертации.Вставить("Организации", СписокОрганизаций);
	ПараметрыКонвертации.Вставить("Касса", КомпонентыОбмена.УзелКорреспондента.Касса);
	ПараметрыКонвертации.Вставить("ВыгрузкаТоваровБезЦены", КомпонентыОбмена.УзелКорреспондента.ВыгрузкаТоваровБезЦены);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПараметрыРозничныхПродаж.Склад КАК Склад,
	|	ПараметрыРозничныхПродаж.Склад.ТипЦенРозничнойТорговли КАК ТипЦенРозничнойТорговли,
	|	ПараметрыРозничныхПродаж.Контрагент КАК Контрагент,
	|	ПараметрыРозничныхПродаж.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПараметрыРозничныхПродаж.Касса КАК Касса,
	|	ПараметрыРозничныхПродаж.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
	|ИЗ
	|	РегистрСведений.ПараметрыРозничныхПродаж КАК ПараметрыРозничныхПродаж
	|ГДЕ
	|	ПараметрыРозничныхПродаж.Организация В (&Организация) И ПараметрыРозничныхПродаж.Касса = &Касса";
	
	Запрос.УстановитьПараметр("Организация", СписокОрганизаций);
	Запрос.УстановитьПараметр("Касса", ПараметрыКонвертации.Касса);
	
	Если Не Справочники.Организации.ИспользуетсяНесколькоОрганизаций() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПараметрыРозничныхПродаж.Организация В (&Организация)", "Истина");
	КонецЕсли;
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыКонвертации, Выборка);
		ПараметрыКонвертации.Вставить("ВидыЦенНоменклатуры", Выборка.ТипЦенРозничнойТорговли);
	КонецЕсли;
КонецПроцедуры


// Процедура, выполняемая после выполнения конвертации данных.
//
// Параметры:
//   КомпонентыОбмена - Структура - структура компонентов обмена.
//
Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт

	
КонецПроцедуры


// Процедура, выполняемая перед началом отложенного заполнения объектов.
//
// Параметры:
//   КомпонентыОбмена - Структура - структура компонентов обмена.
//
Процедура ПередОтложеннымЗаполнением(КомпонентыОбмена) Экспорт

	
КонецПроцедуры

// Возвращает версию формата менеджера обмена.
// Возвращаемое значение:
//  Строка - номер версии.
Функция ВерсияФорматаМенеджераОбмена() Экспорт
    Возврат "2";
КонецФункции

// Заполняет таблицу правил обработки данных.
//
// Параметры:
//  НаправлениеОбмена - Строка - "Отправка" либо "Получение".
//  ПравилаОбработкиДанных - ТаблицаЗначений - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных) Экспорт

	Если НаправлениеОбмена = "Отправка" Тогда
		Если ПравилаОбработкиДанных.Колонки.Найти("ОчисткаДанных") = Неопределено Тогда
			ПравилаОбработкиДанных.Колонки.Добавить("ОчисткаДанных");
		КонецЕсли;
		ДобавитьПОД_Справочник_КлассификаторЕдиницИзмерения(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаОбработкиДанных);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПОД_Документ_ВозвратТоваровПоставщику_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетОРозничныхПродажах_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеТоваровУслуг_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ЕдиницыИзмерений_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Контрагенты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_КонтрагентыГруппа(ПравилаОбработкиДанных);
		ДобавитьПОД_Номенклатура_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_НоменклатураГруппа(ПравилаОбработкиДанных);
		ДобавитьПОД_Склады_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_СтраныМира_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ТипыЦенНоменклатуры_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ТНВЭД_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ФизическиеЛица_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ФизическиеЛицаГруппа_Получение(ПравилаОбработкиДанных);
	КонецЕсли;
КонецПроцедуры
// Заполняет таблицу правил конвертации объектов.
//
// Параметры:
//  НаправлениеОбмена - Строка - "Отправка" либо "Получение".
//  ПравилаКонвертации - ТаблицаЗначений - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации) Экспорт


	Если НаправлениеОбмена = "Отправка" Тогда
		ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаКонвертации);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеТоваровУслуг_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КонтрагентыГруппа(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НоменклатураГруппа(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Склады(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтраныМира(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ТипыЦенНоменклатуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ТНВЭД(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФизическиеЛица(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФизическиеЛицаГруппа(ПравилаКонвертации);
	КонецЕсли;
	ДобавитьПКО_Справочник_ЕдиницыИзмерений(ПравилаКонвертации);
КонецПроцедуры
// Заполняет таблицу правил конвертации предопределенных данных.
//
// Параметры:
//  НаправлениеОбмена - Строка - "Отправка" либо "Получение".
//  ПравилаКонвертации - ТаблицаЗначений - таблица значений, в которую будут добавлены правила. 
Процедура ЗаполнитьПравилаКонвертацииПредопределенныхДанных(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Получение" Тогда
		// Перечисление_ПолФизическогоЛица.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_ПолФизическогоЛица";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ПолФизическогоЛица;
		ПравилоКонвертации.ТипXDTO   = "Пол";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("Женский", Перечисления.ПолФизическогоЛица.Женский);
		ЗначенияДляПолучения.Вставить("Мужской", Перечисления.ПолФизическогоЛица.Мужской);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// ЮридическоеФизическоеЛицо_Получение.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ЮридическоеФизическоеЛицо_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ЮридическоеФизическоеЛицо;
		ПравилоКонвертации.ТипXDTO   = "ЮридическоеФизическоеЛицо";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("ФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
		ЗначенияДляПолучения.Вставить("ЮридическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	КонецЕсли;
КонецПроцедуры

// Заполняет параметры конвертации.
//
// Параметры:
//  ПараметрыКонвертации - Структура - структура, в которую добавляются параметры конвертации.
Процедура ЗаполнитьПараметрыКонвертации(ПараметрыКонвертации) Экспорт
	ПараметрыКонвертации.Вставить("ВидыЦенНоменклатуры");
	ПараметрыКонвертации.Вставить("Организации");
	ПараметрыКонвертации.Вставить("РозничныйКонтрагент");
	ПараметрыКонвертации.Вставить("ДоговорКонтрагента");
	ПараметрыКонвертации.Вставить("Касса");
	ПараметрыКонвертации.Вставить("Склад");
	ПараметрыКонвертации.Вставить("СтатьяДвиженияДенежныхСредств");
	ПараметрыКонвертации.Вставить("ВыгрузкаТоваровБезЦены");
КонецПроцедуры

// Процедура-обертка, выполняет запуск указанной в параметрах процедуры модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяПроцедуры - Строка - имя процедуры этого модуля.
//  Параметры - Структура - структура, содержащая передаваемые параметры.
Процедура ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры) Экспорт
	Если ИмяПроцедуры = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ТипыЦенНоменклатуры_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ТипыЦенНоменклатуры_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ФизическиеЛица_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ФизическиеЛица_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Номенклатура_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Склады_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Склады_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "СоздатьДоговорКонтрагента" Тогда 
		СоздатьДоговорКонтрагента(
			Параметры.Объект);
	КонецЕсли;
КонецПроцедуры


#КонецОбласти
#Область СлужебныеПроцедурыИФункции
#Область Справочная_информация_Базовые_классификаторы
Процедура ДобавитьПКО_Справочник_СтраныМира(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтраныМира";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СтраныМира;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СтраныМира";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Код");
	ДобавитьПКС(СвойстваШапки, "", "Наименование");
	ДобавитьПКС(СвойстваШапки, "", "КодАльфа2");
	ДобавитьПКС(СвойстваШапки, "", "КодАльфа3");
	ДобавитьПКС(СвойстваШапки, "", "НаименованиеПолное");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры


#КонецОбласти
#Область Справочная_информация_Номенклатура
Процедура ДобавитьПКО_Справочник_ЕдиницыИзмерений(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ЕдиницыИзмерений";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КлассификаторЕдиницИзмерения;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ЕдиницыИзмерения";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                   "ДанныеКлассификатора", 1);
	ДобавитьПКС(СвойстваШапки, "Код",                "Код");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "НаименованиеПолное");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Номенклатура(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Номенклатура";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Номенклатура";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Номенклатура_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Артикул");
	ДобавитьПКС(СвойстваШапки, "", "ЕдиницаИзмерения", , "Справочник_ЕдиницыИзмерений");
	ДобавитьПКС(СвойстваШапки, "", "Наименование");
	ДобавитьПКС(СвойстваШапки, "", "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "", "Группа", , "Справочник_НоменклатураГруппа");
	ДобавитьПКС(СвойстваШапки, "", "СтранаПроисхождения", , "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваШапки, "", "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "", "", 1);
	ДобавитьПКС(СвойстваШапки, "", "", 1);
	ДобавитьПКС(СвойстваШапки, "", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Склады(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Склады";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Склады;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Склады";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Склады_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                        "ТипСклада");
	ДобавитьПКС(СвойстваШапки, "Наименование",            "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",                "СкладГруппа");
	ДобавитьПКС(СвойстваШапки, "ТипЦенРозничнойТорговли", "ТипЦенРозничнойТорговли", , "Справочник_ТипыЦенНоменклатуры");

КонецПроцедуры


#КонецОбласти
Процедура ДобавитьПОД_Документ_ВозвратТоваровПоставщику_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратТоваровПоставщику_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ВозвратТоваровПоставщику";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровПоставщику_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОтчетОРозничныхПродажах_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетОРозничныхПродажах_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОтчетОРозничныхПродажах";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетОРозничныхПродажах_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПоступлениеТоваровУслуг_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПоступлениеТоваровУслуг_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПоступлениеТоваровУслуг";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеТоваровУслуг_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_ЕдиницыИзмерений_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ЕдиницыИзмерений_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ЕдиницыИзмерения";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЕдиницыИзмерений");
КонецПроцедуры

Процедура ДобавитьПОД_Контрагенты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Контрагенты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Контрагенты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_КонтрагентыГруппа(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "КонтрагентыГруппа";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.КонтрагентыГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтрагентыГруппа");
КонецПроцедуры

Процедура ДобавитьПОД_Номенклатура_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Номенклатура_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Номенклатура";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура");
КонецПроцедуры

Процедура ДобавитьПОД_НоменклатураГруппа(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "НоменклатураГруппа";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.НоменклатураГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураГруппа");
КонецПроцедуры

Процедура ДобавитьПОД_Склады_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Склады_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Склады";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Склады");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Номенклатура_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Номенклатура;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Организации_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Организации_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Организации";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_СтраныМира_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "СтраныМира_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СтраныМира";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтраныМира");
КонецПроцедуры

Процедура ДобавитьПОД_ТипыЦенНоменклатуры_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ТипыЦенНоменклатуры_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ТипыЦен";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ТипыЦенНоменклатуры");
КонецПроцедуры

Процедура ДобавитьПОД_ТНВЭД_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ТНВЭД_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "";
КонецПроцедуры

Процедура ДобавитьПОД_ФизическиеЛица_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ФизическиеЛица_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ФизическиеЛица";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛица");
КонецПроцедуры

Процедура ДобавитьПОД_ФизическиеЛицаГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ФизическиеЛицаГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ФизическиеЛицаГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛицаГруппа");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_КлассификаторЕдиницИзмерения(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КлассификаторЕдиницИзмерения";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КлассификаторЕдиницИзмерения;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЕдиницыИзмерений");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ШтрихкодыНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ШтрихкодыНоменклатуры_Отправка");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ВозвратТоваровПоставщику_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ВозвратТоваровПоставщику";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ДокументПоступления", , "Документ_ПоступлениеТоваровУслуг_Получение");
	ДобавитьПКС(СвойстваШапки, "", "Сумма");
	ДобавитьПКС(СвойстваШапки, "", "Склад", , "Справочник_Склады");
	ДобавитьПКС(СвойстваШапки, "", "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "", "Номер");
	ДобавитьПКС(СвойстваШапки, "", "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "", "Дата");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "", "", 1);
	ДобавитьПКС(СвойстваТЧ, "", "", 1);
	ДобавитьПКС(СвойстваТЧ, "", "", 1);
	ДобавитьПКС(СвойстваТЧ, "", "", 1);
	ДобавитьПКС(СвойстваТЧ, "", "", 1);
	ДобавитьПКС(СвойстваТЧ, "", "", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОтчетОРозничныхПродажах_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ОтчетОРозничныхПродажах;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОтчетОРозничныхПродажах";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",        "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",       "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация", "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Склад",       "Склад", , "Справочник_Склады");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ВозвратОплаты", "");
	ДобавитьПКС(СвойстваТЧ, "ВидОплаты",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаОплаты", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ВозвратУслуг",  "");
	ДобавитьПКС(СвойстваТЧ, "БезналичныйРасчет", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",      "", 1,"Справочник_Номенклатура");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНСП",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНСП",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",              "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Возвраты",      "");
	ДобавитьПКС(СвойстваТЧ, "БезналичныйРасчет", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",      "", 1,"Справочник_Номенклатура");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНСП",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНСП",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",              "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Оплата",        "");
	ДобавитьПКС(СвойстваТЧ, "ВидОплаты",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаОплаты", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары",        "");
	ДобавитьПКС(СвойстваТЧ, "БезналичныйРасчет", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",      "", 1,"Справочник_Номенклатура");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНСП",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНСП",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",              "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Услуги",        "");
	ДобавитьПКС(СвойстваТЧ, "БезналичныйРасчет", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",      "", 1,"Справочник_Номенклатура");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНСП",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНСП",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",              "", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПоступлениеТоваровУслуг_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПоступлениеТоваровУслуг_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеТоваровУслуг;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "", "Склад", , "Справочник_Склады");
	ДобавитьПКС(СвойстваШапки, "", "Номер");
	ДобавитьПКС(СвойстваШапки, "", "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "", "");
	ДобавитьПКС(СвойстваШапки, "", "Дата");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "", "", 1);
	ДобавитьПКС(СвойстваТЧ, "", "", 1,"Справочник_Номенклатура");
	ДобавитьПКС(СвойстваТЧ, "", "", 1);
	ДобавитьПКС(СвойстваТЧ, "", "", 1);
	ДобавитьПКС(СвойстваТЧ, "", "", 1);
	ДобавитьПКС(СвойстваТЧ, "", "", 1);
	ДобавитьПКС(СвойстваТЧ, "", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Контрагенты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Контрагенты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "СоздатьДоговорКонтрагента";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Наименование");
	ДобавитьПКС(СвойстваШапки, "", "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "", "ОсновнойБанковскийСчет");
	ДобавитьПКС(СвойстваШапки, "", "ЮридическоеФизическоеЛицо", , "ЮридическоеФизическоеЛицо_Получение");
	ДобавитьПКС(СвойстваШапки, "", "");
	ДобавитьПКС(СвойстваШапки, "", "СтранаРегистрации", , "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваШапки, "", "Группа", , "Справочник_КонтрагентыГруппа");
	ДобавитьПКС(СвойстваШапки, "", "ГоловнойКонтрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "", "ИНН");
	ДобавитьПКС(СвойстваШапки, "", "", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_КонтрагентыГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_КонтрагентыГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.КонтрагентыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Наименование");
	ДобавитьПКС(СвойстваШапки, "", "Группа", , "Справочник_КонтрагентыГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Номенклатура_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Номенклатура";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                   "ТипНоменклатуры", 1);
	ДобавитьПКС(СвойстваШапки, "Артикул",            "Артикул");
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмерения",   "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерений");
	ДобавитьПКС(СвойстваШапки, "Код",                "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "НаименованиеПолное");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_НоменклатураГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_НоменклатураГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.НоменклатураГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "", "Наименование");
	ДобавитьПКС(СвойстваШапки, "", "Группа", , "Справочник_НоменклатураГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Организации_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Организации";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ИНН",                "ИНН");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "НаименованиеПолное");

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ТипыЦенНоменклатуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ТипыЦенНоменклатуры";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ТипыЦенНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ТипыЦен";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ТипыЦенНоменклатуры_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ВалютаЦены");
	ДобавитьПКС(СвойстваШапки, "", "Наименование");
	ДобавитьПКС(СвойстваШапки, "", "ОкруглятьВБольшуюСторону");
	ДобавитьПКС(СвойстваШапки, "", "ТочностьОкругления");
	ДобавитьПКС(СвойстваШапки, "", "ЦенаВключаетНДС");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ТНВЭД(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ТНВЭД";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КлассификаторТНВЭД;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "", , "Справочник_ЕдиницыИзмерений");
	ДобавитьПКС(СвойстваШапки, "", "");
	ДобавитьПКС(СвойстваШапки, "", "");
	ДобавитьПКС(СвойстваШапки, "", "");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ФизическиеЛица(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ФизическиеЛица";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ФизическиеЛица";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ФизическиеЛица_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ФизическиеЛица_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ФИО");
	ДобавитьПКС(СвойстваШапки, "", "Группа", , "Справочник_ФизическиеЛицаГруппа");
	ДобавитьПКС(СвойстваШапки, "", "Пол", , "Перечисление_ПолФизическогоЛица");
	ДобавитьПКС(СвойстваШапки, "", "ИНН");
	ДобавитьПКС(СвойстваШапки, "", "ДатаРождения");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "КонтактнаяИнформация", "");
	ДобавитьПКС(СвойстваТЧ, "", "", 1);
	ДобавитьПКС(СвойстваТЧ, "", "", 1);
	ДобавитьПКС(СвойстваТЧ, "", "", 1);
	ДобавитьПКС(СвойстваТЧ, "", "", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ФизическиеЛицаГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ФизическиеЛицаГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ФизическиеЛицаГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Наименование");
	ДобавитьПКС(СвойстваШапки, "", "Группа");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ШтрихкодыНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ШтрихкодыНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ШтрихкодОтбор", 1);
	ДобавитьПКС(СвойстваШапки, "", "НоменклатураОтбор", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Штрихкод", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Записи");
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Штрихкод", 1);

КонецПроцедуры



Функция ДобавитьПКТЧ(ПравилоКонвертации, ИмяТЧКонфигурации, ИмяТЧФормата)
    Если ПравилоКонвертации.СвойстваТабличныхЧастей.Колонки.Количество() = 0 Тогда
        ОбменДаннымиXDTOСервер.ИнициализироватьСвойстваТабличныхЧастей(ПравилоКонвертации);
    КонецЕсли;
    КонвертацияТабличнойЧасти                = ПравилоКонвертации.СвойстваТабличныхЧастей.Добавить();
    КонвертацияТабличнойЧасти.ТЧКонфигурации = ИмяТЧКонфигурации;
    КонвертацияТабличнойЧасти.ТЧФормата      = ИмяТЧФормата;
    КонвертацияТабличнойЧасти.Свойства       = ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации();
    Возврат КонвертацияТабличнойЧасти.Свойства;
КонецФункции

Процедура ДобавитьПКС(РодительПКС, СвойствоКонфигурации, СвойствоФормата, ИспользуетсяАлгоритмКонвертации = 0, 
                    ПравилоКонвертацииСвойства = "")
	НоваяСтрока                                 = РодительПКС.Добавить();
	НоваяСтрока.СвойствоКонфигурации            = СвойствоКонфигурации;
	НоваяСтрока.СвойствоФормата                 = СвойствоФормата;
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = ?(ИспользуетсяАлгоритмКонвертации = 0, Ложь, Истина);
	НоваяСтрока.ПравилоКонвертацииСвойства      = ПравилоКонвертацииСвойства;
КонецПроцедуры

#Область ОбработчикиКонвертации
#Область Справочная_информация_Номенклатура
Процедура ПКО_Справочник_Номенклатура_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	// ТипНоменклатуры
	
	ТипНоменклатуры = ДанныеXDTO.ТипНоменклатуры.Значение;
	
	Если ТипНоменклатуры = "Услуга" Или ТипНоменклатуры = "Работа" Тогда
	
		ПолученныеДанные.Услуга = Истина;
	
	КонецЕсли;
	
	
	Если ДанныеXDTO.Свойство("AdditionalInfo") И ТипЗнч(ДанныеXDTO.AdditionalInfo)=Тип("Структура") Тогда //ED 
		ДопДанные = ДанныеXDTO.AdditionalInfo;
		 
		Если ДопДанные.Свойство("КодТНВЭД") Тогда 
			КодТНВЭД = ОбменДаннымиXDTOСервер.СсылкаОбъектаПоУИДОбъектаXDTO(ДопДанные.КодТНВЭД, Тип("СправочникСсылка.КлассификаторТНВЭД"), КомпонентыОбмена);
			// Пробуем найти по коду.
			Если НЕ ЗначениеЗаполнено(КодТНВЭД) Тогда 
				КодТНВЭД = Справочники.КлассификаторТНВЭД.НайтиПоКоду(ДопДанные.КодТНВЭДКод);	
			КонецЕсли;	
	
			Если КодТНВЭД = Справочники.КлассификаторТНВЭД.ПустаяСсылка() И ДопДанные.Свойство("КодТНВЭДНаименование") Тогда
				//Создаём новый 
				КодТНВЭДОбъект = Справочники.КлассификаторТНВЭД.СоздатьЭлемент(); 
				КодТНВЭДОбъект.УстановитьСсылкуНового(КодТНВЭД); 
				КодТНВЭДОбъект.Наименование = ДопДанные.КодТНВЭДНаименование;
				КодТНВЭДОбъект.Код = ДопДанные.КодТНВЭДКод; 
				// заполняем другие служебные реквизиты 
				КодТНВЭДОбъект.Записать(); 
				КодТНВЭД = КодТНВЭДОбъект.Ссылка; 
			КонецЕсли; 
			ПолученныеДанные.КодТНВЭД = КодТНВЭД; 
		КонецЕсли; 
		
		
	 
	
		
		Если ДопДанные.Свойство("КодГКЭД") Тогда 
	КодГКЭД = ОбменДаннымиXDTOСервер.СсылкаОбъектаПоУИДОбъектаXDTO(ДопДанные.КодГКЭД, Тип("СправочникСсылка.КлассификаторГКЭД"), КомпонентыОбмена); 
	// Пробуем найти по коду.
	Если НЕ ЗначениеЗаполнено(КодГКЭД) Тогда 
	КодГКЭД = Справочники.КлассификаторГКЭД.НайтиПоКоду(ДопДанные.КодГКЭДКод);	
	КонецЕсли;	
	
	Если КодГКЭД = Справочники.КлассификаторГКЭД.ПустаяСсылка() И ДопДанные.Свойство("КодГКЭДНаименование") Тогда 
	//Создаём новый 
	КодГКЭДОбъект = Справочники.КлассификаторГКЭД.СоздатьЭлемент(); 
	КодГКЭДОбъект.УстановитьСсылкуНового(КодГКЭД); 
	КодГКЭДОбъект.Наименование = ДопДанные.КодГКЭДНаименование;
	КодГКЭДОбъект.Код = ДопДанные.КодГКЭДКод;
	КодГКЭДОбъект.Секция = ДопДанные.КодГКЭДСекция; 
	// заполняем другие служебные реквизиты 
	КодГКЭДОбъект.Записать(); 
	КодГКЭД = КодТНВЭДОбъект.Ссылка; 
	КонецЕсли; 
	ПолученныеДанные.КодГКЭД = КодГКЭД; 
	КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_Склады_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если Ложь И ДанныеXDTO.Свойство("AdditionalInfo") И ТипЗнч(ДанныеXDTO.AdditionalInfo)=Тип("Структура") Тогда //ED 
		ДопДанные = ДанныеXDTO.AdditionalInfo;
		 
		Если ДопДанные.Свойство("ВидыЦен") Тогда 
			ВидыЦен = ОбменДаннымиXDTOСервер.СсылкаОбъектаПоУИДОбъектаXDTO(ДопДанные.ВидыЦен, Тип("СправочникСсылка.ТипыЦенНоменклатуры"), КомпонентыОбмена); 
			
			Если Справочники.ТипыЦенНоменклатуры.НайтиПоНаименованию(ДопДанные.ВидыЦенНаименование) = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка() Тогда 
				//Создаём новый 
				ВидыЦенОбъект = Справочники.ТипыЦенНоменклатуры.СоздатьЭлемент(); 
				ВидыЦенОбъект.УстановитьСсылкуНового(ВидыЦен); 
				ВидыЦенОбъект.Наименование = ДопДанные.ВидыЦенНаименование;
				ВидыЦенОбъект.ВалютаЦены = Константы.ВалютаРегламентированногоУчета.Получить();
				ВидыЦенОбъект.ЦенаВключаетНалоги = ДопДанные.ЦенаВключаетНДС;
				ВидыЦенОбъект.Записать(); 
				ВидыЦен = ВидыЦенОбъект.Ссылка; 
			КонецЕсли; 
			ПолученныеДанные.ТипЦенРозничнойТорговли = ВидыЦен; 
		КонецЕсли;
	КонецЕсли;
	
	//ПолученныеДанные.Наименование = ПолученныеДанные.Наименование + "-розница";
КонецПроцедуры

#КонецОбласти
Процедура ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	//ИспользованиеПКО.Справочник_НоменклатурнаяГруппа_Отправка = (ДанныеИБ.ЭтоГруппа);
	ИспользованиеПКО.Справочник_Номенклатура_Отправка = НЕ (ДанныеИБ.ЭтоГруппа);
КонецПроцедуры
Процедура ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
		
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ТекущаяДата(), ПолученныеДанные.Организация);
	СтавкаНСПТовары = ДанныеУчетнойПолитики.СтавкаНСПРеализацииТовары;
	СтавкаНСПУслуги = ДанныеУчетнойПолитики.СтавкаНСПРеализацииУслуги;
	
	Если ДанныеXDTO.Свойство("AdditionalInfo") И ТипЗнч(ДанныеXDTO.AdditionalInfo)=Тип("Структура") Тогда //ED 
		ДопДанные = ДанныеXDTO.AdditionalInfo;
		
		ПолученныеДанные.БезналичныйРасчет = ДопДанные.БезналичныйРасчет;
	КонецЕсли;
				
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("НомерСтроки", "НомерСтроки");
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			Если Строка.СтавкаНДС.Значение = "НДС18" Тогда
				СтруктураДанныхСтроки.Вставить("СтавкаНДС", Справочники.СтавкиНДС.Стандарт);
			ИначеЕсли Строка.СтавкаНДС.Значение = "НДС0" Тогда
				СтруктураДанныхСтроки.Вставить("СтавкаНДС", Справочники.СтавкиНДС.Нулевая);
			ИначеЕсли Строка.СтавкаНДС.Значение = "БезНДС" Тогда
				СтруктураДанныхСтроки.Вставить("СтавкаНДС", Справочники.СтавкиНДС.Освобожденная);
			КонецЕсли;
			
			Если ДанныеXDTO.Свойство("AdditionalInfo") И ТипЗнч(ДанныеXDTO.AdditionalInfo)=Тип("Структура") Тогда //ED 
				ДопДанные = ДанныеXDTO.AdditionalInfo;
				
				Если ДопДанные.Свойство("ТоварыНСП") Тогда
					СтрокаНСП = ДопДанные.ТоварыНСП.Найти(Строка.НомерСтрокиДокумента, "НомерСтроки");
					СтруктураДанныхСтроки.Вставить("СуммаНСП", СтрокаНСП.СуммаНСП);
					
					Если СтрокаНСП.СтавкаНСП = "НСП1" Тогда
							СтруктураДанныхСтроки.Вставить("ЗначениеСтавкиНСП", 1);	
						ИначеЕсли СтрокаНСП.СтавкаНСП = "НСП2" Тогда
							СтруктураДанныхСтроки.Вставить("ЗначениеСтавкиНСП", 2);
						ИначеЕсли СтрокаНСП.СтавкаНСП = "НСП3" Тогда
							СтруктураДанныхСтроки.Вставить("ЗначениеСтавкиНСП", 3);
						ИначеЕсли СтрокаНСП.СтавкаНСП = "НСП5" Тогда
							СтруктураДанныхСтроки.Вставить("ЗначениеСтавкиНСП", 5);
					Иначе
						Если СтруктураДанныхСтроки.Номенклатура <> Неопределено Тогда
							СтруктураДанныхСтроки.Вставить("ЗначениеСтавкиНСП", 1);
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			
			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
			
			ЗначениеСтавкиНДС = ?(ЗначениеЗаполнено(МассивСтрокТовары[0].СтавкаНДС), 
				УчетНДСВызовСервера.ПолучитьСтавкуНДС(ТекущаяДата(), МассивСтрокТовары[0].СтавкаНДС), 0);
			ЗначениеСтавкиНСП = ?(ПолученныеДанные.БезналичныйРасчет 
				Или НЕ ЗначениеЗаполнено(МассивСтрокТовары[0].СтавкаНСП), 0, 
					УчетНДСВызовСервера.ПолучитьСтавкуНСП(ТекущаяДата(), 
						ПолученныеДанные.Организация, 
						МассивСтрокТовары[0].СтавкаНСП));
			
			ПолученныеДанные.ЗначениеСтавкиНДС = ЗначениеСтавкиНДС;
			ПолученныеДанные.ЗначениеСтавкиНСП = ЗначениеСтавкиНСП;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПолученныеДанные.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
	ПолученныеДанные.Склад = ПолученныеДанные.Склад;
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ТекущаяДата(), ПолученныеДанные.Организация);
	
	ПолученныеДанные.Контрагент = ПолученныеДанные.Контрагент;
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ВозвратПоставщику;
		
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ВидыДоговораДляДокумента(ПолученныеДанные.Ссылка, Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(ПолученныеДанные.Контрагент, ПолученныеДанные.Организация, СписокВидовДоговоров);
	
	Если Не ЗначениеЗаполнено(ДоговорПоУмолчанию) Тогда
		// Создание договора.
			НадоСоздатьДоговор = Истина;
			ДоговорСсылка = Неопределено;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ДоговорыКонтрагентов.Ссылка КАК Договор
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|ГДЕ
			|	ДоговорыКонтрагентов.Владелец = &Владелец
			|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДоговорыКонтрагентов.НомерДоговора УБЫВ";
			Запрос.УстановитьПараметр("Владелец", ПолученныеДанные.Контрагент);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если Не РезультатЗапроса.Пустой() Тогда
				Выборка = РезультатЗапроса.Выбрать();
				Выборка.Следующий();
				ДоговорСсылка = Выборка.Договор;
				
				НадоСоздатьДоговор = Ложь;
			КонецЕсли;
			
			Если НадоСоздатьДоговор Тогда
				// Создадим договор контрагента.
				ДоговорОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
				ДоговорОбъект.Заполнить(ПолученныеДанные.Контрагент);
				ДоговорСсылка = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку();
				ДоговорОбъект.УстановитьСсылкуНового(ДоговорСсылка);
				БухгалтерскийУчетСервер.ЗаписатьСправочникОбъект(ДоговорОбъект);
			КонецЕсли;
			
			// Установка основного договора.
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОсновныеДоговорыКонтрагента.Договор КАК Договор
			|ИЗ
			|	РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
			|ГДЕ
			|	ОсновныеДоговорыКонтрагента.Организация = &Организация
			|	И ОсновныеДоговорыКонтрагента.Контрагент = &Контрагент";
			Запрос.УстановитьПараметр("Контрагент", ПолученныеДанные.Контрагент);
			Запрос.УстановитьПараметр("Организация", ПолученныеДанные.Организация);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если РезультатЗапроса.Пустой()
				И ЗначениеЗаполнено(ДоговорСсылка) Тогда 
				Справочники.ДоговорыКонтрагентов.УстановитьОсновнойДоговорКонтрагента(ДоговорСсылка);
			КонецЕсли;
			
			ДоговорПоУмолчанию = ДоговорСсылка;
	КонецЕсли;
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
	"ДоговорКонтрагента",
	ДоговорПоУмолчанию);
	
	СтруктураДанные.Вставить(
	"ПризнакСтраны",
	ПолученныеДанные.Контрагент.ПризнакСтраны);
	
	СтруктураДанные.Вставить(
	"СЭЗ",
	ПолученныеДанные.Контрагент.СЭЗ);
	
	ПолученныеДанные.ДоговорКонтрагента = СтруктураДанные.ДоговорКонтрагента;
	ПризнакСтраны = СтруктураДанные.ПризнакСтраны;
	
	// Обработка изменения налогообложения
	Если ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС") Тогда
		ПолученныеДанные.СуммаВключаетНалоги = Истина;
	Иначе	
		ПолученныеДанные.СуммаВключаетНалоги 	= Ложь;
	КонецЕсли;
	
	Если СтруктураДанные.СЭЗ Тогда
		ПолученныеДанные.ЗначениеСтавкиНДС = 0;	
	КонецЕсли;	
	
	// Изменение признака страны
	Если ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС") Тогда
		ПолученныеДанные.БезналичныйРасчет = Истина;
		ПолученныеДанные.ЭтоПоступлениеПоЧеку = Ложь;
		// Ставки
		ПолученныеДанные.НДСНеПодтвержден = Ложь;
		ПолученныеДанные.ЗначениеСтавкиНСП = 0;
		ПолученныеДанные.ЗначениеСтавкиНСПДляОС = 0;
	ИначеЕсли ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ИмпортЭкспорт") Тогда	
		ПолученныеДанные.БезналичныйРасчет = Истина;
		ПолученныеДанные.ЭтоПоступлениеПоЧеку = Ложь;
		// Ставки
		ПолученныеДанные.НДСНеПодтвержден = Ложь;
		ПолученныеДанные.ЗначениеСтавкиНДС = 0;
		ПолученныеДанные.ЗначениеСтавкиНСП = 0;
		ПолученныеДанные.ЗначениеСтавкиНСПДляОС = 0;
		// Акциз
		ПолученныеДанные.СуммаАкциза = 0;
		ПолученныеДанные.СпособРаспределенияАкциза = "";
		
		ПараметрыРасчета = ПодготовитьПараметрыРасчета(ПолученныеДанные);
		
		// Расчет налогов
		ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		ПолученныеДанные, "Товары", ПараметрыРасчета);
		
	Иначе // КР или не заполнен Контрагент
		ПолученныеДанные.ЭтоПоступлениеПоЧеку = Ложь;
		// Акциз
		
		// Расчет налогов
		//ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		//ПолученныеДанные, "Товары", ПараметрыРасчета);
		
	КонецЕсли;	
	
	ОбработатьИзменениеДоговораПоступление(ПолученныеДанные, ДанныеУчетнойПолитики);
	
	// Товары
	Если ПолученныеДанные.Товары.Количество() Тогда
		Товары = ПолученныеДанные.Товары.Выгрузить();
		
		СтруктураСтроки = Новый Структура;
		Для каждого Колонка Из Товары.Колонки Цикл
			СтруктураСтроки.Вставить(Колонка.Имя, Товары[0][Колонка.Имя]);
		КонецЦикла;
		
		Для Каждого СтрокаТабличнойЧасти Из Товары Цикл
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаТабличнойЧасти);
			ОбработатьИзменениеНоменклатурыПоступление(СтруктураСтроки, "Товары", ПолученныеДанные);
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтруктураСтроки);
		КонецЦикла;
		ПолученныеДанные.Товары.Загрузить(Товары);
		//ПолученныеДанные.СуммаДокумента = Товары.Итог("Всего");
	КонецЕсли;
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ТекущаяДата(), ПолученныеДанные.Организация);
	СтавкаНСПТовары = ДанныеУчетнойПолитики.СтавкаНСПРеализацииТовары;
	СтавкаНСПУслуги = ДанныеУчетнойПолитики.СтавкаНСПРеализацииУслуги;
	
	#Область Товары
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("ТоварыПродажа")
		И ЗначениеЗаполнено(ДанныеXDTO.ТоварыПродажа) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("НомерСтроки", "НомерСтроки");
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("СтавкаНСП", "СтавкаНСП");
		ПравилаЗаполнения.Вставить("СуммаНСП", "СуммаНСП");
		ПравилаЗаполнения.Вставить("БезналичныйРасчет", "БезналичныйРасчет");
		Для Каждого Строка Из ДанныеXDTO.ТоварыПродажа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			//СтруктураДанныхСтроки.Вставить("БезналичныйРасчет", СтрокаНСП.БезналичныйРасчет);
				
			Если Строка.СтавкаНДС.Значение = "НДС18" Тогда
				СтруктураДанныхСтроки.Вставить("СтавкаНДС", Справочники.СтавкиНДС.Стандарт);
			ИначеЕсли Строка.СтавкаНДС.Значение = "НДС12" Тогда
				СтруктураДанныхСтроки.Вставить("СтавкаНДС", Справочники.СтавкиНДС.Стандарт);
			ИначеЕсли Строка.СтавкаНДС.Значение = "НДС0" Тогда
				СтруктураДанныхСтроки.Вставить("СтавкаНДС", Справочники.СтавкиНДС.Нулевая);
			ИначеЕсли Строка.СтавкаНДС.Значение = "БезНДС" Тогда
				СтруктураДанныхСтроки.Вставить("СтавкаНДС", Справочники.СтавкиНДС.Освобожденная);
			КонецЕсли;
			
			Если ДанныеXDTO.ТоварыПродажа.Колонки.Найти("СтавкаНСП") <> Неопределено Тогда
				СтруктураДанныхСтроки.Вставить("СуммаНСП", Строка.СуммаНСП);
				//СтруктураДанныхСтроки.Вставить("БезналичныйРасчет", СтрокаНСП.БезналичныйРасчет);
				
				Если Строка.СтавкаНСП = "НСП1" Тогда
					СтруктураДанныхСтроки.Вставить("СтавкаНСП", Справочники.СтавкиНСП.Торговля);	
				ИначеЕсли Строка.СтавкаНСП = "НСП2" Тогда
					СтруктураДанныхСтроки.Вставить("СтавкаНСП", Справочники.СтавкиНСП.Прочее);
				ИначеЕсли Строка.СтавкаНСП = "НСП3" Тогда
					СтруктураДанныхСтроки.Вставить("СтавкаНСП", Справочники.СтавкиНСП.СотоваяСвязь);
				Иначе
					СтруктураДанныхСтроки.Вставить("СтавкаНСП", СтавкаНСПТовары);
				КонецЕсли;
			КонецЕсли;
				
			Если ДанныеXDTO.Свойство("AdditionalInfo") И ТипЗнч(ДанныеXDTO.AdditionalInfo)=Тип("Структура") Тогда 
				ДопДанные = ДанныеXDTO.AdditionalInfo;
				
				Если ДопДанные.Свойство("ТоварыПродажаНСП") Тогда
					СтрокаНСП = ДопДанные.ТоварыПродажаНСП.Найти(Строка.НомерСтрокиДокумента, "НомерСтроки");
					СтруктураДанныхСтроки.Вставить("СуммаНСП", СтрокаНСП.СуммаНСП);
					СтруктураДанныхСтроки.Вставить("БезналичныйРасчет", СтрокаНСП.БезналичныйРасчет);
					
					Если СтрокаНСП.СтавкаНСП = "НСП1" Тогда
						СтруктураДанныхСтроки.Вставить("СтавкаНСП", Справочники.СтавкиНСП.Торговля);	
					ИначеЕсли СтрокаНСП.СтавкаНСП = "НСП2" Тогда
						СтруктураДанныхСтроки.Вставить("СтавкаНСП", Справочники.СтавкиНСП.Прочее);
					ИначеЕсли СтрокаНСП.СтавкаНСП = "НСП3" Тогда
						СтруктураДанныхСтроки.Вставить("СтавкаНСП", Справочники.СтавкиНСП.СотоваяСвязь);
					Иначе
						Если СтруктураДанныхСтроки.Номенклатура <> Неопределено Тогда
							СтруктураДанныхСтроки.Вставить("СтавкаНСП", СтавкаНСПТовары);
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	
	#Область Услуги
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("НомерСтроки", "НомерСтроки");
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("СтавкаНСП", "СтавкаНСП");
		ПравилаЗаполнения.Вставить("СуммаНСП", "СуммаНСП");
		ПравилаЗаполнения.Вставить("БезналичныйРасчет", "БезналичныйРасчет");
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			Если Строка.СтавкаНДС.Значение = "НДС18" Тогда
				СтруктураДанныхСтроки.Вставить("СтавкаНДС", Справочники.СтавкиНДС.Стандарт);
			ИначеЕсли Строка.СтавкаНДС.Значение = "НДС12" Тогда
				СтруктураДанныхСтроки.Вставить("СтавкаНДС", Справочники.СтавкиНДС.Стандарт);
			ИначеЕсли Строка.СтавкаНДС.Значение = "НДС0" Тогда
				СтруктураДанныхСтроки.Вставить("СтавкаНДС", Справочники.СтавкиНДС.Нулевая);
			ИначеЕсли Строка.СтавкаНДС.Значение = "БезНДС" Тогда
				СтруктураДанныхСтроки.Вставить("СтавкаНДС", Справочники.СтавкиНДС.Освобожденная);
			КонецЕсли;
			
			Если ДанныеXDTO.ТоварыПродажа.Колонки.Найти("СтавкаНСП") <> Неопределено Тогда
				СтруктураДанныхСтроки.Вставить("СуммаНСП", Строка.СуммаНСП);
				//СтруктураДанныхСтроки.Вставить("БезналичныйРасчет", СтрокаНСП.БезналичныйРасчет);
				
				Если Строка.СтавкаНСП = "НСП1" Тогда
					СтруктураДанныхСтроки.Вставить("СтавкаНСП", Справочники.СтавкиНСП.Торговля);	
				ИначеЕсли Строка.СтавкаНСП = "НСП2" Тогда
					СтруктураДанныхСтроки.Вставить("СтавкаНСП", Справочники.СтавкиНСП.Прочее);
				ИначеЕсли Строка.СтавкаНСП = "НСП3" Тогда
					СтруктураДанныхСтроки.Вставить("СтавкаНСП", Справочники.СтавкиНСП.СотоваяСвязь);
				Иначе
					СтруктураДанныхСтроки.Вставить("СтавкаНСП", СтавкаНСПТовары);
				КонецЕсли;
			КонецЕсли;
				
			Если ДанныеXDTO.Свойство("AdditionalInfo") И ТипЗнч(ДанныеXDTO.AdditionalInfo)=Тип("Структура") Тогда 
				ДопДанные = ДанныеXDTO.AdditionalInfo;
				
				Если ДопДанные.Свойство("ТоварыПродажаНСП") Тогда
					СтрокаНСП = ДопДанные.ТоварыПродажаНСП.Найти(Строка.НомерСтрокиДокумента, "НомерСтроки");
					СтруктураДанныхСтроки.Вставить("СуммаНСП", СтрокаНСП.СуммаНСП);
					СтруктураДанныхСтроки.Вставить("БезналичныйРасчет", СтрокаНСП.БезналичныйРасчет);
					
					Если СтрокаНСП.СтавкаНСП = "НСП1" Тогда
						СтруктураДанныхСтроки.Вставить("СтавкаНСП", Справочники.СтавкиНСП.Торговля);	
					ИначеЕсли СтрокаНСП.СтавкаНСП = "НСП2" Тогда
						СтруктураДанныхСтроки.Вставить("СтавкаНСП", Справочники.СтавкиНСП.Прочее);
					ИначеЕсли СтрокаНСП.СтавкаНСП = "НСП3" Тогда
						СтруктураДанныхСтроки.Вставить("СтавкаНСП", Справочники.СтавкиНСП.СотоваяСвязь);
					Иначе
						Если СтруктураДанныхСтроки.Номенклатура <> Неопределено Тогда
							СтруктураДанныхСтроки.Вставить("СтавкаНСП", СтавкаНСПТовары);
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Услуги", МассивСтрокТовары);
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	
	#Область Возвраты
	МассивСтрокТовары = Новый Массив;
	МассивСтрокУслуги = Новый Массив;
	Если ДанныеXDTO.Свойство("ТоварыВозвратПродажи")
		И ЗначениеЗаполнено(ДанныеXDTO.ТоварыВозвратПродажи) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("НомерСтроки", "НомерСтроки");
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("СтавкаНСП", "СтавкаНСП");
		ПравилаЗаполнения.Вставить("СуммаНСП", "СуммаНСП");
		ПравилаЗаполнения.Вставить("БезналичныйРасчет", "БезналичныйРасчет");
		Для Каждого Строка Из ДанныеXDTO.ТоварыВозвратПродажи Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			Если Строка.СтавкаНДС.Значение = "НДС18" Тогда
				СтруктураДанныхСтроки.Вставить("СтавкаНДС", Справочники.СтавкиНДС.Стандарт);
			ИначеЕсли Строка.СтавкаНДС.Значение = "НДС12" Тогда
				СтруктураДанныхСтроки.Вставить("СтавкаНДС", Справочники.СтавкиНДС.Стандарт);
			ИначеЕсли Строка.СтавкаНДС.Значение = "НДС0" Тогда
				СтруктураДанныхСтроки.Вставить("СтавкаНДС", Справочники.СтавкиНДС.Нулевая);
			ИначеЕсли Строка.СтавкаНДС.Значение = "БезНДС" Тогда
				СтруктураДанныхСтроки.Вставить("СтавкаНДС", Справочники.СтавкиНДС.Освобожденная);
			КонецЕсли;
			
			Если  ДанныеXDTO.ТоварыВозвратПродажи.Колонки.Найти("СтавкаНСП") <> Неопределено Тогда
				СтруктураДанныхСтроки.Вставить("СуммаНСП", Строка.СуммаНСП);
				//СтруктураДанныхСтроки.Вставить("БезналичныйРасчет", СтрокаНСП.БезналичныйРасчет);
				
				Если Строка.СтавкаНСП = "НСП1" Тогда
					СтруктураДанныхСтроки.Вставить("СтавкаНСП", Справочники.СтавкиНСП.Торговля);	
				ИначеЕсли Строка.СтавкаНСП = "НСП2" Тогда
					СтруктураДанныхСтроки.Вставить("СтавкаНСП", Справочники.СтавкиНСП.Прочее);
				ИначеЕсли Строка.СтавкаНСП = "НСП3" Тогда
					СтруктураДанныхСтроки.Вставить("СтавкаНСП", Справочники.СтавкиНСП.СотоваяСвязь);
				Иначе
					СтруктураДанныхСтроки.Вставить("СтавкаНСП", СтавкаНСПТовары);
				КонецЕсли;
			КонецЕсли;
			
			Если ДанныеXDTO.Свойство("AdditionalInfo") И ТипЗнч(ДанныеXDTO.AdditionalInfo)=Тип("Структура") Тогда //ED 
				ДопДанные = ДанныеXDTO.AdditionalInfo;
				
				Если ДопДанные.Свойство("ТоварыВозвратПродажиНСП") Тогда
					СтрокаНСП = ДопДанные.ТоварыВозвратПродажиНСП.Найти(Строка.НомерСтрокиДокумента, "НомерСтроки");
					СтруктураДанныхСтроки.Вставить("СуммаНСП", СтрокаНСП.СуммаНСП);
					СтруктураДанныхСтроки.Вставить("БезналичныйРасчет", СтрокаНСП.БезналичныйРасчет);
					
					Если СтрокаНСП.СтавкаНСП = "НСП1" Тогда
						СтруктураДанныхСтроки.Вставить("СтавкаНСП", Справочники.СтавкиНСП.Торговля);	
					ИначеЕсли СтрокаНСП.СтавкаНСП = "НСП2" Тогда
						СтруктураДанныхСтроки.Вставить("СтавкаНСП", Справочники.СтавкиНСП.Прочее);
					ИначеЕсли СтрокаНСП.СтавкаНСП = "НСП3" Тогда
						СтруктураДанныхСтроки.Вставить("СтавкаНСП", Справочники.СтавкиНСП.СотоваяСвязь);
					Иначе
						Если СтруктураДанныхСтроки.Номенклатура <> Неопределено Тогда
							СтруктураДанныхСтроки.Вставить("СтавкаНСП", СтавкаНСПТовары);
						КОнецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			Если Строка.Услуга = Ложь Тогда
				МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			Иначе
				МассивСтрокУслуги.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
		КонецЦикла;
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Возвраты", МассивСтрокТовары);
		КонецЕсли;
		Если МассивСтрокУслуги.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ВозвратУслуг", МассивСтрокУслуги);
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	
	#Область Оплата
	
	Если ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.ДоговорКонтрагента) Тогда
		Контрагент = КомпонентыОбмена.ПараметрыКонвертации.ДоговорКонтрагента.Владелец;
		ДоговорКонтрагента = КомпонентыОбмена.ПараметрыКонвертации.ДоговорКонтрагента; //КомпонентыОбмена.УзелКорреспондента.ДоговорКонтрагента;
	Иначе
		Контрагент = Неопределено;
		ДоговорКонтрагента = Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВидыОплатОрганизаций.Ссылка КАК Ссылка,
	|	ВидыОплатОрганизаций.Организация КАК Организация,
	|	ВидыОплатОрганизаций.Контрагент КАК Контрагент,
	|	ВидыОплатОрганизаций.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВидыОплатОрганизаций.ТипОплаты КАК ТипОплаты
	|ИЗ
	|	Справочник.ВидыОплатОрганизаций КАК ВидыОплатОрганизаций
	|ГДЕ
	|	ВидыОплатОрганизаций.Организация = &Организация
	|	И ВидыОплатОрганизаций.ТипОплаты = &ТипОплаты
	|	И ВидыОплатОрганизаций.Контрагент = &Контрагент
	|	И ВидыОплатОрганизаций.ДоговорКонтрагента = &ДоговорКонтрагента";
	Запрос.УстановитьПараметр("Организация", ПолученныеДанные.Организация);
	Запрос.УстановитьПараметр("ТипОплаты", Перечисления.ТипыОплат.ПлатежнаяКарта);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ВидОплаты = Выборка.Ссылка;
	Иначе
		НовыйВидОплаты = Справочники.ВидыОплатОрганизаций.СоздатьЭлемент();
		НовыйВидОплаты.Наименование			= "" + Перечисления.ТипыОплат.ПлатежнаяКарта + " " + Контрагент;
		НовыйВидОплаты.Организация			= ПолученныеДанные.Организация;
		НовыйВидОплаты.ТипОплаты            = Перечисления.ТипыОплат.ПлатежнаяКарта;
		НовыйВидОплаты.Контрагент           = Контрагент;
		НовыйВидОплаты.ДоговорКонтрагента   = ДоговорКонтрагента;
		
		СчетаУчета = БухгалтерскийУчетВызовСервера.ПолучитьСчетаРасчетовСКонтрагентом(ДоговорКонтрагента.Организация, ДоговорКонтрагента.Владелец, ДоговорКонтрагента);
		
		НовыйВидОплаты.СчетУчетаРасчетов    = СчетаУчета.СчетРасчетовПокупателя;
		НовыйВидОплаты.СчетРасходов         = СчетаУчета.СчетАвансовПокупателя;
		НовыйВидОплаты.Записать();
		
		ВидОплаты = НовыйВидОплаты.Ссылка;
	КонецЕсли;
	
	
	МассивСтрокОплата = Новый Массив;
	Если ДанныеXDTO.Свойство("ОплатаПлатежнымиКартами")
		И ЗначениеЗаполнено(ДанныеXDTO.ОплатаПлатежнымиКартами) Тогда
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма", "СуммаОплаты");
		
		Для Каждого Строка Из ДанныеXDTO.ОплатаПлатежнымиКартами Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("ВидОплаты", ВидОплаты);
			СтруктураДанныхСтроки.Вставить("СуммаОплаты", Строка.СуммаОплаты);
			
			МассивСтрокОплата.Добавить(СтруктураДанныхСтроки);
			
		КонецЦикла;
	КонецЕсли;
	
	МассивСтрокВозвратОплаты = Новый Массив;
	Если ДанныеXDTO.Свойство("ВозвратОплатыПлатежнымиКартами")
		И ЗначениеЗаполнено(ДанныеXDTO.ВозвратОплатыПлатежнымиКартами) Тогда
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма", "СуммаОплаты");
		
		Для Каждого Строка Из ДанныеXDTO.ВозвратОплатыПлатежнымиКартами Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("ВидОплаты", ВидОплаты);
			СтруктураДанныхСтроки.Вставить("СуммаОплаты", Строка.СуммаОплаты);
			
			МассивСтрокВозвратОплаты.Добавить(СтруктураДанныхСтроки);
			
		КонецЦикла;
	КонецЕсли;
	
	ПолученныеДанные.Дата = ДанныеXDTO.КлючевыеСвойства.Дата;
	
	Если МассивСтрокОплата.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Оплата", МассивСтрокОплата);
	КонецЕсли;
	
	Если МассивСтрокВозвратОплаты.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВозвратОплаты", МассивСтрокВозвратОплаты);
	КонецЕсли;
	#КонецОбласти
КонецПроцедуры
Процедура ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПолученныеДанные.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
	ПолученныеДанные.Склад = ПолученныеДанные.Склад;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Склад) Тогда
		ПолученныеДанные.Склад = КомпонентыОбмена.ПараметрыКонвертации.Склад;	
	КонецЕсли;
				
	//// Заменяем свойства, которые получили из XDTO
	//ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	//
	Если ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.ДоговорКонтрагента) Тогда
		ПолученныеДанные.Контрагент = КомпонентыОбмена.ПараметрыКонвертации.ДоговорКонтрагента.Владелец;
		ПолученныеДанные.ДоговорКонтрагента = КомпонентыОбмена.ПараметрыКонвертации.ДоговорКонтрагента;
	КонецЕсли;
	ПолученныеДанные.Касса = КомпонентыОбмена.ПараметрыКонвертации.Касса;
	ПолученныеДанные.СтатьяДвиженияДенежныхСредств = КомпонентыОбмена.ПараметрыКонвертации.СтатьяДвиженияДенежныхСредств;
	
	Если ЗначениеЗаполнено(ПолученныеДанные.ДоговорКонтрагента) Тогда
		СчетаУчета = БухгалтерскийУчетВызовСервера.ПолучитьСчетаРасчетовСКонтрагентом(ПолученныеДанные.ДоговорКонтрагента.Организация, ПолученныеДанные.ДоговорКонтрагента.Владелец, ПолученныеДанные.ДоговорКонтрагента);
	
		ПолученныеДанные.СчетРасчетовДт = СчетаУчета.СчетРасчетовПокупателя;
		ПолученныеДанные.СчетРасчетовКт = СчетаУчета.СчетРасчетовПоставщика;
	КонецЕсли;
	
	// Товары
	Если ПолученныеДанные.Товары.Количество() Тогда
		Товары = ПолученныеДанные.Товары.Выгрузить();
		
		СтруктураСтроки = Новый Структура;
		Для каждого Колонка Из Товары.Колонки Цикл
			СтруктураСтроки.Вставить(Колонка.Имя, Товары[0][Колонка.Имя]);
		КонецЦикла;
		
		Для Каждого СтрокаТабличнойЧасти Из Товары Цикл
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаТабличнойЧасти);
			ОбработатьИзменениеНоменклатурыОРП(СтруктураСтроки, "Товары", ПолученныеДанные);
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтруктураСтроки);
			СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Всего - СтрокаТабличнойЧасти.СуммаНДС - СтрокаТабличнойЧасти.СуммаНСП;
		КонецЦикла;
		ПолученныеДанные.Товары.Загрузить(Товары);
		ПолученныеДанные.СуммаДокумента = Товары.Итог("Сумма");
	КонецЕсли;
	
	// Услуги
	Если ПолученныеДанные.Услуги.Количество() Тогда
		Услуги = ПолученныеДанные.Услуги.Выгрузить();
		
		СтруктураСтроки = Новый Структура;
		Для каждого Колонка Из Услуги.Колонки Цикл
			СтруктураСтроки.Вставить(Колонка.Имя, Услуги[0][Колонка.Имя]);
		КонецЦикла;
		
		Для Каждого СтрокаТабличнойЧасти Из Услуги Цикл
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаТабличнойЧасти);
			ОбработатьИзменениеНоменклатурыОРП(СтруктураСтроки, "Услуги", ПолученныеДанные);
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтруктураСтроки);
			СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Всего - СтрокаТабличнойЧасти.СуммаНДС - СтрокаТабличнойЧасти.СуммаНСП;
		КонецЦикла;
		ПолученныеДанные.Услуги.Загрузить(Услуги);
		ПолученныеДанные.СуммаДокумента = Услуги.Итог("Сумма");
	КонецЕсли;
	
	// Возврат
	Если ПолученныеДанные.Возвраты.Количество() Тогда
		Возвраты = ПолученныеДанные.Возвраты.Выгрузить();
		
		СтруктураСтроки = Новый Структура;
		Для каждого Колонка Из Возвраты.Колонки Цикл
			СтруктураСтроки.Вставить(Колонка.Имя, Возвраты[0][Колонка.Имя]);
		КонецЦикла;
	
		Для Каждого СтрокаТабличнойЧасти Из Возвраты Цикл
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаТабличнойЧасти);
			ОбработатьИзменениеНоменклатурыОРП(СтруктураСтроки, "Возвраты", ПолученныеДанные);
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтруктураСтроки);
			СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Всего - СтрокаТабличнойЧасти.СуммаНДС - СтрокаТабличнойЧасти.СуммаНСП;
		КонецЦикла;
		ПолученныеДанные.Возвраты.Загрузить(Возвраты);
	КонецЕсли;
	
	// Возврат услуг
	Если ПолученныеДанные.ВозвратУслуг.Количество() Тогда
		ВозвратУслуг = ПолученныеДанные.ВозвратУслуг.Выгрузить();
		
		СтруктураСтроки = Новый Структура;
		Для каждого Колонка Из ВозвратУслуг.Колонки Цикл
			СтруктураСтроки.Вставить(Колонка.Имя, ВозвратУслуг[0][Колонка.Имя]);
		КонецЦикла;
	
		Для Каждого СтрокаТабличнойЧасти Из ВозвратУслуг Цикл
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаТабличнойЧасти);
			ОбработатьИзменениеНоменклатурыОРП(СтруктураСтроки, "ВозвратУслуг", ПолученныеДанные);
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтруктураСтроки);
			СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Всего - СтрокаТабличнойЧасти.СуммаНДС - СтрокаТабличнойЧасти.СуммаНСП;
		КонецЦикла;
		ПолученныеДанные.ВозвратУслуг.Загрузить(ВозвратУслуг);
	КонецЕсли;
	
	//Оплата
	ПолученныеДанные.Оплата.Загрузить(ПолученныеДанные.Оплата.Выгрузить());
	ПолученныеДанные.ВозвратОплаты.Загрузить(ПолученныеДанные.ВозвратОплаты.Выгрузить());
		
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
		
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ТекущаяДата(), ПолученныеДанные.Организация);
	СтавкаНСПТовары = ДанныеУчетнойПолитики.СтавкаНСПРеализацииТовары;
	СтавкаНСПУслуги = ДанныеУчетнойПолитики.СтавкаНСПРеализацииУслуги;
	
	Если ДанныеXDTO.Свойство("AdditionalInfo") И ТипЗнч(ДанныеXDTO.AdditionalInfo)=Тип("Структура") Тогда //ED 
		ДопДанные = ДанныеXDTO.AdditionalInfo;
		
		Если ДопДанные.ОплатаНаличными = Ложь Тогда
			ПолученныеДанные.БезналичныйРасчет = Истина;
		КонецЕсли;
	КонецЕсли;
				
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("НомерСтроки", "НомерСтроки");
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			Если Строка.СтавкаНДС.Значение = "НДС18" Тогда
				СтруктураДанныхСтроки.Вставить("СтавкаНДС", Справочники.СтавкиНДС.Стандарт);
			ИначеЕсли Строка.СтавкаНДС.Значение = "НДС0" Тогда
				СтруктураДанныхСтроки.Вставить("СтавкаНДС", Справочники.СтавкиНДС.Нулевая);
			ИначеЕсли Строка.СтавкаНДС.Значение = "БезНДС" Тогда
				СтруктураДанныхСтроки.Вставить("СтавкаНДС", Справочники.СтавкиНДС.Освобожденная);
			КонецЕсли;
			
			Если ДанныеXDTO.Свойство("AdditionalInfo") И ТипЗнч(ДанныеXDTO.AdditionalInfo)=Тип("Структура") Тогда //ED 
				ДопДанные = ДанныеXDTO.AdditionalInfo;
				
				Если ДопДанные.Свойство("ТоварыПродажаНСП") Тогда
					СтрокаНСП = ДопДанные.ТоварыПродажаНСП.Найти(Строка.НомерСтрокиДокумента, "НомерСтроки");
					СтруктураДанныхСтроки.Вставить("СуммаНСП", СтрокаНСП.СуммаНСП);
					
					Если СтрокаНСП.СтавкаНСП = "НСП1" Тогда
							СтруктураДанныхСтроки.Вставить("ЗначениеСтавкиНСП", 1);	
						ИначеЕсли СтрокаНСП.СтавкаНСП = "НСП2" Тогда
							СтруктураДанныхСтроки.Вставить("ЗначениеСтавкиНСП", 2);
						ИначеЕсли СтрокаНСП.СтавкаНСП = "НСП3" Тогда
							СтруктураДанныхСтроки.Вставить("ЗначениеСтавкиНСП", 3);
						ИначеЕсли СтрокаНСП.СтавкаНСП = "НСП5" Тогда
							СтруктураДанныхСтроки.Вставить("ЗначениеСтавкиНСП", 5);
					Иначе
						Если СтруктураДанныхСтроки.Номенклатура <> Неопределено Тогда
							СтруктураДанныхСтроки.Вставить("ЗначениеСтавкиНСП", 1);
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			
			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
			
			ЗначениеСтавкиНДС = ?(ЗначениеЗаполнено(МассивСтрокТовары[0].СтавкаНДС), 
				УчетНДСВызовСервера.ПолучитьСтавкуНДС(ТекущаяДата(), МассивСтрокТовары[0].СтавкаНДС), 0);
			ЗначениеСтавкиНСП = ?(ПолученныеДанные.БезналичныйРасчет 
				Или НЕ ЗначениеЗаполнено(МассивСтрокТовары[0].СтавкаНСП), 0, 
					УчетНДСВызовСервера.ПолучитьСтавкуНСП(ТекущаяДата(), 
						ПолученныеДанные.Организация, 
						МассивСтрокТовары[0].СтавкаНСП));
			
			ПолученныеДанные.ЗначениеСтавкиНДС = ЗначениеСтавкиНДС;
			ПолученныеДанные.ЗначениеСтавкиНСП = ЗначениеСтавкиНСП;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПолученныеДанные.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
		ПолученныеДанные.Склад = ПолученныеДанные.Склад;
		ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ТекущаяДата(), ПолученныеДанные.Организация);
		
		ПолученныеДанные.Контрагент = ПолученныеДанные.Контрагент;
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Покупка;
			
		МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
		
		СписокВидовДоговоров = МенеджерСправочника.ВидыДоговораДляДокумента(ПолученныеДанные.Ссылка, Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(ПолученныеДанные.Контрагент, ПолученныеДанные.Организация, СписокВидовДоговоров);
		
		Если Не ЗначениеЗаполнено(ДоговорПоУмолчанию) Тогда
			// Создание договора.
				НадоСоздатьДоговор = Истина;
				ДоговорСсылка = Неопределено;
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ДоговорыКонтрагентов.Ссылка КАК Договор
				|ИЗ
				|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
				|ГДЕ
				|	ДоговорыКонтрагентов.Владелец = &Владелец
				|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
				|
				|УПОРЯДОЧИТЬ ПО
				|	ДоговорыКонтрагентов.НомерДоговора УБЫВ";
				Запрос.УстановитьПараметр("Владелец", ПолученныеДанные.Контрагент);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				Если Не РезультатЗапроса.Пустой() Тогда
					Выборка = РезультатЗапроса.Выбрать();
					Выборка.Следующий();
					ДоговорСсылка = Выборка.Договор;
					
					НадоСоздатьДоговор = Ложь;
				КонецЕсли;
				
				Если НадоСоздатьДоговор Тогда
					// Создадим договор контрагента.
					ДоговорОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
					ДоговорОбъект.Заполнить(ПолученныеДанные.Контрагент);
					ДоговорСсылка = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку();
					ДоговорОбъект.УстановитьСсылкуНового(ДоговорСсылка);
					БухгалтерскийУчетСервер.ЗаписатьСправочникОбъект(ДоговорОбъект);
				КонецЕсли;
				
				// Установка основного договора.
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ОсновныеДоговорыКонтрагента.Договор КАК Договор
				|ИЗ
				|	РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
				|ГДЕ
				|	ОсновныеДоговорыКонтрагента.Организация = &Организация
				|	И ОсновныеДоговорыКонтрагента.Контрагент = &Контрагент";
				Запрос.УстановитьПараметр("Контрагент", ПолученныеДанные.Контрагент);
				Запрос.УстановитьПараметр("Организация", ПолученныеДанные.Организация);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				Если РезультатЗапроса.Пустой()
					И ЗначениеЗаполнено(ДоговорСсылка) Тогда 
					Справочники.ДоговорыКонтрагентов.УстановитьОсновнойДоговорКонтрагента(ДоговорСсылка);
				КонецЕсли;
				
				ДоговорПоУмолчанию = ДоговорСсылка;
		КонецЕсли;
		
		СтруктураДанные = Новый Структура;
		
		СтруктураДанные.Вставить(
		"ДоговорКонтрагента",
		ДоговорПоУмолчанию);
		
		СтруктураДанные.Вставить(
		"ПризнакСтраны",
		ПолученныеДанные.Контрагент.ПризнакСтраны);
		
		СтруктураДанные.Вставить(
		"СЭЗ",
		ПолученныеДанные.Контрагент.СЭЗ);
		
		ПолученныеДанные.ДоговорКонтрагента = СтруктураДанные.ДоговорКонтрагента;
		ПризнакСтраны = СтруктураДанные.ПризнакСтраны;
		
		// Обработка изменения налогообложения
		Если ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС") Тогда
			ПолученныеДанные.СуммаВключаетНалоги = Истина;
		Иначе	
			ПолученныеДанные.СуммаВключаетНалоги 	= Ложь;
		КонецЕсли;
		
		Если СтруктураДанные.СЭЗ Тогда
			ПолученныеДанные.ЗначениеСтавкиНДС = 0;	
		КонецЕсли;	
		
		// Изменение признака страны
		Если ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС") Тогда
			ПолученныеДанные.БезналичныйРасчет = Истина;
			ПолученныеДанные.ЭтоПоступлениеПоЧеку = Ложь;
			// Ставки
			ПолученныеДанные.НДСНеПодтвержден = Ложь;
			ПолученныеДанные.ЗначениеСтавкиНСП = 0;
			ПолученныеДанные.ЗначениеСтавкиНСПДляОС = 0;
		ИначеЕсли ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ИмпортЭкспорт") Тогда	
			ПолученныеДанные.БезналичныйРасчет = Истина;
			ПолученныеДанные.ЭтоПоступлениеПоЧеку = Ложь;
			// Ставки
			ПолученныеДанные.НДСНеПодтвержден = Ложь;
			ПолученныеДанные.ЗначениеСтавкиНДС = 0;
			ПолученныеДанные.ЗначениеСтавкиНСП = 0;
			ПолученныеДанные.ЗначениеСтавкиНСПДляОС = 0;
			// Акциз
			ПолученныеДанные.СуммаАкциза = 0;
			ПолученныеДанные.СпособРаспределенияАкциза = "";
			
			ПараметрыРасчета = ПодготовитьПараметрыРасчета(ПолученныеДанные);
			
			// Расчет налогов
			ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
			ПолученныеДанные, "Товары", ПараметрыРасчета);
			
		Иначе // КР или не заполнен Контрагент
			ПолученныеДанные.ЭтоПоступлениеПоЧеку = Ложь;
			// Акциз
			ПолученныеДанные.СуммаАкциза = 0;
			ПолученныеДанные.СпособРаспределенияАкциза = "";
			
			ПараметрыРасчета = ПодготовитьПараметрыРасчета(ПолученныеДанные);
			
			// Расчет налогов
			//ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
			//ПолученныеДанные, "Товары", ПараметрыРасчета);
			
		КонецЕсли;	
		
		ОбработатьИзменениеДоговораПоступление(ПолученныеДанные, ДанныеУчетнойПолитики);
		
		// Товары
		Если ПолученныеДанные.Товары.Количество() Тогда
			Товары = ПолученныеДанные.Товары.Выгрузить();
			
			СтруктураСтроки = Новый Структура;
			Для каждого Колонка Из Товары.Колонки Цикл
				СтруктураСтроки.Вставить(Колонка.Имя, Товары[0][Колонка.Имя]);
			КонецЦикла;
			
			Для Каждого СтрокаТабличнойЧасти Из Товары Цикл
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаТабличнойЧасти);
				ОбработатьИзменениеНоменклатурыПоступление(СтруктураСтроки, "Товары", ПолученныеДанные);
				
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтруктураСтроки);
				СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Всего - СтрокаТабличнойЧасти.СуммаНДС - СтрокаТабличнойЧасти.СуммаНСП;
			КонецЦикла;
			ПолученныеДанные.Товары.Загрузить(Товары);
			ПолученныеДанные.СуммаДокумента = Товары.Итог("Всего");
		КонецЕсли;
		
		Если ДанныеИБ = Неопределено Тогда
			Возврат;
		КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("AdditionalInfo") И ТипЗнч(ДанныеXDTO.AdditionalInfo)=Тип("Структура") Тогда //ED 
		ДопДанные = ДанныеXDTO.AdditionalInfo;
		
		
		Если ДопДанные.Покупатель И Не ДопДанные.Поставщик Тогда
			ПолученныеДанные.ВидОсновногоДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
			ПолученныеДанные.ОбменДанными.Загрузка = Ложь;
		ИначеЕсли Не ДопДанные.Покупатель И ДопДанные.Поставщик Тогда
			ПолученныеДанные.ВидОсновногоДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
			ПолученныеДанные.ОбменДанными.Загрузка = Ложь;
		Иначе
			ПолученныеДанные.ВидОсновногоДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
			ПолученныеДанные.ОбменДанными.Загрузка = Ложь;
		КонецЕсли;
		//ПолученныеДанные.Код = ДопДанные.Код;
		КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПолученныеДанные.ОбменДанными.Загрузка = Ложь;
КонецПроцедуры
Процедура ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ТипНоменклатуры", ?(ДанныеИБ.Услуга, "Услуга", "Товар"));         
		
		ЕдиницаИзмерения = Новый Структура;
		ЕдиницаИзмерения.Вставить("Ссылка", ДанныеИБ.ЕдиницаИзмерения);
		ЕдиницаИзмерения.Вставить("ДанныеКлассификатора", Новый Структура("Наименование, Код", ДанныеИБ.ЕдиницаИзмерения.Наименование,ДанныеИБ.ЕдиницаИзмерения.Код));
		ДанныеXDTO.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		
		Если ЗначениеЗаполнено(ДанныеИБ.КодТНВЭД) Тогда 
			AdditionalInfoВставить(ДанныеXDTO, "КодТНВЭД", Строка(ДанныеИБ.КодТНВЭД.УникальныйИдентификатор())); 
			AdditionalInfoВставить(ДанныеXDTO, "КодТНВЭДКод", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.КодТНВЭД, "Код")); 
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеИБ.КодГКЭД) Тогда 
			AdditionalInfoВставить(ДанныеXDTO, "КодГКЭД", Строка(ДанныеИБ.КодГКЭД.УникальныйИдентификатор())); 
			AdditionalInfoВставить(ДанныеXDTO, "КодГКЭДКод", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.КодГКЭД, "Код")); 
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеИБ.ЗначениеСтавкиНСП) Тогда 
			AdditionalInfoВставить(ДанныеXDTO, "СтавкаНСП", ДанныеИБ.ЗначениеСтавкиНСП); 
		КонецЕсли;
		
		AdditionalInfoВставить(ДанныеXDTO, "СтавкаНДС", УчетНДС.ПолучитьСтавкуНДС(ТекущаяДата(), КомпонентыОбмена.ПараметрыКонвертации.ДоговорКонтрагента.СтавкаНДС));
		
		Если КомпонентыОбмена.ПараметрыКонвертации.ВыгрузкаТоваровБезЦены = Истина Тогда
			AdditionalInfoВставить(ДанныеXDTO, "Цена", 0);
		Иначе
			Запрос = Новый Запрос;
			Запрос.Текст = "Выбрать Цена Из РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура = &Номенклатура И ТипЦен В (&ВидыЦенНоменклатуры) И Организация В (&Организации))";
			Запрос.УстановитьПараметр("ВидыЦенНоменклатуры", КомпонентыОбмена.ПараметрыКонвертации.ВидыЦенНоменклатуры);
			Запрос.УстановитьПараметр("Организации", КомпонентыОбмена.ПараметрыКонвертации.Организации);
			Запрос.УстановитьПараметр("Номенклатура", ДанныеИБ.Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				AdditionalInfoВставить(ДанныеXDTO, "Цена", Выборка.Цена);
			КонецЕсли;
			
			//ДанныеXDTO.Родитель = Справочники.Номенклатура.ПустаяСсылка();
			
			Если Не ЗначениеЗаполнено(Выборка.Цена) И СтекВыгрузки.Количество() = 1 Тогда
				ДанныеXDTO = Неопределено;
				Возврат;
			КонецЕсли;
		КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ТипыЦенНоменклатуры_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ВалютаЦены = Константы.ВалютаРегламентированногоУчета.Получить();
КонецПроцедуры
Процедура ПКО_Справочник_ФизическиеЛица_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ФИО = ПолученныеДанные.Наименование;
	
	Если ДанныеXDTO.Свойство("ДанныеФИО") И ДанныеXDTO.ДанныеФИО.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДанныеФИО", ДанныеXDTO.ДанныеФИО);
	КонецЕсли;
	
	ПолучитьКонтактнуюИнформациюФизическогоЛица(ДанныеXDTO, ПолученныеДанные);
КонецПроцедуры
Процедура ПКО_Справочник_ФизическиеЛица_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ФизЛицоСсылка = ?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка);
	
	ЗагрузитьПодробныеДанныеФИО(КомпонентыОбмена, ПолученныеДанные, ФизЛицоСсылка);
КонецПроцедуры
Процедура ПКО_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Штрихкод", ДанныеИБ.Отбор.Штрихкод.Значение);
	
	Записи = Новый ТаблицаЗначений;
	Записи.Колонки.Добавить("Номенклатура");
	Записи.Колонки.Добавить("Штрихкод");
	
	Для Каждого СтрокаНабора Из ДанныеИБ Цикл
		СтрокаЗаписи = Записи.Добавить();
		СтрокаЗаписи.Штрихкод = СтрокаНабора.Штрихкод;
		СтрокаЗаписи.Номенклатура = СтрокаНабора.Номенклатура;
		ДанныеXDTO.Вставить("НоменклатураОтбор", СтрокаНабора.Номенклатура);
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Записи", Записи);
КонецПроцедуры

#КонецОбласти
#Область Алгоритмы


Процедура AdditionalInfoВставить(ДанныеXDTO, Имя, ДопЗначение)
	Если ДанныеXDTO.Свойство("AdditionalInfo") И ТипЗнч(ДанныеXDTO.AdditionalInfo)=Тип("Структура") Тогда 
	ДопДанные = ДанныеXDTO.AdditionalInfo; 
	Иначе ДопДанные = Новый Структура; 
	КонецЕсли; 
	ДопДанные.Вставить(Имя, ДопЗначение); 
	ДанныеXDTO.Вставить("AdditionalInfo", ДопДанные);
КонецПроцедуры
Функция ДанныеКоллекцииВВидеСтруктуры(Источник, ПравилаЗаполнения)
	Результат = Новый Структура;
	Для Каждого ПравилоЗаполнения Из ПравилаЗаполнения Цикл
		СтруктураДляПереносаЗначения = Новый Структура(ПравилоЗаполнения.Ключ, Неопределено);
		ЗаполнитьЗначенияСвойств(СтруктураДляПереносаЗначения, Источник);
		Значение = СтруктураДляПереносаЗначения[ПравилоЗаполнения.Ключ];
		Если Значение <> Неопределено Тогда
			Результат.Вставить(ПравилоЗаполнения.Значение, Значение);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат
КонецФункции
Функция ДоговорСПараметрамиПоУмолчанию(ПараметрыДоговора)
	Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	НеобходимоСоздатьДоговор = Ложь;
	Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 2
		|Ссылка,
		|ВЫБОР
		|	КОГДА Наименование = &НаименованиеЭлементаДляОбменаПоУмолчанию
		|		ТОГДА ИСТИНА
		|	ИНАЧЕ ЛОЖЬ
		|КОНЕЦ КАК ЭтоЭлементПоУмолчаниюДляОбмена
		|ИЗ Справочник.ДоговорыКонтрагентов
		|ГДЕ Организация = &Организация
		|	И ВидДоговора = &ВидДоговора
		|	И Владелец = &Владелец
		|	И ВалютаРасчетов = &ВалютаВзаиморасчетов
		|	И ПометкаУдаления = Ложь");
		
	НаименованиеЭлементаДляОбменаПоУмолчанию = ПараметрыДоговора.Наименование;
	Запрос.УстановитьПараметр("НаименованиеЭлементаДляОбменаПоУмолчанию", НаименованиеЭлементаДляОбменаПоУмолчанию);
	
	Запрос.УстановитьПараметр("Организация",          ПараметрыДоговора.Организация);
	Запрос.УстановитьПараметр("Владелец",             ПараметрыДоговора.Владелец);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ПараметрыДоговора.ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("ВидДоговора",          ПараметрыДоговора.ВидДоговора);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Договор = Выборка.Ссылка;
		Если Выборка.Следующий() Тогда
			НеобходимоСоздатьДоговор = Истина;
		КонецЕсли;
	Иначе
		НеобходимоСоздатьДоговор = Истина;
	КонецЕсли;
	
	// Создание элемента для обмена с заданными параметрами.
	Если НеобходимоСоздатьДоговор Тогда
		ДоговорОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(ДоговорОбъект, ПараметрыДоговора);
		ДоговорОбъект.УстановитьНовыйКод();
	
		Попытка
			ДоговорОбъект.ОбменДанными.Загрузка = Истина;
			ДоговорОбъект.Записать();
			Договор = ДоговорОбъект.Ссылка;
		Исключение
		КонецПопытки
	КонецЕсли;
	
	Возврат Договор;
КонецФункции
Процедура ЗагрузитьПодробныеДанныеФИО(КомпонентыОбмена, ПолученныеДанные, ФизЛицоСсылка)
	// Если история ФИО не передана и не заполнено поле ФИО физческого лица,
		// то заполнять регистр не требуется
		Если НЕ ПолученныеДанные.ДополнительныеСвойства.Свойство("ДанныеФИО")
			И НЕ ЗначениеЗаполнено(ПолученныеДанные.Наименование) Тогда
			Возврат;
		КонецЕсли;
		
		НаборЗаписейФИО = РегистрыСведений.ФИОФизическихЛиц.СоздатьНаборЗаписей();
		НаборЗаписейФИО.Отбор.ФизЛицо.Установить(ФизЛицоСсылка);
		
		Если ПолученныеДанные.ДополнительныеСвойства.Свойство("ДанныеФИО") Тогда
			// Набор записей полностью заменяется на полученные данные
			Для Каждого СтрокаФИО Из ПолученныеДанные.ДополнительныеСвойства.ДанныеФИО Цикл
				МенеджерЗаписиФИО = НаборЗаписейФИО.Добавить();
				МенеджерЗаписиФИО.Период   = СтрокаФИО.НачалоПериода;
				МенеджерЗаписиФИО.Фамилия  = СтрокаФИО.Фамилия;
				МенеджерЗаписиФИО.Имя      = СтрокаФИО.Имя;
				МенеджерЗаписиФИО.Отчество = СтрокаФИО.Отчество;
		
				
				
				МенеджерЗаписиФИО.ФизЛицо = ФизЛицоСсылка;
			КонецЦикла;
		
		КонецЕсли;
			
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписейФИО);
КонецПроцедуры
Процедура ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ, МассивИсключений = Неопределено)
	Для Каждого СвойствоОбъекта Из КонвертацияСвойств Цикл
		СвойствоИБ = СвойствоОбъекта.СвойствоКонфигурации;
		Если СокрЛП(СвойствоИБ) = "" Тогда
			Продолжить;
		КонецЕсли;
		Если МассивИсключений <> Неопределено И МассивИсключений.Найти(СвойствоИБ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДанныеИБ[СвойствоИБ] = ПолученныеДанные[СвойствоИБ];
	КонецЦикла;
КонецПроцедуры
Функция КонтрагентРозничныйПокупатель(КомпонентыОбмена)
	Элемент = Справочники.Контрагенты.ПустаяСсылка();
	
	НаименованиеЭлементаДляОбменаПоУмолчанию = НСтр("ru='Розничный покупатель'");
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	НЕ Контрагенты.ПометкаУдаления
		|	И Контрагенты.Наименование = &НаименованиеЭлементаДляОбменаПоУмолчанию");
	
	Запрос.УстановитьПараметр("НаименованиеЭлементаДляОбменаПоУмолчанию", НаименованиеЭлементаДляОбменаПоУмолчанию);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Элемент = Выборка.Ссылка;
	Иначе
	
		// Создание элемента для обмена с заданными параметрами
		КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
		КонтрагентОбъект.Наименование = НаименованиеЭлементаДляОбменаПоУмолчанию;
		КонтрагентОбъект.НаименованиеПолное = КонтрагентОбъект.Наименование;
		КонтрагентОбъект.ЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		КонтрагентОбъект.СтранаРезидентства = Справочники.СтраныМира.Россия;
		КонтрагентОбъект.УстановитьНовыйКод();
	
		Попытка
			КонтрагентОбъект.Записать();
			Элемент = КонтрагентОбъект.Ссылка;
		Исключение
		КонецПопытки
		
	КонецЕсли;
	
	Возврат Элемент
КонецФункции
Процедура ОбработатьИзменениеДоговораПоступление(Объект,ДанныеУчетнойПолитики)
	ЗначенияТекущихСтавокНДСиНСП = Новый Структура;
	ЗначенияТекущихСтавокНДСиНСП.Вставить("ЗначениеСтавкиНДС", Объект.ЗначениеСтавкиНДС);
	ЗначенияТекущихСтавокНДСиНСП.Вставить("ЗначениеСтавкиНСП", Объект.ЗначениеСтавкиНСП);
	ЗначенияТекущихСтавокНДСиНСП.Вставить("ЗначениеСтавкиНСПДляОС", Объект.ЗначениеСтавкиНСПДляОС);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		Объект.ДоговорКонтрагента.ВалютаРасчетов);
	
	СтруктураДанные.Вставить(
			"ВалютаРасчетовКурсКратность",
			РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ДоговорКонтрагента.ВалютаРасчетов, ТекущаяДата()));
	
	СтруктураДанные.Вставить(
		"СуммаВключаетНалоги",
		Объект.ДоговорКонтрагента.СуммаВключаетНалоги);
	
	СчетаУчета = БухгалтерскийУчетСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.ДоговорКонтрагента.Организация, Объект.ДоговорКонтрагента.Владелец, Объект.ДоговорКонтрагента);
	СтруктураДанные.Вставить(
		"СчетРасчетов",
		СчетаУчета.СчетРасчетовПоставщика);
		
	ЗначенияСтавокНДСиНСП = УчетНДС.ПолучитьЗначенияСтавокНДСиНСП(ТекущаяДата(), Объект.ДоговорКонтрагента, ЗначенияТекущихСтавокНДСиНСП); 
	
	СтруктураДанные.Вставить(
		"ЗначениеСтавкиНДС",
		ЗначенияСтавокНДСиНСП.ЗначениеСтавкиНДС);
		
	СтруктураДанные.Вставить(
		"ЗначениеСтавкиНСП",
		ЗначенияСтавокНДСиНСП.ЗначениеСтавкиНСП);
		
	СтруктураДанные.Вставить(
		"ЗначениеСтавкиНСПДляОС",
		ЗначенияСтавокНДСиНСП.ЗначениеСтавкиНСПДляОС);	
		
	СтруктураДанные.Вставить(
		"НомерДоговора",
		Объект.ДоговорКонтрагента.НомерДоговора);
		
	СтруктураДанные.Вставить(
		"ДатаДоговора",
		Объект.ДоговорКонтрагента.ДатаДоговора);
			
			
	// Обработка изменения валюты
	Объект.ВалютаДокумента = СтруктураДанные.ВалютаРасчетов;
	Объект.Курс      = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
	Объект.Кратность = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
	
	КурсНБКР      = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
	КратностьНБКР = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
	
	Если Объект.Контрагент.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ИмпортЭкспорт") Тогда		
		Объект.ЗначениеСтавкиНДС 		= 0;
		Объект.ЗначениеСтавкиНСП 		= 0;
		Объект.ЗначениеСтавкиНСПДляОС 	= 0;		
	Иначе
		//Объект.ЗначениеСтавкиНДС 		= ?(ДанныеУчетнойПолитики.ПлательщикНДС, СтруктураДанные.ЗначениеСтавкиНДС, 0);
		//Объект.ЗначениеСтавкиНСП 		= ?(ДанныеУчетнойПолитики.ПлательщикНСП, СтруктураДанные.ЗначениеСтавкиНСП, 0);
		//Объект.ЗначениеСтавкиНСПДляОС 	= ?(ДанныеУчетнойПолитики.ПлательщикНСП, СтруктураДанные.ЗначениеСтавкиНСПДляОС, 0);	
	КонецЕсли;
	
	
	// Обработка изменения отражения в учете
	Объект.СчетРасчетов = СтруктураДанные.СчетРасчетов;
КонецПроцедуры
Процедура ОбработатьИзменениеНоменклатурыОРП(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, Объект)
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("СуммаВключаетНалоги", Истина);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	//СтруктураДанные.Вставить("ТочностьЦены", Объект.ТочностьЦены);
	
	// Счета учета
	СчетаУчетаНоменклатуры = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(СтруктураДанные.Организация, СтруктураДанные.Номенклатура);
	СтруктураДанные.Вставить("СчетУчета", СчетаУчетаНоменклатуры.СчетУчета);
	СтруктураДанные.Вставить("СчетДоходов", СчетаУчетаНоменклатуры.СчетДоходов);
	СтруктураДанные.Вставить("СчетРасходов", СчетаУчетаНоменклатуры.СчетРасходов);
	СтруктураДанные.Вставить("СтатьяДоходов", СчетаУчетаНоменклатуры.СтатьяДоходов);
	СтруктураДанные.Вставить("СтатьяРасходов", СчетаУчетаНоменклатуры.СтатьяРасходов);
	
	// Заполнение по данным номенклатуры
	СтрокаТабличнойЧасти.СчетДоходов = СтруктураДанные.СчетДоходов;
	СтрокаТабличнойЧасти.СтатьяДоходов = СтруктураДанные.СтатьяДоходов;
	
	Если ИмяТабличнойЧасти = "Товары" ИЛИ ИмяТабличнойЧасти = "Возвраты" Тогда 
		СтрокаТабличнойЧасти.СчетУчета = СтруктураДанные.СчетУчета;
		СтрокаТабличнойЧасти.СчетСебестоимости = СтруктураДанные.СчетРасходов;
		СтрокаТабличнойЧасти.СтатьяРасходов = СтруктураДанные.СтатьяРасходов;
	КонецЕсли;	
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
КонецПроцедуры
Процедура ОбработатьИзменениеНоменклатурыПоступление(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, Объект)
	СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("Дата", Объект.Дата);
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СтавкаНДС", Объект.ЗначениеСтавкиНДС);
		СтруктураДанные.Вставить("СтавкаНСП", Объект.ЗначениеСтавкиНСП);
		СтруктураДанные.Вставить("СуммаВключаетНалоги", Объект.СуммаВключаетНалоги);
		СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		
		// Счета учета
		СчетаУчетаНоменклатуры = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(СтруктураДанные.Организация, СтруктураДанные.Номенклатура);
		СтруктураДанные.Вставить("СчетУчета", СчетаУчетаНоменклатуры.СчетУчета);
		СтруктураДанные.Вставить("СчетРасходов", СчетаУчетаНоменклатуры.СчетРасходов);
		
		// Цены
		СтруктураДанные.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам);
		Цена = Ценообразование.ПолучитьЦенуПоДокументам(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
		
		// Заполнение по данным номенклатуры
		Если ИмяТабличнойЧасти = "Товары" Тогда 
			СтрокаТабличнойЧасти.СчетУчета = СтруктураДанные.СчетУчета;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
		
		//Если СтрокаТабличнойЧасти.Количество = 0 Тогда  
		//	СтрокаТабличнойЧасти.Количество = 1;
		//КонецЕсли;
		 ПараметрыРасчета = ПодготовитьПараметрыРасчета(Объект);
		
		// Расчет суммы
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуИБазуНДССтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, ПараметрыРасчета);
КонецПроцедуры
Функция ПодготовитьПараметрыРасчета(Объект)
	ПризнакСтраныЕАЭС 			= Объект.Контрагент.ПризнакСтраны = Перечисления.ПризнакиСтраны.ЕАЭС;
	ПризнакСтраныИмпортЭкспорт 	= Объект.Контрагент.ПризнакСтраны = Перечисления.ПризнакиСтраны.ИмпортЭкспорт;
	
	ПараметрыРасчета = ОбработкаТабличныхЧастейКлиентСервер.ШаблонПараметровРасчета();
	ПараметрыРасчета.ПризнакСтраныЕАЭС = ПризнакСтраныЕАЭС;
	ПараметрыРасчета.ЕстьАкциз = Истина;
	ПараметрыРасчета.СуммаВключаетНалоги = Объект.СуммаВключаетНалоги;
	ПараметрыРасчета.ЗначениеСтавкиНДС = Объект.ЗначениеСтавкиНДС;
	ПараметрыРасчета.ЗначениеСтавкиНСП = Объект.ЗначениеСтавкиНСП;
	ПараметрыРасчета.БезналичныйРасчет = Объект.БезналичныйРасчет;
	ПараметрыРасчета.КурсДокумента = 1;
	ПараметрыРасчета.КратностьДокумента = 1;
	ПараметрыРасчета.КурсНБКР = 1;
	ПараметрыРасчета.КратностьНБКР = 1;
	ПараметрыРасчета.РассчитатьБазуНДС = ПризнакСтраныЕАЭС;
	ПараметрыРасчета.РассчитатьОтБазыНДС = ПризнакСтраныЕАЭС;
	ПараметрыРасчета.ПризнакСтраныИмпортЭкспорт = ПризнакСтраныИмпортЭкспорт;
	ПараметрыРасчета.Точность = Объект.ТочностьЦены;
	
	Возврат ПараметрыРасчета;
КонецФункции
Процедура ПолучитьКонтактнуюИнформациюФизическогоЛица(ДанныеXDTO, ПолученныеДанные)
	Если ДанныеXDTO.Свойство("КонтактнаяИнформация")
			И ЗначениеЗаполнено(ДанныеXDTO.КонтактнаяИнформация) Тогда
				
			ТипОбъекта = ПолученныеДанные.Метаданные().Имя;
			РодительВидовКИ = Справочники.ВидыКонтактнойИнформации["Справочник"+ТипОбъекта];
			
			Для Каждого СтрокаXDTO Из ДанныеXDTO.КонтактнаяИнформация Цикл
				ВидКИСтрокой = СтрокаXDTO.ВидКонтактнойИнформации.Значение;
				
				ТекВидКИ = Неопределено;
				
				Если Лев(СокрЛП(ВидКИСтрокой),18) = "ПользовательскаяКИ" Тогда
					ИмяТипаКИ = СтрЗаменить(СокрЛП(ВидКИСтрокой),"ПользовательскаяКИ","");
					ТипКИ = Перечисления.ТипыКонтактнойИнформации[ИмяТипаКИ];
					НаименованиеКИ = СокрЛП(СтрокаXDTO.НаименованиеКонтактнойИнформации);
					
					Если ЗначениеЗаполнено(НаименованиеКИ) Тогда
						Запрос = Новый Запрос();
						Запрос.Параметры.Вставить("Родитель",     РодительВидовКИ);
						Запрос.Параметры.Вставить("Наименование", НаименованиеКИ);
						Запрос.Параметры.Вставить("Тип",          ТипКИ);
						Запрос.Текст =
						"ВЫБРАТЬ ПЕРВЫЕ 1
						|	ВидыКонтактнойИнформации.Ссылка
						|ИЗ
						|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
						|ГДЕ
						|	ВидыКонтактнойИнформации.Родитель = &Родитель
						|	И ВидыКонтактнойИнформации.Наименование = &Наименование
						|	И ВидыКонтактнойИнформации.Тип = &Тип";
						Выборка = Запрос.Выполнить().Выбрать();
						Если Выборка.Следующий() Тогда
							ТекВидКИ = Выборка.Ссылка;
						Иначе
							ВидКИОбъект = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
							ВидКИОбъект.ОбменДанными.Загрузка = Истина;
							ВидКИОбъект.Используется = Истина;
							ВидКИОбъект.Родитель     = РодительВидовКИ;
							ВидКИОбъект.Наименование = НаименованиеКИ;
							ВидКИОбъект.Тип = ТипКИ;
							ВидКИОбъект.Записать();
							ТекВидКИ = ВидКИОбъект.Ссылка;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВидКИСтрокой = "АдресЭлектроннойПочты" Тогда
					Если ТипОбъекта = "Контрагенты" Тогда
						ТекВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
					ИначеЕсли ТипОбъекта = "Организации" Тогда
						ТекВидКИ = Справочники.ВидыКонтактнойИнформации.EmailОрганизации;
					ИначеЕсли ТипОбъекта = "ФизическиеЛица" Тогда
						ТекВидКИ = Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица;
					КонецЕсли;
				ИначеЕсли ВидКИСтрокой = "ПочтовыйАдрес" Тогда
					Если ТипОбъекта = "Контрагенты" Тогда
						ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
					ИначеЕсли ТипОбъекта = "Организации" Тогда
					    ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
					ИначеЕсли ТипОбъекта = "ФизическиеЛица" Тогда
					    ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
					КонецЕсли;
				ИначеЕсли ВидКИСтрокой = "ФактическийАдрес" Тогда
					Если ТипОбъекта = "Контрагенты" Тогда
						ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
					ИначеЕсли ТипОбъекта = "Организации" Тогда
						ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
					ИначеЕсли ТипОбъекта = "ФизическиеЛица" Тогда
					    ТекВидКИ = Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица;
					КонецЕсли;
				ИначеЕсли ВидКИСтрокой = "ЮридическийАдрес" Тогда
					Если ТипОбъекта = "Контрагенты" Тогда
						ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
					ИначеЕсли ТипОбъекта = "Организации" Тогда
					    ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
					ИначеЕсли ТипОбъекта = "ФизическиеЛица" Тогда
					    ТекВидКИ = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;
					КонецЕсли;
				ИначеЕсли ВидКИСтрокой = "Телефон" Тогда
					Если ТипОбъекта = "Контрагенты" Тогда
						ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
					ИначеЕсли ТипОбъекта = "Организации" Тогда
						ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
		
					КонецЕсли;
				ИначеЕсли ВидКИСтрокой = "ТелефонДомашний" Тогда
					Если ТипОбъекта = "ФизическиеЛица" Тогда
						ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица;
					КонецЕсли;
				ИначеЕсли ВидКИСтрокой = "ТелефонРабочий" Тогда
					Если ТипОбъекта = "ФизическиеЛица" Тогда
						ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ТекВидКИ) Тогда
					Продолжить;
				КонецЕсли;
				
				СвойстваВидаКИ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекВидКИ, "Тип, РазрешитьВводНесколькихЗначений, ЗапретитьРедактированиеПользователем");
				
				// Проверим, что вид КИ не поддерживает множественные значения.
				// Если так - то нужно убедиться, что в табличной части нет такого вида КИ
				СтрокиВидаКИ = ПолученныеДанные.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", ТекВидКИ));
				Если СтрокиВидаКИ.Количество() > 0 Тогда
					Если НЕ СвойстваВидаКИ.РазрешитьВводНесколькихЗначений Тогда
						Если СвойстваВидаКИ.ЗапретитьРедактированиеПользователем Тогда
							Продолжить;
					 	Иначе
					 		ОбъектВидаКИ = ТекВидКИ.ПолучитьОбъект();
					 		ОбъектВидаКИ.РазрешитьВводНесколькихЗначений = Истина;
					 		ОбъектВидаКИ.Записать();
					 	КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ПолученныеДанные, СокрЛП(СтрокаXDTO.ЗначенияПолей), ТекВидКИ);
				
			КонецЦикла;
			
		КонецЕсли;
КонецПроцедуры
Процедура СоздатьДоговорКонтрагента(Объект)
	Если НЕ Объект.ЭтоГруппа Тогда
			НадоСоздатьДоговор = Истина;
			ДоговорСсылка = Неопределено;
		
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ДоговорыКонтрагентов.Ссылка КАК Договор
				|ИЗ
				|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
				|ГДЕ
				|	ДоговорыКонтрагентов.Владелец = &Владелец
				|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
				|
				|УПОРЯДОЧИТЬ ПО
				|	ДоговорыКонтрагентов.НомерДоговора УБЫВ";
			Запрос.УстановитьПараметр("Владелец", Объект.Ссылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если Не РезультатЗапроса.Пустой() Тогда
				Выборка = РезультатЗапроса.Выбрать();
				Выборка.Следующий();
				ДоговорСсылка = Выборка.Договор;
				
				НадоСоздатьДоговор = Ложь;
			КонецЕсли;
			
			Если НадоСоздатьДоговор Тогда
				// Создадим договор контрагента.
				ДоговорОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
				ДоговорОбъект.Заполнить(Объект.Ссылка);
				ДоговорСсылка = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку();
				ДоговорОбъект.УстановитьСсылкуНового(ДоговорСсылка);
				БухгалтерскийУчетСервер.ЗаписатьСправочникОбъект(ДоговорОбъект);
			КонецЕсли;
			
			// Установка основного договора.
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ОсновныеДоговорыКонтрагента.Договор КАК Договор
				|ИЗ
				|	РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
				|ГДЕ
				|	ОсновныеДоговорыКонтрагента.Организация = &Организация
				|	И ОсновныеДоговорыКонтрагента.Контрагент = &Контрагент";
			Запрос.УстановитьПараметр("Контрагент", Объект.Ссылка);
			Запрос.УстановитьПараметр("Организация", БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация"));
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если РезультатЗапроса.Пустой()
				И ЗначениеЗаполнено(ДоговорСсылка) Тогда 
				Справочники.ДоговорыКонтрагентов.УстановитьОсновнойДоговорКонтрагента(ДоговорСсылка);
			КонецЕсли;	
		КонецЕсли;
КонецПроцедуры
Функция ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO)
	// ДанныеXDTO содержат только 1 свойство, 
	// значит выполняется загрузка значения свойства, а не самого объекта. 
	Возврат ДанныеXDTO.Количество() = 1;
КонецФункции

#КонецОбласти
#КонецОбласти
