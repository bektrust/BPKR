
#Область ПрограммныйИнтерфейс

// Процедура начинает выполнение команды, обрабатывает и перенаправляет на исполнение команду к драйверу.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - событие описания оповещения.
//  ПараметрыПодключения - Структура
//  Команда - Строка - команда для выполнения
//  ДанныеОперации - Структура - данные операции для выполнения команды
//
Процедура НачатьВыполнениеКоманды(ОповещениеПриЗавершении, ПараметрыПодключения, Команда, ДанныеОперации) Экспорт;
	
	РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, Неопределено, ПараметрыПодключения.ИдентификаторУстройства);
	
	// ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С ФИСКАЛЬНЫМИ УСТРОЙСТВАМИ 
	Если Команда = "CheckFiscalization" Тогда
		ФискализацияЧека(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения); 
	ИначеЕсли Команда = "PrintText" Или Команда = "PrintQRCode" Тогда
		ПечатьТекста(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения); 
	ИначеЕсли Команда = "OpenShift" Тогда
		ОткрытьСмену(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения); 
	ИначеЕсли Команда = "CloseShift" Тогда
		ЗакрытьСмену(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения); 
	ИначеЕсли Команда = "Encash" Тогда
		Инкассация(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения); 
	ИначеЕсли Команда = "OpenCashDrawer" Тогда
		ОткрытьДенежныйЯщик(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения); 
	ИначеЕсли Команда = "PrintXReport" Тогда
		ОтчетБезГашения(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения); 
	ИначеЕсли Команда = "GetLineLength" Тогда
		ПолучитьШиринуСтроки(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	ИначеЕсли Команда = "AnnulCheck" Тогда
		НачатьАннулированиеЧека(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	ИначеЕсли Команда = "GetDataKKT" Тогда
		ПолучениеПараметровККТ(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	ИначеЕсли Команда = "GetCurrentStatus" Тогда
		ПолучитьТекущееСостояние(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	ИначеЕсли Команда = "OperationFN" Тогда
		ОперацияФискальногоНакопителя(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	ИначеЕсли Команда = "PrintCheckCopy" Тогда
		НапечататьКопиюЧека(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	
	// ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С ЭКВАЙРИНГОВЫМИ ТЕРМИНАЛАМИ
	ИначеЕсли Команда = "AuthorizeSales" Или Команда = "AuthorizeRefund" Или Команда = "AuthorizeVoid" Или Команда = "PayByPaymentCardWithCashWithdrawal" Тогда 
		ВыполнитьЭквайринговуюОперацию(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения, Команда);
	ИначеЕсли Команда = "PayElectronicCertificate" Или Команда = "ReturnElectronicCertificate" Тогда 
		ВыполнитьЭквайринговуюОперациюСЭлектроннымСертификатом(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения, Команда);
	ИначеЕсли Команда = "Settlement" Тогда // Сверка итогов по картам
		ИтогиДняПоКартам(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	ИначеЕсли Команда = "EmergencyVoid" Тогда // Аварийная отмена платежа
		АварийнаяОтменаОперации(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	ИначеЕсли Команда = "GetCardParametrs" Тогда // Получить параметры карты 
		ВыполнитьПолучениеПараметровКарты(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
		
	// ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С ДИСПЛЕЯМИ ПОКУПАТЕЛЯ
	// Дисплей покупателя
	ИначеЕсли Команда = "DisplayText" Тогда // Вывод строк на дисплей
		ВывестиСтрокуНаДисплейПокупателя(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	ИначеЕсли Команда = "ClearText" Тогда // Очистка дисплея
		ОчиститьДисплейПокупателя(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	ИначеЕсли Команда = "DisplayQRCode" Тогда // Вывод QR кода на дисплей
		ВывестиQRКодНаДисплейПокупателя(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	ИначеЕсли Команда = "GetOutputOptions" Тогда // Получить параметры вывода
		ПолучитьПараметрыВывода(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
		
	// ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С ЭЛЕКТРОННЫМИ ВЕСАМИ
	// Электронные весы
	ИначеЕсли Команда = "GetWeight" Тогда // Получить вес
		ПолучитьВес(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	ИначеЕсли Команда = "Calibrate" Тогда // Установить вес тары
		Тарировать(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
		
	// ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С ВЕСАМИ C ПЕЧАТЬЮ ЭТИКЕТОК
	// Выгрузка товаров в весы с печатью этикеток.
	ИначеЕсли Команда = "UploadGoods" Тогда
		ВыгрузитьТовары(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	// Очистить базу весов с печатью этикеток.
	ИначеЕсли Команда = "ClearBase" Тогда
		ОчиститьТоварыВВесах(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
		
	// ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С ТЕРМИНАЛАМИ СБОРА ДАННЫМИ
	// Выгрузка таблицы в терминал сбора данных.
	ИначеЕсли Команда =  "UploadDirectory" ИЛИ Команда = "ВыгрузитьТаблицу" Тогда
		ВыгрузитьТаблицу(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	// Загрузка таблицы из терминала сбора данных.
	ИначеЕсли Команда = "DownloadDocument" ИЛИ Команда = "ЗагрузитьТаблицу" Тогда
		ЗагрузитьТаблицу(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	// Очищает загруженную ранее таблицу в терминале сбора данных.
	ИначеЕсли Команда = "ClearTable" ИЛИ Команда = "ОчиститьТаблицу" Тогда
		ОчиститьТаблицу(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
		
	// ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С ПРИНТЕРАМИ ЭТИКЕТОК
	ИначеЕсли Команда = "InitializePrinter" ИЛИ Команда = "ИнициализацияПринтера" Тогда
		ИнициализацияПринтера(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	ИначеЕсли Команда = "PrintLabels" ИЛИ Команда = "ПечатьЭтикеток" Тогда
		ПечатьЭтикеток(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С RFID
	
	// Открыть сессию RFID считывателя
	ИначеЕсли Команда = "OpenSessionRFID" ИЛИ Команда = "ОткрытьСессиюRFID" Тогда
		ОткрытьСессиюRFID(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	// Открыть сессию RFID считывателя
	ИначеЕсли Команда = "CloseSessionRFID" ИЛИ Команда = "ЗакрытьСессиюRFID" Тогда
		ЗакрытьСессиюRFID(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	// Записать данные в метку RFID 
	ИначеЕсли Команда = "SaveDataTagRFID" ИЛИ Команда = "ЗаписатьДанныеВМеткуRFID " Тогда
		ЗаписатьДанныеВМеткуRFID(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
		
	Иначе
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Недопустимая команда.'"); 
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	
КонецПроцедуры

// Функция выполняет обработку события.
//
// Параметры:
//  ОбъектДрайвера - Структура - объект драйвера.
//  ПараметрыПодключения - Структура
//  Событие - Строка - Имя события
//  Данные - Строка - Данные события
//
// Возвращаемое значение:
//  Структура
//
Функция ОбработатьСобытие(ОбъектДрайвера, ПараметрыПодключения, Событие, Данные) Экспорт;
	
	РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, Неопределено, ПараметрыПодключения.ИдентификаторУстройства);
	
	Если Событие = "RFID" Тогда
		ДанныеОперации = Новый Структура("ИДПакета", Данные);
		ПолучитьДанныеМетокRFID(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ДрайверПодключениеОтключение

// Функция начинает подключение устройства.
//
Процедура НачатьПодключениеУстройства(ОповещениеПриЗавершении, ПараметрыПодключения) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("Параметры"              , ПараметрыПодключения.Параметры);
	
	Оповещение = Новый ОписаниеОповещения("НачатьПодключениеУстройства_Завершение", ЭтотОбъект, ДополнительныеПараметры);
	ПодключаемоеОборудованиеДрайверКлиент.НачатьПолучениеОбъектаДрайвера(Оповещение, ПараметрыПодключения);
	
КонецПроцедуры

Процедура НачатьПодключениеУстройства_Завершение(ОбъектДрайвера, ДополнительныеПараметры) Экспорт
	
	ОписаниеОшибки = "";
	
	Если ОбъектДрайвера = Неопределено Тогда
		// Сообщить об ошибке, что не удалось загрузить драйвер.
		ОписаниеОшибки = НСтр("ru='Не удалось загрузить драйвер устройства.
								|Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'");
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
		Возврат;
	ИначеЕсли ОбъектДрайвера = "ОнлайнКасса" Тогда
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Истина);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.ПараметрыПодключения.ОбъектДрайвера = ОбъектДрайвера;
	
	ПараметрыПодключения = ДополнительныеПараметры.ПараметрыПодключения;
	ТипОборудования = ПараметрыПодключения.ТипОборудования;
	
	Попытка
		ОбъектДрайвера.УстановитьПараметр("EquipmentType", ТипОборудования); 
	Исключение
		ОписаниеОшибки = НСтр("ru='Ошибка обращения к драйверу.'");
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
		Возврат;
	КонецПопытки;
	
	ПараметрыДрайвера = МенеджерОборудованияКлиентСервер.ПараметрыОписанияДрайвера();
	Попытка
		// Получаем описание драйвера
		ОбъектДрайвера.ПолучитьОписание(ПараметрыДрайвера.НаименованиеДрайвера, ПараметрыДрайвера.ОписаниеДрайвера, ПараметрыДрайвера.ТипОборудования, 
			ПараметрыДрайвера.РевизияИнтерфейса, ПараметрыДрайвера.ИнтеграционныйКомпонент, ПараметрыДрайвера.ОсновнойДрайверУстановлен, ПараметрыДрайвера.URLЗагрузкиДрайвера);
		ПараметрыПодключения.РевизияИнтерфейса = ПараметрыДрайвера.РевизияИнтерфейса;
	Исключение
		ПараметрыПодключения.РевизияИнтерфейса = ОбъектДрайвера.ПолучитьРевизиюИнтерфейса(); 
	КонецПопытки;
	
	Если ПустаяСтрока(ПараметрыДрайвера.РевизияИнтерфейса) Или ПараметрыДрайвера.РевизияИнтерфейса = 0 Тогда
		ОписаниеОшибки = НСтр("ru='Ревизия интерфейса драйвера не определена.'");
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
		Возврат;
	КонецЕсли;
	
	Для Каждого Параметр Из ПараметрыПодключения.Параметры Цикл
		Если Лев(Параметр.Ключ, 2) = "P_" Тогда
			ЗначениеПараметра = Параметр.Значение;
			ИмяПараметра = Сред(Параметр.Ключ, 3);
			ОбъектДрайвера.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра) 
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		Ответ = ОбъектДрайвера.Подключить(ПараметрыПодключения.ИДУстройства);
	Исключение
		ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.Подключить>.'");
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
		Возврат;
	КонецПопытки;
	
	Если НЕ Ответ Тогда
		ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
	Иначе
		
		Если ТипОборудования = "ПринтерЧеков" Или ТипОборудования = "ФискальныйРегистратор" Или ТипОборудования = "ККТ" Тогда
			ВремРезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании();
			ПолучитьШиринуСтроки(ОбъектДрайвера, ПараметрыПодключения, Неопределено, ВремРезультатВыполнения) 
		КонецЕсли;
		
		Если ТипОборудования = "ЭквайринговыйТерминал" Тогда
			ВремРезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании();
			ПараметрыТерминала(ОбъектДрайвера, ПараметрыПодключения, Неопределено, ВремРезультатВыполнения) 
		КонецЕсли;
		
		Если ТипОборудования = "ДисплейПокупателя" Тогда
			ВремРезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании();
			ПолучитьПараметрыВывода(ОбъектДрайвера, ПараметрыПодключения, Неопределено, ВремРезультатВыполнения) 
		КонецЕсли;
		
		Если ТипОборудования = "СканерШтрихкода" Тогда
			ПараметрыПодключения.ИменаСобытий.Добавить("Штрихкод");
			ПараметрыПодключения.ИменаСобытий.Добавить("Barcode");
			ПараметрыПодключения.ИменаСобытий.Добавить("ШтрихкодBase64");
			ПараметрыПодключения.ИменаСобытий.Добавить("BarcodeBase64");
		КонецЕсли;
		
		Если ТипОборудования = "СчитывательМагнитныхКарт" Тогда
			ПараметрыПодключения.ИменаСобытий.Добавить("ДанныеКарты");
			ПараметрыПодключения.ИменаСобытий.Добавить("TracksData");
			ПараметрыПодключения.ИменаСобытий.Добавить("ДанныеКартыBase64");
			ПараметрыПодключения.ИменаСобытий.Добавить("TrackDataBase64");
		КонецЕсли;
		
		Если ТипОборудования = "СчитывательRFID" Тогда
			ПараметрыПодключения.ИменаСобытий.Добавить("RFID");
		КонецЕсли;
		
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Истина);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Функция начинает отключение устройства.
//
Процедура НачатьОтключениеУстройства(ОповещениеПриЗавершении, ПараметрыПодключения) Экспорт
	
	Попытка
		Если ПараметрыПодключения.ИдентификаторОбъекта = "ОнлайнКасса" Тогда 
			//	 
		Иначе
			ОбъектДрайвера = ПараметрыПодключения.ОбъектДрайвера;
			ОбъектДрайвера.Отключить(ПараметрыПодключения.ИДУстройства);	
		КонецЕсли;
		
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Истина);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
		
	Исключение
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.Отключить>.'");
			РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФискальныеУстройства

// Процедура осуществляет фискализацию чека.
//
Процедура ФискализацияЧека(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	
	ДатаСеанса = МенеджерОборудованияВызовСервера.ДатаСеанса();
	
	Если ПараметрыПодключения.ТипОборудования = "ПринтерЧеков" Тогда
		ПечатьТекста(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
		
	ИначеЕсли ПараметрыПодключения.ТипОборудования = "ККТ" Тогда
			
		
		Если ПараметрыПодключения.ИдентификаторОбъекта = "ОнлайнКасса" Тогда
			ДанныеОперации.Вставить("ИдентификаторУстройства", ПараметрыПодключения.ИдентификаторУстройства);
			РезультатОперации = МодульРаботыСОнлайнКассой.ОперацияПробитьЧек(ПараметрыПодключения.Параметры, ДанныеОперации);
			Результат = ?(РезультатОперации.КодОшибки = "", Истина, Ложь);
			РезультатВыполнения.Вставить("РезультатОперации", РезультатОперации);
			Если Не Результат Тогда 
				РезультатВыполнения.ОписаниеОшибки = РезультатОперации.СообщениеОбОшибке; 
				Возврат;
			КонецЕсли;	
		Иначе
			Попытка
					Если ДанныеОперации.ЕстьПерсональныеДанные Тогда
						ДанныеЧекаXML = ДанныеОперации.ДанныеЧекаXMLПерсональныеДанные
					Иначе
						ДанныеЧекаXML = ДанныеОперации.ДанныеЧекаXML;
					КонецЕсли;
					Результат = ОбъектДрайвера.СформироватьЧек(ПараметрыПодключения.ИДУстройства, ДанныеОперации.Электронно, ДанныеЧекаXML, ДанныеОперации.РезультатОперацииXML); 
				ДанныеОперации.ДатаВремяЧека = ДатаСеанса;
			Исключение
				РезультатВыполнения.Результат = Ложь;
				ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.СформироватьЧек>.'") + Символы.ПС + ОписаниеОшибки; 
				Возврат;
			КонецПопытки; 
		КонецЕсли;
		
		Если Результат Тогда  
			РезультатВыполнения.Результат = Истина;
			
			
			Если ДанныеОперации.ТестовыеЧеки <> Неопределено И ДанныеОперации.ТестовыеЧеки.Количество() > 0 Тогда
				РезультатПечатиНефискальныхДокументов = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании();
				ПечатьТекста(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатПечатиНефискальныхДокументов);
				РезультатВыполнения.Вставить("РезультатПечатиНефискальныхДокументов", РезультатПечатиНефискальныхДокументов);
			КонецЕсли;
		Иначе
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		КонецЕсли;
		
	Иначе
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Данный тип оборудование не поддерживает данную команду.'");
	КонецЕсли;
	
КонецПроцедуры 


// Процедура осуществляет печать текста.
//
Процедура ПечатьТекста(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	РезультатВыполнения.Результат = Истина;
	Попытка
		Для Каждого ТекстПечати Из ДанныеОперации.ТестовыеЧеки Цикл
			Результат = ОбъектДрайвера.НапечататьТекстовыйДокумент(ПараметрыПодключения.ИДУстройства, ТекстПечати);
			Если НЕ Результат Тогда
				ОписаниеОшибки = "";
				ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
				РезультатВыполнения.Результат = Ложь;
				РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
				Возврат;
			КонецЕсли;
		КонецЦикла;
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.СформироватьЧек>.'") + Символы.ПС + ОписаниеОшибки; 
	КонецПопытки;
	
КонецПроцедуры

Процедура Инкассация(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	Если ПараметрыПодключения.ТипОборудования = "ПринтерЧеков" Тогда
		ПечатьТекста(ОбъектДрайвера,  ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	ИначеЕсли ПараметрыПодключения.ТипОборудования = "ККТ" Тогда
		
		Если ПараметрыПодключения.ИдентификаторОбъекта = "ОнлайнКасса" Тогда
			ДанныеОперации.Вставить("ИдентификаторУстройства", ПараметрыПодключения.ИдентификаторУстройства);
			ДанныеОперации.Вставить("ИдентификаторОперации", Новый УникальныйИдентификатор());
			РезультатОперации = МодульРаботыСОнлайнКассой.ОперацияВнесениеВыемка(ПараметрыПодключения.Параметры, ДанныеОперации);
			Результат = ?(РезультатОперации.КодОшибки = "", Истина, Ложь);
			РезультатВыполнения.Вставить("РезультатОперации", РезультатОперации);
			Если Не Результат Тогда 
				РезультатВыполнения.ОписаниеОшибки = РезультатОперации.СообщениеОбОшибке; 
				Возврат;
			КонецЕсли;	
		Иначе
			Попытка
				Результат = ОбъектДрайвера.НапечататьЧекВнесенияВыемки(ПараметрыПодключения.ИДУстройства, ДанныеОперации.ДанныеЧекаXML,
					?(ДанныеОперации.ТипИнкассации = 1, ДанныеОперации.СуммаЧека, -ДанныеОперации.СуммаЧека));
			Исключение
				РезультатВыполнения.Результат = Ложь;
				ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ЗакрытьСмену>.'") + Символы.ПС + ОписаниеОшибки; 
				Возврат;
			КонецПопытки;
		КонецЕсли;
		
		Если Результат Тогда  
			ДанныеОперации.СтатусСмены = 1; // Открыта
			РезультатВыполнения.Результат = Истина;
		Иначе
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		КонецЕсли;
	Иначе
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Данный тип оборудование не поддерживает данную команду.'");
	КонецЕсли;
	
КонецПроцедуры   

// Процедура осуществляет закрытие смены.
//
Процедура ЗакрытьСмену(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	Если ПараметрыПодключения.ТипОборудования = "ПринтерЧеков" Тогда
		
		ПечатьТекста(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
		Результат = Истина;
		
	ИначеЕсли ПараметрыПодключения.ТипОборудования = "ККТ" Тогда
		Если ПараметрыПодключения.ИдентификаторОбъекта = "ОнлайнКасса" Тогда
			ДанныеОперации.Вставить("ИдентификаторУстройства", ПараметрыПодключения.ИдентификаторУстройства);
			ДанныеОперации.Вставить("ИдентификаторСмены", Новый УникальныйИдентификатор());
			ДанныеОперации.Вставить("ОтчетБезГашения", Ложь);
			РезультатОперации = МодульРаботыСОнлайнКассой.ОперацияЗакрытиеСмены(ПараметрыПодключения.Параметры, ДанныеОперации);
			Результат = ?(РезультатОперации.КодОшибки = "", Истина, Ложь);
			РезультатВыполнения.Вставить("РезультатОперации", РезультатОперации);
			Если Не Результат Тогда 
				РезультатВыполнения.ОписаниеОшибки = РезультатОперации.СообщениеОбОшибке; 
				Возврат;
			КонецЕсли;	
		Иначе
			Попытка
				Результат = ОбъектДрайвера.ЗакрытьСмену(ПараметрыПодключения.ИДУстройства, ДанныеОперации.ПараметрыXML, ДанныеОперации.РезультатXML);
			Исключение
				РезультатВыполнения.Результат = Ложь;
				ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ЗакрытьСмену>.'") + Символы.ПС + ОписаниеОшибки;
				Возврат;
			КонецПопытки;
		КонецЕсли;
	Иначе
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Данный тип оборудование не поддерживает данную команду.'");
		Возврат;
	КонецЕсли;
	
	Если Результат Тогда  
		// Статус 1 - Закрыта, 2 - Открыта, 3 - Истекла.
		ДанныеОперации.СтатусСмены = 1; // Закрыта
		РезультатВыполнения.Результат = Истина;
	Иначе
		ОписаниеОшибки = "";
		ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
	КонецЕсли;

КонецПроцедуры 

// Процедура осуществляет открытие смены.
//
Процедура ОткрытьСмену(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	Если ПараметрыПодключения.ТипОборудования = "ПринтерЧеков" Тогда
		
		ПечатьТекста(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
		ПараметрыККТ = "";
		Результат = Истина;
		
	ИначеЕсли ПараметрыПодключения.ТипОборудования = "ККТ" Тогда
		Если ПараметрыПодключения.ИдентификаторОбъекта = "ОнлайнКасса" Тогда
			ДанныеОперации.Вставить("ИдентификаторУстройства", ПараметрыПодключения.ИдентификаторУстройства);
			ДанныеОперации.Вставить("ИдентификаторСмены", Новый УникальныйИдентификатор());
			РезультатОперации = МодульРаботыСОнлайнКассой.ОперацияОткрытиеСмены(ПараметрыПодключения.Параметры, ДанныеОперации);
			Если РезультатОперации.КодОшибки = "" 
				И (РезультатОперации.ДанныеОтвета.Свойство("result") И РезультатОперации.ДанныеОтвета.result <> "") Тогда
				Результат = Истина;
			Иначе
				Результат = Ложь;	
			КонецЕсли;
			РезультатВыполнения.Вставить("РезультатОперации", РезультатОперации);
			Если Не Результат Тогда 
				РезультатВыполнения.ОписаниеОшибки = РезультатОперации.СообщениеОбОшибке; 
				Возврат;
			КонецЕсли;	
		Иначе	
			Попытка
				ПараметрыККТ = "";
				Результат = ОбъектДрайвера.ПолучитьПараметрыККТ(ПараметрыПодключения.ИДУстройства, ПараметрыККТ);
			Исключение
				РезультатВыполнения.Результат = Ложь;
				ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПолучитьПараметрыККТ>.'") + Символы.ПС + ОписаниеОшибки;
				Возврат;
			КонецПопытки;
			
			Попытка
				Результат = ОбъектДрайвера.ОткрытьСмену(ПараметрыПодключения.ИДУстройства, ДанныеОперации.ПараметрыXML, ДанныеОперации.РезультатXML);
			Исключение
				РезультатВыполнения.Результат = Ложь;
				ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОткрытьСмену>.'") + Символы.ПС + ОписаниеОшибки;
				Возврат;
			КонецПопытки;
		КонецЕсли;
		
	Иначе
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Данный тип оборудование не поддерживает данную команду.'");
		Возврат;
	КонецЕсли;
	
	Если Результат Тогда  
		// Статус 1 - Закрыта, 2 - Открыта, 3 - Истекла.
		ДанныеОперации.СтатусСмены = 2; // Открыта
		ДанныеОперации.Вставить("ПараметрыККТ", ПараметрыККТ);
		РезультатВыполнения.Результат = Истина;
	Иначе
		ОписаниеОшибки = "";
		Если ПараметрыПодключения.ИдентификаторОбъекта = "ОнлайнКасса" Тогда
			ОписаниеОшибки = РезультатВыполнения.РезультатОперации.ИнформацияОбОшибке;	
		Иначе
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
		КонецЕсли;
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
	КонецЕсли;
	
КонецПроцедуры 

Процедура ОткрытьДенежныйЯщик(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	Результат = Истина;
	
	Попытка
		Результат = ОбъектДрайвера.ОткрытьДенежныйЯщик(ПараметрыПодключения.ИДУстройства);
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ЗакрытьСмену>.'") + Символы.ПС + ОписаниеОшибки;
		Возврат;
	КонецПопытки;
	
	Если Результат Тогда  
		РезультатВыполнения.Результат = Истина;
	Иначе
		ОписаниеОшибки = "";
		ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
	КонецЕсли;

КонецПроцедуры


// Процедура осуществляет формирование отчет без гашения.
//
Процедура ОтчетБезГашения(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	Если ПараметрыПодключения.ТипОборудования = "ПринтерЧеков" Тогда
		ПечатьТекста(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
		Результат = Истина;
	ИначеЕсли ПараметрыПодключения.ТипОборудования = "ККТ" Тогда
		Если ПараметрыПодключения.ИдентификаторОбъекта = "ОнлайнКасса" Тогда
			ДанныеОперации.Вставить("ИдентификаторУстройства", ПараметрыПодключения.ИдентификаторУстройства);
			ДанныеОперации.Вставить("ИдентификаторСмены", Новый УникальныйИдентификатор());
			ДанныеОперации.Вставить("ОтчетБезГашения", Истина);
			РезультатОперации = МодульРаботыСОнлайнКассой.ОперацияЗакрытиеСмены(ПараметрыПодключения.Параметры, ДанныеОперации);
			Результат = ?(РезультатОперации.КодОшибки = "", Истина, Ложь);
			РезультатВыполнения.Вставить("РезультатОперации", РезультатОперации);
			Если Не Результат Тогда 
				РезультатВыполнения.ОписаниеОшибки = РезультатОперации.СообщениеОбОшибке; 
				Возврат;
			КонецЕсли;	
		Иначе
			Попытка
				Результат = ОбъектДрайвера.НапечататьОтчетБезГашения(ПараметрыПодключения.ИДУстройства, ДанныеОперации.ПараметрыXML);
			Исключение
				РезультатВыполнения.Результат = Ложь;
				ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.НапечататьОтчетБезГашения>.'") + Символы.ПС + ОписаниеОшибки;
				Возврат;
			КонецПопытки;
		КонецЕсли;
	Иначе
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Данный тип оборудование не поддерживает данную команду.'");
		Возврат;
	КонецЕсли;
		
	Если Результат Тогда  
		РезультатВыполнения.Результат = Истина;
	Иначе
		ОписаниеОшибки = "";
		ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
	КонецЕсли;
	
КонецПроцедуры

// Процедура получает ширину строки в символах.
// 
// Параметры:
//  ОбъектДрайвера - ОбъектВнешнейКомпоненты 
//  ПараметрыПодключения - Структура
//  ДанныеОперации - Структура - данные операции для выполнения команды
//  РезультатВыполнения - Структура - см. МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании
//
Процедура ПолучитьШиринуСтроки(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)  
	
	Если ПараметрыПодключения.Свойство("ШиринаСтроки") И ПараметрыПодключения.ШиринаСтроки > 0 Тогда
		РезультатВыполнения.Результат = Истина;
		РезультатВыполнения.Вставить("ШиринаСтроки", ПараметрыПодключения.ШиринаСтроки);
		Возврат;
	КонецЕсли;
	
	Попытка
		ШиринаСтроки = 0;
		Результат = ОбъектДрайвера.ПолучитьШиринуСтроки(ПараметрыПодключения.ИДУстройства, ШиринаСтроки);
		ПараметрыПодключения.ШиринаСтроки = ШиринаСтроки;
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПолучитьШиринуСтроки>.'") + Символы.ПС + ОписаниеОшибки;
		Возврат;
	КонецПопытки;
		
	Если Результат Тогда  
		РезультатВыполнения.Результат = Истина;
		РезультатВыполнения.Вставить("ШиринаСтроки", ШиринаСтроки);
	Иначе
		ОписаниеОшибки = "";
		ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
	КонецЕсли;
	
КонецПроцедуры

// Осуществляет аннулирование чека.
// 
// Параметры:
//  ОбъектДрайвера - ОбъектВнешнейКомпоненты 
//  ПараметрыПодключения - Структура
//  ДанныеОперации - Структура - данные операции для выполнения команды
//  РезультатВыполнения - Структура - см. МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании
//
Процедура НачатьАннулированиеЧека(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)  
	
	РезультатВыполнения.Результат = Истина;
	РезультатВыполнения.Вставить("НомерСменыККТ" , Неопределено);
	РезультатВыполнения.Вставить("НомерЧекаККТ"  , Неопределено);
	РезультатВыполнения.Вставить("СтатусСмены", 2);
	РезультатВыполнения.Вставить("ДатаВремяЧека", МенеджерОборудованияКлиент.ДатаСеанса());
	
КонецПроцедуры

Процедура ПолучениеПараметровККТ(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	
	Если ПараметрыПодключения.ТипОборудования <> "ККТ" Тогда
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Данный тип оборудование не поддерживает данную команду.'");
		Возврат;
	КонецЕсли;
	
	Попытка
		ПараметрыККТ = "";
		Результат = ОбъектДрайвера.ПолучитьПараметрыККТ(ПараметрыПодключения.ИДУстройства, ПараметрыККТ);
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПолучитьПараметрыККТ>.'") + Символы.ПС + ОписаниеОшибки;
		Возврат;
	КонецПопытки;
		
	Если Результат Тогда  
		РезультатВыполнения.Вставить("ПараметрыККТXML", ПараметрыККТ);
		РезультатВыполнения.Результат = Истина;
	Иначе
		ОписаниеОшибки = "";
		ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
	КонецЕсли;
	
КонецПроцедуры

// Процедура осуществляет открытие смены.
//
Процедура ПолучитьТекущееСостояние(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	Если ПараметрыПодключения.ТипОборудования <> "ККТ" Тогда
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Данный тип оборудование не поддерживает данную команду.'");
		Возврат;
	КонецЕсли;
	
	Попытка
		Если ПараметрыПодключения.РевизияИнтерфейса >= 3000 Тогда // Версия стандарта 3.0 (ОФД 1.1)
			Результат = ОбъектДрайвера.ПолучитьТекущееСостояние(ПараметрыПодключения.ИДУстройства, ДанныеОперации.ПараметрыXML, ДанныеОперации.РезультатXML);
		Иначе
			Результат = ОбъектДрайвера.ПолучитьТекущееСостояние(ПараметрыПодключения.ИДУстройства, ДанныеОперации.НомерЧекаККТ, ДанныеОперации.НомерСменыККТ,
				ДанныеОперации.СтатусСмены, ДанныеОперации.РезультатXML);
		КонецЕсли;                      
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПолучитьТекущееСостояние>.'") + Символы.ПС + ОписаниеОшибки;
		Возврат;
	КонецПопытки;
		
	Если Результат Тогда  
		РезультатВыполнения.Результат = Истина;
	Иначе
		ОписаниеОшибки = "";
		ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
	КонецЕсли;
	
КонецПроцедуры

// Процедура осуществляет операцию с фискальным накопителем.
//
Процедура ОперацияФискальногоНакопителя(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	Если ПараметрыПодключения.ТипОборудования <> "ККТ" Тогда
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Данный тип оборудование не поддерживает данную команду.'");
		Возврат;
	КонецЕсли;
	
	Результат = Истина;
	Попытка
		Результат = ОбъектДрайвера.ОперацияФН(ПараметрыПодключения.ИДУстройства, ДанныеОперации.ТипОперации, ДанныеОперации.ПараметрыXML);
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОперацияФН>.'") + Символы.ПС + ОписаниеОшибки;
		Возврат;
	КонецПопытки;
	
	Попытка
		ПараметрыККТ = "";
		Результат = ОбъектДрайвера.ПолучитьПараметрыККТ(ПараметрыПодключения.ИДУстройства, ПараметрыККТ);
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПолучитьПараметрыККТ>.'") + Символы.ПС + ОписаниеОшибки;
		Возврат;
	КонецПопытки;
	
	Если Результат Тогда  
		РезультатВыполнения.Результат = Истина;
		ДанныеОперации.Вставить("ПараметрыККТ", ПараметрыККТ);
	Иначе
		ОписаниеОшибки = "";
		ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
	КонецЕсли;
	
КонецПроцедуры

// Функция печать копию чека.
//
Процедура НапечататьКопиюЧека(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	Результат = Ложь;   
	
	Если ПараметрыПодключения.ТипОборудования <> "ККТ" Тогда
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Данный тип оборудование не поддерживает данную команду.'");
		Возврат;        
	КонецЕсли;
	
	НомерЧека = 0;
	Если ДанныеОперации <> Неопределено И ДанныеОперации.Свойство("НомерЧека") Тогда
		НомерЧека = ДанныеОперации.НомерЧека;
	КонецЕсли;
	
	Попытка
		Результат = ОбъектДрайвера.НапечататьКопиюЧека(ПараметрыПодключения.ИДУстройства, НомерЧека);
		Если НЕ Результат Тогда
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		Иначе
			// Заполнение выходных параметров.
			РезультатВыполнения.Вставить("НомерЧека", НомерЧека);
			РезультатВыполнения.Результат = Истина;
		КонецЕсли;
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.НапечататьКопиюЧека>.'") + Символы.ПС + ОписаниеОшибки;
	КонецПопытки;
	
КонецПроцедуры






#КонецОбласти

#Область ЭквайринговыеТерминалы

// Процедура возвращает параметры терминале.
//
Процедура ПараметрыТерминала(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	РезультатВыполнения.Результат = Ложь;
	
	Если ПараметрыПодключения.РевизияИнтерфейса >= 3004 Тогда
		Попытка
			РезультатОперацииXML = "";
			Результат = ОбъектДрайвера.ПараметрыТерминала(ПараметрыПодключения.ИДУстройства, РезультатОперацииXML);
			Если Результат Тогда
				ПараметрыТерминала = МенеджерОборудованияВызовСервера.ПрочитатьКорневойЭлементXML(РезультатОперацииXML);
				ПараметрыПодключения.ПечатьКвитанцийНаТерминале = ПараметрыТерминала.Свойство("PrintSlipOnTerminal") И ВРег(ПараметрыТерминала.PrintSlipOnTerminal) = "TRUE"; 
				ПараметрыПодключения.КороткиеСлипЧеки = ПараметрыТерминала.Свойство("ShortSlip") И ВРег(ПараметрыТерминала.ShortSlip) = "TRUE"; 
				ПараметрыПодключения.ВыдачиНаличныхДенежныхСредств = ПараметрыТерминала.Свойство("CashWithdrawal") И ВРег(ПараметрыТерминала.CashWithdrawal) = "TRUE"; 
				ПараметрыПодключения.ОплатаЭлектроннымиСертификатами = ПараметрыТерминала.Свойство("ElectronicCertificates") И ВРег(ПараметрыТерминала.ElectronicCertificates) = "TRUE"; 
				РезультатВыполнения.Результат = Истина;
			КонецЕсли         
		Исключение
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПараметрыТерминала>.'") + Символы.ПС + ОписаниеОшибки;
		КонецПопытки;
	Иначе
		Попытка
			Результат = ОбъектДрайвера.ПечатьКвитанцийНаТерминале();
			ПараметрыПодключения.ПечатьКвитанцийНаТерминале = Результат;
			РезультатВыполнения.Результат = Истина;
		Исключение
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПечатьКвитанцийНаТерминале>.'") + Символы.ПС + ОписаниеОшибки;
		КонецПопытки;
	КонецЕсли
	
КонецПроцедуры

// Процедура выполняет получение параметров карты.
//
Процедура ВыполнитьПолучениеПараметровКарты(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	РезультатВыполнения.Результат = Ложь;
	Если ПараметрыПодключения.РевизияИнтерфейса > 3004 Тогда
		ОтПоследнейОперации = Ложь;
		НомерКарты = "";
		ХешНомерКарты = "";
		ТипКарты  = "";
		СвояКарта = 0;
		Попытка
			Результат = ОбъектДрайвера.ПолучитьПараметрыКарты(ПараметрыПодключения.ИДУстройства, ОтПоследнейОперации, НомерКарты, ХешНомерКарты, ТипКарты, СвояКарта);
			Если Результат Тогда
				РезультатВыполнения.Вставить("НомерКарты"   , НомерКарты);
				РезультатВыполнения.Вставить("ХешНомерКарты", ХешНомерКарты);
				РезультатВыполнения.Вставить("ТипКарты"     , ТипКарты);
				РезультатВыполнения.Вставить("СвояКарта"    , СвояКарта);
				РезультатВыполнения.Результат = Истина;
			Иначе
				ОписаниеОшибки = "";
				ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
				РезультатВыполнения.Результат = Ложь;
				РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
			КонецЕсли;
		Исключение
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПолучитьПараметрыКарты>.'") + Символы.ПС + ОписаниеОшибки;
		КонецПопытки;
	Иначе
		ОписаниеОшибки = НСтр("ru='Терминал не поддерживает данную операцию.'");
		РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		РезультатВыполнения.Результат = Ложь;
	КонецЕсли
	
КонецПроцедуры

// Процедура осуществляет операцию на ЭТ.
//
Процедура ВыполнитьЭквайринговуюОперацию(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения, Команда)
	
	Если НЕ (ДанныеОперации.СуммаОперации > 0) Тогда
		ОписаниеОшибки = НСтр("ru='Не корректная сумма операции.'");
		РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		РезультатВыполнения.Результат = Ложь;
		Возврат;
	КонецЕсли;
	
	НомерМерчанта  = ?(ДанныеОперации.НомерМерчанта <> Неопределено, ДанныеОперации.НомерМерчанта, 0);
	НомерКарты     = ?(ДанныеОперации.НомерКарты <> Неопределено, ДанныеОперации.НомерКарты, "");
	НомерЧека      = ?(ДанныеОперации.НомерЧека <> Неопределено, ДанныеОперации.НомерЧека, "");
	СсылочныйНомер = ?(ДанныеОперации.СсылочныйНомер <> Неопределено, ДанныеОперации.СсылочныйНомер, "");
	КодАвторизации = ?(ДанныеОперации.КодАвторизации <> Неопределено, ДанныеОперации.КодАвторизации, "");
	СуммаОперации  = ?(ДанныеОперации.СуммаОперации <> Неопределено, ДанныеОперации.СуммаОперации, 0);
	СуммаНаличных  = ?(ДанныеОперации.СуммаНаличных <> Неопределено, ДанныеОперации.СуммаНаличных, 0);
	ТекстСлипЧека  = "";
	
	Попытка
		Если ПараметрыПодключения.РевизияИнтерфейса >= 3005 Тогда
			Если Команда = "AuthorizeSales" Тогда
				Результат = ОбъектДрайвера.ОплатитьПлатежнойКартой(ПараметрыПодключения.ИДУстройства, НомерМерчанта, СуммаОперации, 
					НомерКарты, НомерЧека, СсылочныйНомер, КодАвторизации, ТекстСлипЧека);
			ИначеЕсли Команда = "AuthorizeRefund" Тогда
				Результат = ОбъектДрайвера.ВернутьПлатежПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерМерчанта, СуммаОперации, 
					НомерКарты, НомерЧека, СсылочныйНомер, КодАвторизации, ТекстСлипЧека);
			ИначеЕсли Команда = "AuthorizeVoid" Тогда
				Результат = ОбъектДрайвера.ОтменитьПлатежПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерМерчанта, СуммаОперации, 
					НомерКарты, НомерЧека, СсылочныйНомер, КодАвторизации, ТекстСлипЧека);
			ИначеЕсли ПараметрыПодключения.РевизияИнтерфейса >= 3006 И Команда = "PayByPaymentCardWithCashWithdrawal" Тогда
				Если ПараметрыПодключения.ВыдачиНаличныхДенежныхСредств Тогда
					Результат = ОбъектДрайвера.ОплатитьПлатежнойКартойCВыдачейНаличных(ПараметрыПодключения.ИДУстройства, НомерМерчанта, СуммаОперации, 
						СуммаНаличных, НомерКарты, НомерЧека, СсылочныйНомер, КодАвторизации, ТекстСлипЧека);
				Иначе
					ОписаниеОшибки = НСтр("ru='Терминал не поддерживает данную операцию.'");
					РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
					РезультатВыполнения.Результат = Ложь;
					Возврат;
				КонецЕсли;
			Иначе
				ОписаниеОшибки = НСтр("ru='Команда не поддерживается драйвером.'");
				РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
				РезультатВыполнения.Результат = Ложь;
				Возврат;
			КонецЕсли;
		Иначе
			Если Команда = "AuthorizeSales" Тогда
				Результат = ОбъектДрайвера.ОплатитьПлатежнойКартой(ПараметрыПодключения.ИДУстройства, НомерКарты, СуммаОперации, 
					НомерЧека, СсылочныйНомер, КодАвторизации, ТекстСлипЧека);
			ИначеЕсли Команда = "AuthorizeRefund" Тогда
				Результат = ОбъектДрайвера.ВернутьПлатежПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерКарты, СуммаОперации, 
					НомерЧека, СсылочныйНомер, КодАвторизации, ТекстСлипЧека);
			ИначеЕсли Команда = "AuthorizeVoid" Тогда
				Результат = ОбъектДрайвера.ОтменитьПлатежПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерКарты, СуммаОперации, 
					НомерЧека, СсылочныйНомер, КодАвторизации, ТекстСлипЧека);
			Иначе
				ОписаниеОшибки = НСтр("ru='Команда не поддерживается драйвером.'");
				РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
				РезультатВыполнения.Результат = Ложь;
				Возврат;
			КонецЕсли;
		КонецЕсли;
			
		Если Результат Тогда
			РезультатВыполнения.Вставить("НомерМерчанта" , НомерМерчанта);
			РезультатВыполнения.Вставить("НомерКарты"    , НомерКарты);
			РезультатВыполнения.Вставить("НомерЧекаЭТ"   , НомерЧека);
			РезультатВыполнения.Вставить("СсылочныйНомер", СсылочныйНомер);
			РезультатВыполнения.Вставить("КодАвторизации", КодАвторизации);
			РезультатВыполнения.Вставить("СуммаОперации" , СуммаОперации);
			РезультатВыполнения.Результат = Истина;
		Иначе
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		КонецЕсли;
		РезультатВыполнения.Вставить("ТекстСлипЧека" , ТекстСлипЧека);
		
	Исключение
		ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <%1>.'");
		ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, Команда); 
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
	КонецПопытки;
	
КонецПроцедуры

// Процедура осуществляет операцию на ЭТ c электронным сертификатом.
//
Процедура ВыполнитьЭквайринговуюОперациюСЭлектроннымСертификатом(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения, Команда)
	
	Если ПараметрыПодключения.РевизияИнтерфейса < 3005 Тогда
		ОписаниеОшибки = НСтр("ru='Команда не поддерживается драйвером.'");
		РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		РезультатВыполнения.Результат = Ложь;
		Возврат;
	КонецЕсли;
	
	Если НЕ ПараметрыПодключения.ОплатаЭлектроннымиСертификатами Тогда
		ОписаниеОшибки = НСтр("ru='Терминал не поддерживает данную операцию.'");
		РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		РезультатВыполнения.Результат = Ложь;
		Возврат;
	КонецЕсли;
	
	НомерМерчанта  = ?(ДанныеОперации.НомерМерчанта <> Неопределено, ДанныеОперации.НомерМерчанта, 0);
	НомерКарты     = ?(ДанныеОперации.НомерКарты <> Неопределено, ДанныеОперации.НомерКарты, "");
	НомерЧека      = ?(ДанныеОперации.НомерЧека <> Неопределено, ДанныеОперации.НомерЧека, "");
	СсылочныйНомер = ?(ДанныеОперации.СсылочныйНомер <> Неопределено, ДанныеОперации.СсылочныйНомер, "");
	КодАвторизации = ?(ДанныеОперации.КодАвторизации <> Неопределено, ДанныеОперации.КодАвторизации, "");
	ИдентификаторКорзины = ?(ДанныеОперации.ИдентификаторКорзины <> Неопределено, ДанныеОперации.ИдентификаторКорзины, "");
	СуммаЭлектронногоСертификата = ?(ДанныеОперации.СуммаЭлектронногоСертификата <> Неопределено, ДанныеОперации.СуммаЭлектронногоСертификата, 0);
	СуммаСобственныхСредств = ?(ДанныеОперации.СуммаСобственныхСредств <> Неопределено, ДанныеОперации.СуммаСобственныхСредств, 0);
	ТекстСлипЧека  = "";
	СтатусОперации = 0;
	
	Если ПустаяСтрока(ИдентификаторКорзины) Или  СуммаЭлектронногоСертификата = 0 Тогда
		ОписаниеОшибки = НСтр("ru='Не корректные параметры операции.'");
		РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		РезультатВыполнения.Результат = Ложь;
		Возврат;
	КонецЕсли;
	
	Попытка
		
		Если Команда = "PayElectronicCertificate" Тогда
			Результат = ОбъектДрайвера.ОплатитьЭлектроннымСертификатом(ПараметрыПодключения.ИДУстройства, НомерМерчанта, ИдентификаторКорзины, 
				СуммаЭлектронногоСертификата, СуммаСобственныхСредств, НомерКарты, НомерЧека, 
				СсылочныйНомер, КодАвторизации, СтатусОперации, ТекстСлипЧека);
		ИначеЕсли Команда = "ReturnElectronicCertificate" Тогда
			Результат = ОбъектДрайвера.ВернутьЭлектроннымСертификатом(ПараметрыПодключения.ИДУстройства, НомерМерчанта, ИдентификаторКорзины, 
				СуммаЭлектронногоСертификата, СуммаСобственныхСредств, НомерКарты, НомерЧека, 
				СсылочныйНомер, КодАвторизации, СтатусОперации, ТекстСлипЧека);
		Иначе
			ОписаниеОшибки = НСтр("ru='Команда не поддерживается драйвером.'");
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
			РезультатВыполнения.Результат = Ложь;
			Возврат;
		КонецЕсли;
			
		Если Результат Тогда
			РезультатВыполнения.Вставить("НомерМерчанта" , НомерМерчанта);
			РезультатВыполнения.Вставить("НомерКарты"    , НомерКарты);
			РезультатВыполнения.Вставить("НомерЧекаЭТ"   , НомерЧека);
			РезультатВыполнения.Вставить("СсылочныйНомер", СсылочныйНомер);
			РезультатВыполнения.Вставить("КодАвторизации", КодАвторизации);
			РезультатВыполнения.Вставить("ТекстСлипЧека" , ТекстСлипЧека);
			РезультатВыполнения.Вставить("СтатусОперации", СтатусОперации);
			РезультатВыполнения.Вставить("ИдентификаторКорзины", ИдентификаторКорзины);
			РезультатВыполнения.Вставить("СуммаЭлектронногоСертификата", СуммаЭлектронногоСертификата);
			РезультатВыполнения.Вставить("СуммаСобственныхСредств", СуммаСобственныхСредств);
			РезультатВыполнения.Результат = Истина;
		Иначе
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		КонецЕсли;
	Исключение
		ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <%1>.'");
		ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, Команда); 
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
	КонецПопытки;
	
КонецПроцедуры

// Процедура осуществляет аварийную отмену операции по карте.
//
Процедура АварийнаяОтменаОперации(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	Попытка
		Результат = ОбъектДрайвера.АварийнаяОтменаОперации(ПараметрыПодключения.ИДУстройства);
		Если Результат Тогда
			РезультатВыполнения.Результат = Истина;
		Иначе
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		КонецЕсли;
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.АварийнаяОтменаОперации>.'") + Символы.ПС + ОписаниеОшибки;
	КонецПопытки;
	
КонецПроцедуры

// Процедура осуществляет сверку итогов по картам.
//
Процедура ИтогиДняПоКартам(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	ТекстСлипЧека  = "";
	Попытка
		Результат = ОбъектДрайвера.ИтогиДняПоКартам(ПараметрыПодключения.ИДУстройства, ТекстСлипЧека);
		Если Результат Тогда
			РезультатВыполнения.Вставить("ТекстСлипЧека" , ТекстСлипЧека);
			РезультатВыполнения.Результат = Истина;
		Иначе
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		КонецЕсли;
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ИтогиДняПоКартам>.'") + Символы.ПС + ОписаниеОшибки;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ДисплейПокупателя

// Процедура осуществляет вывод списка строк на дисплей покупателя.
//
Процедура ВывестиСтрокуНаДисплейПокупателя(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	СтрокиТекста = ?(ДанныеОперации.Свойство("СтрокиТекста"), ДанныеОперации.СтрокиТекста, НСтр("ru='Данные для вывода не указаны'"));
	Попытка
		Результат = ОбъектДрайвера.ВывестиСтрокуНаДисплейПокупателя(ПараметрыПодключения.ИДУстройства, СтрокиТекста);
		Если Результат Тогда
			РезультатВыполнения.Результат = Истина;
		Иначе
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		КонецЕсли;
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ВывестиСтрокуНаДисплейПокупателя>.'") + Символы.ПС + ОписаниеОшибки;
	КонецПопытки;
	
КонецПроцедуры

// Процедура осуществляет вывод QR кода на дисплей покупателя.
//
Процедура ВывестиQRКодНаДисплейПокупателя(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	ЗначениеQRКода = ?(ДанныеОперации.Свойство("ЗначениеQRКода"), ДанныеОперации.ЗначениеQRКода, "");
	КартинкаQRКода = ?(ДанныеОперации.Свойство("КартинкаQRКода"), ДанныеОперации.КартинкаQRКода, "");
	
	Попытка
		Результат = ОбъектДрайвера.ВывестиQRКодНаДисплейПокупателя(ПараметрыПодключения.ИДУстройства, ЗначениеQRКода, КартинкаQRКода);
		Если Результат Тогда
			РезультатВыполнения.Результат = Истина;
		Иначе
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		КонецЕсли;
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ВывестиQRКодНаДисплейПокупателя>.'") + Символы.ПС + ОписаниеОшибки;
	КонецПопытки;
	
КонецПроцедуры

// Процедура осуществляет очистку дисплея покупателя.
//
Процедура ОчиститьДисплейПокупателя(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	Попытка
		Результат = ОбъектДрайвера.ОчиститьДисплейПокупателя(ПараметрыПодключения.ИДУстройства);
		Если Результат Тогда
			РезультатВыполнения.Результат = Истина;
		Иначе
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		КонецЕсли;
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОчиститьДисплейПокупателя>.'") + Символы.ПС + ОписаниеОшибки;
	КонецПопытки;
	
КонецПроцедуры

// Процедура возвращает параметры вывода на дисплей покупателя.
//
Процедура ПолучитьПараметрыВывода(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	Если ПараметрыПодключения.РевизияИнтерфейса >= 3004 Тогда
		Попытка
			РезультатОперацииXML = "";
			Результат = ОбъектДрайвера.ПолучитьПараметрыДисплеяПокупателя(ПараметрыПодключения.ИДУстройства, РезультатОперацииXML);
			Если Результат Тогда
				ПараметрыТерминала = МенеджерОборудованияВызовСервера.ПрочитатьКорневойЭлементXML(РезультатОперацииXML);
				Если ПараметрыТерминала.Свойство("Columns") И Не ПустаяСтрока(ПараметрыТерминала.Columns) Тогда
					ПараметрыПодключения.СтолбцовНаДисплее = Число(ПараметрыТерминала.Columns);
				КонецЕсли; 
				Если ПараметрыТерминала.Свойство("Rows") И Не ПустаяСтрока(ПараметрыТерминала.Rows) Тогда
					ПараметрыПодключения.СтрокНаДисплее = Число(ПараметрыТерминала.Rows);
				КонецЕсли; 
				ПараметрыПодключения.ДисплейОтображаетТекст   = ПараметрыТерминала.Свойство("DisplayText") И ВРег(ПараметрыТерминала.DisplayText) = "TRUE"; 
				ПараметрыПодключения.ДисплейОтображаетГрафику = ПараметрыТерминала.Свойство("DisplayGraphics") И ВРег(ПараметрыТерминала.DisplayGraphics) = "TRUE"; 
				// АПК:216-выкл соответствует требованиям к разработке драйверов подключаемого оборудования. Версия 3.5 
				ПараметрыПодключения.ДисплейОтображаетQRКод   = 
					(ПараметрыТерминала.Свойство("DisplayQRСode") И ВРег(ПараметрыТерминала.DisplayQRСode) = "TRUE")
					ИЛИ (ПараметрыТерминала.Свойство("DisplayQRCode") И ВРег(ПараметрыТерминала.DisplayQRCode) = "TRUE"); 
				// АПК:216-вкл
				РезультатВыполнения.Результат = Истина;
				РезультатВыполнения.Вставить("СтолбцовНаДисплее", ПараметрыПодключения.СтолбцовНаДисплее);
				РезультатВыполнения.Вставить("СтрокНаДисплее"   , ПараметрыПодключения.СтрокНаДисплее);
				РезультатВыполнения.Вставить("ДисплейОтображаетТекст"  , ПараметрыПодключения.ДисплейОтображаетТекст);
				РезультатВыполнения.Вставить("ДисплейОтображаетГрафику", ПараметрыПодключения.ДисплейОтображаетГрафику);
				РезультатВыполнения.Вставить("ДисплейОтображаетQRКод"  , ПараметрыПодключения.ДисплейОтображаетQRКод);
			КонецЕсли         
		Исключение
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПолучитьПараметрыДисплеяПокупателя>.'") + Символы.ПС + ОписаниеОшибки;
		КонецПопытки;
	Иначе
		СтолбцовНаДисплее = 20; 
		СтрокНаДисплее    = 2;
		Попытка
			Результат = ОбъектДрайвера.ПолучитьПараметрыВывода(ПараметрыПодключения.ИДУстройства, СтолбцовНаДисплее, СтрокНаДисплее);
			Если Результат Тогда
				ПараметрыПодключения.СтолбцовНаДисплее = СтолбцовНаДисплее;
				ПараметрыПодключения.СтрокНаДисплее    = СтрокНаДисплее;
				РезультатВыполнения.Результат = Истина;
				РезультатВыполнения.Вставить("СтолбцовНаДисплее", СтолбцовНаДисплее);
				РезультатВыполнения.Вставить("СтрокНаДисплее"   , СтрокНаДисплее);
				РезультатВыполнения.Вставить("ДисплейОтображаетТекст"  , Истина);
				РезультатВыполнения.Вставить("ДисплейОтображаетГрафику", Ложь);
				РезультатВыполнения.Вставить("ДисплейОтображаетQRКод"  , Ложь);
			Иначе
				ОписаниеОшибки = "";
				ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
				РезультатВыполнения.Результат = Ложь;
					РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
			КонецЕсли;
		Исключение
			РезультатВыполнения.Результат = Ложь;
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПолучитьПараметрыВывода>.'") + Символы.ПС + ОписаниеОшибки;
		КонецПопытки;
	КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область ЭлектронныеВесы

// Процедура осуществляет получение веса груза, расположенного на весах.
//
Процедура ПолучитьВес(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	Вес = 0;
	Попытка
		Результат = ОбъектДрайвера.ПолучитьВес(ПараметрыПодключения.ИДУстройства, Вес);
		Если Результат Тогда
			РезультатВыполнения.Результат = Истина;
			РезультатВыполнения.Вставить("Вес", Вес);
		Иначе
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		КонецЕсли;
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПолучитьВес>.'") + Символы.ПС + ОписаниеОшибки;
	КонецПопытки;
	
КонецПроцедуры

// Процедура осуществляет установку веса тары на весах.
//
Процедура Тарировать(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	ВесТары = ?(ДанныеОперации.Свойство("ВесТары"), ДанныеОперации.ВесТары, 0);
	Попытка
		Результат = ОбъектДрайвера.УстановитьВесТары(ПараметрыПодключения.ИДУстройства, ВесТары);
		Если Результат Тогда
			РезультатВыполнения.Результат = Истина;
		Иначе
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		КонецЕсли;
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.УстановитьВесТары>.'") + Символы.ПС + ОписаниеОшибки;
	КонецПопытки;
	
КонецПроцедуры

// Процедура осуществляет выгрузку товаров в весы с печатью этикеток.
//
Процедура ВыгрузитьТовары(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	СтатусПакета = "first";
	
	КоличествоПакетов = ДанныеОперации.ПакетыXML.Количество();
	ПроцентИнкремент = 100 / КоличествоПакетов;
	ТекущийПроцент  = 0;
	ТекущийПакет = 0;
	
	СтатусПакета = ?(КоличествоПакетов > 1 , "first", "last");
	
	Для Каждого ДанныеДляВыгрузки Из ДанныеОперации.ПакетыXML  Цикл
		
		Попытка
			Результат = ОбъектДрайвера.ВыгрузитьТовары(ПараметрыПодключения.ИДУстройства, ДанныеДляВыгрузки, СтатусПакета);
		Исключение
			РезультатВыполнения.Результат = Ложь;
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ВыгрузитьТовары>.'") + Символы.ПС + ОписаниеОшибки;
			Возврат;
		КонецПопытки;
		
		Если Результат Тогда
			РезультатВыполнения.Результат = Истина;
		Иначе
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
			Возврат;
		КонецЕсли; 
		ТекущийПакет = ТекущийПакет + 1;
		СтатусПакета = ?(ТекущийПакет < КоличествоПакетов - 1 , "regular", "last");
		ТекущийПроцент = ТекущийПроцент + ПроцентИнкремент;
		Состояние(НСтр("ru='Выгрузка данных...'"), Окр(ТекущийПроцент));
	КонецЦикла;
	
КонецПроцедуры

// Процедура осуществляет очистку базы товаров в весах с печатью этикеток.
//
Процедура ОчиститьТоварыВВесах(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	Попытка
		Результат = ОбъектДрайвера.ОчиститьТовары(ПараметрыПодключения.ИДУстройства);
		Если Результат Тогда
			РезультатВыполнения.Результат = Истина;
		Иначе
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		КонецЕсли;
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОчиститьТовары>.'") + Символы.ПС + ОписаниеОшибки;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ТерминалыСбораДанных

// Очищает загруженную ранее таблицу товаров в ТСД.
//
Процедура ОчиститьТаблицу(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	Попытка
		Результат = ОбъектДрайвера.ОчиститьТаблицу(ПараметрыПодключения.ИДУстройства);
		Если Результат Тогда
			РезультатВыполнения.Результат = Истина;
		Иначе
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		КонецЕсли;
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОчиститьТаблицу>.'") + Символы.ПС + ОписаниеОшибки;
	КонецПопытки;
	
КонецПроцедуры

// Функция осуществляет загрузку таблицы из терминала сбора данных.
//
Процедура ЗагрузитьТаблицу(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)

	Результат = Истина;
	ДанныеЗагрузки = "";
	
	Попытка
		Результат = ОбъектДрайвера.ЗагрузитьТаблицу(ПараметрыПодключения.ИДУстройства, ДанныеЗагрузки);
		Если Результат Тогда
			РезультатВыполнения.Результат = Истина;
			ДанныеОперации.Вставить("ДанныеЗагрузки", ДанныеЗагрузки);
		Иначе
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
			Возврат;
		КонецЕсли; 
		
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ЗагрузитьТаблицу>.'") + Символы.ПС + ОписаниеОшибки;
	КонецПопытки;
	
КонецПроцедуры

// Функция осуществляет выгрузку данных в терминал сбора данных.
//
Процедура ВыгрузитьТаблицу(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	СтатусПакета = "first";
	
	КоличествоПакетов = ДанныеОперации.ПакетыXML.Количество();
	ПроцентИнкремент = 100 / КоличествоПакетов;
	ТекущийПроцент  = 0;
	ТекущийПакет = 0;
	
	СтатусПакета = ?(КоличествоПакетов > 1 , "first", "last");
	
	Для Каждого ДанныеДляВыгрузки Из ДанныеОперации.ПакетыXML  Цикл
		
		Попытка
			Результат = ОбъектДрайвера.ВыгрузитьТаблицу(ПараметрыПодключения.ИДУстройства, ДанныеДляВыгрузки, СтатусПакета);
		Исключение
			РезультатВыполнения.Результат = Ложь;
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ВыгрузитьТаблицу>.'") + Символы.ПС + ОписаниеОшибки;
			Возврат;
		КонецПопытки;
		
		Если Результат Тогда
			РезультатВыполнения.Результат = Истина;
		Иначе
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
			Возврат;
		КонецЕсли; 
		ТекущийПакет = ТекущийПакет + 1;
		СтатусПакета = ?(ТекущийПакет < КоличествоПакетов - 1 , "regular", "last");
		ТекущийПроцент = ТекущийПроцент + ПроцентИнкремент;
		Состояние(НСтр("ru='Выгрузка данных...'"), Окр(ТекущийПроцент));
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПринтерыЭтикеток

Процедура ИнициализацияПринтера(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	Попытка
		Результат = ОбъектДрайвера.ИнициализацияПринтера(ПараметрыПодключения.ИДУстройства);
		Если Результат Тогда
			РезультатВыполнения.Результат = Истина;
		Иначе
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		КонецЕсли;
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ИнициализацияПринтера>.'") + Символы.ПС + ОписаниеОшибки;
	КонецПопытки;
	
КонецПроцедуры

Процедура ПечатьЭтикеток(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	РезультатВыполнения.Результат = Истина;
	
	ПакетыДляВыгрузки = ДанныеОперации.ПакетыДляВыгрузки;
	КоличествоПакетов = ПакетыДляВыгрузки.Количество() - 1;
	
	СтатусПакета  = "first";
	
	Для Счетчик = 0 По КоличествоПакетов Цикл
		Если (Счетчик = КоличествоПакетов) Тогда
			СтатусПакета = "last";
		ИначеЕсли (Счетчик > 1) Тогда
			СтатусПакета = "regular";
		КонецЕсли;
		
		ДанныеДляВыгрузки = ПакетыДляВыгрузки[Счетчик];
		Попытка
			Ответ = ОбъектДрайвера.ПечатьЭтикеток(ПараметрыПодключения.ИДУстройства, ДанныеДляВыгрузки, СтатусПакета);
		Исключение
			РезультатВыполнения.Результат = Ложь;
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПечатьЭтикеток>.'") + Символы.ПС + ОписаниеОшибки;
			Возврат;
		КонецПопытки;
		
		Если НЕ Ответ Тогда
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляRFIDСчитывателей

// Функция получения данные меток RFID считывателя.
//
Процедура ПолучитьДанныеМетокRFID(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения) 
	
	РезультатВыполнения.Результат = Истина;
	
	ТаблицаМеток = "";
	ИДПакета = ДанныеОперации.ИДПакета;
	
	Попытка
		Ответ = ОбъектДрайвера.ПолучитьДанныеМетокRFID(ПараметрыПодключения.ИДУстройства, ИДПакета, ТаблицаМеток);
		Если НЕ Ответ Тогда
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		Иначе
			РезультатВыполнения.Вставить("ТаблицаМеток", ТаблицаМеток);
		КонецЕсли;
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОткрытьСессиюRFID>.'") + Символы.ПС + ОписаниеОшибки;
	КонецПопытки;
	
КонецПроцедуры

// Функция открывает сессию RFID считывателя.
//
Процедура ОткрытьСессиюRFID(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	РезультатВыполнения.Результат = Истина;
	
	Попытка
		Ответ = ОбъектДрайвера.ОткрытьСессиюRFID(ПараметрыПодключения.ИДУстройства);
		Если НЕ Ответ Тогда
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		КонецЕсли;
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОткрытьСессиюRFID>.'") + Символы.ПС + ОписаниеОшибки;
	КонецПопытки;
	
КонецПроцедуры

// Функция закрывает сессию RFID считывателя.
//
Процедура ЗакрытьСессиюRFID(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	РезультатВыполнения.Результат = Истина;
	
	Попытка
		Ответ = ОбъектДрайвера.ЗакрытьСессиюRFID(ПараметрыПодключения.ИДУстройства);
		Если НЕ Ответ Тогда
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		КонецЕсли;
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ЗакрытьСессиюRFID>.'") + Символы.ПС + ОписаниеОшибки;
	КонецПопытки;
	
КонецПроцедуры

// Функция записывает данные в метку RFID.
//
Процедура ЗаписатьДанныеВМеткуRFID(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	// АПК: 1353-выкл TID, EPC - аббревиатура
	РезультатВыполнения.Результат = Истина;
	Таймаут = ДанныеОперации.Таймаут;
	TID = ДанныеОперации.TID;
	EPC = ДанныеОперации.EPC;
	Данные = ДанныеОперации.Данные;
	БанкПамяти = ?(ДанныеОперации.БанкПамяти = "EPC", 1, 2);
	
	Попытка
		Ответ = ОбъектДрайвера.ЗаписатьДанныеВМеткуRFID(ПараметрыПодключения.ИДУстройства, TID, EPC, Данные, БанкПамяти, Таймаут);
		Если НЕ Ответ Тогда
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		КонецЕсли;
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ЗаписатьДанныеВМеткуRFID>.'") + Символы.ПС + ОписаниеОшибки;
	КонецПопытки;
	// АПК: 1353-вкл
	
КонецПроцедуры

#КонецОбласти


#КонецОбласти