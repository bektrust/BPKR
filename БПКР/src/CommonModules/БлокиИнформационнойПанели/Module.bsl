#Область ПрограммныйИнтерфейс

// Возвращает таблицу свойств предопределенных блоков
//
// Возвращаемое значени:
//   ТаблицаЗначений - описание полей см. в методе НоваяТаблицаБлоков()
//
Функция ПредопределенныеБлоки() Экспорт
	
	ТаблицаБлоков = НоваяТаблицаБлоков();
	
	ИспользуетсяРазделениеДанных = ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных()
		И ОбщегоНазначения.РазделениеВключено();
	
	// Монитор основных показателей
	Если ОстаткиДенежныхСредствДоступны() Тогда
		ДобавитьОстаткиДенежныхСредств(ТаблицаБлоков);
	КонецЕсли;
	
	Если ПокупателиДоступны() Тогда
		ДобавитьПокупатели(ТаблицаБлоков);
	КонецЕсли;
	
	Если ПоставщикиДоступны() Тогда
		ДобавитьПоставщики(ТаблицаБлоков);
	КонецЕсли;
	
	Если ПродажиДоступны() Тогда
		ДобавитьПродажи(ТаблицаБлоков);
	КонецЕсли;
	
	Если КурсыВалютДоступны() Тогда
		ДобавитьКурсыВалют(ТаблицаБлоков);
	КонецЕсли;
	
	// Список задач
	Если ЗадачиДоступны() Тогда
		ДобавитьЗадачи(ТаблицаБлоков);
	КонецЕсли;
	
	// Мои задачи
	Если МоиЗадачиДоступны() Тогда
		ДобавитьМоиЗадачи(ТаблицаБлоков);
	КонецЕсли;
	
	ДобавитьТекущиеДела(ТаблицаБлоков);
	
	Если ЗаметкиДоступны() Тогда
		ДобавитьЗаметки(ТаблицаБлоков);
	КонецЕсли;	

	Если МетодическаяПоддержкаДоступна() Тогда
		ДобавитьМетодическаяПоддержка(ТаблицаБлоков);
	КонецЕсли;

	Если ИспользуетсяРазделениеДанных Тогда
		// В режиме интеграции предупреждения от менеджера сервиса выводятся в баннере.
		ДобавитьПоддержкаСервиса(ТаблицаБлоков);
	КонецЕсли;

	Возврат ТаблицаБлоков;
	
КонецФункции

#КонецОбласти

#Область ДанныеИнформационнойПанели

#Область Задачи

Процедура ДобавитьЗадачи(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаЗадачи(),
		"",
		"БлокиИнформационнойПанели.Задачи",
		"БлокиИнформационнойПанели.ОбновитьЗадачи",
		СвойстваЗадачи());
	
КонецПроцедуры

Функция СвойстваЗадачи()
	
	ВГраница = БлокиИнформационнойПанелиКлиентСервер.КоличествоЗадач() - 1;
	
	Свойства = "Задачи_Заголовок";//, Задачи_Просрочено";
	
	Для Индекс = 0 По ВГраница Цикл
		Свойства = Свойства + ", "
			+ БлокиИнформационнойПанелиКлиентСервер.СвойствоНаименованияЗадачи(Индекс);

	КонецЦикла;
	
	Возврат Свойства;

КонецФункции

// Обновляет данные блока
//
// Параметры:
//   Параметры - Структура
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * БыстроеОбновление - Булево - учитывать актуальность данных при обновлении
//
Процедура ОбновитьЗадачи(Параметры) Экспорт

	//КалендарьБухгалтера.ОбновитьЗадачи(Параметры.Организация, Параметры.БыстроеОбновление);	
	
КонецПроцедуры

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * Инициализация - Истина - заполнить только статическими данными
//
Процедура Задачи(Параметры) Экспорт
	
	Если Параметры.Инициализация Тогда
		Результат = Новый Структура;
		Результат.Вставить("Задачи_Заголовок",
			ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаЗадачи()));
		ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура(СвойстваЗадачи());
	Результат.Вставить("Задачи_Заголовок",
		ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаЗадачи()));
	
	МассивАктуальныхЗадач = ОбщегоНазначенияБПСервер.ЗадачиБухгалтера(Ложь);

	ШрифтОбычногоСобытия = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветОбычногоСобытия  = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	
	// Актуальные задачи
	Если МассивАктуальныхЗадач.Количество() > 0 Тогда

		Для Индекс = 1 По Мин(МассивАктуальныхЗадач.Количество(), 4) Цикл
			
			ТекстЗадания = ?(СтрДлина(МассивАктуальныхЗадач[Индекс - 1]) <= 37, 
				МассивАктуальныхЗадач[Индекс - 1], 
				Лев(МассивАктуальныхЗадач[Индекс - 1], 34));
			
			НаименованиеЗадачи = Новый ФорматированнаяСтрока(
				ТекстЗадания,
				ШрифтОбычногоСобытия, 
				ЦветОбычногоСобытия);
			
			Результат.Вставить(
				БлокиИнформационнойПанелиКлиентСервер.СвойствоНаименованияЗадачи(Индекс - 1),
				НаименованиеЗадачи);
		КонецЦикла;
		
	Иначе
	
		НаименованиеЗадачи = Новый ФорматированнаяСтрока(
			НСтр("ru = 'До конца следующего месяца задач нет'"),
			ШрифтОбычногоСобытия, ЦветОбычногоСобытия);
		
		Результат.Вставить(БлокиИнформационнойПанелиКлиентСервер.СвойствоНаименованияЗадачи(0), НаименованиеЗадачи);
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	
КонецПроцедуры

//Функция ПредставлениеПросроченныхЗадач(ДанныеЗадачиБухгалтера)
//	
//	ПараметрыПредметаИсчисления = НСтр("ru = 'задача, задачи, задач'");
//	
//	ШрифтОбычногоСобытия = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
//	ЦветОбычногоСобытия  = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
//	
//	ШрифтВажногоСобытия = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
//	ЦветВажногоСобытия  = ЦветаСтиля.ВажноеСобытие;
//	
//	ШрифтПриближающегосяСобытия = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
//	ЦветПриближающегосяСобытия  = ЦветаСтиля.ПриближающеесяСобытие;
//	
//	ОтборПросроченныхЗадач = Новый Структура("ОтносительныйСрок", Перечисления.ОтносительныеСроки.Просрочено);
//	
//	ПросроченнаяЗадача = ДанныеЗадачиБухгалтера.ПросроченнаяЗадача;
//	
//	КоличествоПросроченных = ДанныеЗадачиБухгалтера.КоличествоПросроченных;
//	
//	Если КоличествоПросроченных = 0 Тогда
//		
//		Представление = Новый ФорматированнаяСтрока(
//			СтрШаблон(НСтр("ru = 'Просроченных %1 нет'"), МножественноеПредставление(ПараметрыПредметаИсчисления)),
//			ШрифтОбычногоСобытия, ЦветОбычногоСобытия);
//		
//	ИначеЕсли КоличествоПросроченных = 1 Тогда
//		
//		ПредставлениеСрока = Формат(ПросроченнаяЗадача.Срок, "Л=ru; ДФ='d MMMM'");
//		
//		// Исключим возможность переноса строк в веб-клиенте
//		НаименованиеЗадачиБезПробелов = СтрокаБезПереносов(
//			СтрШаблон(НСтр("ru = '%1 %2'"), ПредставлениеСрока, ПросроченнаяЗадача.Наименование));
//		
//		Представление = Новый ФорматированнаяСтрока(
//			НаименованиеЗадачиБезПробелов,
//			ШрифтВажногоСобытия, ЦветВажногоСобытия);
//		
//	Иначе
//		
//		КоличествоПросроченныхПрописью = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
//			КоличествоПросроченных, ПараметрыПредметаИсчисления);
//		
//		Представление = Новый ФорматированнаяСтрока(
//			СтрШаблон(НСтр("ru = 'Просрочено: %1'"), КоличествоПросроченныхПрописью),
//			ШрифтВажногоСобытия, ЦветВажногоСобытия);
//		
//	КонецЕсли;

//	Возврат Представление;
//	
//КонецФункции

//Функция НаименованиеЗадачиПолностью(Задача, ПредставлениеСрока, ЦветТекста, ШрифтТекста)
//	
//	// Исключим возможность переноса строк в веб-клиенте
//	НаименованиеЗадачиБезПробелов = СтрокаБезПереносов(
//		СтрШаблон(НСтр("ru = '%1 %2'"), ПредставлениеСрока, Задача.Наименование));
//	
//	Возврат Новый ФорматированнаяСтрока(
//		НаименованиеЗадачиБезПробелов,
//		ШрифтТекста,
//		ЦветТекста);

//КонецФункции

Функция ЗадачиДоступны()
	Возврат ПравоДоступа("Просмотр", Метаданные.ОбщиеФормы.СписокЗадачБухгалтера);
КонецФункции

#КонецОбласти

#Область МоиЗадачи

Процедура ДобавитьМоиЗадачи(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаМоиЗадачи(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаМоиЗадачи(),
		"БлокиИнформационнойПанели.МоиЗадачи",
		"БлокиИнформационнойПанели.ОбновитьМоиЗадачи",
		СвойстваМоиЗадачи());
	
КонецПроцедуры

Функция СвойстваМоиЗадачи()
	
	ВГраница = БлокиИнформационнойПанелиКлиентСервер.КоличествоМоиЗадачи() - 1;
	
	Свойства = "МоиЗадачи_Заголовок";
	
	Для Индекс = 0 По ВГраница Цикл
		Свойства = Свойства + ", "
			+ БлокиИнформационнойПанелиКлиентСервер.СвойствоНаименованияМоиЗадачи(Индекс);
	КонецЦикла;
	
	Возврат Свойства;
	
КонецФункции

// Обновляет данные блока
//
// Параметры:
//   Параметры - Структура
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * БыстроеОбновление - Булево - учитывать актуальность данных при обновлении
//
Процедура ОбновитьМоиЗадачи(Параметры) Экспорт
	
	// Обновление списка моих задач не предусмотрено.
	
КонецПроцедуры

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * Инициализация - Истина - заполнить только статическими данными
//
Процедура МоиЗадачи(Параметры) Экспорт
	
	Если Параметры.Инициализация Тогда
		Результат = Новый Структура;
		Результат.Вставить("МоиЗадачи_Заголовок",
			ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаМоиЗадачи()));
		ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура(СвойстваМоиЗадачи());
	Результат.Вставить("МоиЗадачи_Заголовок",
		ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаМоиЗадачи()));
	
	ДанныеМоиЗадачи = МоиЗадачи.ДанныеМоиЗадачи();
	
	СписокМоихЗадач = ДанныеМоиЗадачи.Задачи;
	
	ШрифтОбычногоСобытия = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ШрифтВажногоСобытия = Новый Шрифт(ШрифтОбычногоСобытия, , , Истина);
	ЦветОбычногоСобытия  = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	ЦветВажногоСобытия  = ЦветаСтиля.ВажноеСобытие;
	
	КоличествоСтрокВиджета = БлокиИнформационнойПанелиКлиентСервер.КоличествоМоиЗадачи();
	// Если помещаются все задачи - выводим все, которые есть.
	// Если не помещаются - выводим все, что можем, а в последней строке выводим общее количество оставшихся задач.
	МожноВывестиВсеЗадачи = СписокМоихЗадач.Количество() <= КоличествоСтрокВиджета;
	МожноВывестиЗадач = ?(МожноВывестиВсеЗадачи, СписокМоихЗадач.Количество(), КоличествоСтрокВиджета - 1);
	
	ИндексТекущейСтрокиВиджета = -1;
	
	Для Каждого МояЗадача Из СписокМоихЗадач Цикл
		
		ИндексТекущейСтрокиВиджета = ИндексТекущейСтрокиВиджета + 1;
		
		ЦветЗадачи = ?(МояЗадача.Просрочена, ЦветВажногоСобытия, ЦветОбычногоСобытия);
		ШрифтЗадачи = ?(МояЗадача.Важная, ШрифтВажногоСобытия, ШрифтОбычногоСобытия);
		
		НаименованиеЗадачи = СокрЛП(СтрШаблон("%1 %2", МояЗадача.ОтносительныйСрок, 
			ОбщегоНазначенияБПКлиентСервер.ДекапитализироватьСтроку(МояЗадача.Наименование)));
		Результат.Вставить(
			БлокиИнформационнойПанелиКлиентСервер.СвойствоНаименованияМоиЗадачи(ИндексТекущейСтрокиВиджета),
			Новый ФорматированнаяСтрока(НаименованиеЗадачи, ШрифтЗадачи, ЦветЗадачи));
		
		Если ИндексТекущейСтрокиВиджета + 1 >= МожноВывестиЗадач Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не МожноВывестиВсеЗадачи Тогда
		
		ИндексТекущейСтрокиВиджета = ИндексТекущейСтрокиВиджета + 1;
		
		// Это последняя свободная строка, при этом сообщений нужно вывести больше, чем одно
		ЕщеЗадач = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
			СписокМоихЗадач.Количество() - МожноВывестиЗадач, НСтр("ru = 'задача, задачи, задач'"));
		ТекстСообщения = СтрШаблон(НСтр("ru = 'и еще %1'"), ЕщеЗадач);
		
		Результат.Вставить(
			БлокиИнформационнойПанелиКлиентСервер.СвойствоНаименованияМоиЗадачи(ИндексТекущейСтрокиВиджета),
			Новый ФорматированнаяСтрока(ТекстСообщения, ШрифтОбычногоСобытия, ЦветОбычногоСобытия));
		
	КонецЕсли;
	
	Если СписокМоихЗадач.Количество() = 0 Тогда
		
		НаименованиеЗадачи = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Задач для выполнения нет'"),
			ШрифтОбычногоСобытия, ЦветОбычногоСобытия);
		
		ИндексТекущейСтрокиВиджета = ИндексТекущейСтрокиВиджета + 1;
		
		Результат.Вставить(БлокиИнформационнойПанелиКлиентСервер.СвойствоНаименованияМоиЗадачи(ИндексТекущейСтрокиВиджета), НаименованиеЗадачи);
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	
КонецПроцедуры

// Возвращает Истина, если для текущего пользователя можно отображать блок "Задачи" на начальной странице.
// Возможность отображения блока зависит от прав пользователя и состояния регламентного задания по обновлению задач бухгалтера.
//
Функция МоиЗадачиДоступны()
	
	Возврат МоиЗадачи.МоиЗадачиДоступны();
	
КонецФункции

#КонецОбласти

#Область ОстаткиДенежныхСредств

Процедура ДобавитьОстаткиДенежныхСредств(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаОстаткиДенежныхСредств(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаОстаткиДенежныхСредств(),
		"БлокиИнформационнойПанели.ОстаткиДенежныхСредств",
		"БлокиИнформационнойПанели.ОбновитьОстаткиДенежныхСредств",
		СвойстваОстаткиДенежныхСредств());
	
КонецПроцедуры

Функция СвойстваОстаткиДенежныхСредств()
	
	// ВГраница = Количеству, т.к. последняя строка используется для итоговой записи
	ВГраница = БлокиИнформационнойПанелиКлиентСервер.КоличествоВалютныхОстатков();
	
	Свойства = "ОстаткиДенежныхСредств_Заголовок, "
					+ "ОстаткиДенежныхСредств_Касса, "
					+ "ОстаткиДенежныхСредств_Банк, "
					+ "ОстаткиДенежныхСредств_ИндексИтога";
	
	Для Индекс = 0 По ВГраница Цикл
		Свойства = Свойства + ", "
			+ БлокиИнформационнойПанелиКлиентСервер.СвойствоОстатокДенежныхСредств(Индекс);
	КонецЦикла;
	
	Возврат Свойства;
	
КонецФункции

// Обновляет данные блока
//
// Параметры:
//   Параметры - Структура
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * БыстроеОбновление - Булево - учитывать актуальность данных при обновлении
//
Процедура ОбновитьОстаткиДенежныхСредств(Параметры) Экспорт
	
	РазделыМонитора = Новый Массив;
	РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.ОстаткиДенежныхСредств);
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("Организация", Параметры.Организация);
	ПараметрыЗаполнения.Вставить("РазделыМонитора", РазделыМонитора);
	ПараметрыЗаполнения.Вставить("ПолучатьПрошлыйПериод", Ложь);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	
	УстановитьПривилегированныйРежим(Истина);
	Если Параметры.БыстроеОбновление Тогда
		МониторРуководителя.ОбновитьДанныеМонитораВФоне(ПараметрыЗаполнения, АдресХранилища);
	Иначе
		МониторРуководителя.ПерезаписатьДанныеМонитораВФоне(ПараметрыЗаполнения, АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * ВариантОкругления - Число - 1 - округлять до целых сомов, 1000 - до тысяч 
//     * Инициализация - Истина - заполнить только статическими данными
//
Процедура ОстаткиДенежныхСредств(Параметры) Экспорт
	
	Если Параметры.Инициализация Тогда
		Результат = Новый Структура;
		Результат.Вставить("ОстаткиДенежныхСредств_Заголовок",
			ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаОстаткиДенежныхСредств()));
		ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура(СвойстваОстаткиДенежныхСредств());
	Результат.Вставить("ОстаткиДенежныхСредств_Заголовок",
		ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаОстаткиДенежныхСредств()));
	
	ОстаткиДенежныхСредств = МониторРуководителя.ДанныеОстаткиДенежныхСредств(Параметры);
	
	ВалютаПоУмолчанию = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	// Остаток в кассе
	Касса = ПредставлениеОстаткаДенежныхСредств(ОстаткиДенежныхСредств.Касса, ВалютаПоУмолчанию);
	Результат.Вставить("ОстаткиДенежныхСредств_Касса", Касса);
	
	ВалютныеОстатки = ОстаткиДенежныхСредств.ВалютныеОстатки;
	
	ИндексСтроки = 0;
	Если ВалютныеОстатки.Количество() <= БлокиИнформационнойПанелиКлиентСервер.КоличествоВалютныхОстатков() Тогда
		
		// Остаток на сомовых счетах
		Банк = ПредставлениеОстаткаДенежныхСредств(ОстаткиДенежныхСредств.Банк, ВалютаПоУмолчанию);
		
		// Остатки на валютных счетах с разбивкой по валютам
		Для Каждого СтрокаОстатка Из ВалютныеОстатки Цикл
			
			Остаток = ПредставлениеОстаткаДенежныхСредств(СтрокаОстатка.СуммаВВалюте, СтрокаОстатка.Валюта);
			Результат.Вставить(БлокиИнформационнойПанелиКлиентСервер.СвойствоОстатокДенежныхСредств(ИндексСтроки), Остаток);
			
			ИндексСтроки = ИндексСтроки + 1;
			
		КонецЦикла;
		
	Иначе
		
		// Группируем все остатки в одну строку
		Банк = ПредставлениеОстаткаДенежныхСредств(ОстаткиДенежныхСредств.Банк + ВалютныеОстатки.Итог("Сумма"), ВалютаПоУмолчанию);
		
	КонецЕсли;
	Результат.Вставить("ОстаткиДенежныхСредств_Банк", Банк);
	
	// Итого
	Итого = ПредставлениеОстаткаДенежныхСредств(ОстаткиДенежныхСредств.Итого, ВалютаПоУмолчанию, Истина);
	Результат.Вставить(БлокиИнформационнойПанелиКлиентСервер.СвойствоОстатокДенежныхСредств(ИндексСтроки), Итого);
	Результат.Вставить("ОстаткиДенежныхСредств_ИндексИтога", ИндексСтроки);
	
	ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	
КонецПроцедуры

Функция ПредставлениеОстаткаДенежныхСредств(Остаток, Валюта, Выделить = Ложь)
	
	ФорматнаяСтрока = "ЧДЦ=; ЧН=0";
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		СтроковоеПредставление = СтрШаблон("%1 %2", Формат(Остаток, ФорматнаяСтрока), Валюта);
	Иначе
		СтроковоеПредставление = Формат(Остаток, ФорматнаяСтрока);
	КонецЕсли;
	
	Шрифт      = ?(Выделить, Новый Шрифт(ШрифтыСтиля.ШрифтТекстаИнформационнойПанели,,, Истина), ШрифтыСтиля.ШрифтТекстаИнформационнойПанели);
	ЦветТекста = ?(Остаток >= 0, ЦветаСтиля.ЦветТекстаИнформационнойПанели, ЦветаСтиля.ВажноеСобытие);
	
	Возврат Новый ФорматированнаяСтрока(СтроковоеПредставление, Шрифт, ЦветТекста);
	
КонецФункции

Функция ОстаткиДенежныхСредствДоступны()
	
	// Блок доступен для пользователей, которым доступен отчет "Остатки денежных средств".
	// Сведения об остатках получаются из регистра "Хозрасчетный" в привилегированном режиме.
	Возврат ПравоДоступа("Использование", Метаданные.Отчеты.ОстаткиДенежныхСредств);
	
КонецФункции

#КонецОбласти

#Область Покупатели

Процедура ДобавитьПокупатели(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаПокупатели(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПокупатели(),
		"БлокиИнформационнойПанели.Покупатели",
		"БлокиИнформационнойПанели.ОбновитьПокупатели",
		СвойстваПокупатели());
	
КонецПроцедуры

Функция СвойстваПокупатели()
	
	Свойства = "Покупатели_Заголовок, Покупатели_НеоплаченныеСчета, "
					+ "Покупатели_Задолженность, Покупатели_ЗадолженностьОтклонение, "
					+ "Покупатели_ПросроченнаяЗадолженность, Покупатели_ПросроченнаяЗадолженностьОтклонение,"
					+ "Покупатели_ДоступностьРазделов";
	
	Возврат Свойства;
	
КонецФункции

// Обновляет данные блока
//
// Параметры:
//   Параметры - Структура
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * ПоказыватьСравнениеСПрошлымГодом - Булево - необходимость сравнения с показателями прошлого года
//     * БыстроеОбновление - Булево - учитывать актуальность данных при обновлении
//
Процедура ОбновитьПокупатели(Параметры) Экспорт
	
	РазделыМонитора = Новый Массив;
	РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.ЗадолженностьПокупателей);
	РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.НеоплаченныеСчетаПокупателям);
	
	Если ПравоДоступа("Чтение", Метаданные.Константы.СрокОплатыПокупателей) Тогда
		ЗаданСрокОплатыПокупателей = (Константы.СрокОплатыПокупателей.Получить() > 0);
		Если ЗаданСрокОплатыПокупателей Тогда
			РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.ПросроченнаяЗадолженностьПокупателей);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("Организация", Параметры.Организация);
	ПараметрыЗаполнения.Вставить("РазделыМонитора", РазделыМонитора);
	ПараметрыЗаполнения.Вставить("ПолучатьПрошлыйПериод", Параметры.ПоказыватьСравнениеСПрошлымГодом);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	
	УстановитьПривилегированныйРежим(Истина);
	Если Параметры.БыстроеОбновление Тогда
		МониторРуководителя.ОбновитьДанныеМонитораВФоне(ПараметрыЗаполнения, АдресХранилища);
	Иначе
		МониторРуководителя.ПерезаписатьДанныеМонитораВФоне(ПараметрыЗаполнения, АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * ВариантОкругления - Число - 1 - округлять до целых рублей, 1000 - до тысяч 
//     * ПоказыватьСравнениеСПрошлымГодом - Булево - необходимость сравнения с показателями прошлого года
//     * Инициализация - Истина - заполнить только статическими данными
//
Процедура Покупатели(Параметры) Экспорт
	
	Если Параметры.Инициализация Тогда
		Результат = Новый Структура;
		Результат.Вставить("Покупатели_Заголовок",
			ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПокупатели()));
		Результат.Вставить("Покупатели_ДоступностьРазделов", ПокупателиДоступностьРазделов());
		ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура(СвойстваПокупатели());
	Результат.Вставить("Покупатели_Заголовок",
		ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПокупатели()));
	Результат.Вставить("Покупатели_ДоступностьРазделов", ПокупателиДоступностьРазделов());
	
	Покупатели = МониторРуководителя.ДанныеПокупатели(Параметры);
	
	Шрифт      = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	
	// Задолженность
	Если Покупатели.Задолженность = 0 И Покупатели.ЗадолженностьОтклонение <> 0 И Параметры.ПоказыватьСравнениеСПрошлымГодом Тогда
		ФорматнаяСтрокаЗадолженность = "ЧДЦ=; ЧН=0";
	Иначе
		ФорматнаяСтрокаЗадолженность = "ЧДЦ=";
	КонецЕсли;
	
	Задолженность = Новый ФорматированнаяСтрока(
		Формат(Покупатели.Задолженность, ФорматнаяСтрокаЗадолженность),
		Шрифт,
		ЦветТекста);
	Результат.Вставить("Покупатели_Задолженность", Задолженность);
	
	// Просроченная задолженность
	Если Покупатели.ПросроченнаяЗадолженность = 0 И Покупатели.ПросроченнаяЗадолженностьОтклонение <> 0 И Параметры.ПоказыватьСравнениеСПрошлымГодом Тогда
		ФорматнаяСтрокаПросроченнаяЗадолженность = "ЧДЦ=; ЧН=0";
	Иначе
		ФорматнаяСтрокаПросроченнаяЗадолженность = "ЧДЦ=";
	КонецЕсли;
	
	ПросроченнаяЗадолженность = Новый ФорматированнаяСтрока(
		Формат(Покупатели.ПросроченнаяЗадолженность, ФорматнаяСтрокаПросроченнаяЗадолженность),
		Шрифт,
		ЦветТекста);
	Результат.Вставить("Покупатели_ПросроченнаяЗадолженность", ПросроченнаяЗадолженность);
	
	// Отклонения
	Если Параметры.ПоказыватьСравнениеСПрошлымГодом Тогда
		
		ЗадолженностьОтклонение = ПредставлениеОтклонения(Покупатели.ЗадолженностьОтклонение);
		Результат.Вставить("Покупатели_ЗадолженностьОтклонение", ЗадолженностьОтклонение);
		
		ПросроченнаяЗадолженностьОтклонение = ПредставлениеОтклонения(Покупатели.ПросроченнаяЗадолженностьОтклонение);
		Результат.Вставить("Покупатели_ПросроченнаяЗадолженностьОтклонение",ПросроченнаяЗадолженностьОтклонение);
		
	КонецЕсли;
	
	// Неоплаченные счета
	
	НеоплаченныеСчета = Новый ФорматированнаяСтрока(
		Формат(Покупатели.НеоплаченныеСчета, "ЧДЦ="),
		Шрифт,
		ЦветТекста);
	Результат.Вставить("Покупатели_НеоплаченныеСчета", НеоплаченныеСчета);
	
	ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	
КонецПроцедуры

Функция ПокупателиДоступностьРазделов()
	
	АнализНеоплаченныхСчетовПокупателям =
		ПравоДоступа("Использование", Метаданные.Отчеты.АнализНеоплаченныхСчетовПокупателям)
		И Перечисления.РазделыМонитораРуководителя.ДанныеРазделаДоступны(Перечисления.РазделыМонитораРуководителя.НеоплаченныеСчетаПокупателям);
		
	ДоступностьРазделов = Новый Структура();
	ДоступностьРазделов.Вставить("ЗадолженностьПокупателей",              ПравоДоступа("Использование", Метаданные.Отчеты.ЗадолженностьПокупателей));
	ДоступностьРазделов.Вставить("АнализНеоплаченныхСчетовПокупателям",   АнализНеоплаченныхСчетовПокупателям);
	ДоступностьРазделов.Вставить("СозданиеСчета",                         ПравоДоступа("Изменение", Метаданные.Документы.СчетНаОплатуПокупателю));
	ДоступностьРазделов.Вставить("СозданиеРеализации",                    ПравоДоступа("Изменение", Метаданные.Документы.РеализацияТоваровУслуг));
	
	Возврат ДоступностьРазделов;
	
КонецФункции

Функция ПокупателиДоступны()
	
	ДоступностьРазделов = ПокупателиДоступностьРазделов();
	
	Возврат ДоступностьРазделов.ЗадолженностьПокупателей
		ИЛИ ДоступностьРазделов.АнализНеоплаченныхСчетовПокупателям;
	
КонецФункции

#КонецОбласти

#Область Поставщики

Процедура ДобавитьПоставщики(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаПоставщики(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПоставщики(),
		"БлокиИнформационнойПанели.Поставщики",
		"БлокиИнформационнойПанели.ОбновитьПоставщики",
		СвойстваПоставщики());
	
КонецПроцедуры

Функция СвойстваПоставщики()
	
	Свойства = "Поставщики_Заголовок, Поставщики_НеоплаченныеСчета, "
					+ "Поставщики_Задолженность, Поставщики_ЗадолженностьОтклонение, "
					+ "Поставщики_ПросроченнаяЗадолженность, Поставщики_ПросроченнаяЗадолженностьОтклонение,"
					+ "Поставщики_ДоступностьРазделов";
	
	Возврат Свойства;
	
КонецФункции

// Обновляет данные блока
//
// Параметры:
//   Параметры - Структура
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * ПоказыватьСравнениеСПрошлымГодом - Булево - необходимость сравнения с показателями прошлого года
//     * БыстроеОбновление - Булево - учитывать актуальность данных при обновлении
//
Процедура ОбновитьПоставщики(Параметры) Экспорт
	
	РазделыМонитора = Новый Массив;
	РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.ЗадолженностьПоставщикам);
	РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.НеоплаченныеСчетаПоставщиков);
	
	ЗаданСрокОплатыПоставщикам = (Константы.СрокОплатыПоставщикам.Получить() > 0);
	Если ЗаданСрокОплатыПоставщикам Тогда
		РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.ПросроченнаяЗадолженностьПоставщикам);
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("Организация", Параметры.Организация);
	ПараметрыЗаполнения.Вставить("РазделыМонитора", РазделыМонитора);
	ПараметрыЗаполнения.Вставить("ПолучатьПрошлыйПериод", Параметры.ПоказыватьСравнениеСПрошлымГодом);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	
	УстановитьПривилегированныйРежим(Истина);
	Если Параметры.БыстроеОбновление Тогда
		МониторРуководителя.ОбновитьДанныеМонитораВФоне(ПараметрыЗаполнения, АдресХранилища);
	Иначе
		МониторРуководителя.ПерезаписатьДанныеМонитораВФоне(ПараметрыЗаполнения, АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * ВариантОкругления - Число - 1 - округлять до целых рублей, 1000 - до тысяч 
//     * ПоказыватьСравнениеСПрошлымГодом - Булево - необходимость сравнения с показателями прошлого года
//     * Инициализация - Истина - заполнить только статическими данными
//
Процедура Поставщики(Параметры) Экспорт
	
	Если Параметры.Инициализация Тогда
		Результат = Новый Структура;
		Результат.Вставить("Поставщики_Заголовок",
			ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПоставщики()));
		Результат.Вставить("Поставщики_ДоступностьРазделов", ПоставщикиДоступностьРазделов());
		ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура(СвойстваПоставщики());
	Результат.Вставить("Поставщики_Заголовок",
		ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПоставщики()));
	Результат.Вставить("Поставщики_ДоступностьРазделов", ПоставщикиДоступностьРазделов());
	
	Поставщики = МониторРуководителя.ДанныеПоставщики(Параметры);
	
	Шрифт      = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	
	// Задолженность
	Если Поставщики.Задолженность = 0 И Поставщики.ЗадолженностьОтклонение <> 0 И Параметры.ПоказыватьСравнениеСПрошлымГодом Тогда
		ФорматнаяСтрокаЗадолженность = "ЧДЦ=; ЧН=0";
	Иначе
		ФорматнаяСтрокаЗадолженность = "ЧДЦ=";
	КонецЕсли;
	
	Задолженность = Новый ФорматированнаяСтрока(
		Формат(Поставщики.Задолженность, ФорматнаяСтрокаЗадолженность),
		Шрифт,
		ЦветТекста);
	Результат.Вставить("Поставщики_Задолженность", Задолженность);
	
	// Просроченная задолженность
	Если Поставщики.ПросроченнаяЗадолженность = 0 И Поставщики.ПросроченнаяЗадолженностьОтклонение <> 0 И Параметры.ПоказыватьСравнениеСПрошлымГодом Тогда
		ФорматнаяСтрокаПросроченнаяЗадолженность = "ЧДЦ=; ЧН=0";
	Иначе
		ФорматнаяСтрокаПросроченнаяЗадолженность = "ЧДЦ=";
	КонецЕсли;
	
	ПросроченнаяЗадолженность = Новый ФорматированнаяСтрока(
		Формат(Поставщики.ПросроченнаяЗадолженность, ФорматнаяСтрокаПросроченнаяЗадолженность),
		Шрифт,
		ЦветТекста);
	Результат.Вставить("Поставщики_ПросроченнаяЗадолженность", ПросроченнаяЗадолженность);
	
	// Отклонения
	Если Параметры.ПоказыватьСравнениеСПрошлымГодом Тогда
		
		ЗадолженностьОтклонение = ПредставлениеОтклонения(Поставщики.ЗадолженностьОтклонение);
		Результат.Вставить("Поставщики_ЗадолженностьОтклонение", ЗадолженностьОтклонение);
		
		ПросроченнаяЗадолженностьОтклонение = ПредставлениеОтклонения(Поставщики.ПросроченнаяЗадолженностьОтклонение);
		Результат.Вставить("Поставщики_ПросроченнаяЗадолженностьОтклонение",ПросроченнаяЗадолженностьОтклонение);
		
	КонецЕсли;
	
	// Неоплаченные счета
	
	НеоплаченныеСчета = Новый ФорматированнаяСтрока(
		Формат(Поставщики.НеоплаченныеСчета, "ЧДЦ="),
		Шрифт,
		ЦветТекста);
	Результат.Вставить("Поставщики_НеоплаченныеСчета", НеоплаченныеСчета);
	
	ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	
КонецПроцедуры

Функция ПоставщикиДоступностьРазделов()
	
	//ЗадолженностьПоставщикамПоСрокамДолга = 
	//	ПравоДоступа("Использование", Метаданные.Отчеты.ЗадолженностьПоставщикамПоСрокамДолга)
	//	И Константы.СрокОплатыПоставщикам.Получить() > 0;
	
	ДоступностьРазделов = Новый Структура();
	ДоступностьРазделов.Вставить("ЗадолженностьПоставщикам", ПравоДоступа("Использование", Метаданные.Отчеты.ЗадолженностьПоставщикам));
	//ДоступностьРазделов.Вставить("ЗадолженностьПоставщикамПоСрокамДолга", ЗадолженностьПоставщикамПоСрокамДолга);
	//ДоступностьРазделов.Вставить("АнализНеоплаченныхСчетовПоставщиков",   ПравоДоступа("Использование", Метаданные.Отчеты.АнализНеоплаченныхСчетовПоставщиков));
	
	Возврат ДоступностьРазделов;
	
КонецФункции

Функция ПоставщикиДоступны()
	
	ДоступностьРазделов = ПоставщикиДоступностьРазделов();
	
	Возврат ДоступностьРазделов.ЗадолженностьПоставщикам;
		//ИЛИ ДоступностьРазделов.ЗадолженностьПоставщикамПоСрокамДолга
		//ИЛИ ДоступностьРазделов.АнализНеоплаченныхСчетовПоставщиков;
	
КонецФункции

#КонецОбласти

#Область Продажи

Процедура ДобавитьПродажи(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаПродажи(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПродажи(),
		"БлокиИнформационнойПанели.Продажи",
		"БлокиИнформационнойПанели.ОбновитьПродажи",
		СвойстваПродажи());
	
КонецПроцедуры

Функция СвойстваПродажи()
	
	ВГраница = БлокиИнформационнойПанелиКлиентСервер.КоличествоПериодовПродаж() - 1;
	
	Свойства = "Продажи_Заголовок";
	
	Для Индекс = 0 По ВГраница Цикл
		Свойства = Свойства + ", "
			+ БлокиИнформационнойПанелиКлиентСервер.СвойствоПериодПродаж(Индекс) + ", "
			+ БлокиИнформационнойПанелиКлиентСервер.СвойствоСуммаПродаж(Индекс) + ", "
			+ БлокиИнформационнойПанелиКлиентСервер.СвойствоОтклонениеПродаж(Индекс);
	КонецЦикла;

	Возврат Свойства;
	
КонецФункции

// Обновляет данные блока
//
// Параметры:
//   Параметры - Структура
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * ПоказыватьСравнениеСПрошлымГодом - Булево - необходимость сравнения с показателями прошлого года
//
Процедура ОбновитьПродажи(Параметры) Экспорт
	
	РазделыМонитора = Новый Массив;
	РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.ПродажиПоКонтрагентам);
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("Организация", Параметры.Организация);
	ПараметрыЗаполнения.Вставить("РазделыМонитора", РазделыМонитора);
	ПараметрыЗаполнения.Вставить("ПолучатьПрошлыйПериод", Параметры.ПоказыватьСравнениеСПрошлымГодом);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	
	УстановитьПривилегированныйРежим(Истина);
	Если Параметры.БыстроеОбновление Тогда
		МониторРуководителя.ОбновитьДанныеМонитораВФоне(ПараметрыЗаполнения, АдресХранилища);
	Иначе
		МониторРуководителя.ПерезаписатьДанныеМонитораВФоне(ПараметрыЗаполнения, АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * ВариантОкругления - Число - 1 - округлять до целых рублей, 1000 - до тысяч 
//     * ПоказыватьСравнениеСПрошлымГодом - Булево - необходимость сравнения с показателями прошлого года
//     * Инициализация - Истина - заполнить только статическими данными
//
Процедура Продажи(Параметры) Экспорт
	
	Если Параметры.Инициализация Тогда
		Результат = Новый Структура;
		Результат.Вставить("Продажи_Заголовок",
			ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПродажи()));
		ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура(СвойстваПродажи());
	Результат.Вставить("Продажи_Заголовок",
		ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПродажи()));
	
	Продажи = МониторРуководителя.ДанныеПродажи(Параметры);
	
	КонецПериода = КонецДня(ТекущаяДатаСеанса());
	
	НачалоМесяца = НачалоМесяца(КонецПериода);
	НачалоГода   = НачалоГода(КонецПериода);
	
	НачалоПрошлогоМесяца  = НачалоМесяца(ДобавитьМесяц(КонецПериода, -1));
	НачалоПрошлогоПериода = НачалоГода(НачалоПрошлогоМесяца);
	
	Индекс =-1;
	
	// Текущий месяц
	Индекс = Индекс + 1;
	Если КонецПериода <> КонецМесяца(КонецПериода) Тогда
		ДобавитьСтрокуПродаж(Индекс, Результат,
			СтрШаблон(НСтр("ru = 'с %1'"), Формат(НачалоМесяца, "Л=ru_RU; ДФ='д ММММ'")),
			Продажи.ТекущийМесяц,
			Продажи.ТекущийМесяцОтклонение,
			Параметры.ПоказыватьСравнениеСПрошлымГодом,
			БлокиИнформационнойПанелиКлиентСервер.ИдентификаторПродажиТекущегоМесяца());
	Иначе
		ДобавитьСтрокуПродаж(Индекс, Результат,
			Формат(НачалоМесяца, "Л=ru_RU; ДФ='ММММ'"),
			Продажи.ТекущийМесяц,
			Продажи.ТекущийМесяцОтклонение,
			Параметры.ПоказыватьСравнениеСПрошлымГодом,
			БлокиИнформационнойПанелиКлиентСервер.ИдентификаторПродажиТекущегоМесяца());
	КонецЕсли;
	
	// С начала года. Не показываем, если дублирует продажи за текущий месяц.
	Если НачалоГода <> НачалоМесяца Тогда 
		Индекс = Индекс + 1;
		Если КонецПериода <> КонецМесяца(КонецПериода) Тогда
			ДобавитьСтрокуПродаж(Индекс, Результат,
				СтрШаблон(НСтр("ru = 'с %1'"), Формат(НачалоГода, "Л=ru_RU; ДФ='д ММММ'")),
				Продажи.ТекущийМесяцСНачалаГода,
				Продажи.ТекущийМесяцСНачалаГодаОтклонение,
				Параметры.ПоказыватьСравнениеСПрошлымГодом,
				БлокиИнформационнойПанелиКлиентСервер.ИдентификаторПродажиТекущегоМесяцаСНачалаГода());
		Иначе
			ДобавитьСтрокуПродаж(Индекс, Результат,
				СтрШаблон("%1 - %2", Формат(НачалоГода, "Л=ru_RU; ДФ='MMMM'"), Формат(НачалоМесяца, "Л=ru_RU; ДФ='MMMM'")),
				Продажи.ТекущийМесяцСНачалаГода,
				Продажи.ТекущийМесяцСНачалаГодаОтклонение,
				Параметры.ПоказыватьСравнениеСПрошлымГодом,
				БлокиИнформационнойПанелиКлиентСервер.ИдентификаторПродажиТекущегоМесяцаСНачалаГода());
		КонецЕсли;
	КонецЕсли;
	
	// Прошлый месяц
	Индекс = Индекс + 1;
	ДобавитьСтрокуПродаж(Индекс, Результат,
		Формат(НачалоПрошлогоМесяца, "Л=ru_RU; ДФ='MMMM'"),
		Продажи.ПрошлыйМесяц,
		Продажи.ПрошлыйМесяцОтклонение,
		Параметры.ПоказыватьСравнениеСПрошлымГодом,
		БлокиИнформационнойПанелиКлиентСервер.ИдентификаторПродажиПрошлогоМесяца());
	
	// С начала года по конец прошлого месяца. Не показываем, если дублирует продажи за прошлый месяц.
	Если НачалоПрошлогоПериода <> НачалоПрошлогоМесяца Тогда
		Индекс = Индекс + 1;
		ДобавитьСтрокуПродаж(Индекс, Результат,
			СтрШаблон("%1 - %2", Формат(НачалоПрошлогоПериода, "Л=ru_RU; ДФ='MMMM'"), Формат(НачалоПрошлогоМесяца, "Л=ru_RU; ДФ='MMMM'")),
			Продажи.ПрошлыйМесяцСНачалаГода,
			Продажи.ПрошлыйМесяцСНачалаГодаОтклонение,
			Параметры.ПоказыватьСравнениеСПрошлымГодом,
			БлокиИнформационнойПанелиКлиентСервер.ИдентификаторПродажиПрошлогоМесяцаСНачалаГода());
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	
КонецПроцедуры

Процедура ДобавитьСтрокуПродаж(Индекс, Результат, Период, Сумма, Отклонение, ДобавитьОтклонение, Идентификатор)
	
	Если Сумма = 0 И Отклонение <> 0 И ДобавитьОтклонение Тогда
		ФорматнаяСтрока = "ЧДЦ=; ЧН=0";
	Иначе
		ФорматнаяСтрока = "ЧДЦ=";
	КонецЕсли;
	
	Шрифт = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылки;
	
	ПредставлениеПериода = Новый ФорматированнаяСтрока(Период, , ЦветГиперссылки, , Идентификатор);
	Результат.Вставить(БлокиИнформационнойПанелиКлиентСервер.СвойствоПериодПродаж(Индекс), ПредставлениеПериода);
	
	ПредставлениеСуммы = Новый ФорматированнаяСтрока(Формат(Сумма, ФорматнаяСтрока), Шрифт, ЦветТекста);
	Результат.Вставить(БлокиИнформационнойПанелиКлиентСервер.СвойствоСуммаПродаж(Индекс), ПредставлениеСуммы);
	
	Если ДобавитьОтклонение Тогда
		
		ПредставлениеОтклонения = ПредставлениеОтклонения(Отклонение);
		Результат.Вставить(БлокиИнформационнойПанелиКлиентСервер.СвойствоОтклонениеПродаж(Индекс), ПредставлениеОтклонения);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПродажиДоступны()
	
	Возврат ПравоДоступа("Использование", Метаданные.Отчеты.Продажи);
	
КонецФункции

#КонецОбласти

#Область КурсыВалют

//Процедура ДобавитьКурсыВалют(ТаблицаБлоков)
//	
//	Добавить(ТаблицаБлоков,
//		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаКурсыВалют(),
//		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаКурсыВалют(),
//		"БлокиИнформационнойПанели.КурсыВалют",
//		"БлокиИнформационнойПанели.ОбновитьКурсыВалют",
//		СвойстваКурсыВалют());
//	
//КонецПроцедуры

//Функция СвойстваКурсыВалют()
//	
//	ВГраница = БлокиИнформационнойПанелиКлиентСервер.КоличествоВалютКурсыВалют() - 1;
//	
//	Свойства = "КурсыВалют_Заголовок";
//	
//	Для Индекс = 0 По ВГраница Цикл
//		Свойства = Свойства + ", "
//			+ БлокиИнформационнойПанелиКлиентСервер.СвойствоВалютаКурсыВалют(Индекс) + ", "
//			+ БлокиИнформационнойПанелиКлиентСервер.СвойствоКурсКурсыВалют(Индекс) + ", "
//			+ БлокиИнформационнойПанелиКлиентСервер.СвойствоОтклонениеКурсыВалют(Индекс);
//	КонецЦикла;

//	Возврат Свойства;
//	
//КонецФункции

//// Обновляет данные блока
////
//Процедура ОбновитьКурсыВалют(Параметры) Экспорт
//	
//	
//КонецПроцедуры

//// Помещает во временное хранилище данные блока
////
//// Параметры:
////   Параметры - Структура
////     * АдресХранилища - Строка - адрес хранилища результата
////     * Организация - СправочникСсылка.Организации - отбор по организации
////     * ВариантОкругления - Число - 1 - округлять до целых рублей, 1000 - до тысяч 
////     * Инициализация - Истина - заполнить только статическими данными
////
//Процедура КурсыВалют(Параметры) Экспорт
//	
//	Если Параметры.Инициализация Тогда
//		Результат = Новый Структура;
//		Результат.Вставить("КурсыВалют_Заголовок",
//			ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаКурсыВалют()));
//		ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
//		Возврат;
//	КонецЕсли;
//	
//	Результат = Новый Структура(СвойстваКурсыВалют());
//	Результат.Вставить("КурсыВалют_Заголовок",
//		ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаКурсыВалют()));
//	
//	КурсыВалют = МониторРуководителя.ДанныеКурсыВалют(Параметры);
//	
//	Индекс =-1;
//	
//	Для Каждого Данные Из КурсыВалют Цикл 
//		Индекс = Индекс + 1;
//		ДобавитьСтрокуКурсыВалют(Индекс, Результат,
//			Данные.Период,
//			Данные.Валюта,
//			Данные.ВалютаНаименование,
//			Данные.Курс,
//			Данные.Отклонение);
//	КонецЦикла;	
//	
//	ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
//	
//КонецПроцедуры

//Процедура ДобавитьСтрокуКурсыВалют(Индекс, Результат, Период, Валюта, ВалютаНаименование, Курс, Отклонение)
//	
//	Если Курс = 0 И Отклонение <> 0 Тогда
//		ФорматнаяСтрока = "ЧДЦ=; ЧН=0";
//	Иначе
//		ФорматнаяСтрока = "ЧДЦ=4";
//	КонецЕсли;
//	
//	Шрифт = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
//	ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
//	//ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылки;
//	
//	ПредставлениеПериода = " (" + Формат(Период, "ДФ=dd.MM.yy") + ")";
//	ПредставлениеВалюта = Новый ФорматированнаяСтрока(ВалютаНаименование + ПредставлениеПериода, Шрифт, ЦветТекста,, ПолучитьНавигационнуюСсылку(Валюта));
//	Результат.Вставить(БлокиИнформационнойПанелиКлиентСервер.СвойствоВалютаКурсыВалют(Индекс), ПредставлениеВалюта);
//	
//	ПредставлениеКурс = Новый ФорматированнаяСтрока(Формат(Курс, ФорматнаяСтрока), Шрифт, ЦветТекста);
//	Результат.Вставить(БлокиИнформационнойПанелиКлиентСервер.СвойствоКурсКурсыВалют(Индекс), ПредставлениеКурс);
//	
//	ПредставлениеОтклонения = ПредставлениеОтклонения(Отклонение, 2);
//	Результат.Вставить(БлокиИнформационнойПанелиКлиентСервер.СвойствоОтклонениеКурсыВалют(Индекс), ПредставлениеОтклонения);
//	
//КонецПроцедуры

//Функция КурсыВалютДоступны()
//	
//	Возврат ПравоДоступа("Просмотр", Метаданные.Справочники.Валюты);
//	
//КонецФункции


Процедура ДобавитьКурсыВалют(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаКурсыВалют(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаКурсыВалют(),
		"БлокиИнформационнойПанели.КурсыВалют",
		"БлокиИнформационнойПанели.ОбновитьКурсыВалют",
		СвойстваКурсыВалют());
	
КонецПроцедуры

Функция СвойстваКурсыВалют()
	
	ВГраница = БлокиИнформационнойПанелиКлиентСервер.КоличествоКурсовВалют() - 1;
	
	Свойства = "КурсыВалют_Заголовок";
	
	Для Индекс = 0 По ВГраница Цикл
		Свойства = Свойства + ", "
			+ БлокиИнформационнойПанелиКлиентСервер.СвойствоВалюта(Индекс) + ", "
			+ БлокиИнформационнойПанелиКлиентСервер.СвойствоВалютаСсылка(Индекс) + ", "
			+ БлокиИнформационнойПанелиКлиентСервер.СвойствоКурсВалюты(Индекс) + ", "
			+ БлокиИнформационнойПанелиКлиентСервер.СвойствоОтклонениеКурса(Индекс);
	КонецЦикла;

	Возврат Свойства;
	
КонецФункции

// Обновляет данные блока
//
// Параметры:
//   Параметры - Структура
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * БыстроеОбновление - Булево - учитывать актуальность данных при обновлении
//     * АдресРезультатаКурсыВалют - Строка - адрес временного хранилища, в которое будет помещен результат
//
Процедура ОбновитьКурсыВалют(Параметры) Экспорт
	
	Если РаботаВМоделиСервиса.ДоступноИспользованиеРазделенныхДанных()
		И РаботаВМоделиСервиса.РазделениеВключено() Тогда
		// В режиме сервиса курсы валют - поставляемые данные
		Возврат;
	КонецЕсли;
	
	Если Параметры.БыстроеОбновление 
		Или Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.КурсыВалют) Тогда
		Возврат;
	КонецЕсли;
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	
	ЕстьОшибкиПриЗагрузке = Ложь;
	Попытка
		РаботаСКурсамиВалют.ЗагрузитьАктуальныйКурс(Неопределено, АдресХранилища);
	Исключение
		ЕстьОшибкиПриЗагрузке = Истина;
	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(Новый Структура("ЕстьОшибкиПриЗагрузке", ЕстьОшибкиПриЗагрузке),
		Параметры.АдресРезультатаКурсыВалют);
	
КонецПроцедуры

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * Организация    - СправочникСсылка.Организации - отбор по организации
//     * Инициализация  - Булево, если Истина - заполнить только статическими данными
//
Процедура КурсыВалют(Параметры) Экспорт
	
	Если Параметры.Инициализация Тогда
		Результат = Новый Структура;
		ЗаголовокБлока = БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаКурсыВалют();
		Результат.Вставить("КурсыВалют_Заголовок", ЗаголовокБлока(ЗаголовокБлока));
		ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура(СвойстваКурсыВалют());
	
	МаксимальноеКоличество = БлокиИнформационнойПанелиКлиентСервер.КоличествоКурсовВалют();
	ДанныеКурсовВалют = РаботаСКурсамиВалютБП.ДанныеКурсовВалютДляВиджета(МаксимальноеКоличество);
	
	Валюты = ДанныеКурсовВалют.Валюты;
	
	Для Индекс = 0 По Валюты.Количество() - 1 Цикл
		
		Валюта = Валюты[Индекс];
		ДобавитьСтрокуКурсыВалют(Индекс, Валюта, Результат);
		
	КонецЦикла;
	
	ЗаголовокБлока = БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаКурсыВалют(ДанныеКурсовВалют.ДатаКурсов);
	Результат.Вставить("КурсыВалют_Заголовок", ЗаголовокБлока(ЗаголовокБлока));
	
	ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	
КонецПроцедуры

Процедура ДобавитьСтрокуКурсыВалют(Индекс, Валюта, Результат)
	
	ВалютаСсылка  = Валюта.Ссылка;
	ВалютаСтрокой = Валюта.Наименование;
	Кратность     = Валюта.Кратность;
	Курс          = Валюта.Курс;
	Отклонение    = Валюта.Отклонение;
	
	Шрифт = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылки;
	
	Если Кратность > 1 Тогда
		НаименованиеВалюты = СтрШаблон("%1 %2", Формат(Кратность, "ЧДЦ="), ВалютаСтрокой);
	Иначе
		НаименованиеВалюты = ВалютаСтрокой;
	КонецЕсли;
	
	ПредставлениеВалюты = Новый ФорматированнаяСтрока(НаименованиеВалюты, , ЦветГиперссылки, , "ИсторияКурса");
	Результат.Вставить(БлокиИнформационнойПанелиКлиентСервер.СвойствоВалюта(Индекс), ПредставлениеВалюты);
	Результат.Вставить(БлокиИнформационнойПанелиКлиентСервер.СвойствоВалютаСсылка(Индекс), ВалютаСсылка);
	
	ПредставлениеКурса = Новый ФорматированнаяСтрока(Формат(Курс, "ЧДЦ=4"), Шрифт, ЦветТекста);
	Результат.Вставить(БлокиИнформационнойПанелиКлиентСервер.СвойствоКурсВалюты(Индекс), ПредставлениеКурса);
	
	ПредставлениеОтклонения = ПредставлениеОтклоненияКурса(Отклонение);
	Результат.Вставить(БлокиИнформационнойПанелиКлиентСервер.СвойствоОтклонениеКурса(Индекс), ПредставлениеОтклонения);
	
КонецПроцедуры

Функция КурсыВалютДоступны() Экспорт
	
	Возврат ПравоДоступа("Просмотр", Метаданные.Справочники.Валюты);
	
КонецФункции

#КонецОбласти

#Область ТекущиеДела

Процедура ДобавитьТекущиеДела(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаТекущиеДела(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаТекущиеДела(),
		"БлокиИнформационнойПанели.ТекущиеДела",,
		СвойстваТекущиеДела());
	
КонецПроцедуры

Функция СвойстваТекущиеДела()
	
	Свойства = "ТекущиеДела_Заголовок, ТекущиеДела_Индекс, ТекущиеДела_Текст, ТекущиеДела_АдресХранилища";
	
	Возврат Свойства;
	
КонецФункции

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы информационной панели
//
Процедура ТекущиеДела(Параметры) Экспорт

	Результат = Новый Структура(СвойстваТекущиеДела());
	Результат.Вставить("ТекущиеДела_Заголовок",
		ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаТекущиеДела()));
	
	МаксимальноеКоличествоТекущиеДела = БлокиИнформационнойПанелиКлиентСервер.КоличествоТекущиеДела();
	
	ПараметрыТекущиеДела = Новый Структура;
	ТекущиеДелаВХранилище = ПоместитьВоВременноеХранилище(Неопределено, Параметры.УникальныйИдентификатор);
	ТекущиеДелаСлужебный.СформироватьСписокТекущихДелПользователя(ПараметрыТекущиеДела, ТекущиеДелаВХранилище); 
	ТаблицаТекущиеДела = ПолучитьИзВременногоХранилища(ТекущиеДелаВХранилище);
	
	// Удаление разделов без дел.
	УдаляемыеДела = Новый Массив;
	Для Каждого СтрокаТаблицыТекущиеДела Из ТаблицаТекущиеДела Цикл 
		Если НЕ СтрокаТаблицыТекущиеДела.ЕстьДела
			Или НЕ СтрокаТаблицыТекущиеДела.ПредставлениеРаздела = "Администрирование" Тогда 
			УдаляемыеДела.Добавить(СтрокаТаблицыТекущиеДела);
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемоеДело Из УдаляемыеДела Цикл
		ТаблицаТекущиеДела.Удалить(УдаляемоеДело);
	КонецЦикла;
	
	Шрифт           = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста      = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылки;
	
	ТекстыТекущиеДела = Новый СписокЗначений;
	СсылкиТекущиеДела = Новый СписокЗначений;
	
	КоличествоТекущиеДела = ТаблицаТекущиеДела.Количество();
	Если КоличествоТекущиеДела > 0 Тогда
		КоличествоТекущиеДела = 0;
		Для Каждого СтрокаТаблицыТекущиеДела Из ТаблицаТекущиеДела Цикл 
			Если КоличествоТекущиеДела >= МаксимальноеКоличествоТекущиеДела Тогда 
				Прервать;
			КонецЕсли;	
			
			Представление = ?(СтрокаТаблицыТекущиеДела.Количество = 0, СтрокаТаблицыТекущиеДела.Представление, СтрШаблон("%1 (%2)", СтрокаТаблицыТекущиеДела.Представление, СтрокаТаблицыТекущиеДела.Количество));
			
			ТекстТекущиеДела = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(Представление, Шрифт, ЦветТекста),
				Символы.ПС,
				Символы.ПС,
				Новый ФорматированнаяСтрока(НСтр("ru = 'Подробнее'"),, ЦветГиперссылки,, СтрокаТаблицыТекущиеДела.Форма));
			
			ТекстыТекущиеДела.Добавить(ТекстТекущиеДела);
			СсылкиТекущиеДела.Добавить(СтрокаТаблицыТекущиеДела.Форма);
			
			КоличествоТекущиеДела = КоличествоТекущиеДела + 1;
		КонецЦикла;	
		
		Результат.Вставить("ТекущиеДела_Текст", ТекстыТекущиеДела[0].Значение);
		
	Иначе
		Результат.Вставить("ТекущиеДела_Текст", Новый ФорматированнаяСтрока(БлокиИнформационнойПанелиКлиентСервер.ТекстОтсутствияТекущиеДела(), Шрифт, ЦветТекста));
	КонецЕсли;
	
	// Начинаем показывать с первого
	Результат.Вставить("ТекущиеДела_Индекс", 0);
	
	// Список дел передаем в форму через временное хранилище
	ДанныеТекущиеДела = Новый Структура;
	ДанныеТекущиеДела.Вставить("ТекстыТекущиеДела", ТекстыТекущиеДела);
	ДанныеТекущиеДела.Вставить("СсылкиТекущиеДела", СсылкиТекущиеДела);
	АдресХранилищаТекущиеДела = ПоместитьВоВременноеХранилище(ДанныеТекущиеДела, Параметры.УникальныйИдентификатор);
	Результат.Вставить("ТекущиеДела_АдресХранилища", АдресХранилищаТекущиеДела);
	
	ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область Заметки

Процедура ДобавитьЗаметки(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаЗаметки(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаЗаметки(),
		"БлокиИнформационнойПанели.Заметки",
		"БлокиИнформационнойПанели.ОбновитьЗаметки",
		СвойстваЗаметки());
	
КонецПроцедуры

Функция СвойстваЗаметки()
	
	Свойства = "Заметки_Заголовок, Заметки_Индекс, Заметки_Текст, Заметки_ИндексКартинки, Заметки_АдресХранилища";
	
	Возврат Свойства;
	
КонецФункции

// Обновляет данные блока
//
// Параметры:
//   Параметры - Структура
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * БыстроеОбновление - Булево - учитывать актуальность данных при обновлении
//
Процедура ОбновитьЗаметки(Параметры) Экспорт

КонецПроцедуры

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы информационной панели
//
Процедура Заметки(Параметры) Экспорт

	Результат = Новый Структура(СвойстваЗаметки());
	Результат.Вставить("Заметки_Заголовок",
		ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаЗаметки()));
	
	МаксимальноеКоличествоЗаметки = БлокиИнформационнойПанелиКлиентСервер.КоличествоЗаметки();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СправочникЗаметки.Ссылка КАК Ссылка,
		|	СправочникЗаметки.Наименование КАК Наименование,
		|	СправочникЗаметки.Пометка КАК Пометка,
		|	ВЫБОР
		|		КОГДА СправочникЗаметки.ПометкаУдаления
		|			ТОГДА 0
		|		КОГДА СправочникЗаметки.ЭтоГруппа
		|			ТОГДА -1
		|		КОГДА СправочникЗаметки.Пометка = ЗНАЧЕНИЕ(Перечисление.ЦветаЗаметок.ПустаяСсылка)
		|			ТОГДА 4
		|		ИНАЧЕ ЕСТЬNULL(ЦветаЗаметок.Порядок, 0) + 2
		|	КОНЕЦ КАК ИндексКартинки,
		|	СправочникЗаметки.ПредставлениеПредмета КАК ПредставлениеПредмета
		|ИЗ
		|	Справочник.Заметки КАК СправочникЗаметки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Перечисление.ЦветаЗаметок КАК ЦветаЗаметок
		|		ПО СправочникЗаметки.Пометка.Порядок = ЦветаЗаметок.Порядок
		|ГДЕ
		|	НЕ СправочникЗаметки.ПометкаУдаления
		|	И СправочникЗаметки.Автор = &Пользователь
		|	И СправочникЗаметки.ДляРабочегоСтола
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаИзменения";
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	
	ТаблицаЗаметки = Запрос.Выполнить().Выгрузить();
	
	Шрифт           = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста      = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылки;
	
	ТекстыЗаметки = Новый СписокЗначений;
	СсылкиЗаметки = Новый СписокЗначений;
	КартинкиЗаметки = Новый СписокЗначений;
	
	КоличествоЗаметки = ТаблицаЗаметки.Количество();
	Если КоличествоЗаметки > 0 Тогда
		КоличествоЗаметки = 0;
		Для Каждого СтрокаТаблицыЗаметки Из ТаблицаЗаметки Цикл 
			Если КоличествоЗаметки >= МаксимальноеКоличествоЗаметки Тогда 
				Прервать;
			КонецЕсли;	
			
			ПредставлениеПредмета = ?(СтрокаТаблицыЗаметки.ПредставлениеПредмета = "не задан", 
				СтрокаТаблицыЗаметки.Наименование,
				СтрокаТаблицыЗаметки.ПредставлениеПредмета);
			
			ТекстЗаметки = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(ПредставлениеПредмета, Шрифт, ЦветТекста),
				Символы.ПС,
				Символы.ПС,
				Новый ФорматированнаяСтрока(НСтр("ru = 'Подробнее'"),, ЦветГиперссылки,, ПолучитьНавигационнуюСсылку(СтрокаТаблицыЗаметки.Ссылка)));
			
			ТекстыЗаметки.Добавить(ТекстЗаметки);
			СсылкиЗаметки.Добавить(СтрокаТаблицыЗаметки.Ссылка);
			КартинкиЗаметки.Добавить(СтрокаТаблицыЗаметки.ИндексКартинки);
			
			КоличествоЗаметки = КоличествоЗаметки + 1;
		КонецЦикла;	
		
		Результат.Вставить("Заметки_Текст", ТекстыЗаметки[0].Значение);
		Результат.Вставить("Заметки_ИндексКартинки", КартинкиЗаметки[0].Значение);
		
	Иначе
		Результат.Вставить("Заметки_Текст", Новый ФорматированнаяСтрока(БлокиИнформационнойПанелиКлиентСервер.ТекстОтсутствияЗаметки(), Шрифт, ЦветТекста));
		Результат.Вставить("Заметки_ИндексКартинки", 1);
	КонецЕсли;
	
	// Начинаем показывать с первого
	Результат.Вставить("Заметки_Индекс", 0);
	
	// Список заметок передаем в форму через временное хранилище
	ДанныеЗаметки = Новый Структура;
	ДанныеЗаметки.Вставить("ТекстыЗаметки", ТекстыЗаметки);
	ДанныеЗаметки.Вставить("СсылкиЗаметки", СсылкиЗаметки);
	ДанныеЗаметки.Вставить("КартинкиЗаметки", КартинкиЗаметки);
	АдресХранилищаЗаметки = ПоместитьВоВременноеХранилище(ДанныеЗаметки, Параметры.УникальныйИдентификатор);
	Результат.Вставить("Заметки_АдресХранилища", АдресХранилищаЗаметки);
	
	ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	
КонецПроцедуры

Функция ЗаметкиДоступны()
	Возврат Константы.ИспользоватьЗаметки.Получить();
КонецФункции

#КонецОбласти

#Область МетодическаяПоддержка

Процедура ДобавитьМетодическаяПоддержка(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаМетодическаяПоддержка(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаМетодическаяПоддержка(),
		"БлокиИнформационнойПанели.МетодическаяПоддержка",,
		СвойстваМетодическаяПоддержка());
	
КонецПроцедуры

Функция СвойстваМетодическаяПоддержка()
	
	ВГраница = БлокиИнформационнойПанелиКлиентСервер.КоличествоСсылокМетодическойПоддержки() - 1;
	
	Свойства = "МетодическаяПоддержка_Заголовок";
	
	Для Индекс = 0 По ВГраница Цикл
		Свойства = Свойства + ","
			+ БлокиИнформационнойПанелиКлиентСервер.СвойствоСсылкаМетодическойПоддержки(Индекс);
	КонецЦикла;
	
	Возврат Свойства;

КонецФункции

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//
Процедура МетодическаяПоддержка(Параметры) Экспорт
	
	Результат = Новый Структура(СвойстваМетодическаяПоддержка());
	Результат.Вставить("МетодическаяПоддержка_Заголовок",
		ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаМетодическаяПоддержка()));
	
	МаксимальноеКоличествоСсылок = БлокиИнформационнойПанелиКлиентСервер.КоличествоСсылокМетодическойПоддержки();
	
	ТаблицаИнформационныхСсылок = Обработки.МетодическаяПоддержка.ПолучитьТаблицуИнформационныхСсылокДляВиджета();
	
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылки;
	
	ВГраница = Мин(МаксимальноеКоличествоСсылок, ТаблицаИнформационныхСсылок.Количество()) - 1;
	Для Индекс = 0 По ВГраница Цикл
		
		ИнформационнаяСсылка = ТаблицаИнформационныхСсылок[Индекс];
		
		СсылкаМетодическойПоддержки = Новый ФорматированнаяСтрока(
			ИнформационнаяСсылка.Наименование, , ЦветГиперссылки, , ИнформационнаяСсылка.Адрес);
		
		Результат.Вставить(БлокиИнформационнойПанелиКлиентСервер.СвойствоСсылкаМетодическойПоддержки(Индекс), СсылкаМетодическойПоддержки);
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	
КонецПроцедуры

Функция МетодическаяПоддержкаДоступна()
	
	Возврат ПравоДоступа("Использование", Метаданные.Обработки.МетодическаяПоддержка);
	
КонецФункции

#КонецОбласти

#Область ПоддержкаСервиса

Процедура ДобавитьПоддержкаСервиса(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаПоддержкаСервиса(),
		ТекстЗаголовкаПоддержкаСервиса(),
		"БлокиИнформационнойПанели.ПоддержкаСервиса",,
		СвойстваПоддержкаСервиса());
	
КонецПроцедуры

Функция ТекстЗаголовкаПоддержкаСервиса()
	
	ИмяСервиса = ОбщегоНазначенияБПСервер.ДомашняяСтраницаСервиса();
	
	Возврат БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПоддержкаСервиса(ИмяСервиса);
	
КонецФункции

Функция СвойстваПоддержкаСервиса()
	
	Свойства = "ПоддержкаСервиса_Заголовок, ПоддержкаСервиса_КартинкаСообщения, ПоддержкаСервиса_ТекстСообщения";
	
	Возврат Свойства;
	
КонецФункции

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//
Процедура ПоддержкаСервиса(Параметры) Экспорт
	
	Результат = Новый Структура(СвойстваПоддержкаСервиса());
	Результат.Вставить("ПоддержкаСервиса_Заголовок", ЗаголовокБлока(ТекстЗаголовкаПоддержкаСервиса()));
	
	Шрифт      = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	
	// ТехнологияСервиса.ИнформационныйЦентр
	ТаблицаСообщенийСервиса = Новый ТаблицаЗначений;
	ТаблицаСообщенийСервиса.Колонки.Добавить(
		"СсылкаНаДанные", Новый ОписаниеТипов("СправочникСсылка.ОбщиеДанныеИнформационногоЦентра"));
	УстановитьПривилегированныйРежим(Истина);
	ИнформационныйЦентрСервер.СформироватьСписокНовостейНаРабочийСтол(ТаблицаСообщенийСервиса, 1);
	УстановитьПривилегированныйРежим(Ложь);
	// Конец ТехнологияСервиса.ИнформационныйЦентр
	
	Если ТаблицаСообщенийСервиса.Количество() > 0 Тогда
		
		Сообщение = ТаблицаСообщенийСервиса[0];
		
		СвойстваСообщения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сообщение.СсылкаНаДанные, "Наименование, Критичность");
		
		ИндексКартинки = БлокиИнформационнойПанелиКлиентСервер.ИндексКартинкиСообщенияСервиса(СвойстваСообщения.Критичность > 5);
		Результат.Вставить("ПоддержкаСервиса_КартинкаСообщения", ИндексКартинки);
		
		НаименованиеБезПробелов = СтрокаБезПереносов(СвойстваСообщения.Наименование);
		
		ТекстСообщения = Новый ФорматированнаяСтрока(НаименованиеБезПробелов, Шрифт, ЦветТекста);
		Результат.Вставить("ПоддержкаСервиса_ТекстСообщения", ТекстСообщения);
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НоваяТаблицаБлоков()
	
	ТаблицаБлоков = Новый ТаблицаЗначений;
	
	Колонки = ТаблицаБлоков.Колонки;
	
	Колонки.Добавить("Пометка",                   Новый ОписаниеТипов("Булево"));
	Колонки.Добавить("Имя",                       ОбщегоНазначения.ОписаниеТипаСтрока(150));
	Колонки.Добавить("Синоним",                   ОбщегоНазначения.ОписаниеТипаСтрока(150));
	Колонки.Добавить("ПроцедураПолученияДанных",  ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Колонки.Добавить("ПроцедураОбновленияДанных", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Колонки.Добавить("РеквизитыФормы",            ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Колонки.Добавить("ЦветФона",                  Новый ОписаниеТипов("Цвет"));
	Колонки.Добавить("Порядок",                   ОбщегоНазначения.ОписаниеТипаЧисло(3));
	
	Возврат ТаблицаБлоков;
	
КонецФункции

Процедура Добавить(ТаблицаБлоков, Имя, Синоним, ПроцедураПолученияДанных, ПроцедураОбновленияДанных, РеквизитыФормы, Порядок = 100)
	
	НовыйБлок = ТаблицаБлоков.Добавить();
	НовыйБлок.Имя                       = Имя;
	НовыйБлок.Синоним                   = Синоним;
	НовыйБлок.ПроцедураПолученияДанных  = ПроцедураПолученияДанных;
	НовыйБлок.ПроцедураОбновленияДанных = ПроцедураОбновленияДанных;
	НовыйБлок.РеквизитыФормы            = РеквизитыФормы;
	НовыйБлок.Порядок                   = Порядок;
	
КонецПроцедуры

Функция МножественноеПредставление(ПараметрыПредметаИсчисления)
	
	ПредставленияПредмета = СтрРазделить(ПараметрыПредметаИсчисления, ",");
	
	Возврат ?(ПредставленияПредмета.Количество() >= 3, СокрЛП(ПредставленияПредмета[2]), "");
	
КонецФункции

Функция ПредставлениеОтклонения(Знач Отклонение, Точность = 0)
	
	Отклонение = Окр(Отклонение, Точность);
	
	Стрелка = ?(Отклонение > 0, СтрелкаВверх(), СтрелкаВниз());
	
	МодульОтклонения = Макс(Отклонение, -Отклонение);
	
	ПределОтклонения = ПределОтклонения();
	
	Если Отклонение <> 0 Тогда
		Если Отклонение < ПределОтклонения Тогда
			ПредставлениеОтклонения = Стрелка + Формат(МодульОтклонения, "ЧДЦ=" + Точность) + "%";
		Иначе
			ПредставлениеОтклонения = Стрелка;
		КонецЕсли;
	Иначе
		ПредставлениеОтклонения = "";
	КонецЕсли;
	
	Шрифт = ШрифтыСтиля.ШрифтОтклоненияИнформационнойПанели;
	Если Отклонение > 0 Тогда
		ЦветТекста = ЦветаСтиля.ЦветПоложительногоОтклоненияИнформационнойПанели;
	ИначеЕсли Отклонение < 0 Тогда
		ЦветТекста = ЦветаСтиля.ЦветОтрицательногоОтклоненияИнформационнойПанели;
	Иначе
		ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(ПредставлениеОтклонения, Шрифт, ЦветТекста);
	
КонецФункции

Функция ПределОтклонения()
	
	Возврат 999;
	
КонецФункции

Функция СтрелкаВверх()
	
	Возврат Символ(9650);
	
КонецФункции

Функция СтрелкаВниз()
	
	Возврат Символ(9660);
	
КонецФункции

// Заменяет пробелы в строке на неразрывные пробелы для блокировки переносов в браузере
//
Функция СтрокаБезПереносов(ИсходнаяСтрока)
	
	// Для того чтобы строка правильно переносилась в веб-клиенте,
	// вместо запятой используем символ - U+201A:Single Low-9 Quotation Mark (Keystroke: Alt+0130)
	ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока, ",", "‚");
	Возврат СтрЗаменить(ИсходнаяСтрока, " ", Символы.НПП);
	
КонецФункции

Функция ЗаголовокБлока(ТекстЗаголовка)
	
	Если Константы.ИнтерфейсТакси.Получить() Тогда
		Шрифт = ШрифтыСтиля.ШрифтЗаголовкаИнформационнойПанели;
		ЦветТекста = ЦветаСтиля.ЦветЗаголовкаИнформационнойПанели;
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(ТекстЗаголовка, Шрифт, ЦветТекста);
	
КонецФункции

Функция ПредставлениеОтклоненияКурса(Отклонение)
	
	Если Отклонение <> 0 Тогда
		ПредставлениеОтклонения = СтрШаблон("%1%2",
			?(Отклонение > 0, "+", ""), Формат(Отклонение, "ЧДЦ=4"));
	Иначе
		ПредставлениеОтклонения = "";
	КонецЕсли;
	
	Шрифт = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста = ЦветаСтиля.ЦветПустойГиперссылки;
	
	Возврат Новый ФорматированнаяСтрока(ПредставлениеОтклонения, Шрифт, ЦветТекста);
	
КонецФункции

#КонецОбласти