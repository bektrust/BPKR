////////////////////////////////////////////////////////////////////////////////
// СотрудникиКлиентСервер: методы, обслуживающие работу формы сотрудника
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

Функция ЗависимостиВидовАдресов() Экспорт
	
	ЗависимостиВидов = Новый Соответствие;
	
	МассивЗависимых = Новый Массив;
	
	ЗависимостиВидов.Вставить(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица"),
		МассивЗависимых);
	
	МассивЗависимых.Добавить(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица"));
	
	ЗависимостиВидов.Вставить(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица"),
		МассивЗависимых);
		
	Возврат ЗависимостиВидов;
	
КонецФункции

Процедура УстановитьВидимостьПолейФИО(Форма) Экспорт
	ФИОВведено = НЕ ПустаяСтрока(Форма.ФИОФизическихЛиц.Фамилия)
		ИЛИ НЕ ПустаяСтрока(Форма.ФИОФизическихЛиц.Имя)
		ИЛИ НЕ ПустаяСтрока(Форма.ФИОФизическихЛиц.Отчество);
		
	Если ФИОВведено Тогда
		Форма.Элементы.ГруппаСтраницыПолноеИмя.ТекущаяСтраница = Форма.Элементы.ГруппаСтраницаПолноеИмя;
	Иначе
		Форма.Элементы.ГруппаСтраницыПолноеИмя.ТекущаяСтраница = Форма.Элементы.ГруппаСтраницаПолноеИмяСкрытое;
	КонецЕсли;
КонецПроцедуры

Процедура ОбновитьНаборЗаписейИсторииДокументыФизическихЛиц(Форма, ВедущийОбъект) Экспорт
	Перем ЗаписьНабора;
	
	Если Не Форма["ДокументыФизическихЛицНаборЗаписейПрочитан"] Тогда
		
		Форма.ПрочитатьНаборЗаписейПериодическихСведений("ДокументыФизическихЛиц", ВедущийОбъект);
		
	КонецЕсли;
	
	СтруктураЗаписиСтрокой = "";
	ПрежняяЗапись = Новый Структура;
	НужнаЗапятая = Ложь;
	Для Каждого КлючЗначение Из Форма["ДокументыФизическихЛицПрежняя"] Цикл
		Если НужнаЗапятая Тогда
			СтруктураЗаписиСтрокой = СтруктураЗаписиСтрокой + ",";
		КонецЕсли;
		СтруктураЗаписиСтрокой = СтруктураЗаписиСтрокой + КлючЗначение.Ключ;
		НужнаЗапятая = Истина;
		ПрежняяЗапись.Вставить(КлючЗначение.Ключ);
	КонецЦикла;
		
	Если ЗначениеЗаполнено(Форма["ДокументыФизическихЛиц"].Период) Тогда
		ПериодИзменен = Форма["ДокументыФизическихЛиц"].Период > Форма["ДокументыФизическихЛицПрежняя"].Период;
		РесурсыИзменены = Ложь;
		Для Каждого КлючЗначение Из Форма["ДокументыФизическихЛицПрежняя"] Цикл
			Если КлючЗначение.Ключ = "Период" Тогда
				Продолжить;
			КонецЕсли;
			Если КлючЗначение.Значение <> Форма["ДокументыФизическихЛиц"][КлючЗначение.Ключ] Тогда
				РесурсыИзменены = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей = Форма["ДокументыФизическихЛицНаборЗаписей"];
		Если (ПериодИзменен И РесурсыИзменены) ИЛИ НаборЗаписей.Количество() = 0 Тогда
			ЗаписьНаНовуюДату = НаборЗаписей.НайтиСтроки(Новый Структура("Период,ВидДокумента", Форма["ДокументыФизическихЛиц"].Период, Форма["ДокументыФизическихЛиц"].ВидДокумента));
			Если ЗаписьНаНовуюДату.Количество() = 0 Тогда
				ЗаписьНабора = НаборЗаписей.Добавить();
			КонецЕсли;
		Иначе
			ЗаписьНаНовуюДату = НаборЗаписей.НайтиСтроки(Новый Структура("Период,ВидДокумента", Форма["ДокументыФизическихЛиц"].Период, Форма["ДокументыФизическихЛиц"].ВидДокумента));
			Если ЗаписьНаНовуюДату.Количество() > 0 Тогда
				ЗаписьНабора = ЗаписьНаНовуюДату[0];
			Иначе
				ЗаписьНабора = НаборЗаписей.Добавить();
			КонецЕсли; 
		КонецЕсли;
		
		Если ЗаписьНабора <> НеОпределено Тогда
			
			// Если в этом периоде уже есть документы являющиеся удостоверением личности - 
			// сбросим признак
			ЯвляющиесяУдостоверениямиЛичности = НаборЗаписей.НайтиСтроки(Новый Структура("Период,ЯвляетсяДокументомУдостоверяющимЛичность", Форма["ДокументыФизическихЛиц"].Период, Истина));
			Для каждого УдостоверениеЛичности Из ЯвляющиесяУдостоверениямиЛичности Цикл
				Если УдостоверениеЛичности.ВидДокумента <> ЗаписьНабора.ВидДокумента Тогда
					УдостоверениеЛичности.ЯвляетсяДокументомУдостоверяющимЛичность = Ложь;
				КонецЕсли; 
			КонецЦикла;
			
			ЗаполнитьЗначенияСвойств(ЗаписьНабора, Форма["ДокументыФизическихЛиц"]);
			НаборЗаписей.Сортировать("Период,ЯвляетсяДокументомУдостоверяющимЛичность");
			
			ЗаполнитьЗначенияСвойств(ПрежняяЗапись, Форма["ДокументыФизическихЛиц"]);
			Форма["ДокументыФизическихЛицПрежняя"] = Новый ФиксированнаяСтруктура(ПрежняяЗапись);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление предупреждающих надписей

Процедура ОбновитьПолеУдостоверениеЛичностиПериод(Форма) Экспорт
	
	ЭтоЗначенияПоУмолчанию = Ложь;
	// Не обязательно заполнение поля Период если данные по умолчанию и при этом 
	// записи о сведениях об инвалидности еще нет
	Если ЗарплатаКадрыКлиентСервер.УдостоверениеЛичностиПоУмолчанию(Форма.ДокументыФизическихЛиц)
		И НЕ ЗначениеЗаполнено(Форма.ДокументыФизическихЛицПрежняя.Период) Тогда
		
		ЭтоЗначенияПоУмолчанию = Истина;
		Форма.ДокументыФизическихЛиц.Период = '00010101';
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ДокументыФизическихЛицВидДокумента",
			"АвтоОтметкаНезаполненного",
			Ложь);

		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ДокументыФизическихЛицВидДокумента",
			"ОтметкаНезаполненного",
			Ложь);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ДокументыФизическихЛицВидДокумента",
			"АвтоОтметкаНезаполненного",
			Истина);
			
		Если ЗначениеЗаполнено(Форма.ДокументыФизическихЛиц.ВидДокумента) Тогда
			ВидДокументаОтметкаНезаполненного = Ложь;
		Иначе
			ВидДокументаОтметкаНезаполненного = Истина;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ДокументыФизическихЛицВидДокумента",
			"ОтметкаНезаполненного",
			ВидДокументаОтметкаНезаполненного);
			
		Если НЕ ЗначениеЗаполнено(Форма.ДокументыФизическихЛиц.Период) И ЗначениеЗаполнено(Форма.ДокументыФизическихЛиц.ДатаВыдачи) Тогда
			Форма.ДокументыФизическихЛиц.Период = Форма.ДокументыФизическихЛиц.ДатаВыдачи;
		КонецЕсли;
		
		Форма.ДокументыФизическихЛиц.ЯвляетсяДокументомУдостоверяющимЛичность = Истина;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Форма.ДокументыФизическихЛиц.ДатаВыдачи) И НЕ ЗначениеЗаполнено(Форма.ДокументыФизическихЛицПрежняя.Период) Тогда
		ДоступностьПоЛяПериод = Ложь;
	Иначе
		ДоступностьПоЛяПериод = Истина;
	КонецЕсли;
	
	Если НЕ ЭтоЗначенияПоУмолчанию
		И НЕ ЗначениеЗаполнено(Форма.ДокументыФизическихЛицПрежняя.Период) Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ДокументыФизическихЛицДатаВыдачи",
			"АвтоОтметкаНезаполненного",
			Истина);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ДокументыФизическихЛицДатаВыдачи",
			"ОтметкаНезаполненного",
			НЕ ЗначениеЗаполнено(Форма.ДокументыФизическихЛиц.ДатаВыдачи));

	КонецЕсли; 
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ДокументыФизическихЛицПериод",
		"Доступность",
		ДоступностьПоЛяПериод);
	
	РедактированиеПериодическихСведенийКлиентСервер.ОбновитьОтображениеПолейВвода(Форма, "ДокументыФизическихЛиц", Форма.ФизическоеЛицоСсылка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с дополнительными формами

Функция ОбщееОписаниеДополнительнойФормы(ИмяОткрываемойФормы) Экспорт
	
	ОписаниеФормы = Новый Структура;
	
	ОписаниеФормы.Вставить("ИмяФормы", ИмяОткрываемойФормы);
	ОписаниеФормы.Вставить("КлючевыеРеквизиты", Новый Структура);
	ОписаниеФормы.Вставить("РеквизитыОбъекта", Новый Структура);
	ОписаниеФормы.Вставить("ДополнительныеДанные", Новый Структура);
	ОписаниеФормы.Вставить("АдресВХранилище", "");
	
	Возврат ОписаниеФормы;
	
КонецФункции

// Частный случай формы сотрудников
Функция ОписаниеДополнительнойФормы(ИмяОткрываемойФормы) Экспорт
	
	Возврат СотрудникиКлиентСерверВнутренний.ОписаниеДополнительнойФормы(ИмяОткрываемойФормы);
	
КонецФункции


#КонецОбласти
