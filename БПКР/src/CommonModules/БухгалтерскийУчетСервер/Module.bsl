
#Область ПрограммныйИнтерфейс

#Область ПроцедурыУправленияПроведением

// Выполняет инициализацию дополнительных свойств для проведения документа.
//
Процедура ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	// В структуре "ДополнительныеСвойства" создаются свойства с ключами "ТаблицыДляДвижений", "ДляПроведения", "УчетнаяПолитика".
	
	// "ТаблицыДляДвижений" - структура, которая будет содержать таблицы значений с данными для выполнения движений.
	СтруктураДополнительныеСвойства.Вставить("ТаблицыДляДвижений", Новый Структура);
	
	// "ДляПроведения" - структура, содержащая свойства и реквизиты документа, необходимые для проведения.
	СтруктураДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура);
	
	// Структура, содержащая ключ с именем "МенеджерВременныхТаблиц", в значении которого хранится менеджер временных таблиц.
	// Содержит для каждой временной таблицы ключ (имя временной таблицы) и значение (признак наличия записей во временной таблице).
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("СтруктураВременныеТаблицы", Новый Структура("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц));
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("МетаданныеДокумента", ДокументСсылка.Метаданные());
	                                           
	// Запрос, получающий данные документа.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	_Документ_.Ссылка КАК Ссылка,
	|	_Документ_.Номер КАК Номер,
	|	_Документ_.Дата КАК Дата,
	|   " + ?(СтруктураДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено, "_Документ_.Организация" , "ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)") + " КАК Организация,
	|   " + ?(СтруктураДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено, "_Документ_.ДоговорКонтрагента.СтавкаНДС" , "ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)") + " КАК СтавкаНДС,
	|   " + ?(СтруктураДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Реквизиты.Найти("ПериодРегистрации") <> Неопределено, "_Документ_.ПериодРегистрации" , "ДатаВремя(1,1,1)") + " КАК ПериодРегистрации,
	|   " + ?(СтруктураДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Реквизиты.Найти("ДатаФормированияПроводок") <> Неопределено, "_Документ_.ДатаФормированияПроводок" , "ДатаВремя(1,1,1)") + " КАК ДатаФормированияПроводок,
	|   &ВалютаДокумента,
	|   &ВалютаРасчетов,
	|	_Документ_.МоментВремени КАК МоментВремени,
	|	_Документ_.Представление КАК Представление
	|ИЗ
	|	Документ." + СтруктураДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Имя + " КАК _Документ_
	|ГДЕ
	|	_Документ_.Ссылка = &ДокументСсылка");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.Конвертация") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВалютаДокумента", "_Документ_.ВалютаПрихода КАК ВалютаПрихода");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВалютаРасчетов",  "_Документ_.ВалютаРасхода КАК ВалютаРасхода");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВалютаДокумента", ?(СтруктураДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено, "_Документ_.ВалютаДокумента" , "ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)") + " КАК ВалютаДокумента");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВалютаРасчетов",  ?(СтруктураДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Реквизиты.Найти("ВалютаРасчетов") <> Неопределено, "_Документ_.ВалютаРасчетов" , "ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)") + " КАК ВалютаРасчетов");
	КонецЕсли;	
		
	РезультатЗапроса = Запрос.Выполнить();
	
	// Формирование ключей, содержащих данные документа.
	Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
		СтруктураДополнительныеСвойства.ДляПроведения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаИзРезультатаЗапроса.Следующий();
	
	// Заполнение значений для ключей, содержащих данные документа.
	ЗаполнитьЗначенияСвойств(СтруктураДополнительныеСвойства.ДляПроведения, ВыборкаИзРезультатаЗапроса);
	
	// Определение и установка значения момента, на который должен быть выполнен контроль документа.
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("МоментКонтроля", Дата('00010101'));
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("ПериодКонтроля", Дата("39991231"));
	
	// "УчетнаяПолитика" - структура, содержащая значения всех параметров учетной политики на момент времени документа
	// и по выбранной в документе организации или по компании (в случае ведения учета по компании).
	СтруктураДополнительныеСвойства.Вставить("УчетнаяПолитика", 
		ПолучитьДанныеУчетнойПолитикиОрганизаций(СтруктураДополнительныеСвойства.ДляПроведения.Дата, СтруктураДополнительныеСвойства.ДляПроведения.Организация));

	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("ВалютаРегламентированногоУчета", 
		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());	
	
КонецПроцедуры // ИнициализироватьДополнительныеСвойстваДляПроведения()

// Выполняет подготовку наборов записей документа.
//
Процедура ПодготовитьНаборыЗаписейКРегистрацииДвижений(СтруктураОбъект, СтруктураИсключений = Неопределено) Экспорт
	
	Если СтруктураИсключений = Неопределено Тогда 
		СтруктураИсключений = Новый Структура("МассивТиповИсключений, МассивИменРегистровИсключений", Новый Массив, Новый Массив);
	КонецЕсли;	
	
	Для каждого НаборЗаписей Из СтруктураОбъект.Движения Цикл
		
		Если ТипЗнч(НаборЗаписей) = Тип("КлючИЗначение") Тогда
			НаборЗаписей = НаборЗаписей.Значение;
		КонецЕсли;
		
		Если НЕ СтруктураИсключений.МассивТиповИсключений.Найти(ТипЗнч(НаборЗаписей)) = Неопределено Тогда 
			Продолжить;	
		КонецЕсли;
		
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Очистить();
		КонецЕсли;
		
	КонецЦикла;
	
	МассивИменРегистров = ПолучитьМассивИменИспользуемыхРегистров(СтруктураОбъект.Ссылка, СтруктураОбъект.ДополнительныеСвойства.ДляПроведения.МетаданныеДокумента);
	
	Для каждого ИмяРегистра Из МассивИменРегистров Цикл
		
		Если НЕ СтруктураИсключений.МассивИменРегистровИсключений.Найти(ИмяРегистра) = Неопределено Тогда 
			Продолжить;	
		КонецЕсли;
		
		СтруктураОбъект.Движения[ИмяРегистра].Записывать = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Записывает наборы записей документа.
//
Процедура ЗаписатьНаборыЗаписей(СтруктураОбъект,  СтруктураИсключений = Неопределено) Экспорт
	
	Если СтруктураИсключений = Неопределено Тогда 
		СтруктураИсключений = Новый Структура("МассивТиповИсключений", Новый Массив);
	КонецЕсли;	

	Для каждого НаборЗаписей Из СтруктураОбъект.Движения Цикл
		
		Если ТипЗнч(НаборЗаписей) = Тип("КлючИЗначение") Тогда
			НаборЗаписей = НаборЗаписей.Значение;
		КонецЕсли;
		
		Если НЕ СтруктураИсключений.МассивТиповИсключений.Найти(ТипЗнч(НаборЗаписей)) = Неопределено Тогда 
			Продолжить;	
		КонецЕсли;
		
		Если НаборЗаписей.Записывать Тогда
			Если НЕ НаборЗаписей.ДополнительныеСвойства.Свойство("ДляПроведения") Тогда
				НаборЗаписей.ДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура);
			КонецЕсли;
			
			Если НЕ НаборЗаписей.ДополнительныеСвойства.ДляПроведения.Свойство("СтруктураВременныеТаблицы") Тогда
				НаборЗаписей.ДополнительныеСвойства.ДляПроведения.Вставить("СтруктураВременныеТаблицы", СтруктураОбъект.ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы);
			КонецЕсли;
		
			НаборЗаписей.Записать();
			НаборЗаписей.Записывать = Ложь;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Функция возвращает значение константы КонтролироватьОстаткиПриПроведении.
// 
Функция ВыполнитьКонтрольОстатков() Экспорт
	
	Возврат Константы.КонтролироватьОстаткиПриПроведении.Получить();
	
КонецФункции // ВыполнитьКонтрольОстатков()

#КонецОбласти

#Область ПроцедурыВыдачиСообщенийОбОшибкахПроведения

// Процедура сообщает об ошибках проведения по регистру Запасы.
//
Процедура СообщитьОбОшибкахПроведенияПоРегиструЗапасы(ДокОбъект, ВыборкаЗаписей, Отказ) Экспорт
	
	ЗаголовокОшибки = НСтр("ru = 'Ошибка:'");
	ШаблонЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Не хватает остатка по учету запасов склад: %СкладПредставление%'");
	
	ШаблонСообщения = НСтр("ru = 'Номенклатура: %Номенклатура%,
		|остаток %КоличествоОстаток% %ЕдиницаИзмерения%,
		|недостаточно %Количество% %ЕдиницаИзмерения%'");
	
	ВыводитьВЗаголовокРасшифровку = Истина;
	Пока ВыборкаЗаписей.Следующий() Цикл
		
		Если ВыводитьВЗаголовокРасшифровку Тогда
			СкладПредставление = ВыборкаЗаписей.СкладПредставление;
			ТекстЗаголовкаСообщения = СтрЗаменить(ШаблонЗаголовкаСообщения, "%СкладПредставление%", СкладПредставление);
			СообщитьОбОшибке(ДокОбъект, ТекстЗаголовкаСообщения, , , , Отказ);
			ВыводитьВЗаголовокРасшифровку = Ложь;
		КонецЕсли;
		
		СтрПредставление = СокрЛП(ВыборкаЗаписей.НоменклатураПредставление);
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Номенклатура%", СтрПредставление);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОстаток%", Строка(ВыборкаЗаписей.ОстатокЗапасы));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-ВыборкаЗаписей.КоличествоОстатокЗапасы));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЕдиницаИзмерения%", ВыборкаЗаписей.ЕдиницаИзмеренияПредставление);
		
		СообщитьОбОшибке(ДокОбъект, ТекстСообщения, , , , Отказ);
	КонецЦикла;
	
КонецПроцедуры // СообщитьОбОшибкахПроведенияПоРегиструЗапасы()

// Процедура сообщает об ошибках проведения по РН ОстаткиСпецодежды.
//
Процедура СообщитьОбОшибкахПроведенияПоРегиструОстаткиСпецодежды(ДокОбъект, ВыборкаЗаписей, Отказ) Экспорт
	
	ЗаголовокОшибки = НСтр("ru = 'Ошибка:'");
	ШаблонЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Не хватает остатка по учету спецодежды МОЛа: %ФизЛицоПредставление%'");
	
	ШаблонСообщения = НСтр("ru = 'Номенклатура: %Номенклатура%,
		|остаток %КоличествоОстаток% %ЕдиницаИзмерения%,
		|недостаточно %Количество% %ЕдиницаИзмерения%'");
	
	ВыводитьВЗаголовокРасшифровку = Истина;

	Пока ВыборкаЗаписей.Следующий() Цикл
		
		Если ВыводитьВЗаголовокРасшифровку Тогда
			ФизЛицоПредставление = ВыборкаЗаписей.ФизЛицоПредставление;
			ТекстЗаголовкаСообщения = СтрЗаменить(ШаблонЗаголовкаСообщения, "%ФизЛицоПредставление%", ФизЛицоПредставление);
			СообщитьОбОшибке(ДокОбъект, ТекстЗаголовкаСообщения, , , , Отказ);
			ВыводитьВЗаголовокРасшифровку = Ложь;
		КонецЕсли;
		
		СтрПредставление = СокрЛП(ВыборкаЗаписей.НоменклатураПредставление);
		СтрПредставление = СтрПредставление + " / " + СокрЛП(ВыборкаЗаписей.Цена);
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Номенклатура%", СтрПредставление);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОстаток%", Строка(ВыборкаЗаписей.ОстатокСпецодежды));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-ВыборкаЗаписей.КоличествоОстатокСпецодежды));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЕдиницаИзмерения%", ВыборкаЗаписей.ЕдиницаИзмеренияПредставление);
		
		СообщитьОбОшибке(ДокОбъект, ТекстСообщения, , , , Отказ);
	КонецЦикла;
	
КонецПроцедуры // СообщитьОбОшибкахПроведенияПоРегиструЗапасы()

#КонецОбласти

#Область ПроцедурыРаботыСоСчетамиИСубконто

Функция ОпределитьПараметрыУчета() Экспорт

	ПараметрыУчета = Новый Структура(
		"ВестиПартионныйУчет,
		|СкладскойУчет,
		|ИспользоватьОборотнуюНоменклатуру,
		|ВестиУчетПоСтатьямДДС,
		|ВестиУчетОСПоПодразделениям,
		|ВестиУчетОСПоМОЛ,
		|ВестиУчетПроизводстваПоНоменклатурнымГруппам,
		|ВестиУчетПроизводстваПоЗаказам");

	// Запасы
	БУ = ПланыСчетов.Хозрасчетный.Товары.ПолучитьОбъект();
	ПараметрыУчета.ВестиПартионныйУчет = БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии, "ВидСубконто") <> Неопределено;
	ВестиСкладскойУчет  = БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто") <> Неопределено;
	Если ВестиСкладскойУчет Тогда
		ВестиСуммовойУчетПоСкладам = БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто").Суммовой;
	Иначе
		ВестиСуммовойУчетПоСкладам = Ложь;
	КонецЕсли;

	ПараметрыУчета.СкладскойУчет = ?(ВестиСкладскойУчет, ?(ВестиСуммовойУчетПоСкладам, 2, 1), 0);

	// Денежные средства
	БУ = ПланыСчетов.Хозрасчетный.ДенежныеСредстваВКассе.ПолучитьОбъект();
	ПараметрыУчета.ВестиУчетПоСтатьямДДС = БУ.ВидыСубконто.Найти(
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств, "ВидСубконто") <> Неопределено;
		
	// Производство
	БУ = ПланыСчетов.Хозрасчетный.ДенежныеСредстваВКассе.ПолучитьОбъект();
	
	// Основные средства
	БУ = ПланыСчетов.Хозрасчетный.Земля.ПолучитьОбъект();
	ПараметрыУчета.ВестиУчетОСПоПодразделениям = БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения, "ВидСубконто") <> Неопределено;
	ПараметрыУчета.ВестиУчетОСПоМОЛ = БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СотрудникиОрганизаций, "ВидСубконто") <> Неопределено;
	
	Возврат ПараметрыУчета;

КонецФункции

// Процедура устанавливает субконто на счете. Если такое субконто на счете
// отсутствует, то ничего не делается.
//
// Параметры:
//	Счет         - Счет, к которому относится субконто
//  Субконто     - набор субконто
//	ИмяСубконто  - Номер, имя или вид устанавливаемого субконто
//  Значение субконто - значение устанавливаемого субконто
//
Процедура УстановитьСубконто(Счет, Субконто, ИмяСубконто, ЗначениеСубконто) Экспорт

	Если НЕ ЗначениеЗаполнено(ИмяСубконто) Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	
	Если ТипЗнч(ИмяСубконто) = Тип("Число") Тогда // номер субконто

		Если ИмяСубконто > СвойстваСчета.КоличествоСубконто Тогда
			Возврат;
		КонецЕсли;

		ВидСубконто = СвойстваСчета["ВидСубконто" + ИмяСубконто];

	Иначе // имя или вид субконто

		ВидСубконто = ?(ТипЗнч(ИмяСубконто) = Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"),
						ИмяСубконто,
						ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные[ИмяСубконто]);
		
		// Проверка, что указанный вид субконто есть на счете.
		Если СвойстваСчета.ВидСубконто1 <> ВидСубконто
		   И СвойстваСчета.ВидСубконто2 <> ВидСубконто
		   И СвойстваСчета.ВидСубконто3 <> ВидСубконто Тогда

			Возврат;
			
		КонецЕсли;

	КонецЕсли;
		
	Если ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
		
		Субконто.Вставить(ВидСубконто, ЗначениеСубконто);
		
	КонецЕсли;

КонецПроцедуры // УстановитьСубконто()

// Заполняет значения субконто в коллекции субконто. После первого использования свойства сохраняются в СвойстваСчетаКеш.
// Предназначена для использования в циклах с множеством итераций, заполняющих субконто проводок по малому количеству
// счетов. Проверок корректности данных (наличия субконто на счете  и т.п.) для использования на счете не выполняется.
// Поэтому необходимо обеспечить их корректность до вызова функции.
//
// Параметры:
//	Счет         		- ПланСчетовСсылка.Хозрасчетный - Счет, к которому относится субконто.
//  Субконто     		- РегистрБухгалтерииСубконто - набор субконто.
//  СвойстваСчетаКеш 	- Соответствие - достаточно передать пустое соответствие.
//  Субконто1 			- Произвольный - значение устанавливаемого субконто.
//  Субконто2			- Произвольный - значение устанавливаемого субконто.
//  Субконто3 			- Произвольный - значение устанавливаемого субконто.
//
// Возвращаемое значение:
//   Структура  - свойства счета, на котором были установлены субконто.
//
Функция УстановитьСубконтоПоКешуСвойствСчета(Счет, Субконто, СвойстваСчетаКеш = Неопределено,
												Субконто1 = Неопределено, Субконто2 = Неопределено, Субконто3 = Неопределено) Экспорт
												
	// СвойстваСчетаКеш - соответствие, где ключ = значение счета, а значение = свойства счета.
	Если СвойстваСчетаКеш = Неопределено Тогда
		СвойстваСчетаКеш = Новый Соответствие;
	КонецЕсли;
												
	СвойстваСчета = СвойстваСчетаКеш[Счет];
	Если СвойстваСчета = Неопределено Тогда   // первое использование счета
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
		СвойстваСчетаКеш.Вставить(Счет, СвойстваСчета);
	КонецЕсли;
	
	// Из соображений производительности использован не цикл из трех итераций, а явно заданные имена свойств.
	Если СвойстваСчета.КоличествоСубконто > 0 Тогда
		Субконто.Вставить(СвойстваСчета.ВидСубконто1, Субконто1);
		Если СвойстваСчета.КоличествоСубконто > 1 Тогда
			Субконто.Вставить(СвойстваСчета.ВидСубконто2, Субконто2);
			Если СвойстваСчета.КоличествоСубконто > 2 Тогда
				Субконто.Вставить(СвойстваСчета.ВидСубконто3, Субконто3);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Очистка значений отсутствующих на счете субконто (если необходима) выполняется в обработчике ПередЗаписью регистра.
	
	Возврат СвойстваСчета;
	
КонецФункции

Функция ВедетсяУчетПоСкладам(Счет) Экспорт

	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);

	УчетПоСкладам = СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады
		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады
		ИЛИ СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады
		ИЛИ СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Местонахождение
		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Местонахождение
		ИЛИ СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Местонахождение;

	Возврат УчетПоСкладам;

КонецФункции 

Функция ВедетсяУчетПоМестонахождениям(Счет) Экспорт

	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);

	УчетПоМестонахождениям = СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Местонахождение
		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Местонахождение
		ИЛИ СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Местонахождение;

	Возврат УчетПоМестонахождениям;

КонецФункции 

Функция ВедетсяСуммовойУчетПоСкладам(Счет) Экспорт

	СвойстваСчета      = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);

	Если СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
		Возврат СвойстваСчета.ВидСубконто1Суммовой;
	ИначеЕсли СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
		Возврат СвойстваСчета.ВидСубконто2Суммовой;
	ИначеЕсли СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
		Возврат СвойстваСчета.ВидСубконто3Суммовой;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

Функция ВедетсяСуммовойУчетПоМестонахождениям(Счет) Экспорт

	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);

	Если СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Местонахождение Тогда
		Возврат СвойстваСчета.ВидСубконто1Суммовой;
	ИначеЕсли СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Местонахождение Тогда
		Возврат СвойстваСчета.ВидСубконто2Суммовой;
	ИначеЕсли СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Местонахождение Тогда
		Возврат СвойстваСчета.ВидСубконто3Суммовой;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

Функция НаСчетеВедетсяПартионныйУчет(Счет) Экспорт

	СвойстваСчета  = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);

	ПартионныйУчет = СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии
		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии
		ИЛИ СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;

	Возврат ПартионныйУчет;

КонецФункции 

Функция НаСчетеВедетсяУчетПоКонтрагентам(Счет) Экспорт

	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);

	УчетПоКонтрагентам = СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты
		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты
		ИЛИ СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;

	Возврат УчетПоКонтрагентам;

КонецФункции

Функция НаСчетеВедетсяУчетПоДоговорам(Счет) Экспорт

	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);

	УчетПоДоговорам = СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры
		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры
		ИЛИ СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры;

	Возврат УчетПоДоговорам;

КонецФункции

Функция МаксимальноеКоличествоСубконто() Экспорт

	Возврат Метаданные.ПланыСчетов.Хозрасчетный.МаксКоличествоСубконто;

КонецФункции

// Задает набор возможных условий для отбора по списку счетов.
//
Функция НовыеУсловияОтбораСубсчетов() Экспорт
	
	УсловияОтбора = Новый Структура;
	
	// флаги
	УсловияОтбора.Вставить("ИспользоватьВПроводках"); // отбор по ЗапретитьИспользоватьВПроводках
	УсловияОтбора.Вставить("Валютный");
	УсловияОтбора.Вставить("Забалансовый");
	
	// список исключаемых счетов
	УсловияОтбора.Вставить("СчетаИсключения");
	
	Возврат УсловияОтбора;
	
КонецФункции

// Дополняет переданные счета их субсчетами. Для всех счетов проверяется соответствие заданным условиям.
//
// Параметры:
//  МассивСчетов - Массив - список счетов, которые нужно дополнить субсчетами.
//  УсловияОтбора- Структура - см. НовыеУсловияОтбораСубсчетов().
//
// Возвращаемое значение:
//   Массив      - список исходных счетов плюс их субсчета.
//
Функция СформироватьМассивСубсчетовПоОтбору(МассивСчетов, УсловияОтбора = Неопределено) Экспорт

	Если УсловияОтбора = Неопределено Тогда
		УсловияОтбора = НовыеУсловияОтбораСубсчетов();
	КонецЕсли;
	
	УсловиеПоСчетам = ?(ЗначениеЗаполнено(МассивСчетов), "Хозрасчетный.Ссылка В ИЕРАРХИИ(&МассивСчетов)", "ИСТИНА");
	
	УсловиеПоИсключениям = ?(ЗначениеЗаполнено(УсловияОтбора.СчетаИсключения), "И НЕ Хозрасчетный.Ссылка В (&СчетаИсключения)", "");
	
	Если УсловияОтбора.ИспользоватьВПроводках = Неопределено Тогда
		УсловиеПоСчетамГруппам = "";
	Иначе
		УсловиеПоСчетамГруппам = "И " + ?(УсловияОтбора.ИспользоватьВПроводках, "НЕ ", "") + "Хозрасчетный.ЗапретитьИспользоватьВПроводках";
	КонецЕсли;
	
	Если УсловияОтбора.Валютный = Неопределено Тогда
		УсловиеПоВалютным = "";
	Иначе
		УсловиеПоВалютным = "И " + ?(УсловияОтбора.Валютный, "", "НЕ ") + "Хозрасчетный.Валютный";
	КонецЕсли; 
	
	Если УсловияОтбора.Забалансовый = Неопределено Тогда
		УсловиеПоЗабалансовым = "";
	Иначе
		УсловиеПоЗабалансовым = "И " + ?(УсловияОтбора.Забалансовый, "", "НЕ ") + "Хозрасчетный.Забалансовый";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСчетов",    МассивСчетов);
	Запрос.УстановитьПараметр("СчетаИсключения", УсловияОтбора.СчетаИсключения);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	" + УсловиеПоСчетам + "
	|	" + УсловиеПоИсключениям + "
	|	" + УсловиеПоСчетамГруппам + "
	|	" + УсловиеПоВалютным + "
	|	" + УсловиеПоЗабалансовым + "
	|УПОРЯДОЧИТЬ ПО
	|	Хозрасчетный.Код
	|";
	
	МассивСчетовССубсчетами = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивСчетовССубсчетами;

КонецФункции

// Дополняет переданные счета их субсчетами. После первого вызова запоминает субсчета
// и при последующих вызовах не обращается к СУБД.
//
// Параметры:
//  МассивСчетов - Массив - список счетов, которые нужно дополнить субсчетами.
//
// Возвращаемое значение:
//   Массив      - список исходных счетов плюс их субсчета.
//
Функция СформироватьМассивСубсчетов(МассивСчетов) Экспорт

	МассивСубсчетов = Новый Массив;
	Для каждого СчетВерхнегоУровня Из МассивСчетов Цикл
	
		Субсчета = БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(СчетВерхнегоУровня);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСубсчетов, Субсчета);
	
	КонецЦикла; 
	
	Возврат МассивСубсчетов;

КонецФункции // СформироватьМассивСубсчетов()

// Функция - Счета учета основных средств
// Все активные счета учета в иерархии счета ОсновныеСредства и НематериальныеАктивы 
//
// Параметры:
//  ИсключенныеСчета - Массив - Массив счетов, которые нужно исключить из результата.
//
// Возвращаемое значение:
//  Массив - Массив счетов
//
Функция СчетаУчетаОсновныхСредствИНематериальныхАктивов(ИсключенныеСчета = Неопределено) Экспорт 
	
	Если ИсключенныеСчета = Неопределено Тогда 
		ИсключенныеСчета = Новый Массив;
	КонецЕсли;		

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Родитель В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОсновныеСредства))
		|	И Хозрасчетный.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
		|	И НЕ Хозрасчетный.ПометкаУдаления
		|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
		|	И НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (&ИсключенныеСчета)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Хозрасчетный.Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Родитель В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НематериальныеАктивы))
		|	И Хозрасчетный.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
		|	И НЕ Хозрасчетный.ПометкаУдаления
		|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
		|	И НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (&ИсключенныеСчета)";
	
	Запрос.УстановитьПараметр("ИсключенныеСчета", ИсключенныеСчета);

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
КонецФункции 

#КонецОбласти

#Область ПроцедурыФормированияДвиженийРегистров

// Выполняет движения по регистру бухгалтерии Хозрасчетный.
//
Процедура ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	// КонтрольБазовойВерсии
	Если ВРег(Метаданные.Имя) = ВРег("БухгалтерияДляКыргызстанаБазовая") Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Организации.Ссылка) КАК КоличествоОрганизаций
			|ИЗ
			|	Справочник.Организации КАК Организации";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.КоличествоОрганизаций > 1 Тогда
				Отказ = Истина;
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Ограничение базовой версии. В информационной базе может быть введена только одна организация.'"));
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	// Конец КонтрольБазовойВерсии

	ТаблицаХозрасчетный = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаХозрасчетный;
	
	Если Отказ
	 ИЛИ ТаблицаХозрасчетный.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоДокументЗакрытиеМесяца = ?(ТипЗнч(ДополнительныеСвойства.ДляПроведения.Ссылка) = Тип("ДокументСсылка.ЗакрытиеМесяца"), Истина, Ложь);
	ЭтоДокументАвансовыйОтчет  = ?(ТипЗнч(ДополнительныеСвойства.ДляПроведения.Ссылка) = Тип("ДокументСсылка.АвансовыйОтчет"), Истина, Ложь);
	ЭтоДокументПлатежноеПоручениеИсходящее  = ?(ТипЗнч(ДополнительныеСвойства.ДляПроведения.Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее"), Истина, Ложь);
	
	ДвиженияХозрасчетный = Движения.Хозрасчетный;
	// ТаблицаХозрасчетный должна всегда содержать поля:
	// Период - Дата проводки;	
	// Организация - СправочникСсылка.Организации;
	// СчетДт - тип ПланСчетовБюджетныйСсылка;
	// СчетКт - тип ПланСчетовБюджетныйСсылка;
	// Субконто1 - необходимое субконто;
	// Субконто2 - -\\-;
	// Субконто3 - -\\-;
	// КорСубконто1 - необходимое субконто;
	// КорСубконто2 - -\\-;
	// КорСубконто3 - -\\-;
	
	НомерСтроки = 0;
	
	СвойстваСчетаКеш = Новый Соответствие;
	
	ЕстьКолонкаВалютаДт = НЕ ТаблицаХозрасчетный.Колонки.Найти("ВалютаДт") = Неопределено;
	ЕстьКолонкаВалютаКт = НЕ ТаблицаХозрасчетный.Колонки.Найти("ВалютаКт") = Неопределено;
	ЕстьКоличествоДт = НЕ ТаблицаХозрасчетный.Колонки.Найти("КоличествоДт") = Неопределено;
	ЕстьКоличествоКт = НЕ ТаблицаХозрасчетный.Колонки.Найти("КоличествоКт") = Неопределено;
	ЕстьКорректироватьНУ = НЕ ТаблицаХозрасчетный.Колонки.Найти("КорректироватьНУ") = Неопределено;
	
	Для Каждого СтрокаТаблицы Из ТаблицаХозрасчетный Цикл
												
		НомерСтроки = НомерСтроки + 1;

		Проводка = ДвиженияХозрасчетный.Добавить();

		Проводка.Период = СтрокаТаблицы.Период; 		
		Проводка.Организация = СтрокаТаблицы.Организация;
		Проводка.Содержание = СтрокаТаблицы.Содержание;
		Проводка.Сумма = СтрокаТаблицы.Сумма;
		Проводка.КорректироватьНУ = ?(ЕстьКорректироватьНУ, СтрокаТаблицы.КорректироватьНУ, Ложь);
		
		Проводка.СчетДт = СтрокаТаблицы.СчетДт;
		СвойстваСчета = СвойстваСчетаКеш[Проводка.СчетДт];
		Если СвойстваСчета = Неопределено Тогда   // первое использование счета
			СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			СвойстваСчетаКеш.Вставить(Проводка.СчетДт, СвойстваСчета);
		КонецЕсли;
		
		Если СвойстваСчета.Валютный И ЕстьКолонкаВалютаДт Тогда
			Проводка.ВалютаДт        	= СтрокаТаблицы.ВалютаДт;
			Проводка.ВалютнаяСуммаДт 	= СтрокаТаблицы.ВалютнаяСуммаДт;
		КонецЕсли;			
	
		// Контроль движения по валютным счетам
		Если СвойстваСчета.Валютный Тогда 
			Если НЕ ЗначениеЗаполнено(Проводка.ВалютаДт) Тогда 
				ТекстСообщения = СтрШаблон(НСтр("ru = 'У счета Дт с признаком ""Валютный"" не заполнена валюта: Счет %1; Номер записи %2; Содержание: %3; Сумма: %4.'"), 
					СвойстваСчета.Код, НомерСтроки, СтрокаТаблицы.Содержание, СтрокаТаблицы.Сумма);
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
				ВызватьИсключение ТекстСообщения;
			ИначеЕсли Проводка.ВалютнаяСуммаДт = 0
				И НЕ ЭтоДокументЗакрытиеМесяца 
				И НЕ ЭтоДокументАвансовыйОтчет 
				И НЕ ЭтоДокументПлатежноеПоручениеИсходящее Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'У счета Дт с признаком ""Валютный"" не заполнена валютная сумма: Счет %1; Номер записи %2; Содержание: %3; Сумма: %4.'"), 
					СвойстваСчета.Код, НомерСтроки, СтрокаТаблицы.Содержание, СтрокаТаблицы.Сумма);
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	
		КонецЕсли;	
			
		// Субконто1
		Если НЕ СтрокаТаблицы.СубконтоДт1 = Неопределено Тогда 
			Если СвойстваСчета.ВидСубконто1ТипЗначения <> Неопределено
				И СвойстваСчета.ВидСубконто1ТипЗначения.СодержитТип(ТипЗнч(СтрокаТаблицы.СубконтоДт1)) Тогда 
				УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СвойстваСчета.ВидСубконто1, СтрокаТаблицы.СубконтоДт1);
			ИначеЕсли СвойстваСчета.ВидСубконто2ТипЗначения <> Неопределено
				И СвойстваСчета.ВидСубконто2ТипЗначения.СодержитТип(ТипЗнч(СтрокаТаблицы.СубконтоДт1)) Тогда 
				УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СвойстваСчета.ВидСубконто2, СтрокаТаблицы.СубконтоДт1);
			ИначеЕсли СвойстваСчета.ВидСубконто3ТипЗначения <> Неопределено
				И СвойстваСчета.ВидСубконто3ТипЗначения.СодержитТип(ТипЗнч(СтрокаТаблицы.СубконтоДт1)) Тогда 
				УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СвойстваСчета.ВидСубконто3, СтрокаТаблицы.СубконтоДт1);
			КонецЕсли;
		КонецЕсли;	
		
		// Субконто2
		Если НЕ СтрокаТаблицы.СубконтоДт2 = Неопределено Тогда 
			Если СвойстваСчета.ВидСубконто1ТипЗначения <> Неопределено
				И СвойстваСчета.ВидСубконто1ТипЗначения.СодержитТип(ТипЗнч(СтрокаТаблицы.СубконтоДт2)) Тогда 
				УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СвойстваСчета.ВидСубконто1, СтрокаТаблицы.СубконтоДт2);
			ИначеЕсли СвойстваСчета.ВидСубконто2ТипЗначения <> Неопределено
				И СвойстваСчета.ВидСубконто2ТипЗначения.СодержитТип(ТипЗнч(СтрокаТаблицы.СубконтоДт2)) Тогда 
				УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СвойстваСчета.ВидСубконто2, СтрокаТаблицы.СубконтоДт2);
			ИначеЕсли СвойстваСчета.ВидСубконто3ТипЗначения <> Неопределено
				И СвойстваСчета.ВидСубконто3ТипЗначения.СодержитТип(ТипЗнч(СтрокаТаблицы.СубконтоДт2)) Тогда 
				УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СвойстваСчета.ВидСубконто3, СтрокаТаблицы.СубконтоДт2);
			КонецЕсли;
		КонецЕсли;	
		
		// Субконто3
		Если НЕ СтрокаТаблицы.СубконтоДт3 = Неопределено Тогда 
			Если СвойстваСчета.ВидСубконто1ТипЗначения <> Неопределено
				И СвойстваСчета.ВидСубконто1ТипЗначения.СодержитТип(ТипЗнч(СтрокаТаблицы.СубконтоДт3)) Тогда 
				УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СвойстваСчета.ВидСубконто1, СтрокаТаблицы.СубконтоДт3);
			ИначеЕсли СвойстваСчета.ВидСубконто2ТипЗначения <> Неопределено
				И СвойстваСчета.ВидСубконто2ТипЗначения.СодержитТип(ТипЗнч(СтрокаТаблицы.СубконтоДт3)) Тогда 
				УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СвойстваСчета.ВидСубконто2, СтрокаТаблицы.СубконтоДт3);
			ИначеЕсли СвойстваСчета.ВидСубконто3ТипЗначения <> Неопределено
				И СвойстваСчета.ВидСубконто3ТипЗначения.СодержитТип(ТипЗнч(СтрокаТаблицы.СубконтоДт3)) Тогда 
				УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СвойстваСчета.ВидСубконто3, СтрокаТаблицы.СубконтоДт3);
			КонецЕсли;	
		КонецЕсли;	
		
		Если СвойстваСчета.Количественный И ЕстьКоличествоДт Тогда
	    	Проводка.КоличествоДт = СтрокаТаблицы.КоличествоДт;
	    КонецЕсли;
		
		Проводка.СчетКт = СтрокаТаблицы.СчетКт;
		СвойстваСчета = СвойстваСчетаКеш[Проводка.СчетКт];
		Если СвойстваСчета = Неопределено Тогда   // первое использование счета
			СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			СвойстваСчетаКеш.Вставить(Проводка.СчетКт, СвойстваСчета);
		КонецЕсли;
		
		Если СвойстваСчета.Валютный И ЕстьКолонкаВалютаКт Тогда
			Проводка.ВалютаКт       	= СтрокаТаблицы.ВалютаКт;
			Проводка.ВалютнаяСуммаКт 	= СтрокаТаблицы.ВалютнаяСуммаКт;				
		КонецЕсли;		
		
		// Контроль движения по валютным счетам
		Если СвойстваСчета.Валютный Тогда 
			Если НЕ ЗначениеЗаполнено(Проводка.ВалютаКт) Тогда 
				ТекстСообщения = СтрШаблон(НСтр("ru = 'У счета Кт с признаком ""Валютный"" не заполнена валюта: Счет %1; Номер записи %2; Содержание: %3; Сумма: %4.'"), 
					СвойстваСчета.Код, НомерСтроки, СтрокаТаблицы.Содержание, СтрокаТаблицы.Сумма);
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
				ВызватьИсключение ТекстСообщения;
			ИначеЕсли Проводка.ВалютнаяСуммаКт = 0 
				И Не ЭтоДокументЗакрытиеМесяца 
				И НЕ ЭтоДокументАвансовыйОтчет 
				И НЕ ЭтоДокументПлатежноеПоручениеИсходящее Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'У счета Кт с признаком ""Валютный"" не заполнена валютная сумма: Счет %1; Номер записи %2; Содержание: %3; Сумма: %4.'"), 
					СвойстваСчета.Код, НомерСтроки, СтрокаТаблицы.Содержание, СтрокаТаблицы.Сумма);
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	
		КонецЕсли;	
		
		// КорСубконто1
		Если НЕ СтрокаТаблицы.СубконтоКт1 = Неопределено Тогда 
			Если СвойстваСчета.ВидСубконто1ТипЗначения <> Неопределено
				И СвойстваСчета.ВидСубконто1ТипЗначения.СодержитТип(ТипЗнч(СтрокаТаблицы.СубконтоКт1)) Тогда 
				УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СвойстваСчета.ВидСубконто1, СтрокаТаблицы.СубконтоКт1);
			ИначеЕсли СвойстваСчета.ВидСубконто2ТипЗначения <> Неопределено
				И СвойстваСчета.ВидСубконто2ТипЗначения.СодержитТип(ТипЗнч(СтрокаТаблицы.СубконтоКт1)) Тогда 
				УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СвойстваСчета.ВидСубконто2, СтрокаТаблицы.СубконтоКт1);
			ИначеЕсли СвойстваСчета.ВидСубконто3ТипЗначения <> Неопределено
				И СвойстваСчета.ВидСубконто3ТипЗначения.СодержитТип(ТипЗнч(СтрокаТаблицы.СубконтоКт1)) Тогда 
				УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СвойстваСчета.ВидСубконто3, СтрокаТаблицы.СубконтоКт1);
			КонецЕсли;
		КонецЕсли;	
		
		// КорСубконто2
		Если НЕ СтрокаТаблицы.СубконтоКт2 = Неопределено Тогда 
			Если СвойстваСчета.ВидСубконто1ТипЗначения <> Неопределено
				И СвойстваСчета.ВидСубконто1ТипЗначения.СодержитТип(ТипЗнч(СтрокаТаблицы.СубконтоКт2)) Тогда 
				УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СвойстваСчета.ВидСубконто1, СтрокаТаблицы.СубконтоКт2);
			ИначеЕсли СвойстваСчета.ВидСубконто2ТипЗначения <> Неопределено
				И СвойстваСчета.ВидСубконто2ТипЗначения.СодержитТип(ТипЗнч(СтрокаТаблицы.СубконтоКт2)) Тогда 
				УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СвойстваСчета.ВидСубконто2, СтрокаТаблицы.СубконтоКт2);
			ИначеЕсли СвойстваСчета.ВидСубконто3ТипЗначения <> Неопределено
				И СвойстваСчета.ВидСубконто3ТипЗначения.СодержитТип(ТипЗнч(СтрокаТаблицы.СубконтоКт2)) Тогда 
				УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СвойстваСчета.ВидСубконто3, СтрокаТаблицы.СубконтоКт2);
			КонецЕсли;
		КонецЕсли;	
		
		// КорСубконто3
		Если НЕ СтрокаТаблицы.СубконтоКт3 = Неопределено Тогда 
			Если СвойстваСчета.ВидСубконто1ТипЗначения <> Неопределено
				И СвойстваСчета.ВидСубконто1ТипЗначения.СодержитТип(ТипЗнч(СтрокаТаблицы.СубконтоКт3)) Тогда 
				УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СвойстваСчета.ВидСубконто1, СтрокаТаблицы.СубконтоКт3);
			ИначеЕсли СвойстваСчета.ВидСубконто2ТипЗначения <> Неопределено
				И СвойстваСчета.ВидСубконто2ТипЗначения.СодержитТип(ТипЗнч(СтрокаТаблицы.СубконтоКт3)) Тогда 
				УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СвойстваСчета.ВидСубконто2, СтрокаТаблицы.СубконтоКт3);
			ИначеЕсли СвойстваСчета.ВидСубконто3ТипЗначения <> Неопределено
				И СвойстваСчета.ВидСубконто3ТипЗначения.СодержитТип(ТипЗнч(СтрокаТаблицы.СубконтоКт3)) Тогда 
				УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СвойстваСчета.ВидСубконто3, СтрокаТаблицы.СубконтоКт3);
			КонецЕсли;
		КонецЕсли;	
		
		Если СвойстваСчета.Количественный И ЕстьКоличествоКт Тогда
	    	Проводка.КоличествоКт = СтрокаТаблицы.КоличествоКт;
	    КонецЕсли;
	КонецЦикла;
	
	ДвиженияХозрасчетный.Записывать = Истина;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Персонал

// Выполняет движения регистра сведений Сотрудники.
//
Процедура ОтразитьСотрудники(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСотрудники;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.Сотрудники;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

// Выполняет движения регистра сведений Сотрудники по трудовым соглашениям.
//
Процедура ОтразитьСотрудникиПоТрудовымСоглашениям(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСотрудникиПоТрудовымСоглашениям;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.СотрудникиПоТрудовымСоглашениям;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

// Выполняет движения регистра сведений Плановые начисления (начало).
//
Процедура ОтразитьПлановыеНачисленияНачало(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПлановыеНачисленияНачало;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ПлановыеНачисленияНачало;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

// Выполняет движения регистра сведений Плановые начисления (окончание).
//
Процедура ОтразитьПлановыеНачисленияОкончание(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПлановыеНачисленияОкончание;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ПлановыеНачисленияОкончание;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

// Выполняет движения регистра сведений Плановые удержания (начало).
//
Процедура ОтразитьПлановыеУдержанияНачало(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПлановыеУдержанияНачало;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ПлановыеУдержанияНачало;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

// Выполняет движения регистра сведений Плановые удержания (окончание).
//
Процедура ОтразитьПлановыеУдержанияОкончание(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПлановыеУдержанияОкончание;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ПлановыеУдержанияОкончание;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

// Выполняет движения регистра сведений Статусы сотрудников.
//
Процедура ОтразитьСтатусыСотрудников(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСтатусыСотрудников;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.СтатусыСотрудников;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

// Выполняет движения регистра сведений Стажи сотрудников.
//
Процедура ОтразитьСтажиСотрудников(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСтажиСотрудников;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.СтажиСотрудников;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

// Выполняет движения регистра сведений Профсоюз.
//
Процедура ОтразитьПрофсоюз(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПрофсоюз;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.Профсоюз;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

// Выполняет движения регистра сведений Тарифы командировочных.
// 
Процедура ОтразитьТарифыКомандировочных(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаТарифыКомандировочных;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ТарифыКомандировочных;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заработная плата

// Выполняет движения регистра расчета Начисления.
//
Процедура ОтразитьНачисления(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаНачисления;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.Начисления;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

// Выполняет движения регистра расчета Удержания.
//
Процедура ОтразитьУдержания(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУдержания;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.Удержания;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

// Выполняет движения регистра накопления Выплаченная зарплата.
//
Процедура ОтразитьВыплаченнаяЗарплата(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаВыплаченнаяЗарплата;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ВыплаченнаяЗарплата;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

// Выполняет движения регистра сведений ТабельПоЧасам.
//
Процедура ОтразитьТабельПоЧасам(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаТабельПоЧасам;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ТабельПоЧасам;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Налоги по заработной плате

// Выполняет движения регистра накопления Подоходный налог.
//
Процедура ОтразитьПодоходныйНалог(ДополнительныеСвойства, Движения, Отказ) Экспорт 
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПодоходныйНалог;
	
	Если Отказ
		ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ПодоходныйНалог;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
	
КонецПроцедуры

// Выполняет движения регистра накопления Социальный фонд.
//
Процедура ОтразитьСоциальныйФонд(ДополнительныеСвойства, Движения, Отказ) Экспорт 
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСоциальныйФонд;
	
	Если Отказ
		ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.СоциальныйФонд;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
	
КонецПроцедуры

// Выполняет движения регистра накопления Налоги по заработной плате.
//
Процедура ОтразитьНалогиПоЗаработнойПлате(ДополнительныеСвойства, Движения, Отказ) Экспорт 
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаНалогиПоЗаработнойПлате;
	
	Если Отказ
		ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.НалогиПоЗаработнойПлате;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
	
КонецПроцедуры

// Выполняет движения регистра накопления Отчет ежемесячный соц.фонд.
//
Процедура ОтразитьДанныеДляОтчетаПоСФЕжемесячному(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДанныеДляОтчетаПоЕжемесячномуСФ;
	
	Если Отказ
		ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ДанныеДляОтчетаПоСФЕжемесячному;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Основные Средства

// Выполняет движения регистра сведений "ПараметрыУчетаОС"
//
Процедура ОтразитьПараметрыУчетаОС(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПараметрыУчетаОС;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ПараметрыУчетаОС;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

// Выполняет движения регистра сведений "СостоянияОС"
//
Процедура ОтразитьСостоянияОС(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСостоянияОС;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.СостоянияОС;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

// Выполняет движения регистра сведений "МестонахождениеОСБухгалтерскийУчет"
//
Процедура ОтразитьМестонахождениеОС(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаМестонахождениеОС;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.МестонахождениеОС;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
		
КонецПроцедуры 

// Выполняет движения регистра сведений "СобытияОС"
//
Процедура ОтразитьСобытияОС(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСобытияОС;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.СобытияОС;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
		
КонецПроцедуры  

// Выполняет движения регистра накопления "Выработка ОС"
//
Процедура ОтразитьВыработкаОС(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаВыработкаОС;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ВыработкаОС;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
		
КонецПроцедуры  

// Выполняет движения регистра сведений "СведенияОбИмуществе"
//
Процедура ОтразитьСведенияОбИмуществе(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСведенияОбИмуществе;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.СведенияОбИмуществе;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
		
КонецПроцедуры  

// Выполняет движения регистра сведений "СведенияОТранспорте"
//
Процедура ОтразитьСведенияОТранспорте(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСведенияОТранспорте;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.СведенияОТранспорте;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
		
КонецПроцедуры  

// Выполняет движения регистра сведений "НалоговаяАмортизация"
//
Процедура ОтразитьНалоговаяАмортизация(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаНалоговаяАмортизация;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.НалоговаяАмортизация;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
		
КонецПроцедуры 

// Выполняет движения регистра сведений "НалоговаяВыверка"
Процедура ОтразитьНалоговаяВыверка(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаНалоговаяВыверка;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.НалоговаяВыверка;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
		
КонецПроцедуры

// Выполняет движения регистра накопления "УбыткиПрошлыхЛет"
//
Процедура ОтразитьУбыткиПрошлыхЛет(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУбыткиПрошлыхЛет;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.УбыткиПрошлыхЛет;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
		
КонецПроцедуры 

// Выполняет движения регистра накопления "РезервПоПереоценкеОС"
//
Процедура ОтразитьРезервПоПереоценкеОС(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРезервПоПереоценкеОС;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.РезервПоПереоценкеОС;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

// Выполняет движения регистра накопления "ДвижениеОСНУ"
//
Процедура ОтразитьДвижениеОСНУ(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДвижениеОСНУ;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ДвижениеОСНУ;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
		
КонецПроцедуры 

// Выполняет движения регистра сведений "СчетаУчетаРезерваОС"
//
Процедура ОтразитьСчетаУчетаРезерваОС(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСчетаУчетаРезерваОС;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.СчетаУчетаРезерваОС;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

// Выполняет движения регистра накопления "ЗемельныйНалог"
//
Процедура ОтразитьЗемельныйНалог(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗемельныйНалог;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ЗемельныйНалог;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

// Выполняет движения регистра сведений "СведенияПоНалогуНаИмущество"
//
Процедура ОтразитьСведенияПоНалогуНаИмущество(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСведенияПоНалогуНаИмущество;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.СведенияПоНалогуНаИмущество;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

// Выполняет движения регистра сведений "СведенияПоПоказателямИмпорта"
//
Процедура ОтразитьСведенияПоПоказателямИмпорта(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСведенияПоПоказателямИмпорта;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.СведенияПоПоказателямИмпорта;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

// Выполняет движения регистра сведений "СоставОС"
//
Процедура ОтразитьСоставОС(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСоставОС;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.СоставОС;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

// Выполняет движения регистра сведений "ПараметрыУчетаКомплектовОС"
//
Процедура ОтразитьПараметрыУчетаКомплектовОС(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПараметрыУчетаКомплектовОС;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ПараметрыУчетаКомплектовОС;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

// Выполняет движения регистра сведений "ПараметрыУчетаОСВАренде"
//
Процедура ОтразитьПараметрыУчетаОСВАренде(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПараметрыУчетаОСВАренде;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ПараметрыУчетаОСВАренде;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

// Выполняет движения регистра сведений "СостоянияОСВАренде"
//
Процедура ОтразитьСостоянияОСВАренде(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСостоянияОСВАренде;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.СостоянияОСВАренде;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////
// Запасы

// Выполняет движения регистра накопления "Продажи"
//
Процедура ОтразитьПродажи(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажи;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.Продажи;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
	
	ДвиженияПоРегистру.Записывать = Истина;
	
КонецПроцедуры

// Выполняет движения регистра накопления "ПродажиОсновныхСредств"
//
Процедура ОтразитьПродажиОсновныхСредств(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажиОсновныхСредств;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ПродажиОсновныхСредств;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
	
	ДвиженияПоРегистру.Записывать = Истина;
	
КонецПроцедуры

// Выполняет движения по РН "БланкиСчетовФактур"
//
Процедура ОтразитьБланкиСчетовФактур(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаБланкиСчетовФактур;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.БланкиСчетовФактур;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
	
	ДвиженияПоРегистру.Записывать = Истина;
	
КонецПроцедуры

// Выполняет движения по РС "АвансыПодотчетника"
//
Процедура ОтразитьАвансыПодотчетника(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаАвансыПодотчетника;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.АвансыПодотчетника;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
	
	ДвиженияПоРегистру.Записывать = Истина;
	
КонецПроцедуры

// Выполняет движения по РС "СведенияОПоступлении"
//
Процедура ОтразитьСведенияОПоступлении(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСведенияОПоступлении;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.СведенияОПоступлении;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
	
	ДвиженияПоРегистру.Записывать = Истина;
	
КонецПроцедуры

// Выполняет движения по РС "ЗначенияСтавокНалогов"
//
Процедура ЗначенияСтавокНалогов(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗначенияСтавокНалогов;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = ТаблицаДляЗагрузки[0];
	МенеджерЗаписи = РегистрыСведений.ЗначенияСтавокНалогов.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТаблицы);
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Выполняет движения по РН "ОборотыГТД"
//
Процедура ОтразитьОборотыГТД(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаОборотыГТД;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ОборотыГТД;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
	
	ДвиженияПоРегистру.Записывать = Истина;
	
КонецПроцедуры

// Выполняет движения по РС "СведенияОВвозимыхТоварах"
//
Процедура ОтразитьСведенияОВвозимыхТоварах(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСведенияОВвозимыхТоварах;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.СведенияОВвозимыхТоварах;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
	
	ДвиженияПоРегистру.Записывать = Истина;
	
КонецПроцедуры

//// Выполняет движения по РС "СведенияОПодакцизныхТоварах"
////
//Процедура ОтразитьСведенияОПодакцизныхТоварах(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПодакцизныеТовары;
//	
//	Если Отказ
//	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияПоРегистру = Движения.СведенияОПодакцизныхТоварах;
//	ДвиженияПоРегистру.Записывать = Истина;
//	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
//	
//	ДвиженияПоРегистру.Записывать = Истина;
//	
//КонецПроцедуры

// Выполняет движения по РС "СведенияОНДСНаИмпорт"
//
Процедура ОтразитьСведенияОНДСНаИмпорт(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСведенияОНДСНаИмпорт;
	
	Если Отказ ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.СведенияОНДСНаИмпорт;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
	
	ДвиженияПоРегистру.Записывать = Истина;
	
КонецПроцедуры

// Выполняет движения по РН "Поступления товаров"
Процедура ОтразитьРеестрЗакупок(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРеестрЗакупок;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.РеестрЗакупок;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
	
	ДвиженияПоРегистру.Записывать = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Отчет по НДС

// Выполняет движения по регистру накопления "РеестрВвезенныхМатериальныхРесурсов"
//
Процедура ОтразитьРеестрВвезенных(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРеестрВвезенных;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.РеестрВвезенныхМатериальныхРесурсов;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
	
КонецПроцедуры

// Выполняет движения регистра накопления "РеестрПриобретенныхМатериальныхРесурсов"
//
Процедура ОтразитьРеестрПриобретенныхМатериальныхРесурсов(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРеестрПриобретенныхМатериальныхРесурсов;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.РеестрПриобретенныхМатериальныхРесурсов;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////
// Электронный счет-фактура

// Выполняет движения регистра сведений "СведенияОбЭСФ"
//
Процедура ОтразитьСведенияОбЭСФ(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСведенияОбЭСФ;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.СведенияОбЭСФ;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////
// Основные средства

// Получает структуру с настройками по ШЭЧ
Функция РасчетСтрокойДляОтчетаСКД(Дата, Сумма) Экспорт
	
	СтрокаВозврата = "" + Формат(Сумма, "ЧДЦ=2") + "*(" + (12 - Месяц(Дата) - ?(День(Дата) > 15, 1, 0)) + " + 0.5)/12";
	Возврат СтрокаВозврата;	
	
КонецФункции	

Функция ПолучитьШифрАУДляОтчетаСКД(Субконто) Экспорт
	Если НЕ ЗначениеЗаполнено(Субконто) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если ТипЗнч(Субконто) = ТИП("СправочникСсылка.Контрагенты") 
		ИЛИ ТипЗнч(Субконто) = ТИП("СправочникСсылка.ФизическиеЛица") Тогда
		
		Возврат Прав(Субконто.Код, 4);	
		
	ИначеЕсли ТипЗнч(Субконто) = ТИП("СправочникСсылка.БанковскиеСчета") Тогда
		Возврат Прав(Субконто.НомерСчета, 4);
		
	КонецЕсли;	

КонецФункции // ПолучитьШифрАУДляОтчетаСКД()

Процедура ОтразитьИсторияУчетаМБП(ДополнительныеСвойства, Движения, Отказ) Экспорт 

	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаИсторияУчетаМБП;
	
	Если Отказ
		ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ИсторияУчетаМБП;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
	
	

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////
// НДС
Процедура ОтразитьНДСНаИмпорт(ДополнительныеСвойства, Движения, Отказ) Экспорт
	  ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаНДСНаИмпорт;
	
	Если Отказ
		ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.НДСНаИмпорт;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
	

КонецПроцедуры

Процедура ОтразитьАвансыДоотгрузка(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаАвансыДоотгрузка;
	
	Если Отказ
		ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.АвансыДоотгрузка;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	

КонецПроцедуры

Процедура ОтразитьАвансыДоотгрузкаРасшифровка(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаАвансыДоотгрузкаРасшифровка;
	
	Если Отказ
		ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.АвансыДоотгрузкаРасшифровка;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	

КонецПроцедуры

Процедура ОтразитьНДСГТДИмпорт(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаНДСГТДИмпорт;
	
	Если Отказ
		ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.НДСГТДИмпорт;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	

КонецПроцедуры

Процедура ОтразитьДанныеРеестраГТД(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДанныеРеестраГТД;
	
	Если Отказ
		ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ДанныеРеестраГТД;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	

КонецПроцедуры

Процедура ОтразитьСчетаФактурыПолученные(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСчетаФактурыПолученные;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.СчетаФактурыПолученные;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
	
	ДвиженияПоРегистру.Записывать = Истина;
	
КонецПроцедуры

Процедура ОтразитьСчетаФактурыВыписанные(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСчетаФактурыВыписанные;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.СчетаФактурыВыписанные;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
	
	ДвиженияПоРегистру.Записывать = Истина;
	
КонецПроцедуры

Процедура ОтразитьПараметрыУчетаОСЗемельныйНалог(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПараметрыУчетаОСЗемельныйНалог;
	
	Если Отказ
		ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ПараметрыУчетаОСЗемельныйНалог;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	

КонецПроцедуры

Процедура ОтразитьПараметрыУчетаОСЗемельныйНалогПодОбъектомИмущества(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПараметрыУчетаОСЗемельныйНалогПодОбъектомИмущества;
	
	Если Отказ
		ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ПараметрыУчетаОСЗемельныйНалогПодОбъектомИмущества;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////
// Счета фактуры

// Выполняет движения по РН "Поступления товаров"
Процедура ОтразитьПоступлениеТоваров(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПоступлениеТоваров;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ПоступлениеТоваров;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
	
	ДвиженияПоРегистру.Записывать = Истина;
	
КонецПроцедуры

// Выполняет движения регистра накопления "ДвижениеОСНУ"
Процедура ОтразитьВозвратПодотчетником(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаОтразитьВозвратПодотчетником;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ВозвратДенежныхСредствПодотчетником;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
		
КонецПроцедуры  

// Налоговый учет

// Выполняет движения регистра накопления "ОтразитьКорректировкиНУ".
//
Процедура ОтразитьКорректировкиНУ(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаКорректировкиНУ;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.КорректировкиНУ;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
		
КонецПроцедуры

// Выполняет движения регистра сведений "ОтразитьПлатежиПоНалогуНаПрибыль".
//
Процедура ОтразитьПлатежиПоНалогуНаПрибыль(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПлатежиПоНалогуНаПрибыль;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ПлатежиПоНалогуНаПрибыль;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
		
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////
// Производство

// Выполняет движения регистра сведений "СостояниеЗаказов".
//
Процедура ОтразитьСостояниеЗаказов(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСостояниеЗаказов;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.СостояниеЗаказов;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
		
КонецПроцедуры

// Выполняет движения регистра сведений "ВыполненныеРаботы".
//
Процедура ОтразитьВыполненныеРаботы(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаВыполненныеРаботы;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ВыполненныеРаботы;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
		
КонецПроцедуры

// Выполняет движения регистра сведений "ЗаказаннаяПродукция".
//
Процедура ОтразитьЗаказаннаяПродукция(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗаказаннаяПродукция;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ЗаказаннаяПродукция;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
		
КонецПроцедуры

// Выполняет движения регистра накопления "НезавершенноеПроизводство".
//
Процедура ОтразитьНезавершенноеПроизводство(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаНезавершенноеПроизводство;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.НезавершенноеПроизводство;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
		
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////
// Единый налог

// Выполняет движения по РН "Обороты по данным единого налога"
Процедура ОтразитьОборотыПоДаннымЕдиногоНалога(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ОборотыПоДаннымЕдиногоНалога;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ОборотыПоДаннымЕдиногоНалога;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
	
	ДвиженияПоРегистру.Записывать = Истина;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////
// Закупочный акт

// Выполняет движения по РН "Данные закупочных актов"
Процедура ОтразитьДанныеЗакупочныхАктов(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДанныеЗакупочныхАктов;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ДанныеЗакупочныхАктов;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
	
	ДвиженияПоРегистру.Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ДанныеПоНастройкамВеденияУчета

// Выборка учетной политики организации в структуру
//
// Параметры:
//  Период		 - Дата	- период, на который нужно получить значение учетной политики
//  Организация	 - СправочникСсылка.Организации	 - для отбора по организации
// Возвращаемое значение:
//   - 
Функция ПолучитьДанныеУчетнойПолитикиОрганизаций(Период, Организация) Экспорт
	Возврат БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(НачалоМесяца(Период), Организация)
КонецФункции

// Процедура - Проверить существование учетной политики по персоналу
//
// Параметры:
//  Период		 - Дата	 - период проверки
//  Организация	 - СправочникСсылка.Организации	 - Организация, значение учетной политики которой нужно проверить
//
Функция ПроверитьСуществованиеУчетнойПолитикиПоПерсоналу(Период, Организация) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетнаяПолитикаПоПерсоналуСрезПоследних.Организация
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаПоПерсоналу.СрезПоследних(&Период, Организация = &Организация) КАК УчетнаяПолитикаПоПерсоналуСрезПоследних";
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнена учетная политика по персоналу ""%1"".'"), 
				Организация);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	Иначе 
		Возврат Истина;
	КонецЕсли;	
	
КонецФункции // ПроверитьСуществованиеУчетнойПолитикиОрганизаций()

// Функция - Получить данные учетной политики по персоналу
//
// Параметры:
//  Дата		 - Дата							 - период, на который нужно получить значение учетной политики
//  Организация	 - СправочникСсылка.Организации	 - для отбора по организации
// Возвращаемое значение:
//   - Структура
Функция ПолучитьДанныеУчетнойПолитикиПоПерсоналу(Дата, Организация) Экспорт
	Возврат БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиПоПерсоналу(НачалоМесяца(Дата), Организация);
КонецФункции // ПолучитьУчетнуюПолитикуПоПерсоналу()

Функция СпособОценкиТМЗ(Период, Организация) Экспорт
	Возврат БухгалтерскийУчетВызовСервераПовтИсп.СпособОценкиТМЗ(НачалоМесяца(Период), Организация)
КонецФункции

// Функция возвращает возможные счета учета расчетов с контрагентом
//
// Параметры:
//  Организация - по которой выполняется поиск
//  Контрагент  - по которому выполняется поиск
//  Договор     - по которому выполняется поиск
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета расчетов
// 
// Алгоритм выпорки
// 1. Организация, Контрагент, Договор. 
// 2. Организация, Контрагент, Договор(пустая). 
// 3. Организация, ГруппаКонтрагентов по иерархии, Договор(пустая). 
// 4. Организация(пустая), Контрагент, Договор(пустая). 
// 5. Организация(пустая), ГруппаКонтрагентов по иерархии, Договор(пустая). 
// 6. Организация, Контрагент(пустая), Договор(пустая). 
// 7. Организация(пустая), Контрагент(пустая), Договор(пустая).
//
Функция ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, Договор) Экспорт
	Возврат БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, Договор);
КонецФункции // ПолучитьСчетаРасчетовСКонтрагентом()

// Функция возвращает возможные счета учета расчетов по НДС на импорт
//
// Параметры:
//  Организация - по которой выполняется поиск
//
// Возвращаемое значение:
//   - 
//
Функция ПолучитьСчетаРасчетовПоНДСНаИмпорт(Дата, Организация) Экспорт
	Возврат БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаРасчетовПоНДСНаИмпорт(Дата, Организация);
КонецФункции // ПолучитьСчетаРасчетовПоНДСНаИмпорт()

// Функция - Ответственные лица организаций
//
// Параметры:
//  Организация	 - СправочникСсылка.Организации	 - Организация, по которой нужно получить ответственных лиц 
//  Дата		 - Дата	 - Период среза
// 
// Возвращаемое значение:
//   - Соответствие
//
Функция ОтветственныеЛицаОрганизаций(Организация, Дата, ДополнительныеПараметры = Неопределено) Экспорт
	Возврат БухгалтерскийУчетВызовСервераПовтИсп.ОтветственныеЛицаОрганизаций(Организация, НачалоДня(Дата), ДополнительныеПараметры);
КонецФункции // ОтветственныеЛицаОрганизации()

// Функция - Ответственные лица организаций (Руководители)
//
// Параметры:
//  Организация	 - СправочникСсылка.Организации	 - Организация, по которой нужно получить ответственных лиц 
//  Дата		 - Дата	 - Период среза
// 
// Возвращаемое значение:
//   - Структура, только по предопределенным видам ответственных лиц
//
Функция ОтветственныеЛицаОрганизацийРуководители(Организация, Дата, ДополнительныеПараметры = Неопределено) Экспорт
	Возврат БухгалтерскийУчетВызовСервераПовтИсп.ОтветственныеЛицаОрганизацийРуководители(Организация, НачалоДня(Дата), ДополнительныеПараметры);
КонецФункции // ОтветственныеЛицаОрганизацийРуководители()

// Функция возвращает значение константы СтатьяДДСКурсоваяРазница.
// 
Функция СтатьяДДСКурсоваяРазница() Экспорт
	
	Возврат Константы.СтатьяДДСКурсоваяРазница.Получить();
	
КонецФункции // СтатьяДДСКурсоваяРазница()

// Функция возвращает значение константы СтатьяДДСДляВнутреннихОборотов.
// 
Функция СтатьяДДСДляВнутреннихОборотов() Экспорт
	
	Возврат Константы.СтатьяДДСДляВнутреннихОборотов.Получить();
	
КонецФункции // СтатьяДДСДляВнутреннихОборотов()

#КонецОбласти

#Область ПроцедурыРаботыСОрганизациямиКонтрагентамиФизЛицамиСкладами

// Функция возвращает сведения об организации.
//
// Параметры:
//  Организация       - ссылка на элемент справочника "Организации";
//  ДатаЗначения      - дата, на которую нужно получить сведения;
//  СписокПоказателей - список показателей, значения которых нужно вернуть.
//  
// Возвращаемое значение:
//  Структура с ключами из списка показателей и возвращаемыми значениями.
//
// Пример:
//	ОргСведения = Новый Структура;
//  Для Каждого Показатель Из СписокПоказателей Цикл
//  	ИмяПоказателя = Показатель.Представление;
//      Если ИмяПоказателя = "ИНН" Тогда
//      	Значение = Организация.ИНН;
//      ИначеЕсли ИмяПоказателя = "ОКПО" Тогда
//      	Значение = Организация.ОКПО;
//      Иначе
//      	Значение = "";
//      КонецЕсли;
//      ОргСведения.Вставить(ИмяПоказателя, Значение);
//  КонецЦикла;
//  Возврат ОргСведения;
//
Функция ПолучитьСведенияОбОрганизации(Знач Организация, Знач ДатаЗначения = Неопределено, Знач СписокПоказателей = Неопределено) Экспорт
	Если ДатаЗначения = Неопределено Тогда
		ДатаЗначения = ТекущаяДатаСеанса();
	КонецЕсли;

	Возврат БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСведенияОбОрганизации(Организация, КонецМесяца(ДатаЗначения), СписокПоказателей);
КонецФункции

// Функция возвращает сведения о контрагенте.
//
// Параметры:
//  Контрагент       - ссылка на элемент справочника "Контрагент";
//  СписокПоказателей - список показателей, значения которых нужно вернуть.
//  
// Возвращаемое значение:
//  Структура с ключами из списка показателей и возвращаемыми значениями.
//
Функция ПолучитьСведенияОКонтрагенте(Знач Контрагент, Знач СписокПоказателей = Неопределено) Экспорт
	Возврат БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСведенияОКонтрагенте(Контрагент, СписокПоказателей);
КонецФункции

// Функция возвращает сведения о Складе.
//
// Параметры:
//  Склад       	- ссылка на элемент справочника "Склады";
//  СписокПоказателей - список показателей, значения которых нужно вернуть.
//  
// Возвращаемое значение:
//  Структура с ключами из списка показателей и возвращаемыми значениями.
//
Функция ПолучитьСведенияОСкладе(Знач Склад, Знач СписокПоказателей = Неопределено) Экспорт
	Возврат БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСведенияОСкладе(Склад, СписокПоказателей);
КонецФункции

// Функция возвращает сведения о ФизЛице.
//
// Параметры:
//  ФизЛицо       - ссылка на элемент справочника "ФизическиеЛица";
//  Период      - дата, на которую нужно получить сведения;
//  СписокПоказателей - список показателей, значения которых нужно вернуть.
//  
// Возвращаемое значение:
//  Структура с ключами из списка показателей и возвращаемыми значениями.
//
Функция ПолучитьСведенияОФизЛице(Организация, ФизЛицо, Период, СписокПоказателей = Неопределено) Экспорт
	Возврат БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСведенияОФизЛице(Организация, ФизЛицо, КонецМесяца(Период), СписокПоказателей);
КонецФункции

// Процедура заполняет ФИО по наименованию сотрудника
//
Процедура ФамилияИнициалыПоНаименованию(ФИО, Наименование) Экспорт
	
	Если ПустаяСтрока(Наименование) Тогда
		Возврат;
	КонецЕсли;
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Наименование, " ");
	Фамилия		= МассивПодстрок[0];
	Имя 		= ?(МассивПодстрок.Количество() > 1, МассивПодстрок[1], "");
	Отчество	= ?(МассивПодстрок.Количество() > 2, МассивПодстрок[2], "");
	
	ФИО = ПолучитьФамилиюИмяОтчество(Фамилия, Имя, Отчество, Истина);
	
КонецПроцедуры // ФИОНаименованиеСотрудника()

// Функция формирует фамилию, имя и отчество одной строкой.
//
// Параметры
//  Фамилия      - фамилия физ. лица
//  Имя          - имя физ. лица
//  Отчество     - отчество физ. лица
//  ФИОКратко    - Булево - если Истина (по умолчанию), Представление физ.лица
//                 включает фамилию и инициалы, если Ложь - фамилию и полностью
//                 имя и отчество.
//
// Возвращаемое значение 
//  Фамилия, имя, отчество одной строкой.
//
Функция ПолучитьФамилиюИмяОтчество(Фамилия = " ", Имя = " ", Отчество = " ", ФИОКратко = Истина) Экспорт
	
	Если ФИОКратко Тогда
		Возврат ?(НЕ ПустаяСтрока(Фамилия),
			Фамилия 
			+ ?(НЕ ПустаяСтрока(Имя)," " + Лев(Имя,1) + "."
			+ ?(НЕ ПустаяСтрока(Отчество), Лев(Отчество,1)+".", ""), ""), "");
	Иначе
		Возврат ?(НЕ ПустаяСтрока(Фамилия), 
				Фамилия 
				+ ?(НЕ ПустаяСтрока(Имя)," " + Имя
				+ ?(НЕ ПустаяСтрока(Отчество)  , " " + Отчество, ""), ""), "");
	КонецЕсли;

КонецФункции // ПолучитьФамилиюИмяОтчество()

// Получение представления для документа, удостоверяющего личность.
//
// Параметры
//  ДанныеФизЛица - Коллекция данных физ. лица (структура, строка таблицы, ...),
//                 содержащая значения: ДокументВид, ДокументСерия,
//                 ДокументНомер, ДокументДатаВыдачи, ДокументКемВыдан.  
//
// Возвращаемое значение:
//   Строка      - Представление документа, удостоверяющего личность.
//
Функция ПолучитьПредставлениеДокументаФизЛица(ДанныеФизЛица) Экспорт

	Возврат Строка(ДанныеФизЛица.ДокументВид) 
			+ " серия " + ДанныеФизЛица.ДокументСерия
			+ ", номер " + ДанныеФизЛица.ДокументНомер
			+ ", выданный " + Формат(ДанныеФизЛица.ДокументДатаВыдачи, "ДЛФ=D") + " " + ДанныеФизЛица.ДокументКемВыдан;

КонецФункции // ПолучитьПредставлениеДокументаФизЛица()

// Получение признака патентщика у контрагента, при условии, что контрагент является физ.лицом.
//
// Параметры
//  Контрагент - Контрагент.  
//
// Возвращаемое значение:
//   Булево      - Истина если контрагент является юр.лицом и патентщиком.
//
Функция ПолучитьПризнакПатентаПоКонтрагенту(Контрагент) Экспорт
	
	Если Контрагент.ЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		Возврат Истина;
	КонецЕсли;	

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Патенты.Владелец КАК Владелец
	               |ИЗ
	               |	Справочник.Патенты КАК Патенты
	               |ГДЕ
	               |	Патенты.Владелец = &Контрагент";
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	

КонецФункции // ПолучитьПризнакПатентаПоКонтрагенту()

#КонецОбласти

#Область ПроцедурыФормированияПечатныхФорм

// Функция формирует представление суммы прописью в указанной валюте
//
// Параметры:
//  Сумма        - число - реквизит, который надо представить прописью 
//  Валюта       - СправочникСсылка.Валюты - валюта, в которой нужно представить
//                 сумму (По умолчанию будет подставлена- ВалютаРегламентированногоУчета)
//  ВыводитьСуммуБезКопеек - булево - флаг представления суммы без копеек.
//
// Возвращаемое значение
//  Отформатированная строка.
//
Функция СформироватьСуммуПрописью(Сумма, Валюта = Неопределено, ВыводитьСуммуБезКопеек = Ложь) Экспорт
	
	Если Валюта = Неопределено Тогда 
		Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;	
	
	Если Валюта.ПараметрыПрописи = "" Тогда
		Возврат ФорматСумм(Сумма);
	КонецЕсли;
	
	Результат     = Сумма;
	ЦелаяЧасть    = Цел(Сумма);
	ФорматСтрока  = "Л=ru_RU; ДП=Ложь";
	ПарамПредмета = Валюта.ПараметрыПрописи;
	
	Если Результат = ЦелаяЧасть Тогда
		Если ВыводитьСуммуБезКопеек Тогда
			Результат = ЧислоПрописью(Результат, ФорматСтрока, ПарамПредмета);
			Результат = Лев(Результат, Найти(Результат, "0") - 1);
		Иначе
			Результат = ЧислоПрописью(Результат, ФорматСтрока, ПарамПредмета);
		КонецЕсли;
	Иначе
		Результат = ЧислоПрописью(Результат, ФорматСтрока, ПарамПредмета);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ФорматироватьСуммуПрописьюПлатежногоДокумента()

// Функция формирует представление суммы с указанной валютой
//
// Параметры:
//  Сумма        - число - реквизит, который надо представить прописью 
//  Валюта       - СправочникСсылка.Валюты - валюта, в которой нужно представить
//                 сумму (По умолчанию будет подставлена- ВалютаРегламентированногоУчета)
//
// Возвращаемое значение
//  Отформатированная строка.
//
Функция СформироватьСуммуСВалютой(Сумма, Валюта = Неопределено) Экспорт
	
	ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=2";
	
	РезультирующаяСтрока = СокрЛ(Формат(Сумма, ФорматнаяСтрока));

	Если Валюта = Неопределено Тогда 
		Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;

	Если Валюта.ПараметрыПрописи = "" Тогда
		Возврат ФорматСумм(Сумма);
	Иначе
		СтрокаПараметров = СтрЗаменить(Валюта.ПараметрыПрописи, ",", Символы.ПС);
		НовыеПараметрыПрописи = СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 1)) + ","
								+ СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 2)) + ","
								+ СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 3)) + ","
								+ СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 4)) + ","
								+ СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 5)) + ","
								+ СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 6)) + ","
								+ СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 7)) + ","
								+ СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 8)) + ","
								+ 2;

		ЗначимаяЧасть = ЧислоПрописью(Сумма,, НовыеПараметрыПрописи);
		ЧисловаяЧасть = ЧислоПрописью(Цел(Сумма),, ",,,,,,,,0");
		РезультирующаяСтрока = СтрЗаменить(ЗначимаяЧасть, СокрП(ЧисловаяЧасть), Цел(Сумма) + " ");
	КонецЕсли;
	
	Возврат РезультирующаяСтрока;

КонецФункции // СформироватьСуммуСВалютой()

// Стандартная для данной конфигурации функция форматирования сумм
//
// Параметры: 
//  Сумма  - число, которое мы хотим форматировать, 
//  Валюта - ссылка на элемент справочника валют, если задан, то к в результирующую строку
//           будет добавлено представление валюты
//  ЧН     - строка, представляющая нулевое значение числа,
//  ЧРГ    - символ-разделитель групп целой части числа.
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление суммы.
//
Функция ФорматСумм(Сумма, Валюта = Неопределено, ЧН = "", ЧРГ = "", ЧРД = "", ВалютаПрописью = Ложь) Экспорт

	ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=2" 
					+ ?(НЕ ЗначениеЗаполнено(ЧН), "", ";" + "ЧН=" + ЧН)
					+ ?(НЕ ЗначениеЗаполнено(ЧРГ),"", ";" + "ЧРГ=" + ЧРГ)
					+ ?(НЕ ЗначениеЗаполнено(ЧРД),"", ";" + "ЧРД=" + ЧРД);
					
	РезультирующаяСтрока = СокрЛ(Формат(Сумма, ФорматнаяСтрока));
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		Если ВалютаПрописью И НЕ СокрЛП(Валюта.ПараметрыПрописи) = "" Тогда 
			СтрокаПараметров = СтрЗаменить(Валюта.ПараметрыПрописи, ",", Символы.ПС);
			НовыеПараметрыПрописи = СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 1)) + ","
									+ СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 2)) + ","
									+ СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 3)) + ","
									+ СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 4)) + ","
									+ СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 5)) + ","
									+ СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 6)) + ","
									+ СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 7)) + ","
									+ СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 8)) + ","
									+ 0;
	
	
			ЗначимаяЧасть = ЧислоПрописью(Цел(Сумма),"ru_RU; НП = Ложь; ДП = Ложь", НовыеПараметрыПрописи);
			ЧисловаяЧасть = ЧислоПрописью(Цел(Сумма),"ru_RU; НП = Ложь; ДП = Ложь", ",,,,,,,,0");
			РезультирующаяСтрока = СтрЗаменить(ЗначимаяЧасть, ЧисловаяЧасть, РезультирующаяСтрока + " ");
		Иначе			
			РезультирующаяСтрока = РезультирующаяСтрока + " " + СокрП(Валюта);
		КонецЕсли;	
	КонецЕсли;

	Возврат РезультирующаяСтрока;

КонецФункции // ФорматСумм()

// Стандартная для данной конфигурации функция форматирования прописи количества
//
// Параметры: 
//  Количество - число, которое мы хотим форматировать
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление количества.
//
Функция КоличествоПрописью(Количество) Экспорт

	ЦелаяЧасть   = Цел(Количество);
	ДробнаяЧасть = Окр(Количество - ЦелаяЧасть, 3);

	Если ДробнаяЧасть = Окр(ДробнаяЧасть,0) Тогда
		ПараметрыПрописи = ", , , , , , , , 0";
	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 1) Тогда
		ПараметрыПрописи = "целая, целых, целых, ж, десятая, десятых, десятых, м, 1";
	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 2) Тогда
		ПараметрыПрописи = "целая, целых, целых, ж, сотая, сотых, сотых, м, 2";
	Иначе
		ПараметрыПрописи = "целая, целых, целых, ж, тысячная, тысячных, тысячных, м, 3";
	КонецЕсли;

	Возврат ЧислоПрописью(Количество, ,ПараметрыПрописи);

КонецФункции // КоличествоПрописью()

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

// Процедура записывает переданный справочник объект и выводит сообщение.
//  Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
//
// Параметры:
//  СправочникОбъект	 - СправочникОбъект	 - Объект, который требуется записать.
//  Сообщать			 - Булево			 - Признак вывода сообщения пользователю (по умолчанию Ложь).
//  Отказ				 - Булево			 - Признак отказа записи (по умолчанию Ложь).
//  ОбменДаннымиЗагрузка - Булево			 - Признак установки режима обмена данными (по умолчанию Истина).
//
Процедура ЗаписатьСправочникОбъект(СправочникОбъект, Сообщать = Ложь, Отказ = Ложь, ОбменДаннымиЗагрузка = Истина) Экспорт

	Если НЕ СправочникОбъект.Модифицированность() Тогда
		Возврат;
	КонецЕсли;

	Если СправочникОбъект.ЭтоНовый() Тогда
		Если СправочникОбъект.ЭтоГруппа Тогда
			СтрСообщения = НСтр("ru = 'Создана группа справочника ""%1"", код: ""%2"", наименование: ""%3""'") ;
		Иначе
			СтрСообщения = НСтр("ru = 'Создан элемент справочника ""%1"", код: ""%2"", наименование: ""%3""'") ;
		КонецЕсли;
		
		ТекстОповещения = НСтр("ru = 'Добавление'")
	Иначе
		Если СправочникОбъект.ЭтоГруппа Тогда
			СтрСообщения = НСтр("ru = 'Обработана группа справочника ""%1"", код: ""%2"", наименование: ""%3""'") ;
		Иначе
			СтрСообщения = НСтр("ru = 'Обработан элемент справочника ""%1"", код: ""%2"", наименование: ""%3""'") ;
		КонецЕсли; 
		
		ТекстОповещения = НСтр("ru = 'Изменение'")
	КонецЕсли;

	Если ОбменДаннымиЗагрузка Тогда 
		СправочникОбъект.ОбменДанными.Загрузка = Истина;
	КонецЕсли;	
	
	Если СправочникОбъект.Метаданные().ДлинаКода > 0 Тогда
		СправочникОбъект.УстановитьНовыйКод();
		ПолныйКод = СправочникОбъект.ПолныйКод();
	Иначе
		ПолныйКод = НСтр("ru = '<без кода>'");
	КонецЕсли; 
	СтрСообщения = СтрШаблон(СтрСообщения, СправочникОбъект.Метаданные().Синоним, ПолныйКод, СправочникОбъект.Наименование);

	Попытка
		СправочникОбъект.Записать();
		Если Сообщать = Истина Тогда
			ОбщегоНазначения.СообщитьПользователю(СтрСообщения, СправочникОбъект);	
		КонецЕсли;

	Исключение
		Отказ = Истина;
		
		ТекстСообщения = НСтр("ru = 'Не удалось завершить действие: %1'", ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстСообщения = СтрШаблон(ТекстСообщения, СтрСообщения);

		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);

		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание + "; " + ОписаниеОшибки.Причина.Описание);

	КонецПопытки;

КонецПроцедуры

// Выводит сообщение об ошибке заполнения поля.
//
Процедура СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения, ИмяТабличнойЧасти = Неопределено, НомерСтроки = Неопределено, Поле = Неопределено, Отказ = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = ТекстСообщения;
	
	Если ИмяТабличнойЧасти <> Неопределено Тогда
		Сообщение.Поле = ИмяТабличнойЧасти + "[" + Формат(НомерСтроки - 1, "ЧН=0; ЧГ=0") + "]." + Поле;
	ИначеЕсли ЗначениеЗаполнено(Поле) Тогда
		Сообщение.Поле = Поле;
	КонецЕсли;
	
	Сообщение.УстановитьДанные(ЭтотОбъект);
	
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры // СообщитьОбОшибке()

// Позволяет определить есть ли среди реквизитов шапки документа
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Экспорт

	Возврат НЕ (МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) = Неопределено);

КонецФункции // ЕстьРеквизитДокумента()

// Процедура удаляет проверяемый реквизит из массива проверяемых реквизитов.
//
Процедура УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, ПроверяемыйРеквизит) Экспорт
	
	НайденныйРеквизит = ПроверяемыеРеквизиты.Найти(ПроверяемыйРеквизит);
	Если ЗначениеЗаполнено(НайденныйРеквизит) Тогда
		ПроверяемыеРеквизиты.Удалить(НайденныйРеквизит);
	КонецЕсли;
	
КонецПроцедуры // УдалитьПроверяемыйРеквизит()

// См. ОбщегоНазначенияБПСервер.УстановитьЗначениеПоУмолчанию
//
Процедура УстарелаУстановитьНастройкуПользователя(ЗначениеНастройки, ИмяНастройки, Пользователь = Неопределено) Экспорт
	Возврат;	
КонецПроцедуры // УстановитьНастройкуПользователя()

// Процедура устанавливает условное оформление.
//
Процедура ВыделитьЖирнымОсновнойЭлемент(ВыбранныйЭлемент, Список, ИмяНастройки = "ОсновнойЭлемент") Экспорт
	
	СписокУдаляемыхЭлементов = Новый СписокЗначений;
	Для каждого ЭлементУсловногоОформления Из Список.УсловноеОформление.Элементы Цикл
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяНастройки Тогда
			СписокУдаляемыхЭлементов.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	Для каждого Элемент Из СписокУдаляемыхЭлементов Цикл
		Список.УсловноеОформление.Элементы.Удалить(Элемент.Значение);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ВыбранныйЭлемент) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементУсловногоОформления = Список.УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ВыбранныйЭлемент;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(, , Истина));
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяНастройки;
	ЭлементУсловногоОформления.Представление = НСтр("ru = 'Выделение основного элемента'");
	
КонецПроцедуры

// Процедура определяет ситуацию, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в это м случае
// присваивает документу новый уникальный номер.
//
// Параметры:
//  ДокументСсылка - ссылка на документ,из которого вызвана процедура 
//  НоваяДатаДокумента - новая дата документа 
//  НачальнаяДатаДокумента - начальная дата документа 
//
// Возвращаемое значение:
//  Число - разность дат.
//
Функция ПроверитьНомерДокумента(ДокументСсылка, НоваяДатаДокумента, НачальнаяДатаДокумента) Экспорт
	
	// Определяем назначенную для данного вида документов периодичность смены номера
	ПериодСменыНомера = ДокументСсылка.Метаданные().ПериодичностьНомера;
	
	// В зависимости от установленной периодичности смены номеров,
	// определяем разность старой и новой датами документа.
	Если ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
		РазностьДат = НачалоГода(НачальнаяДатаДокумента) - НачалоГода(НоваяДатаДокумента);
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
		РазностьДат = НачалоКвартала(НачальнаяДатаДокумента) - НачалоКвартала(НоваяДатаДокумента);
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
		РазностьДат = НачалоМесяца(НачальнаяДатаДокумента) - НачалоМесяца(НоваяДатаДокумента);
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День Тогда
		РазностьДат = НачальнаяДатаДокумента - НоваяДатаДокумента;
	Иначе
		Возврат 0;
	КонецЕсли;
	
	Возврат РазностьДат;
	
КонецФункции // ПроверитьНомерДокумента()

Функция НовыйИнвентарныйНомерОС() Экспорт
	ИнвентарныйНомер = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПараметрыУчетаОССрезПоследних.ИнвентарныйНомер КАК ИнвентарныйНомер
		|ИЗ
		|	РегистрСведений.ПараметрыУчетаОС.СрезПоследних КАК ПараметрыУчетаОССрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИнвентарныйНомер УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий()
		И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ВыборкаДетальныеЗаписи.ИнвентарныйНомер) Тогда
		ПоследнийНомерСтрока = СокрЛП(ВыборкаДетальныеЗаписи.ИнвентарныйНомер);
		Если ЗначениеЗаполнено(ПоследнийНомерСтрока) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПоследнийНомерСтрока) Тогда
			ДлинаСтроки = СтрДлина(ПоследнийНомерСтрока);
			ПоследнийНомерЧисло = Число(ПоследнийНомерСтрока);
		Иначе
			ДлинаСтроки = 20;
		    ПоследнийНомерЧисло = 0;
		КонецЕсли;
		
		НовыйНомер = ПоследнийНомерЧисло + 1;
		ИнвентарныйНомер = Формат(НовыйНомер, "ЧЦ=" + ДлинаСтроки + "; ЧВН=; ЧГ=0");
	КонецЕсли;
	
	Возврат ИнвентарныйНомер;

КонецФункции // ()

#КонецОбласти

#Область СпискиСчетов

// Получает список счетов расчетов с контрагентами
//  Параметры:
// 	ИсключенныеСчета - Массив - список счетов исключений,
// 
// Возвращаемое значение:
// 	Массив - Массив счетов
//		* СчетСсылка
//
Функция СчетаРасчетовСКонтрагентами(ИсключенныеСчета = Неопределено) Экспорт
	
	СписокСчетов = БухгалтерскийУчетПовтИсп.СчетаРасчетовСКонтрагентами();
	Если НЕ ИсключенныеСчета = Неопределено Тогда
		СписокСчетов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СписокСчетов, ИсключенныеСчета); 
	КонецЕсли;	

	Возврат СписокСчетов;
	
КонецФункции

// Получает список счетов расчетов с подотчетными лицами.
//  Параметры:
// 	ИсключенныеСчета - Массив - список счетов исключений,
// 
// Возвращаемое значение:
// 	Массив - Массив счетов
//		* СчетСсылка
//
Функция СчетаРасчетовСПодотчетнымиЛицами(ИсключенныеСчета = Неопределено) Экспорт
	
	СписокСчетов = БухгалтерскийУчетПовтИсп.СчетаРасчетовСПодотчетнымиЛицами();
	Если НЕ ИсключенныеСчета = Неопределено Тогда
		СписокСчетов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СписокСчетов, ИсключенныеСчета); 
	КонецЕсли;	

	Возврат СписокСчетов;
	
КонецФункции


// Получает список счетов основных средств.
//  Параметры:
// 	ИсключенныеСчета - Массив - список счетов исключений,
// 
// Возвращаемое значение:
// 	Массив - Массив счетов
//		* СчетСсылка
//
Функция СчетаУчетаОсновныхСредств(ИсключенныеСчета = Неопределено) Экспорт
	
	СписокСчетов = БухгалтерскийУчетПовтИсп.СчетаУчетаОсновныхСредств();
	Если НЕ ИсключенныеСчета = Неопределено Тогда
		СписокСчетов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СписокСчетов, ИсключенныеСчета); 
	КонецЕсли;	

	Возврат СписокСчетов;
	
КонецФункции

// Получает список счетов накопленной амортизации основных средств.
//  Параметры:
// 	ИсключенныеСчета - Массив - список счетов исключений,
// 
// Возвращаемое значение:
// 	Массив - Массив счетов
//		* СчетСсылка
//
Функция СчетаУчетаНакопленнойАмортизацииОсновныхСредств(ИсключенныеСчета = Неопределено) Экспорт
	
	СписокСчетов = БухгалтерскийУчетПовтИсп.СчетаУчетаНакопленнойАмортизацииОсновныхСредств();
	Если НЕ ИсключенныеСчета = Неопределено Тогда
		СписокСчетов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СписокСчетов, ИсключенныеСчета); 
	КонецЕсли;	

	Возврат СписокСчетов;
	
КонецФункции

// Получает список счетов нематериальных активов.
//  Параметры:
// 	ИсключенныеСчета - Массив - список счетов исключений,
// 
// Возвращаемое значение:
// 	Массив - Массив счетов
//		* СчетСсылка
//
Функция СчетаУчетаНематериальныхАктивов(ИсключенныеСчета = Неопределено) Экспорт
	
	СписокСчетов = БухгалтерскийУчетПовтИсп.СчетаУчетаНематериальныхАктивов();
	Если НЕ ИсключенныеСчета = Неопределено Тогда
		СписокСчетов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СписокСчетов, ИсключенныеСчета); 
	КонецЕсли;	

	Возврат СписокСчетов;
	
КонецФункции

// Получает список счетов накопленной амортизации нематериальных активов.
//  Параметры:
// 	ИсключенныеСчета - Массив - список счетов исключений,
// 
// Возвращаемое значение:
// 	Массив - Массив счетов
//		* СчетСсылка
//
Функция СчетаУчетаНакопленнойАмортизацииНематериальныхАктивов(ИсключенныеСчета = Неопределено) Экспорт
	
	СписокСчетов = БухгалтерскийУчетПовтИсп.СчетаУчетаНакопленнойАмортизацииНематериальныхАктивов();
	Если НЕ ИсключенныеСчета = Неопределено Тогда
		СписокСчетов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СписокСчетов, ИсключенныеСчета); 
	КонецЕсли;	

	Возврат СписокСчетов;
	
КонецФункции

// Получает список счетов денежных средств.
//  Параметры:
// 	ИсключенныеСчета - Массив - список счетов исключений,
// 
// Возвращаемое значение:
// 	Массив - Массив счетов
//		* СчетСсылка
//
Функция СчетаУчетаДенежныхСредств(ИсключенныеСчета = Неопределено) Экспорт
	
	СписокСчетов = БухгалтерскийУчетПовтИсп.СчетаУчетаДенежныхСредств();
	Если НЕ ИсключенныеСчета = Неопределено Тогда
		СписокСчетов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СписокСчетов, ИсключенныеСчета); 
	КонецЕсли;	

	Возврат СписокСчетов;
	
КонецФункции

// Получает список счетов товаров.
//  Параметры:
// 	ИсключенныеСчета - Массив - список счетов исключений,
// 
// Возвращаемое значение:
// 	Массив - Массив счетов
//		* СчетСсылка
//
Функция СчетаУчетаТоваров(ИсключенныеСчета = Неопределено) Экспорт
	
	СписокСчетов = БухгалтерскийУчетПовтИсп.СчетаУчетаТоваров();
	Если НЕ ИсключенныеСчета = Неопределено Тогда
		СписокСчетов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СписокСчетов, ИсключенныеСчета); 
	КонецЕсли;	

	Возврат СписокСчетов;
	
КонецФункции

// Получает список счетов МБП.
//  Параметры:
// 	ИсключенныеСчета - Массив - список счетов исключений,
// 
// Возвращаемое значение:
// 	Массив - Массив счетов
//		* СчетСсылка
//
Функция СчетаУчетаМБП(ИсключенныеСчета = Неопределено) Экспорт
	
	СписокСчетов = БухгалтерскийУчетПовтИсп.СчетаУчетаМБП();
	Если НЕ ИсключенныеСчета = Неопределено Тогда
		СписокСчетов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СписокСчетов, ИсключенныеСчета); 
	КонецЕсли;	

	Возврат СписокСчетов;
	
КонецФункции

// Получает список счетов материалов переданных в переработку.
//  Параметры:
// 	ИсключенныеСчета - Массив - список счетов исключений,
// 
// Возвращаемое значение:
// 	Массив - Массив счетов
//		* СчетСсылка
//
Функция СчетаУчетаМатериаловВПереработку(ИсключенныеСчета = Неопределено) Экспорт
	
	СписокСчетов = БухгалтерскийУчетПовтИсп.СчетаУчетаМатериаловВПереработку();
	Если НЕ ИсключенныеСчета = Неопределено Тогда
		СписокСчетов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СписокСчетов, ИсключенныеСчета); 
	КонецЕсли;	

	Возврат СписокСчетов;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует массив имен регистров, по которым есть движения документа.
//
Функция ПолучитьМассивИменИспользуемыхРегистров(Регистратор, МетаданныеДокумента)
	
	МассивРегистров = Новый Массив;
	ТекстЗапроса = "";
	СчетчикТаблиц = 0;
	СчетчикЦикла = 0;
	ВсегоРегистров = МетаданныеДокумента.Движения.Количество();
	
	Для каждого Движение Из МетаданныеДокумента.Движения Цикл
		
		Если СчетчикТаблиц > 0 Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|";
			
		КонецЕсли;
		
		СчетчикТаблиц = СчетчикТаблиц + 1;
		СчетчикЦикла = СчетчикЦикла + 1;
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|""" + Движение.Имя + """ КАК ИмяРегистра
		|
		|ИЗ " + Движение.ПолноеИмя() + "
		|
		|ГДЕ Регистратор = &Регистратор
		|";
		
		Если СчетчикТаблиц = 256 ИЛИ СчетчикЦикла = ВсегоРегистров Тогда
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Регистратор", Регистратор);
			
			ТекстЗапроса  = "";
			СчетчикТаблиц = 0;
			
			Если МассивРегистров.Количество() = 0 Тогда
				
				МассивРегистров = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяРегистра");
				
			Иначе
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					МассивРегистров.Добавить(Выборка.ИмяРегистра);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивРегистров;
	
КонецФункции // ПолучитьМассивИменИспользуемыхРегистров()

#КонецОбласти