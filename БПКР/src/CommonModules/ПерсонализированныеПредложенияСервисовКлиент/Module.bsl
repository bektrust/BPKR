#Область ПрограммныйИнтерфейс

// Вызывает форму, которую нужно открыть при нажатии на гиперссылку в баннере.
// Параметры:
// 		НавигационнаяСсылка - Строка
// 		СтандартнаяОбработка - Булево
// 		Баннер - Произвольный - см. ПерсонализированныеПредложенияСервисов.НовыйБаннерДляСписка()
// 		Форма - Форма, в которой произошло нажатие на навигационную ссылку
//
Процедура ПерейтиПоСсылкеБаннера(НавигационнаяСсылка, СтандартнаяОбработка, Баннер, Форма) Экспорт
	
	Если НавигационнаяСсылка = ИдентификаторБаннераКоличествоКонтрагентов() Тогда
		
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура("Баннер", Баннер);
		ОткрытьФорму("ОбщаяФорма.Реклама1СКонтрагент", ПараметрыФормы);
	
	ИначеЕсли НавигационнаяСсылка = ИдентификаторБаннераПоддержкаСервиса() Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекущееСообщение = Баннер.ДанныеБаннера.ДанныеСобытия;
		ТипИнформации    = Строка(ТекущееСообщение.ТипИнформации);
		Если ТипИнформации = "Недоступность" Или ТипИнформации = "Новость" Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ОткрытьНовость", Истина);
			ПараметрыФормы.Вставить("Идентификатор",  ТекущееСообщение.Идентификатор);
			ОткрытьФорму("Обработка.ИнформационныйЦентр.Форма.ОтображениеСообщений", ПараметрыФормы);
		ИначеЕсли ТипИнформации = "УведомлениеОПожелании" Тогда
			ИдентификаторИдеи = Строка(ТекущееСообщение.Идентификатор);
			ИнформационныйЦентрКлиент.ПоказатьИдею(ИдентификаторИдеи);
		КонецЕсли;
		
	ИначеЕсли НавигационнаяСсылка = ИдентификаторБаннераКоличествоСчетовНаОплату() Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ОткрытьНастройкиПериодическоеСозданиеДокументов", Истина);
		
		ОткрытьФорму("Обработка.ПанельАдминистрированияБП.Форма.РазделПараметрыУчета", ПараметрыФормы);
		
	ИначеЕсли НавигационнаяСсылка = ИдентификаторБаннераМоиЗадачи() Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ОткрытьМоиЗадачи", Истина);
		
		ОткрытьФорму("Обработка.ПанельАдминистрированияБСП.Форма.Органайзер", ПараметрыФормы);
		
	ИначеЕсли НавигационнаяСсылка = ИдентификаторБаннераСервисыКР() Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Обработка.ПанельАдминистрированияБСП.Форма.ИнтернетПоддержкаИСервисы");
		
	ИначеЕсли НавигационнаяСсылка = ИдентификаторБаннераАвтоматическаяЗагрузкаПатчей() Тогда
		
		СтандартнаяОбработка = Ложь;
		
		// Переходим в панель администрирования БИП.
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ФокусНаФлагеАвтозагрузкаПатчей", Истина);
		ОткрытьФорму("Обработка.ПанельАдминистрированияБСП.Форма.ИнтернетПоддержкаИСервисы", ПараметрыФормы);
		
	ИначеЕсли НавигационнаяСсылка = ИдентификаторБаннераУстановитьДатуЗапрета() Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Баннер.ДанныеБаннера.ОткрытьНастройкиПользователейИПрав Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ФокусНаФлагеИспользоватьДатыЗапретаИзменения", Истина);
			ОткрытьФорму("Обработка.ПанельАдминистрированияБСП.Форма.НастройкиПользователейИПрав", ПараметрыФормы);
			
		ИначеЕсли Баннер.ДанныеБаннера.ОткрытьДатыЗапретаИзмененияДанных Тогда
			
			ДатыЗапретаИзмененияСлужебныйКлиент.ОткрытьДатыЗапретаИзмененияДанных(Неопределено);
			
		ИначеЕсли Баннер.ДанныеБаннера.ОткрытьСинхронизациюДанных Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ФокусНаФлагеИспользоватьДатыЗапрета", Истина);
			ОткрытьФорму("Обработка.ПанельАдминистрированияБСП.Форма.СинхронизацияДанных", ПараметрыФормы);
			
		Иначе
			
			ДатыЗапретаИзмененияСлужебныйКлиент.ОткрытьДатыЗапретаЗагрузкиДанных(Неопределено);
			
		КонецЕсли;
		
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодключитьТестовыйПериодЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяФормы = СтрШаблон("Отчет.%1.ФормаОбъекта", ДополнительныеПараметры.ИмяОтчета);
	ОткрытьФорму(ИмяФормы);
	
КонецПроцедуры

Процедура УстановитьРежимОжиданияНаБаннере(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	Элементы.ТекстБаннера.Видимость = Ложь;
	Элементы.КартинкаБаннера.Видимость = Ложь;
	Элементы.ГруппаБаннерОжидание.Видимость = Истина;
	
	Элементы.КартинкаЗакрытьБаннер.Доступность = Ложь;
	Элементы.КартинкаПредыдущийБаннер.Доступность = Ложь;
	Элементы.КартинкаСледующийБаннер.Доступность = Ложь;
	
КонецПроцедуры

Функция ИнтервалПереключенияБаннеров() Экспорт
	
	Возврат 60 * 60; // 1 час
	
КонецФункции

// Процедура закрывает баннер на форме.
// Параметры:
//		Форма - ФормаКлиентскогоПриложения - Форма на которой нужно закрыть баннер.
//		Организация - СправочникСсылка.Организации - Организация, по которой ищем баннер.
//
Процедура ЗакрытьБаннер(Форма, Организация) Экспорт
	
	// Закроем баннер на форме.
	Баннер = Форма.Баннер;
	Форма.Баннер = Неопределено;
	Форма.Элементы.Баннер.Видимость = Ложь;
	ПерсонализированныеПредложенияСервисовВызовСервера.ОбработатьЗакрытиеБаннера(Баннер, Организация);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РазборДвоичныхДанныхASN1

Функция ПрочитатьСвойстваБлока(ЧтениеДанных, ВернутьУказательВНачало = Ложь)
	
	Свойства = Новый Структура;
	
	Буфер = ЧтениеДанных.ПрочитатьВБуферДвоичныхДанных(1);
	ПроскроллитьНазад = 1;
	
	МаскаКлассБлока = 192;   // 1100 0000
	МаскаТег = 31;           // 0001 1111
	МаскаЗначащиеБиты = 127; // 0111 1111
	МаскаСтаршийБит = 128;   // 1000 0000
	
	Свойства.Вставить("Класс", ПобитовоеИ(Буфер[0], МаскаКлассБлока));
	Свойства.Вставить("Тег", ПобитовоеИ(Буфер[0], МаскаТег));
		
	// Прочитать размер блока
	Буфер = ЧтениеДанных.ПрочитатьВБуферДвоичныхДанных(1);
	ПроскроллитьНазад = ПроскроллитьНазад + 1;
	
	// Используется потоковый способ кодирования, т.е. размер блока не указан (окончание блока 00 00)
	Если Буфер[0] = 128 Тогда
		РазмерБлока = -1;
	Иначе
		ДлинныйРазмер = Булево(ПобитовоеИ(Буфер[0], МаскаСтаршийБит));
		Если ДлинныйРазмер Тогда
			КоличествоБайтовПодРазмер = ПобитовоеИ(Буфер[0], МаскаЗначащиеБиты);
			Буфер = ЧтениеДанных.ПрочитатьВБуферДвоичныхДанных(КоличествоБайтовПодРазмер);
			ПроскроллитьНазад = ПроскроллитьНазад + КоличествоБайтовПодРазмер;
			РазмерБлока = 0;
			Для Каждого Байт Из Буфер Цикл
				РазмерБлока = РазмерБлока * 256 + Байт;
			КонецЦикла;
		Иначе
			РазмерБлока = ПобитовоеИ(Буфер[0], МаскаЗначащиеБиты);	
		КонецЕсли;
	КонецЕсли;
	
	Свойства.Вставить("РазмерБлока", РазмерБлока);
	Свойства.Вставить("РазмерБлокаПолный", ПроскроллитьНазад + РазмерБлока);
	
	Если ВернутьУказательВНачало Тогда 
		ПотокДанных = ЧтениеДанных.ИсходныйПоток();
		ЧтениеДанных.Закрыть();
		ПотокДанных.Перейти(-ПроскроллитьНазад, ПозицияВПотоке.Текущая);
		ЧтениеДанных = Новый ЧтениеДанных(ПотокДанных);		
	КонецЕсли;
	
	Возврат Свойства;
	
КонецФункции

Процедура ПропуститьБлок(ЧтениеДанных, СколькоБайт)
	
	Если СколькоБайт > 0 Тогда 
		ЧтениеДанных.Пропустить(СколькоБайт);
	КонецЕсли;
	
КонецПроцедуры

Функция СертификатИмеетПоляКоторыеНевозможноРаспарсить(ДанныеСертификата)
	
	ЧтениеДанных = Новый ЧтениеДанных(ДанныеСертификата);
	ПрочитатьСвойстваБлока(ЧтениеДанных); // SEQUENCE
	ПрочитатьСвойстваБлока(ЧтениеДанных); // SEQUENCE
	Свойства = ПрочитатьСвойстваБлока(ЧтениеДанных, Истина);
	
	ВсегоИтераций = 0;
	// Перебираем все SEQUENCE третьего уровня
	// в которых есть вложенные даты типа UTCTime или GeneralizedTime
	Пока Не ЧтениеДанных.ЧтениеЗавершено Цикл
		
		ВсегоИтераций = ВсегоИтераций + 1;
		Если ВсегоИтераций > 4 Тогда //Странная структура, возможно поврежденный файл
			Прервать;
		КонецЕсли;
		
		Пока Свойства.Тег <> 16 Цикл 			
			ПропуститьБлок(ЧтениеДанных, Свойства.РазмерБлокаПолный);
			Свойства = ПрочитатьСвойстваБлока(ЧтениеДанных, Истина);
		КонецЦикла;	
		
		//Ищем SEQUENCE с вложенным тегом определенного типа
		Свойства = ПрочитатьСвойстваБлока(ЧтениеДанных);
		СвойстваВложенного = ПрочитатьСвойстваБлока(ЧтениеДанных, Истина);	
		Если СвойстваВложенного.Тег = 23 Тогда // UTCTime
			ЧтениеДанных.Закрыть();	
			Возврат Ложь;
		ИначеЕсли СвойстваВложенного.Тег = 24 Тогда // GeneralizedTime
			ЧтениеДанных.Закрыть();	
			Возврат Истина;
		КонецЕсли;	
		
		ПропуститьБлок(ЧтениеДанных, Свойства.РазмерБлока); //SEQUENCE	
		Свойства = ПрочитатьСвойстваБлока(ЧтениеДанных, Истина);
 	КонецЦикла;
	
	ЧтениеДанных.Закрыть();	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ИдентификаторыБаннеров

Функция ИдентификаторБаннераКоличествоКонтрагентов()
	
	Возврат "КоличествоКонтрагентов";
	
КонецФункции

Функция ИдентификаторБаннераПоддержкаСервиса()
	
	Возврат "ПоддержкаСервиса";
	
КонецФункции

Функция ИдентификаторБаннераКоличествоСчетовНаОплату()

	Возврат "КоличествоСчетовНаОплату";

КонецФункции

Функция ИдентификаторБаннераМоиЗадачи()

	Возврат "МоиЗадачи";

КонецФункции

Функция ИдентификаторБаннераСервисыКР()

	Возврат "СервисыКР";

КонецФункции

Функция ИдентификаторБаннераАвтоматическаяЗагрузкаПатчей()

	Возврат "АвтоматическаяЗагрузкаПатчей";

КонецФункции

Функция ИдентификаторБаннераУстановитьДатуЗапрета()

	Возврат "УстановитьДатуЗапрета";

КонецФункции

#КонецОбласти

#КонецОбласти
