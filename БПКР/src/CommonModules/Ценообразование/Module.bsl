
#Область ПрограммныйИнтерфейс

// Функция возвращает цену компании для требуемой номенклатуры в указанном типе цен, 
// на заданную дату, пересчитанную в требуемую валюту по заданному курсу.
//
// Параметры: 
//	СтруктураДанных - структура
//  	* Номенклатура			- ссылка на элемент справочника "Номенклатура", для которого надо получить цену,
//  	* ТипЦен				- ссылка на элемент справочника "Типы цен", определяет цену какого типа надо получить,
//  	* Дата 					- дата, на которую надо получить цену, если не заполнено, то берется рабочая дата
//  	* ВалютаДокумента		- валюта
//  	* СуммаВключаетНалоги  	- признак из документа (не обязательный)
//  	* СтавкаНДС  			- ссылка на элемент справочника "Ставки НДС", для для пересчета цены (не обязательный)
//  	* СтавкаНСП  			- ссылка на элемент справочника "Ставки НСП", для для пересчета цены (не обязательный)
//  Возвращаемое значение:
//    Число, рассчитанное значение цены.
//
Функция ПолучитьЦенуНоменклатуры(СтруктураДанных) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.ТипЦен.ВалютаЦены КАК ЦеныНоменклатурыВалюта,
		|	ЦеныНоменклатурыСрезПоследних.ТипЦен.ЦенаВключаетНалоги КАК ЦенаВключаетНалоги,
		|	ЦеныНоменклатурыСрезПоследних.ТипЦен.ПорядокОкругления КАК ПорядокОкругления,
		|	ЦеныНоменклатурыСрезПоследних.ТипЦен.ОкруглятьВБольшуюСторону КАК ОкруглятьВБольшуюСторону,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена * КурсВалютыВидЦен.Курс * КурсВалютыДокумента.Кратность / (КурсВалютыДокумента.Курс * КурсВалютыВидЦен.Кратность), 0) КАК Цена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&Период,
		|			Номенклатура = &Номенклатура
		|				И ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсВалютыВидЦен
		|		ПО ЦеныНоменклатурыСрезПоследних.ТипЦен.ВалютаЦены = КурсВалютыВидЦен.Валюта,
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента";
	Запрос.УстановитьПараметр("Период",       		СтруктураДанных.Дата);
	Запрос.УстановитьПараметр("Номенклатура", 		СтруктураДанных.Номенклатура);
	Запрос.УстановитьПараметр("ТипЦен",       		СтруктураДанных.ТипЦен);
	Запрос.УстановитьПараметр("ВалютаДокумента",	СтруктураДанных.ВалютаДокумента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Цена = 0;
	Пока Выборка.Следующий() Цикл
		
		Цена					= Выборка.Цена;
		ПорядокОкругления		= Выборка.ПорядокОкругления;
		ОкруглятьВБольшуюСторону= Выборка.ОкруглятьВБольшуюСторону;
		
		Если СтруктураДанных.Свойство("СуммаВключаетНалоги")
			И ((СтруктураДанных.СуммаВключаетНалоги И НЕ Выборка.ЦенаВключаетНалоги)
				ИЛИ (НЕ СтруктураДанных.СуммаВключаетНалоги И Выборка.ЦенаВключаетНалоги)) Тогда
				
				Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
												Выборка.ЦенаВключаетНалоги,
												СтруктураДанных.СуммаВключаетНалоги,
												УчетНДС.ПолучитьСтавкуНДС(СтруктураДанных.Дата, СтруктураДанных.СтавкаНДС),
												УчетНДС.ПолучитьСтавкуНСП(СтруктураДанных.Дата, СтруктураДанных.Организация, СтруктураДанных.СтавкаНСП));
		КонецЕсли;
		
		ТочностьЦены = 0;
		СтруктураДанных.Свойство("ТочностьЦены", ТочностьЦены);
		
		Цена = ОкруглитьЦену(Цена, ПорядокОкругления, ОкруглятьВБольшуюСторону, ТочностьЦены);
	КонецЦикла;
	
	Возврат Цена;

КонецФункции // ПолучитьЦенуНоменклатуры()

// Функция возвращает цену компании для требуемой номенклатуры по способу заполнения, 
// пересчитанную в требуемую валюту по заданному курсу.
//
// Параметры: 
//	СтруктураДанные - структура
//  	* Номенклатура			- СправочникСсылка.Номенклатура - Номенклатура, для которой нужно получить цену
//  	* СпособЗаполненияЦены	- ПеречислениеСсылка.СпособыЗаполненияЦен - Определяет способ получаемой цуны 
//  	* ВалютаДокумента		- СправочникСсылка.Валюты - Валюта документа
//  	* СуммаВключаетНалоги  	- Булево - Признак документа (необязательный)
//		* Организация			- СправосникСсылка.Организации - Организация для получения ставки НСП (необязательный, зависит от того, передается параметр СуммаВключаетНалоги или нет)
//  	* СтавкаНДС				- Число - Значение ставки НДС (необязательный, зависит от того, передается параметр СуммаВключаетНалоги или нет)
//  	* СтавкаНСП				- Число - Значение ставки НСП (необязательный, зависит от того, передается параметр СуммаВключаетНалоги или нет)
//  Возвращаемое значение:
//    Число, рассчитанное значение цены.
//
Функция ПолучитьЦенуПоДокументам(СтруктураДанные) Экспорт
	
	Цена = 0;
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ЦеныНоменклатурыДокументов) Тогда
		Возврат Цена;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", СтруктураДанные.Номенклатура);
	Запрос.УстановитьПараметр("СпособЗаполненияЦены", СтруктураДанные.СпособЗаполненияЦены);
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЦеныНоменклатурыДокументов.Цена КАК Цена,
		|	ЦеныНоменклатурыДокументов.Валюта КАК Валюта,
		|	ЦеныНоменклатурыДокументов.ЦенаВключаетНалоги КАК ЦенаВключаетНалоги
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатурыДокументов КАК ЦеныНоменклатурыДокументов
		|ГДЕ
		|	ЦеныНоменклатурыДокументов.Номенклатура = &Номенклатура
		|	И ЦеныНоменклатурыДокументов.СпособЗаполненияЦены = &СпособЗаполненияЦены";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат Цена;
	КонецЕсли;
	
	Цена = Выборка.Цена;
	
	Если СтруктураДанные.Свойство("СуммаВключаетНалоги") Тогда 
		// Разные признаки.
		Если НЕ СтруктураДанные.СуммаВключаетНалоги = Выборка.ЦенаВключаетНалоги Тогда
			Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
											Выборка.ЦенаВключаетНалоги,
											СтруктураДанные.СуммаВключаетНалоги,
											СтруктураДанные.ЗначениеСтавкиНДС,
											СтруктураДанные.ЗначениеСтавкиНСП);
		КонецЕсли;
	КонецЕсли;									
		
	Если СтруктураДанные.Свойство("ТочностьЦены") Тогда 
		Цена = ОкруглитьЦену(Цена,,, СтруктураДанные.ТочностьЦены);
	КонецЕсли;	

	// Разные валюты.
	Если НЕ СтруктураДанные.ВалютаДокумента = Выборка.Валюта Тогда
		Цена = РаботаСКурсамиВалют.ПересчитатьВВалюту(Цена, Выборка.Валюта, СтруктураДанные.ВалютаДокумента, СтруктураДанные.Дата);  
	КонецЕсли;
	
	Возврат Цена;
	
КонецФункции

// Возвращает таблицу цен номенклатуры
//
// Параметры:
//  МассивНоменклатуры - массив номенклатуры
//  ТипЦен             - тип цен
//  Дата               - дата цен
//
// Возвращаемое значение:
//  Таблица значений, содержащая цены, валюты цен и курсы валют на переданную дату
//
Функция ПолучитьТаблицуЦенНоменклатуры(МассивНоменклатуры, ТипЦен, Дата) Экспорт
	
	ЦеныНоменклатуры = НовыйЦеныНоменклатуры();
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ЦеныНоменклатуры) Тогда
		Возврат ЦеныНоменклатуры;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",				Дата);
	Запрос.УстановитьПараметр("ТипЦен",				ТипЦен);
	Запрос.УстановитьПараметр("МассивНоменклатуры",	МассивНоменклатуры);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|	ЦеныНоменклатурыСрезПоследних.Валюта КАК Валюта,
	|	ЦеныНоменклатурыСрезПоследних.ТипЦен
	|ПОМЕСТИТЬ ЦеныНоменклатуры
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Период,
	|			ТипЦен = &ТипЦен
	|				И Номенклатура В (&МассивНоменклатуры)) КАК ЦеныНоменклатурыСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Период) КАК КурсыВалютСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатуры.Цена КАК Цена,
	|	ЦеныНоменклатуры.Валюта КАК Валюта,
	|	ЕСТЬNULL(КурсыВалют.Курс, 1) КАК Курс,
	|	ЕСТЬNULL(КурсыВалют.Кратность, 1) КАК Кратность,
	|	ТипыЦенНоменклатуры.ЦенаВключаетНалоги
	|ИЗ
	|	ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
	|		ПО ЦеныНоменклатуры.Валюта = КурсыВалют.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТипыЦенНоменклатуры КАК ТипыЦенНоменклатуры
	|		ПО ЦеныНоменклатуры.ТипЦен = ТипыЦенНоменклатуры.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ЦеныНоменклатуры.Добавить(), Выборка);
	КонецЦикла;
	
	Возврат ЦеныНоменклатуры;
	
КонецФункции

Функция ПолучитьТаблицуЦенНоменклатурыДокументов(МассивНоменклатуры, СпособЗаполненияЦены, Дата) Экспорт
	
	ЦеныНоменклатуры = НовыйЦеныНоменклатуры();
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ЦеныНоменклатурыДокументов) Тогда
		Возврат ЦеныНоменклатуры;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",					Дата);	
	Запрос.УстановитьПараметр("СпособЗаполненияЦены",	СпособЗаполненияЦены);
	Запрос.УстановитьПараметр("МассивНоменклатуры",		МассивНоменклатуры);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЦеныНоменклатурыДокументов.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыДокументов.Цена КАК Цена,
		|	ЦеныНоменклатурыДокументов.Валюта КАК Валюта,
		|	ЦеныНоменклатурыДокументов.ЦенаВключаетНалоги
		|ПОМЕСТИТЬ ЦеныНоменклатуры
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатурыДокументов КАК ЦеныНоменклатурыДокументов
		|ГДЕ
		|	ЦеныНоменклатурыДокументов.Номенклатура В(&МассивНоменклатуры)
		|	И ЦеныНоменклатурыДокументов.СпособЗаполненияЦены = &СпособЗаполненияЦены
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
		|	КурсыВалютСрезПоследних.Курс КАК Курс,
		|	КурсыВалютСрезПоследних.Кратность КАК Кратность
		|ПОМЕСТИТЬ КурсыВалют
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсыВалютСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатуры.Цена КАК Цена,
		|	ЦеныНоменклатуры.Валюта КАК Валюта,
		|	ЕСТЬNULL(КурсыВалют.Курс, 1) КАК Курс,
		|	ЕСТЬNULL(КурсыВалют.Кратность, 1) КАК Кратность,
		|	ЦеныНоменклатуры.ЦенаВключаетНалоги
		|ИЗ
		|	ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|		ПО ЦеныНоменклатуры.Валюта = КурсыВалют.Валюта";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ЦеныНоменклатуры.Добавить(), Выборка);
	КонецЦикла;
	
	Возврат ЦеныНоменклатуры;
	
КонецФункции

Процедура ОбновитьЦеныНоменклатуры(ДокументСсылка, СпособЗаполненияЦены, Валюта = Неопределено, СуммаВключаетНалоги = Ложь) Экспорт	
	
	Если Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ЦеныНоменклатурыДокументов) Тогда
		Возврат;
	КонецЕсли;
	
	Если Константы.НастройкаЗаполненияЦены.Получить() = Перечисления.НастройкаЗаполненияЦены.Номенклатура Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Валюта) Тогда 
		Валюта = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить(Документы[ДокументСсылка.Метаданные().Имя].ТекстЗапросаДанныеДляОбновленияЦенДокументов());
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
		|	МАКСИМУМ(ТаблицаНоменклатуры.Цена) КАК Цена,
		|	ТаблицаНоменклатуры.Валюта КАК Валюта,
		|	ТаблицаНоменклатуры.СпособЗаполненияЦены КАК СпособЗаполненияЦены,
		|	ТаблицаНоменклатуры.ЦенаВключаетНалоги КАК ЦенаВключаетНалоги
		|ПОМЕСТИТЬ ТаблицаНоменклатурыСМаксимальнойЦеной
		|ИЗ
		|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаНоменклатуры.Номенклатура,
		|	ТаблицаНоменклатуры.Валюта,
		|	ТаблицаНоменклатуры.СпособЗаполненияЦены,
		|	ТаблицаНоменклатуры.ЦенаВключаетНалоги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНоменклатурыСМаксимальнойЦеной.Номенклатура КАК Номенклатура,
		|	ТаблицаНоменклатурыСМаксимальнойЦеной.Цена КАК Цена,
		|	ТаблицаНоменклатурыСМаксимальнойЦеной.Валюта КАК Валюта,
		|	ТаблицаНоменклатурыСМаксимальнойЦеной.СпособЗаполненияЦены КАК СпособЗаполненияЦены,
		|	ТаблицаНоменклатурыСМаксимальнойЦеной.ЦенаВключаетНалоги КАК ЦенаВключаетНалоги
		|ИЗ
		|	ТаблицаНоменклатурыСМаксимальнойЦеной КАК ТаблицаНоменклатурыСМаксимальнойЦеной
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыДокументов КАК ЦеныНоменклатурыДокументов
		|		ПО ТаблицаНоменклатурыСМаксимальнойЦеной.Номенклатура = ЦеныНоменклатурыДокументов.Номенклатура
		|			И ТаблицаНоменклатурыСМаксимальнойЦеной.Валюта = ЦеныНоменклатурыДокументов.Валюта
		|			И ТаблицаНоменклатурыСМаксимальнойЦеной.СпособЗаполненияЦены = ЦеныНоменклатурыДокументов.СпособЗаполненияЦены
		|			И ТаблицаНоменклатурыСМаксимальнойЦеной.ЦенаВключаетНалоги = ЦеныНоменклатурыДокументов.ЦенаВключаетНалоги
		|ГДЕ
		|	ТаблицаНоменклатурыСМаксимальнойЦеной.Цена <> ЕСТЬNULL(ЦеныНоменклатурыДокументов.Цена, 0)
		|	И ТаблицаНоменклатурыСМаксимальнойЦеной.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.УстановитьПараметр("СпособЗаполненияЦены", СпособЗаполненияЦены);
	Запрос.УстановитьПараметр("ЦенаВключаетНалоги",	  СуммаВключаетНалоги);
	Запрос.УстановитьПараметр("Валюта",				  Валюта);
	Запрос.УстановитьПараметр("Ссылка",				  ДокументСсылка);
	
	ТаблицаЦенНоменклатуры = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаЦенНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЦеныНоменклатурыДокументов");
	ЭлементБлокировки.УстановитьЗначение("СпособЗаполненияЦены", СпособЗаполненияЦены);
	ЭлементБлокировки.ИсточникДанных = ТаблицаЦенНоменклатуры;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	Блокировка.Заблокировать();
	
	Попытка
		
		Для Каждого Стр Из ТаблицаЦенНоменклатуры Цикл
			
			МенеджерЗаписи = РегистрыСведений.ЦеныНоменклатурыДокументов.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Стр);
			МенеджерЗаписи.Записать();
			
		КонецЦикла;			
		ЗафиксироватьТранзакцию();
		
	Исключение
		//Обновленные данные о ценах записываюся полностью по документу или не записываются вообще.
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

// Округляет число по заданному порядку. 
// Если задано (=Истина) "ОкруглятьВБольшуюСторону",
// то число 123.37 при порядке округление 0.5 превратиться в 123.50, а число 0.1 
// при порядке округления 5 станет равным 5.
//
// Параметры:
//  Число                    - исходное число
//  ПорядокОкругления        - элемент перечисления Порядки окгугления: 
//                             "шаг" округления (0.01 (арифметическое), 0.01, 0.05, 0.1, 0.5, 1, 5, 10, 50, 100)
//  ОкруглятьВБольшуюСторону - булево, определяет способ округления: если Истина, 
//                             то при порядке округления "5" 0.01 будет округлена до 5, 
//                             Ложь - округление по арифметическим правилам
//	Разрадность	-	Число	-  Определяет число знаков дробной части
//
// Возвращаемое значение:
//  Округленное по заданному порядку значение
//
Функция ОкруглитьЦену(Число, ПравилоОкругления = Неопределено, ОкруглятьВБольшуюСторону = Ложь, Разрадность = 0) Экспорт
	
	Перем Результат; // Возвращаемый результат.
	
	Если ПравилоОкругления = Неопределено Тогда 
		ПравилоОкругления = Перечисления.ПорядкиОкругления.Окр0_01;
	КонецЕсли;	

	// Дробную часть нужно отбросить.
	Если ПравилоОкругления = Перечисления.ПорядкиОкругления.ОтсечениеДробнойЧасти Тогда 
		Возврат Цел(Число);		
	КонецЕсли;	
	
	// Преобразуем порядок округления числа.
	// Если передали пустое значение порядка, то округлим до копеек. 
	Если НЕ ЗначениеЗаполнено(ПравилоОкругления) Тогда
		ПорядокОкругления = Перечисления.ПорядкиОкругления.Окр0_01; 
	Иначе
		ПорядокОкругления = ПравилоОкругления;
	КонецЕсли;
	Порядок = Число(Строка(ПорядокОкругления));
	
	// вычислим количество интервалов, входящих в число
	КоличествоИнтервал	= Число / Порядок;
	
	// вычислим целое количество интервалов.
	КоличествоЦелыхИнтервалов = Цел(КоличествоИнтервал);
	
	Если КоличествоИнтервал = КоличествоЦелыхИнтервалов Тогда
		
		// Числа поделились нацело. Округлять не нужно.
		Результат = Число;
	Иначе
		Если ОкруглятьВБольшуюСторону Тогда
			
			// При порядке округления "0.05" 0.371 должно округлиться до 0.4
			Результат = Порядок * (КоличествоЦелыхИнтервалов + 1);
		Иначе
			
			// При порядке округления "0.05" 0.371 должно округлиться до 0.35,
			// а 0.376 до 0.4
			Результат = Порядок * Окр(КоличествоИнтервал, Разрадность, РежимОкругления.Окр15как20);
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ОкруглитьЦену()

// Функция возвращает массив для списка выбора Точность цены
// 
// Возвращаемое значение:
//  Массив 
//
Функция ЗначенияТочностиЦены() Экспорт 

	Результат = Новый Массив;
	Результат.Добавить(Новый Структура("Значение, Представление", 2, "2 знака"));
	Результат.Добавить(Новый Структура("Значение, Представление", 3, "3 знака"));
	Результат.Добавить(Новый Структура("Значение, Представление", 4, "4 знака"));
	Результат.Добавить(Новый Структура("Значение, Представление", 5, "5 знаков"));
	//Результат.Добавить(Новый Структура("Значение, Представление", 6, "6 знаков"));
	//Результат.Добавить(Новый Структура("Значение, Представление", 7, "7 знаков"));
	//Результат.Добавить(Новый Структура("Значение, Представление", 8, "8 знаков"));
	
	Возврат Результат

КонецФункции // ЗначенияТочностиЦены()

////////////////////////////////////////////////////////////////////////////////
// Работа с формой цен и валют.

// Позволяет получить список реквизитов документа, необходимых для дальнейшей
// передачи в обработку заполнения цен и валют.
//
// Параметры: 
//  ДокументОбъект      - объект документа, для реквизитов будет производится заполнение
//  СтруктураИсключений - структура, в которую передаются те исключения, которые или невозможно
//                        определить по метаданным, или, несмотря ни на что, нельзя включать в
//                        возвращаемую структуру.
//                        В структуре - ключ = имя реквизита, значение = истина (необходимо добавить
//                        в структуру) или ложь (нельзя добавлять в структуру)
//
// Возвращаемое значение:
//  Сформированная структура реквизитов документа.
//
Функция ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ДокументОбъект, СтруктураИсключений = Неопределено) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	// Зададим, какие реквизиты вообще нам могут быть нужны
	СтруктураВозможныхВариантовРеквизитов = Новый Структура();
	СтруктураВозможныхВариантовРеквизитов.Вставить("ТипЦен");
	СтруктураВозможныхВариантовРеквизитов.Вставить("ВалютаДокумента");
	СтруктураВозможныхВариантовРеквизитов.Вставить("КурсДокумента");
	СтруктураВозможныхВариантовРеквизитов.Вставить("КратностьДокумента");
	СтруктураВозможныхВариантовРеквизитов.Вставить("КурсВзаиморасчетов");
	СтруктураВозможныхВариантовРеквизитов.Вставить("КратностьВзаиморасчетов");
	СтруктураВозможныхВариантовРеквизитов.Вставить("СуммаВключаетНалоги");

	// Зададим, какие реквизиты надо редактировать.
	СтруктураРеквизитовДокумента = Новый Структура();
	Для Каждого ТекущийЭлементСтруктуры Из СтруктураВозможныхВариантовРеквизитов Цикл
		НужныйРеквизитДокумента = ТекущийЭлементСтруктуры.Ключ;
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта(НужныйРеквизитДокумента, МетаданныеДокумента) Тогда
			СтруктураРеквизитовДокумента.Вставить(НужныйРеквизитДокумента);
		КонецЕсли;
	КонецЦикла;

	// теперь проверим исключения
	Если СтруктураИсключений<>Неопределено Тогда
		Для Каждого ТекущийЭлементСтруктуры Из СтруктураИсключений Цикл
			Если ТекущийЭлементСтруктуры.Значение Тогда
				// надо добавить реквизит, если его еще нет
				СтруктураРеквизитовДокумента.Вставить(ТекущийЭлементСтруктуры.Ключ);
			Иначе
				// надо удалить реквизит, если он есть
				СтруктураРеквизитовДокумента.Удалить(ТекущийЭлементСтруктуры.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат СтруктураРеквизитовДокумента;

КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьТаблицуЦенНоменклатурыПродажаИПокупка(МассивНоменклатуры, Дата) Экспорт
	
	ЦеныНоменклатуры = НовыйЦеныНоменклатуры();
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ЦеныНоменклатурыДокументов) Тогда
		Возврат ЦеныНоменклатуры;
	КонецЕсли;
	
	// В первую очередь смотрим есть ли цены продажи, если цен продажи нет, то смотри цену покупки.
	ЦеныНоменклатуры = ТаблицаЦенПродажиИПокупки(
		Дата, МассивНоменклатуры, ЦеныНоменклатуры);
		
	Возврат ЦеныНоменклатуры;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТаблицаЦенПродажиИПокупки(
		Дата, МассивНоменклатуры, ЦеныНоменклатуры)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",             Дата);
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыДокументов.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыДокументов.Цена КАК Цена,
	|	ЦеныНоменклатурыДокументов.Валюта КАК Валюта,
	|	ЦеныНоменклатурыДокументов.ЦенаВключаетНалоги КАК ЦенаВключаетНалоги
	|ПОМЕСТИТЬ ЦеныНоменклатурыПродажи
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатурыДокументов КАК ЦеныНоменклатурыДокументов
	|ГДЕ
	|	ЦеныНоменклатурыДокументов.Номенклатура В(&МассивНоменклатуры)
	|	И ЦеныНоменклатурыДокументов.СпособЗаполненияЦены = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияЦен.ПоПродажнымЦенам)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыДокументов.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыДокументов.Цена КАК Цена,
	|	ЦеныНоменклатурыДокументов.Валюта КАК Валюта,
	|	ЦеныНоменклатурыДокументов.ЦенаВключаетНалоги КАК ЦенаВключаетНалоги
	|ПОМЕСТИТЬ ЦеныНоменклатурыПокупки
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатурыДокументов КАК ЦеныНоменклатурыДокументов
	|ГДЕ
	|	ЦеныНоменклатурыДокументов.Номенклатура В(&МассивНоменклатуры)
	|	И ЦеныНоменклатурыДокументов.СпособЗаполненияЦены = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияЦен.ПоЗакупочнымЦенам)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыПокупки.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаНоменклатурыДетальная
	|ИЗ
	|	ЦеныНоменклатурыПокупки КАК ЦеныНоменклатурыПокупки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыПродажи.Номенклатура
	|ИЗ
	|	ЦеныНоменклатурыПродажи КАК ЦеныНоменклатурыПродажи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатурыДетальная.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	ТаблицаНоменклатурыДетальная КАК ТаблицаНоменклатурыДетальная
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаНоменклатурыДетальная.Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ЦеныНоменклатурыПродажи.Номенклатура, 0) = 0
	|			ТОГДА ЦеныНоменклатурыПродажи.Цена
	|		ИНАЧЕ ЦеныНоменклатурыПокупки.Цена
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ЦеныНоменклатурыПродажи.Номенклатура, 0) = 0
	|			ТОГДА ЦеныНоменклатурыПродажи.Валюта
	|		ИНАЧЕ ЦеныНоменклатурыПокупки.Валюта
	|	КОНЕЦ КАК Валюта,
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ЦеныНоменклатурыПродажи.Номенклатура, 0) = 0
	|			ТОГДА ЦеныНоменклатурыПродажи.ЦенаВключаетНалоги
	|		ИНАЧЕ ЦеныНоменклатурыПокупки.ЦенаВключаетНалоги
	|	КОНЕЦ КАК ЦенаВключаетНалоги
	|ПОМЕСТИТЬ ЦеныНоменклатуры
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатурыПокупки КАК ЦеныНоменклатурыПокупки
	|		ПО ТаблицаНоменклатуры.Номенклатура = ЦеныНоменклатурыПокупки.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатурыПродажи КАК ЦеныНоменклатурыПродажи
	|		ПО ТаблицаНоменклатуры.Номенклатура = ЦеныНоменклатурыПродажи.Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсыВалютСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатуры.Валюта КАК Валюта,
	|	ЕСТЬNULL(КурсыВалют.Курс, 1) КАК Курс,
	|	ЕСТЬNULL(КурсыВалют.Кратность, 1) КАК Кратность,
	|	ЦеныНоменклатуры.ЦенаВключаетНалоги КАК ЦенаВключаетНалоги,
	|	ЦеныНоменклатуры.Цена КАК Цена
	|ИЗ
	|	ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
	|		ПО ЦеныНоменклатуры.Валюта = КурсыВалют.Валюта";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ЦеныНоменклатуры.Добавить(), Выборка);
	КонецЦикла;

	Возврат ЦеныНоменклатуры;

КонецФункции

Функция НовыйЦеныНоменклатуры()
	
	МетаданныеЦеныНоменклатуры = Метаданные.РегистрыСведений.ЦеныНоменклатуры;
	МетаданныеКурсыВалют       = Метаданные.РегистрыСведений.КурсыВалют;
	
	ЦеныНоменклатуры = Новый ТаблицаЗначений;
	ЦеныНоменклатуры.Колонки.Добавить("Номенклатура",    МетаданныеЦеныНоменклатуры.Измерения.Номенклатура.Тип);
	ЦеныНоменклатуры.Колонки.Добавить("Цена",            МетаданныеЦеныНоменклатуры.Ресурсы.Цена.Тип);
	ЦеныНоменклатуры.Колонки.Добавить("Валюта",          МетаданныеЦеныНоменклатуры.Ресурсы.Валюта.Тип);
	ЦеныНоменклатуры.Колонки.Добавить("Курс",            МетаданныеКурсыВалют.Ресурсы.Курс.Тип);
	ЦеныНоменклатуры.Колонки.Добавить("Кратность",       МетаданныеКурсыВалют.Ресурсы.Кратность.Тип);
	ЦеныНоменклатуры.Колонки.Добавить("ЦенаВключаетНалоги", Новый ОписаниеТипов("Булево"));
	
	ЦеныНоменклатуры.Индексы.Добавить("Номенклатура");
	
	Возврат ЦеныНоменклатуры;
	
КонецФункции

#КонецОбласти


