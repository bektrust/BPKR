
#Область ПрограммныйИнтерфейс

// Проверяет соответствие ИНН требованиям.
//
// Параметры:
//  ИНН                - Строка - проверяемый индивидуальный номер налогоплательщика.
//  ЭтоЮридическоеЛицо - Булево - признак, является ли владелец ИНН юридическим лицом.
//  ТекстСообщения     - Строка - текст сообщения о найденных ошибках.
//
// Возвращаемое значение:
//  Булево - Истина, если соответствует.
//
Функция ИННСоответствуетТребованиям(Знач ИНН, ЭтоЮридическоеЛицо, ТекстСообщения) Экспорт
	
	
	// 1. Заполненость ИНН если нет то дальнейшие проверки не нужны
	// 2. Для спр. Контрагенты и спр. ФизЛица д.б. длина ИНН = 14, если нет то дальнейшие проверки не нужны
	// 3. ИНН должен состоять только из цифр
	// 4. Проверка тип контрагента для спр. Контаргенты
	
	// 5. Для спр. Контрагенты вид контрагента ЮрЛицо
	// 5.1 Проверка 1-й цифры - не больше 5
	// 5.2 Проверка дня месяца
	// 5.3 Проверка месяца
	// 5.4 Проверка года < 1901
	
	// 6. Для спр. Контрагенты вид контрагента ФизЛицо и спр. ФизЛица
	// 6.1 Проверка 1-ой цифры - 1 или 2
	// 6.2 Проверка соответствия ИНН дню рождения
	// 6.3 Проверка корректности месяца рождения в ИНН 
	// 6.4 Проверка корректности года рождения в ИНН
	
	СоответствуетТребованиям = Истина;
	ТекстСообщения = "";
	
	ИНН      = СокрЛП(ИНН);
	ДлинаИНН = СтрДлина(ИНН);
	
	Если ЭтоЮридическоеЛицо = Неопределено Тогда
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'Не определен тип владельца ИНН'");
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИНН) Тогда
		СоответствуетТребованиям = Ложь;
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'ИНН должен состоять только из цифр'");
	КонецЕсли;
	
	Если ДлинаИНН <> 14 Тогда
		СоответствуетТребованиям = Ложь;
		ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
			+ НСтр("ru = 'ИНН должен состоять из 14 цифр'");
	КонецЕсли;
	
	Если ЭтоЮридическоеЛицо Тогда
		Если СоответствуетТребованиям Тогда
			ПерваяЦифра = Число(Лев(ИНН, 1));			
			Если ПерваяЦифра > 5 Тогда 
				СоответствуетТребованиям = Ложь;
				ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
				               + НСтр("ru = 'Первая цифра ИНН не может быть больше 5'");
			КонецЕсли;
		КонецЕсли;
		
		Если СоответствуетТребованиям Тогда
			КонтрольноеЧисло = Число(Сред(ИНН, 2, 2));		
			Если КонтрольноеЧисло > 31 Или КонтрольноеЧисло = 0 Тогда 
				СоответствуетТребованиям = Ложь;
				ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
				               + НСтр("ru = 'Вторая и третья цифры ИНН должны соответствовать дню месяца даты регистрации'");
			КонецЕсли;
		КонецЕсли;
		
		Если СоответствуетТребованиям Тогда
			КонтрольноеЧисло = Число(Сред(ИНН, 4, 2));		
			Если КонтрольноеЧисло > 12 Или КонтрольноеЧисло = 0 Тогда 
				СоответствуетТребованиям = Ложь;
				ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
				               + НСтр("ru = 'Четвертая и пятая цифры ИНН должны соответствовать месяцу даты регистрации'");
			КонецЕсли;
		КонецЕсли;
		
		Если СоответствуетТребованиям Тогда
			КонтрольноеЧисло = Число(Сред(ИНН, 6, 4));		
			Если ПерваяЦифра = 0 
				И (КонтрольноеЧисло < 1901 Или КонтрольноеЧисло > Год(ТекущаяДата())) Тогда 
				СоответствуетТребованиям = Ложь;
				ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
				               + НСтр("ru = 'Цифры с шестой по девятую ИНН должны соответствовать году регистрации'");
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если СоответствуетТребованиям Тогда
			ПерваяЦифра = Число(Лев(ИНН, 1));			
			Если НЕ (ПерваяЦифра = 1 Или ПерваяЦифра = 2) Тогда 
				СоответствуетТребованиям = Ложь;
				ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
				               + НСтр("ru = 'Первая цифра ИНН должна быть 1 для женщин или 2 для мужчин'");
			КонецЕсли;
		КонецЕсли;
		
		Если СоответствуетТребованиям Тогда
			КонтрольноеЧисло = Число(Сред(ИНН, 2, 2));		
			Если КонтрольноеЧисло > 31 Или КонтрольноеЧисло = 0 Тогда 
				СоответствуетТребованиям = Ложь;
				ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
				               + НСтр("ru = 'Вторая и третья цифра ИНН должно соответствовать дню рождения'");
			КонецЕсли;
		КонецЕсли;
		
		Если СоответствуетТребованиям Тогда
			КонтрольноеЧисло = Число(Сред(ИНН, 4, 2));		
			Если КонтрольноеЧисло > 12 Или КонтрольноеЧисло = 0 Тогда 
				СоответствуетТребованиям = Ложь;
				ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
				               + НСтр("ru = 'Четвертая и пятая цифра ИНН должно соответствовать месяцу рождения'");
			КонецЕсли;
		КонецЕсли;
		
		Если СоответствуетТребованиям Тогда
			КонтрольноеЧисло = Число(Сред(ИНН, 6, 4));		
			Если КонтрольноеЧисло < 1901 Или КонтрольноеЧисло > Год(ТекущаяДата()) Тогда 
				СоответствуетТребованиям = Ложь;
				ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
				               + НСтр("ru = 'Цифры с шестой по девятую ИНН должны соответствовать году рождения'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СоответствуетТребованиям;
	
КонецФункции 

#Область Конструкторы

// Заполняет структуру общих параметров фискального накопителя.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПараметрыФискальногоНакопителяОбщие() Экспорт
	
	Параметры = Новый Структура();
	// ФФД 1.0
	Параметры.Вставить("РегистрационныйНомерККТ"); // Регистрационный номер ККТ
	Параметры.Вставить("ЗаводскойНомерККТ");  // Заводской номер ККТ 
	
	Параметры.Вставить("ОрганизацияНазвание"); // Название организации
	Параметры.Вставить("ОрганизацияИНН");      // ИНН организация
	
	Параметры.Вставить("АдресПроведенияРасчетов"); // Адрес проведения расчетов
	Параметры.Вставить("МестоПроведенияРасчетов"); // Место проведения расчетов
	
	Параметры.Вставить("КодСистемыНалогообложения"); // Код системы налогообложения
	Параметры.Вставить("ПризнакПлательщикаНДС", Ложь); // Признак плательщика НДС
	
	Параметры.Вставить("ПризнакАвтономногоРежима"  , Ложь); // Признак автономного режима
	Параметры.Вставить("ОрганизацияОФДИНН");      // Название организации ОФД
	Параметры.Вставить("ОрганизацияОФДНазвание"); // ИНН организации ОФД
	
	Параметры.Вставить("ОтправительEmail"); // Адрес электронной почты отправителя чека.
	Параметры.Вставить("АдресСайтаОФД");    // Адрес сайта уполномоченного органа (ФНС). 
	
	Возврат Параметры; 
	
КонецФункции

// Заполняет структуру параметров регистрации ККТ.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПараметрыРегистрацииККТ() Экспорт
	
	Параметры = ПараметрыФискальногоНакопителяОбщие();
	Параметры.Вставить("ПризнакФискализации");        // Признак регистрации фискального накопителя.
	Возврат Параметры; 
	
КонецФункции

// Заполняет структуру параметров Фискализации ФН.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПараметрыОперацииФискализацииНакопителя() Экспорт
	
	Параметры = ПараметрыФискальногоНакопителяОбщие();
	
	//Параметры.Вставить("КодПричиныПеререгистрации"); 
	//Параметры.Вставить("КодыПричинИзмененияСведений"); 
	Параметры.Вставить("ТипОперации", 1);
	
	Параметры.Вставить("Кассир"     , НСтр("ru='Администратор'")); // Строка,Обязательно   - ФИО лица и должность, осуществившего расчет с покупателем (клиентом), оформившего кассовый чек.
	Параметры.Вставить("КассирИНН"  , Неопределено); // Строка,Необязательно - Идентификационный номер налогоплательщика кассира, при наличии.
	Параметры.Вставить("КассирПароль"  , Неопределено); // Строка,Необязательно - Пароль кассира, при наличии.
	
	Возврат Параметры; 
	
КонецФункции

// Заполняет структуру параметров выполнения операции.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПараметрыВыполненияОперации() Экспорт;
	
	ПараметрыОперации = Новый Структура();
	ПараметрыОперации.Вставить("Кассир"     , НСтр("ru='Администратор'")); // ФИО лица и должность, осуществившего операцию.
	ПараметрыОперации.Вставить("КассирИНН"  , Неопределено); // Идентификационный номер налогоплательщика кассира, при наличии.
	ПараметрыОперации.Вставить("КассирПароль"  , Неопределено); // Пароль кассира, при наличии.
	Возврат ПараметрыОперации;
	
КонецФункции


// Заполняет структуру данных поставщика.
//
// Возвращаемое значение:
// 	Структура - Описание:
//   * ИНН - Строка 
//   * Наименование - Строка 
//   * Телефон - Строка
//
Функция ПараметрыДанныеПоставщика() Экспорт
	
	Параметры = Новый Структура();
	Параметры.Вставить("Телефон");      // Строка - Телефон поставщика. В формате +{Ц}.
	Параметры.Вставить("Наименование"); // Строка - Наименование поставщика.
	Параметры.Вставить("ИНН");          // Строка - ИНН поставщика.
	Возврат Параметры; 
	
КонецФункции


// Заполняет структуру данных дробное количество для товарной номенклатуры.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПараметрыДробноеКоличество() Экспорт
	
	Параметры = Новый Структура();
	Параметры.Вставить("Числитель"   , Неопределено); // Число,Обязательно - Числитель дробного количества - количество  реализуемых  товаров из упаковке.
	Параметры.Вставить("Знаменатель" , Неопределено); // Число,Обязательно - Знаменатель дробного количества - общее количество товаров в потребительской упаковке. 
	Возврат Параметры; 
	
КонецФункции

// Заполняет структуру дополнительного реквизита пользователя.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПараметрыДополнительногоРеквизитаПользователя() Экспорт
	
	Параметры = Новый Структура();
	Параметры.Вставить("Наименование"); // Строка,Необязательно - Наименование дополнительного реквизита пользователя (Тег 1085).
	Параметры.Вставить("Значение");     // Строка,Необязательно - Значение дополнительного реквизита пользователя (Тег 1086).
	Возврат Параметры; 
	
КонецФункции

// Заполняет структуру параметров QR кода.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПараметрыQRКода() Экспорт
	
	Параметры = Новый Структура();
	Параметры.Вставить("ЗначениеКода"); // Строка,Необязательно - Значения QR кода.
	Параметры.Вставить("ТекстПользователя", НСтр("ru='Сохраните чек для возврата'")); // Строка,Необязательно - Текст выводимый пользователю.
	
	Возврат Параметры; 
	
КонецФункции



// Заполняет структуру сведений о покупателей.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПараметрыСведенияОПокупателе() Экспорт
	
	// Вложенные тэги 1256 - Сведения о покупателе (клиенте).
	Параметры = Новый Структура(); 
	// Реквизиты начиная с ФФД 1.1 (Введены приказом от 09.04.2018 N ММВ-7-20/207@)
	// Наименование организации или фамилия, имя, отчество (при наличии)
	Параметры.Вставить("Покупатель");    // Строка,Необязательно - Тэг 1227 - Получатель (покупатель)	
	Параметры.Вставить("ПокупательИНН"); // Строка,Необязательно - Тэг 1228 - ИНН покупателя (клиента)	 
	Параметры.Вставить("ПокупательАдрес"); // Строка,Необязательно - Тэг 1254 - Адрес покупателя (клиента)	 
	Возврат Параметры; 
	
КонецФункции

// Заполняет структуру персональные данные покупателя.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПараметрыПерсональныеДанныеПокупателя() Экспорт
	
	Параметры = Новый Структура(); 
	Параметры.Вставить("ИНН");             // Строка,Необязательно       - ИНН покупателя (клиента)	 
	Параметры.Вставить("ДатаРождения");    // Дата,Необязательно         - Дата рождения покупателя (клиента)	
	Параметры.Вставить("Гражданство");     // Строка,Необязательно       - Гражданство покупателя (клиента)	 
	Параметры.Вставить("ВидДокумента");    // Перечисление,Необязательно - Код вида документа, удостоверяющего личность	
	Параметры.Вставить("ДанныеДокумента"); // Строка,Необязательно       - Данные документа, удостоверяющего личность	 
	Возврат Параметры; 
	
КонецФункции

// Заполняет структуру параметров операции фискализации чека.
//
// Возвращаемое значение:
// 	Структура - Описание:
// * ЕстьПерсональныеДанные - Булево -
// * ИндивидуальныйРежимПодготовкиДанныхКПередачеВОФД - Булево -
// * ДопустимоеРасхождениеФорматноЛогическогоКонтроля - Число -
// * СпособФорматноЛогическогоКонтроля - Неопределено -
// * ДополнительныйРеквизитПользователя - Структура -:
// ** Значение - Произвольный
// ** Наименование - Строка
// * ДополнительныйРеквизит - Неопределено -
// * НефискальныеДокументы - Массив Из Строка.
// * КассаККМ - Произвольный - 
// * ШаблонЧека - Произвольный
// * ТаблицаОплат - Массив из Структура.
// * ПозицииЧека - Массив из Структура.
// * КопийЧека - Число -
// * ТекстПодвала - Строка -
// * ТекстШапки - Строка -
// * ДатаВремя - Дата -
// * НомерСмены - Число
// * НомерЧека - Строка
// * НомерКассы - Строка
// * НаименованиеМагазина - Строка 
// * АдресМагазина - Строка
// * ОрганизацияИНН - Строка
// * ОрганизацияНазвание - Строка
// * СерийныйНомер - Строка
// * ПолучательИНН - Строка
// * Получатель - Строка
// * ДанныеПоставщика - Структура -:
// ** ИНН - Строка
// ** Наименование - Строка
// ** Телефон - Строка
// * ПокупательНомер - Строка
// * ПокупательEmail - Строка
// * ОтправительEmail - Строка
// * Отправляет1СEmail - Булево -
// * Отправляет1СSMS - Булево -
// * ТипРасчета - ПеречислениеСсылка.ТипыРасчетаДенежнымиСредствами -
// * Электронно - Булево -
// * ТорговыйОбъект - Неопределено -
// * Организация - Неопределено -
// * ИдентификаторФискальнойЗаписи - Неопределено -
// * ДокументОснование - Неопределено -
// * КассирИНН - Неопределено -
// * КассирПароль - Неопределено -
// * Кассир - Строка -
Функция ПараметрыОперацииФискализацииЧека() Экспорт;
	
	ПараметрыЧека = ПараметрыВыполненияОперации();
	// Общие реквизиты для всех типов оборудования.
	ПараметрыЧека.Вставить("ДокументОснование" , Неопределено); // Ссылка,Обязательно. Документ по которому пробивается чек.
	ПараметрыЧека.Вставить("ИдентификаторФискальнойЗаписи", Неопределено); // Строка,Необязательно. Идентификатор фискальной записи. 
	ПараметрыЧека.Вставить("Организация"       , Неопределено); // Ссылка,Обязательно. Организация по которому пробивается чек.
	ПараметрыЧека.Вставить("ТорговыйОбъект"    , Неопределено); // Ссылка,Необязательно. Объект по которому пробивается чек.
	ПараметрыЧека.Вставить("Электронно"        , Ложь); // Булево,Обязательно - Чек будет предоставлен в электронной форме, без печати. Ложь-Значение по умолчанию.
	ПараметрыЧека.Вставить("ТипРасчета"        , ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств")); // Обязательно.
	ПараметрыЧека.Вставить("Отправляет1СSMS"   , Ложь); // Булево,Обязательно - SMS отправляет средствами 1C.   Ложь-Значение по умолчанию.
	ПараметрыЧека.Вставить("Отправляет1СEmail" , Ложь); // Булево,Обязательно - Email отправляет средствами 1C. Ложь-Значение по умолчанию.
	ПараметрыЧека.Вставить("НомерЧекаОснования"); // Строка,Необязательно. Номер чека основания для операций возврата или д.р..
	ПараметрыЧека.Вставить("УУИДЧека"); // Строка,Необязательно. УУИД чека.
	
	ПараметрыЧека.Вставить("ОтправительEmail"  ); // Строка,Необязательно - Адрес электронной почты отправителя чека (Тег 1117).
	ПараметрыЧека.Вставить("ПокупательEmail"   ); // Строка,Необязательно - Адрес электронной почты покупателя.
	ПараметрыЧека.Вставить("ПокупательНомер"   ); // Строка,Необязательно - Телефонный номер покупателя. В формате +{Ц}.
	
	
	// Реквизиты начиная с ФФД 1.1 (Введены приказом от 09.04.2018 N ММВ-7-20/207@)
	ПараметрыЧека.Вставить("Получатель"         );  // Строка,Необязательно - Тэг 1227 - Получатель (покупатель)	
	ПараметрыЧека.Вставить("ПолучательИНН"      );  // Строка,Необязательно - Тэг 1228 - ИНН получателя (ИНН покупателя)	
	
	// Реквизиты начиная с ФФД 1.2 (Введены приказом от 14.09.2020 N ЕД-7-20/662@)
	ПараметрыЧека.Вставить("СубъектПерсональныхДанных"); // Необязательно  - Физическое лицо, которое прямо или косвенно определено или определяемо с помощью персональных данных.
	ПараметрыЧека.Вставить("ЕстьПерсональныеДанные", Ложь); // Булево,Необязательно - Параметры чека содержат персональные данные.
	ПараметрыЧека.Вставить("ТипПерсональныхДанных");        // ПеречислениеСсылка.ТипыПерсональныхДанныеККТ, Необязательно - Тип персональных данных.
	
	ПараметрыЧека.Вставить("СведенияОПокупателе" , ПараметрыСведенияОПокупателе());  // Структура,Заполнение необязательно - Тэг 1256 - Сведения о покупателе (клиенте)	
	
	// Параметры необходимые для ФР
	ПараметрыЧека.Вставить("СерийныйНомер"       ); // Строка,Необязательно - Заводской номер ККМ (совместимость с ФР).
	// Параметры необходимые для чека ЕНВД на принтере чеков
	ПараметрыЧека.Вставить("ОрганизацияНазвание" ); // Строка,Необязательно - Название организации (Для чека ЕНВД).
	ПараметрыЧека.Вставить("ОрганизацияИНН"      ); // Строка,Необязательно - ИНН организации (Для чека ЕНВД).
	ПараметрыЧека.Вставить("АдресМагазина"       ); // Строка,Необязательно - Адрес магазина (Для чека ЕНВД).
	ПараметрыЧека.Вставить("НаименованиеМагазина"); // Строка,Необязательно - Наименование магазина (Для чека ЕНВД).
	ПараметрыЧека.Вставить("НомерКассы"          ); // Строка,Необязательно - Номер кассы (Для чека ЕНВД).
	ПараметрыЧека.Вставить("НомерЧека"           ); // Число,Необязательно - Номер чека  (Для чека ЕНВД).
	ПараметрыЧека.Вставить("НомерСмены"          ); // Число,Необязательно - Номер смены (Для чека ЕНВД).
	ПараметрыЧека.Вставить("ДатаВремя", МенеджерОборудованияКлиентСервер.ДатаСеанса()); // ДатаВремя, Необязательно - Дата время в чеке (Для чека ЕНВД).
	// АПК: 374-выкл сообщение в чеках
	ПараметрыЧека.Вставить("ТекстШапки"   , НСтр("ru='ДОБРО ПОЖАЛОВАТЬ!'"));   // Строка - заполняется значением по умолчанию. 
	ПараметрыЧека.Вставить("ТекстПодвала" , НСтр("ru='СПАСИБО ЗА ПОКУПКУ!'")); // Строка - заполняется значением по умолчанию. 
	// АПК: 374-вкл
	ПараметрыЧека.Вставить("КопийЧека"    , 1); // Число,Необязательно - Сколько печатать копий чеков ЕНВД на принтере чеков.

	// Позиции чека для фискализациию
	ПараметрыЧека.Вставить("ПозицииЧека"  , Новый Массив()); // Массив элементов "Структура". Обязательно.
	// Таблица оплаты чека
	ПараметрыЧека.Вставить("ТаблицаОплат" , Новый Массив()); // Массив элементов "Структура". Обязательно.
	// Пример заполнения строки оплаты:
	// СтрокаОплаты = Новый Структура();
	// СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Наличные")); // Наличные
	// СтрокаОплаты.Вставить("Сумма", СуммаВидаОплаты);
	// ПараметрыЧека.ТаблицаОплат.Добавить(СтрокаОплаты);
	
	// Параметры для печати чека по шаблону.
	ПараметрыЧека.Вставить("ШаблонЧека"            ); // Ссылка,Необязательно - Пользовательский шаблон для формирования чека.
	ПараметрыЧека.Вставить("КассаККМ"              ); // Ссылка,Необязательно - Касса ККМ. 
	ПараметрыЧека.Вставить("НефискальныеДокументы" , Новый Массив()); // Массив нефискальных документов. Необязательно.
	
	// Строка,Необязательно - Дополнительный реквизит чека (Тег 1192).
	ПараметрыЧека.Вставить("ДополнительныйРеквизит"  , Неопределено); 
	// Структура,Заполнение необязательно - дополнительный реквизит пользователя (Тег 1084).
	ПараметрыЧека.Вставить("ДополнительныйРеквизитПользователя", ПараметрыДополнительногоРеквизитаПользователя());

	
	// Форматно-логический контроль - "ПеречислениеСсылка.СпособыФорматноЛогическогоКонтроля"
	ПараметрыЧека.Вставить("СпособФорматноЛогическогоКонтроля", Неопределено);     // Перечисление,Необязательно - Способ форматно-логического контроля. 
	ПараметрыЧека.Вставить("ДопустимоеРасхождениеФорматноЛогическогоКонтроля", 0.01); // Число,Необязательно - устанавливается значение по умолчанию. 
	ПараметрыЧека.Вставить("ИндивидуальныйРежимПодготовкиДанныхКПередачеВОФД", Ложь); // Булево,Необязательно - устанавливается значение по умолчанию. 
	ПараметрыЧека.Вставить("ЕдиныйЧек", Ложь);  // Булево,Необязательно - Одна фискальная операция привязана к нескольким документам.
	
	// Системе быстрых платежей и сертификаты ФСС
	ПараметрыЧека.Вставить("ТипПлатежнойСистемы"); // ПеречислениеСсылка.ТипыПлатежнойСистемыККТ, Необязательно - Тип платежной системы.
	ПараметрыЧека.Вставить("ИдентификаторОплатыПлатежнойСистемы"); // Строка,Необязательно - Идентификатор оплаты платежных системы.
	ПараметрыЧека.Вставить("QRКод", ПараметрыQRКода()); // Структура,Заполнение необязательно - параметры QR кода в теле чека.
	ПараметрыЧека.Вставить("ДетализацияОплаты", Новый Массив()); // Массив элементов "Структура" - ПараметрыДетализацииСтрокиОплаты()
	
	Возврат ПараметрыЧека; 
	
КонецФункции

// Заполняет структуру параметров фискальной строки для фискализации чека.
//
// Возвращаемое значение:
// 	Структура - Описание:
// * Штрихкод - Строка
// * ДополнительныйРеквизит - Произвольный
// * СуммаАкциза - Строка
// * НомерТаможеннойДекларации - Строка 
// * ЕдиницаИзмерения - Произвольный
// * КодТНВЭД - Произвольный
// * КодГКЭД - Произвольный
// * ДанныеПоставщика - Структура -:
// ** ИНН - Строка
// ** Наименование - Строка
// ** Телефон - Строка
// * ПризнакПредметаРасчета - Неопределено -
// * ПризнакСпособаРасчета - Неопределено -
// * СуммаНДС - Неопределено -
// * СуммаНСП - Неопределено -
// * СтавкаНДС - Неопределено -
// * СтавкаНСП - Неопределено -
// * СуммаСкидок - Число
// * Сумма - Число -
// * ЦенаСоСкидками - Число -
// * Цена - Число -
// * Количество - Число -
// * Наименование - Строка
// * НомерСтрокиТовара - Число
// * ФискальнаяСтрока - Строка.
// 
Функция ПараметрыФискальнойСтрокиЧека() Экспорт;
	
	ПараметрыСтроки = Новый Структура();
	ПараметрыСтроки.Вставить("ФискальнаяСтрока");  // Строка,Обязательно - Тип строки. Исходящий служебный параметр. 
	ПараметрыСтроки.Вставить("НомерСтрокиТовара"); // Число,Обязательно  - Дополнительный параметр для обработки строк чека для форматно-логического контроля.
	// Обязательные реквизиты
	ПараметрыСтроки.Вставить("Наименование");        // Строка,Обязательно  - Наименование предмета расчета
	ПараметрыСтроки.Вставить("Код");                 // Строка,Обязательно  - Код предмета расчета
	ПараметрыСтроки.Вставить("Количество"     , 0);  // Число,Обязательно   - Количество предмета расчета 
	ПараметрыСтроки.Вставить("Цена"           , 0);  // Число,Обязательно   - Цена без учета скидок и наценок (Необходимо для ФР и ФФД 1.0)
	ПараметрыСтроки.Вставить("ЦенаСоСкидками" , 0);  // Число,Обязательно   - Цена с учета скидок и наценок (Необходимо начиная с ФФД 1.05 и выше)
	ПараметрыСтроки.Вставить("Сумма"          , 0);  // Число,Обязательно   - Стоимость предмета расчета с учетом скидок и наценок
	ПараметрыСтроки.Вставить("СуммаСкидок");         // Число,Необязательно - Сумма скидок и наценок, не входит в ФФД.
	ПараметрыСтроки.Вставить("СтавкаНДС" , Неопределено); // Перечисление.СтавкиНДС,Обязательно   - Ставка НДС.
	ПараметрыСтроки.Вставить("СтавкаНСП" , Неопределено); // Перечисление.СтавкиНСП,Обязательно   - Ставка НСП.
	ПараметрыСтроки.Вставить("СуммаНДС"  , Неопределено); // Число,Обязательно  - Сумма НДС
	ПараметрыСтроки.Вставить("СуммаНСП"  , Неопределено); // Число,Обязательно  - Сумма НДС
	
	// Реквизиты начиная с ФФД 1.05
	// Перечисление - ПризнакиСпособаРасчета - (ФФД, Тег 1214, Расшифровка - таблица 28)
	ПараметрыСтроки.Вставить("ПризнакСпособаРасчета", Неопределено); // Признак способа расчета. Обязательно для ФФД 1.05 и выше.
	                                         
	// Реквизиты начиная с ФФД 1.1
	// Перечисление - ПризнакиПредметаРасчета - (ФФД, Тег 1030, Расшифровка - таблица 29)
	ПараметрыСтроки.Вставить("ПризнакПредметаРасчета", Неопределено); // Признак предмета расчета. Обязательно для ФФД 1.1 и выше.
	
	ПараметрыСтроки.Вставить("ДанныеПоставщика" , ПараметрыДанныеПоставщика()); // Структура - Данные агента, Тег 1224. Заполнение необязательно.
	
	ПараметрыСтроки.Вставить("ЕдиницаИзмерения");         // Необязательно, Единица измерения предмета расчета. 
	ПараметрыСтроки.Вставить("КодТНВЭД"); // Необязательно, Код ТНВЭД предмета расчета. 
	ПараметрыСтроки.Вставить("КодГКЭД"); // Необязательно, Код ГКЭД предмета расчета. 
	
	ПараметрыСтроки.Вставить("ДополнительныйРеквизит"); // Строка,Необязательно - Дополнительный реквизит предмета расчета, Тег 1191.
	
	// Реквизиты начиная с ФФД 1.2
	
	// Дробное количество, рекомендации ЦРПТ "ВЫВОД ТОВАРА ИЗ ОБОРОТА ПРИ РЕАЛИЗАЦИИ КОНЕЧНЫМ ПОТРЕБИТЕЛЯМ (ЧАСТИЧНАЯ ПРОДАЖА)"
	// для 1.05 и 1.1 - пишем в 1191, Формирование и  передача фискального  документав ГИС МТ 
	// для 1.2 - пишем в 1291
	//ПараметрыСтроки.Вставить("ДробноеКоличество", ПараметрыДробноеКоличество());     
	ПараметрыСтроки.Вставить("КонтрольнаяМарка"); // Строка,Необязательно -  Код контрольной марки. Кодируется текстом в кодировке Base64.
	ПараметрыСтроки.Вставить("КодМаркировки"); // Число,Необязательно -  Код маркировки контрольной марки. 1-Алкоголь, 2-Табак, 99-ГСМ.
	ПараметрыСтроки.Вставить("КодЕдиницыИзмерения"); // Строка,Необязательно - Код единицы измерения в соответствии с общероссийским классификатором единиц измерения.
	//ПараметрыСтроки.Вставить("ОтраслевойРеквизит", ПараметрыОтраслевойРеквизит()); // Структура,Заполнение необязательно - Тэг 1260 - Отраслевой реквизит предмета расчета.
	
	// Дополнительные реквизиты не входящие в ФФД.
	ПараметрыСтроки.Вставить("Штрихкод");        // Строка,Необязательно - Штрихкод
	ПараметрыСтроки.Вставить("ШтрихкодBase64");  // Строка,Необязательно - Штрихкод, Кодируется текстом в кодировке Base64.
	// Сертификаты ФСС
	ПараметрыСтроки.Вставить("NTIN"); // Строка,Необязательно - NTIN идентификаторы товара (Код товара ФФС)
	
	Возврат ПараметрыСтроки; 
	
КонецФункции

// Заполняет структуру параметров текстовой строки для фискализации чека.
//
// Параметры:
//  Текст - Строка - Текстовая строка
//
// Возвращаемое значение:
//  Структура.
//
Функция ПараметрыТекстовойСтрокиЧека(Текст = Неопределено) Экспорт;
	
	ПараметрыСтроки = Новый Структура();
	ПараметрыСтроки.Вставить("ТекстоваяСтрока");       // Тип строки. Исходящий служебный параметр. 
	ПараметрыСтроки.Вставить("Текст", Текст);          // Строка,Обязательно   - Текстовая строка
	ПараметрыСтроки.Вставить("ПереносСтроки", Ложь);   // Булево,Необязательно - Перенос строки, устанавливается значение по умолчанию.  
	ПараметрыСтроки.Вставить("Выравнивание" , "Лево"); // Строка,Необязательно - Выравнивание текста, Значения: "Лево", "Право", "Центр".
	Возврат ПараметрыСтроки; 
	
КонецФункции

// Заполняет структуру параметров штрихкода в строке для фискализации чека.
//
// Параметры:
//  ТипШтрихкодаЗнач - Строка - Тип штрихкода.  
//  ШтрихКодЗнач - Строка - Значение штрихкода.
//  ШтрихКодBase64 - Строка - Значение штрихкода в Base64.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПараметрыШтрихкодВСтрокеЧека(ТипШтрихкодаЗнач = Неопределено, ШтрихКодЗнач = Неопределено, ШтрихКодBase64 = Неопределено) Экспорт;
	
	ПараметрыСтроки = Новый Структура();
	ПараметрыСтроки.Вставить("ТипШтрихкода", ТипШтрихкодаЗнач); // Строка,Обязательно - Тип штрихкода.  
	ПараметрыСтроки.Вставить("ШтрихКод"    , ШтрихКодЗнач);     // Строка,Обязательно - Значение штрихкода.
	ПараметрыСтроки.Вставить("ШтрихКодBase64", ШтрихКодBase64);   // Строка,Обязательно - Значение штрихкода в Base64.
	Возврат ПараметрыСтроки; 
	
КонецФункции

// Заполняет структуру параметров строки оплаты.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПараметрыСтрокиОплаты() Экспорт
	
	ПараметрыСтроки = Новый Структура();
	ПараметрыСтроки.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Наличные")); 
	ПараметрыСтроки.Вставить("Сумма"    , 0);
	Возврат ПараметрыСтроки; 
	
КонецФункции

// Заполняет структуру параметров детализации строки оплаты.
//
// Параметры:
//  НаименованиеТипаОплаты - Строка
//  Сумма - Число
// 
// Возвращаемое значение:
//  Структура.
//
Функция ПараметрыДетализацииСтрокиОплаты(НаименованиеТипаОплаты = Неопределено, Сумма = 0) Экспорт
	
	ПараметрыСтроки = Новый Структура();
	ПараметрыСтроки.Вставить("НаименованиеТипаОплаты", НаименованиеТипаОплаты); // Строка,Обязательно  Текстовая строка
	ПараметрыСтроки.Вставить("Сумма", Сумма);
	Возврат ПараметрыСтроки; 
	
КонецФункции



// Заполняет структуру параметров открытия и закрытия смены.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПараметрыОткрытияЗакрытияСмены() Экспорт;
	
	ПараметрыОперации = ПараметрыВыполненияОперации();
	
	ПараметрыОперации.Вставить("АдресРасчетов"); // Строка,Необязательно - Адрес расчетов (Тег 1009).
	ПараметрыОперации.Вставить("МестоРасчетов"); // Строка,Необязательно - Место расчетов (Тег 1187).
	
	Возврат ПараметрыОперации; 
	
КонецФункции

// Заполняет структуру параметров инкассацию на фискальном устройстве.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПараметрыИнкассации() Экспорт;
	
	ПараметрыОперации = ПараметрыВыполненияОперации();
	ПараметрыОперации.Вставить("ДокументОснование" , Неопределено); // Ссылка,Необязательно. Документ по которому формируется операция.
	ПараметрыОперации.Вставить("Организация"       , Неопределено); // Ссылка,Необязательно. Организация по которой формируется операция.
	ПараметрыОперации.Вставить("ТорговыйОбъект"    , Неопределено); // Ссылка,Необязательно. Объект по которому формируется операция.
	
	ПараметрыОперации.Вставить("ТипИнкассации"); // Число,Обязательно - Тип инкассации (1-внесение, 0-выемка)
	ПараметрыОперации.Вставить("Сумма", 0);      // Число,Обязательно - Сумма инкассации.
	
	Возврат ПараметрыОперации; 
	
КонецФункции

// Заполняет структуру параметров аннулирования чека.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПараметрыОперацииАннулированияЧека() Экспорт;
	
	ПараметрыОперации = ПараметрыВыполненияОперации();
	ПараметрыОперации.Вставить("ТипРасчета" , ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств"));
	ПараметрыОперации.Вставить("Фискальный" , Истина); 
	Возврат ПараметрыОперации; 
	
КонецФункции

// Заполняет структуру печати QR кода на фискальном устройстве.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПараметрыПечатиQRКодаНаФискальномУстройстве() Экспорт;
	
	ПараметрыОперации = Новый Структура();
	
	ПараметрыОперации.Вставить("ТипПлатежнойСистемы"); // ПеречислениеСсылка.ТипыПлатежнойСистемыККТ, Необязательно - Тип платежной системы.
	ПараметрыОперации.Вставить("ИдентификаторОплатыПлатежнойСистемы"); // Строка,Необязательно - Идентификатор оплаты платежных системы.
	ПараметрыОперации.Вставить("QRКод", ПараметрыQRКода()); // Структура,Заполнение необязательно - параметры QR кода в теле чека.
	ПараметрыОперации.QRКод.ТекстПользователя = НСтр("ru='Для совершения платежа отсканируйте QR-код'");
	ПараметрыОперации.Вставить("СуммаОперации", Неопределено); // Число,Необязательно - Сумма операции.
	
	Возврат ПараметрыОперации; 
	
КонецФункции

// Параметры счетчиков операций.
//
// Возвращаемое значение:
//  Структура - Параметры нормализуемых фискальных данных:
//   * КоличествоЧеков - Число - 
//   * СуммаЧеков - Число -
//   * КоличествоЧековКоррекции - Число -
//   * СуммаЧековКоррекции - Число -
//
Функция ПараметрыСчетчиковОпераций() Экспорт 
	
	СтруктураРезультат = Новый Структура();
	
	СтруктураРезультат.Вставить("КоличествоЧеков");
	СтруктураРезультат.Вставить("СуммаЧеков");
	
	Возврат СтруктураРезультат;
	
КонецФункции

// Заполняет структуру параметров нормализуемых фискальных данных.
// 
// Возвращаемое значение:
//  Структура - Параметры нормализуемых фискальных данных:
// * ДатаСменыККТ - Число -
// * НомерСменыККТ - Число -
// * НомерЧекаККТ - Число -
// * НомерЧекаЗаСмену - Число -
// * СтатусСмены - Неопределено -
// * СчетчикиОперацийПриход - Структура -:
// ** КоличествоЧеков - Число.
// ** СуммаЧеков - Число.
// ** КоличествоЧековКоррекции - Число.
// ** СуммаЧековКоррекции - Число.
// * СчетчикиОперацийВозвратПрихода - Структура -:
// ** КоличествоЧеков - Число.
// ** СуммаЧеков - Число.
// ** КоличествоЧековКоррекции - Число.
// ** СуммаЧековКоррекции - Число.
// * СчетчикиОперацийРасход - Структура -:
// ** КоличествоЧеков - Число.
// ** СуммаЧеков - Число.
// ** КоличествоЧековКоррекции - Число.
// ** СуммаЧековКоррекции - Число.
// * СчетчикиОперацийВозвратРасхода - Структура -:
// ** КоличествоЧеков - Число.
// ** СуммаЧеков - Число.
// ** КоличествоЧековКоррекции - Число.
// ** СуммаЧековКоррекции - Число.
// * КоличествоЧеков - Число.
// * ОстатокНаличных - Число.
// * ПревышеноВремяОжиданияОтветаОФД - Булево -
// * КоличествоНепереданныхФД - Неопределено -
// * НомерПервогоНепереданногоФД - Неопределено -
// * ДатаПервогоНепереданногоФД - Неопределено -
// * НеобходимаСтрочнаяЗаменаФН - Булево -
// * ПамятьФНПереполнена - Булево -
// * РесурсФНИсчерпан - Булево -
Функция ПараметрыНормализуемыхФискальныхДанных() Экспорт
	
	СтруктураРезультат = Новый Структура();
	
	СтруктураРезультат.Вставить("ДатаСменыККТ"     , 0); // Дата открытой/закрытой смены.
	СтруктураРезультат.Вставить("НомерСменыККТ"    , 0); // Номер открытой/закрытой смены.
	СтруктураРезультат.Вставить("НомерЧекаККТ"     , 0); // Номер последнего фискального чека.
	СтруктураРезультат.Вставить("СтатусСмены"      , Неопределено); // Состояние смены: 1-Закрыта, 2-Открыта, 3-Истекла.
	СтруктураРезультат.Вставить("СчетчикиОперацийПриход"        , ПараметрыСчетчиковОпераций()); // Счетчики операций по типу "приход".
	СтруктураРезультат.Вставить("СчетчикиОперацийВозвратПрихода", ПараметрыСчетчиковОпераций()); // Счетчики операций по типу "возврат прихода".
	СтруктураРезультат.Вставить("СчетчикиОперацийРасход"        , ПараметрыСчетчиковОпераций()); // Счетчики операций по типу "расход".
	СтруктураРезультат.Вставить("СчетчикиОперацийВозвратРасхода", ПараметрыСчетчиковОпераций()); // Счетчики операций по типу "возврат расхода".
	СтруктураРезультат.Вставить("КоличествоЧеков"); // Количество кассовых чеков за смену.
	СтруктураРезультат.Вставить("ОстатокНаличных"); // Остаток наличных денежных средств в кассе
	СтруктураРезультат.Вставить("КоличествоНепереданныхФД"   , Неопределено); // Количество непереданных документов.
	СтруктураРезультат.Вставить("НомерПервогоНепереданногоФД", Неопределено); // Номер первого непереданного документ. 
	СтруктураРезультат.Вставить("ДатаПервогоНепереданногоФД ", Неопределено); // Дата и время первого из непереданных документов.
	СтруктураРезультат.Вставить("ПамятьФППереполнена" 	, Ложь); // Признак что ФП близка к заполнению.
	СтруктураРезультат.Вставить("ПамятьУПФДПереполнена" , Ложь); // Признак что УПФД близка к заполнению.
	СтруктураРезультат.Вставить("СтатусОФД"             , Неопределено); // Статус соединения с ОФД: 0-соединение установлено, 1–нет связи, 2-нет связи более 24 часов, 3-нет связи более 72 часов.
	
	Возврат СтруктураРезультат;
	
КонецФункции

// Заполняет структуру параметров печати текста.
//
// Параметры:
//  СтрокиТекста - Строка
//
// Возвращаемое значение:
//  Структура.
//
Функция ПараметрыПечатиТеста(СтрокиТекста = Неопределено) Экспорт
	
	Параметры = Новый Структура();
	Параметры.Вставить("СтрокиТекста", СтрокиТекста); 
	Возврат Параметры; 
	
КонецФункции



#КонецОбласти

#Область НефискальныйДокумент  

// Функция формирует текст нефискального документа по шаблону.
//
// Параметры:
//  ТипДокумента - Число
//  ОбщиеПараметры - Структура - где:
//   * ПозицииЧека - Массив из Структура - где:
//      ** Наименование - Строка - .
//      ** ДанныеПоставщика - Структура - где:
//          *** Наименование - Строка - .
//      ** ДанныеАгента - Структура - где: 
//          *** ОператорПеревода - Структура - 
//          *** Наименование - Строка - .
//   * ДанныеПоставщика - Структура - где:
//      ** Наименование - Строка - .
//   * ДанныеАгента - Структура - где: 
//      ** ОператорПеревода - Структура - 
//      ** Наименование - Строка - .
//  ШиринаСтроки - Число
//  ДополнительныйТекст - Строка
//  ФорматФФД - Строка
//
// Возвращаемое значение:
//  Строка - .
//
Функция СформироватьТекстНефискальногоДокумента(ТипДокумента, ОбщиеПараметры, ШиринаСтроки = 32, ДополнительныйТекст = Неопределено, ФорматФФД = "1.1") Экспорт
	
	ПозицииЧека  = ?(ОбщиеПараметры.Свойство("ПозицииЧека"), ОбщиеПараметры.ПозицииЧека, Неопределено);
	ТаблицаОплат = ?(ОбщиеПараметры.Свойство("ТаблицаОплат"), ОбщиеПараметры.ТаблицаОплат, Неопределено);
	
	Если ТипДокумента = 0 Тогда
		ТипыЧеков = Новый Соответствие();
		ТипыЧеков.Вставить(1, НСтр("ru='ПРИХОД'"));          // Чек продажи     
		ТипыЧеков.Вставить(2, НСтр("ru='ВОЗВРАТ ПРИХОДА'")); // Чек возврата продажи 
		ТипыЧеков.Вставить(3, НСтр("ru='РАСХОД'"));          // Чек покупки 
		ТипыЧеков.Вставить(4, НСтр("ru='ВОЗВРАТ РАСХОДА'")); // Чек возврата покупки 
		ТипЧека = ТипыЧеков.Получить(КодРасчетаДенежнымиСредствами(ОбщиеПараметры.ТипРасчета))
	ИначеЕсли ТипДокумента = 1 Тогда
		ТипЧека = НСтр("ru='ОТКРЫТИЕ СМЕНЫ'");  
	ИначеЕсли ТипДокумента = 2 Тогда
		ТипЧека = НСтр("ru='ВНЕСЕНИЕ'");  
	ИначеЕсли ТипДокумента = 3 Тогда
		ТипЧека = НСтр("ru='ВЫЕМКА'");  
	ИначеЕсли ТипДокумента = 4 Тогда
		ТипЧека = НСтр("ru='ОТЧЕТ БЕЗ ГАШЕНИЯ'");   
	ИначеЕсли ТипДокумента = 5 Тогда
		ТипЧека = НСтр("ru='ОТЧЕТ С ГАШЕНИЕМ'");  
	КонецЕсли;
	
	ПечатьКлише = Истина;
	
	Разделитель = ПостроитьПоле("", ШиринаСтроки, "=") + Символы.ПС;
	РазделительВнутр = ПостроитьПоле("", ШиринаСтроки, "-") + Символы.ПС;
	
	Текст = Разделитель;
	
	Если ПечатьКлише Тогда 
		// Сформировать шапку чека.
		Если ОбщиеПараметры.Свойство("ОрганизацияНазвание") И НЕ ПустаяСтрока(ОбщиеПараметры.ОрганизацияНазвание) Тогда
			Текст = Текст + ПостроитьПолеПереносом(ОбщиеПараметры.ОрганизацияНазвание, ШиринаСтроки, , Истина) + Символы.ПС;
		КонецЕсли;
		
			
		Если ОбщиеПараметры.Свойство("ТекстШапки") И НЕ ПустаяСтрока(ОбщиеПараметры.ТекстШапки) Тогда
			Текст = Текст + ВыстроитьПоля(ОбщиеПараметры.ТекстШапки, , ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		
		Если ТипДокумента = 0 Тогда 
			Текст = Текст +  ВыстроитьПоля(НСтр("ru='КАССОВЫЙ ЧЕК'"), , ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		
		ОрганизацияИНН = ?(ОбщиеПараметры.Свойство("ОрганизацияИНН") И НЕ ПустаяСтрока(ОбщиеПараметры.ОрганизацияИНН), 
			НСтр("ru='ИНН'") + Символы.НПП + ОбщиеПараметры.ОрганизацияИНН, "");
			
		НомерЧека = ?(ОбщиеПараметры.Свойство("НомерЧека") И НЕ ПустаяСтрока(ОбщиеПараметры.НомерЧека),
			НСтр("ru='ЧЕК №'") + ОбщиеПараметры.НомерЧека, "");
			
		Если Не ПустаяСтрока(ОрганизацияИНН) Тогда
			Текст = Текст + ВыстроитьПоля(ТипЧека, ОрганизацияИНН, ШиринаСтроки) + Символы.ПС;
		Иначе
			Текст = Текст + ПостроитьПоле(ТипЧека, ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		
		ДатаВремя = ?(ОбщиеПараметры.Свойство("ДатаВремя") И НЕ ПустаяСтрока(ОбщиеПараметры.ДатаВремя), 
			ОбщиеПараметры.ДатаВремя, 
			МенеджерОборудованияКлиентСервер.ДатаСеанса());			
		ДатаВремя = Формат(ДатаВремя, "ДФ=""дд.ММ.гггг ЧЧ:мм"""); // АПК: 1367 особенность локального законодательства
		Текст = Текст + ВыстроитьПоля(НомерЧека, ДатаВремя, ШиринаСтроки) + Символы.ПС;
		
		Если ТипДокумента = 0  Тогда
		
			Если НЕ ПустаяСтрока(ОбщиеПараметры.Получатель) Тогда
				Текст = Текст + ПостроитьПолеПереносом(НСтр("ru='ПОКУПАТЕЛЬ:'") + ОбщиеПараметры.Получатель, ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если НЕ ПустаяСтрока(ОбщиеПараметры.ПолучательИНН) Тогда
				Текст = Текст + ПостроитьПоле(НСтр("ru='ИНН ПОКУПАТЕЛЯ:'") + ОбщиеПараметры.ПолучательИНН, ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			
			
			Если НЕ ПустаяСтрока(ОбщиеПараметры.ДополнительныйРеквизитПользователя.Наименование) Тогда
				Текст = Текст + ВыстроитьПоля(НСтр("ru='РЕК.ПОЛЬЗ.:'"), ОбщиеПараметры.ДополнительныйРеквизитПользователя.Наименование, ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если НЕ ПустаяСтрока(ОбщиеПараметры.ДополнительныйРеквизитПользователя.Значение) Тогда
				Текст = Текст + ВыстроитьПоля(НСтр("ru='РЕК.ПОЛЬЗ.:'"), ОбщиеПараметры.ДополнительныйРеквизитПользователя.Значение, ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			
		КонецЕсли;
		
		Текст = Текст + РазделительВнутр;
	КонецЕсли;
	
	ФорматЧисла = "ЧРД=.;ЧЦ=12;ЧДЦ=2;ЧН=0.00;ЧГ=0";
	СуммаЧека   = 0;
	
	// Формируем строки чека.
	Если ПозицииЧека <> Неопределено Тогда
		
		Для ИндексМассива = 0 По ПозицииЧека.Количество() - 1 Цикл
			
			ПозицияЧека = ПозицииЧека[ИндексМассива];
			
			Если ПозицияЧека.Свойство("ФискальнаяСтрока") Тогда
				Наименование = ?(ПозицияЧека.Свойство("Наименование"), ПозицияЧека.Наименование, "");
				Количество   = ?(ПозицияЧека.Свойство("Количество")  , ПозицияЧека.Количество  , 1);
				Цена         = ?(ПозицияЧека.Свойство("Цена")        , ПозицияЧека.Цена        , 0);
				Сумма        = ?(ПозицияЧека.Свойство("Сумма")       , ПозицияЧека.Сумма       , 0);
				СуммаСкидок  = ?(ПозицияЧека.Свойство("СуммаСкидок") , ?(ПустаяСтрока(ПозицияЧека.СуммаСкидок), 0, ПозицияЧека.СуммаСкидок), 0);
				
				ТекстСтроки  = ПостроитьПолеПереносом(Наименование, ШиринаСтроки) + Символы.ПС;
				ЦенаДляПечати = Окр(Сумма / ?(Количество > 0, Количество, 1), 2);
				
				СтрокаТовара = Формат(Количество, "ЧРД=.;ЧЦ=12;ЧДЦ=3;ЧН=0.000;ЧГ=0") + " х " 
					+ Формат(ЦенаДляПечати, ФорматЧисла) + "=" + Формат(Сумма, ФорматЧисла);
				ТекстСтроки = Символы.ПС + ТекстСтроки + ВыстроитьПоля("", СтрокаТовара, ШиринаСтроки) + Символы.ПС;
				
				Если СуммаСкидок > 0 Тогда
					ТекстСкидки = НСтр("ru='СКИДКА'") + "=" + Формат(СуммаСкидок, ФорматЧисла);
				ИначеЕсли СуммаСкидок < 0 Тогда
					ТекстСкидки = НСтр("ru='НАДБАВКА'") + "=" + Формат(СуммаСкидок, ФорматЧисла);
				Иначе
					ТекстСкидки = "";
				КонецЕсли;
				
				ТекстНалога = "";
				
				Если ПустаяСтрока(ТекстСкидки) Тогда
					ТекстСтроки = ТекстСтроки + ПостроитьПоле(ТекстНалога, ШиринаСтроки) + Символы.ПС;
				Иначе
					ТекстСтроки = ТекстСтроки + ВыстроитьПоля(ТекстНалога, ТекстСкидки, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				Текст = Текст + ТекстСтроки; 
				
				Если НЕ ПустаяСтрока(ПозицияЧека.ПризнакПредметаРасчета) Тогда
					ПризнакПредметаРасчетаНаименование = ВРег(Строка(ПозицияЧека.ПризнакПредметаРасчета));
					Текст = Текст + ПостроитьПоле(ПризнакПредметаРасчетаНаименование, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(ПозицияЧека.ПризнакСпособаРасчета) Тогда
					ПризнакСпособаРасчета = КодПризнакаСпособаРасчета(ПозицияЧека.ПризнакСпособаРасчета);
					ПризнакСпособаРасчетаНаименование = НаименованиеПризнакаСпособаРасчета(ПризнакСпособаРасчета);
					Текст = Текст + ПостроитьПоле(ПризнакСпособаРасчетаНаименование, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				
				Если ПозицияЧека.Свойство("КонтрольнаяМарка") И НЕ ПустаяСтрока(ПозицияЧека.КонтрольнаяМарка) Тогда 
					Текст = Текст + ПостроитьПоле(НСтр("ru='[М]'"), ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(ПозицияЧека.ЕдиницаИзмерения) Тогда
					Текст = Текст + ПостроитьПоле(НСтр("ru='ЕД.ИЗМЕРЕНИЯ:'") + ПозицияЧека.ЕдиницаИзмерения, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				
				
				Если НЕ ПустаяСтрока(ПозицияЧека.ДанныеПоставщика.Наименование) Тогда
					Текст = Текст + ВыстроитьПоля(НСтр("ru='ПОСТАВЩИК:'"), ПозицияЧека.ДанныеПоставщика.Наименование, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				Если НЕ ПустаяСтрока(ПозицияЧека.ДанныеПоставщика.Телефон) Тогда
					Текст = Текст + ВыстроитьПоля(НСтр("ru='ТЛФ.ПОСТ.:'"), ПозицияЧека.ДанныеПоставщика.Телефон, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				Если НЕ ПустаяСтрока(ПозицияЧека.ДанныеПоставщика.ИНН) Тогда
					Текст = Текст + ВыстроитьПоля(НСтр("ru='ИНН ПОСТАВЩИКА:'"), ПозицияЧека.ДанныеПоставщика.ИНН, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(ПозицияЧека.ДополнительныйРеквизит) Тогда
					Текст = Текст + ВыстроитьПоля(НСтр("ru='ДОП.РЕК.:'"), ПозицияЧека.ДополнительныйРеквизит, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				
				СуммаЧека = СуммаЧека + Сумма;
			ИначеЕсли ПозицияЧека.Свойство("ТекстоваяСтрока") Тогда
				ТекстСтроки = ?(ПозицияЧека.Свойство("Текст"), ПозицияЧека.Текст, "");
				Текст = Текст + ТекстСтроки + Символы.ПС;
			ИначеЕсли ПозицияЧека.Свойство("ШтрихКод") Тогда
				СтрокаШтрихкода = "|ШтрихКод|" + ПозицияЧека.ТипШтрихкода + "|" + ПозицияЧека.ШтрихКод; 
				Текст = Текст + СтрокаШтрихкода + Символы.ПС; 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Формируем подвал чека
	Если ТаблицаОплат <> Неопределено Тогда
		
		СуммаНаличными       = 0;
		СуммаЭлектронными    = 0;
		СуммаПостоплатой     = 0;
		СуммаПредоплатой     = 0;
		Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл
			Если ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Электронно") Тогда
				СуммаЭлектронными = СуммаЭлектронными + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Предоплата") Тогда
				СуммаПредоплатой = СуммаПредоплатой + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Постоплата") Тогда
				СуммаПостоплатой = СуммаПостоплатой + ТаблицаОплат[ИндексОплаты].Сумма;
			Иначе
				СуммаНаличными = СуммаНаличными + ТаблицаОплат[ИндексОплаты].Сумма;
			КонецЕсли;
		КонецЦикла;
		
		СуммаОплаты = СуммаНаличными + СуммаЭлектронными + СуммаПостоплатой + СуммаПредоплатой;
	
		Текст = Текст + РазделительВнутр;
		Текст = Текст + ВыстроитьПоля(НСтр("ru='ИТОГ'"), "=" + Формат(СуммаЧека, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		Текст = Текст + РазделительВнутр;
		
		Текст = Текст + НСтр("ru='ОПЛАТА'") + Символы.ПС;
		
			Если СуммаНаличными > 0 Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='НАЛИЧНЫМИ'"), "=" + Формат(СуммаНаличными, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если СуммаЭлектронными > 0 Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='БЕЗНАЛИЧНЫМИ'"), "=" + Формат(СуммаЭлектронными, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если СуммаПредоплатой > 0 Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ПРЕДВАРИТЕЛЬНАЯ'"), "=" + Формат(СуммаПредоплатой, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;          
			Если СуммаПостоплатой > 0 Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ПОСЛЕДУЮЩАЯ'"), "=" + Формат(СуммаПостоплатой, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
		
		Если СуммаОплаты - СуммаЧека > 0 Тогда
			Текст = Текст + ВыстроитьПоля(НСтр("ru='ПОЛУЧЕНО'"), "=" + Формат(СуммаОплаты, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='СДАЧА'"), "=" + Формат(СуммаОплаты - СуммаЧека, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		КонецЕсли; 
		
		
		Кассир = ?(ОбщиеПараметры.Свойство("Кассир"), ОбщиеПараметры.Кассир, "");
		Текст = Текст + ПостроитьПоле(НСтр("ru='КАССИР'") + ":" + Символы.НПП + Кассир, ШиринаСтроки) + Символы.ПС + Символы.ПС;                        
		Текст = Текст + ПостроитьПоле(НСтр("ru='ПОДПИСЬ'") + ":", ШиринаСтроки, "_") + Символы.ПС;
		
		Если ОбщиеПараметры.Свойство("ТекстПодвала") И НЕ ПустаяСтрока(ОбщиеПараметры.ТекстПодвала) Тогда
			Текст = Текст + ВыстроитьПоля(ОбщиеПараметры.ТекстПодвала, , ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ДополнительныйТекст) Тогда
		Текст = Текст + ДополнительныйТекст + Символы.ПС;
	КонецЕсли;
	
	Текст = Текст + Разделитель + Символы.ПС;
	
	Возврат Текст;
	
КонецФункции

// Функция формирует текст нефискального чека по шаблону.
//
// Параметры:
//  ОбщиеПараметры - Структура - см. СформироватьТекстНефискальногоДокумента
//  ШиринаСтроки - Число
//  ФорматФФД - Строка
//
// Возвращаемое значение:
//  Структура.
//
Функция СформироватьТекстНефискальногоЧека(ОбщиеПараметры, ШиринаСтроки = 32, ФорматФФД = "1.1") Экспорт
	
	Возврат СформироватьТекстНефискальногоДокумента(0, ОбщиеПараметры, ШиринаСтроки, , ФорматФФД);
	
КонецФункции

// Функция формирует текст нефискального документа по шаблону.
//
Функция СформироватьТекстНефискальногоДокумента_ШаблонКР(ПараметрыВыполнениеКоманды, ОбщиеПараметры) Экспорт
	
	ШиринаСтроки = 32;
	
	Если ПараметрыВыполнениеКоманды.Команда = "OpenShift" Тогда
		ТипДокумента = 1;
	ИначеЕсли ПараметрыВыполнениеКоманды.Команда = "PrintXReport" Тогда
		ТипДокумента = 4;	
	ИначеЕсли ПараметрыВыполнениеКоманды.Команда = "CloseShift" Тогда
		ТипДокумента = 5;
	ИначеЕсли ПараметрыВыполнениеКоманды.Команда = "CheckFiscalization" Тогда
		ТипДокумента = 2;	
	ИначеЕсли ПараметрыВыполнениеКоманды.Команда = "Encash" Тогда
		ТипДокумента = 3;
	Иначе 
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
	
	// Открытие смены
	Если ТипДокумента = 1 Тогда
		ДанныеОтвета 						= ОбщиеПараметры.РезультатОперации.ДанныеОтвета;
		РезультатЗакрытия 					= ДанныеОтвета.result;
		ПодробныеДанныеРезультатаЗакрытия	= РезультатЗакрытия.ofmResponse.fields;
		
		ДатаОткрытия 				= РезультатЗакрытия.date;
		Кассир 						= ПараметрыВыполнениеКоманды.ПараметрыОперации.Кассир;
		НомерСмены 					= ПодробныеДанныеРезультатаЗакрытия.НомерСмены;
		НомерФМ 					= ПодробныеДанныеРезультатаЗакрытия.НомерФМ;
		НомерФД 					= ПодробныеДанныеРезультатаЗакрытия.НомерФД;
		ФискальныйПризнакДокумента 	= ПодробныеДанныеРезультатаЗакрытия.ФискальныйПризнакДокумента;
		
		Текст = "";
		РазделительВнут = ПостроитьПоле("", ШиринаСтроки, "-") + Символы.ПС;
		РазделительВнутСПробелами = ПостроитьПоле("", ШиринаСтроки, "- ") + Символы.ПС;
		
		Текст = Текст + ПостроитьПолеПереносомЦелыхСлов(ДанныеОтвета.registrationData.organizationFullName, ШиринаСтроки, Истина) + Символы.ПС;
		
		Текст = Текст + ПостроитьПолеПереносомЦелыхСлов("ИНН " + ДанныеОтвета.registrationData.tin, ШиринаСтроки, Истина) + Символы.ПС;
		
		Текст = Текст + ПостроитьПолеПереносомЦелыхСлов(ДанныеОтвета.registrationData.address, ШиринаСтроки, Истина) + Символы.ПС;
		
		Текст = Текст + ВыстроитьПоля("Место расчетов:", ПодробныеДанныеРезультатаЗакрытия.АдресРасчетов, ШиринаСтроки) + Символы.ПС;
		
		Текст = Текст + ВыстроитьПоля("ККТ версия:", ДанныеОтвета.general.cashbox_version, ШиринаСтроки) + Символы.ПС;
							
		Текст = Текст + ВыстроитьПоля("ФФД:", "1.0", ШиринаСтроки) + Символы.ПС;
		
		Текст = Текст + ВыстроитьПоля("Кассир:", Кассир, ШиринаСтроки) + Символы.ПС;
		
		Текст = Текст + ПостроитьПолеПереносомЦелыхСлов(Формат(ДатаОткрытия, "ДФ='dd.MM.yyyy, HH:mm'"), ШиринаСтроки, Истина) + Символы.ПС;
		
		Текст = Текст + ПостроитьПолеПереносомЦелыхСлов("ОТКРЫТИЕ СМЕНЫ", ШиринаСтроки, Истина) + Символы.ПС;	
		
		Текст = Текст + РазделительВнут;
		
		Текст = Текст + ВыстроитьПоля("Смена:", НомерСмены, ШиринаСтроки) + Символы.ПС;
		
		Текст = Текст + РазделительВнут;
		
		Текст = Текст + ПостроитьПоле("РН ККМ: " + ПодробныеДанныеРезультатаЗакрытия.РегистрационныйНомерККМ, ШиринаСтроки) + Символы.ПС;
		
		Текст = Текст + ПостроитьПоле("ФМ: " + ПодробныеДанныеРезультатаЗакрытия.НомерФМ, ШиринаСтроки) + Символы.ПС;
		
		Текст = Текст + ПостроитьПоле("ФД: " + ПодробныеДанныеРезультатаЗакрытия.НомерФД, ШиринаСтроки) + Символы.ПС;
			
		Текст = Текст + ПостроитьПоле("ФПД: " + ПодробныеДанныеРезультатаЗакрытия.ФискальныйПризнакДокумента, ШиринаСтроки) + Символы.ПС;		
			
		Возврат Текст;
	КонецЕсли;	
	
	// Закрытие смены, Х отчет
	Если ТипДокумента = 5 или ТипДокумента = 4 Тогда
		Текст = "";
		РазделительВнут = ПостроитьПоле("", ШиринаСтроки, "-") + Символы.ПС;
		РазделительВнутСПробелами = ПостроитьПоле("", ШиринаСтроки, "- ") + Символы.ПС;
		ДанныеОтвета 						= ОбщиеПараметры.РезультатОперации.ДанныеОтвета;
		ДанныеОбОрганизации 					= ДанныеОтвета.registrationData;
		РезультатЗакрытия 					= ДанныеОтвета.result;
			
		ПараметрыЗаполнения = 2;//НомерСменыОФДПовтИсп.ПараметрыЧека();
		НомерСменыОФД = РезультатЗакрытия.number;
		ДатаОФД = РезультатЗакрытия.date;
		
		ПодробныеДанныеРезультатаЗакрытия = РезультатЗакрытия.ofmResponse.fields;		
		
		Текст = Текст + ПостроитьПолеПереносомЦелыхСлов(ДанныеОбОрганизации.organizationFullName, ШиринаСтроки, Истина) + Символы.ПС;
	
		Текст = Текст + ПостроитьПолеПереносомЦелыхСлов("ИНН " + ДанныеОбОрганизации.tin, ШиринаСтроки, Истина) + Символы.ПС;
		
		Текст = Текст + ПостроитьПолеПереносомЦелыхСлов(ДанныеОбОрганизации.address, ШиринаСтроки, Истина) + Символы.ПС;
		
		Текст = Текст + ВыстроитьПоля("Место расчетов:", ДанныеОбОрганизации.name, ШиринаСтроки) + Символы.ПС;
		
		Текст = Текст + ВыстроитьПоля("ККТ версия:", ДанныеОтвета.general.cashbox_version, ШиринаСтроки) + Символы.ПС;
							
		Текст = Текст + ВыстроитьПоля("ФФД:", "1.0", ШиринаСтроки) + Символы.ПС;
		
		Текст = Текст + ВыстроитьПоля("Кассир:", ПараметрыВыполнениеКоманды.ПараметрыОперации.Кассир, ШиринаСтроки) + Символы.ПС;
		
		Текст = Текст + ПостроитьПолеПереносомЦелыхСлов(Формат(ДатаОФД, "ДФ='dd.MM.yyyy, HH:mm'"), ШиринаСтроки, Истина) + Символы.ПС;
				
		Если ТипДокумента = 4 Тогда
			Текст = Текст + ПостроитьПолеПереносомЦелыхСлов("ОТЧЕТ БЕЗ ГАШЕНИЯ", ШиринаСтроки, Истина) + Символы.ПС;
			Текст = Текст + ПостроитьПолеПереносомЦелыхСлов("Х - ОТЧЕТ", ШиринаСтроки, Истина) + Символы.ПС;
		Иначе
			Текст = Текст + ПостроитьПолеПереносомЦелыхСлов("ЗАКРЫТИЕ СМЕНЫ", ШиринаСтроки, Истина) + Символы.ПС;
			Текст = Текст + ПостроитьПолеПереносомЦелыхСлов("Z - ОТЧЕТ", ШиринаСтроки, Истина) + Символы.ПС;
		КонецЕсли;
		
		Текст = Текст + РазделительВнут;
	
		Текст = Текст + ВыстроитьПоля("Смена:", ПодробныеДанныеРезультатаЗакрытия.НомерСмены, ШиринаСтроки) + Символы.ПС;
		
		Попытка
			Чеки_ВозвратыПрихода = Число(ПодробныеДанныеРезультатаЗакрытия.СчетчикиИтоговСмены.СчетчикОпераций_ВозвратПрихода.КоличествоЧековПоПризнакуРасчета);
		Исключение
			Чеки_ВозвратыПрихода = 0;
		КонецПопытки;
		
		Попытка
			Чеки_ВозвратРасхода = Число(ПодробныеДанныеРезультатаЗакрытия.СчетчикиИтоговСмены.СчетчикОпераций_ВозвратРасхода.КоличествоЧековПоПризнакуРасчета);
		Исключение
			Чеки_ВозвратРасхода = 0;
		КонецПопытки;
		
		Попытка
			Чеки_Приход = Число(ПодробныеДанныеРезультатаЗакрытия.СчетчикиИтоговСмены.СчетчикОпераций_Приход.КоличествоЧековПоПризнакуРасчета);
		Исключение
			Чеки_Приход = 0;
		КонецПопытки;
		
		Попытка
			Чеки_Расход = Число(ПодробныеДанныеРезультатаЗакрытия.СчетчикиИтоговСмены.СчетчикОпераций_Расход.КоличествоЧековПоПризнакуРасчета);
		Исключение
			Чеки_Расход = 0;
		КонецПопытки;			
		
		Текст = Текст + ВыстроитьПоля("Фискальные чеки:", Строка(Чеки_ВозвратыПрихода + Чеки_ВозвратРасхода + Чеки_Приход + Чеки_Расход), ШиринаСтроки) + Символы.ПС;
		
		Текст = Текст + ВыстроитьПоля("Фискальные документы:", ПодробныеДанныеРезультатаЗакрытия.ОбщееКоличествоФДЗаСмену, ШиринаСтроки) + Символы.ПС;
		
		Текст = Текст + РазделительВнут;
		
		#Область Продажи
			Текст = Текст + ПостроитьПолеПереносомЦелыхСлов("ПРИХОД", ШиринаСтроки, Истина) + Символы.ПС;

			Текст = Текст + ВыстроитьПоля("Чеки", Чеки_Приход, ШиринаСтроки) + Символы.ПС;
			
			Попытка
				Наличные_Приход = Число(ПодробныеДанныеРезультатаЗакрытия.СчетчикиИтоговСмены.СчетчикОпераций_Приход.ИтоговаяСуммаЧекаНаличными)
									/ 100;
			Исключение
				Наличные_Приход = 0;
			КонецПопытки;
			
			Текст = Текст + ВыстроитьПоля("Наличными", Формат(Наличные_Приход, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00"), ШиринаСтроки) + Символы.ПС;
							
			Попытка
				Безналичные_Приход = Число(ПодробныеДанныеРезультатаЗакрытия.СчетчикиИтоговСмены.СчетчикОпераций_Приход.ИтоговаяСуммаЧекаБезналичными)
										/ 100;
			Исключение
				Безналичные_Приход = 0;
			КонецПопытки;
			
			Текст = Текст + ВыстроитьПоля("Безналичными:",Формат(Безналичные_Приход, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00"), ШиринаСтроки) + Символы.ПС;
			
			Текст = Текст + ВыстроитьПоля("Итого", Формат(Наличные_Приход + Безналичные_Приход, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00"), ШиринаСтроки) + Символы.ПС;
											
			Налоги_НДС_Приход = ПодробныеДанныеРезультатаЗакрытия.СчетчикиИтоговСмены.СчетчикОпераций_Приход.СуммыНалогов.СуммыНДС;
			
			Если ТипЗнч(Налоги_НДС_Приход) = Тип("Массив") Тогда
				
				Для Каждого СтрокаНалогаНДС Из Налоги_НДС_Приход Цикл
					
					Попытка
						СуммаНДС_Приход = Число(СтрокаНалогаНДС.СуммаНДСПоСтавке) / 100;
					Исключение
						СуммаНДС_Приход = 0;
					КонецПопытки;
					
					Если СуммаНДС_Приход > 0 Тогда
						Текст = Текст + ВыстроитьПоля(НСтр("ru='НДС '") + ПолучитьСтавкуНалога("НДС", СтрокаНалогаНДС.КодСтавкиНДС), 
									Формат(СуммаНДС_Приход, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00"), ШиринаСтроки) + Символы.ПС;
					КонецЕсли;										
				КонецЦикла;	
				
			Иначе
				Попытка
					СуммаНДС_Приход = Число(Налоги_НДС_Приход.СуммаНДСПоСтавке) / 100;
				Исключение
					СуммаНДС_Приход = 0;
				КонецПопытки;
				
				Если СуммаНДС_Приход > 0 Тогда
					Текст = Текст + ВыстроитьПоля(НСтр("ru='НДС '") + ПолучитьСтавкуНалога("НДС", Налоги_НДС_Приход.КодСтавкиНДС), 
								Формат(СуммаНДС_Приход, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00"), ШиринаСтроки) + Символы.ПС;
				КонецЕсли;				
			КонецЕсли;
			
			Налоги_НСП_Приход = ПодробныеДанныеРезультатаЗакрытия.СчетчикиИтоговСмены.СчетчикОпераций_Приход.СуммыНалогов.СуммыНСП;
			
			Если ТипЗнч(Налоги_НСП_Приход) = Тип("Массив") Тогда
				
				Для Каждого СтрокаНалогаНСП Из Налоги_НСП_Приход Цикл
					
					Попытка
						СуммаНСП_Приход = Число(СтрокаНалогаНСП.СуммаНСППоСтавке) / 100;
					Исключение
						СуммаНСП_Приход = 0;
					КонецПопытки;
					
					Если СуммаНСП_Приход > 0 Тогда
						Текст = Текст + ВыстроитьПоля(НСтр("ru='НСП '") + ПолучитьСтавкуНалога("НСП", СтрокаНалогаНСП.КодСтавкиНСП), 
									Формат(СуммаНСП_Приход, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00"), ШиринаСтроки) + Символы.ПС;
					КонецЕсли;	
				КонецЦикла;	
				
			Иначе
				Попытка
					СуммаНСП_Приход = Число(Налоги_НСП_Приход.СуммаНСППоСтавке) / 100;
				Исключение
					СуммаНСП_Приход = 0;
				КонецПопытки;				
				
				Если СуммаНСП_Приход > 0 Тогда
					Текст = Текст + ВыстроитьПоля(НСтр("ru='НСП '") + ПолучитьСтавкуНалога("НСП", Налоги_НСП_Приход.КодСтавкиНСП), 
								Формат(СуммаНСП_Приход, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00"), ШиринаСтроки) + Символы.ПС;
				КонецЕсли;				
			КонецЕсли;
			
			Текст = Текст + РазделительВнутСПробелами;
		#КонецОбласти
		
		#Область ВозвратПродажи
			Текст = Текст + ПостроитьПолеПереносомЦелыхСлов("ВОЗВРАТ ПРИХОДА", ШиринаСтроки, Истина) + Символы.ПС;

			Текст = Текст + ВыстроитьПоля("Чеки", Чеки_ВозвратыПрихода, ШиринаСтроки) + Символы.ПС;
			
			Попытка
				Наличные_ВозвратПрихода = Число(ПодробныеДанныеРезультатаЗакрытия.СчетчикиИтоговСмены.СчетчикОпераций_ВозвратПрихода.ИтоговаяСуммаЧекаНаличными)
											/ 100;
			Исключение
				Наличные_ВозвратПрихода = 0;
			КонецПопытки;
			
			Текст = Текст + ВыстроитьПоля("Наличными", Формат(Наличные_ВозвратПрихода, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00"), ШиринаСтроки) + Символы.ПС;
							
			Попытка
				Безналичные_ВозвратПрихода = Число(ПодробныеДанныеРезультатаЗакрытия.СчетчикиИтоговСмены.СчетчикОпераций_ВозвратПрихода.ИтоговаяСуммаЧекаБезналичными)
												/ 100;
			Исключение
				Безналичные_ВозвратПрихода = 0;
			КонецПопытки;
			
			Текст = Текст + ВыстроитьПоля("Безналичными", Формат(Безналичные_ВозвратПрихода, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00"), ШиринаСтроки) + Символы.ПС;
			
			Текст = Текст + ВыстроитьПоля("Итого", Формат(Наличные_ВозвратПрихода + Безналичные_ВозвратПрихода, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00"), ШиринаСтроки) + Символы.ПС;
			
			Налоги_НДС_ВозвратПрихода = ПодробныеДанныеРезультатаЗакрытия.СчетчикиИтоговСмены.СчетчикОпераций_ВозвратПрихода.СуммыНалогов.СуммыНДС;
			
			Если ТипЗнч(Налоги_НДС_ВозвратПрихода) = Тип("Массив") Тогда
				
				Для Каждого СтрокаНалогаНДС Из Налоги_НДС_ВозвратПрихода Цикл
					
					Попытка
						СуммаНДС_ВозвратПрихода = Число(СтрокаНалогаНДС.СуммаНДСПоСтавке) / 100;
					Исключение
						СуммаНДС_ВозвратПрихода = 0;
					КонецПопытки;
					
					Если СуммаНДС_ВозвратПрихода > 0 Тогда
						Текст = Текст + ВыстроитьПоля(НСтр("ru='НДС '") + ПолучитьСтавкуНалога("НДС", СтрокаНалогаНДС.КодСтавкиНДС), 
									Формат(СуммаНДС_ВозвратПрихода, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00"), ШиринаСтроки) + Символы.ПС;
					КонецЕсли;				
				КонецЦикла;	
				
			Иначе
				Попытка
					СуммаНДС_ВозвратПрихода = Число(Налоги_НДС_ВозвратПрихода.СуммаНДСПоСтавке) / 100;
				Исключение
					СуммаНДС_ВозвратПрихода = 0;
				КонецПопытки;
				
				Если СуммаНДС_ВозвратПрихода > 0 Тогда
					Текст = Текст + ВыстроитьПоля(НСтр("ru='НДС '") + ПолучитьСтавкуНалога("НДС", Налоги_НДС_ВозвратПрихода.КодСтавкиНДС), 
								Формат(СуммаНДС_ВозвратПрихода, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00"), ШиринаСтроки) + Символы.ПС;
				КонецЕсли;				
			КонецЕсли;
			
			Налоги_НСП_ВозвратПрихода = ПодробныеДанныеРезультатаЗакрытия.СчетчикиИтоговСмены.СчетчикОпераций_ВозвратПрихода.СуммыНалогов.СуммыНСП;
			
			Если ТипЗнч(Налоги_НСП_ВозвратПрихода) = Тип("Массив") Тогда
				
				Для Каждого СтрокаНалогаНСП Из Налоги_НСП_ВозвратПрихода Цикл
					
					Попытка
						СуммаНСП_ВозвратПрихода = Число(СтрокаНалогаНСП.СуммаНСППоСтавке) / 100;
					Исключение
						СуммаНСП_ВозвратПрихода = 0;
					КонецПопытки;
					
					Если СуммаНСП_ВозвратПрихода > 0 Тогда
						Текст = Текст + ВыстроитьПоля(НСтр("ru='НСП '") + ПолучитьСтавкуНалога("НСП", СтрокаНалогаНСП.КодСтавкиНСП), 
									Формат(СуммаНСП_ВозвратПрихода, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00"), ШиринаСтроки) + Символы.ПС;
					КонецЕсли;	
				КонецЦикла;	
				
			Иначе
				Попытка
					СуммаНСП_ВозвратПрихода = Число(Налоги_НСП_ВозвратПрихода.СуммаНСППоСтавке) / 100;
				Исключение
					СуммаНСП_ВозвратПрихода = 0;
				КонецПопытки;
				
				Если СуммаНСП_ВозвратПрихода > 0 Тогда
					Текст = Текст + ВыстроитьПоля(НСтр("ru='НСП '") + ПолучитьСтавкуНалога("НСП", Налоги_НСП_ВозвратПрихода.КодСтавкиНСП), 
								Формат(СуммаНСП_ВозвратПрихода, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00"), ШиринаСтроки) + Символы.ПС;
				КонецЕсли;				
			КонецЕсли;
			
			Текст = Текст + РазделительВнутСПробелами;
		#КонецОбласти
		
		#Область Расход
			Текст = Текст + ПостроитьПолеПереносомЦелыхСлов("РАСХОД", ШиринаСтроки, Истина) + Символы.ПС;

			Текст = Текст + ВыстроитьПоля("Чеки", Чеки_Расход, ШиринаСтроки) + Символы.ПС;
						
			Попытка
				Наличные_Расход = Число(ПодробныеДанныеРезультатаЗакрытия.СчетчикиИтоговСмены.СчетчикОпераций_Расход.ИтоговаяСуммаЧекаНаличными)
									/ 100;
			Исключение
				Наличные_Расход = 0;
			КонецПопытки;
			
			Текст = Текст + ВыстроитьПоля("Наличными", Формат(Наличные_Расход, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00"), ШиринаСтроки) + Символы.ПС;
			
			Попытка
				Безналичные_Расход = Число(ПодробныеДанныеРезультатаЗакрытия.СчетчикиИтоговСмены.СчетчикОпераций_Расход.ИтоговаяСуммаЧекаБезналичными)
										/ 100;
			Исключение
				Безналичные_Расход = 0;
			КонецПопытки;
			
			Текст = Текст + ВыстроитьПоля("Безналичными", Формат(Безналичные_Расход, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00"), ШиринаСтроки) + Символы.ПС;
			
			Текст = Текст + ВыстроитьПоля("Итого", Формат(Наличные_Расход + Безналичные_Расход, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00"), ШиринаСтроки) + Символы.ПС;
							
			Налоги_НДС_Расход = ПодробныеДанныеРезультатаЗакрытия.СчетчикиИтоговСмены.СчетчикОпераций_Расход.СуммыНалогов.СуммыНДС;
			
			Если ТипЗнч(Налоги_НДС_Расход) = Тип("Массив") Тогда
				
				Для Каждого СтрокаНалогаНДС Из Налоги_НДС_Расход Цикл
					
					Попытка
						СуммаНДС_Расход = Число(СтрокаНалогаНДС.СуммаНДСПоСтавке) / 100;
					Исключение
						СуммаНДС_Расход = 0;
					КонецПопытки;
					
					Если СуммаНДС_Расход > 0 Тогда
						Текст = Текст + ВыстроитьПоля(НСтр("ru='НДС '") + ПолучитьСтавкуНалога("НДС", СтрокаНалогаНДС.КодСтавкиНДС),
									Формат(СуммаНДС_Расход, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00"), ШиринаСтроки) + Символы.ПС;
					КонецЕсли;				
				КонецЦикла;	
				
			Иначе
				Попытка
					СуммаНДС_Расход = Число(Налоги_НДС_Расход.СуммаНДСПоСтавке) / 100;
				Исключение
					СуммаНДС_Расход = 0;
				КонецПопытки;
				
				Если СуммаНДС_Расход > 0 Тогда
					Текст = Текст + ВыстроитьПоля(НСтр("ru='НДС '") + ПолучитьСтавкуНалога("НДС", Налоги_НДС_Расход.КодСтавкиНДС),
								Формат(СуммаНДС_Расход, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00"), ШиринаСтроки) + Символы.ПС;
				КонецЕсли;				
			КонецЕсли;
			
			Налоги_НСП_Расход = ПодробныеДанныеРезультатаЗакрытия.СчетчикиИтоговСмены.СчетчикОпераций_Расход.СуммыНалогов.СуммыНСП;
			
			Если ТипЗнч(Налоги_НСП_Расход) = Тип("Массив") Тогда
				
				Для Каждого СтрокаНалогаНСП Из Налоги_НСП_Расход Цикл
					
					Попытка
						СуммаНСП_Расход = Число(СтрокаНалогаНСП.СуммаНСППоСтавке) / 100;
					Исключение
						СуммаНСП_Расход = 0;
					КонецПопытки;
					
					Если СуммаНСП_Расход > 0 Тогда
						Текст = Текст + ВыстроитьПоля(НСтр("ru='НСП '") + ПолучитьСтавкуНалога("НСП", СтрокаНалогаНСП.КодСтавкиНСП),
									Формат(СуммаНСП_Расход, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00"), ШиринаСтроки) + Символы.ПС;
					КонецЕсли;	
				КонецЦикла;	
				
			Иначе
				Попытка
					СуммаНСП_Расход = Число(Налоги_НСП_Расход.СуммаНСППоСтавке) / 100;
				Исключение
					СуммаНСП_Расход = 0;
				КонецПопытки;				
				
				Если СуммаНСП_Расход > 0 Тогда
					Текст = Текст + ВыстроитьПоля(НСтр("ru='НСП '") + ПолучитьСтавкуНалога("НСП", Налоги_НСП_Расход.КодСтавкиНСП),
								Формат(СуммаНСП_Расход, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00"), ШиринаСтроки) + Символы.ПС;
				КонецЕсли;				
			КонецЕсли;
			
			Текст = Текст + РазделительВнутСПробелами;
		#КонецОбласти
		
		#Область ВозвратРасхода
			Текст = Текст + ПостроитьПолеПереносомЦелыхСлов("ВОЗВРАТ РАСХОДА", ШиринаСтроки, Истина) + Символы.ПС;

			Текст = Текст + ВыстроитьПоля("Чеки", Чеки_ВозвратРасхода, ШиринаСтроки) + Символы.ПС;
						
			Попытка
				Наличные_ВозвратРасхода = Число(ПодробныеДанныеРезультатаЗакрытия.СчетчикиИтоговСмены.СчетчикОпераций_ВозвратРасхода.ИтоговаяСуммаЧекаНаличными)
											/ 100;
			Исключение
				Наличные_ВозвратРасхода = 0;
			КонецПопытки;
			
			Текст = Текст + ВыстроитьПоля("Наличными", Формат(Наличные_ВозвратРасхода, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00"), ШиринаСтроки) + Символы.ПС;
			
			Попытка
				Безналичные_ВозвратРасхода = Число(ПодробныеДанныеРезультатаЗакрытия.СчетчикиИтоговСмены.СчетчикОпераций_ВозвратРасхода.ИтоговаяСуммаЧекаБезналичными)
												/ 100;
			Исключение
				Безналичные_ВозвратРасхода = 0;
			КонецПопытки;
			
			Текст = Текст + ВыстроитьПоля("Безналичными", Формат(Безналичные_ВозвратРасхода, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00"), ШиринаСтроки) + Символы.ПС;
			
			Текст = Текст + ВыстроитьПоля("Итого", Формат(Наличные_ВозвратРасхода + Безналичные_ВозвратРасхода, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00"), ШиринаСтроки) + Символы.ПС;
			
			Налоги_НДС_ВозвратРасхода = ПодробныеДанныеРезультатаЗакрытия.СчетчикиИтоговСмены.СчетчикОпераций_ВозвратРасхода.СуммыНалогов.СуммыНДС;
			
			Если ТипЗнч(Налоги_НДС_ВозвратРасхода) = Тип("Массив") Тогда
				
				Для Каждого СтрокаНалогаНДС Из Налоги_НДС_ВозвратРасхода Цикл
					
					Попытка
						СуммаНДС_ВозвратРасхода = Число(СтрокаНалогаНДС.СуммаНДСПоСтавке) / 100;
					Исключение
						СуммаНДС_ВозвратРасхода = 0;
					КонецПопытки;
					
					Если СуммаНДС_ВозвратРасхода > 0 Тогда
						Текст = Текст + ВыстроитьПоля(НСтр("ru='НДС '") + ПолучитьСтавкуНалога("НДС", СтрокаНалогаНДС.КодСтавкиНДС), 
									Формат(СуммаНДС_ВозвратРасхода, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00"), ШиринаСтроки) + Символы.ПС;
					КонецЕсли;				
				КонецЦикла;	
				
			Иначе
				Попытка
					СуммаНДС_ВозвратРасхода = Число(Налоги_НДС_ВозвратРасхода.СуммаНДСПоСтавке) / 100;
				Исключение
					СуммаНДС_ВозвратРасхода = 0;
				КонецПопытки;
				
				Если СуммаНДС_ВозвратРасхода > 0 Тогда
					Текст = Текст + ВыстроитьПоля(НСтр("ru='НДС '") + ПолучитьСтавкуНалога("НДС", Налоги_НДС_ВозвратРасхода.КодСтавкиНДС), 
								Формат(СуммаНДС_ВозвратРасхода, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00"), ШиринаСтроки) + Символы.ПС;
				КонецЕсли;				
			КонецЕсли;
			
			Налоги_НСП_ВозвратРасхода = ПодробныеДанныеРезультатаЗакрытия.СчетчикиИтоговСмены.СчетчикОпераций_ВозвратРасхода.СуммыНалогов.СуммыНСП;
			
			Если ТипЗнч(Налоги_НСП_ВозвратРасхода) = Тип("Массив") Тогда
				
				Для Каждого СтрокаНалогаНСП Из Налоги_НСП_ВозвратРасхода Цикл
					
					Попытка
						СуммаНСП_ВозвратРасхода = Число(СтрокаНалогаНСП.СуммаНСППоСтавке) / 100;
					Исключение
						СуммаНСП_ВозвратРасхода = 0;
					КонецПопытки;
					
					Если СуммаНСП_ВозвратРасхода > 0 Тогда
						Текст = Текст + ВыстроитьПоля(НСтр("ru='НСП '") + ПолучитьСтавкуНалога("НСП", СтрокаНалогаНСП.КодСтавкиНСП), 
									Формат(СуммаНСП_ВозвратРасхода, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00"), ШиринаСтроки) + Символы.ПС;
					КонецЕсли;	
				КонецЦикла;	
				
			Иначе
				Попытка
					СуммаНСП_ВозвратРасхода = Число(Налоги_НСП_ВозвратРасхода.СуммаНСППоСтавке) / 100;
				Исключение
					СуммаНСП_ВозвратРасхода = 0;
				КонецПопытки;
				
				Если СуммаНСП_ВозвратРасхода > 0 Тогда
					Текст = Текст + ВыстроитьПоля(НСтр("ru='НСП '") + ПолучитьСтавкуНалога("НСП", Налоги_НСП_ВозвратРасхода.КодСтавкиНСП), 
								Формат(СуммаНСП_ВозвратРасхода, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00"), ШиринаСтроки) + Символы.ПС;
				КонецЕсли;				
			КонецЕсли;
			
			Текст = Текст + РазделительВнутСПробелами;
		#КонецОбласти
		
		#Область ВнесениеВыемка
			Текст = Текст + ПостроитьПолеПереносомЦелыхСлов("ВНЕСЕНИЕ/ВЫЕМКА", ШиринаСтроки, Истина) + Символы.ПС;

			Текст = Текст + ВыстроитьПоля("Чеки внесение", Строка(0), ШиринаСтроки) + Символы.ПС;
			
			Текст = Текст + ВыстроитьПоля("Наличными", Формат(0, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00"), ШиринаСтроки) + Символы.ПС;
			
			Текст = Текст + ВыстроитьПоля("Чеки выемка", Строка(0), ШиринаСтроки) + Символы.ПС;
			
			Текст = Текст + ВыстроитьПоля("Наличными", Формат(0, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00"), ШиринаСтроки) + Символы.ПС;
			
			Текст = Текст + РазделительВнутСПробелами;
		#КонецОбласти	
		
		Текст = Текст + ВыстроитьПоля("Итого наличными", Формат(Наличные_Приход - Наличные_ВозвратПрихода 
									- Наличные_Расход + Наличные_ВозвратРасхода
									+ 0 - 0,
		 						"ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00"), ШиринаСтроки) + Символы.ПС;
		
		Текст = Текст + РазделительВнут;
		
		Текст = Текст + ПостроитьПоле("РН ККМ: " + ПодробныеДанныеРезультатаЗакрытия.РегистрационныйНомерККМ, ШиринаСтроки) + Символы.ПС;
	
		Текст = Текст + ПостроитьПоле("ФМ: " + ПодробныеДанныеРезультатаЗакрытия.НомерФМ, ШиринаСтроки) + Символы.ПС;
		
		Текст = Текст + ПостроитьПоле("ФД: " + ПодробныеДанныеРезультатаЗакрытия.НомерФД, ШиринаСтроки) + Символы.ПС;
		
		Если ТипДокумента = 5 Тогда
			Текст = Текст + ПостроитьПоле("ФПД: " + ПодробныеДанныеРезультатаЗакрытия.ФискальныйПризнакДокумента, ШиринаСтроки) + Символы.ПС;
		КонецЕсли;	
		
		Возврат Текст;		
	КонецЕсли;
	
	// Внесения/выемка
	Если ТипДокумента = 3 Тогда
		ДанныеОтвета 						= ОбщиеПараметры.РезультатОперации.ДанныеОтвета;
		ДанныеОбОрганизации 				= ДанныеОтвета.registrationData;
		РезультатЗакрытия 					= ДанныеОтвета.result;
			
		НомерСменыОФД = РезультатЗакрытия.number;
		ДатаОФД = РезультатЗакрытия.date;
		
		Текст = "";
		РазделительВнут = ПостроитьПоле("", ШиринаСтроки, "-") + Символы.ПС;
		РазделительВнутСПробелами = ПостроитьПоле("", ШиринаСтроки, "- ") + Символы.ПС;
		
		Текст = Текст + ПостроитьПолеПереносомЦелыхСлов(ДанныеОбОрганизации.organizationFullName, ШиринаСтроки, Истина) + Символы.ПС;
		
		Текст = Текст + ПостроитьПолеПереносомЦелыхСлов("ИНН " + ДанныеОбОрганизации.tin, ШиринаСтроки, Истина) + Символы.ПС;
		
		Текст = Текст + ПостроитьПолеПереносомЦелыхСлов(ДанныеОбОрганизации.address, ШиринаСтроки, Истина) + Символы.ПС;
		
		Текст = Текст + ВыстроитьПоля("Место расчетов:", ДанныеОбОрганизации.name, ШиринаСтроки) + Символы.ПС;
		
		Текст = Текст + ВыстроитьПоля("ККТ версия:", ДанныеОтвета.general.cashbox_version, ШиринаСтроки) + Символы.ПС;
							
		Текст = Текст + ВыстроитьПоля("ФФД:", "1.0", ШиринаСтроки) + Символы.ПС;
		
		Текст = Текст + ВыстроитьПоля("Кассир:", ПараметрыВыполнениеКоманды.ПараметрыОперации.Кассир, ШиринаСтроки) + Символы.ПС;
		
		Текст = Текст + ПостроитьПолеПереносомЦелыхСлов(Формат(ДатаОФД, "ДФ='dd.MM.yyyy, HH:mm'"), ШиринаСтроки, Истина) + Символы.ПС;
		
		Если ПараметрыВыполнениеКоманды.ПараметрыОперации.ТипИнкассации = 1 Тогда
			Текст = Текст + ПостроитьПолеПереносомЦелыхСлов("ВНЕСЕНИЕ", ШиринаСтроки, Истина) + Символы.ПС;
		Иначе
			Текст = Текст + ПостроитьПолеПереносомЦелыхСлов("ВЫПЛАТА", ШиринаСтроки, Истина) + Символы.ПС;
		КонецЕсли;	
		
		Текст = Текст + РазделительВнут;
		
		Текст = Текст + ВыстроитьПоля("Смена:", ?(НЕ ЗначениеЗаполнено(РезультатЗакрытия.numberShift), " ", РезультатЗакрытия.numberShift), ШиринаСтроки) + Символы.ПС;
		
		Текст = Текст + ВыстроитьПоля("Сумма", ПараметрыВыполнениеКоманды.ПараметрыОперации.Сумма, ШиринаСтроки) + Символы.ПС;
		
		//Текст = Текст + РазделительВнут;
		//
		//Текст = Текст + ПостроитьПоле("РН ККМ: " + ДанныеОбОрганизации.rnmNumber, ШиринаСтроки) + Символы.ПС;
		//
		//Текст = Текст + ПостроитьПоле("ФМ: " + ДанныеОбОрганизации.fnNumber, ШиринаСтроки) + Символы.ПС;
		
		Возврат Текст;
	КонецЕсли;	
	
	
	Если ТипДокумента = 2 Тогда
		// Печать чеков
		ПараметрыОперации = ПараметрыВыполнениеКоманды.ПараметрыОперации;
		ПозицииЧека  = ?(ПараметрыОперации.Свойство("ПозицииЧека"), ПараметрыОперации.ПозицииЧека, Неопределено);
		ТаблицаОплат = ?(ПараметрыОперации.Свойство("ТаблицаОплат"), ПараметрыОперации.ТаблицаОплат, Неопределено);
		
		РезультатСККМ = Неопределено;
		ДанныеОтвета = ОбщиеПараметры.РезультатОперации.ДанныеОтвета;
		РезультатОперации = ДанныеОтвета.result;
		ПодробныеДанныеРезультатаЗакрытия = РезультатОперации.ofmResponse.fields;		
		
		//Если ЗначениеЗаполнено(ОбщиеПараметры.ДокументОснование.СодержимоеОтветаXML) Тогда
		//	СодержимоеОтветаXML = ОбщиеПараметры.ДокументОснование.СодержимоеОтветаXML;			
		//	ОбработкаСодержимогоОтвета(СодержимоеОтветаXML);
		//	
		//	РезультатСККМ =  ПолучитьПараметрыИзJSON(СодержимоеОтветаXML);	
		//КонецЕсли;	
		
		ДанныеОбОрганизации 				= ДанныеОтвета.registrationData;
		РасчетнаяОперация = Число(ПодробныеДанныеРезультатаЗакрытия.ПризнакРасчета);
		ЧекОснования = "";
		ТекстРасчетнойОперации = "";
		
		// Расчетная операция
		Если ПараметрыОперации.Свойство("РасчетнаяОперация") И НЕ ПустаяСтрока(ПараметрыОперации.РасчетнаяОперация) Тогда
			РасчетнаяОперация = ПараметрыОперации.РасчетнаяОперация;
			
			Если РасчетнаяОперация = 1 Тогда
				ТекстРасчетнойОперации = "Продажа";
			ИначеЕсли  РасчетнаяОперация = 2 Тогда
				ТекстРасчетнойОперации = "Покупка";	
			ИначеЕсли  РасчетнаяОперация = 3 Тогда
				ТекстРасчетнойОперации = "Возврат продажи";	
			ИначеЕсли  РасчетнаяОперация = 4 Тогда
				ТекстРасчетнойОперации = "Возврат покупки";
			ИначеЕсли  РасчетнаяОперация = 5 Тогда
				ТекстРасчетнойОперации = "Предоплата (аванс)";				
			ИначеЕсли РасчетнаяОперация = 6 тогда
				ТекстРасчетнойОперации = "Закрытие предоплаты (аванса)";
			ИначеЕсли  РасчетнаяОперация = 7 Тогда
				ТекстРасчетнойОперации = "Возврат предоплаты (аванса)";
			ИначеЕсли  РасчетнаяОперация = 8 Тогда
				ТекстРасчетнойОперации = "Пост оплата (кредит)";			
			ИначеЕсли  РасчетнаяОперация = 9 Тогда
				ТекстРасчетнойОперации = "Закрытие пост оплаты (кредита)";	
			ИначеЕсли  РасчетнаяОперация = 10 Тогда
				ТекстРасчетнойОперации = "Возврат пост оплаты (кредита)";
			КонецЕсли;		     
			
			Если РасчетнаяОперация = 10
				ИЛИ РасчетнаяОперация = 3
				ИЛИ РасчетнаяОперация = 4
				ИЛИ РасчетнаяОперация = 7
				ИЛИ РасчетнаяОперация = 9 Тогда
				
				
				Если ПараметрыОперации.Свойство("ДокументОснование") И ЗначениеЗаполнено(ПараметрыОперации.ДокументОснование) Тогда
					ЧекОснования = НСтр("ru='Чек основания №'") 
						+ ПараметрыОперации.ДокументОснование.ЧекПродажи.НомерЧекаОФД;
				Иначе
					ЧекОснования = НСтр("ru='Чек основания №'")
				КонецЕсли;
				
			ИначеЕсли РасчетнаяОперация = 5 
				ИЛИ РасчетнаяОперация = 6 Тогда				
				ДанныеОплаты = 4;//Документы.Чек.кр_ДанныеОплатыТипПлатежа(ОбщиеПараметры.ДокументОснование.ЗаказКлиента, 
								//?(РасчетнаяОперация = 5, ОбщиеПараметры.ДокументОснование, Неопределено));
				НомерЧека = "";
				
				Если НЕ ДанныеОплаты.Ссылка= Неопределено Тогда
					
					НомерЧека = ДанныеОплаты.Ссылка.НомерЧекаОФД;
					
					ЕстьОснование = Истина;
					
					Если ЗначениеЗаполнено(ПараметрыОперации.НомерЧекаОФД) 
						И ПараметрыОперации.НомерЧекаОФД = НомерЧека
						ИЛИ (ЗначениеЗаполнено(ПараметрыОперации.ДокументОснование.НомерЧекаОФД)
						И ПараметрыОперации.ДокументОснование.НомерЧекаОФД = НомерЧека) Тогда
						ЕстьОснование = Ложь;
					КонецЕсли;		
					
					
					Если ЕстьОснование Тогда
						ЧекОснования = НСтр("ru='Чек основания №'") + НомерЧека;
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		
		Если РасчетнаяОперация = 1 Тогда
			Шапка = "ЧЕК - ПРОДАЖА";
		ИначеЕсли  РасчетнаяОперация = 2 Тогда
			Шапка = "ЧЕК - ПОКУПКА";	
		ИначеЕсли  РасчетнаяОперация = 3 Тогда
			Шапка = "ЧЕК - ВОЗВРАТ ПРОДАЖИ";	
		ИначеЕсли  РасчетнаяОперация = 4 Тогда
			Шапка = "ЧЕК - ВОЗВРАТ ПОКУПКИ";
		КонецЕсли;
		
		Текст = "";
		Текст = Текст + ПостроитьПолеПереносомЦелыхСлов(ДанныеОбОрганизации.organizationFullName, ШиринаСтроки, Истина) + Символы.ПС;
		
		Текст = Текст + ПостроитьПолеПереносомЦелыхСлов("ИНН " + ДанныеОбОрганизации.tin, ШиринаСтроки, Истина) + Символы.ПС;
		
		Текст = Текст + ПостроитьПолеПереносомЦелыхСлов(ДанныеОбОрганизации.address, ШиринаСтроки, Истина) + Символы.ПС;
		
		Текст = Текст + ВыстроитьПоля("Место расчетов:", ДанныеОбОрганизации.name, ШиринаСтроки) + Символы.ПС;
		
		Текст = Текст + ВыстроитьПоля("ККТ версия:", ?(ДанныеОбОрганизации.Свойство("versionKKT"), 
							ДанныеОбОрганизации.versionKKT, " "), ШиринаСтроки) + Символы.ПС;
							
		Текст = Текст + ВыстроитьПоля("ФФД:", "1.0" , ШиринаСтроки) + Символы.ПС;
					//ОбщегоНазначенияПовтИсп.ПолучитьВерсиюФФД(?(ДанныеОбОрганизации.Свойство("versionKKT"), 
					//	ДанныеОбОрганизации.versionKKT, " ")), ШиринаСтроки) + Символы.ПС;
		
		Текст = Текст + ВыстроитьПоля("Кассир:", ПараметрыОперации.Кассир, ШиринаСтроки) + Символы.ПС;
		
		Если ЗначениеЗаполнено(РезультатОперации.date) Тогда
			Дата = РезультатОперации.date;
			
		ИначеЕсли ЗначениеЗаполнено(ПараметрыОперации.ДокументОснование.ДатаЧекаОФД) Тогда
			Дата = ПараметрыОперации.ДокументОснование.ДатаЧекаОФД;
			
		ИначеЕсли ЗначениеЗаполнено(ПараметрыОперации.ДокументОснование.Дата) Тогда
			Дата = ПараметрыОперации.ДокументОснование.Дата;	
		КонецЕсли;
		
		Текст = Текст + ПостроитьПолеПереносомЦелыхСлов(Формат(Дата, "ДФ='dd.MM.yyyy, HH:mm'"), ШиринаСтроки, Истина) + Символы.ПС;
		
		Текст = Текст + ПостроитьПолеПереносомЦелыхСлов(Шапка, ШиринаСтроки, Истина) + Символы.ПС;
			
		Текст = Текст + РазделительВнут;
		
		Если ЗначениеЗаполнено(РезультатОперации.number) Тогда
			Текст = Текст + ВыстроитьПоля("ЧЕК:", РезультатОперации.number, ШиринаСтроки) + Символы.ПС;
			
		ИначеЕсли ЗначениеЗаполнено(ПараметрыОперации.ДокументОснование.НомерЧекаОФД) Тогда
			Текст = Текст + ВыстроитьПоля("ЧЕК:", ПараметрыОперации.ДокументОснование.НомерЧекаОФД, ШиринаСтроки) + Символы.ПС;			
		КонецЕсли;		
		
		//Если РезультатСККМ = Неопределено Тогда
		//	НомерСмены = " ";
		//Иначе
			НомерСмены = РезультатОперации.numberShift;
		//КонецЕсли;	
		
		Текст = Текст + ВыстроитьПоля("Смена:", НомерСмены, ШиринаСтроки) + Символы.ПС;
				
		Если ПараметрыОперации.Свойство("СистемаНалогообложения") Тогда
			СистемаНалогообложения = 4;//Константы.СистемаНалогообложения.Получить();		
			СистемаНалогообложенияСтрокой = Строка(СистемаНалогообложения);
			СистемаНалогообложенияДляПечати = "";
			
			НомерСимволаТире = СтрНайти(СистемаНалогообложенияСтрокой, "-") + 1;
			
			Если НомерСимволаТире = 0 Тогда
				СистемаНалогообложенияДляПечати = СистемаНалогообложенияСтрокой;			
			Иначе 	
				Для НомерСимвола = НомерСимволаТире По СтрДлина(СистемаНалогообложенияСтрокой) Цикл
					
					Если Сред(СистемаНалогообложенияСтрокой, НомерСимвола, 1) = " " Тогда
						Продолжить;	
					Иначе
						СистемаНалогообложенияДляПечати = Сред(СистемаНалогообложенияСтрокой, 
							НомерСимвола, СтрДлина(СистемаНалогообложенияСтрокой) - НомерСимвола + 1);
						Прервать;	
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;		
			
			Текст = Текст + ВыстроитьПоля(НСтр("ru='СНО:'"), СистемаНалогообложенияДляПечати, ШиринаСтроки) + Символы.ПС;
		Иначе
			Текст = Текст + ВыстроитьПоля(НСтр("ru='СНО:'"), " ", ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		
		Если РасчетнаяОперация = 3
			ИЛИ РасчетнаяОперация = 4 Тогда
			Текст = Текст + ВыстроитьПоля(НСтр("ru='Номер ФД чека основания:'"), ПараметрыОперации.ПараметрыФискализации.ДокументОснование.НомерЧекаОснования, ШиринаСтроки) + Символы.ПС;
			
			Текст = Текст + ВыстроитьПоля(НСтр("ru='ФМ чека основания:'"), ПараметрыОперации.ПараметрыФискализации.ДокументОснование.НомерЧекаОснования, ШиринаСтроки) + Символы.ПС;
		КонецЕсли;		
		
		Текст = Текст + РазделительВнут;
		
		ДатаВремя = РезультатОперации.date;
		ДатаВремяДляШтрихкода = ДатаВремя;
			
		ФорматЧисла = "ЧРД=,;ЧЦ=12;ЧДЦ=2;ЧН=0.00;ЧГ=0";
		СуммаЧека   = 0;
		СуммаНалогов = 0;
		СуммаПозицийНДС0   = 0;
		СуммаПозицийНДС10  = 0;
		СуммаПозицийНДС18  = 0;
		СуммаПозицийНДС20  = 0;
		СуммаПозицийНДС110 = 0;
		СуммаПозицийНДС118 = 0;
		СуммаПозицийНДС120 = 0;
		СуммаПозицийБезНДС = 0;
		СуммаПозицийНДСОсвобожденная = 0;
		СуммаНДС0   = 0;
		СуммаНДС10  = 0;
		СуммаНДС18  = 0;
		СуммаНДС20  = 0;
		СуммаНДС110 = 0;
		СуммаНДС118 = 0;
		СуммаНДС120 = 0;
		СуммаБезНДС = 0;
		
		СуммаПозицийНДС12 = 0;
		СуммаНДС12 = 0;
		
		СуммаПозицийНСП1 = 0;
		СуммаПозицийНСП2 = 0;
		СуммаПозицийНСП5 = 0;
		СуммаПозицийБезНСП = 0;
		СуммаНСП1 = 0;
		СуммаНСП2 = 0;
		СуммаНСП5 = 0;
		СуммаБезНСП = 0;
		
		СуммаСкидкиПоЧеку = 0;
		СуммаСкидкиПоЧекуБезНСП = 0;
		СуммаСкидкиПоЧекуТолькоНСП = 0;
		БезналичнаяОплата = Ложь;
		
		СкидкаПриБезналичнойОплате_КассаКР = 4;//Константы.СкидкаПриБезналичнойОплате_КассаКР.Получить();
		
		// Формируем строки чека.
		Если ПозицииЧека <> Неопределено Тогда
			
			Если РасчетнаяОперация = 7 Тогда
				
				Если ПозицииЧека.Количество() > 0 Тогда
					ПозицияЧека = ПозицииЧека[0];				
					НачалоЗаказа = СтрНайти(ПозицияЧека.Наименование, "Заказ");
					
					Если НачалоЗаказа > 0 Тогда
						Текст = Текст + Сред(ПозицияЧека.Наименование, НачалоЗаказа, 
									СтрДлина(ПозицияЧека.Наименование) - НачалоЗаказа + 1) + Символы.ПС;					
						Текст = Текст + РазделительВнут;
					КонецЕсли;
				КонецЕсли;			
			Иначе			                       		
				
				ПечататьТНВЭД_ГКЭД = 4;//Константы.ПечататьТНВЭД_ГКЭД.Получить();
				
				Для ИндексМассива = 0 По ПозицииЧека.Количество() - 1 Цикл
					
					ПозицияЧека = ПозицииЧека[ИндексМассива];
					
					Если ПозицияЧека.Свойство("ФискальнаяСтрока") Тогда
						
						Если ПозицияЧека.Свойство("МаркируемыйТовар") И ПозицияЧека.МаркируемыйТовар Тогда
							МаркируемыйТовар = "[М] ";
						Иначе
							МаркируемыйТовар = "";
						КонецЕсли;	
							
						Наименование 	 = ?(ПозицияЧека.Свойство("Наименование"), МаркируемыйТовар + ПозицияЧека.Наименование, "");
						ЕдиницаИзмерения = ?(ПозицияЧека.Свойство("ЕдиницаИзмерения"), ПозицияЧека.ЕдиницаИзмерения, "");
						Количество   	 = ?(ПозицияЧека.Свойство("Количество")  , ПозицияЧека.Количество  , 1);
						Цена         	 = ?(ПозицияЧека.Свойство("Цена")        , ПозицияЧека.Цена        , 0);
						Сумма        	 = ?(ПозицияЧека.Свойство("Сумма")       , ПозицияЧека.Сумма       , 0);
						НомерСекции  	 = ?(ПозицияЧека.Свойство("НомерСекции") , ПозицияЧека.НомерСекции , 0);
						СтавкаНДС    	 = ?(ПозицияЧека.Свойство("СтавкаНДС")   , ПозицияЧека.СтавкаНДС   , 0);
						СуммаНДС     	 = ?(ПозицияЧека.Свойство("СуммаНДС")    , ?(ПустаяСтрока(ПозицияЧека.СуммаНДС), 0, ПозицияЧека.СуммаНДС), 0);
						
						// КассаКР
						СтавкаНСП    = ?(ПозицияЧека.Свойство("СтавкаНСП")   , ПозицияЧека.СтавкаНСП   , 0);
						СуммаНСП     = ?(ПозицияЧека.Свойство("СуммаНСП")    , ?(ПустаяСтрока(ПозицияЧека.СуммаНСП), 0, ПозицияЧека.СуммаНСП), 0);
						// Конец КассаКР				
						
						СуммаСкидок  = ?(ПозицияЧека.Свойство("СуммаСкидок") , ?(ПустаяСтрока(ПозицияЧека.СуммаСкидок), 0, ПозицияЧека.СуммаСкидок), 0);
						СкидкаПроцент = ?(ПозицияЧека.Свойство("СкидкаПроцент"), ПозицияЧека.СкидкаПроцент, "");
						
						СуммаНСПДляРасчетаСкидки = 0;
						
						//Если //Константы.СистемаНалогообложения.Получить() = Перечисления.СистемыНалогообложения.Общая
						//	СкидкаПриБезналичнойОплате_КассаКР
						//	И НЕ (РасчетнаяОперация = 2
						//		ИЛИ РасчетнаяОперация = 4) 
						//	И ПозицияЧека.СуммаНСПДляРасчетаСкидки_КР > 0 Тогда
						//	СуммаНСПДляРасчетаСкидки = ПозицияЧека.СуммаНСПДляРасчетаСкидки_КР;
						//	БезналичнаяОплата = Истина;
						//	
						//	Если ПараметрыОперации.РасчетнаяОперация = 3 Тогда
						//		Сумма = Сумма - СуммаНСПДляРасчетаСкидки;	
						//	КонецЕсли;	
						//КонецЕсли;	
											
						СуммаСкидкиПоЧеку = СуммаСкидкиПоЧеку + СуммаСкидок + СуммаНСПДляРасчетаСкидки;
						СуммаСкидкиПоЧекуБезНСП = СуммаСкидкиПоЧекуБезНСП + СуммаСкидок;
						//СуммаСкидкиПоЧекуТолькоНСП = СуммаСкидкиПоЧекуТолькоНСП + СуммаНСПДляРасчетаСкидки;
						
						КодТНВЕЭД_ГКЭД = ?(ПозицияЧека.ПризнакПредметаРасчета = 123,
											ПозицияЧека.КодГКЭД, ПозицияЧека.КодТНВЭД); 
																				
						ТекстСтроки  = ПостроитьПолеПереносом(Наименование + " (" + ЕдиницаИзмерения + ")" 
										+ ?(ПечататьТНВЭД_ГКЭД, " (" + КодТНВЕЭД_ГКЭД + ")", "") 
										, ШиринаСтроки)+ Символы.ПС;
								
						ЦенаДляПечати = Окр((Сумма + СуммаСкидок + СуммаНСПДляРасчетаСкидки) / ?(Количество > 0, Количество, 1), 2);
						
						ТочностьОтображенияКоличества = 4;//Константы.ТочностьОтображенияКоличества.Получить();
						
						Если ТочностьОтображенияКоличества = 1 Тогда
							ФорматнаяСтрока = "ЧЦ=12; ЧДЦ=1; ЧРД=.; ЧН=0.0; ЧГ=0";
							
						ИначеЕсли ТочностьОтображенияКоличества = 2 Тогда
							ФорматнаяСтрока = "ЧЦ=12; ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0";
							
						ИначеЕсли ТочностьОтображенияКоличества = 3 Тогда
							ФорматнаяСтрока = "ЧЦ=12; ЧДЦ=3; ЧРД=.; ЧН=0.000; ЧГ=0";
						Иначе
							ФорматнаяСтрока = "ЧЦ=12; ЧДЦ=0; ЧРД=.; ЧН=0; ЧГ=0";
						КонецЕсли;	
						
						ТекстСтроки = ТекстСтроки + ВыстроитьПоля(
							Формат(ЦенаДляПечати, ФорматЧисла) 
								+ " х " 
								+ Формат(Количество, ФорматнаяСтрока),
							Формат(Сумма + СуммаСкидок + СуммаНСПДляРасчетаСкидки, ФорматЧисла), 
							ШиринаСтроки) + Символы.ПС;
						
						Если (СуммаСкидок) > 0 Тогда
							ТекстСкидки = НСтр("ru='СКИДКА'") + "(" + СкидкаПроцент + "%)" + " " + Формат(СуммаСкидок, ФорматЧисла);
						ИначеЕсли (СуммаСкидок) < 0 Тогда
							ТекстСкидки = НСтр("ru='НАДБАВКА'") + "(" + СкидкаПроцент + "%)" + " " + Формат(СуммаСкидок, ФорматЧисла);
						Иначе
							ТекстСкидки = "";
						КонецЕсли;
						
						Если НЕ ПустаяСтрока(ТекстСкидки) Тогда
							ТекстСтроки = ТекстСтроки + ПостроитьПоле(ТекстСкидки, ШиринаСтроки) + Символы.ПС;
						КонецЕсли;
						
						Если (СуммаНСПДляРасчетаСкидки) > 0 Тогда
							ТекстСкидкиЗаБезнал = НСтр("ru='СКИДКА ЗА БЕЗНАЛ.'") + " " + Формат(СуммаНСПДляРасчетаСкидки, ФорматЧисла);
						Иначе
							ТекстСкидкиЗаБезнал = "";
						КонецЕсли;
						
						Если НЕ ПустаяСтрока(ТекстСкидкиЗаБезнал) Тогда
							ТекстСтроки = ТекстСтроки + ПостроитьПоле(ТекстСкидкиЗаБезнал, ШиринаСтроки) + Символы.ПС;
						КонецЕсли;
						
						ТекстНалога = "";
						Если ПозицияЧека.СтавкаНДС = 12 Тогда									
							СуммаПозицийНДС12  = СуммаПозицийНДС12 + Сумма; 
							СуммаНДС12 = СуммаНДС12 + СуммаНДС;
							
							ТекстНалога = "НДС 12%"; 
							
						ИначеЕсли ПозицияЧека.СтавкаНДС = 20 Тогда									
							СуммаПозицийНДС20  = СуммаПозицийНДС20 + Сумма; 
							СуммаНДС20 = СуммаНДС20 + СуммаНДС;
							
							ТекстНалога = "НДС 20%";
							
						//ИначеЕсли ПозицияЧека.СтавкаНДСссылка = Перечисления.СтавкиНДС.НДС0 Тогда
						//	СуммаПозицийНДСОсвобожденная = 1;
							
						//	ТекстНалога = "НДС Осв";
							
						//ИначеЕсли ПозицияЧека.СтавкаНДСссылка = Перечисления.СтавкиНДС.НДС0 Тогда	
						//	СуммаПозицийНДС0 = 1;
							
						//	ТекстНалога = "НДС 0%";
						Иначе
							СуммаПозицийБезНДС = СуммаПозицийБезНДС + Сумма;
							СуммаБезНДС = СуммаБезНДС + Сумма;
							
							ТекстНалога = "Без НДС";
						КонецЕсли;
						
						Если ПозицияЧека.СтавкаНСП = 1 Тогда
							СуммаПозицийНСП1 = СуммаПозицийНСП1 + Сумма; 
							СуммаНСП1 = СуммаНСП1 + СуммаНСП;
							
							ТекстНалога = ТекстНалога + ", НСП 1%";
							
						ИначеЕсли ПозицияЧека.СтавкаНСП = 2 Тогда
							СуммаПозицийНСП2 = СуммаПозицийНСП2 + Сумма;
							СуммаНСП2 = СуммаНСП2 + СуммаНСП;
							
							ТекстНалога = ТекстНалога + ", НСП 2%";
							
						ИначеЕсли ПозицияЧека.СтавкаНСП = 5 Тогда
							СуммаПозицийНСП5 = СуммаПозицийНСП5 + Сумма;
							СуммаНСП5 = СуммаНСП5 + СуммаНСП;
							
							ТекстНалога = ТекстНалога + ", НСП 5%";
							
						Иначе
							СуммаПозицийБезНСП = СуммаПозицийБезНСП + Сумма;
							СуммаБезНСП = СуммаБезНСП + Сумма;
							
							ТекстНалога = ТекстНалога + ", Без НСП";
						КонецЕсли;
						
						ТекстСтроки = ТекстСтроки + ПостроитьПоле(ТекстНалога, ШиринаСтроки) + Символы.ПС;
						// Конец КассаКР
						
						Текст = Текст + ТекстСтроки; 
											
						СуммаЧека = СуммаЧека + Сумма;
						СуммаНалогов = СуммаНалогов + СуммаНДС + СуммаНСП;
						
					ИначеЕсли ПозицияЧека.Свойство("ТекстоваяСтрока") Тогда
						//И НЕ РасчетнаяОперация = 5
						//И НЕ РасчетнаяОперация = 6
						//И НЕ РасчетнаяОперация = 7 Тогда
						ТекстСтроки = ?(ПозицияЧека.Свойство("Текст"), ПозицияЧека.Текст, "");
						Текст = Текст + ТекстСтроки + Символы.ПС;
					ИначеЕсли ПозицияЧека.Свойство("ШтрихКод") Тогда
						СтрокаШтрихкода = "|ШтрихКод|" + ПозицияЧека.ТипШтрихкода + "|" + ПозицияЧека.ШтрихКод; 
						Текст = Текст + СтрокаШтрихкода + Символы.ПС; 
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		// Формируем подвал чека
		Если ТаблицаОплат <> Неопределено Тогда
			
			СуммаНаличными       = 0;
			СуммаЭлектронными    = 0;
			СуммаПостоплатой     = 0;
			СуммаПредоплатой     = 0;
			СуммаПредоставлением = 0;
			Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл
				Если ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Электронно") Тогда
					СуммаЭлектронными = СуммаЭлектронными + ТаблицаОплат[ИндексОплаты].Сумма;
				ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Предоплата") Тогда
					СуммаПредоплатой = СуммаПредоплатой + ТаблицаОплат[ИндексОплаты].Сумма;
				ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Постоплата") Тогда
					СуммаПостоплатой = СуммаПостоплатой + ТаблицаОплат[ИндексОплаты].Сумма;
				Иначе
					СуммаНаличными = СуммаНаличными + ТаблицаОплат[ИндексОплаты].Сумма;
				КонецЕсли;
			КонецЦикла;
			
			СуммаОплаты = СуммаНаличными + СуммаЭлектронными + СуммаПостоплатой + СуммаПредоплатой + СуммаПредоставлением;
			
			Если НЕ РасчетнаяОперация = 7 Тогда
				Текст = Текст + РазделительВнут;				
				//Текст = Текст + ВыстроитьПоля(?(СуммаСкидкиПоЧеку <> 0, НСтр("ru='СУММА БЕЗ СКИДКИ'"), НСтр("ru='СУММА'")), 
				//	"=" + Формат(СуммаЧека + СуммаСкидкиПоЧеку, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
				
				//Текст = Текст + ВыстроитьПоля("Всего", Формат(СуммаЧека - СуммаНалогов, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
				Текст = Текст + ВыстроитьПоля("Сумма без налогов", Формат(СуммаЧека - СуммаНалогов, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;	
			
			Если НЕ РасчетнаяОперация = 5 И НЕ РасчетнаяОперация = 7
				И НЕ РасчетнаяОперация = 2 И НЕ РасчетнаяОперация = 4 Тогда
				
				Если СуммаНДС12 > 0 Тогда
					Текст = Текст + ВыстроитьПоля(НСтр("ru='НДС 12%'"), Формат(СуммаНДС12, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				
				Если СуммаПозицийНДС0 > 0 Тогда
					Текст = Текст + ВыстроитьПоля(НСтр("ru='НДС 0%'"), 0, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				
				Если СуммаПозицийНДСОсвобожденная > 0 Тогда
					Текст = Текст + ВыстроитьПоля(НСтр("ru='НДС Осв.'"), 0, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				
				//Если СуммаПозицийБезНДС > 0 Тогда
				//	Текст = Текст + ВыстроитьПоля(НСтр("ru=' в т.ч. БЕЗ НДС'"), "=" + Формат(СуммаПозицийБезНДС, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
				//КонецЕсли;
				
				Если НЕ РасчетнаяОперация = 2
					И НЕ РасчетнаяОперация = 4 Тогда
					
					//Если СкидкаПриБезналичнойОплате_КассаКР 
					//	И БезналичнаяОплата Тогда
					Если БезналичнаяОплата Тогда	
						Текст = Текст + ВыстроитьПоля(НСтр("ru='НСП'"), Формат(0, ФорматЧисла), ШиринаСтроки) + Символы.ПС; 				
					Иначе	
						Если СуммаНСП1 > 0 Тогда
							Текст = Текст + ВыстроитьПоля(НСтр("ru='НСП 1%'"), Формат(СуммаНСП1, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
						КонецЕсли;
						Если СуммаНСП2 > 0 Тогда
							Текст = Текст + ВыстроитьПоля(НСтр("ru='НСП 2%'"), Формат(СуммаНСП2, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
						КонецЕсли;
						Если СуммаНСП5 > 0 Тогда
							Текст = Текст + ВыстроитьПоля(НСтр("ru='НСП 5%'"), Формат(СуммаНСП5, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
						КонецЕсли;
						
						//Если СуммаПозицийБезНСП > 0 Тогда
						//	Текст = Текст + ВыстроитьПоля(НСтр("ru=' в т.ч. БЕЗ НСП'"), "=" + Формат(СуммаПозицийБезНСП, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
						//КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ РасчетнаяОперация = 7 Тогда
				
				Если РасчетнаяОперация = 5
					ИЛИ РасчетнаяОперация = 6
					ИЛИ РасчетнаяОперация = 8
					ИЛИ РасчетнаяОперация = 9 Тогда				
					Текст = Текст + ВыстроитьПоля(НСтр("ru='ИТОГ'"), Формат(СуммаНаличными + СуммаЭлектронными, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
				Иначе	
					Текст = Текст + ВыстроитьПоля(НСтр("ru='ИТОГ'"), Формат(СуммаЧека, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
			КонецЕсли;
			
			Если СуммаНаличными > 0 Тогда
				Текст = Текст + ВыстроитьПоля(НСтр("ru='Наличные'"), Формат(СуммаНаличными, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если СуммаЭлектронными > 0 Тогда
				Текст = Текст + ВыстроитьПоля(НСтр("ru='Карта'"), Формат(СуммаЭлектронными, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			//Если СуммаПредоплатой > 0 Тогда
			//	Текст = Текст + ВыстроитьПоля(НСтр("ru='ПРЕДВАРИТЕЛЬНАЯ'"), "=" + Формат(СуммаПредоплатой, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			//КонецЕсли;          
			//Если СуммаПостоплатой > 0 Тогда
			//	Текст = Текст + ВыстроитьПоля(НСтр("ru='ПОСЛЕДУЮЩАЯ'"), "=" + Формат(СуммаПостоплатой, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			//КонецЕсли;
			//Если СуммаПредоставлением > 0 Тогда
			//	Текст = Текст + ВыстроитьПоля(НСтр("ru='ИНАЯ ФОРМА'"), "=" + Формат(СуммаПредоставлением, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			//КонецЕсли;          		
			
			Текст = Текст + ПостроитьПоле(НСтр("ru='  Полный расчет'"), ШиринаСтроки) + Символы.ПС;
			
			Если НЕ РасчетнаяОперация = 7 Тогда
				
				Если НЕ СуммаНаличными = 0 
					И (СуммаНаличными - СуммаЧека) > 0 Тогда	
					Текст = Текст + ВыстроитьПоля(НСтр("ru='Сдача'"), Формат(СуммаНаличными - СуммаЧека, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
					
				ИначеЕсли (СуммаНаличными - СуммаЧека) = 0 Тогда
					Текст = Текст + ВыстроитьПоля(НСтр("ru='Сдача'"), Формат(0, ФорматЧисла), ШиринаСтроки) + Символы.ПС;	
				КонецЕсли;
				
				Если СуммаСкидкиПоЧекуБезНСП > 0 Тогда
					Текст = Текст + ВыстроитьПоля(НСтр("ru='Скдика'"), Формат(СуммаСкидкиПоЧекуБезНСП, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
				КонецЕсли;	
					
				Если СуммаСкидкиПоЧекуТолькоНСП > 0 Тогда
					Текст = Текст + ВыстроитьПоля(НСтр("ru='Скдика за безнал..'"), Формат(СуммаСкидкиПоЧекуТолькоНСП, ФорматЧисла), ШиринаСтроки) + Символы.ПС;			
				КонецЕсли;	
			КонецЕсли;	
				
			Текст = Текст + ПостроитьПоле("РН ККМ: " + ПодробныеДанныеРезультатаЗакрытия.РегистрационныйНомерККМ, ШиринаСтроки) + Символы.ПС;
			
			Текст = Текст + ПостроитьПоле("ФМ: " + ПодробныеДанныеРезультатаЗакрытия.НомерФМ, ШиринаСтроки) + Символы.ПС;
			
			Текст = Текст + ПостроитьПоле("ФД: " + ПодробныеДанныеРезультатаЗакрытия.НомерФД, ШиринаСтроки) + Символы.ПС;
				
			Текст = Текст + ПостроитьПоле("ФПД: " + ПодробныеДанныеРезультатаЗакрытия.ФискальныйПризнакДокумента, ШиринаСтроки) + Символы.ПС;		
								
			// Вывод QR кода.
			// tax-web-control/client/api/v1/ticket - API запрос
			// Параметры из сформированного чека:
			// date - время чека в формате 
			// type - Код формы ФД
			// operationType - признак расчета 
			// fn_number - номер ФМ
			// fd_number - номер ФД
			// fm - фискальный признак документа
			// tin - ИНН НП, владельца кассы
			// regNumber - рег номер кассы
			// sum - сумма чека в мин единицах (тыйынах)

			ШаблонТекста = "http://92.62.72.170:30105/tax-web-control/client/api/v1/ticket?date=%1&type=%2&operation_type=%3&fn_number=%4&fd_number=%5&fm=%6&tin=%7&regNumber=%8&sum=%9";

			// Продажа
			Если РасчетнаяОперация = 1 Тогда
				ПризнакРасчета = "1";
				
			// Покупка	
			ИначеЕсли  РасчетнаяОперация = 2 Тогда
				ПризнакРасчета = "3";	
				
			// Возврат продажи	
			ИначеЕсли  РасчетнаяОперация = 3 Тогда
				ПризнакРасчета = "2";
				
			// Возврат покупки	
			ИначеЕсли  РасчетнаяОперация = 4 Тогда
				ПризнакРасчета = "4";
			КонецЕсли;
			
			QRСтрока = СтрШаблон(ШаблонТекста,
				Формат(ДатаВремяДляШтрихкода, "ДФ=yyyyMMddTHHmmss"),
				"3",
				ПризнакРасчета,                               
				ПодробныеДанныеРезультатаЗакрытия.НомерФМ,
				ПодробныеДанныеРезультатаЗакрытия.НомерФД,
				ПодробныеДанныеРезультатаЗакрытия.ФискальныйПризнакДокумента,
				ДанныеОбОрганизации.tin,
				ПодробныеДанныеРезультатаЗакрытия.РегистрационныйНомерККМ,
				СтрЗаменить(Формат(СуммаЧека, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧГ=0"), ",", ""));	
				
			ПараметрыШтрихкода = МенеджерОборудованияКлиентСервер.ПараметрыШтрихкодВСтрокеЧека("QR", QRСтрока);// "2900001462105");	
			Если ПараметрыШтрихкода <> Неопределено И ПараметрыШтрихкода.Свойство("ШтрихКод") Тогда
				СтрокаШтрихкода = "|ШтрихКод|" + ПараметрыШтрихкода.ТипШтрихкода + "|" + ПараметрыШтрихкода.ШтрихКод; 
				Текст = Текст + СтрокаШтрихкода + Символы.ПС; 			
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Текст;
	КонецЕсли;
	
	//// НЕ ИСПОЛЬЗУЕМЫЕ
	//кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах = 4;//Константы.кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах.Получить();
	//
	//Если ОбщиеПараметры.Свойство("ЧекАтотестирования") Тогда
	//	Разделитель = ПостроитьПоле("", ШиринаСтроки, "=") + Символы.ПС;
	//	Текст = Разделитель;
	//	
	//	Текст = Текст + ВыстроитьПоля(НСтр("ru='Чек автотестирования'"), "", ШиринаСтроки) + Символы.ПС;
	//	
	//	Текст = Текст + ПостроитьПоле(НСтр("ru='Дата:'") + Символы.НПП + ТекущаяДата(), ШиринаСтроки) + Символы.ПС;
	//	
	//	СистемаНалогообложения = ОбщиеПараметры.ПараметрыОФД.СистемаНалогообложения;		
	//	СистемаНалогообложенияСтрокой = Строка(СистемаНалогообложения);
	//	СистемаНалогообложенияДляПечати = "";
	//	
	//	НомерСимволаТире = СтрНайти(СистемаНалогообложенияСтрокой, "-") + 1;
	//	
	//	Если НомерСимволаТире = 0 Тогда
	//		СистемаНалогообложенияДляПечати = СистемаНалогообложенияСтрокой;			
	//	Иначе 	
	//		Для НомерСимвола = НомерСимволаТире По СтрДлина(СистемаНалогообложенияСтрокой) Цикл
	//			
	//			Если Сред(СистемаНалогообложенияСтрокой, НомерСимвола, 1) = " " Тогда
	//				Продолжить;	
	//			Иначе
	//				СистемаНалогообложенияДляПечати = Сред(СистемаНалогообложенияСтрокой, 
	//					НомерСимвола, СтрДлина(СистемаНалогообложенияСтрокой) - НомерСимвола + 1);
	//				Прервать;	
	//			КонецЕсли;	
	//		КонецЦикла;	
	//	КонецЕсли;		
	//	
	//	Текст = Текст + ПостроитьПоле(НСтр("ru='РНО:'") + Символы.НПП + СистемаНалогообложенияДляПечати, ШиринаСтроки) + Символы.ПС;		
	//	
	//	Текст = Текст + ПостроитьПоле(НСтр("ru='Торговая точка:'") + Символы.НПП + ОбщиеПараметры.ПараметрыОФД.НаименованиеМагазина, ШиринаСтроки) + Символы.ПС;
	//	
	//	Текст = Текст + ПостроитьПолеПереносомЦелыхСлов(ОбщиеПараметры.ПараметрыОФД.МодельККМДляПечати, ШиринаСтроки) + Символы.ПС;
	//				
	//	Текст = Текст + ПостроитьПоле(НСтр("ru='Версия: '") + ОбщиеПараметры.ПараметрыОФД.МодельККМКод, ШиринаСтроки) + Символы.ПС;					
	//				
	//	Текст = Текст + ПостроитьПоле(НСтр("ru='РНМ:'") + Символы.НПП + ОбщиеПараметры.ПараметрыОбъекта.РегистрационныйНомер, ШиринаСтроки) + Символы.ПС;
	//	
	//	Текст = Текст + ПостроитьПоле(НСтр("ru='КАССИР:'") + Символы.НПП + ОбщиеПараметры.ПараметрыОбъекта.Кассир, ШиринаСтроки) + Символы.ПС;
	//	
	//	Текст = Текст + ПостроитьПолеПереносомЦелыхСлов(
	//		НСтр("ru='Смена:'") + Символы.НПП + ОбщиеПараметры.ПараметрыОФД.СтатусСмены 
	//		+ Символы.НПП + ОбщиеПараметры.ПараметрыОФД.ДатаСмены, ШиринаСтроки) + Символы.ПС;
	//	
	//	Текст = Текст + Разделитель;
	//	
	//	Возврат Текст;	
	//КонецЕсли;	
	//
	//Если ОбщиеПараметры.Свойство("ФискальныйОтчет") Тогда
	//	Разделитель = ПостроитьПоле("", ШиринаСтроки, "=") + Символы.ПС;
	//	Текст = Разделитель;
	//	
	//	Текст = Текст + ВыстроитьПоля(НСтр("ru='Необнуляемые суммы'"), , ШиринаСтроки) + Символы.ПС;
	//	
	//	Текст = Текст + ПостроитьПоле(НСтр("ru='Дата: '") + ОбщиеПараметры.ДанныеОтчета.ДатаФормирования, ШиринаСтроки) + Символы.ПС;
	//	
	//	Текст = Текст + ПостроитьПоле(СтрШаблон(НСтр("ru='Кассовые смены с %1 по %2'"), 
	//					ОбщиеПараметры.ДанныеОтчета.КассоваяСменаНачало.НомерСменыОФД,
	//					ОбщиеПараметры.ДанныеОтчета.КассоваяСменаКонец.НомерСменыОФД),
	//					ШиринаСтроки) + Символы.ПС;
	//	
	//	Текст = Текст + ПостроитьПолеПереносомЦелыхСлов(ОбщиеПараметры.ДанныеОтчета.ОрганизацияНазвание, ШиринаСтроки, Истина) + Символы.ПС;
	//	
	//	Текст = Текст + ПостроитьПоле(НСтр("ru='ИНН:'") + Символы.НПП + ОбщиеПараметры.ДанныеОтчета.ОрганизацияИНН, ШиринаСтроки) + Символы.ПС; 
	//	
	//	Текст = Текст + ПостроитьПоле(НСтр("ru='РНО:'") + ОбщиеПараметры.ДанныеОтчета.РНО, ШиринаСтроки) + Символы.ПС;
	//	
	//	Текст = Текст + ПостроитьПоле(НСтр("ru='РНМ:'") + Символы.НПП + ОбщиеПараметры.ДанныеОтчета.РегистрационныйНомер, ШиринаСтроки) + Символы.ПС;  
	//			
	//	Текст = Текст + ПостроитьПолеПереносомЦелыхСлов(123, ШиринаСтроки) + Символы.ПС;		
	//	
	//	Текст = Текст + ПостроитьПоле(НСтр("ru='Версия: '") + ОбщиеПараметры.ДанныеОтчета.МодельККМкод, ШиринаСтроки) + Символы.ПС;
	//			
	//	Текст = Текст + ПостроитьПоле(НСтр("ru='КАССИР:'") + Символы.НПП + ОбщиеПараметры.ДанныеОтчета.Кассир, ШиринаСтроки) + Символы.ПС + Символы.ПС;
	//	  				
	//	// ПОКУПКА	
	//	Если (кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах
	//		И НЕ (ОбщиеПараметры.ДанныеОтчета.details[1].totalСash + ОбщиеПараметры.ДанныеОтчета.details[1].totalСashless) = 0)
	//		ИЛИ НЕ кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах Тогда
	//		
	//		Текст = Текст + ВыстроитьПоля(НСтр("ru='ПОКУПКА:'"), 
	//			Формат(ОбщиеПараметры.ДанныеОтчета.details[1].totalСash + ОбщиеПараметры.ДанныеОтчета.details[1].totalСashless, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=0"),
	//			ШиринаСтроки) + Символы.ПС;	
	//			
	//		Если (кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах
	//			И НЕ ОбщиеПараметры.ДанныеОтчета.details[1].totalСash = 0)
	//			ИЛИ НЕ кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах Тогда	
	//			Текст = Текст + ВыстроитьПоля(НСтр("ru=' НАЛИЧНЫМИ.....'"), 
	//				Формат(ОбщиеПараметры.ДанныеОтчета.details[1].totalСash, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=0"),
	//				ШиринаСтроки) + Символы.ПС;
	//		КонецЕсли;		
	//				
	//		Если (кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах
	//			И НЕ ОбщиеПараметры.ДанныеОтчета.details[1].totalСashless = 0)
	//			ИЛИ НЕ кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах Тогда		
	//			Текст = Текст + ВыстроитьПоля(НСтр("ru=' БЕЗНАЛИЧНЫМИ..'"), 
	//				Формат(ОбщиеПараметры.ДанныеОтчета.details[1].totalСashless, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=0"),
	//				ШиринаСтроки) + Символы.ПС;
	//		КонецЕсли;		
	//	КонецЕсли;	
	//				
	//	// ВОЗВРАТ ПОКУПКИ
	//	Если (кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах
	//		И НЕ (ОбщиеПараметры.ДанныеОтчета.details[3].totalСash + ОбщиеПараметры.ДанныеОтчета.details[3].totalСashless) = 0)
	//		ИЛИ НЕ кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах Тогда
	//		
	//		Текст = Текст + ВыстроитьПоля(НСтр("ru='ВОЗВРАТ ПОКУПКИ:'"), 
	//			Формат(ОбщиеПараметры.ДанныеОтчета.details[3].totalСash + ОбщиеПараметры.ДанныеОтчета.details[3].totalСashless, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=0"),
	//			ШиринаСтроки) + Символы.ПС;	
	//			
	//		Если (кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах
	//			И НЕ ОбщиеПараметры.ДанныеОтчета.details[3].totalСash = 0)
	//			ИЛИ НЕ кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах Тогда	
	//			Текст = Текст + ВыстроитьПоля(НСтр("ru=' НАЛИЧНЫМИ.....'"), 
	//				Формат(ОбщиеПараметры.ДанныеОтчета.details[3].totalСash, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=0"),
	//				ШиринаСтроки) + Символы.ПС;
	//		КонецЕсли;		
	//				
	//		Если (кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах
	//			И НЕ ОбщиеПараметры.ДанныеОтчета.details[3].totalСashless = 0)
	//			ИЛИ НЕ кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах Тогда					
	//			Текст = Текст + ВыстроитьПоля(НСтр("ru=' БЕЗНАЛИЧНЫМИ..'"), 
	//				Формат(ОбщиеПараметры.ДанныеОтчета.details[3].totalСashless, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=0"),
	//				ШиринаСтроки) + Символы.ПС;
	//		КонецЕсли;		
	//	КонецЕсли;	

	//	// ПРОДАЖА	
	//	Если (кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах
	//		И НЕ (ОбщиеПараметры.ДанныеОтчета.details[0].totalСash + ОбщиеПараметры.ДанныеОтчета.details[0].totalСashless) = 0)
	//		ИЛИ НЕ кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах Тогда
	//		
	//		Текст = Текст + ВыстроитьПоля(НСтр("ru='ПРОДАЖА:'"), 
	//			Формат(ОбщиеПараметры.ДанныеОтчета.details[0].totalСash + ОбщиеПараметры.ДанныеОтчета.details[0].totalСashless, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=0"),
	//			ШиринаСтроки) + Символы.ПС;	
	//			
	//		Если (кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах
	//			И НЕ ОбщиеПараметры.ДанныеОтчета.details[0].totalСash = 0)
	//			ИЛИ НЕ кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах Тогда	
	//			Текст = Текст + ВыстроитьПоля(НСтр("ru=' НАЛИЧНЫМИ.....'"), 
	//				Формат(ОбщиеПараметры.ДанныеОтчета.details[0].totalСash, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=0"),
	//				ШиринаСтроки) + Символы.ПС;
	//		КонецЕсли;		
	//		
	//		Если (кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах
	//			И НЕ ОбщиеПараметры.ДанныеОтчета.details[0].totalСashless = 0)
	//			ИЛИ НЕ кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах Тогда
	//			Текст = Текст + ВыстроитьПоля(НСтр("ru=' БЕЗНАЛИЧНЫМИ..'"), 
	//				Формат(ОбщиеПараметры.ДанныеОтчета.details[0].totalСashless, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=0"),
	//				ШиринаСтроки) + Символы.ПС;
	//		КонецЕсли;	
	//	КонецЕсли;		
	//			
	//	// ВОЗВРАТ ПРОДАЖИ	
	//	Если (кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах
	//		И НЕ (ОбщиеПараметры.ДанныеОтчета.details[2].totalСash + ОбщиеПараметры.ДанныеОтчета.details[2].totalСashless) = 0)
	//		ИЛИ НЕ кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах Тогда
	//		
	//		Текст = Текст + ВыстроитьПоля(НСтр("ru='ВОЗВРАТ ПРОДАЖИ:'"), 
	//			Формат(ОбщиеПараметры.ДанныеОтчета.details[2].totalСash + ОбщиеПараметры.ДанныеОтчета.details[2].totalСashless, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=0"),
	//			ШиринаСтроки) + Символы.ПС;	
	//			
	//		Если (кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах
	//			И НЕ ОбщиеПараметры.ДанныеОтчета.details[2].totalСash = 0)
	//			ИЛИ НЕ кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах Тогда	
	//			Текст = Текст + ВыстроитьПоля(НСтр("ru=' НАЛИЧНЫМИ.....'"), 
	//				Формат(ОбщиеПараметры.ДанныеОтчета.details[2].totalСash, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=0"),
	//				ШиринаСтроки) + Символы.ПС;
	//		КонецЕсли;		
	//				
	//		Если (кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах
	//			И НЕ ОбщиеПараметры.ДанныеОтчета.details[2].totalСashless = 0)
	//			ИЛИ НЕ кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах Тогда						
	//			Текст = Текст + ВыстроитьПоля(НСтр("ru=' БЕЗНАЛИЧНЫМИ..'"), 
	//				Формат(ОбщиеПараметры.ДанныеОтчета.details[2].totalСashless, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=0"),
	//				ШиринаСтроки) + Символы.ПС;
	//		КонецЕсли;		
	//	КонецЕсли;		
	//		
	//	// Предоплата (АВАНС)
	//	Если (кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах
	//		И НЕ (ОбщиеПараметры.ДанныеОтчета.details[4].totalСash + ОбщиеПараметры.ДанныеОтчета.details[4].totalСashless) = 0)
	//		ИЛИ НЕ кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах Тогда
	//		
	//		Текст = Текст + ВыстроитьПоля(НСтр("ru='АВАНС:'"), 
	//			Формат(ОбщиеПараметры.ДанныеОтчета.details[4].totalСash + ОбщиеПараметры.ДанныеОтчета.details[4].totalСashless, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=0"),
	//			ШиринаСтроки) + Символы.ПС;	
	//			
	//		Если (кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах
	//			И НЕ ОбщиеПараметры.ДанныеОтчета.details[4].totalСash = 0)
	//			ИЛИ НЕ кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах Тогда	
	//			Текст = Текст + ВыстроитьПоля(НСтр("ru=' НАЛИЧНЫМИ.....'"), 
	//				Формат(ОбщиеПараметры.ДанныеОтчета.details[4].totalСash, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=0"),
	//				ШиринаСтроки) + Символы.ПС;
	//		КонецЕсли;		
	//				
	//		Если (кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах
	//			И НЕ ОбщиеПараметры.ДанныеОтчета.details[4].totalСashless = 0)
	//			ИЛИ НЕ кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах Тогда					
	//			Текст = Текст + ВыстроитьПоля(НСтр("ru=' БЕЗНАЛИЧНЫМИ..'"), 
	//				Формат(ОбщиеПараметры.ДанныеОтчета.details[4].totalСashless, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=0"),
	//				ШиринаСтроки) + Символы.ПС;
	//		КонецЕсли;		
	//	КонецЕсли;	
	//			
	//	// Закрытие предоплаты (АВАНСА)	
	//	Если (кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах
	//		И НЕ (ОбщиеПараметры.ДанныеОтчета.details[5].totalСash + ОбщиеПараметры.ДанныеОтчета.details[5].totalСashless) = 0)
	//		ИЛИ НЕ кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах Тогда
	//		
	//		Текст = Текст + ВыстроитьПоля(НСтр("ru='ПРОД. В СЧЕТ АВ.:'"), 
	//			Формат(ОбщиеПараметры.ДанныеОтчета.details[5].totalСash + ОбщиеПараметры.ДанныеОтчета.details[5].totalСashless, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=0"),
	//			ШиринаСтроки) + Символы.ПС;	
	//			
	//		Если (кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах
	//			И НЕ ОбщиеПараметры.ДанныеОтчета.details[5].totalСash = 0)
	//			ИЛИ НЕ кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах Тогда	
	//			Текст = Текст + ВыстроитьПоля(НСтр("ru=' НАЛИЧНЫМИ.....'"), 
	//				Формат(ОбщиеПараметры.ДанныеОтчета.details[5].totalСash, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=0"),
	//				ШиринаСтроки) + Символы.ПС;
	//		КонецЕсли;		
	//				
	//		Если (кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах
	//			И НЕ ОбщиеПараметры.ДанныеОтчета.details[5].totalСashless = 0)
	//			ИЛИ НЕ кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах Тогда	
	//			Текст = Текст + ВыстроитьПоля(НСтр("ru=' БЕЗНАЛИЧНЫМИ..'"), 
	//				Формат(ОбщиеПараметры.ДанныеОтчета.details[5].totalСashless, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=0"),
	//				ШиринаСтроки) + Символы.ПС;
	//		КонецЕсли;		
	//	КонецЕсли;	
	//		
	//	// Возврат предоплаты (АВАНСА)	
	//	Если (кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах
	//		И НЕ (ОбщиеПараметры.ДанныеОтчета.details[6].totalСash + ОбщиеПараметры.ДанныеОтчета.details[6].totalСashless) = 0)
	//		ИЛИ НЕ кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах Тогда
	//		
	//		Текст = Текст + ВыстроитьПоля(НСтр("ru='ВОЗВ. АВАНСА:'"), 
	//			Формат(ОбщиеПараметры.ДанныеОтчета.details[6].totalСash + ОбщиеПараметры.ДанныеОтчета.details[6].totalСashless, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=0"),
	//			ШиринаСтроки) + Символы.ПС;	
	//			
	//		Если (кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах
	//			И НЕ ОбщиеПараметры.ДанныеОтчета.details[6].totalСash = 0)
	//			ИЛИ НЕ кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах Тогда	
	//			Текст = Текст + ВыстроитьПоля(НСтр("ru=' НАЛИЧНЫМИ.....'"), 
	//				Формат(ОбщиеПараметры.ДанныеОтчета.details[6].totalСash, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=0"),
	//				ШиринаСтроки) + Символы.ПС;
	//		КонецЕсли;		
	//				
	//		Если (кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах
	//			И НЕ ОбщиеПараметры.ДанныеОтчета.details[6].totalСashless = 0)
	//			ИЛИ НЕ кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах Тогда
	//			Текст = Текст + ВыстроитьПоля(НСтр("ru=' БЕЗНАЛИЧНЫМИ..'"), 
	//				Формат(ОбщиеПараметры.ДанныеОтчета.details[6].totalСashless, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=0"),
	//				ШиринаСтроки) + Символы.ПС;	
	//		КонецЕсли;		
	//	КонецЕсли;			
	//				
	//	// Пост оплата (кредит)	
	//	Если (кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах
	//		И НЕ (ОбщиеПараметры.ДанныеОтчета.details[7].totalСash + ОбщиеПараметры.ДанныеОтчета.details[7].totalСashless) = 0)
	//		ИЛИ НЕ кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах Тогда
	//		
	//		Текст = Текст + ВыстроитьПоля(НСтр("ru='ПРОД. В КРЕДИТ:'"), 
	//			Формат(ОбщиеПараметры.ДанныеОтчета.details[7].totalСash + ОбщиеПараметры.ДанныеОтчета.details[7].totalСashless, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=0"),
	//			ШиринаСтроки) + Символы.ПС;	
	//			
	//		Если (кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах
	//			И НЕ ОбщиеПараметры.ДанныеОтчета.details[7].totalСash = 0)
	//			ИЛИ НЕ кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах Тогда	
	//			Текст = Текст + ВыстроитьПоля(НСтр("ru=' НАЛИЧНЫМИ.....'"), 
	//				Формат(ОбщиеПараметры.ДанныеОтчета.details[7].totalСash, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=0"),
	//				ШиринаСтроки) + Символы.ПС;
	//		КонецЕсли;		
	//				
	//		Если (кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах
	//			И НЕ ОбщиеПараметры.ДанныеОтчета.details[7].totalСashless = 0)
	//			ИЛИ НЕ кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах Тогда
	//			Текст = Текст + ВыстроитьПоля(НСтр("ru=' БЕЗНАЛИЧНЫМИ..'"), 
	//				Формат(ОбщиеПараметры.ДанныеОтчета.details[7].totalСashless, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=0"),
	//				ШиринаСтроки) + Символы.ПС;
	//		КонецЕсли;		
	//	КонецЕсли;			
	//		
	//	// Закрытие пост оплаты (кредита)
	//	Если (кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах
	//		И НЕ (ОбщиеПараметры.ДанныеОтчета.details[8].totalСash + ОбщиеПараметры.ДанныеОтчета.details[8].totalСashless) = 0)
	//		ИЛИ НЕ кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах Тогда
	//		
	//		Текст = Текст + ВыстроитьПоля(НСтр("ru='ОПЛ. КРЕДИТА:'"), 
	//			Формат(ОбщиеПараметры.ДанныеОтчета.details[8].totalСash + ОбщиеПараметры.ДанныеОтчета.details[8].totalСashless, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=0"),
	//			ШиринаСтроки) + Символы.ПС;	
	//			
	//		Если (кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах
	//			И НЕ ОбщиеПараметры.ДанныеОтчета.details[8].totalСash = 0)
	//			ИЛИ НЕ кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах Тогда	
	//			Текст = Текст + ВыстроитьПоля(НСтр("ru=' НАЛИЧНЫМИ.....'"), 
	//				Формат(ОбщиеПараметры.ДанныеОтчета.details[8].totalСash, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=0"),
	//				ШиринаСтроки) + Символы.ПС;
	//		КонецЕсли;		
	//				
	//		Если (кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах
	//			И НЕ ОбщиеПараметры.ДанныеОтчета.details[8].totalСashless = 0)
	//			ИЛИ НЕ кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах Тогда
	//			Текст = Текст + ВыстроитьПоля(НСтр("ru=' БЕЗНАЛИЧНЫМИ..'"), 
	//				Формат(ОбщиеПараметры.ДанныеОтчета.details[8].totalСashless, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=0"),
	//				ШиринаСтроки) + Символы.ПС;
	//		КонецЕсли;		
	//	КонецЕсли;		
	//		
	//	// Возврат пост оплаты (кредита)
	//	Если (кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах
	//		И НЕ (ОбщиеПараметры.ДанныеОтчета.details[9].totalСash + ОбщиеПараметры.ДанныеОтчета.details[9].totalСashless) = 0)
	//		ИЛИ НЕ кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах Тогда
	//		
	//		Текст = Текст + ВыстроитьПоля(НСтр("ru='ВОЗВ. ПРОД. В КРЕДИТ:'"), 
	//			Формат(ОбщиеПараметры.ДанныеОтчета.details[9].totalСash + ОбщиеПараметры.ДанныеОтчета.details[9].totalСashless, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=0"),
	//			ШиринаСтроки) + Символы.ПС;	
	//			
	//		Если (кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах
	//			И НЕ ОбщиеПараметры.ДанныеОтчета.details[9].totalСash = 0)
	//			ИЛИ НЕ кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах Тогда	
	//			Текст = Текст + ВыстроитьПоля(НСтр("ru=' НАЛИЧНЫМИ.....'"), 
	//				Формат(ОбщиеПараметры.ДанныеОтчета.details[9].totalСash, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=0"),
	//				ШиринаСтроки) + Символы.ПС;
	//		КонецЕсли;		
	//				
	//		Если (кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах
	//			И НЕ ОбщиеПараметры.ДанныеОтчета.details[9].totalСashless = 0)
	//			ИЛИ НЕ кр_НеВыводитьНулевыеСуммыВФискальныхОтчетах Тогда
	//			Текст = Текст + ВыстроитьПоля(НСтр("ru=' БЕЗНАЛИЧНЫМИ..'"), 
	//				Формат(ОбщиеПараметры.ДанныеОтчета.details[9].totalСashless, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=0"),
	//				ШиринаСтроки) + Символы.ПС;
	//		КонецЕсли;		
	//	КонецЕсли;		
	//		
	//	Текст = Текст + Разделитель;
	//	Возврат Текст;	
	//КонецЕсли;	
	//
	//Если ОбщиеПараметры.Свойство("ОтчетПоНалогам") Тогда
	//	Разделитель = ПостроитьПоле("", ШиринаСтроки, "=") + Символы.ПС;
	//	Текст = Разделитель;
	//	
	//	Текст = Текст + ВыстроитьПоля(НСтр("ru='Отчет по налогам'"), , ШиринаСтроки) + Символы.ПС;
	//	
	//	Текст = Текст + ПостроитьПоле(НСтр("ru='Дата: '") + ОбщиеПараметры.ДанныеОтчета.ДатаФормирования, ШиринаСтроки) + Символы.ПС;
	//	
	//	Текст = Текст + ПостроитьПоле(СтрШаблон(НСтр("ru='Кассовые смены с %1 по %2'"), 
	//					ОбщиеПараметры.ДанныеОтчета.КассоваяСменаНачало.НомерСменыОФД,
	//					ОбщиеПараметры.ДанныеОтчета.КассоваяСменаКонец.НомерСменыОФД),
	//					ШиринаСтроки) + Символы.ПС;
	//	
	//	Текст = Текст + ПостроитьПолеПереносомЦелыхСлов(ОбщиеПараметры.ДанныеОтчета.ОрганизацияНазвание, ШиринаСтроки, Истина) + Символы.ПС;
	//	
	//	Текст = Текст + ПостроитьПоле(НСтр("ru='ИНН:'") + Символы.НПП + ОбщиеПараметры.ДанныеОтчета.ОрганизацияИНН, ШиринаСтроки) + Символы.ПС; 
	//	
	//	Текст = Текст + ПостроитьПоле(НСтр("ru='РНО:'") + ОбщиеПараметры.ДанныеОтчета.РНО, ШиринаСтроки) + Символы.ПС;
	//	
	//	Текст = Текст + ПостроитьПоле(НСтр("ru='РНМ:'") + Символы.НПП + ОбщиеПараметры.ДанныеОтчета.РегистрационныйНомер, ШиринаСтроки) + Символы.ПС;  
	//	
	//	Текст = Текст + ПостроитьПолеПереносомЦелыхСлов(123, ШиринаСтроки) + Символы.ПС;		
	//	
	//	Текст = Текст + ПостроитьПоле(НСтр("ru='Версия: '") + ОбщиеПараметры.ДанныеОтчета.МодельККМкод, ШиринаСтроки) + Символы.ПС;
	//		
	//	Текст = Текст + ПостроитьПоле(НСтр("ru='КАССИР:'") + Символы.НПП + ОбщиеПараметры.ДанныеОтчета.Кассир, ШиринаСтроки) + Символы.ПС + Символы.ПС;
	//			
	//	Для Каждого СтрокаНДС Из ОбщиеПараметры.ДанныеОтчета.totalNds Цикл
	//		
	//		Если СтрокаНДС.ndsType = 1 Тогда
	//			НаименованиеНДС = НСтр("ru='Без НДС'");				
	//		ИначеЕсли СтрокаНДС.ndsType = 2 Тогда
	//			НаименованиеНДС = НСтр("ru='НДС 12%'");
	//		ИначеЕсли СтрокаНДС.ndsType = 3 Тогда
	//			НаименованиеНДС = НСтр("ru='НДС 0%'");
	//		ИначеЕсли СтрокаНДС.ndsType = 4 Тогда
	//			НаименованиеНДС = НСтр("ru='НДС Осв.'");
	//		ИначеЕсли СтрокаНДС.ndsType = 5 Тогда
	//			НаименованиеНДС = НСтр("ru='НДС 20%'");
	//		КонецЕсли;	
	//		
	//		Текст = Текст + ВыстроитьПоля(НаименованиеНДС, 
	//			Формат(СтрокаНДС.nds, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=0"),
	//			ШиринаСтроки) + Символы.ПС;
	//	КонецЦикла;
	//		
	//	Для Каждого СтрокаНДС Из ОбщиеПараметры.ДанныеОтчета.totalNsp Цикл
	//		
	//		Если СтрокаНДС.nspType = 1 Тогда
	//			НаименованиеНСП = НСтр("ru='Без НСП'");				
	//		ИначеЕсли СтрокаНДС.nspType = 2 Тогда
	//			НаименованиеНСП = НСтр("ru='НСП 0%'");
	//		ИначеЕсли СтрокаНДС.nspType = 3 Тогда
	//			НаименованиеНСП = НСтр("ru='НСП 1%'");
	//		ИначеЕсли СтрокаНДС.nspType = 4 Тогда
	//			НаименованиеНСП = НСтр("ru='НСП 2%'");
	//		ИначеЕсли СтрокаНДС.nspType = 5 Тогда
	//			НаименованиеНСП = НСтр("ru='НСП 3%'");
	//		ИначеЕсли СтрокаНДС.nspType = 6 Тогда
	//			НаименованиеНСП = НСтр("ru='НСП 5%'");	
	//		КонецЕсли;	
	//		
	//		Текст = Текст + ВыстроитьПоля(НаименованиеНСП, 
	//			Формат(СтрокаНДС.nsp, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=0"),
	//			ШиринаСтроки) + Символы.ПС;
	//	КонецЦикла;
	//	
	//	Текст = Текст + Разделитель;
	//	
	//	Возврат Текст;	
	//КонецЕсли;	
	//// КОНЕЦ НЕ ИСПОЛЬЗУЕМЫЕ
		
	Возврат Текст;
	
КонецФункции

// Сформировать шаблон инфо квитанции.
// 
// Параметры:
//  Параметры - Структура - Параметры.
//  ШиринаСтроки - Число - Ширина строки.
//  ПечатьШтрихкода - Булево - Печать штрихкода
// 
// Возвращаемое значение:
//  Строка - Сформировать шаблон инфо квитанции
//
Функция СформироватьШаблонИнфоКвитанции(Параметры, ШиринаСтроки, ПечатьШтрихкода = Истина) Экспорт
	 
	Текст = ВыстроитьПоля(Параметры.НаименованиеОрганизации, , ШиринаСтроки) + Символы.ПС;
	
	АдресЧека = ?(Параметры.Свойство("АдресЧека"), Параметры.АдресЧека, Неопределено);
	ПодписьЧека = ?(Параметры.Свойство("ПодписьЧека"), Параметры.ПодписьЧека, Неопределено);
	
	ОрганизацияИНН = ?(НЕ ПустаяСтрока(Параметры.ИНН), НСтр("ru='ИНН:'") + Параметры.ИНН, "");
	Если Не ПустаяСтрока(ОрганизацияИНН) Тогда
		Текст = Текст + ВыстроитьПоля(ОрганизацияИНН, "", ШиринаСтроки) + Символы.ПС;
	КонецЕсли;  
	              
	НомерКассы = ?(НЕ ПустаяСтрока(Параметры.НомерКассы), НСтр("ru='КАССА:'") + Параметры.НомерКассы, "");
	НомерСмены = ?(НЕ ПустаяСтрока(Параметры.НомерСмены), НСтр("ru='СМЕНА:'") + Формат(Параметры.НомерСмены, "ЧГ=0"), 0);
	
	Если Не ПустаяСтрока(НомерКассы) Или НЕ ПустаяСтрока(НомерСмены) Тогда
		Текст = Текст + ВыстроитьПоля(НомерКассы, НомерСмены, ШиринаСтроки) + Символы.ПС;
	КонецЕсли;
	
	НомерЧека = ?(НЕ ПустаяСтрока(Параметры.НомерЧека), НСтр("ru='ЧЕК:'") + Параметры.НомерЧека, "");
	// АПК: 1367-выкл особенность локального законодательства
	ДатаВремя = НСтр("ru='ДАТА:'") + Формат(МенеджерОборудованияКлиентСервер.ДатаСеанса(), "ДФ=""дд.ММ.гггг ЧЧ:мм""");
	// АПК: 1367-вкл
	Если Не ПустаяСтрока(НомерЧека) Или НЕ ПустаяСтрока(ДатаВремя) Тогда
		Текст = Текст + ВыстроитьПоля(НомерЧека, ДатаВремя, ШиринаСтроки) + Символы.ПС;
	КонецЕсли;
	
	Текст = Текст + " " + Символы.ПС;
	
	Если ПечатьШтрихкода Тогда
		Текст = Текст + "|ШтрихКод|QR|" + АдресЧека + Символы.ПС;
	КонецЕсли;
	
	Текст = Текст + " " + Символы.ПС;
	
	СтрокаТекста = ПостроитьПолеПереносом(АдресЧека, ШиринаСтроки);
	Для НомерСтроки = 1 По СтрЧислоСтрок(СтрокаТекста) Цикл
		Текст = Текст + СтрПолучитьСтроку(СтрокаТекста, НомерСтроки) + Символы.ПС;
	КонецЦикла;
	
	Текст = Текст + " " + Символы.ПС;
	
	СтрокаТекста = ПостроитьПолеПереносом(ПодписьЧека, ШиринаСтроки);
	Для НомерСтроки = 1 По СтрЧислоСтрок(СтрокаТекста) Цикл
		Текст = Текст + СтрПолучитьСтроку(СтрокаТекста, НомерСтроки) + Символы.ПС;
	КонецЦикла;
	
	Возврат Текст;
	
КонецФункции

// Выстраивает строку по длине поля, если поле длинное - переносит на следующую строку целыми словами.
//
Функция ПостроитьПолеПереносомЦелыхСлов(Знач Текст, Знач ДлинаПоля, ПоЦентру = Ложь) Экспорт
	
	Если СтрДлина(Текст) > ДлинаПоля Тогда 
		ТекстПолный = ""; 
		
		ЧастиТекста = Новый Массив();
		
		Пока СтрДлина(Текст) > ДлинаПоля Цикл 
			
			Если Сред(Текст, ДлинаПоля, 1) = " " 
				ИЛИ Сред(Текст, ДлинаПоля + 1, 1) = " " Тогда  
				//ТекстПолный = ТекстПолный + ?(ПустаяСтрока(ТекстПолный), "", Символы.ПС) +  Лев(Текст, ДлинаПоля);					
				ЧастиТекста.Добавить(Лев(Текст, ДлинаПоля));
				
				КонецСтроки = ДлинаПоля;
			Иначе
				КонецСтроки = ДлинаПоля - 1;
				
				Если СтрНайти(Текст, " ") = 0 Тогда
					Пока НЕ Сред(Текст, КонецСтроки, 1) = " "
						И НЕ Сред(Текст, КонецСтроки, 1) = "," Цикл
						КонецСтроки = КонецСтроки - 1;	
					КонецЦикла;	 
				Иначе
					Пока НЕ Сред(Текст, КонецСтроки, 1) = " " 
						И НЕ Сред(Текст, КонецСтроки, 1) = "," Цикл
						КонецСтроки = КонецСтроки - 1;	
					КонецЦикла;	
				КонецЕсли;	
				
				//ТекстПолный = ТекстПолный + ?(ПустаяСтрока(ТекстПолный), "", Символы.ПС) +  Лев(Текст, КонецСтроки);
				ЧастиТекста.Добавить(Лев(Текст, КонецСтроки));
			КонецЕсли;	
			
			Если Сред(Текст, КонецСтроки + 1) = " " Тогда
				Текст = Сред(Текст, КонецСтроки + 2);	
			Иначе	
				Текст = Сред(Текст, КонецСтроки + 1);
			КонецЕсли;	
			
			Если СтрДлина(Текст) <= ДлинаПоля Тогда
				ЧастиТекста.Добавить(Текст);	
			КонецЕсли;	
		КонецЦикла;  
		
		Для Каждого Текст Из ЧастиТекста Цикл
			Если ПоЦентру Тогда
				ДобавлятьСправа = Истина; 
				Пока СтрДлина(Текст) < ДлинаПоля Цикл
					Если ДобавлятьСправа Тогда
						Текст = Текст + " ";
					Иначе
						Текст = " " + Текст;
					КонецЕсли;
					ДобавлятьСправа = Не ДобавлятьСправа;
				КонецЦикла;	
			КонецЕсли;	
			
			ТекстПолный = ТекстПолный + ?(ПустаяСтрока(Текст), "", "
				|" + Текст);
		КонецЦикла;	
		
	Иначе
		Если ПоЦентру Тогда
			ТекстПолный = Текст;
			ДобавлятьСправа = Истина; 
			Пока СтрДлина(ТекстПолный) < ДлинаПоля Цикл
				Если ДобавлятьСправа Тогда
					ТекстПолный = ТекстПолный + " ";
				Иначе
					ТекстПолный = " " + ТекстПолный;
				КонецЕсли;
				ДобавлятьСправа = Не ДобавлятьСправа;
			КонецЦикла;	
		Иначе	
			ТекстПолный = Текст;
		КонецЕсли;	
	КонецЕсли;
		
	Возврат ТекстПолный;	
КонецФункции

Функция ПолучитьСтавкуНалога(ВидНалога, КодНалога)

	Если ВидНалога = "НДС" Тогда	
		Если КодНалога = "0" Тогда
			Возврат "0%";
			
		ИначеЕсли КодНалога = "1" Тогда 	
			Возврат "12%";	
		КонецЕсли;	
			
	// НСП	
	Иначе
		Если КодНалога = "0" Тогда
			Возврат "0%";
			
		ИначеЕсли КодНалога = "1" Тогда 	
			Возврат "1%";
			
		ИначеЕсли КодНалога = "2" Тогда 	
			Возврат "2%";
			
		ИначеЕсли КодНалога = "3" Тогда 	
			Возврат "3%";
			
		ИначеЕсли КодНалога = "4" Тогда 	
			Возврат "5%";
			
		ИначеЕсли КодНалога = "5" Тогда 	
			Возврат "0,5%";
			
		ИначеЕсли КодНалога = "6" Тогда 	
			Возврат "1,5%";	
		КонецЕсли;	
	КонецЕсли;	
КонецФункции // ПолучитьСтавкуНалога()

#КонецОбласти

#Область QRКодЧекаККТ

// Функция возвращает структуру параметров QR кода чека ККТ.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПараметрыQRКодаЧекаККТ() Экспорт
	
	ПараметрыШтрихкода = Новый Структура();
	ПараметрыШтрихкода.Вставить("ДатаВремяРасчета"); // Дата и время осуществления расчета 
	ПараметрыШтрихкода.Вставить("СуммаРасчета", 0);  // Сумма расчета в рублях и копейках
	ПараметрыШтрихкода.Вставить("НомерФискальногоНакопителя"); // Заводской номер фискального накопителя
	ПараметрыШтрихкода.Вставить("НомерФискальногоДокумента");  // Порядковый номер фискального документа
	ПараметрыШтрихкода.Вставить("ФискальныйПризнак"); // Фискальный признак документ
	ПараметрыШтрихкода.Вставить("ПризнакРасчета"); // Признак расчета, перечисление
	ПараметрыШтрихкода.Вставить("ПризнакРасчетаКод"); // Признак расчета, код
	Возврат ПараметрыШтрихкода;
	
КонецФункции

// Функция расшифровывает QR код для чека ККТ. Структура описана в документе ФФД в разделе 61.
//
// Параметры:
//  ЗначениеQRКода - Строка
// Возвращаемое значение:
//  Структура.
//
Функция РасшифроватьQRКодЧекаККТ(ЗначениеQRКода) Экспорт
	
	ДанныеШтрихкода = ПараметрыQRКодаЧекаККТ();
	ДанныеШтрихкода.Вставить("Расшифрован", Истина);
	
	ПозицияСимволаСР = Найти(ЗначениеQRКода, "&s=");   
	ПозицияСимволаФП = Найти(ЗначениеQRКода, "&fp=");  
	ПозицияСимволаФН = Найти(ЗначениеQRКода, "&fn=");  
	ПозицияСимволаФД = Найти(ЗначениеQRКода, "&i=");  
	
	Если Лев(ЗначениеQRКода, 2) <> "t=" Или ПозицияСимволаСР = 0 Или ПозицияСимволаФП = 0 Или ПозицияСимволаФН = 0 Или ПозицияСимволаФД = 0 Тогда
		ДанныеШтрихкода.Расшифрован = Ложь;
		Возврат ДанныеШтрихкода;
	КонецЕсли;
	// Дата время расчета.
	ДатаВремяРасчета = Сред(ЗначениеQRКода, 3, ПозицияСимволаСР - 3);
	ДанныеШтрихкода.ДатаВремяРасчета = Дата(Лев(ДатаВремяРасчета, 4), Сред(ДатаВремяРасчета, 5, 2), Сред(ДатаВремяРасчета, 7, 2), 
		Сред(ДатаВремяРасчета, 10, 2), Сред(ДатаВремяРасчета, 12, 2) ,0);
	// Номер фискального накопителя
	ДанныеШтрихкода.НомерФискальногоНакопителя = Сред(ЗначениеQRКода, ПозицияСимволаФН + 4, ПозицияСимволаФД - ПозицияСимволаФН - 4);
	// Номер фискального документа
	ДанныеШтрихкода.НомерФискальногоДокумента = Сред(ЗначениеQRКода, ПозицияСимволаФД + 3, ПозицияСимволаФП - ПозицияСимволаФД - 3);
	// Сумма расчета
	ДанныеШтрихкода.СуммаРасчета = Число(Сред(ЗначениеQRКода, ПозицияСимволаСР + 3, ПозицияСимволаФН - ПозицияСимволаСР - 3));
	// Фискальный признак
	Значение = Сред(ЗначениеQRКода, ПозицияСимволаФП + 4);
	ДанныеШтрихкода.ФискальныйПризнак = Лев(Значение, СтрДлина(Значение) - 4);
	// Признак расчета
	ДанныеШтрихкода.ПризнакРасчетаКод = Число(Прав(Значение, 1));
	ДанныеШтрихкода.ПризнакРасчета = РасчетДенежнымиСредствамиПоКоду(ДанныеШтрихкода.ПризнакРасчетаКод);
	
	Возврат ДанныеШтрихкода;
	
КонецФункции

// Функция формирует QR код для чека ККТ. Структура описана в документе ФФД в разделе 61.
//
// Параметры:
//  ПараметрыQRКода - Структура
// Возвращаемое значение:
//  Строка.
//
Функция СформироватьQRКодЧекаККТ(ПараметрыQRКода) Экспорт
	
	ДанныеQRКода = "t=%D%&s=%S%&fn=%F%&i=%I%&fp=%P%&n=%T%"; // Не локализовывать - утверждено ФФД.
	// Формирование QR кода.
	// АПК: 1367-выкл особенность локального законодательства
	ДанныеQRКода = СтрЗаменить(ДанныеQRКода, "%D%", Формат(ПараметрыQRКода.ДатаВремяРасчета, "ДФ='ггггММддTЧЧмм'")); // Не локализовывать - утверждено ФФД.
	// АПК: 1367-вкл
	ДанныеQRКода = СтрЗаменить(ДанныеQRКода, "%F%", ПараметрыQRКода.НомерФискальногоНакопителя);
	ДанныеQRКода = СтрЗаменить(ДанныеQRКода, "%S%", Формат(ПараметрыQRКода.СуммаРасчета, "ЧДЦ=2;ЧГ=;ЧРД=."));
	ДанныеQRКода = СтрЗаменить(ДанныеQRКода, "%I%", Формат(ПараметрыQRКода.НомерФискальногоДокумента, "ЧГ="));
	ДанныеQRКода = СтрЗаменить(ДанныеQRКода, "%P%", ПараметрыQRКода.ФискальныйПризнак);
	Если ПараметрыQRКода.Свойство("ПризнакРасчета") И Не ПустаяСтрока(ПараметрыQRКода.ПризнакРасчета) Тогда
		ПризнакРасчетаКод = КодРасчетаДенежнымиСредствами(ПараметрыQRКода.ПризнакРасчета);
	Иначе
		ПризнакРасчетаКод = ПараметрыQRКода.ПризнакРасчетаКод;
	КонецЕсли;
	ДанныеQRКода = СтрЗаменить(ДанныеQRКода, "%T%", ПризнакРасчетаКод);
	Возврат ДанныеQRКода;
	
КонецФункции

#КонецОбласти

#Область КодыОФД

// Получить код системы налогообложения ККТ.
// 
// Параметры:
//  СистемаНалогообложенияККТ - ПеречислениеСсылка.ТипыСистемНалогообложенияККТ - Система налогообложения ККТ.
// 
// Возвращаемое значение:
//  Произвольный, Число - Код системы налогообложения ККТ
Функция КодСистемыНалогообложенияККТ(СистемаНалогообложенияККТ) Экспорт
	
	СистемыНалогообложения = Новый Соответствие();
	СистемыНалогообложения.Вставить(ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ОСН")           	, 1);
	СистемыНалогообложения.Вставить(ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ДобровольныйПатент"), 2);
	СистемыНалогообложения.Вставить(ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ОбязательныйПатент"), 3);
	СистемыНалогообложения.Вставить(ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ЕН")          		, 4);
	СистемыНалогообложения.Вставить(ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.НК")           		, 5);
	СистемыНалогообложения.Вставить(ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.НсРП")        		, 6);
	
	Возврат СистемыНалогообложения.Получить(СистемаНалогообложенияККТ);
	
КонецФункции

// Получить систему налогообложения ККТ по коду
// 
// Параметры:
//  КодСистемыНалогообложенияККТ - Число - Код системы налогообложения ККТ.
// 
// Возвращаемое значение:
//  Произвольный, ПеречислениеСсылка.ТипыСистемНалогообложенияККТ - Система налогообложения ККТПо коду
Функция СистемаНалогообложенияККТПоКоду(КодСистемыНалогообложенияККТ) Экспорт
	
	СистемыНалогообложения = Новый Соответствие();
	СистемыНалогообложения.Вставить(1, ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ОСН"));
	СистемыНалогообложения.Вставить(2, ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ДобровольныйПатент"));
	СистемыНалогообложения.Вставить(3, ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ОбязательныйПатент"));
	СистемыНалогообложения.Вставить(4, ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ЕН"));
	СистемыНалогообложения.Вставить(5, ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.НК"));
	СистемыНалогообложения.Вставить(6, ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.НсРП"));
	
	Возврат СистемыНалогообложения.Получить(КодСистемыНалогообложенияККТ);
	
КонецФункции

// Получить наименование системы налогообложения по коду.
// 
// Параметры:
//  СистемаНалогообложения - Число, Произвольный - Система налогообложения
//  Кратко - Булево - Кратко
// 
// Возвращаемое значение:
//  Строка, Произвольный - Наименование системы налогообложения
Функция НаименованиеСистемыНалогообложения(СистемаНалогообложения, Кратко = Ложь) Экспорт;
	
	СистемыНалогообложения = Новый Соответствие();
	Если Кратко Тогда
		СистемыНалогообложения.Вставить(1, НСтр("ru='ОСН'"));
		СистемыНалогообложения.Вставить(2, НСтр("ru='ДП'"));
		СистемыНалогообложения.Вставить(3, НСтр("ru='ОП'"));
		СистемыНалогообложения.Вставить(4, НСтр("ru='ЕН'"));
		СистемыНалогообложения.Вставить(5, НСтр("ru='НК'"));
		СистемыНалогообложения.Вставить(6, НСтр("ru='НсРП'"));
	Иначе
		СистемыНалогообложения.Вставить(1, НСтр("ru='Общая'"));
		СистемыНалогообложения.Вставить(2, НСтр("ru='Добровольный патент'"));
		СистемыНалогообложения.Вставить(3, НСтр("ru='Обязательный патент'"));
		СистемыНалогообложения.Вставить(4, НСтр("ru='Единый налог'"));
		СистемыНалогообложения.Вставить(5, НСтр("ru='Налоговый контракт'"));
		СистемыНалогообложения.Вставить(6, НСтр("ru='Налог с розничных продаж'"));
	КонецЕсли;
	
	Возврат СистемыНалогообложения.Получить(СистемаНалогообложения);
	
КонецФункции

// Получить код расчета денежными средствами.
// 
// Параметры:
//  ТипРасчета - ПеречислениеСсылка.ТипыРасчетаДенежнымиСредствами - Тип расчета.
// 
// Возвращаемое значение:
//  Произвольный, Число - Код расчета денежными средствами
Функция КодРасчетаДенежнымиСредствами(ТипРасчета) Экспорт
	
	ТипыРасчета = Новый Соответствие();
	ТипыРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств")        , 1);
	ТипыРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств")       , 2);
	ТипыРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств")        , 3);
	ТипыРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратРасходаДенежныхСредств"), 4);
	
	Возврат ТипыРасчета.Получить(ТипРасчета);
	
КонецФункции

// Получить типа расчета денежными средствами по коду.
// 
// Параметры:
//  КодПризнакаРасчета - Число - Код признака расчета.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыРасчетаДенежнымиСредствами, Произвольный - Расчет денежными средствами по коду
Функция РасчетДенежнымиСредствамиПоКоду(КодПризнакаРасчета) Экспорт
	
	ТипыРасчета = Новый Соответствие();
	ТипыРасчета.Вставить(1, ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств"));
	ТипыРасчета.Вставить(2, ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств"));
	ТипыРасчета.Вставить(3, ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств"));
	ТипыРасчета.Вставить(4, ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратРасходаДенежныхСредств"));
	
	Возврат ТипыРасчета.Получить(КодПризнакаРасчета);
	
КонецФункции

// Получить код признака способа расчета.
// 
// Параметры:
//  ПризнакСпособаРасчета - ПеречислениеСсылка.ПризнакиСпособаРасчета - Признак способа расчета.
// 
// Возвращаемое значение:
//  Произвольный, Число - Код признака способа расчета
Функция КодПризнакаСпособаРасчета(ПризнакСпособаРасчета) Экспорт
	
	ПризнакиСпособаРасчета = Новый Соответствие();
	ПризнакиСпособаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПредоплатаПолная")         , 1); 
	ПризнакиСпособаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПредоплатаЧастичная")      , 2);
	ПризнакиСпособаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.Аванс")                    , 3); 
	ПризнакиСпособаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой")   , 4); 
	ПризнакиСпособаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой"), 5);  
	ПризнакиСпособаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаБезОплаты")        , 6);  
	ПризнакиСпособаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ОплатаКредита")            , 7);  
	
	Возврат ПризнакиСпособаРасчета.Получить(ПризнакСпособаРасчета);
	
КонецФункции

// Получить признак способа расчета по коду.
// 
// Параметры:
//  КодПризнакаСпособаРасчета - Число - Код признака способа расчета.
// 
// Возвращаемое значение:
//  Произвольный, ПеречислениеСсылка.ПризнакиСпособаРасчета - Признак способа расчета по коду
Функция ПризнакСпособаРасчетаПоКоду(КодПризнакаСпособаРасчета) Экспорт
	
	ПризнакиСпособаРасчета = Новый Соответствие();
	ПризнакиСпособаРасчета.Вставить(1, ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПредоплатаПолная")); 
	ПризнакиСпособаРасчета.Вставить(2, ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПредоплатаЧастичная"));
	ПризнакиСпособаРасчета.Вставить(3, ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.Аванс")); 
	ПризнакиСпособаРасчета.Вставить(4, ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой")); 
	ПризнакиСпособаРасчета.Вставить(5, ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой"));  
	ПризнакиСпособаРасчета.Вставить(6, ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаБезОплаты"));  
	ПризнакиСпособаРасчета.Вставить(7, ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ОплатаКредита"));  
	
	Возврат ПризнакиСпособаРасчета.Получить(КодПризнакаСпособаРасчета);
	
КонецФункции

// Получить наименование признака способа расчета по коду.
// 
// Параметры:
//  КодПризнакаСпособаРасчета - Число, Произвольный - Код признака способа расчета
// 
// Возвращаемое значение:
//  Строка, Произвольный - Наименование признака способа расчета
Функция НаименованиеПризнакаСпособаРасчета(КодПризнакаСпособаРасчета) Экспорт;
	
	ПризнакиСпособаРасчета = Новый Соответствие();
	
	ПризнакиСпособаРасчета.Вставить(1, НСтр("ru='ПРЕДОПЛАТА 100%'"));
	ПризнакиСпособаРасчета.Вставить(2, НСтр("ru='ПРЕДОПЛАТА'"));
	ПризнакиСпособаРасчета.Вставить(3, НСтр("ru='АВАНС'"));
	ПризнакиСпособаРасчета.Вставить(4, НСтр("ru='ПОЛНЫЙ РАСЧЕТ'"));
	ПризнакиСпособаРасчета.Вставить(5, НСтр("ru='ЧАСТИЧНЫЙ РАСЧЕТ И КРЕДИТ'"));
	ПризнакиСпособаРасчета.Вставить(6, НСтр("ru='ПЕРЕДАЧА В КРЕДИТ'"));
	ПризнакиСпособаРасчета.Вставить(7, НСтр("ru='ОПЛАТА КРЕДИТА'"));
	
	Возврат ПризнакиСпособаРасчета.Получить(КодПризнакаСпособаРасчета);
	
КонецФункции

// Получить код признака способа расчета.
// 
// Параметры:
//  ПризнакПредметаРасчета - ПеречислениеСсылка.ПризнакиПредметаРасчета - Признак предмета расчета.
// 
// Возвращаемое значение:
//  Произвольный, Число - Код признака предмета расчета
Функция КодПризнакаПредметаРасчета(ПризнакПредметаРасчета) Экспорт
	
	ПризнакиПредметаРасчета = Новый Соответствие(); 
	
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Товар")                  , 1);
	//ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Работа")                 , 3);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Услуга")                 , 2);

	Возврат ПризнакиПредметаРасчета.Получить(ПризнакПредметаРасчета);
	
КонецФункции

// Получить признак способа расчета по коду.
// 
// Параметры:
//  КодПризнакаПредметаРасчета - Число - Код признака предмета расчета.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ПризнакиПредметаРасчета, Произвольный - Признак предмета расчета по коду
Функция ПризнакПредметаРасчетаПоКоду(КодПризнакаПредметаРасчета) Экспорт
	
	ПризнакиПредметаРасчета = Новый Соответствие(); 
	
	ПризнакиПредметаРасчета.Вставить(1,  ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Товар"));
	//ПризнакиПредметаРасчета.Вставить(3,  ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Работа"));
	ПризнакиПредметаРасчета.Вставить(2,  ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Услуга"));
	
	Возврат ПризнакиПредметаРасчета.Получить(КодПризнакаПредметаРасчета);
	
КонецФункции

// Получить наименование признака предмета расчета по коду.
// 
// Параметры:
//  КодПризнакаПредметаРасчета -Число - Код признака предмета расчета.
// 
// Возвращаемое значение:
//  Строка, Произвольный - Наименование признака предмета расчета
Функция НаименованиеПризнакаПредметаРасчета(КодПризнакаПредметаРасчета) Экспорт

	ПризнакиПредметаРасчета = Новый Соответствие(); 
	
	ПризнакиПредметаРасчета.Вставить(1,  НСтр("ru='ТОВАР'"));
	ПризнакиПредметаРасчета.Вставить(2,  НСтр("ru='ПОДАКЦИЗНЫЙ ТОВАР'"));
	ПризнакиПредметаРасчета.Вставить(3,  НСтр("ru='РАБОТА'"));
	ПризнакиПредметаРасчета.Вставить(4,  НСтр("ru='УСЛУГА'"));
	ПризнакиПредметаРасчета.Вставить(5,  НСтр("ru='СТАВКА АЗАРТНОЙ ИГРЫ'"));
	ПризнакиПредметаРасчета.Вставить(6,  НСтр("ru='ВЫИГРЫШ АЗАРТНОЙ ИГРЫ'"));
	ПризнакиПредметаРасчета.Вставить(7,  НСтр("ru='СТАВКА ЛОТЕРЕИ'"));
	ПризнакиПредметаРасчета.Вставить(8,  НСтр("ru='ВЫИГРЫШ ЛОТЕРЕИ'"));
	ПризнакиПредметаРасчета.Вставить(9,  НСтр("ru='ПРЕДОСТАВЛЕНИЕ РИД'"));
	ПризнакиПредметаРасчета.Вставить(10, НСтр("ru='ПЛАТЕЖ'"));
	ПризнакиПредметаРасчета.Вставить(11, НСтр("ru='АГЕНТСКОЕ ВОЗНАГРАЖДЕНИЕ'"));
	ПризнакиПредметаРасчета.Вставить(12, НСтр("ru='ВЫПЛАТА'"));
	ПризнакиПредметаРасчета.Вставить(13, НСтр("ru='ИНОЙ ПРЕДМЕТ РАСЧЕТА'"));
	ПризнакиПредметаРасчета.Вставить(14, НСтр("ru='ИМУЩЕСТВЕННОЕ ПРАВО'"));
	ПризнакиПредметаРасчета.Вставить(15, НСтр("ru='ВНЕРЕАЛИЗАЦИОННЫЙ ДОХОД'"));
	ПризнакиПредметаРасчета.Вставить(16, НСтр("ru='ИНЫЕ ПЛАТЕЖИ И ВЗНОСЫ'"));
	ПризнакиПредметаРасчета.Вставить(17, НСтр("ru='ТОРГОВЫЙ СБОР'"));       
	ПризнакиПредметаРасчета.Вставить(18, НСтр("ru='КУРОРТНЫЙ СБОР'"));
	ПризнакиПредметаРасчета.Вставить(19, НСтр("ru='ЗАЛОГ'"));
	ПризнакиПредметаРасчета.Вставить(20, НСтр("ru='РАСХОД'"));
	ПризнакиПредметаРасчета.Вставить(21, НСтр("ru='ВЗНОСЫ НА ОПС ИП'"));
	ПризнакиПредметаРасчета.Вставить(22, НСтр("ru='ВЗНОСЫ НА ОПС'"));
	ПризнакиПредметаРасчета.Вставить(23, НСтр("ru='ВЗНОСЫ НА ОМС ИП'"));
	ПризнакиПредметаРасчета.Вставить(24, НСтр("ru='ВЗНОСЫ НА ОМС'"));
	ПризнакиПредметаРасчета.Вставить(25, НСтр("ru='ВЗНОСЫ НА ОСС'"));
	ПризнакиПредметаРасчета.Вставить(26, НСтр("ru='ПЛАТЕЖ КАЗИНО'"));
	ПризнакиПредметаРасчета.Вставить(27, НСтр("ru='ВЫДАЧА ДЕНЕЖНЫХ СРЕДСТВ'"));
	ПризнакиПредметаРасчета.Вставить(30, НСтр("ru='АТНМ'"));
	ПризнакиПредметаРасчета.Вставить(31, НСтр("ru='АТМ'"));
	ПризнакиПредметаРасчета.Вставить(32, НСтр("ru='ТНМ'"));       
	ПризнакиПредметаРасчета.Вставить(33, НСтр("ru='ТМ'"));
	
	Возврат ПризнакиПредметаРасчета.Получить(КодПризнакаПредметаРасчета);
	
КонецФункции



// Получить код причины изменения сведений о ККТ.
// 
// Параметры:
//  ПричинаИзмененияСведенийККТ - ПеречислениеСсылка.ПричиныИзмененияСведенийККТ - Причина изменения сведений ККТ.
// 
// Возвращаемое значение:
//  Произвольный, Число - Код причины изменения сведений ККТ
Функция КодПричиныИзмененияСведенийККТ(ПричинаИзмененияСведенийККТ) Экспорт
	
	ПричиныИзмененияСведенийККТ = Новый Соответствие(); 
	
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ЗаменаФН")                         , 0);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ЗаменаОФД")                        , 1);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ИзменениеНаименованияПользователя"), 2);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ИзменениеАдреса")                  , 3);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ПереводВРежимПередачиДанных")      , 4);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ПереводВАвтономныйРежим")          , 5);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ИзменениеВерсии")                  , 6);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ИзменениеСистемНалогообложения")   , 7);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ИзменениеНомераУстройства")        , 8);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ПереводВНеавтоматическийРежим")    , 9);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ПереводВАвтоматическийРежим")      , 10);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ВключениеБСО")                     , 11);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ВыключениеБСО")                    , 12);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ВключениеРежимаРасчетовВИнтернет") , 13);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ВыключениеРежимаРасчетовВИнтернет"), 14);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ВключениеРежимаАгента")            , 15);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ВыключениеРежимаАгента")           , 16);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ВключениеРежимаАзартныхИгр")       , 17);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ВыключениеРежимаАзартныхИгр")      , 18);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ВключениеРежимаЛотереи")           , 19);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ВыключениеРежимаЛотереи")          , 20);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ИзменениеВерсииФФД")               , 21);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.Иное")                             , 31);
	
	Возврат ПричиныИзмененияСведенийККТ.Получить(ПричинаИзмененияСведенийККТ);
	
КонецФункции












// Получить код Стаки НДС.
//
Функция КодСтавкиНДС(СтавкаНДС) Экспорт
	
	КодыСтавок = Новый Соответствие();
	КодыСтавок.Вставить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"), 1); 
	КодыСтавок.Вставить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС12"), 2);
	КодыСтавок.Вставить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0"), 3); 
	КодыСтавок.Вставить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДСОсв"), 4); 
	КодыСтавок.Вставить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20"), 5);  
	
	Возврат КодыСтавок.Получить(СтавкаНДС);
	
КонецФункции

// Получить Ставку НДС по коду.
//
Функция СтавкаНДСПоКоду(КодСтавки) Экспорт
	
	СтавкиНДС = Новый Соответствие();
	СтавкиНДС.Вставить(1, ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
	СтавкиНДС.Вставить(2, ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС12"));
	СтавкиНДС.Вставить(3, ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0"));
	СтавкиНДС.Вставить(4, ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДСОсв"));
	СтавкиНДС.Вставить(5, ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20"));
	
	Возврат СтавкиНДС.Получить(КодСтавки);
	
КонецФункции


// Получить код Стаки НСП.
//
Функция КодСтавкиНСП(СтавкаНСП) Экспорт
	
	КодыСтавок = Новый Соответствие();
	КодыСтавок.Вставить(ПредопределенноеЗначение("Перечисление.СтавкиНСП.БезНСП"), 1); 
	КодыСтавок.Вставить(ПредопределенноеЗначение("Перечисление.СтавкиНСП.НСП0"), 2);
	КодыСтавок.Вставить(ПредопределенноеЗначение("Перечисление.СтавкиНСП.НСП1"), 3); 
	КодыСтавок.Вставить(ПредопределенноеЗначение("Перечисление.СтавкиНСП.НСП2"), 4); 
	КодыСтавок.Вставить(ПредопределенноеЗначение("Перечисление.СтавкиНСП.НСП3"), 5);  
	КодыСтавок.Вставить(ПредопределенноеЗначение("Перечисление.СтавкиНСП.НСП5"), 6);  
	
	Возврат КодыСтавок.Получить(СтавкаНСП);
	
КонецФункции

// Получить Ставку НСП по коду.
//
Функция СтавкаНСППоКоду(КодСтавки) Экспорт
	
	СтавкиНСП = Новый Соответствие();
	СтавкиНСП.Вставить(1, ПредопределенноеЗначение("Перечисление.СтавкиНСП.БезНСП"));
	СтавкиНСП.Вставить(2, ПредопределенноеЗначение("Перечисление.СтавкиНСП.НСП0"));
	СтавкиНСП.Вставить(3, ПредопределенноеЗначение("Перечисление.СтавкиНСП.НСП1"));
	СтавкиНСП.Вставить(4, ПредопределенноеЗначение("Перечисление.СтавкиНСП.НСП2"));
	СтавкиНСП.Вставить(5, ПредопределенноеЗначение("Перечисление.СтавкиНСП.НСП3"));
	СтавкиНСП.Вставить(6, ПредопределенноеЗначение("Перечисление.СтавкиНСП.НСП5"));
	
	Возврат СтавкиНСП.Получить(КодСтавки);
	
КонецФункции

// Получить статус кассовой смены по коду.
// 
// Параметры:
//  КодСтатусаСмены - Число - Код статуса кассовой смены.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыКассовойСмены, Произвольный - Статус кассовой смены по коду
Функция СтатусСменыПоКоду(КодСтатусаСмены) Экспорт
	
	СтатусыСмены = Новый Соответствие();
	СтатусыСмены.Вставить(1, ПредопределенноеЗначение("Перечисление.СтатусыКассовойСмены.Открыта"));
	СтатусыСмены.Вставить(2, ПредопределенноеЗначение("Перечисление.СтатусыКассовойСмены.Закрыта"));
	
	Возврат СтатусыСмены.Получить(КодСтатусаСмены);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выстраивает строку по длине поля, если поле длинное - переносит на следующую строку.
// 
// Параметры:
//  Текст - Неопределено, Строка - Текст
//  ДлинаПоля - Число - Длина поля
//  ДобСимвол - Строка - Доб символ
//  ПоЦентру - Булево - По центру
// 
// Возвращаемое значение:
//  Неопределено, Строка - Построить поле переносом
Функция ПостроитьПолеПереносом(Знач Текст, Знач ДлинаПоля, ДобСимвол = "", ПоЦентру = Ложь) Экспорт
	
	ДобСимвол = ?(ПустаяСтрока(ДобСимвол), " ", ДобСимвол);
	
	Если СтрДлина(Текст) > ДлинаПоля Тогда 
		ТекстПолный = "";
		Пока СтрДлина(Текст) > ДлинаПоля Цикл
			ТекстПолный = ТекстПолный + ?(ПустаяСтрока(ТекстПолный), "", Символы.ПС) +  Лев(Текст, ДлинаПоля);
			Текст = Сред(Текст, ДлинаПоля + 1);
		КонецЦикла;
		ТекстПолный = ТекстПолный + ?(ПустаяСтрока(Текст), "", Символы.ПС + Текст);
	Иначе
		Если ПоЦентру Тогда
			ТекстПолный = Текст;
			ДобавлятьСправа = Истина; 
			Пока СтрДлина(ТекстПолный) < ДлинаПоля Цикл
				Если ДобавлятьСправа Тогда
					ТекстПолный = ТекстПолный + ДобСимвол;
				Иначе
					ТекстПолный = ДобСимвол + ТекстПолный;
				КонецЕсли;
				ДобавлятьСправа = Не ДобавлятьСправа;
			КонецЦикла;
		Иначе
			ТекстПолный = Текст;
		КонецЕсли;
	КонецЕсли;
		
	Возврат ТекстПолный;
	
КонецФункции

// Обрезает передаваемую строку по длине поля, если поле слишком короткое - дополняет символами.
//
// Параметры:
//  Текст - Строка - Текст
//  ДлинаПоля - Число - Длина поля
//  ДобСимвол - Строка - Доб символ
//  ДобавлятьСправа - Булево - если истина добавлять ДобСимвол справа, иначе слева.
// 
// Возвращаемое значение:
//  Строка.
//
Функция ПостроитьПоле(Знач Текст, Знач ДлинаПоля, ДобСимвол = "", ДобавлятьСправа = Истина) Экспорт
	
	ДобСимвол = ?(ПустаяСтрока(ДобСимвол), " ", ДобСимвол);
	
	ТекстПолный = Лев(Текст, ДлинаПоля);
	Пока СтрДлина(ТекстПолный) < ДлинаПоля Цикл
		Если ДобавлятьСправа Тогда
			ТекстПолный = ТекстПолный + ДобСимвол;
		Иначе
			ТекстПолный = ДобСимвол + ТекстПолный;
		КонецЕсли;
	КонецЦикла;
	          
	Возврат ТекстПолный;
	
КонецФункции

// Формирует строку из двух полей, если передается одно поле дополняет символами до нужного размера.
//
// Параметры:
//  Текст1 - Строка
//  Текст2 - Строка
//  ДлинаПоля - Число
//
// Возвращаемое значение:
//  Строка.
//
Функция ВыстроитьПоля(Знач Текст1, Знач Текст2 = "", Знач ДлинаПоля = 32) Экспорт
	
	Если ПустаяСтрока(Текст2) Тогда
		ТекстПолный = ПостроитьПоле(Текст1, СтрДлина(Текст1) + Цел((ДлинаПоля - СтрДлина(Текст1))/2), , Ложь);
		ТекстПолный = ПостроитьПоле(ТекстПолный, ДлинаПоля);
	ИначеЕсли СтрДлина(Текст1) + СтрДлина(Текст2) < ДлинаПоля Тогда
		ТекстПолный = ПостроитьПоле(Текст1, ДлинаПоля - СтрДлина(Текст2)) + Текст2;
	Иначе
		ТекстПолный = ПостроитьПоле(Текст1, ДлинаПоля) + Символы.ПС + ПостроитьПоле(Текст2, ДлинаПоля, ,Ложь)
	КонецЕсли;
	
	Возврат ТекстПолный;
	
КонецФункции

// Выровнять передаваемую строку по длине поля, если поле слишком короткое - дополняет символами.
// 
// Параметры:
//  Текст - Строка - Текст
//  ДлинаПоля - Число - Длина поля
//  Выравнивание - Строка - Выравнивание
//  ДобСимвол - Строка - Доб символ
// 
// Возвращаемое значение:
//  Строка - Выровненное поле
Функция ВыровнятьПоле(Знач Текст, Знач ДлинаПоля = 32, Знач Выравнивание = "Лево", ДобСимвол = "") Экспорт
	
	ДобСимвол = ?(ПустаяСтрока(ДобСимвол), " ", ДобСимвол);
	НачПозиция = Истина;
	ТекстПолный = Лев(Текст, ДлинаПоля);
	Пока СтрДлина(ТекстПолный) < ДлинаПоля Цикл
		Если Выравнивание = "Лево" Тогда
			ТекстПолный = ТекстПолный + ДобСимвол;
		ИначеЕсли Выравнивание = "Право" Тогда
			ТекстПолный = ДобСимвол + ТекстПолный;
		Иначе
			Если НачПозиция Тогда
				ТекстПолный = ТекстПолный + ДобСимвол;
				НачПозиция = Ложь;
			Иначе
				ТекстПолный = ДобСимвол + ТекстПолный;
				НачПозиция = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	          
	Возврат ТекстПолный;
	
КонецФункции

#КонецОбласти

