
#Область ПрограммныйИнтерфейс

// Инициализирует компоновщик настроек отчета.
//
// Параметры:
//	Форма - УправляемаяФорма - Форма отчета.
//	ОрганизацияИзменилась - Булево - При вызове инициализации из-за изменения организации необходимо передать Истина.
//	ИмяВариантаНастроек - Строка - Имя варианта настроек.
//
Процедура ИнициализацияКомпоновщикаНастроек(Форма, ОрганизацияИзменилась = Ложь, ИмяВариантаНастроек = "") Экспорт
	
	Форма.КомпоновщикИнициализирован = Истина;
	
	Форма.Элементы.НастройкиОтчета.Видимость = Истина;
	
	ИмяОтчета = БухгалтерскиеОтчеты.ИмяОтчета(Форма);
	
	Схема = Отчеты[ИмяОтчета].ПолучитьМакет("СхемаКомпоновкиДанных");
	
	Если ПустаяСтрока(ИмяВариантаНастроек) Тогда
		ИмяВариантаНастроек = ИмяОтчета;
	КонецЕсли;
	
	ВариантНастроек = Схема.ВариантыНастроек.Найти(ИмяВариантаНастроек);
	
	Если ВариантНастроек <> Неопределено Тогда
		Настройки = ВариантНастроек.Настройки;
	Иначе
		Настройки = Схема.НастройкиПоУмолчанию;
	КонецЕсли;
	
	// Колонтитулы.
	ТекущиеНастройки = Форма.Отчет.КомпоновщикНастроек.Настройки;
	Если ТекущиеНастройки.ДополнительныеСвойства.Свойство("НастройкиКолонтитулов") Тогда 
		Настройки.ДополнительныеСвойства.Вставить("НастройкиКолонтитулов", ТекущиеНастройки.ДополнительныеСвойства.НастройкиКолонтитулов);
	КонецЕсли;	
	
	Форма.СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(Схема, Форма.УникальныйИдентификатор);
	Форма.Отчет.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Форма.СхемаКомпоновкиДанных));
	Форма.Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	
	ТекущиеПользовательскиеНастройки = Неопределено;
	
	Если ЭтоАдресВременногоХранилища(Форма.ПользовательскиеНастройки) Тогда
		ТекущиеПользовательскиеНастройки = ПолучитьИзВременногоХранилища(Форма.ПользовательскиеНастройки);
	КонецЕсли;
	
	ПриЗагрузкеПользовательскихНастроекКомпоновщикаНаСервере(Форма, ТекущиеПользовательскиеНастройки);
	
	Если ОрганизацияИзменилась Тогда
		БухгалтерскиеОтчетыКлиентСервер.ОрганизацияПриИзменении(Форма, Форма.Отчет.Организация);
	КонецЕсли;
	
	ОбновитьОписаниеОтборовОтчета(Форма);
	
КонецПроцедуры

// Формирует отчет по переданным параметрам и помещает его результат во временное хранилище.
//
// Параметры:
//	ПараметрыОтчета - Структура - Содержит ключи:
//		* ИдентификаторОтчета - Строка - Имя отчета, как оно указано в метаданных.
//		* СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема отчета.
//		* НастройкиКомпоновкиДанных - НастройкиКомпоновкиДанных - Настройки отчета.
//	АдресХранилища - Строка - Адрес временного хранилища, в которое необходимо поместить результат.
//
Процедура СформироватьОтчет(ПараметрыОтчета, АдресХранилища) Экспорт
	
	ВыводитьПолностью = Истина;
	
	Отказ = Ложь;
	ДанныеРасшифровкиОбъект = Неопределено;
	ПараметрыИсполненияОтчета = Неопределено;
	
	МенеджерОтчета = Отчеты[ПараметрыОтчета.ИдентификаторОтчета];
	
	Попытка
		ПараметрыИсполненияОтчета = МенеджерОтчета.ПолучитьПараметрыИсполненияОтчета();
	Исключение
		// Запись в журнал регистрации не требуется
	КонецПопытки;
	
	ИспользоватьВнешниеНаборыДанных            = Ложь;
	ИспользоватьПриВыводеЗаголовка             = Ложь;
	ИспользоватьПриВыводеПодвала               = Ложь;
	ИспользоватьПередКомпоновкойМакета         = Ложь;
	ИспользоватьПослеКомпоновкиМакета          = Ложь;
	ИспользоватьПередВыводомЭлементаРезультата = Ложь;
	ИспользоватьПослеВыводаРезультата          = Ложь;
	ИспользоватьДанныеРасшифровки              = Истина;
	ИспользоватьПривилегированныйРежим         = Истина;
	
	Если ПараметрыИсполненияОтчета <> Неопределено Тогда
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьВнешниеНаборыДанных") Тогда
			ИспользоватьВнешниеНаборыДанных = ПараметрыИсполненияОтчета.ИспользоватьВнешниеНаборыДанных;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПриВыводеЗаголовка") Тогда
			ИспользоватьПриВыводеЗаголовка = ПараметрыИсполненияОтчета.ИспользоватьПриВыводеЗаголовка;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПриВыводеПодвала") Тогда
			ИспользоватьПриВыводеПодвала = ПараметрыИсполненияОтчета.ИспользоватьПриВыводеПодвала;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПередКомпоновкойМакета") Тогда
			ИспользоватьПередКомпоновкойМакета = ПараметрыИсполненияОтчета.ИспользоватьПередКомпоновкойМакета;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПослеКомпоновкиМакета") Тогда
			ИспользоватьПослеКомпоновкиМакета = ПараметрыИсполненияОтчета.ИспользоватьПослеКомпоновкиМакета;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПередВыводомЭлементаРезультата") Тогда
			ИспользоватьПередВыводомЭлементаРезультата = ПараметрыИсполненияОтчета.ИспользоватьПередВыводомЭлементаРезультата;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПослеВыводаРезультата") Тогда
			ИспользоватьПослеВыводаРезультата = ПараметрыИсполненияОтчета.ИспользоватьПослеВыводаРезультата;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьДанныеРасшифровки") Тогда
			ИспользоватьДанныеРасшифровки = ПараметрыИсполненияОтчета.ИспользоватьДанныеРасшифровки;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПривилегированныйРежим") Тогда
			ИспользоватьПривилегированныйРежим = ПараметрыИсполненияОтчета.ИспользоватьПривилегированныйРежим;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыОтчета.СхемаКомпоновкиДанных) = Тип("Строка") Тогда
		Если ЭтоАдресВременногоХранилища(ПараметрыОтчета.СхемаКомпоновкиДанных) Тогда
			СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(ПараметрыОтчета.СхемаКомпоновкиДанных);
		КонецЕсли;
	Иначе
		СхемаКомпоновкиДанных = ПараметрыОтчета.СхемаКомпоновкиДанных;
	КонецЕсли;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(ПараметрыОтчета.НастройкиКомпоновкиДанных);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	ВыводитьЗаголовок = Истина;
	ВыводитьПодвал    = Истина;
	
	// Определим необходимость вывода заголовка.
	Если ПараметрыОтчета.Свойство("ВыводитьЗаголовок") Тогда
		ВыводитьЗаголовок = ПараметрыОтчета.ВыводитьЗаголовок;
	ИначеЕсли КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("ВыводитьЗаголовок") Тогда
		ВыводитьЗаголовок = КомпоновщикНастроек.Настройки.ДополнительныеСвойства.ВыводитьЗаголовок;
	КонецЕсли;
	
	// Определим необходимость вывода подвала.
	Если ПараметрыОтчета.Свойство("ВыводитьПодвал") Тогда
		ВыводитьПодвал = ПараметрыОтчета.ВыводитьПодвал;
	ИначеЕсли КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("ВыводитьПодвал") Тогда
		ВыводитьПодвал = КомпоновщикНастроек.Настройки.ДополнительныеСвойства.ВыводитьПодвал;
	КонецЕсли;
	
	Результат = Новый ТабличныйДокумент;
	
	Если ВыводитьЗаголовок Тогда
		Если ИспользоватьПриВыводеЗаголовка Тогда
			МенеджерОтчета.ПриВыводеЗаголовка(ПараметрыОтчета, КомпоновщикНастроек, Результат);
		Иначе
			ВывестиЗаголовокОтчета(ПараметрыОтчета, КомпоновщикНастроек, Результат);
		КонецЕсли;
	КонецЕсли;
	
	Если ВыводитьПолностью Тогда
		Если ИспользоватьПередКомпоновкойМакета Тогда
			МенеджерОтчета.ПередКомпоновкойМакета(ПараметрыОтчета, СхемаКомпоновкиДанных, КомпоновщикНастроек);
		КонецЕсли;
		
		КомпоновщикНастроек.Восстановить();
		
		НастройкиДляКомпоновкиМакета = КомпоновщикНастроек.ПолучитьНастройки();
		
		УстановитьМакетОформленияОтчета(ПараметрыОтчета, НастройкиДляКомпоновкиМакета);
		
		// Сгенерируем макет компоновки данных при помощи компоновщика макета
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		Попытка
			
			// В качестве схемы компоновки будет выступать схема самого отчета.
			// В качестве настроек отчета - текущие настройки отчета.
			// Данные расшифровки будем помещать в ДанныеРасшифровки.
			Если ИспользоватьДанныеРасшифровки Тогда 
				МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиДляКомпоновкиМакета, ДанныеРасшифровкиОбъект);
			Иначе
				МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиДляКомпоновкиМакета);
			КонецЕсли;
			
			// Вызываем событие отчета
			Если ИспользоватьПослеКомпоновкиМакета Тогда
				МенеджерОтчета.ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки);
			КонецЕсли;
			
			Если ИспользоватьВнешниеНаборыДанных Тогда
				ВнешниеНаборыДанных = МенеджерОтчета.ПолучитьВнешниеНаборыДанных(ПараметрыОтчета, МакетКомпоновки);
			КонецЕсли;
		
			// Создадим и инициализируем процессор компоновки
			ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
			Если ВнешниеНаборыДанных = Неопределено Тогда
				ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,, ДанныеРасшифровкиОбъект, Истина);
			Иначе
				ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровкиОбъект, Истина);
			КонецЕсли;	
			
			// Создадим и инициализируем процессор вывода результата
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
			ПроцессорВывода.УстановитьДокумент(Результат);
			
			// Перед началом вывода установим привилегированный режим
			Если ИспользоватьПривилегированныйРежим Тогда
				УстановитьПривилегированныйРежим(Истина);
			КонецЕсли;
		
			// Обозначим начало вывода
			ПроцессорВывода.НачатьВывод();
			
			Если ИспользоватьПередВыводомЭлементаРезультата Тогда
				// Основной цикл вывода отчета
				Пока Истина Цикл
					
					// Получим следующий элемент результата компоновки
					ЭлементРезультата = ПроцессорКомпоновки.Следующий();
					
					Если ЭлементРезультата = Неопределено Тогда
						// Следующий элемент не получен - заканчиваем цикл вывода
						Прервать;
					Иначе
						
						Отказ = Ложь;
						
						МенеджерОтчета.ПередВыводомЭлементаРезультата(ПараметрыОтчета, МакетКомпоновки, ДанныеРасшифровкиОбъект, ЭлементРезультата, Отказ);
						
						Если Не Отказ Тогда
							// Элемент получен - выведем его при помощи процессора вывода
							ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
						КонецЕсли;	
					КонецЕсли;
				КонецЦикла;
				
				// Завершение вывода отчета
				ПроцессорВывода.ЗакончитьВывод();
			Иначе
				ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
			КонецЕсли;
			
			// После окончания процессором вывода отчета, поместим расшифровку во временное хранилище.
			ДанныеДляРасшифровки = Новый Структура("Объект, ДанныеРасшифровки", ПараметрыОтчета, ДанныеРасшифровкиОбъект); 
			ДанныеРасшифровки = ПоместитьВоВременноеХранилище(ДанныеДляРасшифровки, ПараметрыОтчета.ДанныеРасшифровки);
			
			// Отключаем привилегированный режим если он использовался
			Если ИспользоватьПривилегированныйРежим Тогда
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
			
		Исключение
			// Запись в журнал регистрации не требуется
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Пока ИнформацияОбОшибке.Причина <> Неопределено Цикл
				ИнформацияОбОшибке = ИнформацияОбОшибке.Причина;
			КонецЦикла;
			ТекстСообщения = НСтр("ru = 'Отчет не сформирован. %1'");
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ТекстСообщения, ИнформацияОбОшибке.Описание));
			Отказ = Истина;
		КонецПопытки;
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		Если ВыводитьПодвал Тогда
			Если ИспользоватьПриВыводеПодвала Тогда 
				МенеджерОтчета.ПриВыводеПодвала(ПараметрыОтчета, Результат);
			Иначе
				ВывестиПодвалОтчета(ПараметрыОтчета, КомпоновщикНастроек, Результат);
			КонецЕсли;
		КонецЕсли;
		
		Если ИспользоватьПослеВыводаРезультата Тогда
			МенеджерОтчета.ПослеВыводаРезультата(ПараметрыОтчета, Результат);
		Иначе
			ОбработкаРезультатаОтчета(ПараметрыОтчета, ПараметрыОтчета.ИдентификаторОтчета, Результат);
		КонецЕсли;
	КонецЕсли;
	
	// Если по каким-либо причинам отчет не был сформирован, адрес расшифровки оставляем прежним,
	// чтобы использовать его повторно при следующем формировании отчета.
	Если Отказ Тогда
		ДанныеРасшифровки = ПараметрыОтчета.ДанныеРасшифровки;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Новый Структура("Результат,ДанныеРасшифровки", Результат, ДанныеРасшифровки), АдресХранилища);
	
КонецПроцедуры

// Выполняет проверку заполнения отборов для отчетов, содежащих дополнительные наборы данных по ОС, НМА или физлицам.
//
// Параметры:
//	ОтчетОбъект   - ОтчетОбъект - проверяемый отчет.
//	Отказ         - Булево - Истина, если проверка не прошла.
//
Процедура ОбработкаПроверкиЗаполненияОтборов(ОтчетОбъект, Отказ) Экспорт
	
	// Если компонуется схема с настройками, где в отборах используются группы, то может быть ошибка компоновки.
	// Ошибка возникает, если среди отборов, входящих в группу, одновременно встречается условие как на реквизит (через ".")
	// поля "Субконто1", так и на любое другое поле. Например, "(Субконто1.Код = &Код И Организация = &Организация)".
	
	Отборы = ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор;
	Субконто1 = Отборы.ДоступныеПоляОтбора.Элементы.Найти("Субконто1");
	Если Субконто1 = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтборыВерхнегоУровня = Отборы.Элементы;
	Для каждого Отбор Из ОтборыВерхнегоУровня Цикл
		
		Если Не Отбор.Использование
		 Или ТипЗнч(Отбор) <> Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьРеквизитСубконто1 = Ложь;
		ЕстьИноеПоле = Ложь;
		ПроверитьГруппуОтборов(Отбор.Элементы, ЕстьРеквизитСубконто1, ЕстьИноеПоле);
		
		Если Не ЕстьРеквизитСубконто1 Или Не ЕстьИноеПоле Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексОтбора = ОтборыВерхнегоУровня.Индекс(Отбор);
		ИмяСубконто = Субконто1.Заголовок;
		ТекстСообщения = НСтр("ru = 'Поле с реквизитами субконто ""%1"" нельзя использовать в групповом отборе с иными полями.'");
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ТекстСообщения, ИмяСубконто),
			, "КомпоновщикНастроек.Настройки.Отбор[" + ИндексОтбора + "]", "Отчет", Отказ);
		Прервать;
	
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПроверитьГруппуОтборов(ОтборыГруппировки, ЕстьРеквизитСубконто1, ЕстьИноеПоле)
	
	ТипПолеКомпоновкиДанных = Тип("ПолеКомпоновкиДанных");
	
	Для каждого Отбор Из ОтборыГруппировки Цикл
		
		Если Не Отбор.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Отбор) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			ПроверитьГруппуОтборов(Отбор.Элементы, ЕстьРеквизитСубконто1, ЕстьИноеПоле);
			
		Иначе
			
			Если ТипЗнч(Отбор.ЛевоеЗначение) = ТипПолеКомпоновкиДанных Тогда
				
				ИмяПоля = Строка(Отбор.ЛевоеЗначение);
				Если Не ЕстьРеквизитСубконто1
				   И Лев(ИмяПоля, 10) = "Субконто1." Тогда
					ЕстьРеквизитСубконто1 = Истина;
				КонецЕсли;
				Если Не ЕстьИноеПоле
				   И Лев(ИмяПоля, 9) <> "Субконто1" Тогда
					ЕстьИноеПоле = Истина;
				КонецЕсли;
				
			КонецЕсли;
			Если ТипЗнч(Отбор.ПравоеЗначение) = ТипПолеКомпоновкиДанных Тогда
				
				ИмяПоля = Строка(Отбор.ПравоеЗначение);
				Если Не ЕстьРеквизитСубконто1
				   И Лев(ИмяПоля, 10) = "Субконто1." Тогда
					ЕстьРеквизитСубконто1 = Истина;
				КонецЕсли;
				Если Не ЕстьИноеПоле
				   И Лев(ИмяПоля, 9) <> "Субконто1" Тогда
					ЕстьИноеПоле = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЕстьРеквизитСубконто1 И ЕстьИноеПоле Тогда
			Прервать;
		КонецЕсли;
	
	КонецЦикла; 
	
КонецПроцедуры

// Возвращает признаки проверки отчета перед формирование по умолчанию.
//
// Возвращаемое значение:
//	Структура - Содержит ключи:
//		* КорректностьПериода - Булево - Признак проверки периода отчета.
//		* ВыборПоказателя - Булево - Признак необходимости проверять выбранные показатели отчета.
//		* СписокВидовСубконто - Булево - Признак необходимости проверять список видов субконто.
//
Функция СтандартныеПроверкиЗаполнения() Экспорт
	
	Проверки = Новый Структура;
	Проверки.Вставить("КорректностьПериода", Истина);
	Проверки.Вставить("ВыборПоказателя",     Истина);
	Проверки.Вставить("СписокВидовСубконто", Ложь);
	Возврат Проверки;

КонецФункции

// Заменяет представление отборов, отображаемое в поле табличного документа до первого заполнения отчета.
//
// Параметры:
//  Форма        - УправляемаяФорма - содержит реквизиты Отчет и Результат.
//
Процедура ОбновитьОписаниеОтборовОтчета(Форма) Экспорт
	
	Отчет = Форма.Отчет;
	Если Отчет.Свойство("РежимРасшифровки") И Отчет.РежимРасшифровки
	 Или Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Результат")
	 Или Форма.Результат.Области.Найти("ОписаниеОтборовОтчета") = Неопределено // отчет ранее заполнялся
	 Или Форма.Элементы.Результат.ОтображениеСостояния.ДополнительныйРежимОтображения <> ДополнительныйРежимОтображения.Неактуальность Тогда
		Возврат;
	КонецЕсли;
	   
    ПараметрыОтчета = Новый Структура;
	ТекстОтбор = ОписаниеОтборовОтчета(ПараметрыОтчета, Отчет.КомпоновщикНастроек);
	
	ПодставитьИменаСубконто(Форма, ТекстОтбор);
	
	// Выводим представление отборов ниже надписи "Отчет не сформирован".
	Форма.Результат.Область(9, 2).Текст = ТекстОтбор;
	
КонецПроцедуры

// Вызывается из обработчика события "ПриСохраненииПользовательскихНастроекНаСервере" формы отчета.
//
// Параметры:
//	ФормаОтчета - УправляемаяФорма - Форма отчета.
//	Настройки - ПользовательскиеНастройкиКомпоновкиДанных - Сохраняемые настройки.
//	СохранятьТолькоРеквизиты - Булево - Признак сохранения только значений реквизитов отчета без настроек СКД.
//
Процедура ПриСохраненииПользовательскихНастроекНаСервере(ФормаОтчета, Настройки, СохранятьТолькоРеквизиты = Ложь) Экспорт
	
	ОтчетОбъект = ФормаОтчета.РеквизитФормыВЗначение("Отчет");
	
	ОтчетМетаданные = ОтчетОбъект.Метаданные();
	
	Если НЕ СохранятьТолькоРеквизиты Тогда
		ТекущиеНастройки = ОтчетОбъект.КомпоновщикНастроек.Настройки;
		
		// Очистка пользовательских настроек
		ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
		ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
		ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
		
		// Установка пользовательских настроек
		ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "Отбор";
		ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "Порядок";
		ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
		
		// Параметр "НастройкиОтчета" используется только в рассылке, в пользовательских настройках отчета сохранять его не нужно.
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Настройки, "НастройкиОтчета", Новый ХранилищеЗначения(Неопределено), Истина);
	КонецЕсли;

	// Сохранение реквизитов отчета
	ДополнительныеСвойства = Новый Структура;
	Для Каждого Реквизит Из ОтчетМетаданные.Реквизиты Цикл
		Если Реквизит.Имя <> "РежимРасшифровки"
			И Реквизит.Имя <> "СписокСформированныхЛистов" Тогда
			ДополнительныеСвойства.Вставить(Реквизит.Имя, ОтчетОбъект[Реквизит.Имя]);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Реквизит Из ОтчетМетаданные.ТабличныеЧасти Цикл
		ДополнительныеСвойства.Вставить(Реквизит.Имя, ОтчетОбъект[Реквизит.Имя].Выгрузить());
	КонецЦикла;
	
	// Сохранение реквизитов формы.
	// Одноименные реквизиты отчета имеют больший приоритет.
	ДополнитьЗначениямиРеквизитовФормы(ДополнительныеСвойства, ФормаОтчета, СохраняемыеРеквизитыФормы());

	Если ЕстьЭлементФормы(ФормаОтчета, "ГруппаПанельНастроек") Тогда
		Если Настройки.ДополнительныеСвойства.Свойство("ПанельНастроекСкрытаАвтоматически")
			И Настройки.ДополнительныеСвойства.ПанельНастроекСкрытаАвтоматически = Истина Тогда
			ДополнительныеСвойства.Вставить("ВидимостьПанелиНастроек", Истина);
		Иначе
			ДополнительныеСвойства.Вставить("ВидимостьПанелиНастроек", ФормаОтчета.Элементы.ГруппаПанельНастроек.Видимость);
		КонецЕсли;
	КонецЕсли;
	
	// Сохраним представление отборов для показа при открытии отчета.
	Если (Не ДополнительныеСвойства.Свойство("РежимРасшифровки") Или Не ДополнительныеСвойства.РежимРасшифровки) Тогда
		
		ПараметрыОтчета = Новый Структура;
		Если ДополнительныеСвойства.Свойство("Подразделение") Тогда
			ПараметрыОтчета.Вставить("Подразделение", ДополнительныеСвойства.Подразделение);
		ИначеЕсли ДополнительныеСвойства.Свойство("ПодразделениеОрганизации") Тогда
			ПараметрыОтчета.Вставить("Подразделение", ДополнительныеСвойства.ПодразделениеОрганизации);
		КонецЕсли;
		ТекстОтбор = ОписаниеОтборовОтчета(ПараметрыОтчета, ОтчетОбъект.КомпоновщикНастроек);
		
		// Если отчет открыли и не использовали, то компоновщик не инициализирован, и представления субконто в отборах
		// не заданы. Переименовываем текст "СубконтоN" в представление вида субконто.
		ПодставитьИменаСубконто(ФормаОтчета, ТекстОтбор);
		
		ДополнительныеСвойства.Вставить("ОписаниеОтборовОтчета", ТекстОтбор);
		
	КонецЕсли;
	
	// Колонтитулы.
	ТекущиеНастройки = ОтчетОбъект.КомпоновщикНастроек.Настройки;
	Если ТекущиеНастройки.ДополнительныеСвойства.Свойство("НастройкиКолонтитулов") Тогда 
		ДополнительныеСвойства.Вставить("НастройкиКолонтитулов", ТекущиеНастройки.ДополнительныеСвойства.НастройкиКолонтитулов);
	КонецЕсли;	
	
	Настройки.ДополнительныеСвойства.Вставить("ДанныеОтчета", Новый ХранилищеЗначения(ДополнительныеСвойства));
	
КонецПроцедуры

// Вызывается из обработчика события "ПриЗагрузкеПользовательскихНастроекНаСервере" формы отчета.
//
// Параметры:
//	ФормаОтчета - УправляемаяФорма - Форма отчета.
//	Настройки - ПользовательскиеНастройкиКомпоновкиДанных - Сохраняемые настройки.
//	ЗагружатьТолькоРеквизиты - Булево - Признак загрузки только значений реквизитов отчета без настроек СКД.
//
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(ФормаОтчета, Настройки, ЗагружатьТолькоРеквизиты = Ложь) Экспорт
	
	Отчет = ФормаОтчета.Отчет;
	// Для отчетов, использующих варианты отчетов, при инициализации отчета
	// происходит загрузка варианта и пользовательских настроек поэтому,
	// перед тем как загружать настройки, проверим режим расшифровки.
	РежимРасшифровки = Ложь;
	Если ФормаОтчета.Параметры.Свойство("КлючВарианта") И ЗначениеЗаполнено(ФормаОтчета.Параметры.КлючВарианта) Тогда
		Если Отчет.Свойство("РежимРасшифровки") И ФормаОтчета.Отчет.РежимРасшифровки Тогда
			РежимРасшифровки = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Если настройки не заданы или отчет в режиме расшифровки, загружаем настройки по умолчанию.
	Если Настройки = Неопределено ИЛИ РежимРасшифровки Тогда
		// Установка настроек по умолчанию.
		УстановитьНастройкиПоУмолчанию(ФормаОтчета);
	Иначе 
		// Восстановление сохраненных настроек.
		Если Настройки.ДополнительныеСвойства.Свойство("ДанныеОтчета") Тогда
			
			ДополнительныеСвойства = Настройки.ДополнительныеСвойства.ДанныеОтчета.Получить();
			
			Если ДополнительныеСвойства.Свойство("Организация") 
				И ЗначениеЗаполнено(ДополнительныеСвойства.Организация) Тогда
				// Доступ к организации мог быть изменен с момента сохранения настроек.
				// Недоступную организацию исключим из состава настроек.
				ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ОрганизацииДанныеКоторыхДоступныПользователю();
				Если ДоступныеОрганизации.Найти(ДополнительныеСвойства.Организация) = Неопределено Тогда
					ДополнительныеСвойства.Удалить("Организация");
				КонецЕсли;
			КонецЕсли;
			
			Если ДополнительныеСвойства.Свойство("МакетОформления") Тогда
				БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(
					ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, 
					"МакетОформления", 
					ДополнительныеСвойства.МакетОформления);
			КонецЕсли;
			
			// Восстановление реквизитов отчета.
			Для Каждого ЭлементСтруктуры Из ДополнительныеСвойства Цикл
				
				Если ФормаОтчета.Отчет.Свойство(ЭлементСтруктуры.Ключ) Тогда
					
					Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("ТаблицаЗначений") Тогда
						ФормаОтчета.Отчет[ЭлементСтруктуры.Ключ].Очистить();
						ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ЭлементСтруктуры.Значение, ФормаОтчета.Отчет[ЭлементСтруктуры.Ключ]);
						Продолжить;
					ИначеЕсли ЭлементСтруктуры.Ключ = "РежимРасшифровки" Тогда
						Продолжить;
					КонецЕсли;
					
					ФормаОтчета.Отчет[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
					
				КонецЕсли;
				
			КонецЦикла;
			
			// Восстановление реквизитов формы.
			Для Каждого ИмяРеквизита Из СохраняемыеРеквизитыФормы() Цикл
				Если ДополнительныеСвойства.Свойство(ИмяРеквизита)
					И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, ИмяРеквизита) Тогда
					ФормаОтчета[ИмяРеквизита] = ДополнительныеСвойства[ИмяРеквизита];
				КонецЕсли;
			КонецЦикла;
			
			// Восстановление особенных настроек
			Если ДополнительныеСвойства.Свойство("ВидимостьПанелиНастроек") 
				И НЕ ЕстьЭлементФормы(ФормаОтчета, "РазделыОтчета") Тогда
				
				Если ЕстьЭлементФормы(ФормаОтчета, "ПанельНастроек") Тогда
					БухгалтерскиеОтчетыКлиентСервер.ИзменитьЗаголовокКнопкиПанельНастроек(
						ФормаОтчета.Элементы.ПанельНастроек, ДополнительныеСвойства.ВидимостьПанелиНастроек);
				КонецЕсли;

				Если ЕстьЭлементФормы(ФормаОтчета, "ГруппаПанельНастроек") Тогда
 					ФормаОтчета.Элементы.ГруппаПанельНастроек.Видимость = ДополнительныеСвойства.ВидимостьПанелиНастроек;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ДополнительныеСвойства.Свойство("ОписаниеОтборовОтчета") Тогда
				ВывестиОписаниеОтбора(ФормаОтчета, ДополнительныеСвойства.ОписаниеОтборовОтчета);
			КонецЕсли;
			
			Если НЕ ДополнительныеСвойства.Свойство("ВыводитьДиаграмму") 
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "ВыводитьДиаграмму") Тогда
				
				ФормаОтчета.ВыводитьДиаграмму = Истина;
				
			КонецЕсли;
			
			// Колонтитулы.
			Если ДополнительныеСвойства.Свойство("НастройкиКолонтитулов") Тогда 
				ТекущиеНастройки = ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки;
				ТекущиеНастройки.ДополнительныеСвойства.Вставить("НастройкиКолонтитулов", ДополнительныеСвойства.НастройкиКолонтитулов);
			КонецЕсли;	

		КонецЕсли;
		
		Если Не ЗагружатьТолькоРеквизиты Тогда
			ТекущиеНастройки = ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки;
			
			// Установка пользовательских настроек.
			ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "Отбор";
			ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "Порядок";
			ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
			
			// Перенос пользовательских настроек в основные.
			ФормаОтчета.Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(Настройки);
			ФормаОтчета.Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(ФормаОтчета.Отчет.КомпоновщикНастроек.ПолучитьНастройки());
			
			// Очистка пользовательских настроек.
			ТекущиеНастройки = ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки;
			ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
			ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
			ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
		КонецЕсли;
		
		Если Отчет.Свойство("Организация") Тогда
			УстановитьОрганизацию(ФормаОтчета);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "МинимальныйВидПериода") Тогда
		МинимальныйВидПериода = ФормаОтчета.МинимальныйВидПериода;
	Иначе
		МинимальныйВидПериода = Неопределено;
	КонецЕсли;
	
	ИдентификаторОбъекта = БухгалтерскиеОтчеты.ИмяОтчета(ФормаОтчета);
	Если ИдентификаторОбъекта = "ОборотноСальдоваяВедомость" Тогда
		Если ФормаОтчета.Отчет.ДополнительныеПоля.НайтиСтроки(Новый Структура("Поле", "Счет.Наименование")).Количество() = 0 Тогда
			НоваяСтрока = ФормаОтчета.Отчет.ДополнительныеПоля.Добавить();
			НоваяСтрока.Представление = "Выводить наименование счета";
			НоваяСтрока.Поле          = "Счет.Наименование";
			НоваяСтрока.Использование = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "ВидПериода") И НЕ ЗначениеЗаполнено(ФормаОтчета.ВидПериода) Тогда
		ФормаОтчета.ВидПериода = ВыборПериодаКлиентСервер.ПолучитьВидПериода(
			ФормаОтчета.Отчет.НачалоПериода, ФормаОтчета.Отчет.КонецПериода, МинимальныйВидПериода);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "ПолеОрганизация") Тогда
		ОбщегоНазначенияБПКлиентСервер.УстановитьЗначениеПолеОрганизация(
			ФормаОтчета.ПолеОрганизация, ФормаОтчета.Отчет.Организация);
	КонецЕсли;
		
КонецПроцедуры

// Вызывается из обработчика события "ПриЗагрузкеПользовательскихНастроекНаСервере" формы отчета руководителю.
// Отчеты руководителю формируются при открытии вне зависимости от параметров. Загрузка настроек должна это учитывать.
//
// Параметры:
//	ФормаОтчета   - УправляемаяФорма - Форма отчета.
//	Настройки     - ПользовательскиеНастройкиКомпоновкиДанных - Сохраняемые настройки.
//
Процедура ПриЗагрузкеПользовательскихНастроекНаСервереВОтчетеРуководителю(ФормаОтчета, Настройки) Экспорт
	
	Параметры = ФормаОтчета.Параметры;
	
	Если ФормаОтчета.ИнформационнаяБазаФайловая
	 Или Не Параметры.Свойство("СформироватьПриОткрытии")
	 Или Параметры.СформироватьПриОткрытии = Истина Тогда // значение параметра соответствует алгоритму отчета
		
		ПриЗагрузкеПользовательскихНастроекНаСервере(ФормаОтчета, Настройки);
		
	Иначе // значение параметра не соответствует алгоритму отчета
		
		Параметры.СформироватьПриОткрытии = Истина;
		ПриЗагрузкеПользовательскихНастроекНаСервере(ФормаОтчета, Настройки);
		Параметры.СформироватьПриОткрытии = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет инициализацию компоновщика настроек в форме отчета по переданным настройкам.
//
// Параметры:
//	ФормаОтчета - УправляемаяФорма - Форма отчета.
//	Настройки - НастройкиКомпоновкиДанных - Настройки, которые необходимо загрузить в компоновщик.
//
Процедура ПриЗагрузкеПользовательскихНастроекКомпоновщикаНаСервере(ФормаОтчета, Настройки) Экспорт

	// Если настройки не заданы, загружаем настройки по умолчанию.
	Если Настройки = Неопределено Тогда
		// Установка настроек по умолчанию
		УстановитьНастройкиКомпоновщикаПоУмолчанию(ФормаОтчета);
	Иначе 
		ТекущиеНастройки = ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки;
		
		// Установка пользовательских настроек
		ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "Отбор";
		ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "Порядок";
		ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
		
		// Перенос пользовательских настроек в основные
		ФормаОтчета.Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(Настройки);
		ФормаОтчета.Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(ФормаОтчета.Отчет.КомпоновщикНастроек.ПолучитьНастройки());
		
		// Очистка пользовательских настроек
		ТекущиеНастройки = ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки;
		ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
		ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
		ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
	КонецЕсли;
	
КонецПроцедуры

// Возвращает данные ответственного лица для подписи в отчете.
//
// Параметры:
//	Параметры - Структура - Настройки формирования отчета, содержит ключи:
//		* Организация - СправочникСсылка.Организации - Организация, по которой формируется отчет.
//		* ОтветственноеЛицо - Справочники.ВидыОтветственныхЛиц - Вид ответственного лица.
//		* Период - Дата - Период формирования отчета (опционально).
//		* КонецПериода - Дата - Конец периода формирования отчета (опционально).
//
// Возвращаемое значение:
//	Структура - Содержит ключи:
//		* Должность - Строка - Должность ответственного лица.
//		* РасшифровкаПодписи - Строка - Фамилия и инициалы ответственного лица.
//
Функция ПолучитьДанныеОтветственногоЛица(Параметры) Экспорт
	
	ДанныеОтветственногоЛица = Новый Структура("Должность, РасшифровкаПодписи", "", "");
	
	Если Не Параметры.Свойство("Организация")
		ИЛИ Не Параметры.Свойство("ОтветственноеЛицо") Тогда
		Возврат ДанныеОтветственногоЛица;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.Организация)
		ИЛИ Не ЗначениеЗаполнено(Параметры.ОтветственноеЛицо) Тогда
		Возврат ДанныеОтветственногоЛица;
	КонецЕсли;
	
	Если Параметры.Свойство("Период") И ЗначениеЗаполнено(Параметры.Период) Тогда
		Период = Параметры.Период;
	ИначеЕсли Параметры.Свойство("КонецПериода") И ЗначениеЗаполнено(Параметры.КонецПериода) Тогда
		Период = КонецДня(Параметры.КонецПериода);
	Иначе
		Период = ТекущаяДатаСеанса();
	КонецЕсли;
		
	РеквизитыОтветственныхЛиц = БухгалтерскийУчетСервер.ОтветственныеЛицаОрганизацийРуководители(Параметры.Организация, Период);

	Если Параметры.ОтветственноеЛицо = Справочники.ВидыОтветственныхЛиц.Руководитель Тогда
		ДанныеОтветственногоЛица.Должность 			= РеквизитыОтветственныхЛиц.РуководительДолжность;
		ДанныеОтветственногоЛица.РасшифровкаПодписи = РеквизитыОтветственныхЛиц.Руководитель;

	ИначеЕсли Параметры.ОтветственноеЛицо = Справочники.ВидыОтветственныхЛиц.ГлавныйБухгалтер Тогда
		ДанныеОтветственногоЛица.Должность 			= РеквизитыОтветственныхЛиц.ГлавныйБухгалтерДолжность;
		ДанныеОтветственногоЛица.РасшифровкаПодписи = РеквизитыОтветственныхЛиц.ГлавныйБухгалтер;

	ИначеЕсли Параметры.ОтветственноеЛицо = Справочники.ВидыОтветственныхЛиц.Кассир Тогда
		ДанныеОтветственногоЛица.Должность 			= РеквизитыОтветственныхЛиц.КассирДолжность;
		ДанныеОтветственногоЛица.РасшифровкаПодписи = РеквизитыОтветственныхЛиц.Кассир;
	КонецЕсли;
	
	Возврат ДанныеОтветственногоЛица;
			
КонецФункции

#КонецОбласти

#Область ОбработкаРезультатаОтчета

// Содержит имена реквизитов формы, сохраняемых в составе настроек.
// 
// Возвращаемое значение:
//  Массив - имена реквизитов формы.
//
Функция СохраняемыеРеквизитыФормы()
	
	ИменаРеквизитов = Новый Массив;
	
	ИменаРеквизитов.Добавить("Организация");
	ИменаРеквизитов.Добавить("НачалоПериода");
	ИменаРеквизитов.Добавить("КонецПериода");
	
	ИменаРеквизитов.Добавить("ВыводитьЗаголовок");
	ИменаРеквизитов.Добавить("ВыводитьПодвал");
	ИменаРеквизитов.Добавить("ВыводитьЕдиницуИзмерения");
	ИменаРеквизитов.Добавить("ВыводитьДиаграмму");
	ИменаРеквизитов.Добавить("ВыводитьПримечания");
	
	ИменаРеквизитов.Добавить("МакетОформления");
	
	ИменаРеквизитов.Добавить("СкрыватьНастройкиПриФормированииОтчета");
	ИменаРеквизитов.Добавить("СтандартныеГруппировки");
	ИменаРеквизитов.Добавить("ВидПериода");
	
	Возврат ИменаРеквизитов;
	
КонецФункции

Процедура ВывестиОписаниеОтбора(ФормаОтчета, ОписаниеОтбора)
	
	Если ПустаяСтрока(ОписаниеОтбора) Тогда
		Возврат;
	КонецЕсли;
	
	// Если отчет формируется при открытии, то не выводим представление отбора.
	Если ФормаОтчета.Параметры.Свойство("СформироватьПриОткрытии")
		И ФормаОтчета.Параметры.СформироватьПриОткрытии = Истина Тогда
		Возврат;
	КонецЕсли;
	
	// Какое-то исключение
	Если БухгалтерскиеОтчеты.ИмяОтчета(ФормаОтчета) = "ОборотноСальдоваяВедомость" Тогда
		Возврат;
	КонецЕсли;
   
	// Проверяем, что есть, куда выводить.
	Если ФормаОтчета.Элементы.Найти("Результат") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Занято = ФормаОтчета.Результат.ВысотаТаблицы <> 0
   		Или ФормаОтчета.Элементы.Результат.ОтображениеСостояния.ДополнительныйРежимОтображения <> ДополнительныйРежимОтображения.Неактуальность;
	Если Занято Тогда
		Возврат;
	КонецЕсли;
	
    // Выводим представление отборов ниже надписи "Отчет не сформирован".
	ОбластьОписания = ФормаОтчета.Результат.Область(9, 1, 9, 2);
	ОбластьОписания.Имя = "ОписаниеОтборовОтчета";
	ОбластьОписания.ВысотаСтроки = 14;
   
	ОбластьОписания = ФормаОтчета.Результат.Область(9, 1);
	ОбластьОписания.Шрифт = Новый Шрифт(ОбластьОписания.Шрифт, , 11);
	ОбластьОписания.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	ОбластьОписания.Текст = НСтр("ru = 'Отбор:'");
	
	ОбластьОписания = ФормаОтчета.Результат.Область(9, 2);
	ОбластьОписания.Шрифт = Новый Шрифт(ОбластьОписания.Шрифт, , 11);
	ОбластьОписания.Текст = ОписаниеОтбора;
	
КонецПроцедуры

// Дополняет структуру значениями реквизитов формы.
// Значения реквизитов, уже имеющихся в структуре, имеют больший приоритет. 
//
// Параметры:
//  Данные			 - Структура - дополняемая коллекция.
//  Форма			 - УправляемаяФорма - форма отчета.
//  ИменаРеквизитов	 - Массив - имена реквизитов, могут отсутствовать на форме.
//
Процедура ДополнитьЗначениямиРеквизитовФормы(Данные, Форма, ИменаРеквизитов)
	
	Для Каждого ИмяРеквизита Из ИменаРеквизитов Цикл
		
		Если Данные.Свойство(ИмяРеквизита) Тогда
			Продолжить;
		КонецЕсли;
	
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, ИмяРеквизита) Тогда
			Данные.Вставить(ИмяРеквизита, Форма[ИмяРеквизита]);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет служебные параметры отчета необходимые для работы формы отчета.
//
// Параметры:
//  Отчет			 - ОтчетОбъект		 - Отчет форма которого инициализируется.
//  РеквизитыФормы	 - Структура		 - Структура реквизитов формы.
//  Форма			 - УправляемаяФорма	 - Форма инициализация которой производится.
//
Процедура ИнициализацияФормыОтчета(Отчет, РеквизитыФормы, Форма)
	
	Если РеквизитыФормы.Свойство("ИнформационнаяБазаФайловая") Тогда
		Форма.ИнформационнаяБазаФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	КонецЕсли;
	
	Если РеквизитыФормы.Свойство("ОписанияТиповВидовСубконто") Тогда
		Форма.ОписанияТиповВидовСубконто = Новый Структура;
		Форма.ОписанияТиповВидовСубконто.Вставить("Номенклатура"                  , ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура.ТипЗначения);
		Форма.ОписанияТиповВидовСубконто.Вставить("Склад"                         , ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады.ТипЗначения);
		Форма.ОписанияТиповВидовСубконто.Вставить("Контрагент"                    , ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты.ТипЗначения);
		Форма.ОписанияТиповВидовСубконто.Вставить("ДоговорКонтрагента"            , ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры.ТипЗначения);
		Форма.ОписанияТиповВидовСубконто.Вставить("Партия"                        , ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии.ТипЗначения);
		//Форма.ОписанияТиповВидовСубконто.Вставить("ДокументРасчетовСКонтрагентами", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами.ТипЗначения);
	КонецЕсли;
	
	ОтчетОбъект = Форма.РеквизитФормыВЗначение("Отчет");
	Если Не ЗначениеЗаполнено(Форма.СхемаКомпоновкиДанных) Тогда
		Форма.СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(ОтчетОбъект.СхемаКомпоновкиДанных, Форма.УникальныйИдентификатор);
	КонецЕсли;
	Форма.ДанныеРасшифровки = ПоместитьВоВременноеХранилище(Форма.ДанныеРасшифровки, Форма.УникальныйИдентификатор);
	
	МенеджерОтчета = Отчеты[БухгалтерскиеОтчеты.ИмяОтчета(Форма)];
	Если РеквизитыФормы.Свойство("НаборПоказателей") Тогда
		Форма.НаборПоказателей = Новый ФиксированныйМассив(МенеджерОтчета.ПолучитьНаборПоказателей());
	КонецЕсли;
	
	ПараметрМакетОформления = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметрВывода(Отчет.КомпоновщикНастроек.Настройки, "МакетОформления");
	СписокМакетовОформления = ПолучитьСписокМакетовОформления();
	Для Каждого ЭлементСписка Из СписокМакетовОформления Цикл
		Если ЕстьЭлементФормы(Форма, "МакетОформления") Тогда
			Форма.Элементы.МакетОформления.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЕсли;
	КонецЦикла;
	Если ПараметрМакетОформления.Использование И Не ПустаяСтрока(ПараметрМакетОформления.Значение) Тогда
		Если РеквизитыФормы.Свойство("МакетОформления") Тогда
			Форма.МакетОформления = ПараметрМакетОформления.Значение;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНайти(Форма.ИмяФормы,"РеестрДокументов") = 0 Тогда
		Если НЕ ЗначениеЗаполнено(Форма.МакетОформления) Тогда 
			//Форма.МакетОформления = СписокМакетовОформления[0];
			Форма.МакетОформления = БухгалтерскиеОтчетыПовтИсп.ПолучитьИмяМакетаОформления();
		КонецЕсли;	
	КонецЕсли;
		
	Если ЕстьЭлементФормы(Форма, "ПанельНастроек") Тогда
		БухгалтерскиеОтчетыКлиентСервер.ИзменитьЗаголовокКнопкиПанельНастроек(
		Форма.Элементы.ПанельНастроек, Форма.Элементы.ГруппаПанельНастроек.Видимость);
	КонецЕсли;
	
	УстановитьНастройкиПоУмолчанию(Форма); // Значения по умолчанию могут быть заменены позже, при загрузке настроек отчета.
	
	Если ЕстьЭлементФормы(Форма, "ВидПериода") Тогда
		ВыборПериодаКлиентСервер.ЗаполнитьСписокВыбораВидПериода(Перечисления.ДоступныеПериодыОтчета.День,
		Форма.Элементы.ВидПериода.СписокВыбора, Форма.ВидПериода);
	КонецЕсли;
	
	Если ЕстьЭлементФормы(Форма, "ГруппировкаТипГруппировки") Тогда
		БухгалтерскиеОтчеты.УстановитьУсловноеОформлениеТипГруппировки(Форма);
	КонецЕсли;
	
	Если РеквизитыФормы.Свойство("СоответствиеОрганизаций")
		И ЕстьЭлементФормы(Форма, "ПолеОрганизация") Тогда
		ОбщегоНазначенияБПВызовСервера.ЗаполнитьСписокОрганизаций(Форма.Элементы.ПолеОрганизация, Форма.СоответствиеОрганизаций);
	КонецЕсли;
	
	Если РеквизитыФормы.Свойство("ИспользуетсяНесколькоОрганизаций") Тогда
		Форма.ИспользуетсяНесколькоОрганизаций = Справочники.Организации.ИспользуетсяНесколькоОрганизаций();
	КонецЕсли;
	
	Если ЕстьЭлементФормы(Форма, "РассчитатьСумму") Тогда
		Форма.Элементы.РассчитатьСумму.Пометка = Истина;
	КонецЕсли;
	
	Если ЕстьЭлементФормы(Форма, "ОформлениеНастроитьКолонтитулы") Тогда
		ГлобальныеНастройки = ВариантыОтчетов.ГлобальныеНастройки();
		Форма.Элементы.ОформлениеНастроитьКолонтитулы.Видимость = ГлобальныеНастройки.ВыводитьИндивидуальныеНастройкиКолонтитулов;
	КонецЕсли;		
	
	РассылкаОтчетовБП.ПриСозданииНаСервере(Форма);

КонецПроцедуры

Процедура ИнициализацияРасшифровкиПоВиду(Отчет, Параметры, РеквизитыФормы, Форма)
	
	// Взведем флаг расшифровки
	Отчет.РежимРасшифровки = Истина;
	
	// 1 - из временного хранилища, 2 - из параметров формы
	Если Параметры.ВидРасшифровки = 1 Тогда
		ДанныеОбъекта = ПолучитьИзВременногоХранилища(Параметры.АдресНастроек);
		ПользовательскиеНастройки = ДанныеОбъекта.НастройкиРасшифровки[Параметры.ИДРасшифровки];
	ИначеЕсли Параметры.ВидРасшифровки = 2 Тогда
		ПользовательскиеНастройки = Параметры.ПользовательскиеНастройки;
	КонецЕсли;
	
	Если ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("КлючВарианта") 
		И ЗначениеЗаполнено(ПользовательскиеНастройки.ДополнительныеСвойства.КлючВарианта)Тогда
		Форма.УстановитьТекущийВариант(ПользовательскиеНастройки.ДополнительныеСвойства.КлючВарианта);
	КонецЕсли;
	
	Если Параметры.Свойство("СформироватьПриОткрытии") И Параметры.СформироватьПриОткрытии = Истина 
		И РеквизитыФормы.Свойство("КомпоновщикИнициализирован") И Не Форма.КомпоновщикИнициализирован Тогда
		Если РеквизитыФормы.Свойство("КлючТекущегоВарианта") Тогда
			ИнициализацияКомпоновщикаНастроек(Форма, , Форма.КлючТекущегоВарианта);
		Иначе
			ИнициализацияКомпоновщикаНастроек(Форма);
		КонецЕсли;
	КонецЕсли;
	
	Если ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ОчищатьТаблицуГруппировок") И Форма.Отчет.Свойство("Группировка") Тогда
		Форма.Отчет.Группировка.Очистить();
	КонецЕсли;
	
	Если ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ОчищатьДополнительныеПоля") И Форма.Отчет.Свойство("ДополнительныеПоля") Тогда
		Форма.Отчет.ДополнительныеПоля.Очистить();
	КонецЕсли;
	
	// Установка пользовательских настроек
	Отчет.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки              = "Отбор";
	Отчет.КомпоновщикНастроек.Настройки.Порядок.ИдентификаторПользовательскойНастройки            = "Порядок";
	Отчет.КомпоновщикНастроек.Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
	
	// Загрузка пользовательских настроек в компоновщик настроек отчета
	Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
	
	// Получение основных настроек компоновщика настроек, с учетом пользовательских настроек.
	Настройки = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	
	// Загрузка основных настроек
	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	
	// Очистка пользовательских настроек
	Отчет.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
	Отчет.КомпоновщикНастроек.Настройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
	Отчет.КомпоновщикНастроек.Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
	
	// Установка значений реквизитов отчета и формы
	Для Каждого ЭлементСтруктуры Из ПользовательскиеНастройки.ДополнительныеСвойства Цикл
		Если Отчет.Свойство(ЭлементСтруктуры.Ключ) Тогда
			// Табличные части отчета могут быть переданы в виде массива структур
			Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("Массив") Тогда 
				Для Каждого СтрокаСведений Из ЭлементСтруктуры.Значение Цикл
					НоваяСтрока = Отчет[ЭлементСтруктуры.Ключ].Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСведений);
				КонецЦикла;
			Иначе
				Отчет[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
			КонецЕсли;
		ИначеЕсли РеквизитыФормы.Свойство(ЭлементСтруктуры.Ключ) Тогда
			Форма[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("КлючВарианта") Тогда
		Параметры.КлючВарианта = ПользовательскиеНастройки.ДополнительныеСвойства.КлючВарианта;
	КонецЕсли;
	
	Попытка
		Форма.ИзменениеСхемыКомпоновкиДанныхНаСервере();
	Исключение
		// Запись в журнал регистрации не требуется
	КонецПопытки;
	Если Параметры.Свойство("ЗаполняемыеНастройки") Тогда
		Попытка
			Форма.ЗаполнитьНастройкамиПоУмолчанию(Параметры.ЗаполняемыеНастройки);
		Исключение
			// Запись в журнал регистрации не требуется
		КонецПопытки;
	КонецЕсли;
	Форма.СформироватьОтчетНаСервере();

КонецПроцедуры

// Производится инициализация формы для открытия отчета в качестве расшифровки. 
// Вызывается при обработке события формы отчета ПриСозданииНаСервере.
// В качестве настроек расшифровки могут использоваться настройки в универсальном формате 
// (см. БухгалтерскиеОтчетыКлиентСервер.НовыйУниверсальныеНастройки),
// или же эти универсальные настройки будут собраны по данным исходного отчета.
//
// Параметры:
//  Отчет			 - ОтчетОбъект		 - Открываемый отчет.
//  Параметры		 - Структура		 - Параметры формы, переданные при открытии.
//  РеквизитыФормы	 - Структура		 - Структура реквизитов формы.
//  Форма			 - УправляемаяФорма	 - Форма открываемого отчета.
//
Процедура ИнициализацияРасшифровкиПоНастройкам(Отчет, Параметры, РеквизитыФормы, Форма)
	
	Отчет.РежимРасшифровки 	= Истина;
	ИмяОтчета 				= БухгалтерскиеОтчеты.ИмяОтчета(Форма);
	НастройкиРасшифровки 	= Неопределено;
	
	Если НЕ Параметры.Свойство("УниверсальныеНастройки", НастройкиРасшифровки) Тогда
		
		НастройкиРасшифровки = БухгалтерскиеОтчетыРасшифровка.НастройкиРасшифровки(
			Параметры.АдресРасшифровки,
			Параметры.ИдентификаторРасшифровки,
			Параметры.ИмяИсходногоОтчета,
			Параметры.РеквизитыПравилРасшифровки);
			
	КонецЕсли;
	
	МенеджерОтчета = Отчеты[ИмяОтчета];
	МенеджерОтчета.АдаптироватьНастройки(НастройкиРасшифровки);
	
	Если НастройкиРасшифровки.Свойство("КлючВарианта") 
		И ЗначениеЗаполнено(НастройкиРасшифровки.КлючВарианта)Тогда
		Форма.УстановитьТекущийВариант(НастройкиРасшифровки.КлючВарианта);
	КонецЕсли;
	
	Если РеквизитыФормы.Свойство("КомпоновщикИнициализирован") И Не Форма.КомпоновщикИнициализирован Тогда
		Если РеквизитыФормы.Свойство("КлючТекущегоВарианта") Тогда
			ИнициализацияКомпоновщикаНастроек(Форма, , Форма.КлючТекущегоВарианта);
		Иначе
			ИнициализацияКомпоновщикаНастроек(Форма);
		КонецЕсли;
	КонецЕсли;
	
	Если РеквизитыФормы.Свойство("МакетОформления") И ПустаяСтрока(Форма.МакетОформления)
	   И Не ПустаяСтрока(НастройкиРасшифровки.МакетОформления) Тогда
		Форма.МакетОформления = НастройкиРасшифровки.МакетОформления;
	КонецЕсли;
	
	ОбщегоНазначенияБПКлиентСервер.СкопироватьЭлементы(Отчет.КомпоновщикНастроек.Настройки.Отбор,				НастройкиРасшифровки.Отбор);
	ОбщегоНазначенияБПКлиентСервер.СкопироватьЭлементы(Отчет.КомпоновщикНастроек.Настройки.УсловноеОформление,	НастройкиРасшифровки.УсловноеОформление);
	ОбщегоНазначенияБПКлиентСервер.СкопироватьЭлементы(Отчет.КомпоновщикНастроек.Настройки.Порядок,				НастройкиРасшифровки.Порядок, Ложь);
	
	Отчет.КомпоновщикНастроек.Восстановить();
	
	БухгалтерскиеОтчетыКлиентСервер.УдалитьНеиспользуемыйОтбор(Отчет.КомпоновщикНастроек);
	
	// Установка значений реквизитов отчета и формы
	Для Каждого ЭлементСтруктуры Из НастройкиРасшифровки Цикл
		Если Отчет.Свойство(ЭлементСтруктуры.Ключ) Тогда
			Если ТипЗнч(ЭлементСтруктуры.Значение) <> Тип("Массив") Тогда
				Отчет[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
			КонецЕсли;
		ИначеЕсли РеквизитыФормы.Свойство(ЭлементСтруктуры.Ключ) Тогда
			Форма[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если Отчет.Свойство("Группировка") Тогда
		
		Для Каждого СтрокаГруппировки Из НастройкиРасшифровки.ТаблицаГруппировка Цикл
			
			НоваяСтрока = Отчет.Группировка.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаГруппировки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Отчет.Свойство("ДополнительныеПоля") Тогда
		
		Для Каждого СтрокаДополнительныеПоля Из НастройкиРасшифровки.ТаблицаДополнительныеПоля Цикл
			
			НоваяСтрока = Отчет.ДополнительныеПоля.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДополнительныеПоля);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если БухгалтерскиеОтчетыКлиентСервер.ОтчетПоддерживаетУниверсальныеНастройки(ИмяОтчета) Тогда
		
		Форма.ИзменениеСхемыКомпоновкиДанныхНаСервере();
		
		НастройкиКоторыеНужноЗаполнитьПоУмолчанию = БухгалтерскиеОтчетыКлиентСервер.РазделыНастроекСтандартногоОтчета();
		
		НастройкиКоторыеНужноЗаполнитьПоУмолчанию.Вставить("Группировка", 			НастройкиРасшифровки.ТаблицаГруппировка.Количество() = 0);
		НастройкиКоторыеНужноЗаполнитьПоУмолчанию.Вставить("ДополнительныеПоля",	НастройкиРасшифровки.ТаблицаДополнительныеПоля.Количество() = 0);
		НастройкиКоторыеНужноЗаполнитьПоУмолчанию.Вставить("УсловноеОформление",	Отчет.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Количество() > 0);
		
		Форма.ЗаполнитьНастройкамиПоУмолчанию(НастройкиКоторыеНужноЗаполнитьПоУмолчанию);
		
	КонецЕсли;

	Форма.СформироватьОтчетНаСервере();
	
КонецПроцедуры

Функция ПолучитьНастройкиДляРасшифровки(ИДРасшифровки, ИдентификаторОбъекта, МассивПолей, ОтчетОбъект, УстановитьВсеПоказатели)
	
	ЕстьКорЗначение = Ложь;
	ЕстьСчет        = Истина;
	ПервыйЭлемент   = Неопределено;
	Счет            = Неопределено;
	КорСчет         = Неопределено;
	Период          = Неопределено;
	БухТипРесурса   = Неопределено;
	Периодичность   = Неопределено;
	Если ИдентификаторОбъекта = "ГлавнаяКнига" Тогда
		УстановитьВсеПоказатели = Ложь;
		Показатель = "БУ";
		Для Каждого ЭлементСписка Из МассивПолей Цикл
			Для Каждого ЭлементСоответствия Из ЭлементСписка.Значение Цикл
				Если ЭлементСоответствия.Ключ = "Счет" Тогда
					Счет = ЭлементСоответствия.Значение;
					ЕстьСчет = Истина;
				ИначеЕсли ЭлементСоответствия.Ключ = "КорСчет" Тогда
					КорСчет = ЭлементСоответствия.Значение;
					ЕстьКорЗначение = Истина;
				ИначеЕсли ЭлементСоответствия.Ключ = "Отбор" Тогда
					Для Каждого ЭлементОтбора Из ЭлементСоответствия.Значение Цикл
						Если ЭлементОтбора.Ключ = "Период" Тогда
							Период = ЭлементОтбора.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		Для Каждого Элемент Из МассивПолей Цикл
			Если ТипЗнч(Элемент) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
				Если ПервыйЭлемент = Неопределено И Элемент.Поле <> "Показатель" Тогда 
					ПервыйЭлемент = Элемент;
				КонецЕсли;
				Если СтрНайти(Элемент.Поле, "Кор") = 1 Тогда
					ЕстьКорЗначение = Истина;
				КонецЕсли;
				Если Элемент.Поле = "КорСчет" Тогда
					КорСчет = Элемент.Значение;
				КонецЕсли;
				Если Элемент.Поле = "Счет" Тогда
					Счет = Элемент.Значение;
				КонецЕсли;
				Если Элемент.Поле = "Период" Тогда
					Период = Элемент.Значение;
				КонецЕсли;
				Если Элемент.Поле = "БухТипРесурса" Тогда
					БухТипРесурса = Элемент.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ДобавитьОтборПоВидСубконто    = Истина;
	ДобавитьОтборПоВидКорСубконто = Истина;
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	
	// Передадим параметры заголовка и подвала.
	ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", Ложь);
	ДополнительныеСвойства.Вставить("ВыводитьЕдиницуИзмерения", Ложь);
	ДополнительныеСвойства.Вставить("ВыводитьПодвал", Ложь);
	ЗаполнитьЗначенияСвойств(ДополнительныеСвойства, ОтчетОбъект);
	
	ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";
	
	Если ИДРасшифровки = "КарточкаСубконто" Тогда
		ДополнительныеСвойства.Вставить("СписокВидовСубконто", ОтчетОбъект.СписокВидовСубконто.Скопировать());
	ИначеЕсли ИДРасшифровки = "ОборотыСчетаПоДням" Тогда
		ДополнительныеСвойства.Вставить("Периодичность", 6);
	ИначеЕсли ИДРасшифровки = "ОборотыСчетаПоМесяцам" Тогда
		ДополнительныеСвойства.Вставить("Периодичность", 9);
	КонецЕсли;
	
	Если ИДРасшифровки = "КарточкаСубконто"
		Или ИДРасшифровки = "ОтчетПоПроводкам" Тогда
		ЕстьСчет = Ложь;
	Иначе
		
		Если Счет = Неопределено И ИДРасшифровки = "КарточкаСчета" И ОтчетОбъект.Свойство("Счет") Тогда 
			Счет = ОтчетОбъект.Счет; 
		КонецЕсли;
		
		ДополнительныеСвойства.Вставить("Счет", Счет);
	КонецЕсли;
	
	Если ИдентификаторОбъекта = "ГлавнаяКнига" Тогда
		ДополнительныеСвойства.Вставить("Организация", ОтчетОбъект.Организация);
		Если ИДРасшифровки = "ОборотыСчета" Тогда
			ДополнительныеСвойства.Вставить("Счет", Счет);
			Если ЕстьКорЗначение Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "КорСчет", КорСчет, ВидСравненияКомпоновкиДанных.ВИерархии);	
			КонецЕсли;
		ИначеЕсли ИДРасшифровки = "ОтчетПоПроводкам" Тогда
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СчетДт", Счет, ВидСравненияКомпоновкиДанных.ВИерархии);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СчетКт", КорСчет, ВидСравненияКомпоновкиДанных.ВИерархии);
		КонецЕсли;
	Иначе 
		СписокПолейОтборов = Новый Массив;
		Для каждого Отбор Из МассивПолей Цикл
			Если ТипЗнч(Отбор) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
				
				ЗначениеОтбора 	= Отбор.Значение;
				
				Если ЗначениеОтбора = NULL Тогда
					Продолжить;
				КонецЕсли;

				ПолеОтбора 		= Отбор.Поле;
				Если Отбор.Поле = "БухТипРесурса" Тогда  // БухТипРесурса не обрабатываем и не переносим в расшифровывающий отчет.
					
					Продолжить;
					
				ИначеЕсли ПолеОтбора = "Счет" И (ИдентификаторОбъекта = "АнализСчета" Или ИдентификаторОбъекта = "ОборотыСчета") Тогда
					ЗначениеСчет = ?(Счет.Уровень() > ОтчетОбъект.Счет.Уровень(), Счет, ОтчетОбъект.Счет); 
					ДополнительныеСвойства.Вставить("Счет", ЗначениеСчет);
					Если ЕстьСчет И ЗначениеЗаполнено(БухТипРесурса) ИЛИ Не ЕстьСчет Тогда
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора + БухТипРесурса, ЗначениеСчет, ВидСравненияКомпоновкиДанных.ВИерархии);
					КонецЕсли;
				ИначеЕсли Отбор.Поле = "Счет" И ЕстьСчет Тогда	// Счет задан в дополнительных свойствах, в отбор его добавлять не нужно.
					
					Продолжить;
	
				ИначеЕсли СтрНайти(ПолеОтбора, "Субконто") = 1 И (ИдентификаторОбъекта = "АнализСчета" ИЛИ ИдентификаторОбъекта = "ОборотыСчета") Тогда
					
					// Субконто нужно преобразовать в СубконтоДт или СубконтоКт.
					ПолеСубконто = СтрЗаменить(ПолеОтбора, "Субконто", "Субконто" + БухТипРесурса);
					
					// Отбором может быть не только само субконто, но и его реквизиты.
					// Определим ВидСравнения.
					Если ТипЗнч(ЗначениеОтбора) = Тип("Строка") Тогда
						// Для строки подходит только Содержит.
						ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Содержит;
					Иначе
						// Для иерархии берем ВИерархии, в остальных случаях Равно.
						ВидСравненияОтбора = ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно);
					КонецЕсли;
					
					// Устанавливаем отбор.
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеСубконто, ЗначениеОтбора, ВидСравненияОтбора);
											
				ИначеЕсли (ПолеОтбора = "Счет" Или ПолеОтбора = "КорСчет") И Не ЕстьСчет Тогда
					Если ПолеОтбора = "КорСчет" И Не ПустаяСтрока(БухТипРесурса) Тогда      
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Счет" + ?(БухТипРесурса = "Дт", "Кт", "Дт"), ЗначениеОтбора, ВидСравненияКомпоновкиДанных.ВИерархии);	
					Иначе
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора, ЗначениеОтбора, ВидСравненияКомпоновкиДанных.ВИерархии);		
					КонецЕсли;
				ИначеЕсли СтрНайти(ПолеОтбора, "Субконто") = 1 Тогда
					Если ИдентификаторОбъекта = "ОборотыМеждуСубконто" Тогда
						Если Счет <> Неопределено Тогда 
							// Порядок субконто в отчете и у счета может быть разным.
							// Расшифровывающий отчет использует порядок счета, поэтому имя поля отбора для него будет другим.
							// Определим текущий номер субконто.
							ИндексСубконто = Сред(ПолеОтбора, 9, 1);
							
							// Если у счета есть нужное субконто то добавим отбор.
							СтрокаСубконтоСчета = Счет.ВидыСубконто.Найти(ОтчетОбъект.СписокВидовСубконто[Число(ИндексСубконто) - 1].Значение, "ВидСубконто");
							Если СтрокаСубконтоСчета <> Неопределено Тогда
								
								// Определим номер этого субконто у счета.
								ИндексСубконтоОтчет = СтрокаСубконтоСчета.НомерСтроки;
								
								// Составим новое имя поля
								ПолеСубконто = СтрЗаменить(ПолеОтбора, "Субконто" + ИндексСубконто, "Субконто" + ИндексСубконтоОтчет);
								
								// Отбором может быть не только само субконто, но и его реквизиты.
								// Определим ВидСравнения.
								Если ТипЗнч(ЗначениеОтбора) = Тип("Строка") Тогда
									// Для строки подходит только Содержит.
									ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Содержит;
								Иначе
									// Для иерархии берем ВИерархии, в остальных случаях Равно.
									ВидСравненияОтбора = ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно);
								КонецЕсли;
								
								// Добавляем отбор
								БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеСубконто, ЗначениеОтбора, ВидСравненияОтбора);
							КонецЕсли;
							
						Иначе
							
							// Если счет не задан то устанавливаем отбор по субконто как есть и дополнительно устанавливаем отбор по виду субконто.
							
							// Отбором может быть не только само субконто, но и его реквизиты.
							// Определим ВидСравнения.
							Если ТипЗнч(ЗначениеОтбора) = Тип("Строка") Тогда
								// Для строки подходит только Содержит.
								ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Содержит;
							Иначе
								// Для иерархии берем ВИерархии, в остальных случаях Равно.
								ВидСравненияОтбора = ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно);
							КонецЕсли;
							
							// Устанавливаем отбор по Субконто или его реквизиту.
							БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора, ЗначениеОтбора, ВидСравненияОтбора);
							
							// Определим текущий номер субконто.
							ИндексСубконто = Число(Сред(ПолеОтбора, 9));
							
							// Составим имя поля отбора по виду субконто.
							ПолеВидСубконто = "ВидСубконто" + ИндексСубконто;
							
							// Устанавливаем отбор по виду субконто.
							БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеВидСубконто, ОтчетОбъект.СписокВидовСубконто[ИндексСубконто - 1].Значение);
							
						КонецЕсли;
						ДобавитьОтборПоВидСубконто = Ложь;
						
					ИначеЕсли ИдентификаторОбъекта = "АнализСубконто" И ИДРасшифровки = "КарточкаСчета" Тогда
						
						// Порядок субконто в отчете и у счета может быть разным.
						// Расшифровывающий отчет использует порядок счета, поэтому имя поля отбора для него будет другим.
						// Определим текущий номер субконто.
						ИндексСубконто = Сред(ПолеОтбора, 9, 1);
						
						// Если у счета есть нужное субконто то добавим отбор.
						СтрокаСубконтоСчета = Счет.ВидыСубконто.Найти(ОтчетОбъект.СписокВидовСубконто[Число(ИндексСубконто) - 1].Значение, "ВидСубконто");
						Если СтрокаСубконтоСчета <> Неопределено Тогда
							
							// Определим номер этого субконто у счета.
							ИндексСубконтоОтчет = СтрокаСубконтоСчета.НомерСтроки;
							
							// Составим новое имя поля
							ПолеСубконто = СтрЗаменить(ПолеОтбора, "Субконто" + ИндексСубконто, "Субконто" + ИндексСубконтоОтчет);
							
							// Отбором может быть не только само субконто, но и его реквизиты.
							// Определим ВидСравнения.
							Если ТипЗнч(ЗначениеОтбора) = Тип("Строка") Тогда
								// Для строки подходит только Содержит.
								ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Содержит;
							Иначе
								// Для иерархии берем ВИерархии, в остальных случаях Равно.
								ВидСравненияОтбора = ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно);
							КонецЕсли;
							
							// Добавляем отбор.
							БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеСубконто, ЗначениеОтбора, ВидСравненияОтбора);
							
						КонецЕсли;
						
					ИначеЕсли ИдентификаторОбъекта = "АнализСубконто" И ИДРасшифровки = "КарточкаСубконто" Тогда
						
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора, ЗначениеОтбора, ВидСравненияОтбора);
						
					ИначеЕсли ИдентификаторОбъекта = "ОборотноСальдоваяВедомость" Тогда
						
						СвойстваИсходногоСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
						
						ВидСравненияОтбора = Неопределено;
						ТипЗначенияОтбора = ТипЗнч(ЗначениеОтбора);
						// Если это строка то нужно поставить условие "Содержит".
						Если ТипЗначенияОтбора = Тип("Строка") Тогда  
						 	ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Содержит;
							
						// Если это группа справочника то нужно поставить условие "ВГруппе".
						ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗначенияОтбора) И ОбъектЯвляетсяГруппой(ЗначениеОтбора) Тогда
							ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВИерархии;
						КонецЕсли;
						
						Для НомерСубконто = 1 По СвойстваИсходногоСчета.КоличествоСубконто Цикл
							
							Если СвойстваИсходногоСчета["ВидСубконто" + НомерСубконто + "ТипЗначения"].СодержитТип(ТипЗначенияОтбора) Тогда
								
								БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Субконто" + НомерСубконто, ЗначениеОтбора, ВидСравненияОтбора);
								
							КонецЕсли;
							
						КонецЦикла;
						
					Иначе
						ВидСравненияОтбора = Неопределено;
						ТипЗначенияОтбора = ТипЗнч(ЗначениеОтбора);
						// Если это строка то нужно поставить условие "Содержит".
						Если ТипЗначенияОтбора = Тип("Строка") Тогда  
						 	ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Содержит;
							
						// Если это группа справочника то нужно поставить условие "ВГруппе".
						ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗначенияОтбора) И ОбъектЯвляетсяГруппой(ЗначениеОтбора) Тогда
							ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВИерархии;	
						КонецЕсли;
						
						СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
						
						СвойстваИсходногоСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ОтчетОбъект.Счет);
						
						ОтборУстановлен = Ложь;
						ИмяПоляСубконто = "Субконто" + Сред(Отбор.Поле, 9, 1);
						ВидСубконтоОтбора = СвойстваИсходногоСчета["Вид" + ИмяПоляСубконто];
						Для ИндексСубконто = 1 По БухгалтерскийУчетСервер.МаксимальноеКоличествоСубконто() Цикл
							Если СвойстваСчета["ВидСубконто" + ИндексСубконто] = ВидСубконтоОтбора Тогда
								// Устанавливаем отбор.
								НовоеПолеОтбора = СтрЗаменить(Отбор.Поле, ИмяПоляСубконто, "Субконто" + ИндексСубконто);
								БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, НовоеПолеОтбора, ЗначениеОтбора, ВидСравненияОтбора);
								ОтборУстановлен = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						
						Если НЕ ОтборУстановлен Тогда
							// Поиск по типу.
							Для НомерСубконто = 1 По СвойстваСчета.КоличествоСубконто Цикл
								
								Если СвойстваСчета["ВидСубконто" + НомерСубконто + "ТипЗначения"].СодержитТип(ТипЗначенияОтбора) Тогда
									НовоеПолеОтбора = СтрЗаменить(Отбор.Поле, ИмяПоляСубконто, "Субконто" + НомерСубконто);
									БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, НовоеПолеОтбора, ЗначениеОтбора, ВидСравненияОтбора);
									Прервать;
								КонецЕсли;
								
							КонецЦикла;
						КонецЕсли;
						
						
					КонецЕсли;
					СписокПолейОтборов.Добавить(ПолеОтбора);
				ИначеЕсли СтрНайти(ПолеОтбора, "КорСубконто") = 1 Тогда
					Если ИдентификаторОбъекта = "ОборотыМеждуСубконто" Тогда
						Если КорСчет <> Неопределено Тогда
							// Порядок КорСубконто, как и субконто, в отчете и у счета может быть разным.
							// Расшифровывающий отчет использует порядок счета, поэтому имя поля отбора для него будет другим.
							
							// Определим текущий номер КорСубконто.
							ИндексКорСубконто = Сред(ПолеОтбора, 12, 1);
							
							// Если у КорСчета есть нужное субконто, то добавим отбор.
							СтрокаСубконтоКорСчета = КорСчет.ВидыСубконто.Найти(ОтчетОбъект.СписокВидовКорСубконто[Число(ИндексКорСубконто) - 1].Значение, "ВидСубконто");
							Если СтрокаСубконтоКорСчета <> Неопределено Тогда
								
								// Определим номер этого субконто у КорСчета.
								ИндексСубконтоКорСчета = СтрокаСубконтоКорСчета.НомерСтроки;
								
								// Составим новое имя поля
								ПолеКорСубконто = СтрЗаменить(ПолеОтбора, "КорСубконто" + ИндексКорСубконто, "КорСубконто" + ИндексСубконтоКорСчета);
								
								// Отбором может быть не только само КорСубконто но и его реквизиты.
								// Определим ВидСравнения.
								Если ТипЗнч(ЗначениеОтбора) = Тип("Строка") Тогда
									// Для строки подходит только Содержит.
									ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Содержит;
								Иначе
									// Для иерархии берем ВИерархии, в остальных случаях Равно.
									ВидСравненияОтбора = ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно);
								КонецЕсли;
								
								// Устанавливаем отбор.
								БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеКорСубконто, ЗначениеОтбора, ВидСравненияОтбора);	
							КонецЕсли;
							
						Иначе
							
							// Если КорСчет не задан, то устанавливаем отбор по КорСубконто как есть и дополнительно устанавливаем отбор по виду КорСубконто.
							
							// Отбором может быть не только само КорСубконто но и его реквизиты.
							// Определим ВидСравнения.
							Если ТипЗнч(ЗначениеОтбора) = Тип("Строка") Тогда
								// Для строки подходит только Содержит.
								ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Содержит;
							Иначе
								// Для иерархии берем ВИерархии, в остальных случаях Равно.
								ВидСравненияОтбора = ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно);
							КонецЕсли;
							
							// Устанавливаем отбор по КорСубконто или его реквизиту.
							БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора, ЗначениеОтбора, ВидСравненияОтбора);
							
							// Определим текущий номер КорСубконто.
							ИндексКорСубконто = Число(Сред(ПолеОтбора, 12));
							
							// Составим имя поля отбора по виду субконто.
							ПолеВидСубконто = "ВидКорСубконто" + ИндексКорСубконто;
							
							// Устанавливаем отбор по виду субконто.
							БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеВидСубконто, ОтчетОбъект.СписокВидовСубконто[ИндексКорСубконто - 1].Значение);
							
						КонецЕсли;
						
						ДобавитьОтборПоВидКорСубконто = Ложь;
						
					ИначеЕсли ИДРасшифровки = "ОтчетПоПроводкам" Тогда
						
						// Определим ВидСравнения.
						Если ТипЗнч(ЗначениеОтбора) = Тип("Строка") Тогда
							// Для строки подходит только Содержит.
							ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Содержит;
						Иначе
							// Для иерархии берем ВИерархии, в остальных случаях Равно.
							ВидСравненияОтбора = ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно);
						КонецЕсли;
						
						// Добавляем отбор.
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора, ЗначениеОтбора, ВидСравненияОтбора);
					КонецЕсли;
					
				ИначеЕсли ПолеОтбора = "Организация" Тогда
					ДополнительныеСвойства.Вставить("Организация", ЗначениеОтбора);
				ИначеЕсли ПолеОтбора = "Показатель" Тогда 
					Показатель = ЗначениеОтбора;
				ИначеЕсли ПолеОтбора = "Период" Или ПолеОтбора = "Регистратор" Тогда 
				Иначе
					Если Отбор.Иерархия Тогда
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора, ЗначениеОтбора, ВидСравненияКомпоновкиДанных.ВИерархии);
					Иначе
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора, ЗначениеОтбора);
					КонецЕсли;
				КонецЕсли;	
			ИначеЕсли ТипЗнч(Отбор) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если Отбор.Представление = "###ОтборПоОрганизацииСОП###" Тогда
					Для Каждого ЭлементОтбора Из Отбор.Элементы Цикл
						Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
							ДополнительныеСвойства.Вставить("Организация"                      , ЭлементОтбора.ПравоеЗначение);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			ИначеЕсли ТипЗнч(Отбор) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				
				ПолеОтбора 		= Отбор.ЛевоеЗначение;
				ЗначениеОтбора 	= Отбор.ПравоеЗначение;
				
				Если СписокПолейОтборов.Найти(Строка(Отбор.ЛевоеЗначение)) = Неопределено Тогда
					Если СтрНайти(Отбор.ЛевоеЗначение, "Субконто") = 1 И ИдентификаторОбъекта = "АнализСубконто" И ИДРасшифровки = "КарточкаСчета" Тогда
						ИндексСубконто = Сред(ПолеОтбора, 9, 1); 
						НайденнаяСтрока = Счет.ВидыСубконто.Найти(ОтчетОбъект.СписокВидовСубконто[Число(ИндексСубконто) - 1].Значение, "ВидСубконто");
						Если НайденнаяСтрока <> Неопределено Тогда
							ИндексСубконтоОтчет = НайденнаяСтрока.НомерСтроки;
							БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, СтрЗаменить(Строка(ПолеОтбора), "Субконто" + ИндексСубконто, "Субконто" + ИндексСубконтоОтчет), ЗначениеОтбора, Отбор.ВидСравнения);
						КонецЕсли;
					ИначеЕсли Отбор.Представление = "###ОтборПоОрганизации###" Тогда
						ДополнительныеСвойства.Вставить("Организация"                      , ЗначениеОтбора);
					ИначеЕсли ПолеОтбора = Новый ПолеКомпоновкиДанных("Счет")
						И (ИДРасшифровки = "КарточкаСубконто" 
							ИЛИ ИДРасшифровки = "АнализСубконто" 
							ИЛИ ИДРасшифровки = "ОборотыМеждуСубконто") Тогда
							БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора, ЗначениеОтбора, Отбор.ВидСравнения);
					КонецЕсли;
					
					// Транслируем отбор в расшифровочный отчет, только при определенных условиях.
					Если Отбор.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный		// Это не недоступный отбор.
						И СтрНайти(Отбор.Представление, "###ОтборПоОрганизации###") = 0									// Это не отбор по организации.
						И НЕ (СтрНайти("АнализСубконто, ОборотыМеждуСубконто, КарточкаСубконто", ИдентификаторОбъекта) > 0	// Это не отбор по реквизитам счета или счету в Анализе, Карточке или оборотах между субконто.
							И СтрНайти(ПолеОтбора, "Счет") > 0)Тогда
							БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора, ЗначениеОтбора, Отбор.ВидСравнения);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ИдентификаторОбъекта = "ОборотыМеждуСубконто" Тогда
			Если ДобавитьОтборПоВидСубконто Тогда
				Индекс = 1;
				Для Каждого ВидСубконто Из ОтчетОбъект.СписокВидовСубконто Цикл
					Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "ВидСубконто" + Индекс, ВидСубконто.Значение);
						Индекс = Индекс + 1;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ДобавитьОтборПоВидКорСубконто Тогда
				Индекс = 1;
				Для Каждого ВидСубконто Из ОтчетОбъект.СписокВидовКорСубконто Цикл
					Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "ВидКорСубконто" + Индекс, ВидСубконто.Значение);
						Индекс = Индекс + 1;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Период <> Неопределено Тогда
		ДополнительныеСвойства.Вставить("НачалоПериода", Период);
		ДополнительныеСвойства.Вставить("КонецПериода" , БухгалтерскиеОтчетыКлиентСервер.КонецПериода(Период, ?(Периодичность = Неопределено, ОтчетОбъект.Периодичность, Периодичность)));
	Иначе
		ДополнительныеСвойства.Вставить("НачалоПериода", ОтчетОбъект.НачалоПериода);
		ДополнительныеСвойства.Вставить("КонецПериода" , ОтчетОбъект.КонецПериода);
	КонецЕсли;
	
	// Настройка показателей.
	Если УстановитьВсеПоказатели Тогда
		Для Каждого ИмяПоказателя Из ОтчетОбъект.НаборПоказателей Цикл
			ДополнительныеСвойства.Вставить("Показатель" + ИмяПоказателя , ОтчетОбъект["Показатель" + ИмяПоказателя]);
		КонецЦикла;
		Если ОтчетОбъект.НаборПоказателей.Найти("Количество") = Неопределено Тогда
			Если ЕстьСчет И ЗначениеЗаполнено(Счет) И Счет.Количественный Тогда
				ДополнительныеСвойства.Вставить("ПоказательКоличество", Истина);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ДополнительныеСвойства.Вставить("Показатель" + Показатель , Истина);
	КонецЕсли;
	
	Если ИдентификаторОбъекта = "ОборотноСальдоваяВедомость" Тогда
		ДополнительныеСвойства.Вставить("ПоСубсчетам", Истина);
	КонецЕсли;
		
	Возврат ПользовательскиеНастройки;
	
КонецФункции

Функция РеквизитыФормы(Форма)
	
	РеквизитыФормы = Новый Структура();
	
	Для Каждого Реквизит Из Форма.ПолучитьРеквизиты() Цикл
		
		РеквизитыФормы.Вставить(Реквизит.Имя);
		
	КонецЦикла;
	
	Возврат РеквизитыФормы;
	
КонецФункции

Функция ЕстьЭлементФормы(Форма, ИмяЭлемента)
	
	Возврат Форма.Элементы.Найти(ИмяЭлемента) <> Неопределено;
	
КонецФункции

Процедура ЗаполнитьГруппировкиИзНастроек(КомпоновщикНастроек, Структура, Группировка)
	
	Если ТипЗнч(Структура) = Тип("ГруппировкаКомпоновкиДанных")
		И Структура.ПоляГруппировки.Элементы.Количество() > 0 Тогда
		Поле = Строка(Структура.ПоляГруппировки.Элементы[0].Поле);
		
		НоваяСтрока = Группировка.Добавить();
		
		НоваяСтрока.Использование  = Структура.Использование;
		НоваяСтрока.Поле           = Поле;
		НоваяСтрока.Представление  = БухгалтерскиеОтчетыКлиентСервер.ПолучитьСвойствоПоля(КомпоновщикНастроек, НоваяСтрока.Поле);
		Если Не ЗначениеЗаполнено(НоваяСтрока.Представление) Тогда
			НоваяСтрока.Представление = Поле;
		КонецЕсли;
		
		ТипГруппировки = Структура.ПоляГруппировки.Элементы[0].ТипГруппировки;
		Если ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия Тогда
			НоваяСтрока.ТипГруппировки = 1;
		ИначеЕсли ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия Тогда
			НоваяСтрока.ТипГруппировки = 2;
		Иначе
			НоваяСтрока.ТипГруппировки = 0;
		КонецЕсли;
		
		Если Структура.Структура.Количество() > 0 Тогда
			ЗаполнитьГруппировкиИзНастроек(КомпоновщикНастроек, Структура.Структура[0], Группировка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОрганизацию(Форма)
	
	// Определяем основную организацию
	ОсновнаяОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
	Если Справочники.Организации.ИспользуетсяНесколькоОрганизаций() Тогда
		// Если основная организация задана и это не та организация с которой хочет открыться отчет
		// подставляем основную организацию, и устанавливаем настройки по умолчанию.
		Если ЗначениеЗаполнено(ОсновнаяОрганизация) И ОсновнаяОрганизация <> Форма.Отчет.Организация Тогда
			Форма.Отчет.Организация = ОсновнаяОрганизация;
			РеквизитыФормы = РеквизитыФормы(Форма);
			Если РеквизитыФормы.Свойство("ОрганизацияИзменилась") Тогда
				Форма.ОрганизацияИзменилась = Истина;
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		Форма.Отчет.Организация = ОсновнаяОрганизация;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет является ли объект группой элементов.
//
// Параметры:
//  Объект       - Объект, Ссылка, Неопределено, ДанныеФормыСтруктура по типу Объект.
//
// Возвращаемое значение:
//  Булево.
//
Функция ОбъектЯвляетсяГруппой(Объект)
	
	Если Объект <> Неопределено Тогда 
		
		Результат = ОбщегоНазначения.ОбъектЯвляетсяГруппой(Объект);
		
		Если ТипЗнч(Результат) = Тип("Булево") Тогда
			
			Возврат Результат;	
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции

Процедура ДобавитьРодителей(ЭлементРасшифровки, ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы = Ложь)
	
	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Для каждого Поле Из ЭлементРасшифровки.ПолучитьПоля() Цикл
			ДоступноеПоле = ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(Новый ПолеКомпоновкиДанных(Поле.Поле), ТекущийОтчет);
			Если ДоступноеПоле = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если Не ВключатьРесурсы И ДоступноеПоле.Ресурс Тогда
				Продолжить;
			КонецЕсли;
			МассивПолейРасшифровки.Добавить(Поле);
		КонецЦикла;
	КонецЕсли;
	Для каждого Родитель Из ЭлементРасшифровки.ПолучитьРодителей() Цикл
		ДобавитьРодителей(Родитель, ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьОписаниеПросроченнойЗадолженности(СрокОплаты)
	
	Если СрокОплаты = 0 Тогда
		Описание = НСтр("ru='Просроченной считается любая задолженность, если срок оплаты не установлен в договоре.
		|Установить срок оплаты задолженности по умолчанию можно в меню'");
	Иначе
		ПредставлениеСрокаОплаты = Формат(СрокОплаты, "ЧДЦ=") + НСтр("ru=' дн.'");
	    Описание = НСтр("ru='Просроченной считается задолженность, не оплаченная в течение %1,
		|если в договоре не установлен другой срок оплаты.
		|Изменить значение по умолчанию можно в меню'");
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, ПредставлениеСрокаОплаты);
	КонецЕсли;
	
	Возврат Описание;
	
КонецФункции

// Формирует представление для списка активных отборов в отчете.
//
// Параметры:
//  ПараметрыОтчета - Структура - может содержать свойство "Подразделение".
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - источник отборов.
//
// Возвращаемое значение:
//   Строка      - представление отборов.
//
Функция ОписаниеОтборовОтчета(ПараметрыОтчета, КомпоновщикНастроек)
	
	Если ПараметрыОтчета.Свойство("ИдентификаторОтчета") И ПараметрыОтчета.ИдентификаторОтчета = "РеестрДокументов" Тогда
		ТекстОтбор = Отчеты.РеестрДокументов.ПолучитьТекстОтбора(КомпоновщикНастроек.Настройки.Отбор);
	ИначеЕсли ПараметрыОтчета.Свойство("ИдентификаторОтчета") И ПараметрыОтчета.ИдентификаторОтчета = "РасчетнаяВедомость" Тогда
		ТекстОтбор = Отчеты.РасчетнаяВедомость.ПолучитьТекстОтбора(КомпоновщикНастроек.Настройки.Отбор);
	ИначеЕсли ПараметрыОтчета.Свойство("ИдентификаторОтчета") И ПараметрыОтчета.ИдентификаторОтчета = "РасчетнаяВедомостьДетальный" Тогда
		ТекстОтбор = Отчеты.РасчетнаяВедомость.ПолучитьТекстОтбора(КомпоновщикНастроек.Настройки.Отбор);
	Иначе
		ТекстОтбор = Строка(КомпоновщикНастроек.Настройки.Отбор);
	КонецЕсли;
	
	Возврат ТекстОтбор;
	
КонецФункции

// Заменяем текст "Субконто"[N] на представление вида субконто.
// 
// Параметры:
//  ФормаОтчета  - УправляемаяФорма - содержит реквизит Отчет.
//  ТекстОтбор   - Строка - текст, возможно содержащий отборы по Субконто1, Субконто2 и Субконто3.
//
Процедура ПодставитьИменаСубконто(ФормаОтчета, ТекстОтбор)
	
	ИмяПоляПрефикс = НСтр("ru = 'Субконто'");	
	Если СтрНайти(ТекстОтбор, ИмяПоляПрефикс) = 0
	 Или Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета.Отчет, "Счет") Тогда
		Возврат;
	КонецЕсли;
	ИмяПоляПриставка = НСтр("ru = 'Кор'");
	ДлинаПриставки = СтрДлина(ИмяПоляПриставка);
		
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ФормаОтчета.Отчет.Счет);
	ПозицияСубконто = СтрНайти(ТекстОтбор, ИмяПоляПрефикс, НаправлениеПоиска.СНачала, 1);
	Пока ПозицияСубконто <> 0 Цикл
		
		// Проверяем, что это не "КорСубконто".
		ПроверкаПройдена = Не (ПозицияСубконто > 3
				И Сред(ТекстОтбор, ПозицияСубконто - ДлинаПриставки, ДлинаПриставки) = ИмяПоляПриставка
			Или ПозицияСубконто > 5
				И Сред(ТекстОтбор, ПозицияСубконто - ДлинаПриставки + 2, ДлинаПриставки + 2) = (ИмяПоляПриставка + ". "));
		// Проверяем, что это не производное слово от "Субконто".
		КонтрольныйСимвол = Сред(ТекстОтбор, ПозицияСубконто + 9, 1);
		Если ПроверкаПройдена
		   И (КонтрольныйСимвол = " " Или КонтрольныйСимвол = ".") Тогда
			// Определяем номер субконто.
			КонтрольныйСимвол = Сред(ТекстОтбор, ПозицияСубконто + 8, 1);
			Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КонтрольныйСимвол)
			   И ЗначениеЗаполнено(СвойстваСчета["ВидСубконто" + КонтрольныйСимвол]) Тогда
				
				ПредставлениеВидаСубконто = СвойстваСчета["ВидСубконто" + КонтрольныйСимвол + "Наименование"];
				// Вместо СубконтоN подставляем его представление.
				ТекстОтбор = ?(ПозицияСубконто = 1, "", Лев(ТекстОтбор, ПозицияСубконто - 1))
					+ ПредставлениеВидаСубконто
					+ Сред(ТекстОтбор, ПозицияСубконто + 9);
				
			КонецЕсли;
		
		КонецЕсли;
		
		ПозицияСубконто = СтрНайти(ТекстОтбор, ИмяПоляПрефикс, НаправлениеПоиска.СНачала, ПозицияСубконто + 1);
		
	КонецЦикла;
		
КонецПроцедуры

// Возвращает фрагмент текста из строки, содержащийся между указанными строковыми маркерами.
//
// Параметры:
//	Текст - Строка - Исходный текст.
//	МаркерНачало - Строка - Маркер начала для выделения фрагмента.
//	МаркерКонец - Строка - Маркер окончания для выделения фрагмента.
//
// Возвращаемое значение:
//	Строка - Фрагмент текста между маркерами.
//
Функция ПолучитьТекстПоМаркерам(Текст, МаркерНачало, МаркерКонец) Экспорт
	
	ПозицияМаркерНачало = СтрНайти(Текст, МаркерНачало) + СтрДлина(МаркерНачало);
	ПозицияМаркерКонец  = СтрНайти(Текст, МаркерКонец);
	
	Возврат СокрЛП(Сред(Текст, ПозицияМаркерНачало, ПозицияМаркерКонец - ПозицияМаркерНачало - 1));
	
КонецФункции

// Возвращает строковый идентификатор отчета.
//
// Параметры:
//	ОтчетОбъект - ОтчетОбъект.* - Отчет, для которого требуется получить идентификатор.
//
// Возвращаемое значение:
//	Строка - Идентификатор отчета.
//
Функция ПолучитьИдентификаторОбъекта(ОтчетОбъект) Экспорт
	
	Возврат "ОтчетОбъект." + ОтчетОбъект.Метаданные().Имя;
	
КонецФункции

// Возвращает количество показателей, выводимых в отчет.
//
// Параметры:
//	ПараметрыОтчета - Структура - Содержит ключи вида "ПоказательБУ" и др.
//
// Возвращаемое значение:
//	Число - Количество включенных показателей в отчете.
//
Функция КоличествоПоказателей(ПараметрыОтчета) Экспорт 
	
	КоличествоПоказателей = 0;
	Для Каждого ИмяПоказателя Из ПараметрыОтчета.НаборПоказателей Цикл
		Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда
			КоличествоПоказателей = КоличествоПоказателей + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КоличествоПоказателей;
	
КонецФункции

// Создает и заполняет настройки для новой строки группировки СКД.
//
// Параметры:
//	ПолеВыбраннойГруппировки - Структура - Описание группировки, содержит ключи:
//		* Поле - Строка - Имя поля группировки.
//		* ТипГруппировки - Число - Задает тип группировки: 1 - Иерархия, 2 - Только иерархия, иначе - Элементы.
//	Группировка - ГруппировкаТаблицыКомпоновкиДанных - Группировка, в которой добавляется новая строка.
//
Процедура ЗаполнитьГруппировку(ПолеВыбраннойГруппировки, Группировка) Экспорт
	
	ПолеГруппировки = Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Использование  = Истина;
	ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
	Если ПолеВыбраннойГруппировки.ТипГруппировки = 1 Тогда
		ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
	ИначеЕсли ПолеВыбраннойГруппировки.ТипГруппировки = 2 Тогда
		ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
	Иначе
		ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
	КонецЕсли;
	Группировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	Группировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
КонецПроцедуры

// Добавляет в настройки СКД все поля группировки из табличной части отчета.
//
// Параметры:
//	ПараметрыОтчета - Структура - Содержит ключи:
//		* Группировка - ТабличнаяЧасть - Таблица Группировки отчета.
//		* ДобавлятьДетальныеЗаписи - Булево- Признак добавления группировки детальные записи в конце структуры (использовать не рекомендуется).
//	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек СКД.
//
Процедура ДобавитьГруппировки(ПараметрыОтчета, КомпоновщикНастроек) Экспорт
	
	Если ТипЗнч(КомпоновщикНастроек) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		СтруктураНастроек = КомпоновщикНастроек.Настройки.Структура;
	Иначе
		СтруктураНастроек = КомпоновщикНастроек;
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из СтруктураНастроек Цикл
		Группировка = ЭлементСтруктуры;
		Если Группировка.Имя = "Группировка" Тогда // Заполнить все поля группировки.
			
			Если ТипЗнч(Группировка) = Тип("ГруппировкаКомпоновкиДанных") Тогда
				Родитель = Группировка.Родитель;
				ПерваяГруппировка = Истина;
				Индекс = Родитель.Структура.Индекс(Группировка);
				Родитель.Структура.Удалить(Группировка);
				Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
					Если ПолеВыбраннойГруппировки.Использование Тогда
						Если ПерваяГруппировка Тогда
							Группировка = Родитель.Структура.Вставить(Индекс, Тип("ГруппировкаКомпоновкиДанных"));
							ПерваяГруппировка = Ложь;
						Иначе
							Группировка = Группировка.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
						КонецЕсли;
						
						ПолеГруппировки = Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
						ПолеГруппировки.Использование  = Истина;
						ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
						Если ПолеВыбраннойГруппировки.ТипГруппировки = 1 Тогда
							ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
						ИначеЕсли ПолеВыбраннойГруппировки.ТипГруппировки = 2 Тогда
							ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
						Иначе
							ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
						КонецЕсли;
						Если ПараметрыОтчета.Свойство("УстанавливатьНомерПоПорядку") Тогда 
							Если ПолеВыбраннойГруппировки.НомерПоПорядку Тогда 
								БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группировка.Выбор, "СистемныеПоля.НомерПоПорядку");
							КонецЕсли;	
						КонецЕсли;	
				
						Группировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
						Группировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));

					КонецЕсли;
				КонецЦикла;
				
				Если ПараметрыОтчета.Свойство("ДобавлятьДетальныеЗаписи")
					И ПараметрыОтчета.ДобавлятьДетальныеЗаписи
					И НЕ ПерваяГруппировка Тогда 
					Группировка = Группировка.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
					Группировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
					Группировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в настройки СКД все поля группировки из табличной части отчета.
//
// Параметры:
//	ПараметрыОтчета - Структура - Содержит ключи:
//		* Группировка - ТабличнаяЧасть - Таблица Группировки отчета.
//	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек СКД.
//
Процедура ДобавитьГруппировкиСтрокТаблицы(ПараметрыОтчета, КомпоновщикНастроек) Экспорт
	
	Если ТипЗнч(КомпоновщикНастроек) = Тип("КомпоновщикНастроекКомпоновкиДанных")
		И КомпоновщикНастроек.Настройки.Структура.Количество() > 0 Тогда
		СтруктураНастроек = КомпоновщикНастроек.Настройки.Структура[0].Строки;
	Иначе
		СтруктураНастроек = КомпоновщикНастроек;
	КонецЕсли;
	

	Для Каждого ЭлементСтруктуры Из СтруктураНастроек Цикл
		Группировка = ЭлементСтруктуры;
		Если Группировка.Имя = "Группировка" Тогда // Заполнить все поля группировки.
			
			Если ТипЗнч(Группировка) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
				Родитель = Группировка.Родитель;
				ПерваяГруппировка = Истина;
				Родитель.Строки.Удалить(Группировка);
				
				Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
					Если ПолеВыбраннойГруппировки.Использование Тогда
						Если ПерваяГруппировка Тогда
							Группировка = Родитель.Строки.Добавить();
							ПерваяГруппировка = Ложь;
						Иначе
							Группировка = Группировка.Структура.Добавить();
						КонецЕсли;
						
						ПолеГруппировки = Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
						ПолеГруппировки.Использование  = Истина;
						ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
						Если ПолеВыбраннойГруппировки.ТипГруппировки = 1 Тогда
							ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
						ИначеЕсли ПолеВыбраннойГруппировки.ТипГруппировки = 2 Тогда
							ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
						Иначе
							ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
						КонецЕсли;
						Группировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
						Группировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в настройки СКД все дополнительные поля из табличной части отчета.
//
// Параметры:
//	ПараметрыОтчета - Структура - Содержит ключи:
//		* ДополнительныеПоля - ТабличнаяЧасть - Таблица Группировки отчета.
//		* РазмещениеДополнительныхПолей - Число - Способ размещения дополнительных полей.
//			Если равно 0, то вместе с владельцем, если 1, то отдельно.
//	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек СКД.
//
Процедура ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек) Экспорт
	
	Если ПараметрыОтчета.РазмещениеДополнительныхПолей = 0 Тогда
		РасположениеРеквизитов = РасположениеРеквизитовКомпоновкиДанных.ВместеСВладельцем;
	ИначеЕсли ПараметрыОтчета.РазмещениеДополнительныхПолей = 1 Тогда
		РасположениеРеквизитов = РасположениеРеквизитовКомпоновкиДанных.Отдельно;
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(КомпоновщикНастроек, "РасположениеРеквизитов", РасположениеРеквизитов); 
	
	Для Каждого ПолеГруппировки Из ПараметрыОтчета.ДополнительныеПоля Цикл 
		Если ПолеГруппировки.Использование Тогда
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек, ПолеГруппировки.Поле);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Добавляет группировку по периоду в отчет.
//
// Параметры:
//	ПараметрыОтчета - Структура - Содержит ключи:
//		* Периодичность - Число - Определяет периодичность формирования отчета.
//	Структура - ГруппировкаКомпоновкиДанных, ГруппировкаТаблицыКомпоновкиДанных - Коллекция полей,
//		системы компоновки данных, в которую добавляется группировка периодичности.
//
Процедура ДобавитьГруппировкуПоПериоду(ПараметрыОтчета, Структура) Экспорт
	
	Если ПараметрыОтчета.Периодичность > 0 Тогда
		Если ТипЗнч(Структура) = Тип("ГруппировкаКомпоновкиДанных") Тогда 
			Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ИначеЕсли ТипЗнч(Структура) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			Структура = Структура.Структура.Добавить();
		КонецЕсли;
		ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование  = Истина;
		ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(?(ПараметрыОтчета.Периодичность = 2, "Регистратор", "Период"));		
		Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));	
		Если ПараметрыОтчета.Периодичность = 2 Тогда
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(Структура.Отбор, "Регистратор", 0, ВидСравненияКомпоновкиДанных.Заполнено);
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Структура, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Определяет перечень организаций, чтение данных которых, размещенных в конкретном объекте метаданных,
// разрешено пользователю настройками прав доступа.
//
// Функцию можно использовать, если требуется получать данные в привилегированном режиме для предоставления их
// пользователю - она позволяет ограничить эти данные в соответствии с настройками.
//
// Функцию можно использовать только в тех случаях (для тех объектов),
// когда применяется стандартное ограничение доступа к запрашиваемому объекту метаданных - 
// то есть, аналогичное ограничению, применяемому для регистру бухгалтерии Хозрасчетный
// роли ДобавлениеИзменениеДанныхБухгалтерии.
//
// Порядок использования:
//  1. с помощью функции определяется список доступных организаций
//  2. в текстах запросов к самим данных (регистрам, документам) 
//     устанавливаются отборы по этим организациям
//  3. перед выполнением запроса к данным включается привилегированный режим.
//
// При использовании функции следует иметь в виду, что в общем случае ограничить выбираемые данные
// в соответствии с ОДД по Организации недостаточно:
// 1. в прикладном решении могут использоваться и иные виды доступа, не только Организации
// 2. перед установкой привилегированного режима в вызывающем коде следует проверить наличие прав
//    на чтение запрашиваемой таблицы (регистра, документов) в целом.
//
// Не следует (запрещается) вызывать эту функцию из кода, который может выполняться в привилегированном режиме,
// так как это приведет к последующей неверной ее работе вне привилегированного режима:
// может повторно использоваться значение, вычисленное в привилегированном режиме.
//
// Возвращаемое значение:
//  ФиксированныйМассив - содержит СправочникСсылка.Организации
//
// См. также ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS()
//
// Параметры:
//  ИмяОбъектаДанных - Строка - полное имя объекта данных, доступ к которым проверяется, например, "РегистрБухгалтерии.Хозрасчетный"
//  ПравоНаИзменение - Булево - Истина, если после выполнения запроса данные предполагается менять
//               и нужно проверить, что у пользователя есть право на изменение
//  Пользователь     - СправочникСсылка.Пользователи - Ссылка на пользователя, для которого нужно получить список организаций.
//
Функция ОрганизацииДанныеКоторыхДоступныПользователю(ИмяОбъектаДанных, ПравоНаИзменение = Ложь, Пользователь = Неопределено)

	Запрос = Новый Запрос;
	
	Если Не УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей()
		Или (Пользователи.ЭтоПолноправныйПользователь(Пользователь , , Ложь) И ИмяОбъектаДанных <> Неопределено)
		Или (Пользователи.ЭтоПолноправныйПользователь(Неопределено, Ложь, Ложь) И ИмяОбъектаДанных = Неопределено) Тогда
		
		// Ограничений по RLS нет, возвращаем все организации из справочника
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации";
		
	ИначеЕсли ИмяОбъектаДанных <> Неопределено Тогда 
	
		// Запрос взят из шаблона #ПоЗначениям роли ДобавлениеИзменениеДанныхБухгалтерии
		// с теми параметрами, с которыми он применяется для регистра бухгалтерии Хозрасчетный.
		Запрос.УстановитьПараметр("Пользователь", ?(Пользователь = Неопределено, Пользователи.ТекущийПользователь(), Пользователь));
		Запрос.УстановитьПараметр("Изменение", ПравоНаИзменение);
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				Справочник.ИдентификаторыОбъектовМетаданных КАК СвойстваТекущейТаблицы
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа КАК ГруппыДоступа
		|					ПО
		|						СвойстваТекущейТаблицы.ПолноеИмя = &ИмяОбъектаДанных
		|							И ИСТИНА В
		|								(ВЫБРАТЬ ПЕРВЫЕ 1
		|									ИСТИНА
		|								ИЗ
		|									РегистрСведений.ТаблицыГруппДоступа КАК ТаблицыГруппДоступа
		|								ГДЕ
		|									ТаблицыГруппДоступа.Таблица = СвойстваТекущейТаблицы.Ссылка
		|									И ТаблицыГруппДоступа.ГруппаДоступа = ГруппыДоступа.Ссылка
		|									И ТаблицыГруппДоступа.Изменение = &Изменение)
		|							И ГруппыДоступа.Ссылка В
		|								(ВЫБРАТЬ
		|									ГруппыДоступаПользователи.Ссылка КАК ГруппаДоступа
		|								ИЗ
		|									Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|										ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|										ПО
		|											СоставыГруппПользователей.Пользователь = &Пользователь
		|												И СоставыГруппПользователей.ГруппаПользователей = ГруппыДоступаПользователи.Пользователь)
		|			ГДЕ
		|				ВЫБОР
		|					КОГДА ИСТИНА В
		|							(ВЫБРАТЬ ПЕРВЫЕ 1
		|								ИСТИНА
		|							ИЗ
		|								РегистрСведений.ЗначенияГруппДоступа КАК Значения
		|									ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ГруппыЗначений
		|									ПО
		|										Значения.ГруппаДоступа = ГруппыДоступа.Ссылка
		|											И Значения.ЗначениеДоступа = Организации.Ссылка
		|											И ГруппыЗначений.ЗначениеДоступа = ГруппыЗначений.ГруппаЗначенийДоступа)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ = ВЫБОР
		|					КОГДА ИСТИНА В
		|							(ВЫБРАТЬ ПЕРВЫЕ 1
		|								ИСТИНА
		|							ИЗ
		|								РегистрСведений.ЗначенияГруппДоступаПоУмолчанию КАК ЗначенияПоУмолчанию
		|							ГДЕ
		|								ЗначенияПоУмолчанию.ГруппаДоступа = ГруппыДоступа.Ссылка
		|								И ТИПЗНАЧЕНИЯ(ЗначенияПоУмолчанию.ТипЗначенийДоступа) = ТИПЗНАЧЕНИЯ(Организации.Ссылка)
		|								И ЗначенияПоУмолчанию.ВсеРазрешены = ЛОЖЬ)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ)";
		
		Запрос.Текст = ?(ПравоНаИзменение,
			ТекстЗапроса,
			СтрЗаменить(ТекстЗапроса, "И ТаблицыГруппДоступа.Изменение = &Изменение", ""));
			
		Запрос.УстановитьПараметр("ИмяОбъектаДанных", ИмяОбъектаДанных);
		
	ИначеЕсли ИмяОбъектаДанных = Неопределено Тогда	
		// Запрос взят из шаблона #ПоЗначениям роли ДобавлениеИзменениеДанныхБухгалтерии
		// с теми параметрами, с которыми он применяется для справочника Организации,
		// однако без обращения к ТаблицыГруппДоступа.
		//
		// Обращения к ТаблицыГруппДоступа и Справочник.ИдентификаторыОбъектовМетаданных в шаблоне нужны
		// для проверки права к конкретному объекту метаданных.
		// Такая проверка должна быть выполнена до выполнения этой функции.
		
		Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				Справочник.ГруппыДоступа КАК ГруппыДоступа
		|			ГДЕ
		|				ГруппыДоступа.Ссылка В
		|					(ВЫБРАТЬ
		|						ГруппыДоступаПользователи.Ссылка КАК ГруппаДоступа
		|					ИЗ
		|						Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|							ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|							ПО
		|								СоставыГруппПользователей.Пользователь = &Пользователь
		|									И СоставыГруппПользователей.ГруппаПользователей = ГруппыДоступаПользователи.Пользователь)
		|				И ВЫБОР
		|					КОГДА ИСТИНА В
		|							(ВЫБРАТЬ ПЕРВЫЕ 1
		|								ИСТИНА
		|							ИЗ
		|								РегистрСведений.ЗначенияГруппДоступа КАК Значения
		|									ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ГруппыЗначений
		|									ПО
		|										Значения.ГруппаДоступа = ГруппыДоступа.Ссылка
		|											И Значения.ЗначениеДоступа = Организации.Ссылка
		|											И ГруппыЗначений.ЗначениеДоступа = ГруппыЗначений.ГруппаЗначенийДоступа)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ = ВЫБОР
		|					КОГДА ИСТИНА В
		|							(ВЫБРАТЬ ПЕРВЫЕ 1
		|								ИСТИНА
		|							ИЗ
		|								РегистрСведений.ЗначенияГруппДоступаПоУмолчанию КАК ЗначенияПоУмолчанию
		|							ГДЕ
		|								ЗначенияПоУмолчанию.ГруппаДоступа = ГруппыДоступа.Ссылка
		|								И ТИПЗНАЧЕНИЯ(ЗначенияПоУмолчанию.ТипЗначенийДоступа) = ТИПЗНАЧЕНИЯ(Организации.Ссылка)
		|								И ЗначенияПоУмолчанию.ВсеРазрешены = ЛОЖЬ)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ)";
	КонецЕсли;
	
	// Доступ к настройкам RLS выполняется в привилегированном режиме.
	УстановитьПривилегированныйРежим(Истина);
	
	МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Новый ФиксированныйМассив(МассивОрганизаций);		

КонецФункции

// Добавляет в отчет отбор по организации.
//
// Параметры:
//	ПараметрыОтчета - Структура - Содержит ключи:
//		* Организация - СправочникСсылка.Организации - Организации, по которым строится отчет.
//	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек СКД.
//	ИмяОбъектаДанных - Строка - Строка - полное имя ключевого объекта, данные которого выводятся в отчете.
//		Используется для учета ограничений доступа.
//	ВПользовательскиеНастройки - Булево - Определяет место добавления отбора.
//		Если Истина, то в пользовательские настройки, иначе - в обычные.
//
Процедура ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек, ИмяОбъектаДанных = "РегистрБухгалтерии.Хозрасчетный", ВПользовательскиеНастройки = Истина) Экспорт
	
	// Получим список организаций, доступных текущему пользователю.
	Если ВРег(ИмяОбъектаДанных) = ВРег("РегистрБухгалтерии.Хозрасчетный") Тогда
		// Это наиболее частый объект, поэтому для него применяем кеш повторно используемых значений
		ДоступныеОрганизации = ОрганизацииДанныеКоторыхДоступныПользователю("РегистрБухгалтерии.Хозрасчетный", Ложь);
	Иначе
		ДоступныеОрганизации = ОрганизацииДанныеКоторыхДоступныПользователю(ИмяОбъектаДанных);
	КонецЕсли;
	
	СписокДоступныхОрганизаций = Новый СписокЗначений;
	Для Каждого ТекущаяОрганизация Из ДоступныеОрганизации Цикл
		СписокДоступныхОрганизаций.Добавить(ТекущаяОрганизация);
	КонецЦикла;
	
	// Добавляем отбор по списку доступных для пользователя организаций.
	ОтборПоДоступнымОрганизациям = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборПоДоступнымОрганизациям.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("Организация");
	ОтборПоДоступнымОрганизациям.ВидСравнения 		= ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборПоДоступнымОрганизациям.ПравоеЗначение 	= СписокДоступныхОрганизаций;
	ОтборПоДоступнымОрганизациям.Использование 		= Истина;
	ОтборПоДоступнымОрганизациям.РежимОтображения 	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.Организация) Тогда
		
		// Если среди доступных организаций, нет выбранной, то оставляем фильтр по доступным организациям.
		ОтборПоДоступнымОрганизациям.Использование = ДоступныеОрганизации.Найти(ПараметрыОтчета.Организация) = Неопределено;
		
		НовыйОтбор = БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(КомпоновщикНастроек, "Организация", ПараметрыОтчета.Организация,,, ВПользовательскиеНастройки);
		НовыйОтбор.Представление = "###ОтборПоОрганизации###"; 
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает параметр "Организация" в КомпоновщикНастроек.
// Предварительно проверяется доступность организации или организаций из списка.
// В случае если передана ссылка на справочник Организации и у текущего пользователя
// нет прав на просмотр данных этой организации, то в параметр будет установлена ПустаяСсылка.
// Если передан список, то из него будут убраны все недоступные пользователю организации.
//
// Параметры: 
//   КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных -
//                         Компоновщик, в который нужно установить параметр.
//   Организация - СправочникСсылка.Организации, СписокЗначений - Организация или список организаций, 
//                 которые нужно установить в качестве параметра.
//
Процедура УстановитьПараметрОрганизация(КомпоновщикНастроек, Знач Организация) Экспорт
	
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		
		ЗначениеПараметра = Справочники.Организации.ПустаяСсылка();
		
		ДоступныеОрганизации = ОрганизацииДанныеКоторыхДоступныПользователю("РегистрБухгалтерии.Хозрасчетный", Ложь);
		
		Если ДоступныеОрганизации.Найти(Организация) <> Неопределено Тогда
			ЗначениеПараметра = Организация;
		КонецЕсли;
		
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Организация", ЗначениеПараметра);
		
	ИначеЕсли ТипЗнч(Организация) = Тип("СписокЗначений") Тогда
		
		ЗначениеПараметра = Организация.Скопировать();
		
		ДоступныеОрганизации = ОрганизацииДанныеКоторыхДоступныПользователю("РегистрБухгалтерии.Хозрасчетный", Ложь);
		
		НедоступныеОрганизации = Новый Массив;
		Для Каждого ЭлементСписка Из ЗначениеПараметра Цикл
			Если ДоступныеОрганизации.Найти(ЭлементСписка.Значение) = Неопределено Тогда
				НедоступныеОрганизации.Добавить(ЭлементСписка);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ЭлементСписка Из НедоступныеОрганизации Цикл
			ЗначениеПараметра.Удалить(ЭлементСписка);
		КонецЦикла;
		
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Организация", ЗначениеПараметра);
		
	КонецЕсли;
	
КонецПроцедуры	

// Возвращает макет компоновки шапки отчета.
//
// Параметры:
// 	МакетКомпоновки - МакетКомпоновкиДанных - Результат формирования макета компоновки.
//	Тело - ТелоМакетаКомпоновкиДанных - Содержание макета компоновки.
//	ТипМакета - Строка - Возможные значения "Заголовок", "Подвал".
//
// Возвращаемое значение:
//	ОписаниеМакетаОбластиМакетаКомпоновкиДанных - Искомый макет.
//
Функция ПолучитьМакетШапки(МакетКомпоновки, Тело = Неопределено, ТипМакета = "Заголовок") Экспорт
	
	ЕстьПустойМакет = Ложь;
	
	Если Тело = Неопределено Тогда
		Тело = МакетКомпоновки.Тело;
	КонецЕсли;
	
	Если Тело.Количество() > 0 Тогда
		Если ТипМакета = "Заголовок" Тогда
			НачальныйИндекс = 0;
			КонечныйИндекс  = Тело.Количество();
			ИтераторПрямой  = Истина;
		ИначеЕсли ТипМакета = "Подвал" Тогда 
			НачальныйИндекс = Тело.Количество() - 1;
			КонечныйИндекс  = 0;
			ИтераторПрямой  = Ложь;
		КонецЕсли;
		
		Индекс = НачальныйИндекс;
		Пока Индекс <> КонечныйИндекс Цикл
			Элемент = Тело[Индекс];
			Если ТипЗнч(Элемент) = Тип("МакетОбластиМакетаКомпоновкиДанных") Тогда
				Если ЕстьПустойМакет Тогда
					ЕстьПустойМакет = Ложь;
				Иначе
					Возврат МакетКомпоновки.Макеты[Элемент.Макет];
				КонецЕсли;
			ИначеЕсли ТипЗнч(Элемент) = Тип("МакетГруппировкиТаблицыМакетаКомпоновкиДанных") Тогда
				Возврат МакетКомпоновки.Макеты[Элемент.Макет];
			ИначеЕсли ТипЗнч(Элемент) = Тип("ДиаграммаМакетаКомпоновкиДанных") Тогда
				ЕстьПустойМакет = Истина;
			ИначеЕсли ТипЗнч(Элемент) = Тип("ТаблицаМакетаКомпоновкиДанных") Тогда
				Возврат МакетКомпоновки.Макеты[Элемент.МакетШапки];
			КонецЕсли;
			
			Если ИтераторПрямой Тогда
				Индекс = Индекс + 1;
			Иначе
				Индекс = Индекс - 1;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает макет компоновки шапки отчета.
//
// Параметры:
// 	МакетКомпоновки - МакетКомпоновкиДанных - Результат формирования макета компоновки.
//	Тело - ТелоМакетаКомпоновкиДанных - Содержание макета компоновки.
//
// Возвращаемое значение:
//	ОписаниеМакетаОбластиМакетаКомпоновкиДанных - Искомый макет.
//
Функция ПолучитьМакетПодвала(МакетКомпоновки, Тело = Неопределено) Экспорт
	
	Если Тело = Неопределено Тогда
		Тело = МакетКомпоновки.Тело;
	КонецЕсли;
	
	Для Каждого Элемент Из Тело Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппировкаМакетаКомпоновкиДанных") Тогда
			Если Не ПустаяСтрока(Элемент.МакетПодвала) Тогда
				Возврат МакетКомпоновки.Макеты[Элемент.МакетПодвала];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Неопределено;
	
КонецФункции

// Ищет макет компоновки отчета по имени поля группировки.
//
// Параметры:
// 	МакетКомпоновки - МакетКомпоновкиДанных - Результат формирования макета компоновки.
//	ПолеГруппировки - Строка - Имя поля группировки.
//	ИскатьВДетальныхЗаписях - Булево - Признак поиска в детальных записях.
//	ТипМакета - Строка - Возможные значения "Заголовок", "Подвал".
//
// Возвращаемые значения:
//	Массив - Массив найденных макетов компоновки.
//
Функция ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, ПолеГруппировки, ИскатьВДетальныхЗаписях = Ложь, ТипМакета = "Заголовок") Экспорт
	
	МассивМакетов = Новый Массив;
	
	ОбойтиТелоМакетаКомпоновки(МакетКомпоновки, МакетКомпоновки.Тело, МассивМакетов, ПолеГруппировки, ТипМакета, ИскатьВДетальныхЗаписях);	
	
	Возврат МассивМакетов;
	
КонецФункции

Процедура ОбойтиТелоМакетаКомпоновки(МакетКомпоновки, Тело, МассивМакетов, ПолеГруппировки, ТипМакета, ИскатьВДетальныхЗаписях = Ложь) 
	
	Для Каждого Элемент Из Тело Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппировкаМакетаКомпоновкиДанных") Тогда
			Для Каждого ЭлементГруппировки Из Элемент.Группировка Цикл
				Если СтрНайти(ЭлементГруппировки.ИмяПоля, ПолеГруппировки) = 1 Тогда 
					МакетТело = ПолучитьМакетШапки(МакетКомпоновки, Элемент.Тело, ТипМакета);
					Если МакетТело <> Неопределено Тогда
						МассивМакетов.Добавить(МакетТело);  
					КонецЕсли;
					МакетТелоИерархии = ПолучитьМакетШапки(МакетКомпоновки, Элемент.ТелоИерархии, ТипМакета);
					Если МакетТелоИерархии <> Неопределено Тогда
						МассивМакетов.Добавить(МакетТелоИерархии);
					КонецЕсли;
				КонецЕсли; 
				ОбойтиТелоМакетаКомпоновки(МакетКомпоновки, Элемент.Тело, МассивМакетов, ПолеГруппировки, ТипМакета, ИскатьВДетальныхЗаписях);
			КонецЦикла;
		ИначеЕсли ТипЗнч(Элемент) = Тип("ТаблицаМакетаКомпоновкиДанных") Тогда

			ОбойтиТелоМакетаТаблицыКомпоновки(МакетКомпоновки, Элемент.Строки, МассивМакетов, ПолеГруппировки, ТипМакета, ИскатьВДетальныхЗаписях = Ложь);
	
		КонецЕсли;
		Если ИскатьВДетальныхЗаписях Тогда
			Если ТипЗнч(Элемент) = Тип("ЗаписиМакетаКомпоновкиДанных") Тогда
				Если Элемент.Имя = ПолеГруппировки Тогда
					МассивМакетов.Добавить(ПолучитьМакетШапки(МакетКомпоновки, Элемент.Тело));	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбойтиТелоМакетаТаблицыКомпоновки(МакетКомпоновки, Тело, МассивМакетов, ПолеГруппировки, ТипМакета, ИскатьВДетальныхЗаписях = Ложь) 
	
	Для Каждого Элемент Из Тело Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппировкаТаблицыМакетаКомпоновкиДанных") Тогда
			Для Каждого ЭлементГруппировки Из Элемент.Группировка Цикл
				Если СтрНайти(ЭлементГруппировки.ИмяПоля, ПолеГруппировки) = 1 Тогда 
					МакетТело = ПолучитьМакетШапки(МакетКомпоновки, Элемент.Тело, ТипМакета);
					Если МакетТело <> Неопределено Тогда
						МассивМакетов.Добавить(МакетТело);  
					КонецЕсли;
					МакетТелоИерархии = ПолучитьМакетШапки(МакетКомпоновки, Элемент.ТелоИерархии, ТипМакета);
					Если МакетТелоИерархии <> Неопределено Тогда
						МассивМакетов.Добавить(МакетТелоИерархии);
					КонецЕсли;
				КонецЕсли; 
				ОбойтиТелоМакетаТаблицыКомпоновки(МакетКомпоновки, Элемент.Тело, МассивМакетов, ПолеГруппировки, ТипМакета, ИскатьВДетальныхЗаписях);
			КонецЦикла;
		КонецЕсли;
		
		Если ИскатьВДетальныхЗаписях Тогда
			Если ТипЗнч(Элемент) = Тип("ЗаписиТаблицыМакетаКомпоновкиДанных") Тогда
				Если Элемент.Имя = ПолеГруппировки Тогда
					МассивМакетов.Добавить(ПолучитьМакетШапки(МакетКомпоновки, Элемент.Тело));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает для отчета настройки по умолчанию.
//
// Параметры:
//	ФормаОтчета - УправляемаяФорма - Форма отчета.
//
Процедура УстановитьНастройкиПоУмолчанию(ФормаОтчета) Экспорт
	
	Отчет = ФормаОтчета.Отчет;
	ИдентификаторОбъекта = БухгалтерскиеОтчеты.ИмяОтчета(ФормаОтчета);
	
	// Если отчет открывается для непосредственного формирования, то его контекст должен быть задан через параметры.
	СформироватьПриОткрытии =
		ФормаОтчета.Параметры.Свойство("СформироватьПриОткрытии") 
		И ФормаОтчета.Параметры.СформироватьПриОткрытии = Истина;
	
	ЗначенияПоУмолчанию = БухгалтерскиеОтчеты.БазовыеРеквизитыЗначенияПоУмолчанию();
	СместитьПериодОтчета(ЗначенияПоУмолчанию.НачалоПериода, ЗначенияПоУмолчанию.КонецПериода, ИдентификаторОбъекта);
	
	Для Каждого ЗначениеПоУмолчанию Из ЗначенияПоУмолчанию Цикл
		
		Если Не Отчет.Свойство(ЗначениеПоУмолчанию.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СформироватьПриОткрытии И ЗначениеЗаполнено(Отчет[ЗначениеПоУмолчанию.Ключ]) Тогда
			Продолжить;
		КонецЕсли;
		
		Отчет[ЗначениеПоУмолчанию.Ключ] = ЗначениеПоУмолчанию.Значение;
		
	КонецЦикла;

	Если Отчет.Свойство("ПоказательБУ") Тогда
		Отчет.ПоказательБУ = Истина;
	КонецЕсли;
	
	Если Отчет.Свойство("СальдоНаНачалоДт") Тогда
		Отчет.СальдоНаНачалоДт   = Истина;
		Отчет.СальдоНаНачалоКт   = Истина;
		Отчет.СальдоНаКонецДт    = Истина;
		Отчет.СальдоНаКонецКт    = Истина;
		Отчет.ОборотыЗаПериодДт  = Истина;
		Отчет.ОборотыЗаПериодКт  = Истина;
		Отчет.ОборотыСоСчетамиДт = Истина;
		Отчет.ОборотыСоСчетамиКт = Истина;
	КонецЕсли;
	
	Если ИдентификаторОбъекта = "ОборотноСальдоваяВедомость" Тогда
		
		Настройки = Новый Структура();
		
		Настройки.Вставить("Показатели",			Истина);
		Настройки.Вставить("Группировка",			Ложь);
		Настройки.Вставить("РазвернутоеСальдо",		Ложь);
		Настройки.Вставить("Отбор",					Истина);
		Настройки.Вставить("ДополнительныеПоля",	Истина);
		Настройки.Вставить("УсловноеОформление",	Истина);
		
		ФормаОтчета.ЗаполнитьНастройкамиПоУмолчанию(Настройки);
		
	КонецЕсли;
	
	// Установка начальных значений Группировки
	Если Отчет.Свойство("Группировка") Тогда
		Отчет.Группировка.Очистить();
		Для Каждого ЭлементСтруктуры Из Отчет.КомпоновщикНастроек.Настройки.Структура Цикл
			Если ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
				Для Каждого Серия Из ЭлементСтруктуры.Серии Цикл
					Если Серия.Имя = "Группировка" Тогда
						ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, Серия, Отчет.Группировка);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Для Каждого Точка Из ЭлементСтруктуры.Точки Цикл
					Если Точка.Имя = "Группировка" Тогда
						ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, Точка, Отчет.Группировка);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
				Для Каждого Колонка Из ЭлементСтруктуры.Колонки Цикл
					Если Колонка.Имя = "Группировка" Тогда
						ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, Колонка, Отчет.Группировка);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Для Каждого Строка Из ЭлементСтруктуры.Строки Цикл
					Если Строка.Имя = "Группировка" Тогда
						ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, Строка, Отчет.Группировка);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") Тогда
				Если ЭлементСтруктуры.Имя = "Группировка" Тогда
					Отчет.Группировка.Очистить();
					ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, ЭлементСтруктуры, Отчет.Группировка);
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Отчет.Свойство("Интервалы") Тогда
		Отчет.Интервалы.Очистить();
		
		НоваяСтрока = Отчет.Интервалы.Добавить();
		НоваяСтрока.Значение      = 7;
		НоваяСтрока.Представление = "До 7 дней";
		
		НоваяСтрока = Отчет.Интервалы.Добавить();
		НоваяСтрока.Значение      = 15;
		НоваяСтрока.Представление = "От 8 до 15 дней";
		
		НоваяСтрока = Отчет.Интервалы.Добавить();
		НоваяСтрока.Значение      = 30;
		НоваяСтрока.Представление = "От 16 до 30 дней";
		
		НоваяСтрока = Отчет.Интервалы.Добавить();
		НоваяСтрока.Значение      = 60;
		НоваяСтрока.Представление = "От 31 до 60 дней";
		
		НоваяСтрока = Отчет.Интервалы.Добавить();
		НоваяСтрока.Значение      = 90;
		НоваяСтрока.Представление = "От 61 до 90 дней";
	КонецЕсли;
	
	Если Отчет.Свойство("Период") Тогда
		Отчет.Период = ОбщегоНазначения.ТекущаяДатаПользователя();
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "ВыводитьЗаголовок") Тогда
		ФормаОтчета.ВыводитьЗаголовок = Истина;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "ВыводитьДиаграмму") Тогда
		ФормаОтчета.ВыводитьДиаграмму = Истина;
	КонецЕсли;
	
	Если Отчет.Свойство("РазмещениеДополнительныхПолей") Тогда
		Отчет.РазмещениеДополнительныхПолей = ПолучитьРазмещениеДополнительныхПолей(Отчет.КомпоновщикНастроек);
	КонецЕсли;
	
	Если Отчет.Свойство("Группировка") И Отчет.Свойство("ДополнительныеПоля") Тогда
		ЗаполнитьДополнительныеПоляИзНастроек(Отчет.КомпоновщикНастроек, Отчет.ДополнительныеПоля, Отчет.Группировка);
	КонецЕсли;
	
	Если Отчет.Свойство("ПоказательПоступление") Тогда
		Отчет.ПоказательПоступление = Истина;
	КонецЕсли;
	Если Отчет.Свойство("ПоказательРасход") Тогда
		Отчет.ПоказательРасход = Истина;
	КонецЕсли;
	
	Если Отчет.Свойство("ПоказательЗадолженность") Тогда
		Отчет.ПоказательЗадолженность = Истина;
	КонецЕсли;
	Если Отчет.Свойство("ПоказательПросроченнаяЗадолженность") Тогда
		Отчет.ПоказательПросроченнаяЗадолженность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает настройки компоновщика отчета по умолчанию.
//
// Параметры:
//	ФормаОтчета - УправляемаяФорма - Форма отчета.
//
Процедура УстановитьНастройкиКомпоновщикаПоУмолчанию(ФормаОтчета) Экспорт
	
	Отчет = ФормаОтчета.Отчет;
	
	// Установка начальных значений Группировки
	Если Отчет.Свойство("Группировка") Тогда
		Отчет.Группировка.Очистить();
		Для Каждого ЭлементСтруктуры Из Отчет.КомпоновщикНастроек.Настройки.Структура Цикл
			Если ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
				Для Каждого Серия Из ЭлементСтруктуры.Серии Цикл
					Если Серия.Имя = "Группировка" Тогда
						ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, Серия, Отчет.Группировка);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Для Каждого Точка Из ЭлементСтруктуры.Точки Цикл
					Если Точка.Имя = "Группировка" Тогда
						ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, Точка, Отчет.Группировка);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
				Для Каждого Колонка Из ЭлементСтруктуры.Колонки Цикл
					Если Колонка.Имя = "Группировка" Тогда
						ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, Колонка, Отчет.Группировка);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Для Каждого Строка Из ЭлементСтруктуры.Строки Цикл
					Если Строка.Имя = "Группировка" Тогда
						ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, Строка, Отчет.Группировка);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") Тогда
				Если ЭлементСтруктуры.Имя = "Группировка" Тогда
					Отчет.Группировка.Очистить();
					ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, ЭлементСтруктуры, Отчет.Группировка);
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Отчет.Свойство("РазмещениеДополнительныхПолей") Тогда
		Отчет.РазмещениеДополнительныхПолей = ПолучитьРазмещениеДополнительныхПолей(Отчет.КомпоновщикНастроек);
	КонецЕсли;
	
	Если Отчет.Свойство("Группировка") И Отчет.Свойство("ДополнительныеПоля") Тогда
		ЗаполнитьДополнительныеПоляИзНастроек(Отчет.КомпоновщикНастроек, Отчет.ДополнительныеПоля, Отчет.Группировка);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьРазмещениеДополнительныхПолей(КомпоновщикНастроек) 
	
	РасположениеРеквизитов = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметрВывода(КомпоновщикНастроек, "РасположениеРеквизитов");	
	
	Если РасположениеРеквизитов.Использование = Истина
		И РасположениеРеквизитов.Значение = РасположениеРеквизитовКомпоновкиДанных.Отдельно Тогда
		Возврат 1;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

// Заполняет табличную часть "ДополнительныеПоля" отчета из настроек компоновщика.
//
// Параметры:
//	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек СКД.
//	ДополнительныеПоля - ТабличнаяЧасть - Табличная часть отчета "Дополнительные поля".
//	Группировка - ТабличнаяЧасть - Табличная часть отчета "Группировка".
//
Процедура ЗаполнитьДополнительныеПоляИзНастроек(КомпоновщикНастроек, ДополнительныеПоля, Группировка) Экспорт
	
	Если Группировка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПоля.Очистить();
	Для Каждого ВыбранноеПоле Из КомпоновщикНастроек.Настройки.Выбор.Элементы Цикл
		Если ТипЗнч(ВыбранноеПоле) = Тип("ВыбранноеПолеКомпоновкиДанных") 
			И СтрНайти(Строка(ВыбранноеПоле.Поле), ".") > 0 Тогда
			Поле = Строка(ВыбранноеПоле.Поле);
			МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Поле, ".");
			
			Если Группировка.НайтиСтроки(Новый Структура("Поле", МассивПолей[0])).Количество() > 0 Тогда
				НоваяСтрока = ДополнительныеПоля.Добавить();
				НоваяСтрока.Использование = ВыбранноеПоле.Использование;
				НоваяСтрока.Поле          = Поле;
				НоваяСтрока.Представление = БухгалтерскиеОтчетыКлиентСервер.ПолучитьСвойствоПоля(КомпоновщикНастроек, НоваяСтрока.Поле);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает список счетов, для которых в настройке отчета указана необходимость вывода по субсчетам.
//
// Параметры:
//	Таблица - ТабличнаяЧасть - Табличная часть отчета с настройка вывода по отдельным счетам (ГруппировкаКор и др).
//
// Возвращаемое значение:
//	СписокЗначений - Список счетов, для которых при выводе отчета необходимо отображать информация по субсчетам.
//
Функция ПолучитьСписокСчетовПоСубсчетам(Таблица) Экспорт
	
	СписокСчетовПоСубсчетам = Новый СписокЗначений;
	Для каждого СтрокаТаблицы Из Таблица Цикл
		Если СтрокаТаблицы.ПоСубсчетам И СтрокаТаблицы.Использование Тогда
			СписокСчетовПоСубсчетам.Добавить(СтрокаТаблицы.Счет);
		КонецЕсли;
	КонецЦикла;
	
    Возврат СписокСчетовПоСубсчетам;
	
КонецФункции

// Копирует настройки параметра схемы компоновки данных и возвращает на новый параметр.
//
// Параметры:
//	СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема отчета.
//	Приемник - Строка - Имя параметра, в который необходимо скопировать настройки.
//	Источник - Строка - Имя параметра, из которого настройки копируются.
//	ЗначениеПриемника - Произвольный - Значение параметра приемника, которое необходимо установить.
//
Функция СкопироватьПараметрСхемыКомпоновкиДанных(СхемаКомпоновкиДанных, Приемник, Источник, ЗначениеПриемника = Неопределено) Экспорт
	
	Если ТипЗнч(СхемаКомпоновкиДанных) = Тип("СхемаКомпоновкиДанных") Тогда
		Параметры = СхемаКомпоновкиДанных.Параметры;
		
		НовыйПараметр = Параметры.Найти(Приемник);
		Если НовыйПараметр = Неопределено Тогда
			НовыйПараметр = Параметры.Добавить();
		КонецЕсли;
		
		ПараметрИсточник = Параметры.Найти(Источник);
		
		Если ПараметрИсточник = Неопределено Тогда
			Возврат Неопределено;
		Иначе
			ЗаполнитьЗначенияСвойств(НовыйПараметр, ПараметрИсточник);
			НовыйПараметр.Имя = Приемник;
			Если ЗначениеПриемника <> Неопределено Тогда
				НовыйПараметр.Значение = ЗначениеПриемника;
			КонецЕсли;
		КонецЕсли;
		
		Возврат НовыйПараметр;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает текстовое представление для организации.
//
// Параметры:
//	Организация - СправочникСсылка.Организации, Неопределено - Организация, для которой сформировать представление.
//
// Возвращаемое значение:
//	Строка - Представление организации.
//
Функция ПолучитьТекстОрганизация(Организация = Неопределено) Экспорт
	
	ТекстОрганизации = "";
	Если ЗначениеЗаполнено(Организация) Тогда
		ТекстОрганизации = Организация.НаименованиеПолное;
	КонецЕсли;
	
	Возврат ТекстОрганизации;
	
КонецФункции

// Возвращает способ дополнения периода.
//
// Параметры:
//	Интервал - Число - Определяет вид интервала. Значения от 6 до 12 соответствуют интервалам от День до Год.
//		Остальные значения "БезДополнения".
//
// Возвращаемое значение:
//	ТипДополненияПериодаКомпоновкиДанных - Способ дополнения периода.
//
Функция ПолучитьТипДополненияПоИнтервалу(Интервал = 0) Экспорт
	
	ТипДополнения = ТипДополненияПериодаКомпоновкиДанных.БезДополнения;
	
	Если Интервал = 6 Тогда
		ТипДополнения = ТипДополненияПериодаКомпоновкиДанных.День;
	ИначеЕсли Интервал = 7 Тогда
		ТипДополнения = ТипДополненияПериодаКомпоновкиДанных.Неделя;
	ИначеЕсли Интервал = 8 Тогда
		ТипДополнения = ТипДополненияПериодаКомпоновкиДанных.Декада;
	ИначеЕсли Интервал = 9 Тогда
		ТипДополнения = ТипДополненияПериодаКомпоновкиДанных.Месяц;
	ИначеЕсли Интервал = 10 Тогда
		ТипДополнения = ТипДополненияПериодаКомпоновкиДанных.Квартал;
	ИначеЕсли Интервал = 11 Тогда
		ТипДополнения = ТипДополненияПериодаКомпоновкиДанных.Полугодие;
	ИначеЕсли Интервал = 12 Тогда
		ТипДополнения = ТипДополненияПериодаКомпоновкиДанных.Год;
	КонецЕсли;
	
	Возврат ТипДополнения;	
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ И ПРОЦЕДУРЫ ДЛЯ ФОРМИРОВАНИЯ И ВЫВОДА ОТЧЕТА, ОБРАБОТКА РЕЗУЛЬТАТА ОТЧЕТА
// 

// Возвращает сумму выделенных ячеек табличного документа.
//
// Параметры:
//	Результат - ТабличныйДокумент - Табличный документ, содержащий ячейки для суммирования.
//	КэшВыделеннойОбласти - Структура - Содержит ячейки выделенной области.
//
// Возвращаемое значение:
//	Число - Сумма значений ячеек.
//
Функция ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(Знач Результат, КэшВыделеннойОбласти) Экспорт
	
	Сумма = 0;
	Для Каждого КлючИЗначение Из КэшВыделеннойОбласти Цикл
		СтруктураАдресВыделеннойОбласти = КлючИЗначение.Значение;
		БухгалтерскиеОтчетыКлиентСервер.ВычислитьСуммуВЯчейках(Сумма, СтруктураАдресВыделеннойОбласти, Результат);
	КонецЦикла;
	
	КэшВыделеннойОбласти.Вставить("Сумма", Сумма);
	
	Возврат Сумма;
	
КонецФункции

// Выводит заголовок отчета.
//
// Параметры:
//	ПараметрыОтчета - Структура - Содержит ключи:
//		* Организация - СправочникСсылка.Организации - Организация, по которой формируется отчет.
//		* ИдентификаторОтчета - Строка - Имя отчета.
//		* НаборПоказателей - Массив - Массив строк с именам выводимых показателей отчета (опционально).
//		* ВыводитьЕдиницуИзмерения - Булево - Признак необходимости вывода единицы измерения (опционально).
//	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек СКД.
//	Результат - ТабличныйДокумент - Результат формирования отчета.
//
Процедура ВывестиЗаголовокОтчета(ПараметрыОтчета, КомпоновщикНастроек, Результат) Экспорт
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
	ОбластьЗаголовок        = Макет.ПолучитьОбласть("ОбластьЗаголовок");
	ОбластьОписаниеНастроек = Макет.ПолучитьОбласть("ОписаниеНастроек");
	ОбластьОрганизация      = Макет.ПолучитьОбласть("Организация");
	
	// Организация
	Если ЗначениеЗаполнено(ПараметрыОтчета.Организация) Тогда
		ТекстОрганизация = ПолучитьТекстОрганизация(ПараметрыОтчета.Организация);
		ОбластьОрганизация.Параметры.НазваниеОрганизации = ТекстОрганизация;
		Результат.Вывести(ОбластьОрганизация);
	КонецЕсли;
	
	// Текст заголовка
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = Отчеты[ПараметрыОтчета.ИдентификаторОтчета].ПолучитьТекстЗаголовка(ПараметрыОтчета);
	Результат.Вывести(ОбластьЗаголовок);
	
	ИдентификаторОбъекта = "ОтчетОбъект." + ПараметрыОтчета.ИдентификаторОтчета;	
	
	// Показатели отчета
	ПоказыватьВыводимыеДанные = Ложь;
	ТекстВыводимыеДанные = "";
	КоличествоПоказателей = 0;
	
	Если ПараметрыОтчета.Свойство("НаборПоказателей") Тогда
		Для Каждого ИмяПоказателя Из ПараметрыОтчета.НаборПоказателей Цикл
			Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда
				ТекстВыводимыеДанные = ТекстВыводимыеДанные + Метаданные.Отчеты[ПараметрыОтчета.ИдентификаторОтчета].Реквизиты["Показатель" + ИмяПоказателя].Синоним + ", ";
				КоличествоПоказателей = КоличествоПоказателей + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ТекстВыводимыеДанные = Лев(ТекстВыводимыеДанные, СтрДлина(ТекстВыводимыеДанные) - 2);
	
	Если КоличествоПоказателей = 1
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.Продажи" Тогда
		ПоказыватьВыводимыеДанные = Истина;
	КонецЕсли;
	Если ПоказыватьВыводимыеДанные Тогда 
		ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = НСтр("ru = 'Выводимые данные:'");
		ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстВыводимыеДанные;
		Результат.Вывести(ОбластьОписаниеНастроек);
	КонецЕсли;
	
	// Отбор
	ТекстОтбор = ОписаниеОтборовОтчета(ПараметрыОтчета, КомпоновщикНастроек);

	Если Не ПустаяСтрока(ТекстОтбор) Тогда
		ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = НСтр("ru = 'Отбор:'");
		ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстОтбор;
		Результат.Вывести(ОбластьОписаниеНастроек);
	КонецЕсли;
	
	Если ИдентификаторОбъекта <>  "ОтчетОбъект.ОборотноСальдоваяВедомость" 
		И ИдентификаторОбъекта <> "ОтчетОбъект.КарточкаСчета"
		И ИдентификаторОбъекта <> "ОтчетОбъект.КарточкаСубконто"
		И ИдентификаторОбъекта <> "ОтчетОбъект.ОтчетПоПроводкам"
		И ИдентификаторОбъекта <> "ОтчетОбъект.Продажи" Тогда
		// Сортировка
		ТекстСортировка = "";
		Для Каждого СтрокаПорядок Из КомпоновщикНастроек.Настройки.Порядок.Элементы Цикл
			Если СтрокаПорядок.Использование Тогда
				ТекстСортировка = ТекстСортировка + БухгалтерскиеОтчетыКлиентСервер.ПолучитьСвойствоПоля(КомпоновщикНастроек, СтрокаПорядок.Поле);
				ТекстСортировка = ТекстСортировка + " " + Строка(СтрокаПорядок.ТипУпорядочивания) + ", ";
			КонецЕсли;
		КонецЦикла;
		ТекстСортировка = Лев(ТекстСортировка, СтрДлина(ТекстСортировка) - 2);
		
		Если Не ПустаяСтрока(ТекстСортировка) Тогда
			ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = НСтр("ru = 'Сортировка:'");
			ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстСортировка;
			Результат.Вывести(ОбластьОписаниеНастроек);
		КонецЕсли;
	КонецЕсли;
	
	Результат.Область("R1:R" + Результат.ВысотаТаблицы).Имя = "Заголовок";
	
КонецПроцедуры

// Выводит подвал отчета.
//
// Параметры:
//	ПараметрыОтчета - Структура - Содержит ключи:
//		* ОтветственноеЛицо - Справочники.ВидыОтветственныхЛиц - Вид ответственного лица.
//	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек СКД.
//	Результат - ТабличныйДокумент - Результат формирования отчета.
//
Процедура ВывестиПодвалОтчета(ПараметрыОтчета, КомпоновщикНастроек, Результат) Экспорт
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
	ОбластьПодписи = Макет.ПолучитьОбласть("Подписи");
	
	// Ответственное лицо
	Если ПараметрыОтчета.Свойство("ОтветственноеЛицо")
		И ЗначениеЗаполнено(ПараметрыОтчета.ОтветственноеЛицо) Тогда
		
		ОбластьПодписи.Параметры.Заполнить(ПолучитьДанныеОтветственногоЛица(ПараметрыОтчета));		
	КонецЕсли;

	Результат.Вывести(ОбластьПодписи);
			
КонецПроцедуры

// Возвращает последний использовавшийся тип файла, в котором сохранялся табличный документ отчета.
//
// Возвращаемое значение:
//   ТипФайлаТабличногоДокумента - для передачи в метод Записать() табличного документа.
//
Функция ТипФайлаТабличногоДокументаПоУмолчанию() Экспорт
	
	ТипФайла = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				"ДиалогВыбораФайла", "ТипФайлаТабличногоДокумента", ТипФайлаТабличногоДокумента.XLS);
	
	Возврат ТипФайла;
	
КонецФункции

// Запоминает последний использовавшийся тип файла, в котором сохранялся табличный документ отчета.
//
// Параметры:
//  ТипФайла     - ТипФайлаТабличногоДокумента - сохраняемое значение.
//
Процедура СохранитьТипФайлаТабличногоДокументаПоУмолчанию(ТипФайла) Экспорт
	
	ОписаниеНастройки = Новый ОписаниеНастроек;
	ОписаниеНастройки.КлючОбъекта   = "ДиалогВыбораФайла";
	ОписаниеНастройки.КлючНастроек  = "ТипФайлаТабличногоДокумента";
	ОписаниеНастройки.Представление = НСтр("ru = 'Значение по-умолчанию для формата в диалоге выбора файла при сохранении отчета'");
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ОписаниеНастройки.КлючОбъекта, ОписаниеНастройки.КлючНастроек, ТипФайла, ОписаниеНастройки); 
	
КонецПроцедуры

// Преобразует табличный документ в двоичные данные и возвращает адрес временного хранилища, куда они помещены.
//
// Параметры:
//  СохраняемыйДокумент - ТабличныйДокумент - преобразуемый в двоичные данные.
//  ТипФайла     - ТипФайлаТабличногоДокумента - в какой формат файла сохранить табличный документ.
//
// Возвращаемое значение:
//   Строка      - адрес временного хранилища, содержащего объект типа ДвоичныеДанные.
//
Функция ДвоичныеДанныеИзТабличногоДокумента(СохраняемыйДокумент, ТипФайла) Экспорт

	ДвоичныеДанныеФайла = БухгалтерскиеОтчеты.ДвоичныеДанныеИзТабличногоДокумента(СохраняемыйДокумент, ТипФайла);
		
	Возврат ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла)
	
КонецФункции

// Устанавливает макет оформления отчета.
//
// Параметры:
//	ПараметрыОтчета - Структура - Содержит ключи:
//		* МакетОформления - Строка - Имя макета оформления.
//	НастройкаКомпоновкиДанных - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек СКД.
//
Процедура УстановитьМакетОформленияОтчета(ПараметрыОтчета, НастройкаКомпоновкиДанных) Экспорт
	
	МакетОформления	= Неопределено;
	
	МакетОформленияПоУмолчанию = БухгалтерскиеОтчетыПовтИсп.ПолучитьИмяМакетаОформления();

	Если ПараметрыОтчета.Свойство("МакетОформления", МакетОформления) Тогда
		Если НЕ ЗначениеЗаполнено(МакетОформления) Или МакетОформления = "По умолчанию" Тогда
			МакетОформления = МакетОформленияПоУмолчанию;
		КонецЕсли;
	Иначе
		МакетОформления = МакетОформленияПоУмолчанию;
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", МакетОформления);	
	
КонецПроцедуры

// Выполняет дополнительную обработку результата отчета после его формирования:
//	- настраивает параметры печати;
//	- устанавливает колонтитулы.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//	ИдентификаторОтчета - Строка - Имя отчета.
//	Результат - ТабличныйДокумент - Результат формирования отчета.
//
Процедура ОбработкаРезультатаОтчета(ПараметрыОтчета, ИдентификаторОтчета, Результат) Экспорт
	
	// Выводим надписи вертикально, если количество точек диаграмм больше 9
	Для Каждого Рисунок Из Результат.Рисунки Цикл
		Попытка
			Если ТипЗнч(Рисунок.Объект) = Тип("Диаграмма") Тогда
				Рисунок.Объект.ОбластьПостроения.ВертикальныеМетки  = (Рисунок.Объект.Точки.Количество() > 9);
				Рисунок.Объект.ОбластьПостроения.ФорматШкалыЗначений = "ЧГ=3,0";
				Рисунок.Объект.ОбластьЛегенды.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1);
				
				Рисунок.Объект.ПоложениеПодписейШкалыЗначенийИзмерительнойДиаграммы = ПоложениеПодписейШкалыЗначенийИзмерительнойДиаграммы.НаШкале;
				Рисунок.Объект.ПодписиШкалыЗначенийИзмерительнойДиаграммыВдольШкалы = Истина;
				Рисунок.Объект.ТолщинаШкалыИзмерительнойДиаграммы                   = 3;
				Рисунок.Объект.ФорматЗначенийВПодписях                              = "ЧДЦ=2; ЧГ=3,0";
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	// Удалим строки с высотой равной 1
	Индекс = Результат.ВысотаТаблицы;
	Пока Индекс > 0 Цикл
		ИндексСтроки = "R" + Формат(Индекс, "ЧГ=0");
		Если Результат.Область(ИндексСтроки).ВысотаСтроки = 1 Тогда
			Результат.УдалитьОбласть(Результат.Область(ИндексСтроки), ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Результат.АвтоМасштаб = Истина;
	
	Результат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + ИдентификаторОтчета;
	
	НастройкиКолонтитулов = Неопределено;
	Если ПараметрыОтчета.Свойство("НастройкиКомпоновкиДанных") Тогда 
		ПараметрыОтчета.НастройкиКомпоновкиДанных.ДополнительныеСвойства.Свойство("НастройкиКолонтитулов", НастройкиКолонтитулов);
	КонецЕсли;

	УправлениеКолонтитулами.УстановитьКолонтитулы(
		Результат, Метаданные.Отчеты[ИдентификаторОтчета].Синоним, Пользователи.ТекущийПользователь(), НастройкиКолонтитулов);

	// Отступ от левого края.
	РазмерОтступаВОтчетах = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьЗначениеКонстанты("РазмерОтступаВОтчетах");

	Если Результат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет Тогда 
		Результат.ПолеСлева = РазмерОтступаВОтчетах;
	Иначе 
		Результат.ПолеСверху = РазмерОтступаВОтчетах;
	КонецЕсли;	
		
КонецПроцедуры

// Выполняет проверку заполнения настроек отчета перед формированием.
//
// Параметры:
//	ОтчетОбъект - ОтчетОбъект.* - Проверяемый отчет.
//	Отказ - Булево - Истина, если проверка не прошла.
//	Проверки - Структура - Описание проверок. Содержит ключи:
//		* КорректностьПериода - Булево - Признак проверки периода отчета.
//		* ВыборПоказателя - Булево - Признак необходимости проверять выбранные показатели отчета.
//		* СписокВидовСубконто - Булево - Признак проверки количества выбранных видов субконто.
//
Процедура ОбработкаПроверкиЗаполнения(ОтчетОбъект, Отказ, Проверки = Неопределено) Экспорт
	
	Если ПропуститьПроверкуЗаполнения(ОтчетОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если Проверки = Неопределено Тогда
		Проверки = СтандартныеПроверкиЗаполнения();
	КонецЕсли;
	
	Если Проверки.Свойство("КорректностьПериода") И Проверки.КорректностьПериода Тогда
		Если ЗначениеЗаполнено(ОтчетОбъект.КонецПериода) И ОтчетОбъект.НачалоПериода > ОтчетОбъект.КонецПериода Тогда
			ТекстСообщения = НСтр("ru = 'Дата начала периода не может быть больше даты конца периода'");
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "Отчет.НачалоПериода",, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Проверки.Свойство("ВыборПоказателя") И Проверки.ВыборПоказателя Тогда
		КоличествоПоказателей = 0;
		ПервыйПоказатель = "";
		НаборПоказателей = Отчеты[ОтчетОбъект.Метаданные().Имя].ПолучитьНаборПоказателей();
		Для Каждого ЭлементНабора Из НаборПоказателей Цикл
			КоличествоПоказателей = КоличествоПоказателей + ОтчетОбъект["Показатель" + ЭлементНабора];
			Если ПустаяСтрока(ПервыйПоказатель) Тогда
				ПервыйПоказатель = "Показатель" + ЭлементНабора;
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоПоказателей = 0 И НаборПоказателей.Количество() > 0 Тогда
			ТекстСообщения = НСтр("ru = 'Не выбран показатель(и)'");
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "Отчет." + ПервыйПоказатель,, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Проверки.Свойство("СписокВидовСубконто") И Проверки.СписокВидовСубконто Тогда
		МаксКоличествоСубконто = БухгалтерскийУчетСервер.МаксимальноеКоличествоСубконто();
		Если ОтчетОбъект.СписокВидовСубконто.Количество() > МаксКоличествоСубконто Тогда
			ТекстСообщения = НСтр("ru = 'Выбрано слишком много видов субконто, максимально допустимо %1'");
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ТекстСообщения, МаксКоличествоСубконто),, "Отчет.СписокВидовСубконто",, Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает копию описания макета схемы компоновки данных.
// 
// Параметры:
//	ОписаниеМакета - ОписаниеМакетаСхемыКомпоновкиДанных - Исходное описание.
//	ФормаЗаписи - Строка - Форма записи описания макета в XML.
//
// Возвращаемое значение:
//	ОписаниеМакетаСхемыКомпоновкиДанных - Копия исходного описания макета.
//
Функция ПолучитьКопиюОписанияМакета(ОписаниеМакета, ФормаЗаписи = Неопределено) Экспорт
	
	Если ФормаЗаписи = Неопределено Тогда
		ФормаЗаписи = "{http://v8.1c.ru/8.1/data-composition-system/composition-template}";
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ОписаниеМакета, "item", ФормаЗаписи);
	СтрокаXML = ЗаписьXML.Закрыть();
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	Возврат СериализаторXDTO.ПрочитатьXML(ЧтениеXML, ТипЗнч(ОписаниеМакета));
	
КонецФункции

// Возвращает доступное поле по полю компоновки.
//
// Параметры:
//	ПолеКомпоновкиДанных - Строка, ПолеКомпоновкиДанных - Искомое поле.
//	ОбластьПоиска - КомпоновщикНастроекКомпоновкиДанных, ДанныеРасшифровкиКомпоновкиДанных, 
//		НастройкиВложенногоОбъектаКомпоновкиДанных - Коллекция полей для поиска.
//
// Возвращаемое значение:
//	ДоступноеПолеКомпоновкиДанных - Найденное поле или Неопределено.
//
Функция ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ПолеКомпоновкиДанных, ОбластьПоиска) Экспорт
	
	Если ТипЗнч(ПолеКомпоновкиДанных) = Тип("Строка") Тогда
		ПолеПоиска = Новый ПолеКомпоновкиДанных(ПолеКомпоновкиДанных);
	Иначе
		ПолеПоиска = ПолеКомпоновкиДанных;
	КонецЕсли;
	
	Если ТипЗнч(ОбластьПоиска) = Тип("КомпоновщикНастроекКомпоновкиДанных")
	 Или ТипЗнч(ОбластьПоиска) = Тип("ДанныеРасшифровкиКомпоновкиДанных")
	 Или ТипЗнч(ОбластьПоиска) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		Возврат ОбластьПоиска.Настройки.ДоступныеПоляВыбора.НайтиПоле(ПолеПоиска);
	Иначе
		Возврат ОбластьПоиска.НайтиПоле(ПолеПоиска);
	КонецЕсли;
	
КонецФункции

// Возвращает массив полей, по которым следует расшифровать отчет.
//
// Параметры:
//	Расшифровка - ИдентификаторРасшифровкиКомпоновкиДанных, ДанныеРасшифровкиКомпоновкиДанных - Значения текущей расшифровки.
//	ДанныеРасшифровки - ДанныеРасшифровкиКомпоновкиДанных - Коллекция данных расшифровки отчета.
//	ТекущийОтчет - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек отчета.
//	ВключатьРесурсы - Булево - Признак включения в результат полей-ресурсов.
//
// Возвращаемое значение:
//	Массив - Массив значений типа ЗначениеПоляРасшифровкиКомпоновкиДанных.
//
Функция ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки, ТекущийОтчет = Неопределено, ВключатьРесурсы = Ложь) Экспорт
	
	МассивПолейРасшифровки = Новый Массив;
	
	Если ТипЗнч(Расшифровка) <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных") 
	   И ТипЗнч(Расшифровка) <> Тип("ДанныеРасшифровкиКомпоновкиДанных") Тогда
		Возврат МассивПолейРасшифровки;
	КонецЕсли;
	
	Если ТекущийОтчет = Неопределено Тогда
		ТекущийОтчет = ДанныеРасшифровки;
	КонецЕсли;
	
	// Добавим поля родительских группировок
	ДобавитьРодителей(ДанныеРасшифровки.Элементы[Расшифровка], ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы);
	
	Количество = МассивПолейРасшифровки.Количество();
	Для Индекс = 1 По Количество Цикл
		ОбратныйИндекс = Количество - Индекс;
		Для ИндексВнутри = 0 По ОбратныйИндекс - 1 Цикл
			Если МассивПолейРасшифровки[ОбратныйИндекс].Поле = МассивПолейРасшифровки[ИндексВнутри].Поле Тогда
				МассивПолейРасшифровки.Удалить(ОбратныйИндекс);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Добавим отбор, установленный в отчете
	Для каждого ЭлементОтбора Из ТекущийОтчет.Настройки.Отбор.Элементы Цикл
		Если Не ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		МассивПолейРасшифровки.Добавить(ЭлементОтбора);
	КонецЦикла;
	
	Возврат МассивПолейРасшифровки;
	
КонецФункции

// Возвращает параметры расшифровки ячейки отчета.
//
// Параметры:
//	Адрес - Строка - Адрес временного хранилища с данными расшифровки отчета.
//	ИдентификаторОбъекта - Строка - Имя отчета.
//	Расшифровка - Произвольный - Значения полей расшифровки.
//
// Возвращаемое значение:
//	Структура - Содержит ключи (опционально):
//		* ОткрытьОбъект - Булево - Если Истина, то необходимо открыть указанный объект.
//		* Значение - Произвольный - Значение расшифровывающего объекта.
//		* СписокПунктовМеню - СписокЗначений - Пункты меню для отображения выбора режима расшифровки.
//
Функция ПолучитьПараметрыРасшифровкиОтчета(Адрес, ИдентификаторОбъекта, Расшифровка) Экспорт
	
	ДанныеОбъекта = Неопределено;
	ПараметрыРасшифровки = Новый Структура;
	
	Если ИдентификаторОбъекта = Неопределено Тогда
		ДанныеОбъекта = ПолучитьИзВременногоХранилища(Адрес);
		ИдентификаторОбъекта = ДанныеОбъекта.Объект.ИдентификаторОтчета;
	КонецЕсли;
	
	ПараметрыИсполненияОтчета = Отчеты[ИдентификаторОбъекта].ПолучитьПараметрыИсполненияОтчета();
	Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьРасширенныеПараметрыРасшифровки") 
		И ПараметрыИсполненияОтчета.ИспользоватьРасширенныеПараметрыРасшифровки Тогда
		Отчеты[ИдентификаторОбъекта].ЗаполнитьПараметрыРасшифровкиОтчета(Адрес, Расшифровка, ПараметрыРасшифровки);
		
		Возврат ПараметрыРасшифровки;
	КонецЕсли;
	
	Если ДанныеОбъекта = Неопределено Тогда
		ДанныеОбъекта = ПолучитьИзВременногоХранилища(Адрес);
	КонецЕсли;
	
	ДанныеОбъекта = ПолучитьИзВременногоХранилища(Адрес);
	
	Если ИдентификаторОбъекта = "ГлавнаяКнига" Тогда 
		ОтчетОбъект       = ДанныеОбъекта;
		ДанныеРасшифровки = ДанныеОбъекта.ДанныеРасшифровки;
	Иначе 		
		ОтчетОбъект       = ДанныеОбъекта.Объект;
		ДанныеРасшифровки = ДанныеОбъекта.ДанныеРасшифровки;
	КонецЕсли;
		
	Если ИдентификаторОбъекта = "АнализСубконто"
		ИЛИ ИдентификаторОбъекта = "АнализСчета"
		ИЛИ ИдентификаторОбъекта = "ОборотноСальдоваяВедомость"
		ИЛИ ИдентификаторОбъекта = "ОборотноСальдоваяВедомостьПоСчету"
		ИЛИ ИдентификаторОбъекта = "ОборотноСальдоваяВедомостьПоПарнымСчетам"
		ИЛИ ИдентификаторОбъекта = "ОборотыМеждуСубконто"
		ИЛИ ИдентификаторОбъекта = "ОборотыСчета"
		ИЛИ ИдентификаторОбъекта = "СводныеПроводки" 
		ИЛИ ИдентификаторОбъекта = "ГлавнаяКнига"
		ИЛИ ИдентификаторОбъекта = "ШахматнаяВедомость" Тогда
		ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Ложь);
		
		ЕстьПоказатель  = Ложь;
		ЕстьКорЗначение = Ложь;
		Счет            = Неопределено;
		ПервыйЭлемент   = Неопределено;
		
		Если ИдентификаторОбъекта = "ГлавнаяКнига" Тогда
			Если ТипЗнч(Расшифровка) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
				ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Истина);
				ПараметрыРасшифровки.Вставить("Значение"       , Расшифровка);
			Иначе 
				МассивПолей = Расшифровка;
				
				ЕстьПоказатель = Истина;
				ПервыйЭлемент = Истина;
				Для Каждого ЭлементСписка Из Расшифровка Цикл
					Для Каждого ЭлементСоответствия Из ЭлементСписка.Значение Цикл
						Если ЭлементСоответствия.Ключ = "КорСчет" Тогда
							ЕстьКорЗначение = Истина;
						КонецЕсли;
						Если ЭлементСоответствия.Ключ = "Счет" Тогда
							Счет = ЭлементСоответствия.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		Иначе
			КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
			КомпоновщикНастроек.ЗагрузитьНастройки(ДанныеРасшифровки.Настройки);
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ДанныеОбъекта.Объект.СхемаКомпоновкиДанных));
			
			МассивПолей = ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки, КомпоновщикНастроек, Истина);
			
			Для Каждого Элемент Из МассивПолей Цикл
				Если ТипЗнч(Элемент) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
					Если ПервыйЭлемент = Неопределено И Элемент.Поле <> "Показатель" Тогда 
						ПервыйЭлемент = Элемент;
					КонецЕсли;
					Если Элемент.Поле = "Показатель" Тогда
						ЕстьПоказатель = Истина;
					КонецЕсли;
					Если СтрНайти(Элемент.Поле, "Кор") = 1 Тогда
						ЕстьКорЗначение = Истина;
					КонецЕсли;
					Если Элемент.Поле = "Счет" Тогда
						Счет = Элемент.Значение;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ПредставлениеДляОСВПоСчету            = НСтр("ru = 'ОСВ по счету %Счет%'");
		ПредставлениеДляКарточкиСчета         = НСтр("ru = 'Карточка счета %Счет%'");
		ПредставлениеДляАнализаСчета          = НСтр("ru = 'Анализ счета %Счет%'");
		ПредставлениеДляОборотыСчета          = НСтр("ru = 'Обороты счета %Счет%'");
		ПредставлениеДляОборотыСчетаПоМесяцам = НСтр("ru = 'Обороты счета %Счет% по месяцам'");
		ПредставлениеДляОборотыСчетаПоДням    = НСтр("ru = 'Обороты счета %Счет% по дням'");
		ПредставлениеДляКарточкиСубконто      = НСтр("ru = 'Карточка субконто'");
		ПредставлениеДляОтчетаПоПроводкам     = НСтр("ru = 'Отчет по проводкам'");
		ПредставлениеОткрытьОбъект 			  = НСтр("ru = 'Открыть ""%Значение%""'");
		
		ПредставлениеДляОСВПоСчету            = СтрЗаменить(ПредставлениеДляОСВПоСчету           , "%Счет%", Счет);
		ПредставлениеДляКарточкиСчета         = СтрЗаменить(ПредставлениеДляКарточкиСчета        , "%Счет%", Счет);
		ПредставлениеДляАнализаСчета          = СтрЗаменить(ПредставлениеДляАнализаСчета         , "%Счет%", Счет);
		ПредставлениеДляОборотыСчета          = СтрЗаменить(ПредставлениеДляОборотыСчета         , "%Счет%", Счет);
		ПредставлениеДляОборотыСчетаПоМесяцам = СтрЗаменить(ПредставлениеДляОборотыСчетаПоМесяцам, "%Счет%", Счет);
		ПредставлениеДляОборотыСчетаПоДням    = СтрЗаменить(ПредставлениеДляОборотыСчетаПоДням   , "%Счет%", Счет);
		
		Если ЕстьПоказатель Тогда
			УстановитьВсеПоказатели = Ложь;
		Иначе
			УстановитьВсеПоказатели = Истина;
		КонецЕсли;
		СписокПунктовМеню = Новый СписокЗначений;
		Если ПервыйЭлемент <> Неопределено Тогда
			Если ИдентификаторОбъекта = "ОборотноСальдоваяВедомость" Тогда
				Если Не ЕстьПоказатель И ЗначениеЗаполнено(ПервыйЭлемент.Значение)  И Не БухгалтерскиеОтчетыКлиентСервер.ПростойТип(ПервыйЭлемент.Значение) Тогда
					Представление = СтрЗаменить(ПредставлениеОткрытьОбъект, "%Значение%", ПервыйЭлемент.Значение);
					СписокПунктовМеню.Добавить(ПервыйЭлемент.Значение, Представление);
				КонецЕсли;
				СписокПунктовМеню.Добавить("ОборотноСальдоваяВедомостьПоСчету"	, ПредставлениеДляОСВПоСчету);
				СписокПунктовМеню.Добавить("ОборотноСальдоваяВедомостьПоПарнымСчетам"	, ПредставлениеДляОСВПоСчету);
				СписокПунктовМеню.Добавить("КарточкаСчета"        				, ПредставлениеДляКарточкиСчета);
				СписокПунктовМеню.Добавить("АнализСчета"                      	, ПредставлениеДляАнализаСчета);
				СписокПунктовМеню.Добавить("ОборотыСчетаПоМесяцам"            	, ПредставлениеДляОборотыСчетаПоМесяцам);
				СписокПунктовМеню.Добавить("ОборотыСчетаПоДням"               	, ПредставлениеДляОборотыСчетаПоДням);
			Иначе
				Если ЕстьПоказатель Тогда
					// Если расшифровывается показатель, то необходимо сразу формировать отчет
					Если ИдентификаторОбъекта = "АнализСубконто" Тогда
						Если Счет <> Неопределено Тогда 
							СписокПунктовМеню.Добавить("КарточкаСчета");
						Иначе
							СписокПунктовМеню.Добавить("КарточкаСубконто");	
						КонецЕсли;
					ИначеЕсли ИдентификаторОбъекта = "АнализСчета" Тогда
						Если ЕстьКорЗначение Тогда
							СписокПунктовМеню.Добавить("ОтчетПоПроводкам");
						Иначе
							СписокПунктовМеню.Добавить("КарточкаСчета");		
						КонецЕсли;
					ИначеЕсли ИдентификаторОбъекта = "ОборотноСальдоваяВедомостьПоСчету" Тогда
						СписокПунктовМеню.Добавить("КарточкаСчета");
					ИначеЕсли ИдентификаторОбъекта = "ОборотноСальдоваяВедомостьПоПарнымСчетам" Тогда
						СписокПунктовМеню.Добавить("КарточкаСчета");
					ИначеЕсли ИдентификаторОбъекта = "ОборотыМеждуСубконто" Тогда
						СписокПунктовМеню.Добавить("ОтчетПоПроводкам");
					ИначеЕсли ИдентификаторОбъекта = "ОборотыСчета" Тогда				
						СписокПунктовМеню.Добавить("ОтчетПоПроводкам");
					ИначеЕсли ИдентификаторОбъекта = "СводныеПроводки" Тогда
						СписокПунктовМеню.Добавить("ОтчетПоПроводкам");
					ИначеЕсли ИдентификаторОбъекта = "ГлавнаяКнига" Тогда
						СписокПунктовМеню.Добавить("ОборотыСчета", ПредставлениеДляОборотыСчета);
						Если ЕстьКорЗначение Тогда
							СписокПунктовМеню.Добавить("ОтчетПоПроводкам", ПредставлениеДляОтчетаПоПроводкам);
						КонецЕсли;						
					КонецЕсли;
				Иначе
					Если ИдентификаторОбъекта = "СводныеПроводки"
						ИЛИ ИдентификаторОбъекта = "ШахматнаяВедомость" Тогда
						СписокПунктовМеню.Добавить("ОтчетПоПроводкам");
						УстановитьВсеПоказатели = Истина;
					Иначе 
						Если ЗначениеЗаполнено(ПервыйЭлемент.Значение) И Не БухгалтерскиеОтчетыКлиентСервер.ПростойТип(ПервыйЭлемент.Значение) Тогда
							Представление = СтрЗаменить(ПредставлениеОткрытьОбъект, "%Значение%", ПервыйЭлемент.Значение);
							СписокПунктовМеню.Добавить(ПервыйЭлемент.Значение, Представление);
						КонецЕсли;
						Если ИдентификаторОбъекта = "АнализСубконто" Тогда
							Если Счет <> Неопределено Тогда 
								СписокПунктовМеню.Добавить("КарточкаСчета", ПредставлениеДляКарточкиСчета);
							Иначе
								СписокПунктовМеню.Добавить("КарточкаСубконто", ПредставлениеДляКарточкиСубконто);
							КонецЕсли;	
						ИначеЕсли ИдентификаторОбъекта = "АнализСчета" Тогда
							Если ЕстьКорЗначение Тогда 
								СписокПунктовМеню.Добавить("ОтчетПоПроводкам", ПредставлениеДляОтчетаПоПроводкам);
							Иначе
								СписокПунктовМеню.Добавить("КарточкаСчета", ПредставлениеДляКарточкиСчета);
							КонецЕсли;
						ИначеЕсли ИдентификаторОбъекта = "ОборотноСальдоваяВедомостьПоСчету" Тогда
							СписокПунктовМеню.Добавить("КарточкаСчета", ПредставлениеДляКарточкиСчета);
						ИначеЕсли ИдентификаторОбъекта = "ОборотноСальдоваяВедомостьПоПарнымСчетам" Тогда
							СписокПунктовМеню.Добавить("КарточкаСчета", ПредставлениеДляКарточкиСчета);
						ИначеЕсли ИдентификаторОбъекта = "ОборотыМеждуСубконто" Тогда
							СписокПунктовМеню.Добавить("ОтчетПоПроводкам", ПредставлениеДляОтчетаПоПроводкам);
						ИначеЕсли ИдентификаторОбъекта = "ОборотыСчета" Тогда				
							СписокПунктовМеню.Добавить("ОтчетПоПроводкам", ПредставлениеДляОтчетаПоПроводкам);
						КонецЕсли; 
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПоляРасшифровки = ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля();
		Если ПоляРасшифровки.Количество() > 0 И ЗначениеЗаполнено(ПоляРасшифровки[0].Значение) Тогда
			ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Истина);
			ПараметрыРасшифровки.Вставить("Значение", ПоляРасшифровки[0].Значение);
		КонецЕсли;
	КонецЕсли;
	
	НастройкиРасшифровки = Новый Структура;   
	Если СписокПунктовМеню <> Неопределено Тогда
		Для Каждого ПунктМеню Из СписокПунктовМеню Цикл
			Если ТипЗнч(ПунктМеню.Значение) = Тип("Строка") Тогда
				НастройкиРасшифровки.Вставить(ПунктМеню.Значение, ПолучитьНастройкиДляРасшифровки(ПунктМеню.Значение, ИдентификаторОбъекта, МассивПолей, ОтчетОбъект, УстановитьВсеПоказатели));
			КонецЕсли;
		КонецЦикла;
		
		ДанныеОбъекта.Вставить("НастройкиРасшифровки", НастройкиРасшифровки);
		Адрес = ПоместитьВоВременноеХранилище(ДанныеОбъекта, Адрес);
		
		ПараметрыРасшифровки.Вставить("СписокПунктовМеню", СписокПунктовМеню);
	КонецЕсли;

	Возврат ПараметрыРасшифровки;
	
КонецФункции

// Вызывается из обработчика ПриСозданииНаСервере формы отчета.
//
// Параметры:
//	Форма - УправляемаяФорма - Форма отчета.
//	Отказ - Булево - Признак отказа от открытия.
//	СтандартнаяОбработка - Булево - Признак необходимости выполнения стандартной обработки.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
		
	Отчет     = Форма.Отчет;
	Параметры = Форма.Параметры;
	РеквизитыФормы = РеквизитыФормы(Форма);
	
	ИнициализацияФормыОтчета(Отчет, РеквизитыФормы, Форма);
	
	Если Параметры.Свойство("ОткрытьРасшифровку") И Параметры.ОткрытьРасшифровку Тогда
		СтандартнаяОбработка = Ложь;
		ИнициализацияРасшифровкиПоНастройкам(Отчет, Параметры, РеквизитыФормы, Форма);
	ИначеЕсли Параметры.Свойство("ВидРасшифровки") Тогда
		СтандартнаяОбработка = Ложь;
		ИнициализацияРасшифровкиПоВиду(Отчет, Параметры, РеквизитыФормы, Форма);
	КонецЕсли;
	
	БухгалтерскиеОтчеты.СоздатьРеквизитыПоказателей(Форма);
	
КонецПроцедуры

// Отменяет выполнение фоновых заданий по списку идентификаторов.
//
// Параметры:
//	ИдентификаторыОтменяемыхЗаданий - Массив - Содержит идентификаторы фоновых заданий.
//
Процедура ОтменитьВыполнениеЗаданий(ИдентификаторыОтменяемыхЗаданий) Экспорт
	
	Для каждого ИдентификаторЗадания Из ИдентификаторыОтменяемыхЗаданий Цикл
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает список счетов, исключаемых из расчетов с контрагентами.
// 
// Параметры:
// 	Тип - Число - Определяет для кого надо получить настройку: 1 - покупатель, 2 - поставщик.
//
// Возвращаемое значение:
//	СписокЗначений - Счета расчетов с контрагентами.
//	
Функция ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(Тип = 1) Экспорт
	
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(БухгалтерскиеОтчетыКлиентСервер.ПолучитьКлючНастройкиПоТипуЗадолженности(Тип), "СписокСчетовИсключаемыхИзРасчета");
	
КонецФункции

// Сохраняет список счетов, исключаемых из расчетов с контрагентами.
//
// Параметры:
//	СписокСчетов - СписокЗначений - Список счетов.
//	Тип - Число - Определяет для кого надо получить настройку: 1 - покупатель, 2 - поставщик.
//
Процедура СохранитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(СписокСчетов, Тип = 1) Экспорт
	
	ОписаниеНастроек = Новый ОписаниеНастроек;
	ОписаниеНастроек.Представление = БухгалтерскиеОтчетыКлиентСервер.ПолучитьОписаниеНастройкиПоТипуЗадолженности(Тип);
	                                                                                                                                
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(БухгалтерскиеОтчетыКлиентСервер.ПолучитьКлючНастройкиПоТипуЗадолженности(Тип), "СписокСчетовИсключаемыхИзРасчета", СписокСчетов, ОписаниеНастроек);
	
КонецПроцедуры

// Возвращает текст с описанием просроченной задолженности покупателями.
//
// Возвращаемое значение:
//	ФорматированнаяСтрока - Текст описания.
//
Функция ПолучитьОписаниеПросроченнойЗадолженностиПокупателями() Экспорт
	
	СрокОплатыПокупателей = 30;//Константы.СрокОплатыПокупателей.Получить();
	
	Описание = ПолучитьОписаниеПросроченнойЗадолженности(СрокОплатыПокупателей);
	
	Меню = НСтр("ru=' Настройки / Параметры учета - '");
	
	Ссылка = Новый ФорматированнаяСтрока(НСтр("ru='Сроки оплаты'"),,,, "e1cib/command/ОбщаяКоманда.СрокиОплаты");
	
	Возврат Новый ФорматированнаяСтрока(Описание, Меню, Ссылка, ".");
	
КонецФункции

// Возвращает текст с описанием просроченной задолженности поставщикам.
//
// Возвращаемое значение:
//	ФорматированнаяСтрока - Текст описания.
//
Функция ПолучитьОписаниеПросроченнойЗадолженностиПоставщикам() Экспорт
	
	СрокОплатыПоставщикам = 30;//Константы.СрокОплатыПоставщикам.Получить();
	
	Описание = ПолучитьОписаниеПросроченнойЗадолженности(СрокОплатыПоставщикам);
	
	Меню = НСтр("ru=' Настройки / Параметры учета - '");
	
	Ссылка = Новый ФорматированнаяСтрока(НСтр("ru='Сроки оплаты'"),,,, "e1cib/command/ОбщаяКоманда.СрокиОплаты");
	
	Возврат Новый ФорматированнаяСтрока(Описание, Меню, Ссылка, ".");

КонецФункции 

// Определяет список возможных действий расшифровки.
//
// Параметры:
//  ИмяОтчета				 - Строка										 - Имя отчета для которого нужно определить возможные расшифровки.
//  АдресРасшифровки		 - Строка										 - Адрес во временном хранилище куда помещены данные расшифровки.
//  ИдентификаторРасшифровки - ИдентификаторРасшифровкиКомпоновкиДанных 	 - Идентификатор расшифровки из ячейки для которой вызвана расшифровка.
// 
// Возвращаемое значение:
//   СписокЗначений - Возможные действия расшифровки отчета.
//
Функция ВозможныеРасшифровки(Знач ИмяОтчета, Знач АдресРасшифровки, Знач ИдентификаторРасшифровки) Экспорт

	Расшифровка = ПолучитьИзВременногоХранилища(АдресРасшифровки);
	
	ДанныеРасшифровки = Неопределено;
	
	Если НЕ Расшифровка.Свойство("ДанныеРасшифровки", ДанныеРасшифровки) Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	
	ВозможныеРасшифровки = Новый СписокЗначений;
	
	ТекущийЭлементРасшифровки = ДанныеРасшифровки.Элементы.Получить(ИдентификаторРасшифровки);
	ПоляТекущейРасшифровки = ТекущийЭлементРасшифровки.ПолучитьПоля();
	
	Если ПоляТекущейРасшифровки.Количество() > 0
		И (ТекущийЭлементРасшифровки.ОсновноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение 
		ИЛИ ПоляТекущейРасшифровки.Количество() = 1) Тогда
		
			ЗначениеПоля = ПоляТекущейРасшифровки[0].Значение;
			Если ЗначениеЗаполнено(ЗначениеПоля) И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ЗначениеПоля)) Тогда
				ВозможныеРасшифровки.Добавить(ПоляТекущейРасшифровки[0].Значение, СтрШаблон(НСтр("ru = 'Открыть ""%1""'"), ПоляТекущейРасшифровки[0].Значение));
			КонецЕсли;
			
	КонецЕсли;
	
	РасшифровочныеОтчеты = БухгалтерскиеОтчетыРасшифровка.РасшифровочныеОтчеты(ДанныеРасшифровки, ИдентификаторРасшифровки, ИмяОтчета);
	
	Для Каждого Отчет Из РасшифровочныеОтчеты Цикл
		Если Отчет.ОтчетГотов Тогда
			ЗначениеРасшифровки = Новый Структура();
			ЗначениеРасшифровки.Вставить("ИмяОтчета", Отчет.Отчет);
			ЗначениеРасшифровки.Вставить("Реквизиты", Отчет.ЗначенияРеквизитов);
			
			ПредставлениеРасшифровки = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Отчет.ШаблонПредставления, Отчет.ЗначенияРеквизитов);
			
			ВозможныеРасшифровки.Добавить(ЗначениеРасшифровки, ПредставлениеРасшифровки);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозможныеРасшифровки;
	
КонецФункции

// Возвращает описание типов со справочниками, имеющими владельца организацию.
//
// Возвращаемое значение:
//	ОписаниеТипов - Содержит типы справочников, имеющими владельца организацию.
//
Функция ТипыСвязанныеСОрганизацией() Экспорт
	
	Возврат Новый ОписаниеТипов(Документы.ТипВсеСсылки(), 
		"СправочникСсылка.БанковскиеСчета,СправочникСсылка.ПодразделенияОрганизаций,
		|СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.Кассы");
	
КонецФункции

// Возвращает список имен макетов оформления отчета.
//
// Возвращаемое значение:
//	СписокЗначений - Содержит строки с именами макетов оформления.
//
Функция ПолучитьСписокМакетовОформления() Экспорт
	
	ПозицияВСпискеОтчетовБП = 0;
	
	СписокМакетовОформления = Новый СписокЗначений;
	Для Каждого ОбщийМакет Из БиблиотекаМакетовОформленияКомпоновкиДанных Цикл
		
		Если ОбщийМакет.Имя = БиблиотекаМакетовОформленияКомпоновкиДанных.БезОформления.Имя Тогда
			Продолжить;
		ИначеЕсли Лев(ОбщийМакет.Имя, 17) = "ОформлениеОтчетов" Тогда
			СписокМакетовОформления.Вставить(ПозицияВСпискеОтчетовБП, ОбщийМакет.Имя, ОбщийМакет.Представление);
			ПозицияВСпискеОтчетовБП = ПозицияВСпискеОтчетовБП + 1;
		Иначе
			СписокМакетовОформления.Добавить(ОбщийМакет.Имя, ОбщийМакет.Представление);
		КонецЕсли;

	КонецЦикла;

	Возврат СписокМакетовОформления;
	
КонецФункции

Функция ЗаполнитьПараметрыОтчетаИзНастроекКомпоновщика(ОтчетОбъект, КомпоновщикНастроекКД)
	
	// Получим параметры формирования отчета, сохраненные в параметре схемы КД.
	ПараметрНастройкиОтчета = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(КомпоновщикНастроекКД, "НастройкиОтчета");
	ЗначениеНастройкиОтчета = Неопределено;
	Если ПараметрНастройкиОтчета <> Неопределено Тогда
		ЗначениеНастройкиОтчета = ПараметрНастройкиОтчета.Значение.Получить();
	КонецЕсли;
	
	// Если в схеме КД нет служебного параметра "НастройкиОтчета" или он не инициализирован, то ничего не делаем.
	Если ЗначениеНастройкиОтчета = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МенеджерОтчета = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОтчетОбъект.Метаданные().ПолноеИмя());
	
	ПараметрыОтчета = МенеджерОтчета.ПустыеПараметрыКомпоновкиОтчета();
	
	ПараметрыОтчета.Вставить("СхемаКомпоновкиДанных",     ОтчетОбъект.СхемаКомпоновкиДанных);
	ПараметрыОтчета.Вставить("ИдентификаторОтчета",       ОтчетОбъект.Метаданные().Имя);
	ПараметрыОтчета.Вставить("НастройкиКомпоновкиДанных", КомпоновщикНастроекКД.ПолучитьНастройки());
	
	ЗаполнитьЗначенияСвойств(ПараметрыОтчета, ЗначениеНастройкиОтчета);
	
	// Стандартный период, используемый при формировании отчета в рассылке, хранится в отдельном параметре схемы КД.
	ПараметрПериод = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(КомпоновщикНастроекКД, "ПериодОтчета");
	Если ПараметрПериод <> Неопределено И ПараметрПериод.Использование
		И ТипЗнч(ПараметрПериод.Значение) = Тип("СтандартныйПериод") Тогда
		ПараметрыОтчета.Вставить("ПериодОтчета",  ПараметрПериод.Значение);
		ПараметрыОтчета.Вставить("НачалоПериода", ПараметрПериод.Значение.ДатаНачала);
		ПараметрыОтчета.Вставить("КонецПериода",  ПараметрПериод.Значение.ДатаОкончания);
		ПараметрыОтчета.Вставить("Период",        ПараметрПериод.Значение.ДатаОкончания);
	КонецЕсли;
	
	// Проверим наличие дополнительных параметров формирования отчета, которые зависят от каких-либо условий.
	// Определяются в модуле объекта отчета.
	ДопСвойства = КомпоновщикНастроекКД.Настройки.ДополнительныеСвойства;
	Если ДопСвойства.Свойство("ДополнительныеПараметрыОтчета") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыОтчета, ДопСвойства.ДополнительныеПараметрыОтчета, Истина);
	КонецЕсли;
	
	Возврат ПараметрыОтчета;
	
КонецФункции

// Проверяет необходимость выполнения обработки проверки заполнения.
// 
// Параметры:
//  ОтчетОбъект - ОтчетОбъект.* - Проверяемый отчет.
// 
// Возвращаемое значение:
//  Булево - Истина, если проверка не требуется, Ложь в противном случае.
//
Функция ПропуститьПроверкуЗаполнения(ОтчетОбъект) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОтчетОбъект, "КомпоновщикНастроек") Тогда
		
		ДополнительныеСвойства = ОтчетОбъект.КомпоновщикНастроек.Настройки.ДополнительныеСвойства;
		
		Если ДополнительныеСвойства.Свойство("ПропуститьПроверкуЗаполнения")
			И ДополнительныеСвойства.ПропуститьПроверкуЗаполнения Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Вызывается из обработчика события "ПриКомпоновкеРезультата".
//
// Параметры:
//  ОтчетОбъект - ОтчетОбъект - Объект отчета.
//  ДокументРезультат - ТабличныйДокумент - Табличный документ для вывода результата формирования отчета.
//  ДанныеРасшифровки - ДанныеРасшифровкиКомпоновкиДанных - Данные расшифровки.
//
Процедура ОбработкаСобытияПриКомпоновкеРезультата(ОтчетОбъект, ДокументРезультат, ДанныеРасшифровки) Экспорт
	
	ДокументРезультат.Очистить();
	
	// Параметры формирования отчета.
	ПараметрыОтчета = ЗаполнитьПараметрыОтчетаИзНастроекКомпоновщика(ОтчетОбъект, ОтчетОбъект.КомпоновщикНастроек);
	
	Если ПараметрыОтчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Формирование отчета и помещение результата во временное хранилище.
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
	
	// Получение результатов формирования и копирование результатов в параметр "ДокументРезультат".
	ДанныеОтчета = ПолучитьИзВременногоХранилища(АдресХранилища);
	ДокументРезультат.Вывести(ДанныеОтчета.Результат);
	
	ДанныеРасшифровки = ДанныеОтчета.ДанныеРасшифровки;
	
	// Для рассылки отчета. Отчет рассылается всегда, даже если он пустой.
	ДопСвойства = ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	ДопСвойства.Вставить("ОтчетПустой", Ложь);
	
	// Для рассылки отчета. Используется для заполнения параметров шаблонов текста письма, отправляемого в рассылке.
	МенеджерОтчета = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОтчетОбъект.Метаданные().ПолноеИмя());
	ДопСвойства.Вставить("ПредставлениеОтчета", МенеджерОтчета.ПолучитьТекстЗаголовка(ПараметрыОтчета));
	
КонецПроцедуры

Процедура СместитьПериодОтчета(НачалоМесяца, КонецМесяца, ИмяОтчета)
	
	Смещение = 0;
	БухгалтерскиеОтчетыКлиентСерверПереопределяемый.УстановитьСмещениеПериодаОтчета(Смещение, ИмяОтчета);
	Если Не ЗначениеЗаполнено(Смещение) Тогда
		Возврат;
	КонецЕсли;
	
	НачалоМесяца = ДобавитьМесяц(НачалоМесяца, Смещение);
	КонецМесяца  = КонецМесяца(НачалоМесяца);
	
КонецПроцедуры

#КонецОбласти
