
#Область ПрограммныйИнтерфейс

Процедура СформироватьДвиженияОперационнаяКурсоваяРазница(ДополнительныеСвойства, Движения, Отказ, ЭтоПриходДенежныхСредств, Конвертация = Ложь) Экспорт
	
	ТаблицаДляРасчетаОперационныхКурсовыхРазниц = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДляРасчетаОперационныхКурсовыхРазниц;
	
	Если ТаблицаДляРасчетаОперационныхКурсовыхРазниц.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыОперационнаяКурсоваяРазница(ТаблицаДляРасчетаОперационныхКурсовыхРазниц, Конвертация);
	
	Данные = Параметры.Данные[0]; 

	СчетУчетаДоходыОКР = ПланыСчетов.Хозрасчетный.ДоходыОтОперационныхКурсовыхРазниц;
	СчетУчетаУбыткиОКР = ПланыСчетов.Хозрасчетный.УбыткиОтОперационныхКурсовыхРазниц;
	
	ДанныеРасчета = ДанныеРасчетаСуммыКурсовойРазницы(Данные, ЭтоПриходДенежныхСредств);
	СуммаКурсовойРазницы 	= ДанныеРасчета.СуммаКурсовойРазницы;
	Доход 					= ДанныеРасчета.Доход;
	ДенежныйСчетВалютный 	= ДанныеРасчета.ДенежныйСчетВалютный;
	ОбаСчетаВалютные 		= ДанныеРасчета.ОбаСчетаВалютные;
	
	СтатьяДДСКурсоваяРазница = БухгалтерскийУчетСервер.СтатьяДДСКурсоваяРазница();
	СтатьяЗатратКурсоваяРазница = Справочники.СтатьиЗатрат.КурсовыеРазницы;
	
	Проводка = Движения.Хозрасчетный.Добавить();
	
	Проводка.Период      	= Данные.Период;
	Проводка.Организация 	= Данные.Организация;
	
	Если Доход Тогда
		Если ОбаСчетаВалютные ИЛИ ДенежныйСчетВалютный Тогда
			Проводка.СчетДт = Данные.ДенежныйСчет;
			Проводка.ВалютаДт = Данные.ВалютаДокумента;
		Иначе
			Проводка.СчетДт = Данные.СчетРасчетов;
			Проводка.ВалютаДт = Данные.ВалютаРасчетов;
		КонецЕсли;
		
		Проводка.СчетКт = СчетУчетаДоходыОКР;
		
		Если Конвертация Тогда
			Если ОбаСчетаВалютные ИЛИ ДенежныйСчетВалютный Тогда
				БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДенежныеСредства", Данные.КассаБанковскийСчетПриход);
			Иначе
				БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДенежныеСредства", Данные.КассаБанковскийСчетРасход);
			КонецЕсли;
			
			БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДвиженияДенежныхСредств", СтатьяДДСКурсоваяРазница);	
		Иначе
			// Заполнение субконто в случае если СчетКт денежные средства. 
			БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДенежныеСредства", Данные.КассаБанковскийСчет);
			БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДвиженияДенежныхСредств", СтатьяДДСКурсоваяРазница);	

			// Заполнение субконто в случае если СчетКт счет учета расчетов с контрагентом. 
			БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Данные.Контрагент);
			БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", Данные.ДоговорКонтрагента);
		КонецЕсли;
			
		Проводка.Содержание = НСтр("ru = 'Доходы от операционных курсовых разниц'");
		
	Иначе 
		Проводка.СчетДт = СчетУчетаУбыткиОКР;
		
		Если ОбаСчетаВалютные ИЛИ ДенежныйСчетВалютный Тогда
			Проводка.СчетКт = Данные.ДенежныйСчет;
			Проводка.ВалютаКт = Данные.ВалютаДокумента;
		Иначе
			Проводка.СчетКт = Данные.СчетРасчетов;
			Проводка.ВалютаКт = Данные.ВалютаРасчетов;
		КонецЕсли;
		
		Если Конвертация Тогда
			Если ОбаСчетаВалютные ИЛИ ДенежныйСчетВалютный Тогда
				БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДенежныеСредства", Данные.КассаБанковскийСчетПриход);
			Иначе
				БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДенежныеСредства", Данные.КассаБанковскийСчетРасход);
			КонецЕсли;
			
			БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДвиженияДенежныхСредств", СтатьяДДСКурсоваяРазница);
		Иначе
			// Заполнение субконто в случае если СчетКт денежные средства. 
			БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДенежныеСредства", Данные.КассаБанковскийСчет);
			БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДвиженияДенежныхСредств", СтатьяДДСКурсоваяРазница);

			// Заполнение субконто в случае если СчетКт счет учета расчетов с контрагентом. 
			БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Данные.Контрагент);
			БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", Данные.ДоговорКонтрагента);
		КонецЕсли;	
			
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат", СтатьяЗатратКурсоваяРазница);
		
		Проводка.Содержание = НСтр("ru = 'Убытки от операционных курсовых разниц'");
	
	КонецЕсли;
	
	Проводка.Сумма = ?(СуммаКурсовойРазницы > 0, СуммаКурсовойРазницы, СуммаКурсовойРазницы * (-1));;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Функция ДанныеРасчетаСуммыКурсовойРазницы(Данные, ЭтоПриходДенежныхСредств) Экспорт
	ДанныеРасчета = Новый Структура("СуммаКурсовойРазницы, Доход, ОбаСчетаВалютные, ДенежныйСчетВалютный", 0, ЛОЖЬ, ЛОЖЬ, ЛОЖЬ);
	
	// Валюта взаиморасчетов в валюте регламентированного учета. 
	Если Данные.ВалютаРасчетов = Данные.ВалютаРегламентированногоУчета Тогда 
		СуммаКурсовойРазницы = Данные.СуммаПлатежа * Данные.КурсВзаиморасчетовПоНацБанку / Данные.КратностьВзаиморасчетовПоНацБанку - Данные.СуммаВзаиморасчетов;
		
	// В документа в валюте регламентированного учета.				
	ИначеЕсли Данные.ВалютаДокумента = Данные.ВалютаРегламентированногоУчета Тогда
		СуммаКурсовойРазницы = Данные.СуммаПлатежа - Данные.СуммаВзаиморасчетов * Данные.КурсВзаиморасчетовПоНацБанку / Данные.КратностьВзаиморасчетовПоНацБанку;
		
	// Валюты отличны от валюты регламентированного учета.
	Иначе 
		СуммаКурсовойРазницы = Данные.СуммаПлатежа * Данные.КурсДокумента / Данные.КратностьДокумента - Данные.СуммаВзаиморасчетов * Данные.КурсВзаиморасчетовПоНацБанку / Данные.КратностьВзаиморасчетовПоНацБанку;
	КонецЕсли;				
	
	СчетРасчетовВалютный = Данные.СчетРасчетов.Валютный И НЕ Данные.ВалютаРасчетов = Данные.ВалютаРегламентированногоУчета;
	ДенежныйСчетВалютный = Данные.ДенежныйСчет.Валютный И НЕ Данные.ВалютаДокумента = Данные.ВалютаРегламентированногоУчета;
	
	Если НЕ СчетРасчетовВалютный И НЕ ДенежныйСчетВалютный Тогда
		Возврат ДанныеРасчета;	
	КонецЕсли;
	
	ОбаСчетаВалютные 	 = СчетРасчетовВалютный И ДенежныйСчетВалютный;
	
	Если Окр(СуммаКурсовойРазницы, 2) = 0 Тогда
		ДанныеРасчета.Вставить("СуммаКурсовойРазницы", 0);		
		Возврат ДанныеРасчета;
		
	// Расход валюты, убыток
	ИначеЕсли НЕ ДенежныйСчетВалютный И СчетРасчетовВалютный И СуммаКурсовойРазницы < 0 Тогда
		Если ЭтоПриходДенежныхСредств Тогда
			Доход = Ложь;
		Иначе
			Доход = Истина;                                                         
		КонецЕсли;
		
	// Расход валюты, доход		
	ИначеЕсли НЕ ДенежныйСчетВалютный И СчетРасчетовВалютный И СуммаКурсовойРазницы > 0 Тогда
		Если ЭтоПриходДенежныхСредств Тогда
			Доход = Истина;
		Иначе
			Доход = Ложь;
		КонецЕсли;
		
	// Приход валюты, убыток	
	ИначеЕсли ДенежныйСчетВалютный И НЕ СчетРасчетовВалютный И СуммаКурсовойРазницы < 0 Тогда
		Если ЭтоПриходДенежныхСредств Тогда
			Доход = Ложь;
		Иначе
			Доход = Истина;
		КонецЕсли;
		
	// Приход валюты, доход	
	ИначеЕсли ДенежныйСчетВалютный И НЕ СчетРасчетовВалютный И СуммаКурсовойРазницы > 0 Тогда
		Если ЭтоПриходДенежныхСредств Тогда
			Доход = Истина;
		Иначе
			Доход = Ложь;
		КонецЕсли;
		
	// Валюта - Валюта, убыток	
	ИначеЕсли ДенежныйСчетВалютный И СчетРасчетовВалютный И СуммаКурсовойРазницы < 0 Тогда
		Если ЭтоПриходДенежныхСредств Тогда
			Доход = Ложь;
		Иначе
			Доход = Истина;
		КонецЕсли;
		
	// Валюта - Валюта, доход		
	ИначеЕсли ДенежныйСчетВалютный И СчетРасчетовВалютный И СуммаКурсовойРазницы > 0 Тогда
		Если ЭтоПриходДенежныхСредств Тогда
			Доход = Истина;
		Иначе
			Доход = Ложь;
		КонецЕсли;	
	КонецЕсли;
	
	ДанныеРасчета.Вставить("СуммаКурсовойРазницы", 	СуммаКурсовойРазницы);
	ДанныеРасчета.Вставить("Доход", 				Доход);
	ДанныеРасчета.Вставить("ОбаСчетаВалютные", 		ОбаСчетаВалютные);
	ДанныеРасчета.Вставить("ДенежныйСчетВалютный", 	ДенежныйСчетВалютный);
	
	Возврат ДанныеРасчета;
	
КонецФункции // ()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПодготовитьПараметрыОперационнаяКурсоваяРазница(ТаблицаДляРасчетаОперационныхКурсовыхРазниц, Конвертация)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаДляРасчетаОперационныхКурсовыхРазниц

	СписокОбязательныхКолонок = ""
	+ "Период,"                         	// <Дата> - период движений - дата документа
	+ "Организация,"                    	// <СправочникСсылка.Организация> - организация
	+ "КассаБанковскийСчет,"     			// <СправочникСсылка.Касса>, <СправочникСсылка.БанковскиеСчета> - касса/банковский счет
	+ "ВалютаДокумента,"     				// <СправочникСсылка.Валюты> - валюта кассы/банка
	+ "ВалютаРегламентированногоУчета,"     // <СправочникСсылка.Валюты> - валюта регл.учета
	+ "ВалютаРасчетов,"           			// <СправочникСсылка.Валюты> - валюта взаиморасчетов	
	+ "КурсДокумента,"     					// <Число,10,4> - курс валюты документа
	+ "КратностьДокумента,"					// <Число,10,0> - кратность валюты документа
	+ "СчетРасчетов,"          				// <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов с контрагентом
	+ "ДенежныйСчет,"          				// <ПланСчетовСсылка.Хозрасчетный> - денежный счет учета
	+ "СуммаПлатежа,"           			// <Число,15,2> - сумма в валюте регламентированного учета
	+ "СуммаВзаиморасчетов," 				// <Число,15,2> - сумма в валюте взаиморасчетов
	+ "КурсВзаиморасчетовПоНацБанку,"     	// <Число,10,4> - курс валюты взаиморасчетов но НБКР
	+ "КратностьВзаиморасчетовПоНацБанку";	// <Число,10,0> - кратность валюты взаиморасчетов по НБКР
	
	Если Конвертация Тогда
		СписокОбязательныхКолонок = СписокОбязательныхКолонок
		+ ",КассаБанковскийСчетПриход"            	// <СправочникСсылка.Кассы> ИЛИ <СправочникСсылка.БанковскиеСчета> - касса или банковский счет прихода	
		+ ",КассаБанковскийСчетРасход";            	// <СправочникСсылка.Кассы> ИЛИ <СправочникСсылка.БанковскиеСчета> - касса или банковский Счет расходов
		
	Иначе
		СписокОбязательныхКолонок = СписокОбязательныхКолонок
		+ ",Контрагент"            			// <СправочникСсылка.Контраегенты> - контрагент	
		+ ",ДоговорКонтрагента";            // <СправочникСсылка.ДоговорыКонтрагентов> - договор контрагента
	КонецЕсли;
	
	Параметры.Вставить("Данные",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаДляРасчетаОперационныхКурсовыхРазниц, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

#КонецОбласти
