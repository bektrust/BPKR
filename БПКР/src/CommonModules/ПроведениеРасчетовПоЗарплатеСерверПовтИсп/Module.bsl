////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ ПО СОТРУДНИКУ

// Нужно использовать функцию ПроведениеРасчетовПоЗарплатеСервер.СведенияОСотруднике 
// Функция - получает Сведения о сотруднике
//
// Возвращаемое значение:
//  СведенияОСотруднике - Структура
Функция СведенияОСотруднике(Период, Организация, ФизЛицо) Экспорт 
	СведенияОСотруднике = РегистрыСведений.Сотрудники.ПолучитьПоследнее(Период, 
		Новый Структура("Организация, ФизЛицо", Организация, ФизЛицо));
	СведенияОСотруднике.Вставить("ВидРасчета", ПланыВидовРасчета.ВидыНачислений.ПустаяСсылка());
	СведенияОСотруднике.Вставить("РазмерОсновногоВидаРасчета", 0);
	СведенияОСотруднике.Вставить("Валюта", Справочники.Валюты.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлановыеНачисленияНачалоСрезПоследних.ФизЛицо КАК ФизЛицо,
		|	ПлановыеНачисленияНачалоСрезПоследних.Размер КАК РазмерОсновногоВидаРасчета,
		|	ПлановыеНачисленияНачалоСрезПоследних.Валюта КАК Валюта,
		|	ПлановыеНачисленияНачалоСрезПоследних.ВидРасчета КАК ВидРасчета
		|ИЗ
		|	РегистрСведений.ПлановыеНачисленияНачало.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И ФизЛицо = &ФизЛицо) КАК ПлановыеНачисленияНачалоСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияОкончание.СрезПоследних(
		|				&Период,
		|				Организация = &Организация
		|					И ФизЛицо = &ФизЛицо) КАК ПлановыеНачисленияОкончаниеСрезПоследних
		|		ПО ПлановыеНачисленияНачалоСрезПоследних.Организация = ПлановыеНачисленияОкончаниеСрезПоследних.Организация
		|			И ПлановыеНачисленияНачалоСрезПоследних.ФизЛицо = ПлановыеНачисленияОкончаниеСрезПоследних.ФизЛицо
		|			И ПлановыеНачисленияНачалоСрезПоследних.ВидРасчета = ПлановыеНачисленияОкончаниеСрезПоследних.ВидРасчета
		|			И ПлановыеНачисленияНачалоСрезПоследних.Регистратор = ПлановыеНачисленияОкончаниеСрезПоследних.ДокументСсылка
		|ГДЕ
		|	ПлановыеНачисленияНачалоСрезПоследних.Основной
		|	И ПлановыеНачисленияОкончаниеСрезПоследних.Организация ЕСТЬ NULL";
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда 
		ЗаполнитьЗначенияСвойств(СведенияОСотруднике, Выборка);	
	КонецЕсли;	

	Возврат СведенияОСотруднике;
КонецФункции // СведенияОСотруднике()

// Нужно использовать функцию ПроведениеРасчетовПоЗарплатеСервер.СтатусСотрудникаКакНалогоплательщика 
// Функция - получает статус сотрудника
//
// Возвращаемое значение:
//  Структура
Функция СтатусСотрудникаКакНалогоплательщика(Период, Организация, ФизЛицо) Экспорт 
	Возврат РегистрыСведений.СтатусыСотрудников.ПолучитьПоследнее(Период, Новый Структура("Организация, ФизЛицо", Организация, ФизЛицо));
КонецФункции // СтатусСотрудникаКакНалогоплательщика()

// Нужно использовать функцию ПроведениеРасчетовПоЗарплатеСервер.СпособОтраженияЗаработнойПлаты 
//
Функция СпособОтраженияЗаработнойПлаты(СтруктураОтбора) Экспорт 

	СпособОтражения = Справочники.СпособыОтраженияЗаработнойПлаты.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СпособыОтраженияЗаработнойПлаты.Подразделение КАК Подразделение,
		|	СпособыОтраженияЗаработнойПлаты.ВидРасчета КАК ВидРасчета,
		|	СпособыОтраженияЗаработнойПлаты.Ссылка КАК СпособОтражения
		|ПОМЕСТИТЬ ВременнаяТаблицаСпособыОтраженияЗаработнойПлаты
		|ИЗ
		|	Справочник.СпособыОтраженияЗаработнойПлаты КАК СпособыОтраженияЗаработнойПлаты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Подразделение,
		|	ВидРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		// 1. По Виду расчета и Подразделению.
		|ВЫБРАТЬ
		|	СпособыОтраженияЗаработнойПлаты.СпособОтражения КАК СпособОтражения
		|ПОМЕСТИТЬ ВременнаяТаблицаСчетаУчетаЗПОтбор
		|ИЗ
		|	ВременнаяТаблицаСпособыОтраженияЗаработнойПлаты КАК СпособыОтраженияЗаработнойПлаты
		|ГДЕ
		|	СпособыОтраженияЗаработнойПлаты.Подразделение = &Подразделение
		|	И СпособыОтраженияЗаработнойПлаты.ВидРасчета = &ВидРасчета
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		// 2. По Виду расчета и пустому подразделению.
		|ВЫБРАТЬ
		|	СпособыОтраженияЗаработнойПлаты.СпособОтражения КАК СпособОтражения
		|ИЗ
		|	ВременнаяТаблицаСпособыОтраженияЗаработнойПлаты КАК СпособыОтраженияЗаработнойПлаты
		|ГДЕ
		|	СпособыОтраженияЗаработнойПлаты.Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	И СпособыОтраженияЗаработнойПлаты.ВидРасчета = &ВидРасчета
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		// 3. По подразделению и пустому виду расчета.
		|ВЫБРАТЬ
		|	СпособыОтраженияЗаработнойПлаты.СпособОтражения КАК СпособОтражения
		|ИЗ
		|	ВременнаяТаблицаСпособыОтраженияЗаработнойПлаты КАК СпособыОтраженияЗаработнойПлаты
		|ГДЕ
		|	СпособыОтраженияЗаработнойПлаты.Подразделение = &Подразделение
		|	И СпособыОтраженияЗаработнойПлаты.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ВидыНачислений.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		// 4. По пустому подразделению и пустому виду расчета.
		|ВЫБРАТЬ
		|	СпособыОтраженияЗаработнойПлаты.СпособОтражения КАК СпособОтражения
		|ИЗ
		|	ВременнаяТаблицаСпособыОтраженияЗаработнойПлаты КАК СпособыОтраженияЗаработнойПлаты
		|ГДЕ
		|	СпособыОтраженияЗаработнойПлаты.Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	И СпособыОтраженияЗаработнойПлаты.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ВидыНачислений.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВременнаяТаблицаСчетаУчетаЗПОтбор.СпособОтражения КАК СпособОтражения
		|ИЗ
		|	ВременнаяТаблицаСчетаУчетаЗПОтбор КАК ВременнаяТаблицаСчетаУчетаЗПОтбор";
	Запрос.УстановитьПараметр("Подразделение", СтруктураОтбора.Подразделение);
	Запрос.УстановитьПараметр("ВидРасчета", СтруктураОтбора.ВидРасчета);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		СпособОтражения = ВыборкаДетальныеЗаписи.СпособОтражения;
	КонецЕсли;;
	
	Возврат СпособОтражения;	
КонецФункции 

// Нужно использовать функцию ПроведениеРасчетовПоЗарплатеСервер.НормыБольничныхЛистов 
// Функция - получает размеры для расчета больничных листов в зависимости от стажа
//
// Возвращаемое значение:
//  Структура
Функция НормыБольничныхЛистов(КоличествоЛетСтажа) Экспорт 

	Размеры = Новый Структура;
	Размеры.Вставить("НижняяГраница", 0);
	Размеры.Вставить("ДнейОрганизации", 0);
	Размеры.Вставить("Процент", 0);
	Размеры.Вставить("ПроцентБеременность", 0);
	Размеры.Вставить("РазмерЗаСчетСФ", 0);
	Размеры.Вставить("РазмерБеременностьЗаСчетСФ", 0);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НормыБольничныхЛистов.НижняяГраница КАК НижняяГраница,
		|	НормыБольничныхЛистов.ДнейОрганизации КАК ДнейОрганизации,
		|	НормыБольничныхЛистов.Процент КАК Процент,
		|	НормыБольничныхЛистов.ПроцентБеременность КАК ПроцентБеременность,
		|	НормыБольничныхЛистов.РазмерЗаСчетСФ КАК РазмерЗаСчетСФ,
		|	НормыБольничныхЛистов.РазмерБеременностьЗаСчетСФ КАК РазмерБеременностьЗаСчетСФ
		|ИЗ
		|	РегистрСведений.НормыБольничныхЛистов КАК НормыБольничныхЛистов
		|ГДЕ
		|	НормыБольничныхЛистов.НижняяГраница <= &КоличествоЛетСтажа
		|
		|УПОРЯДОЧИТЬ ПО
		|	НижняяГраница УБЫВ";
	Запрос.УстановитьПараметр("КоличествоЛетСтажа", КоличествоЛетСтажа);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Размеры, ВыборкаДетальныеЗаписи);	
	КонецЕсли;
	
	Возврат Размеры;	
КонецФункции // НормыБольничныхЛистов()
