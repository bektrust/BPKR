#Область СлужебныйПрограммныйИнтерфейс

#Область СлужебныйПрограммныйИнтерфейсWebСервис

// Текстовый документ настроек.
// 
// Параметры:
//  НастройкиККМ - Структура - Настройки ККМ
//  ВерсияФорматаОбмена - Строка - Версия формата обмена
// 
// Возвращаемое значение:
//  ТекстовыйДокумент - Текстовый документ настроек
Функция ТекстовыйДокументНастроек(НастройкиККМ, ВерсияФорматаОбмена) Экспорт
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстСообщения = ТекстXMLНастроек(НастройкиККМ, ВерсияФорматаОбмена);
	ТекстовыйДокумент.УстановитьТекст(ТекстСообщения);
	
	Возврат ТекстовыйДокумент;
	
КонецФункции

// Текст XML Настроек.
// 
// Параметры:
//  НастройкиККМ - Структура - Настройки ККМ
//  ВерсияФорматаОбмена - Строка - Версия формата обмена
// 
// Возвращаемое значение:
//  Строка - Текст XMLНастроек
Функция ТекстXMLНастроек(НастройкиККМ, ВерсияФорматаОбмена) Экспорт
	
	ОбъектОбмена = ОбъектНастройкиККМ(НастройкиККМ, ВерсияФорматаОбмена);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектОбмена);
	ТекстСообщения = ЗаписьXML.Закрыть();
	
	Возврат ТекстСообщения;
	
КонецФункции

// Текстовый документ прайс листа.
// 
// Параметры:
//  ПрайсЛист - Массив - Прайс лист.
//  ВерсияФорматаОбмена - Строка - Версия формата обмена
// 
// Возвращаемое значение:
//  ТекстовыйДокумент - Текстовый документ прайс листа
Функция ТекстовыйДокументПрайсЛиста(ПрайсЛист, ВерсияФорматаОбмена) Экспорт
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстСообщения = ТекстXMLПрайсЛиста(ПрайсЛист, ВерсияФорматаОбмена);
	ТекстовыйДокумент.УстановитьТекст(ТекстСообщения);
	
	Возврат ТекстовыйДокумент;
	
КонецФункции

// Текст XMLПрайс листа.
// 
// Параметры:
//  ПрайсЛист - Массив - Прайс лист
//  ВерсияФорматаОбмена - Строка - Версия формата обмена
// 
// Возвращаемое значение:
//  Строка - Текст XMLПрайс листа
Функция ТекстXMLПрайсЛиста(ПрайсЛист, ВерсияФорматаОбмена) Экспорт
	
	ОбъектОбмена = ОбъектПрайсЛист(ПрайсЛист, ВерсияФорматаОбмена);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектОбмена);
	ТекстСообщения = ЗаписьXML.Закрыть();
	
	Возврат ТекстСообщения;
	
КонецФункции

// Текст XMLЗаказов.
// 
// Параметры:
//  Заказы - Массив из см. МенеджерОфлайнОборудования.ЗаписьЗаказа - Заказы
//  ВерсияФорматаОбмена - Строка - Версия формата обмена.
// 
// Возвращаемое значение:
//  Строка, Булево - Текст XMLЗаказов
Функция ТекстXMLЗаказов(Заказы, ВерсияФорматаОбмена) Экспорт
	
		
		ОбъектОбмена = ОбъектЗаказы(Заказы, ВерсияФорматаОбмена);
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку("UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектОбмена);
		ТекстСообщения = ЗаписьXML.Закрыть();
		
		Возврат ТекстСообщения;
		
	
КонецФункции

#КонецОбласти

// Текстовый документ данные загружены.
// 
// Параметры:
//  ВерсияФорматаОбмена - Строка - Версия формата обмена.
// 
// Возвращаемое значение:
//  ТекстовыйДокумент - Текстовый документ данные загружены
Функция ТекстовыйДокументДанныеЗагружены(ВерсияФорматаОбмена) Экспорт
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	URIИмен = URIПространстваИмен(ВерсияФорматаОбмена);
	
	ИмяТипа = "ImportData";
	
	ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, ИмяТипа);
	
	ОбъектВыгрузки = ФабрикаXDTO.Создать(ТипОбъекта);
	
	ОбъектВыгрузки.ВерсияФормата = Формат(ВерсияФорматаОбмена, "ЧГ=0");
	ОбъектВыгрузки.Обработан = ТекущаяДатаСеанса();
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектВыгрузки);
	ТекстСообщения = ЗаписьXML.Закрыть();
	
	ТекстовыйДокумент.УстановитьТекст(ТекстСообщения);
	Возврат ТекстовыйДокумент;
	
КонецФункции

// Фабрика XDTO.
// 
// Параметры:
//  ВерсияФорматаОбмена - Строка - Версия формата обмена
// 
// Возвращаемое значение:
//  ФабрикаXDTO - Фабрика XDTO
Функция ФабрикаXDTO(ВерсияФорматаОбмена) Экспорт
	
	Пакет = ФабрикаXDTO.Пакеты.Получить(URIПространстваИмен(ВерсияФорматаОбмена));
	МассивПакетов = Новый Массив();
	МассивПакетов.Добавить(Пакет);
	Фабрика = Новый ФабрикаXDTO(,МассивПакетов);
	
	Возврат Фабрика;
	
КонецФункции

// URIПространства имен.
// 
// Параметры:
//  ВерсияФорматаОбмена - Неопределено, Строка - Версия формата обмена
// 
// Возвращаемое значение:
//  Строка - URIПространства имен
Функция URIПространстваИмен(ВерсияФорматаОбмена = Неопределено) Экспорт
	
	URIПространстваИмен = "http://www.1c.ru/EquipmentService/3.0.0.3";
	
	Возврат URIПространстваИмен;
	
КонецФункции

// Загружаемые данные из ККМ.
// 
// Параметры:
//  Отказ - Булево - Отказ
//  XMLТекст - Строка - XMLТекст
//  ВыходныеПараметры - Структура - Выходные параметры
//  ВерсияФорматаОбмена - Строка - Версия формата обмена
// 
// Возвращаемое значение:
//  Структура - Загружаемые данные из ККМ:
// * ОтчетыОПродажах - Массив из Структура -
// * ВскрытияАлкогольнойТары - Массив из Структура -
Функция ЗагружаемыеДанныеИзККМ(Отказ, XMLТекст, ВыходныеПараметры, ВерсияФорматаОбмена) Экспорт
	
	ЗагружаемыеДанныеИзККМ = МенеджерОфлайнОборудованияКлиентСервер.ЗагружаемыеДанныеИзККМ();
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(XMLТекст);
	
	Фабрика = ФабрикаXDTO(ВерсияФорматаОбмена);
	
	ИмяТипа = "ImportData";
	
	ТипXDTO = Фабрика.Тип(URIПространстваИмен(ВерсияФорматаОбмена), ИмяТипа);
	
	Попытка
		ДанныеИзККМ = Фабрика.ПрочитатьXML(ЧтениеXML, ТипXDTO);
	Исключение
		
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru='При чтении файла-отчета произошла ошибка.'") 
			+ Символы.ПС + ОписаниеОшибки;
		
		Отказ = Истина;
		
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, ТекстСообщения);
	КонецПопытки;
	
	ЧтениеXML.Закрыть();
	
	ЗаполнитьОтчетыОПродажах(ДанныеИзККМ.ОтчетыОПродажах, ЗагружаемыеДанныеИзККМ.ОтчетыОПродажах, ВерсияФорматаОбмена);
	
	Возврат ЗагружаемыеДанныеИзККМ;
	
КонецФункции

Процедура ЗаполнитьОтчетыОПродажах(ОтчетыОПродажахXDTO, ОтчетыОПродажах, ВерсияФорматаОбмена) Экспорт
	
	Если ОтчетыОПродажахXDTO = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ОтчетОПродажахXTDO Из ОтчетыОПродажахXDTO.ОтчетОПродажах Цикл
		
		ОтчетОПродажахККМ = МенеджерОфлайнОборудованияКлиентСервер.ОтчетОПродажахККМ();
		
		ОтчетОПродажахККМ.НомерСмены 				= ОтчетОПродажахXTDO.НомерСмены;
		ОтчетОПродажахККМ.ДатаОткрытияСмены 		= ОтчетОПродажахXTDO.ДатаОткрытияСмены;
		ОтчетОПродажахККМ.ДатаЗакрытияСмены 		= ОтчетОПродажахXTDO.ДатаЗакрытияСмены;
		ОтчетОПродажахККМ.УникальныйИдентификатор 	= ОтчетОПродажахXTDO.УУИД;
		ОтчетОПродажахККМ.СтатусСмены 				= ОборудованиеЧекопечатающиеУстройстваКлиентСервер.СтатусСменыПоКоду(ОтчетОПродажахXTDO.СтатусСмены);
		
		Если НЕ ОтчетОПродажахXTDO.Чеки = Неопределено Тогда
			
			Для Каждого ЧекXDTO Из ОтчетОПродажахXTDO.Чеки.Чек Цикл
				
				// Чек
				ЧекККМ = МенеджерОфлайнОборудованияКлиентСервер.ЧекККМ();
				
				
				Если НЕ ЧекXDTO.КодТипаРасчета = Неопределено Тогда
					ЧекККМ.ТипРасчета =
					ОборудованиеЧекопечатающиеУстройстваКлиентСервер.РасчетДенежнымиСредствамиПоКоду(ЧекXDTO.КодТипаРасчета);
				КонецЕсли;
				
				Если НЕ ЧекXDTO.НомерСвязанногоДокументаККМ = Неопределено Тогда
					ЧекККМ.НомерСвязанногоДокументаККМ = ЧекXDTO.НомерСвязанногоДокументаККМ;
				КонецЕсли;
				
				Если НЕ ЧекXDTO.УУИДСвязанногоДокументаККМ = Неопределено Тогда
					ЧекККМ.УникальныйИдентификаторСвязанногоДокументаККМ = ЧекXDTO.УУИДСвязанногоДокументаККМ;
				КонецЕсли;
				
				Если НЕ ЧекXDTO.ТипСвязанногоДокументаККМ = Неопределено Тогда
					
					Если ЧекXDTO.ТипСвязанногоДокументаККМ = "Order" Тогда
						ЧекККМ.ТипСвязанногоДокументаККМ = "Заказ";
						
					ИначеЕсли ЧекXDTO.ТипСвязанногоДокументаККМ = "Check" Тогда
						ЧекККМ.ТипСвязанногоДокументаККМ = "Чек";
						
					КонецЕсли;
					
				КонецЕсли;
				
				ЧекККМ.НомерЧека = ЧекXDTO.Номер;
				ЧекККМ.ДатаЧека  = ЧекXDTO.Дата;
				ЧекККМ.УникальныйИдентификатор = ЧекXDTO.УУИД;
				
				// Товары
				Если НЕ ЧекXDTO.Товары = Неопределено Тогда
					
					Для Каждого СтрокаТоварXDTO Из ЧекXDTO.Товары.ЧекТовар Цикл
						
						ТоварЧекаККМ = МенеджерОфлайнОборудованияКлиентСервер.ТоварЧекаККМ();
						
						Если НЕ СтрокаТоварXDTO.КодПризнакаСпособаРасчета = Неопределено Тогда
							ТоварЧекаККМ.ПризнакСпособаРасчета = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПризнакСпособаРасчетаПоКоду(СтрокаТоварXDTO.КодПризнакаСпособаРасчета);
						КонецЕсли;
						
						ЗаполнитьЗначенияСвойств(ТоварЧекаККМ, СтрокаТоварXDTO,
						"Код,
						|Количество,
						|Сумма,
						|Цена
						|");
						
						Если НЕ СтрокаТоварXDTO.СтавкаНДС = Неопределено Тогда
							ТоварЧекаККМ.СтавкаНДС = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.СтавкаНДСПоКоду(СтрокаТоварXDTO.СтавкаНДС);
						КонецЕсли;
						
						Если НЕ СтрокаТоварXDTO.СтавкаНСП = Неопределено Тогда
							ТоварЧекаККМ.СтавкаНСП = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.СтавкаНСППоКоду(СтрокаТоварXDTO.СтавкаНСП);
						КонецЕсли;
						
							
							Если НЕ СтрокаТоварXDTO.ШтрихкодыМаркированнойПродукции = Неопределено Тогда
								Для Каждого СтрокаШтрихкодыМаркированнойПродукцииXDTO Из СтрокаТоварXDTO.ШтрихкодыМаркированнойПродукции Цикл
									СтруктураЗаписи = Новый Структура;
									СтруктураЗаписи.Вставить("ШтрихкодМаркированнойПродукции");
									СтруктураЗаписи.Вставить("ТипМаркированнойПродукции");
									
									ЗаполнитьЗначенияСвойств(СтруктураЗаписи, СтрокаШтрихкодыМаркированнойПродукцииXDTO); 
									
									ТоварЧекаККМ.ШтрихкодыМаркированнойПродукции.Добавить(СтруктураЗаписи);
								КонецЦикла;

							КонецЕсли;
							
						
						Если ЗначениеЗаполнено(СтрокаТоварXDTO.УУИДТовара) Тогда
							ТоварЧекаККМ.УникальныйИдентификаторНоменклатуры = СтрокаТоварXDTO.УУИДТовара;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(СтрокаТоварXDTO.УУИДХарактеристики) Тогда
							ТоварЧекаККМ.УникальныйИдентификаторХарактеристики = СтрокаТоварXDTO.УУИДХарактеристики;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(СтрокаТоварXDTO.УУИДУпаковки) Тогда
							ТоварЧекаККМ.УникальныйИдентификаторУпаковки = СтрокаТоварXDTO.УУИДУпаковки;
						КонецЕсли;
						
						ЧекККМ.Товары.Добавить(ТоварЧекаККМ);
						
					КонецЦикла;
					
				КонецЕсли;
				
				// Оплаты
				Если НЕ ЧекXDTO.Оплаты = Неопределено Тогда
					
					Для Каждого СтрокаОплатаXDTO Из ЧекXDTO.Оплаты.Оплата Цикл
						
						ОплатаЧекаККМ = МенеджерОфлайнОборудованияКлиентСервер.ОплатаЧекаККМ();
						
						ЗаполнитьЗначенияСвойств(ОплатаЧекаККМ, СтрокаОплатаXDTO,
						"СуммаНаличнойОплаты,
						|СуммаПредоплатой,
						|СуммаПостоплатой,
						|СуммаЭлектроннойОплаты,
						|КодВидаЭлектроннойОплаты");
						
						Если ЗначениеЗаполнено(СтрокаОплатаXDTO.УУИДВидаЭлектроннойОплаты) Тогда
							ОплатаЧекаККМ.УникальныйИдентификаторВидаЭлектроннойОплатыОплаты = 
							СтрокаОплатаXDTO.УУИДВидаЭлектроннойОплаты;
						КонецЕсли;
						
						ЧекККМ.Оплаты.Добавить(ОплатаЧекаККМ);
						
					КонецЦикла;
					
				КонецЕсли;
				
				ОтчетОПродажахККМ.Чеки.Добавить(ЧекККМ);
				
			КонецЦикла;
			
		КонецЕсли;
		
		// ДвиженияДС
		Если НЕ ОтчетОПродажахXTDO.ДвиженияДС = Неопределено Тогда
			
			Для Каждого ДвижениеДСXDTO Из ОтчетОПродажахXTDO.ДвиженияДС.ДвижениеДС Цикл
				
				ДвижениеДСККМ = МенеджерОфлайнОборудованияКлиентСервер.ДвижениеДСККМ();
				
				ЗаполнитьЗначенияСвойств(ДвижениеДСККМ, ДвижениеДСXDTO,
					"Дата,
					|Номер,
					|Сумма
					|");
				
				Если ДвижениеДСXDTO.ТипДвижения = "Income" Тогда
					
					ДвижениеДСККМ.ТипДвижения = "Внесение";
				ИначеЕсли ДвижениеДСXDTO.ТипДвижения = "Outcome" Тогда
					
					ДвижениеДСККМ.ТипДвижения = "Выемка";
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДвижениеДСXDTO.УУИД) Тогда
					
					ДвижениеДСККМ.УникальныйИдентификатор = ДвижениеДСXDTO.УУИД;
					
				КонецЕсли;
				
				ОтчетОПродажахККМ.ДвиженияДС.Добавить(ДвижениеДСККМ);
				
			КонецЦикла;
			
		КонецЕсли;
		
		ОтчетыОПродажах.Добавить(ОтчетОПродажахККМ);
		
	КонецЦикла;
	
КонецПроцедуры



Процедура ЗаполнитьОтчетОПроверкахЦен(ПроверкиЦенниковXDTO, ОтчетыОЦенниках, ВерсияФорматаОбмена) Экспорт
	
	Если ПроверкиЦенниковXDTO = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
		
		Для Каждого ОтчетОЦенникахXTDO Из ПроверкиЦенниковXDTO.ОтчетОЦенниках Цикл
			
			ОтчетОЦенниках = МенеджерОфлайнОборудованияКлиентСервер.ОтчетОЦенниках();
			
			Если ЗначениеЗаполнено(ОтчетОЦенникахXTDO.Дата) Тогда
				ОтчетОЦенниках.Дата = ОтчетОЦенникахXTDO.Дата;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОтчетОЦенникахXTDO.Номер) Тогда
				ОтчетОЦенниках.Номер = ОтчетОЦенникахXTDO.Номер;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОтчетОЦенникахXTDO.УУИД) Тогда
				ОтчетОЦенниках.УникальныйИдентификатор = ОтчетОЦенникахXTDO.УУИД;
			КонецЕсли;
			
			Если НЕ ОтчетОЦенникахXTDO.Товары = Неопределено Тогда
				
				Для Каждого ТоварXDTO Из ОтчетОЦенникахXTDO.Товары.ОтчетОЦенникахТовар Цикл
					
					Товар = МенеджерОфлайнОборудованияКлиентСервер.ТоварОтчетаОЦенниках();
					
					Товар.Код = ТоварXDTO.Код;
					
					Если ЗначениеЗаполнено(ТоварXDTO.Штрихкод) Тогда
						Товар.Штрихкод = ТоварXDTO.Штрихкод;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ТоварXDTO.УУИДТовара) Тогда
						Товар.УникальныйИдентификаторНоменклатуры = ТоварXDTO.УУИДТовара;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ТоварXDTO.УУИДХарактеристики) Тогда
						Товар.УникальныйИдентификаторХарактеристики = ТоварXDTO.УУИДХарактеристики;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ТоварXDTO.УУИДУпаковки) Тогда
						Товар.УникальныйИдентификаторУпаковки = ТоварXDTO.УУИДУпаковки;
					КонецЕсли;
					
					ОтчетОЦенниках.Товары.Добавить(Товар);
					
				КонецЦикла;
				
			КонецЕсли;
			
			ОтчетыОЦенниках.Добавить(ОтчетОЦенниках);
		КонецЦикла;
		
	
КонецПроцедуры

// Уникальность идентификатора web сервис оборудования.
// 
// Параметры:
//  ИдентификаторУстройства -СправочникСсылка.ОфлайнОборудование - Идентификатор устройства.
//  ИдентификаторWebСервисОборудования - Строка -  Идентификатор web сервис оборудования
// 
// Возвращаемое значение:
//  Булево - Уникальность идентификатора web сервис оборудования
Функция УникальностьИдентификатораWebСервисОборудования(ИдентификаторУстройства, ИдентификаторWebСервисОборудования) Экспорт
	
	Уникален = Истина;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|    1
	|ИЗ
	|    Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|    ПодключаемоеОборудование.ИдентификаторWebСервисОборудования = &ИдентификаторWebСервисОборудования
	|    И ПодключаемоеОборудование.Ссылка <> &Ссылка
	|");
	
	Запрос.УстановитьПараметр("ИдентификаторWebСервисОборудования", ИдентификаторWebСервисОборудования);
	Запрос.УстановитьПараметр("Ссылка"      , ИдентификаторУстройства);
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Уникален = Ложь;
	КонецЕсли;
	
	Возврат Уникален;
	
КонецФункции

Процедура ПакетыОбработаны(Отказ, ПакетыОбработаны, Выгрузка, Пакеты, ВыходныеПараметры, ВерсияФорматаОбмена) Экспорт
	
	Результат = Истина;
	
	Если Выгрузка Тогда
		
		СтрокаТипОбъекта = "ExportData";
		
	Иначе
		
		СтрокаТипОбъекта = "ImportData";
		
	КонецЕсли;
	
	ОбъектXDTO = Неопределено;
	ТипXDTO = ФабрикаXDTO.Тип(URIПространстваИмен(ВерсияФорматаОбмена), СтрокаТипОбъекта);
	
	Для Каждого ТекПакет Из Пакеты Цикл
		
		ЧтениеXML = Неопределено;
		Если Не СоздатьЧтениеXML(ТекПакет, ЧтениеXML, ВыходныеПараметры) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Попытка
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипXDTO);
		Исключение
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			
			СообщениеОбОшибке = НСтр("ru='При проверке файла на обработанность произошла ошибка.'")
				+ Символы.ПС + ПодробноеПредставлениеОшибки;
			
			СоздатьСообщениеОбОшибке(ВыходныеПараметры, СообщениеОбОшибке);
			Отказ = Истина;
			Возврат;
		КонецПопытки;
		
		Если Не ЗначениеЗаполнено(ОбъектXDTO.Обработан) Тогда
			Результат = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	ПакетыОбработаны = Результат;
	
КонецПроцедуры

// Функция возвращает массив из пакетов данных.
// 
// Параметры:
//  СтруктураПрайсЛиста - Структура - Структура прайс листа
//  КоличествоЭлементовВПакете - Число - Количество элементов в пакете
// 
// Возвращаемое значение:
//  Массив из см. МенеджерОфлайнОборудованияКлиентСервер.ПрайсЛистККМ- Прайс лист по пакетам
Функция ПрайсЛистПоПакетам(СтруктураПрайсЛиста, КоличествоЭлементовВПакете) Экспорт
	
	МассивПакетов = Новый Массив;
	
	КоличествоЭлементов = СтруктураПрайсЛиста.ГруппыТоваров.Количество() + СтруктураПрайсЛиста.Товары.Количество();
	КоличествоПакетов   = КоличествоПакетов(КоличествоЭлементовВПакете, КоличествоЭлементов);
	
	Если КоличествоЭлементовВПакете = 0 Тогда
		КоличествоЭлементовВПакете = КоличествоЭлементов;
	КонецЕсли;
	
	Для НомерПакета = 1 По КоличествоПакетов Цикл
		
		СтруктураПакета = МенеджерОфлайнОборудованияКлиентСервер.ПрайсЛистККМ();
		СтруктураПакета.Вставить("ПолнаяВыгрузка", СтруктураПрайсЛиста.ПолнаяВыгрузка);
		
		СтруктураПакета.ДанныеПоставщиков = СтруктураПрайсЛиста.ДанныеПоставщиков;
		СтруктураПакета.ЕдиницыИзмерения = СтруктураПрайсЛиста.ЕдиницыИзмерения;
		
		СтруктураПакета.Вставить("НомерПакета", НомерПакета);
		СтруктураПакета.Вставить("ПакетовВсего", КоличествоПакетов);
		
		Для НомерЭлемента = 1 По КоличествоЭлементовВПакете Цикл
			
			// Группы
			Если НЕ СтруктураПрайсЛиста.ГруппыТоваров.Количество() = 0 Тогда
				
				СтруктураПакета.ГруппыТоваров.Добавить(СтруктураПрайсЛиста.ГруппыТоваров[0]);
				СтруктураПрайсЛиста.ГруппыТоваров.Удалить(0);
				Продолжить;
			КонецЕсли;
			
			// Товары
			Если НЕ СтруктураПрайсЛиста.Товары.Количество() = 0 Тогда
				
				СтруктураПакета.Товары.Добавить(СтруктураПрайсЛиста.Товары[0]);
				СтруктураПрайсЛиста.Товары.Удалить(0);
				Продолжить;
			КонецЕсли;
			
		КонецЦикла;
		
		МассивПакетов.Добавить(СтруктураПакета);
		
	КонецЦикла;
	
	Возврат МассивПакетов;
	
КонецФункции

// Текстовый документ данных выгрузки.
// 
// Параметры:
//  ДанныеДляВыгрузки - Массив - Данные для выгрузки
//  ВерсияФорматаОбмена - Строка -Версия формата обмена
// 
// Возвращаемое значение:
//  ТекстовыйДокумент - Текстовый документ данных выгрузки
Функция ТекстовыйДокументДанныхВыгрузки(ДанныеДляВыгрузки, ВерсияФорматаОбмена) Экспорт
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	URIИмен      = URIПространстваИмен(ВерсияФорматаОбмена);
	
	ТипОбъекта      = ФабрикаXDTO.Тип(URIИмен, "ExportData");
	ОбъектДанныеВыгрузки = ФабрикаXDTO.Создать(ТипОбъекта);
	
	ОбъектДанныеВыгрузки.ВерсияФормата = Формат(ВерсияФорматаОбмена, "ЧГ=0");
	
	// Настройки ККМ
	Если НЕ ДанныеДляВыгрузки.НастройкиККМ = Неопределено Тогда
		
		ЕстьВыгружаемыеДанные = Ложь;
		
		ОбъектНастройкиККМ = ОбъектНастройкиККМ(ДанныеДляВыгрузки.НастройкиККМ, ВерсияФорматаОбмена, ЕстьВыгружаемыеДанные);
		
		Если ЕстьВыгружаемыеДанные Тогда
			ОбъектДанныеВыгрузки.НастройкиККМ = ОбъектНастройкиККМ;
		КонецЕсли;
		
	КонецЕсли;
	
	// ПрайсЛист
	Если НЕ ДанныеДляВыгрузки.ПрайсЛист = Неопределено Тогда
		
		ЕстьВыгружаемыеДанные = Ложь;
		
		ОбъектПрайсЛист = ОбъектПрайсЛист(ДанныеДляВыгрузки.ПрайсЛист, ВерсияФорматаОбмена, ЕстьВыгружаемыеДанные);
		
		Если ЕстьВыгружаемыеДанные Тогда
			ОбъектДанныеВыгрузки.ПрайсЛист = ОбъектПрайсЛист;
		КонецЕсли;
		
	КонецЕсли;
	
	// Заказы
	Если НЕ ДанныеДляВыгрузки.Заказы = Неопределено Тогда
		
		ЕстьВыгружаемыеДанные = Ложь;
		ОбъектЗаказы = ОбъектЗаказы(ДанныеДляВыгрузки.Заказы, ВерсияФорматаОбмена, ЕстьВыгружаемыеДанные);
		
		Если ЕстьВыгружаемыеДанные Тогда
			ОбъектДанныеВыгрузки.Заказы = ОбъектЗаказы;
		КонецЕсли;
		
	КонецЕсли;
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектДанныеВыгрузки);
	ТекстСообщения = ЗаписьXML.Закрыть();
	
	ТекстовыйДокумент.УстановитьТекст(ТекстСообщения);
	
	Возврат ТекстовыйДокумент;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОбъектНастройкиККМ(ВыгружаемыеНастройкиККМ, ВерсияФорматаОбмена, ЕстьВыгружаемыеНастройки = Ложь)
	
	URIИмен = URIПространстваИмен(ВерсияФорматаОбмена);
	ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, "Settings");
	
	ОбъектНастройкиККМ = ФабрикаXDTO.Создать(ТипОбъекта);
	
	// 200Х
	
	// НаименованиеОрганизации
	Если ЗначениеЗаполнено(ВыгружаемыеНастройкиККМ.НаименованиеОрганизации) Тогда
		
		ОбъектНастройкиККМ.НаименованиеОрганизации = ВыгружаемыеНастройкиККМ.НаименованиеОрганизации;
		ЕстьВыгружаемыеНастройки = Истина;
	КонецЕсли;
	
	// НаименованиеМагазина
	Если ЗначениеЗаполнено(ВыгружаемыеНастройкиККМ.НаименованиеМагазина) Тогда
		
		ОбъектНастройкиККМ.НаименованиеМагазина = ВыгружаемыеНастройкиККМ.НаименованиеМагазина;
		ЕстьВыгружаемыеНастройки = Истина;
	КонецЕсли;
	
	// ИНН
	Если ЗначениеЗаполнено(ВыгружаемыеНастройкиККМ.ИНН) Тогда
		
		ОбъектНастройкиККМ.ИНН = ВыгружаемыеНастройкиККМ.ИНН;
		ЕстьВыгружаемыеНастройки = Истина;
	КонецЕсли;
	
	
	// АдресТочкиПродажи
	Если ЗначениеЗаполнено(ВыгружаемыеНастройкиККМ.АдресТочкиПродажи) Тогда
		
		ОбъектНастройкиККМ.АдресТочкиПродажи = ВыгружаемыеНастройкиККМ.АдресТочкиПродажи;
		ЕстьВыгружаемыеНастройки = Истина;
		
	КонецЕсли;
	
	// МестоТочкиПродажи
	Если ЗначениеЗаполнено(ВыгружаемыеНастройкиККМ.МестоТочкиПродажи) Тогда
		
		ОбъектНастройкиККМ.МестоТочкиПродажи = ВыгружаемыеНастройкиККМ.МестоТочкиПродажи;
		ЕстьВыгружаемыеНастройки = Истина;
		
	КонецЕсли;
	
	// ЭлектроннаяПочтаОтправителяЧека
	Если ЗначениеЗаполнено(ВыгружаемыеНастройкиККМ.ЭлектроннаяПочтаОтправителяЧека) Тогда
		
		ОбъектНастройкиККМ.ЭлектроннаяПочтаОтправителяЧека = ВыгружаемыеНастройкиККМ.ЭлектроннаяПочтаОтправителяЧека;
		ЕстьВыгружаемыеНастройки = Истина;
		
	КонецЕсли;
	
	Если ВыгружаемыеНастройкиККМ.Свойство("ПараметрыДрайвераККМ")
		И НЕ ВыгружаемыеНастройкиККМ.ПараметрыДрайвераККМ = Неопределено Тогда
		
		ПараметрыДрайвераККМ = ВыгружаемыеНастройкиККМ.ПараметрыДрайвераККМ;
		
		
	КонецЕсли;
	
	// СистемаНалогообложения
	Если ЗначениеЗаполнено(ВыгружаемыеНастройкиККМ.СистемаНалогообложения) Тогда
		
		ОбъектНастройкиККМ.КодСистемыНалогообложения = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.КодСистемыНалогообложенияККТ(ВыгружаемыеНастройкиККМ.СистемаНалогообложения);
		
		ЕстьВыгружаемыеНастройки = Истина;
		
	КонецЕсли;
	

	// ПлательщикНДС
	Если ЗначениеЗаполнено(ВыгружаемыеНастройкиККМ.ПлательщикНДС) Тогда
		
		ОбъектНастройкиККМ.ПлательщикНДС = ВыгружаемыеНастройкиККМ.ПлательщикНДС;
		ЕстьВыгружаемыеНастройки = Истина;
		
	КонецЕсли;
	
	// ВидыЭлектроннойОплаты
	МассивВидовОплаты = ВыгружаемыеНастройкиККМ.ВидыЭлектроннойОплаты; //Массив Из См. МенеджерОфлайнОборудования.ПолучитьЗаписьВидЭлектроннойОплаты - .
	Если ЗначениеЗаполнено(ВыгружаемыеНастройкиККМ.ВидыЭлектроннойОплаты) Тогда
		
		ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, "ВидыЭлектроннойОплаты");
		ОбъектВидыЭлектроннойОплаты = ФабрикаXDTO.Создать(ТипОбъекта);
		
		ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, "ВидЭлектроннойОплатыЗапись");
		Для Каждого ВидОплаты Из МассивВидовОплаты Цикл
			
			ОбъектВидЭлектроннойОплатыЗапись = ФабрикаXDTO.Создать(ТипОбъекта);
			
			// Код (обязательное)
			Если ЗначениеЗаполнено(ВидОплаты.Код) Тогда
				ОбъектВидЭлектроннойОплатыЗапись.Код = ВидОплаты.Код;
			Иначе
				ВызватьИсключениеЗаполнения("ВидЭлектроннойОплаты", "Код");
			КонецЕсли;
			
			// Наименование (обязательное)
			Если ЗначениеЗаполнено(ВидОплаты.Наименование) Тогда
				ОбъектВидЭлектроннойОплатыЗапись.Наименование = ВидОплаты.Наименование;
			Иначе
				ВызватьИсключениеЗаполнения("ВидЭлектроннойОплаты", "Наименование");
			КонецЕсли;
			
			// ТипЭлектроннойОплаты (обязательное)
			Если ЗначениеЗаполнено(ВидОплаты.ТипЭлектроннойОплаты) Тогда
				ОбъектВидЭлектроннойОплатыЗапись.ТипЭлектроннойОплаты = ВидОплаты.ТипЭлектроннойОплаты;
			Иначе
				ВызватьИсключениеЗаполнения("ВидЭлектроннойОплаты", "ТипЭлектроннойОплаты");
			КонецЕсли;
			
			// УникальныйИдентификатор (необязательное)
			Если ЗначениеЗаполнено(ВидОплаты.УникальныйИдентификатор) Тогда
				ОбъектВидЭлектроннойОплатыЗапись.УУИД = ВидОплаты.УникальныйИдентификатор;
			КонецЕсли;
			
			СписокВидовЭлектроннойОплаты = ОбъектВидыЭлектроннойОплаты.ВидЭлектроннойОплатыЗапись; //СписокXDTO - 
			СписокВидовЭлектроннойОплаты.Добавить(ОбъектВидЭлектроннойОплатыЗапись);
			
		КонецЦикла;
		
		ОбъектНастройкиККМ.ВидыЭлектроннойОплаты = ОбъектВидыЭлектроннойОплаты;
		ЕстьВыгружаемыеНастройки = Истина;
		
	КонецЕсли;
	
	Возврат ОбъектНастройкиККМ;
	
КонецФункции


Функция ОбъектПрайсЛист(ВыгружаемыйПрайсЛист, ВерсияФорматаОбмена, ЕстьВыгружаемыеДанные = Ложь)
	
	//200Х
	
	URIИмен = URIПространстваИмен(ВерсияФорматаОбмена);
	
	ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, "PriceList");
	ОбъектПрайсЛист = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Если ВыгружаемыйПрайсЛист.Свойство("ПолнаяВыгрузка") И ВыгружаемыйПрайсЛист.ПолнаяВыгрузка Тогда
		ОбъектПрайсЛист.ПолнаяВыгрузка = Истина;
	КонецЕсли;
	
	// Товары
	Если ЗначениеЗаполнено(ВыгружаемыйПрайсЛист.Товары) Тогда
		
		ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, "Товары");
		ОбъектТовары = ФабрикаXDTO.Создать(ТипОбъекта);
		
		ТипОбъектаТовар = ФабрикаXDTO.Тип(URIИмен, "ТоварЗапись");
		Товары = ВыгружаемыйПрайсЛист.Товары; //Массив Из См. МенеджерОфлайнОборудования.ПолучитьЗаписьТовара - 
		Для Каждого Товар Из Товары Цикл
			
			ЗаписьТовар = ФабрикаXDTO.Создать(ТипОбъектаТовар);
			
			// Код (необязательное)
			Если ЗначениеЗаполнено(Товар.Код) Тогда
				ЗаписьТовар.Код = Товар.Код;
			КонецЕсли;
			
			// Штрихкоды (необязательное)
			Если ЗначениеЗаполнено(Товар.Штрихкоды) Тогда
				ЗаписьТовар.Штрихкоды = ОбъектШтрихкоды(URIИмен, Товар.Штрихкоды);
			КонецЕсли;
			
			// Цена (необязательное)
			Если ЗначениеЗаполнено(Товар.Цена) Тогда
				ЗаписьТовар.Цена = Товар.Цена;
			КонецЕсли;
			
			// Остаток (необязательное)
			Если ЗначениеЗаполнено(Товар.Остаток) И Товар.Остаток > 0 Тогда
				ЗаписьТовар.Остаток = Формат(Товар.Остаток, "ЧЦ=15; ЧДЦ=3; ЧРД=.; ЧГ=0");
			КонецЕсли;
			
			
			// ЦенаВключаетНалоги (обязательное)
			Если ЗначениеЗаполнено(Товар.ЦенаВключаетНалоги) Тогда
				ЗаписьТовар.ЦенаВключаетНалоги = Товар.ЦенаВключаетНалоги;
			Иначе
				ВызватьИсключениеЗаполнения("Товар", "ЦенаВключаетНалоги");
			КонецЕсли;
			
			// УникальныйИдентификатор (обязательное)
			Если ЗначениеЗаполнено(Товар.УникальныйИдентификатор) Тогда
				ЗаписьТовар.УУИД = Товар.УникальныйИдентификатор;
			Иначе
				ВызватьИсключениеЗаполнения("Товар", "УникальныйИдентификатор");
			КонецЕсли;
			
			// Наименование (обязательное)
			Если ЗначениеЗаполнено(Товар.Наименование) Тогда
				ЗаписьТовар.Наименование = Товар.Наименование;
			Иначе
				ВызватьИсключениеЗаполнения("Товар", "Наименование");
			КонецЕсли;
			
			// СтавкаНДС (обязательное)
			Если ЗначениеЗаполнено(Товар.СтавкаНДС) Тогда
				
				
				ЗаписьТовар.СтавкаНДС = Товар.СтавкаНДС;
			Иначе
				ВызватьИсключениеЗаполнения("Товар", "СтавкаНДС");
			КонецЕсли;
			
			
			// СтавкаНСП (обязательное)
			Если ЗначениеЗаполнено(Товар.СтавкаНСП) Тогда
				ЗаписьТовар.СтавкаНСП = Товар.СтавкаНСП;
			Иначе
				ВызватьИсключениеЗаполнения("Товар", "СтавкаНСП");
			КонецЕсли;
			
			// ПризнакПредметаРасчета (обязательное)
			Если ЗначениеЗаполнено(Товар.ПризнакПредметаРасчета) Тогда
				ЗаписьТовар.ПризнакПредметаРасчета =
					ОборудованиеЧекопечатающиеУстройстваКлиентСервер.КодПризнакаПредметаРасчета(Товар.ПризнакПредметаРасчета);
			Иначе
				ВызватьИсключениеЗаполнения("Товар", "ПризнакПредметаРасчета");
			КонецЕсли;
			
			
			// КодТНВЭД (обязательное для товара)
			Если ЗначениеЗаполнено(Товар.КодТНВЭД) Тогда
				ЗаписьТовар.КодТНВЭД = Товар.КодТНВЭД;
			Иначе
				Если Товар.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Товар Тогда 
					ВызватьИсключениеЗаполнения("Товар", "КодТНВЭД");
				КонецЕсли;	
			КонецЕсли;
			
			// КодГКЭД (обязательное для услуги)
			Если ЗначениеЗаполнено(Товар.КодГКЭД) Тогда				
				ЗаписьТовар.КодГКЭД = Товар.КодГКЭД;
			Иначе                                      
				Если Товар.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Услуга Тогда 
					ВызватьИсключениеЗаполнения("Товар", "КодГКЭД");
				КонецЕсли;	
			КонецЕсли;
			
			// КодЕдиницыИзмерения (необязательное)
			Если ЗначениеЗаполнено(Товар.КодЕдиницыИзмерения) Тогда
				ЗаписьТовар.КодБазовойЕдиницыИзмерения = Товар.КодЕдиницыИзмерения;
			КонецЕсли;
			
			// УникальныйИдентификаторЕдиницыИзмерения (необязательное)
			Если ЗначениеЗаполнено(Товар.УникальныйИдентификаторЕдиницыИзмерения) Тогда
				ЗаписьТовар.УУИДБазовойЕдиницыИзмерения = Товар.УникальныйИдентификаторЕдиницыИзмерения;
			КонецЕсли;
			
			// КодГруппы (необязательное)
			Если ЗначениеЗаполнено(Товар.КодГруппы) Тогда
				ЗаписьТовар.КодГруппы = Товар.КодГруппы;
			КонецЕсли;
			
			// УникальныйИдентификаторГруппы (необязательное)
			Если ЗначениеЗаполнено(Товар.УникальныйИдентификаторГруппы) Тогда
				ЗаписьТовар.УУИДГруппы = Товар.УникальныйИдентификаторГруппы;
			КонецЕсли;
			
			// Артикул (необязательное)
			Если ЗначениеЗаполнено(Товар.Артикул) Тогда
				ЗаписьТовар.Артикул = Товар.Артикул;
			КонецЕсли;
			
			// Описание (необязательное)
			Если ЗначениеЗаполнено(Товар.Описание) Тогда
				ЗаписьТовар.Описание = Товар.Описание;
			КонецЕсли;
			
			// ЭтоВесовойТовар (необязательное)
			Если Товар.ЭтоВесовойТовар Тогда
				ЗаписьТовар.ЭтоВесовойТовар = Товар.ЭтоВесовойТовар;
			КонецЕсли;
			
			
			// КодВидаТовара (необязательное)
			Если ЗначениеЗаполнено(Товар.КодВидаТовара) Тогда
				ЗаписьТовар.КодВидаТовара = Товар.КодВидаТовара;
			КонецЕсли;
			
			// УникальныйИдентификаторВидаТовара (необязательное)
			Если ЗначениеЗаполнено(Товар.УникальныйИдентификаторВидаТовара) Тогда
				ЗаписьТовар.УУИДВидаТовара = Товар.УникальныйИдентификаторВидаТовара;
			КонецЕсли;
			
			
			// ИмеетХарактеристики И Характеристики (необязательное)
			Если Товар.ИмеетХарактеристики Тогда
				
				ЗаписьТовар.ИмеетХарактеристики = Товар.ИмеетХарактеристики;
				ЗаписьТовар.Характеристики = ОбъектХарактеристики(Товар, ВерсияФорматаОбмена);
				
			КонецЕсли;
			
			// ИмеетУпаковки И Упаковки (необязательное)
			Если Товар.ИмеетУпаковки Тогда
				
				Если Товар.ИмеетХарактеристики Тогда
					
					ТекстСообщения = НСтр("ru='Ошибка встраивания БПО (Офлайн-оборудование).
					|Флаг ""ИмеетУпаковки"" не может быть ""Истина"", если у товара имеются характеристики (флаг ИмеетХарактеристики).'");
					
					ВызватьИсключение ТекстСообщения;
					
				КонецЕсли;
				
				ЗаписьТовар.ИмеетУпаковки = Товар.ИмеетУпаковки;
				ЗаписьТовар.Упаковки = ОбъектУпаковки(Товар, ВерсияФорматаОбмена);
				
			КонецЕсли;
			
			
			Если Товар.ЭтоМаркированнаяПродукция Тогда
				
				
				ЗаписьТовар.ЭтоМаркированнаяПродукция = Товар.ЭтоМаркированнаяПродукция;
				Если ЗначениеЗаполнено(Товар.ВидМаркированнойПродукции) Тогда
					ЗаписьТовар.КодМаркированнойПродукции = МенеджерОфлайнОборудования.КодВидаМаркировкиККТ(Товар.ВидМаркированнойПродукции);
				КонецЕсли;

			КонецЕсли;
			
			
			СписокТоваров = ОбъектТовары.ТоварЗапись; //СписокXDTO - 
			СписокТоваров.Добавить(ЗаписьТовар);
			
		КонецЦикла;
		
		ОбъектПрайсЛист.Товары = ОбъектТовары;
		ЕстьВыгружаемыеДанные = Истина;
		
	КонецЕсли;
	
	// ГруппыТоваров
	Если ЗначениеЗаполнено(ВыгружаемыйПрайсЛист.ГруппыТоваров) Тогда
		
		ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, "ГруппыТоваров");
		ОбъектГруппыТоваров = ФабрикаXDTO.Создать(ТипОбъекта);
		
		ТипОбъектаГруппа = ФабрикаXDTO.Тип(URIИмен, "ГруппаТоваровЗапись");
		
		Группы = ВыгружаемыйПрайсЛист.ГруппыТоваров; //Массив Из См. МенеджерОфлайнОборудования.ПолучитьЗаписьГруппыТоваров - .
		
		Для Каждого Группа Из Группы Цикл
			
			ЗаписьГруппа = ФабрикаXDTO.Создать(ТипОбъектаГруппа);
			
			// Код (обязательное)
			Если ЗначениеЗаполнено(Группа.Код) Тогда
				ЗаписьГруппа.Код = Группа.Код;
			Иначе
				ВызватьИсключениеЗаполнения("Группа", "Код");
			КонецЕсли;
			
			// Наименование (обязательное)
			Если ЗначениеЗаполнено(Группа.Наименование) Тогда
				ЗаписьГруппа.Наименование = Группа.Наименование;
			Иначе
				ВызватьИсключениеЗаполнения("Группа", "Наименование");
			КонецЕсли;
			
			// УникальныйИдентификатор (обязательное)
			Если ЗначениеЗаполнено(Группа.УникальныйИдентификатор) Тогда
				ЗаписьГруппа.УУИД = Группа.УникальныйИдентификатор;
			Иначе
				ВызватьИсключениеЗаполнения("Группа", "УникальныйИдентификатор");
			КонецЕсли;
			
			// КодГруппы (необязательное)
			Если ЗначениеЗаполнено(Группа.КодГруппы) Тогда
				ЗаписьГруппа.КодГруппы = Группа.КодГруппы;
			КонецЕсли;
			
			// УникальныйИдентификаторГруппы (необязательное)
			Если ЗначениеЗаполнено(Группа.УникальныйИдентификаторГруппы) Тогда
				ЗаписьГруппа.УУИДГруппы = Группа.УникальныйИдентификаторГруппы;
			КонецЕсли;
			
			СписокГруппТоваров = ОбъектГруппыТоваров.ГруппаТоваровЗапись; //СписокXDTO - 
			СписокГруппТоваров.Добавить(ЗаписьГруппа);
		КонецЦикла;
		
		ОбъектПрайсЛист.ГруппыТоваров = ОбъектГруппыТоваров;
		ЕстьВыгружаемыеДанные = Истина;
		
	КонецЕсли;
	
	// ЕдиницыИзмерения
	Если ЗначениеЗаполнено(ВыгружаемыйПрайсЛист.ЕдиницыИзмерения) Тогда
		
		ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, "ЕдиницыИзмерения");
		ОбъектЕдиницыИзмерения = ФабрикаXDTO.Создать(ТипОбъекта);
		
		ТипЕдиницаИзмеренияЗапись = ФабрикаXDTO.Тип(URIИмен, "ЕдиницаИзмеренияЗапись");
		
		ЕдиницыИзмерения = ВыгружаемыйПрайсЛист.ЕдиницыИзмерения; // Массив Из см. МенеджерОфлайнОборудования.ПолучитьЗаписьЕдиницыИзмерения - 
		
		Для Каждого ЕИ Из ЕдиницыИзмерения Цикл
			
			ЗаписьЕИ = ФабрикаXDTO.Создать(ТипЕдиницаИзмеренияЗапись);
			
			// Код (обязательное)
			Если ЗначениеЗаполнено(ЕИ.Код) Тогда
				ЗаписьЕИ.Код = ЕИ.Код;
			Иначе
				ВызватьИсключениеЗаполнения("ЕдиницаИзмерения", "Код");
			КонецЕсли;
			
			// Наименование (обязательное)
			Если ЗначениеЗаполнено(ЕИ.Наименование) Тогда
				ЗаписьЕИ.Наименование = ЕИ.Наименование;
			Иначе
				ВызватьИсключениеЗаполнения("ЕдиницаИзмерения", "Наименование");
			КонецЕсли;
			
			// УникальныйИдентификатор (необязательное)
			Если ЗначениеЗаполнено(ЕИ.УникальныйИдентификатор) Тогда
				ЗаписьЕИ.УУИД = ЕИ.УникальныйИдентификатор;
			КонецЕсли;
			
			// КодОКЕИ (необязательное)
			Если ЗначениеЗаполнено(ЕИ.КодОКЕИ) Тогда
				ЗаписьЕИ.КодОКЕИ = ЕИ.КодОКЕИ;
			КонецЕсли;
			
			СписокЕдиницИзмерения = ОбъектЕдиницыИзмерения.ЕдиницаИзмеренияЗапись; //СписокXDTO - 
			СписокЕдиницИзмерения.Добавить(ЗаписьЕИ);
			
		КонецЦикла;
		
		ОбъектПрайсЛист.ЕдиницыИзмерения = ОбъектЕдиницыИзмерения;
		ЕстьВыгружаемыеДанные = Истина;
		
	КонецЕсли;
	
	
	// ВидыТоваров
	Если ЗначениеЗаполнено(ВыгружаемыйПрайсЛист.ВидыТоваров) Тогда
		
		ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, "ВидыТоваров");
		ОбъектВидыТоваров = ФабрикаXDTO.Создать(ТипОбъекта);
		
		ТипВидТовараЗапись= ФабрикаXDTO.Тип(URIИмен, "ВидТовараЗапись");
		
		ВидыТоваров = ВыгружаемыйПрайсЛист.ВидыТоваров; // Массив Из см. МенеджерОфлайнОборудования.ПолучитьЗаписьВидТовара- 
		
		Для Каждого ВидТовара Из ВидыТоваров Цикл
			
			ЗаписьВидТовара = ФабрикаXDTO.Создать(ТипВидТовараЗапись);
			
			// Код (обязательное)
			Если ЗначениеЗаполнено(ВидТовара.Код) Тогда
				ЗаписьВидТовара.Код = ВидТовара.Код;
			Иначе
				ВызватьИсключениеЗаполнения("ВидТовара", "Код");
			КонецЕсли;
			
			// Наименование (обязательное)
			Если ЗначениеЗаполнено(ВидТовара.Наименование) Тогда
				ЗаписьВидТовара.Наименование = ВидТовара.Наименование;
			Иначе
				ВызватьИсключениеЗаполнения("ВидТовара", "Наименование");
			КонецЕсли;
			
			// УникальныйИдентификатор (необязательное)
			Если ЗначениеЗаполнено(ВидТовара.УникальныйИдентификатор) Тогда
				ЗаписьВидТовара.УУИД = ВидТовара.УникальныйИдентификатор;
			КонецЕсли;
			
			// СтавкаНДС (обязательное)
			Если ЗначениеЗаполнено(ВидТовара.СтавкаНДС) Тогда
				ЗаписьВидТовара.СтавкаНДС = ВидТовара.СтавкаНДС;
			Иначе
				ВызватьИсключениеЗаполнения("ВидТовара", "СтавкаНДС");
			КонецЕсли;
			
			// СтавкаНСП (обязательное)
			Если ЗначениеЗаполнено(ВидТовара.СтавкаНСП) Тогда
				ЗаписьВидТовара.СтавкаНСП = ВидТовара.СтавкаНСП;
			Иначе
				ВызватьИсключениеЗаполнения("ВидТовара", "СтавкаНСП");
			КонецЕсли;
			
			// ПризнакПредметаРасчета (обязательное)
			Если ЗначениеЗаполнено(ВидТовара.ПризнакПредметаРасчета) Тогда
				ЗаписьВидТовара.ПризнакПредметаРасчета 
					= ОборудованиеЧекопечатающиеУстройстваКлиентСервер.КодПризнакаПредметаРасчета(ВидТовара.ПризнакПредметаРасчета);
			Иначе
				ВызватьИсключениеЗаполнения("ВидТовара", "ПризнакПредметаРасчета");
			КонецЕсли;
			
			СписокВидовТоваров = ОбъектВидыТоваров.ВидТовараЗапись; //СписокXDTO - 
			СписокВидовТоваров.Добавить(ЗаписьВидТовара);
			
		КонецЦикла;
		
		ОбъектПрайсЛист.ВидыТоваров = ОбъектВидыТоваров;
		ЕстьВыгружаемыеДанные = Истина;
		
	КонецЕсли;


	
	Возврат ОбъектПрайсЛист;
	
КонецФункции


Функция ОбъектЗаказы(ВыгружаемыеЗаказы, ВерсияФорматаОбмена, ЕстьВыгружаемыеДанные = Ложь)
	
	//200Х
	
	URIИмен = URIПространстваИмен(ВерсияФорматаОбмена);
	ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, "Orders");
	ОбъектЗаказы = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Если НЕ ЗначениеЗаполнено(ВыгружаемыеЗаказы) Тогда
		Возврат ОбъектЗаказы;
	КонецЕсли;
	
	ТипОбъектаЗаказ = ФабрикаXDTO.Тип(URIИмен, "Заказ");
	
	Для Каждого Заказ Из ВыгружаемыеЗаказы Цикл
		
		ЗаписьЗаказ = ФабрикаXDTO.Создать(ТипОбъектаЗаказ);
		
		// НомерЗаказа (обязательное)
		Если ЗначениеЗаполнено(Заказ.НомерЗаказа) Тогда
			ЗаписьЗаказ.НомерЗаказа = Заказ.НомерЗаказа;
		Иначе
			ВызватьИсключениеЗаполнения("Заказ", "Наименование");
		КонецЕсли;
		
		// ДатаЗаказа (обязательное)
		Если ЗначениеЗаполнено(Заказ.ДатаЗаказа) Тогда
			ЗаписьЗаказ.ДатаЗаказа = Заказ.ДатаЗаказа;
		Иначе
			ВызватьИсключениеЗаполнения("Заказ", "ДатаЗаказа");
		КонецЕсли;
		
		// УникальныйИдентификатор (обязательное)
		Если ЗначениеЗаполнено(Заказ.УникальныйИдентификатор) Тогда
			ЗаписьЗаказ.УУИД = Заказ.УникальныйИдентификатор;
		Иначе
			ВызватьИсключениеЗаполнения("Заказ", "УникальныйИдентификатор");
		КонецЕсли;
		
		// ГородДоставки (необязательное)
		Если ЗначениеЗаполнено(Заказ.ГородДоставки) Тогда
			ЗаписьЗаказ.ГородДоставки = Заказ.ГородДоставки;
		КонецЕсли;
		
		// УлицаДоставки (необязательное)
		Если ЗначениеЗаполнено(Заказ.УлицаДоставки) Тогда
			ЗаписьЗаказ.УлицаДоставки = Заказ.УлицаДоставки;
		КонецЕсли;
		
		// НомерДомаДоставки (необязательное)
		Если ЗначениеЗаполнено(Заказ.НомерДомаДоставки) Тогда
			ЗаписьЗаказ.НомерДомаДоставки = Заказ.НомерДомаДоставки;
		КонецЕсли;
		
		// НомерКвартирыДоставки (необязательное)
		Если ЗначениеЗаполнено(Заказ.НомерКвартирыДоставки) Тогда
			ЗаписьЗаказ.НомерКвартирыДоставки = Заказ.НомерКвартирыДоставки;
		КонецЕсли;
		
		// НомерПодъездаДоставки (необязательное)
		Если ЗначениеЗаполнено(Заказ.НомерПодъездаДоставки) Тогда
			ЗаписьЗаказ.НомерПодъездаДоставки = Заказ.НомерПодъездаДоставки;
		КонецЕсли;
		
		// НомерЭтажаДоставки (необязательное)
		Если ЗначениеЗаполнено(Заказ.НомерЭтажаДоставки) Тогда
			ЗаписьЗаказ.НомерЭтажаДоставки = Заказ.НомерЭтажаДоставки;
		КонецЕсли;
		
		// НомерТелефонаКлиента (необязательное)
		Если ЗначениеЗаполнено(Заказ.НомерТелефонаКлиента) Тогда
			ЗаписьЗаказ.НомерТелефонаКлиента = Заказ.НомерТелефонаКлиента;
		КонецЕсли;
		
		// EmailКлиента (необязательное)
		Если ЗначениеЗаполнено(Заказ.EmailКлиента) Тогда
			ЗаписьЗаказ.EmailКлиента = Заказ.EmailКлиента;
		КонецЕсли;
		
		// ДатаДоставки (необязательное)
		Если ЗначениеЗаполнено(Заказ.ДатаДоставки) Тогда
			ЗаписьЗаказ.ДатаДоставки = Заказ.ДатаДоставки;
		КонецЕсли;
		
		// СтатусЗаказа (необязательное)
		Если ЗначениеЗаполнено(Заказ.СтатусЗаказа) Тогда
			ЗаписьЗаказ.СтатусЗаказа = Заказ.СтатусЗаказа;
		КонецЕсли;
		
		// Комментарий (необязательное)
		Если ЗначениеЗаполнено(Заказ.Комментарий) Тогда
			ЗаписьЗаказ.Комментарий = Заказ.Комментарий;
		КонецЕсли;
		
		// ИмяКлиента (необязательное)
		Если ЗначениеЗаполнено(Заказ.ИмяКлиента) Тогда
			ЗаписьЗаказ.ИмяКлиента = Заказ.ИмяКлиента;
		КонецЕсли;
		
		// ФамилияКлиента (необязательное)
		Если ЗначениеЗаполнено(Заказ.ФамилияКлиента) Тогда
			ЗаписьЗаказ.ФамилияКлиента = Заказ.ФамилияКлиента;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Заказ.Товары) Тогда
			ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, "ЗаказТовары");
			ОбъектЗаказТовары = ФабрикаXDTO.Создать(ТипОбъекта);
			
			ТипОбъектаТоварЗапись = ФабрикаXDTO.Тип(URIИмен, "ЗаказТоварыЗапись");
			Для Каждого Товар Из Заказ.Товары Цикл
				
				ЗаписьТовар = ФабрикаXDTO.Создать(ТипОбъектаТоварЗапись);
				
				// Код (обязательное)
				Если ЗначениеЗаполнено(Товар.Код) Тогда
					ЗаписьТовар.Код = Товар.Код;
				Иначе
					ВызватьИсключениеЗаполнения("Заказ.Товары", "Код");
				КонецЕсли;
				
				// Количество (обязательное)
				Если ЗначениеЗаполнено(Товар.Количество) Тогда
					ЗаписьТовар.Количество = Товар.Количество;
				Иначе
					ВызватьИсключениеЗаполнения("Заказ.Товары", "Количество");
				КонецЕсли;
				
				// Цена (обязательное)
				Если ЗначениеЗаполнено(Товар.Цена) Тогда
					ЗаписьТовар.Цена = Товар.Цена;
				Иначе
					ВызватьИсключениеЗаполнения("Заказ.Товары", "Цена");
				КонецЕсли;
				
				// Сумма (обязательное)
				Если ЗначениеЗаполнено(Товар.Сумма) Тогда
					ЗаписьТовар.Сумма = Товар.Сумма;
				Иначе
					ВызватьИсключениеЗаполнения("Заказ.Товары", "Сумма");
				КонецЕсли;
				
				// УникальныйИдентификаторТовара (необязательное)
				Если ЗначениеЗаполнено(Товар.УникальныйИдентификаторТовара) Тогда
					ЗаписьТовар.УУИДТовара = Товар.УникальныйИдентификаторТовара;
				КонецЕсли;
				
				// УникальныйИдентификаторХарактеристики (необязательное)
				Если ЗначениеЗаполнено(Товар.УникальныйИдентификаторХарактеристики) Тогда
					ЗаписьТовар.УУИДХарактеристики = Товар.УникальныйИдентификаторХарактеристики;
				КонецЕсли;
				
				// УникальныйИдентификаторУпаковки (необязательное)
				Если ЗначениеЗаполнено(Товар.УникальныйИдентификаторУпаковки) Тогда
					ЗаписьТовар.УУИДУпаковки = Товар.УникальныйИдентификаторУпаковки;
				КонецЕсли;
				
				СписокТоваров = ОбъектЗаказТовары.ЗаказТоварыЗапись; //СписокXDTO - 
				СписокТоваров.Добавить(ЗаписьТовар);
			КонецЦикла;
			
			ЗаписьЗаказ.Товары = ОбъектЗаказТовары;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Заказ.Оплаты) Тогда
			ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, "Оплаты");
			ОбъектОплаты = ФабрикаXDTO.Создать(ТипОбъекта);
			
			ТипОбъектаОплатаЗапись = ФабрикаXDTO.Тип(URIИмен, "Оплата");
			Для Каждого Оплата Из Заказ.Оплаты Цикл
				
				ЗаписьОплата = ФабрикаXDTO.Создать(ТипОбъектаОплатаЗапись);
				
				// СуммаНаличнойОплаты (обязательное)
				ЗаписьОплата.СуммаНаличнойОплаты = Оплата.СуммаНаличнойОплаты;
				
				// СуммаЭлектроннойОплаты (обязательное)
				ЗаписьОплата.СуммаЭлектроннойОплаты = Оплата.СуммаЭлектроннойОплаты;
				
				// СуммаПредоплатой (обязательное)
				ЗаписьОплата.СуммаПредоплатой = Оплата.СуммаПредоплатой;
				
				// СуммаПостоплатой (обязательное)
				ЗаписьОплата.СуммаПостоплатой = Оплата.СуммаПостоплатой;
				
				
				// КодВидаЭлектроннойОплаты (необязательное)
				Если ЗначениеЗаполнено(Оплата.КодВидаЭлектроннойОплаты) Тогда
					ЗаписьОплата.КодВидаЭлектроннойОплаты = Оплата.КодВидаЭлектроннойОплаты;
				КонецЕсли;
				
				// УникальныйИдентификаторВидаЭлектроннойОплаты (необязательное)
				Если ЗначениеЗаполнено(Оплата.УникальныйИдентификаторВидаЭлектроннойОплаты) Тогда
					ЗаписьОплата.УУИДВидаЭлектроннойОплаты = Оплата.УникальныйИдентификаторВидаЭлектроннойОплаты;
				КонецЕсли;
				
				СписокОплат = ОбъектОплаты.Оплата; //СписокXDTO -
				СписокОплат.Добавить(ЗаписьОплата);
			КонецЦикла;
			
			ЗаписьЗаказ.Оплаты = ОбъектОплаты;
		КонецЕсли;
		
		СписокЗаказов = ОбъектЗаказы.Заказы; //СписокXDTO - 
		СписокЗаказов.Добавить(ЗаписьЗаказ);
		
	КонецЦикла;
	
	ЕстьВыгружаемыеДанные = Истина;
	
	Возврат ОбъектЗаказы;
	
КонецФункции

Функция ОбъектХарактеристики(Товар, ВерсияФорматаОбмена)
	
	URIИмен = URIПространстваИмен(ВерсияФорматаОбмена);
	
	ТипОбъектаХарактеристики = ФабрикаXDTO.Тип(URIИмен, "Характеристики");
	ТипОбъектаХарактеристикаЗапись = ФабрикаXDTO.Тип(URIИмен, "ХарактеристикаЗапись");
	
	ОбъектХарактеристики = ФабрикаXDTO.Создать(ТипОбъектаХарактеристики);
	
	Характеристики = Товар.Характеристики; //Массив Из См. МенеджерОфлайнОборудования.ПолучитьЗаписьХарактеристики - .
	
	Для Каждого Характеристика Из Характеристики Цикл
		
		ЗаписьХарактеристики = ФабрикаXDTO.Создать(ТипОбъектаХарактеристикаЗапись);
		
		// Код (необязательное)
		Если ЗначениеЗаполнено(Характеристика.Код) Тогда
			ЗаписьХарактеристики.Код = Характеристика.Код;
		КонецЕсли;
		
		// Штрихкоды (необязательное)
		Если ЗначениеЗаполнено(Характеристика.Штрихкоды) Тогда
			ЗаписьХарактеристики.Штрихкоды = ОбъектШтрихкоды(URIИмен, Характеристика.Штрихкоды);
		КонецЕсли;
		
		// Цена (необязательное)
		Если ЗначениеЗаполнено(Характеристика.Цена) Тогда
			ЗаписьХарактеристики.Цена = Характеристика.Цена;
		КонецЕсли;
		
		// Остаток (необязательное)
		Если ЗначениеЗаполнено(Характеристика.Остаток) И Характеристика.Остаток > 0 Тогда
			ЗаписьХарактеристики.Остаток = Формат(Характеристика.Остаток, "ЧЦ=15; ЧДЦ=3; ЧРД=.; ЧГ=0");
		КонецЕсли;
		
		// УникальныйИдентификатор (обязательное)
		Если ЗначениеЗаполнено(Характеристика.УникальныйИдентификатор) Тогда
			ЗаписьХарактеристики.УУИД = Характеристика.УникальныйИдентификатор;
		Иначе
			ВызватьИсключениеЗаполнения("Характеристика", "УникальныйИдентификатор");
		КонецЕсли;
		
		// Наименование (обязательное)
		Если ЗначениеЗаполнено(Характеристика.Наименование) Тогда
			ЗаписьХарактеристики.Наименование = Характеристика.Наименование;
		Иначе
			ВызватьИсключениеЗаполнения("Характеристика", "Наименование");
		КонецЕсли;
		
		// ИмеетУпаковки И Упаковки (необязательное)
		Если Характеристика.ИмеетУпаковки Тогда
			
			ЗаписьХарактеристики.ИмеетУпаковки = Характеристика.ИмеетУпаковки;
			ЗаписьХарактеристики.Упаковки = ОбъектУпаковки(Характеристика, ВерсияФорматаОбмена);
			
		КонецЕсли;
		
		СписокХарактеристик = ОбъектХарактеристики.ХарактеристикаЗапись; //СписокXDTO - 
		СписокХарактеристик.Добавить(ЗаписьХарактеристики);
		
	КонецЦикла;
	
	Возврат ОбъектХарактеристики;
	
КонецФункции

Функция ОбъектУпаковки(Источник, ВерсияФорматаОбмена)
	
	URIИмен = URIПространстваИмен(ВерсияФорматаОбмена);
	
	ТипОбъектаУпаковки = ФабрикаXDTO.Тип(URIИмен, "Упаковки");
	ТипОбъектаУпаковкаЗапись = ФабрикаXDTO.Тип(URIИмен, "УпаковкаЗапись");
	
	ОбъектУпаковки = ФабрикаXDTO.Создать(ТипОбъектаУпаковки);
	
	Упаковки = Источник.Упаковки; //Массив Из См. МенеджерОфлайнОборудования.ПолучитьЗаписьУпаковки - .
	
	Для Каждого Упаковка Из Упаковки Цикл
		
		ЗаписьУпаковки = ФабрикаXDTO.Создать(ТипОбъектаУпаковкаЗапись);
		
		// Код (обязательное)
		Если ЗначениеЗаполнено(Упаковка.Код) Тогда
			ЗаписьУпаковки.Код = Упаковка.Код;
		Иначе
			ВызватьИсключениеЗаполнения("Упаковка", "Код");
		КонецЕсли;
		
		// Наименование (обязательное)
		Если ЗначениеЗаполнено(Упаковка.Наименование) Тогда
			ЗаписьУпаковки.Наименование = Упаковка.Наименование;
		Иначе
			ВызватьИсключениеЗаполнения("Упаковка", "Наименование");
		КонецЕсли;
		
		// Коэффициент (обязательное)
		Если ЗначениеЗаполнено(Упаковка.Коэффициент) Тогда
			ЗаписьУпаковки.Коэффициент = Упаковка.Коэффициент;
		Иначе
			ВызватьИсключениеЗаполнения("Упаковка", "Коэффициент");
		КонецЕсли;
		
		// УникальныйИдентификатор (обязательное)
		Если ЗначениеЗаполнено(Упаковка.УникальныйИдентификатор) Тогда
			ЗаписьУпаковки.УУИД = Упаковка.УникальныйИдентификатор;
		Иначе
			ВызватьИсключениеЗаполнения("Упаковка", "УникальныйИдентификатор");
		КонецЕсли;
		
		// Штрихкоды (необязательное)
		Если ЗначениеЗаполнено(Упаковка.Штрихкоды) Тогда
			ЗаписьУпаковки.Штрихкоды = ОбъектШтрихкоды(URIИмен, Упаковка.Штрихкоды);
		КонецЕсли;
		
		// Цена (необязательное)
		Если ЗначениеЗаполнено(Упаковка.Цена) Тогда
			ЗаписьУпаковки.Цена = Упаковка.Цена;
		КонецЕсли;
		
		// Остаток (необязательное)
		Если ЗначениеЗаполнено(Упаковка.Остаток) И Упаковка.Остаток > 0 Тогда
			ЗаписьУпаковки.Остаток = Формат(Упаковка.Остаток, "ЧЦ=15; ЧДЦ=3; ЧРД=.; ЧГ=0");
		КонецЕсли;
		
		СписокУпаковок = ОбъектУпаковки.УпаковкаЗапись; //СписокXDTO - 
		СписокУпаковок.Добавить(ЗаписьУпаковки);
		
	КонецЦикла;
	
	Возврат ОбъектУпаковки;
	
КонецФункции

Функция ОбъектШтрихкоды(URIИмен, Штрихкоды)
	
	ТипОбъектаШтрихкоды = ФабрикаXDTO.Тип(URIИмен, "Штрихкоды");
	ОбъектШтрихкоды = ФабрикаXDTO.Создать(ТипОбъектаШтрихкоды);
	
	ТипОбъектаШтрихкодЗапись = ФабрикаXDTO.Тип(URIИмен, "ШтрихкодЗапись");
	
	Для Каждого ДанныеШтрихкода Из Штрихкоды Цикл
		
		ЗаписьШтрихкод = ФабрикаXDTO.Создать(ТипОбъектаШтрихкодЗапись);
		
		// Штрихкод (обязательное)
		Если ЗначениеЗаполнено(ДанныеШтрихкода.Штрихкод) Тогда
			ЗаписьШтрихкод.Штрихкод = ДанныеШтрихкода.Штрихкод;
		Иначе
			ВызватьИсключениеЗаполнения("Штрихкод", "Штрихкод");
		КонецЕсли;
		
		// ТипШтрихкода (необязательное)
		Если ЗначениеЗаполнено(ДанныеШтрихкода.ТипШтрихкода) Тогда
			ЗаписьШтрихкод.Тип = ДанныеШтрихкода.ТипШтрихкода;
		КонецЕсли;
		
		СписокШтрихкодов = ОбъектШтрихкоды.ШтрихкодЗапись; //СписокXDTO - 
		СписокШтрихкодов.Добавить(ЗаписьШтрихкод)
	КонецЦикла;
	
	Возврат ОбъектШтрихкоды;
	
КонецФункции

Процедура ВызватьИсключениеЗаполнения(ИмяОбъекта, ИмяПоля)
	
	ТекстСообщения = НСтр("ru='Ошибка встраивания БПО (Офлайн-оборудование).
		|Не заполнено обязательное поле: %ИмяПоля%, объект: %ИмяОбъекта%.'");
	
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяПоля%", 		ИмяПоля);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяОбъекта%", 	ИмяОбъекта);
	
	ВызватьИсключение ТекстСообщения;
	
КонецПроцедуры

Функция КоличествоПакетов(РазмерПакета, КоличествоЭлементов)
	
	Если РазмерПакета = 0 Тогда
		КоличествоПакетов = 1;
	Иначе
		// Определяем количество полных пакетов.
		КоличествоПолныхПакетов = Цел(КоличествоЭлементов/РазмерПакета);
		//	Если количество элементов на пакет больше чем определенное количество пакетов, добавляем один неполный пакет.
		КоличествоПакетов = КоличествоПолныхПакетов + ?((КоличествоЭлементов/РазмерПакета)-КоличествоПолныхПакетов>0, 1, 0);
	КонецЕсли;
	
	Возврат КоличествоПакетов;
	
КонецФункции

Процедура СоздатьСообщениеОбОшибке(ВыходныеПараметры, ТекстСообщения)
	
	ВыходныеПараметры.Добавить(999);
	ВыходныеПараметры.Добавить(ТекстСообщения);
	
КонецПроцедуры

// Разложенный штрихкод.
// 
// Параметры:
//  Штрихкоды - Массив из Строка - Штрихкоды.
// 
// Возвращаемое значение:
//  Строка.
Функция РазложенныйШтрихкод(Штрихкоды)
	
	ШтрихкодСтрока = "";
	
	Для Каждого ДанныеШтрихкода Из Штрихкоды Цикл
		
		Если НЕ ПустаяСтрока(ШтрихкодСтрока) Тогда
			ШтрихкодСтрока = ШтрихкодСтрока + ",";
		КонецЕсли;
		
		ШтрихкодСтрока = ШтрихкодСтрока + ДанныеШтрихкода.Штрихкод;
		
	КонецЦикла;
	
	Возврат ШтрихкодСтрока;
	
КонецФункции





Функция СоздатьЧтениеXML(ТекстПакета, ЧтениеXML, ВыходныеПараметры)
	
	Результат = Истина;
	
	ЧтениеXML = Новый ЧтениеXML;
	ПараметрыЧтения = Новый ПараметрыЧтенияXML("1.0");
	ЧтениеXML.УстановитьСтроку(ТекстПакета, ПараметрыЧтения);
	
	Попытка
		ЧтениеXML.Прочитать();
	Исключение
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, НСтр("ru = 'При чтении файла произошла ошибка'"));
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти


