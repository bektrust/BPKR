
#Область ПрограммныйИнтерфейс    

// Выполняет проверку обязательности заполняет тэгов
// 
// Параметры:
//  Параметры - Структура - Структура анализируемых параметров.
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - Устройство, фискализирующее чек
//  ОписаниеОшибки - Строка - описание ошибки для возврата в случае нахождения ошибки
//
// Возвращаемое значение:
//  Булево - Истина когда обязательные данные консистентны
Функция ВыполненаПроверкаОбязательностиИПравильностиЗаполненияТэгов(Параметры, ИдентификаторУстройства, ОписаниеОшибки) Экспорт
	
	Если ЗначениеЗаполнено(ИдентификаторУстройства) Тогда
		ТипОборудования  = ИдентификаторУстройства.ТипОборудования;
	Иначе
		ОписаниеОшибки = НСтр("ru = 'Не выбрано устройство'");
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураДанныхФорматноЛогическогоКонтроля = СтруктураДанныхФорматноЛогическогоКонтроля(ИдентификаторУстройства);
	
	Параметры.Вставить("ФорматФД", СтруктураДанныхФорматноЛогическогоКонтроля.ФорматФД);
	
	МассивФФД = МассивПроверяемыхФорматовФД(СтруктураДанныхФорматноЛогическогоКонтроля.ФорматФД);
	
	СоответствиеРеквизитов = Новый Соответствие;
	ПроверяемыеРеквизиты = ПроверяемыеРеквизиты(МассивФФД, СоответствиеРеквизитов);
	
	ПараметрыРегистрацииУстройства = ОборудованиеЧекопечатающиеУстройстваВызовСервера.ПараметрыРегистрацииУстройства(ИдентификаторУстройства);
	ЗаполнитьРеквизитовИзРегистрационныхДанных(Параметры, ПроверяемыеРеквизиты.РеквизитыЗаполняемыеИзРегистрационныхДанных, ПараметрыРегистрацииУстройства);
	
	Если НЕ ЗаполненыРеквизитыШапки(Параметры, ПроверяемыеРеквизиты.РеквизитыШапки, ОписаниеОшибки, СоответствиеРеквизитов) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗаполненыРеквизитыПозицийЧека(Параметры.ПозицииЧека, ПроверяемыеРеквизиты.РеквизитыПозицийЧека, ОписаниеОшибки, СоответствиеРеквизитов) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПроверитьРеквизитыОплаты(Параметры.ТаблицаОплат, ОписаниеОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка системы налогообложения
	Если Параметры.Свойство("СистемаНалогообложения") И ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ Тогда
		КодНалогообложения = ПараметрыРегистрацииУстройства.КодСистемыНалогообложения;
		СистемаНалогообложения = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.КодСистемыНалогообложенияККТ(Параметры.СистемаНалогообложения);
		Если НЕ КодНалогообложения = Строка(СистемаНалогообложения) Тогда
			ОписаниеОшибки = НСтр("ru = 'ККТ не зарегистрирована с указанной системой налогообложения.'"); 
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Проверка признака предмета расчета и его коррекция  
	Если СтруктураДанныхФорматноЛогическогоКонтроля.ФорматФД <> "1.2" Тогда
		Для Каждого ПозицияЧека Из Параметры.ПозицииЧека Цикл     
			Если ПозицияЧека.Свойство("ФискальнаяСтрока") Тогда
				// Значения доступные только в ФФД 1.2 преобразуем в значения доступные в ФФД 1.1, 1.05
			КонецЕсли;
		КонецЦикла;       
	КонецЕсли;
	
	// Дополнительные условия проверки
	
	// Соответствие сумм товарных позиций и сумм оплаты.
	СуммаПозицийЧека = 0;
	СуммаВсехОплат   = 0;
	СуммаОплатыНаличными = 0;
	
	Для Каждого ПозицияЧека Из Параметры.ПозицииЧека Цикл
		Если ПозицияЧека.Свойство("ФискальнаяСтрока") Тогда
			СуммаПозицийЧека = СуммаПозицийЧека + ПозицияЧека.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементаОплаты Из Параметры.ТаблицаОплат Цикл
		СуммаВсехОплат = СуммаВсехОплат + ЭлементаОплаты.Сумма;
		Если ЭлементаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные Тогда
			СуммаОплатыНаличными = СуммаОплатыНаличными + ЭлементаОплаты.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	Если СуммаПозицийЧека > СуммаВсехОплат Тогда
		ОписаниеОшибки = НСтр("ru = 'Сумма товарных позиций больше суммы оплат'"); 
		Возврат Ложь;
	ИначеЕсли СуммаВсехОплат > СуммаПозицийЧека Тогда
		Если (СуммаВсехОплат - СуммаОплатыНаличными) > СуммаПозицийЧека Тогда
			ОписаниеОшибки = НСтр("ru = 'Сумма безналичных оплат больше суммы товарных позиций'"); 
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Электронный чек
	Электронно = Ложь;
	Параметры.Свойство("Электронно", Электронно);
	
	Отправляет1СEmail = Ложь;
	Параметры.Свойство("Отправляет1СEmail", Отправляет1СEmail);
	
	Отправляет1СSMS = Ложь;
	Параметры.Свойство("Отправляет1СSMS", Отправляет1СSMS);
	
	ПокупательEmail = Ложь;
	Параметры.Свойство("ПокупательEmail", ПокупательEmail);
	
	ПокупательНомер = Ложь;
	Параметры.Свойство("ПокупательНомер", ПокупательНомер);
	
	Если Электронно = Истина 
		И НЕ ЗначениеЗаполнено(ПокупательEmail) 
		И НЕ ЗначениеЗаполнено(ПокупательНомер) Тогда
		ОписаниеОшибки = НСтр("ru = 'Для электронного чека нужно указать либо Email, либо телефон.'") ;
		Возврат Ложь;
	КонецЕсли;
	
	Если Электронно = Истина И Отправляет1СEmail = Истина Тогда
		ОписаниеОшибки = НСтр("ru = 'Чек обязательно должен быть напечатан'") ;
		Возврат Ложь;
	КонецЕсли;
	
	Если Электронно = Истина И Отправляет1СSMS = Истина Тогда
		ОписаниеОшибки = НСтр("ru = 'Чек обязательно должен быть напечатан'") ;
		Возврат Ложь;
	КонецЕсли;
	
	Если Отправляет1СEmail = Истина И НЕ ЗначениеЗаполнено(ПокупательEmail) Тогда
		ОписаниеОшибки = НСтр("ru = 'Не заполнен E-mail'") ;
		Возврат Ложь;
	КонецЕсли;
	
	Если Отправляет1СSMS = Истина И НЕ ЗначениеЗаполнено(ПокупательНомер) Тогда
		ОписаниеОшибки = НСтр("ru = 'Не заполнен номер телефона'") ;
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Параметры.КассирИНН) Тогда
		Если НЕ ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ИННСоответствуетТребованиям(Параметры.КассирИНН, Ложь, ОписаниеОшибки) Тогда
			Сообщение = НСтр("ru = 'ИНН кассира некорректен (%Ошибка%)'");
			ОписаниеОшибки = СтрЗаменить(Сообщение, "%Ошибка%", ОписаниеОшибки);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Параметры.Кассир) И СтрДлина(Параметры.Кассир) > 64 Тогда
		ОписаниеОшибки = НСтр("ru = 'Длинна реквизита (Кассир) превышает 64 символа'");
		Возврат Ложь;
	КонецЕсли;
	
	
	Если Электронно = Истина 
		И Отправляет1СEmail = Ложь 
		И Отправляет1СSMS = Ложь Тогда
		// Чек оправляется электронно средствами ОФД
		Если ЗначениеЗаполнено(ПокупательEmail) И ЗначениеЗаполнено(ПокупательНомер) Тогда
			ОписаниеОшибки = НСтр("ru = 'У электронного чека заполнены как номер телефона, так и e-mail. ОФД не сможет передать данный чек электронно.'");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	НомерПозиции = 0;
	
	Для Каждого ПозицияЧека Из Параметры.ПозицииЧека Цикл
		Если ПозицияЧека.Свойство("ФискальнаяСтрока") Тогда
			НомерПозиции = НомерПозиции + 1;
			НомерПозицииСтрока = Формат(НомерПозиции, "ЧГ=0");
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Выполняет коррекцию заполнения тэгов
// 
// Параметры:
//  Параметры - Структура - Структура анализируемых параметров.
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - Устройство, фискализирующее чек
//  ОписаниеОшибки - Строка -  описание ошибки для возврата в случае нахождения ошибки
//
Процедура ВыполнитьКоррекциюЗаполненияТэгов(Параметры, ИдентификаторУстройства, ОписаниеОшибки) Экспорт
	
	Электронно = Ложь;
	Параметры.Свойство("Электронно", Электронно);
	
	Отправляет1СEmail = Ложь;
	Параметры.Свойство("Отправляет1СEmail", Отправляет1СEmail);
	
	Отправляет1СSMS = Ложь;
	Параметры.Свойство("Отправляет1СSMS", Отправляет1СSMS);
	
	Если Отправляет1СEmail Или Отправляет1СSMS Тогда 
		Параметры.Электронно = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Структура данных форматно-логического контроля
// 
// Параметры:
//  ПодключаемоеОборудование - СправочникСсылка.ПодключаемоеОборудование - Устройство, фискализирующее чек
// 
// Возвращаемое значение:
//  Структура - Структура данных форматно логического контроля:
//   * СпособФорматноЛогическогоКонтроля - Неопределено -
//   * ДопустимоеРасхождениеФорматноЛогическогоКонтроля - Число -
//   * ФорматФД - Строка -
//   * ФорматФД - Строка, Произвольный -
//
Функция СтруктураДанныхФорматноЛогическогоКонтроля(ПодключаемоеОборудование) Экспорт
	
	ФорматФД = "1.0";
	
	ВозвращаемаяСтруктура = Новый Структура;
	ВозвращаемаяСтруктура.Вставить("СпособФорматноЛогическогоКонтроля"               , Неопределено);
	ВозвращаемаяСтруктура.Вставить("ДопустимоеРасхождениеФорматноЛогическогоКонтроля", 0.01);
	ВозвращаемаяСтруктура.Вставить("ФорматФД", ФорматФД);
		
	СтандартнаяОбработка = Истина;
	ФорматноЛогическийКонтрольКлиентСерверПереопределяемый.ПолучитьСтруктуруДанныхФорматноЛогическогоКонтроля(ПодключаемоеОборудование, ВозвращаемаяСтруктура, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат ВозвращаемаяСтруктура;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.ДопустимоеРасхождениеФорматноЛогическогоКонтроля КАК ДопустимоеРасхождениеФорматноЛогическогоКонтроля,
	|	ПодключаемоеОборудование.СпособФорматноЛогическогоКонтроля КАК СпособФорматноЛогическогоКонтроля
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ПодключаемоеОборудование);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ВозвращаемаяСтруктура.СпособФорматноЛогическогоКонтроля = Выборка.СпособФорматноЛогическогоКонтроля;
		ВозвращаемаяСтруктура.ДопустимоеРасхождениеФорматноЛогическогоКонтроля = Выборка.ДопустимоеРасхождениеФорматноЛогическогоКонтроля;
	КонецЕсли;
	
	
	Возврат ВозвращаемаяСтруктура;
	
КонецФункции

// Процедура приводит к формату согласованному с ФНС.
// Для старта преобразования данных нужно.
//
//  Параметры:
//    ОсновныеПараметры - см. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииФискализацииЧека
//    Отказ - Булево
//    ОписаниеОшибки - Строка
//    ИсправленыОсновныеПараметры - Булево
//
Процедура ПривестиДанныеКТребуемомуФормату(ОсновныеПараметры, Отказ, ОписаниеОшибки, ИсправленыОсновныеПараметры) Экспорт
	
	ФорматноЛогическийКонтрольКлиентСервер.ПривестиДанныеКТребуемомуФормату(ОсновныеПараметры, Отказ, ОписаниеОшибки, ИсправленыОсновныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Все существующие форматы ФД, упорядоченные по возрастанию
// 
// Возвращаемое значение:
//  Массив
//
Функция ПолныйМассивФорматовФД()
	
	ПолныйМассив = Новый Массив;
	ПолныйМассив.Добавить("1.1");
	
	Возврат ПолныйМассив;
КонецФункции 

// Массив проверяемых форматов ФД
// 
// Параметры:
//  ФорматФД - Строка
// 
// Возвращаемое значение:
//  Массив
//
Функция МассивПроверяемыхФорматовФД(ФорматФД)
	
	ПолныйМассив = ПолныйМассивФорматовФД();
	
	ВозвращаемыйМассив = Новый Массив;
	
	Для Каждого ЭлементМассива Из ПолныйМассив Цикл
		
		ВозвращаемыйМассив.Добавить(ЭлементМассива);
		Если ЭлементМассива = ФорматФД Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозвращаемыйМассив;
КонецФункции

// Структуру из двух массивов: реквизиты шапки и реквизиты позиций чека
// 
// Параметры:
//  МассивФФД - Массив - Массив проверяемых ФФД
//  СоответствиеРеквизитов - Структура -Соответствие проверяемых реквизитов и их текстового представления в ошибке.
// 
// Возвращаемое значение:
//  Структура
//
Функция ПроверяемыеРеквизиты(МассивФФД, СоответствиеРеквизитов)
	
	ПроверяемыеРеквизиты = Новый Структура;
	ПроверяемыеРеквизиты.Вставить("РеквизитыШапки", ПроверяемыеРеквизитыШапки(МассивФФД, СоответствиеРеквизитов));
	ПроверяемыеРеквизиты.Вставить("РеквизитыПозицийЧека", ПроверяемыеРеквизитыПозицийЧека(МассивФФД, СоответствиеРеквизитов));
	ПроверяемыеРеквизиты.Вставить("РеквизитыЗаполняемыеИзРегистрационныхДанных", РеквизитыЗаполняемыеИзРегистрационныхДанных(МассивФФД));
	
	Возврат ПроверяемыеРеквизиты;
	
КонецФункции

// Массив проверяемых реквизитов шапки
// 
// Параметры:
//  МассивФФД - Массив - Массив проверяемых ФФД
//  СоответствиеРеквизитов - Соответствие - соответствие проверяемых реквизитов и их текстового представления в ошибке
// 
// Возвращаемое значение:
//  Массив. 
//
Функция ПроверяемыеРеквизитыШапки(МассивФФД, СоответствиеРеквизитов)
	
	МассивРеквизитов = Новый Массив;
	
	Для Каждого ФорматФД Из МассивФФД Цикл
		
		Если ФорматФД = "1.1" Тогда
			МассивРеквизитов.Добавить("ОрганизацияНазвание"); // тег 1048
			СоответствиеРеквизитов.Вставить("ОрганизацияНазвание", НСтр("ru = 'Наименование организации'"));
			
			МассивРеквизитов.Добавить("ОрганизацияИНН"); // тег 1018
			СоответствиеРеквизитов.Вставить("ОрганизацияИНН", НСтр("ru = 'ИНН организации'"));
			
			МассивРеквизитов.Добавить("ТипРасчета"); // тег 1054
			СоответствиеРеквизитов.Вставить("ТипРасчета", НСтр("ru = 'Тип расчета'"));
			
			
			МассивРеквизитов.Добавить("Кассир"); // тег 1021
			СоответствиеРеквизитов.Вставить("Кассир", НСтр("ru = 'Кассир'"));
			
			МассивРеквизитов.Добавить("ПозицииЧека"); // тег 1059
			СоответствиеРеквизитов.Вставить("ПозицииЧека", НСтр("ru = 'Позиции чека'"));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивРеквизитов;
	
КонецФункции

// Массив проверяемых реквизитов позиций чека
// 
// Параметры:
//  МассивФФД - Массив - Массив проверяемых ФФД
//  СоответствиеРеквизитов - Соответствие - соответствие проверяемых реквизитов и их текстового представления в ошибке.
// 
// Возвращаемое значение:
//  Массив
//
Функция ПроверяемыеРеквизитыПозицийЧека(МассивФФД, СоответствиеРеквизитов)
	
	МассивРеквизитов = Новый Массив;
	
	Для Каждого ФорматФД Из МассивФФД Цикл
		Если ФорматФД = "1.1" Тогда
			МассивРеквизитов.Добавить("Наименование");
			СоответствиеРеквизитов.Вставить("Наименование", НСтр("ru = 'Наименование'"));
			
			МассивРеквизитов.Добавить("Код");
			СоответствиеРеквизитов.Вставить("Код", НСтр("ru = 'Код'"));
			
			МассивРеквизитов.Добавить("Сумма");
			СоответствиеРеквизитов.Вставить("Сумма", НСтр("ru = 'Сумма'"));
			
			МассивРеквизитов.Добавить("Количество"); // тег 1023
			СоответствиеРеквизитов.Вставить("Количество", НСтр("ru = 'Количество'"));
				
			МассивРеквизитов.Добавить("СтавкаНДС"); // тег 1199
			СоответствиеРеквизитов.Вставить("СтавкаНДС", НСтр("ru = 'Ставка НДС'"));
			
			МассивРеквизитов.Добавить("СтавкаНСП"); // тег 1199
			СоответствиеРеквизитов.Вставить("СтавкаНСП", НСтр("ru = 'Ставка НСП'"));
			
			МассивРеквизитов.Добавить("ПризнакСпособаРасчета"); // тег 1214
			СоответствиеРеквизитов.Вставить("ПризнакСпособаРасчета", НСтр("ru = 'Признак способа расчета'"));
			
			МассивРеквизитов.Добавить("ПризнакПредметаРасчета"); // тег 1212
			СоответствиеРеквизитов.Вставить("ПризнакПредметаРасчета", НСтр("ru = 'Признак предмета расчета'"));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивРеквизитов;
	
КонецФункции

// Массив реквизитов заполняемые из регистрационных данных
// 
// Параметры:
//  МассивФФД - Массив - Массив проверяемых ФФД.
// 
// Возвращаемое значение:
//  Массив
//
Функция РеквизитыЗаполняемыеИзРегистрационныхДанных(МассивФФД)
	
	МассивРеквизитов = Новый Массив;
	
	Для Каждого ФорматФД Из МассивФФД Цикл
		Если ФорматФД = "1.1" Тогда
			МассивРеквизитов.Добавить("АдресРасчетов"); // тег 1009
			МассивРеквизитов.Добавить("МестоРасчетов"); // тег 1187
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивРеквизитов;
	
КонецФункции

// Проверка заполненности реквизитов шапки
// 
// Параметры:
//  ВходящиеДанные - Структура -  структура данных чека
//  МассивРеквизитов - Массив - массив имен реквизитов
//  ОписаниеОшибки - Строка - строка заполняемая в случае ошибки
//  СоответствиеРеквизитов - Соответствие - соответствие проверяемых реквизитов и их текстового представления в ошибке
// 
// Возвращаемое значение:
//  Булево
//
Функция ЗаполненыРеквизитыШапки(ВходящиеДанные, МассивРеквизитов, ОписаниеОшибки, СоответствиеРеквизитов)
Перем ЗначениеДанных;
	
	Для Каждого ИмяРеквизита Из МассивРеквизитов Цикл
		Если ВходящиеДанные.Свойство(ИмяРеквизита, ЗначениеДанных) Тогда
			Если НЕ ЗначениеЗаполнено(ЗначениеДанных) Тогда
				ИмяРеквизитаВОшибку = СоответствиеРеквизитов[ИмяРеквизита];
				ОписаниеОшибки = НСтр("ru = 'Тэг ""%Реквизит%"" не заполнен.'");
				ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Реквизит%", ИмяРеквизитаВОшибку);
				Возврат Ложь;
			КонецЕсли;
		Иначе
			ИмяРеквизитаВОшибку = СоответствиеРеквизитов[ИмяРеквизита];
			ОписаниеОшибки = НСтр("ru = 'Тэг ""%Реквизит%"" отсутствует.'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Реквизит%", ИмяРеквизитаВОшибку);
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

// Проверка заполненности реквизитов позиций чека
// 
// Параметры:
//  ПозицииЧека - Массив - Массив структур позиций чека
//  МассивРеквизитов - Массив - массив имен реквизитов
//  ОписаниеОшибки - Строка - Строка, заполняемая в случае ошибки
//  СоответствиеРеквизитов - Соответствие - соответствие проверяемых реквизитов и их текстового представления в ошибке
// 
// Возвращаемое значение:
//  Булево
//
Функция ЗаполненыРеквизитыПозицийЧека(ПозицииЧека, МассивРеквизитов, ОписаниеОшибки, СоответствиеРеквизитов)
Перем ЗначениеДанных;

	
	НомерПозиции = 0;
	Для Каждого ПозицияЧека Из ПозицииЧека Цикл
		
		Если ПозицияЧека.Свойство("ФискальнаяСтрока") Тогда
			НомерПозиции = НомерПозиции + 1;
			НомерПозицииСтрока = Формат(НомерПозиции, "ЧГ=0");
			Для Каждого ИмяРеквизита Из МассивРеквизитов Цикл
				Если ПозицияЧека.Свойство(ИмяРеквизита, ЗначениеДанных) Тогда
					Если ИмяРеквизита = "СтавкаНДС" Тогда
						Если ЗначениеДанных = НСтр("ru = 'не указана'") Тогда // АПК: 1391 Локальное законодательство
							ИмяРеквизитаВОшибку = СоответствиеРеквизитов[ИмяРеквизита];
							ОписаниеОшибки = НСтр("ru = 'Тэг ""%Реквизит%"" в строке №%Позиция% не заполнен.'");
							ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Реквизит%", ИмяРеквизитаВОшибку);
							ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Позиция%" , НомерПозицииСтрока);
							Возврат Ложь;
						КонецЕсли;
					ИначеЕсли ИмяРеквизита = "СтавкаНСП" Тогда
						Если ЗначениеДанных = НСтр("ru = 'не указана'") Тогда
							ИмяРеквизитаВОшибку = СоответствиеРеквизитов[ИмяРеквизита];
							ОписаниеОшибки = НСтр("ru = 'Тэг ""%Реквизит%"" в строке №%Позиция% не заполнен.'");
							ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Реквизит%", ИмяРеквизитаВОшибку);
							ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Позиция%" , НомерПозицииСтрока);
							Возврат Ложь;
						КонецЕсли;
					ИначеЕсли НЕ ЗначениеЗаполнено(ЗначениеДанных) Тогда
						ИмяРеквизитаВОшибку = СоответствиеРеквизитов[ИмяРеквизита];
						ОписаниеОшибки = НСтр("ru = 'Тэг ""%Реквизит%"" в строке №%Позиция% не заполнен.'");
						ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Реквизит%", ИмяРеквизитаВОшибку);
						ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Позиция%" , НомерПозицииСтрока);
						Возврат Ложь;
					КонецЕсли;
				Иначе
					ИмяРеквизитаВОшибку = СоответствиеРеквизитов[ИмяРеквизита];
					ОписаниеОшибки = НСтр("ru = 'Тэг ""%Реквизит%"" в строке №%Позиция% отсутствует.'");
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Реквизит%", ИмяРеквизитаВОшибку);
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Позиция%" , НомерПозицииСтрока);
					Возврат Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	
	Возврат Истина;
	
КонецФункции

// Проверка заполненности реквизитов таблицы оплат
// 
// Параметры:
//  ТаблицаОплат - Массив - Массив структур таблицы оплаты
//  ОписаниеОшибки - Строка - Строка, заполняемая в случае ошибки
// 
// Возвращаемое значение:
//  Булево
//
Функция ПроверитьРеквизитыОплаты(ТаблицаОплат, ОписаниеОшибки)
	
	Для Каждого Оплата Из ТаблицаОплат Цикл
		Если НЕ ЗначениеЗаполнено(Оплата.ТипОплаты) Тогда
			ОписаниеОшибки = НСтр("ru = 'Тэг ""%Реквизит%"" не заполнен.'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Реквизит%", НСтр("ru = 'Тип оплаты'"));
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат Истина;
	
КонецФункции

// Заполняет реквизиты из регистрационных данных
//
// Параметры:
//  ВходящиеДанные - Структура - структура данных чека
//  МассивРеквизитов - Массив - массив имен реквизитов
//
Процедура ЗаполнитьРеквизитовИзРегистрационныхДанных(ВходящиеДанные, МассивРеквизитов, ПараметрыРегистрацииУстройства)
Перем ЗначениеДанных;
	
	МассивНеЗаполненныхРеквизитов = Новый Массив;
	Для Каждого ИмяРеквизита Из МассивРеквизитов Цикл
		Если ВходящиеДанные.Свойство(ИмяРеквизита, ЗначениеДанных) Тогда
			Если НЕ ЗначениеЗаполнено(ЗначениеДанных) Тогда
				МассивНеЗаполненныхРеквизитов.Добавить(ИмяРеквизита);
			КонецЕсли;
		Иначе
			МассивНеЗаполненныхРеквизитов.Добавить(ИмяРеквизита);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивНеЗаполненныхРеквизитов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИмяРеквизита Из МассивНеЗаполненныхРеквизитов Цикл
		Если ИмяРеквизита = "АдресРасчетов" Тогда
			ВходящиеДанные.Вставить(ИмяРеквизита, ПараметрыРегистрацииУстройства.АдресПроведенияРасчетов);
		ИначеЕсли ИмяРеквизита = "МестоРасчетов" Тогда
			ВходящиеДанные.Вставить(ИмяРеквизита, ПараметрыРегистрацииУстройства.МестоПроведенияРасчетов);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
 
#КонецОбласти