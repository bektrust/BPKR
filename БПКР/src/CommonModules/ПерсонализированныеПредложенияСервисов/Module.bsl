
#Область ПрограммныйИнтерфейс

// Возвращает идентификатор модуля для вызова через внешний программный интерфейс.
//
// Возвращаемое значение:
//   Строка - идентификатор модуля.
//
Функция ПубликуемыйИдентификатор() Экспорт
	
	Возврат "personalized_offers";
	
КонецФункции

// Возвращает данные по идентификатору данных и переданным параметрам.
//
// Параметры:
//  ИдентификаторДанных - Строка - идентификатор данных. Может быть переопределено при обработке.
//                        Указывается в качестве имени файла, возвращаемого в результате.
//  Параметры - ДвоичныеДанные - переданные параметры получения данных.
//  КодВозврата - Строка - код возврата обработчика получения данных (по умолчанию - 10200).
//  Ошибка - Булево - признак завершения выполнения метода с ошибкой.
//  СообщениеОбОшибке - Строка - текст сообщения об ошибке.
// 
// Возвращаемое значение:
//   ДвоичныеДанные - возвращаемые данные.
//
Функция ВозвращаемыеДанные(ИдентификаторДанных, Параметры, КодВозврата, Ошибка, СообщениеОбОшибке) Экспорт
	
	Если ВРег(ИдентификаторДанных) <> ВРег(ПубликуемыйИдентификатор()) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры) Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Не переданы входящие настройки для отчета.'");
		КодВозврата = АсинхронноеПолучениеДанныхСловарь.КодВозвратаОшибкаДанных();
		Ошибка = Истина;
		Возврат Неопределено;
		
	КонецЕсли;
	
	НастройкиСтрока = ПолучитьСтрокуИзДвоичныхДанных(Параметры);
	НастройкиЗакрытияБаннера = РаботаВМоделиСервисаБТС.СтруктураИзСтрокиJSON(НастройкиСтрока);
	
	Если НастройкиЗакрытияБаннера.Свойство("organization") Тогда
		
		Если НастройкиЗакрытияБаннера.organization.Свойство("inn") Тогда
			
			Организация = Справочники.Организации.НайтиОрганизацию(НастройкиЗакрытияБаннера.organization.inn);
			Если Организация.Пустая() Тогда
				СообщениеОбОшибке = НСтр("ru = 'Организация с ИНН %1 отсутствует в информационной базе.'");
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке,
					НастройкиЗакрытияБаннера.organization.inn, НастройкиЗакрытияБаннера.organization.kpp);
			КонецЕсли;
			
		Иначе
			
			СообщениеОбОшибке = НСтр("ru = 'В настройках группа organization должна содержать поле inn.'");
			
		КонецЕсли;
		
	Иначе
		
		Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		Если Организация.Пустая() Тогда
			СообщениеОбОшибке = НСтр("ru = 'В информационной базе не задана организация по-умолчанию.'");
		КонецЕсли;
		
	КонецЕсли;
	Если Не ПустаяСтрока(СообщениеОбОшибке) Тогда
		
		КодВозврата = АсинхронноеПолучениеДанныхСловарь.КодВозвратаОшибкаДанных();
		Ошибка = Истина;
		Возврат Неопределено;
		
	КонецЕсли;
	
	ИдентификаторБаннера = НастройкиЗакрытияБаннера.id;
	ЗакрытыеБаннеры = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ИмяНастройкиПерсонализированныеПредложенияСервисов(),
		ИмяКлючНастройкиЗакрытыеПользователемБаннеры(),
		НовыйЗакрытыеПользователемБаннеры());
	БаннерыОрганизации = ЗакрытыеБаннеры.БаннерыПоОрганизации[Организация];
	Если ТипЗнч(БаннерыОрганизации) <> Тип("Структура") Тогда
		БаннерыОрганизации = Новый Структура;
	КонецЕсли;
	
	ОбстоятельстваЗакрытия = Новый Структура;
	ОбстоятельстваЗакрытия.Вставить("ДатаЗакрытия", ТекущаяДатаСеанса());
	ОбстоятельстваЗакрытия.Вставить("Периодичность", "");
	БаннерыОрганизации.Вставить(ИдентификаторБаннера, ОбстоятельстваЗакрытия);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		ИмяНастройкиПерсонализированныеПредложенияСервисов(),
		ИмяКлючНастройкиЗакрытыеПользователемБаннеры(),
		ЗакрытыеБаннеры);

	Результат = Новый Структура;
	Результат.Вставить("id", ИдентификаторБаннера);
	Результат.Вставить("status", СтатусЗакрытогоБаннера());
	
	ИдентификаторДанных = ПубликуемыйИдентификатор() + ".json";
	
	ИтоговыеДанные = РаботаВМоделиСервисаБТС.СтрокаИзСтруктурыJSON(Результат);
	
	Возврат ПолучитьДвоичныеДанныеИзСтроки(ИтоговыеДанные);
	
КонецФункции

// Заполняет перечень доступных возвращаемых данных.
//
// Параметры:
//  ДоступныеВозвращаемыеДанные - Соответствие - данные, доступные для получения через API
//    * Ключ - Строка - Идентификатор данных
//    * Значение - Структура - см. АсинхронноеПолучениеДанных.НовыйОписаниеВозвращаемыхДанных().
//
Процедура УстановитьДоступныеВозвращаемыеДанные(ДоступныеВозвращаемыеДанные) Экспорт
	
	ОписаниеВозвращаемыхДанных = АсинхронноеПолучениеДанных.НовыйОписаниеВозвращаемыхДанных();
	ОписаниеВозвращаемыхДанных.Наименование = НСтр("ru = 'Закрыть баннер'");
	ОписаниеВозвращаемыхДанных.Описание = НСтр("ru = 'Закрыть баннер'"); 
	ОписаниеВозвращаемыхДанных.МодульМенеджер = ПерсонализированныеПредложенияСервисов;
	ОписаниеВозвращаемыхДанных.ТипыРезультата.Добавить(АсинхронноеПолучениеДанныхСловарь.ТипJSON());
	
	ДоступныеВозвращаемыеДанные.Вставить(ПубликуемыйИдентификатор(), ОписаниеВозвращаемыхДанных);
	
КонецПроцедуры

#Область ПолучениеИЗакрытиеБаннеров

// Получает баннер, в случае если есть что показать. Если баннер не найден, в хранилище помещается Неопределено.
// Параметры:
//	СтруктураПараметров - Струкутура - Структура параметров:
//		Организация - СправочникСсылка.Организации - Организация, по которой ищем баннер.
//		Размещение - Строка - Идентификатор формы по которой нужно показать баннер. см. функции ИмяРазмещения...().
//		ПоказатьПредыдущий - Булево - Признак показа предыдущего в очереди баннера. Если Ложь - показывается следующий баннер.
//	АдресХранилища - Строка -Адрес хранилища, по которому будет помещен баннер.
//
Процедура ПолучитьБаннер(СтруктураПараметров, АдресХранилища) Экспорт
	
	Если РегламентныеЗаданияСервер.РаботаСВнешнимиРесурсамиЗаблокирована() Тогда
		// Не показываем баннеры, если работа с внешними ресурсами заблокирована.
		// Нет смысла собирать и показывать баннеры для копий информационных баз.
		ПоместитьВоВременноеХранилище(Неопределено, АдресХранилища);
		Возврат;
	КонецЕсли;
	
	Организация = СтруктураПараметров.Организация;
	Размещение = СтруктураПараметров.Размещение;
	ПоказатьПредыдущий = СтруктураПараметров.ПоказатьПредыдущий;
	
	// Получаем баннеры в ротации у текущего пользователя в указанном размещении.
	БаннерыВРотации = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ПерсонализированныеПредложенияСервисов_НаборБаннеровВРотации",
		Размещение, Новый Массив);
	
	Если ТипЗнч(БаннерыВРотации) <> Тип("Массив") Тогда
		БаннерыВРотации = Новый Массив;
	КонецЕсли;
	
	// Ротируем пользовательский список баннеров.
	Если БаннерыВРотации.Количество() > 1 Тогда
		Если ПоказатьПредыдущий Тогда
			ПоследнийБаннер = БаннерыВРотации[БаннерыВРотации.ВГраница()];
			БаннерыВРотации.Удалить(БаннерыВРотации.ВГраница());
			БаннерыВРотации.Вставить(0, ПоследнийБаннер);
		Иначе
			ПервыйБаннер = БаннерыВРотации[0];
			БаннерыВРотации.Удалить(0);
			БаннерыВРотации.Добавить(ПервыйБаннер);
		КонецЕсли;
	КонецЕсли;
	
	//ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
	ТекущаяДата = ТекущаяДатаСеанса();
	
	// Получим список баннеров для пользователя по организации и размещению.
	// Баннеры, привязанные к организации, не показываем, если организация не заполнена.
	// Баннеры, непривязанные к организации, показываем всегда.
	СписокБаннеров = БаннерыПользователя(Организация, Размещение, ТекущаяДата);
	Если СписокБаннеров.Количество() = 0 Тогда
		ПоместитьВоВременноеХранилище(Неопределено, АдресХранилища);
		Возврат;
	КонецЕсли;
	
	// Обновим данные по которым будем получать информацию.
	ИнтервалОбновления = 60 * 60 * 4; // обновляем данные с интервалом 4 часа.
	РегистрыСведений.ПерсонализированныеДанные.ОбновитьДанные(
		Организация,
		ТекущаяДата,
		ИнтервалОбновления,
		РазделыПерсонализированныхДанных(СписокБаннеров));
	
	// Получим данные для баннеров.
	ДанныеБаннеров = ДанныеБаннеров(СписокБаннеров, Организация, ТекущаяДата);
	
	ТекущаяГруппа = Неопределено;
	
	// Собираем идентификаторы всех доступных баннеров.
	ИдентификаторыДоступныхБаннеров = Новый Массив;
	Для Каждого СтрокаСписка Из СписокБаннеров Цикл
		Если ВыполняютсяУсловияБаннера(СтрокаСписка.Баннер, ДанныеБаннеров) Тогда
			Если ТекущаяГруппа = Неопределено Тогда
				ТекущаяГруппа = СтрокаСписка.Баннер.Группа;
			КонецЕсли;
			Если ТекущаяГруппа <> СтрокаСписка.Баннер.Группа Тогда
				Продолжить; // Пропускаем баннеры, которые не входят в текущую группу.
			КонецЕсли;
			
			ИдентификаторыДоступныхБаннеров.Вставить(0, СтрокаСписка.Баннер.Идентификатор);
			// Если исключительный баннер не входит в группу, показывается только он.
			Если СтрокаСписка.Баннер.Исключительный И СтрокаСписка.Баннер.Группа = Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ИдентификаторыНовогоНабораБаннеровВРотации = Новый Массив;
	
	// Оставляем в ротации только доступные баннеры.
	Для каждого БаннерВРотации Из БаннерыВРотации Цикл
		Если ИдентификаторыДоступныхБаннеров.Найти(БаннерВРотации.Идентификатор) <> Неопределено Тогда
			ИдентификаторыНовогоНабораБаннеровВРотации.Добавить(БаннерВРотации.Идентификатор);
		КонецЕсли;
	КонецЦикла;
	
	// Новые доступные баннеры добавляем в начало очереди.
	Для каждого ИдентификаторДоступногоБаннера Из ИдентификаторыДоступныхБаннеров Цикл
		Позиция = ?(ПоказатьПредыдущий И ИдентификаторыНовогоНабораБаннеровВРотации.Количество() > 0, 1, 0);
		Если ИдентификаторыНовогоНабораБаннеровВРотации.Найти(ИдентификаторДоступногоБаннера) = Неопределено Тогда
			ИдентификаторыНовогоНабораБаннеровВРотации.Вставить(Позиция, ИдентификаторДоступногоБаннера);
		КонецЕсли;
	КонецЦикла;
	
	// Заменяем набор баннеров в ротации на новый
	БаннерыВРотации = Новый Массив;
	Для каждого ИдентификаторНовогоБаннераВРотации Из ИдентификаторыНовогоНабораБаннеровВРотации Цикл
		НовыйБаннер = СписокБаннеров.Найти(ИдентификаторНовогоБаннераВРотации, "ИдентификаторБаннера").Баннер;
		ЗаполнитьДанныеБаннера(НовыйБаннер, ДанныеБаннеров);
		БаннерыВРотации.Добавить(НовыйБаннер);
	КонецЦикла;
	
	// Сохраняем баннеры в ротации у текущего пользователя в указанном размещении.
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"ПерсонализированныеПредложенияСервисов_НаборБаннеровВРотации",
		Размещение, БаннерыВРотации);
	
	Баннер = Неопределено;
	
	Если БаннерыВРотации.Количество() > 0 Тогда
		Баннер = БаннерыВРотации[0];
		Баннер.Вставить("Единственный", БаннерыВРотации.Количество() = 1);
	КонецЕсли;
	
	Если Баннер <> Неопределено Тогда
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Персонализированные предложения сервисов. Показан баннер'"),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			Баннер.Идентификатор);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Баннер, АдресХранилища);
	
КонецПроцедуры

// Процедура отображает баннер на форме.
// Параметры:
//		Форма - Форма - Форма, на которой отображается баннер.
//		АдресРезультата - Строка - Адрес временного хранилища, в которое помещен баннер.
//
Процедура УстановитьБаннерНаФорме(Форма, АдресРезультата) Экспорт
	
	Элементы = Форма.Элементы;
	
	Баннер = ПолучитьИзВременногоХранилища(АдресРезультата);
	Если Баннер = Неопределено Тогда
		Элементы.Баннер.Видимость = Ложь;
	Иначе
		Форма.Баннер = Баннер;
		Элементы.ГруппаБаннерОжидание.Видимость = Ложь;
		Элементы.ТекстБаннера.Видимость         = Истина;
		Элементы.КартинкаБаннера.Видимость      = Истина;
		Элементы.Баннер.Видимость               = Истина;
		Элементы.ТекстБаннера.Шрифт             = Новый Шрифт(ШрифтыСтиля.ШрифтТекстаБаннера, , 2);
		Элементы.БаннерСФоном.ЦветФона          = ЦветаСтиля[Баннер.ЦветФонаБаннер];
		Элементы.КартинкаБаннера.Картинка       = БиблиотекаКартинок[Баннер.ИмяКартинкаЛоготипа];
		Форма.ТекстБаннера = Форма.Баннер.ТекстБаннера;
		
		Элементы.КартинкаПредыдущийБаннер.Видимость = НЕ Баннер.Единственный;
		Элементы.КартинкаСледующийБаннер.Видимость = НЕ Баннер.Единственный;
		
		Элементы.КартинкаЗакрытьБаннер.Доступность = Истина;
		Элементы.КартинкаПредыдущийБаннер.Доступность = Истина;
		Элементы.КартинкаСледующийБаннер.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьЗакрытиеБаннера(Баннер, Организация) Экспорт
	
	СохранитьОбстоятельстваЗакрытияБаннера(Баннер, Организация);
	
	СписокБаннеров = НовыйТаблицаСписокБаннеров();
	ДобавитьБаннерВТаблицу(СписокБаннеров, Баннер);
	РегистрыСведений.ПерсонализированныеДанные.ОбновитьДанные(
		Организация, Дата(1, 1, 1), 0, РазделыПерсонализированныхДанных(СписокБаннеров));
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Персонализированные предложения сервисов. Закрыт баннер'"),
		УровеньЖурналаРегистрации.Информация,
		,
		,
		Баннер.Идентификатор);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбновлениеИнформационнойБазы

Процедура ОчиститьБаннерыВРотацииПриОбновленииИнформационнойБазы() Экспорт
	
	ИменаРазмещения = Новый Массив;
	ИменаРазмещения.Добавить(ИмяРазмещенияОбщее());
	
	ОчиститьБаннерыВРотации(ИменаРазмещения);
	
КонецПроцедуры

Процедура ОчиститьБаннерыВРотации(ИменаРазмещения)
	
	ИмяНастройки = "ПерсонализированныеПредложенияСервисов_НаборБаннеровВРотации";
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пользователи.Ссылка,
	|	Пользователи.ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.ИдентификаторПользователяИБ) Тогда
			
			Пользователь = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Выборка.ИдентификаторПользователяИБ);
			Если Пользователь <> Неопределено Тогда
				Для каждого ИмяРазмещения Из ИменаРазмещения Цикл
					ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяНастройки,
						ИмяРазмещения, Новый Массив,, Пользователь.Имя);
				КонецЦикла;
			КонецЕсли;
			
		ИначеЕсли НЕ ОбщегоНазначения.РазделениеВключено() Тогда
			
			Для каждого ИмяРазмещения Из ИменаРазмещения Цикл
				ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяНастройки,
					ИмяРазмещения, Новый Массив);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РаботаСБаннерами

Функция ДанныеБаннеров(СписокБаннеров, Организация, ТекущаяДата)
	
	// Для получения данных удобнее использовать структуру вместо таблицы.
	// Перенесем данные из списка в структуру.
	СтруктураБаннеров = Новый Структура;
	Для Каждого СтрокаСписка Из СписокБаннеров Цикл
		СтруктураБаннеров.Вставить(СтрокаСписка.Баннер.Идентификатор, СтрокаСписка.Баннер);
	КонецЦикла;
	
	НомераТаблиц = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		ТекстЗапросаКоличествоКонтрагентов(Запрос, СтруктураБаннеров, НомераТаблиц)
		+ ТекстЗапросаКоличествоСчетовНаОплату(Запрос, СтруктураБаннеров, НомераТаблиц)
		+ ТекстЗапросаМоиЗадачи(Запрос, СтруктураБаннеров, НомераТаблиц)
		+ ТекстЗапросаСервисыКР(Запрос, СтруктураБаннеров, НомераТаблиц);
	
	Запрос.УстановитьПараметр("Организация",          Организация);
	Если Организация = Неопределено Тогда
		СписокОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ОрганизацииДанныеКоторыхДоступныПользователю();
		Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	КонецЕсли;
	Запрос.УстановитьПараметр("ТекущаяДата",          ТекущаяДата);
	// Ищем отчетность, которая начнется в течении 2х недель
	Запрос.УстановитьПараметр("НачалоКвартала",       НачалоКвартала(ТекущаяДата));
	Запрос.УстановитьПараметр("КонецКвартала",        КонецКвартала(ТекущаяДата));
	
	Запрос.УстановитьПараметр("ДоступКСервисамПолучен", РаботаСКонтрагентамиБП.ПроверитьДоступКСервисам());
	
	ДанныеБаннеров = Новый Структура;
	ДанныеБаннеров.Вставить("ТекущаяДата", ТекущаяДата);
	
	УстановитьПривилегированныйРежим(Истина);
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Результат = Запрос.ВыполнитьПакет();
		Для Каждого НомерТаблицы Из НомераТаблиц Цикл
			ДанныеБаннеров.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
		КонецЦикла;
	КонецЕсли;
	
	// Данные по сторонним сертификатам получаются из хранилища общих настроек, поэтому получим их отдельно.
	ПолучитьДанныеПоддержкаСервиса(ДанныеБаннеров, СтруктураБаннеров);
	
	ПолучитьДанныеБаннераАвтоматическаяЗагрузкаПатчей(ДанныеБаннеров);
	
	ПолучитьДанныеБаннераУстановитьДатуЗапрета(ДанныеБаннеров);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ДанныеБаннеров;
	
КонецФункции

Функция ВыполняютсяУсловияБаннера(Баннер, ДанныеБаннеров)
	
	Идентификатор = Баннер.Идентификатор;
	Если НЕ ДанныеБаннеров.Свойство(Идентификатор) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеБаннера = ДанныеБаннеров[Идентификатор];
	Если Идентификатор = ИдентификаторБаннераКоличествоКонтрагентов() Тогда
		Возврат ВыполняютсяУсловияБаннераКоличествоКонтрагентов(ДанныеБаннера, Баннер);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераПоддержкаСервиса() Тогда
		Возврат ВыполняютсяУсловияБаннераПоддержкаСервиса(ДанныеБаннера, Баннер);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераКоличествоСчетовНаОплату() Тогда
		Возврат ВыполняютсяУсловияБаннераКоличествоСчетовНаОплату(ДанныеБаннера, Баннер);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераМоиЗадачи() Тогда
		Возврат ВыполняютсяУсловияБаннераМоиЗадачи(ДанныеБаннера, Баннер);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераСервисыКР() Тогда
		Возврат ВыполняютсяУсловияБаннераСервисыКР(ДанныеБаннера, Баннер);
		
	ИначеЕсли  Идентификатор = ИдентификаторБаннераАвтоматическаяЗагрузкаПатчей() Тогда
		Возврат ВыполняютсяУсловияБаннераАвтоматическаяЗагрузкаПатчей(ДанныеБаннера, Баннер);
		
	ИначеЕсли  Идентификатор = ИдентификаторБаннераУстановитьДатуЗапрета() Тогда
		Возврат ВыполняютсяУсловияБаннераУстановитьДатуЗапрета(ДанныеБаннера, Баннер);
		
	Иначе
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДанныеБаннера(Баннер, ДанныеБаннеров)
	
	Идентификатор = Баннер.Идентификатор;
	ДанныеБаннера = ДанныеБаннеров[Идентификатор];
	ТекущаяДата   = ДанныеБаннеров.ТекущаяДата;
	
	Если Идентификатор = ИдентификаторБаннераКоличествоКонтрагентов() Тогда
		ЗаполнитьДанныеБаннераКоличествоКонтрагентов(Баннер, ДанныеБаннера, ТекущаяДата);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераПоддержкаСервиса() Тогда
		ЗаполнитьДанныеБаннераПоддержкаСервиса(Баннер, ДанныеБаннера);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераКоличествоСчетовНаОплату() Тогда
		ЗаполнитьДанныеБаннераКоличествоСчетовНаОплату(Баннер, ДанныеБаннера, ТекущаяДата);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераМоиЗадачи() Тогда
		ЗаполнитьДанныеБаннераМоиЗадачи(Баннер);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераСервисыКР() Тогда
		ЗаполнитьДанныеБаннераСервисыКР(Баннер, ТекущаяДата);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераАвтоматическаяЗагрузкаПатчей() Тогда
		ЗаполнитьДанныеБаннераАвтоматическаяЗагрузкаПатчей(Баннер);
		
	ИначеЕсли Идентификатор = ИдентификаторБаннераУстановитьДатуЗапрета() Тогда
		ЗаполнитьДанныеБаннераУстановитьДатуЗапрета(Баннер, ДанныеБаннера, ТекущаяДата);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОписанияБаннеров

// Каждый баннера имеет следующие функции:
// 1. Функция НовыйБаннер... описывает структуру добавления баннера в общий список.
// 2. Функция ТекстЗапроса... формирует текст запроса для получения данных баннера.
// 3. Функция ВыполняютсяУсловияБаннера... проверяет данные баннера на условие срабатывания.
// 4. Функция ЗаполнитьДанныеБаннера... помещает данные из общей коллекции ДанныеБаннеров в данные конкретного баннера, 
// который помещается в реквизит формы. Эта информация может быть перенесена в ОбстоятельстваЗакрытияБаннера.
// 5. Функция ТекстБаннера... возвращает форматированную строку с текстом баннера, который будет размещенна форме.
// 6. Функция ИдентификаторБаннера... ключ баннера, который используется для поиска и идентификации баннера.

#Область УстановитьДатуЗапрета

Функция НовыйБаннерУстановитьДатуЗапрета()
	
	Баннер                      = НовыйБаннерДляСписка();
	Баннер.ИмяСервиса           = ИмяУстановитьДатуЗапрета();
	Баннер.Идентификатор        = ИдентификаторБаннераУстановитьДатуЗапрета();
	Баннер.НавигационнаяСсылка  = ИдентификаторБаннераУстановитьДатуЗапрета();
	Баннер.ИмяКартинкаЛоготипа  = ИмяКартинкиЛоготипУстановитьДатуЗапрета();
	Баннер.ДоступенПоПравам     = ДоступностьБаннераУстановитьДатуЗапрета();
	Баннер.ЗависитОтОрганизации = Ложь;
	Баннер.ОбстоятельстваЗакрытия.Периодичность = Перечисления.Периодичность.Месяц;
	
	Баннер.ДанныеБаннера.Вставить("ОткрытьНастройкиПользователейИПрав", Ложь);
	Баннер.ДанныеБаннера.Вставить("ОткрытьДатыЗапретаИзмененияДанных", Ложь);
	Баннер.ДанныеБаннера.Вставить("ОткрытьСинхронизациюДанных", Ложь);
	Баннер.ДанныеБаннера.Вставить("ОткрытьДатыЗапретаЗагрузкиДанных", Ложь);
	
	Возврат Баннер;
	
КонецФункции

Функция ВыполняютсяУсловияБаннераУстановитьДатуЗапрета(ДанныеБаннера, Баннер)
	
	Если ДанныеБаннера.Количество() = 0
		ИЛИ ДанныеБаннера.ДатаНачалаПоказаБаннера > ТекущаяДатаСеанса()
		Тогда
		
		Возврат Ложь;
		
	ИначеЕсли ДанныеБаннера.ПроверятьЗапретЗагрузки Тогда 
		
		Возврат НЕ (ДанныеБаннера.ЕстьЗапретИзменения И ДанныеБаннера.ЕстьЗапретЗагрузки);
		
	Иначе
		
		Возврат НЕ ДанныеБаннера.ЕстьЗапретИзменения;
		
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДанныеБаннераУстановитьДатуЗапрета(Баннер, ДанныеБаннера, ТекущаяДата)
	
	// несмотря на наличие роли "ДобавлениеИзменениеДатЗапретаИзменения" у пользователя
	// может не быть права на редактирование константы "ИспользоватьДатыЗапретаИзменения"
	// в таком случае, выводим текст без навигационной ссылки
	
	ЕстьПравоРедактироватьЗапрет = ПравоДоступа("Редактирование", Метаданные.Константы.ИспользоватьДатыЗапретаИзменения);
	ЕстьПравоРедактироватьЗагрузку = ПравоДоступа("Редактирование", Метаданные.Константы.ИспользоватьДатыЗапретаЗагрузки);

	Если Не ДанныеБаннера.ИспользоватьДатыЗапретаИзменения 
		И Не ЕстьПравоРедактироватьЗапрет 
		Тогда
		
		Баннер.ТекстБаннера = ТекстБаннераУстановитьДатуЗапретаИзмененияБезСсылки(ДанныеБаннера);
		
	ИначеЕсли ДанныеБаннера.ЕстьЗапретИзменения 
		И ДанныеБаннера.ПроверятьЗапретЗагрузки
		И Не ДанныеБаннера.ЕстьЗапретЗагрузки И Не ЕстьПравоРедактироватьЗагрузку 
		Тогда
	
		Баннер.ТекстБаннера = ТекстБаннераУстановитьДатуЗапретаЗагрузкиБезСсылки(ДанныеБаннера);
		
	Иначе
		
		Если Не ДанныеБаннера.ИспользоватьДатыЗапретаИзменения Тогда
		
			Баннер.ДанныеБаннера.ОткрытьНастройкиПользователейИПрав = Истина;  		
			
		ИначеЕсли Не ДанныеБаннера.ЕстьЗапретИзменения Тогда
		
			Баннер.ДанныеБаннера.ОткрытьДатыЗапретаИзмененияДанных = Истина;  		
			
		ИначеЕсли Не ДанныеБаннера.ИспользоватьДатыЗапретаЗагрузки Тогда
		
			Баннер.ДанныеБаннера.ОткрытьСинхронизациюДанных = Истина;  		
			
		Иначе
		
			Баннер.ДанныеБаннера.ОткрытьДатыЗапретаЗагрузкиДанных = Истина;  		
		
		КонецЕсли;
		
		Баннер.ТекстБаннера = ТекстБаннераУстановитьДатуЗапрета(ДанныеБаннера, Баннер.НавигационнаяСсылка);
		
	КонецЕсли;
	
	Баннер.ОбстоятельстваЗакрытия.Вставить("ДатаЗакрытия", ТекущаяДата);
 
КонецПроцедуры

Функция ТекстБаннераУстановитьДатуЗапрета(ДанныеБаннера, НавигационнаяСсылка)
	
	ТекстЗаголовка = НовыйЗаголовок(
		СтрШаблон(НСтр("ru='Отчетная кампания за %1 год завершена'"), Формат(ДанныеБаннера.КонецОтчетногоГода, "ДФ=yyyy")));
	
	ШрифтТекста =  Новый Шрифт(ШрифтыСтиля.ШрифтТекстаБаннера, , 10);
	
	ТекстПодзаголовка = Новый ФорматированнаяСтрока(
		НовыйСтрокаБаннера(НСтр("ru='Для предотвращения случайного изменения данных, '"), , ШрифтТекста),
		НовыйСтрокаБаннера(НСтр("ru='закройте доступ'"), НавигационнаяСсылка, ШрифтТекста),
		НовыйСтрокаБаннера(НСтр("ru=' к прошлому году'"), , ШрифтТекста));
		
	Возврат НовыйТекстБаннера(ТекстЗаголовка, ТекстПодзаголовка);
	
КонецФункции

Функция ТекстБаннераУстановитьДатуЗапретаИзмененияБезСсылки(ДанныеБаннера)
	
	ТекстЗаголовка = НовыйЗаголовок(
		СтрШаблон(НСтр("ru='Отчетная кампания за %1 год завершена'"), Формат(ДанныеБаннера.КонецОтчетногоГода, "ДФ=yyyy")));
	
	ШрифтТекста =  Новый Шрифт(ШрифтыСтиля.ШрифтТекстаБаннера, , 10);
	
	ТекстПодзаголовка = Новый ФорматированнаяСтрока(
		НовыйСтрокаБаннера(НСтр("ru='Обратитесь к администратору для включения запрета доступа к прошлому году'"), , ШрифтТекста));
		
	Возврат НовыйТекстБаннера(ТекстЗаголовка, ТекстПодзаголовка);
	
КонецФункции

Функция ТекстБаннераУстановитьДатуЗапретаЗагрузкиБезСсылки(ДанныеБаннера)
	
	ТекстЗаголовка = НовыйЗаголовок(
		СтрШаблон(НСтр("ru='Отчетная кампания за %1 год завершена'"), Формат(ДанныеБаннера.КонецОтчетногоГода, "ДФ=yyyy")));
	
	ШрифтТекста =  Новый Шрифт(ШрифтыСтиля.ШрифтТекстаБаннера, , 10);
	
	ТекстПодзаголовка = Новый ФорматированнаяСтрока(
		НовыйСтрокаБаннера(НСтр("ru='Обратитесь к администратору для включения запрета загрузки данных прошлого года'"), , ШрифтТекста));
		
	Возврат НовыйТекстБаннера(ТекстЗаголовка, ТекстПодзаголовка);
	
КонецФункции

Функция ИдентификаторБаннераУстановитьДатуЗапрета()

	Возврат "УстановитьДатуЗапрета";

КонецФункции

Функция ДоступностьБаннераУстановитьДатуЗапрета()
	
	Возврат Пользователи.РолиДоступны("ДобавлениеИзменениеДатЗапретаИзменения", , Ложь);
	
КонецФункции

Процедура ПолучитьДанныеБаннераУстановитьДатуЗапрета(ДанныеБаннеров)
	
	ДанныеБаннера = Новый Структура;
	
	ДанныеБаннера.Вставить("ДатаНачалаПоказаБаннера", ДобавитьМесяц(НачалоГода(ТекущаяДатаСеанса()), 3));
	ДанныеБаннера.Вставить("КонецОтчетногоГода", КонецГода(НачалоГода(ТекущаяДатаСеанса()) - 1));
	
	ДанныеБаннера.Вставить("ИспользоватьДатыЗапретаЗагрузки", Константы.ИспользоватьДатыЗапретаЗагрузки.Получить());
	ДанныеБаннера.Вставить("ИспользоватьДатыЗапретаИзменения", Константы.ИспользоватьДатыЗапретаИзменения.Получить());
	
	// запрет загрузки по дате проверяем только при включенной синхронизации данных
	
	ПроверятьЗапретЗагрузки = Константы.ИспользоватьСинхронизациюДанных.Получить();
	ДанныеБаннера.Вставить("ПроверятьЗапретЗагрузки", ПроверятьЗапретЗагрузки);
	
	ПроверкаЗапрета = ДатыЗапретаИзменения.ШаблонДанныхДляПроверки();
	
	ДанныеДляПроверки			= ПроверкаЗапрета.Добавить();
	ДанныеДляПроверки.Раздел	= "БухгалтерскийУчет";
	ДанныеДляПроверки.Дата		= ДанныеБаннера.КонецОтчетногоГода;
	
	ОрганизацияПоУмолчанию = Справочники.Организации.ОрганизацияПоУмолчанию();
	
	Если Справочники.Организации.ИспользуетсяНесколькоОрганизаций() Тогда
		
		ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
		
		ЕстьЗапретИзменения	= Истина;
		ЕстьЗапретЗагрузки	= ПроверятьЗапретЗагрузки;
		
		Для каждого ДоступнаяОрганизация Из ДоступныеОрганизации Цикл
			
			ПервыйГодУчетаПоОрганизации = ЭтоПервыйГодУчетаОрганизации(ДоступнаяОрганизация);
			
			ДанныеДляПроверки.Объект = ДоступнаяОрганизация;
			
			ЕстьЗапретИзмененияПоОрганизации	=	ПервыйГодУчетаПоОрганизации 
				ИЛИ ЕстьЗапретИзменения 
					И ДатыЗапретаИзменения.НайденЗапретИзмененияДанных(ПроверкаЗапрета);
				
			ЕстьЗапретЗагрузкиПоОрганизации		=	ПервыйГодУчетаПоОрганизации 
				ИЛИ ЕстьЗапретЗагрузки 
					И ДатыЗапретаИзменения.НайденЗапретИзмененияДанных(ПроверкаЗапрета, , ,
						Перечисления.ВидыНазначенияДатЗапрета.ДляВсехИнформационныхБаз);
			
			Если Не ЕстьЗапретИзмененияПоОрганизации Тогда
				ЕстьЗапретИзменения = Ложь;												
			КонецЕсли;
			
			Если Не ЕстьЗапретЗагрузкиПоОрганизации Тогда
				ЕстьЗапретЗагрузки = Ложь;												
			КонецЕсли;
			
			Если ЕстьЗапретЗагрузки = Ложь И ЕстьЗапретИзменения = Ложь Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ПервыйГодУчета = ЭтоПервыйГодУчетаОрганизации(ОрганизацияПоУмолчанию); 
		
		ЕстьЗапретИзменения	=	ПервыйГодУчета
			ИЛИ ДатыЗапретаИзменения.НайденЗапретИзмененияДанных(ПроверкаЗапрета);
		ЕстьЗапретЗагрузки	=	ПервыйГодУчета
			ИЛИ ПроверятьЗапретЗагрузки	
			И 	ДатыЗапретаИзменения.НайденЗапретИзмененияДанных(ПроверкаЗапрета, , ,
				Перечисления.ВидыНазначенияДатЗапрета.ДляВсехИнформационныхБаз);
	КонецЕсли;
	
	ДанныеБаннера.Вставить("ЕстьЗапретЗагрузки", ЕстьЗапретЗагрузки);
	ДанныеБаннера.Вставить("ЕстьЗапретИзменения", ЕстьЗапретИзменения);
			
	ДанныеБаннеров.Вставить(ИдентификаторБаннераУстановитьДатуЗапрета(), ДанныеБаннера);
	
КонецПроцедуры

Функция ЭтоПервыйГодУчетаОрганизации(Организация)
	
	ДатаПервогоПроведенногоДокумента = ЖурналыДокументов.ЖурналОпераций.ДатаПервогоПроведенногоДокумента(Организация);
	
	Возврат	Не ЗначениеЗаполнено(ДатаПервогоПроведенногоДокумента)
			ИЛИ Год(ТекущаяДатаСеанса()) = Год(ДатаПервогоПроведенногоДокумента)
				
КонецФункции


#КонецОбласти

#Область АвтоматическаяЗагрузкаПатчей

Функция НовыйБаннерАвтоматическаяЗагрузкаПатчей()
	
	Баннер                      = НовыйБаннерДляСписка();
	Баннер.ИмяСервиса           = ИмяАвтоматическаяЗагрузкаПатчей();
	Баннер.Идентификатор        = ИдентификаторБаннераАвтоматическаяЗагрузкаПатчей();
	Баннер.НавигационнаяСсылка  = ИдентификаторБаннераАвтоматическаяЗагрузкаПатчей();
	Баннер.ИмяКартинкаЛоготипа  = ИмяКартинкиЛоготипАвтоматическаяЗагрузкаПатчей();
	Баннер.ДоступенПоПравам     = ДоступностьБаннераАвтоматическаяЗагрузкаПатчей();
	Баннер.ЗависитОтОрганизации = Ложь;
	Баннер.ОбстоятельстваЗакрытия.Периодичность = ""; // Баннер не периодичный.
	
	Возврат Баннер;
	
КонецФункции

Функция ВыполняютсяУсловияБаннераАвтоматическаяЗагрузкаПатчей(ДанныеБаннера, Баннер)
	
	Возврат Истина;
	
КонецФункции

Функция ЗаполнитьДанныеБаннераАвтоматическаяЗагрузкаПатчей(Баннер)
	
	Баннер.ТекстБаннера = ТекстБаннераАвтоматическаяЗагрузкаПатчей(Баннер.НавигационнаяСсылка);
	Баннер.ОбстоятельстваЗакрытия.Вставить("ИсключитьБаннер", Истина);
	
КонецФункции

Функция ТекстБаннераАвтоматическаяЗагрузкаПатчей(НавигационнаяСсылка)
	
	ТекстЗаголовка = НовыйЗаголовок(НСтр("ru='Автоматическая загрузка обновлений'"));
	
	Если ПолучениеОбновленийПрограммы.ДоступноИспользованиеОбновленияПрограммы(Истина) Тогда
		ТекстПодзаголовка = Новый ФорматированнаяСтрока(
			НовыйСтрокаБаннера(НСтр("ru='Включите'"), НавигационнаяСсылка),
			НовыйСтрокаБаннера(" "),
			НовыйСтрокаБаннера(НСтр("ru='автоматическую загрузку быстрых обновлений'")));
	Иначе
		ТекстПодзаголовка = Новый ФорматированнаяСтрока(
			НовыйСтрокаБаннера(НСтр("ru='Попросите администратора включить автоматическую загрузку быстрых обновлений'")));
	КонецЕсли;
		
	Возврат НовыйТекстБаннера(ТекстЗаголовка, ТекстПодзаголовка)
	
КонецФункции

Функция ИдентификаторБаннераАвтоматическаяЗагрузкаПатчей()

	Возврат "АвтоматическаяЗагрузкаПатчей";

КонецФункции

Функция ДоступностьБаннераАвтоматическаяЗагрузкаПатчей()
	
	// Баннер доступен в ПРОФ и КОРП в режиме коробки.
	Возврат Не СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации()
		И Не ОбщегоНазначения.РазделениеВключено()
		И ПолучениеОбновленийПрограммы.ДоступнаАвтоматическаяЗагрузкаИсправлений()
		И Не ПолучениеОбновленийПрограммы.АвтоматическаяЗагрузкаИсправленийВключена();
	
КонецФункции

Процедура ПолучитьДанныеБаннераАвтоматическаяЗагрузкаПатчей(ДанныеБаннеров)
	
	ДанныеБаннеров.Вставить(ИдентификаторБаннераАвтоматическаяЗагрузкаПатчей(), Новый Структура);
	
КонецПроцедуры

#КонецОбласти

#Область КоличествоКонтрагентов

Функция НовыйБаннерКоличествоКонтрагентов()
	
	Баннер                      = НовыйБаннерДляСписка();
	Баннер.ИмяСервиса           = ИмяСервис1СКонтрагент();
	Баннер.Идентификатор        = ИдентификаторБаннераКоличествоКонтрагентов();
	Баннер.ЦветФонаБаннер       = "ЦветФонаБаннерКонтрагент";
	Баннер.ЗависитОтОрганизации = Ложь;
	Баннер.ИмяКартинкаЛоготипа  = ИмяКартинкиЛоготип1СКонтрагент();
	Баннер.НавигационнаяСсылка  = ИдентификаторБаннераКоличествоКонтрагентов();
	Баннер.ДоступенПоПравам     = ДоступностьБаннераКоличествоКонтрагентов();
	Баннер.ДанныеБаннера.Вставить("КоличествоКонтрагентов", 0);
	Баннер.ОбстоятельстваЗакрытия.Периодичность = Перечисления.Периодичность.Квартал;
	
	Возврат Баннер;
	
КонецФункции

Функция ТекстЗапросаКоличествоКонтрагентов(Запрос, СтруктураБаннеров, НомераТаблиц)
	
	Идентификатор = ИдентификаторБаннераКоличествоКонтрагентов();
	
	Если НЕ СтруктураБаннеров.Свойство(Идентификатор) Тогда
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить(Идентификатор, НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПерсонализированныеДанные.ЗначениеПоказателя КАК КоличествоКонтрагентов
	|ИЗ
	|	РегистрСведений.ПерсонализированныеДанные КАК ПерсонализированныеДанные
	|ГДЕ
	|	ПерсонализированныеДанные.Организация = &Организация
	|	И ПерсонализированныеДанные.Раздел = ЗНАЧЕНИЕ(Перечисление.РазделыПерсонализированныхДанных.КоличествоКонтрагентов)";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
КонецФункции

Функция ВыполняютсяУсловияБаннераКоличествоКонтрагентов(ДанныеБаннера, Баннер)
	
	Если ДанныеБаннера.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ДанныеБаннера[0].КоличествоКонтрагентов >= КоличествоКонтрагентовДляРекламыКонтрагент() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДанныеБаннераКоличествоКонтрагентов(Баннер, ДанныеБаннера, ТекущаяДата)
	
	Баннер.ТекстБаннера = ТекстБаннераКоличествоКонтрагентов(Баннер.НавигационнаяСсылка, ДанныеБаннера[0], ТекущаяДата);
	ЗаполнитьЗначенияСвойств(Баннер.ДанныеБаннера, ДанныеБаннера[0]);
	Баннер.ОбстоятельстваЗакрытия.ДатаЗакрытия = ТекущаяДата;
	
КонецПроцедуры

Функция ТекстБаннераКоличествоКонтрагентов(НавигационнаяСсылка, ДанныеБаннера, ТекущаяДата)
	
	МинутНаОдногоКонтрагента = 1;
	ВсегоМинут = ДанныеБаннера.КоличествоКонтрагентов * МинутНаОдногоКонтрагента;
	КоличествоЧасов = Цел(ВсегоМинут / 60);
	КоличествоМинут = ВсегоМинут % 60;
	
	Если КоличествоМинут = 0 Тогда
		ПотраченоВремени = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоЧасов, "час, часа, часов");
	ИначеЕсли КоличествоЧасов = 0 Тогда
		ПотраченоВремени = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(ВсегоМинут, "минуту, минуты, минут");
	Иначе
		ПотраченоВремени = СтрШаблон("%1 %2",
			СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоЧасов, "час, часа, часов"),
			СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоМинут, "минуту, минуты, минут"));
	КонецЕсли;
	
	ТекстЗаголовка = НовыйЗаголовок(СтрШаблон(НСтр("ru='Вы потратили %1 на ввод контрагентов в этом квартале'"), 
		ПотраченоВремени));
	
	ТекстПодзаголовка = Новый ФорматированнаяСтрока(
		НовыйСтрокаБаннера(НСтр("ru='Узнайте, как делать это быстрее с помощью'")),
		НовыйСтрокаБаннера(" "),
		НовыйСтрокаБаннера(НСтр("ru='1С:Контрагент!'"), НавигационнаяСсылка));
		
	Возврат НовыйТекстБаннера(ТекстЗаголовка, ТекстПодзаголовка);
	
КонецФункции

Функция ИдентификаторБаннераКоличествоКонтрагентов()

	Возврат "КоличествоКонтрагентов";

КонецФункции

Функция ДоступностьБаннераКоличествоКонтрагентов()
	
	ПравоДоступаККонтрагентам = ПравоДоступа(
		"Просмотр",
		Метаданные.Справочники.Контрагенты
	);
	
	Возврат ПравоДоступаККонтрагентам;
	
КонецФункции

#КонецОбласти

#Область ПоддержкаСервиса

Функция НовыйБаннерПоддержкаСервиса()
	
	Баннер                     = НовыйБаннерДляСписка();
	Баннер.ИмяСервиса          = ИмяСервисПоддержкаСервиса();
	Баннер.Идентификатор       = ИдентификаторБаннераПоддержкаСервиса();
	Баннер.НавигационнаяСсылка = ИдентификаторБаннераПоддержкаСервиса();
	Баннер.ДоступенПоПравам    = ДоступностьБаннераПоддержкаСервиса();
	Баннер.ОбстоятельстваЗакрытия.Вставить("ИдентификаторыСобытий", Новый Массив);
	Баннер.ОбстоятельстваЗакрытия.Периодичность = ""; // Баннер не периодичный.
	Баннер.ЗависитОтОрганизации = Ложь;
	Баннер.Исключительный       = Истина;
	
	Возврат Баннер;
	
КонецФункции

Функция ИдентификаторБаннераПоддержкаСервиса()
	
	Возврат "ПоддержкаСервиса";
	
КонецФункции

Функция ДоступностьБаннераПоддержкаСервиса()
	
	Возврат ОбщегоНазначения.РазделениеВключено();
	
КонецФункции

Функция НовыйЗаголовокПоддержкаСервиса(ТекстЗаголовка, НавигационнаяСсылка = "")
	
	Возврат НовыйЗаголовок(ТекстЗаголовка, НавигационнаяСсылка, ШрифтыСтиля.ШрифтЗаголовкаИнформационнойПанели);
	
КонецФункции

Процедура ПолучитьДанныеПоддержкаСервиса(ДанныеБаннеров, СтруктураБаннеров)
	
	Идентификатор = ИдентификаторБаннераПоддержкаСервиса();
	Если НЕ СтруктураБаннеров.Свойство(Идентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСообщенийСервиса = Новый ТаблицаЗначений;
	ТаблицаСообщенийСервиса.Колонки.Добавить(
		"СсылкаНаДанные", Новый ОписаниеТипов("СправочникСсылка.ОбщиеДанныеИнформационногоЦентра"));
	УстановитьПривилегированныйРежим(Истина);
	ИнформационныйЦентрСервер.СформироватьСписокНовостейНаРабочийСтол(ТаблицаСообщенийСервиса, 1);
	
	Если ТаблицаСообщенийСервиса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Баннер = СтруктураБаннеров[Идентификатор];
	
	ИдентификаторыЗакрытыхБаннеров = Баннер.ОбстоятельстваЗакрытия.ИдентификаторыСобытий;
	Если ТипЗнч(ИдентификаторыЗакрытыхБаннеров) <> Тип("Массив") Тогда
		ИдентификаторыЗакрытыхБаннеров = Новый Массив;
	КонецЕсли;
	
	РеквизитыСообщения = "Наименование, Идентификатор, Критичность, ТипИнформации";
	ДанныеСообщений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ТаблицаСообщенийСервиса.ВыгрузитьКолонку("СсылкаНаДанные"), РеквизитыСообщения);
	
	Баннер.ДанныеБаннера.Вставить("ДанныеСобытия", Новый Структура(РеквизитыСообщения));
	
	ТаблицаДанныеБаннера = Новый ТаблицаЗначений;
	Для каждого ЭлементСобытия Из Баннер.ДанныеБаннера.ДанныеСобытия Цикл
		ТаблицаДанныеБаннера.Колонки.Добавить(ЭлементСобытия.Ключ);
	КонецЦикла;
	
	Для каждого ОписаниеСобытия Из ДанныеСообщений Цикл
		ДанныеСобытия = ОписаниеСобытия.Значение;
		Если ИдентификаторыЗакрытыхБаннеров.Найти(ДанныеСобытия.Идентификатор) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаДанныеБаннера.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСобытия);
	КонецЦикла;
	ТаблицаДанныеБаннера.Сортировать("Критичность Убыв, Идентификатор Возр");
	
	ДанныеБаннеров.Вставить(Идентификатор, ТаблицаДанныеБаннера);
	
КонецПроцедуры

Функция ВыполняютсяУсловияБаннераПоддержкаСервиса(ДанныеБаннера, Баннер)
	
	Если ДанныеБаннера.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат КритичноеСообщениеСервиса(ДанныеБаннера[0]);
	
КонецФункции

Процедура ЗаполнитьДанныеБаннераПоддержкаСервиса(Баннер, ДанныеБаннера)
	
	Если ДанныеБаннера.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Баннер.ТекстБаннера = ТекстБаннераПоддержкаСервиса(Баннер.НавигационнаяСсылка, ДанныеБаннера[0]);
	ЗаполнитьЗначенияСвойств(Баннер.ДанныеБаннера.ДанныеСобытия, ДанныеБаннера[0]);
	
	Баннер.ЦветФонаБаннер = ЦветФонаБаннераКритичноеСообщениеСервиса();
	Баннер.ИмяКартинкаЛоготипа = ИмяКартинкиКритичноеСообщениеСервиса();
	
КонецПроцедуры

Функция ТекстБаннераПоддержкаСервиса(НавигационнаяСсылка, ДанныеБаннера)
	
	ЧастиЗаголовка = Новый Массив;
	ЧастиЗаголовка.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Внимание!'"), Новый Шрифт(,, Истина)));
	ЧастиЗаголовка.Добавить(Символы.ПС);
	ЧастиЗаголовка.Добавить(НовыйЗаголовокПоддержкаСервиса(ДанныеБаннера.Наименование));
	ЧастиЗаголовка.Добавить(НовыйСтрокаБаннера(" "));
	ЧастиЗаголовка.Добавить(НовыйЗаголовокПоддержкаСервиса(НСтр("ru = 'Подробнее'"), НавигационнаяСсылка));
	ТекстЗаголовка = НовыйЗаголовок(ЧастиЗаголовка);
	
	Возврат ТекстЗаголовка;
	
КонецФункции

Функция КритичноеСообщениеСервиса(ТекущееСообщение) Экспорт
	
	Возврат ТекущееСообщение.Критичность > 5 Или Строка(ТекущееСообщение.ТипИнформации) = "Недоступность";
	
КонецФункции

Функция ЦветФонаБаннераКритичноеСообщениеСервиса()
	
	Возврат "ЦветФонаПредупреждения";
	
КонецФункции

Функция ИмяКартинкиКритичноеСообщениеСервиса()
	
	Возврат "КотКритичноеСообщениеСервиса";
	
КонецФункции

#КонецОбласти

#Область КоличествоСчетовНаОплату

Функция НовыйБаннерКоличествоСчетовНаОплату()
	
	Баннер                      = НовыйБаннерДляСписка();
	Баннер.ИмяСервиса           = ИмяСервисКоличествоСчетовНаОплату();
	Баннер.Идентификатор        = ИдентификаторБаннераКоличествоСчетовНаОплату();
	Баннер.ЗависитОтОрганизации = Ложь;
	Баннер.ИмяКартинкаЛоготипа 	= ИмяКартинкиМоиЗадачи();
	Баннер.НавигационнаяСсылка  = ИдентификаторБаннераКоличествоСчетовНаОплату();
	Баннер.ДоступенПоПравам     = ДоступностьБаннераКоличествоСчетовНаОплату();
	Баннер.ДанныеБаннера.Вставить("КоличествоСчетовНаОплату", 0);
	Баннер.ОбстоятельстваЗакрытия.Периодичность = Перечисления.Периодичность.Месяц;
	
	Возврат Баннер;
	
КонецФункции

Функция ТекстЗапросаКоличествоСчетовНаОплату(Запрос, СтруктураБаннеров, НомераТаблиц)
	
	Идентификатор = ИдентификаторБаннераКоличествоСчетовНаОплату();
	
	Если НЕ СтруктураБаннеров.Свойство(Идентификатор) Тогда
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить(Идентификатор, НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПерсонализированныеДанные.ЗначениеПоказателя КАК КоличествоСчетовНаОплату
	|ИЗ
	|	РегистрСведений.ПерсонализированныеДанные КАК ПерсонализированныеДанные
	|ГДЕ
	|	ПерсонализированныеДанные.Организация = &Организация
	|	И ПерсонализированныеДанные.Раздел = ЗНАЧЕНИЕ(Перечисление.РазделыПерсонализированныхДанных.КоличествоСчетовНаОплату)";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
КонецФункции

Функция ВыполняютсяУсловияБаннераКоличествоСчетовНаОплату(ДанныеБаннера, Баннер)
	
	Если ДанныеБаннера.Количество() = 0
		Или ПолучитьФункциональнуюОпцию("ПериодическоеСозданиеДокументов") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ДанныеБаннера[0].КоличествоСчетовНаОплату >= КоличествоСчетовНаОплатуДляРекламы() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДанныеБаннераКоличествоСчетовНаОплату(Баннер, ДанныеБаннера, ТекущаяДата)
	
	Баннер.ТекстБаннера = ТекстБаннераКоличествоСчетовНаОплату(Баннер.НавигационнаяСсылка, ДанныеБаннера[0], ТекущаяДата);
	ЗаполнитьЗначенияСвойств(Баннер.ДанныеБаннера, ДанныеБаннера[0]);
	Баннер.ОбстоятельстваЗакрытия.ДатаЗакрытия = ТекущаяДата;
	
КонецПроцедуры

Функция ТекстБаннераКоличествоСчетовНаОплату(НавигационнаяСсылка, ДанныеБаннера, ТекущаяДата)
	
	МинутНаОдинСчет = 5;
	ВсегоМинут = ДанныеБаннера.КоличествоСчетовНаОплату * МинутНаОдинСчет;
	КоличествоЧасов = Цел(ВсегоМинут / 60);
	КоличествоМинут = ВсегоМинут % 60;
	
	Если КоличествоМинут = 0 Тогда
		ПотраченоВремени = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоЧасов, "час, часа, часов");
	ИначеЕсли КоличествоЧасов = 0 Тогда
		ПотраченоВремени = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(ВсегоМинут, "минуту, минуты, минут");
	Иначе
		ПотраченоВремени = СтрШаблон("%1 %2",
			СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоЧасов, "час, часа, часов"),
			СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоМинут, "минуту, минуты, минут"));
	КонецЕсли;
	
	ТекстЗаголовка = НовыйЗаголовок(СтрШаблон(НСтр("ru='Вы потратили %1 на ввод счетов на оплату в этом месяце'"), 
		ПотраченоВремени));
	
	ТекстПодзаголовка = Новый ФорматированнаяСтрока(
		НовыйСтрокаБаннера(НСтр("ru='Включите настройку'")),
		НовыйСтрокаБаннера(" "),
		НовыйСтрокаБаннера(НСтр("ru='Переодического создания счетов на оплату!'"), НавигационнаяСсылка));
		
	Возврат НовыйТекстБаннера(ТекстЗаголовка, ТекстПодзаголовка);
	
КонецФункции

Функция ИдентификаторБаннераКоличествоСчетовНаОплату()

	Возврат "КоличествоСчетовНаОплату";

КонецФункции

Функция ДоступностьБаннераКоличествоСчетовНаОплату()
	
	ПравоДоступаККонтрагентам = ПравоДоступа(
		"Просмотр",
		Метаданные.Документы.СчетНаОплатуПокупателю
	);
	
	Возврат ПравоДоступаККонтрагентам;
	
КонецФункции

#КонецОбласти

#Область МоиЗадачи

Функция НовыйБаннерМоиЗадачи()
	
	Баннер                     = НовыйБаннерДляСписка();
	Баннер.ИмяСервиса          = ИмяСервисМоиЗадачи();
	Баннер.Идентификатор       = ИдентификаторБаннераМоиЗадачи();
	Баннер.ДоступенПоПравам    = Истина;
	Баннер.ИмяКартинкаЛоготипа = ИмяКартинкиМоиЗадачи();
	Баннер.ЦветФонаБаннер      = "ЦветФонаБаннерМоиЗадачи";
	Баннер.НавигационнаяСсылка = ИдентификаторБаннераМоиЗадачи();
	Баннер.ЗависитОтОрганизации = Ложь;
	Баннер.ОбстоятельстваЗакрытия.Периодичность = ""; // Баннер не периодичный.
	
	Возврат Баннер;
	
КонецФункции

Функция ТекстЗапросаМоиЗадачи(Запрос, СтруктураБаннеров, НомераТаблиц)
	
	Идентификатор = ИдентификаторБаннераМоиЗадачи();
	
	Если НЕ СтруктураБаннеров.Свойство(Идентификатор) Тогда
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить(Идентификатор, НомераТаблиц.Количество());
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ИСТИНА КАК НужноВыводитьБаннер
		|ИЗ
		|	Константа.ИспользоватьБизнесПроцессыИЗадачи КАК ИспользоватьБизнесПроцессыИЗадачи
		|ГДЕ
		|	ИспользоватьБизнесПроцессыИЗадачи.Значение = ЛОЖЬ";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
КонецФункции

Функция ВыполняютсяУсловияБаннераМоиЗадачи(ДанныеБаннера, Баннер)
	
	Если ДанныеБаннера.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьДанныеБаннераМоиЗадачи(Баннер)
	
	Баннер.ТекстБаннера = ТекстБаннераМоиЗадачи(Баннер.НавигационнаяСсылка);
	Баннер.ОбстоятельстваЗакрытия.Вставить("ИсключитьБаннер", Истина);
	
КонецПроцедуры

Функция ТекстБаннераМоиЗадачи(НавигационнаяСсылка)
	
	ТекстЗаголовка = НовыйЗаголовок(НСтр("ru='Запутались в своих задачах?'"));
	
	Если МоиЗадачи.ЕстьПравоВключатьМоиЗадачи() Тогда
		
		ТекстПодзаголовка = 
			НовыйСтрокаБаннера(НСтр("ru='Включите Мои задачи в настройках и ведите их в программе'"), НавигационнаяСсылка);
		
	Иначе
		
		ТекстПодзаголовка = 
			НовыйСтрокаБаннера(НСтр("ru='Попросите администратора включить Мои задачи в настройках'"));
		
	КонецЕсли;
	
	Возврат НовыйТекстБаннера(ТекстЗаголовка, ТекстПодзаголовка);
	
КонецФункции

Функция ИмяКартинкиМоиЗадачи()
	
	Возврат "КотСПланшетом";
	
КонецФункции

Функция ИдентификаторБаннераМоиЗадачи()

	Возврат "МоиЗадачи";

КонецФункции

#КонецОбласти

#Область СервисыКР

Функция НовыйБаннерСервисыКР()
	
	Баннер                     = НовыйБаннерДляСписка();
	Баннер.ИмяСервиса          = ИмяСервисСервисыКР();
	Баннер.Идентификатор       = ИдентификаторБаннераСервисыКР();
	Баннер.ДоступенПоПравам    = Истина;
	Баннер.ИмяКартинкаЛоготипа = ИмяКартинкиСервисыКР();
	Баннер.НавигационнаяСсылка = ИдентификаторБаннераСервисыКР();
	Баннер.ЗависитОтОрганизации = Ложь;
	Баннер.ОбстоятельстваЗакрытия.Периодичность = Перечисления.Периодичность.День;
	
	Возврат Баннер;
	
КонецФункции

Функция ТекстЗапросаСервисыКР(Запрос, СтруктураБаннеров, НомераТаблиц)
	
	Идентификатор = ИдентификаторБаннераСервисыКР();
	
	Если НЕ СтруктураБаннеров.Свойство(Идентификатор) Тогда
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить(Идентификатор, НомераТаблиц.Количество());
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	&ДоступКСервисамПолучен КАК ДоступКСервисамПолучен";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
КонецФункции

Функция ВыполняютсяУсловияБаннераСервисыКР(ДанныеБаннера, Баннер)
	
	Если ТребуетсяНастройкаАвторизацияИнтернетПоддержки() Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	Если ДанныеБаннера.Количество() > 0
		И ДанныеБаннера[0].ДоступКСервисамПолучен Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьДанныеБаннераСервисыКР(Баннер, ТекущаяДата)
	
	Баннер.ТекстБаннера = ТекстБаннераСервисыКР(Баннер.НавигационнаяСсылка);
	Баннер.ОбстоятельстваЗакрытия.ДатаЗакрытия = ТекущаяДата;
	
КонецПроцедуры

Функция ТекстБаннераСервисыКР(НавигационнаяСсылка)
	
	ТекстЗаголовка = НовыйЗаголовок(НСтр("ru='Сервисы не подключены'"));
	
	ТекстПодзаголовка = Новый ФорматированнаяСтрока(
		НовыйСтрокаБаннера(НСтр("ru='Подключите сервисы и работайте с комфортом'"), НавигационнаяСсылка));
	
	Возврат НовыйТекстБаннера(ТекстЗаголовка, ТекстПодзаголовка);
	
КонецФункции

Функция ИмяКартинкиСервисыКР()
	
	Возврат "КотАнтикризис";
	
КонецФункции

Функция ИдентификаторБаннераСервисыКР()

	Возврат "СервисыКР";

КонецФункции

#КонецОбласти

#КонецОбласти

#Область РаботаСоСпискомБаннеров

Функция ОбщийСписокБаннеров(Размещение)
	
	СписокБаннеров = НовыйТаблицаСписокБаннеров();
	
	Если Размещение = ИмяРазмещенияОбщее()
		Или Размещение = ИмяРазмещенияСписокЗадач() Тогда
		// Исключительные баннеры. Если выполняются условия показа для одного из них,
		// остальные баннеры не показываются.
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерПоддержкаСервиса()); // должен быть первым
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерКоличествоКонтрагентов());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерКоличествоСчетовНаОплату());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерМоиЗадачи());
		ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерСервисыКР());
		Если Размещение = ИмяРазмещенияОбщее() Тогда
			ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерАвтоматическаяЗагрузкаПатчей());
			ДобавитьБаннерВТаблицу(СписокБаннеров, НовыйБаннерУстановитьДатуЗапрета());
		КонецЕсли;
	КонецЕсли;	
	
	Возврат СписокБаннеров;
	
КонецФункции

Функция БаннерыПользователя(Организация, Размещение, ТекущаяДата)
	
	СписокБаннеров             = ОбщийСписокБаннеров(Размещение);
	СписокБаннеровПользователя = НовыйТаблицаСписокБаннеров();
	
	// Если организация не указана, исключим из списка баннеры, зависящие от организации.
	ИсключитьБаннерыПоОрганизации(СписокБаннеров, Организация);
	
	// Исключим из списка баннеры, по которым уже подключены сервисы.
	ИсключитьБаннерыПоПодключеннымСервисам(СписокБаннеров, Организация, ТекущаяДата);
	
	// Дополним список баннеров обстоятельствами закрытия баннера.
	ДополнитьБаннерыОбстоятельствамиЗакрытия(СписокБаннеров, Организация);
	
	Для Каждого СтрокаСписка Из СписокБаннеров Цикл
		
		ОбстоятельстваЗакрытия = СтрокаСписка.Баннер.ОбстоятельстваЗакрытия;
		
		// Пропускаем баннеры, которые уже показывали в этом периоде.
		Если ОбстоятельстваЗакрытия.Периодичность = Перечисления.Периодичность.День Тогда
			Если НачалоДня(ОбстоятельстваЗакрытия.ДатаЗакрытия) = НачалоДня(ТекущаяДата) Тогда
				Продолжить;
			КонецЕсли;
		ИначеЕсли ОбстоятельстваЗакрытия.Периодичность = Перечисления.Периодичность.Месяц Тогда
			Если НачалоМесяца(ОбстоятельстваЗакрытия.ДатаЗакрытия) = НачалоМесяца(ТекущаяДата) Тогда
				Продолжить;
			КонецЕсли;
		ИначеЕсли ОбстоятельстваЗакрытия.Периодичность = Перечисления.Периодичность.Квартал Тогда
			Если НачалоКвартала(ОбстоятельстваЗакрытия.ДатаЗакрытия) = НачалоКвартала(ТекущаяДата) Тогда
				Продолжить;
			КонецЕсли;
		ИначеЕсли ОбстоятельстваЗакрытия.Свойство("ИсключитьБаннер") И ОбстоятельстваЗакрытия.ИсключитьБаннер Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаСпискаПользователя = СписокБаннеровПользователя.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСпискаПользователя, СтрокаСписка);
		
	КонецЦикла;
	
	// Отсортируем баннеры по приоритету.
	СписокБаннеровПользователя.Сортировать("Порядок", Новый СравнениеЗначений);
	
	Возврат СписокБаннеровПользователя;
	
КонецФункции

Процедура ИсключитьБаннерыПоПодключеннымСервисам(СписокБаннеров, Организация, ТекущаяДата)
	
	// Обновим данные по которым будем получать информацию.
	Разделы = РазделыПерсонализированныхДанныхПодключенныеСервисы(СписокБаннеров);
	ИнтервалОбновления = 60 * 60 * 24 * 7; // обновляем данные с интервалом 1 неделя.
	РегистрыСведений.ПерсонализированныеДанные.ОбновитьДанные(
		Организация,
		ТекущаяДата,
		ИнтервалОбновления,
		Разделы);
		
	УстановитьПривилегированныйРежим(Истина);
	ПодключенныеСервисы = ПодключенныеСервисы(Организация, Разделы);
	УстановитьПривилегированныйРежим(Ложь);
	
	// Если подключенных сервисов нет, то дальше ничего не делаем.
	Если ПодключенныеСервисы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИсключенныеСтроки = Новый Массив;
	Для Каждого ИмяСервиса Из ПодключенныеСервисы Цикл
		Отбор = Новый Структура("ИмяСервиса", ИмяСервиса);
		СтрокиБаннеров = СписокБаннеров.НайтиСтроки(Отбор);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИсключенныеСтроки, СтрокиБаннеров, Истина);
	КонецЦикла;
	
	УдалитьСтрокиИзТаблицы(СписокБаннеров, ИсключенныеСтроки);
	
КонецПроцедуры

Процедура ДополнитьБаннерыОбстоятельствамиЗакрытия(СписокБаннеров, Организация)
	
	ЗакрытыеПользователемБаннеры = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ИмяНастройкиПерсонализированныеПредложенияСервисов(),
		ИмяКлючНастройкиЗакрытыеПользователемБаннеры(),
		НовыйЗакрытыеПользователемБаннеры());
	
	Для Каждого КлючИЗначение Из ЗакрытыеПользователемБаннеры.БаннерыБезОрганизации Цикл
		Для Каждого СтрокаСписка Из СписокБаннеров.НайтиСтроки(Новый Структура("ИдентификаторБаннера", КлючИЗначение.Ключ)) Цикл
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
				СтрокаСписка.Баннер.ОбстоятельстваЗакрытия,
				КлючИЗначение.Значение,
				Истина);
		КонецЦикла;
	КонецЦикла;
	
	БаннерыПоОрганизации = ЗакрытыеПользователемБаннеры.БаннерыПоОрганизации[Организация];
	Если БаннерыПоОрганизации <> Неопределено Тогда
		Для Каждого КлючИЗначение Из БаннерыПоОрганизации Цикл
			Для Каждого СтрокаСписка Из СписокБаннеров.НайтиСтроки(Новый Структура("ИдентификаторБаннера", КлючИЗначение.Ключ)) Цикл
				ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
					СтрокаСписка.Баннер.ОбстоятельстваЗакрытия,
					КлючИЗначение.Значение,
					Истина);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсключитьБаннерыПоОрганизации(СписокБаннеров, Организация)
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ИсключенныеСтроки = Новый Массив;
	Для каждого СтрокаБаннера Из СписокБаннеров Цикл
		Если СтрокаБаннера.Баннер.ЗависитОтОрганизации Тогда
			ИсключенныеСтроки.Добавить(СтрокаБаннера);
		КонецЕсли;
	КонецЦикла;
	УдалитьСтрокиИзТаблицы(СписокБаннеров, ИсключенныеСтроки);

КонецПроцедуры

#КонецОбласти

#Область ПерсонализированныеДанные

// Вызывает обновление записей регистра сведений "ПерсонализированныеДанные" фоновым заданием.
// При обновлении учитывается актуальность данных регистра сведений
// Параметры:
//   Параметры - Структура - Структура с параметрами переданная в фоновое задание
//		*Организация - СправочникСсылка.Организации - организация по которой нужно обновить персонализированные данные.
//									Если не заполнено данные будут обновлены по всем доступным организациям
//	ВременноеХранилищеРезультата - Строка - путь к временному хранилищу (не используется в рамках данной процедуры)	
Процедура ОбновитьПерсонализированныеДанныеВФоне(Параметры, ВременноеХранилищеРезультата) Экспорт

	ОбновитьПерсонализированныеДанные(Параметры.Организация, Истина, Параметры.РазделыПерсонализированныхДанных);

КонецПроцедуры

// Вызывает перезапись данных регистра сведений "ПерсонализированныеДанные" фоновым заданием
// Данные регистра сведений перезаписываются без учета актуальности.
// Параметры:
//   Параметры - Структура - Структура с параметрами переданная в фоновое задание
//		*Организация - СправочникСсылка.Организации - организация по которой нужно обновить персонализированные данные.
//									Если не заполнено данные будут обновлены по всем доступным организациям
//	ВременноеХранилищеРезультата - Строка - путь к временному хранилищу (не используется в рамках данной процедуры).
//
Процедура ПерезаписатьПерсонализированныеДанныеВФоне(Параметры, ВременноеХранилищеРезультата) Экспорт

	ОбновитьПерсонализированныеДанные(Параметры.Организация, Ложь, Параметры.РазделыПерсонализированныхДанных);

КонецПроцедуры	

// Вызывает первоначальное заполнение регистра сведений "ПерсонализированныеДанные" по всем организациям
// Запускается при обновлении версии конфиурации и при переходе с предыдущей версии.
Процедура ЗаполнитьПерсонализированныеДанныеРуководителя() Экспорт
	
	ОбновитьПерсонализированныеДанныеПоВсемОрганизациям(ТекущаяДатаСеанса());
	
КонецПроцедуры

// Создает пустую таблицу контейнер для персонализированных данных
// Возвращаемое значение:
//	ТаблицаЗначений - Пустая таблица персонализированных данных.
//
Функция ТаблицаДанных() Экспорт
	
	ОписаниеТиповЧисло15_3 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 3);
	
	НоваяТаблицаДанных = Новый ТаблицаЗначений;
	
	НоваяТаблицаДанных.Колонки.Добавить("ЗначениеПоказателя", ОписаниеТиповЧисло15_3);
	НоваяТаблицаДанных.Колонки.Добавить("Порядок",            Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(1)));
	НоваяТаблицаДанных.Колонки.Добавить("ДанныеРасшифровки",  Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	
	Возврат НоваяТаблицаДанных;
	
КонецФункции

// Обновляет данные регистра сведений "ПерсонализированныеДанные".
// Параметры:
//   Параметры - Структура - Структура с параметрами
//		*Организация - СправочникСсылка.Организации - организация по которой нужно обновить персонализированные данные.
//									Если не заполнено данные будут обновлены по всем доступным организациям
//	УчитыватьАктуальностьДанных - булево - Истина - перед обновлением проверить что данные неактуальны, Ложь - не проверять.
//
Процедура ОбновитьПерсонализированныеДанные(Организация, УчитыватьАктуальностьДанных, РазделыПерсонализированныхДанных)
	
	Дата = ТекущаяДатаСеанса();
	
	ИнтервалОбновления = 0;
	Если УчитыватьАктуальностьДанных Тогда
		ИнтервалОбновления = 600;
	КонецЕсли;
	
	// Если организация не заполнена то данные нужно обновить по всем
	Если ЗначениеЗаполнено(Организация) Тогда
		СписокДоступныхОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ОрганизацииДанныеКоторыхДоступныПользователю();
	
		Если СписокДоступныхОрганизаций.Найти(Организация) <> Неопределено Тогда
			РегистрыСведений.ПерсонализированныеДанные.ОбновитьДанные(Организация, Дата, ИнтервалОбновления, РазделыПерсонализированныхДанных);
		КонецЕсли;
	Иначе
		ОбновитьПерсонализированныеДанныеПоВсемОрганизациям(Дата, ИнтервалОбновления, РазделыПерсонализированныхДанных);
	КонецЕсли;
	
КонецПроцедуры

// Обновляет данные регистра сведений "ПерсонализированныеДанные" по всем организациям
// Параметры:
//  Дата - Дата - Дата на которую нужно получить данные для записи в регистр
//	ИнтервалОбновления - Число - Период в секундах в течении которого данные считаются актуальными
//
Процедура ОбновитьПерсонализированныеДанныеПоВсемОрганизациям(Дата, ИнтервалОбновления = 0, РазделыПерсонализированныхДанных = Неопределено)
	
	ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ОрганизацииДанныеКоторыхДоступныПользователю();
	
	Для Каждого Организация Из ДоступныеОрганизации Цикл
		
		РегистрыСведений.ПерсонализированныеДанные.ОбновитьДанные(Организация, Дата, ИнтервалОбновления, РазделыПерсонализированныхДанных);
		
	КонецЦикла;
	
КонецПроцедуры

Функция РазделыПерсонализированныхДанных(СписокБаннеров)
	
	МассивРазделов = Новый Массив;
	
	Для Каждого ИдентификаторБаннера Из СписокБаннеров.ВыгрузитьКолонку("ИдентификаторБаннера") Цикл
		
		Если ИдентификаторБаннера = ИдентификаторБаннераКоличествоКонтрагентов() Тогда
			
			МассивРазделов.Добавить(Перечисления.РазделыПерсонализированныхДанных.КоличествоКонтрагентов);
			
		ИначеЕсли ИдентификаторБаннера = ИдентификаторБаннераКоличествоСчетовНаОплату() Тогда
			
			МассивРазделов.Добавить(Перечисления.РазделыПерсонализированныхДанных.КоличествоСчетовНаОплату);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивРазделов);
	
КонецФункции

Функция РазделыПерсонализированныхДанныхПодключенныеСервисы(СписокБаннеров)
	
	МассивРазделов = Новый Массив;
	
	МассивСервисов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СписокБаннеров.ВыгрузитьКолонку("ИмяСервиса"));
	Для Каждого ИмяСервиса Из МассивСервисов Цикл
		Если ИмяСервиса = ИмяСервис1СКонтрагент() Тогда
			МассивРазделов.Добавить(Перечисления.РазделыПерсонализированныхДанных.Сервис1СКонтрагентПодключен);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивРазделов;
	
КонецФункции

// Формирует таблицу данных для персонализированных данных по организации на дату
// Параметры:
//		ДатаПолученияДанных - Дата - дата на которую нужны остатки
// Возвращаемое значение:
//		ТаблицаЗначений - Таблица с данными для Персонализированных данных
//
Функция ПолучитьКоличествоКонтрагентовДляПерсонализированныхДанных(ДатаПолученияДанных) Экспорт
	
	ТаблицаДанных = ТаблицаДанных();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоКвартала", НачалоКвартала(ДатаПолученияДанных));
	Запрос.УстановитьПараметр("КонецКвартала",  КонецДня(ДатаПолученияДанных));
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Контрагенты.Ссылка) КАК ЗначениеПоказателя
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ДатаСоздания >= &НачалоКвартала
		|	И Контрагенты.ДатаСоздания <= &КонецКвартала
		|	И Контрагенты.ПометкаУдаления = ЛОЖЬ";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	УстановитьПривилегированныйРежим(Ложь);
	
	// Добавляем информацию по разделу
	СтрокаДанных = ТаблицаДанных.Добавить();
	СтрокаДанных.Порядок            = 0;
	СтрокаДанных.ЗначениеПоказателя = Результат.Итог("ЗначениеПоказателя");
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Возвращает Истина, если сервис 1С:Контрагент подключен.
//
// Возвращаемое значение:
//		Булево
//
Функция Сервис1СКонтрагентПодключен() Экспорт
	
	ТаблицаДанных = ТаблицаДанных();
	СтрокаДанных = ТаблицаДанных.Добавить();
	СтрокаДанных.Порядок = 0;
	СтрокаДанных.ЗначениеПоказателя = ?(РаботаСКонтрагентамиБП.Сервис1СКонтрагентПодключен(), 1, 0);
	СтрокаДанных.ЗначениеПоказателя = ?(Ложь, 1, 0);
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Устанавливает значение параметра сеанса РазрешенныеПользователюРазделыПерсонализированныхДанных,
// который используется в тексте ограничения доступа к персонализированных данным.
//
// Подробнее см. СтандартныеПодсистемыСервер.УстановкаПараметровСеанса()
//
Процедура УстановитьРазрешенныеПользователюРазделыПерсонализированныхДанных(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра = "РазрешенныеПользователюРазделыПерсонализированныхДанных" Тогда
		
		ПараметрыСеанса.РазрешенныеПользователюРазделыПерсонализированныхДанных = 
			Перечисления.РазделыПерсонализированныхДанных.РазрешенныеПользователюРазделыПерсонализированныхДанных();
		УстановленныеПараметры.Добавить(ИмяПараметра);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодключенныеСервисы(Организация, Разделы)
	
	ПодключенныеСервисы = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Разделы", Разделы);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПерсонализированныеДанные.Раздел КАК Раздел,
		|	ПерсонализированныеДанные.ЗначениеПоказателя КАК ЗначениеПоказателя
		|ИЗ
		|	РегистрСведений.ПерсонализированныеДанные КАК ПерсонализированныеДанные
		|ГДЕ
		|	ПерсонализированныеДанные.Организация = &Организация
		|	И ПерсонализированныеДанные.Раздел В(&Разделы)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЗначениеПоказателя = 1 Тогда
			Если Выборка.Раздел = Перечисления.РазделыПерсонализированныхДанных.Сервис1СКонтрагентПодключен Тогда
				ПодключенныеСервисы.Добавить(ИмяСервис1СКонтрагент());
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПодключенныеСервисы;
	
КонецФункции

// Формирует таблицу данных для персонализированных данных по организации на дату
// Параметры:
//		ДатаПолученияДанных - Дата - дата на которую нужны остатки
// Возвращаемое значение:
//		ТаблицаЗначений - Таблица с данными для Персонализированных данных
//
Функция ПолучитьКоличествоСчетовНаОплатуДляПерсонализированныхДанных(ДатаПолученияДанных) Экспорт
	
	ТаблицаДанных = ТаблицаДанных();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоКвартала", НачалоКвартала(ДатаПолученияДанных));
	Запрос.УстановитьПараметр("КонецКвартала",  КонецДня(ДатаПолученияДанных));
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СчетНаОплатуПокупателю.Контрагент) КАК ЗначениеПоказателя
		|ИЗ
		|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
		|ГДЕ
		|	СчетНаОплатуПокупателю.Дата >= &НачалоКвартала
		|	И СчетНаОплатуПокупателю.Дата <= &КонецКвартала
		|	И СчетНаОплатуПокупателю.ПометкаУдаления = ЛОЖЬ";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	УстановитьПривилегированныйРежим(Ложь);
	
	// Добавляем информацию по разделу
	СтрокаДанных = ТаблицаДанных.Добавить();
	СтрокаДанных.Порядок            = 0;
	СтрокаДанных.ЗначениеПоказателя = Результат.Итог("ЗначениеПоказателя");
	
	Возврат ТаблицаДанных;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СохранитьОбстоятельстваЗакрытияБаннера(Баннер, Организация)
	
	ЗакрытыеБаннеры = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ИмяНастройкиПерсонализированныеПредложенияСервисов(),
		ИмяКлючНастройкиЗакрытыеПользователемБаннеры(),
		НовыйЗакрытыеПользователемБаннеры());
		
	Если НЕ Баннер.ЗависитОтОрганизации Тогда
		ЗакрытыеБаннеры.БаннерыБезОрганизации.Вставить(Баннер.Идентификатор, Баннер.ОбстоятельстваЗакрытия);
	Иначе
		ЗакрытыеБаннерыПоОрганизации = ЗакрытыеБаннеры.БаннерыПоОрганизации[Организация];
		Если ЗакрытыеБаннерыПоОрганизации = Неопределено Тогда
			ЗакрытыеБаннерыПоОрганизации = Новый Структура;
		КонецЕсли;
		ЗакрытыеБаннерыПоОрганизации.Вставить(Баннер.Идентификатор, Баннер.ОбстоятельстваЗакрытия);
		ЗакрытыеБаннеры.БаннерыПоОрганизации.Вставить(Организация, ЗакрытыеБаннерыПоОрганизации);
	КонецЕсли;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		ИмяНастройкиПерсонализированныеПредложенияСервисов(),
		ИмяКлючНастройкиЗакрытыеПользователемБаннеры(),
		ЗакрытыеБаннеры);
		
КонецПроцедуры

Функция ПорогСуммаДля1СКонтрагент()
	
	// Считаем 1000 рублей ключевой суммой после которой можно показывать баннеры.
	// Используется для определения порога НДС к вычету, НДС к возмещению и дебиторской задолженности.
	Возврат 1000;
	
КонецФункции

Функция КоличествоКонтрагентовДляРекламыКонтрагент()
	
	Возврат 30;
	
КонецФункции

Функция КоличествоСчетовНаОплатуДляРекламы()
	
	Возврат 15;
	
КонецФункции

Процедура ДобавитьБаннерВТаблицу(СписокБаннеров, Баннер)
	
	Если НЕ Баннер.ДоступенПоПравам Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока                      = СписокБаннеров.Добавить();
	НоваяСтрока.Порядок              = СписокБаннеров.Количество();
	НоваяСтрока.Баннер               = Баннер;
	НоваяСтрока.ИдентификаторБаннера = Баннер.Идентификатор;
	НоваяСтрока.ИмяСервиса           = Баннер.ИмяСервиса;
	
КонецПроцедуры

Процедура УдалитьСтрокиИзТаблицы(Таблица, СтрокиКУдалению)
	
	КоличествоЭлементов = СтрокиКУдалению.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		Таблица.Удалить(СтрокиКУдалению[КоличествоЭлементов - Индекс]);
	КонецЦикла;
	СтрокиКУдалению = Неопределено;
	
КонецПроцедуры

Функция СтатусЗакрытогоБаннера()
	
	Возврат "close";
	
КонецФункции

#Область Конструкторы

Функция НовыйТаблицаСписокБаннеров()
	
	ТаблицаСпискаБаннеров = Новый ТаблицаЗначений;
	// Колонки
	ТаблицаСпискаБаннеров.Колонки.Добавить("Баннер"); // см. НовыйБаннерДляСписка()
	ТаблицаСпискаБаннеров.Колонки.Добавить("ИдентификаторБаннера", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаСпискаБаннеров.Колонки.Добавить("Порядок",              ОбщегоНазначения.ОписаниеТипаЧисло(5));
	ТаблицаСпискаБаннеров.Колонки.Добавить("ИмяСервиса",           ОбщегоНазначения.ОписаниеТипаСтрока(50));
	
	// Индексы
	ТаблицаСпискаБаннеров.Индексы.Добавить("ИдентификаторБаннера");
	
	Возврат ТаблицаСпискаБаннеров;
	
КонецФункции

Функция НовыйЗакрытыеПользователемБаннеры() Экспорт
	
	ЗакрытыеПользователемБаннеры = Новый Структура;
	ЗакрытыеПользователемБаннеры.Вставить("БаннерыБезОрганизации", Новый Структура);
	ЗакрытыеПользователемБаннеры.Вставить("БаннерыПоОрганизации",  Новый Соответствие);
	
	Возврат ЗакрытыеПользователемБаннеры;
	
КонецФункции

Функция НовыйБаннерДляСписка()
	
	Баннер = Новый Структура;
	Баннер.Вставить("ИмяСервиса",              "");
	Баннер.Вставить("Идентификатор",           "");
	Баннер.Вставить("НавигационнаяСсылка",     "");
	Баннер.Вставить("ТекстБаннера",            Новый ФорматированнаяСтрока(""));
	Баннер.Вставить("ИмяКартинкаЛоготипа",     "");
	Баннер.Вставить("ЦветФонаБаннер",         "ЦветФонаБаннер");
	Баннер.Вставить("ЗависитОтОрганизации",   Истина);
	Баннер.Вставить("Исключительный",         Ложь);
	Баннер.Вставить("Группа",                 Неопределено);
	Баннер.Вставить("ДоступенПоПравам",       Ложь);
	Баннер.Вставить("ДанныеБаннера",          Новый Структура);
	Баннер.Вставить("ОбстоятельстваЗакрытия", Новый Структура);
	Баннер.ОбстоятельстваЗакрытия.Вставить("ДатаЗакрытия", '00010101');
	Баннер.ОбстоятельстваЗакрытия.Вставить("Периодичность", Перечисления.Периодичность.Месяц);
	
	Возврат Баннер;
	
КонецФункции

Функция НовыйЗаголовок(ТекстЗаголовка, НавигационнаяСсылка = "", Шрифт = Неопределено)
	
	ШрифтЗаголовка = ?(Шрифт = Неопределено, ШрифтыСтиля.ШрифтЗаголовкаБаннера, Шрифт);
	
	Если ЗначениеЗаполнено(НавигационнаяСсылка) Тогда
		Возврат Новый ФорматированнаяСтрока(ТекстЗаголовка, ШрифтЗаголовка, , , НавигационнаяСсылка);
	Иначе
		Возврат Новый ФорматированнаяСтрока(ТекстЗаголовка, ШрифтЗаголовка);
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(ТекстЗаголовка, ШрифтыСтиля.ШрифтЗаголовкаБаннера);
	
КонецФункции

Функция НовыйСтрокаБаннера(ТекстСтроки, НавигационнаяСсылка = "", Шрифт = Неопределено)
	
	ШрифтСтроки = ?(Шрифт = Неопределено, ШрифтыСтиля.ШрифтТекстаБаннера, Шрифт);
	
	Если ЗначениеЗаполнено(НавигационнаяСсылка) Тогда
		Возврат Новый ФорматированнаяСтрока(ТекстСтроки, ШрифтСтроки, , , НавигационнаяСсылка);
	Иначе
		Возврат Новый ФорматированнаяСтрока(ТекстСтроки, ШрифтСтроки);
	КонецЕсли;
	
КонецФункции

Функция НовыйТекстБаннера(ТекстЗаголовка, ТекстПодзаголовка)
	
	Возврат Новый ФорматированнаяСтрока(
		ТекстЗаголовка,
		Символы.ПС,
		Новый ФорматированнаяСтрока(" ", Новый Шрифт(,5)), // Отступ между заголовком и подзаголовком.
		Символы.ПС,
		ТекстПодзаголовка);
	
КонецФункции

Функция НовыйИнформацияОСтороннихСертификатах()
	
	Информация = Новый Структура;
	Информация.Вставить("ДатаПоиска",               '00010101');
	Информация.Вставить("СертификатНайден",         Ложь);
	Информация.Вставить("СрокДействияСертификата",  '00010101');
	Информация.Вставить("СторонниеСертификаты",     Новый Структура);
	
	Возврат Информация;
	
КонецФункции 

#КонецОбласти

#Область Имена

// Ключи хранилища общих настроек

Функция ИмяНастройкиПерсонализированныеПредложенияСервисов() Экспорт
	
	Возврат "ПерсонализированныеПредложенияСервисов";
	
КонецФункции

Функция ИмяКлючНастройкиЗакрытыеПользователемБаннеры() Экспорт

	Возврат "ЗакрытыеПользователемБаннеры";

КонецФункции

// Имена сервисов

Функция ИмяУстановитьДатуЗапрета()

	Возврат "УстановитьДатуЗапрета";

КонецФункции

Функция ИмяАвтоматическаяЗагрузкаПатчей()

	Возврат "АвтоматическаяЗагрузкаПатчей";

КонецФункции

Функция ИмяСервис1СКонтрагент()

	Возврат "Сервис1СКонтрагент";

КонецФункции

Функция ИмяСервисПоддержкаСервиса()
	
	Возврат "ПоддержкаСервиса";
	
КонецФункции

Функция ИмяСервисКоличествоСчетовНаОплату()
	
	Возврат "КоличествоСчетовНаОплату";
	
КонецФункции

Функция ИмяСервисМоиЗадачи()

	Возврат "МоиЗадачи";

КонецФункции

Функция ИмяСервисСервисыКР()

	Возврат "СервисыКР";

КонецФункции

// Имена картинок

Функция ИмяКартинкиЛоготипУстановитьДатуЗапрета()
	
	Возврат "КотВажноеСообщение";
	
КонецФункции

Функция ИмяКартинкиЛоготипАвтоматическаяЗагрузкаПатчей()
	
	Возврат "КотВТюрбане";
	
КонецФункции

Функция ИмяКартинкиЛоготип1СКонтрагент()
	
	Возврат "ЛоготипКонтрагент";
	
КонецФункции

// Имена размещений

// Возвращает имя размещения для общих форм ИнформационнаяПанель.
// Возвращаемое значение:
//		Строка - Имя размещения
//
Функция ИмяРазмещенияОбщее() Экспорт

	Возврат "Общее"

КонецФункции

// Возвращает имя размещения для общих форм СписокЗадач.
// Возвращаемое значение:
//		Строка - Имя размещения
//
Функция ИмяРазмещенияСписокЗадач() Экспорт

	Возврат "СписокЗадач"

КонецФункции

// Имя отчетной кампании

#КонецОбласти

Процедура ПоказатьЗакрытыйБаннерВсемПользователям(ИдентификаторБаннера)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивПользователей = ПользователиИнформационнойБазы.ПолучитьПользователей();
	Если МассивПользователей.Количество() > 0 Тогда
		Для Каждого Пользователь Из МассивПользователей Цикл
			ПоказатьЗакрытыйБаннерПользователю(ИдентификаторБаннера, Пользователь.Имя);
		КонецЦикла;
	Иначе
		ПоказатьЗакрытыйБаннерПользователю(ИдентификаторБаннера);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьЗакрытыйБаннерПользователю(ИдентификаторБаннера, ИмяПользователя = "")
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗакрытыеБаннеры = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ИмяНастройкиПерсонализированныеПредложенияСервисов(),
		ИмяКлючНастройкиЗакрытыеПользователемБаннеры(),
		НовыйЗакрытыеПользователемБаннеры(),
		,
		ИмяПользователя);
		
	Если ЗакрытыеБаннеры.БаннерыБезОрганизации.Свойство(ИдентификаторБаннера) Тогда
		ЗакрытыеБаннеры.БаннерыБезОрганизации.Удалить(ИдентификаторБаннера);
	КонецЕсли;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		ИмяНастройкиПерсонализированныеПредложенияСервисов(),
		ИмяКлючНастройкиЗакрытыеПользователемБаннеры(),
		ЗакрытыеБаннеры,
		,
		ИмяПользователя);
	
КонецПроцедуры

Функция ТребуетсяНастройкаАвторизацияИнтернетПоддержки()
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
		Возврат Не МодульИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	КонецЕсли;
	Возврат Ложь;
КонецФункции

#КонецОбласти
