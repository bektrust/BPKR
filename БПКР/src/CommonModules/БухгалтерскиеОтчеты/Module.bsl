////////////////////////////////////////////////////////////////////////////////
// Функции и процедуры обеспечения формирования бухгалтерских отчетов.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ПредопределенныеСпискиЭлементов

// Конструктор, создающий структуру параметров для проверки контрольной суммы по ячейкам отчета.
//
// Параметры:
//  УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - может содержать формат представления чисел в области.
//
// Возвращаемое значение:
//   Структура   - информация для алгоритма проверки итогов в отчетах.
//
Функция ОбластьЧтенияИтогов(ПараметрыОтчета) Экспорт
	
	ОбластьИтогов = Новый Структура;
	
	// Инициализируем значения заведомо непересекающимся интервалом строк.
	ОбластьИтогов.Вставить("ПерваяИзСтрокИтогов", 1);
	ОбластьИтогов.Вставить("ПоследняяИзСтрокИтогов", 0);
	
	// Символ, являющийся разделителем дробной части для представления чисел.
	ОбластьИтогов.Вставить("РазделительДробнойЧасти",
		РазделительДробнойЧастиПоУсловномуОформлению(ПараметрыОтчета.НастройкиКомпоновкиДанных.УсловноеОформление));
	
	// Ключ = номер колонки, значение = знак, с которым учитываются суммы из колонки.
	ОбластьИтогов.Вставить("ФлагиОбщегоИтога", Новый Соответствие);

	// Если Истина, то слева от колонки суммы будет анализироваться колонка со значениями:
	// "К" = инвертировать знак в колонке итога, "Д" = оставить знак из колонки итога.
	ОбластьИтогов.Вставить("ИскатьФлагУчета", Ложь);

	// Если указан номер строки, то строка с таким номером будет пропущена.
	ОбластьИтогов.Вставить("НомерСтрокиПоказателяКонтрольОтносительный", ПозицияПоказателяКонтроль(ПараметрыОтчета));
	ОбластьИтогов.Вставить("НомерСтрокиПоказателяКонтрольАбсолютный", Неопределено);
	
	Возврат ОбластьИтогов;
	
КонецФункции

#КонецОбласти 

#Область Оформление

// Определяем символ, являющийся разделителем дробной части для представления чисел: если он явно не указан в условном
// оформлении, то берется из представления числа с учетом региональных настроек базы.
//
// Параметры:
//  УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - может содержать формат представления чисел в области.
//  КонтрольСдвигаРазрядов - Булево - если условное оформление задает округление или сдвиг разрядов, т.е. возможно
//                                    несоответствие числа и представления, то функция возвращает Неопределено .
//
// Возвращаемое значение:
//   Строка      - значение, указываемое в ЧРД (NDS) функции Формат().
//   Неопределено - в условном оформлении задан формат, приводящий к неоднозначности между числом и его представлением.
//
Функция РазделительДробнойЧастиПоУсловномуОформлению(УсловноеОформление, КонтрольСдвигаРазрядов = Истина)
	
	ФорматРазделителяДробнойЧасти = "";
	
	ПараметрФормат = Новый ПараметрКомпоновкиДанных("Формат");
	Для каждого ЭлементУО Из УсловноеОформление.Элементы Цикл
		
		Если Не ЭлементУО.Использование Тогда
			Продолжить;
		КонецЕсли;
		Для каждого Оформляемое Из ЭлементУО.Оформление.Элементы Цикл
		
			Если Не Оформляемое.Использование
			 Или Оформляемое.Параметр <> ПараметрФормат Тогда
				Продолжить;
			КонецЕсли;
			
			Если КонтрольСдвигаРазрядов
			   И (СтрНайти(Оформляемое.Значение, "ЧС=") <> 0 Или СтрНайти(Оформляемое.Значение, "ЧДЦ=") <> 0) Тогда
				// Нулевой разряд представления не соответствует нулевому разряду числа, или количество разрядов в числе не равно
				// количеству разрядов в его представлении.
				// Например, явно заданное округление ЧДЦ=2 может привести к погрешностям при выводе количества.
				Возврат Неопределено;
			КонецЕсли;

			ФорматЧРД = "";
			
			// Анализируем, заданы ли для чисел параметры форматирования, определяемые отдельным языком (страной).
			ЛеваяГраницаВыражения = СтрНайти(Оформляемое.Значение, "Л=");
			Если ЛеваяГраницаВыражения = 0 Тогда
				ЛеваяГраницаВыражения = СтрНайти(Оформляемое.Значение, "L=");
			КонецЕсли;
			Если ЛеваяГраницаВыражения <> 0 Тогда
				
				ФорматЧРД = ФорматЧРД + ";";
				ПраваяГраницаВыражения = СтрНайти(Оформляемое.Значение, ";", НаправлениеПоиска.СНачала, ЛеваяГраницаВыражения + 3);
				Если ПраваяГраницаВыражения = 0 Тогда
					ФорматЧРД = ФорматЧРД + Сред(Оформляемое.Значение, ЛеваяГраницаВыражения);
				Иначе
					ФорматЧРД = ФорматЧРД + Сред(Оформляемое.Значение, ЛеваяГраницаВыражения,
						ПраваяГраницаВыражения - ЛеваяГраницаВыражения);
				КонецЕсли;
				
			КонецЕсли;
			
			// Анализируем, задан ли для чисел особый разделитель дробной части.
			ЛеваяГраницаВыражения = СтрНайти(Оформляемое.Значение, "ЧРД=");
			Если ЛеваяГраницаВыражения = 0 Тогда
				ЛеваяГраницаВыражения = СтрНайти(Оформляемое.Значение, "NDS=");
			КонецЕсли;
			Если ЛеваяГраницаВыражения <> 0 Тогда
				
				Если Не ПустаяСтрока(ФорматЧРД) Тогда
					ФорматЧРД = ФорматЧРД + ";";
				КонецЕсли;
				ПраваяГраницаВыражения = СтрНайти(Оформляемое.Значение, ";", НаправлениеПоиска.СНачала, ЛеваяГраницаВыражения + 3);
				Если ПраваяГраницаВыражения = 0 Тогда
					ФорматЧРД = ФорматЧРД + Сред(Оформляемое.Значение, ЛеваяГраницаВыражения);
				Иначе
					ФорматЧРД = ФорматЧРД + Сред(Оформляемое.Значение, ЛеваяГраницаВыражения,
						ПраваяГраницаВыражения - ЛеваяГраницаВыражения);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПустаяСтрока(ФорматЧРД) Тогда // условное оформление не учитываем, т.к. не влияет на разделитель дробной части
				Продолжить;
			КонецЕсли;
			
			Если Не ПустаяСтрока(ФорматРазделителяДробнойЧасти) Тогда  // ранее уже находили формат в условном оформлении
				Возврат Неопределено;
			КонецЕсли;
			
			ФорматРазделителяДробнойЧасти = ФорматЧРД;
		
		КонецЦикла; 
	
	КонецЦикла;
	
	ЭталонноеЧисло = Формат(1.1, ФорматРазделителяДробнойЧасти);
	
	Если СтрДлина(ЭталонноеЧисло) > 3 Тогда // разделитель из нескольких символов
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Сред(ЭталонноеЧисло, 2, 1);
	
КонецФункции

// Преобразует табличный документ в двоичные данные.
//
// Параметры:
//  СохраняемыйДокумент - ТабличныйДокумент - преобразуемый в двоичные данные.
//  ТипФайла     - ТипФайлаТабличногоДокумента - в какой формат файла сохранить табличный документ.
//
// Возвращаемое значение:
//   ДвоичныеДанные - данные в новом формате.
//
Функция ДвоичныеДанныеИзТабличногоДокумента(СохраняемыйДокумент, ТипФайла) Экспорт

	ВозможностьЗаписиВПоток = Новый Соответствие;
	ВозможностьЗаписиВПоток.Вставить(ТипФайлаТабличногоДокумента.DOCX,  Истина);
	ВозможностьЗаписиВПоток.Вставить(ТипФайлаТабличногоДокумента.MXL,   Истина);
	ВозможностьЗаписиВПоток.Вставить(ТипФайлаТабличногоДокумента.ODS,   Истина);
	ВозможностьЗаписиВПоток.Вставить(ТипФайлаТабличногоДокумента.PDF,   Истина);
	ВозможностьЗаписиВПоток.Вставить(ТипФайлаТабличногоДокумента.TXT,   Истина);
	ВозможностьЗаписиВПоток.Вставить(ТипФайлаТабличногоДокумента.HTML5, Ложь);
	ВозможностьЗаписиВПоток.Вставить(ТипФайлаТабличногоДокумента.XLS,   Ложь);
	ВозможностьЗаписиВПоток.Вставить(ТипФайлаТабличногоДокумента.XLSX,  Ложь);
	
	ПреобразоватьЧерезПоток = ВозможностьЗаписиВПоток[ТипФайла];
	Если ПреобразоватьЧерезПоток = Неопределено Тогда

		// Формат, который был выбран пользователем для сохранения табличного документа, определяется по расширению файла.
		// Поэтому из набора значений перечисления ТипФайлаТабличногоДокумента используются только значения, имеющие различные
		// расширения файла. См. БухгалтерскиеОтчетыКлиент.ОтчетСохранитьКакПриПодключенииРасширенияРаботыСФайлами()
		
		ТекстИсключения = НСтр("ru = 'Сохранение результата отчета в табличный документ формата %1 не предусмотрено'");
		ВызватьИсключение СтрШаблон(ТекстИсключения, ТипФайла);

	КонецЕсли;
		
	Если ПреобразоватьЧерезПоток Тогда
		
		Поток = Новый ПотокВПамяти;
		СохраняемыйДокумент.Записать(Поток, ТипФайла);
		ДвоичныеДанныеФайла = Поток.ЗакрытьИПолучитьДвоичныеДанные();
		
	Иначе

		ИмяФайла = ПолучитьИмяВременногоФайла();
		СохраняемыйДокумент.Записать(ИмяФайла, ТипФайла);
		ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
		УдалитьФайлы(ИмяФайла);
		
	КонецЕсли;
		
	Возврат ДвоичныеДанныеФайла;
	
КонецФункции

#КонецОбласти

#Область КонтрольИтогов

// Читает из РезультатОтчета суммы итогов и прибавляет их к КонтрольноеСоотношение.
//
// Параметры:
//  РезультатОтчета - ТабличныйДокумент - сформированный отчет (без области "Подписи");
//  ОбластьИтогов - Структура - см. ОбластьЧтенияИтогов() .
//  КонтрольноеСоотношение - Число - сумма, к которой добавляются читаемые значения итогов.
//
Процедура ДополнитьКонтрольноеСоотношение(РезультатОтчета, ОбластьИтогов, КонтрольноеСоотношение) Экспорт
	
	ИскатьФлагУчета = ОбластьИтогов.ИскатьФлагУчета;
	Если ИскатьФлагУчета Тогда
		ФлагКт = НСтр("ru = 'К'");
	КонецЕсли;

	Для НомерСтроки = ОбластьИтогов.ПерваяИзСтрокИтогов По ОбластьИтогов.ПоследняяИзСтрокИтогов Цикл
		
		Если НомерСтроки = ОбластьИтогов.НомерСтрокиПоказателяКонтрольАбсолютный Тогда
			Продолжить;
		КонецЕсли;
		Для каждого КолонкаИтога Из ОбластьИтогов.ФлагиОбщегоИтога Цикл
			
			Если ИскатьФлагУчета Тогда
				ЗнакИтога = ?(РезультатОтчета.Область(НомерСтроки, КолонкаИтога.Ключ - 1).Текст = ФлагКт, -1, 1);
			Иначе
				ЗнакИтога = 1;
			КонецЕсли;
			ЗнакИтога = ЗнакИтога * КолонкаИтога.Значение;
			
			ЯчейкаИтога = РезультатОтчета.Область(НомерСтроки, КолонкаИтога.Ключ);
			СуммаИтога = БухгалтерскиеОтчетыКлиентСервер.СтрокаСФорматомВЧисло(ЯчейкаИтога.Текст, ОбластьИтогов.РазделительДробнойЧасти);
			
			КонтрольноеСоотношение = КонтрольноеСоотношение	+ ЗнакИтога * СуммаИтога;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Анализирует, был ли отчет сформирован на основании оборотных субконто, что может привести к невыполнению
// контрольного соотношения "нач.остатки + ДО - КО = кон.остатки".
//
// Параметры:
//  ИсточникВидовСубконто - Массив, СписокЗначений - конкретные субконто, которые анализируются.
//               - ПланСчетовСсылка.Хозрасчетный - счет, список субконто которого анализируется.
//  Отбор        - КоллекцияЭлементовОтбораКомпоновкиДанных - анализируем субконто, использованные в этом отборе;
//                 Если отбор не указан, анализируем все виды субконто.
// 
// Возвращаемое значение:
//   Булево      - Истина, если установлен отбор хотя бы по одному оборотному субконто.
//
Функция ИспользуютсяОборотныеСубконто(ИсточникВидовСубконто, Отбор = Неопределено) Экспорт
	
	Перем ОтбираемыеСубконто, Счет;
	
	Если Отбор <> Неопределено Тогда
		// Составляем список видов субконто, использованных в отборе.
		ОтбираемыеСубконто = Новый Массив;
		СписокОтборовПоСубконто(Отбор, ОтбираемыеСубконто);
		Если ОтбираемыеСубконто.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ТипСпискаСубконто = ТипЗнч(ИсточникВидовСубконто);
	Если ТипСпискаСубконто = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда

		Счет = ИсточникВидовСубконто;
		ВидыСубконто = Новый Массив;
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
		Для НомерСубконто = 1 По СвойстваСчета.КоличествоСубконто Цикл
			ВидыСубконто.Добавить(СвойстваСчета["ВидСубконто" + НомерСубконто]);
		КонецЦикла;
		
	ИначеЕсли ТипСпискаСубконто = Тип("СписокЗначений") Тогда
		
		ВидыСубконто = ИсточникВидовСубконто.ВыгрузитьЗначения();
		
	Иначе // массив
		
		ВидыСубконто = ИсточникВидовСубконто;
		
	КонецЕсли;

	Если ОтбираемыеСубконто <> Неопределено Тогда
		// Анализируем только виды субконто, использованные в отборе.
		ВидыСубконтоДляАнализа = Новый Массив;
		Для каждого НомерСубконто Из ОтбираемыеСубконто Цикл
			ВидыСубконтоДляАнализа.Добавить(ВидыСубконто[НомерСубконто - 1]);
		КонецЦикла;
		
	Иначе
		// Анализируем все виды субконто.
		ВидыСубконтоДляАнализа = ВидыСубконто;
		
	КонецЕсли;
	
	// Проверяем, есть ли счет, на котором хотя бы один из видов субконто является оборотным.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконтоДляАнализа);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХозрасчетныйВидыСубконто.Ссылка КАК Ссылка
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.ВидСубконто В(&ВидыСубконто)
	|	И ХозрасчетныйВидыСубконто.ТолькоОбороты";
	Если Счет <> Неопределено Тогда
		
		Запрос.УстановитьПараметр("Счет", Счет);
		Запрос.Текст = Запрос.Текст + "
	|	И ХозрасчетныйВидыСубконто.Ссылка = &Счет";
		
	КонецЕсли;
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Анализирует, был ли в отчете использован отбор по регистратору, который может привести к невыполнению
// контрольного соотношения "нач.остатки + ДО - КО = кон.остатки".
//
// Параметры:
//  Отбор        - КоллекцияЭлементовОтбораКомпоновкиДанных - анализируем поля, использованные в этом отборе.
// 
// Возвращаемое значение:
//   Булево      - Истина, если установлен отбор по регистратору.
//
Функция ИспользуетсяОтборПоРегистратору(Отбор) Экспорт
	
	ЕстьОтбор = Ложь;
	
	Для каждого ЭлементОтбора Из Отбор Цикл
		
		Если Не ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			Если ИспользуетсяОтборПоРегистратору(ЭлементОтбора.Элементы) Тогда
				ЕстьОтбор = Истина;
				Прервать;
			КонецЕсли;
			
		Иначе
			
			ИмяПоля = Строка(ЭлементОтбора.ЛевоеЗначение);
			Если ИмяПоля = "Регистратор" Или СтрНачинаетсяС(ИмяПоля, "Регистратор.") Тогда
				ЕстьОтбор = Истина;
				Прервать;
			КонецЕсли;
			
			ИмяПоля = Строка(ЭлементОтбора.ПравоеЗначение);
			Если ИмяПоля = "Регистратор" Или СтрНачинаетсяС(ИмяПоля, "Регистратор.") Тогда
				ЕстьОтбор = Истина;
				Прервать;
			КонецЕсли;

		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ЕстьОтбор;
	
КонецФункции

#КонецОбласти

// Устанавливает свойства связанных наборов данных для стандартных бухгалтерских отчетов.
//
// Параметры:
//	Схема - СхемаКомпоновкиДанных - Схема отчета.
//	ИмяНабора - Строка - Имя связанного набора.
//	ПараметрыПоляВладельца - Структура - Содержит ключ:
//		* ИндексСубконто - Число - Номер субконто.
//		* ЗаголовокСубконто - Строка - Название вида субконто.
//	ИмяПоляПрефикс - Строка - Префикс для имени поля.
//
Процедура ОбработатьНаборДанныхСвязаннойИнформации(Схема, ИмяНабора, ПараметрыПоляВладельца, ИмяПоляПрефикс = "Субконто") Экспорт
	
	Если ПараметрыПоляВладельца.ИндексСубконто > 0 Тогда
		ПутьКДаннымОсновногоПоля = "";
		ЗаголовокОсновногоПоля   = "";
		Для Каждого ПолеНабора Из Схема.НаборыДанных[ИмяНабора].Поля Цикл
			Если СтрНайти(ПолеНабора.Поле, "СвязанноеПолеСсылка") = 1 Тогда
				ПутьКДаннымОсновногоПоля = ПолеНабора.ПутьКДанным;
				ЗаголовокОсновногоПоля   = СтрЗаменить(ПолеНабора.Заголовок, ".Ссылка", "");
			КонецЕсли;
		КонецЦикла;
		Для Каждого ПолеНабора Из Схема.НаборыДанных[ИмяНабора].Поля Цикл
			Если СтрНайти(ПолеНабора.Поле, "СвязанноеПоле") = 1 Тогда
				ПолеНабора.ПутьКДанным = СтрЗаменить(ПолеНабора.ПутьКДанным, ПутьКДаннымОсновногоПоля, ИмяПоляПрефикс + ПараметрыПоляВладельца.ИндексСубконто);
				ПолеНабора.Заголовок   = СтрЗаменить(ПолеНабора.Заголовок, ЗаголовокОсновногоПоля, ПараметрыПоляВладельца.ЗаголовокСубконто);
				ПолеНабора.ОграничениеИспользования.Группировка = Истина;
				ПолеНабора.ОграничениеИспользования.Поле        = Ложь;
				ПолеНабора.ОграничениеИспользования.Условие     = Истина;
				ПолеНабора.ОграничениеИспользования.Порядок     = Ложь;

				ПолеНабора.ОграничениеИспользованияРеквизитов.Группировка = Истина;
				ПолеНабора.ОграничениеИспользованияРеквизитов.Поле        = Ложь;
				ПолеНабора.ОграничениеИспользованияРеквизитов.Условие     = Истина;
				ПолеНабора.ОграничениеИспользованияРеквизитов.Порядок     = Ложь;
				
			КонецЕсли;
		КонецЦикла;
		Для Каждого Связь Из Схема.СвязиНаборовДанных Цикл
			Если Связь.НаборДанныхПриемник = ИмяНабора Тогда
				Связь.ВыражениеИсточник = ИмяПоляПрефикс + ПараметрыПоляВладельца.ИндексСубконто;
				Связь.ВыражениеПриемник = ИмяПоляПрефикс + ПараметрыПоляВладельца.ИндексСубконто;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого ПолеНабора Из Схема.НаборыДанных[ИмяНабора].Поля Цикл
			Если СтрНайти(ПолеНабора.Поле, "СвязанноеПоле") = 1 Тогда
				ПолеНабора.ОграничениеИспользования.Группировка = Истина;
				ПолеНабора.ОграничениеИспользования.Поле        = Истина;
				ПолеНабора.ОграничениеИспользования.Условие     = Истина;
				ПолеНабора.ОграничениеИспользования.Порядок     = Истина;
				
				ПолеНабора.ОграничениеИспользованияРеквизитов.Группировка = Истина;
				ПолеНабора.ОграничениеИспользованияРеквизитов.Поле        = Истина;
				ПолеНабора.ОграничениеИспользованияРеквизитов.Условие     = Истина;
				ПолеНабора.ОграничениеИспользованияРеквизитов.Порядок     = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает заголовок, помещающийся без переноса при установленной в процедуре УстановитьШиринуПоказателей() ширине.
//
// Возвращаемое значение:
//	Строка - Текст заголовка для группы "Показатели".
//
Функция ЗаголовокГруппыПоказателей() Экспорт
	
	Возврат НСтр("ru = 'Показа-" + Символы.ПС + "тели'");
	
КонецФункции

// Устанавливает минимальную ширину полей с показателями,
// при которой умещается заголовок, заданный в функции ЗаголовокГруппыПоказателей().
//
// Параметры:
//	Схема - СхемаКомпоновкиДанных - Схема отчета.
//	НаборПоказателей - Массив - Содержит имена показателей отчета.
//
Процедура УстановитьМинимальнуюШиринуПоказателей(Схема, НаборПоказателей) Экспорт
	
	ВычисляемыеПоля = Схема.ВычисляемыеПоля;
	
	Для Каждого Показатель Из НаборПоказателей Цикл
		УстановитьЗначениеМинимальнойШириныПоля(ВычисляемыеПоля.Найти("Показатели." + Показатель));
		УстановитьЗначениеМинимальнойШириныПоля(ВычисляемыеПоля.Найти("Показатели." + Показатель + "НачальныйОстаток"));
		УстановитьЗначениеМинимальнойШириныПоля(ВычисляемыеПоля.Найти("Показатели." + Показатель + "Оборот"));
		УстановитьЗначениеМинимальнойШириныПоля(ВычисляемыеПоля.Найти("Показатели." + Показатель + "КонечныйОстаток"));
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает условное оформление для поля ТипГруппировки табличной части Группировка настроек отчета.
//
// Параметры:
//   Форма - УправляемаяФорма - форма отчета.
//
Процедура УстановитьУсловноеОформлениеТипГруппировки(Форма) Экспорт

	УсловноеОформление = Форма.УсловноеОформление;


	// Тип группировки "Без групп"

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	ОбщегоНазначенияБПСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ГруппировкаТипГруппировки");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Отчет.Группировка.ТипГруппировки", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Без групп'"));


	// Тип группировки "С группами"

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	ОбщегоНазначенияБПСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ГруппировкаТипГруппировки");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Отчет.Группировка.ТипГруппировки", ВидСравненияКомпоновкиДанных.Равно, 1);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'С группами'"));


	// Тип группировки "Только группы"

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	ОбщегоНазначенияБПСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ГруппировкаТипГруппировки");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Отчет.Группировка.ТипГруппировки", ВидСравненияКомпоновкиДанных.Равно, 2);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Только группы'"));

КонецПроцедуры

// Удаляем из переданной коллекций настроек условного оформления автоотступ.
//
// Параметры:
//	УсловноеОформление - УсловноеОформление - Коллекция условного оформления.
//
Процедура УдалитьАвтоотступИзУсловногоОформления(УсловноеОформление) Экспорт

	// Удалим автоотступ из условного оформления.
	ЭлементыДляУдаления = Новый Массив;
	Для Каждого ЭлементУсловногоОформления Из УсловноеОформление.Элементы Цикл
		ПараметрОформления = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(ЭлементУсловногоОформления.Оформление, "Автоотступ");
		Если ПараметрОформления <> Неопределено И ПараметрОформления.Использование = Истина Тогда
			ЭлементыДляУдаления.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из ЭлементыДляУдаления Цикл
		УсловноеОформление.Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;

КонецПроцедуры

// Возвращает перечень видов договоров с поставщиком.
//
// Возвращаемое значение:
//	Массив - Содержит виды договоров с поставщиком.
//
Функция ВидыДоговоровПоставщиков() Экспорт
	
	ВидыДоговоров = Новый Массив;
	
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	//ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	//ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
		
	Возврат ВидыДоговоров;
	
КонецФункции

// Возвращает перечень видов договоров с покупателем.
//
// Возвращаемое значение:
//	Массив - Содержит виды договоров с покупателем.
//
Функция ВидыДоговоровПокупателей() Экспорт
	
	ВидыДоговоров = Новый Массив;
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	//ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	//ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
	
	Возврат ВидыДоговоров;
	
КонецФункции

// Возвращает искомые значения из данных расшифровки.
//
// Параметры:
//  ДанныеРасшифровки - ДанныеРасшифровкиКомпоновкиДанных - Данные расшифровки из СКД.
//  СоответствиеПолей - Соответствие - Ключи соответствуют именам искомых в данных расшифровки полей
//  Расшифровка - ИдентификаторРасшифровкиКомпоновкиДанных - Идентификатор элемента данных расшифровки
//                в иерархии которого нужно осуществлять поиск.
//
// Возвращаемое значение:
//  Соответствие - Ключи соответствуют именам запрошенных полей.
//
Функция ПолучитьДанныеРасшифровки(ДанныеРасшифровки, СоответствиеПолей, Расшифровка) Экспорт
	
	СоответствиеДанных = Новый Соответствие();
	
	Если ДанныеРасшифровки <> Неопределено Тогда
		// Ищем интересующие нас поля в заданной расшифровке
		Для каждого ЭлементДанных Из СоответствиеПолей Цикл
			// Получаем элемент расшифровки, в котором нужно искать поля
			Родитель = ДанныеРасшифровки.Элементы[Расшифровка];
			// Вызываем рекурсивный поиск поля
			ЗначениеРасшифровки = ПолучитьЗначениеРасшифровки(Родитель, ЭлементДанных.Ключ);
			Если ЗначениеРасшифровки <> Неопределено Тогда
				// Значение нашлось, помещаем в структуру
				СоответствиеДанных.Вставить(ЭлементДанных.Ключ, ЗначениеРасшифровки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СоответствиеДанных;

КонецФункции

// Возвращает строковое представление уникального идентификатора ссылки. Используется при выводе УИДа ссылки в СКД.
//
// Параметры:
//   Ссылка - СправочникСсылка.* - Ссылка на элемент справочника.
//
Функция ПолучитьУИДСсылкиСтрокой(Ссылка) Экспорт
	Возврат Строка(Ссылка.УникальныйИдентификатор());
КонецФункции

// Получает список номеров субконто, которые используются в условиях отборов.
//
// Параметры:
//  Отбор        - КоллекцияЭлементовОтбораКомпоновкиДанных - анализируемые условия.
//  ОтбираемыеСубконто - Массив - заполняемый список номеров субконто.
//  СпособПодбора - Строка - "ТолькоДопСвойства" - учитывать только отборы по доп.свойствам;
//                           "РеквизитыСубконто" - учитывать только отборы через точку от субконто;
//                           "ВсеСубконто" - учитывать любые отборы по субконто.
//  КорСубконто  - Булево - если Ложь, то ищем в отборах "Субконто"; если Истина, то ищем "КорСубконто".
//
Процедура СписокОтборовПоСубконто(Отбор, ОтбираемыеСубконто, СпособПодбора = "ВсеСубконто", КорСубконто = Ложь) Экспорт

	ИмяИскомогоПоля = ?(КорСубконто, "КорСубконто", "Субконто");
	ДлинаИскомогоПоля = СтрДлина(ИмяИскомогоПоля);
	
	Для каждого ЭлементОтбора Из Отбор Цикл
		
		Если Не ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			СписокОтборовПоСубконто(ЭлементОтбора.Элементы, ОтбираемыеСубконто, СпособПодбора, КорСубконто);
			
		Иначе
			
			ИмяПоля = Строка(ЭлементОтбора.ЛевоеЗначение);
			Если СтрНачинаетсяС(ИмяПоля, ИмяИскомогоПоля) Тогда
				
				Если СпособПодбора = "ТолькоДопСвойства" Тогда
					// Дополнительные свойства могут быть назначены не только для самого объекта субконто,
					// но и для справочника, которые используется как реквизит в объектах субконто.
					// Поэтому ищем на любом уровне в пути к данным.
					УсловиеПодбораВыполняется = СтрНайти(Сред(ИмяПоля, ДлинаИскомогоПоля + 2), ".[") > 0;
				ИначеЕсли СпособПодбора = "РеквизитыСубконто" Тогда
					УсловиеПодбораВыполняется = Сред(ИмяПоля, ДлинаИскомогоПоля + 2, 1) = ".";
				Иначе
					УсловиеПодбораВыполняется = (СтрДлина(ИмяПоля) = ДлинаИскомогоПоля + 1
						Или Сред(ИмяПоля, ДлинаИскомогоПоля + 2, 1) = ".");
				КонецЕсли;
				Если УсловиеПодбораВыполняется Тогда
			   
					НомерСубконто = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Сред(ИмяПоля, ДлинаИскомогоПоля + 1, 1));
					Если ОтбираемыеСубконто.Найти(НомерСубконто) = Неопределено Тогда
						ОтбираемыеСубконто.Добавить(НомерСубконто);
					КонецЕсли;
					
				КонецЕсли;
			   
			КонецЕсли;
			
			ИмяПоля = Строка(ЭлементОтбора.ПравоеЗначение);
			Если СтрНачинаетсяС(ИмяПоля, ИмяИскомогоПоля) Тогда
				
				Если СпособПодбора = "ТолькоДопСвойства" Тогда
					// Дополнительные свойства могут быть назначены не только для самого объекта субконто,
					// но и для справочника, которые используется как реквизит в объектах субконто.
					// Поэтому ищем на любом уровне в пути к данным.
					УсловиеПодбораВыполняется = СтрНайти(Сред(ИмяПоля, ДлинаИскомогоПоля + 2), ".[") > 0;
				ИначеЕсли СпособПодбора = "РеквизитыСубконто" Тогда
					УсловиеПодбораВыполняется = Сред(ИмяПоля, ДлинаИскомогоПоля + 2, 1) = ".";
				Иначе
					УсловиеПодбораВыполняется = (СтрДлина(ИмяПоля) = ДлинаИскомогоПоля + 1
						Или Сред(ИмяПоля, ДлинаИскомогоПоля + 2, 1) = ".");
				КонецЕсли;
				Если УсловиеПодбораВыполняется Тогда
			   
					НомерСубконто = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Сред(ИмяПоля, ДлинаИскомогоПоля + 1, 1));
					Если ОтбираемыеСубконто.Найти(НомерСубконто) = Неопределено Тогда
						ОтбираемыеСубконто.Добавить(НомерСубконто);
					КонецЕсли;
					
				КонецЕсли;
			   
			КонецЕсли;

		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

// Для случая, когда установлены отборы по доп.свойствам субконто, будет произведена замена в тексте схемы
// компоновки данных. Отборы по дополнительным свойствам невозможны в параметрах виртуальной таблицы.
// Поэтому в текст набора данных Проводки в СКД к запросам по остаткам добавляется секция ГДЕ.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//  Схема        - СхемаКомпоновкиДанных - описание получаемых данных.
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - связь настроек компоновки данных и схемы компоновки.
//
Процедура ИзменитьСхемуДляОтборовПоДопСвойствамСубконто(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	ОтбираемыеВидыСубконто = Новый Массив;
	СписокОтборовПоСубконто(КомпоновщикНастроек.Настройки.Отбор.Элементы, ОтбираемыеВидыСубконто, "ТолькоДопСвойства");
	Если ОтбираемыеВидыСубконто.Количество() = 0 Тогда // нет отборов по доп.свойствам субконто
		Возврат;
	КонецЕсли;
	
	Если Не КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("ИзмененТекстЗапросаСКД") Тогда
		Схема = Отчеты[ПараметрыОтчета.ИдентификаторОтчета].ПолучитьМакет("СхемаКомпоновкиДанных");
	КонецЕсли;		
	
	ОписаниеЗапроса = Новый СхемаЗапроса;
	ОписаниеЗапроса.УстановитьТекстЗапроса(Схема.НаборыДанных.Проводки.Запрос);
	ПакетЗапросов = ОписаниеЗапроса.ПакетЗапросов;
	
	ТекстыЗапросов = Новый Массив;	
	Для каждого ЗапросПакета Из ПакетЗапросов Цикл

		// При отборе по оборотному субконто, используя секцию ГДЕ, возможно появление строк, где есть только остатки
		// и строк, где есть только обороты (период/регистратор/номер одинаковые). Требуется сгруппировать такие строки.
		Если ЗапросПакета.ТаблицаДляПомещения = "ХозрасчетныйОстаткиИОбороты" Тогда
			
			ВыбираемыеПоля = ЗапросПакета.Операторы[0].ВыбираемыеПоля;
			Группировка = ЗапросПакета.Операторы[0].Группировка;
			Для каждого ВыбираемоеПоле Из ВыбираемыеПоля Цикл
				
				ИмяРесурса = Сред(ВыбираемоеПоле, 29); // убираем имя таблицы
				Если СтрНачинаетсяС(ИмяРесурса, "Сумма")
				 Или СтрНачинаетсяС(ИмяРесурса, "ВалютнаяСумма")
				 Или СтрНачинаетсяС(ИмяРесурса, "Количество") Тогда
				 
					ИмяРесурса = "СУММА(" + ИмяРесурса + ")";
					ВыбираемыеПоля.Установить(ВыбираемыеПоля.Индекс(ВыбираемоеПоле), Новый ВыражениеСхемыЗапроса(ИмяРесурса));
					
				Иначе
					
					Группировка.Добавить(Новый ВыражениеСхемыЗапроса(ИмяРесурса));
				 
			 	КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ТекстЗапроса = ЗапросПакета.ПолучитьТекстЗапроса();
		
		Если ЗапросПакета.ТаблицаДляПомещения = "ОстаткиНаНачало"
		 Или ЗапросПакета.ТаблицаДляПомещения = "ОстаткиНаКонец"
		 Или ЗапросПакета.ТаблицаДляПомещения = "ХозрасчетныйОстаткиИОбороты" Тогда

			ПозицияСимвола = СтрНайти(ТекстЗапроса, "{ГДЕ", НаправлениеПоиска.СКонца);
			Если ПозицияСимвола = 0 Тогда // добавляем секцию {ГДЕ
				
				ТекстЗапроса = ТекстЗапроса
					+ СтрЗаменить("
					|{ГДЕ
					|	#ТаблицаОстатков.Субконто1.* КАК Субконто1,
					|	#ТаблицаОстатков.Субконто2.* КАК Субконто2,
					|	#ТаблицаОстатков.Субконто3.* КАК Субконто3}",
					"#ТаблицаОстатков",
					ЗапросПакета.ТаблицаДляПомещения);
				
			Иначе // добавляем поля в секцию {ГДЕ
				
				ПозицияСимвола = СтрНайти(ТекстЗапроса, "}", НаправлениеПоиска.СКонца);
				ТекстЗапроса = Лев(ТекстЗапроса, ПозицияСимвола - 1)
					+ СтрЗаменить(",
					|	#ТаблицаОстатков.Субконто1.* КАК Субконто1,
					|	#ТаблицаОстатков.Субконто2.* КАК Субконто2,
					|	#ТаблицаОстатков.Субконто3.* КАК Субконто3",
					"#ТаблицаОстатков",
					ЗапросПакета.ТаблицаДляПомещения)
					+ Сред(ТекстЗапроса, ПозицияСимвола);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	КонецЦикла;
	Для Индекс = 0 По ПакетЗапросов.Количество() - 1 Цикл
		ПакетЗапросов[Индекс].УстановитьТекстЗапроса(ТекстыЗапросов[Индекс]);
	КонецЦикла;
	
	Схема.НаборыДанных.Проводки.Запрос = ОписаниеЗапроса.ПолучитьТекстЗапроса();
	КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ИзмененТекстЗапросаСКД", Истина);
	
КонецПроцедуры

// Проверяет, если ли в данных расшифровки отчета сведения о валюте.
//
// Параметры:
//	ДанныеРасшифровки - Структура - Структура, формируемая БухгалтерскиеОтчетыВызовСервера.СформироватьОтчет() с ключами:
//		* Объект - Структура - Реквизиты отчета-объекта
//		* ДанныеРасшифровки - ДанныеРасшифровкиКомпоновкиДанных - сами данные расшифровки СКД
//
// Возвращаемое значение:
//	Булево - Истина, если в данных расшифровки отчета есть информация о валюте.
//
Функция ОтчетСодержитДанныеПоВалюте(ДанныеРасшифровки) Экспорт

	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ТипВалюты = Тип("СправочникСсылка.Валюты");

	// Ищем, начиная с конца списка элементов расшифровки, т.к. чаще всего валютные счета идут по номеру 
	// после рублевых, и отчеты по умолчанию добавляют группировку по валюте в конец списка группировок.

	ЭлементыРасшифровки = ДанныеРасшифровки.ДанныеРасшифровки.Элементы;
	Сч = ЭлементыРасшифровки.Количество();
	
	// Отчеты типа карточка счета выводят детальные записи, не группировки, 
	// по их расшифровке нельзя определить наличие валюты в данных отчетах.
	ТолькоДетальныеЗаписиВОтчете = Истина;

	Пока Сч > 0 Цикл
	
		Сч = Сч - 1;
		ЭлементРасшифровки = ЭлементыРасшифровки[Сч];

		Если ТипЗнч(ЭлементРасшифровки) <> Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
			Продолжить;
		КонецЕсли;

		// Для ссылочных полей основным действием по умолчанию является "Открыть значение", в т.ч. и для валюты,
		// поэтому из всего списка элементов расшифровки анализируем только такие. 
		Если ЭлементРасшифровки.ОсновноеДействие <> ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
			Продолжить;
		КонецЕсли;
		
		ТолькоДетальныеЗаписиВОтчете = Ложь;

		ЗначенияПолейРасшифровки = ЭлементРасшифровки.ПолучитьПоля();

		Для Каждого Поле Из ЗначенияПолейРасшифровки Цикл
			Если ТипЗнч(Поле.Значение) = ТипВалюты И ЗначениеЗаполнено(Поле.Значение) Тогда
				Если Поле.Значение <> ВалютаРегламентированногоУчета Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТолькоДетальныеЗаписиВОтчете;

КонецФункции

// Проверяет нужен ли для переданного типа сложный подбор
//
// Параметры:
//	ТипЭлемента - Тип - Тип, который нужно проверить.
// Возвращаемое значение:
//	Булево - Истина если нужна сложная обработка подбора, ложь - в противном случае.
//
Функция ЭтоТипЭлементаСоСложнымПодбором(ТипЭлемента) Экспорт
	
	Если ТипЭлемента = Тип("СправочникСсылка.БанковскиеСчета") 
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.ПодразделенияОрганизаций") 
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		//ИЛИ ТипЭлемента = Тип("ДокументСсылка.Партия")
		//ИЛИ ТипЭлемента = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом")
		//ИЛИ ТипЭлемента = Тип("ДокументСсылка.ПартияМатериаловВЭксплуатации") Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// В отчетах по видам субконто анализирует наличие признаков учета на счетах, содержащих выбранные субконто.
//
// Параметры:
//  Форма        - УправляемаяФорма - имеет основной реквизит "Отчет".
//
Процедура ЗаполнитьПризнакиУчета(Форма) Экспорт
	
	Отчет = Форма.Отчет;
	
	МассивСубконто = Новый Массив;
	Для Каждого ЭлементСписка Из Отчет.СписокВидовСубконто Цикл 
		Если ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда
			МассивСубконто.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСубконто.Количество() = 0 Тогда
		
		Форма.ЕстьВалюта 		= Истина;
		Форма.ЕстьКоличество    = Истина;
		Форма.ЕстьСчета         = Истина;
		Возврат;
		
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Хозрасчетный.Ссылка) КАК КоличествоСчетов,
	|	МАКСИМУМ(Хозрасчетный.Количественный) КАК Количественный,
	|	МАКСИМУМ(Хозрасчетный.Валютный) КАК Валютный
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный&УсловиеСоединения
	|ГДЕ
	|	&УсловиеОтбора";
	
	Запрос = Новый Запрос;
	НомерСубконто = 1;
	УсловиеСоединения = "";
	УсловиеОтбора = "";
	Для каждого ВидСубконто Из МассивСубконто Цикл
		
		УсловиеСоединения = УсловиеСоединения + "
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто" + НомерСубконто + "
		|		ПО Хозрасчетный.Ссылка = ХозрасчетныйВидыСубконто" + НомерСубконто + ".Ссылка";
		УсловиеОтбора = УсловиеОтбора 
			+ ?(НомерСубконто = 1, "", "
		|	И ") + "ХозрасчетныйВидыСубконто" + НомерСубконто + ".ВидСубконто = &ВидСубконто" + НомерСубконто;

		Запрос.УстановитьПараметр("ВидСубконто" + НомерСубконто, ВидСубконто);

		НомерСубконто = НомерСубконто + 1;
		
	КонецЦикла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеСоединения", УсловиеСоединения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбора", УсловиеОтбора);
	Запрос.Текст = ТекстЗапроса;
	
	Форма.ЕстьВалюта 		= Ложь;
	Форма.ЕстьКоличество   	= Ложь;
	Форма.ЕстьСчета         = Ложь;
	
	ВыборкаСчета = Запрос.Выполнить().Выбрать();
	Пока ВыборкаСчета.Следующий() Цикл
		
		Форма.ЕстьВалюта 		= ?(ВыборкаСчета.Валютный             = Истина, Истина, Ложь);
		Форма.ЕстьКоличество    = ?(ВыборкаСчета.Количественный       = Истина, Истина, Ложь);
		Форма.ЕстьСчета         = ?(ВыборкаСчета.КоличествоСчетов     = 0, Ложь, Истина);  
		
	КонецЦикла;
	
	Отчет.ПоказательВалютнаяСумма = Отчет.ПоказательВалютнаяСумма И Форма.ЕстьВалюта;
	Отчет.ПоказательКоличество = Отчет.ПоказательКоличество И Форма.ЕстьКоличество;

КонецПроцедуры

// Сохраняет структуру опций, используемых для указания настроек отчета.
//
// Параметры:
//  Форма        - УправляемаяФорма - имеет основной реквизит "Отчет".
//  Разделитель  - ПланСчетовСсылка.Хозрасчетный, ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные - разделитель
//                              сохраняемых настроек.
//
Процедура СохранитьОписаниеНастроек(Форма, Разделитель) Экспорт
	
	Если Не ЗначениеЗаполнено(Разделитель) Тогда
		Возврат;
	КонецЕсли;
	ИмяРазделителя = Разделитель.Метаданные().Имя;
	ИмяОтчета = ИмяОтчета(Форма);
	Отчет = Форма.Отчет;
	
	Если ИмяРазделителя = "ВидыСубконтоХозрасчетные" Тогда
		
		Если Отчет.СписокВидовСубконто.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		СписокВидовСубконто = Отчет.СписокВидовСубконто.Скопировать();
		СписокВидовСубконто[0].Значение = Разделитель;
		КоличествоСубконто = СписокВидовСубконто.Количество();
		КоличествоСубконтоМаксимум = БухгалтерскийУчетСервер.МаксимальноеКоличествоСубконто();
		Для НомерСубконто = 1 По КоличествоСубконто Цикл
			ИндексСКонца = КоличествоСубконто - НомерСубконто;
			Если ИндексСКонца > КоличествоСубконтоМаксимум - 1
			 Или Не ЗначениеЗаполнено(СписокВидовСубконто[ИндексСКонца].Значение) Тогда
				СписокВидовСубконто.Удалить(ИндексСКонца);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Подготавливаем структуру настроек.
	ОписаниеНастройки = Новый Структура;
	
	// Управление показателями.
	ТипБулево = Тип("Булево");
	КоллекцияНастроек = Отчеты[ИмяОтчета].СохраняемыеОпции();
	КоллекцияВключенныхНастроек = Новый Структура;
	Для каждого Показатель Из КоллекцияНастроек Цикл
		Если ТипЗнч(Отчет[Показатель]) <> ТипБулево Или Отчет[Показатель] Тогда
			КоллекцияВключенныхНастроек.Вставить(Показатель, Отчет[Показатель]);
		КонецЕсли;
	КонецЦикла;
	Если ИмяРазделителя = "ВидыСубконтоХозрасчетные"
	   И КоллекцияВключенныхНастроек.Свойство("СписокВидовСубконто") Тогда
		КоллекцияВключенныхНастроек.СписокВидовСубконто = СписокВидовСубконто;
	КонецЕсли;
	ОписаниеНастройки.Вставить("Показатели", КоллекцияВключенныхНастроек);
	
	// Группировки.
	Если Отчет.Свойство("Группировка") Тогда
		КоллекцияВключенныхНастроек = Отчет.Группировка.Выгрузить(, "Использование, Поле, Представление, ТипГруппировки");
		ОписаниеНастройки.Вставить("Группировка", КоллекцияВключенныхНастроек);
	КонецЕсли;
	
	// Отбор.
	// Фиксируем сам факт, что отбор нужно перезаполнять. Однако используем не сохраненные ранее настройки,
	// а алгоритмическим преобразованием. См. ПреобразоватьОтборыПоСчету()
	ОписаниеНастройки.Вставить("Отбор", Неопределено);
	
	// Дополнительные поля.
	Если Отчет.Свойство("ДополнительныеПоля") Тогда
		КоллекцияВключенныхНастроек = Отчет.ДополнительныеПоля.Выгрузить(, "Использование, Поле, Представление");
		ОписаниеНастройки.Вставить("ДополнительныеПоля", КоллекцияВключенныхНастроек);
	КонецЕсли;
	
	// Сортировка.
	Если ИмяРазделителя = "Хозрасчетный" Тогда
		ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Форма.СчетИсходноеЗначение);
		КоллекцияВключенныхНастроек = ОписаниеСортировки(Отчет.КомпоновщикНастроек.Настройки.Порядок.Элементы, ДанныеСчета);
	Иначе
		КоллекцияВключенныхНастроек = ОписаниеСортировки(Отчет.КомпоновщикНастроек.Настройки.Порядок.Элементы);
	КонецЕсли;
	ОписаниеНастройки.Вставить("Порядок", КоллекцияВключенныхНастроек);
	
	// Подготавливаем и сохраняем контейнер.
	
	КлючиОписанияНастройки = КлючиОписанияНастройки(ИмяОтчета, ИмяРазделителя, Разделитель);	
	ХранилищеПользовательскихНастроекОтчетов.Сохранить(
		КлючиОписанияНастройки.КлючОбъекта,
		КлючиОписанияНастройки.КлючНастроек,
		ОписаниеНастройки,
		КлючиОписанияНастройки);
	
КонецПроцедуры

// Задает структуру опций, используемых для указания настроек отчета. Если нет ранее сохраненных настроек,
// то устанавливаются настройки по-умолчанию.
//
// Параметры:
//  Форма        - УправляемаяФорма - имеет основной реквизит "Отчет".
//  Разделитель  - ПланСчетовСсылка.Хозрасчетный, ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные - разделитель
//                              сохраняемых настроек.
//  ТолькоОбновление - Строка - если Ложь, то читается ранее сохраненная настройка; если Истина, то только проверяется
//                              корректность текущей настройки.
//
Процедура ПрочитатьОписаниеНастроек(Форма, Разделитель, ТолькоОбновление = Ложь) Экспорт
	
	Перем КоллекцияВключенныхНастроек;
	
	Если Не ЗначениеЗаполнено(Разделитель) Тогда
		Возврат;
	КонецЕсли;
	ИмяРазделителя = Разделитель.Метаданные().Имя;
	ИмяОтчета = ИмяОтчета(Форма);;
	Отчет = Форма.Отчет;
	
	// Получаем источник применяемых настроек.
	Если ТолькоОбновление Тогда // лишь обновить настройки
		
		Если ИмяРазделителя = "ВидыСубконтоХозрасчетные" Тогда
			// Используем заданный сейчас в отчете список видов субконто. Для случая изменения одного из неосновных субконто.
			Форма.ИзменениеСхемыКомпоновкиДанныхНаСервере();
			ЗаполнитьПризнакиУчета(Форма);
			СписокВидовСубконто = Отчет.СписокВидовСубконто;
			
		Иначе
			
			ТекстИсключения = НСтр("ru = 'Разделитель настроек ""%1"" не используется для обновления настроек.'");
			ВызватьИсключение СтрШаблон(ТекстИсключения, ИмяРазделителя);
			
		КонецЕсли;
		
		// Подготавливаем текущие настройки к преобразованию.
		ОписаниеНастройки = Новый Структура;
		Если Отчет.Свойство("Группировка") Тогда
			КоллекцияВключенныхНастроек = Отчет.Группировка.Выгрузить(, "Использование, Поле, Представление, ТипГруппировки");
			ОписаниеНастройки.Вставить("Группировка", КоллекцияВключенныхНастроек);
		КонецЕсли;
		ОписаниеНастройки.Вставить("Отбор", Неопределено);
		Если Отчет.Свойство("ДополнительныеПоля") Тогда
			КоллекцияВключенныхНастроек = Отчет.ДополнительныеПоля.Выгрузить(, "Использование, Поле, Представление");
			ОписаниеНастройки.Вставить("ДополнительныеПоля", КоллекцияВключенныхНастроек);
		КонецЕсли;
		КоллекцияВключенныхНастроек = ОписаниеСортировки(Отчет.КомпоновщикНастроек.Настройки.Порядок.Элементы);
		ОписаниеНастройки.Вставить("Порядок", КоллекцияВключенныхНастроек);
		
	Иначе // прочитать ранее сохраненные
		
		КлючиОписанияНастройки = КлючиОписанияНастройки(ИмяОтчета, ИмяРазделителя, Разделитель);
		ОписаниеНастройки = ХранилищеПользовательскихНастроекОтчетов.Загрузить(
			КлючиОписанияНастройки.КлючОбъекта,
			КлючиОписанияНастройки.КлючНастроек);
		
		Если ОписаниеНастройки = Неопределено Тогда // нет ранее сохраненного описания
		
			Если ИмяРазделителя = "ВидыСубконтоХозрасчетные" Тогда
				Форма.ИзменениеСхемыКомпоновкиДанныхНаСервере();
				ЗаполнитьПризнакиУчета(Форма);
			КонецЕсли;
			
			ЗаполняемыеНастройки = Новый Структура;
			ЗаполняемыеНастройки.Вставить("Показатели",         Истина);
			ЗаполняемыеНастройки.Вставить("Группировка",        Отчет.Свойство("Группировка"));
			ЗаполняемыеНастройки.Вставить("Отбор",              Истина);
			ЗаполняемыеНастройки.Вставить("ДополнительныеПоля", Отчет.Свойство("ДополнительныеПоля"));
			ЗаполняемыеНастройки.Вставить("Порядок",            Истина);
			ЗаполняемыеНастройки.Вставить("ВыводимыеДанные",    ИмяОтчета = "ОборотыСчета");

			Форма.ЗаполнитьНастройкамиПоУмолчанию(ЗаполняемыеНастройки);
			БухгалтерскиеОтчетыВызовСервера.ОбновитьОписаниеОтборовОтчета(Форма);
			Возврат;
			
		Иначе // используем ранее сохраненное описание настроек
			
			Если ИмяРазделителя = "ВидыСубконтоХозрасчетные" Тогда
			
				СписокВидовСубконто = Неопределено;
				Если Не ОписаниеНастройки.Свойство("Показатели")
				 Или Не ОписаниеНастройки.Показатели.Свойство("СписокВидовСубконто", СписокВидовСубконто) Тогда
					// Используем заданный сейчас в отчете список видов субконто.
					СписокВидовСубконто = Отчет.СписокВидовСубконто;
				Иначе
					// Используем ранее сохраненный список видов субконто.
					Отчет.СписокВидовСубконто = СписокВидовСубконто;
				КонецЕсли;
				Форма.ИзменениеСхемыКомпоновкиДанныхНаСервере();
				ЗаполнитьПризнакиУчета(Форма);
				
			ИначеЕсли ИмяРазделителя <> "Хозрасчетный" Тогда
				
				ТекстИсключения = НСтр("ru = 'Разделитель настроек ""%1"" не используется для хранения настроек.'");
				ВызватьИсключение СтрШаблон(ТекстИсключения, ИмяРазделителя);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Получаем параметры, влияющие на настройки отчета.
	Если ИмяРазделителя = "Хозрасчетный" Тогда
		
		ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Отчет.Счет);
		КоличествоСубконто       = ДанныеСчета.КоличествоСубконто;
			
	ИначеЕсли ИмяРазделителя = "ВидыСубконтоХозрасчетные" Тогда
		
		ДанныеСчета = Новый Структура;
		ДанныеСчета.Вставить("Вид",            ?(Форма.ЕстьСчета, ВидСчета.АктивноПассивный, Неопределено));
		ДанныеСчета.Вставить("Валютный",       Форма.ЕстьВалюта);
		ДанныеСчета.Вставить("Количественный", Форма.ЕстьКоличество);
		
		НомерСубконто = 1;
		КоличествоСубконто = СписокВидовСубконто.Количество();
		Для каждого ВидСубконто Из СписокВидовСубконто Цикл
			Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
				ДанныеСчета.Вставить("ВидСубконто" + НомерСубконто, ВидСубконто.Значение);
				НомерСубконто = НомерСубконто + 1;
			Иначе
				КоличествоСубконто = КоличествоСубконто - 1;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОписаниеНастройки.Свойство("Показатели", КоллекцияВключенныхНастроек) Тогда
		
		ТипБулево = Тип("Булево");
		КоллекцияНастроек = Отчеты[ИмяОтчета].СохраняемыеОпции();
		// Сбрасываем все флаги.
		Для каждого Показатель Из КоллекцияНастроек Цикл
			Если ТипЗнч(Отчет[Показатель]) = ТипБулево И Отчет[Показатель] Тогда // только для типа Булево
				Отчет[Показатель] = Ложь;
			КонецЕсли;
		КонецЦикла;
		// Устанавливаем нужные флаги и свойства.
		ОдинИзПоказателейОтмечен = Ложь;
		Для каждого Показатель Из КоллекцияВключенныхНастроек Цикл
			
			Если Не Отчет.Свойство(Показатель.Ключ) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Показатель.Ключ = "ПоказательВалютнаяСумма" Тогда
				Отчет[Показатель.Ключ] = ДанныеСчета.Валютный;
			ИначеЕсли Показатель.Ключ = "ПоказательКоличество" Тогда
				Отчет[Показатель.Ключ] = ДанныеСчета.Количественный;
			ИначеЕсли Показатель.Ключ = "РазвернутоеСальдо" Тогда
				Отчет[Показатель.Ключ] = (ДанныеСчета.Вид = ВидСчета.АктивноПассивный);
			Иначе
				Отчет[Показатель.Ключ] = Показатель.Значение;
			КонецЕсли;
			Если Не ОдинИзПоказателейОтмечен
			   И ТипЗнч(Показатель.Значение) = ТипБулево И Показатель.Значение
			   И Лев(Показатель.Ключ, 10) = "Показатель" Тогда
				ОдинИзПоказателейОтмечен = Истина;
			КонецЕсли;
			
		КонецЦикла;
		Если Не ОдинИзПоказателейОтмечен Тогда
			Отчет.ПоказательБУ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ДоступныеПоляГруппировок = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок;
	Если ОписаниеНастройки.Свойство("Группировка", КоллекцияВключенныхНастроек) Тогда
		
		// Удаляем сохраненные группировки, которые стали некорректными.
		ИсключаемыеНастройки = Новый Массив;
		ИсключаемыеНастройки.Добавить("Подразделение");
	
		Если Не ДанныеСчета.Валютный Тогда
			ИсключаемыеНастройки.Добавить("Валюта");
		КонецЕсли;
		Для НомерСубконто = 1 По КоличествоСубконто Цикл
			
			// проверяем, что состав субконто на счете не изменился
			ОписаниеПоля = ДоступныеПоляГруппировок.НайтиПоле(Новый ПолеКомпоновкиДанных("Субконто" + НомерСубконто));
			Если ОписаниеПоля = Неопределено Тогда
				ИсключаемыеНастройки.Добавить("Субконто" + НомерСубконто);
			Иначе
				ИндексПоля = ИндексПоляВКоллекции(КоллекцияВключенныхНастроек, "Субконто" + НомерСубконто);
				Если ИндексПоля <> Неопределено Тогда // ранее была группировка для этого субконто
					ПредставлениеПоля = КоллекцияВключенныхНастроек[ИндексПоля].Представление;
					ДлинаПредставленияПоля = СтрДлина(ОписаниеПоля.Заголовок);
					Если ОписаниеПоля.Заголовок <> Лев(ПредставлениеПоля, ДлинаПредставленияПоля) Тогда
						// Субконто сдвинулись.
						ИсключаемыеНастройки.Добавить("Субконто" + НомерСубконто);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли; 
			
		КонецЦикла;
		Для НомерСубконто = КоличествоСубконто + 1 По БухгалтерскийУчетСервер.МаксимальноеКоличествоСубконто() Цикл
			ИсключаемыеНастройки.Добавить("Субконто" + НомерСубконто);
		КонецЦикла;
		Для каждого ИмяПоля Из ИсключаемыеНастройки Цикл
			ИндексПоля = ИндексПоляВКоллекции(КоллекцияВключенныхНастроек, ИмяПоля);
			Пока ИндексПоля <> Неопределено Цикл
				КоллекцияВключенныхНастроек.Удалить(ИндексПоля);
				ИндексПоля = ИндексПоляВКоллекции(КоллекцияВключенныхНастроек, ИмяПоля);
			КонецЦикла;
		КонецЦикла; 

		Отчет.Группировка.Загрузить(КоллекцияВключенныхНастроек);
		
		// Добавляем отсутствующие группировки.
		Для НомерСубконто = 1 По КоличествоСубконто Цикл
			
			Если ИндексПоляВКоллекции(КоллекцияВключенныхНастроек, "Субконто" + НомерСубконто) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ПоследняяГруппировка = ДобавитьГруппировкуОтчета(Отчет.Группировка,
										ДоступныеПоляГруппировок,
										"Субконто" + НомерСубконто);
				
			Если ИмяРазделителя = "ВидыСубконтоХозрасчетные"
			   И ПоследняяГруппировка <> Неопределено Тогда
				ПоследняяГруппировка.Использование = Истина;
			КонецЕсли;	
			
		КонецЦикла;
		Если ДанныеСчета.Валютный
		   И ИндексПоляВКоллекции(КоллекцияВключенныхНастроек, "Валюта") = Неопределено Тогда
			ДобавитьГруппировкуОтчета(Отчет.Группировка, ДоступныеПоляГруппировок, "Валюта");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОписаниеНастройки.Свойство("Отбор") Тогда
		Форма.ЗаполнитьНастройкамиПоУмолчанию(Новый Структура("Отбор", Истина));
		БухгалтерскиеОтчетыВызовСервера.ОбновитьОписаниеОтборовОтчета(Форма);
	КонецЕсли;
	
	ДоступныеПоляВыбора = Отчет.КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора;
	Если ОписаниеНастройки.Свойство("ДополнительныеПоля", КоллекцияВключенныхНастроек) Тогда
		
		Отчет.ДополнительныеПоля.Очистить();
		ШаблонСпискаПолей = Отчет.ДополнительныеПоля.Выгрузить();
		
		// Удаляем сохраненные поля, которые стали некорректными.
		ИсключаемыеНастройки = Новый Массив;
		Для каждого Показатель Из КоллекцияВключенныхНастроек Цикл
			
			ПозицияТочки = СтрНайти(Показатель.Поле, ".");
			Если ПозицияТочки = 0 Тогда
				ИмяПоля = Показатель.Поле;
			Иначе
				ИмяПоля = Лев(Показатель.Поле, ПозицияТочки - 1);
			КонецЕсли;
			Если КоличествоСубконто < 3 И ИмяПоля = "Субконто3" Тогда
				ИсключаемыеНастройки.Добавить(Показатель);
			ИначеЕсли КоличествоСубконто < 2 И ИмяПоля = "Субконто2" Тогда
				ИсключаемыеНастройки.Добавить(Показатель);
			ИначеЕсли КоличествоСубконто < 1 И ИмяПоля = "Субконто1" Тогда
				ИсключаемыеНастройки.Добавить(Показатель);
			ИначеЕсли СтрНачинаетсяС(ИмяПоля, "Субконто") Тогда // проверяем, что состав субконто на счете не изменился
				ОписаниеПоля = ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоля));
				Если ОписаниеПоля = Неопределено Тогда
					ИсключаемыеНастройки.Добавить(ИмяПоля);
				Иначе
					ДлинаПредставленияПоля = СтрДлина(ОписаниеПоля.Заголовок);
					Если ОписаниеПоля.Заголовок <> Лев(Показатель.Представление, ДлинаПредставленияПоля) Тогда
						// Субконто сдвинулись.
						ИсключаемыеНастройки.Добавить(Показатель);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоля)) = Неопределено Тогда
				ИсключаемыеНастройки.Добавить(Показатель);
			КонецЕсли; 
			
		КонецЦикла;
		Для каждого Показатель Из ИсключаемыеНастройки Цикл
			КоллекцияВключенныхНастроек.Удалить(Показатель);
		КонецЦикла;
		
		// Заполняем ранее включавшиеся дополнительные поля.
		Для каждого Показатель Из КоллекцияВключенныхНастроек Цикл
			
			НоваяСтрока = Отчет.ДополнительныеПоля.Добавить();
			НоваяСтрока.Использование = Показатель.Использование;
			НоваяСтрока.Поле          = Показатель.Поле;
			НоваяСтрока.Представление = Показатель.Представление;
		
		КонецЦикла;
		
		// Заполняем невключенные дополнительные поля. 
		БухгалтерскиеОтчетыВызовСервера.ЗаполнитьДополнительныеПоляИзНастроек(Отчет.КомпоновщикНастроек, ШаблонСпискаПолей, Отчет.Группировка);
		Для каждого Показатель Из ШаблонСпискаПолей Цикл
			
			Если КоллекцияВключенныхНастроек.Найти(Показатель.Поле, "Поле") <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Отчет.ДополнительныеПоля.Добавить();
			НоваяСтрока.Использование = Ложь;
			НоваяСтрока.Поле          = Показатель.Поле;
			НоваяСтрока.Представление = Показатель.Представление;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Сортировка.
	Если ОписаниеНастройки.Свойство("Порядок", КоллекцияВключенныхНастроек) Тогда
		
		Порядок = Отчет.КомпоновщикНастроек.Настройки.Порядок;
		Порядок.Элементы.Очистить();
		
		// Удаляем сохраненные поля, которые стали некорректными.
		Если ИмяРазделителя = "Хозрасчетный" Тогда 
			УдалитьНедоступныеПоля(КоллекцияВключенныхНастроек, Порядок.ДоступныеПоляПорядка, КоличествоСубконто, ДанныеСчета);
		Иначе
			УдалитьНедоступныеПоля(КоллекцияВключенныхНастроек, Порядок.ДоступныеПоляПорядка, КоличествоСубконто);
		КонецЕсли;
		
		// Заполняем ранее включавшуюся сортировку.
		Для каждого Показатель Из КоллекцияВключенныхНастроек Цикл
			
			НоваяСтрока = Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			НоваяСтрока.РежимОтображения  = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
			НоваяСтрока.Использование     = Показатель.Использование;
			НоваяСтрока.Поле              = Новый ПолеКомпоновкиДанных(Показатель.Поле);
			НоваяСтрока.ТипУпорядочивания = Показатель.ТипУпорядочивания;
		
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Преобразует отборы, ранее применявшиеся по счету РазделительИсходноеЗначение к отборам по счету Разделитель,
// удаляя неподходящие. Сопоставление производится по видам субконто.
//
// Параметры:
//  Отбор        - ОтборКомпоновкиДанных - набор преобразуемых отборов.
//  ИсходныйСчет - ПланСчетовСсылка - ранее использовавшийся счет.
//  НовыйСчет    - ПланСчетовСсылка - новый счет, который будет использоваться.
//
Процедура ПреобразоватьОтборыПоСчету(Отбор, ИсходныйСчет, НовыйСчет) Экспорт
	
	Если ИсходныйСчет = НовыйСчет Тогда
		Возврат;
 	КонецЕсли; 
	
	// Определяем правила преобразования аналитик одного счета в аналитики другого.
	
	ДанныеИсходногоСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ИсходныйСчет);
	ДанныеНовогоСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(НовыйСчет);
	
	// Правила преобразования будут описаны в виде соответствия.
	// Ключ = имя поля в исходном отборе.
	// Значение = имя поля в новом отборе. Если задано пустое значение, то отбор по полю нужно удалить.
	КартаПолей = Новый Соответствие;
	
	// Проекция измерений.
	КартаПолей.Вставить("Подразделение", "");
	
	Если ДанныеНовогоСчета.Валютный Тогда
		КартаПолей.Вставить("Валюта", "Валюта");
	Иначе
		КартаПолей.Вставить("Валюта", "");
	КонецЕсли;
	
	// Проекция субконто.
	НовыеСубконто = Новый Массив;
	Для НомерСубконто = 1 По ДанныеНовогоСчета.КоличествоСубконто Цикл
		НовыеСубконто.Добавить("Субконто" + НомерСубконто);
	КонецЦикла;
	Для НомерСубконтоИсходного = 1 По ДанныеИсходногоСчета.КоличествоСубконто Цикл
		
		ЦелевоеСубконто = 0;
		Для НомерСубконто = 1 По ДанныеНовогоСчета.КоличествоСубконто Цикл
			Если ДанныеИсходногоСчета["ВидСубконто" + НомерСубконтоИсходного] = ДанныеНовогоСчета["ВидСубконто" + НомерСубконто] Тогда
				
				Если ДанныеНовогоСчета["ВидСубконто" + НомерСубконто] <> ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы
				   И ДанныеНовогоСчета["ВидСубконто" + НомерСубконто] <> ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры Тогда
					ЦелевоеСубконто = НомерСубконто;
				Иначе // Это субконто существует на счете, но не должно использоваться.
					НовыеСубконто.Удалить(НовыеСубконто.Найти("Субконто" + НомерСубконто));
				КонецЕсли;
				Прервать;
				
			КонецЕсли;
		КонецЦикла;
		КартаПолей.Вставить("Субконто" + НомерСубконтоИсходного,
			?(ЦелевоеСубконто = 0, "", "Субконто" + ЦелевоеСубконто));
	
	КонецЦикла;	
		
	// Проекция ресурсов. Задаем только те ресурсы, которые необходимо удалить.
	ДоступныеПоляОтбора = Отбор.ДоступныеПоляОтбора.Элементы;
	ГруппыРесурсов = Новый Структура;
	Если ДоступныеПоляОтбора.Найти("ОборотыЗаПериод") <> Неопределено Тогда
		ГруппыРесурсов.Вставить("ОборотыЗаПериод", "Оборот");
	КонецЕсли;
	Если ДоступныеПоляОтбора.Найти("СальдоНаКонецПериода") <> Неопределено Тогда
		ГруппыРесурсов.Вставить("СальдоНаКонецПериода",  "Конечный");
	КонецЕсли;
	Если ДоступныеПоляОтбора.Найти("СальдоНаНачалоПериода") <> Неопределено Тогда
		ГруппыРесурсов.Вставить("СальдоНаНачалоПериода", "Начальный");
	КонецЕсли;
	ГруппыПоказателей = Новый Массив;
	ГруппыПоказателей.Добавить("БУ");
	ГруппыПоказателей.Добавить("ВалютнаяСумма");
	СтороныПроводки = Новый Массив;
	СтороныПроводки.Добавить("Дт");
	СтороныПроводки.Добавить("Кт");
	
	Если Не ДанныеНовогоСчета.Валютный И ДанныеИсходногоСчета.Валютный Тогда
		
		Для каждого СторонаПроводки Из СтороныПроводки Цикл
		
			Для каждого ГруппаРесурсов Из ГруппыРесурсов Цикл
				
				Если ГруппаРесурсов.Значение = "Оборот" Тогда
					
					ИмяРесурса = ГруппаРесурсов.Ключ + "." + "ВалютнаяСумма" + ГруппаРесурсов.Значение + СторонаПроводки;
					КартаПолей.Вставить(ИмяРесурса, "");
					
				Иначе
					
					ИмяРесурса = ГруппаРесурсов.Ключ + "." + "ВалютнаяСумма" + ГруппаРесурсов.Значение + "Остаток" + СторонаПроводки;
					КартаПолей.Вставить(ИмяРесурса, "");
					ИмяРесурса = ГруппаРесурсов.Ключ + "." + "ВалютнаяСумма" + ГруппаРесурсов.Значение + "РазвернутыйОстаток" + СторонаПроводки;
					КартаПолей.Вставить(ИмяРесурса, "");
					
				КонецЕсли;
				
			КонецЦикла;
		
		КонецЦикла; 
		
	КонецЕсли;
	
	Если Не ДанныеНовогоСчета.Количественный И ДанныеИсходногоСчета.Количественный Тогда
		
		Для каждого СторонаПроводки Из СтороныПроводки Цикл
		
			Для каждого ГруппаРесурсов Из ГруппыРесурсов Цикл
				
				Если ГруппаРесурсов.Значение = "Оборот" Тогда
					
					ИмяРесурса = ГруппаРесурсов.Ключ + "." + "Количество" + ГруппаРесурсов.Значение + СторонаПроводки;
					КартаПолей.Вставить(ИмяРесурса, "");
					
				Иначе
					
					ИмяРесурса = ГруппаРесурсов.Ключ + "." + "Количество" + ГруппаРесурсов.Значение + "Остаток" + СторонаПроводки;
					КартаПолей.Вставить(ИмяРесурса, "");
					ИмяРесурса = ГруппаРесурсов.Ключ + "." + "Количество" + ГруппаРесурсов.Значение + "РазвернутыйОстаток" + СторонаПроводки;
					КартаПолей.Вставить(ИмяРесурса, "");
					
				КонецЕсли;
				
			КонецЦикла;
		
		КонецЦикла; 
		
	КонецЕсли;
	
	Если ДанныеНовогоСчета.Вид <> ВидСчета.АктивноПассивный И ДанныеИсходногоСчета.Вид = ВидСчета.АктивноПассивный Тогда
		
		Для каждого ГруппаРесурсов Из ГруппыРесурсов Цикл
			Если ГруппаРесурсов.Значение = "Оборот" Тогда
				Продолжить;
			КонецЕсли;
		
			Для каждого СторонаПроводки Из СтороныПроводки Цикл
				
				Для каждого ГруппаПоказателей Из ГруппыПоказателей Цикл
				
					ИмяРесурса = ГруппаРесурсов.Ключ + "." + ГруппаПоказателей + ГруппаРесурсов.Значение + "РазвернутыйОстаток" + СторонаПроводки;
					КартаПолей.Вставить(ИмяРесурса, "");
				
				КонецЦикла;
				
			КонецЦикла;
		
		КонецЦикла;
		
	КонецЕсли;
	
	// Применяем проекцию аналитик. Удаляем неподходящие отборы.
	
	КоллекцияОтборов = Отбор.Элементы;
	ИспользуемыеПоля = Новый Соответствие;
	ПрименитьКартуПолей(КартаПолей, КоллекцияОтборов, ИспользуемыеПоля);
	
	// Добавляем отсутствующие отборы по-умолчанию, упорядочиваем имеющиеся.
	
	// Сдвигаем группы отборов вверх.
	ТекущийИндексУпорядоченных = 0;
	Для ТекущийИндексАнализируемых = 0 По КоллекцияОтборов.Количество() - 1 Цикл
		
		Если ТипЗнч(КоллекцияОтборов[ТекущийИндексАнализируемых]) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			Если ТекущийИндексУпорядоченных < ТекущийИндексАнализируемых Тогда
				КоллекцияОтборов.Сдвинуть(КоллекцияОтборов[ТекущийИндексАнализируемых],
					ТекущийИндексУпорядоченных - ТекущийИндексАнализируемых);
			КонецЕсли;
			ТекущийИндексУпорядоченных = ТекущийИндексУпорядоченных + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(КартаПолей["Подразделение"]) Тогда
		ДобавитьОтборОтчета(КоллекцияОтборов,
			ДоступныеПоляОтбора,
			ИспользуемыеПоля,
			"Подразделение",
			ТекущийИндексУпорядоченных);
	КонецЕсли;
	Для НомерСубконто = 1 По ДанныеНовогоСчета.КоличествоСубконто Цикл
		
		Если НовыеСубконто.Найти("Субконто" + НомерСубконто) = Неопределено Тогда
			// Это субконто существует на счете, но не должно использоваться.
			Продолжить;
		КонецЕсли;
		
		ДобавитьОтборОтчета(КоллекцияОтборов,
			ДоступныеПоляОтбора,
			ИспользуемыеПоля,
			"Субконто" + НомерСубконто,
			ТекущийИндексУпорядоченных);		
			
	КонецЦикла;
	Если Не ПустаяСтрока(КартаПолей["Валюта"]) Тогда
		ДобавитьОтборОтчета(КоллекцияОтборов,
			ДоступныеПоляОтбора,
			ИспользуемыеПоля,
			"Валюта",
			ТекущийИндексУпорядоченных);
	КонецЕсли; 
	
КонецПроцедуры

// Удаляет некорректные поля сортировки.
//
// Параметры:
//  ПоляСортировки - ПорядокКомпоновкиДанных, ТаблицаЗначений - набор обрабатываемых полей сортировки.
//  ДоступныеПоляПорядка - ДоступныеПоляКомпоновкиДанных - проверка на доступность полей.
//  КоличествоСубконто - Число - количество субконто, которые можно использовать.
//  ДанныеСчета  - Структура - если заполнено, то сверяются виды субконто.
//
Процедура УдалитьНедоступныеПоля(ПоляСортировки, ДоступныеПоляПорядка, КоличествоСубконто, ДанныеСчета = Неопределено) Экспорт
	
	// Удаляем сохраненные поля, которые стали некорректными.
	ИсключаемыеНастройки = Новый Массив;
	Для каждого Показатель Из ПоляСортировки Цикл
		
		ПозицияТочки = СтрНайти(Показатель.Поле, ".");
		Если ПозицияТочки = 0 Тогда
			ИмяПоля = Показатель.Поле;
		Иначе
			ИмяПоля = Лев(Показатель.Поле, ПозицияТочки - 1);
		КонецЕсли;
		Если КоличествоСубконто < 3 И ИмяПоля = "Субконто3" Тогда
			ИсключаемыеНастройки.Добавить(Показатель);
		ИначеЕсли КоличествоСубконто < 2 И ИмяПоля = "Субконто2" Тогда
			ИсключаемыеНастройки.Добавить(Показатель);
		ИначеЕсли КоличествоСубконто < 1 И ИмяПоля = "Субконто1" Тогда
			ИсключаемыеНастройки.Добавить(Показатель);
		ИначеЕсли ДанныеСчета <> Неопределено И СтрНачинаетсяС(ИмяПоля, "Субконто")
		   И Показатель.ВидСубконто <> ДанныеСчета["Вид" + ИмяПоля] Тогда
			ИсключаемыеНастройки.Добавить(Показатель);
		ИначеЕсли ДоступныеПоляПорядка.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоля)) = Неопределено Тогда
			ИсключаемыеНастройки.Добавить(Показатель);
		КонецЕсли; 
		
	КонецЦикла;
	Для каждого Показатель Из ИсключаемыеНастройки Цикл
		ПоляСортировки.Удалить(Показатель);
	КонецЦикла;
	
КонецПроцедуры

// Подтверждает, что переданная организация входит в список доступных для пользователя.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - проверяемая организация. Может быть пустым значением.
//	ПравоНаИзменение - Булево - Истина, если список будет использоваться в алгоритмах изменения данных.
//
// Возвращаемое значение:
//   Массив      - список из всех доступных, если было передано пустое значение;
//               - список из Организация и ее доступных обособленных подразделений;
//               - пустой список, если организация недоступна для пользователя.
//
Функция СписокДоступныхОрганизаций(Организация, ПравоНаИзменение = Ложь) Экспорт
	
	ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(ПравоНаИзменение);
	
	Если ЗначениеЗаполнено(Организация) Тогда // проверяем конкретную организацию
		
		СписокОрганизаций = Новый Массив;
		
		Если ДоступныеОрганизации.Найти(Организация) <> Неопределено
		   И СписокОрганизаций.Найти(Организация) = Неопределено Тогда
			СписокОрганизаций.Вставить(0, Организация);
		КонецЕсли;
		
		ДоступныеОрганизации = СписокОрганизаций;
		
	КонецЕсли;
	
	Возврат ДоступныеОрганизации;
	
КонецФункции

// Определяет имя отчета (объекта метаданных), отображаемого в форме.
//
// Параметры:
//	Форма - УправляемаяФорма - Форма объекта.
//
// Возвращаемое значение:
//	Строка - Имя объекта метаданных.
//
Функция ИмяОтчета(Форма) Экспорт
	
	ИмяОтчета = БухгалтерскиеОтчетыКлиентСервер.ИмяОтчетаПоИмениФормы(Форма);
	Если ИмяОтчета <> Неопределено Тогда
		Возврат ИмяОтчета;
	КонецЕсли;
	
	// Основной реквизит формы должен называться Отчет
	ОтчетОбъект = Форма.РеквизитФормыВЗначение("Отчет");
	Возврат ОтчетОбъект.Метаданные().Имя;
	
КонецФункции

// Возвращает макет компоновки шапки отчета.
//
// Параметры:
// 	МакетКомпоновки - МакетКомпоновкиДанных - Результат формирования макета компоновки.
//	Тело - ТелоМакетаКомпоновкиДанных - Содержание макета компоновки.
//	ТипМакета - Строка - Возможные значения "Заголовок", "Подвал".
//
// Возвращаемое значение:
//	ОписаниеМакетаОбластиМакетаКомпоновкиДанных - Искомый макет.
//
Функция ПолучитьМакетШапки(МакетКомпоновки, Тело = Неопределено, ТипМакета = "Заголовок") Экспорт
	
	ЕстьПустойМакет = Ложь;
	
	Если Тело = Неопределено Тогда
		Тело = МакетКомпоновки.Тело;
	КонецЕсли;
	
	Если Тело.Количество() > 0 Тогда
		Если ТипМакета = "Заголовок" Тогда
			НачальныйИндекс = 0;
			КонечныйИндекс  = Тело.Количество();
			ИтераторПрямой  = Истина;
		ИначеЕсли ТипМакета = "Подвал" Тогда 
			НачальныйИндекс = Тело.Количество() - 1;
			КонечныйИндекс  = 0;
			ИтераторПрямой  = Ложь;
		КонецЕсли;
		
		Индекс = НачальныйИндекс;
		Пока Индекс <> КонечныйИндекс Цикл
			Элемент = Тело[Индекс];
			Если ТипЗнч(Элемент) = Тип("МакетОбластиМакетаКомпоновкиДанных") Тогда
				Если ЕстьПустойМакет Тогда
					ЕстьПустойМакет = Ложь;
				Иначе
					Возврат МакетКомпоновки.Макеты[Элемент.Макет];
				КонецЕсли;
			ИначеЕсли ТипЗнч(Элемент) = Тип("МакетГруппировкиТаблицыМакетаКомпоновкиДанных") Тогда
				Возврат МакетКомпоновки.Макеты[Элемент.Макет];
			ИначеЕсли ТипЗнч(Элемент) = Тип("ДиаграммаМакетаКомпоновкиДанных") Тогда
				ЕстьПустойМакет = Истина;
			ИначеЕсли ТипЗнч(Элемент) = Тип("ТаблицаМакетаКомпоновкиДанных") Тогда
				Возврат МакетКомпоновки.Макеты[Элемент.МакетШапки];
			КонецЕсли;
			
			Если ИтераторПрямой Тогда
				Индекс = Индекс + 1;
			Иначе
				Индекс = Индекс - 1;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает макет компоновки подвала отчета.
//
// Параметры:
// 	МакетКомпоновки - МакетКомпоновкиДанных - Результат формирования макета компоновки.
//	Тело - ТелоМакетаКомпоновкиДанных - Содержание макета компоновки.
//
// Возвращаемое значение:
//	ОписаниеМакетаОбластиМакетаКомпоновкиДанных - Искомый макет.
//
Функция ПолучитьМакетПодвала(МакетКомпоновки, Тело = Неопределено) Экспорт
	
	Если Тело = Неопределено Тогда
		Тело = МакетКомпоновки.Тело;
	КонецЕсли;
	
	Для Каждого Элемент Из Тело Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппировкаМакетаКомпоновкиДанных") Тогда
			Если Не ПустаяСтрока(Элемент.МакетПодвала) Тогда
				Возврат МакетКомпоновки.Макеты[Элемент.МакетПодвала];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Неопределено;
	
КонецФункции

// Определяет значения по умолчанию, общие для всех отчетов.
//
// Возвращаемое значение:
//  Структура - базовые значения: НачалоПериода, КонецПериода, Организация.
//
Функция БазовыеРеквизитыЗначенияПоУмолчанию() Экспорт
	
	ЗначенияПоУмолчанию = Новый Структура;
	ЗначенияПоУмолчанию.Вставить("НачалоПериода", '0001-01-01');
	ЗначенияПоУмолчанию.Вставить("КонецПериода",  '0001-01-01');
	ЗначенияПоУмолчанию.Вставить("Организация",   Справочники.Организации.ПустаяСсылка());
	
	ЗначенияПоУмолчанию.НачалоПериода = НачалоМесяца(ОбщегоНазначения.ТекущаяДатаПользователя());
	ЗначенияПоУмолчанию.КонецПериода  = КонецМесяца(ЗначенияПоУмолчанию.НачалоПериода);
	ЗначенияПоУмолчанию.Организация   = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
	Возврат ЗначенияПоУмолчанию;
	
КонецФункции

// Возвращает вид периода. В отличии от функции ПолучитьВидПериода на вход принимает СтандартныйПериод.
//
Функция ПолучитьВидСтандартногоПериода(СтандартныйПериод, ДоступныеПериоды = Неопределено) Экспорт
	
	Если СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод Тогда
		
		Возврат ПолучитьВидПериода(СтандартныйПериод.ДатаНачала, СтандартныйПериод.ДатаОкончания, ДоступныеПериоды);
		
	ИначеЕсли СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ЭтотГод
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлыйГод
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующийГод
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СНачалаЭтогоГода
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ДоКонцаЭтогоГода
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлыйГодДоТакойЖеДаты
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующийГодДоТакойЖеДаты Тогда
		
		Возврат Перечисления.ДоступныеПериодыОтчета.Год;
		
	ИначеЕсли СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ЭтоПолугодие
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлоеПолугодие
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующееПолугодие
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СНачалаЭтогоПолугодия
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ДоКонцаЭтогоПолугодия
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлоеПолугодиеДоТакойЖеДаты
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующееПолугодиеДоТакойЖеДаты Тогда
		
		Возврат Перечисления.ДоступныеПериодыОтчета.Полугодие;
		
	ИначеЕсли СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ЭтотКвартал
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлыйКвартал
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующийКвартал
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СНачалаЭтогоКвартала
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ДоКонцаЭтогоКвартала
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлыйКварталДоТакойЖеДаты
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующийКварталДоТакойЖеДаты Тогда
		
		Возврат Перечисления.ДоступныеПериодыОтчета.Квартал;
		
	ИначеЕсли СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ЭтотМесяц
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлыйМесяц
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующийМесяц
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.Месяц
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СНачалаЭтогоМесяца
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ДоКонцаЭтогоМесяца
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлыйМесяцДоТакойЖеДаты
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующийМесяцДоТакойЖеДаты Тогда
		
		Возврат Перечисления.ДоступныеПериодыОтчета.Месяц;
		
	ИначеЕсли СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ЭтаДекада
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлаяДекада
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующаяДекада
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СНачалаЭтойДекады
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ДоКонцаЭтойДекады
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлаяДекадаДоТакогоЖеНомераДня
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующаяДекадаДоТакогоЖеНомераДня Тогда
		
		Возврат Перечисления.ДоступныеПериодыОтчета.Декада;
		
	ИначеЕсли СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ЭтаНеделя
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлаяНеделя
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующаяНеделя
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СНачалаЭтойНедели
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ДоКонцаЭтойНедели
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.Последние7Дней
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.Следующие7Дней
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПрошлаяНеделяДоТакогоЖеДняНедели
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.СледующаяНеделяДоТакогоЖеДняНедели Тогда
		
		Возврат Перечисления.ДоступныеПериодыОтчета.Неделя;
		
	ИначеЕсли СтандартныйПериод.Вариант = ВариантСтандартногоПериода.Сегодня
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.Вчера
		Или СтандартныйПериод.Вариант = ВариантСтандартногоПериода.Завтра Тогда
		
		Возврат Перечисления.ДоступныеПериодыОтчета.День;
		
	КонецЕсли;
	
КонецФункции

// Возвращает вид периода.
//
Функция ПолучитьВидПериода(НачалоПериода, КонецПериода, ДоступныеПериоды = Неопределено) Экспорт
	
	ВидПериода = Неопределено;
	Если НачалоПериода = НачалоДня(НачалоПериода)
		И КонецПериода = КонецДня(КонецПериода) Тогда
		
		РазностьДней = (КонецПериода - НачалоПериода + 1) / (60*60*24);
		Если РазностьДней = 1 Тогда
			
			ВидПериода = Перечисления.ДоступныеПериодыОтчета.День;
			
		ИначеЕсли РазностьДней = 7 Тогда
			
			Если НачалоПериода = НачалоНедели(НачалоПериода) Тогда
				ВидПериода = Перечисления.ДоступныеПериодыОтчета.Неделя;
			КонецЕсли;
			
		ИначеЕсли РазностьДней <= 11 Тогда
			
			Если (День(НачалоПериода) = 1 И День(КонецПериода) = 10)
				ИЛИ (День(НачалоПериода) = 11 И День(КонецПериода) = 20)
				ИЛИ (День(НачалоПериода) = 21 И КонецПериода = КонецМесяца(НачалоПериода)) Тогда
				ВидПериода = Перечисления.ДоступныеПериодыОтчета.Декада;
			КонецЕсли;
			
		ИначеЕсли РазностьДней <= 31 Тогда
			
			Если НачалоПериода = НачалоМесяца(НачалоПериода) И КонецПериода = КонецМесяца(НачалоПериода) Тогда
				ВидПериода = Перечисления.ДоступныеПериодыОтчета.Месяц;
			КонецЕсли;
			
		ИначеЕсли РазностьДней <= 92 Тогда
			
			Если НачалоПериода = НачалоКвартала(НачалоПериода) И КонецПериода = КонецКвартала(НачалоПериода) Тогда
				ВидПериода = Перечисления.ДоступныеПериодыОтчета.Квартал;
			КонецЕсли;
			
		ИначеЕсли РазностьДней <= 190 Тогда
			
			Если Месяц(НачалоПериода) + 5 = Месяц(КонецПериода)
				И НачалоПериода = НачалоМесяца(НачалоПериода)
				И КонецПериода = КонецМесяца(КонецПериода)
				И (НачалоПериода = НачалоГода(НачалоПериода) ИЛИ КонецПериода = КонецГода(НачалоПериода)) Тогда
				ВидПериода = Перечисления.ДоступныеПериодыОтчета.Полугодие;
			КонецЕсли;
			
		ИначеЕсли РазностьДней <= 366 Тогда
			
			Если НачалоПериода = НачалоГода(НачалоПериода) И КонецПериода = КонецГода(НачалоПериода) Тогда
				ВидПериода = Перечисления.ДоступныеПериодыОтчета.Год;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ВидПериода = Неопределено Тогда
		ВидПериода = Перечисления.ДоступныеПериодыОтчета.ПроизвольныйПериод;
	КонецЕсли;
	
	Если ДоступныеПериоды <> Неопределено И ДоступныеПериоды.НайтиПоЗначению(ВидПериода) = Неопределено Тогда
		ВидПериода = ДоступныеПериоды[0].Значение;
	КонецЕсли;
	
	Возврат ВидПериода;
	
КонецФункции

// Функция подлучает массив подразделений, относящихся к ГНС
//
// Параметры:
//  Организация	 - СправочникСсылка.Организации	 - Организация, по которой нужно получить подразделения
//  ГНС			 - СправочникСсылка.ГНС	 - ГНС, по которой нужно получить подразделения
// 
// Возвращаемое значение:
//  Массив - Массив подразделений
//
Функция ПодразделенияПоГНС(Организация, ГНС) Экспорт 

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка КАК Подразделение
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|ГДЕ
		|	ПодразделенияОрганизаций.Владелец = &Организация
		|	И ПодразделенияОрганизаций.ГНС = &ГНС";
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ГНС", ГНС);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьЗначениеМинимальнойШириныПоля(Поле)
	
	Если Поле = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Поле.Оформление.УстановитьЗначениеПараметра("МинимальнаяШирина", 8);
	
КонецПроцедуры

// Возвращает значение искомого поля из элемента расшифровки.
//
Функция ПолучитьЗначениеРасшифровки(Элемент, ИмяПоля)
	
	Если ТипЗнч(Элемент) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		// Ищем поля в текущем элементе
		Поле = Элемент.ПолучитьПоля().Найти(ИмяПоля);
		Если Поле <> Неопределено Тогда
			// Возвращаем значение найденного поля
			Возврат Поле.Значение;
		КонецЕсли;
	КонецЕсли;
	
	// Если поле не нашлось, или текущий элемент не содержит полей
	// ищем поля среди родителей элемента (вышестоящие группировки).
	Родители  = Элемент.ПолучитьРодителей();
	Если Родители.Количество() > 0 Тогда
		
		Для Каждого Родитель Из Родители Цикл
			// Вызываем рекурсивный поиск поля
			ЗначениеРасшифровки = ПолучитьЗначениеРасшифровки(Родитель, ИмяПоля);
			
			Если ЗначениеРасшифровки <> Неопределено Тогда
				Возврат ЗначениеРасшифровки;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Если ничего не нашлось
	Возврат Неопределено;
	
КонецФункции

// Формируем ключи, идентифицирующие описание сохраняемых настроек.
//
// Параметры:
//  ИмяОтчета    - Строка - имя объекта метаданных.
//  ИмяРазделителя - Строка - вариант разделения настроек.
//  Разделитель  - ПланСчетовСсылка, ПланВидовХарактеристикСсылка - значение, разделяющее сохраняемые настройки.
//
// Возвращаемое значение:
//   ОписаниеНастроек - содержит ключи-идентификаторы.
//
Функция КлючиОписанияНастройки(ИмяОтчета, ИмяРазделителя, Разделитель)
	
	ИмяПредопределенныхДанных = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Разделитель, "ИмяПредопределенныхДанных");
	
	ОписаниеНастроек = Новый ОписаниеНастроек;
	ОписаниеНастроек.КлючОбъекта = "Отчет." + ИмяОтчета + "/" + ИмяРазделителя;
	ОписаниеНастроек.КлючНастроек = ?(ПустаяСтрока(ИмяПредопределенныхДанных),
		Строка(Разделитель.УникальныйИдентификатор()),
		ИмяПредопределенныхДанных);
	ОписаниеНастроек.Представление = ИмяОтчета + " " + Разделитель;
		
	Возврат ОписаниеНастроек;
	
КонецФункции

// Формирует список настроек сортировки.
//
// Параметры:
//  КоллекцияНастроек - ПорядокКомпоновкиДанных - список полей сортировки.
//  ДанныеСчета  - Структура - если заполнено, то запоминаются виды субконто.
//
// Возвращаемое значение:
//  ТаблицаЗначение - список настроек сортировки в отчете.
//
Функция ОписаниеСортировки(КоллекцияНастроек, ДанныеСчета = Неопределено)

	КоллекцияВключенныхНастроек = Новый ТаблицаЗначений;
	КоллекцияВключенныхНастроек.Колонки.Добавить("Использование", Новый ОписаниеТипов("Булево"));
	КоллекцияВключенныхНастроек.Колонки.Добавить("Поле", Новый ОписаниеТипов("Строка"));
	КоллекцияВключенныхНастроек.Колонки.Добавить("ВидСубконто",
		Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));
	КоллекцияВключенныхНастроек.Колонки.Добавить("ТипУпорядочивания", Новый ОписаниеТипов("НаправлениеСортировкиКомпоновкиДанных"));
	
	Для каждого Показатель Из КоллекцияНастроек Цикл
		Если ТипЗнч(Показатель) <> Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		ВидСубконто = Неопределено;
		Если ДанныеСчета <> Неопределено
		   И СтрНачинаетсяС(Показатель.Поле, "Субконто") Тогда
		   
			Если СтрДлина(Показатель.Поле) = 9 Тогда
				ВидСубконто = ДанныеСчета["Вид" + Показатель.Поле];
			ИначеЕсли Сред(Показатель.Поле, 10, 1) = "." Тогда
				ВидСубконто = ДанныеСчета["Вид" + Лев(Показатель.Поле, 9)];
			КонецЕсли;
			 
		КонецЕсли;
		ЭлементПорядка = КоллекцияВключенныхНастроек.Добавить();
		ЗаполнитьЗначенияСвойств(ЭлементПорядка, Показатель);
		ЭлементПорядка.ВидСубконто = ВидСубконто;
		
	КонецЦикла;
	
	Возврат КоллекцияВключенныхНастроек;
	
КонецФункции

// Добавляет группировку в список настроек отчета.
//
// Параметры:
//  Группировки  - ТабличнаяЧасть - список группировок отчета.
//  ДоступныеГруппировки - ДоступныеПоляКомпоновкиДанных - источник информации о полях группировок.
//  ИмяПоля      - Строка - имя поля группировки.
//
// Возвращаемое значение:
//   СтрокаТабличнойЧасти - последняя добавленная строка.
//
Функция ДобавитьГруппировкуОтчета(Группировки, ДоступныеГруппировки, ИмяПоля)
	
	Поле = ДоступныеГруппировки.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоля));
	Если Поле = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НоваяСтрока = Группировки.Добавить();
	НоваяСтрока.Использование  = Ложь;
	НоваяСтрока.Поле           = Поле.Поле;
	НоваяСтрока.Представление  = Поле.Заголовок;
	НоваяСтрока.ТипГруппировки = 0;
	
	Возврат НоваяСтрока;
	
КонецФункции

// Добавляет отбор в список настроек отчета. Если ВключенныеОтборы не содержит признак использования отбора
// (или его реквизита), то создается неиспользуемый отбор по-умолчанию.
//
// Параметры:
//  Отборы       - КоллекцияЭлементовОтбораКомпоновкиДанных - список отборов отчета.
//  ДоступныеОтборы - ДоступныеПоляКомпоновкиДанных - источник информации о полях отборов.
//  ВключенныеОтборы - Соответствие - отборы, которые уже включены.
//  ИмяПоля      - Строка - имя поля отбора.
//  ИндексВставки - Число - индекс строки, на которую нужно переместить отбор.
//
Процедура ДобавитьОтборОтчета(Отборы, ДоступныеОтборы, ВключенныеОтборы, ИмяПоля, ИндексВставки)
	
	Если ВключенныеОтборы[ИмяПоля] <> Неопределено Тогда // было по крайней мере одно использование
		
		ДлинаИмениПоля = СтрДлина(ИмяПоля);
		КоличествоОтборов = Отборы.Количество() - 1;
		Для ИндексОтбора = ИндексВставки По КоличествоОтборов Цикл
			
			ИмяОтбора = Лев(Отборы[ИндексОтбора].ЛевоеЗначение, ДлинаИмениПоля);
			Если ИмяПоля <> ИмяОтбора Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИндексОтбора <> ИндексВставки Тогда
				Отборы.Сдвинуть(Отборы[ИндексОтбора], ИндексВставки - ИндексОтбора);
			КонецЕсли;
			ИндексВставки = ИндексВставки + 1;
		
		КонецЦикла; 
		
	Иначе // нужно добавить неиспользуемый отбор
		
		ПолеЦель = Новый ПолеКомпоновкиДанных(ИмяПоля);
		Поле = ДоступныеОтборы.Найти(ПолеЦель);
		НовыйЭлемент = Отборы.Вставить(ИндексВставки, Тип("ЭлементОтбораКомпоновкиДанных"));
		ИндексВставки = ИндексВставки + 1;
		НовыйЭлемент.ЛевоеЗначение  = ПолеЦель;
		НовыйЭлемент.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		НовыйЭлемент.ПравоеЗначение = Поле.Тип.ПривестиЗначение(Неопределено);
		НовыйЭлемент.Использование  = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, входит ли в коллекцию поле или один из его реквизитов.
//
// Параметры:
//  КоллекцияПолей - ТаблицаЗначений - содержит колонку "Поле", по которой выполняется проверка.
//  Поле         - Строка - имя поля, вхождение которого проверяется.
//
// Возвращаемое значение:
//   Число       - индекс строки с полем или Неопределено, если вхождения не нашли.
//
Функция ИндексПоляВКоллекции(КоллекцияПолей, Поле)
	
	ИндексПоля = 0;
	
	ДлинаИмениПоля = СтрДлина(Поле);
	Для каждого СтрокаКоллекции Из КоллекцияПолей Цикл
		
		ИмяПоля = Лев(СтрокаКоллекции.Поле, ДлинаИмениПоля + 1);
		Если ИмяПоля = Поле
		 Или Прав(ИмяПоля, 1) = "." И Лев(ИмяПоля, ДлинаИмениПоля) = Поле Тогда
			Возврат ИндексПоля;
		КонецЕсли;
		ИндексПоля = ИндексПоля + 1;
		
	КонецЦикла; 
	
	Возврат Неопределено;
	
КонецФункции

// Удаляет лишние отборы или преобразует значение одного субконто в другое.
//
// Параметры:
//  КартаПолей   - Соответствие - правила преобразования отборов.
//  Отборы       - КоллекцияЭлементовОтбораКомпоновкиДанных - набор преобразуемых отборов.
//  ИспользуемыеПоля - Соответствие - список полей отборов обработанных (и неудаленных) при проецировании.
//
Процедура ПрименитьКартуПолей(КартаПолей, Отборы, ИспользуемыеПоля)
	
	УдаляемыеОтборы = Новый Массив;
	
	Для каждого ЭлементОтбора Из Отборы Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ПрименитьКартуПолей(КартаПолей, ЭлементОтбора.Элементы, ИспользуемыеПоля);
			Если ЭлементОтбора.Элементы.Количество() = 0 Тогда
				УдаляемыеОтборы.Добавить(ЭлементОтбора);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		ИмяИсходногоПоля = Строка(ЭлементОтбора.ЛевоеЗначение);
		ИмяПоля = ИмяИсходногоПоля;
		ИмяНовогоПоля = КартаПолей[ИмяИсходногоПоля];
		Если ИмяНовогоПоля = Неопределено Тогда // возможно ИмяИсходногоПоля содержит реквизит через точку
			ПозицияТочки = СтрНайти(ИмяИсходногоПоля, ".");
			Если ПозицияТочки <> 0 Тогда
				ИмяПоля = Лев(ИмяИсходногоПоля, ПозицияТочки - 1);
				ИмяНовогоПоля = КартаПолей[ИмяПоля];
			КонецЕсли;
			Если ИмяНовогоПоля = Неопределено Тогда
				
				// Если раньше был некий отбор, а сейчас в карте преобразований этого поля нет, то может быть две ситуации:
				// * Это субконто, которое могло быть, но отсутствует на этом счете (например, Партии). Удалить отбор по нему.
				// * Это поле, отбор по которому всегда допустим (например, Организация). Оставить неизменным.
				Если СтрНачинаетсяС(ИмяПоля, "Субконто") И СтрДлина(ИмяПоля) = 9 Тогда
					ИмяНовогоПоля = ""; // субконто больше нет на счете
				Иначе // ничего делать не нужно
					ИспользуемыеПоля.Вставить(ИмяИсходногоПоля, Истина);
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(ИмяНовогоПоля) Тогда // удалить
			УдаляемыеОтборы.Добавить(ЭлементОтбора);
			Продолжить;
		КонецЕсли;
		
		// Заменяем одно субконто на другое.
		ИспользуемыеПоля.Вставить(ИмяНовогоПоля, Истина);
		Если ИмяНовогоПоля = ИмяПоля Тогда // отбор не меняется
			Продолжить;
		КонецЕсли;
		ИмяПоляЦели = ИмяНовогоПоля + ?(ИмяИсходногоПоля = ИмяПоля, "", Сред(ИмяИсходногоПоля, СтрДлина(ИмяПоля) + 1));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоляЦели);
	
	КонецЦикла;
	
	Для каждого ЭлементОтбора Из УдаляемыеОтборы Цикл
		Отборы.Удалить(ЭлементОтбора);
	КонецЦикла; 
	
КонецПроцедуры

// ДобавитьОтборПоОрганизациям
Функция ДобавитьОтборПоОрганизациям(ЭлементСтруктуры, ПараметрыОтчета, Организация, Использование = Истина, ДтКт = Ложь) Экспорт
	
	ПолеОрганизация 	= Новый ПолеКомпоновкиДанных("Организация");
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Настройки.Отбор;
	Иначе
		Отбор = ЭлементСтруктуры;
	КонецЕсли;
	
	НоваяГруппаИли = Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	НоваяГруппаИли.Использование  	= Использование;
	НоваяГруппаИли.ТипГруппы 		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	НоваяГруппаИли.Представление 	= "###ОтборПоОрганизации###";
	
	НоваяГруппаИ = НоваяГруппаИли.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	НоваяГруппаИ.Использование  = Использование;
	НоваяГруппаИ.ТипГруппы 		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	НовыйЭлемент = НоваяГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлемент.Использование  = Использование;
	НовыйЭлемент.ЛевоеЗначение 	= ПолеОрганизация;
	НовыйЭлемент.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
	НовыйЭлемент.ПравоеЗначение = Организация;	
	
	Возврат НовыйЭлемент;	
		
КонецФункции

// Вызывается из обработчика события "ПередЗагрузкойНастроекВКомпоновщик" при инициализации варианта отчета средствами БСП.
//
// Параметры:
//  ОтчетОбъект - ОтчетОбъект - Объект отчета.
//  Контекст - Структура - Контекст инициализации варианта отчета.
//  КлючСхемы - Строка - Ключ схемы компоновки данных.
//  КлючВарианта - Строка - Ключ варианта отчета.
//  НовыеНастройкиКД - НастройкиКомпоновкиДанных - Настройки, с которыми будет выполнена инициализация варианта отчета.
//  НовыеПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных - Настройки, с которыми будет выполнена
//                                                                                 инициализация варианта отчета.
//
Процедура ПередЗагрузкойНастроекВКомпоновщик(ОтчетОбъект, Контекст, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД) Экспорт
	
	// При рассылке отчетов отключаем проверку заполнения, т.к. реквизиты отчета всегда будут пустыми.
	ПараметрНастройкиОтчета = 
		БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(НовыеНастройкиКД, "НастройкиОтчета");
	
	НовыеНастройкиКД.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗаполнения", ПараметрНастройкиОтчета <> Неопределено);
	
	// Инициализируем пользовательские настройки вручную, если в них отсутствует параметр "НастройкиОтчета".
	// Такая ситуация возникает при добавлении варианта отчета в рассылку в основной форме элемента справочника "РассылкиОтчетов".
	Если ПараметрНастройкиОтчета <> Неопределено
		И БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(НовыеПользовательскиеНастройкиКД, "НастройкиОтчета") = Неопределено Тогда
		
		ИмяОтчета = ОтчетОбъект.Метаданные().ПолноеИмя();
		
		ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(НовыеНастройкиКД);
		
		// Получим пользовательские настройки из системного хранилища.
		КлючОбъекта = ИмяОтчета + "/" + КлючВарианта + "/ТекущиеПользовательскиеНастройки";
		ПользовательскиеНастройки = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить(КлючОбъекта, Неопределено, Неопределено);
		
		МенеджерОтчета  = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяОтчета);
		
		ПараметрыОтчета = МенеджерОтчета.ПустыеПараметрыКомпоновкиОтчета();
		
		НастройкиОтчета = МенеджерОтчета.НастройкиОтчетаСохраняемыеВРассылке();
		
		// Добавим временные параметры, необходимые для заполнения настроек.
		ПараметрыОтчета.Вставить("Отчет",    ОбъектОтчетаВСтруктуру(ОтчетОбъект));
		ПараметрыОтчета.Вставить("ИмяФормы", ИмяОтчета);
		ПараметрыОтчета.Вставить("Параметры", Новый Структура);
		ПараметрыОтчета.Вставить("Элементы",  Новый Массив);
		
		Если ПользовательскиеНастройки = Неопределено Тогда
			БухгалтерскиеОтчетыВызовСервера.УстановитьНастройкиПоУмолчанию(ПараметрыОтчета);
		Иначе
			БухгалтерскиеОтчетыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервере(ПараметрыОтчета, ПользовательскиеНастройки, Истина);
		КонецЕсли;
		
		// Удалим служебные свойства.
		ПараметрыОтчета.Удалить("ИмяФормы");
		ПараметрыОтчета.Удалить("Параметры");
		ПараметрыОтчета.Удалить("Элементы");
		
		// Часть настроек по умолчанию осталась незаполненной в структуре "ПараметрыОтчета", заполним их.
		ЗаполнитьЗначенияСвойств(ПараметрыОтчета, ПараметрыОтчета.Отчет);
		
		// Удалим служебные свойства.
		ПараметрыОтчета.Удалить("Отчет");
		
		// Скопируем настройки по умолчанию в структуру настроек, сохраняемых в рассылке.
		ЗаполнитьЗначенияСвойств(НастройкиОтчета, ПараметрыОтчета);
		
		// Отборы, порядок и условное оформление хранятся в настройках КД.
		НастройкиОтчета.Вставить("НастройкиКомпоновкиДанных", НовыеНастройкиКД);
		
		// Установим значение параметра схемы КД, в котором хранятся все настройки отчета.
		// Этот параметр используется в рассылке при формировании экземпляра отчета.
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
			НовыеНастройкиКД, "НастройкиОтчета", Новый ХранилищеЗначения(НастройкиОтчета, Новый СжатиеДанных(9)), Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Создает реквизиты показателей и связанные элементы формы
//
// Параметры:
//	Форма - УправляемаяФорма - Форма отчета.
//  ИмяГруппы	 - Строка	 - Имя группы элементов
//
Процедура СоздатьРеквизитыПоказателей(Форма, ИмяГруппы = "ВидыПоказателей") Экспорт 
	
	ГруппаЭлементов = Форма.Элементы[ИмяГруппы];
	
	// Реквизиты.
	МассивРеквизитов = Новый Массив;

	ЗаголовокРеквизита = НСтр("ru = 'Сумма'");
	НовыйРеквизитФормы = Новый РеквизитФормы("Сумма", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(17,2)),, ЗаголовокРеквизита);
	МассивРеквизитов.Добавить(НовыйРеквизитФормы);
	
	ЗаголовокРеквизита = НСтр("ru = 'Среднее'");
	НовыйРеквизитФормы = Новый РеквизитФормы("Среднее", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(17,4)),, ЗаголовокРеквизита);
	МассивРеквизитов.Добавить(НовыйРеквизитФормы);
	
	ЗаголовокРеквизита = НСтр("ru = 'Количество'");
	НовыйРеквизитФормы = Новый РеквизитФормы("Количество", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,2)),, ЗаголовокРеквизита);
	МассивРеквизитов.Добавить(НовыйРеквизитФормы);
	
	ЗаголовокРеквизита = НСтр("ru = 'Максимум'");
	НовыйРеквизитФормы = Новый РеквизитФормы("Максимум", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,2)),, ЗаголовокРеквизита);
	МассивРеквизитов.Добавить(НовыйРеквизитФормы);
	
	ЗаголовокРеквизита = НСтр("ru = 'Минимум'");
	НовыйРеквизитФормы = Новый РеквизитФормы("Минимум", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,2)),, ЗаголовокРеквизита);
	МассивРеквизитов.Добавить(НовыйРеквизитФормы);
	
	Форма.ИзменитьРеквизиты(МассивРеквизитов);

	// Элементы.
	НовыйЭлемент = Форма.Элементы.Добавить("Сумма", Тип("ПолеФормы"), ГруппаЭлементов);
    НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "Сумма";	
	НовыйЭлемент.ТолькоПросмотр = Истина;	
	НовыйЭлемент.Ширина = 10;
	
	НовыйЭлемент = Форма.Элементы.Добавить("Количество", Тип("ПолеФормы"), ГруппаЭлементов);
    НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "Количество";	
	НовыйЭлемент.ТолькоПросмотр = Истина;	
	НовыйЭлемент.Ширина = 10;

	НовыйЭлемент = Форма.Элементы.Добавить("Среднее", Тип("ПолеФормы"), ГруппаЭлементов);
    НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "Среднее";	
	НовыйЭлемент.ТолькоПросмотр = Истина;	
	НовыйЭлемент.Ширина = 10;

	НовыйЭлемент = Форма.Элементы.Добавить("Максимум", Тип("ПолеФормы"), ГруппаЭлементов);
    НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "Максимум";	
	НовыйЭлемент.ТолькоПросмотр = Истина;	
	НовыйЭлемент.Ширина = 10;

	НовыйЭлемент = Форма.Элементы.Добавить("Минимум", Тип("ПолеФормы"), ГруппаЭлементов);
    НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "Минимум";	
	НовыйЭлемент.ТолькоПросмотр = Истина;	
	НовыйЭлемент.Ширина = 10;
	
КонецПроцедуры

Функция ОбъектОтчетаВСтруктуру(Отчет)
	
	МетаданныеОбъекта = Отчет.Метаданные();
	
	Структура = Новый Структура;
	
	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		Структура.Вставить(Реквизит.Имя, Отчет[Реквизит.Имя]);
	КонецЦикла;
	
	Для Каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		Структура.Вставить(ТабличнаяЧасть.Имя, Отчет[ТабличнаяЧасть.Имя].Выгрузить());
	КонецЦикла;
	
	// КомпоновщикНастроек и СхемаКомпоновкиДанных всегда присутствуют в экземпляре объекта отчета
	Структура.Вставить("КомпоновщикНастроек",   Отчет.КомпоновщикНастроек);
	Структура.Вставить("СхемаКомпоновкиДанных", Отчет.СхемаКомпоновкиДанных);
	
	Возврат Структура;
	
КонецФункции

// Находит номер по порядку показателя "Контроль" среди выбранных пользователем показателей.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. модуль формы отчета, функция ПодготовитьПараметрыОтчета() .
//
// Возвращаемое значение:
//   Число       - номер по порядку; или 0, если Контроль - единственный выбранный показатель.
//   Неопределено - если показатель "Контроль" не выбран.
//
Функция ПозицияПоказателяКонтроль(ПараметрыОтчета)
	
	Если Не ПараметрыОтчета.ПоказательКонтроль Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НомерПоказателяКонтроль = 0;
	КоличествоПоказателей = 0;
	Для Каждого ИмяПоказателя Из ПараметрыОтчета.НаборПоказателей Цикл
		
		Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда
			КоличествоПоказателей = КоличествоПоказателей + 1;
		КонецЕсли;
		Если НомерПоказателяКонтроль = 0 И ИмяПоказателя = "Контроль" Тогда
			НомерПоказателяКонтроль = КоличествоПоказателей;
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоПоказателей = 1 Тогда
		Возврат 0;
	Иначе
		Возврат НомерПоказателяКонтроль;
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область НастройкиОтчета

// Возвращает таблицу значений с группировками отчета, в которых каждый счет встречается только один раз.
// Возвращаются только те строки, у которых в исходной таблице заполнен Счет и установлен признак Использование.
//
// Параметры:
//	ГруппировкиОтчета - ТаблицаЗначений - Исходные группировки отчета по счетам. Обязательные колонки:
//		* Счет - ПланСчетовСсылка.Хозрасчетный - Счет учета, для которого заданы настройки.
//		* Использование - Булево - Признак "включения" строки настройки для отчета.
//
// Возвращаемое значение:
//	ТаблицаЗначений - Совпадает по структуре с исходной таблицей ГруппировкиОтчета,
//  но не содержит повторяющихся строк для одного и того же счета. Дополнительно включает колонки:
//		* СчетаВИерархии - Массив - Массив субсчетов, которые необходимо учитывать по строке группировки.
//
Функция УникальныеНастройкиОтчетаПоСчетам(ГруппировкиОтчета) Экспорт
	
	// Создаем таблицу, из которой дальше будем считывать настройки группировки.
	ГруппировкиПоСубсчетам = ГруппировкиОтчета.СкопироватьКолонки();
	
	// Для счетов-групп развернем каждую строку таблицы по субсчетам.
	ГруппировкиПоСубсчетам.Колонки.Добавить("Субсчет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ГруппировкиПоСубсчетам.Колонки.Добавить("НомерИсходнойГруппировки",        ОбщегоНазначения.ОписаниеТипаЧисло(5));
	ГруппировкиПоСубсчетам.Колонки.Добавить("ЭтоСобственнаяНастройкаСубсчета", Новый ОписаниеТипов("Булево"));
	
	НомерИсходнойГруппировки = 0;
	Для каждого СтрокаГруппировки Из ГруппировкиОтчета Цикл

		НомерИсходнойГруппировки = НомерИсходнойГруппировки + 1;
		Если НЕ СтрокаГруппировки.Использование ИЛИ НЕ ЗначениеЗаполнено(СтрокаГруппировки.Счет) Тогда
			Продолжить;
		КонецЕсли;
	
		Субсчета = БухгалтерскийУчетПовтИсп.СчетаВИерархии(СтрокаГруппировки.Счет);
		Для каждого Субсчет Из Субсчета Цикл
			НоваяСтрока = ГруппировкиПоСубсчетам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаГруппировки);
			НоваяСтрока.Субсчет                         = Субсчет;
			НоваяСтрока.НомерИсходнойГруппировки        = НомерИсходнойГруппировки;
			// Признак того, что настройка задана для самого субсчета, а не вычислена через счет верхнего уровня.
			НоваяСтрока.ЭтоСобственнаяНастройкаСубсчета = (СтрокаГруппировки.Счет = Субсчет);
		КонецЦикла;
		
	КонецЦикла;

	// Оставим по одной строке по каждому субсчету.
	ГруппировкиПоСубсчетам.Сортировать("Субсчет, ЭтоСобственнаяНастройкаСубсчета УБЫВ", Новый СравнениеЗначений);
	
	СтрокиКУдалению = Новый Массив;
	ТекущийСубсчет  = Неопределено;
	
	Для каждого СтрокаГруппировки Из ГруппировкиПоСубсчетам Цикл
		
		Если СтрокаГруппировки.Субсчет <> ТекущийСубсчет Тогда
			// Новый субсчет, первую строку по нему оставляем, остальные удалим.
			ТекущийСубсчет = СтрокаГруппировки.Субсчет;
		Иначе
			СтрокиКУдалению.Добавить(СтрокаГруппировки);
		КонецЕсли;
	
	КонецЦикла;
	
	// Удаляем дублирующиеся строки.
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ГруппировкиПоСубсчетам.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	// Оставляем исходные колонки и формируем список субсчетов, которые относятся к конкретной строке.
	Результат = ГруппировкиПоСубсчетам.СкопироватьКолонки();
	Результат.Колонки.Добавить("СчетаВИерархии", Новый ОписаниеТипов("Массив"));
	
	ГруппировкиПоСубсчетам.Сортировать("НомерИсходнойГруппировки", Новый СравнениеЗначений);
	ТекущаяСтрока = Неопределено;
	
	Для каждого СтрокаГруппировки Из ГруппировкиПоСубсчетам Цикл
	
		Если ТекущаяСтрока = Неопределено 
			ИЛИ ТекущаяСтрока.НомерИсходнойГруппировки <> СтрокаГруппировки.НомерИсходнойГруппировки Тогда
			// Добавляем новую строку в результирующую таблицу группировок.
			ТекущаяСтрока = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаГруппировки);
		КонецЕсли;
		
		// Заполняем массив субсчетов, входящих в строку группировки.
		ТекущаяСтрока.СчетаВИерархии.Добавить(СтрокаГруппировки.Субсчет);
	
	КонецЦикла;

	// Удалим вспомогательные колонки.
	Результат.Колонки.Удалить("Субсчет");
	Результат.Колонки.Удалить("НомерИсходнойГруппировки");
	Результат.Колонки.Удалить("ЭтоСобственнаяНастройкаСубсчета");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область УправленческиеОтчеты

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - Структура - см. возвращаемое значение ФункцииОтчетовКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	РазмерОтступаВОтчетах = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьЗначениеКонстанты("РазмерОтступаВОтчетах");
	
	Если Настройки.Печать.ОриентацияСтраницы = ОриентацияСтраницы.Портрет Тогда 
		Настройки.Печать.Вставить("ПолеСлева", РазмерОтступаВОтчетах);
	Иначе 
		Настройки.Печать.Вставить("ПолеСверху", РазмерОтступаВОтчетах);
	КонецЕсли;	
КонецПроцедуры

// Выполняет установку макета оформления для отчета.
//
// Параметры:
//	НастройкаКомпоновкиДанных - НастройкиКомпоновкиДанных - Настройки, которые будут использоваться для отчета. 
//
Процедура УстановитьМакетОформленияОтчета(НастройкаКомпоновкиДанных) Экспорт
	
	ПараметрМакетОформления = ПолучитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления");
	Если ПараметрМакетОформления <> Неопределено
		И ПараметрМакетОформления.Использование
		И ЗначениеЗаполнено(ПараметрМакетОформления.Значение) Тогда
		// В отчете выбран конкретный макет оформления, его не меняем.
		Возврат;
	КонецЕсли;
	
	МакетОформления = БухгалтерскиеОтчетыПовтИсп.ПолучитьИмяМакетаОформления();
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", МакетОформления);	
	
КонецПроцедуры

Процедура ВывестиЗаголовокОтчета(ПараметрыОтчета, Результат) Экспорт
	
	ПараметрыВывода = ПараметрыОтчета.НастройкиОтчета.ПараметрыВывода;
	
	ВыводитьЗаголовок = Истина;
	ПараметрВывода = ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВыводитьЗаголовок"));
	Если ПараметрВывода <> Неопределено Тогда 
		Если ПараметрВывода.Использование 
			И ПараметрВывода.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить Тогда
			ВыводитьЗаголовок = Ложь;
		Иначе 
			ПараметрВывода.Использование = Истина;
			ПараметрВывода.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить; // отключаем стандартный вывод заголовка
		КонецЕсли;		
	КонецЕсли;
	
	ПараметрВывода = ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВыводитьПараметрыДанных"));
	Если ПараметрВывода <> Неопределено
		И (Не ПараметрВывода.Использование ИЛИ ПараметрВывода.Значение <> ТипВыводаТекстаКомпоновкиДанных.НеВыводить) Тогда
		ПараметрВывода.Использование = Истина;
		ПараметрВывода.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить; // отключаем стандартный вывод параметров
	КонецЕсли;
	
	ПараметрВывода = ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВыводитьОтбор"));
	Если ПараметрВывода <> Неопределено
		И (Не ПараметрВывода.Использование ИЛИ ПараметрВывода.Значение <> ТипВыводаТекстаКомпоновкиДанных.НеВыводить) Тогда
		ПараметрВывода.Использование = Истина;
		ПараметрВывода.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить; // отключаем стандартный вывод отбора
	КонецЕсли;
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
	ОбластьОрганизация      = Макет.ПолучитьОбласть("Организация");
	ОбластьЗаголовок        = Макет.ПолучитьОбласть("ОбластьЗаголовок");
	ОбластьОписаниеНастроек = Макет.ПолучитьОбласть("ОписаниеНастроек");
	
	// Заголовок
	Если ВыводитьЗаголовок 
		И ЗначениеЗаполнено(ПараметрыОтчета.Заголовок) Тогда
		
		// Организация
		Если ПараметрыОтчета.Свойство("НастройкиОтчета") Тогда 
			Организация = БухгалтерскиеОтчетыКлиентСервер.НайтиЭлементОтбора(ПараметрыОтчета.НастройкиОтчета, "Организация", Истина);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Организация) Тогда   
			Организация = ?(ПараметрыОтчета.Свойство("Организация"), ПараметрыОтчета.Организация, Неопределено);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Организация) Тогда 
			ОбластьОрганизация.Параметры.НазваниеОрганизации = Организация.НаименованиеПолное;
		Иначе 
			ОбластьОрганизация.Параметры.НазваниеОрганизации = НСтр("ru = 'По всем организациям'");
		КонецЕсли;

		Результат.Вывести(ОбластьОрганизация);

		ОбластьЗаголовок.Параметры.ЗаголовокОтчета = ПолучитьТекстЗаголовкаОтчета(ПараметрыОтчета);
		Результат.Вывести(ОбластьЗаголовок);
		
		ПараметрВыводаОтбора = ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВыводитьОтбор"));
		Если ПараметрВывода <> Неопределено И (ПараметрВыводаОтбора.Использование И ПараметрВывода.Значение <> ТипВыводаТекстаКомпоновкиДанных.НеВыводить) Тогда 
			// Отбор
			ТекстОтбор = "";
			
			Если ПараметрыОтчета.Свойство("ПараметрыВключаемыеВТекстОтбора")
				И ТипЗнч(ПараметрыОтчета.ПараметрыВключаемыеВТекстОтбора) = Тип("Массив") Тогда
				
				Для Каждого Параметр Из ПараметрыОтчета.ПараметрыВключаемыеВТекстОтбора Цикл
					Если ТипЗнч(Параметр) <> Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
						ИЛИ Не Параметр.Использование Тогда
						Продолжить;
					КонецЕсли;
					ТекстОтбор = ТекстОтбор + ?(ПустаяСтрока(ТекстОтбор), "", НСтр("ru = ' И '")) 
					+ СокрЛП(Параметр.ПредставлениеПользовательскойНастройки) + " Равно """ + СокрЛП(Параметр.Значение) + """";
					
				КонецЦикла;
			КонецЕсли;
			
			Для Каждого ЭлементОтбора Из ПараметрыОтчета.НастройкиОтчета.Отбор.Элементы Цикл
				Если ТипЗнч(ЭлементОтбора) <> Тип("ЭлементОтбораКомпоновкиДанных")
					ИЛИ Не ЭлементОтбора.Использование
					ИЛИ Не ЗначениеЗаполнено(ЭлементОтбора.ИдентификаторПользовательскойНастройки)
					ИЛИ ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
					Продолжить;
				КонецЕсли;
				ТекстОтбор = ТекстОтбор + ?(ПустаяСтрока(ТекстОтбор), "", НСтр("ru = ' И '")) 
				+ СокрЛП(ЭлементОтбора.ЛевоеЗначение) + " " + СокрЛП(ЭлементОтбора.ВидСравнения) + " """ + СокрЛП(ЭлементОтбора.ПравоеЗначение) + """";
			КонецЦикла;
			
			Если Не ПустаяСтрока(ТекстОтбор) Тогда
				ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = НСтр("ru = 'Отбор:'");
				ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстОтбор;
				Результат.Вывести(ОбластьОписаниеНастроек);
			КонецЕсли;
		КонецЕсли;
		
		Результат.Область("R1:R" + Результат.ВысотаТаблицы).Имя = "Заголовок";
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыводПодписейОтчета(ПараметрыОтчета, Результат) Экспорт 
	
	ВыводитьПодписи = ?(ПараметрыОтчета.Свойство("ВыводитьПодписи"), ПараметрыОтчета.ВыводитьПодписи, Истина);
	
	Если НЕ ВыводитьПодписи Тогда 
		Возврат;
	КонецЕсли;	
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
	
	Период = ?(ПараметрыОтчета.Свойство("КонецПериода"), ПараметрыОтчета.КонецПериода, ТекущаяДатаСеанса());
	Организация = ?(ПараметрыОтчета.Свойство("Организация"), ПараметрыОтчета.Организация, БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация"));
	
	// Ответственные лица
	ОтветственныеЛица = БухгалтерскийУчетСервер.ОтветственныеЛицаОрганизаций(Организация, Период);
    РодительОтчеты = Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоРеквизиту("Имя","Отчеты");
	ОбъектОтчет = Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоРеквизиту("Имя", ПараметрыОтчета.ИдентификаторОтчета,РодительОтчеты);
	
	// Настройки печати
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтветственныеЛицаОрганизацийДляПечатиСрезПоследних.ОбъектОтчет КАК ОбъектОтчет,
		|	ОтветственныеЛицаОрганизацийДляПечатиСрезПоследних.ОтветственноеЛицо КАК ОтветственноеЛицо
		|ИЗ
		|	РегистрСведений.ОтветственныеЛицаОрганизацийДляПечати.СрезПоследних(&Период, ОбъектОтчет = &ОбъектОтчет) КАК ОтветственныеЛицаОрганизацийДляПечатиСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОтветственныеЛицаОрганизацийДляПечатиСрезПоследних.Порядок";
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("ОбъектОтчет", ОбъектОтчет);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда 
		ОбластьМакета = Макет.ПолучитьОбласть("ПодписиОтветственныеЛица");

		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			//ОбластьМакета.Параметры.ОтветственноеЛицо = "";	
			ОбластьМакета.Параметры.РасшифровкаПодписи = "";	
			ОбластьМакета.Параметры.ДолжностьОтветственногоЛица = "";
			
			ОтветственноеЛицо = ОтветственныеЛица[ВыборкаДетальныеЗаписи.ОтветственноеЛицо];
			Если НЕ ОтветственноеЛицо = Неопределено Тогда
				// Вывод непосредственно ОтветственноеЛицо
				//ОбластьМакета.Параметры.ОтветственноеЛицо 			= ВыборкаДетальныеЗаписи.ОтветственноеЛицо;	
				ОбластьМакета.Параметры.РасшифровкаПодписи 			= ОтветственноеЛицо.ФизЛицо;	
				ОбластьМакета.Параметры.ДолжностьОтветственногоЛица = ОтветственноеЛицо.Должность;
			КонецЕсли;	
			
			Результат.Вывести(ОбластьМакета);
		КонецЦикла;
	КонецЕсли;	
	
	// Выводить место для штампа
	НастройкиОтчета = БухгалтерскиеОтчетыПовтИсп.ПолучитьНастройкиОтчета(ОбъектОтчет);
	
	Если НастройкиОтчета.ВыводитьМестоДляШтампа Тогда 
		ОбластьМакета = Макет.ПолучитьОбласть("МестоДляШтампа");
		Результат.Вывести(ОбластьМакета);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ВыводПодписиРуководителей(ТабличныйДокумент, ДанныеПечати) Экспорт
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
	ОбластьМакета = Макет.ПолучитьОбласть("ПодписиРуководителей");
	
	РасшифровкаПодписиРуководителя = "";
	РасшифровкаПодписиГлавногоБухгалтера = "";
	ОтветственныеЛица = БухгалтерскийУчетСервер.ОтветственныеЛицаОрганизацийРуководители(ДанныеПечати.Организация, ДанныеПечати.Дата);
	БухгалтерскийУчетСервер.ФамилияИнициалыПоНаименованию(РасшифровкаПодписиРуководителя, ОтветственныеЛица.Руководитель);
	БухгалтерскийУчетСервер.ФамилияИнициалыПоНаименованию(РасшифровкаПодписиГлавногоБухгалтера, ОтветственныеЛица.ГлавныйБухгалтер);
	
	СтруктураЗаполнения = Новый Структура;
	СтруктураЗаполнения.Вставить("РукДолжность", 				ОтветственныеЛица.РуководительДолжность);
	СтруктураЗаполнения.Вставить("ГлавБухДолжность", 			ОтветственныеЛица.ГлавныйБухгалтерДолжность);
	СтруктураЗаполнения.Вставить("РукРасшифровкаПодписи", 		РасшифровкаПодписиРуководителя);
	СтруктураЗаполнения.Вставить("ГлавБухРасшифровкаПодписи", 	РасшифровкаПодписиГлавногоБухгалтера);
	
	ОбластьМакета.Параметры.Заполнить(СтруктураЗаполнения);
		
	ТабличныйДокумент.Вывести(ОбластьМакета);

КонецПроцедуры

// Получает параметр вывода компоновщика настроек или настройки СКД
//
// Параметры:
//		КомпоновщикНастроекГруппировка - компоновщик настроек или настройка/группировка СКД
//		ИмяПараметра - имя параметра СКД
//
Функция ПолучитьПараметрВывода(Настройка, ИмяПараметра) Экспорт
	
	МассивПараметров   = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяПараметра, ".");
	УровеньВложенности = МассивПараметров.Количество();
	
	Если УровеньВложенности > 1 Тогда
		ИмяПараметра = МассивПараметров[0];		
	КонецЕсли;
	
	Если ТипЗнч(Настройка) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройка.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	Иначе
		ЗначениеПараметра = Настройка.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	КонецЕсли;
	
	Если УровеньВложенности > 1 Тогда
		Для Индекс = 1 По УровеньВложенности - 1 Цикл
			ИмяПараметра = ИмяПараметра + "." + МассивПараметров[Индекс];
			ЗначениеПараметра = ЗначениеПараметра.ЗначенияВложенныхПараметров.Найти(ИмяПараметра); 
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЗначениеПараметра;  
	
КонецФункции

Функция ПолучитьТекстЗаголовкаОтчета(ПараметрыОтчета)
	
	ТекстЗаголовка = ПараметрыОтчета.Заголовок + ПолучитьПредставлениеПериода(ПараметрыОтчета);
	Возврат ТекстЗаголовка;
	
КонецФункции

Функция ПолучитьПредставлениеПериода(ПараметрыОтчета, ТолькоДаты  = Ложь)
	
	ТекстПериод = "";
	
	Если ПараметрыОтчета.Свойство("НеДобавлятьПериод") И ПараметрыОтчета.НеДобавлятьПериод Тогда
		Возврат ТекстПериод;
	КонецЕсли; 
	
	Если ПараметрыОтчета.Свойство("Период") Тогда
		
		Если ЗначениеЗаполнено(ПараметрыОтчета.Период) Тогда
			ТекстПериод = ?(ТолькоДаты, "", " на ") + Формат(ПараметрыОтчета.Период, "ДЛФ=D");
		КонецЕсли;
		
	ИначеЕсли ПараметрыОтчета.Свойство("НачалоПериода")
		И ПараметрыОтчета.Свойство("КонецПериода") Тогда
		
		НачалоПериода = ПараметрыОтчета.НачалоПериода;
		КонецПериода  = ПараметрыОтчета.КонецПериода;
		
		Если ЗначениеЗаполнено(КонецПериода) Тогда 
			Если КонецПериода >= НачалоПериода Тогда
				ТекстПериод = ?(ТолькоДаты, "", " за ") + ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(КонецПериода), "ФП = Истина");
			Иначе
				ТекстПериод = "";
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(НачалоПериода) И Не ЗначениеЗаполнено(КонецПериода) Тогда
			ТекстПериод = ?(ТолькоДаты, "", " за ") + ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(Дата(3999, 11, 11)), "ФП = Истина");
			ТекстПериод = СтрЗаменить(ТекстПериод, Сред(ТекстПериод, СтрНайти(ТекстПериод, " - ")), " - ...");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстПериод;
	
КонецФункции

#КонецОбласти
