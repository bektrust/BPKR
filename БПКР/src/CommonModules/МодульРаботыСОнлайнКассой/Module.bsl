
#Область Операции

Функция ОперацияТест(Параметры) Экспорт
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Тест устройства.'"),
		Ложь);
		
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("Результат", Ложь);
	РезультатОперации.Вставить("КодОшибки", "");
	РезультатОперации.Вставить("СообщениеОбОшибке",  "");
	РезультатОперации.Вставить("ИнформацияОбОшибке", "");
	РезультатОперации.Вставить("ДанныеОтвета", Неопределено);
	
	URLОперации = Параметры.P_URLService + "/a/webkassa/hs/ext_api/ping";
	
	ЗаголовкиЗапроса = Новый Соответствие;
	ЗаголовкиЗапроса.Вставить("Content-Type", "application/json");
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод", "GET");
	ПараметрыОтправки.Вставить("ФорматОтвета", 1);
	ПараметрыОтправки.Вставить("Заголовки", ЗаголовкиЗапроса);
	ПараметрыОтправки.Вставить("Таймаут", 15);
	
	// Вызов операции сервиса.
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
	Иначе
		ВызватьИсключение НСтр("ru = 'Ошибка интеграции. Нет подсистемы ИнтернетПоддержкаПользователей.'");
	КонецЕсли;		
	
	РезультатОтправки = МодульИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		Параметры.P_rnmNumber,
		Параметры.P_Password,
		ПараметрыОтправки);
		
	ЗаполнитьЗначенияСвойств(РезультатОперации, РезультатОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось авторизироваться.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|Сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|Подробная информация:
				|%4'"),
			РезультатОтправки.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке);
		
		ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
			
		Возврат РезультатОперации;
	КонецЕсли;
	
	РезультатОперации.Результат = Истина;
	РезультатОперации.ДанныеОтвета = РезультатОтправки.Содержимое;
    РезультатОперации.Вставить("АктивированДемоРежим", "");
	РезультатОперации.Вставить("РезультатВыполнения", РезультатОперации.ДанныеОтвета);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Завершение тест устройства.'"),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

Функция ОперацияВерсия(Параметры) Экспорт
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Получить версию.'"),
		Ложь);
		
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("Результат", Ложь);
	РезультатОперации.Вставить("КодОшибки", "");
	РезультатОперации.Вставить("ОписаниеОшибки",  "");
	РезультатОперации.Вставить("ДанныеОтвета", Неопределено);
	РезультатОперации.Вставить("РезультатВыполнения", "");
	
	URLОперации = Параметры.P_URLService + "/a/webkassa/hs/ext_api/version";
	
	ЗаголовкиЗапроса = Новый Соответствие;
	ЗаголовкиЗапроса.Вставить("Content-Type", "application/json");
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод", "GET");
	ПараметрыОтправки.Вставить("ФорматОтвета", 1);
	ПараметрыОтправки.Вставить("Заголовки", ЗаголовкиЗапроса);
	ПараметрыОтправки.Вставить("Таймаут", 15);
	
	// Вызов операции сервиса.
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
	Иначе
		ВызватьИсключение НСтр("ru = 'Ошибка интеграции. Нет подсистемы ИнтернетПоддержкаПользователей.'");
	КонецЕсли;		
	
	РезультатОтправки = МодульИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		Параметры.P_rnmNumber,
		Параметры.P_Password,
		ПараметрыОтправки);
		
	ЗаполнитьЗначенияСвойств(РезультатОперации, РезультатОтправки);	
		
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить версию.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|Сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|Подробная информация:
				|%4'"),
			РезультатОтправки.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке);
		
		ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ОписаниеОшибки),
			Истина);
			
		Возврат РезультатОперации;
	КонецЕсли;
	
	РезультатОперации.Результат = Истина;
	РезультатОперации.ДанныеОтвета = ПрочитатьДанные(РезультатОтправки.Содержимое);
	
	// Результат выполнения будет выведен пользователю в сообщение.
	Для Каждого ПолеДанныхОтвета Из РезультатОперации.ДанныеОтвета Цикл 
		РезультатОперации.РезультатВыполнения = РезультатОперации.РезультатВыполнения + ПолеДанныхОтвета.Значение + Символы.ПС;	
	КонецЦикла;	
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Завершение Получить версию.'"),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

Функция ОперацияАвторизация(Параметры, ДанныеОперации) Экспорт
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Синхронизация.'"),
		Ложь);
		
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("Результат", Ложь);
	РезультатОперации.Вставить("КодОшибки", "");
	РезультатОперации.Вставить("СообщениеОбОшибке",  "");
	РезультатОперации.Вставить("ОписаниеОшибки", "");
	РезультатОперации.Вставить("ДанныеОтвета", Неопределено);
	РезультатОперации.Вставить("РезультатВыполнения", "");
	
	URLОперации = URLОперации(Параметры.P_URLService);
	
	ПараметрыЗапросаJSON = АвторизацияJSON(Параметры, ДанныеОперации);   

	ЗаголовкиЗапроса = Новый Соответствие;
	ЗаголовкиЗапроса.Вставить("Content-Type", "application/json");
	ЗаголовкиЗапроса.Вставить("workplaceID", Строка(ДанныеОперации.ИдентификаторУстройства.УникальныйИдентификатор()));
	ЗаголовкиЗапроса.Вставить("configVersion", Метаданные.Версия);
	ЗаголовкиЗапроса.Вставить("configName", Метаданные.Имя);
		
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , ЗаголовкиЗапроса);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
		
	// Вызов операции сервиса.
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
	Иначе
		ВызватьИсключение НСтр("ru = 'Ошибка интеграции. Нет подсистемы ИнтернетПоддержкаПользователей.'");
	КонецЕсли;		

	РезультатОтправки = МодульИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		Параметры.P_rnmNumber,
		Параметры.P_Password,
		ПараметрыОтправки);
		
	ЗаполнитьЗначенияСвойств(РезультатОперации, РезультатОтправки);	
		
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось авторизироваться.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|Сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|Подробная информация:
				|%4'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке);
		
		ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ОписаниеОшибки),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	РезультатОперации.ДанныеОтвета = ПрочитатьДанные(РезультатОтправки.Содержимое);
	
	Если РезультатОперации.ДанныеОтвета.general.error = Истина Тогда
		РезультатОперации.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось синхронизировать.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|Сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|Подробная информация:
				|%4'"),
			РезультатОперации.ДанныеОтвета.general.message,
			URLОперации,
			400,
			РезультатОперации.ДанныеОтвета.general.message);
		
		ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ОписаниеОшибки),
			Истина);
		
		Возврат РезультатОперации;
	КонецЕсли;
	
	РезультатОперации.Результат = Истина;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Завершение синхронизации.'"),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции 

Функция ОперацияОткрытиеСмены(Параметры, ДанныеОперации) Экспорт
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Открытие смены.'"),
		Ложь);
		
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("КодОшибки", "");
	РезультатОперации.Вставить("СообщениеОбОшибке",  "");
	РезультатОперации.Вставить("ИнформацияОбОшибке", "");
	РезультатОперации.Вставить("ДанныеОтвета", Неопределено);
	
	URLОперации = URLОперации(Параметры.P_URLService);
	
	ЗаголовкиЗапроса = Новый Соответствие;
	ЗаголовкиЗапроса.Вставить("Content-Type", "application/json");
	ЗаголовкиЗапроса.Вставить("workplaceID", Строка(ДанныеОперации.ИдентификаторУстройства.УникальныйИдентификатор()));
	ЗаголовкиЗапроса.Вставить("configVersion", Метаданные.Версия);
	ЗаголовкиЗапроса.Вставить("configName", Метаданные.Имя);
	
	ПараметрыЗапросаJSON = ОткрытиеСменыJSON(Параметры, ДанныеОперации);   
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , ЗаголовкиЗапроса);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);

	// Вызов операции сервиса.
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
	Иначе
		ВызватьИсключение НСтр("ru = 'Ошибка интеграции. Нет подсистемы ИнтернетПоддержкаПользователей.'");
	КонецЕсли;		
	
	РезультатОтправки = МодульИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		Параметры.P_rnmNumber,
		Параметры.P_Password,
		ПараметрыОтправки);
		
	ЗаполнитьЗначенияСвойств(РезультатОперации, РезультатОтправки);	
		
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось открыть смену.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|Сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|Подробная информация:
				|%4'"),
			РезультатОтправки.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке);
		
		ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ОбработкаСодержимогоОтвета(РезультатОтправки.Содержимое);
	РезультатОперации.ДанныеОтвета = ПрочитатьДанные(РезультатОтправки.Содержимое);
	
	Если (РезультатОперации.ДанныеОтвета.Свойство("result") И РезультатОперации.ДанныеОтвета.result = "")
	  ИЛИ РезультатОперации.ДанныеОтвета.general.error = Истина Тогда
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось открыть смену.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|Сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|Подробная информация:
				|%4'"),
			РезультатОперации.ДанныеОтвета.general.message,
			URLОперации,
			400,
			РезультатОперации.ДанныеОтвета.general.message);
		
		ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
			
		РезультатОперации.КодОшибки = "Ошибка";
		РезультатОперации.СообщениеОбОшибке = РезультатОперации.ДанныеОтвета.general.message;
		
		Возврат РезультатОперации;
	КонецЕсли;
	
	ДанныеОперации.Вставить("РезультатОперации", РезультатОперации);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Завершение открытие смены.'"),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

Функция ОперацияПробитьЧек(Параметры, ДанныеОперации) Экспорт
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Пробитие чека.'"),
		Ложь);
		
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("КодОшибки", "");
	РезультатОперации.Вставить("СообщениеОбОшибке",  "");
	РезультатОперации.Вставить("ИнформацияОбОшибке", "");
	РезультатОперации.Вставить("ДанныеОтвета", Неопределено);
	
	URLОперации = URLОперации(Параметры.P_URLService);
	
	ЗаголовкиЗапроса = Новый Соответствие;
	ЗаголовкиЗапроса.Вставить("Content-Type", "application/json");
	ЗаголовкиЗапроса.Вставить("workplaceID", Строка(ДанныеОперации.ИдентификаторУстройства.УникальныйИдентификатор()));
	ЗаголовкиЗапроса.Вставить("configVersion", Метаданные.Версия);
	ЗаголовкиЗапроса.Вставить("configName", Метаданные.Имя);

	ПараметрыЗапросаJSON = ПробитьЧекJSON(Параметры, ДанныеОперации);   
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , ЗаголовкиЗапроса);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);

	// Вызов операции сервиса.
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
	Иначе
		ВызватьИсключение НСтр("ru = 'Ошибка интеграции. Нет подсистемы ИнтернетПоддержкаПользователей.'");
	КонецЕсли;		

	РезультатОтправки = МодульИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		Параметры.P_rnmNumber,
		Параметры.P_Password,
		ПараметрыОтправки);
		
	ЗаполнитьЗначенияСвойств(РезультатОперации, РезультатОтправки);	
		
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось пробить чек.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|Сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|Подробная информация:
				|%4'"),
			РезультатОтправки.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке);
		
		ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ОбработкаСодержимогоОтвета(РезультатОтправки.Содержимое);
	РезультатОперации.ДанныеОтвета = ПрочитатьДанные(РезультатОтправки.Содержимое);
	
	Если (РезультатОперации.ДанныеОтвета.Свойство("result") И РезультатОперации.ДанныеОтвета.result = "")
	  ИЛИ РезультатОперации.ДанныеОтвета.general.error = Истина Тогда
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось пробить чек.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|Сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|Подробная информация:
				|%4'"),
			РезультатОперации.ДанныеОтвета.general.message,
			URLОперации,
			400,
			РезультатОперации.ДанныеОтвета.general.message);
		
		ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
			
		РезультатОперации.КодОшибки = "Ошибка";
		РезультатОперации.СообщениеОбОшибке = РезультатОперации.ДанныеОтвета.general.message;
			
		Возврат РезультатОперации;
	КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Завершение пробития чека.'"),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

//Функция ОперацияЗакрытиеСменыБезГашения(Параметры, ДанныеОперации) Экспорт
//	
//	ЗаписатьИнформациюВЖурналРегистрации(
//		НСтр("ru = 'Х отчет'"),
//		Ложь);
//		
//	РезультатОперации = Новый Структура;
//	РезультатОперации.Вставить("КодОшибки", "");
//	РезультатОперации.Вставить("СообщениеОбОшибке",  "");
//	РезультатОперации.Вставить("ИнформацияОбОшибке", "");
//	РезультатОперации.Вставить("ДанныеОтвета", Неопределено);
//	
//	URLОперации = "https://lk.ekassa.kg/api/kassa/get_shift_report/";
//	
//	ЗаголовкиЗапроса = Новый Соответствие;
//	ЗаголовкиЗапроса.Вставить("Content-Type", "application/json");
//	ЗаголовкиЗапроса.Вставить("Authorization", "Token " + Параметры.auth_token);
//	
//	ПараметрыЗапросаJSON = ЗакрытиеСменыJSON(Параметры, ДанныеОперации);   
//	
//	ПараметрыОтправки = Новый Структура;
//	ПараметрыОтправки.Вставить("Метод"                   , "POST");
//	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
//	ПараметрыОтправки.Вставить("Заголовки"               , ЗаголовкиЗапроса);
//	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
//	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
//	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
//	
//	// Вызов операции сервиса.
//	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
//		МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
//	Иначе
//		ВызватьИсключение НСтр("ru = 'Ошибка интеграции. Нет подсистемы ИнтернетПоддержкаПользователей.'");
//	КонецЕсли;		
//	
//	РезультатОтправки = МодульИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
//		URLОперации,
//		,
//		,
//		ПараметрыОтправки);
//		
//	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
//		
//		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//			НСтр("ru = 'Не удалось получить Х отчет.
//				|
//				|%1
//				|
//				|Техническая информация об ошибке:
//				|Сервис вернул ошибку.
//				|URL: %2
//				|Код ошибки: %3
//				|Подробная информация:
//				|%4'"),
//			РезультатОтправки.СообщениеОбОшибке,
//			URLОперации,
//			РезультатОтправки.КодОшибки,
//			РезультатОтправки.ИнформацияОбОшибке);
//		
//		ЗаписатьИнформациюВЖурналРегистрации(
//			Строка(РезультатОперации.ИнформацияОбОшибке),
//			Истина);
//		
//		Возврат РезультатОперации;
//		
//	КонецЕсли;
//	
//	РезультатОперации.ДанныеОтвета = ПрочитатьДанные(РезультатОтправки.Содержимое);

//	ЗаписатьИнформациюВЖурналРегистрации(
//		НСтр("ru = 'Завершение Х отчет.'"),
//		Ложь);
//	
//	Возврат РезультатОперации;
//	
//КонецФункции

Функция ОперацияЗакрытиеСмены(Параметры, ДанныеОперации) Экспорт
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Закрытие смены.'"),
		Ложь);
		
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("КодОшибки", "");
	РезультатОперации.Вставить("СообщениеОбОшибке",  "");
	РезультатОперации.Вставить("ИнформацияОбОшибке", "");
	РезультатОперации.Вставить("ДанныеОтвета", Неопределено);
	
	URLОперации = URLОперации(Параметры.P_URLService);
	
	ЗаголовкиЗапроса = Новый Соответствие;
	ЗаголовкиЗапроса.Вставить("Content-Type", "application/json");
	ЗаголовкиЗапроса.Вставить("workplaceID", Строка(ДанныеОперации.ИдентификаторУстройства.УникальныйИдентификатор()));
	ЗаголовкиЗапроса.Вставить("configVersion", Метаданные.Версия);
	ЗаголовкиЗапроса.Вставить("configName", Метаданные.Имя);
	
	ПараметрыЗапросаJSON = ЗакрытиеСменыJSON(Параметры, ДанныеОперации);   
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , ЗаголовкиЗапроса);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
	Иначе
		ВызватьИсключение НСтр("ru = 'Ошибка интеграции. Нет подсистемы ИнтернетПоддержкаПользователей.'");
	КонецЕсли;		
	
	РезультатОтправки = МодульИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		Параметры.P_rnmNumber,
		Параметры.P_Password,
		ПараметрыОтправки);
		
	ЗаполнитьЗначенияСвойств(РезультатОперации, РезультатОтправки);
		
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось закрыть смену.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|Сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|Подробная информация:
				|%4'"),
			РезультатОтправки.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке);
		
		ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ОбработкаСодержимогоОтвета(РезультатОтправки.Содержимое);
	РезультатОперации.ДанныеОтвета = ПрочитатьДанные(РезультатОтправки.Содержимое);
	
	Если РезультатОперации.ДанныеОтвета.result = "" Тогда
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось закрыть смену.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|Сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|Подробная информация:
				|%4'"),
			РезультатОперации.ДанныеОтвета.general.message,
			URLОперации,
			400,
			РезультатОперации.ДанныеОтвета.general.message);
			
		ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
			
		РезультатОперации.КодОшибки = "Ошибка";
		РезультатОперации.СообщениеОбОшибке = РезультатОперации.ДанныеОтвета.general.message;
			
		Возврат РезультатОперации;
	КонецЕсли;
	
	ДанныеОперации.Вставить("РезультатОперации", РезультатОперации);

	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Завершение закрытия смены.'"),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

Функция ОперацияВнесениеВыемка(Параметры, ДанныеОперации) Экспорт
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Внесение/выемка.'"),
		Ложь);
		
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("КодОшибки", "");
	РезультатОперации.Вставить("СообщениеОбОшибке",  "");
	РезультатОперации.Вставить("ИнформацияОбОшибке", "");
	РезультатОперации.Вставить("ДанныеОтвета", Неопределено);
	
	URLОперации = URLОперации(Параметры.P_URLService);
	
	ЗаголовкиЗапроса = Новый Соответствие;
	ЗаголовкиЗапроса.Вставить("Content-Type", "application/json");
	ЗаголовкиЗапроса.Вставить("workplaceID", Строка(ДанныеОперации.ИдентификаторУстройства.УникальныйИдентификатор()));
	ЗаголовкиЗапроса.Вставить("configVersion", Метаданные.Версия);
	ЗаголовкиЗапроса.Вставить("configName", Метаданные.Имя);
	
	ПараметрыЗапросаJSON = ВнесениеВыемкаJSON(Параметры, ДанныеОперации);   
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , ЗаголовкиЗапроса);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
	Иначе
		ВызватьИсключение НСтр("ru = 'Ошибка интеграции. Нет подсистемы ИнтернетПоддержкаПользователей.'");
	КонецЕсли;		
	
	РезультатОтправки = МодульИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		Параметры.P_rnmNumber,
		Параметры.P_Password,
		ПараметрыОтправки);
		
	ЗаполнитьЗначенияСвойств(РезультатОперации, РезультатОтправки);	
		
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		ЗаполнитьЗначенияСвойств(РезультатОперации, РезультатОтправки);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось произвести выемку/внесение.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|Сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|Подробная информация:
				|%4'"),
			РезультатОтправки.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке);
		
		ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ОбработкаСодержимогоОтвета(РезультатОтправки.Содержимое);
	РезультатОперации.ДанныеОтвета = ПрочитатьДанные(РезультатОтправки.Содержимое);
	
	Если РезультатОперации.ДанныеОтвета.result = "" Тогда
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось закрыть смену.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|Сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|Подробная информация:
				|%4'"),
			РезультатОперации.ДанныеОтвета.general.message,
			URLОперации,
			400,
			РезультатОперации.ДанныеОтвета.general.message);
		
		ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
			
		РезультатОперации.КодОшибки = "Ошибка";
		РезультатОперации.СообщениеОбОшибке = РезультатОперации.ДанныеОтвета.general.message;
			
		Возврат РезультатОперации;
	КонецЕсли;
	
	ДанныеОперации.Вставить("РезультатОперации", РезультатОперации);

	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Завершение внесение/выемка.'"),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

#КонецОбласти

#Область ФормированиеJSON

Функция АвторизацияJSON(Параметры, ДанныеОперации)
		
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.ПроверятьСтруктуру = Ложь;
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, "");
	ЗаписьДанныхСообщения.УстановитьСтроку(ПараметрыЗаписиJSON);
	
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("auth"); 
	
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("tin"); 
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеОперации.ИдентификаторУстройства.Организация.ИНН);
			
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("rnmNumber");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(Параметры.P_rnmNumber);
		
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("general"); 
	
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("method"); 
		ЗаписьДанныхСообщения.ЗаписатьЗначение("sync-kkm");

	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
		
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

Функция ОткрытиеСменыJSON(Параметры, ДанныеОперации)
		
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.ПроверятьСтруктуру = Ложь;

	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, "");
	ЗаписьДанныхСообщения.УстановитьСтроку(ПараметрыЗаписиJSON);
	
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("auth"); 
	
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("rnmNumber");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(Параметры.P_rnmNumber);
		
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("general"); 
	
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("method"); 
		ЗаписьДанныхСообщения.ЗаписатьЗначение("open-shift");
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("externalGUID"); 
		ЗаписьДанныхСообщения.ЗаписатьЗначение(Строка(ДанныеОперации.ИдентификаторСмены));

	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
		
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

Функция ПробитьЧекJSON(Параметры, ДанныеОперации)
	
	Документ = ДанныеОперации.ДокументОснование;
	
	//ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	//ЗаписьДанныхСообщения.ПроверятьСтруктуру = Ложь;
	//
	//ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, "");
	//ЗаписьДанныхСообщения.УстановитьСтроку(ПараметрыЗаписиJSON);
	//
	//ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	//ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("auth"); 
	//
	//ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	//
	//	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("rnmNumber");
	//	ЗаписьДанныхСообщения.ЗаписатьЗначение(Параметры.P_rnmNumber);
	//	
	//ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	//
	//ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("general"); 
	//
	//	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	//	
	//		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("method"); 
	//		ЗаписьДанныхСообщения.ЗаписатьЗначение("check");
	//		
	//		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("externalGUID"); 
	//		ЗаписьДанныхСообщения.ЗаписатьЗначение(Строка(Документ.УникальныйИдентификатор()));
	//		
	//		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("customerContact"); 
	//		ЗаписьДанныхСообщения.ЗаписатьЗначение(Документ.ПокупательНомер);
	//		
	//		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("operation"); 
	//		ЗаписьДанныхСообщения.ЗаписатьЗначение("INCOME");
	//		
	//		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("goods"); 
	//       	ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
	//		
	//		Для Каждого СтрокаТабличнойЧасти Из Документ.Товары Цикл
	//			
	//			ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	//			
	//				ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("calcItemAttributeCode"); 
	//				ЗаписьДанныхСообщения.ЗаписатьЗначение("0");
	//				
	//				ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("cost"); 
	//				ЗаписьДанныхСообщения.ЗаписатьЗначение(СтрокаТабличнойЧасти.Сумма);
	//				
	//				ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("name"); 
	//				ЗаписьДанныхСообщения.ЗаписатьЗначение(СтрокаТабличнойЧасти.Номенклатура);
	//				
	//				ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("price"); 
	//				ЗаписьДанныхСообщения.ЗаписатьЗначение(СтрокаТабличнойЧасти.Цена);
	//				
	//				ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("quantity"); 
	//				ЗаписьДанныхСообщения.ЗаписатьЗначение(СтрокаТабличнойЧасти.Количество);
	//				
	//				ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("vat"); 
	//				ЗаписьДанныхСообщения.ЗаписатьЗначение(ПолучитьКодСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	//				
	//				ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("st"); 
	//				ЗаписьДанныхСообщения.ЗаписатьЗначение(ПолучитьКодСтавкиНСП(СтрокаТабличнойЧасти.СтавкаНСП));
	//				
	//			ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	//			
	//		КонецЦикла;
	//	
	//		ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	//		
	//		ТаблицаНалогов = Новый ТаблицаЗначений;
	//		ТаблицаНалогов.Колонки.Добавить("Налог");
	//		ТаблицаНалогов.Колонки.Добавить("ТипНалога");
	//		ТаблицаНалогов.Колонки.Добавить("Сумма");
	//		
	//		Для Каждого СтрокаТабличнойЧасти Из Документ.Товары Цикл
	//			НоваяСтрокаНалогов = ТаблицаНалогов.Добавить();
	//			НоваяСтрокаНалогов.Налог = ПолучитьКодСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	//			НоваяСтрокаНалогов.ТипНалога = "VAT";
	//			НоваяСтрокаНалогов.Сумма = СтрокаТабличнойЧасти.СуммаНДС;
	//			
	//			НоваяСтрокаНалогов = ТаблицаНалогов.Добавить();
	//			НоваяСтрокаНалогов.Налог = ПолучитьКодСтавкиНСП(СтрокаТабличнойЧасти.СтавкаНСП);
	//			НоваяСтрокаНалогов.ТипНалога = "ST";
	//			НоваяСтрокаНалогов.Сумма = СтрокаТабличнойЧасти.СуммаНСП;
	//		КонецЦикла;
	//		
	//		ТаблицаНалогов.Свернуть("Налог,ТипНалога", "Сумма");
	//		
	//		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("taxSums"); 
	//       	ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
	//		
	//		Для Каждого СтрокаТаблицыЗначений Из ТаблицаНалогов Цикл
	//			
	//			ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	//		
	//				ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("sum"); 
	//				ЗаписьДанныхСообщения.ЗаписатьЗначение(СтрокаТаблицыЗначений.Сумма);
	//				
	//				ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("code"); 
	//				ЗаписьДанныхСообщения.ЗаписатьЗначение(СтрокаТаблицыЗначений.Налог);
	//				
	//				ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("type"); 
	//				ЗаписьДанныхСообщения.ЗаписатьЗначение(СтрокаТаблицыЗначений.ТипНалога);
	//				
	//			ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	//			
	//		КонецЦикла;
	//			
	//		ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	//		
	//		ТаблицаОплаты = Документ.Оплата.Выгрузить();
	//		СтрокаНаличнаяОплата = ТаблицаОплаты.Найти(Перечисления.ТипыОплатыККТ.Наличные);
	//		Если СтрокаНаличнаяОплата <> Неопределено Тогда
	//			СуммаОплатыНаличными = СтрокаНаличнаяОплата.СуммаОплаты;
	//			СуммаОплатыЭлектронно = Документ.СуммаДокумента - СуммаОплатыНаличными;
	//		Иначе
	//			СуммаОплатыНаличными = 0;
	//			СуммаОплатыЭлектронно = Документ.СуммаДокумента;
	//		КонецЕсли;
	//		
	//		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("totalSum"); 
	//		ЗаписьДанныхСообщения.ЗаписатьЗначение(Документ.СуммаДокумента);
	//		
	//		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("totalCashSum"); 
	//		ЗаписьДанныхСообщения.ЗаписатьЗначение(СуммаОплатыНаличными);
	//		
	//		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("totalCashlessSum"); 
	//		ЗаписьДанныхСообщения.ЗаписатьЗначение(СуммаОплатыЭлектронно);
	//		
	//	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	//	
	//ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	//
	//Возврат ЗаписьДанныхСообщения.Закрыть();
	
	//////////////////////////////////////////////////////////////////////////////////////////////

	ФорматЧисла = "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧГ=0";
		
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("rnmNumber", 	Параметры.P_rnmNumber);
	
	ОсновныеПараметры = Новый Структура;
	ОсновныеПараметры.Вставить("method", 			"check");
	ОсновныеПараметры.Вставить("externalGUID", Строка(Документ.УникальныйИдентификатор()));

	Телефон = ДанныеОперации.ПокупательНомер;
	
	Если ЗначениеЗаполнено(Телефон) Тогда
		Телефон = СтрЗаменить(Телефон, "(", "");
		Телефон = СтрЗаменить(Телефон, ")", "");
		Телефон = СтрЗаменить(Телефон, "-", "");
		Телефон = СтрЗаменить(Телефон, " ", "");
		Телефон = "+996" + Телефон; 
		
		ОсновныеПараметры.Вставить("customerContact", Телефон);
	ИначеЕсли ЗначениеЗаполнено(ДанныеОперации.ПокупательEmail) Тогда
		ОсновныеПараметры.Вставить("customerContact", ДанныеОперации.ПокупательEmail);		
	Иначе
		ОсновныеПараметры.Вставить("customerContact", "");	
	КонецЕсли;

	Если ДанныеОперации.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств Тогда
		ОсновныеПараметры.Вставить("operation", "INCOME");
		
	ИначеЕсли ДанныеОперации.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств Тогда
		ОсновныеПараметры.Вставить("operation", "EXPENDITURE");		
		
	ИначеЕсли ДанныеОперации.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств Тогда
		ОсновныеПараметры.Вставить("operation", "INCOME_RETURN");
		ОсновныеПараметры.Вставить("originFdNumber", Документ.НомерЧекаОснования);
		
	ИначеЕсли ДанныеОперации.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратРасходаДенежныхСредств Тогда
		ОсновныеПараметры.Вставить("operation", "EXPENDITURE_RETURN");
		ОсновныеПараметры.Вставить("originFdNumber", Документ.НомерЧекаОснования);
	КонецЕсли;
	
	ДанныеЧекаТовары = Новый Массив;
	ДопДанныеЧекаТовары = Новый Массив;
	
	Для Каждого СтрокаТабличнойЧасти Из Документ.Товары Цикл
			
		СтрокаТовара = Новый Структура;   
		СтрокаТовара.Вставить("calcItemAttributeCode", 	0); // код признака предмета расчета 
		СтрокаТовара.Вставить("cost", 					СтрЗаменить(Формат(СтрокаТабличнойЧасти.Сумма, ФорматЧисла), ",", "")); 
		СтрокаТовара.Вставить("name", 					Строка(СтрокаТабличнойЧасти.Номенклатура)); 
		СтрокаТовара.Вставить("price", 					СтрЗаменить(Формат(СтрокаТабличнойЧасти.Цена, ФорматЧисла), ",", "")); 
		СтрокаТовара.Вставить("quantity", 				СтрокаТабличнойЧасти.Количество);
		
		//Если СистемаНалогообложения = Перечисления.СистемыНалогообложения.ЕдиныйНалог
		//	ИЛИ ДанныеДляЗаполнения.РасчетнаяОперация = 2 
		//	ИЛИ ДанныеДляЗаполнения.РасчетнаяОперация = 4 Тогда
			СтрокаТовара.Вставить("vat", ПолучитьКодСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС));  
			СтрокаТовара.Вставить("st", ПолучитьКодСтавкиНСП(СтрокаТабличнойЧасти.СтавкаНСП));
			//СуммаНДС = 0;
			//СуммаНСП = 0;
		//Иначе	
		//	СтрокаТовара.Вставить("vat", ПолучитьКодСтавкиНДС(?(ПлательщикНДС,
		//	СтрокаТабличнойЧасти.СтавкаНДСссылка,
		//	Перечисления.СтавкиНДС.НДС0))); 
		//	СтрокаТовара.Вставить("st", ПолучитьКодСтавкиНСП(СтрокаТабличнойЧасти.СтавкаНСПссылка, СистемаНалогообложения));  
		//	СуммаНДС = СтрокаТабличнойЧасти.СуммаНДС;
		//	СуммаНСП = СтрокаТабличнойЧасти.СуммаНСП;
		//КонецЕсли;
		
			
		//ДопДанные = Новый Структура();
		СтрокаТовара.Вставить("tnved", Строка(СтрокаТабличнойЧасти.Номенклатура.КодТНВЭД));
		СтрокаТовара.Вставить("gked", Строка(СтрокаТабличнойЧасти.Номенклатура.КодГКЭД));
		СтрокаТовара.Вставить("MarkType", "");
		СтрокаТовара.Вставить("markCode", СтрокаТабличнойЧасти.КодМаркировки);
		
		ДанныеЧекаТовары.Добавить(СтрокаТовара);
	
		//ДопДанныеЧекаТовары.Добавить(ДопДанные);
		
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из Документ.Услуги Цикл
		СтрокаТовара = Новый Структура;   
		СтрокаТовара.Вставить("calcItemAttributeCode", 	0); // код признака предмета расчета 
		СтрокаТовара.Вставить("cost", 					СтрЗаменить(Формат(СтрокаТабличнойЧасти.Сумма, ФорматЧисла), ",", "")); 
		СтрокаТовара.Вставить("name", 					Строка(СтрокаТабличнойЧасти.Номенклатура)); 
		СтрокаТовара.Вставить("price", 					СтрЗаменить(Формат(СтрокаТабличнойЧасти.Цена, ФорматЧисла), ",", "")); 
		СтрокаТовара.Вставить("quantity", 				СтрокаТабличнойЧасти.Количество);
		СтрокаТовара.Вставить("vat", ПолучитьКодСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС));  
		СтрокаТовара.Вставить("st", ПолучитьКодСтавкиНСП(СтрокаТабличнойЧасти.СтавкаНСП));
		СтрокаТовара.Вставить("tnved", Строка(СтрокаТабличнойЧасти.Номенклатура.КодТНВЭД));
		СтрокаТовара.Вставить("gked", Строка(СтрокаТабличнойЧасти.Номенклатура.КодГКЭД));
		СтрокаТовара.Вставить("MarkType", "");
		СтрокаТовара.Вставить("markCode", "");
		
		ДанныеЧекаТовары.Добавить(СтрокаТовара);
	КонецЦикла;
	
	ОсновныеПараметры.Вставить("goods", ДанныеЧекаТовары);
	
	ОсновныеПараметры.Вставить("goodsDetails", ДопДанныеЧекаТовары);
	
	ТаблицаНалогов = Новый ТаблицаЗначений;
	ТаблицаНалогов.Колонки.Добавить("Налог");
	ТаблицаНалогов.Колонки.Добавить("ТипНалога");
	ТаблицаНалогов.Колонки.Добавить("Сумма");
	
	Для Каждого СтрокаТабличнойЧасти Из Документ.Товары Цикл
		НоваяСтрокаНалогов = ТаблицаНалогов.Добавить();
		НоваяСтрокаНалогов.Налог = ПолучитьКодСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
		НоваяСтрокаНалогов.ТипНалога = "VAT";
		НоваяСтрокаНалогов.Сумма = СтрокаТабличнойЧасти.СуммаНДС;
		
		НоваяСтрокаНалогов = ТаблицаНалогов.Добавить();
		НоваяСтрокаНалогов.Налог = ПолучитьКодСтавкиНСП(СтрокаТабличнойЧасти.СтавкаНСП);
		НоваяСтрокаНалогов.ТипНалога = "ST";
		НоваяСтрокаНалогов.Сумма = СтрокаТабличнойЧасти.СуммаНСП;
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из Документ.Услуги Цикл
		НоваяСтрокаНалогов = ТаблицаНалогов.Добавить();
		НоваяСтрокаНалогов.Налог = ПолучитьКодСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
		НоваяСтрокаНалогов.ТипНалога = "VAT";
		НоваяСтрокаНалогов.Сумма = СтрокаТабличнойЧасти.СуммаНДС;
		
		НоваяСтрокаНалогов = ТаблицаНалогов.Добавить();
		НоваяСтрокаНалогов.Налог = ПолучитьКодСтавкиНСП(СтрокаТабличнойЧасти.СтавкаНСП);
		НоваяСтрокаНалогов.ТипНалога = "ST";
		НоваяСтрокаНалогов.Сумма = СтрокаТабличнойЧасти.СуммаНСП;
	КонецЦикла;
	
	ТаблицаНалогов.Свернуть("Налог,ТипНалога", "Сумма");
	
	ДанныеНалогов = Новый Массив();
	
	Для Каждого ДанныеСтрокиНалогов Из ТаблицаНалогов Цикл
		СтрокаНалога = Новый Структура;
		СтрокаНалога.Вставить("sum", ?(ДанныеСтрокиНалогов.Сумма = 0, ДанныеСтрокиНалогов.Сумма, СтрЗаменить(Формат(ДанныеСтрокиНалогов.Сумма, ФорматЧисла), ",", "")));
		СтрокаНалога.Вставить("code", Число(ДанныеСтрокиНалогов.Налог)); 
		СтрокаНалога.Вставить("type", ДанныеСтрокиНалогов.ТипНалога);  
		
		ДанныеНалогов.Добавить(СтрокаНалога);
	КонецЦикла;	
	
	ОсновныеПараметры.Вставить("taxSums", ДанныеНалогов);

	ОсновныеПараметры.Вставить("totalSum", СтрЗаменить(Формат(Документ.СуммаДокумента, ФорматЧисла), ",", ""));
	
	Если ДанныеОперации.ОплатаНаличные = 0 Тогда
		ОсновныеПараметры.Вставить("totalCashSum", 		0);
		ОсновныеПараметры.Вставить("totalCashlessSum", 	СтрЗаменить(Формат(Документ.СуммаДокумента, ФорматЧисла), ",", ""));
	Иначе
		ОсновныеПараметры.Вставить("totalCashSum", 		СтрЗаменить(Формат(Документ.СуммаДокумента, ФорматЧисла), ",", ""));
		ОсновныеПараметры.Вставить("totalCashlessSum", 	0);	
	КонецЕсли;

	Данные = Новый Структура;
	Данные.Вставить("auth", 			ДополнительныеПараметры);
	Данные.Вставить("general", 			ОсновныеПараметры);
	
	Возврат ПодготовитьТелоЗапроса(Данные);
	
КонецФункции

Функция ИзменитьСтавкуНСПJSON(Параметры)
		
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, "");
	ЗаписьДанныхСообщения.УстановитьСтроку(ПараметрыЗаписиJSON);
	
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	Если Параметры.СтавкаНСП = 0 Тогда
		СтавкаНСП = 0;
	ИначеЕсли Параметры.СтавкаНСП = 1 Тогда
		СтавкаНСП = 2; 
	ИначеЕсли Параметры.СтавкаНСП = 2 Тогда
		СтавкаНСП = 4;
	ИначеЕсли Параметры.СтавкаНСП = 3 Тогда
		СтавкаНСП = 5;
	ИначеЕсли Параметры.СтавкаНСП = 4 Тогда
		СтавкаНСП = 6;
	ИначеЕсли Параметры.СтавкаНСП = 5 Тогда
		СтавкаНСП = 7;
	Иначе
		СтавкаНСП = 0;
	КонецЕсли;
		
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("nsp_percent"); 
	ЗаписьДанныхСообщения.ЗаписатьЗначение(СтавкаНСП);
		
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

Функция ЗакрытиеСменыJSON(Параметры, ДанныеОперации)
		
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.ПроверятьСтруктуру = Ложь;

	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, "");
	ЗаписьДанныхСообщения.УстановитьСтроку(ПараметрыЗаписиJSON);
	
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("auth"); 
	
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("rnmNumber");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(Параметры.P_rnmNumber);
		
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("general"); 
	
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("method"); 
		ЗаписьДанныхСообщения.ЗаписатьЗначение(?(ДанныеОперации.ОтчетБезГашения, "state-shift", "close-shift"));
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("externalGUID"); 
		ЗаписьДанныхСообщения.ЗаписатьЗначение(Строка(ДанныеОперации.ИдентификаторСмены));

	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
		
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

Функция ВнесениеВыемкаJSON(Параметры, ДанныеОперации)
		
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.ПроверятьСтруктуру = Ложь;

	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, "");
	ЗаписьДанныхСообщения.УстановитьСтроку(ПараметрыЗаписиJSON);
	
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("auth"); 
	
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("rnmNumber");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(Параметры.P_rnmNumber);
		
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("general"); 
	
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("method"); 
		ЗаписьДанныхСообщения.ЗаписатьЗначение("puttake-money");
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("externalGUID"); 
		ЗаписьДанныхСообщения.ЗаписатьЗначение(Строка(ДанныеОперации.ИдентификаторОперации));
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("operation"); 
		ЗаписьДанныхСообщения.ЗаписатьЗначение(?(ДанныеОперации.ТипИнкассации = 1, "INCOME", "EXPENDITURE"));
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("totalSum"); 
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеОперации.СуммаЧека);

	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
		
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

Функция ПрочитатьДанные(ТелоJSON)
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ от онлайн кассы:
			|%1'"),
		ТелоJSON);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	
	// Выполнить чтение данных в структуру Данные с помощью объекта чтения (Чтение).
	ИменаДаты = Новый Массив;
	ИменаДаты.Добавить("date");
	ИменаДаты.Добавить("appDate");
	
	Результат = ПрочитатьJSON(ЧтениеОтвета,,ИменаДаты,ФорматДатыJSON.ISO);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеФункцииИПроцедуры

// Добавляет запись в журнал регистрации.
//
// Параметры:
//  СообщениеОбОшибке - Строка - комментарий к записи журнала регистрации;
//  Ошибка - Булево - если истина будет установлен уровень журнала регистрации "Ошибка".
//
Процедура ЗаписатьИнформациюВЖурналРегистрации(
		СообщениеОбОшибке,
		Ошибка = Истина) Экспорт
	
	УровеньЖР = ?(Ошибка, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Информация);
	
	ЗаписьЖурналаРегистрации(
		"Интеграция с онлайн кассой",
		УровеньЖР,
		,
		,
		Лев(СообщениеОбОшибке, 5120));
	
КонецПроцедуры

Функция URLОперации(URL)

	URLОперации = URL + "/a/webkassa/hs/ext_api/execute";
	Возврат URLОперации;	

КонецФункции // URLОперации()

Функция ПодготовитьТелоЗапроса(Данные)
	
	// Описание параметров
	// Создать объект записи и открыть файл, в который будет выполняться запись.
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет);
	ЗаписьДанныхСообщения.УстановитьСтроку(ПараметрыЗаписиJSON);

	// Выполнить запись данных (Данные) с помощью объекта записи (Запись).
	ЗаписатьJSON(ЗаписьДанныхСообщения, Данные, Новый НастройкиСериализацииJSON());
	
	Возврат ЗаписьДанныхСообщения.Закрыть();

КонецФункции

Функция ПолучитьКодСтавкиНДС(СтавкаНДС) Экспорт
	
	Если СтавкаНДС = Перечисления.СтавкиНДС.НДС12 Тогда
		Возврат 1;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
		Возврат 0;
	КонецЕсли;	
	
	Возврат 1;
	
КонецФункции // ПолучитьКодСтавкиНДС()

Функция ПолучитьКодСтавкиНСП(СтавкаНСП) Экспорт
	
	Если СтавкаНСП = Перечисления.СтавкиНСП.НСП0 Тогда
		Возврат 0;
	ИначеЕсли СтавкаНСП = Перечисления.СтавкиНСП.НСП1 Тогда
		Возврат 1;
	ИначеЕсли СтавкаНСП = Перечисления.СтавкиНСП.НСП2 Тогда
		Возврат 2;
	ИначеЕсли СтавкаНСП = Перечисления.СтавкиНСП.НСП3 Тогда
		Возврат 3;
	ИначеЕсли СтавкаНСП = Перечисления.СтавкиНСП.НСП5 Тогда
		Возврат 4;
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции // ПолучитьКодСтавкиНДС()

Функция ПолучитьТокенПоID() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкиОнлайнКассы.auth_token
	               |ИЗ
	               |	Справочник.НастройкиОнлайнКассы КАК НастройкиОнлайнКассы";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.auth_token;

КонецФункции // ПолучитьТокенПоID()

Функция ПолучитьЗначениеНСППоНастройке(НастройкаСтавкаНСП)
	
	Если НастройкаСтавкаНСП = 0 Тогда
		СтавкаНСП = 0;
	ИначеЕсли НастройкаСтавкаНСП = 1 Тогда
		СтавкаНСП = 0.5; 
	ИначеЕсли НастройкаСтавкаНСП = 2 Тогда
		СтавкаНСП = 1;
	ИначеЕсли НастройкаСтавкаНСП = 3 Тогда
		СтавкаНСП = 1.5;
	ИначеЕсли НастройкаСтавкаНСП = 4 Тогда
		СтавкаНСП = 2;
	ИначеЕсли НастройкаСтавкаНСП = 5 Тогда
		СтавкаНСП = 3;
	ИначеЕсли НастройкаСтавкаНСП = 6 Тогда
		СтавкаНСП = 4;
	ИначеЕсли НастройкаСтавкаНСП = 7 Тогда
		СтавкаНСП = 5;
	ИначеЕсли НастройкаСтавкаНСП = 8 Тогда
		СтавкаНСП = 6;
	Иначе
		СтавкаНСП = 0;
	КонецЕсли;
	
	Возврат СтавкаНСП;
	
КонецФункции

Процедура ОтрезатьБумагу(Параметры) Экспорт
	
	Попытка
		ОбъектДрайвера = "";
		
		ProgID = "AddIn.ReceiptPrinterNative";
		Если ПустаяСтрока(ProgID) Тогда
			ОбъектДрайвера = ""; // Драйвер не требуется
		Иначе
			ProgID1 = ?(Найти(ProgID, "|") > 0, Сред(ProgID, 1, Найти(ProgID, "|")-1), ProgID); 
			ProgID2 = ?(Найти(ProgID, "|") > 0, Сред(ProgID, Найти(ProgID, "|")+1), ProgID); 
			ИмяОбъекта = Сред(ProgID1, Найти(ProgID1, ".") + 1); 
			Префикс = Сред(ProgID1, 1, Найти(ProgID1, ".")); 
			ProgID2 = Префикс + СтрЗаменить(ИмяОбъекта, ".", "_") + "." + ИмяОбъекта;
			Результат = ПодключитьВнешнююКомпоненту("ОбщийМакет.Драйвер1СПринтерЧеков", СтрЗаменить(ИмяОбъекта, ".", "_"), ТипВнешнейКомпоненты.Native);
			ОбъектДрайвера = Новый (ProgID2);
			
			ОбъектДрайвера.УстановитьПараметр("WindowsPrinterName", Параметры.WindowsPrinterName);
			ОбъектДрайвера.УстановитьПараметр("COMPrinterName", Параметры.COMPrinterName);
			ОбъектДрайвера.УстановитьПараметр("Speed", Параметры.Speed);
			//ЗаполнитьЗначенияСвойств(ОбъектДрайвера, Параметры);
			
			ОбъектДрайвера.УстановитьПараметр("EquipmentType", "ПринтерЧеков");
			ОбъектДрайвера.УстановитьПараметр("BarcodeCorrectionLevel", 1);
			ОбъектДрайвера.УстановитьПараметр("BarcodeTimeout", 0);
			ОбъектДрайвера.УстановитьПараметр("BarcodeWidth", 0);
			ОбъектДрайвера.УстановитьПараметр("ESCPosServiceCommand", Истина);
			ОбъектДрайвера.УстановитьПараметр("Encoding", 866);
			ОбъектДрайвера.УстановитьПараметр("EscPosCharset", 17);
			ОбъектДрайвера.УстановитьПараметр("Font", "Courier New");
			ОбъектДрайвера.УстановитьПараметр("FontSize", 20);
			ОбъектДрайвера.УстановитьПараметр("LineLength", 32);
			ОбъектДрайвера.УстановитьПараметр("OpenCashDrawerAfterDocument", Истина);
			ОбъектДрайвера.УстановитьПараметр("PrinterImplType", 0);
			ОбъектДрайвера.УстановитьПараметр("QRHardwareGeneration", Ложь);
			ОбъектДрайвера.УстановитьПараметр("RotationAngle", 0);
			ОбъектДрайвера.УстановитьПараметр("SpaceWidth", 12);
			ОбъектДрайвера.УстановитьПараметр("UseEmulation", Ложь);
				
			Попытка
				Ответ = ОбъектДрайвера.Подключить("");
			Исключение
				Сообщить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.Подключить>.'") + Символы.ПС + ОписаниеОшибки());
				Возврат;
			КонецПопытки;
		КонецЕсли;
		
		ТекстПечати = ПолучитьXMLПакетДляТекста("[cut]");
		Результат = ОбъектДрайвера.НапечататьТекстовыйДокумент("", ТекстПечати);
		Если Не Результат Тогда
			Ошибка = "";
			ОбъектДрайвера.ПолучитьОшибку(Ошибка);
		    Сообщить(Ошибка);
		КонецЕсли;
		
		ОбъектДрайвера.Отключить("");
	Исключение
		Сообщить("Принтер не отрезал бумагу, так как не смог подключиться по заданным настройкам");
	КонецПопытки;
				
КонецПроцедуры

Функция ПолучитьXMLПакетДляТекста(СтрокаТекста, РевизияИнтерфейса = 0) Экспорт
	
	Результат = Новый Массив();
	
	// Пакетная печать чека. Подготовка пакета.
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Document");
	                              
	Если НЕ ПустаяСтрока(СтрокаТекста) Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
		
		Для НомерСтроки = 1 По СтрЧислоСтрок(СтрокаТекста) Цикл
			
			ВыделеннаяСтрока = СтрПолучитьСтроку(СтрокаТекста, НомерСтроки);
			
			Если (Найти(ВыделеннаяСтрока, "[отрезка]") > 0)
				 Или (Найти(ВыделеннаяСтрока, "[cut]") > 0) Тогда
				 
				// Завершаем запись текущего пакета. 
				ЗаписьXML.ЗаписатьКонецЭлемента();
				ЗаписьXML.ЗаписатьКонецЭлемента();
				Текст = ЗаписьXML.Закрыть();
				Результат.Добавить(Текст);
				
				// Новый пакет.
				ЗаписьXML = Новый ЗаписьXML();
				ЗаписьXML.УстановитьСтроку("UTF-8");
				ЗаписьXML.ЗаписатьОбъявлениеXML();
				ЗаписьXML.ЗаписатьНачалоЭлемента("Document");
				ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
				
			ИначеЕсли (Найти(ВыделеннаяСтрока, "|ШтрихКод|") > 0) Тогда
				ВыделеннаяСтрока = Сред(ВыделеннаяСтрока, СтрДлина("|ШтрихКод|") + 1);
				ВремТипШтрихкода = Сред(ВыделеннаяСтрока, 1, Найти(ВыделеннаяСтрока, "|") - 1);
	 			ВремШтрихКод = Сред(ВыделеннаяСтрока, Найти(ВыделеннаяСтрока, "|") + 1); 
				ЗаписьXML.ЗаписатьНачалоЭлемента("Barcode");
				Если РевизияИнтерфейса >= 3000 Тогда  // Версия стандарта 3.0 (ОФД 1.1)
					ЗаписьXML.ЗаписатьАтрибут("Type", XMLСтрока(ВремТипШтрихкода));
					ЗаписьXML.ЗаписатьАтрибут("Value", XMLСтрока(ВремШтрихКод));
				Иначе
					ЗаписьXML.ЗаписатьАтрибут("BarcodeType", XMLСтрока(ВремТипШтрихкода));
					ЗаписьXML.ЗаписатьАтрибут("Barcode", XMLСтрока(ВремШтрихКод));
				КонецЕсли;
				ЗаписьXML.ЗаписатьКонецЭлемента();
			Иначе
				ЗаписьXML.ЗаписатьНачалоЭлемента("TextString");
				ЗаписьXML.ЗаписатьАтрибут("Text", XMLСтрока(ВыделеннаяСтрока));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
		
	ЗаписьXML.ЗаписатьКонецЭлемента();
	Текст = ЗаписьXML.Закрыть();
	
	Возврат Текст;

КонецФункции   

Процедура ОбработкаСодержимогоОтвета(СодержимоеОтвета) Экспорт

	// итоговые суммы налогов, входящих в итоговую стоимость предметов расчета в чеке
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1003""", """СуммыНалоговЧека""");
	
	// суммы налога на добавленную стоимость, входящие в итоговую стоимость предметов расчета в чеке
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1006""", """СуммыНДС""");
	
	// суммы налога с продаж, входящие в итоговую стоимость предметов расчета в чеке
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1007""", """СуммыНСП""");
	
	// абонентский номер и (или) адрес электронной почты покупателя (клиента) 
	// в случае передачи ему кассового чека в электронной форме
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1008""", """ТелефонИлиЭлектронныйАдресПокупателя""");
	
	// Адрес осуществлениярасчетов между пользователем и покупателем (клиентом)
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1009""", """АдресРасчетов""");
		
	// ставка налога на добавленную стоимость
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1010""", """КодСтавкиНДС""");
		
	// итоговая сумма налога на добавленную стоимость по определенной ставке
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1011""", """СуммаНДСПоСтавке""");	
	
	// дата и время формирования ФД, отклонение даты и времени формирования ФД не должно превышать 5 минут
	// от точного значения даты и времени в месте (адресе) осуществления расчетов
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1012""", """ДатаФормированияФД""");
	
	// серийный (заводской) номер ККМ
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1013""", """СерийныйНомерККМ""");

	// ставка налога с продаж
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1014""", """КодСтавкиНСП""");

	// итоговая сумма налога с продаж по определенной ставке
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1015""", """СуммаНСППоСтавке""");
	
	// идентификационный номер налогоплательщика технического оператора УНО(уполномоченного налогового органа)
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1017""", """ИННОператора""");
	
	// идентификационный номер налогоплательщика пользователя
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1018""", """ИННПользователя""");
	
	// сумма расчета с учетом скидок, наценок и НДС, указанная в кассовом чеке. 
	// Число с фиксированной точкой (2 цифры после точки)
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1020""", """СуммаРасчета""");
	
	// для кассового чека должность и фамилия лица, осуществившего расчет с покупателем (клиентом), 
	// оформившего кассовый чек и выдавшего его покупателю (клиенту); для иных фискальных документов - 
	// должность и фамилия лица, уполномоченного пользователем на формирование иного фискального документа
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1021""", """Кассир""");
	
	// количество товара, работ, услуг, платежей, выплат, иных предметов расчета. 
	// Если количество измеряется целым числом, точка в числе, указывающем количество, может не использоваться
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1023""", """КоличествоПредметовРасчета""");
	
	// итоговые суммы налогов, указанные в кассовых чеках с одним из следующих признаков расчета: 
	// «приход», «возврат прихода», «расход», «возврат расхода»
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1024""", """СуммыНалогов""");
	
	// код типа объекта предпринимательства. См. таблицу 11
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1027""", """ТипОбъектаПредпринимательства""");
	
	// код вида деятельности. См. таблицу 12
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1028""", """ВидДеятельности""");
	
	// код территориального УГНС. См. таблицу 13
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1029""", """УГНС");
	
	// наименование товара, работы, услуги, платежа, выплаты, иного предмета расчета
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1030""", """НаименованиеПредметаРасчета""");
	
	// сумма расчета, указанная в кассовом чеке, подлежащая уплате наличными денежными средствами. 
	// Величина с учетом тыйынов
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1031""", """СуммаПоЧекуНаличными""");	
	
	// регистрационный номер контрольно-кассовой машины
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1037""", """РегистрационныйНомерККМ""");
	
	// порядковый номер смены с момента формирования отчета о регистрации ККМ
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1038""", """НомерСмены""");
	
	// порядковый номер ФД с момента формирования отчета о регистрации ККМ
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1040""", """НомерФД""");
	
	// серийный (заводской) номер фискального модуля
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1041""", """НомерФМ""");
	
	// порядковый номер кассового чека за смену
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1042""", """НомерЧекаЗаСмену""");
	
	// стоимость товара, работы, услуги, платежа, выплаты, иного предмета расчета с учетом скидок и наценок. 
	// Число с фиксированной точкой (2 цифры после точки)
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1043""", """СтоимостьПредметаРасчетаСУчетомСкидокНаценок""");
	
	// наименование организации - пользователя или фамилия, имя, отчество (при наличии) 
	// индивидуального предпринимателя - пользователя
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1048""", """НаименованиеПользователя""");
	
	// не известно что это
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1049""", """Неизвестно1""");
	
	// признак расчета (получение средств от покупателя (клиента) «приход», 
	// возврат покупателю (клиенту) средств, полученных от него, «возврат прихода», 
	// выдача средств покупателю (клиенту) «расход», получение средств от покупателя (клиента), 
	// выданных ему, «возврат расхода»). Значения приведены в таблице 18
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1054""", """ПризнакРасчета""");
	
	// система налогообложения, применяемая пользователем при расчете с покупателем (клиентом). 
	// В кассовом чеке может быть указана только одна из применяемых пользователем систем налогообложения
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1055""", """ПрименяемаяСистемаНалогообложения""");
	
	// См. таблицу 10
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1058""", """ПризнакиПредметовРасчета""");
	
	// наименование (описание) товара, работы, услуги, платежа, выплаты, иного предмета расчета. См. таблицу 27
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1059""", """ПредметРасчета""");
	
	// системы налогообложения, которые пользователь может применять при осуществлении расчетов. 
	// Для отчета о регистрации и отчета об изменении параметров регистрации значения указаны в таблице 9
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1062""", """СистемыНалогообложения""");
	
	// порядковый номер ФД (фискальных данных) - основания для текущего фискального документа
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1063""", """НомерФДЧекаОснования""");
	
	// серийный (заводской) номер фискального модуля, которым был сформирован ФД - основания для текущего фискального документа
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1064""", """НомерФМЧекаОснования""");	
	
	// фискальный признак документа. В массиве из 6 байт на печать выводятся байты 2-5, 
	// которые интерпретируются, как UInt32, big endian
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1077""", """ФискальныйПризнакДокумента""");
	
	// цена за единицу товара, работы, услуги, платежа, выплаты, иного предмета расчета с учетом скидок и наценок.
	// В массиве из 6 байт на печать выводятся байты 2- 5, которые интерпретируются, как UInt32, big endian
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1079""", """ЦенаСУчетомСкидокНаценок""");
	
	// сумма расчета, указанная в кассовом чеке, подлежащая уплате в безналичном порядке. Величина с учетом тыйынов
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1081""", """СуммаПоЧекуБезналичными""");
	
	// Уникальный идентификатор банковской транзакции, который назначается банком эквайером при инициализации платежа
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1082""", """НомерСсылкиRRN""");
	
	// маска номера банковской карты (первые 6 и последние 4 цифры номера карты)
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1083""", """НомерБанковскойКарты""");
	
	// общее количество ФД, сформированных ККМ за смену. Число с фиксированной точкой (2 цифры после точки)
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1111""", """ОбщееКоличествоФДЗаСмену""");
	
	// адрес электронной почты отправителя кассового чека в электронной форме
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1117""", """ЭлектроннаяПочтаОтправителя""");
	
	// количество кассовых чеков со всеми признаками расчетов, сформированных ККМ за текущую смену
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1118""", """КоличествоКассовыхЧековЗаСмену""");
	
	// Принимает значения «1» или «0»
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1125""", """ПризнакРегистрацииНДС""");
	
	// итоговые количества и итоговые суммы расчетов кассовых чеков с признаком расчета «приход». См. таблицу 28
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1129""", """СчетчикОпераций_Приход""");
	
	// итоговые количества и итоговые суммы расчетов кассовых чеков с признаком расчета «возврат прихода». См. таблицу 28
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1130""", """СчетчикОпераций_ВозвратПрихода""");
	
	// итоговые количества и итоговые суммы расчетов кассовых чеков с признаком расчета «расход». См. таблицу 28
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1131""", """СчетчикОпераций_Расход""");
	
	// итоговые количества и итоговые суммы расчетов кассовых чеков с признаком расчета «возврат расхода». См. таблицу 28
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1132""", """СчетчикОпераций_ВозвратРасхода""");
	
	// не известно что это                                        
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1133""", """Неизвестно2""");
	
	// количество кассовых чеков со всеми признаками расчетов («приход», «возврат прихода», «расход», «возврат расхода»)
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1134""", """ОбщееКоличествоЧеков""");
	
	// количество кассовых чеков по одному из признаков расчетов («приход», «возврат прихода», «расход», «возврат расхода»)
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1135""", """КоличествоЧековПоПризнакуРасчета""");
	
	// итоговая сумма расчетов, указанных в кассовых чеках, совершенных с использованием наличных денежных средств. 
	// Величина с учетом тыйынов
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1136""", """ИтоговаяСуммаЧекаНаличными""");
	
	// итоговая сумма расчетов, указанных в кассовых чеках, совершенных в безналичном порядке. Величина с учетом тыйынов
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1138""", """ИтоговаяСуммаЧекаБезналичными""");
	
	
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1144""", """Неизвестно3""");	
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1145""", """Неизвестно4""");	
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1146""", """Неизвестно5""");
	
	// итоговые суммы расчетов, указанных в кассовых чеках, зафиксированные в счетчиках итогов ФМ. 
	// Число с фиксированной точкой (2 цифры после точки)
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1157""", """СчетчикиИтоговФМ""");
	
	// ?
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1162""", """КодТовара""");
	
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1173""", """Неизвестно6""");
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1174""", """Неизвестно7""");
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1177""", """Неизвестно8""");
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1178""", """Неизвестно9""");
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1179""", """Неизвестно10""");
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1182""", """Неизвестно11""");
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1185""", """Неизвестно12""");
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1186""", """Неизвестно13""");
	
	// место осуществления расчетов между пользователем и покупателем (клиентом), 
	// позволяющее покупателю (клиенту) идентифицировать место расчета
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1187""", """МестоРасчетов""");
	
	// Значение реквизита определяется изготовителем ККМ. 
	// Значение реквизита автоматически вносится ККМ в фискальный документ
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1188""", """ВерсияККМ""");
	
	// итоговые суммы расчетов, указанных в кассовых чеках. См. таблицу 27
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1194""", """СчетчикиИтоговСмены""");
	
	// общие итоговые суммы расчетов, указанных в кассовых чеках. 
	// Величина в виде числа с фиксированной точкой (2 цифры после точки)
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1201""", """ОбщаяИтоговаяСумма""");
	
	// См. таблицу 15.
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1205""", """КодыПричинИзмененийСведенийККМ""");
		
	// код информационного сообщения оператора фискальных данных. См. таблицу 32
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1206""", """СообщениеОператору""");
	 
	// См. таблицу 4 (на 16.05.2022 номер ФФД 1.0)
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1209""", """НомерВерсииФФД""");
	
	// текст информационного сообщения технического оператора УНО
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1210""", """ТекстСообщенияОперацтора""");
	
	// См. таблицу 10
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1212""", """ПризнакПредметаРасчета""");

	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1214""", """Неизвестно14""");
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1215""", """Неизвестно15""");
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1216""", """Неизвестно16""");
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1218""", """Неизвестно17""");
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1219""", """Неизвестно18""");
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1232""", """Неизвестно19""");
	РедактированиеСодержимогоОтвета(СодержимоеОтвета, """1233""", """Неизвестно20""");
КонецПроцедуры

Процедура РедактированиеСодержимогоОтвета(СодержимоеОтвета, СтрокаПоиска, СтрокаЗамены)

	Если НЕ СтрНайти(СодержимоеОтвета, СтрокаПоиска) = 0 Тогда
		СодержимоеОтвета = СтрЗаменить(СодержимоеОтвета, СтрокаПоиска, СтрокаЗамены); 		
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти



