#Область ПрограммныйИнтерфейс

// Процедура добавляет в массив МассивНепроверяемыхРеквизитов элементы, соответствующие именам 
// в зависимости от значений функциональных опций.
// Для использования в обработчиках события ОбработкаПроверкиЗаполнения.
//
// Параметры:
//	МассивНепроверяемыхРеквизитов - Массив строк с именами реквизитов объекта, не требующих проверки.
//	Организация - СправочникСсылка.Организации - Ссылка на организацию.
//	Период - Дата - Дата установки периодических опций.
//
Процедура ДобавитьНепроверяемыеРеквизитыПоПараметрамФункциональныхОпций(МассивНепроверяемыхРеквизитов, Организация, Период = Неопределено) Экспорт
	
	ПараметрыФО = Новый Структура();
	ПараметрыФО.Вставить("Организация", Организация);
	Если Период <> Неопределено Тогда
		ПараметрыФО.Вставить("Период", НачалоМесяца(Период));
		// Приводим к началу месяца для того, чтобы сократить пространство кэшируемых значений.
		// Параметр "Организация" используется в функциональных опциях, привязанных к регистрам сведений с периодичностью
		// Месяц или реже.
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ПлательщикНДС", ПараметрыФО) Тогда 
		МассивНепроверяемыхРеквизитов.Добавить("СтавкаНДС");
		МассивНепроверяемыхРеквизитов.Добавить("КодПоставкиНДС");
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ПлательщикНСП", ПараметрыФО) Тогда 
		МассивНепроверяемыхРеквизитов.Добавить("СтавкаНСП");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНСП");
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.СтавкаНСП");
		МассивНепроверяемыхРеквизитов.Добавить("ОС.СтавкаНСП");
		МассивНепроверяемыхРеквизитов.Добавить("Продукция.СтавкаНСП");
		МассивНепроверяемыхРеквизитов.Добавить("Возвраты.СтавкаНСП");
	КонецЕсли;	
	
	Если НЕ ПолучитьФункциональнуюОпцию("ПлательщикЕН", ПараметрыФО) Тогда 
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.ВидДеятельности");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.ВидДеятельности");
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.ВидДеятельности");
		МассивНепроверяемыхРеквизитов.Добавить("ОС.ВидДеятельности");
		МассивНепроверяемыхРеквизитов.Добавить("Возвраты.ВидДеятельности");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратУслуг.ВидДеятельности");
	Иначе
		// Если это Плательщик ЕН,
		// то проверка Метода расчета ЕН.
		
		// Кассовый.
		Если ПолучитьФункциональнуюОпцию("ПлательщикЕНКассовыйМетод", ПараметрыФО) Тогда 
			МассивНепроверяемыхРеквизитов.Добавить("Товары.ВидДеятельности");
			МассивНепроверяемыхРеквизитов.Добавить("Услуги.ВидДеятельности");
			МассивНепроверяемыхРеквизитов.Добавить("ОС.ВидДеятельности");
			МассивНепроверяемыхРеквизитов.Добавить("Возвраты.ВидДеятельности");
			МассивНепроверяемыхРеквизитов.Добавить("ВозвратУслуг.ВидДеятельности");
		КонецЕсли;	
		
		// Начислением.
		Если ПолучитьФункциональнуюОпцию("ПлательщикЕНМетодНачисления", ПараметрыФО) Тогда 
			МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.ВидДеятельности");
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

// Получает строку, содержащую ключи структуры, разделенные символом разделителя.
//
// Параметры:
//	СтруктураДляПреобразования - Структура - Структура, ключи которой преобразуются в строку.
//	Разделитель - Строка - Разделитель, который вставляется в строку между ключами структуры.
//
// Возвращаемое значение:
//	Результат - Строка, содержащая ключи структуры разделенные разделителем.
//
Функция СтруктураВСтроку(СтруктураДляПреобразования, Разделитель = ",") Экспорт
	
	Результат = "";
	
	Для Каждого Элемент Из СтруктураДляПреобразования Цикл
		
		СимволРазделителя = ?(ПустаяСтрока(Результат), "", Разделитель);
		
		Результат = Результат + СимволРазделителя + Элемент.Ключ;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Получает структуру, содержащую пустые ключи структуры, из строки, разделенной символом разделителя.
//
// Параметры:
//	СтрокаДляПреобразования - Строка - СтрокаДляПреобразования, из которой формируются ключи структуры.
//	Разделитель - Строка - Разделитель, который вставляется в строку между ключами структуры.
//
// Возвращаемое значение:
//	Результат - Строка, содержащая ключи структуры разделенные разделителем.
//
Функция СтрокаВСтруктуру(СтрокаДляПреобразования, Разделитель = ",") Экспорт
	
	Результат = Новый Структура;
	СтрокаПоискаСвойств = СтрокаДляПреобразования;
	
	ПозицияРазделителя = СтрНайти(СтрокаПоискаСвойств,Разделитель);
	Пока ПозицияРазделителя <> 0 Цикл
		Результат.Вставить(СокрЛП(Лев(СтрокаПоискаСвойств, ПозицияРазделителя-1)));
		СтрокаПоискаСвойств = Сред(СтрокаПоискаСвойств, ПозицияРазделителя+1);
		ПозицияРазделителя = СтрНайти(СтрокаПоискаСвойств,Разделитель);
	КонецЦикла;
	Результат.Вставить(СокрЛП(СтрокаПоискаСвойств));
	
	Возврат Результат;
	
КонецФункции

Функция ДоступенПростойИнтерфейс() Экспорт
	
	Возврат ОбщегоНазначения.РазделениеВключено() 
		И ВРЕГ(Метаданные.Имя) = ВРЕГ("БухгалтерияДляКыргызстанаБазовая");
	
КонецФункции

// Установка набора видимых подсистем командного интерфейса 
// и настроек всем пользователям вида интерфейса (Такси / в закладках).
//
// Параметры:
//  Режим - Строка - ИнтерфейсТакси / ИнтерфейсВерсии82 / ИнтерфейсВерсии77 - соответствует константе, которая будет
//                   установлена в Истину
//
Процедура УстановитьРежимКомандногоИнтерфейса(Режим) Экспорт
	
	Если НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	// Установка констант
	РежимТакси = ВРег(Режим) = ВРег("ИнтерфейсТакси");
	Режим82 = ВРег(Режим) = ВРег("ИнтерфейсВерсии82");
	
	Если НЕ РежимТакси
		И НЕ Режим82 Тогда
		Возврат;
	КонецЕсли;
	
	Если ДоступенПростойИнтерфейс()
		И Режим82 Тогда
		// Если доступен простой интерфейс, то переключаться
		// на режим 8.2 
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РежимСоответствуетТекущему = РежимТакси = Константы.ИнтерфейсТакси.Получить()
		И Режим82 = Константы.ИнтерфейсВерсии82.Получить();
	
	Константы.ИнтерфейсТакси.Установить(РежимТакси);
	Константы.ИнтерфейсВерсии82.Установить(Режим82);
	
	// Установка настроек по умолчанию всем пользователям
	
	ВсеПользователи = ПользователиИнформационнойБазы.ПолучитьПользователей();
	НовыйИнтерфейсПользователей = ?(РежимТакси, ВариантИнтерфейсаКлиентскогоПриложения.Такси, 
		ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2);
		
	Если ВсеПользователи.Количество() > 0 Тогда
		Для каждого ПользовательИБ Из ВсеПользователи Цикл
			УстановитьНачальныеНастройки = Истина;
			Если РежимСоответствуетТекущему Тогда
				// Не меняем настройки, если интерфейс пользователя и ранее соответствовал устанавливаемому.
				НастройкиКлиента = ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиКлиентскогоПриложения",,, ПользовательИБ.Имя);
				Если НастройкиКлиента <> Неопределено Тогда
					ТекущийИнтерфейсПользователя = НастройкиКлиента.ВариантИнтерфейсаКлиентскогоПриложения;
					УстановитьНачальныеНастройки = ТекущийИнтерфейсПользователя <> НовыйИнтерфейсПользователей;
				КонецЕсли;
			КонецЕсли;
			Если УстановитьНачальныеНастройки Тогда
				ПользователиСлужебный.УстановитьНачальныеНастройки(ПользовательИБ.Имя);
			КонецЕсли;
		КонецЦикла;
	Иначе
		УстановитьНачальныеНастройки = Истина;
		Если РежимСоответствуетТекущему Тогда
			// Не меняем настройки, если интерфейс пользователя и ранее соответствовал устанавливаемому.
			НастройкиКлиента = ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиКлиентскогоПриложения",,, "");
			Если НастройкиКлиента <> Неопределено Тогда
				ТекущийИнтерфейсПользователя = НастройкиКлиента.ВариантИнтерфейсаКлиентскогоПриложения;
				УстановитьНачальныеНастройки = ТекущийИнтерфейсПользователя <> НовыйИнтерфейсПользователей;
			КонецЕсли;
		КонецЕсли;
		Если УстановитьНачальныеНастройки Тогда
			ПользователиСлужебный.УстановитьНачальныеНастройки("");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ПредлагатьОбновитьВерсиюПрограммы(Параметры) Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Параметры.Вставить("ЭтоАдминистраторСистемы", Пользователи.ЭтоПолноправныйПользователь(, Истина));
	ДатаТекущейВерсии = Константы.ДатаТекущейВерсии.Получить();
	НадоПредлагать = ЗначениеЗаполнено(ДатаТекущейВерсии) 
		И ТекущаяДатаСеанса() > ДобавитьМесяц(ДатаТекущейВерсии, 2);
	Возврат НадоПредлагать;
	
КонецФункции

// Процедура записывает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//  Настройка    - Строка - вид настройки
//  Значение     - значение настройки
//  ИмяПользователяИБ - Строка - имя пользователя программы, для которого устанавливается настройка
//
// Возвращаемое значение:
//  Нет
//
Процедура УстановитьЗначениеПоУмолчанию(Настройка, Значение, ИмяПользователяИБ = Неопределено) Экспорт

	Если ВРег(Настройка) = ВРег("ОсновнаяОрганизация")
		ИЛИ ВРег(Настройка) = ВРег("ВариантРабочегоСтола") Тогда
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ВРег(Настройка), "ЗначениеПоУмолчанию", Значение,, ИмяПользователяИБ);
		
	ИначеЕсли ВРег(Настройка) = ВРег("РабочаяДата") Тогда
		ОбщегоНазначения.УстановитьРабочуюДатуПользователя(Значение, ИмяПользователяИБ);
	Иначе
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ВРег(Настройка), "ЗначениеПоУмолчанию", Значение,, ИмяПользователяИБ);
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьЗначениеПоУмолчанию()

// Функция обрабатывает данные справочника ЗадачиБухгалтера, РС СписокЗадачБухгалтера 
// и формирует список задач до конца следующего (от текущей даты) месяца.
//
// Параметры:
//	ВернутьТаблицуЗначений - Булево - признак возврата таблицы значения или массива наименований задач.
//
// Возвращаемое значение:
//	ТаблицаЗначенийЗадачи - ТаблицаЗначений - содержащая актуальные данные по задачам.
//  МассивЗадач - Массив - содержащий наименования невыполненных задач.
//
Функция ЗадачиБухгалтера(ВернутьТаблицуЗначений) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачиБухгалтера.Ссылка КАК Ссылка,
		|	ЗадачиБухгалтера.Наименование КАК Наименование,
		|	ЗадачиБухгалтера.Срок КАК Срок,
		|	ЗадачиБухгалтера.Периодичность КАК Периодичность,
		|	ЗадачиБухгалтера.Архив КАК Архив
		|ИЗ
		|	Справочник.ЗадачиБухгалтера КАК ЗадачиБухгалтера
		|ГДЕ
		|	НЕ ЗадачиБухгалтера.ПометкаУдаления
		|	И НЕ ЗадачиБухгалтера.Архив
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокЗадачБухгалтера.Срок КАК Срок,
		|	СписокЗадачБухгалтера.Задача КАК Задача,
		|	СписокЗадачБухгалтера.ДатаПлана КАК ДатаПлана,
		|	СписокЗадачБухгалтера.Выполнено КАК Выполнено,
		|	СписокЗадачБухгалтера.Комментарий КАК Комментарий
		|ИЗ
		|	РегистрСведений.СписокЗадачБухгалтера КАК СписокЗадачБухгалтера";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаСправочник 		= МассивРезультатов[0].Выбрать();
	ТаблицаЗначенийРегистр 	= МассивРезультатов[1].Выгрузить();
	
	МассивТипаСправочника = Новый Массив;
	МассивТипаСправочника.Добавить(Тип("СправочникСсылка.ЗадачиБухгалтера"));
	
	ОписаниеТипаСправочника = Новый ОписаниеТипов(МассивТипаСправочника);
	
	ТаблицаЗначенийЗадачи = Новый ТаблицаЗначений;               
	ТаблицаЗначенийЗадачи.Колонки.Добавить("ОписаниеЗадачи", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТаблицаЗначенийЗадачи.Колонки.Добавить("Срок", 		 	ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаЗначенийЗадачи.Колонки.Добавить("ДатаПлана", 	 	ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаЗначенийЗадачи.Колонки.Добавить("Комментарий", 	ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТаблицаЗначенийЗадачи.Колонки.Добавить("Выполнено", 	 	Новый ОписаниеТипов("Булево"));
	ТаблицаЗначенийЗадачи.Колонки.Добавить("Задача", 	 	ОписаниеТипаСправочника);
	
	МассивЗадач = Новый Массив();	
	
	МассивМесяцев = Новый Массив();
	МассивМесяцев.Добавить("январь");
	МассивМесяцев.Добавить("февраль");
	МассивМесяцев.Добавить("март");
	МассивМесяцев.Добавить("апрель");
	МассивМесяцев.Добавить("май");
	МассивМесяцев.Добавить("июнь");
	МассивМесяцев.Добавить("июль");
	МассивМесяцев.Добавить("август");
	МассивМесяцев.Добавить("сентябрь");
	МассивМесяцев.Добавить("октябрь");
	МассивМесяцев.Добавить("ноябрь");
	МассивМесяцев.Добавить("декабрь");
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Пока ВыборкаСправочник.Следующий() Цикл
		
		// Неделя
		Если ВыборкаСправочник.Периодичность = 1 Тогда
			
			Дата = ТекущаяДата;
			КоличествоДней = День(КонецМесяца(Дата)) - День(Дата) + День(КонецМесяца(КонецМесяца(Дата) + 1));
			
			Для День = 1 По КоличествоДней Цикл
				
				Если ДеньНедели(Дата) = ВыборкаСправочник.Срок Тогда
					
					Отбор = Новый Структура();
					Отбор.Вставить("Срок", Дата(Год(Дата), Месяц(Дата), День(Дата)));
					Отбор.Вставить("Задача", ВыборкаСправочник.Ссылка);
					
					МассивСтрок = ТаблицаЗначенийРегистр.НайтиСтроки(Отбор);
					
					Если МассивСтрок.Количество() > 0 И ВернутьТаблицуЗначений Тогда
						СтрокаИзРегистра = МассивСтрок[0];
						
						НоваяСтрокаТаблицы = ТаблицаЗначенийЗадачи.Добавить();
						НоваяСтрокаТаблицы.Срок = Дата;
						НоваяСтрокаТаблицы.Задача = ВыборкаСправочник.Ссылка;
						НоваяСтрокаТаблицы.ДатаПлана = СтрокаИзРегистра.ДатаПлана;
						НоваяСтрокаТаблицы.Выполнено = СтрокаИзРегистра.Выполнено;
						НоваяСтрокаТаблицы.Комментарий = СтрокаИзРегистра.Комментарий;
						НоваяСтрокаТаблицы.ОписаниеЗадачи = СтрШаблон(НСтр("ru = '%1 ""за %2 %3 г.""'"), 
								ВыборкаСправочник.Наименование, МассивМесяцев[Месяц(Дата) - 1], Формат(Год(Дата), "ЧГ=0"));
							
					Иначе
						Если ВернутьТаблицуЗначений Тогда
							НоваяСтрокаТаблицы = ТаблицаЗначенийЗадачи.Добавить();
							НоваяСтрокаТаблицы.Срок = Дата;
							НоваяСтрокаТаблицы.Задача = ВыборкаСправочник.Ссылка;
							НоваяСтрокаТаблицы.ДатаПлана = Неопределено;
							НоваяСтрокаТаблицы.Выполнено = Ложь;
							НоваяСтрокаТаблицы.Комментарий = "";
							НоваяСтрокаТаблицы.ОписаниеЗадачи = СтрШаблон(НСтр("ru = '%1 ""за %2 %3 г.""'"), 
									ВыборкаСправочник.Наименование, МассивМесяцев[Месяц(Дата) - 1], Формат(Год(Дата), "ЧГ=0"));
								
						ИначеЕсли МассивСтрок.Количество() = 0 Тогда
							МассивЗадач.Добавить(СтрШаблон(НСтр("ru = '%1 ""за %2 %3 г.""'"), 
									ВыборкаСправочник.Наименование, МассивМесяцев[Месяц(Дата) - 1], Формат(Год(Дата), "ЧГ=0")));
									
						ИначеЕсли НЕ МассивСтрок[0].Выполнено Тогда
							МассивЗадач.Добавить(СтрШаблон(НСтр("ru = '%1 ""за %2 %3 г.""'"), 
									ВыборкаСправочник.Наименование, МассивМесяцев[Месяц(Дата) - 1], Формат(Год(Дата), "ЧГ=0")));
						КонецЕсли;
					КонецЕсли;	
					
				КонецЕсли;	
				
				Дата = Дата + 86400;
			КонецЦикла;	
			
		// Месяц
		ИначеЕсли ВыборкаСправочник.Периодичность = 2 Тогда
			
			ПоследнийДеньТекущегоМесяца = День(КонецМесяца(ТекущаяДата)); 
			ДатаСрокаБольшеКонцаМесяца = ВыборкаСправочник.Срок > ПоследнийДеньТекущегоМесяца;
			
			Если День(ТекущаяДата) <= ВыборкаСправочник.Срок ИЛИ ДатаСрокаБольшеКонцаМесяца Тогда
				
				Дата = Дата(Год(ТекущаяДата), 
							Месяц(ТекущаяДата), 
							?(ДатаСрокаБольшеКонцаМесяца, ПоследнийДеньТекущегоМесяца, ВыборкаСправочник.Срок));	
				
				Отбор = Новый Структура();
				Отбор.Вставить("Срок", Дата);
				Отбор.Вставить("Задача", ВыборкаСправочник.Ссылка);
				
				МассивСтрок = ТаблицаЗначенийРегистр.НайтиСтроки(Отбор);	
				
				Месяц = Месяц(Дата) - 2;
				Месяц = ?(Месяц < 0, 11, Месяц);
				
				Если МассивСтрок.Количество() > 0 И ВернутьТаблицуЗначений Тогда
					СтрокаИзРегистра = МассивСтрок[0];
					
					НоваяСтрокаТаблицы = ТаблицаЗначенийЗадачи.Добавить();
					НоваяСтрокаТаблицы.Срок = Дата;
					НоваяСтрокаТаблицы.Задача = ВыборкаСправочник.Ссылка;
					НоваяСтрокаТаблицы.ДатаПлана = СтрокаИзРегистра.ДатаПлана;
					НоваяСтрокаТаблицы.Выполнено = СтрокаИзРегистра.Выполнено;
					НоваяСтрокаТаблицы.Комментарий = СтрокаИзРегистра.Комментарий;
					НоваяСтрокаТаблицы.ОписаниеЗадачи = СтрШаблон(НСтр("ru = '%1 ""за %2 %3 г.""'"), 
							ВыборкаСправочник.Наименование, МассивМесяцев[Месяц], Формат(Год(Дата), "ЧГ=0"));
						
				Иначе
					Если ВернутьТаблицуЗначений Тогда
						НоваяСтрокаТаблицы = ТаблицаЗначенийЗадачи.Добавить();
						НоваяСтрокаТаблицы.Срок = Дата;
						НоваяСтрокаТаблицы.Задача = ВыборкаСправочник.Ссылка;
						НоваяСтрокаТаблицы.ДатаПлана = Неопределено;
						НоваяСтрокаТаблицы.Выполнено = Ложь;
						НоваяСтрокаТаблицы.Комментарий = "";
						НоваяСтрокаТаблицы.ОписаниеЗадачи = СтрШаблон(НСтр("ru = '%1 ""за %2 %3 г.""'"), 
								ВыборкаСправочник.Наименование, МассивМесяцев[Месяц], Формат(Год(Дата), "ЧГ=0"));
							
					ИначеЕсли МассивСтрок.Количество() = 0 Тогда
						МассивЗадач.Добавить(СтрШаблон(НСтр("ru = '%1 ""за %2 %3 г.""'"), 
								ВыборкаСправочник.Наименование, МассивМесяцев[Месяц], Формат(Год(Дата), "ЧГ=0")));
								
					ИначеЕсли НЕ МассивСтрок[0].Выполнено Тогда
							МассивЗадач.Добавить(СтрШаблон(НСтр("ru = '%1 ""за %2 %3 г.""'"), 
									ВыборкаСправочник.Наименование, МассивМесяцев[Месяц], Формат(Год(Дата), "ЧГ=0")));								
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
			
			ПоследнийДеньСледующегоМесяца = День(КонецМесяца(КонецМесяца(ТекущаяДата) + 1)); 
			ДатаСрокаБольшеКонцаМесяца = ВыборкаСправочник.Срок > ПоследнийДеньТекущегоМесяца;
			
			Дата = Дата(Год(КонецМесяца(КонецМесяца(ТекущаяДата) + 1)), 
						Месяц(КонецМесяца(КонецМесяца(ТекущаяДата) + 1)), 
						Мин(ПоследнийДеньСледующегоМесяца, ВыборкаСправочник.Срок));	
			
			Отбор = Новый Структура();
			Отбор.Вставить("Срок", Дата);
			Отбор.Вставить("Задача", ВыборкаСправочник.Ссылка);
			
			МассивСтрок = ТаблицаЗначенийРегистр.НайтиСтроки(Отбор);	
			
			Месяц = Месяц(Дата) - 2;
			Месяц = ?(Месяц < 0, 11, Месяц);
			
			Если МассивСтрок.Количество() > 0 И ВернутьТаблицуЗначений Тогда
				СтрокаИзРегистра = МассивСтрок[0];
				
				НоваяСтрокаТаблицы = ТаблицаЗначенийЗадачи.Добавить();
				НоваяСтрокаТаблицы.Срок = Дата;
				НоваяСтрокаТаблицы.Задача = ВыборкаСправочник.Ссылка;
				НоваяСтрокаТаблицы.ДатаПлана = СтрокаИзРегистра.ДатаПлана;
				НоваяСтрокаТаблицы.Выполнено = СтрокаИзРегистра.Выполнено;
				НоваяСтрокаТаблицы.Комментарий = СтрокаИзРегистра.Комментарий;
				НоваяСтрокаТаблицы.ОписаниеЗадачи = СтрШаблон(НСтр("ru = '%1 ""за %2 %3 г.""'"), 
						ВыборкаСправочник.Наименование, МассивМесяцев[Месяц], Формат(Год(Дата), "ЧГ=0"));
					
			Иначе
				Если ВернутьТаблицуЗначений Тогда
					НоваяСтрокаТаблицы = ТаблицаЗначенийЗадачи.Добавить();
					НоваяСтрокаТаблицы.Срок = Дата;
					НоваяСтрокаТаблицы.Задача = ВыборкаСправочник.Ссылка;
					НоваяСтрокаТаблицы.ДатаПлана = Неопределено;
					НоваяСтрокаТаблицы.Выполнено = Ложь;
					НоваяСтрокаТаблицы.Комментарий = "";
					НоваяСтрокаТаблицы.ОписаниеЗадачи = СтрШаблон(НСтр("ru = '%1 ""за %2 %3 г.""'"), 
							ВыборкаСправочник.Наименование, МассивМесяцев[Месяц], Формат(Год(Дата), "ЧГ=0"));
						
				ИначеЕсли МассивСтрок.Количество() = 0 Тогда
					МассивЗадач.Добавить(СтрШаблон(НСтр("ru = '%1 ""за %2 %3 г.""'"), 
							ВыборкаСправочник.Наименование, МассивМесяцев[Месяц], Формат(Год(Дата), "ЧГ=0")));
							
				ИначеЕсли НЕ МассивСтрок[0].Выполнено Тогда
							МассивЗадач.Добавить(СтрШаблон(НСтр("ru = '%1 ""за %2 %3 г.""'"), 
									ВыборкаСправочник.Наименование, МассивМесяцев[Месяц], Формат(Год(Дата), "ЧГ=0")));
				КонецЕсли;
			КонецЕсли;
			
		// Квартал
		ИначеЕсли ВыборкаСправочник.Периодичность = 3 Тогда 
			
			КонецСледующегоМесяца = КонецМесяца(КонецМесяца(ТекущаяДата) + 1);
			
			МесяцСрока = Месяц(ВыборкаСправочник.Срок);
			
			Дата = Неопределено;
			                                 
			Если МесяцСрока = 1 ИЛИ МесяцСрока = 4 ИЛИ МесяцСрока = 7 ИЛИ МесяцСрока = 10 Тогда
				
				МассивДат = Новый Массив();
				МассивДат.Добавить(Дата(Год(КонецСледующегоМесяца), 01, 
						Мин(День(КонецМесяца(Дата(Год(КонецСледующегоМесяца), 01, 01))), День(ВыборкаСправочник.Срок))));
				МассивДат.Добавить(Дата(Год(ТекущаяДата), 04, 
						Мин(День(КонецМесяца(Дата(Год(ТекущаяДата), 04, 01))), День(ВыборкаСправочник.Срок))));
				МассивДат.Добавить(Дата(Год(ТекущаяДата), 07, 
						Мин(День(КонецМесяца(Дата(Год(ТекущаяДата), 07, 01))), День(ВыборкаСправочник.Срок))));
				МассивДат.Добавить(Дата(Год(ТекущаяДата), 10, 
						Мин(День(КонецМесяца(Дата(Год(ТекущаяДата), 10, 01))), День(ВыборкаСправочник.Срок))));
				
	            Для Каждого СтрокаМассива Из МассивДат Цикл
					
					Если СтрокаМассива >= ТекущаяДата И СтрокаМассива <= КонецСледующегоМесяца Тогда
						
						Дата = СтрокаМассива;
						Прервать;						
					КонецЕсли;
				КонецЦикла;
				          				
			ИначеЕсли МесяцСрока = 2 ИЛИ МесяцСрока = 5 ИЛИ МесяцСрока = 8 ИЛИ МесяцСрока = 11 Тогда
				
				МассивДат = Новый Массив();
				МассивДат.Добавить(Дата(Год(ТекущаяДата), 02, 
						Мин(День(КонецМесяца(Дата(Год(ТекущаяДата), 02, 01))), День(ВыборкаСправочник.Срок))));
				МассивДат.Добавить(Дата(Год(ТекущаяДата), 05, 
						Мин(День(КонецМесяца(Дата(Год(ТекущаяДата), 05, 01))), День(ВыборкаСправочник.Срок))));
				МассивДат.Добавить(Дата(Год(ТекущаяДата), 08, 
						Мин(День(КонецМесяца(Дата(Год(ТекущаяДата), 08, 01))), День(ВыборкаСправочник.Срок))));
				МассивДат.Добавить(Дата(Год(ТекущаяДата), 11, 
						Мин(День(КонецМесяца(Дата(Год(ТекущаяДата), 11, 01))), День(ВыборкаСправочник.Срок))));
				
	            Для Каждого СтрокаМассива Из МассивДат Цикл
					
					Если СтрокаМассива >= ТекущаяДата И СтрокаМассива <= КонецСледующегоМесяца Тогда
						
						Дата = СтрокаМассива;
						Прервать;						
					КонецЕсли;
				КонецЦикла;
				
			Иначе	
			    МассивДат = Новый Массив();
				МассивДат.Добавить(Дата(Год(ТекущаяДата), 03, 
						Мин(День(КонецМесяца(Дата(Год(ТекущаяДата), 03, 01))), День(ВыборкаСправочник.Срок))));
				МассивДат.Добавить(Дата(Год(ТекущаяДата), 06, 
						Мин(День(КонецМесяца(Дата(Год(ТекущаяДата), 06, 01))), День(ВыборкаСправочник.Срок))));
				МассивДат.Добавить(Дата(Год(ТекущаяДата), 09, 
						Мин(День(КонецМесяца(Дата(Год(ТекущаяДата), 09, 01))), День(ВыборкаСправочник.Срок))));
				МассивДат.Добавить(Дата(Год(ТекущаяДата), 12, 
						Мин(День(КонецМесяца(Дата(Год(ТекущаяДата), 12, 01))), День(ВыборкаСправочник.Срок))));
				
	            Для Каждого СтрокаМассива Из МассивДат Цикл
					
					Если СтрокаМассива >= ТекущаяДата И СтрокаМассива <= КонецСледующегоМесяца Тогда
						
						Дата = СтрокаМассива;
						Прервать;						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;	
			
			Если Дата <> Неопределено Тогда
				
				Отбор = Новый Структура();
				Отбор.Вставить("Срок", Дата);
				Отбор.Вставить("Задача", ВыборкаСправочник.Ссылка);
				
				МассивСтрок = ТаблицаЗначенийРегистр.НайтиСтроки(Отбор);	
				
				// Определение предыдущего квартала по дате.
				Если Месяц(Дата) < 4 Тогда
					Квартал = 4;	
				ИначеЕсли Месяц(Дата) < 7 Тогда
					Квартал = 1;
				ИначеЕсли Месяц(Дата) < 10 Тогда	
					Квартал = 2;
				Иначе
					Квартал = 3;
				КонецЕсли;	
				
				Если МассивСтрок.Количество() > 0 И ВернутьТаблицуЗначений Тогда
					СтрокаИзРегистра = МассивСтрок[0];
					
					НоваяСтрокаТаблицы = ТаблицаЗначенийЗадачи.Добавить();
					НоваяСтрокаТаблицы.Срок = Дата;
					НоваяСтрокаТаблицы.Задача = ВыборкаСправочник.Ссылка;
					НоваяСтрокаТаблицы.ДатаПлана = СтрокаИзРегистра.ДатаПлана;
					НоваяСтрокаТаблицы.Выполнено = СтрокаИзРегистра.Выполнено;
					НоваяСтрокаТаблицы.Комментарий = СтрокаИзРегистра.Комментарий;
					НоваяСтрокаТаблицы.ОписаниеЗадачи = СтрШаблон(НСтр("ru = '%1 ""за %2 квартал %3 г.""'"), 
							ВыборкаСправочник.Наименование, Квартал, Формат(Год(Дата), "ЧГ=0"));
					//НоваяСтрокаТаблицы.ОписаниеЗадачи = СтрШаблон(НСтр("ru = '%1 ""за %2 %3 г.""'"),
							//ВыборкаСправочник.Наименование, МассивМесяцев[Месяц(Дата) - 1], Формат(Год(Дата), "ЧГ=0"));
						
				Иначе
					Если ВернутьТаблицуЗначений Тогда
						НоваяСтрокаТаблицы = ТаблицаЗначенийЗадачи.Добавить();
						НоваяСтрокаТаблицы.Срок = Дата;
						НоваяСтрокаТаблицы.Задача = ВыборкаСправочник.Ссылка;
						НоваяСтрокаТаблицы.ДатаПлана = Неопределено;
						НоваяСтрокаТаблицы.Выполнено = Ложь;
						НоваяСтрокаТаблицы.Комментарий = "";
						НоваяСтрокаТаблицы.ОписаниеЗадачи = СтрШаблон(НСтр("ru = '%1 ""за %2 квартал %3 г.""'"), 
							ВыборкаСправочник.Наименование, Квартал, Формат(Год(Дата), "ЧГ=0"));
						//НоваяСтрокаТаблицы.ОписаниеЗадачи = СтрШаблон(НСтр("ru = '%1 ""за %2 %3 г.""'"), 
						//		ВыборкаСправочник.Наименование, МассивМесяцев[Месяц(Дата) - 1], Формат(Год(Дата), "ЧГ=0"));
							
					ИначеЕсли МассивСтрок.Количество() = 0 Тогда
						МассивЗадач.Добавить(СтрШаблон(НСтр("ru = '%1 ""за %2 квартал %3 г.""'"), 
								ВыборкаСправочник.Наименование, Квартал, Формат(Год(Дата), "ЧГ=0")));
						//МассивЗадач.Добавить(СтрШаблон(НСтр("ru = '%1 ""за %2 %3 г.""'"), 
						//		ВыборкаСправочник.Наименование, МассивМесяцев[Месяц(Дата) - 1], Формат(Год(Дата), "ЧГ=0")));
								
					ИначеЕсли НЕ МассивСтрок[0].Выполнено Тогда
							МассивЗадач.Добавить(СтрШаблон(НСтр("ru = '%1 ""за %2 квартал %3 г.""'"), 
								ВыборкаСправочник.Наименование, Квартал, Формат(Год(Дата), "ЧГ=0")));
							//МассивЗадач.Добавить(СтрШаблон(НСтр("ru = '%1 ""за %2 %3 г.""'"), 
							//		ВыборкаСправочник.Наименование, МассивМесяцев[Месяц(Дата) - 1], Формат(Год(Дата), "ЧГ=0")));
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;	
			
		// год	
		ИначеЕсли ВыборкаСправочник.Периодичность = 4 Тогда
			
			Если Год(ВыборкаСправочник.Срок) < Год(ТекущаяДата) Тогда
				
				Если Месяц(ВыборкаСправочник.Срок) = 2 Тогда
					
					ДеньКонцаМесяцаСрока = День(ВыборкаСправочник.Срок);
					ДеньКонцаМесяцаСрокаТекущегоГода = День(КонецМесяца(Дата(Год(ТекущаяДата), 02,01)));
					
					ДатаСрока = Дата(Год(ТекущаяДата), 
								Месяц(ВыборкаСправочник.Срок), 
								Мин(ДеньКонцаМесяцаСрока, ДеньКонцаМесяцаСрокаТекущегоГода));
					
				Иначе	
					ДатаСрока = Дата(Год(ТекущаяДата), 
								Месяц(ВыборкаСправочник.Срок), 
								День(ВыборкаСправочник.Срок));
				КонецЕсли;														
			Иначе	
			    ДатаСрока = ВыборкаСправочник.Срок;
			КонецЕсли;
			
			Если ДатаСрока >= ТекущаяДата И ДатаСрока <= КонецМесяца(КонецМесяца(ТекущаяДата) + 1) Тогда
				
				Отбор = Новый Структура();
				Отбор.Вставить("Срок", ДатаСрока);
				Отбор.Вставить("Задача", ВыборкаСправочник.Ссылка);
				
				МассивСтрок = ТаблицаЗначенийРегистр.НайтиСтроки(Отбор);	
				
				Если МассивСтрок.Количество() > 0 И ВернутьТаблицуЗначений Тогда
					СтрокаИзРегистра = МассивСтрок[0];
					
					НоваяСтрокаТаблицы = ТаблицаЗначенийЗадачи.Добавить();
					НоваяСтрокаТаблицы.Срок = ДатаСрока;
					НоваяСтрокаТаблицы.Задача = ВыборкаСправочник.Ссылка;
					НоваяСтрокаТаблицы.ДатаПлана = СтрокаИзРегистра.ДатаПлана;
					НоваяСтрокаТаблицы.Выполнено = СтрокаИзРегистра.Выполнено;
					НоваяСтрокаТаблицы.Комментарий = СтрокаИзРегистра.Комментарий;
					НоваяСтрокаТаблицы.ОписаниеЗадачи = СтрШаблон(НСтр("ru = '%1 ""за %2 г.""'"), 
							ВыборкаСправочник.Наименование, Формат(Год(ДатаСрока) - 1, "ЧГ=0"));
						
				Иначе
					Если ВернутьТаблицуЗначений Тогда
						НоваяСтрокаТаблицы = ТаблицаЗначенийЗадачи.Добавить();
						НоваяСтрокаТаблицы.Срок = ДатаСрока;
						НоваяСтрокаТаблицы.Задача = ВыборкаСправочник.Ссылка;
						НоваяСтрокаТаблицы.ДатаПлана = Неопределено;
						НоваяСтрокаТаблицы.Выполнено = Ложь;
						НоваяСтрокаТаблицы.Комментарий = "";
						НоваяСтрокаТаблицы.ОписаниеЗадачи = СтрШаблон(НСтр("ru = '%1 ""за %2 г.""'"), 
								ВыборкаСправочник.Наименование, Формат(Год(ДатаСрока) - 1, "ЧГ=0"));
							
					ИначеЕсли МассивСтрок.Количество() = 0 Тогда
						МассивЗадач.Добавить(СтрШаблон(НСтр("ru = '%1 ""за %2 г.""'"), 
								ВыборкаСправочник.Наименование, Формат(Год(ДатаСрока) - 1, "ЧГ=0")));
								
					ИначеЕсли НЕ МассивСтрок[0].Выполнено Тогда
							МассивЗадач.Добавить(СтрШаблон(НСтр("ru = '%1 ""за %2 г.""'"), 
									ВыборкаСправочник.Наименование, Формат(Год(ДатаСрока) - 1, "ЧГ=0")));
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;	
			
		// произвольно	
		ИначеЕсли ВыборкаСправочник.Периодичность = 5 Тогда
			
			Если ВыборкаСправочник.Срок >= ТекущаяДата И ВыборкаСправочник.Срок <= КонецМесяца(КонецМесяца(ТекущаяДата) + 1) Тогда
				
				Отбор = Новый Структура();
				Отбор.Вставить("Срок", ВыборкаСправочник.Срок);
				Отбор.Вставить("Задача", ВыборкаСправочник.Ссылка);
				
				МассивСтрок = ТаблицаЗначенийРегистр.НайтиСтроки(Отбор);	
				
				Если МассивСтрок.Количество() > 0 И ВернутьТаблицуЗначений Тогда
					СтрокаИзРегистра = МассивСтрок[0];
					
					НоваяСтрокаТаблицы = ТаблицаЗначенийЗадачи.Добавить();
					НоваяСтрокаТаблицы.Срок = ВыборкаСправочник.Срок;
					НоваяСтрокаТаблицы.Задача = ВыборкаСправочник.Ссылка;
					НоваяСтрокаТаблицы.ДатаПлана = СтрокаИзРегистра.ДатаПлана;
					НоваяСтрокаТаблицы.Выполнено = СтрокаИзРегистра.Выполнено;
					НоваяСтрокаТаблицы.Комментарий = СтрокаИзРегистра.Комментарий;
					НоваяСтрокаТаблицы.ОписаниеЗадачи = СтрШаблон(НСтр("ru = '%1 ""за %2 %3 г.""'"), 
							ВыборкаСправочник.Наименование, МассивМесяцев[Месяц(ВыборкаСправочник.Срок) - 1], Формат(Год(ВыборкаСправочник.Срок), "ЧГ=0"));
						
				Иначе
					Если ВернутьТаблицуЗначений Тогда
						НоваяСтрокаТаблицы = ТаблицаЗначенийЗадачи.Добавить();
						НоваяСтрокаТаблицы.Срок = ВыборкаСправочник.Срок;
						НоваяСтрокаТаблицы.Задача = ВыборкаСправочник.Ссылка;
						НоваяСтрокаТаблицы.ДатаПлана = Неопределено;
						НоваяСтрокаТаблицы.Выполнено = Ложь;
						НоваяСтрокаТаблицы.Комментарий = "";
						НоваяСтрокаТаблицы.ОписаниеЗадачи = СтрШаблон(НСтр("ru = '%1 ""за %2 %3 г.""'"), 
								ВыборкаСправочник.Наименование, МассивМесяцев[Месяц(ВыборкаСправочник.Срок) - 1], Формат(Год(ВыборкаСправочник.Срок), "ЧГ=0"));
							
					ИначеЕсли МассивСтрок.Количество() = 0 Тогда
						МассивЗадач.Добавить(СтрШаблон(НСтр("ru = '%1 ""за %2 %3 г.""'"), 
								ВыборкаСправочник.Наименование, МассивМесяцев[Месяц(ВыборкаСправочник.Срок) - 1], Формат(Год(ВыборкаСправочник.Срок), "ЧГ=0")));
								
					ИначеЕсли НЕ МассивСтрок[0].Выполнено Тогда
							МассивЗадач.Добавить(СтрШаблон(НСтр("ru = '%1 ""за %2 %3 г.""'"), 
									ВыборкаСправочник.Наименование, МассивМесяцев[Месяц(ВыборкаСправочник.Срок) - 1], Формат(Год(ВыборкаСправочник.Срок), "ЧГ=0")));
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	
	Если ВернутьТаблицуЗначений Тогда
		Возврат ТаблицаЗначенийЗадачи;	
	Иначе
		Возврат МассивЗадач;
	КонецЕсли;	
КонецФункции

// Добавляет в коллекцию оформляемых полей компоновки данных новое поле
//
// Параметры:
//	КоллекцияОформляемыхПолей 	- коллекция оформляемых полей КД
//	ИмяПоля						- Строка - имя поля
//
// Возвращаемое значение:
//	ОформляемоеПолеКомпоновкиДанных - созданное поле
//
// Пример:
// 	Форма.УсловноеОформление.Элементы[0].Поля
//
Функция ДобавитьОформляемоеПоле(КоллекцияОформляемыхПолей, ИмяПоля) Экспорт
	
	ПолеЭлемента 		= КоллекцияОформляемыхПолей.Элементы.Добавить();
	ПолеЭлемента.Поле 	= Новый ПолеКомпоновкиДанных(ИмяПоля);

	Возврат ПолеЭлемента;
	
КонецФункции

Функция ДомашняяСтраницаСервиса() Экспорт
	
	ДомашняяСтраница = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.ИнформационныеСсылкиДляФорм.ДомашняяСтраница, "Наименование");
	Если ДомашняяСтраница = "Домашняя страница" Тогда
		ДомашняяСтраница = "";
	КонецЕсли;
	
	Возврат ДомашняяСтраница;
	
КонецФункции

// Заменяет отбор, установленный пользователем в сохраненной настройке списка, на отбор, установленный программно при создании формы списка.
// Вызывается при восстановлении пользовательских настроек динамического списка
// из обработчика списка ПередЗагрузкойПользовательскихНастроекНаСервере.
//
// Параметры:
//  Список      - ДинамическийСписок - Динамический список, для которого устанавливается отбор.
//  Настройки   - ПользовательскиеНастройкиКомпоновкиДанных - Восстанавливаемые настройки списка.
//  ИмяОтбора   - Строка - Имя элемента отбора.
//
Процедура ВосстановитьОтборСписка(Список, Настройки, ИмяОтбора) Экспорт

	Если Настройки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Отборы = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор, ИмяОтбора);
	
	Если Отборы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементОтбора = Отборы[0];
	ИдентификаторНастройки = ЭлементОтбора.ИдентификаторПользовательскойНастройки;
	
	Для каждого ЭлементНастроек Из Настройки.Элементы Цикл
		Если ТипЗнч(ЭлементНастроек) = Тип("ЭлементОтбораКомпоновкиДанных") 
			И ЭлементНастроек.ИдентификаторПользовательскойНастройки = ИдентификаторНастройки Тогда
			ЭлементНастроек.ПравоеЗначение = ЭлементОтбора.ПравоеЗначение;
			ЭлементНастроек.Использование  = ЭлементОтбора.Использование;
			Прервать;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Раскладывает переданный список значений или массив на соотвествие по типам значений
//
// Параметры:
//  СписокОбъектов - Массив - ссылки на объекты метаданных.
//
// Возвращаемое значение:
//  Соответствие - соответствие в котором:
//   Ключ - Тип - тип объекта метаданных.
//   Значение - Массив - массив объектов типа.
//
Функция РазложитьСписокПоТипамОбъектов(СписокОбъектов) Экспорт
	
	СтруктураТипов = Новый Соответствие;
	
	Для Каждого Объект Из СписокОбъектов Цикл
		
		МетаданныеОбъекта = Объект.Метаданные();
		
		Если СтруктураТипов.Получить(МетаданныеОбъекта) = Неопределено Тогда
			
			МассивОбъектов = Новый Массив;
			СтруктураТипов.Вставить(МетаданныеОбъекта, МассивОбъектов);
			
		КонецЕсли;
		
		СтруктураТипов[МетаданныеОбъекта].Добавить(Объект);
		
	КонецЦикла;
	
	Возврат СтруктураТипов;
	
КонецФункции

// Раскладывает переданный список значений или массив на соотвествие по типам значений
//
// Параметры:
//  СписокОбъектов - Массив - ссылки на объекты метаданных.
//
// Возвращаемое значение:
//  Соответствие - соответствие в котором:
//   Ключ - Тип - тип значения объекта.
//   Значение - Массив - массив объектов типа.
//
Функция РазложитьСписокПоТипамЗначенийОбъектов(СписокОбъектов) Экспорт
	
	СтруктураТипов = Новый Соответствие;
	
	Для Каждого Объект Из СписокОбъектов Цикл
		
		ТипЗначенияОбъекта = ТипЗнч(Объект);
		
		Если СтруктураТипов.Получить(ТипЗначенияОбъекта) = Неопределено Тогда
			
			МассивОбъектов = Новый Массив;
			СтруктураТипов.Вставить(ТипЗначенияОбъекта, МассивОбъектов);
			
		КонецЕсли;
		
		СтруктураТипов[ТипЗначенияОбъекта].Добавить(Объект);
		
	КонецЦикла;
	
	Возврат СтруктураТипов;
	
КонецФункции

#Область НастройкиПараметровУчета

// Функция определяет параметры учета по счетам.
// 
// Возвращаемое значение:
//  ПараметрыУчета - Структура
//
Функция ОпределитьПараметрыУчета() Экспорт

	ПараметрыУчета = Новый Структура;
	ПараметрыУчета.Вставить("ВестиПартионныйУчет",               		Ложь);
	ПараметрыУчета.Вставить("СкладскойУчет",                     		0);
	ПараметрыУчета.Вставить("ИспользоватьОборотнуюНоменклатуру", 		Ложь);
	ПараметрыУчета.Вставить("ВестиУчетПоСтатьямДДС",             		Ложь);
	ПараметрыУчета.Вставить("УчетПроизводстваПоЗаказам",         		Ложь);
	ПараметрыУчета.Вставить("УчетПроизводстваПоНоменклатурнымГруппам",  Ложь);
	
	//Работники
	ПараметрыУчета.Вставить("ВестиУчетПоРаботникам", 1);
	ПараметрыУчета.Вставить("УчетЗарплатыИКадровВоВнешнейПрограмме", Ложь);
	ПараметрыУчета.Вставить("КадровыйУчет", Истина);
	
	// Запасы
	БУ = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.Товары);
	ВестиСкладскойУчет = Ложь;
	ВестиСуммовойУчетПоСкладам = Ложь;
	Для НомерСубконто = 1 По БУ.КоличествоСубконто Цикл
		ВидСубконто = БУ["ВидСубконто" + НомерСубконто];
		
		Если ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии Тогда
			ПараметрыУчета.ВестиПартионныйУчет = Истина;
		ИначеЕсли ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
			ВестиСкладскойУчет = Истина;
			ВестиСуммовойУчетПоСкладам = БУ["ВидСубконто" + НомерСубконто + "Суммовой"];
		КонецЕсли;
	КонецЦикла;
	ПараметрыУчета.СкладскойУчет = ?(ВестиСкладскойУчет, ?(ВестиСуммовойУчетПоСкладам, 2, 1), 0);

	// Денежные средства
	БУ = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.ДенежныеСредстваВКассеВСомах);
	Для НомерСубконто = 1 По БУ.КоличествоСубконто Цикл
		Если БУ["ВидСубконто" + НомерСубконто] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств Тогда
			ПараметрыУчета.ВестиУчетПоСтатьямДДС = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Производство.
	БУ = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
	Для НомерСубконто = 1 По БУ.КоличествоСубконто Цикл
		Если БУ["ВидСубконто" + НомерСубконто] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы Тогда
			ПараметрыУчета.УчетПроизводстваПоЗаказам = Ложь;
			ПараметрыУчета.УчетПроизводстваПоНоменклатурнымГруппам = Истина;
			Прервать;
		ИначеЕсли БУ["ВидСубконто" + НомерСубконто] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура Тогда
			ПараметрыУчета.УчетПроизводстваПоЗаказам = Истина;
			ПараметрыУчета.УчетПроизводстваПоНоменклатурнымГруппам = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПараметрыУчета;

КонецФункции

// Выполняет изменения в соответствии с установленными параметрами учета.
//
// Параметры:
//  ПараметрыУчета				 - Структура	 - Содержит настройки параметров учета до изменения.
//  ДополнительныеПараметры		 - Структура	 - Определяет стратегию изменения.
//  ИзмененыПараметрыСубконто	 - Булево	 - Отражает факт изменения.
//  Отказ						 - Булево	 - Отражает наличие ошибок.
//
Процедура ПрименитьПараметрыУчета(ПараметрыУчета, ДополнительныеПараметры, ИзмененыПараметрыСубконто = Ложь, Отказ = Ложь) Экспорт
	
	ПризнакиУчета = ПризнакиУчетаСубконто();
	ДействияИзмененияСубконто = ПолучитьДействияИзмененияСубконто(ПараметрыУчета, ДополнительныеПараметры); // Иерархическая коллекция: на первом уровне действия с субконто на каждом из счетов, на втором - действия с признаками учета.
	
	// Сгруппируем изменения по счетам, так как записывать будем именно счет
	СчетаКИзменению = ОбщегоНазначения.ВыгрузитьКолонку(ДействияИзмененияСубконто, "Счет", Истина);
	ДействияИзмененияСубконто.Индексы.Добавить("Счет");
	СтруктураОтбора = Новый Структура("Счет");
	
	НачатьТранзакцию();

	Попытка
		
		Для Каждого Счет Из СчетаКИзменению Цикл
			СтруктураОтбора.Счет = Счет;
			ДействияДляСчета = ДействияИзмененияСубконто.НайтиСтроки(СтруктураОтбора);
			
			Объект = Счет.ПолучитьОбъект();
			
			ПротоколИзменений = Новый Массив;
			
			Для Каждого Действие Из ДействияДляСчета Цикл
				
				// Действие: -1 удалить; 0 - не менять; 1 - установить
				
				// Действия с видом субконто
				Если Действие.Действие = 1 Тогда
					
					// Добавить субконто
					ВидыСубконтоСтрока = Объект.ВидыСубконто.Добавить();
					ВидыСубконтоСтрока.ВидСубконто = Действие.Субконто;
					
					ДобавитьВПротоколИзменениеСубконто(ПротоколИзменений, ВидыСубконтоСтрока.ВидСубконто, Действие.Действие);
					
				Иначе
					
					ВидыСубконтоСтрока = Объект.ВидыСубконто.Найти(Действие.Субконто, "ВидСубконто");
					Если ВидыСубконтоСтрока = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;
				
				Если Действие.Действие = -1 Тогда
					
					ДобавитьВПротоколИзменениеСубконто(ПротоколИзменений, ВидыСубконтоСтрока.ВидСубконто, Действие.Действие);
					
					Объект.ВидыСубконто.Удалить(ВидыСубконтоСтрока);
					
					Продолжить;
					
				КонецЕсли;
				
				// Действия с признаками учета
				
				Для Каждого ПризнакУчета Из ПризнакиУчета Цикл
					
					ДействиеСПризнаком = Действие[ПризнакУчета.Ключ];

					Если ДействиеСПризнаком = 1 Тогда
						ЗначениеПризнака = Истина;
					ИначеЕсли ДействиеСПризнаком = -1 Тогда
						ЗначениеПризнака = Ложь;
					Иначе
						Продолжить;
					КонецЕсли;
					
					Если ВидыСубконтоСтрока[ПризнакУчета.Ключ] = ЗначениеПризнака Тогда
						Продолжить;
					КонецЕсли;
					
					ВидыСубконтоСтрока[ПризнакУчета.Ключ] = ЗначениеПризнака;
					
					ДобавитьВПротоколИзменениеПризнакаУчета(
						ПротоколИзменений, 
						ВидыСубконтоСтрока.ВидСубконто, 
						ПризнакУчета.Значение, 
						ДействиеСПризнаком);
					
				КонецЦикла; // По признакам учета
				
			КонецЦикла; // По ДействияДляСчета
			
			Если Не Объект.Модифицированность() Тогда
				Продолжить;
			КонецЕсли;
			
			ПротоколИзмененийСтрокой = СтрСоединить(ПротоколИзменений, Символы.ПС);
			
			Объект.Записать();
			
			// Запишем в журнал регистрации подробную информацию об изменениях
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрацииПараметрыУчета(),
				УровеньЖурналаРегистрации.Информация, 
				Метаданные.ПланыСчетов.Хозрасчетный,
				Счет,
				ПротоколИзмененийСтрокой,
				РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
			
		КонецЦикла; // По СчетаКИзменению
	Исключение
		ОтменитьТранзакцию();
		ОписаниеОшибки = ИнформацияОбОшибке();
		
		ШаблонТекста = НСтр("ru = 'Ошибка при записи счета [КодСчета]:
			|[ОписаниеОшибки]
			|Ошибка произошла при попытке выполнить следующие изменения:
			|[ПротоколИзменений]'");
			
		ПараметрыТекста = Новый Структура;
		ПараметрыТекста.Вставить("КодСчета",          Объект.Код);
		ПараметрыТекста.Вставить("ПротоколИзменений", ПротоколИзмененийСтрокой);
		
		// В журнал регистрации выведем подробную информацию
		ПараметрыТекста.Вставить("ОписаниеОшибки", ПодробноеПредставлениеОшибки(ОписаниеОшибки));
		
		Текст = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонТекста, ПараметрыТекста);
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрацииПараметрыУчета(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ПланыСчетов.Хозрасчетный,
			, // Данные
			Текст);
			
		// Пользователю выведем краткое сообщение
		ШаблонТекста = НСтр("ru = 'Ошибка при записи счета [КодСчета]
			|Подробности см. в Журнале регистрации.'");
		Текст = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонТекста, ПараметрыТекста);
		ОбщегоНазначения.СообщитьПользователю(Текст,,,, Отказ);
		
		Возврат;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	ОбновитьПовторноИспользуемыеЗначения();

КонецПроцедуры

// Получает таблицу значений по списком счетов и действиями, которые нужно выполнить над ними.
//
// Параметры:
//  ПараметрыУчетаФормы			 - Структура	 - Содержит настройки параметров учета до изменения.
//  ДополнительныеПараметры		 - Структура	 - Определяет стратегию изменения.
// 
// Возвращаемое значение:
//  ТаблицаДействий - ТаблицаЗначений.
//
Функция ПолучитьДействияИзмененияСубконто(ПараметрыУчетаФормы, ДополнительныеПараметры) Экспорт

	ПараметрыУчета = Новый Структура;
	Для каждого КлючИЗначение Из ПараметрыУчетаФормы Цикл
		ПараметрыУчета.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Если ДополнительныеПараметры.УчетТМЗ Тогда  
		// Учет ТМЗ
		Если НЕ ПараметрыУчета.Свойство("ВестиСкладскойУчет") Тогда
			ПараметрыУчета.Вставить("ВестиСкладскойУчет", ПараметрыУчета.СкладскойУчет > 0);
		КонецЕсли;
		Если НЕ ПараметрыУчета.Свойство("ВестиСуммовойУчетПоСкладам") Тогда
			ПараметрыУчета.Вставить("ВестиСуммовойУчетПоСкладам", ПараметрыУчета.СкладскойУчет > 1);
		КонецЕсли;
		
	КонецЕсли;	

	ПараметрыСубконто = ТаблицаСубконтоПоПараметрамУчета(ДополнительныеПараметры);

	ПризнакиУчета = ПризнакиУчетаСубконто();

	ТипДействия = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Любой));
	// -1 удалить; 0 - не менять; 1 - установить

	ТаблицаДействий = Новый ТаблицаЗначений;
	ТаблицаДействий.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаДействий.Колонки.Добавить("Субконто", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));
	ТаблицаДействий.Колонки.Добавить("Действие", ТипДействия);
	Для каждого ПризнакУчета Из ПризнакиУчета Цикл
		ТаблицаДействий.Колонки.Добавить(ПризнакУчета.Ключ, ТипДействия);
	КонецЦикла;

	Для каждого ОписаниеГруппыСчетов Из ПараметрыСубконто Цикл

		СчетаВСписке = Новый Массив;
		СчетаВИерархии = Новый Массив;
		СчетаНеВИерархии = ОписаниеГруппыСчетов.ИсключенияИерархии;

		Для каждого ОписаниеСчета Из ОписаниеГруппыСчетов.Счета Цикл
			Если ОписаниеСчета.СПодчиненными Тогда
				СчетаВИерархии.Добавить(ОписаниеСчета.Счет);
			Иначе
				СчетаВСписке.Добавить(ОписаниеСчета.Счет);
			КонецЕсли;
		КонецЦикла;

		// Получим список счетов для обработки
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СчетаВСписке", СчетаВСписке);
		Запрос.УстановитьПараметр("СчетаВИерархии", СчетаВИерархии);
		Запрос.УстановитьПараметр("СчетаНеВИерархии", СчетаНеВИерархии);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет,
		|	Хозрасчетный.Порядок КАК Порядок,
		|	Хозрасчетный.Код КАК Код,
		|	Хозрасчетный.Валютный КАК Валютный,
		|	Хозрасчетный.Количественный КАК Количественный,
		|	Хозрасчетный.ВидыСубконто.(
		|		НомерСтроки КАК НомерСтроки,
		|		ВидСубконто КАК ВидСубконто,
		|		ТолькоОбороты КАК ТолькоОбороты,
		|		Суммовой КАК Суммовой,
		|		Валютный КАК Валютный,
		|		Количественный КАК Количественный
		|	) КАК ВидыСубконто
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	(Хозрасчетный.Ссылка В (&СчетаВСписке)
		|			ИЛИ Хозрасчетный.Ссылка В ИЕРАРХИИ (&СчетаВИерархии)
		|				И НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (&СчетаНеВИерархии))
		|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	Счет,
		|	НомерСтроки";

		ВыборкаСчетов = Запрос.Выполнить().Выбрать();
		Пока ВыборкаСчетов.Следующий() Цикл

			ПараметрыСчета = ПолучитьЗначенияПараметровУчетаДляСчета(ПараметрыУчета,
				ОписаниеГруппыСчетов.Параметры, ВыборкаСчетов.Счет);

			ВидыСубконто = ВыборкаСчетов.ВидыСубконто.Выгрузить();

			Для каждого ОписаниеСубконто Из ОписаниеГруппыСчетов.Субконто Цикл
				СтрокаДействия = Неопределено;

				ИспользованиеСубконто = ПолучитьЗначениеПараметраУчетаСубконто(ОписаниеСубконто.Параметр,
					ПараметрыСчета, ВыборкаСчетов);

				Если ИспользованиеСубконто = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтрокаСубконто = ВидыСубконто.Найти(ОписаниеСубконто.Вид, "ВидСубконто");
				
				// Склады и местоположение взаимоисключающие субконто.
				Если СтрокаСубконто = Неопределено
					И ОписаниеСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
					СтрокаСубконто = ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Местонахождение, "ВидСубконто");
				КонецЕсли;	
				
				Если ИспользованиеСубконто Тогда
					Если СтрокаСубконто = Неопределено Тогда
						СтрокаДействия = ТаблицаДействий.Добавить();
						СтрокаДействия.Счет = ВыборкаСчетов.Счет;
						СтрокаДействия.Субконто = ОписаниеСубконто.Вид;
						СтрокаДействия.Действие = 1;						
					КонецЕсли;

					// проверим признаки учета
					Для каждого ПризнакУчета Из ПризнакиУчета Цикл
						ЗначениеПризнака = ПолучитьЗначениеПараметраУчетаСубконто(ОписаниеСубконто[ПризнакУчета.Ключ],
							ПараметрыСчета, ВыборкаСчетов);
						Если ЗначениеПризнака = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						Если СтрокаСубконто = Неопределено
							ИЛИ СтрокаСубконто[ПризнакУчета.Ключ] <> ЗначениеПризнака Тогда

							Если СтрокаДействия = Неопределено Тогда
								СтрокаДействия = ТаблицаДействий.Добавить();
								СтрокаДействия.Счет = ВыборкаСчетов.Счет;
								СтрокаДействия.Субконто = ОписаниеСубконто.Вид;
							КонецЕсли;
							Если ЗначениеПризнака Тогда
								СтрокаДействия[ПризнакУчета.Ключ] = 1;
							Иначе
								СтрокаДействия[ПризнакУчета.Ключ] = -1;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				Иначе
					Если СтрокаСубконто = Неопределено Тогда
						Продолжить;
					Иначе
						СтрокаДействия = ТаблицаДействий.Добавить();
						СтрокаДействия.Счет = ВыборкаСчетов.Счет;
						СтрокаДействия.Субконто = ОписаниеСубконто.Вид;
						СтрокаДействия.Действие = -1;
					КонецЕсли;
				КонецЕсли;

			КонецЦикла;

		КонецЦикла;
	КонецЦикла;

	Возврат ТаблицаДействий;

КонецФункции

Функция СобытиеЖурналаРегистрацииПараметрыУчета() Экспорт

	Возврат НСтр("ru = 'Настройка параметров учета'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())

КонецФункции

#КонецОбласти

#Область УчасткиТекстаЗапроса

Функция ТекстРазделителяЗапросовПакета() Экспорт

	ТекстРазделителя =
	"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";

	Возврат ТекстРазделителя;

КонецФункции

Функция ТекстОбъединитьВсе() Экспорт

	ТекстРазделителя =
	"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|";

	Возврат ТекстРазделителя;

КонецФункции

#КонецОбласти

#Область ОтладочныеМетоды

// Служебная. Показать произвольную выборку данных в отладчике
// Пример:
//	ОбщегоНазначенияУТ.ЗапросВыполнитьВыгрузить("выбрать * из Справочник.Валюты где Валюты.Код = &Код", Новый Структура("Код", "810"))
//
Функция ЗапросВыполнитьВыгрузить(ТекстЗапроса, ПараметрыЗапроса = Неопределено, МенеджерВременныхТаблиц = Неопределено) Экспорт
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Если МенеджерВременныхТаблиц <> Неопределено Тогда
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса) Тогда
		Для Каждого Параметр Из ПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Служебная. Показать временную таблицу из менеджера временных таблиц.
// Используется для просмотра временных таблиц в отладчике.
// Пример вызова функции:
//	ОбщегоНазначенияУТ.ПоказатьВременнуюТаблицу(Запрос, "ТаблицаТоваров")
//
Функция ПоказатьВременнуюТаблицу(МенеджерВременныхТаблицИлиЗапрос, ИмяВременнойТаблицы) Экспорт
	
	ЗакрытьМенеджерВременныхТаблиц = Ложь;
	
	Если ТипЗнч(МенеджерВременныхТаблицИлиЗапрос) = Тип("Запрос") Тогда
		Если МенеджерВременныхТаблицИлиЗапрос.МенеджерВременныхТаблиц = Неопределено Тогда
			МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			ЗакрытьМенеджерВременныхТаблиц = Истина;
			МенеджерВременныхТаблицИлиЗапрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц; 
		Иначе
			МенеджерВременныхТаблиц = МенеджерВременныхТаблицИлиЗапрос.МенеджерВременныхТаблиц;
		КонецЕсли;
		МенеджерВременныхТаблицИлиЗапрос.Выполнить();
	Иначе
		МенеджерВременныхТаблиц = МенеджерВременныхТаблицИлиЗапрос;
	КонецЕсли; 
	
	ДанныеТаблицы = ЗапросВыполнитьВыгрузить("ВЫБРАТЬ * ИЗ " + ИмяВременнойТаблицы,, МенеджерВременныхТаблиц);
	
	Если ЗакрытьМенеджерВременныхТаблиц Тогда
		МенеджерВременныхТаблиц.Закрыть();
		МенеджерВременныхТаблицИлиЗапрос.МенеджерВременныхТаблиц = Неопределено;
	КонецЕсли; 
	
	Возврат ДанныеТаблицы;
	
КонецФункции

// Служебная. Преобразует таблицу значений в табличный документ и сохраняет его в файл.
// Примеры вызова функции:
// 	ОбщегоНазначенияУТ.СохранитьТаблицуЗначенийВФайл(Таблица, "c:\temp\таблица.mxl")
// 	ОбщегоНазначенияУТ.СохранитьТаблицуЗначенийВФайл(ОбщегоНазначенияУТ.ПоказатьВременнуюТаблицу(МВТ, "Таблица"), "c:\temp\таблица.mxl")
//
// Параметры:
//	Таблица - ТаблицаЗначений - произвольная таблица значений
//	ПолноеИмяФайла - Строка - полное имя сохраняемого файла, с расширением
//
// Возвращаемое значение:
//	Строка - текст сообщения об ошибке или пустая строка, если запись выполнена успешно.
//
Функция СохранитьТаблицуЗначенийВФайл(Таблица, ПолноеИмяФайла) Экспорт
	
	ВыгрузкаТаблицы = Новый ТабличныйДокумент; // преобразованная в mxl таблица значений
	
	НомерСтроки  = 1;
	НомерКолонки = 0;
	
	// Сформируем шапку табличного документа - выведем имена колонок таблицы значений
	Для Каждого ТекКолонка Из Таблица.Колонки Цикл
		
		НомерКолонки = НомерКолонки + 1;
		
		Область = ВыгрузкаТаблицы.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
		Область.Текст 		 = ТекКолонка.Имя;
		Область.Шрифт 		 = Новый Шрифт(Область.Шрифт,,, Истина); 
		Область.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
		
	КонецЦикла;
	
	// Выведем строки таблицы значений
	Для Каждого ТекСтр Из Таблица Цикл
		
		НомерСтроки = НомерСтроки + 1;
		НомерКолонки = 0;
		
		Для Каждого ТекКолонка Из Таблица.Колонки Цикл
			
			НомерКолонки = НомерКолонки + 1;
			
			Область = ВыгрузкаТаблицы.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
			Область.Текст = ТекСтр[ТекКолонка.Имя];
			
		КонецЦикла;
		
	КонецЦикла;
	
	ВыгрузкаТаблицы.ФиксацияСверху = 1;
	ВыгрузкаТаблицы.ФиксацияСлева  = 1;
	
	// Сохраним табличный документ в файл
	ТекстОшибки = "";
	Попытка
		ВыгрузкаТаблицы.Записать(ПолноеИмяФайла);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат ТекстОшибки;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Определяет счета учета и их параметры.
//
// Параметры:
//  ДополнительныеПараметры		 - Структура	 - Определяет стратегию изменения.
//
// Возвращаемое значение:
//  Результат - ТаблицаЗначений.
//
Функция ТаблицаСубконтоПоПараметрамУчета(ДополнительныеПараметры)

	// Структура параметров
	Результат = Новый ТаблицаЗначений; // Структуры СтруктураПараметров
	Результат.Колонки.Добавить("Счета"); // Счета для обработки, таблица значений со структурой КолонкиСчетов
	Результат.Колонки.Добавить("ИсключенияИерархии", Новый ОписаниеТипов("Массив")); // Массив счетов
		// которые не должны обрабатываться при обработке подчиненных счетов
	Результат.Колонки.Добавить("Субконто"); // Параметры субконто, таблица значений со структурой КолонкиСубконто
	Результат.Колонки.Добавить("Параметры", Новый ОписаниеТипов("ТаблицаЗначений")); // Список параметров и
		// значения исключений, таблица значений со структурой КолонкиПараметров

	КолонкиСчетов = Новый ТаблицаЗначений;
	КолонкиСчетов.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	КолонкиСчетов.Колонки.Добавить("СПодчиненными", Новый ОписаниеТипов("Булево")); // Обрабатывать все субсчета

	// Имя параметра, константа типа Булево или строка "ПоСчету" (только для признаков учета Количественный и Валютный)
	// Неопределено - не менять
	ТипПараметра = Новый ОписаниеТипов("Неопределено, Строка, Булево", , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная));

	КолонкиСубконто = Новый ТаблицаЗначений;
	КолонкиСубконто.Колонки.Добавить("Вид", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));
	КолонкиСубконто.Колонки.Добавить("Параметр", ТипПараметра); // Необходимость включения субконто
	КолонкиСубконто.Колонки.Добавить("Количественный", ТипПараметра);
	КолонкиСубконто.Колонки.Добавить("Суммовой", ТипПараметра);
	КолонкиСубконто.Колонки.Добавить("ТолькоОбороты", ТипПараметра);
	КолонкиСубконто.Колонки.Добавить("Валютный", ТипПараметра);

	КолонкиПараметров = Новый ТаблицаЗначений; // Описания параметров учета
	// Имя параметра учета
	КолонкиПараметров.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	КолонкиПараметров.Колонки.Добавить("Исключения", Новый ОписаниеТипов("ТаблицаЗначений")); // Счета, для которых будут
		// использоваться константные значения вместо значений параметров

	КолонкиИсключений = Новый ТаблицаЗначений;
	КолонкиИсключений.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	КолонкиИсключений.Колонки.Добавить("СПодчиненными", Новый ОписаниеТипов("Булево"));
	КолонкиИсключений.Колонки.Добавить("Значение", Новый ОписаниеТипов("Неопределено, Булево"));

	Если ДополнительныеПараметры.УчетТМЗ Тогда 
		// Учет ТМЗ
		СтрокаРезультата = Результат.Добавить();

		// Счета
		Счета = КолонкиСчетов.СкопироватьКолонки();
		СтрокаРезультата.Счета = Счета;

		СтрокаСчета = Счета.Добавить();
		СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.Товары;
		СтрокаСчета.СПодчиненными = Истина;
		
		СтрокаСчета = Счета.Добавить();
		СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ЗапасыСырьяИМатериалов;
		СтрокаСчета.СПодчиненными = Истина;
		
		СтрокаСчета = Счета.Добавить();
		СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ГотоваяПродукция;
		СтрокаСчета.СПодчиненными = Истина;
		
		СтрокаСчета = Счета.Добавить();
		СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ПрочиеЗапасы;
		СтрокаСчета.СПодчиненными = Истина;
		
		СтрокаСчета = Счета.Добавить();
		СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ЗапасыВспомогательныхМатериалов;
		СтрокаСчета.СПодчиненными = Истина;
		
		СтрокаСчета = Счета.Добавить();
		СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.Топливо;
		СтрокаСчета.СПодчиненными = Истина;
		
		СтрокаСчета = Счета.Добавить();
		СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ЗапасныеЧасти;
		СтрокаСчета.СПодчиненными = Истина;
		
		СтрокаСчета = Счета.Добавить();
		СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.СтроительныеМатериалы;
		СтрокаСчета.СПодчиненными = Истина;
		
		СтрокаСчета = Счета.Добавить();
		СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ПрочиеМатериалы;
		СтрокаСчета.СПодчиненными = Истина;
		
		СтрокаСчета = Счета.Добавить();
		СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.МБП;
		СтрокаСчета.СПодчиненными = Истина;

		// Исключения иерархии
		ИсключенияИерархии = Новый Массив;
		СтрокаРезультата.ИсключенияИерархии = ИсключенияИерархии;

		ИсключенияИерархии.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
		ИсключенияИерархии.Добавить(ПланыСчетов.Хозрасчетный.ПроизводствоПолуфабрикатов);
		ИсключенияИерархии.Добавить(ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья);
		ИсключенияИерархии.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательноеПроизводство);
		ИсключенияИерархии.Добавить(ПланыСчетов.Хозрасчетный.НакладныеРасходы);
		ИсключенияИерархии.Добавить(ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку);
		ИсключенияИерархии.Добавить(ПланыСчетов.Хозрасчетный.НереализованнаяТорговаяНаценка);
		ИсключенияИерархии.Добавить(ПланыСчетов.Хозрасчетный.НачисленныйИзносМБП);
		
		// Субконто
		Субконто = КолонкиСубконто.СкопироватьКолонки();
		СтрокаРезультата.Субконто = Субконто;

		СтрокаСубконто = Субконто.Добавить();
		СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
		СтрокаСубконто.Параметр = Истина;
		СтрокаСубконто.Количественный = Истина;
		СтрокаСубконто.Суммовой = Истина;
		СтрокаСубконто.ТолькоОбороты = Ложь;
		СтрокаСубконто.Валютный = Неопределено;

		СтрокаСубконто = Субконто.Добавить();
		СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;
		СтрокаСубконто.Параметр = "ВестиПартионныйУчет";
		СтрокаСубконто.Количественный = Истина;
		СтрокаСубконто.Суммовой = Истина;
		СтрокаСубконто.ТолькоОбороты = Ложь;
		СтрокаСубконто.Валютный = Неопределено;

		СтрокаСубконто = Субконто.Добавить();
		СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
		СтрокаСубконто.Параметр = "ВестиСкладскойУчет";
		СтрокаСубконто.Количественный = Истина;
		СтрокаСубконто.Суммовой = "ВестиСуммовойУчетПоСкладам";
		СтрокаСубконто.ТолькоОбороты = Ложь;
		СтрокаСубконто.Валютный = Неопределено;

		// Параметры
		Параметры = КолонкиПараметров.СкопироватьКолонки();
		СтрокаРезультата.Параметры = Параметры;

		СтрокаПараметра = Параметры.Добавить();
		СтрокаПараметра.Имя = "ВестиПартионныйУчет";
		СтрокаПараметра.Исключения = КолонкиИсключений.Скопировать();

		СтрокаПараметра = Параметры.Добавить();
		СтрокаПараметра.Имя = "ВестиСкладскойУчет";
		СтрокаПараметра.Исключения = КолонкиИсключений.Скопировать();

			//СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
			//СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.МБП;
			//СтрокаИсключения.СПодчиненными = Истина;
			//СтрокаИсключения.Значение = Неопределено;
		
		СтрокаПараметра = Параметры.Добавить();
		СтрокаПараметра.Имя = "ВестиСуммовойУчетПоСкладам";
		СтрокаПараметра.Исключения = КолонкиИсключений.Скопировать();
		
	ИначеЕсли ДополнительныеПараметры.УчетОС Тогда 
		// Учет ОС
		СтрокаРезультата = Результат.Добавить();

		// Счета
		Счета = КолонкиСчетов.СкопироватьКолонки();
		СтрокаРезультата.Счета = Счета;

		СчетаУчетаОсновныхСредств = БухгалтерскийУчетСервер.СчетаУчетаОсновныхСредств();
		СчетаУчетаНематериальныхАктивов = БухгалтерскийУчетСервер.СчетаУчетаНематериальныхАктивов();
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУчетаОсновныхСредств, СчетаУчетаНематериальныхАктивов); 
		Для Каждого СчетУчета Из СчетаУчетаОсновныхСредств Цикл 
			СтрокаСчета = Счета.Добавить();
			СтрокаСчета.Счет = СчетУчета;
			СтрокаСчета.СПодчиненными = Истина;
		КонецЦикла;	

		// Исключения иерархии
		ИсключенияИерархии = Новый Массив;
		СтрокаРезультата.ИсключенияИерархии = ИсключенияИерархии;
		
		ИсключенияИерархии.Добавить(ПланыСчетов.Хозрасчетный.МодернизацияОС);
		ИсключенияИерархии.Добавить(ПланыСчетов.Хозрасчетный.МодернизацияНМА);
		
		// Субконто
		Субконто = КолонкиСубконто.СкопироватьКолонки();
		СтрокаРезультата.Субконто = Субконто;

		СтрокаСубконто = Субконто.Добавить();
		СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства;
		СтрокаСубконто.Параметр = Истина;
		СтрокаСубконто.Количественный = Ложь;
		СтрокаСубконто.Суммовой = Истина;
		СтрокаСубконто.ТолькоОбороты = Ложь;
		СтрокаСубконто.Валютный = Ложь;

		СтрокаСубконто = Субконто.Добавить();
		СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения;
		СтрокаСубконто.Параметр = "ВестиУчетОСПоПодразделениям";
		СтрокаСубконто.Количественный = Ложь;
		СтрокаСубконто.Суммовой = Истина;
		СтрокаСубконто.ТолькоОбороты = Ложь;
		СтрокаСубконто.Валютный = Ложь;

		СтрокаСубконто = Субконто.Добавить();
		СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СотрудникиОрганизаций;
		СтрокаСубконто.Параметр = "ВестиУчетОСПоМОЛ";
		СтрокаСубконто.Количественный = Ложь;
		СтрокаСубконто.Суммовой = Истина;
		СтрокаСубконто.ТолькоОбороты = Ложь;
		СтрокаСубконто.Валютный = Ложь;

		// Параметры
		Параметры = КолонкиПараметров.СкопироватьКолонки();
		СтрокаРезультата.Параметры = Параметры;

		СтрокаПараметра = Параметры.Добавить();
		СтрокаПараметра.Имя = "ВестиУчетОСПоПодразделениям";
		СтрокаПараметра.Исключения = КолонкиИсключений.Скопировать();

		СтрокаПараметра = Параметры.Добавить();
		СтрокаПараметра.Имя = "ВестиУчетОСПоМОЛ";
		СтрокаПараметра.Исключения = КолонкиИсключений.Скопировать();

		// Исключения
		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.КапитальныйРемонтОС;
		СтрокаИсключения.СПодчиненными = Истина;
		СтрокаИсключения.Значение = Неопределено;
		
		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.МодернизацияНМА;
		СтрокаИсключения.СПодчиненными = Истина;
		СтрокаИсключения.Значение = Неопределено;
		
		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.МодернизацияОС;
		СтрокаИсключения.СПодчиненными = Истина;
		СтрокаИсключения.Значение = Неопределено;
		
	ИначеЕсли ДополнительныеПараметры.УчетДС Тогда 
		// Учет денежных средств
		СтрокаРезультата = Результат.Добавить();

		// Счета
		Счета = КолонкиСчетов.СкопироватьКолонки();
		СтрокаРезультата.Счета = Счета;

		// Касса
		СтрокаСчета = Счета.Добавить();
		СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ДенежныеСредстваВКассеВСомах;
		СтрокаСчета.СПодчиненными = Истина;
		
		СтрокаСчета = Счета.Добавить();
		СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ДенежныеСредстваВКассеВВалюте;
		СтрокаСчета.СПодчиненными = Истина;
		
		СтрокаСчета = Счета.Добавить();
		СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ДенежныеДокументы;
		СтрокаСчета.СПодчиненными = Истина;
		
		СтрокаСчета = Счета.Добавить();
		СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ДенежныеЭквиваленты;
		СтрокаСчета.СПодчиненными = Истина;
		
		// Банк
		СтрокаСчета = Счета.Добавить();
		СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.СчетаВНациональнойВалюте;
		СтрокаСчета.СПодчиненными = Истина;
		
		СтрокаСчета = Счета.Добавить();
		СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.СчетаВИностраннойВалютеВМестныхБанках;
		СтрокаСчета.СПодчиненными = Истина;
		
		СтрокаСчета = Счета.Добавить();
		СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.СчетаВЗарубежныхБанках;
		СтрокаСчета.СПодчиненными = Истина;
		
		СтрокаСчета = Счета.Добавить();
		СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ДенежныеСредстваНаСчетахВБанкахОграниченныеКИспользованию;
		СтрокаСчета.СПодчиненными = Истина;
		
		СтрокаСчета = Счета.Добавить();
		СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ДенежныеСредстваВПути;
		СтрокаСчета.СПодчиненными = Истина;
		
		СтрокаСчета = Счета.Добавить();
		СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ДенежныеСредстваОграниченныеКИспользованию;
		СтрокаСчета.СПодчиненными = Истина;
		
		// Исключения иерархии
		ИсключенияИерархии = Новый Массив;
		СтрокаРезультата.ИсключенияИерархии = ИсключенияИерархии;
		ИсключенияИерархии.Добавить(ПланыСчетов.Хозрасчетный.ДенежныеСредстваВПути);
		
		// Субконто
		Субконто = КолонкиСубконто.СкопироватьКолонки();
		СтрокаРезультата.Субконто = Субконто;

		СтрокаСубконто = Субконто.Добавить();
		СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДенежныеСредства;
		СтрокаСубконто.Параметр = Истина;
		СтрокаСубконто.Количественный = Ложь;
		СтрокаСубконто.Суммовой = Истина;
		СтрокаСубконто.ТолькоОбороты = Ложь;
		СтрокаСубконто.Валютный = Истина;

		СтрокаСубконто = Субконто.Добавить();
		СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств;
		СтрокаСубконто.Параметр = "ВестиУчетПоСтатьямДДС";
		СтрокаСубконто.Количественный = Ложь;
		СтрокаСубконто.Суммовой = Истина;
		СтрокаСубконто.ТолькоОбороты = Истина;
		СтрокаСубконто.Валютный = Истина;

		// Параметры
		Параметры = КолонкиПараметров.СкопироватьКолонки();
		СтрокаРезультата.Параметры = Параметры;

		СтрокаПараметра = Параметры.Добавить();
		СтрокаПараметра.Имя = "ВестиУчетПоСтатьямДДС";
		СтрокаПараметра.Исключения = КолонкиИсключений.Скопировать();

		// Исключения
		
	ИначеЕсли ДополнительныеПараметры.УчетПроизводства Тогда 
		
		// Учет производства
		СтрокаРезультата = Результат.Добавить();

		// Счета
		Счета = КолонкиСчетов.СкопироватьКолонки();
		СтрокаРезультата.Счета = Счета;

		// Производство
		// 1630.
		СтрокаСчета = Счета.Добавить();
		СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство;
		СтрокаСчета.СПодчиненными = Истина;
		// 1631.
		СтрокаСчета = Счета.Добавить();
		СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ПроизводствоПолуфабрикатов;
		СтрокаСчета.СПодчиненными = Истина;
		// 1632.
		СтрокаСчета = Счета.Добавить();
		СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья;
		СтрокаСчета.СПодчиненными = Истина;
		// 1633.
		СтрокаСчета = Счета.Добавить();
		СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ВспомогательноеПроизводство;
		СтрокаСчета.СПодчиненными = Истина;
		
		// Исключения иерархии
		ИсключенияИерархии = Новый Массив;
		СтрокаРезультата.ИсключенияИерархии = ИсключенияИерархии;
		
		// Субконто
		Субконто = КолонкиСубконто.СкопироватьКолонки();
		СтрокаРезультата.Субконто = Субконто;

		СтрокаСубконто = Субконто.Добавить();
		СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения;
		СтрокаСубконто.Параметр = "УчетПроизводстваПоНоменклатурнымГруппам";
		СтрокаСубконто.Количественный = Ложь;
		СтрокаСубконто.Суммовой = Истина;
		СтрокаСубконто.ТолькоОбороты = Ложь;
		СтрокаСубконто.Валютный = Ложь;
		
		СтрокаСубконто = Субконто.Добавить();
		СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
		СтрокаСубконто.Параметр = "УчетПроизводстваПоЗаказам";
		СтрокаСубконто.Количественный = Ложь;
		СтрокаСубконто.Суммовой = Истина;
		СтрокаСубконто.ТолькоОбороты = Ложь;
		СтрокаСубконто.Валютный = Ложь;
		
		СтрокаСубконто = Субконто.Добавить();
		СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы;
		СтрокаСубконто.Параметр = "УчетПроизводстваПоНоменклатурнымГруппам";
		СтрокаСубконто.Количественный = Ложь;
		СтрокаСубконто.Суммовой = Истина;
		СтрокаСубконто.ТолькоОбороты = Ложь;
		СтрокаСубконто.Валютный = Ложь;
		
		СтрокаСубконто = Субконто.Добавить();
		СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;
		СтрокаСубконто.Параметр = "УчетПроизводстваПоЗаказам";
		СтрокаСубконто.Количественный = Ложь;
		СтрокаСубконто.Суммовой = Истина;
		СтрокаСубконто.ТолькоОбороты = Ложь;
		СтрокаСубконто.Валютный = Ложь;

		СтрокаСубконто = Субконто.Добавить();
		СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат;
		СтрокаСубконто.Параметр = "УчетПроизводстваПоНоменклатурнымГруппам";
		СтрокаСубконто.Количественный = Ложь;
		СтрокаСубконто.Суммовой = Истина;
		СтрокаСубконто.ТолькоОбороты = Истина;
		СтрокаСубконто.Валютный = Ложь;

		// Параметры
		Параметры = КолонкиПараметров.СкопироватьКолонки();
		СтрокаРезультата.Параметры = Параметры;

		СтрокаПараметра = Параметры.Добавить();
		СтрокаПараметра.Имя = "УчетПроизводстваПоНоменклатурнымГруппам";
		СтрокаПараметра.Исключения = КолонкиИсключений.Скопировать();

		СтрокаПараметра = Параметры.Добавить();
		СтрокаПараметра.Имя = "УчетПроизводстваПоЗаказам";
		СтрокаПараметра.Исключения = КолонкиИсключений.Скопировать();
		
		//////////////////////////////////////////////////
		// Доходы
		СтрокаРезультата = Результат.Добавить();
		
		// Счета
		Счета = КолонкиСчетов.СкопироватьКолонки();
		СтрокаРезультата.Счета = Счета;

		СтрокаСчета = Счета.Добавить();
		СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ВыручкаОтРеализацииТоваровИУслуг;
		СтрокаСчета.СПодчиненными = Истина;
		
		СтрокаСчета = Счета.Добавить();
		СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ВозвратПроданныхТоваровИСкидки;
		СтрокаСчета.СПодчиненными = Истина;
		
		СтрокаСчета = Счета.Добавить();
		СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ВыручкаОтОбменаТоваровИУслуг;
		СтрокаСчета.СПодчиненными = Истина;
		
		СтрокаСчета = Счета.Добавить();
		СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ВыручкаПоДоговорамНаСтроительство;
		СтрокаСчета.СПодчиненными = Истина;
		
		СтрокаСчета = Счета.Добавить();
		СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ВыручкаПоДоговорамСтрахования;
		СтрокаСчета.СПодчиненными = Истина;
		
		// Исключения иерархии
		ИсключенияИерархии = Новый Массив;
		СтрокаРезультата.ИсключенияИерархии = ИсключенияИерархии;

		// Субконто
		Субконто = КолонкиСубконто.СкопироватьКолонки();
		СтрокаРезультата.Субконто = Субконто;

		СтрокаСубконто = Субконто.Добавить();
		СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы;
		СтрокаСубконто.Параметр = "УчетПроизводстваПоНоменклатурнымГруппам";
		СтрокаСубконто.Количественный = Ложь;
		СтрокаСубконто.Суммовой = Истина;
		СтрокаСубконто.ТолькоОбороты = Истина;
		СтрокаСубконто.Валютный = Ложь;

		// Параметры
		Параметры = КолонкиПараметров.СкопироватьКолонки();
		СтрокаРезультата.Параметры = Параметры;

		СтрокаПараметра = Параметры.Добавить();
		СтрокаПараметра.Имя = "УчетПроизводстваПоНоменклатурнымГруппам";
		СтрокаПараметра.Исключения = КолонкиИсключений.Скопировать();
		
		// Расходы
		СтрокаРезультата = Результат.Добавить();
		
		// Счета
		Счета = КолонкиСчетов.СкопироватьКолонки();
		СтрокаРезультата.Счета = Счета;

		СтрокаСчета = Счета.Добавить();
		СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.КорректировкиСтоимостиЗапасов;
		СтрокаСчета.СПодчиненными = Истина;
		
		СтрокаСчета = Счета.Добавить();
		СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ПриобретениеТовара;
		СтрокаСчета.СПодчиненными = Истина;

		СтрокаСчета = Счета.Добавить();
		СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ВозвратПриобретенногоТовара;
		СтрокаСчета.СПодчиненными = Истина;

		СтрокаСчета = Счета.Добавить();
		СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.КорректировкиСтоимостиЗапасовПериодический;
		СтрокаСчета.СПодчиненными = Истина;

		СтрокаСчета = Счета.Добавить();
		СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.РасходыПоПроизводствуБиологическихАктивов;
		СтрокаСчета.СПодчиненными = Истина;

		СтрокаСчета = Счета.Добавить();
		СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ЗатратыПоДоговорамНаСтроительство;
		СтрокаСчета.СПодчиненными = Истина;
		
		// Исключения иерархии
		ИсключенияИерархии = Новый Массив;
		СтрокаРезультата.ИсключенияИерархии = ИсключенияИерархии;

		// Субконто
		Субконто = КолонкиСубконто.СкопироватьКолонки();
		СтрокаРезультата.Субконто = Субконто;

		СтрокаСубконто = Субконто.Добавить();
		СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы;
		СтрокаСубконто.Параметр = "УчетПроизводстваПоНоменклатурнымГруппам";
		СтрокаСубконто.Количественный = Ложь;
		СтрокаСубконто.Суммовой = Истина;
		СтрокаСубконто.ТолькоОбороты = Истина;
		СтрокаСубконто.Валютный = Ложь;

		// Параметры
		Параметры = КолонкиПараметров.СкопироватьКолонки();
		СтрокаРезультата.Параметры = Параметры;

		СтрокаПараметра = Параметры.Добавить();
		СтрокаПараметра.Имя = "УчетПроизводстваПоНоменклатурнымГруппам";
		СтрокаПараметра.Исключения = КолонкиИсключений.Скопировать();
	КонецЕсли;	
	
	Возврат Результат;

КонецФункции

// Получает структуру признаков учета субконто
// 
// Возвращаемое значение:
//  ПризнакиУчета - Структура.
//
Функция ПризнакиУчетаСубконто()

	ПризнакиУчета = Новый Структура;
	ПризнакиУчета.Вставить("Количественный", НСтр("ru = 'Количественный'"));
	ПризнакиУчета.Вставить("Суммовой", НСтр("ru = 'Суммовой'"));
	ПризнакиУчета.Вставить("ТолькоОбороты", НСтр("ru = 'Только обороты'"));
	ПризнакиУчета.Вставить("Валютный", НСтр("ru = 'Валютный'"));

	Возврат ПризнакиУчета;

КонецФункции

// Получает структуру параметров учета по счету.
//
// Параметры:
//  ПараметрыУчета			 - Структура	 - Содержит настройки параметров учета до изменения.
//  ПараметрыГруппыСчетов	 - Структура	 - 
//  Счет					 - ПланСчетовСсылка.Хозрасчетный	 - 
// 
// Возвращаемое значение:
//   Результат - Структура.
//
Функция ПолучитьЗначенияПараметровУчетаДляСчета(ПараметрыУчета, ПараметрыГруппыСчетов, Счет)

	Результат = Новый Структура;

	Для каждого СтрокаПараметра Из ПараметрыГруппыСчетов Цикл
		ЗначениеУстановлено = Ложь;
		Для каждого СтрокаИсключения Из СтрокаПараметра.Исключения Цикл
			Если СтрокаИсключения.Счет = Счет Тогда
				ЗначениеПараметра = СтрокаИсключения.Значение;
				ЗначениеУстановлено = Истина;
				Прервать;
			Иначе
				Если СтрокаИсключения.СПодчиненными
					И БухгалтерскийУчетВызовСервераПовтИсп.СчетВИерархии(Счет, СтрокаИсключения.Счет) Тогда

					ЗначениеПараметра = СтрокаИсключения.Значение;
					ЗначениеУстановлено = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Если НЕ ЗначениеУстановлено Тогда
			ЗначениеПараметра = ПараметрыУчета[СтрокаПараметра.Имя];
		КонецЕсли;
		Результат.Вставить(СтрокаПараметра.Имя, ЗначениеПараметра);
	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ПолучитьЗначениеПараметраУчетаСубконто(Параметр, ЗначенияПараметровУчетаДляСчета, СтрокаСчета)

	Если Параметр = Неопределено ИЛИ ТипЗнч(Параметр) = Тип("Булево") Тогда
		Возврат Параметр;
	Иначе
		Если ЗначенияПараметровУчетаДляСчета.Свойство(Параметр) Тогда
			Возврат ЗначенияПараметровУчетаДляСчета[Параметр];
		Иначе
			Возврат СтрокаСчета[Параметр];
		КонецЕсли;
	КонецЕсли;

КонецФункции

Процедура ДобавитьВПротоколИзменениеСубконто(ПротоколИзменений, ВидСубконто, Изменение)
	
	Если Изменение = 1 Тогда
		ШаблонТекста = НСтр("ru = 'Добавлено субконто ""%1""'");
	ИначеЕсли Изменение = -1 Тогда
		ШаблонТекста = НСтр("ru = 'Удалено субконто ""%1""'");
	Иначе
		ШаблонТекста = НСтр("ru = 'Изменено субконто ""%1""'");
	КонецЕсли;
	
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, ВидСубконто);
	ПротоколИзменений.Добавить(Текст);
		
КонецПроцедуры

Процедура ДобавитьВПротоколИзменениеПризнакаУчета(ПротоколИзменений, ВидСубконто, ПризнакУчета, Изменение)
	
	// В интерфейсе признаки учета называем "видами"
	Если Изменение = 1 Тогда
		ШаблонТекста = НСтр("ru = 'У субконто ""%1"" установлен вид учета %2'");
	ИначеЕсли Изменение = -1 Тогда
		ШаблонТекста = НСтр("ru = 'У субконто ""%1"" снят вид учета %2'");
	Иначе
		ШаблонТекста = НСтр("ru = 'У субконто ""%1"" изменен вид учета %2'");
	КонецЕсли;
	
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, ВидСубконто, ПризнакУчета);
	ПротоколИзменений.Добавить(Текст);
		
КонецПроцедуры

#КонецОбласти

#Область ЗапросВФайл

// Записывает Запрос(текст и параметры запроса) в файл XML.
//
// Параметры:
//  Запрос		- запрос - передаваемый Запрос.
//  ИмяФайла	- строка - имя файла.
// 
// Возвращаемое значение:
//  ИмяФайла - имя файла XML.
//
Функция ЗаписатьЗапросВФайлXML(Запрос, ИмяФайла = "") Экспорт
	
	ФайлXML = Новый ЗаписьXML;
	Если ИмяФайла = "" Тогда 
		ИмяФайла = ПолучитьИмяВременногоФайла("q1c");
	КонецЕсли;	
	ФайлXML.ОткрытьФайл(ИмяФайла);
	ФайлXML.ЗаписатьОбъявлениеXML();
	ФайлXML.ЗаписатьНачалоЭлемента("querylist");
	// Цикл запросов.
	ФайлXML.ЗаписатьНачалоЭлемента("query");
	ФайлXML.ЗаписатьАтрибут("name", "Тест");
	ФайлXML.ЗаписатьНачалоЭлемента("text");
	ТекстЗапроса = Запрос.Текст;
	Для Счетчик = 1 По СтрЧислоСтрок(ТекстЗапроса) Цикл
		ПереносСтр	= Символы.ВК + Символы.ПС;
		ТекСтрока 	= СтрПолучитьСтроку(ТекстЗапроса, Счетчик);
		ФайлXML.ЗаписатьТекст(ТекСтрока);
		ФайлXML.ЗаписатьБезОбработки(ПереносСтр);
	КонецЦикла;
	ФайлXML.ЗаписатьКонецЭлемента();
	// Запись параметров в XML-файл.
	Если Запрос.Параметры.Количество() > 0 Тогда 
		ФайлXML.ЗаписатьНачалоЭлемента("parameters");
		Для каждого ТекПараметр Из Запрос.Параметры Цикл 
			ИмяПараметра = ТекПараметр.Ключ;
			ТипПараметра = ТипЗнч(ТекПараметр.Значение);
			Значение = ТекПараметр.Значение;
			
			// Преобразование массива в список значений.
			Если ТипПараметра = Тип("Массив") Тогда 
				НовыйСписокЗначений = Новый СписокЗначений;
				НовыйСписокЗначений.ЗагрузитьЗначения(Значение);	
				ТипПараметра = Тип("СписокЗначений");
				Значение = НовыйСписокЗначений;
			КонецЕсли;	                        						
			
			ЗначениеПараметра = Значение;
			
			ФайлXML.ЗаписатьНачалоЭлемента("parameter");
			ФайлXML.ЗаписатьАтрибут("name", ИмяПараметра);
			Если ТипПараметра = Тип("СписокЗначений") Тогда 
				ФайлXML.ЗаписатьАтрибут("type", "СписокЗначений");
				ЗаписатьСписокЗначенийВXML(ФайлXML, ЗначениеПараметра);
			ИначеЕсли ТипПараметра = Тип("ТаблицаЗначений") Тогда
				ФайлXML.ЗаписатьАтрибут("type", "ТаблицаЗначений");
				
				Колонки = ЗначениеПараметра.Колонки.Количество();
				Строки = ЗначениеПараметра.Количество();
				
				ФайлXML.ЗаписатьАтрибут("colcount", XMLСтрока(Колонки));
				ФайлXML.ЗаписатьАтрибут("rowcount", XMLСтрока(Строки));
				
				ЗаписатьТаблицуЗначенийВXML(ФайлXML, ЗначениеПараметра);
			ИначеЕсли ТипПараметра = Тип("МоментВремени") Тогда
				ФайлXML.ЗаписатьАтрибут("type", "МоментВремени");
				ЗаписатьМоментВремениВXML(ФайлXML, ЗначениеПараметра);
			ИначеЕсли ТипПараметра = Тип("Граница") Тогда
				ФайлXML.ЗаписатьАтрибут("type", "Граница");
				ЗаписатьГраницуВXML(ФайлXML, ЗначениеПараметра);
			Иначе
				ИмяТипа = ИмяТипаИзЗначения(ЗначениеПараметра); 
				ФайлXML.ЗаписатьАтрибут("type", ИмяТипа);
				ФайлXML.ЗаписатьАтрибут("value", XMLСтрока(ЗначениеПараметра));
			КонецЕсли;	
			ФайлXML.ЗаписатьКонецЭлемента();
		КонецЦикла;	
		ФайлXML.ЗаписатьКонецЭлемента();
	КонецЕсли;	
	ФайлXML.ЗаписатьКонецЭлемента();
	ФайлXML.ЗаписатьКонецЭлемента();
	ФайлXML.Закрыть();
	
	ТекстСообщения = СтрШаблон(НСтр("ru = 'ВНИМАНИЕ! Запрос записан в файл: %1! Просьба после отладки удалить код, вызывающий эту функцию.'"), ИмяФайла);
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	
	Возврат ИмяФайла;
	
КонецФункции

// Записывает строки списка значений в Файл XML.
//
// Параметры:
//	ФайлXML - записьXML.
//	Значение - список значений.
//
Процедура ЗаписатьСписокЗначенийВXML(ФайлXML, Значение)
	Если ТипЗнч(Значение) <> Тип("СписокЗначений") Тогда 
		Возврат;
	КонецЕсли;	
	
	Для каждого СтрСписка Из Значение Цикл
		ЗначениеЭлементаСписка	= СтрСписка.Значение;
		// Определение имени типа.
		ИмяТипа = ИмяТипаИзЗначения(ЗначениеЭлементаСписка); 
		
		ФайлXML.ЗаписатьНачалоЭлемента("item");
			ФайлXML.ЗаписатьАтрибут("type", ИмяТипа);
			ФайлXML.ЗаписатьАтрибут("value", XMLСтрока(ЗначениеЭлементаСписка));
		ФайлXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
КонецПроцедуры

// Записывает ячейки таблицы значений в Файл XML.
//
// Параметры:
//	ФайлXML - записьXML.
//	Значение - таблица значений.
//
Процедура ЗаписатьТаблицуЗначенийВXML(ФайлXML, Значение)
	Если ТипЗнч(Значение) <> Тип("ТаблицаЗначений") Тогда 
		Возврат;
	КонецЕсли;
	
	КолКолонок 	= Значение.Колонки.Количество();
	КолСтрок	= Значение.Количество();
	
	Для СтрокаИндекс = 0 По КолСтрок - 1 Цикл
		Для КолонкаИндекс = 0 По КолКолонок - 1 Цикл 
			ЗначениеЭлементаСписка	= Значение.Получить(СтрокаИндекс).Получить(КолонкаИндекс);
			ИмяКолонки = Значение.Колонки.Получить(КолонкаИндекс).Имя;
			// Определение имени типа.
			ИмяТипа = ИмяТипаИзЗначения(ЗначениеЭлементаСписка); 
			Если ИмяТипа = "Строка" Тогда 
				Длина = Значение.Колонки.Получить(КолонкаИндекс).ТипЗначения.КвалификаторыСтроки.Длина; 	
			Иначе 
				Длина = 0;
			КонецЕсли; 
			
			ФайлXML.ЗаписатьНачалоЭлемента("item");
				ФайлXML.ЗаписатьАтрибут("nameCol", ИмяКолонки);
				ФайлXML.ЗаписатьАтрибут("row", XMLСтрока(СтрокаИндекс));
				ФайлXML.ЗаписатьАтрибут("col", XMLСтрока(КолонкаИндекс));
				ФайлXML.ЗаписатьАтрибут("type", ИмяТипа);
				ФайлXML.ЗаписатьАтрибут("length", XMLСтрока(Длина));
				ФайлXML.ЗаписатьАтрибут("value", XMLСтрока(ЗначениеЭлементаСписка));
			ФайлXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Записывает момент времени в Файл XML.
//
// Параметры:
//	ФайлXML - записьXML.
//	Значение - момент времени.
//
Процедура ЗаписатьМоментВремениВXML(ФайлXML, Значение)
	Если ТипЗнч(Значение) <> Тип("МоментВремени") Тогда 
		Возврат;
	КонецЕсли;
	
	// Определение имени типа.
	ИмяТипа = ИмяТипаИзЗначения(Значение.Ссылка); 
	
	ФайлXML.ЗаписатьНачалоЭлемента("item");
		Если Значение.Ссылка <> Неопределено Тогда 
			ФайлXML.ЗаписатьАтрибут("type", ИмяТипа);
			ФайлXML.ЗаписатьАтрибут("valueRef", XMLСтрока(Значение.Ссылка));
		КонецЕсли;	
		ФайлXML.ЗаписатьАтрибут("valueDate", XMLСтрока(Значение.Дата));
	ФайлXML.ЗаписатьКонецЭлемента();
КонецПроцедуры	

// Записывает границу.
//
Процедура ЗаписатьГраницуВXML(ФайлXML, Граница)
	Если ТипЗнч(Граница) <> Тип("Граница") Тогда
		Возврат;
	КонецЕсли;
	
	ФайлXML.ЗаписатьНачалоЭлемента("divide");
		// Определение имени типа.
		ИмяТипа 			= ИмяТипаИзЗначения(Граница.Значение); 
		ТипЗначенияГраницы 	= ТипЗнч(Граница.Значение);
		
		// Запись в строку вида границы.
		ИмяВидаГраницы = Строка(Граница.ВидГраницы);
		
		ФайлXML.ЗаписатьАтрибут("type", ИмяТипа);
		ФайлXML.ЗаписатьАтрибут("valueDiv", ИмяВидаГраницы);
		
		Если ТипЗначенияГраницы <> Тип("МоментВремени") Тогда 
			ФайлXML.ЗаписатьАтрибут("value", XMLСтрока(Граница.Значение));
		Иначе
			ЗаписатьМоментВремениВXML(ФайлXML, Граница.Значение);
		КонецЕсли;
	ФайлXML.ЗаписатьКонецЭлемента();
КонецПроцедуры	

// Возвращает строковое представление типа по значению.
//
// Параметры:
//	Значение - передаваемое значение.
//
Функция ИмяТипаИзЗначения(Значение)
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		ИмяТипа = "Строка";
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		ИмяТипа = "Число";
	ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
		ИмяТипа = "Булево";
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		ИмяТипа = "Дата";
	ИначеЕсли ТипЗнч(Значение) = Тип("МоментВремени") Тогда
		ИмяТипа = "МоментВремени";
	ИначеЕсли ТипЗнч(Значение) = Тип("Неопределено") Тогда
		ИмяТипа = "Строка";
	ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
		ИмяТипа = "Массив";
	ИначеЕсли ТипЗнч(Значение) = Тип("ФиксированныйМассив") Тогда
		ИмяТипа = "ФиксированныйМассив";
	Иначе	
		ИмяТипа = xmlТип(ТипЗнч(Значение)).ИмяТипа;
	КонецЕсли;
	
	Возврат ИмяТипа;
КонецФункции

#КонецОбласти

#Область ЕдиныНалог

// Функция получает виды операций, которые влияют на учет по единому налогу
// 
// Возвращаемое значение:
//  ВидыОпераций - массив
//
Функция ВидыОперацийЕдиныйНалог() Экспорт
	
	ВидыОпераций = Новый Массив;
	// Платежное поручение (входящее).
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийППВ.ОплатаОтПокупателя);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийППВ.ПоступлениОтПродажПоДоговорамЭквайринга);
	// Платежное поручение (исходящее).
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийППИ.ВозвратПокупателю);
	// Приходный кассовый ордер.
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийПКО.ОплатаОтПокупателя);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийПКО.РозничнаяВыручка);
	// Расходный кассовый ордер.
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийРКО.ВозвратПокупателю);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийРКО.ВозвратРозничномуПокупателю);
	
	Возврат ВидыОпераций;
	
КонецФункции // ВидыОперацийЕдиныйНалог()

#КонецОбласти

Функция ПолучитьПериодИзXML(Знач XML) Экспорт
	
	Если ТипЗнч(XML) <> Тип("ЧтениеXML") Тогда
		Чтение = Новый ЧтениеXML;
		Чтение.УстановитьСтроку(XML);
	Иначе
		Чтение = XML;
	КонецЕсли;
	
	// Прочитаем первый узел и проверим его.
	Если Не Чтение.Прочитать() Тогда
		ВызватьИсключение НСтр("ru = 'Пустой XML'");
	ИначеЕсли Чтение.Имя <> "Items" Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка в структуре XML'");
	КонецЕсли;
	
	Период = Чтение.ПолучитьАтрибут("Date");
	
	Возврат Дата(Период);
	
КонецФункции	

