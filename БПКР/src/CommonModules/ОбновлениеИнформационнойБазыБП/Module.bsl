////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы Бухгалтерия для предприятия, редакция 3.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя = Метаданные.Имя;
	Описание.Версия = Метаданные.Версия;
	Описание.ИдентификаторИнтернетПоддержки = ИнтернетПоддержкаПользователейПереопределяемыйБП.ИмяПрограммы();

	// Требуется библиотека стандартных подсистем.
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
	Описание.ТребуемыеПодсистемы.Добавить("БиблиотекаТехнологииСервиса");
	Описание.ТребуемыеПодсистемы.Добавить("БиблиотекаЭлектронныхДокументов");
	Описание.ТребуемыеПодсистемы.Добавить("БиблиотекаПодключаемогоОборудованияДляКыргызстана");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Монопольно";
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Обработчики этого события для подсистем БСП добавляются через подписку на служебное событие:
	// "СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления".
	//
	// Процедуры обработки этого события всех подсистем БСП имеют то же имя, что и эта процедура,
	// но размещены в своих подсистемах.
	// Чтобы найти процедуры можно выполнить глобальный поиск по имени процедуры.
	// Чтобы найти модули в которых размещены процедуры, можно выполнить поиск по имени события.
	
	// Обработчики, выполняемые при заполнении пустой ИБ.
	//
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ПервыйЗапуск";
	Обработчик.Комментарий = НСтр("ru = 'Выполнение обработчиков первого запуска.'");
	
	// Обработчики, выполняемые при каждом обновлении ИБ.
	//
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.УстановитьДатуТекущейВерсии";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Оперативно";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ПроверитьВалютуРегламентированногоУчета";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.0";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ИнициализироватьПользователей";
	Обработчик.Комментарий = НСтр("ru = 'Инициализация пользователей.'");
	
	// Обработчики оперативного обновления.
	
	// 3.2.1.
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Версия = "3.2.1.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьКодПравовойФормы";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение кода правовой формы справочника организация.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Версия = "3.2.1.15";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьСтавкиНСПСчетовНаОплатуПоставщиков";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение ставок НСП в табличных частях документов ""Счета от поставщиков"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Версия = "3.2.1.20";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОтредактироватьПравилоПроверкиУчета";
	Обработчик.Комментарий = НСтр("ru = 'Изменение важности проблемы в правиле проверки учета.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Версия = "3.2.1.22";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.УстановитьПредопределенныйСчетСчетуВБазе";
	Обработчик.Комментарий = НСтр("ru = 'Исправление родителя у предопределенного счета 7140.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Версия = "3.2.1.23";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьЗаписиРегистраПоступлениеТоваров";
	Обработчик.Комментарий = НСтр("ru = 'Перепроведение документов поступления товаров.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Версия = "3.2.1.25";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.НастроитьЭлементыПроверкиУчета";
	Обработчик.Комментарий = НСтр("ru = 'Удаление проверки учета.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Версия = "3.2.1.26";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ПерепровестиВозвратыДенежныхСредствОтСотрудников";
	Обработчик.Комментарий = НСтр("ru = 'Перепроведение документов ПКО и ППВ с возвратами от сотрудников.'");
		  	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Версия = "3.2.1.27";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.УдалитьЭлементПроверкиУчета_ПроверкаВалютнойСуммы";
	Обработчик.Комментарий = НСтр("ru = 'Удаление провероки учета ""Проверка заполнения валютной суммы в вводе начальных остатков"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Версия = "3.2.1.33";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьВалютуЦены";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение валюты цены в типе цен (в случае если она не заполнена).'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Версия = "3.2.1.34";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ДобавитьЭлементПроверкиУчетаОперативно";
	Обработчик.Комментарий = НСтр("ru = 'Обновление проверок учета.'");
	
	// 3.2.2.
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Версия = "3.2.2.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновлениеУчетаЕдиныйНалог";
	Обработчик.Комментарий = НСтр("ru = 'Обновление учета по единому налогу. Перенос ставок из учетной политики, заполнение метода расчета.'");

	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Версия = "3.2.3.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновлениеСтавокНСП";
	Обработчик.Комментарий = НСтр("ru = 'Добавление новых освобожденных значений ставок НСП.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Версия = "3.2.3.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнениеВидаКорректировкиВЭСФВыписанный";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизита ""Вид корректировки"" в документе ""ЭСФ выписанный"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Версия = "3.2.3.12";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьВидОперацииРеализацияТоваровИУслуг";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизита ""Вид операции"" в документе ""Реализация товаров и услуг"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Версия = "3.2.3.14";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ПерепровестиПоступленияТоваровОтНерезидентов";
	Обработчик.Комментарий = НСтр("ru = 'Перепроведение документов ПТУ с установленным признаком ""Поступление от нерезидента"" .'");
		
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Версия = "3.2.3.20";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьПредопределенныеВидыКонтактнойИнформацииСклады";
	Обработчик.Комментарий = НСтр("ru = 'Обновление контактной информации справочника Склады .'");

	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Версия = "3.2.3.21";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьСтавкиЗемельногоНалогаПоРайонамИОбластям";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение ставок Земельного налога по районам и областям.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Версия = "3.2.3.22";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьСтавкиВидовМатериаловСтенИВидовТранспорта";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение ставок Видов материалов стен и Видов транспорта.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Версия = "3.2.3.23";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьНормыАмортизацииГруппНалоговогоУчетаОС";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение норм амортизации групп налогового учета ОС.'");
	
	// 3.3.1.
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Версия = "3.3.1.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьСтавкиНалогаНаИмущество";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение ставок налога на имущества для 4 группы.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Версия = "3.3.1.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьСтавкиЗемельногоНалога";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение ставок земельного налога.'");
	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - если установить Истина, то будет выведена форма
//                                с описанием обновлений. По умолчанию, Истина.
//                                Возвращаемое значение.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
		
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует
//        указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
	Если ПредыдущееИмяКонфигурации = "ПредыдущееИмяКонфигурацииБазовая" Тогда
		Параметры.ВерсияКонфигурации = ПредыдущаяВерсияКонфигурации;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение пустой ИБ

// Процедура заполняет пустую ИБ.
//
Процедура ПервыйЗапуск() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	// В новой базе устанавливается режим интерфейса "Такси".
	Константы.ИнтерфейсТакси.Установить(Истина);
	Константы.ИнтерфейсВерсии82.Установить(Ложь);
	Константы.ФункциональнаяОпцияУчетПоНесколькимОрганизациям.Установить(Ложь);
	Константы.НеВестиУчетПоОрганизациям.Установить(Истина);

	// Запасы.
	Константы.КонтролироватьОстаткиПриПроведении.Установить(Истина);
	Константы.ТочностьЦены.Установить(2);
	Константы.НастройкаЗаполненияЦены.Установить(Перечисления.НастройкаЗаполненияЦены.ПредыдущийДокумент);
	Константы.ОтдельнаяПроводкаПоСкидке.Установить(Истина);

	// ОсновныеСредства.
	Константы.ПрисваиватьИнвентарныеНомераДляНМА.Установить(Истина);
	
	// Заполнение плана счетов.
	ПланыСчетов.Хозрасчетный.ЗаполнитьПоУмолчанию();	
	
	// Заполнение счетов учета номенклатуры
	РегистрыСведений.СчетаУчетаНоменклатуры.ЗаполнитьПоУмолчанию();
	РегистрыСведений.СчетаРасчетовСКонтрагентами.ЗаполнитьПоУмолчанию();
		
	// Корректировка себестоимости
	Константы.БазаРаспределенияКорректировкиСебестоимости.Установить(Перечисления.БазыРаспределенияКосвенныхРасходов.ПлановаяСебестоимость);
	
	// Валюта регламентированного учета.
	НациональнаяВалютаСсылка = Справочники.Валюты.НайтиПоКоду("417");	
	Константы.ВалютаРегламентированногоУчета.Установить(НациональнаяВалютаСсылка);
			
	// Курсы валют на 01.01.2015.
	РегистрыСведений.КурсыВалют.ЗаполнитьПоУмолчанию();
	
	// Назначение основаной кассы организации.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Владелец", БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация"));
	СтруктураПараметров.Вставить("НоваяОсновнаяКасса", Справочники.Кассы.НайтиПоНаименованию("Основная касса"));
	ЗаписатьОсновнуюКассу(СтруктураПараметров);
	
	// Запасы.
	ГруппаУслуги = Справочники.Номенклатура.Услуги.ПолучитьОбъект();
	ГруппаУслуги.Услуга = Истина;
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ГруппаУслуги);
	
	// Учет заработной платы и кадров.
	РегистрыСведений.СтавкиНалоговЗаработнойПлаты.ЗаполнитьПоУмолчанию();
	РегистрыСведений.НормыБольничныхЛистов.ЗаполнитьПоУмолчанию();
	РегистрыСведений.ТарифыКомандировочных.ЗаполнитьПоУмолчанию();
	РегистрыСведений.УчетнаяПолитикаПоПерсоналу.ЗаполнитьПоУмолчанию();

	// Налогообложение.
	РегистрыСведений.СтавкиНДС.ЗаполнитьПоУмолчанию();
	РегистрыСведений.СтавкиНСП.ЗаполнитьПоУмолчанию();
	Справочники.НастройкиНалоговойДекларации.ЗаполнитьПоУмолчанию();
	
	// Регламентированная отчетность.
	Константы.ИспользоватьСтатьиДвиженияДенежныхСредств.Установить(Истина);
	СтатьяДДСКурсоваяРазница = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Нереализованные прибыли и убытки от курсовых разниц", Истина);
	Константы.СтатьяДДСКурсоваяРазница.Установить(СтатьяДДСКурсоваяРазница);
	Справочники.НастройкиРегламентированныхОтчетов.ЗаполнитьПоУмолчанию();
	
	// Прочее.	
	Константы.ФункциональнаяОпцияДопРасходыНаОдноПоступление.Установить(Истина);
	Константы.РазмерОтступаВОтчетах.Установить(20);
	Константы.МакетОформленияОтчетов.Установить("Арктика");  
	
	// Ставки налога на имущество.
	РегистрыСведений.СтавкиНалогаНаИмущество.ЗаполнитьПоУмолчанию();
	
	// Ставки земельного налога
	РегистрыСведений.СтавкиЗемельногоНалога.ЗаполнитьПоУмолчанию();
	
КонецПроцедуры // ПервыйЗапуск()

////////////////////////////////////////////////////////////////////////////////
// Обновление ИБ

Процедура УстановитьДатуТекущейВерсии() Экспорт
	// В режиме сервиса не требуется напоминать об обновлении
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Константы.ДатаТекущейВерсии.Установить(Дата(2022,9,28));
КонецПроцедуры

Процедура ПроверитьВалютуРегламентированногоУчета(Параметры = Неопределено) Экспорт
	
	Если Константы.ВалютаРегламентированногоУчета.Получить() = Справочники.Валюты.ПустаяСсылка() Тогда
		
		ВалютаСом = Справочники.Валюты.НайтиПоКоду("417");
		
		Если ВалютаСом = Неопределено Тогда
			ВалютаСом = Справочники.Валюты.НайтиПоНаименованию("KGS");	
		КонецЕсли;	
		
		Константы.ВалютаРегламентированногоУчета.Установить(ВалютаСом);	
		
	КонецЕсли;
	
	// Сброс курсов валют для регл.валюты.
	// Всегда должна быть только 1 запись.
	// У этой записи курс и кратность должны быть равны 1.	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	НаборЗаписей = РегистрыСведений.КурсыВалют.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Валюта.Установить(ВалютаРегламентированногоУчета);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 1
		Или (НаборЗаписей.Количество() > 0 И (НЕ НаборЗаписей[0].Курс = 1 Или НЕ НаборЗаписей[0].Кратность = 1))
		Или НаборЗаписей.Количество() = 0 Тогда 
		НаборЗаписей.Очистить();
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Валюта = ВалютаРегламентированногоУчета;
		НоваяЗапись.Период = Дата("20150101");
		НоваяЗапись.Курс   = 1;
		НоваяЗапись.Кратность = 1;
		
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСозданиеПользователей

// Процедура инициализации пользователей конфигурации. 
//
Процедура ИнициализироватьПользователей() Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	//// Добавление администратора (администратор системы - полные права).
	//Пользователи.СоздатьАдминистратора();
	//
	//// Добавление пользователя.
	//ДобавитьПользователя(НСтр("ru = 'Пользователь'"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаписатьОсновнуюКассу(СтруктураПараметров)
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.Владелец) Тогда 
		Возврат;
	КонецЕсли;	
	
	ВладелецОбъект = СтруктураПараметров.Владелец.ПолучитьОбъект();
	ВладелецУспешноЗаблокирован = Истина;
	
	Попытка
		ВладелецОбъект.Заблокировать();
	Исключение
		
		ВладелецУспешноЗаблокирован = Ложь;
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось заблокировать %1: %2, для изменения основной кассы, по причине:
				|%3'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
				СтруктураПараметров.Владелец.Метаданные().ПредставлениеОбъекта, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,, ВладелецОбъект, ТекстСообщения);
		
	КонецПопытки;
	
	// Если удалось заблокировать, изменим основную кассу у организации.
	Если ВладелецУспешноЗаблокирован Тогда
		ВладелецОбъект.ОсновнаяКасса = СтруктураПараметров.НоваяОсновнаяКасса;
		ВладелецОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбновления

#Область Обновление_3_2_1

// Вызывается при переходе на версию конфигурации 3.2.1.6.
//
Процедура ОбновитьКодПравовойФормы() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Организации.Ссылка КАК Ссылка,
		|	Организации.удалитьКодПравовойФормы КАК КодПравовойФормы
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	НЕ Организации.ПометкаУдаления
		|	И НЕ Организации.удалитьКодПравовойФормы = ЗНАЧЕНИЕ(Перечисление.КодыПравовойФормы.ПустаяСсылка)";
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СправочникОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		СправочникОбъект.КодПравовойФормы = ВыборкаДетальныеЗаписи.КодПравовойФормы;
		
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записать элемент справочника по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Вызывается при переходе на версию конфигурации 3.2.1.15.
//
Процедура ЗаполнитьСтавкиНСПСчетовНаОплатуПоставщиков() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СчетНаОплатуПоставщика.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СчетНаОплатуПоставщика КАК СчетНаОплатуПоставщика";
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокументОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		
		Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект.Товары Цикл
			СтрокаТабличнойЧасти.СтавкаНСП = ДокументОбъект.удалитьСтавкаНСП;			
		КонецЦикла;
		
		Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект.Услуги Цикл
			СтрокаТабличнойЧасти.СтавкаНСП = ДокументОбъект.удалитьСтавкаНСПУслуги;			
		КонецЦикла;
		
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект,,, РежимЗаписиДокумента.Запись);
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить запись документа по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Вызывается при переходе на версию конфигурации 3.2.1.20.
//
Процедура ОтредактироватьПравилоПроверкиУчета() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПравилаПроверкиУчета.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПравилаПроверкиУчета КАК ПравилаПроверкиУчета
		|ГДЕ
		|	ПравилаПроверкиУчета.Наименование = &Наименование";
	Запрос.УстановитьПараметр("Наименование", "Проверка наличия флага ""Расчет ПН без накопления"" в УП по персоналу");
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СправочникОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ВажностьПроблемы = Перечисления.ВажностьПроблемыУчета.ПолезныйСовет;
		
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записать элемент справочника по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Вызывается при переходе на версию конфигурации 3.2.1.22.
//
Процедура УстановитьПредопределенныйСчетСчетуВБазе() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Ссылка,
		|	Хозрасчетный.Предопределенный КАК Предопределенный
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Код = &Код";
	Запрос.УстановитьПараметр("Код", "7140");
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ВыборкаДетальныеЗаписи.Предопределенный Тогда
			СчетОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			СчетОбъект.ИмяПредопределенныхДанных = "";
			
			Для Каждого Субконто Из СчетОбъект.ВидыСубконто Цикл
				Субконто.Предопределенное = Ложь;	
			КонецЦикла;	
			
			Попытка
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СчетОбъект);
			Исключение
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записать счет по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
				Продолжить;
			КонецПопытки;
			
			СчетОбъект.Удалить();
		Иначе	
			СчетОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			СчетОбъект.ИмяПредопределенныхДанных = "ЗатратыНаКоммунальныеУслуги";
			СчетОбъект.Родитель = ПланыСчетов.Хозрасчетный.СебестоимостьРеализованнойПродукцииИУслуг;
			СчетОбъект.ПометкаУдаления = Ложь;			
			
			Для Каждого Субконто Из СчетОбъект.ВидыСубконто Цикл
				Субконто.Предопределенное = Истина;	
			КонецЦикла;
			
			Попытка
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СчетОбъект);
			Исключение
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записать счет по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
				Продолжить;
			КонецПопытки;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

// Вызывается при переходе на версию конфигурации 3.2.1.23.
//
Процедура ОбновитьЗаписиРегистраПоступлениеТоваров() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоступлениеТоваров.Регистратор КАК Регистратор,
		|	ПоступлениеТоваров.Регистратор.Склад КАК Склад
		|ИЗ
		|	РегистрНакопления.ПоступлениеТоваров КАК ПоступлениеТоваров
		|ГДЕ
		|	НЕ ПоступлениеТоваров.Регистратор ССЫЛКА Документ.ОперацияБух";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыНакопления.ПоступлениеТоваров.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл
			Запись.Склад = Выборка.Склад;	
		КонецЦикла;	

		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);	
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записать набор записей регистра по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Вызывается при переходе на версию конфигурации 3.2.1.25.
//
Процедура НастроитьЭлементыПроверкиУчета() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПравилаПроверкиУчета.Ссылка КАК Ссылка,
		|	ПравилаПроверкиУчета.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ПравилаПроверкиУчета КАК ПравилаПроверкиУчета
		|ГДЕ
		|	ПравилаПроверкиУчета.Наименование = &Проверка1
		|	ИЛИ ПравилаПроверкиУчета.Наименование = &Проверка2";
	Запрос.УстановитьПараметр("Проверка1", "Проверка основного договора с видом ""Прочее"".");
	Запрос.УстановитьПараметр("Проверка2", "Проверка на наличие счетов налогов в операциях введенных вручную.");
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СправочникОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		
		Если ВыборкаДетальныеЗаписи.Наименование = "Проверка на наличие счетов налогов в операциях введенных вручную." Тогда
			СправочникОбъект.ВажностьПроблемы = Перечисления.ВажностьПроблемыУчета.ПолезныйСовет;
		КонецЕсли;	
		
		Попытка
			Если ВыборкаДетальныеЗаписи.Наименование = "Проверка на наличие счетов налогов в операциях введенных вручную." Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.УдалитьДанные(СправочникОбъект);	
			КонецЕсли;
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записать элемент справочника по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Вызывается при переходе на версию конфигурации 3.2.1.26.
//
Процедура ПерепровестиВозвратыДенежныхСредствОтСотрудников() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПриходныйКассовыйОрдер.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
		|ГДЕ
		|	ПриходныйКассовыйОрдер.Проведен
		|	И ПриходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ВозвратОтСотрудника)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПлатежноеПоручениеВходящее.Ссылка
		|ИЗ
		|	Документ.ПлатежноеПоручениеВходящее КАК ПлатежноеПоручениеВходящее
		|ГДЕ
		|	ПлатежноеПоручениеВходящее.Проведен
		|	И ПлатежноеПоручениеВходящее.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППВ.ВозвратОтСотрудника)";
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ДокументОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект,,, РежимЗаписиДокумента.Проведение);		
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить запись документа по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Вызывается при переходе на версию конфигурации 3.2.1.27.
//
Процедура УдалитьЭлементПроверкиУчета_ПроверкаВалютнойСуммы() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПравилаПроверкиУчета.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПравилаПроверкиУчета КАК ПравилаПроверкиУчета
		|ГДЕ
		|	ПравилаПроверкиУчета.Наименование = &Проверка";
	Запрос.УстановитьПараметр("Проверка", "Проверка заполнения валютной суммы в вводе начальных остатков");
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СправочникОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		
		Попытка
			ОбновлениеИнформационнойБазы.УдалитьДанные(СправочникОбъект);	
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записать элемент справочника по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Вызывается при переходе на версию конфигурации 3.2.1.33.
//
Процедура ЗаполнитьВалютуЦены() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТипыЦенНоменклатуры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ТипыЦенНоменклатуры КАК ТипыЦенНоменклатуры
		|ГДЕ
		|	НЕ ТипыЦенНоменклатуры.ПометкаУдаления
		|	И ТипыЦенНоменклатуры.ВалютаЦены = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)";
	РезультатЗапроса = Запрос.Выполнить();
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СправочникОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ВалютаЦены = ВалютаРегламентированногоУчета; 
		
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);	
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записать элемент справочника по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
	    
КонецПроцедуры

// Вызывается при переходе на версию конфигурации 3.2.1.34.
//
Процедура ДобавитьЭлементПроверкиУчетаОперативно() Экспорт

	КонтрольВеденияУчетаСлужебный.ОбновитьВспомогательныеДанныеПоИзменениямКонфигурации();
	    
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_2_2

// Вызывается при переходе на версию конфигурации 3.2.2.3.
//
Процедура ОбновлениеУчетаЕдиныйНалог() Экспорт
	
	// Заполнение метода расчета ЕН для плательщиков ЕН.
	// до 01 янв 2021 кассовый метод, после метод начисления.
	ЕстьИзменения = Ложь;
	
	НаборЗаписей = РегистрыСведений.УчетнаяПолитикаОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл 
		Если НЕ Запись.ПлательщикЕН	Тогда 
			Продолжить;
		КонецЕсли;
		
		Если Запись.Период < Дата(2021, 01, 01) Тогда 
			Запись.ПлательщикЕНКассовыйМетод = Истина;
			Запись.ПлательщикЕНМетодНачисления = Ложь;
		Иначе 
			Запись.ПлательщикЕНКассовыйМетод = Ложь;
			Запись.ПлательщикЕНМетодНачисления = Истина;
		КонецЕсли;	
		
		ЕстьИзменения = Истина;
	КонецЦикла;	
	
	Если ЕстьИзменения Тогда 
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей,, Истина, Истина);
	КонецЕсли;	
	
	// Заполнение РС Ставки ЕН.
	// Для каждого набора ставок одна зипись.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	МИНИМУМ(УчетнаяПолитикаОрганизаций.Период) КАК Период,
		|	УчетнаяПолитикаОрганизаций.СтавкаЕННаличнаяФорма1 КАК СтавкаЕННаличнаяФорма1,
		|	УчетнаяПолитикаОрганизаций.СтавкаЕННаличнаяФорма2 КАК СтавкаЕННаличнаяФорма2,
		|	УчетнаяПолитикаОрганизаций.СтавкаЕНБезНаличнаяФорма1 КАК СтавкаЕНБезНаличнаяФорма1,
		|	УчетнаяПолитикаОрганизаций.СтавкаЕНБезНаличнаяФорма2 КАК СтавкаЕНБезНаличнаяФорма2
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
		|ГДЕ
		|	УчетнаяПолитикаОрганизаций.ПлательщикЕН
		|
		|СГРУППИРОВАТЬ ПО
		|	УчетнаяПолитикаОрганизаций.СтавкаЕННаличнаяФорма1,
		|	УчетнаяПолитикаОрганизаций.СтавкаЕННаличнаяФорма2,
		|	УчетнаяПолитикаОрганизаций.СтавкаЕНБезНаличнаяФорма1,
		|	УчетнаяПолитикаОрганизаций.СтавкаЕНБезНаличнаяФорма2";
	РезультатЗапроса = Запрос.Выполнить();
	
	НаборЗаписей = РегистрыСведений.СтавкиЕН.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	ЕстьИзменения = Ложь;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		// Переработка, Торговля, Производство.
		Запись = НаборЗаписей.Добавить();		
		Запись.Период = ВыборкаДетальныеЗаписи.Период;
		Запись.ВидДеятельности = Перечисления.ВидыДеятельностиЕН.ПереработкаПроизводствоТорговля;
		Запись.СтавкаНаличная = ВыборкаДетальныеЗаписи.СтавкаЕННаличнаяФорма1;
		Запись.СтавкаБезналичная = ВыборкаДетальныеЗаписи.СтавкаЕНБезНаличнаяФорма1;
		
		// Прочее.
		Запись = НаборЗаписей.Добавить();
		Запись.Период = ВыборкаДетальныеЗаписи.Период;
		Запись.ВидДеятельности = Перечисления.ВидыДеятельностиЕН.Прочее;
		Запись.СтавкаНаличная = ВыборкаДетальныеЗаписи.СтавкаЕННаличнаяФорма2;
		Запись.СтавкаБезналичная = ВыборкаДетальныеЗаписи.СтавкаЕНБезНаличнаяФорма2;
		
		ЕстьИзменения = Истина;
	КонецЕсли;

	Если ЕстьИзменения Тогда 
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей,, Истина, Истина);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_2_3

// Вызывается при переходе на версию конфигурации 3.2.3.3.
//
Процедура ОбновлениеСтавокНСП() Экспорт
	
	// Заполнение регистра сведений Ставки НСП	
	// с 01 января 2022 г. 
	ОсновнаяОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
	Если НЕ ЗначениеЗаполнено(ОсновнаяОрганизация) Тогда
		Возврат;
	КонецЕсли;	
	
	МенеджерЗаписи = РегистрыСведений.СтавкиНСП.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = Дата(2022, 01, 01);
	МенеджерЗаписи.Организация = ОсновнаяОрганизация;
	МенеджерЗаписи.СтавкаНСП = Справочники.СтавкиНСП.ТорговляОсвобожденные;
	МенеджерЗаписи.Ставка = 2;
	МенеджерЗаписи.Записать();
	
	МенеджерЗаписи = РегистрыСведений.СтавкиНСП.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = Дата(2022, 01, 01);
	МенеджерЗаписи.Организация = ОсновнаяОрганизация;
	МенеджерЗаписи.СтавкаНСП = Справочники.СтавкиНСП.ПрочееОсвобожденные;
	МенеджерЗаписи.Ставка = 3;
	МенеджерЗаписи.Записать();
	
	МенеджерЗаписи = РегистрыСведений.СтавкиНСП.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = Дата(2022, 01, 01);
	МенеджерЗаписи.Организация = ОсновнаяОрганизация;
	МенеджерЗаписи.СтавкаНСП = Справочники.СтавкиНСП.ЗастройщикиЖилья;
	МенеджерЗаписи.Ставка = 4;
	МенеджерЗаписи.Записать();
			
КонецПроцедуры

// Вызывается при переходе на версию конфигурации 3.2.3.5.
//
Процедура ЗаполнениеВидаКорректировкиВЭСФВыписанный() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭлектронныйСчетФактураВыписанный.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЭлектронныйСчетФактураВыписанный КАК ЭлектронныйСчетФактураВыписанный
		|ГДЕ
		|	ЭлектронныйСчетФактураВыписанный.ЭтоКорректировочныйСФ
		|	И НЕ ЭлектронныйСчетФактураВыписанный.СерияКорректируемогоСФ = """"";
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл		
		ДокументОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ВидКорректировки = 1;
		
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект,,, РежимЗаписиДокумента.Запись);		
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить запись документа по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Вызывается при переходе на версию конфигурации 3.2.3.12.
//
Процедура ЗаполнитьВидОперацииРеализацияТоваровИУслуг() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РеализацияТоваровУслуг.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.ПустаяСсылка)";
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ВидОперацииПоУмолчанию = Перечисления.ВидыОперацийРеализацияТоваров.ТоварыУслуги;
		
		КоличествоСписков = 0;	
		Если ВыборкаДетальныеЗаписи.Ссылка.Товары.Количество() > 0 Тогда 
			ВидОперацииПоУмолчанию = Перечисления.ВидыОперацийРеализацияТоваров.Товары;
			КоличествоСписков = КоличествоСписков + 1;
		КонецЕсли;
		
		Если ВыборкаДетальныеЗаписи.Ссылка.Услуги.Количество() > 0 Тогда 
			ВидОперацииПоУмолчанию = Перечисления.ВидыОперацийРеализацияТоваров.Услуги;
			КоличествоСписков = КоличествоСписков + 1;
		КонецЕсли;
		
		Если ВыборкаДетальныеЗаписи.Ссылка.ОС.Количество() > 0 Тогда 
			ВидОперацииПоУмолчанию = Перечисления.ВидыОперацийРеализацияТоваров.ОсновныеСредства;
			КоличествоСписков = КоличествоСписков + 1;
		КонецЕсли;
		
		Если КоличествоСписков > 1 Тогда 
			ВидОперацииПоУмолчанию = Перечисления.ВидыОперацийРеализацияТоваров.ТоварыУслуги;
		КонецЕсли;	
		
		ДокументОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ВидОперации = ВидОперацииПоУмолчанию;
		
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект,,,РежимЗаписиДокумента.Запись);		
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить запись документа по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Вызывается при переходе на версию конфигурации 3.2.3.14.
//
Процедура ПерепровестиПоступленияТоваровОтНерезидентов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	НЕ ПоступлениеТоваровУслуг.ПометкаУдаления
		|	И ПоступлениеТоваровУслуг.Проведен
		|	И ПоступлениеТоваровУслуг.Дата > &Дата
		|	И ПоступлениеТоваровУслуг.ПоступлениеОтНерезидента";	
	Запрос.УстановитьПараметр("Дата", Дата(2020, 07, 01));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ДокументОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект,,, РежимЗаписиДокумента.Проведение);		
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить запись документа по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Вызывается при переходе на версию конфигурации 3.2.3.20.
//
Процедура ОбновитьПредопределенныеВидыКонтактнойИнформацииСклады() Экспорт
	
	КИ_Склады = Справочники.ВидыКонтактнойИнформации.СправочникСклады.ПолучитьОбъект();
	КИ_Склады.Используется = Истина;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(КИ_Склады);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонСклада;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 1;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресСклада;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 2;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

// Вызывается при переходе на версию конфигурации 3.2.3.21.
//
Процедура ЗаполнитьСтавкиЗемельногоНалогаПоРайонамИОбластям() Экспорт
	
	// Заполнение регистра сведений "СтавкиЗемельногоНалогаПоОбластям" по данным табличной части "ШкалаСтавкиОтЧисленности" справочника "Области"
	НаборЗаписей = РегистрыСведений.СтавкиЗемельногоНалогаПоОбластям.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбластиШкалаСтавкиОтЧисленности.Ссылка КАК Ссылка,
		|	ОбластиШкалаСтавкиОтЧисленности.НижняяГраница КАК НижняяГраница,
		|	ОбластиШкалаСтавкиОтЧисленности.Ставка КАК Ставка
		|ИЗ
		|	Справочник.Области.удалитьШкалаСтавкиОтЧисленности КАК ОбластиШкалаСтавкиОтЧисленности
		|ГДЕ
		|	НЕ ОбластиШкалаСтавкиОтЧисленности.Ссылка.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ЕстьИзменения = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Период = Дата(2021, 01, 01);
		Запись.Область = Выборка.Ссылка;
		
		ЕстьИзменения = Истина;
		
	КонецЦикла;
	
	Если ЕстьИзменения Тогда 
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей,, Истина, Истина);
	КонецЕсли;
	
	// Заполнение регистра сведений "СтавкиЗемельногоНалогаПоРайонам" по данным табличной части "СтавкиЗемельногоНалога" справочника "Районы"
	НаборЗаписей = РегистрыСведений.СтавкиЗемельногоНалогаПоРайонам.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РайоныСтавкиЗемельногоНалога.Ссылка КАК Ссылка,
		|	РайоныСтавкиЗемельногоНалога.ВидЗемельногоУчастка КАК ВидЗемельногоУчастка,
		|	РайоныСтавкиЗемельногоНалога.Ставка КАК Ставка
		|ИЗ
		|	Справочник.Районы.удалитьСтавкиЗемельногоНалога КАК РайоныСтавкиЗемельногоНалога
		|ГДЕ
		|	НЕ РайоныСтавкиЗемельногоНалога.Ссылка.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ЕстьИзменения = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Период = Дата(2021, 01, 01);
		Запись.Район = Выборка.Ссылка;
		
		ЕстьИзменения = Истина;
		
	КонецЦикла;
	
	Если ЕстьИзменения Тогда 
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей,, Истина, Истина);
	КонецЕсли;
	
	// Заполнение регистра сведений "СтавкиЗемельногоНалогаПоОбластям" из базы сервисов
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Области.Ссылка КАК Ссылка,
		|	Области.Код КАК Код
		|ИЗ
		|	Справочник.Области КАК Области
		|ГДЕ
		|	НЕ Области.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДополнительныеПараметры = Новый Структура("Ссылка, Код", Выборка.Ссылка, Выборка.Код);
		Справочники.Области.ЗаполнитьСтавкиЗемельногоНалога(ДополнительныеПараметры);
	КонецЦикла;
		
	// Заполнение регистра сведений "СтавкиЗемельногоНалогаПоРайонам" из базы сервисов
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Районы.Ссылка КАК Ссылка,
		|	Районы.Код КАК Код
		|ИЗ
		|	Справочник.Районы КАК Районы
		|ГДЕ
		|	НЕ Районы.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДополнительныеПараметры = Новый Структура("Ссылка, Код", Выборка.Ссылка, Выборка.Код);
		Справочники.Районы.ЗаполнитьСтавкиЗемельногоНалога(ДополнительныеПараметры);
	КонецЦикла;
		
КонецПроцедуры	

// Вызывается при переходе на версию конфигурации 3.2.3.22.
//
Процедура ЗаполнитьСтавкиВидовМатериаловСтенИВидовТранспорта() Экспорт

	// Заполнение регистра сведений "ШкалаОценкиСтоимостиВидовМатериаловСтен" по данным табличной части "ШкалаОценкиСтоимости" справочника "ВидыМатериаловСтенНалогНаИмущество"
	НаборЗаписей = РегистрыСведений.ШкалаОценкиСтоимостиВидовМатериаловСтен.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШкалаОценкиСтоимости.Ссылка КАК Ссылка,
		|	ШкалаОценкиСтоимости.НижняяГраница КАК НижняяГраница,
		|	ШкалаОценкиСтоимости.Ставка КАК Ставка
		|ИЗ
		|	Справочник.ВидыМатериаловСтенНалогНаИмущество.удалитьШкалаОценкиСтоимости КАК ШкалаОценкиСтоимости
		|ГДЕ
		|	НЕ ШкалаОценкиСтоимости.Ссылка.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ЕстьИзменения = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Период = Дата(2021, 01, 01);
		Запись.ВидМатериалаСтен = Выборка.Ссылка;
		
		ЕстьИзменения = Истина;
		
	КонецЦикла;
	
	Если ЕстьИзменения Тогда 
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей,, Истина, Истина);
	КонецЕсли;
	
	// Заполнение регистра сведений "ШкалаОценкиСтоимостиВидовТранспорта" по данным табличной части "ШкалаОценкиСтоимости" справочника "ВидыТранспортаНалогНаИмущество"
	НаборЗаписей = РегистрыСведений.ШкалаОценкиСтоимостиВидовТранспорта.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШкалаОценкиСтоимости.Ссылка КАК Ссылка,
		|	ШкалаОценкиСтоимости.НижняяГраница КАК НижняяГраница,
		|	ШкалаОценкиСтоимости.Ставка КАК Ставка
		|ИЗ
		|	Справочник.ВидыТранспортаНалогНаИмущество.удалитьШкалаОценкиСтоимости КАК ШкалаОценкиСтоимости
		|ГДЕ
		|	НЕ ШкалаОценкиСтоимости.Ссылка.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ЕстьИзменения = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Период = Дата(2021, 01, 01);
		Запись.ВидТранспорта = Выборка.Ссылка;
		
		ЕстьИзменения = Истина;
		
	КонецЦикла;
	
	Если ЕстьИзменения Тогда 
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей,, Истина, Истина);
	КонецЕсли;
	
	// Заполнение регистра сведений "ШкалаОценкиСтоимостиВидовМатериаловСтен" из базы сервисов по элементам "Металл" и "Прочее"
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыМатериаловСтенНалогНаИмущество.Ссылка КАК Ссылка,
		|	ВидыМатериаловСтенНалогНаИмущество.Код КАК Код
		|ИЗ
		|	Справочник.ВидыМатериаловСтенНалогНаИмущество КАК ВидыМатериаловСтенНалогНаИмущество
		|ГДЕ
		|	НЕ ВидыМатериаловСтенНалогНаИмущество.ПометкаУдаления
		|	И (ВидыМатериаловСтенНалогНаИмущество.Код = ""600""
		|			ИЛИ ВидыМатериаловСтенНалогНаИмущество.Код = ""700"")";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДополнительныеПараметры = Новый Структура("Ссылка, Код", Выборка.Ссылка, Выборка.Код);
		Справочники.ВидыМатериаловСтенНалогНаИмущество.ЗаполнитьСтавкиВидовМатериаловСтен(ДополнительныеПараметры);
	КонецЦикла;
	
	// Заполнение регистра сведений "ШкалаОценкиСтоимостиВидовТранспорта" из базы сервисов
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыТранспортаНалогНаИмущество.Ссылка КАК Ссылка,
		|	ВидыТранспортаНалогНаИмущество.Код КАК Код
		|ИЗ
		|	Справочник.ВидыТранспортаНалогНаИмущество КАК ВидыТранспортаНалогНаИмущество
		|ГДЕ
		|	НЕ ВидыТранспортаНалогНаИмущество.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДополнительныеПараметры = Новый Структура("Ссылка, Код", Выборка.Ссылка, Выборка.Код);
		Справочники.ВидыТранспортаНалогНаИмущество.ЗаполнитьСтавкиВидовТранспорта(ДополнительныеПараметры);
	КонецЦикла;
	
	// Заполнение регистра сведений "КорректировочныеКоэффициентыНалогаНаИмущество" из базы сервисов
	РегистрыСведений.КорректировочныеКоэффициентыНалогаНаИмущество.ЗаполнитьСтавкиКорректировочныхКоэффициентовНалогаНаИмущество();
	
КонецПроцедуры	

// Вызывается при переходе на версию конфигурации 3.2.3.23.
//
Процедура ЗаполнитьНормыАмортизацииГруппНалоговогоУчетаОС() Экспорт

	// Заполнение регистра сведений "НормыАмортизацииГруппНалоговогоУчетаОС" по данным справочника "ГруппыНалоговогоУчетаОС"
	НаборЗаписей = РегистрыСведений.НормыАмортизацииГруппНалоговогоУчетаОС.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГруппыНалоговогоУчетаОС.Ссылка КАК Ссылка,
		|	ГруппыНалоговогоУчетаОС.удалитьНормаАмортизации КАК НормаАмортизации,
		|	ГруппыНалоговогоУчетаОС.удалитьНормаАмортизацииДополнительная КАК НормаАмортизацииДополнительная
		|ИЗ
		|	Справочник.ГруппыНалоговогоУчетаОС КАК ГруппыНалоговогоУчетаОС
		|ГДЕ
		|	НЕ ГруппыНалоговогоУчетаОС.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ЕстьИзменения = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Период = Дата(2009, 01, 01);
		Запись.ГруппаНалоговогоУчетаОС = Выборка.Ссылка;
		
		ЕстьИзменения = Истина;
		
	КонецЦикла;
	
	Если ЕстьИзменения Тогда 
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей,, Истина, Истина);
	КонецЕсли;
		
	// Заполнение регистра сведений "НормыАмортизацииГруппНалоговогоУчетаОС" из базы сервисов по группе 4
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГруппыНалоговогоУчетаОС.Ссылка КАК Ссылка,
		|	ГруппыНалоговогоУчетаОС.Код КАК Код
		|ИЗ
		|	Справочник.ГруппыНалоговогоУчетаОС КАК ГруппыНалоговогоУчетаОС
		|ГДЕ
		|	НЕ ГруппыНалоговогоУчетаОС.ПометкаУдаления
		|	И ГруппыНалоговогоУчетаОС.Код = ""4гр""";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДополнительныеПараметры = Новый Структура("Ссылка, Код", Выборка.Ссылка, Выборка.Код);
		Справочники.ГруппыНалоговогоУчетаОС.ЗаполнитьНормыАмортизацииГруппНалоговогоУчетаОС(ДополнительныеПараметры);
	КонецЦикла;
		
КонецПроцедуры	

#КонецОбласти

#Область Обновление_3_3_1

// Вызывается при переходе на версию конфигурации 3.3.1.2.
//
Процедура ЗаполнитьСтавкиНалогаНаИмущество() Экспорт
	
	Группа4СОбъект = Справочники.ГруппыИмущества.ГИ4с.ПолучитьОбъект();
	Группа4СОбъект.НаименованиеПолное = "Транспортные средства, самоходные машины и механизмы, плавучие средства";
	Группа4СОбъект.Записать();
	
	Группа4НСОбъект = Справочники.ГруппыИмущества.ГИ4нс.ПолучитьОбъект();
	Группа4НСОбъект.НаименованиеПолное = "Несамоходные транспортные средства (прицепы, полуприцепы, баржи, вагоны, платформы, цистерны и другие подобные средства)";
	Группа4НСОбъект.Записать();
	
	// Заполнение ставки для группы 4 самоходные
	ПериодЗаполнения = Дата(2022,1,1);
	Группа4С = Справочники.ГруппыИмущества.ГИ4с;
	
	НаборЗаписей = РегистрыСведений.СтавкиНалогаНаИмущество.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ГруппаНалогаНаИмущество.Установить(Группа4С);
	НаборЗаписей.Отбор.Период.Установить(ПериодЗаполнения);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	Запись = НаборЗаписей.Добавить();
	Запись.Период = ПериодЗаполнения;
	Запись.ГруппаНалогаНаИмущество = Группа4С;
	Запись.Ставка = 1;
	
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей,, Истина, Истина);
	
	// Заполнение ставки для группы 4 несамоходные
	Группа4НС = Справочники.ГруппыИмущества.ГИ4нс;
	
	НаборЗаписей = РегистрыСведений.СтавкиНалогаНаИмущество.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ГруппаНалогаНаИмущество.Установить(Группа4НС);
	НаборЗаписей.Отбор.Период.Установить(ПериодЗаполнения);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	Запись = НаборЗаписей.Добавить();
	Запись.Период = ПериодЗаполнения;
	Запись.ГруппаНалогаНаИмущество = Группа4НС;
	Запись.Ставка = 0.5;
	
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей,, Истина, Истина);
	
	// Очистка регистра сведений "Шкала оценки стоимости видов транспорта" для вида транспорта "Несамоходные"  
	Несамоходные = Справочники.ВидыТранспортаНалогНаИмущество.НайтиПоНаименованию("Несамоходные");
	
	НаборЗаписей = РегистрыСведений.ШкалаОценкиСтоимостиВидовТранспорта.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидТранспорта.Установить(Несамоходные);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
		
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей,, Истина, Истина);
	
	// Очистка регистра сведений "Шкала оценки стоимости видов транспорта" для вида транспорта "Другие"  	
	Другие = Справочники.ВидыТранспортаНалогНаИмущество.НайтиПоНаименованию("Другие");
	
	НаборЗаписей = РегистрыСведений.ШкалаОценкиСтоимостиВидовТранспорта.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидТранспорта.Установить(Другие);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
		
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей,, Истина, Истина);
	
КонецПроцедуры	

// Вызывается при переходе на версию конфигурации 3.3.1.3.
//
Процедура ЗаполнитьСтавкиЗемельногоНалога() Экспорт
	
	// Заполнение ставок земельного налога
	ПериодЗаполнения = Дата(2022,1,1);
	
	НаборЗаписей = РегистрыСведений.СтавкиЗемельногоНалога.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ПериодЗаполнения);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	Запись = НаборЗаписей.Добавить();
	Запись.Период = ПериодЗаполнения;
	Запись.КатегорияЗемель = Перечисления.КатегорииЗемель.Сельхозугодья;
	Запись.Ставка = 0.01;
	
	Запись = НаборЗаписей.Добавить();
	Запись.Период = ПериодЗаполнения;
	Запись.КатегорияЗемель = Перечисления.КатегорииЗемель.Несельскохозяйственные;
	Запись.Ставка = 1;
	
	Запись = НаборЗаписей.Добавить();
	Запись.Период = ПериодЗаполнения;
	Запись.КатегорияЗемель = Перечисления.КатегорииЗемель.Приусадебные;
	Запись.Ставка = 1;
	
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей,, Истина, Истина);	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
