#Область ПрограммныйИнтерфейс

#Область Системные

// Функция, вызываемая перед началом работы системы.
//
Процедура ПередНачаломРаботыСистемы() Экспорт
	
	Если глПодключаемоеОборудование = Неопределено Тогда
		глПодключаемоеОборудование = Новый Структура();
		глПодключаемоеОборудование.Вставить("ПараметрыПодключенияПО" , Новый Массив());
		глПодключаемоеОборудование.Вставить("ДрайверыОборудования"   , Новый Соответствие());
		глПодключаемоеОборудование.Вставить("ПоследнийСлипЧек"       , "");
		глПодключаемоеОборудование.Вставить("ЗавершениеРаботыСистемы", Ложь);
		глПодключаемоеОборудование.Вставить("ДанныеОчереди"          , Неопределено);
		глПодключаемоеОборудование.Вставить("ФискальныеУстройства"   , Новый Массив());
		глПодключаемоеОборудование.Вставить("ПроверкиКодаМаркировки" , Новый Массив());
	КонецЕсли;
	
КонецПроцедуры

// Функция, вызываемая при начале работы системы.
//
Процедура ПриНачалеРаботыСистемы() Экспорт
	
#Если Не ВебКлиент Тогда
	ПереустановитьПомеченныеПоставляемыеДрайверы();
	ПодключениеСистемыВзаимодействия(); 
#КонецЕсли

КонецПроцедуры

// Процедура, вызываемая при начале работы системы, выполняет подготовку данных механизма.
//
Процедура ПередЗавершениемРаботыСистемы() Экспорт
	
КонецПроцедуры

// Производит получение события от устройства.
// 
// Параметры:
//  ОписаниеСобытия - ОписаниеОповещения - событие описания оповещения.
//  ОписаниеОшибки - Строка - описание ошибки
//
// Возвращаемое значение:
//  Структура.
//  Неопределено.
//
Функция ПолучитьСобытиеОтУстройства(ОписаниеСобытия, ОписаниеОшибки = "") Экспорт
	
	Результат = Неопределено;
	
	// Поиск обработчика события
	Для Каждого Подключение Из глПодключаемоеОборудование.ПараметрыПодключенияПО Цикл
		Если Подключение.ИДУстройства = ОписаниеСобытия.Источник
		 Или (ПустаяСтрока(Подключение.ИДУстройства) И Подключение.ИменаСобытий.Количество() > 0) Тогда
			// Ищем среди подключенного оборудования устройство с полученным событием.
			Событие = Подключение.ИменаСобытий.Найти(ОписаниеСобытия.Событие);
			Если Событие <> Неопределено Тогда
				ОбъектДрайвера = Подключение.ОбъектДрайвера;
				// Обрабатываем сообщение
				РезультатОбработки = ПодключаемоеОборудованиеДрайверКлиент.ОбработатьСобытие(ОбъектДрайвера, Подключение, ОписаниеСобытия.Событие, ОписаниеСобытия.Данные);
				// Оповещаем 
				Если РезультатОбработки.Результат Тогда 
					Результат = Новый Структура();
					Результат.Вставить("ИмяСобытия", РезультатОбработки.Событие);
					Результат.Вставить("Параметр",   РезультатОбработки.Данные);
					Результат.Вставить("Источник",   "ПодключаемоеОборудование");
					Возврат Результат;
				Иначе
					ОписаниеОшибки = ОписаниеСобытия.Событие;
					Возврат Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Производит обработку данных события, полученных от клиента.
// 
// Параметры:
//  ОписаниеСобытия - ОписаниеОповещения - событие описания оповещения.
//  ОписаниеОшибки - Строка - описание ошибки
//
// Возвращаемое значение:
//  Булево.
//
Функция ОбработатьСобытиеОтУстройства(ОписаниеСобытия, ОписаниеОшибки = "") Экспорт
	
	Результат = Истина;
	// Поиск обработчика события
	Для Каждого Подключение Из глПодключаемоеОборудование.ПараметрыПодключенияПО Цикл
		Если Подключение.ИДУстройства = ОписаниеСобытия.Источник
		 Или (ПустаяСтрока(Подключение.ИДУстройства) И Подключение.ИменаСобытий.Количество() > 0) Тогда
			// Ищем среди подключенного оборудования устройство с полученным событием.
			Событие = Подключение.ИменаСобытий.Найти(ОписаниеСобытия.Событие);
			Если Событие <> Неопределено Тогда
				ОбъектДрайвера = Подключение.ОбъектДрайвера;
				// Обрабатываем сообщение
				РезультатОбработки = ПодключаемоеОборудованиеДрайверКлиент.ОбработатьСобытие(ОбъектДрайвера, Подключение, ОписаниеСобытия.Событие, ОписаниеСобытия.Данные);
				// Оповещаем 
				Если РезультатОбработки.Результат Тогда 
					Оповестить(РезультатОбработки.Событие, РезультатОбработки.Данные, "ПодключаемоеОборудование");
				Иначе
					Результат = Ложь;
					ОписаниеОшибки = ОписаниеСобытия.Событие;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры подключения устройства.
// 
// Параметры:
//  ДанныеУстройства - Неопределено, Произвольный, Структура - Данные устройства
// 
// Возвращаемое значение:
//  Структура - Параметры подключения:
//   * Наименование - Строка.
//   * ТипОборудования - ПеречислениеСсылка.ТипыПодключаемогоОборудования.
//   * ПодключениеИзМакета - Булево.
//   * ПодключениеЛокальноПоИдентификатору - Булево. 
//   * ИдентификаторОбъекта - СправочникСсылка.ПодключаемоеОборудование.
//   * ВерсияДрайвера - Строка.
//   * ИмяМакетаДрайвера - Строка.
//   * РевизияИнтерфейса - Строка.
//   * ШиринаСтроки - Строка.
//   * ПечатьКвитанцийНаТерминале - Булево. 
//   * КороткиеСлипЧеки - Булево.
//   * ВыдачиНаличныхДенежныхСредств - Булево. 
//   * ОплатаЭлектроннымиСертификатами - Булево.
//   * СтолбцовНаДисплее - Число.
//   * СтрокНаДисплее - Число. 
//   * ДисплейОтображаетТекст - Булево.
//   * ДисплейОтображаетГрафику - Булево.
//   * ДисплейОтображаетQRКод - Булево.
//   * ИдентификаторУстройства - УникальныйИдентификатор.
//   * ОбъектДрайвера - Неопределено -
//   * Параметры - Неопределено -
//   * ОбработчикДрайвера - Неопределено -
//   * Клиенты - Массив из СправочникСсылка.РабочиеМеста -
//   * Ссылка - СправочникСсылка.ПодключаемоеОборудование.
//   * СетевоеОборудование - Булево. 
//   * КоличествоПодключенных - Число -
//   * ИменаСобытий - Массив Из Строка -
//   * ИДУстройства - Строка.
//
Функция ПараметрыПодключенияУстройства(ДанныеУстройства) Экспорт
	
	Подключение = МенеджерОборудованияКлиентСервер.ПараметрыПодключенияДрайвера(ДанныеУстройства);
	Подключение.Вставить("Клиенты", Новый Массив());
	Подключение.Вставить("Ссылка"                  , ДанныеУстройства.Ссылка);
	Подключение.Вставить("Параметры"               , ДанныеУстройства.Параметры);
	Подключение.Вставить("СетевоеОборудование"     , ДанныеУстройства.СетевоеОборудование);
	Подключение.Вставить("КоличествоПодключенных"  , 0);
	Подключение.Вставить("ИменаСобытий"            , Новый Массив());
	Подключение.Вставить("ИДУстройства"            , "");
#Если ВебКлиент Тогда
	Подключение.ОбработчикДрайвера = ПодключаемоеОборудованиеДрайверКлиент; 
#Иначе
	Подключение.ОбработчикДрайвера = ПодключаемоеОборудованиеДрайверСинхронноКлиент; 
#КонецЕсли
	Возврат Подключение;
	
КонецФункции

// Возвращает текущую дату, приведенную к часовому поясу сеанса.
// Предназначена для использования вместо функции ТекущаяДата().
//
// Возвращаемое значение:
//  Дата.
//
Функция ДатаСеанса() Экспорт
	
	ДатаСеанса = МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса();
	Если ЗначениеЗаполнено(ДатаСеанса) Тогда
		Возврат ДатаСеанса;
	Иначе 
		Возврат МенеджерОборудованияВызовСервера.ДатаСеанса();
	КонецЕсли;
	
КонецФункции

#Если Не ВебКлиент Тогда

// Установить или переустановить драйверы помеченные флагами.
//
Процедура ПереустановитьПомеченныеПоставляемыеДрайверы() Экспорт
	
	ПараметрыРаботыКлиента = МенеджерОборудованияКлиентПовтИсп.ПараметрыРаботыКлиента();
	Для Каждого ИмяМакетаДрайвера Из ПараметрыРаботыКлиента.ИменаМакетовДляПереустановки Цикл
		ОбщегоНазначенияКлиент.УстановитьКомпонентуИзМакета(Неопределено, ИмяМакетаДрайвера);
	КонецЦикла;
	
КонецПроцедуры

#КонецЕсли

#КонецОбласти

#Область РабочееМесто

// Выполняет обновление имени компьютера в параметре сеанса "РабочееМестоКлиента".
//
// Возвращаемое значение:
//  Булево.
//
Функция ОбновитьРабочееМестоКлиента() Экспорт
	
	Результат = Истина;
	
	РабочееМесто = РабочееМестоКлиента();
	
	Если Не ЗначениеЗаполнено(РабочееМесто) Тогда
		
		МассивРабочихМест = НайтиРабочиеМестаПоИдентификатору(МенеджерОборудованияКлиентСервер.ИдентификаторКлиентаДляРабочегоМеста());
		Если МассивРабочихМест.Количество() = 0 Тогда
			Параметры = Новый Структура;
			Параметры.Вставить("ИмяКомпьютера");
			Параметры.Вставить("ИдентификаторКлиента");
			
			#Если Не ВебКлиент Тогда
				Параметры.ИмяКомпьютера = ИмяКомпьютера();
			#КонецЕсли
			
			Параметры.ИдентификаторКлиента = МенеджерОборудованияКлиентСервер.ИдентификаторКлиентаДляРабочегоМеста();
			РабочееМесто = МенеджерОборудованияВызовСервера.СоздатьРабочееМестоКлиента(Параметры);
		Иначе
			РабочееМесто = МассивРабочихМест[0];
		КонецЕсли;
		
	КонецЕсли;
	
	Если Результат И РабочееМесто <> РабочееМестоКлиента() Тогда
		МенеджерОборудованияВызовСервера.УстановитьРабочееМестоКлиента(РабочееМесто);
		Оповестить("ИзмененоРабочееМестоТекущегоСеанса", РабочееМесто);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура для выбора рабочего места текущего сеанса.
//
// Параметры:
//  ПараметрКоманды - Произвольный - источник, в котором реализована команда
//  ПараметрыВыполненияКоманды - ПараметрыВыполненияКоманды
//
Процедура ВыбратьРМТекущегоСеанса(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПредложитьВыборРабочегоМестаЗавершение", ЭтотОбъект);
	ПредложитьВыборРабочегоМеста(Оповещение);
	
КонецПроцедуры

// Функция предоставляет диалог выбора рабочего места.
// 
// Параметры:
//  ОбработкаОповещения - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторКлиента - Строка - идентификатор клиента
//
Процедура ПредложитьВыборРабочегоМеста(ОбработкаОповещения, ИдентификаторКлиента = "") Экспорт

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИдентификаторКлиента", ИдентификаторКлиента);
	
	ОткрытьФорму("Справочник.ПодключаемоеОборудование.Форма.ФормаВыбораРабочегоМеста", ПараметрыФормы,,,  ,, ОбработкаОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

// Завершение выбора рабочего места.
// 
// Параметры:
//  Результат - Структура - результат выполнения операции.
//  Параметры - Структура - параметры операции.
//
Процедура ПредложитьВыборРабочегоМестаЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("РабочееМесто") Тогда 
		УстановитьРабочееМесто(Результат.РабочееМесто);
	КонецЕсли;
		
КонецПроцедуры

// Функция устанавливает рабочее место.
// 
// Параметры:
//  РабочееМесто - СправочникСсылка.РабочиеМеста - рабочее место клиента.
//
Процедура УстановитьРабочееМесто(РабочееМесто) Экспорт
	
	МенеджерОборудованияВызовСервера.УстановитьРабочееМестоКлиента(РабочееМесто);
	Оповестить("ИзмененоРабочееМестоТекущегоСеанса", РабочееМесто);
	
КонецПроцедуры

// Открытие формы списка рабочих мест.
// 
// Параметры:
//  ПараметрКоманды - Структура - параметры команды.
//  ПараметрыВыполненияКоманды - Структура:
//   *Источник - ФормаКлиентскогоПриложения - форма родитель.
//   *Уникальность - УникальныйИдентификатор - уникальный идентификатор формы.
//   *Окно - ОкноКлиентскогоПриложения - окно приложения.
//
Процедура ОткрытьРабочиеМеста(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ОбновитьРабочееМестоКлиента();
	ПараметрыФормы = Новый Структура();
	ОткрытьФорму("Справочник.РабочиеМеста.ФормаСписка", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
	
КонецПроцедуры

// Возвращает имя компьютера клиента.
// При первом обращении получает имя компьютера из переменной сеанса.
//
// Возвращаемое значение:
//  СправочникСсылка.РабочиеМеста
//
Функция РабочееМестоКлиента() Экспорт
	
	Возврат МенеджерОборудованияКлиентПовтИсп.РабочееМестоКлиента();
	
КонецФункции

// Возвращает имя компьютера клиента.
// При первом обращении получает имя компьютера из переменной сеанса.
//
// Параметры:
//  ИдентификаторКлиента - Строка - идентификатор клиента для рабочего места
//
// Возвращаемое значение:
//  Массив.
Функция НайтиРабочиеМестаПоИдентификатору(ИдентификаторКлиента) Экспорт
	
	Возврат МенеджерОборудованияКлиентПовтИсп.НайтиРабочиеМестаПоИдентификатору(ИдентификаторКлиента);
	
КонецФункции

#КонецОбласти

#Область ОбщиеМетодыДрайвера

// Поиск по идентификатору подключенного ранее устройства. 
//
// Параметры:
//  Идентификатор - СправочникСсылка.ПодключаемоеОборудование - экземпляр подключаемого оборудования.
//
// Возвращаемое значение:
//  СправочникСсылка.ПодключаемоеОборудование
//
Функция ПолучитьПодключенноеУстройство(Идентификатор) Экспорт
	
	СписокПодключений = глПодключаемоеОборудование.ПараметрыПодключенияПО;
	
	ПодключенноеУстройство = Неопределено;
	Для Каждого Подключение Из СписокПодключений Цикл
		Если Подключение.Ссылка = Идентификатор Тогда
			ПодключенноеУстройство = Подключение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПодключенноеУстройство;
	
КонецФункции

// Поиск по типу подключенные ранее устройства.
//
// Параметры:
//  ТипПО - ПеречислениеСсылка.ТипыПодключаемогоОборудования - тип подключаемого оборудования.
//
// Возвращаемое значение:
//  Массив из СправочникСсылка.ПодключаемоеОборудование
//
Функция ПолучитьПодключенныеУстройства(ТипПО) Экспорт
	
	СписокПодключений = глПодключаемоеОборудование.ПараметрыПодключенияПО;
	
	ПодключенныеУстройства = Новый Массив();
	Для Каждого Подключение Из СписокПодключений Цикл
		Если Подключение.ТипОборудования = ТипПО Тогда
			ПодключенныеУстройства.Добавить(Подключение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПодключенныеУстройства;
	
КонецФункции

// Поиск по типу подключенные ранее устройства.
//
// Параметры:
//  ИдентификаторОбъекта - СправочникСсылка.ПодключаемоеОборудование - экземпляр подключаемого оборудования.
//
// Возвращаемое значение:
//  Массив.
//
Функция ПодключенныеУстройстваПоИдентификаторуОбъекта(ИдентификаторОбъекта) Экспорт
	
	СписокПодключений = глПодключаемоеОборудование.ПараметрыПодключенияПО;
	
	ПодключенныеУстройства = Новый Массив();
	Для Каждого Подключение Из СписокПодключений Цикл
		Если Подключение.ИдентификаторОбъекта = ИдентификаторОбъекта Тогда
			ПодключенныеУстройства.Добавить(Подключение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПодключенныеУстройства;
	
КонецФункции

// Установить компоненту подключения оборудования.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторДрайвера - СправочникСсылка.ДрайверыОборудования - идентификатор драйвера.
//
Процедура УстановитьДрайверОборудования(ОповещениеПриЗавершении, ИдентификаторДрайвера) Экспорт
	
	ПараметрыКоманды = Новый Структура("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	Оповещение = Новый ОписаниеОповещения("УстановитьДрайверОборудованияПослеУстановки", ЭтотОбъект, ПараметрыКоманды);
	
	ДанныеДрайвера = ДанныеДрайвераОборудования(ИдентификаторДрайвера);
	Если НЕ ЗначениеЗаполнено(ДанныеДрайвера) Тогда
		ОписаниеОшибки = НСтр("ru = 'Драйвер не найден.'");
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'Для продолжения работы требуется установка внешней компоненты ""%Компонента%"".'"); 
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Компонента%", ДанныеДрайвера.Наименование); 
	
	Если ДанныеДрайвера.ПодключениеИзМакета Тогда
		Если Не ДанныеДрайвера.МакетДоступен Тогда
			ОписаниеОшибки = НСтр("ru = 'Макет драйвера ""%ИмяМакетаДрайвера%"" не найден.'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ИмяМакетаДрайвера%", ДанныеДрайвера.ИмяМакетаДрайвера); 
			РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
		Иначе
			ПараметрыУстановки = ОбщегоНазначенияКлиент.ПараметрыУстановкиКомпоненты();
			ПараметрыУстановки.ТекстПояснения = ТекстСообщения;
			ОбщегоНазначенияКлиент.УстановитьКомпонентуИзМакета(Оповещение, ДанныеДрайвера.ИмяМакетаДрайвера, ПараметрыУстановки);
		КонецЕсли;
	Иначе
		ПараметрыУстановки = ВнешниеКомпонентыКлиент.ПараметрыУстановки();
		ПараметрыУстановки.ТекстПояснения = ТекстСообщения; 
		ВнешниеКомпонентыКлиент.УстановитьКомпоненту(Оповещение, ДанныеДрайвера.ИдентификаторОбъекта, ДанныеДрайвера.ВерсияДрайвера, ПараметрыУстановки);
	КонецЕсли;
	
КонецПроцедуры

// Завершение установки драйвера.
// 
// Параметры:
//  Результат - Структура
//  ДополнительныеПараметры - Структура
// 
Процедура УстановитьДрайверОборудованияПослеУстановки(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Результат.Установлено, Результат.ОписаниеОшибки);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
	Иначе
		Если НЕ Результат.Установлено И Не ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
			ПоказатьПредупреждение(, Результат.ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Получает описание драйвера.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторДрайвера - СправочникСсылка.ДрайверыОборудования - идентификатор драйвера.
//  ДанныеДрайвера - см. Справочники.ДрайверыОборудования.ДанныеДрайвераОборудования - данные драйвера оборудования.
//
Процедура НачатьПолучениеОписанияДрайвера(ОповещениеПриЗавершении, ИдентификаторДрайвера = Неопределено, ДанныеДрайвера = Неопределено) Экспорт
	
	Если ИдентификаторДрайвера <> Неопределено Тогда
		ДанныеДрайвера = МенеджерОборудованияВызовСервера.ДанныеДрайвераОборудования(ИдентификаторДрайвера);
	КонецЕсли;
	
	НовоеПодключение = МенеджерОборудованияКлиентСервер.ПараметрыПодключенияДрайвера(ДанныеДрайвера);
	ПодключаемоеОборудованиеДрайверКлиент.НачатьПолучениеОписанияДрайвера(ОповещениеПриЗавершении, НовоеПодключение);
	
КонецПроцедуры

// Получает описание оборудования.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторОборудования - СправочникСсылка.ПодключаемоеОборудование - идентификатор драйвера.
//  ДанныеОборудования - см. МенеджерОборудованияВызовСервера.ДанныеУстройства - данные драйвера оборудования.
//
Процедура НачатьПолучениеОписанияОборудования(ОповещениеПриЗавершении, ИдентификаторОборудования = Неопределено, ДанныеОборудования = Неопределено) Экспорт
	
	Если ИдентификаторОборудования <> Неопределено Тогда
		ДанныеОборудования = МенеджерОборудованияВызовСервера.ДанныеУстройства(ИдентификаторОборудования);
	КонецЕсли;
	
	НовоеПодключение = МенеджерОборудованияКлиент.ПараметрыПодключенияУстройства(ДанныеОборудования);
	Если Не ПустаяСтрока(ДанныеОборудования.ИдентификаторОбъекта) Тогда
		СписокПодключений = ПодключенныеУстройстваПоИдентификаторуОбъекта(ДанныеОборудования.ИдентификаторОбъекта);
		НовоеПодключение.КоличествоПодключенных = СписокПодключений.Количество();
	КонецЕсли;
	
	ПодключаемоеОборудованиеДрайверКлиент.НачатьПолучениеОписанияДрайвера(ОповещениеПриЗавершении, НовоеПодключение);
	
КонецПроцедуры

// Начать выполнение дополнительной команды к драйверу, не требующую предварительного подключения устройства в системе.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - идентификатор драйвера.
//  ПараметрыУстройства - Структура - параметры устройства.
//
Процедура НачатьТестУстройства(ОповещениеПриЗавершении, ИдентификаторУстройства, ПараметрыУстройства = Неопределено) Экспорт
	
	// Поиск подключенного устройства.
	ПодключенноеУстройство = ПолучитьПодключенноеУстройство(ИдентификаторУстройства);
	Если ПодключенноеУстройство = Неопределено Тогда
		ДанныеОборудования = МенеджерОборудованияВызовСервера.ДанныеУстройства(ИдентификаторУстройства);
		НовоеПодключение = МенеджерОборудованияКлиент.ПараметрыПодключенияУстройства(ДанныеОборудования);
		НовоеПодключение.Параметры = ?(ПараметрыУстройства = Неопределено, ДанныеОборудования.Параметры, ПараметрыУстройства);
		ПодключаемоеОборудованиеДрайверКлиент.НачатьТестУстройства(ОповещениеПриЗавершении, НовоеПодключение, Неопределено);
	Иначе
		// Сообщить об ошибке, что устройство подключено.
		ОписаниеОшибки = НСтр("ru='Устройство подключено, операция не может быть выполнена. Для отключения устройства требуется закрыть все формы приложения для текущей информационной базы.'");
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Начать выполнение дополнительной команды к драйверу, не требующую предварительного подключения устройства в системе.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - идентификатор драйвера.
//  ПараметрыУстройства - Структура - параметры устройства.
//  ПараметрыВыполнения - Структура - параметры выполнения команды.
// 
Процедура НачатьВыполнениеДополнительнойКоманды(ОповещениеПриЗавершении, ИдентификаторУстройства, ПараметрыУстройства = Неопределено, ПараметрыВыполнения = Неопределено) Экспорт
	
	// Поиск подключенного устройства.
	ПодключенноеУстройство = ПолучитьПодключенноеУстройство(ИдентификаторУстройства);
	Если ПодключенноеУстройство = Неопределено Тогда
		ДанныеОборудования = МенеджерОборудованияВызовСервера.ДанныеУстройства(ИдентификаторУстройства);
		НовоеПодключение = МенеджерОборудованияКлиент.ПараметрыПодключенияУстройства(ДанныеОборудования);
		НовоеПодключение.Параметры = ?(ПараметрыУстройства = Неопределено, ДанныеОборудования.Параметры, ПараметрыУстройства);
		ПодключаемоеОборудованиеДрайверКлиент.НачатьВыполнитьДополнительноеДействие(ОповещениеПриЗавершении, НовоеПодключение, ПараметрыВыполнения);
	Иначе
		// Сообщить об ошибке, что устройство подключено.
		ОписаниеОшибки = НСтр("ru='Устройство подключено, операция не может быть выполнена. Для отключения устройства требуется закрыть все формы приложения для текущей информационной базы.'");
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Выполнить настройку оборудования.
// 
// Параметры:
//  Идентификатор - СправочникСсылка.ПодключаемоеОборудование.
//  ОповещениеПриЗавершении - ОписаниеОповещения - событие описания оповещения.
// 
Процедура ВыполнитьНастройкуОборудования(Идентификатор, ОповещениеПриЗавершении = Неопределено) Экспорт
	
	ФормаНастройки = "Справочник.ПодключаемоеОборудование.Форма.ФормаНастройки";
	ПараметрыФормы = Новый Структура("Идентификатор", Идентификатор);
	
	ПараметрыКоманды = Новый Структура("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	Обработчик = Новый ОписаниеОповещения("ВыполнитьНастройкуОборудования_Завершение", ЭтотОбъект, ПараметрыКоманды);
	
	ОткрытьФорму(ФормаНастройки, ПараметрыФормы,,,  ,, Обработчик, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// Завершение настройки оборудования.
// 
// Параметры:
//  Результат - Структура - результат возвращаемый формой при закрытии.
//  Параметры - Структура - параметры команды.
// 
Процедура ВыполнитьНастройкуОборудования_Завершение(Результат, Параметры) Экспорт
	
	РезультатЗавершения = Ложь;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если Результат.Свойство("Идентификатор") И Результат.Свойство("ПараметрыОборудования") Тогда
			РезультатЗавершения = МенеджерОборудованияВызовСервера.СохранитьПараметрыУстройства(Результат.Идентификатор, Результат.ПараметрыОборудования);
		КонецЕсли;
		
		Если РезультатЗавершения Тогда 
			ОбновитьПовторноИспользуемыеЗначения();
		Иначе
			СообщениеОбОшибке = НСтр("ru='Не удалось сохранить параметры устройства.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатЗавершения);
	КонецЕсли;
	
КонецПроцедуры

// Открытие формы подключаемого Оборудования.
//
// Параметры:
//  ПараметрКоманды - Произвольный - источник, в котором реализована команда
//  ПараметрыВыполненияКоманды - ПараметрыВыполненияКоманды
//
Процедура ОткрытьПодключаемоеОборудование(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ОбновитьРабочееМестоКлиента();
	
	ПараметрыФормы = Новый Структура();
	ОткрытьФорму("Справочник.ПодключаемоеОборудование.ФормаСписка", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
	
КонецПроцедуры

// Открытие формы драйверов оборудования.
//
// Параметры:
//  ПараметрКоманды - Произвольный - источник, в котором реализована команда
//  ПараметрыВыполненияКоманды - ПараметрыВыполненияКоманды
//
Процедура ОткрытьДрайверыОборудования(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ОбновитьРабочееМестоКлиента();
	
	ПараметрыФормы = Новый Структура();
	ОткрытьФорму("Справочник.ДрайверыОборудования.ФормаСписка", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
	
КонецПроцедуры

// Функция возвращает структуру с данными драйвера.
//
// Параметры:
//  ИдентификаторДрайвера - СправочникСсылка.ДрайверыОборудования - идентификатор драйвера.
//
// Возвращаемое значение:
//  Структура.
Функция ДанныеДрайвераОборудования(ИдентификаторДрайвера) Экспорт
	
	Возврат МенеджерОборудованияКлиентПовтИсп.ДанныеДрайвераОборудования(ИдентификаторДрайвера);
	
КонецФункции

#КонецОбласти

#Область ВыбратьУстройство

// Процедура выбора устройства из доступных, привязанных к текущему рабочему месту.
//
// Параметры:
//  ОповещениеВыбора - ОписаниеОповещения - событие описания оповещения.
//  ТипОборудования - Структура, Массив, Строка - тип оборудования для выбора устройства.
//  ТекстЗаголовкаВыбора - Строка - Заголовок окна выбора.
//  СообщениеНеПодключено - Строка - Текст сообщения о не подключенных устройствах
//  СообщениеНеВыбрано - Строка - Текст сообщения о не выбранных устройствах
//
Процедура ВыбратьУстройство(ОповещениеВыбора, ТипОборудования, ТекстЗаголовкаВыбора, СообщениеНеПодключено = "", СообщениеНеВыбрано = "") Экспорт
	
	Если Не ОбновитьРабочееМестоКлиента() Тогда
		ТекстСообщения = НСтр("ru='Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ТекстСообщения);
		ВыполнитьОбработкуОповещения(ОповещениеВыбора, РезультатВыполнения);
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(СообщениеНеПодключено) Тогда
		СообщениеНеПодключено = НСтр("ru='Необходимые устройства не подключены к текущему рабочему месту.'");
	КонецЕсли;
	
	Если ПустаяСтрока(СообщениеНеВыбрано) Тогда
		СообщениеНеВыбрано = НСтр("ru='Устройство не выбрано.'");
	КонецЕсли;
		
	СписокДоступныхУстройств = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам(ТипОборудования);
	Если СписокДоступныхУстройств.Количество() = 0 Тогда
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, СообщениеНеПодключено);
		ВыполнитьОбработкуОповещения(ОповещениеВыбора, РезультатВыполнения);
	Иначе
		СписокУстройств = Новый СписокЗначений();
		Для Каждого Устройства Из СписокДоступныхУстройств Цикл
			СписокУстройств.Добавить(Устройства.Ссылка, Устройства.Наименование);
		КонецЦикла;
		Если СписокУстройств.Количество() = 1 Тогда
			Идентификатор = СписокУстройств[0].Значение;
			РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Истина, , Идентификатор);
			ВыполнитьОбработкуОповещения(ОповещениеВыбора, РезультатВыполнения);
		Иначе
			Контекст = Новый Структура;
			Контекст.Вставить("ОповещениеВыбора"   , ОповещениеВыбора);
			Контекст.Вставить("СообщениеНеВыбрано" , СообщениеНеВыбрано);
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
			СписокУстройств.ПоказатьВыборЭлемента(ОписаниеОповещения, ТекстЗаголовкаВыбора);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Завершение выбора устройства.
// 
// Параметры:
//  Результат - Структура
//  Параметры - Структура
// 
Процедура ВыбратьУстройствоЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда 
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, Параметры.СообщениеНеВыбрано);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеВыбора, РезультатВыполнения);
	Иначе
		Идентификатор = ?(Результат = Неопределено, Неопределено, Результат.Значение);
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Истина, , Идентификатор);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеВыбора, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключениеОтключенияОборудования

// Производит подключение доступного оборудования по списку типов ПО
//
// Параметры:
//  ОповещениеПриПодключении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторКлиента - УникальныйИдентификатор
//  ТипыПО - Структура, Массив, Строка - тип оборудования для подключения устройств.
//
Процедура НачатьПодключениеОборудованиеПоТипу(ОповещениеПриПодключении, ИдентификаторКлиента, ТипыПО) Экспорт
	
	СтруктураТиповПО = Новый Структура();
	Если ТипЗнч(ТипыПО) = Тип("Массив") Тогда
		Для Каждого ТипПО Из ТипыПО Цикл
			СтруктураТиповПО.Вставить(ТипПО);
		КонецЦикла;
	Иначе
		СтруктураТиповПО.Вставить(ТипыПО);
	КонецЕсли;
	
	НачатьПодключениеОборудования(ОповещениеПриПодключении, ИдентификаторКлиента, СтруктураТиповПО);
	 
 КонецПроцедуры

// Начать подключать одиночный экземпляр устройства определяемый идентификатором.
//
// Параметры:
//  ОповещениеПриПодключении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторКлиента - УникальныйИдентификатор - уникальный идентификатор клиента.
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - подключаемое устройство.
//
Процедура НачатьПодключениеОборудованиеПоИдентификатору(ОповещениеПриПодключении, ИдентификаторКлиента, ИдентификаторУстройства) Экспорт
	
	НачатьПодключениеОборудования(ОповещениеПриПодключении, ИдентификаторКлиента, , ИдентификаторУстройства);
	
КонецПроцедуры

// Начать подключения устройства.
//
// Параметры:
//  ОповещениеПриПодключении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторКлиента - УникальныйИдентификатор - уникальный идентификатор клиента.
//  ТипыПО - Структура, Массив, Строка - тип оборудования для выбора устройства.
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - подключаемое устройство.
//  СетевоеОборудование - Булево - использовать сетевое оборудование при подключении.
//
Процедура НачатьПодключениеОборудования(ОповещениеПриПодключении, ИдентификаторКлиента, ТипыПО = Неопределено, ИдентификаторУстройства = Неопределено, СетевоеОборудование = Истина) Экспорт
	   
	Результат = ОбновитьРабочееМестоКлиента();
	Если Не Результат Тогда
		Если ОповещениеПриПодключении <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru='Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");
			РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Результат, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(ОповещениеПриПодключении, РезультатВыполнения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	СписокОборудования = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам(ТипыПО, ИдентификаторУстройства, , СетевоеОборудование);
	
	Если СписокОборудования.Количество() > 0 Тогда
		Для Каждого Устройство Из СписокОборудования Цикл
			
			// Проверим, не подключено ли устройство ранее.
			ПодключенноеУстройство = ПолучитьПодключенноеУстройство(Устройство.Ссылка);
			Если ПодключенноеУстройство = Неопределено Тогда // Если устройство не было подключено ранее.
				НовоеПодключение = МенеджерОборудованияКлиент.ПараметрыПодключенияУстройства(Устройство);
				НовоеПодключение.Клиенты.Добавить(ИдентификаторКлиента);
				НовоеПодключение.КоличествоПодключенных = 1;
				
				Если Устройство.СетевоеОборудование И НЕ Устройство.ДоступноТекущемуПользователю Тогда
					Если ОповещениеПриПодключении <> Неопределено Тогда
						ОписаниеОшибки = НСтр("ru='Нет прав на использование для текущего пользователя.'");
						РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
						ВыполнитьОбработкуОповещения(ОповещениеПриПодключении, РезультатВыполнения);
					КонецЕсли;
					Продолжить;
				КонецЕсли;
				
				Если НовоеПодключение.ОбработчикДрайвера = Неопределено Тогда
					// Сообщить об ошибке, что не удалось подключить обработчик.
					Если ОповещениеПриПодключении <> Неопределено Тогда
						ОписаниеОшибки = НСтр("ru='Не удалось подключить обработчик драйвера'");
						РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
						ВыполнитьОбработкуОповещения(ОповещениеПриПодключении, РезультатВыполнения);
					КонецЕсли;
					Продолжить;
				Иначе
					ПараметрыКоманды = Новый Структура("НовоеПодключение, ОповещениеПриПодключении, ИдентификаторУстройства", НовоеПодключение, ОповещениеПриПодключении, Устройство.Ссылка);
					Оповещение = Новый ОписаниеОповещения("НачатьПодключениеОборудования_Завершение", ЭтотОбъект, ПараметрыКоманды);
					НовоеПодключение.ОбработчикДрайвера.НачатьПодключениеУстройства(Оповещение, НовоеПодключение);
				КонецЕсли;
			Иначе // Устройство было подключено ранее.
				// Увеличим количество пользователей данного соединения.
				ПодключенноеУстройство.Клиенты.Добавить(ИдентификаторКлиента);
				ПодключенноеУстройство.КоличествоПодключенных = ПодключенноеУстройство.КоличествоПодключенных + 1;
				Если ОповещениеПриПодключении <> Неопределено Тогда
					РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Истина);
					РезультатВыполнения.ИдентификаторУстройства = Устройство.Ссылка;
					ВыполнитьОбработкуОповещения(ОповещениеПриПодключении, РезультатВыполнения);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИдентификаторУстройства <> Неопределено И ОповещениеПриПодключении <> Неопределено Тогда
		ОписаниеОшибки =  НСтр("ru='Выбранное устройство не может использоваться для подключения. Укажите другое устройство.'");
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
		ВыполнитьОбработкуОповещения(ОповещениеПриПодключении, РезультатВыполнения);
	ИначеЕсли ТипыПО = Неопределено И ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОшибки =  НСтр("ru='Нет доступного оборудования для подключения.'");
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
		ВыполнитьОбработкуОповещения(ОповещениеПриПодключении, РезультатВыполнения);
	КонецЕсли;

КонецПроцедуры

// Завершение подключения оборудования.
// 
// Параметры:
//  РезультатВыполнения - Структура
//  Параметры - Структура
// 
Процедура НачатьПодключениеОборудования_Завершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		глПодключаемоеОборудование.ПараметрыПодключенияПО.Добавить(Параметры.НовоеПодключение);
		Если Параметры.ОповещениеПриПодключении <> Неопределено Тогда
			РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Истина, , Параметры.ИдентификаторУстройства);
			РезультатВыполнения.ПодключенноеУстройство  = Параметры.НовоеПодключение;
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриПодключении, РезультатВыполнения);
		КонецЕсли;
	Иначе
		// Сообщим пользователю о том, что не удалось подключить устройство.
		Если Параметры.ОповещениеПриПодключении <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru='Не удалось подключить устройство (%Устройство%): %ОписаниеОшибки%'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Устройство%", Параметры.ИдентификаторУстройства);
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
			РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриПодключении, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Начать отключение устройств по типу оборудования.
//
// Параметры:
//  ОповещениеПриОтключении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторКлиента - УникальныйИдентификатор
//  ТипыПО - Структура, Массив, Строка - тип оборудования для отключения устройств.
//
Процедура НачатьОтключениеОборудованияПоТипу(ОповещениеПриОтключении, ИдентификаторКлиента, ТипыПО) Экспорт
	
	НачатьОтключениеОборудования(ОповещениеПриОтключении, ИдентификаторКлиента, ТипыПО, );
	
КонецПроцедуры

// Начать отключение устройств по типу оборудования.
//
// Параметры:
//  ОповещениеПриОтключении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторКлиента - УникальныйИдентификатор
//  ТипыПО - Структура, Массив, Строка - тип оборудования для отключения устройств.
//
Процедура НачатьОтключениеОборудованиеПоТипу(ОповещениеПриОтключении, ИдентификаторКлиента, ТипыПО) Экспорт
	
	НачатьОтключениеОборудования(ОповещениеПриОтключении, ИдентификаторКлиента, ТипыПО, );
	
КонецПроцедуры

// Начать отключать устройства определенное идентификатором.
//
// Параметры:
//  ОповещениеПриОтключении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторКлиента - УникальныйИдентификатор
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - отключаемое устройство.
//
Процедура НачатьОтключениеОборудованиеПоИдентификатору(ОповещениеПриОтключении, ИдентификаторКлиента, ИдентификаторУстройства) Экспорт
	
	НачатьОтключениеОборудования(ОповещениеПриОтключении, ИдентификаторКлиента, , ИдентификаторУстройства);
	
КонецПроцедуры

// Функция подключает устройства по типу оборудования.
//
// Параметры:
//  ОповещениеПриОтключении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторКлиента - УникальныйИдентификатор
//  ТипыПО - Структура, Массив, Строка - тип оборудования для отключения устройств.
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - отключаемое устройство.
//
Процедура НачатьОтключениеОборудования(ОповещениеПриОтключении, ИдентификаторКлиента, ТипыПО = Неопределено, ИдентификаторУстройства = Неопределено) Экспорт
	
	Если глПодключаемоеОборудование.ПараметрыПодключенияПО <> Неопределено Тогда
		КоличествоУстройств = глПодключаемоеОборудование.ПараметрыПодключенияПО.Количество();
		Для Индекс = 1 По КоличествоУстройств Цикл
			
			ПодключенноеУстройство = глПодключаемоеОборудование.ПараметрыПодключенияПО[КоличествоУстройств - Индекс];
			КлиентПодключения = ПодключенноеУстройство.Клиенты.Найти(ИдентификаторКлиента);
			
			Если КлиентПодключения <> Неопределено  
				И (ТипыПО = Неопределено Или ТипыПО.Найти(ПодключенноеУстройство.ТипОборудования) <> Неопределено)
				И (ИдентификаторУстройства = Неопределено Или ПодключенноеУстройство.Ссылка = ИдентификаторУстройства) Тогда
				Если ПодключенноеУстройство.КоличествоПодключенных = 1 Тогда
					ОбработчикДрайвера = ПодключенноеУстройство.ОбработчикДрайвера;
					Если ОбработчикДрайвера = Неопределено Тогда
						// Сообщить об ошибке, что не удалось подключить обработчик.
						Если ОповещениеПриОтключении <> Неопределено Тогда
							ОписаниеОшибки = НСтр("ru='Не удалось подключить обработчик драйвера.'");
							РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
							ВыполнитьОбработкуОповещения(ОповещениеПриОтключении, РезультатВыполнения);
						КонецЕсли;
					Иначе
						ПараметрыКоманды = Новый Структура("ПодключенноеУстройство, ОповещениеПриОтключении", ПодключенноеУстройство, ОповещениеПриОтключении);
						Оповещение = Новый ОписаниеОповещения("НачатьОтключениеОборудование_Завершение", ЭтотОбъект, ПараметрыКоманды);
						ОбработчикДрайвера.НачатьОтключениеУстройства(Оповещение, ПодключенноеУстройство);
					КонецЕсли;
				Иначе
					ПодключенноеУстройство.КоличествоПодключенных = ПодключенноеУстройство.КоличествоПодключенных - 1;
					ПодключенноеУстройство.Клиенты.Удалить(КлиентПодключения);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры  

// Завершение отключения оборудования.
// 
// Параметры:
//  РезультатВыполнения - Структура
//  Параметры - Структура
// 
Процедура НачатьОтключениеОборудование_Завершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		Параметры.ПодключенноеУстройство.КоличествоПодключенных = 0;
		НомерСтрокиМассива = глПодключаемоеОборудование.ПараметрыПодключенияПО.Найти(Параметры.ПодключенноеУстройство);
		Если НомерСтрокиМассива <> Неопределено Тогда
			глПодключаемоеОборудование.ПараметрыПодключенияПО.Удалить(НомерСтрокиМассива);
		КонецЕсли;
		Если Параметры.ОповещениеПриОтключении <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru='Ошибок нет.'");
			РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Истина, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриОтключении, РезультатВыполнения);
		КонецЕсли;
	Иначе
		// Сообщим пользователю о том, что не удалось подключить устройство.
		Если Параметры.ОповещениеПриОтключении <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru='При отключении устройства ""%Наименование%"" произошла ошибка.'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%"  , Параметры.ПодключенноеУстройство.Наименование);
			РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриОтключении, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Производит принудительное отключение всего подключенного оборудования,
// независимо от числа ссылок на подключение.
//
// Параметры:
//  ОповещениеПриОтключении - ОписаниеОповещения - событие описания оповещения.
//
Процедура НачатьОтключениеВсегоОборудования(ОповещениеПриОтключении = Неопределено) Экспорт
	
	Если глПодключаемоеОборудование = Неопределено Тогда
		// БСП может вызывать эту процедуру из ОбщегоНазначенияКлиентПереопределяемый.ПередЗавершениемРаботыСистемы()
		// до того как будет вызвана ПередНачаломРаботыСистемы()
		Возврат;
	КонецЕсли;
	
	Для Каждого ПодключенноеУстройство Из глПодключаемоеОборудование.ПараметрыПодключенияПО Цикл
		ОбработчикДрайвера = ПодключенноеУстройство.ОбработчикДрайвера;
		Если НЕ ОбработчикДрайвера = Неопределено Тогда
			Оповещение = Новый ОписаниеОповещения("НачатьОтключениеВсегоОборудования_Завершение", МенеджерОборудованияКлиент);
			ОбработчикДрайвера.НачатьОтключениеУстройства(Оповещение, ПодключенноеУстройство);
			ПодключенноеУстройство.КоличествоПодключенных = 0;
		КонецЕсли;
	КонецЦикла;
	
	КоличествоПодключенныхКлиентов = 0;
	Для Каждого ПодключенноеУстройство Из глПодключаемоеОборудование.ПараметрыПодключенияПО Цикл
		КоличествоПодключенныхКлиентов = КоличествоПодключенныхКлиентов + ПодключенноеУстройство.КоличествоПодключенных;
	КонецЦикла;
	
	глПодключаемоеОборудование.ПараметрыПодключенияПО.Очистить();
	
КонецПроцедуры

// Завершение отключения всего оборудования.
// 
// Параметры:
//  РезультатВыполнения - Структура
//  Параметры - Структура
// 
Процедура НачатьОтключениеВсегоОборудования_Завершение(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru='При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает подключено ли оборудование.
// 
// Параметры: 
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - ИдентификаторУстройства.
// 
// Возвращаемое значение:
//  Булево - Устройство подключено
//
Функция УстройствоПодключено(ИдентификаторУстройства) Экспорт
	
	Для Каждого Подключение Из глПодключаемоеОборудование.ПараметрыПодключенияПО Цикл
		Если Подключение.Ссылка = ИдентификаторУстройства Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииПодключенияОтключенияОборудованияВФорме

// Начать подключение необходимых типов оборудования при открытии формы.
//
// Параметры:
//	ОповещениеПриПодключении - ОписаниеОповещения - оповещение при подключении.
//	Форма - ФормаКлиентскогоПриложения - открываемая форма.
//	ПоддерживаемыеТипыПодключаемогоОборудования - Строка - содержит перечень типов подключаемого оборудования, разделенных запятыми.
//
Процедура НачатьПодключениеОборудованиеПриОткрытииФормы(ОповещениеПриПодключении, Форма, ПоддерживаемыеТипыПодключаемогоОборудования) Экспорт
	
	Форма.ПоддерживаемыеТипыПодключаемогоОборудования = ПоддерживаемыеТипыПодключаемогоОборудования;
	
	Если Форма.ИспользоватьПодключаемоеОборудование Тогда
			
	Если ОповещениеПриПодключении = Неопределено Тогда
		ОповещениеПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершениеПоУмолчанию", МенеджерОборудованияКлиент);
	КонецЕсли;
		НачатьПодключениеОборудованиеПоТипу(ОповещениеПриПодключении, Форма.УникальныйИдентификатор,
											ПреобразоватьСписокСтрокойВМассив(Форма.ПоддерживаемыеТипыПодключаемогоОборудования));
	КонецЕсли;
	
КонецПроцедуры

// Обработчик оповещения по умолчанию
//
// Параметры:
//	РезультатВыполнения - Структура - результат выполнения операции.
//	Параметры - Произвольный - дополнительный параметр переданный в оповещение.
//
Процедура ПодключитьОборудованиеЗавершениеПоУмолчанию(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru='При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Начать отключать оборудование по типу при закрытии формы.
//
// Параметры:
//	ОповещениеПриОтключении - ОписаниеОповещения - оповещение при отключении.
//	Форма - ФормаКлиентскогоПриложения - закрываемая форма.
//
Процедура НачатьОтключениеОборудованиеПриЗакрытииФормы(ОповещениеПриОтключении, Форма) Экспорт
	
	Если ОповещениеПриОтключении = Неопределено Тогда
		ОповещениеПриОтключении = Новый ОписаниеОповещения("ОтключитьОборудованиеЗавершениеПоУмолчанию", МенеджерОборудованияКлиент);
	КонецЕсли;
	
	НачатьОтключениеОборудованияПоТипу(ОповещениеПриОтключении, Форма.УникальныйИдентификатор, ПреобразоватьСписокСтрокойВМассив(Форма.ПоддерживаемыеТипыПодключаемогоОборудования));
	
КонецПроцедуры

// Обработчик оповещения отключения оборудования при закрытии формы по умолчанию
// 
// Параметры:
//  РезультатВыполнения - Структура
//  Параметры - Структура
// 
Процедура ОтключитьОборудованиеЗавершениеПоУмолчанию(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru='При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПечатающееУстройство

// Начать подключение печатающего устройства
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторКлиента - УникальныйИдентификатор - уникальный идентификатор клиента.
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - подключаемое устройство.
//
Процедура НачатьПодключениеПечатающегоУстройства(ОповещениеПриЗавершении, ИдентификаторКлиента, ИдентификаторУстройства = Неопределено) Экспорт
	
	ПараметрыВыполнение = Новый Структура();
	ПараметрыВыполнение.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ПараметрыВыполнение.Вставить("ИдентификаторКлиента"   , ИдентификаторКлиента);
	ПараметрыВыполнение.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	
	Если ИдентификаторУстройства = Неопределено Или ПустаяСтрока(ИдентификаторУстройства) Тогда
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("ПринтерЧеков");
		ПоддерживаемыеТипыВО.Добавить("ККТ");       
		Оповещение = Новый ОписаниеОповещения("НачатьПодключениеПечатающегоУстройства_ВыборЗавершение", ЭтотОбъект, ПараметрыВыполнение);
		ВыбратьУстройство(Оповещение, ПоддерживаемыеТипыВО,
			НСтр("ru='Выберите устройство для печати'"),
			НСтр("ru='Для данного рабочего места нет доступных устройств для печати.'"), 
			НСтр("ru='Устройство для печати не выбрано.'"));
	Иначе
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Истина, , ИдентификаторУстройства); 
		НачатьПодключениеПечатающегоУстройства_ВыборЗавершение(РезультатВыполнения, ПараметрыВыполнение);
	КонецЕсли;
	
КонецПроцедуры

// Завершение подключения печатающего устройства.
// 
// Параметры:
//  РезультатВыполнения - Структура
//  ПараметрыВыполнение - Структура
// 
Процедура НачатьПодключениеПечатающегоУстройства_ВыборЗавершение(РезультатВыполнения, ПараметрыВыполнение) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ПараметрыВыполнение.ИдентификаторУстройства = РезультатВыполнения.ИдентификаторУстройства; 
		// Поиск подключенного устройства.
		ПодключенноеУстройство = ПолучитьПодключенноеУстройство(ПараметрыВыполнение.ИдентификаторУстройства);                                                
		Если ПодключенноеУстройство = Неопределено Тогда
			НачатьПодключениеОборудованиеПоИдентификатору(ПараметрыВыполнение.ОповещениеПриЗавершении, ПараметрыВыполнение.ИдентификаторКлиента, ПараметрыВыполнение.ИдентификаторУстройства);
		Иначе
			РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Истина, , ПараметрыВыполнение.ИдентификаторУстройства); 
			РезультатВыполнения.Вставить("ПечатающееУстройствоБылоПодключенное", Истина);
			ВыполнитьОбработкуОповещения(ПараметрыВыполнение.ОповещениеПриЗавершении, РезультатВыполнения);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(ПараметрыВыполнение.ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнениеКоманды

// Выполнение команды обработчика для подключенного устройства.
//
// Параметры:
//  ПодключенноеУстройство - СправочникСсылка.ПодключаемоеОборудование
//  ПараметрыВыполнениеКоманды - Структура
//
Процедура ВыполнениеКомандыОбработчика(ПодключенноеУстройство, ПараметрыВыполнениеКоманды) Экспорт
	
	Команда = ПараметрыВыполнениеКоманды.Команда;
	
	// Вызываем модуль "Процессор данных" отвечающий за подготовку данных для выполнение команды на оборудовании.
	Если ПараметрыВыполнениеКоманды.ПодготовитьДанные Тогда
		ПараметрыПодключенияСервер = МенеджерОборудованияКлиентСервер.ПараметрыПодключения(ПодключенноеУстройство);
		ПроцессорДанных = ПараметрыВыполнениеКоманды.ПроцессорДанных;
		ДанныеОперации = ПроцессорДанных.ПодготовитьДанныеОперации(ПараметрыПодключенияСервер, Команда, ПараметрыВыполнениеКоманды.ПараметрыОперации);
		Если ДанныеОперации = Неопределено Тогда
			ТекстОшибки = НСтр("ru='Ошибка подготовки данных для операции.'");
			РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ТекстОшибки, ПараметрыВыполнениеКоманды.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(ПараметрыВыполнениеКоманды.ОповещениеПриЗавершении, РезультатВыполнения);
			Возврат;
		ИначеЕсли НЕ ДанныеОперации.Результат Тогда
			РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ДанныеОперации.ТекстОшибки, ПараметрыВыполнениеКоманды.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(ПараметрыВыполнениеКоманды.ОповещениеПриЗавершении, РезультатВыполнения);
			Возврат;
		КонецЕсли; 
	Иначе
		ДанныеОперации = ПараметрыВыполнениеКоманды.ПараметрыОперации;
		Если ДанныеОперации = Неопределено Тогда
			ДанныеОперации = Новый Структура();
		КонецЕсли; 
	КонецЕсли;
	
	// БПКР
	Если ПараметрыВыполнениеКоманды.ПодключенноеУстройство.ТипОборудования = "ККТ" Тогда
		ПараметрыРозничныхПродажСуществуют = КассовыеСменыКлиентБП.ПараметрыРозничныхПродажСуществуют(,ПараметрыВыполнениеКоманды.ИдентификаторУстройства);
		Если Не ПараметрыРозничныхПродажСуществуют Тогда
			// Сообщить об ошибке, что не удалось загрузить драйвер.
			ТекстОшибки = НСтр("ru='Отсутсвуют параметры розничных продаж. Для работы необходимо заполнить параметры.'");
			РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ТекстОшибки, ПараметрыВыполнениеКоманды.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(ПараметрыВыполнениеКоманды.ОповещениеПриЗавершении, РезультатВыполнения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	// Конец БПКР
	
	ОбработчикДрайвера = ПодключенноеУстройство.ОбработчикДрайвера;
	Если ОбработчикДрайвера = Неопределено Тогда
		// Сообщить об ошибке, что не удалось загрузить драйвер.
		ТекстОшибки = НСтр("ru='Не удалось подключить обработчик драйвера.'");
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ТекстОшибки, ПараметрыВыполнениеКоманды.ИдентификаторУстройства);
		ВыполнитьОбработкуОповещения(ПараметрыВыполнениеКоманды.ОповещениеПриЗавершении, РезультатВыполнения);
	Иначе
		ПараметрыВыполнениеКоманды.Вставить("ДанныеОперации", ДанныеОперации);
		ПараметрыВыполнениеКоманды.Вставить("ПодключенноеУстройство", ПодключенноеУстройство);
		
		Если Команда = "CheckFiscalization"
			И ПараметрыВыполнениеКоманды.Свойство("ОповещениеПослеОткрытииЧека")
			И ПараметрыВыполнениеКоманды.ОповещениеПослеОткрытииЧека <> Неопределено Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ПослеОткрытииЧека", ЭтотОбъект, ПараметрыВыполнениеКоманды);
			ОбработчикДрайвера.НачатьВыполнениеКоманды(ОписаниеОповещения, ПодключенноеУстройство, "GetCurrentStatus", ДанныеОперации.ТекущееСостояние);
		Иначе        
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_Завершение", ЭтотОбъект, ПараметрыВыполнениеКоманды);
			ОбработчикДрайвера.НачатьВыполнениеКоманды(ОписаниеОповещения, ПодключенноеУстройство, Команда, ДанныеОперации);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик оповещения "После открытия чека", вызывается во время команды "CheckFiscalization".
// 
// Параметры:
//  РезультатВыполнения - Структура
//  ПараметрыВыполнениеКоманды - Структура
// 
Процедура НачатьВыполнениеКоманды_ПослеОткрытииЧека(РезультатВыполнения, ПараметрыВыполнениеКоманды)  Экспорт
	
	ДанныеОперации = ПараметрыВыполнениеКоманды.ДанныеОперации;
	ПодключенноеУстройство = ПараметрыВыполнениеКоманды.ПодключенноеУстройство;

	ПараметрыВыполнения = Новый Структура();
	ПараметрыВыполнения.Вставить("ВходныеПараметры", ПараметрыВыполнениеКоманды.ДанныеОперации);
	ПараметрыВыполнения.Вставить("ОписаниеОшибки"  , Неопределено); 
	ПараметрыВыполнения.Вставить("ПродолжитьПечать", Истина);
	
	Если МенеджерОборудованияКлиентПовтИсп.ИспользуетсяЧекопечатающиеУстройства() Тогда
		МодульОборудованиеЧекопечатающиеУстройстваВызовСервера = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваВызовСервера");
	
		ФискальныеДанныеСтруктура = МодульОборудованиеЧекопечатающиеУстройстваВызовСервера.ПолучитьПараметрыСменыИзXMLПакета(ДанныеОперации.ТекущееСостояние.РезультатXML, ПодключенноеУстройство.РевизияИнтерфейса);
		ЗаполнитьПараметрыОперацииПодписиЧека(ПараметрыВыполнения, ФискальныеДанныеСтруктура.НомерСменыККТ, Число(ФискальныеДанныеСтруктура.НомерЧекаККТ) + 1, ДанныеОперации.ЗаводскойНомерФН); 
	КонецЕсли;

	Оповещение = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ЗавершениеПечати", ЭтотОбъект, ПараметрыВыполнениеКоманды);
	ПараметрыВыполнения.Вставить("ОповещениеПродолжения", Оповещение);
	ВыполнитьОбработкуОповещения(ПараметрыВыполнениеКоманды.ОповещениеПослеОткрытииЧека, ПараметрыВыполнения);
	
КонецПроцедуры

// Обработчик оповещения "Завершение печати", вызывается после открытия чека.
// 
// Параметры:
//  РезультатВыполнения - Структура
//  ПараметрыВыполнениеКоманды - Структура
// 
Процедура НачатьВыполнениеКоманды_ЗавершениеПечати(РезультатВыполнения, ПараметрыВыполнениеКоманды)  Экспорт
	
	Если РезультатВыполнения.ПродолжитьПечать Тогда        
		
		ДанныеОперации = ПараметрыВыполнениеКоманды.ДанныеОперации;
		ПараметрыОперации = ПараметрыВыполнениеКоманды.ПараметрыОперации;
		ПодключенноеУстройство = ПараметрыВыполнениеКоманды.ПодключенноеУстройство;
		
		ДополнительныеПараметры = Новый Структура();
		ЗаполнитьПараметрыОперацииПодписиЧека(ДополнительныеПараметры);
		ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, РезультатВыполнения);
		ДополнительныеПараметры.Вставить("АдресЧека"  , ?(РезультатВыполнения.Свойство("АдресЧека"), РезультатВыполнения.АдресЧека, Неопределено));
		ДополнительныеПараметры.Вставить("ПодписьЧека", ?(РезультатВыполнения.Свойство("ПодписьЧека"), РезультатВыполнения.ПодписьЧека, Неопределено));
		ДанныеОперации.Вставить("ПодписьЧека", ДополнительныеПараметры);
		ПараметрыОперации.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
		 
		Если НЕ ПустаяСтрока(ДополнительныеПараметры.АдресЧека) Тогда // Необходима печать слип-чека алко-продукции.
			СтандартнаяОбработка = Истина;
			ПечатьСлипЧека = Истина;
			МенеджерОборудованияКлиентПереопределяемый.ПечатьСлипЧекаАлкогольнойПродукции(ПечатьСлипЧека, СтандартнаяОбработка);
			ПечатьСлипЧека = ?(Не СтандартнаяОбработка, ПечатьСлипЧека, Истина); 
			Если ПечатьСлипЧека И МенеджерОборудованияКлиентПовтИсп.ИспользуетсяЧекопечатающиеУстройства() Тогда
				ШиринаСтроки = ?(ПодключенноеУстройство.Свойство("ШиринаСтроки"), ПодключенноеУстройство.ШиринаСтроки, 36);
				
				МодульОборудованиеЧекопечатающиеУстройстваКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер");
				МодульОборудованиеЧекопечатающиеУстройстваВызовСервера = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваВызовСервера");
				
				НефискальныйДокумент = МодульОборудованиеЧекопечатающиеУстройстваКлиентСервер.СформироватьШаблонИнфоКвитанции(ДополнительныеПараметры,  ШиринаСтроки);
				ДанныеОперации.ТестовыеЧеки = МодульОборудованиеЧекопечатающиеУстройстваВызовСервера.ПолучитьXMLПакетДляТекста(НефискальныйДокумент, ПодключенноеУстройство.РевизияИнтерфейса);
			КонецЕсли;
		КонецЕсли;
		
		ОбработчикДрайвера = ПараметрыВыполнениеКоманды.ПодключенноеУстройство.ОбработчикДрайвера;
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_Завершение", ЭтотОбъект, ПараметрыВыполнениеКоманды);
		ОбработчикДрайвера.НачатьВыполнениеКоманды(ОписаниеОповещения, ПодключенноеУстройство, ПараметрыВыполнениеКоманды.Команда, ПараметрыВыполнениеКоманды.ДанныеОперации);
		
	Иначе
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, РезультатВыполнения.ОписаниеОшибки, ПараметрыВыполнениеКоманды.ИдентификаторУстройства);
		ВыполнитьОбработкуОповещения(ПараметрыВыполнениеКоманды.ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;

КонецПроцедуры

// Заполнить параметры операции подписи чека.
// 
// Параметры:
//  ПараметрыОперации - Структура
//  НомерСмены - Число - номер открытой/закрытой смены.
//  НомерЧека - Число - номер фискального чека.
//  ЗаводскойНомерФН - Число - заводской номер фискального накопителя
//
Процедура ЗаполнитьПараметрыОперацииПодписиЧека(ПараметрыОперации, НомерСмены = Неопределено, 
	НомерЧека = Неопределено, ЗаводскойНомерФН = Неопределено) Экспорт; 
	
	ПараметрыОперации.Вставить("ИНН"       , Неопределено);
	
	ПараметрыОперации.Вставить("НомерСмены", НомерСмены);
	ПараметрыОперации.Вставить("НомерЧека" , НомерЧека);
	ПараметрыОперации.Вставить("НомерКассы"      , Неопределено);
	ПараметрыОперации.Вставить("НаименованиеОрганизации", Неопределено);
	
КонецПроцедуры

// Начать выполнение команды ответственному обработчику драйвера
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторКлиента - УникальныйИдентификатор - уникальный идентификатор клиента.
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - подключаемое устройство.
//  ПараметрыОперации - Структура
//  ПараметрыВыполнениеКоманды - Структура
//  ПечатающееУстройство - СправочникСсылка.ПодключаемоеОборудование - идентификатор печатающего устройства.
//
Процедура НачатьВыполнениеКоманды(ОповещениеПриЗавершении, ИдентификаторКлиента, ИдентификаторУстройства, ПараметрыОперации, ПараметрыВыполнениеКоманды, ПечатающееУстройство = Неопределено) Экспорт
	
	Если ИдентификаторУстройства = Неопределено Или ПустаяСтрока(ИдентификаторУстройства) Тогда
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru='Устройство не выбрано или не подключено.'");
			РезультатОперации = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнениеКоманды.Вставить("ОповещениеПриЗавершении"   , ОповещениеПриЗавершении);
	ПараметрыВыполнениеКоманды.Вставить("ИдентификаторКлиента"      , ИдентификаторКлиента);
	ПараметрыВыполнениеКоманды.Вставить("ИдентификаторУстройства"   , ИдентификаторУстройства);
	ПараметрыВыполнениеКоманды.Вставить("ПараметрыОперации"         , ПараметрыОперации);
	ПараметрыВыполнениеКоманды.Вставить("Подключено"                , Ложь);
	ПараметрыВыполнениеКоманды.Вставить("ПодключенноеУстройство"    , Неопределено);
	ПараметрыВыполнениеКоманды.Вставить("ПечатающееУстройство"           , ПечатающееУстройство);
	ПараметрыВыполнениеКоманды.Вставить("ПечатающееУстройствоПодключено"      , Ложь);   
	ПараметрыВыполнениеКоманды.Вставить("ПечатающееУстройствоБылоПодключенное", Ложь);   
	ПараметрыВыполнениеКоманды.Вставить("СетевоеОборудование");
	
	// Поиск подключенного устройства.
	ПодключенноеУстройство = ПолучитьПодключенноеУстройство(ИдентификаторУстройства);                                                
	Если ПодключенноеУстройство = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ПодключениеЗавершение", ЭтотОбъект, ПараметрыВыполнениеКоманды);
		НачатьПодключениеОборудованиеПоИдентификатору(ОписаниеОповещения, ИдентификаторКлиента, ИдентификаторУстройства);
	Иначе
		ПараметрыВыполнениеКоманды.ПодключенноеУстройство = ПодключенноеУстройство;
		// Нужно ли использовать печатающее устройство.
		Если ПараметрыВыполнениеКоманды.ИспользоватьПечатающееУстройство И НЕ ПодключенноеУстройство.ПечатьКвитанцийНаТерминале Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ПечатающегоУстройстваЗавершение", ЭтотОбъект, ПараметрыВыполнениеКоманды);
			НачатьПодключениеПечатающегоУстройства(ОписаниеОповещения, ПараметрыВыполнениеКоманды.ИдентификаторКлиента); 
		Иначе
			ВыполнениеКомандыОбработчика(ПодключенноеУстройство, ПараметрыВыполнениеКоманды);
		КонецЕсли;
	КонецЕсли;
	                                    
КонецПроцедуры

// Завершение подключения оборудования
// 
// Параметры:
//  РезультатПодключения - Структура
//  ПараметрыВыполнениеКоманды - Структура
// 
Процедура НачатьВыполнениеКоманды_ПодключениеЗавершение(РезультатПодключения, ПараметрыВыполнениеКоманды) Экспорт
	
	Если РезультатПодключения.Результат Тогда  
		
		ПодключенноеУстройство = РезультатПодключения.ПодключенноеУстройство;
		ПараметрыВыполнениеКоманды.ПодключенноеУстройство = ПодключенноеУстройство;
		ПараметрыВыполнениеКоманды.Подключено = Истина;
		
		// Нужно ли использовать печатающее устройство.
		Если ПараметрыВыполнениеКоманды.ИспользоватьПечатающееУстройство И НЕ ПодключенноеУстройство.ПечатьКвитанцийНаТерминале Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ПечатающегоУстройстваЗавершение", ЭтотОбъект, ПараметрыВыполнениеКоманды);
			НачатьПодключениеПечатающегоУстройства(ОписаниеОповещения, ПараметрыВыполнениеКоманды.ИдентификаторКлиента, ПараметрыВыполнениеКоманды.ПечатающееУстройство); 
		Иначе
			ВыполнениеКомандыОбработчика(ПодключенноеУстройство, ПараметрыВыполнениеКоманды);
		КонецЕсли;
		
	Иначе
		ТекстСообщения = НСтр("ru='При подключении оборудования произошла ошибка: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатПодключения.ОписаниеОшибки);
		РезультатОперации = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ТекстСообщения);
		РезультатОперации.ИдентификаторУстройства = ПараметрыВыполнениеКоманды.ИдентификаторУстройства;
		ВыполнитьОбработкуОповещения(ПараметрыВыполнениеКоманды.ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

// Завершение подключения печатающего устройства
// 
// Параметры:
//  РезультатПодключения - Структура
//  ПараметрыВыполнениеКоманды - Структура
// 
Процедура НачатьВыполнениеКоманды_ПечатающегоУстройстваЗавершение(РезультатПодключения, ПараметрыВыполнениеКоманды) Экспорт
	
	Если РезультатПодключения.Результат Тогда  
		ПараметрыВыполнениеКоманды.ПечатающееУстройство = РезультатПодключения.ИдентификаторУстройства;
		ПараметрыВыполнениеКоманды.ПечатающееУстройствоПодключено = Истина;  
		
		Если РезультатПодключения.Свойство("ПечатающееУстройствоБылоПодключенное") И РезультатПодключения.ПечатающееУстройствоБылоПодключенное Тогда
			ПараметрыВыполнениеКоманды.ПечатающееУстройствоБылоПодключенное = Истина;
		КонецЕсли;
		ВыполнениеКомандыОбработчика(ПараметрыВыполнениеКоманды.ПодключенноеУстройство, ПараметрыВыполнениеКоманды);
	Иначе
		// Отключение оборудования при завершение
		ОтключитьОборудованиеПослеВыполнениеКоманды(ПараметрыВыполнениеКоманды);
		// Завершение с ошибкой
		ТекстСообщения = НСтр("ru='При подключении печатающего устройства произошла ошибка: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатПодключения.ОписаниеОшибки);
		РезультатОперации = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ТекстСообщения);
		РезультатОперации.ИдентификаторУстройства = РезультатПодключения.ИдентификаторУстройства;
		ВыполнитьОбработкуОповещения(ПараметрыВыполнениеКоманды.ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

// Завершение выполнения команды
// 
// Параметры:
//  РезультатВыполнения - Структура
//  ПараметрыВыполнениеКоманды - Структура
// 
Процедура НачатьВыполнениеКоманды_Завершение(РезультатВыполнения, ПараметрыВыполнениеКоманды) Экспорт
	
	// Обработка данный на сервере после выполнение команды
	Если (РезультатВыполнения.Результат И ПараметрыВыполнениеКоманды.ОбработатьДанные)
		Или (ПараметрыВыполнениеКоманды.Свойство("ОбработатьДанныеПриОшибке") И ПараметрыВыполнениеКоманды.ОбработатьДанныеПриОшибке) Тогда
		
		ПараметрыПодключенияСервер = МенеджерОборудованияКлиентСервер.ПараметрыПодключения(ПараметрыВыполнениеКоманды.ПодключенноеУстройство);
		ПараметрыПодключенияСервер.Вставить("ИдентификаторУстройства", ПараметрыВыполнениеКоманды.ИдентификаторУстройства);
		ПроцессорДанных = ПараметрыВыполнениеКоманды.ПроцессорДанных;
		Команда = ПараметрыВыполнениеКоманды.Команда;
		// Вызываем модуль "Процессор данных" отвечающий за обработку данных после выполнение команды на оборудовании.
		ПроцессорДанных.ОбработатьДанныеОперации(ПараметрыПодключенияСервер, Команда, РезультатВыполнения, ПараметрыВыполнениеКоманды.ДанныеОперации);
	КонецЕсли;
		
	Если РезультатВыполнения.Результат Тогда
		Если ПараметрыВыполнениеКоманды.Свойство("ПараметрыОперации") 
			И ПараметрыВыполнениеКоманды.ПараметрыОперации <> Неопределено
			И ПараметрыВыполнениеКоманды.ПараметрыОперации.Свойство("ДополнительныеПараметры") Тогда
			РезультатВыполнения.Вставить("ДополнительныеПараметры", ПараметрыВыполнениеКоманды.ПараметрыОперации.ДополнительныеПараметры);
		КонецЕсли;
	Иначе
		Если ПараметрыВыполнениеКоманды.Команда = "CheckFiscalization"
			И ПараметрыВыполнениеКоманды.Свойство("ОповещениеПриОшибкеПечатиЧека")
			И ПараметрыВыполнениеКоманды.ОповещениеПриОшибкеПечатиЧека <> Неопределено Тогда
				ДанныеОперации = ПараметрыВыполнениеКоманды.ДанныеОперации;
				ПараметрыВыполнения = Новый Структура();
				ПараметрыВыполнения.Вставить("ВходныеПараметры", ПараметрыВыполнениеКоманды.ДанныеОперации);
				ПараметрыВыполнения.Вставить("ОписаниеОшибки"  , Неопределено); 
				ПараметрыВыполнения.Вставить("ПродолжитьПечать", Истина);
				ПараметрыВыполнения.Вставить("ОповещениеПродолжения", Неопределено);
				ЗаполнитьПараметрыОперацииПодписиЧека(ПараметрыВыполнения, ДанныеОперации.НомерСменыККТ, ДанныеОперации.НомерЧекаККТ, ДанныеОперации.ЗаводскойНомерФН); 
				ВыполнитьОбработкуОповещения(ПараметрыВыполнениеКоманды.ОповещениеПриОшибкеПечатиЧека, ПараметрыВыполнения);
		КонецЕсли;
	КонецЕсли;                        
	
	Если ПараметрыВыполнениеКоманды.ИспользоватьПечатающееУстройство 
		И ПараметрыВыполнениеКоманды.ПечатающееУстройствоПодключено И РезультатВыполнения.Свойство("ТестовыеЧеки") Тогда
		// Поиск подключенного устройства.
		ПечатающееУстройство = ПолучитьПодключенноеУстройство(ПараметрыВыполнениеКоманды.ПечатающееУстройство);                                                
		Если ПечатающееУстройство = Неопределено Тогда
			ОтключитьОборудованиеПослеВыполнениеКоманды(ПараметрыВыполнениеКоманды);
			ТекстОшибки = НСтр("ru='Ошибка печати слип чека. Операция отменена.'");
			РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ТекстОшибки, ПараметрыВыполнениеКоманды.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(ПараметрыВыполнениеКоманды.ОповещениеПриЗавершении, РезультатВыполнения);
		Иначе
			Если РезультатВыполнения.Свойство("ТекстСлипЧека") И Не ПустаяСтрока(РезультатВыполнения.ТекстСлипЧека) Тогда
				глПодключаемоеОборудование.Вставить("ПоследнийСлипЧек", РезультатВыполнения.ТекстСлипЧека);
			КонецЕсли;
			// Результат выполнения исходной операции
			ПараметрыВыполнениеКоманды.Вставить("РезультатВыполнения", РезультатВыполнения);
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ПечатьЗавершение", ЭтотОбъект, ПараметрыВыполнениеКоманды);
			ПечатающееУстройство.ОбработчикДрайвера.НачатьВыполнениеКоманды(ОписаниеОповещения, ПечатающееУстройство, "PrintText", РезультатВыполнения);
		КонецЕсли;
	Иначе
		Если ПараметрыВыполнениеКоманды.ПодключенноеУстройство.ИдентификаторОбъекта = "ОнлайнКасса" 
			И РезультатВыполнения.Результат 
			И ПараметрыВыполнениеКоманды.ДанныеОперации.Свойство("ПринтерДляПечати")
			И ЗначениеЗаполнено(ПараметрыВыполнениеКоманды.ДанныеОперации.ПринтерДляПечати) Тогда
			
			Текст = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.СформироватьТекстНефискальногоДокумента_ШаблонКР(ПараметрыВыполнениеКоманды, РезультатВыполнения);
			ПараметрыОперации = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыПечатиТеста(Текст);
			ПараметрыВыполнениеКоманды.ОповещениеПриЗавершении.ДополнительныеПараметры.Вставить("ОнлайнКасса", Истина);
			ПараметрыВыполнениеКоманды.Вставить("РезультатВыполнения", РезультатВыполнения);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПечатьЧекаОнлайнКасса_Завершение", ЭтотОбъект, ПараметрыВыполнениеКоманды);
			ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПечатьТекста(ОписаниеОповещения, Новый УникальныйИдентификатор, ПараметрыВыполнениеКоманды.ДанныеОперации.ПринтерДляПечати, ПараметрыОперации); 
			
		Иначе
			// Отключение оборудования.
			ОтключитьОборудованиеПослеВыполнениеКоманды(ПараметрыВыполнениеКоманды);
			// Завершение команды.
			ВыполнитьОбработкуОповещения(ПараметрыВыполнениеКоманды.ОповещениеПриЗавершении, РезультатВыполнения);	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// БПКР
//
Процедура ПечатьЧекаОнлайнКасса_Завершение(РезультатВыполнения, ПараметрыВыполнениеКоманды) Экспорт
	
	ВыполнитьОбработкуОповещения(ПараметрыВыполнениеКоманды.ОповещениеПриЗавершении, ПараметрыВыполнениеКоманды.РезультатВыполнения);
	
КонецПроцедуры      

// Завершение печати
// 
// Параметры:
//  РезультатВыполнения - Структура
//  ПараметрыВыполнениеКоманды - Структура
// 
Процедура НачатьВыполнениеКоманды_ПечатьЗавершение(РезультатВыполнения, ПараметрыВыполнениеКоманды) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		// Отключение оборудования.
		ОтключитьОборудованиеПослеВыполнениеКоманды(ПараметрыВыполнениеКоманды);
		// Завершение команды.
		ВыполнитьОбработкуОповещения(ПараметрыВыполнениеКоманды.ОповещениеПриЗавершении, ПараметрыВыполнениеКоманды.РезультатВыполнения);
	Иначе
		ПодключенноеУстройство = ПараметрыВыполнениеКоманды.ПодключенноеУстройство;
		ПараметрыВыполнениеКоманды.Вставить("ОписаниеОшибки", РезультатВыполнения.ОписаниеОшибки);
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ОтменаОперацииИЗавершение", ЭтотОбъект, ПараметрыВыполнениеКоманды);
		ПодключенноеУстройство.ОбработчикДрайвера.НачатьВыполнениеКоманды(ОписаниеОповещения, ПодключенноеУстройство, "EmergencyVoid", РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры  

// Завершение отмены операции
// 
// Параметры:
//  РезультатВыполнения - Структура
//  ПараметрыВыполнениеКоманды - Структура
// 
Процедура НачатьВыполнениеКоманды_ОтменаОперацииИЗавершение(РезультатВыполнения, ПараметрыВыполнениеКоманды) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru='Эквайринговая операция отменена - ошибка печати слип чека возникла ошибка.'");
	Иначе
		ТекстСообщения = НСтр("ru='Ошибка отмены операции транзакции. Обратитесь в банк.'");
	КонецЕсли;
	
	Если ПараметрыВыполнениеКоманды.Свойство("ОписаниеОшибки") Тогда
		ТекстСообщения = ТекстСообщения + Символы.ПС + ПараметрыВыполнениеКоманды.ОписаниеОшибки;
	КонецЕсли;
	// Отключение оборудования.
	ОтключитьОборудованиеПослеВыполнениеКоманды(ПараметрыВыполнениеКоманды);
	// Завершение команды.
	РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ТекстСообщения, ПараметрыВыполнениеКоманды.ИдентификаторУстройства);
	ВыполнитьОбработкуОповещения(ПараметрыВыполнениеКоманды.ОповещениеПриЗавершении, РезультатВыполнения);
	
КонецПроцедуры  

// Отключение оборудования 
// 
// Параметры:
//  ПараметрыВыполнениеКоманды - Структура
//
Процедура ОтключитьОборудованиеПослеВыполнениеКоманды(ПараметрыВыполнениеКоманды) Экспорт
	
	СетевоеОборудование = ПараметрыВыполнениеКоманды.ПодключенноеУстройство.СетевоеОборудование;
	ОтключениеОборудования = ПараметрыВыполнениеКоманды.Подключено;
	
	Если ПараметрыВыполнениеКоманды.Свойство("ОставитьПодключенным") И ПараметрыВыполнениеКоманды.ОставитьПодключенным Тогда
		ОтключениеОборудования = Ложь;
	КонецЕсли;
	
	Если ОтключениеОборудования Или СетевоеОборудование Тогда
		НачатьОтключениеОборудованиеПоИдентификатору(, ПараметрыВыполнениеКоманды.ИдентификаторКлиента, ПараметрыВыполнениеКоманды.ИдентификаторУстройства);
		Если ПараметрыВыполнениеКоманды.ПечатающееУстройствоПодключено И НЕ ПараметрыВыполнениеКоманды.ПечатающееУстройствоБылоПодключенное Тогда
			НачатьОтключениеОборудованиеПоИдентификатору(, ПараметрыВыполнениеКоманды.ИдентификаторКлиента, ПараметрыВыполнениеКоманды.ПечатающееУстройство);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти

#Область Прочее

// Преобразовать данные со сканера в массив.
// 
// Параметры:
//  Параметр - Структура:
//   * Штрихкод - Строка - штрихкод.
//   * Количество - Число - количество.
// 
// Возвращаемое значение:
//  Массив из Структура.
//
Функция ПреобразоватьДанныеСоСканераВМассив(Параметр) Экспорт
	
	МенеджерОборудованияКлиентПереопределяемый.ОбработатьСобытие();
	
	Данные = Новый Массив;
	Данные.Добавить(ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
	
	Возврат Данные;
	
КонецФункции

// Преобразовать данные со сканера в структуру.
// 
// Параметры:
//  Параметр - Структура - Параметр:
//   * Штрихкод - Строка - штрихкод.
//   * Количество - Число - количество.
// 
// Возвращаемое значение:
//  Структура - Преобразовать данные со сканера в структуру:
//   * Штрихкод - Строка - штрихкод со сканера.
//   * Количество - Число - количество товаров.
//
Функция ПреобразоватьДанныеСоСканераВСтруктуру(Параметр) Экспорт
	
	МенеджерОборудованияКлиентПереопределяемый.ОбработатьСобытие();
	
	Если Параметр[1] = Неопределено Тогда
		Данные = Новый Структура("Штрихкод, Количество", Параметр[0], 1);    // Достаем штрихкод из основных данных
	Иначе
		Данные = Новый Структура("Штрихкод, Количество", Параметр[1][1], 1); // Достаем штрихкод из дополнительных данных
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

// Событие устройств ввода новый формат.
// 
// Возвращаемое значение:
//  Булево - Событие устройств ввода новый формат
//
Функция СобытиеУстройствВводаНовыйФормат() Экспорт
	
	СтандартнаяОбработка = Истина;
	НовыйФормат = Ложь;
	МенеджерОборудованияКлиентПереопределяемый.СобытиеУстройствВводаНовыйФормат(НовыйФормат, СтандартнаяОбработка);
	Результат = ?(Не СтандартнаяОбработка, НовыйФормат, Ложь); 
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаспределеннаяФискализации

// Подключает обработчики системы оповещения, для использования в распределенной фискализации
//
Процедура ПодключениеСистемыВзаимодействия() Экспорт
	
	ИдентификаторОбсуждения = 
		МенеджерОборудованияКлиентПовтИсп.ПараметрыРаботыКлиента().ИдентификаторОбсужденияРаспределеннойФискализации;
	
	Если ИдентификаторОбсуждения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИдентификаторОбсуждения <> Неопределено Тогда 
		ОписаниеОповещенияПодключенияОбработчика = Новый ОписаниеОповещения("ОбработкаОповещенияПодключенияСообщенийФискализации", МенеджерОборудованияКлиент,);
		ОписаниеОповещенияСерверныхСообщенийБезКонтекста = Новый ОписаниеОповещения("ОбработкаОповещенияСообщенийФискализации", МенеджерОборудованияКлиент,);
		СистемаВзаимодействия.НачатьПодключениеОбработчикаНовыхСообщений(ОписаниеОповещенияПодключенияОбработчика, ИдентификаторОбсуждения, ОписаниеОповещенияСерверныхСообщенийБезКонтекста);
	КонецЕсли;
	
КонецПроцедуры

// Завершение подключения обработчика системы оповещения
// 
// Параметры:
//  ДополнительныеПараметры - Произвольный
// 
Процедура ОбработкаОповещенияПодключенияСообщенийФискализации(ДополнительныеПараметры) Экспорт
	
	Оповестить("ПодключенияСообщенийФискализации");
	
КонецПроцедуры

// Обработчик появлении новых сообщений в обсуждении 
//
// Параметры:
//  Сообщение - СообщениеСистемыВзаимодействия
//  ДополнительныеПараметры - Произвольный
// 
Процедура ОбработкаОповещенияСообщенийФискализации(Сообщение, ДополнительныеПараметры) Экспорт
	
	// АПК: 1391-выкл Особенность. текст сообщения приходит из системы оповещения.
	Если СтрНачинаетсяС(Сообщение.Текст, НСтр("ru='Фискализация чека'")) Тогда 
		Оповестить("ФискализацияЧека", Сообщение.Текст);
		ФискализацияЧековВОчереди(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик после открытия чека.
//
// Параметры:
//  ПараметрыВыполнения - Структура - Параметры выполнения команды
//  ДополнительныеПараметры - Произвольный
//
Процедура ФискализацияЧековВОчереди_ПослеОткрытияЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	МенеджерОборудованияКлиентПереопределяемый.ФискализацияЧековВОчередиПослеОткрытияЧека(ПараметрыВыполнения, ДополнительныеПараметры);
	
	Если ПараметрыВыполнения.Свойство("ДанныеОтправленыВЕГАИС") Тогда
	
		Возврат;
	
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПродолжения, ПараметрыВыполнения);
	
КонецПроцедуры

// Обработчик после ошибки печати чека.
//
// Параметры:
//  ПараметрыВыполнения - Структура - Параметры выполнения команды
//  ДополнительныеПараметры - Произвольный
//
Процедура ФискализацияЧековВОчереди_ПослеОшибкиПечатиЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	МенеджерОборудованияКлиентПереопределяемый.ФискализацияЧековВОчередиПослеОшибкиПечатиЧека(ПараметрыВыполнения, ДополнительныеПараметры);
	
КонецПроцедуры

// Завершение фискализации чеков в очереди
// 
// Параметры:
//  РезультатВыполнения - Структура
//  ОбщиеПараметры - ОбщиеПараметры
// 
Процедура ФискализацияЧековВОчереди_Завершение(РезультатВыполнения, ОбщиеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		СтатусЧека = ПредопределенноеЗначение("Перечисление.СтатусЧекаККТВОчереди.Фискализирован");
		ТекстСообщения = "";
	Иначе
		СтатусЧека = ПредопределенноеЗначение("Перечисление.СтатусЧекаККТВОчереди.Ошибка");
		ТекстСообщения = РезультатВыполнения.ОписаниеОшибки;
	КонецЕсли;
	
	Если РезультатВыполнения.Свойство("ДополнительныеПараметры") Тогда
		ОбщиеПараметры.Вставить("ДополнительныеПараметры", РезультатВыполнения.ДополнительныеПараметры);
	КонецЕсли;
	
	Если МенеджерОборудованияКлиентПовтИсп.ИспользуетсяЧекопечатающиеУстройства() Тогда
		МодульОборудованиеЧекопечатающиеУстройстваВызовСервера = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваВызовСервера");
		МодульОборудованиеЧекопечатающиеУстройстваВызовСервера.ЗаписатьСтатусЧекаВОчереди(ОбщиеПараметры, СтатусЧека, Неопределено, ТекстСообщения);
	КонецЕсли;
	
	Оповестить("ФискализированЧек");
	
	ФискализацияЧековВОчереди_Начало();
	
КонецПроцедуры

// Начать фискализацию чеков в очереди
Процедура ФискализацияЧековВОчереди_Начало() Экспорт
	
	ДанныеОчереди =  глПодключаемоеОборудование.ДанныеОчереди;
	
	Если ДанныеОчереди.НомерЧека < ДанныеОчереди.ЧекиВОчереди.Количество() Тогда
		
		ЧекВОчереди = ДанныеОчереди.ЧекиВОчереди[ДанныеОчереди.НомерЧека];
		ДанныеОчереди.НомерЧека = ДанныеОчереди.НомерЧека + 1;
		
		Если ЧекВОчереди.ДанныеЧека <> Неопределено Тогда
			ОбщиеПараметры = ЧекВОчереди.ДанныеЧека;
			СтатусДокументаИзменен = Ложь; 
			МенеджерОборудованияВызовСервераПереопределяемый.ПроверитьСтатусДокументаОснования(ОбщиеПараметры, СтатусДокументаИзменен);
			Если СтатусДокументаИзменен Тогда
				ЧекВОчереди.СтатусЧека = ПредопределенноеЗначение("Перечисление.СтатусЧекаККТВОчереди.Фискализирован");
			КонецЕсли;
		Иначе
			ФискализацияЧековВОчереди_Начало();
			Возврат;
		КонецЕсли;
	
		Если ЧекВОчереди.СтатусЧека = ПредопределенноеЗначение("Перечисление.СтатусЧекаККТВОчереди.Новый") 
			Или ЧекВОчереди.СтатусЧека = ПредопределенноеЗначение("Перечисление.СтатусЧекаККТВОчереди.Ошибка") Тогда
			
			Если ПустаяСтрока(ОбщиеПараметры.Кассир) Тогда
				ОбщиеПараметры.Кассир = ДанныеОчереди.Кассир;
				ОбщиеПараметры.КассирИНН = ДанныеОчереди.КассирИНН;
			КонецЕсли;
			
			ИдентификаторУстройстваККТ = ПолучитьДоступноеККТДляФискализации(ОбщиеПараметры, ДанныеОчереди.СписокУстройств);
			
			Если МенеджерОборудованияКлиентПовтИсп.ИспользуетсяЧекопечатающиеУстройства() Тогда
				
				МодульОборудованиеЧекопечатающиеУстройстваВызовСервера = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваВызовСервера");
				МодульОборудованиеЧекопечатающиеУстройстваКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
			
				Если НЕ ЗначениеЗаполнено(ИдентификаторУстройстваККТ) Тогда
					ТекстСообщения = НСтр("ru='Нет доступных ККТ для фискализации чека.'");
					СтатусЧека = ПредопределенноеЗначение("Перечисление.СтатусЧекаККТВОчереди.Ошибка");
					МодульОборудованиеЧекопечатающиеУстройстваВызовСервера.ЗаписатьСтатусЧекаВОчереди(ОбщиеПараметры, СтатусЧека, Неопределено, ТекстСообщения);
				Иначе
					СтатусЧека = ПредопределенноеЗначение("Перечисление.СтатусЧекаККТВОчереди.Фискализируется");
					МодульОборудованиеЧекопечатающиеУстройстваВызовСервера.ЗаписатьСтатусЧекаВОчереди(ОбщиеПараметры, СтатусЧека, ИдентификаторУстройстваККТ);
					
					ДополнительныеПараметры = Неопределено;
					
					ОписаниеОповещения = Новый ОписаниеОповещения("ФискализацияЧековВОчереди_Завершение", ЭтотОбъект, ОбщиеПараметры);
					УникальныйИдентификатор = Новый УникальныйИдентификатор;
					МодульОборудованиеЧекопечатающиеУстройстваКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(ОписаниеОповещения, УникальныйИдентификатор, ИдентификаторУстройстваККТ, ОбщиеПараметры, ДополнительныеПараметры);
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			ФискализацияЧековВОчереди_Начало();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполнить фискализацию чеков в очереди
//
// Параметры:
//  РазрешенаАвтоматическаяФискализация - Булево
//
Процедура ФискализацияЧековВОчереди(РазрешенаАвтоматическаяФискализация = Истина) Экспорт
	
	ПоддерживаемыеТипыВО = Новый Массив();
	ПоддерживаемыеТипыВО.Добавить("ПринтерЧеков");
	ПоддерживаемыеТипыВО.Добавить("ККТ");

	СписокУстройств = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам(ПоддерживаемыеТипыВО,,,,, РазрешенаАвтоматическаяФискализация);
	Если СписокУстройств.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если МенеджерОборудованияКлиентПовтИсп.ИспользуетсяЧекопечатающиеУстройства() Тогда
		
		МодульОборудованиеЧекопечатающиеУстройстваВызовСервера = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваВызовСервера");
		ЧекиВОчереди = МодульОборудованиеЧекопечатающиеУстройстваВызовСервера.ЧекиВОчередиНаФискализацию();
		Если ЧекиВОчереди.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Кассир = "";
	ВыполненаСтандартнаяОбработка = Истина; 
	МенеджерОборудованияКлиентСерверПереопределяемый.ОбработкаЗаполненияИмяКассира(Кассир, ВыполненаСтандартнаяОбработка); 
	Кассир = ?(Не ВыполненаСтандартнаяОбработка, Кассир, НСтр("ru='Администратор'")); 
	
	КассирИНН = "";
	ВыполненаСтандартнаяОбработка = Истина;
	МенеджерОборудованияКлиентСерверПереопределяемый.ОбработкаЗаполненияИННКассира(КассирИНН, ВыполненаСтандартнаяОбработка); 
	КассирИНН = ?(Не ВыполненаСтандартнаяОбработка, КассирИНН, ""); 
	
	ДанныеОчереди = Новый Структура();
	ДанныеОчереди.Вставить("Кассир"         , Кассир);
	ДанныеОчереди.Вставить("КассирИНН"      , КассирИНН);
	ДанныеОчереди.Вставить("ЧекиВОчереди"   , ЧекиВОчереди);
	ДанныеОчереди.Вставить("СписокУстройств", СписокУстройств);
	ДанныеОчереди.Вставить("НомерЧека"      , 0);
	глПодключаемоеОборудование.ДанныеОчереди = ДанныеОчереди;
	
	ФискализацияЧековВОчереди_Начало();
	
КонецПроцедуры

#КонецОбласти

#Область Устаревшие

// Выводит текст в панель состояния.
//
// Параметры:
//  ТекстСообщения - Строка
//  Прогресс - Число - индикатор прогресса
//  Пояснение - Строка
//
Процедура СостояниеПроцесса(ТекстСообщения, Прогресс = Неопределено, Пояснение = Неопределено) Экспорт
	
#Если НЕ МобильныйКлиент Тогда
	Состояние(ТекстСообщения, Прогресс);
#КонецЕсли 
	
КонецПроцедуры

#Область ВыбратьУстройство

// Процедура выбора устройства из доступных, привязанных к текущему рабочему месту.
//
// Параметры:
//  ОповещениеВыбора - ОписаниеОповещения - событие описания оповещения.
//  ТипОборудования - Структура, Массив, Строка - тип оборудования для выбора устройства.
//  ТекстЗаголовкаВыбора - Строка - Заголовок окна выбора.
//  СообщениеНеПодключено - Строка - Текст сообщения о не подключенных устройствах
//  СообщениеНеВыбрано - Строка - Текст сообщения о не выбранных устройствах
//
Процедура ПредложитьВыбратьУстройство(ОповещениеВыбора, ТипОборудования, ТекстЗаголовкаВыбора, СообщениеНеПодключено = "", СообщениеНеВыбрано = "") Экспорт
	
	Если Не ОбновитьРабочееМестоКлиента() Тогда
		ТекстСообщения = НСтр("ru='Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ТекстСообщения);
		ВыполнитьОбработкуОповещения(ОповещениеВыбора, РезультатВыполнения);
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(СообщениеНеПодключено) Тогда
		СообщениеНеПодключено = НСтр("ru='Необходимые устройства не подключены к текущему рабочему месту.'");
	КонецЕсли;
	
	Если ПустаяСтрока(СообщениеНеВыбрано) Тогда
		СообщениеНеВыбрано = НСтр("ru='Устройство не выбрано.'");
	КонецЕсли;
		
	СписокДоступныхУстройств = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам(ТипОборудования);
	Если СписокДоступныхУстройств.Количество() = 0 Тогда
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, СообщениеНеПодключено);
		ВыполнитьОбработкуОповещения(ОповещениеВыбора, Неопределено);
	Иначе
		СписокУстройств = Новый СписокЗначений();
		Для Каждого Устройства Из СписокДоступныхУстройств Цикл
			СписокУстройств.Добавить(Устройства.Ссылка, Устройства.Наименование);
		КонецЦикла;
		Если СписокУстройств.Количество() = 1 Тогда
			Идентификатор = СписокУстройств[0].Значение;
			РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Истина, , Идентификатор);
			ВыполнитьОбработкуОповещения(ОповещениеВыбора, РезультатВыполнения);
		Иначе
			Контекст = Новый Структура;
			Контекст.Вставить("ОповещениеВыбора"   , ОповещениеВыбора);
			Контекст.Вставить("СообщениеНеВыбрано" , СообщениеНеВыбрано);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПредложитьВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
			СписокУстройств.ПоказатьВыборЭлемента(ОписаниеОповещения, ТекстЗаголовкаВыбора);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Завершение выбора устройства
// 
// Параметры:
//  Результат - Структура
//  Параметры - Структура
// 
Процедура ПредложитьВыбратьУстройствоЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда 
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, Параметры.СообщениеНеВыбрано);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеВыбора, РезультатВыполнения);
	Иначе
		Идентификатор = ?(Результат = Неопределено, Неопределено, Результат.Значение);
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Истина, , Идентификатор);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеВыбора, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


//// Процедура открывает форму выбора кода вида номенклатурной классификации
////
//// Параметры:
////  ОповещениеПриВыборе - ОписаниеОповещения - событие описания оповещения.
////
//Процедура НачатьВыборКодаВидаНоменклатурнойКлассификации(ОповещениеПриВыборе) Экспорт
//	
//	ПараметрыКоманды = Новый Структура("ОповещениеПриВыборе", ОповещениеПриВыборе);
//	Обработчик = Новый ОписаниеОповещения("НачатьВыборКодаВидаНоменклатурнойКлассификации_Завершение", ЭтотОбъект, ПараметрыКоманды);
//	ОткрытьФорму("ОбщаяФорма.КодВидаНоменклатурнойКлассификации", ,,,  ,, Обработчик, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
//	
//КонецПроцедуры

//// Завершение выбора 
//// 
//// Параметры:
////  Результат - Структура
////  Параметры - Структура
//// 
//Процедура НачатьВыборКодаВидаНоменклатурнойКлассификации_Завершение(Результат, Параметры) Экспорт
//	
//	Если ТипЗнч(Результат) = Тип("Структура") Тогда
//			Если Параметры.ОповещениеПриВыборе <> Неопределено Тогда
//			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриВыборе, Результат);
//		КонецЕсли;
//	КонецЕсли;
//	
//КонецПроцедуры

//#КонецОбласти

#Область ТСД

// Начать загрузку данных из терминала сбора данных.
//
// Параметры:
//   ОповещениеПриЗавершении - ОписаниеОповещения - оповещение при завершении.
//   УникальныйИдентификатор - ФормаКлиентскогоПриложения -идентификатор формы.
//   СворачиватьДанные - Булево
//
Процедура НачатьЗагрузкуДанныеИзТСД(ОповещениеПриЗавершении, УникальныйИдентификатор, СворачиватьДанные = Ложь) Экспорт
	
	Если МенеджерОборудованияКлиентПовтИсп.ИспользуетсяТерминалыСбораДанных() Тогда
		МодульОборудованиеТерминалыСбораДанныхКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеТерминалыСбораДанныхКлиент");
		МодульОборудованиеТерминалыСбораДанныхКлиент.НачатьЗагрузкуДанныеИзТСД(ОповещениеПриЗавершении, УникальныйИдентификатор);
	Иначе
		РезультатОперации                = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании();
		РезультатОперации.Результат      = Ложь;
		РезультатОперации.ОписаниеОшибки = НСтр("ru = 'Подсистема Терминалы сбора данных не используется'");
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

// Начать выгрузку данных в терминал сбора данных.
//
// Параметры:
//   ОповещениеПриЗавершении - ОписаниеОповещения - оповещение при завершении.
//   УникальныйИдентификатор - ФормаКлиентскогоПриложения -идентификатор формы.
//   ТаблицаВыгрузкиТоваров - ТаблицаЗначений - 
//   ПолнаяВыгрузка - Булево -
//
Процедура НачатьВыгрузкуДанныеВТСД(ОповещениеПриЗавершении, УникальныйИдентификатор, ТаблицаВыгрузкиТоваров, ПолнаяВыгрузка = Истина) Экспорт
	
	Если МенеджерОборудованияКлиентПовтИсп.ИспользуетсяТерминалыСбораДанных() Тогда              
		МодульОборудованиеТерминалыСбораДанныхКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеТерминалыСбораДанныхКлиентСервер");
		ПараметрыОперации = МодульОборудованиеТерминалыСбораДанныхКлиентСервер.ПараметрыВыгрузкиВТСД();     
		ПараметрыОперации.ТаблицаТоваров = ТаблицаВыгрузкиТоваров;    
		ПараметрыОперации.ЧастичнаяВыгрузка = Не ПолнаяВыгрузка;
		
		МодульОборудованиеТерминалыСбораДанныхКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеТерминалыСбораДанныхКлиент");
		МодульОборудованиеТерминалыСбораДанныхКлиент.НачатьВыгрузкуДанныеВТСД(ОповещениеПриЗавершении, УникальныйИдентификатор, Неопределено, ПараметрыОперации);
	Иначе
		РезультатОперации                = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании();
		РезультатОперации.Результат      = Ложь;
		РезультатОперации.ОписаниеОшибки = НСтр("ru = 'Подсистема Терминалы сбора данных не используется'");
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

// Начать очистку данных в терминале сбора данных.
//
// Параметры:
//   ОповещениеПриЗавершении - ОписаниеОповещения - оповещение при завершении.
//   УникальныйИдентификатор - ФормаКлиентскогоПриложения -идентификатор формы.
//   ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - идентификатор устройства, если неопределенно - будет предложен выбор.
//
Процедура НачатьОчисткуДанныеВТСД(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено) Экспорт
	
	Если МенеджерОборудованияКлиентПовтИсп.ИспользуетсяТерминалыСбораДанных() Тогда
		МодульОборудованиеТерминалыСбораДанныхКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеТерминалыСбораДанныхКлиент");
		МодульОборудованиеТерминалыСбораДанныхКлиент.НачатьОчисткуДанныеВТСД(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства);
	Иначе
		РезультатОперации                = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании();
		РезультатОперации.Результат      = Ложь;
		РезультатОперации.ОписаниеОшибки = НСтр("ru = 'Подсистема Терминалы сбора данных не используется'");
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЭлектронныеВесы

// Получает вес с электронных весов.
//
// Параметры:
//   ОповещениеПриЗавершении - ОписаниеОповещения - оповещение при завершении.
//   УникальныйИдентификатор - ФормаКлиентскогоПриложения - идентификатор формы.
//   ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - идентификатор устройства, если неопределенно - будет предложен выбор.
//   ОтображатьСообщения     - Булево.
//
Процедура НачатьПолученияВесаСЭлектронныхВесов(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено, ОтображатьСообщения = Ложь) Экспорт
	
	Если МенеджерОборудованияКлиентПовтИсп.ИспользуетсяВесовоеОборудование() Тогда
		МодульОборудованиеВесовоеОборудованиеКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеВесовоеОборудованиеКлиент");
		МодульОборудованиеВесовоеОборудованиеКлиент.НачатьПолученияВесаСЭлектронныхВесов(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства, Неопределено); 
	Иначе
		РезультатОперации                = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании();
		РезультатОперации.Результат      = Ложь;
		РезультатОперации.ОписаниеОшибки = НСтр("ru = 'Подсистема Весовое оборудование не используется'");
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

// Начать установку веса тары на электронных весах.
//
// Параметры:
//   ОповещениеПриЗавершении - ОписаниеОповещения - оповещение при завершении.
//   УникальныйИдентификатор - ФормаКлиентскогоПриложения - идентификатор формы.
//   ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - идентификатор устройства, если неопределенно - будет предложен выбор.
//   Вес                     - Число - вес тары.
//
Процедура НачатьУстановкуВесаТары(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено, Вес = Неопределено) Экспорт
	
	Если МенеджерОборудованияКлиентПовтИсп.ИспользуетсяВесовоеОборудование() Тогда
		
		МодульОборудованиеВесовоеОборудованиеКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеВесовоеОборудованиеКлиентСервер");
		МодульОборудованиеВесовоеОборудованиеКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеВесовоеОборудованиеКлиент");
		
		ПараметрыОперации = МодульОборудованиеВесовоеОборудованиеКлиентСервер.ПараметрыОперацииЭлектронныеВесы(Вес);
		МодульОборудованиеВесовоеОборудованиеКлиент.НачатьУстановкуВесаТарыЭлектронныхВесов(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства, ПараметрыОперации); 
		
	Иначе
		РезультатОперации                = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании();
		РезультатОперации.Результат      = Ложь;
		РезультатОперации.ОписаниеОшибки = НСтр("ru = 'Подсистема Весовое оборудование не используется'");
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


//// Осуществляет открытие сессии регистрации КМ.
////
//// Параметры:
////  ОповещениеПриЗавершении - ОписаниеОповещения - обработчик результата.
////  УникальныйИдентификатор - УникальныйИдентификатор - Идентификатор формы.
////  Параметры - Структура - Содержит параметры выполнения операции.
////  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - Устройство.
////
//Процедура НачатьОткрытиеСессииРегистрацииКМ(ОповещениеПриЗавершении, УникальныйИдентификатор, Параметры = Неопределено, ИдентификаторУстройства = Неопределено) Экспорт
//	
//	Если МенеджерОборудованияКлиентПовтИсп.ИспользуетсяЧекопечатающиеУстройства() Тогда
//		МодульОборудованиеЧекопечатающиеУстройстваКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
//		МодульОборудованиеЧекопечатающиеУстройстваКлиент.НачатьОткрытиеСессииРегистрацииКМ(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства, Параметры); 
//	КонецЕсли;
//	
//КонецПроцедуры

//// Осуществляет закрытии сессии регистрации КМ.
////
//// Параметры:
////  ОповещениеПриЗавершении - ОписаниеОповещения - обработчик результата.
////  УникальныйИдентификатор - УникальныйИдентификатор - Идентификатор формы.
////  Параметры - Структура - Содержит параметры выполнения операции.
////  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - Устройство.
////
//Процедура НачатьЗакрытииСессииРегистрацииКМ(ОповещениеПриЗавершении, УникальныйИдентификатор, Параметры = Неопределено, ИдентификаторУстройства = Неопределено) Экспорт
//	
//	Если МенеджерОборудованияКлиентПовтИсп.ИспользуетсяЧекопечатающиеУстройства() Тогда
//		МодульОборудованиеЧекопечатающиеУстройстваКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
//		МодульОборудованиеЧекопечатающиеУстройстваКлиент.НачатьЗакрытииСессииРегистрацииКМ(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства, Параметры); 
//	КонецЕсли;
//	
//КонецПроцедуры

//// Осуществляет запрос КМ.
////
//// Параметры:
////  ОповещениеПриЗавершении - ОписаниеОповещения - обработчик результата.
////  УникальныйИдентификатор - УникальныйИдентификатор - Идентификатор формы.
////  Параметры - Структура - Содержит параметры выполнения операции.
////  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - Устройство.
////
//Процедура НачатьЗапросКМ(ОповещениеПриЗавершении, УникальныйИдентификатор, Параметры, ИдентификаторУстройства = Неопределено) Экспорт
//	
//	Если МенеджерОборудованияКлиентПовтИсп.ИспользуетсяЧекопечатающиеУстройства() Тогда
//		ДополнительныеПараметры = МенеджерОборудованияКлиентСервер.ДополнительныеПараметрыОперации(Истина);
//		МодульОборудованиеЧекопечатающиеУстройстваКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
//		МодульОборудованиеЧекопечатающиеУстройстваКлиент.НачатьЗапросКМ(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства, Параметры, ДополнительныеПараметры);
//	КонецЕсли;
//	
//КонецПроцедуры

//// Начать получения результатов запроса КМ.
////
//// Параметры:
////  ОповещениеПриЗавершении - ОписаниеОповещения - обработчик результата.
////  УникальныйИдентификатор - УникальныйИдентификатор - Идентификатор формы.
////  Параметры - Структура - Содержит параметры выполнения операции.
////  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - Устройство.
////
//Процедура НачатьПолученияРезультатовЗапросаКМ(ОповещениеПриЗавершении, УникальныйИдентификатор, Параметры, ИдентификаторУстройства = Неопределено) Экспорт
//	
//	Если МенеджерОборудованияКлиентПовтИсп.ИспользуетсяЧекопечатающиеУстройства() Тогда
//		МодульОборудованиеЧекопечатающиеУстройстваКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
//		МодульОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПолученияРезультатовЗапросаКМ(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства, Параметры);
//	КонецЕсли;
//	
//КонецПроцедуры

//// Начать подтверждение КМ.
////
//// Параметры:
////  ОповещениеПриЗавершении - ОписаниеОповещения - обработчик результата.
////  УникальныйИдентификатор - УникальныйИдентификатор - Идентификатор формы.
////  Параметры - Структура - Содержит параметры выполнения операции.
////  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - Устройство.
////
//Процедура НачатьПодтверждениеКМ(ОповещениеПриЗавершении, УникальныйИдентификатор, Параметры, ИдентификаторУстройства = Неопределено) Экспорт
//	
//	Если МенеджерОборудованияКлиентПовтИсп.ИспользуетсяЧекопечатающиеУстройства() Тогда
//		МодульОборудованиеЧекопечатающиеУстройстваКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
//		МодульОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПодтверждениеКМ(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства, Параметры);
//	КонецЕсли;
//	
//КонецПроцедуры

//// Функция возвращает идентификатор открытой сессии для фискального устройства.
//// 
//// Параметры:
////  ИдентификаторУстройства - УникальныйИдентификатор - Идентификатор устройства
//// 
//// Возвращаемое значение:
////  Неопределено - Сессия проверки кодов маркировки
//Функция СессияПроверкиКодовМаркировки(ИдентификаторУстройства) Экспорт
//	
//	ИдентификаторСессии = Неопределено;
//	ФискальныеУстройства = глПодключаемоеОборудование.ФискальныеУстройства;
//	
//	Для Каждого ФискальноеУстройство Из ФискальныеУстройства Цикл
//		Если ФискальноеУстройство.ИдентификаторУстройства = ИдентификаторУстройства Тогда
//			ИдентификаторСессии = ФискальноеУстройство.ИдентификаторСессии;
//			Прервать;
//		КонецЕсли;
//	КонецЦикла;
//	
//	Возврат ИдентификаторСессии;
//	
//КонецФункции

//// Процедура сохраняет идентификатор открытой сессии для фискального устройства.
////
//// Параметры:
////  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - Устройство.
////  ИдентификаторСессии - Строка
////  ИдентификаторЗапроса - Строка
////
//Процедура УстановитьСессиюПроверкиКодовМаркировки(ИдентификаторУстройства, ИдентификаторСессии = Неопределено, ИдентификаторЗапроса = Неопределено) Экспорт
//	
//	ФискальныеУстройства = глПодключаемоеОборудование.ФискальныеУстройства;
//	
//	Для Каждого ФискальноеУстройство Из ФискальныеУстройства Цикл
//		Если ФискальноеУстройство.ИдентификаторУстройства = ИдентификаторУстройства Тогда
//			ФискальноеУстройство.ИдентификаторСессии = ИдентификаторСессии;
//			Возврат;
//		КонецЕсли;
//	КонецЦикла;
//	
//	ФискальноеУстройство = Новый Структура();
//	ФискальноеУстройство.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
//	ФискальноеУстройство.Вставить("ИдентификаторСессии", ИдентификаторСессии);
//	ФискальноеУстройство.Вставить("ИдентификаторЗапроса"   , ИдентификаторЗапроса);
//	ФискальныеУстройства.Добавить(ФискальноеУстройство);
//	
//КонецПроцедуры

//// Функция возвращает проверяет ли устройство код маркировки.
//// 
//// Параметры:
////  ИдентификаторУстройства - УникальныйИдентификатор -Идентификатор устройства
//// 
//// Возвращаемое значение:
////  Структура - Проверка кода маркировки:
////   * ИдентификаторСессии - УникальныйИдентификатор.
////   * ИдентификаторЗапроса - УникальныйИдентификатор.
////
//Функция ПроверкаКодаМаркировки(ИдентификаторУстройства) Экспорт
//	
//	Результат = Новый Структура();
//	Результат.Вставить("ИдентификаторСессии");
//	Результат.Вставить("ИдентификаторЗапроса");
//	
//	ФискальныеУстройства = глПодключаемоеОборудование.ФискальныеУстройства;
//	
//	Для Каждого ФискальноеУстройство Из ФискальныеУстройства Цикл
//		Если ФискальноеУстройство.ИдентификаторУстройства = ИдентификаторУстройства Тогда
//			Результат.ИдентификаторСессии  = ФискальноеУстройство.ИдентификаторСессии;
//			Результат.ИдентификаторЗапроса = ФискальноеУстройство.ИдентификаторЗапроса;
//			Прервать;
//		КонецЕсли;
//	КонецЦикла;
//	
//	Возврат Результат;
//	
//КонецФункции

//// Процедура сохраняет статус проверки кода маркировки.
//// 
//// Параметры:
////  ИдентификаторУстройства - УникальныйИдентификатор - Идентификатор устройства.
////  ИдентификаторЗапроса - Неопределено - Идентификатор запроса
////
//Процедура УстановитьПроверкуКодаМаркировки(ИдентификаторУстройства, ИдентификаторЗапроса = Неопределено) Экспорт
//	
//	ФискальныеУстройства = глПодключаемоеОборудование.ФискальныеУстройства;
//	
//	Для Каждого ФискальноеУстройство Из ФискальныеУстройства Цикл
//		Если ФискальноеУстройство.ИдентификаторУстройства = ИдентификаторУстройства Тогда
//			   ФискальноеУстройство.ИдентификаторЗапроса = ИдентификаторЗапроса;
//			Возврат;
//		КонецЕсли;
//	КонецЦикла;
//	
//КонецПроцедуры

//// Результат проверки кода маркировки.
//// 
//// Параметры:
////  ИдентификаторУстройства - УникальныйИдентификатор - Идентификатор устройства
////  ИдентификаторСессии - УникальныйИдентификатор - Идентификатор сессии
////  ПараметрыЗапросаКМ -Структура - Параметры запроса КМ.
//// 
//// Возвращаемое значение:
////  Неопределено - Результат проверки кода маркировки
//Функция РезультатПроверкиКодаМаркировки(ИдентификаторУстройства, ИдентификаторСессии, ПараметрыЗапросаКМ) Экспорт
//	
//	РезультатПроверки  = Неопределено;
//	ПроверкиКодаМаркировки = глПодключаемоеОборудование.ПроверкиКодаМаркировки;
//	
//	Для Каждого ПроверкаКодаМаркировки Из ПроверкиКодаМаркировки Цикл
//		Если ПроверкаКодаМаркировки.ИдентификаторУстройства = ИдентификаторУстройства
//			И ПроверкаКодаМаркировки.ИдентификаторСессии = ИдентификаторСессии
//			И ПроверкаКодаМаркировки.ПараметрыЗапросаКМ.КонтрольнаяМарка = ПараметрыЗапросаКМ.КонтрольнаяМарка  
//			И ПроверкаКодаМаркировки.ПараметрыЗапросаКМ.Количество = ПараметрыЗапросаКМ.Количество
//			И ПроверкаКодаМаркировки.ПараметрыЗапросаКМ.ПланируемыйСтатусТовара = ПараметрыЗапросаКМ.ПланируемыйСтатусТовара Тогда
//				РезультатПроверки = ПроверкаКодаМаркировки.РезультатПроверки;
//			Прервать;
//		КонецЕсли;
//	КонецЦикла;
//	
//	Возврат РезультатПроверки;
//	
//КонецФункции

//// Процедура устанавливает результат проверки кода маркировки.
//// 
//// Параметры:
////  ИдентификаторУстройства - УникальныйИдентификатор - Идентификатор устройства.
////  ИдентификаторСессии - УникальныйИдентификатор
////  ПараметрыЗапросаКМ - Структура
////  РезультатПроверки - Структура
////  ИдентификаторЗапроса - УникальныйИдентификатор
////
//Процедура УстановитьРезультатПроверкиКодаМаркировки(ИдентификаторУстройства, ИдентификаторСессии, ПараметрыЗапросаКМ, РезультатПроверки, ИдентификаторЗапроса = Неопределено) Экспорт
//	
//	ФискальныеУстройства = глПодключаемоеОборудование.ФискальныеУстройства;
//	Для Каждого ФискальноеУстройство Из ФискальныеУстройства Цикл
//		Если ФискальноеУстройство.ИдентификаторУстройства = ИдентификаторУстройства Тогда
//			   ФискальноеУстройство.ИдентификаторЗапроса = ИдентификаторЗапроса;
//			Прервать;
//		КонецЕсли;
//	КонецЦикла;
//	
//	ПроверкиКодаМаркировки = глПодключаемоеОборудование.ПроверкиКодаМаркировки;
//	Для Каждого ПроверкаКодаМаркировки Из ПроверкиКодаМаркировки Цикл
//		Если ПроверкаКодаМаркировки.ИдентификаторУстройства = ИдентификаторУстройства
//			И ПроверкаКодаМаркировки.ИдентификаторСессии = ИдентификаторСессии
//			И ПроверкаКодаМаркировки.ПараметрыЗапросаКМ.КонтрольнаяМарка = ПараметрыЗапросаКМ.КонтрольнаяМарка  
//			И ПроверкаКодаМаркировки.ПараметрыЗапросаКМ.Количество = ПараметрыЗапросаКМ.Количество
//			И ПроверкаКодаМаркировки.ПараметрыЗапросаКМ.ПланируемыйСтатусТовара = ПараметрыЗапросаКМ.ПланируемыйСтатусТовара Тогда
//				ПроверкаКодаМаркировки.РезультатПроверки = РезультатПроверки;
//			Возврат;
//		КонецЕсли;
//	КонецЦикла;                             
//	
//	ПроверкаКодаМаркировки = Новый Структура();
//	ПроверкаКодаМаркировки.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
//	ПроверкаКодаМаркировки.Вставить("ИдентификаторСессии", ИдентификаторСессии);
//	ПроверкаКодаМаркировки.Вставить("ПараметрыЗапросаКМ" , ПараметрыЗапросаКМ);
//	ПроверкаКодаМаркировки.Вставить("РезультатПроверки"  , РезультатПроверки);
//	ПроверкиКодаМаркировки.Добавить(ПроверкаКодаМаркировки);
//	
//КонецПроцедуры

//#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Преобразовать список строкой в массив.
// 
// Параметры:
//  Строка - список полей через запятую
//
// Возвращаемое значение:
//  Массив из Строка.
//
Функция ПреобразоватьСписокСтрокойВМассив(Источник)
	
	ПромежуточнаяСтруктура = Новый Структура(Источник);
	Приемник = Новый Массив;
	
	Для Каждого КлючИЗначение Из ПромежуточнаяСтруктура Цикл
		Приемник.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Возврат Приемник;
	
КонецФункции

#Область РаспределеннаяФискализации

Функция ПолучитьДоступноеККТДляФискализации(РеквизитыЧека, СписокУстройств)
	
	ИдентификаторУстройстваККТ = Неопределено;
	СтандартнаяОбработка = Истина;
	
	МенеджерОборудованияКлиентПереопределяемый.ДоступноеККТДляФискализации(РеквизитыЧека, СписокУстройств, ИдентификаторУстройстваККТ, СтандартнаяОбработка);
	
	Если НЕ СтандартнаяОбработка Тогда
		Возврат ИдентификаторУстройстваККТ;
	КонецЕсли;
	
	Для Каждого Устройство Из СписокУстройств Цикл
		Если Устройство.ПараметрыРегистрации.Свойство("ОрганизацияИНН") И Устройство.ПараметрыРегистрации.Свойство("КодСистемыНалогообложения") Тогда 
			УстройствоОрганизацияИНН = Устройство.ПараметрыРегистрации.ОрганизацияИНН; 
			УстройствоКодНалогообложения = Устройство.ПараметрыРегистрации.КодСистемыНалогообложения;
			ОрганизацияИНН = РеквизитыЧека.ОрганизацияИНН;
			
			Если МенеджерОборудованияКлиентПовтИсп.ИспользуетсяЧекопечатающиеУстройства() Тогда
				
				МодульОборудованиеЧекопечатающиеУстройстваКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер");
				СистемаНалогообложения = МодульОборудованиеЧекопечатающиеУстройстваКлиентСервер.КодСистемыНалогообложенияККТ(РеквизитыЧека.СистемаНалогообложения);
				
			КонецЕсли;
			
			Если УстройствоКодНалогообложения = Строка(СистемаНалогообложения) 
				И УстройствоОрганизацияИНН = ОрганизацияИНН Тогда
					ИдентификаторУстройстваККТ = Устройство.Ссылка;
					Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИдентификаторУстройстваККТ;
	
КонецФункции

#КонецОбласти

#КонецОбласти
