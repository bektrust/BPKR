
#Область ПодготовкаСписанияМБП

Функция ПодготовитьТаблицуСписанныеМБП(ТаблицаМБП, ТаблицаРеквизиты, Отказ, ВЭксплуатации = Ложь, ДопПроводки = Ложь) Экспорт
	
	МатериалыДляОценкиСтоимости = Новый Структура("СписанныеМБП", ТаблицаМБП);
	
	МатериалыСОценкойСтоимости = ПодготовитьТаблицыСписанныеМБП(
		МатериалыДляОценкиСтоимости,
		ТаблицаРеквизиты,
		Отказ,
		ВЭксплуатации,
		ДопПроводки);
		
	Возврат МатериалыСОценкойСтоимости.СписанныеМБП;

КонецФункции

// Подготавливает таблицы расхода МБП, в которых нужна расчетная оценка стоимости списания.
// при этом для списания учитываются партии возвращенные тем же документом
// Параметры:
//  ТаблицыМБП - Структура - Содержит таблицы значений с списком МБП, оценку которых нужно получить
//  ТаблицаРеквизиты - ТаблицаЗначений - Таблица с реквизитами документа, влияющими на списание МБП
//  ТаблицаВозвраты - ТаблицаЗначений - Таблица с остатками возвращенных партий
//  Отказ - Булево - Признак ошибки, выявленной в ходе подготовки таблицы
// 
Функция ПодготовитьТаблицыСписанныеМБПСУчетомВозврата(ТаблицыМБП, ТаблицаРеквизиты, ТаблицаВозвраты, Отказ, ВЭксплуатации = Ложь, ДопПроводки = Ложь) Экспорт
	
	Параметры = ПодготовитьРеквизитыСписанныеМБП(ТаблицаРеквизиты, ТаблицаВозвраты);
	
	СписанныеМБП = Новый Структура;
	
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Для Каждого КлючИЗначение Из ТаблицыМБП Цикл	
			СписанныеМБП.Вставить(КлючИЗначение.Ключ, ПолучитьПустуюТаблицуСписанныеМБП(ВЭксплуатации, ДопПроводки));
		КонецЦикла;
		Возврат СписанныеМБП;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	НадоРассчитать = Новый Структура;
	НадоОценить    = Новый Структура;
	
	// Подготовим данные для расчета стоимости списания
	Для Каждого КлючИЗначение Из ТаблицыМБП Цикл
		
		ИмяТаблицы    = КлючИЗначение.Ключ;
		ДанныеТаблицы = КлючИЗначение.Значение;
		
		СписанныеМБП.Вставить(ИмяТаблицы, ПолучитьПустуюТаблицуСписанныеМБП(ВЭксплуатации, ДопПроводки));
		Если ДанныеТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыТаблицыМБП = ПодготовитьПараметрыТаблицыСписанныеМБП(ДанныеТаблицы, ТаблицаРеквизиты, ДопПроводки);
		
		ТаблицаМБП          = ПараметрыТаблицыМБП.ТаблицаМБП;
		ТаблицаНадоРассчитать  = ТаблицаМБП.СкопироватьКолонки();
		
		// Отделим запасы, которые будут списаны по указанной в документе стоимости,
		// от запасов, стоимость которых будет расчитана на основании остатков.
		// Строки, стоимость которых считать не надо, сразу запишем в СписанныеМБП.
		Для Каждого СтрокаТаблицыМБП Из ТаблицаМБП Цикл
			
			Если СтрокаТаблицыМБП.Себестоимость > 0 Тогда
				
				// Стоимость указана в документе
				
				НоваяСтрока = СписанныеМБП[ИмяТаблицы].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыМБП);
				НоваяСтрока.Партия             = СтрокаТаблицыМБП.ДокументОприходования;
				НоваяСтрока.СуммаСписания      = СтрокаТаблицыМБП.Себестоимость;
			Иначе 
				
				// Надо рассчитать
				НоваяСтрока = ТаблицаНадоРассчитать.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыМБП);
				
			КонецЕсли;

		КонецЦикла; // По строкам ТаблицаМБП
		
		Если ТаблицаНадоРассчитать.Количество() > 0 Тогда
			НадоРассчитать.Вставить(ИмяТаблицы, ТаблицаНадоРассчитать);
		КонецЕсли;

	КонецЦикла; // По элементам ТаблицыМБП
	
	Для Каждого КлючИЗначение Из НадоОценить Цикл
		
		ИмяТаблицы             = КлючИЗначение.Ключ;
		ТаблицаНадоОценить     = КлючИЗначение.Значение;
		ТаблицаСписанныеМБП = СписанныеМБП[ИмяТаблицы];
		
		Для Каждого СтрокаТаблицы Из ТаблицаНадоОценить Цикл
			
			НоваяСтрока = ТаблицаСписанныеМБП.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
		КонецЦикла;
		
	КонецЦикла;
		
	Если НадоРассчитать.Количество() = 0 Тогда

		Для каждого КлючИЗначение Из СписанныеМБП Цикл
			КлючИЗначение.Значение.Сортировать("ИмяСписка, НомерСтроки");
		КонецЦикла;

		Возврат СписанныеМБП;

	КонецЕсли;
	
	// Нужно рассчитать стоимость списания - определить её на основании остатков.

	// Подготовим таблицу, по которой отберем остатки
	ОтборОстатков = Новый ТаблицаЗначений();
	ОтборОстатков.Колонки.Добавить("СчетУчета",    Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ОтборОстатков.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Если ВЭксплуатации Тогда 
		ОтборОстатков.Колонки.Добавить("Склад",        Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Иначе 
		ОтборОстатков.Колонки.Добавить("Склад",        Новый ОписаниеТипов("СправочникСсылка.Склады"));
	КонецЕсли;	
	
	Для Каждого КлючИЗначение Из НадоРассчитать Цикл
		Для Каждого СтрокаТаблицы Из КлючИЗначение.Значение Цикл
			НоваяСтрока = ОтборОстатков.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЦикла;
	КонецЦикла;
	
	// Спишем остатки из таблицы
	СпособОценкиТМЗПоСредней = БухгалтерскийУчетСервер.СпособОценкиТМЗ(Реквизиты.Период, Реквизиты.Организация) = Перечисления.СпособыОценки.ПоСредней;

	// Получим остатки
	МоментВремени = Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор);
	ТаблицаОстатки = ПолучитьОстаткиМБП(
		МоментВремени,
		Реквизиты.Организация,
		ОтборОстатков,
		Параметры.ТаблицаВозвраты);
		
	ТаблицаОстатки.Индексы.Добавить("Номенклатура, СчетУчета");
	ТаблицаОстатки.Индексы.Добавить("НомерСтроки");

	КонтролироватьОстаток = БухгалтерскийУчетСервер.ВыполнитьКонтрольОстатков();
	
	Для Каждого КлючИЗначение Из НадоРассчитать Цикл
		
		ИмяТаблицы             = КлючИЗначение.Ключ;
		ТаблицаНадоРассчитать  = КлючИЗначение.Значение;
		ТаблицаСписанныеМБП = СписанныеМБП[ИмяТаблицы];
		
		СписатьОстаткиМБП(
			ТаблицаНадоРассчитать,
			ТаблицаОстатки,
			ТаблицаСписанныеМБП,
			СпособОценкиТМЗПоСредней,
			КонтролироватьОстаток,
			Реквизиты,
			Отказ);
			
	КонецЦикла;
	
	Возврат СписанныеМБП;

КонецФункции

// Подготавливает таблицы расхода МБП, в которых нужна расчетная оценка стоимости списания.
//
// Параметры:
//  ТаблицыМБП - Структура - Содержит таблицы значений с списком МБП, оценку которых нужно получить
//  ТаблицаРеквизиты - ТаблицаЗначений - Таблица с реквизитами документа, влияющими на списание МБП
//  Отказ - Булево - Признак ошибки, выявленной в ходе подготовки таблицы
// 
Функция ПодготовитьТаблицыСписанныеМБП(ТаблицыМБП, ТаблицаРеквизиты, Отказ, ВЭксплуатации = Ложь, ДопПроводки = Ложь) Экспорт

	Возврат ПодготовитьТаблицыСписанныеМБПСУчетомВозврата(ТаблицыМБП, ТаблицаРеквизиты, Неопределено, Отказ, ВЭксплуатации, ДопПроводки);

КонецФункции

Процедура СписатьОстаткиМБП(ТаблицаСписаниеПоОстаткам, ТаблицаОстатки, ТаблицаСписанныеМБП, СпособОценкиМПЗПоСредней, КонтролироватьОстаток, Реквизиты, Отказ)
	
	ТаблицаОшибок = ТаблицаСписаниеПоОстаткам.СкопироватьКолонки("ИмяСписка, СинонимСписка, НомерСтроки, Количество");
	ТаблицаОшибок.Колонки.Добавить("КоличествоОсталосьПогасить", Новый ОписаниеТипов("Число"));

	Для Каждого СтрокаДокумента Из ТаблицаСписаниеПоОстаткам Цикл
		
		КоличествоОсталосьПогасить = СтрокаДокумента.Количество;
		
		Если ТаблицаОстатки.Количество() <> 0 Тогда
		
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура", СтрокаДокумента.Номенклатура);
			ПараметрыОтбора.Вставить("СчетУчета", СтрокаДокумента.СчетУчета);
			
			// Добавление партии, если непосредственно в документе
			Если ЗначениеЗаполнено(СтрокаДокумента.ДокументОприходования) Тогда
				Если НЕ СпособОценкиМПЗПоСредней
					И БухгалтерскийУчетСервер.НаСчетеВедетсяПартионныйУчет(СтрокаДокумента.СчетУчета) Тогда
					ПараметрыОтбора.Вставить("ДокументОприходования", СтрокаДокумента.ДокументОприходования);
				КонецЕсли;
			КонецЕсли;
			
			ПартииОстатков = ТаблицаОстатки.Скопировать(ПараметрыОтбора);
			ПартииОстатков.Сортировать("ДокументОприходованияДата, ДокументОприходования", Новый СравнениеЗначений);
			
			// Списание по партиям
			Для Каждого СтрокаПартии Из ПартииОстатков Цикл
				
				Если КоличествоОсталосьПогасить <= 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если СтрокаПартии.КоличествоПоСкладу <= 0
					ИЛИ СтрокаПартии.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если БухгалтерскийУчетСервер.ВедетсяУчетПоМестонахождениям(СтрокаДокумента.СчетУчета) Тогда
					Если СтрокаПартии.Склад <> СтрокаДокумента.Склад
						И НЕ ЗначениеЗаполнено(СтрокаПартии.Склад) Тогда // пустые склады могут остаться со времени, когда не было учета по складам
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Количество = Мин(СтрокаПартии.КоличествоПоСкладу, КоличествоОсталосьПогасить);
				
				Стоимость = Окр(СтрокаПартии.Стоимость * Количество / СтрокаПартии.Количество, 2, 1);
				
				КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - Количество;
				
				СтрокаТаблицыОстатки = ТаблицаОстатки.Найти(СтрокаПартии.НомерСтроки, "НомерСтроки");
				СтрокаТаблицыОстатки.Количество         = СтрокаТаблицыОстатки.Количество - Количество;
				СтрокаТаблицыОстатки.Стоимость          = СтрокаТаблицыОстатки.Стоимость - Стоимость;
				СтрокаТаблицыОстатки.КоличествоПоСкладу = СтрокаТаблицыОстатки.КоличествоПоСкладу - Количество;
				
				СписаннаяПартия = ТаблицаСписанныеМБП.Добавить();
				ЗаполнитьЗначенияСвойств(СписаннаяПартия, СтрокаДокумента);
				СписаннаяПартия.Партия              = СтрокаПартии.ДокументОприходования;
				СписаннаяПартия.Склад               = СтрокаПартии.Склад;
				СписаннаяПартия.Количество          = Количество;
				СписаннаяПартия.СуммаСписания       = Стоимость;
			КонецЦикла;
		КонецЕсли;
		
		// Несписанное количество добавим отдельной строкой в таблицу списанных партий.
		Если КоличествоОсталосьПогасить > 0  Тогда
			
			СписаннаяПартия               = ТаблицаСписанныеМБП.Добавить();
			ЗаполнитьЗначенияСвойств(СписаннаяПартия, СтрокаДокумента);
			СписаннаяПартия.СчетУчета     = СтрокаДокумента.СчетУчета;
			СписаннаяПартия.Количество    = КоличествоОсталосьПогасить;
			
		КонецЕсли;
		
		// Добавление ошибки
		Если КоличествоОсталосьПогасить > 0 И КонтролироватьОстаток Тогда
			СтрокаТаблицыОшибок = ТаблицаОшибок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыОшибок, СтрокаДокумента);
			СтрокаТаблицыОшибок.КоличествоОсталосьПогасить = КоличествоОсталосьПогасить;
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаОшибок.Количество() > 0 Тогда
		Для каждого СтрокаТаблицыОшибок Из ТаблицаОшибок Цикл
		
			ВывестиСообщениеОбОшибке(
				СтрокаТаблицыОшибок.Количество, 
				СтрокаТаблицыОшибок.КоличествоОсталосьПогасить, 
				Реквизиты.Регистратор, 
				СтрокаТаблицыОшибок.ИмяСписка, 
				СтрокаТаблицыОшибок.СинонимСписка, 
				СтрокаТаблицыОшибок.НомерСтроки, 
				Отказ);
		
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ВывестиСообщениеОбОшибке(Количество, КоличествоОсталосьПогасить, Регистратор, ИмяСписка = "", СинонимСписка = "", НомерСтроки = "", Отказ)

	ТекстОшибки = НСтр("ru = 'Указанное количество превышает остаток. Остаток: %1; Не хватает: %2'");
		
	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
		Количество - КоличествоОсталосьПогасить,
		КоличествоОсталосьПогасить);
		
	ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
		?(ЗначениеЗаполнено(ИмяСписка), "Колонка", "Поле"), 
		"Корректность",
		НСтр("ru = 'Количество'"),
		НомерСтроки,
		СинонимСписка,
		ТекстОшибки);
	
		
	Если НЕ ЗначениеЗаполнено(ИмяСписка) Тогда
		ПолеКоличество	= "Количество";
	Иначе
		ПолеКоличество	= ИмяСписка + "[" + Формат(НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Количество";
	КонецЕсли;
	
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Регистратор, ПолеКоличество, "Объект", Отказ);

КонецПроцедуры

Функция ПодготовитьПараметрыТаблицыСписанныеМБП(ТаблицаМБП, ТаблицаРеквизиты, ДопПроводки)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаМБП
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"             	// <Строка,0> - имя списка в документе
	+ "СинонимСписка,"         	// <Строка,0> - синоним списка
	+ "Период,"                	// <Дата> - период движения
	+ "НомерСтроки,"           	// <Число> - номер строки в списке
	+ "СчетУчета,"             	// <ПланСчетовСсылка.Хозрасчетный> - счет учета, с которого списывается номенклатура
	+ "Номенклатура,"          	// <СправочникСсылка.Номенклатура> - списываемая номенклатура
	+ "Склад,"                 	// <СправочникСсылка.Склад> - склад, с которого списывается номенклатура
	+ "ДокументОприходования," 	// <ДокументСсылка.*> - документ поступления номенклатуры (партия), указанный в документе списания
	+ "Себестоимость,"         	// <Число,15,2> - сумма списываемой номенклатуры, указанная в документе списания
	+ "Количество,"            	// <Число,15,3> - количество списываемой номенклатуры
	+ "КорСчетСписания,"       	// <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который списывается номенклатура
	+ "КорСубконто1,"          	// - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто2,"          	// - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто3";			// - значение субконто счета, на который списывается номенклатура
	
	Если ДопПроводки Тогда
		СписокОбязательныхКолонок = СписокОбязательныхКолонок 
		+ ",СчетЗатрат"			// <ПланСчетовСсылка.Хозрасчетный> - счет затрат, на который списывается номенклатура
		+ ",Субконто1"			// - значение субконто счета, на который списывается номенклатура
		+ ",Субконто2"			// - значение субконто счета, на который списывается номенклатура
		+ ",Субконто3";			// - значение субконто счета, на который списывается номенклатура
	КонецЕсли;
	
	Параметры.Вставить("ТаблицаМБП",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаМБП, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты
	СписокОбязательныхКолонок = ""
	+ "Регистратор,"   // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"        // <Дата> - период движений - дата документа
	+ "Организация,"   // <СправочникСсылка.Организации>
	+ "Содержание";    // <Строка,150>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьРеквизитыСписанныеМБП(ТаблицаРеквизиты, ТаблицаВозвраты)
	
	Параметры = Новый Структура;
	
	СписокОбязательныхКолонок = ""
	+ "Регистратор,"   // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"        // <Дата> - период движений - дата документа
	+ "Организация,"   // <СправочникСсылка.Организации>
	+ "Содержание";    // <Строка,150>
	
	Параметры.Вставить("Реквизиты", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
		
	СписокОбязательныхКолонок = ""
	+ "Партия,"			// <ДокументСсылка.*> - документ учета партии
	+ "Количество,"		// <Число (15,3)> - количество возвращенной партии
	+ "Номенклатура,"	// <СправочникСсылка.Номенклатура> 
	+ "Склад,"			// <Число(15,2)> сумма возврата по партии (ВР)
	+ "СчетУчета";		// <ПланСчетовСсылка.Хозрасчетный>
	
	Параметры.Вставить("ТаблицаВозвраты", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаВозвраты, СписокОбязательныхКолонок));
		
	Возврат Параметры;
КонецФункции

#КонецОбласти

#Область СписаниеМБП

Процедура СформироватьДвиженияСписаниеМБП(ТаблицаСписанныеМБП, ТаблицаРеквизиты, Движения, Отказ, ДополнительныеСвойства = Неопределено) Экспорт

	Параметры = ПодготовитьПараметрыСписаниеМБП(ТаблицаСписанныеМБП, ТаблицаРеквизиты);

	Если Параметры.Реквизиты.Количество() = 0
		ИЛИ Параметры.ТаблицаСписанныеМБП.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];
	
	СпособОценкиТМЗ = БухгалтерскийУчетСервер.СпособОценкиТМЗ(Реквизиты.Период, Реквизиты.Организация);
	ВедетсяУчетПоПартиям = СпособОценкиТМЗ <> Перечисления.СпособыОценки.ПоСредней;	
	ВидСубконтоПартии = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;
	
	// Переопределение содержания
	НазваниеОбъектаВСодержании = СтрНайти(Реквизиты.Содержание, НСтр("ru = ' товаров'"));
	Если НазваниеОбъектаВСодержании Тогда
		Реквизиты.Содержание = СтрЗаменить(Реквизиты.Содержание, НСтр("ru = ' товаров'"), " МБП");
	КонецЕсли;
	
	ДокументРеализации = ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.РеализацияТоваровУслуг") 
		Или ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.РеализацияУслугПоПереработке")
		Или ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.РозничнаяПродажа")
		Или ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг")
		Или ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах");
	ДокументВозврата = ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя");
	
	СвойстваСчетаКеш = Новый Соответствие;

	Для Каждого СтрокаПартии Из Параметры.ТаблицаСписанныеМБП Цикл

		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = СтрокаПартии.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание = Реквизиты.Содержание;

		Проводка.СчетДт	= СтрокаПартии.КорСчетСписания;

		СвойстваСчета = СвойстваСчетаКеш[Проводка.СчетДт];
		Если СвойстваСчета = Неопределено Тогда   // первое использование счета
			СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			СвойстваСчетаКеш.Вставить(Проводка.СчетДт, СвойстваСчета);
		КонецЕсли;
		
		// Цикл субконто по строке партий
		Для НомерСубконто = 1 По 3 Цикл
			КорСубконто = СтрокаПартии["КорСубконто" + НомерСубконто];
			
			// Определение положения субконто по типу
			// За исключением партии при НЕ парионном учете				
			Если СвойстваСчета.ВидСубконто1ТипЗначения <> Неопределено
				И СвойстваСчета.ВидСубконто1ТипЗначения.СодержитТип(ТипЗнч(КорСубконто)) Тогда 
				Если НЕ ВедетсяУчетПоПартиям И СвойстваСчета.ВидСубконто1 = ВидСубконтоПартии Тогда 
					Продолжить;
				КонецЕсли;	
				БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СвойстваСчета.ВидСубконто1, КорСубконто);
			ИначеЕсли СвойстваСчета.ВидСубконто2ТипЗначения <> Неопределено
				И СвойстваСчета.ВидСубконто2ТипЗначения.СодержитТип(ТипЗнч(КорСубконто)) Тогда 
				Если НЕ ВедетсяУчетПоПартиям И СвойстваСчета.ВидСубконто1 = ВидСубконтоПартии Тогда 
					Продолжить;
				КонецЕсли;	
				БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СвойстваСчета.ВидСубконто2, КорСубконто);
			ИначеЕсли СвойстваСчета.ВидСубконто3ТипЗначения <> Неопределено
				И СвойстваСчета.ВидСубконто3ТипЗначения.СодержитТип(ТипЗнч(КорСубконто)) Тогда 
				Если НЕ ВедетсяУчетПоПартиям И СвойстваСчета.ВидСубконто1 = ВидСубконтоПартии Тогда 
					Продолжить;
				КонецЕсли;	
				БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СвойстваСчета.ВидСубконто3, КорСубконто);
			КонецЕсли;
		КонецЦикла;
		
		// Если корсубконто для списания явно не указано, подставляем совпадающие по типу значения
		// из других полей таблицы.
		
		// Цикл по видам субконто на счете Дт.
		Для НомерСубконто = 1 По 3 Цикл
			
			ВидСубконто = СвойстваСчета["ВидСубконто" + НомерСубконто];
			
			Если ЗначениеЗаполнено(ВидСубконто) Тогда
				
				КорСубконто = Проводка.СубконтоДт[ВидСубконто];
				Если ЗначениеЗаполнено(КорСубконто) Тогда
					Продолжить;
				КонецЕсли;
			
				ТипЗначенияВидаСубконто = СвойстваСчета["ВидСубконто" + НомерСубконто + "ТипЗначения"];
				
				Если ТипЗначенияВидаСубконто.СодержитТип(Тип("СправочникСсылка.Номенклатура")) Тогда
					КорСубконто = СтрокаПартии.Номенклатура;
				
				ИначеЕсли ТипЗначенияВидаСубконто.СодержитТип(Тип("СправочникСсылка.Организации")) Тогда
					КорСубконто = Реквизиты.Организация;
				
				ИначеЕсли ТипЗначенияВидаСубконто.СодержитТип(Тип("СправочникСсылка.Склады")) Тогда
					Если ЗначениеЗаполнено(СтрокаПартии.Склад) Тогда
						КорСубконто = СтрокаПартии.Склад;
					КонецЕсли;
					
				КонецЕсли;
				
				БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
					ВидСубконто, КорСубконто);
					
			КонецЕсли;
			
		КонецЦикла;
		
		Если ВедетсяУчетПоПартиям ИЛИ СвойстваСчета.Забалансовый Тогда
			БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
				"Партии", СтрокаПартии.Партия);
		КонецЕсли;

		Если СвойстваСчета.Количественный Тогда
			Проводка.КоличествоДт = СтрокаПартии.Количество;
		КонецЕсли;

		Проводка.СчетКт = СтрокаПартии.СчетУчета;

		СвойстваСчета = СвойстваСчетаКеш[Проводка.СчетКт];
		Если СвойстваСчета = Неопределено Тогда   // первое использование счета
			СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			СвойстваСчетаКеш.Вставить(Проводка.СчетКт, СвойстваСчета);
		КонецЕсли;
		
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаПартии.Номенклатура);
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Местонахождение", СтрокаПартии.Склад);
		Если ВедетсяУчетПоПартиям ИЛИ СвойстваСчета.Забалансовый Тогда
			БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии", СтрокаПартии.Партия);
		КонецЕсли;
		
		Если СвойстваСчета.Количественный Тогда
			Проводка.КоличествоКт = СтрокаПартии.Количество;
		КонецЕсли;
		
		Проводка.Сумма = СтрокаПартии.СуммаСписания;
		
		// Заполнение себестоимости в регистре накопления "Продажи".
		Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаПродажи")
			И (ДокументРеализации Или ДокументВозврата) Тогда 
			НайденныеСтроки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажи.НайтиСтроки(Новый Структура("Номенклатура", СтрокаПартии.Номенклатура));
			// Строки при проведении сгруппированы.
			// В результате поиска должен быть массив не более 1 строки.
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				// Увеличение себестоимости, в случае ведения учета по партиям.
				НайденнаяСтрока.Себестоимость = НайденнаяСтрока.Себестоимость + СтрокаПартии.СуммаСписания;	
			КонецЦикла;	
		КонецЕсли;	
		
	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыСписаниеМБП(ТаблицаСписанныеМБП, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаСписанныеМБП

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"        	// <Строка,0> - имя списка в документе
	+ "СинонимСписка,"    	// <Строка,0> - синоним списка
	+ "Период,"           	// <Дата> - дата списания
	+ "НомерСтроки,"      	// <Число> - номер строки в списке
	+ "СчетУчета,"        	// <ПланСчетовСсылка.Хозрасчетный> - счет учета, с которого списывается номенклатура
	+ "Номенклатура,"     	// <СправочникСсылка.Номенклатура> - списываемая номенклатура
	+ "Склад,"            	// <СправочникСсылка.Склад> - склад, с которого списывается номенклатура
	+ "Партия,"           	// <ДокументСсылка.*> - документ поступления номенклатуры (партия)
	+ "Себестоимость,"    	// <Число,15,2> - сумма списываемой номенклатуры, указанная в документе списания
	+ "Количество,"       	// <Число,15,3> - количество списываемой номенклатуры
	+ "КорСчетСписания,"  	// <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который списывается номенклатура
	+ "КорСубконто1,"     	// - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто2,"     	// - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто3,"     	// - значение субконто счета, на который списывается номенклатура
	+ "СуммаСписания";		// <Число,15,2> - сумма временных разниц (ПБУ 18/02) в стоимости списываемой номенклатуры, определенной по данным остатков
	
	Параметры.Вставить("ТаблицаСписанныеМБП",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСписанныеМБП, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор," // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"      // <Дата> - период движений - дата документа
	+ "Организация," // <СправочникСсылка.Организации>
	+ "Содержание";  // <Строка,150>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

#КонецОбласти

#Область СписаниеМБПВЭксплуатации

Процедура СформироватьДвиженияСписаниеМБПВЭксплуатации(ТаблицаСписанныеМБП, ТаблицаРеквизиты, Движения, Отказ, ДопПроводки = Ложь) Экспорт

	Параметры = ПодготовитьПараметрыСписаниеМБПВЭксплуатации(ТаблицаСписанныеМБП, ТаблицаРеквизиты);

	Если Параметры.Реквизиты.Количество() = 0
		ИЛИ Параметры.ТаблицаСписанныеМБП.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];
	
	СпособОценкиТМЗ = БухгалтерскийУчетСервер.СпособОценкиТМЗ(Реквизиты.Период, Реквизиты.Организация);
	ВедетсяУчетПоПартиям = СпособОценкиТМЗ <> Перечисления.СпособыОценки.ПоСредней;	
	ВидСубконтоПартии = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;
	
	СвойстваСчетаКеш = Новый Соответствие;

	Для Каждого СтрокаПартии Из Параметры.ТаблицаСписанныеМБП Цикл

		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период = СтрокаПартии.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание = Реквизиты.Содержание;

		Проводка.СчетДт	= СтрокаПартии.КорСчетСписания;

		СвойстваСчета = СвойстваСчетаКеш[Проводка.СчетДт];
		Если СвойстваСчета = Неопределено Тогда   // первое использование счета
			СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			СвойстваСчетаКеш.Вставить(Проводка.СчетДт, СвойстваСчета);
		КонецЕсли;
		
		// Цикл субконто по строке партий
		Для НомерСубконто = 1 По 3 Цикл
			КорСубконто = СтрокаПартии["КорСубконто" + НомерСубконто];
			
			// Определение положения субконто по типу
			// За исключением партии при НЕ парионном учете				
			Если СвойстваСчета.ВидСубконто1ТипЗначения <> Неопределено
				И СвойстваСчета.ВидСубконто1ТипЗначения.СодержитТип(ТипЗнч(КорСубконто)) Тогда 
				Если НЕ ВедетсяУчетПоПартиям И СвойстваСчета.ВидСубконто1 = ВидСубконтоПартии Тогда 
					Продолжить;
				КонецЕсли;	
				БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СвойстваСчета.ВидСубконто1, КорСубконто);
			ИначеЕсли СвойстваСчета.ВидСубконто2ТипЗначения <> Неопределено
				И СвойстваСчета.ВидСубконто2ТипЗначения.СодержитТип(ТипЗнч(КорСубконто)) Тогда 
				Если НЕ ВедетсяУчетПоПартиям И СвойстваСчета.ВидСубконто1 = ВидСубконтоПартии Тогда 
					Продолжить;
				КонецЕсли;	
				БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СвойстваСчета.ВидСубконто2, КорСубконто);
			ИначеЕсли СвойстваСчета.ВидСубконто3ТипЗначения <> Неопределено
				И СвойстваСчета.ВидСубконто3ТипЗначения.СодержитТип(ТипЗнч(КорСубконто)) Тогда 
				Если НЕ ВедетсяУчетПоПартиям И СвойстваСчета.ВидСубконто1 = ВидСубконтоПартии Тогда 
					Продолжить;
				КонецЕсли;	
				БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СвойстваСчета.ВидСубконто3, КорСубконто);
			КонецЕсли;
		КонецЦикла;
		
		// Если корсубконто для списания явно не указано, подставляем совпадающие по типу значения
		// из других полей таблицы.
		
		// Цикл по видам субконто на счете Дт.
		Для НомерСубконто = 1 По 3 Цикл
			
			ВидСубконто = СвойстваСчета["ВидСубконто" + НомерСубконто];
			
			Если ЗначениеЗаполнено(ВидСубконто) Тогда
				
				КорСубконто = Проводка.СубконтоДт[ВидСубконто];
				Если ЗначениеЗаполнено(КорСубконто) Тогда
					Продолжить;
				КонецЕсли;
			
				ТипЗначенияВидаСубконто = СвойстваСчета["ВидСубконто" + НомерСубконто + "ТипЗначения"];
				
				Если ТипЗначенияВидаСубконто.СодержитТип(Тип("СправочникСсылка.Номенклатура")) Тогда
					КорСубконто = СтрокаПартии.Номенклатура;
				
				ИначеЕсли ТипЗначенияВидаСубконто.СодержитТип(Тип("СправочникСсылка.Организации")) Тогда
					КорСубконто = Реквизиты.Организация;
				
				ИначеЕсли ТипЗначенияВидаСубконто.СодержитТип(Тип("СправочникСсылка.Склады")) Тогда
					Если ЗначениеЗаполнено(СтрокаПартии.Склад) Тогда
						КорСубконто = СтрокаПартии.Склад;
					КонецЕсли;
					
				КонецЕсли;
				
				БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
					ВидСубконто, КорСубконто);
					
			КонецЕсли;
			
		КонецЦикла;
		
		Если ВедетсяУчетПоПартиям ИЛИ СвойстваСчета.Забалансовый Тогда
			БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
				"Партии", СтрокаПартии.Партия);
		КонецЕсли;

		Если СвойстваСчета.Количественный Тогда
			Проводка.КоличествоДт = СтрокаПартии.Количество;
		КонецЕсли;

		Проводка.СчетКт = СтрокаПартии.СчетУчета;

		СвойстваСчета = СвойстваСчетаКеш[Проводка.СчетКт];
		Если СвойстваСчета = Неопределено Тогда   // первое использование счета
			СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			СвойстваСчетаКеш.Вставить(Проводка.СчетКт, СвойстваСчета);
		КонецЕсли;
		
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаПартии.Номенклатура);
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Местонахождение", СтрокаПартии.Склад);
		Если ВедетсяУчетПоПартиям ИЛИ СвойстваСчета.Забалансовый Тогда
			БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии", СтрокаПартии.Партия);
		КонецЕсли;
		
		Если СвойстваСчета.Количественный Тогда
			Проводка.КоличествоКт = СтрокаПартии.Количество;
		КонецЕсли;
		
		Проводка.Сумма = СтрокаПартии.СуммаСписания;
	КонецЦикла;

	Если ДопПроводки Тогда
		
		ТаблицаДопПроводкиМБП = ТаблицаСписанныеМБП.Скопировать();
		ТаблицаДопПроводкиМБП.Свернуть("Период, СчетЗатрат, Номенклатура, Субконто1, Субконто2, Субконто3", "Количество, СуммаСписания");	
		
		Для Каждого СтрокаДопПроводки Из ТаблицаДопПроводкиМБП Цикл
			
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период = СтрокаДопПроводки.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание = НСтр("ru = 'Списание начисленного износа МБП'");	
			
			Проводка.СчетДт	= СтрокаДопПроводки.СчетЗатрат;

			СвойстваСчета = СвойстваСчетаКеш[Проводка.СчетДт];
			Если СвойстваСчета = Неопределено Тогда   // первое использование счета
				СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
				СвойстваСчетаКеш.Вставить(Проводка.СчетДт, СвойстваСчета);
			КонецЕсли;
			
			// Цикл по видам субконто на счете Дт.
			Для НомерСубконто = 1 По 3 Цикл
				
				ВидСубконто = СвойстваСчета["ВидСубконто" + НомерСубконто];
				
				Если ЗначениеЗаполнено(ВидСубконто) Тогда					
					КорСубконто = СтрокаДопПроводки["Субконто" + НомерСубконто];
					
					БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
						ВидСубконто, КорСубконто);						
				КонецЕсли;				
			КонецЦикла;

			Если СвойстваСчета.Количественный Тогда
				Проводка.КоличествоДт = СтрокаДопПроводки.Количество;
			КонецЕсли;

			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НачисленныйИзносМБП;

			СвойстваСчета = СвойстваСчетаКеш[Проводка.СчетКт];
			Если СвойстваСчета = Неопределено Тогда   // первое использование счета
				СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
				СвойстваСчетаКеш.Вставить(Проводка.СчетКт, СвойстваСчета);
			КонецЕсли;
				
			ВидСубконто = СвойстваСчета.ВидСубконто1;
				
			Если ЗначениеЗаполнено(ВидСубконто) Тогда					
				КорСубконто = СтрокаДопПроводки.Номенклатура;
				
				БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
					ВидСубконто, КорСубконто);						
			КонецЕсли;
						
			Если СвойстваСчета.Количественный Тогда
				Проводка.КоличествоКт = СтрокаДопПроводки.Количество;
			КонецЕсли;
			
			Проводка.Сумма = СтрокаДопПроводки.СуммаСписания;			
		КонецЦикла;
		
	КонецЕсли;
	
	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыСписаниеМБПВЭксплуатации(ТаблицаСписанныеМБП, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаСписанныеМБП

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"        	// <Строка,0> - имя списка в документе
	+ "СинонимСписка,"    	// <Строка,0> - синоним списка
	+ "Период,"           	// <Дата> - дата списания
	+ "НомерСтроки,"      	// <Число> - номер строки в списке
	+ "СчетУчета,"        	// <ПланСчетовСсылка.Хозрасчетный> - счет учета, с которого списывается номенклатура
	+ "Номенклатура,"     	// <СправочникСсылка.Номенклатура> - списываемая номенклатура
	+ "Склад,"            	// <СправочникСсылка.ФизическиеЛица> - МОЛ, с которого списывается номенклатура
	+ "Партия,"           	// <ДокументСсылка.*> - документ поступления номенклатуры (партия)
	+ "Себестоимость,"    	// <Число,15,2> - сумма списываемой номенклатуры, указанная в документе списания
	+ "Количество,"       	// <Число,15,3> - количество списываемой номенклатуры
	+ "КорСчетСписания,"  	// <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который списывается номенклатура
	+ "КорСубконто1,"     	// - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто2,"     	// - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто3,"     	// - значение субконто счета, на который списывается номенклатура
	+ "СуммаСписания";		// <Число,15,2> - сумма временных разниц (ПБУ 18/02) в стоимости списываемой номенклатуры, определенной по данным остатков
	
	Параметры.Вставить("ТаблицаСписанныеМБП",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСписанныеМБП, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор," // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"      // <Дата> - период движений - дата документа
	+ "Организация," // <СправочникСсылка.Организации>
	+ "Содержание";  // <Строка,150>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

#КонецОбласти

#Область ПеремещениеМБП

Процедура СформироватьДвиженияПеремещениеМБП(ТаблицаСписанныеМБП, ТаблицаРеквизиты, Движения, Отказ, ДопПроводки = Ложь) Экспорт

	Параметры = ПодготовитьПараметрыПеремещениеМБП(ТаблицаСписанныеМБП, ТаблицаРеквизиты);
	Если Параметры.Реквизиты.Количество() = 0
		ИЛИ Параметры.ТаблицаСписанныеМБП.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	СпособОценкиТМЗ = БухгалтерскийУчетСервер.СпособОценкиТМЗ(Реквизиты.Период, Реквизиты.Организация);
	ВедетсяУчетПоПартиям = СпособОценкиТМЗ <> Перечисления.СпособыОценки.ПоСредней;
	ВидСубконтоПартии = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;

	// Переопределение содержания
	НазваниеОбъектаВСодержании = СтрНайти(Реквизиты.Содержание, НСтр("ru = ' товаров'"));
	Если НазваниеОбъектаВСодержании Тогда
		Реквизиты.Содержание = СтрЗаменить(Реквизиты.Содержание, НСтр("ru = ' товаров'"), " МБП");
	КонецЕсли;

	СвойстваСчетаКеш = Новый Соответствие;

	Для Каждого СтрокаПартии Из Параметры.ТаблицаСписанныеМБП Цикл

		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СокрЛП(Реквизиты.Содержание);

		Проводка.СчетДт	= СтрокаПартии.КорСчетСписания;
		СвойстваСчета = СвойстваСчетаКеш[Проводка.СчетДт];
		Если СвойстваСчета = Неопределено Тогда   // первое использование счета
			СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			СвойстваСчетаКеш.Вставить(Проводка.СчетДт, СвойстваСчета);
		КонецЕсли;
		
		БухгалтерскийУчетСервер.УстановитьСубконтоПоКешуСвойствСчета(
			Проводка.СчетДт, 
			Проводка.СубконтоДт, 
			СвойстваСчетаКеш, 
			СтрокаПартии.КорСубконто1,
			СтрокаПартии.КорСубконто2,
			СтрокаПартии.КорСубконто3);
		
		Если ВедетсяУчетПоПартиям 
			Или СвойстваСчета.Забалансовый Тогда
			БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", СтрокаПартии.Партия);
		КонецЕсли;

		Если СвойстваСчета.Количественный Тогда
			Проводка.КоличествоДт = СтрокаПартии.Количество;
		КонецЕсли;

		Проводка.СчетКт = СтрокаПартии.СчетУчета;
		СвойстваСчета = СвойстваСчетаКеш[Проводка.СчетКт];
		Если СвойстваСчета = Неопределено Тогда   // первое использование счета
			СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			СвойстваСчетаКеш.Вставить(Проводка.СчетКт, СвойстваСчета);
		КонецЕсли;
		
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаПартии.Номенклатура);
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Местонахождение", Реквизиты.Склад);
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии", СтрокаПартии.Партия);

		Если СвойстваСчета.Количественный Тогда
			Проводка.КоличествоКт = СтрокаПартии.Количество;
		КонецЕсли;

		Проводка.Сумма = СтрокаПартии.СуммаСписания;

		// Очистка сумм в проводке при перемещении между складами,
		// если не ведется суммовой учет по складам
		Если Проводка.СчетДт = Проводка.СчетКт Тогда

			Если БухгалтерскийУчетСервер.ВедетсяУчетПоМестонахождениям(Проводка.СчетДт)
				И НЕ БухгалтерскийУчетСервер.ВедетсяСуммовойУчетПоМестонахождениям(Проводка.СчетДт)  Тогда

				ОчиститьСумму = Истина;

				// Проверка, что дебетовая и кредитовая часть проводки отличаются не только складом.
				// В этом случае очистка суммы не производится.
				Для Индекс = 1 По СвойстваСчета.КоличествоСубконто Цикл
					ВидСубконто = СвойстваСчета["ВидСубконто" + Индекс];
					Если ВидСубконто <> ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Местонахождение
						И Проводка.СубконтоДт[ВидСубконто] <> Проводка.СубконтоКт[ВидСубконто] Тогда
						ОчиститьСумму = Ложь;
					КонецЕсли;
				КонецЦикла;

				Если ОчиститьСумму Тогда
					Проводка.Сумма = 0;
				КонецЕсли;

			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если ДопПроводки Тогда
		
		ТаблицаДопПроводкиМБП = ТаблицаСписанныеМБП.Скопировать();
		ТаблицаДопПроводкиМБП.Свернуть("Период, СчетЗатрат, Номенклатура, Субконто1, Субконто2, Субконто3", "Количество, СуммаСписания");	
		
		Для Каждого СтрокаДопПроводки Из ТаблицаДопПроводкиМБП Цикл
			
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период = СтрокаДопПроводки.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание = Реквизиты.Содержание;	
			
			Проводка.СчетДт	= СтрокаДопПроводки.СчетЗатрат;

			СвойстваСчета = СвойстваСчетаКеш[Проводка.СчетДт];
			Если СвойстваСчета = Неопределено Тогда   // первое использование счета
				СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
				СвойстваСчетаКеш.Вставить(Проводка.СчетДт, СвойстваСчета);
			КонецЕсли;
			
			// Цикл по видам субконто на счете Дт.
			Для НомерСубконто = 1 По 3 Цикл
				
				ВидСубконто = СвойстваСчета["ВидСубконто" + НомерСубконто];
				
				Если ЗначениеЗаполнено(ВидСубконто) Тогда					
					КорСубконто = СтрокаДопПроводки["Субконто" + НомерСубконто];
					
					БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
						ВидСубконто, КорСубконто);						
				КонецЕсли;				
			КонецЦикла;

			Если СвойстваСчета.Количественный Тогда
				Проводка.КоличествоДт = СтрокаДопПроводки.Количество;
			КонецЕсли;

			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НачисленныйИзносМБП;

			СвойстваСчета = СвойстваСчетаКеш[Проводка.СчетКт];
			Если СвойстваСчета = Неопределено Тогда   // первое использование счета
				СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
				СвойстваСчетаКеш.Вставить(Проводка.СчетКт, СвойстваСчета);
			КонецЕсли;
				
			ВидСубконто = СвойстваСчета.ВидСубконто1;
				
			Если ЗначениеЗаполнено(ВидСубконто) Тогда					
				КорСубконто = СтрокаДопПроводки.Номенклатура;
				
				БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
					ВидСубконто, КорСубконто);						
			КонецЕсли;
						
			Если СвойстваСчета.Количественный Тогда
				Проводка.КоличествоКт = СтрокаДопПроводки.Количество;
			КонецЕсли;
			
			Проводка.Сумма = СтрокаДопПроводки.СуммаСписания;			
		КонецЦикла;
		
	КонецЕсли;
	
	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыПеремещениеМБП(ТаблицаСписанныеМБП, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаСписанныеМБП

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"        	// <Строка,0> - имя списка в документе
	+ "СинонимСписка,"    	// <Строка,0> - синоним списка
	+ "НомерСтроки,"      	// <Число> - номер строки в списке
	+ "СчетУчета,"        	// <ПланСчетовСсылка.Хозрасчетный> - счет учета, с которого списывается номенклатура
	+ "Номенклатура,"     	// <СправочникСсылка.Номенклатура> - списываемая номенклатура
	+ "Партия,"           	// <ДокументСсылка.*> - документ поступления номенклатуры (партия)
	+ "Себестоимость,"    	// <Число,15,2> - сумма списываемой номенклатуры, указанная в документе списания
	+ "Количество,"       	// <Число,15,3> - количество списываемой номенклатуры
	+ "КорСчетСписания,"  	// <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который списывается номенклатура
	+ "КорСубконто1,"     	// - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто2,"     	// - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто3,"     	// - значение субконто счета, на который списывается номенклатура
	+ "СуммаСписания";  	// <Число,15,2> - сумма временных разниц (ПБУ 18/02) в стоимости списываемой номенклатуры, определенной по данным остатков

	Параметры.Вставить("ТаблицаСписанныеМБП",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСписанныеМБП, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      		// <Дата> - период движений - дата документа
	+ "Организация," 		// <СправочникСсылка.Организации>
	+ "Склад,"   			// <СправочникСсылка.Склад> - склад, с которого списывается номенклатура
	//+ "СкладПолучатель,"    // <СправочникСсылка.Склад> - склад, с на который оприходуется номенклатура
	+ "Содержание";  		// <Строка,150>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

#КонецОбласти

#Область ВозвратМБППоставщику

Процедура СформироватьДвиженияВозвратМБПоставщику(ТаблицаМБП, ТаблицаСписанныеМБП, ТаблицаРеквизиты, Движения, Отказ, ПрямыеПроводки) Экспорт
	
	Параметры = ПодготовитьПараметрыВозвратМБППоставщику(ТаблицаМБП, ТаблицаСписанныеМБП, ТаблицаРеквизиты);
	
	Если Параметры.Реквизиты.Количество() = 0
		ИЛИ Параметры.ТаблицаСписанныеМБП.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	СпособОценкиТМЗ = БухгалтерскийУчетСервер.СпособОценкиТМЗ(Реквизиты.Период, Реквизиты.Организация);
	
	СвойстваСчетаКеш = Новый Соответствие;
	
	Для Каждого СтрокаПартии Из Параметры.ТаблицаСписанныеМБП Цикл
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ИмяСписка", СтрокаПартии.ИмяСписка);
		СтруктураОтбора.Вставить("НомерСтроки", СтрокаПартии.НомерСтроки);
		СтрокаТаблицыМБП = Параметры.ТаблицаМБП.НайтиСтроки(СтруктураОтбора)[0];
		СодержаниеПроводки  = ?(ПустаяСтрока(СтрокаПартии.Содержание), Реквизиты.Содержание, СтрокаПартии.Содержание);
		
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СодержаниеПроводки;
		 
		Если ПрямыеПроводки Тогда
			Проводка.СчетДт	= СтрокаПартии.КорСчетСписания;
			СвойстваСчета = СвойстваСчетаКеш[Проводка.СчетДт];
			Если СвойстваСчета = Неопределено Тогда   // первое использование счета
				СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
				СвойстваСчетаКеш.Вставить(Проводка.СчетДт, СвойстваСчета);
			КонецЕсли;
			
			БухгалтерскийУчетСервер.УстановитьСубконтоПоКешуСвойствСчета(
				Проводка.СчетДт, 
				Проводка.СубконтоДт, 
				СвойстваСчетаКеш, 
				СтрокаПартии.КорСубконто1,
				СтрокаПартии.КорСубконто2,
				СтрокаПартии.КорСубконто3);
			
			Если СвойстваСчета.Валютный Тогда
				Проводка.ВалютаДт = Реквизиты.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт = ?(СтрокаТаблицыМБП.Количество = 0, СтрокаПартии.СуммаСписания,
					СтрокаПартии.СуммаСписания * СтрокаТаблицыМБП.СуммаВзаиморасчетов / СтрокаТаблицыМБП.Сумма);
			КонецЕсли;
				
			Проводка.СчетКт = СтрокаПартии.СчетУчета;
			СвойстваСчета = СвойстваСчетаКеш[Проводка.СчетКт];
			Если СвойстваСчета = Неопределено Тогда   // первое использование счета
				СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
				СвойстваСчетаКеш.Вставить(Проводка.СчетКт, СвойстваСчета);
			КонецЕсли;
			
			БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаПартии.Номенклатура);
			БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Местонахождение", СтрокаПартии.Склад);
			БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии", СтрокаПартии.Партия);
			
			Если СвойстваСчета.Количественный Тогда
				Проводка.КоличествоКт = СтрокаПартии.Количество;
			КонецЕсли;
			
		Иначе
			Проводка.СчетДт	= СтрокаПартии.СчетУчета;
			СвойстваСчета = СвойстваСчетаКеш[Проводка.СчетДт];
			Если СвойстваСчета = Неопределено Тогда   // первое использование счета
				СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
				СвойстваСчетаКеш.Вставить(Проводка.СчетДт, СвойстваСчета);
			КонецЕсли;
			
			БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаПартии.Номенклатура);
			БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Местонахождение", СтрокаПартии.Склад);
			БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", СтрокаПартии.Партия);
			
			Если СвойстваСчета.Количественный Тогда
				Проводка.КоличествоДт = СтрокаПартии.Количество;
			КонецЕсли;
			
			Проводка.СчетКт = СтрокаПартии.КорСчетСписания;
			СвойстваСчета = СвойстваСчетаКеш[Проводка.СчетКт];
			Если СвойстваСчета = Неопределено Тогда   // первое использование счета
				СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
				СвойстваСчетаКеш.Вставить(Проводка.СчетКт, СвойстваСчета);
			КонецЕсли;
			
			БухгалтерскийУчетСервер.УстановитьСубконтоПоКешуСвойствСчета(
				Проводка.СчетКт, 
				Проводка.СубконтоКт, 
				СвойстваСчетаКеш, 
				СтрокаПартии.КорСубконто1,
				СтрокаПартии.КорСубконто2,
				СтрокаПартии.КорСубконто3);
			
			Если СвойстваСчета.Валютный Тогда
				Проводка.ВалютаКт = Реквизиты.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = ?(СтрокаТаблицыМБП.Количество = 0, СтрокаПартии.СуммаСписания,
					СтрокаПартии.СуммаСписания * СтрокаТаблицыМБП.СуммаВзаиморасчетов / СтрокаТаблицыМБП.Сумма);
			КонецЕсли;
		КонецЕсли;
		
		Проводка.Сумма = СтрокаПартии.СуммаСписания;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыВозвратМБППоставщику(ТаблицаМБП, ТаблицаСписанныеМБП, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТовары

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"           			// <Строка,0> - имя списка в документе
	+ "НомерСтроки,"         			// <Число> - номер строки в списке
	+ "Количество,"         		 	// <Число,15,3> - количество списываемой номенклатуры
	+ "Сумма,"            				// <Число,15,2> - сумма списываемой номенклатуры
	+ "СуммаВзаиморасчетов," 			// <Число,15,2> - сумма списываемой номенклатуры в валюте расчетов с контрагентом (при расчетах в валюте)
	+ "СебестоимостьУказанаВДокументе"; // <Булево> - Истина, если сумма себестоимости указана в строке табличной части документа

	Параметры.Вставить("ТаблицаМБП",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаМБП, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.ТаблицаСписанныеТовары

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"        // <Строка,0> - имя списка в документе
	+ "СинонимСписка,"    // <Строка,0> - синоним списка
	+ "НомерСтроки,"      // <Число> - номер строки в списке
	+ "СчетУчета,"        // <ПланСчетовСсылка.Хозрасчетный> - счет учета, с которого списывается номенклатура
	+ "Номенклатура,"     // <СправочникСсылка.Номенклатура> - списываемая номенклатура
	+ "Склад,"            // <СправочникСсылка.Склад> - склад, с которого списывается номенклатура
	+ "Партия,"           // <ДокументСсылка.*> - документ поступления номенклатуры (партия)
	+ "Себестоимость,"    // <Число,15,2> - сумма списываемой номенклатуры, указанная в документе списания
	+ "Количество,"       // <Число,15,3> - количество списываемой номенклатуры
	+ "КорСчетСписания,"  // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который списывается номенклатура
	+ "КорСубконто1,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто2,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто3,"     // - значение субконто счета, на который списывается номенклатура
	+ "СуммаСписания,"    // <Число,15,2> - сумма временных разниц (ПБУ 18/02) в стоимости списываемой номенклатуры, определенной по данным остатков
	+ "Содержание";       // <Строка,0>   - содержание проводки

	Параметры.Вставить("ТаблицаСписанныеМБП",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСписанныеМБП, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"               // <Дата> - период движений - дата документа
	+ "Организация,"          // <СправочникСсылка.Организации>
	+ "Содержание,"           // <Строка,150>
	+ "ВалютаВзаиморасчетов"; // <СправочникСсылка.Валюты> - валюта расчетов с контрагентом (при расчетах в валюте)

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

#КонецОбласти

#Область ВозвратМБПОтПокупателя

Функция ПодготовитьТаблицуВозвращенныеСписанныеМБП(ТаблицаМБП, ТаблицаСчетаУчетаМБП, ТаблицаСписокНоменклатуры, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыТаблицыВозвращенныеСписанныеМБП(ТаблицаМБП, ТаблицаСчетаУчетаМБП, ТаблицаСписокНоменклатуры, ТаблицаРеквизиты);
	Если Параметры.Реквизиты.Количество() = 0
		ИЛИ Параметры.ТаблицаМБП.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	ТаблицаРезультата = ПолучитьПустуюТаблицуСписанныеМБП(Ложь, Ложь);
	
	Если НЕ Реквизиты.УказанДокументОтгрузки Тогда
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаМБП, ТаблицаРезультата);
		Возврат ТаблицаРезультата;
	КонецЕсли;
	
	ДатаДокументаРеализации = Реквизиты.ДатаДокументаРеализации;
	ВозвратПрошлогоМесяца = НачалоМесяца(Реквизиты.Период) <> НачалоМесяца(ДатаДокументаРеализации);
	
	СтруктураСчетовДляЗапроса = РазделитьСчетаУчетаПоПартионномуУчету(Параметры.СчетаУчетаМБП);
	
	ЕстьСчетаПартионные   = СтруктураСчетовДляЗапроса.СчетаПартионные.Количество() <> 0;
	ЕстьСчетаНеПартионные = СтруктураСчетовДляЗапроса.СчетаНеПартионные.Количество() <> 0;

	Если НЕ ЕстьСчетаПартионные И НЕ ЕстьСчетаНеПартионные Тогда
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаМБП, ТаблицаРезультата);
		Возврат ТаблицаРезультата;
	КонецЕсли;

	ВедетсяСуммовойУчетПоСкладам = БухгалтерскийУчетСервер.ВедетсяСуммовойУчетПоСкладам(ПланыСчетов.Хозрасчетный.МБП);
	
	МетаданныеСделки = Реквизиты.Сделка.Метаданные();
	ЕстьСкладОтгрузки = ОбщегоНазначения.ЕстьРеквизитОбъекта("Склад", МетаданныеСделки);
	
	РеквизитыСделки = Новый Структура();
	Если ЕстьСкладОтгрузки Тогда
		РеквизитыСделки.Вставить("Склад");
	КонецЕсли;

	Если РеквизитыСделки.Количество() > 0 Тогда
		РеквизитыСделки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Реквизиты.Сделка, РеквизитыСделки);
	КонецЕсли;
	
	Если ЕстьСкладОтгрузки Тогда
		СкладОтгрузки = РеквизитыСделки.Склад;
	КонецЕсли;
	
	ИспользоватьОтборПоСкладуОтгрузки = ВедетсяСуммовойУчетПоСкладам И ЕстьСкладОтгрузки;
	
	Если ВозвратПрошлогоМесяца Тогда
		ТекстЗапроса = ТекстЗапросаВозвращенныеСписанныеМБППрошлогоМесяца(
			ЕстьСчетаНеПартионные,
			ЕстьСчетаПартионные,
			ИспользоватьОтборПоСкладуОтгрузки);
	Иначе
		ТекстЗапроса = ТекстЗапросаВозвращенныеСписанныеМБПТекущегоМесяца(ЕстьСчетаНеПартионные, ЕстьСчетаПартионные);
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + 
	"ВЫБРАТЬ
	|	ВременнаяТаблицаСписанныеМБП.Номенклатура,
	|	ВременнаяТаблицаСписанныеМБП.Партия,
	|	ВременнаяТаблицаСписанныеМБП.СчетУчета,
	|	ЕСТЬNULL(РеквизитыДокументаПартии.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПартии,
	|	СУММА(ВременнаяТаблицаСписанныеМБП.Сумма) КАК Сумма,
	|	СУММА(ВременнаяТаблицаСписанныеМБП.Количество) КАК Количество,
	|	СУММА(ВременнаяТаблицаСписанныеМБП.КоличествоОтгружено) КАК КоличествоОтгружено,
	|	СУММА(ВременнаяТаблицаСписанныеМБП.КоличествоВозвращеноРанее) КАК КоличествоВозвращеноРанее,
	|	СУММА(ВременнаяТаблицаСписанныеМБП.СуммаВозвращеноРанее) КАК СуммаВозвращеноРанее
	|ИЗ
	|	ВременнаяТаблицаСписанныеМБП КАК ВременнаяТаблицаСписанныеМБП
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументаПартии
	|		ПО (РеквизитыДокументаПартии.Организация = &Организация)
	|			И ВременнаяТаблицаСписанныеМБП.Партия = РеквизитыДокументаПартии.Документ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаСписанныеМБП.Номенклатура,
	|	ВременнаяТаблицаСписанныеМБП.СчетУчета,
	|	ВременнаяТаблицаСписанныеМБП.Партия,
	|	ЕСТЬNULL(РеквизитыДокументаПартии.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1))
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВременнаяТаблицаСписанныеМБП.Количество) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВременнаяТаблицаСписанныеМБП.Номенклатура,
	|	ДатаПартии УБЫВ";

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Организация",        Реквизиты.Организация);
	Запрос.УстановитьПараметр("Регистратор",        Реквизиты.Сделка);
	Запрос.УстановитьПараметр("СчетКтПартионный",   СтруктураСчетовДляЗапроса.СчетаПартионные);
	Запрос.УстановитьПараметр("СчетКтНеПартионный", СтруктураСчетовДляЗапроса.СчетаНеПартионные);
	Запрос.УстановитьПараметр("НачТекущегоМесяца",  НачалоМесяца(Реквизиты.Период));
	Запрос.УстановитьПараметр("КонДата",            Реквизиты.Период);
	Запрос.УстановитьПараметр("НачМесяцаРеализации",НачалоМесяца(ДатаДокументаРеализации));	
	Запрос.УстановитьПараметр("КонМесяцаРеализации",КонецМесяца(ДатаДокументаРеализации));
	Запрос.УстановитьПараметр("Номенклатура",		Параметры.СписокНоменклатуры.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("СкладОтгрузки",      СкладОтгрузки);
	//Запрос.УстановитьПараметр("ПодразделениеОтгрузки",ПодразделениеОтгрузки);

	// Виды субконто при отсутствии партионного учета.
	ВидыСубконтоБезПартий = Новый Массив;
	ВидыСубконтоБезПартий.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	Если ИспользоватьОтборПоСкладуОтгрузки Тогда
		ВидыСубконтоБезПартий.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Местонахождение);
	КонецЕсли;
	Запрос.УстановитьПараметр("ВидыСубконтоБезПартий", ВидыСубконтоБезПартий);

	// Виды субконто при количественном учете по складам.
	ВидыСубконтоБезПартийСклады = Новый Массив;
	ВидыСубконтоБезПартийСклады.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоБезПартийСклады.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Местонахождение);
	Запрос.УстановитьПараметр("ВидыСубконтоБезПартийСклады", ВидыСубконтоБезПартий);

	// Виды субконто с учетом партий.
	ВидыСубконтоПартий = Новый Массив;
	ВидыСубконтоПартий.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоПартий.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	Если ИспользоватьОтборПоСкладуОтгрузки Тогда
		ВидыСубконтоПартий.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Местонахождение);
	КонецЕсли;
	Запрос.УстановитьПараметр("ВидыСубконтоПартий", ВидыСубконтоПартий);

	// Всегда 3 вида субконто.
	ВидыСубконтоПартийСклады = Новый Массив;
	ВидыСубконтоПартийСклады.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоПартийСклады.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	ВидыСубконтоПартийСклады.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Местонахождение);
	Запрос.УстановитьПараметр("ВидыСубконтоПартийСклады", ВидыСубконтоПартийСклады);
	
	Запрос.УстановитьПараметр("ЭтотВозврат", Реквизиты.Регистратор);

	ТаблицаОтгрузок = Запрос.Выполнить().Выгрузить();

	Для каждого СтрокаВозврата Из Параметры.ТаблицаМБП Цикл

		КоличествоНеПодобраноПартии = СтрокаВозврата.Количество;

		ОтгруженныеПартии = ТаблицаОтгрузок.НайтиСтроки(Новый Структура("Номенклатура, СчетУчета", СтрокаВозврата.Номенклатура, СтрокаВозврата.СчетУчета));
		Для каждого СтрокаОтгрузки Из ОтгруженныеПартии Цикл
			
			КоличествоВозвращено = Мин(КоличествоНеПодобраноПартии, СтрокаОтгрузки.КоличествоОтгружено);
			Если КоличествоВозвращено = 0 Тогда 
				Продолжить;
			КонецЕсли;	

			НоваяСтрока = ТаблицаРезультата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВозврата);
			НоваяСтрока.Партия = СтрокаОтгрузки.Партия;
			
			Если СтрокаОтгрузки.Количество = СтрокаОтгрузки.КоличествоВозвращеноРанее + КоличествоВозвращено Тогда
				// Текущий возврат в совокупности с предыдущими привел к полному возврату всей партии.
				НоваяСтрока.Количество         = КоличествоВозвращено;
				НоваяСтрока.СуммаСписания      = СтрокаОтгрузки.Сумма - СтрокаОтгрузки.СуммаВозвращеноРанее;
				
			ИначеЕсли КоличествоВозвращено > СтрокаОтгрузки.Количество Тогда
				// Текущий возврат больше, чем очередная партия, т.е. фактически возвращают несколько разных партий.
				НоваяСтрока.Количество         = СтрокаОтгрузки.Количество;
				НоваяСтрока.СуммаСписания      = СтрокаОтгрузки.Сумма;
			Иначе
				// Частичный возврат партии.
				НоваяСтрока.Количество         = КоличествоВозвращено;
				Коэфф                          = КоличествоВозвращено / СтрокаОтгрузки.Количество;
				НоваяСтрока.СуммаСписания      = Окр(СтрокаОтгрузки.Сумма   * Коэфф, 2);
			КонецЕсли;
			
			Если ВозвратПрошлогоМесяца Тогда
				НоваяСтрока.Себестоимость = НоваяСтрока.СуммаСписания;
			КонецЕсли;

			КоличествоНеПодобраноПартии = КоличествоНеПодобраноПартии - НоваяСтрока.Количество;
			
			СтрокаОтгрузки.Количество 			= СтрокаОтгрузки.Количество - НоваяСтрока.Количество;
			СтрокаОтгрузки.КоличествоОтгружено 	= СтрокаОтгрузки.КоличествоОтгружено - НоваяСтрока.Количество;
			СтрокаОтгрузки.Сумма 				= СтрокаОтгрузки.Сумма - НоваяСтрока.СуммаСписания;

			Если КоличествоНеПодобраноПартии = 0 Тогда
				Прервать;
			КонецЕсли;

		КонецЦикла;

		// Если в документе указан документ реализации по которому было отгружено больше,
		// чем возвращается, то эту разницу отнесем на пустую партию.
		Если КоличествоНеПодобраноПартии > 0 Тогда
			ТекстСообщения = НСтр("ru = 'Документом ""%1"" было реализовано ""%2"" на ""%3"" ед. меньше, чем возвращается.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения,
				СокрЛП(Реквизиты.Сделка),
				СтрокаВозврата.Номенклатура,
				КоличествоНеПодобраноПартии);
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения,
				Реквизиты.Регистратор,
				СтрокаВозврата.ИмяСписка+"[" + Формат(СтрокаВозврата.НомерСтроки - 1, "ЧН=0; ЧГ=")+"].Количество",
				"Объект",
				Отказ);
		КонецЕсли;

	КонецЦикла;

	Возврат ТаблицаРезультата;

КонецФункции

Функция ТекстЗапросаВозвращенныеСписанныеМБПДокументыОтгрузки()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Регистратор КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ДокументыОтгрузки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателя.Ссылка
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.Дата <= &КонДата
	|	И ВозвратТоваровОтПокупателя.Проведен
	|	И ВозвратТоваровОтПокупателя.ДокументОснование = &Регистратор
	|	И ВозвратТоваровОтПокупателя.Ссылка <> &ЭтотВозврат";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();

КонецФункции

Функция ТекстЗапросаВозвращенныеСписанныеМБППартии()

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХозрасчетныйСубконто.Значение КАК Партия
	|ПОМЕСТИТЬ ВременнаяТаблицаПартии
	|ИЗ
	|	ВТ_ДокументыОтгрузки КАК ВТ_ДокументыОтгрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	|		ПО ВТ_ДокументыОтгрузки.Ссылка = ХозрасчетныйСубконто.Регистратор
	|ГДЕ
	|	ХозрасчетныйСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит)
	|	И ХозрасчетныйСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партия";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();

КонецФункции

Функция ТекстЗапросаВозвращенныеСписанныеМБППрошлогоМесяца(
	ЕстьСчетаНеПартионные, ЕстьСчетаПартионные, ИспользоватьОтборПоСкладуОтгрузки)

	ТекстЗапроса = ТекстЗапросаВозвращенныеСписанныеМБПДокументыОтгрузки();

	Если ЕстьСчетаПартионные Тогда
		// Определим, какие партии списали документы отгрузки и будет возвращать только их.
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаВозвращенныеСписанныеМБППартии();
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Субконто1 КАК Номенклатура,
		|	ХозрасчетныйОбороты.Субконто2 КАК Партия,
		|	ХозрасчетныйОбороты.Счет КАК СчетУчета,
		|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК Сумма,
		|	СУММА(ХозрасчетныйОбороты.КоличествоОборотКт) КАК Количество,
		|	0 КАК КоличествоОтгружено,
		|	0 КАК КоличествоВозвращеноРанее,
		|	0 КАК СуммаВозвращеноРанее
		|ПОМЕСТИТЬ ВременнаяТаблицаСписанныеМБП
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&НачМесяцаРеализации,
		|			&КонМесяцаРеализации,
		|			Регистратор,
		|			Счет В (&СчетКтПартионный),
		|			&ВидыСубконтоПартий,
		|			Организация = &Организация
		|				И Субконто1 В (&Номенклатура)
		|				И Субконто2 В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаПартии.Партия
		|					ИЗ
		|						ВременнаяТаблицаПартии)
		|				И &УсловиеПоСкладуСубконто3,
		|			,
		|			) КАК ХозрасчетныйОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
		|		ПО ХозрасчетныйОбороты.Регистратор = ВозвратТоваровОтПокупателя.Ссылка
		|ГДЕ
		|	(ВозвратТоваровОтПокупателя.ДокументОснование ЕСТЬ NULL
		|			ИЛИ НАЧАЛОПЕРИОДА(ВозвратТоваровОтПокупателя.ДокументОснование.Дата, МЕСЯЦ) = &НачМесяцаРеализации
		|				И &УсловиеПоСкладуВозвратОтПокупателя)
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОбороты.Субконто1,
		|	ХозрасчетныйОбороты.Субконто2,
		|	ХозрасчетныйОбороты.Счет
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Субконто1,
		|	НЕОПРЕДЕЛЕНО,
		|	ХозрасчетныйОбороты.Счет,
		|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт),
		|	СУММА(ХозрасчетныйОбороты.КоличествоОборотКт),
		|	0,
		|	0,
		|	0
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&НачМесяцаРеализации,
		|			&КонМесяцаРеализации,
		|			Регистратор,
		|			Счет В (&СчетКтНеПартионный),
		|			&ВидыСубконтоБезПартий,
		|			Организация = &Организация
		|				И Субконто1 В (&Номенклатура)
		|				И &УсловиеПоСкладуСубконто2,
		|			,
		|			) КАК ХозрасчетныйОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
		|		ПО ХозрасчетныйОбороты.Регистратор = ВозвратТоваровОтПокупателя.Ссылка
		|ГДЕ
		|	(ВозвратТоваровОтПокупателя.ДокументОснование ЕСТЬ NULL
		|			ИЛИ НАЧАЛОПЕРИОДА(ВозвратТоваровОтПокупателя.ДокументОснование.Дата, МЕСЯЦ) = &НачМесяцаРеализации
		|				И &УсловиеПоСкладуВозвратОтПокупателя)
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОбороты.Субконто1,
		|	ХозрасчетныйОбороты.Счет
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОборотыДтКт.СубконтоКт1,
		|	ХозрасчетныйОборотыДтКт.СубконтоКт2,
		|	ХозрасчетныйОборотыДтКт.СчетКт,
		|	0,
		|	-СУММА(ХозрасчетныйОборотыДтКт.КоличествоОборотКт),
		|	0,
		|	0,
		|	0
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		|			&НачМесяцаРеализации,
		|			&КонМесяцаРеализации,
		|			,
		|			СчетДт В (&СчетКтПартионный),
		|			&ВидыСубконтоПартийСклады,
		|			СчетКт В (&СчетКтПартионный),
		|			&ВидыСубконтоПартийСклады,
		|			Организация = &Организация
		|				И СубконтоДт1 В (&Номенклатура)
		|				И СубконтоКт1 В (&Номенклатура)
		|				И СубконтоКт2 В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаПартии.Партия
		|					ИЗ
		|						ВременнаяТаблицаПартии)
		|				И &УсловиеПоСкладуСубконтоКт3) КАК ХозрасчетныйОборотыДтКт
		|ГДЕ
		|	ХозрасчетныйОборотыДтКт.СчетДт = ХозрасчетныйОборотыДтКт.СчетКт
		|	И ХозрасчетныйОборотыДтКт.СубконтоДт1 = ХозрасчетныйОборотыДтКт.СубконтоКт1
		|	И ХозрасчетныйОборотыДтКт.СубконтоДт2 = ХозрасчетныйОборотыДтКт.СубконтоКт2
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОборотыДтКт.СубконтоКт1,
		|	ХозрасчетныйОборотыДтКт.СубконтоКт2,
		|	ХозрасчетныйОборотыДтКт.СчетКт
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОборотыДтКт.СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО,
		|	ХозрасчетныйОборотыДтКт.СчетКт,
		|	0,
		|	-СУММА(ХозрасчетныйОборотыДтКт.КоличествоОборотКт),
		|	0,
		|	0,
		|	0
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		|			&НачМесяцаРеализации,
		|			&КонМесяцаРеализации,
		|			,
		|			СчетДт В (&СчетКтНеПартионный),
		|			&ВидыСубконтоБезПартийСклады,
		|			СчетКт В (&СчетКтНеПартионный),
		|			&ВидыСубконтоБезПартийСклады,
		|			Организация = &Организация
		|				И СубконтоДт1 В (&Номенклатура)
		|				И СубконтоКт1 В (&Номенклатура)
		|				И &УсловиеПоСкладуСубконтоКт2) КАК ХозрасчетныйОборотыДтКт
		|ГДЕ
		|	ХозрасчетныйОборотыДтКт.СчетДт = ХозрасчетныйОборотыДтКт.СчетКт
		|	И ХозрасчетныйОборотыДтКт.СубконтоДт1 = ХозрасчетныйОборотыДтКт.СубконтоКт1
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОборотыДтКт.СубконтоКт1,
		|	ХозрасчетныйОборотыДтКт.СчетКт
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
		|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1
		|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
		|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2
		|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
		|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии)
		|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1
		|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии)
		|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2
		|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии)
		|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	ХозрасчетныйДвиженияССубконто.СчетКт,
		|	0,
		|	0,
		|	ХозрасчетныйДвиженияССубконто.КоличествоКт,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйДвиженияССубконто.Период > &КонМесяцаРеализации
		|				И ХозрасчетныйДвиженияССубконто.КоличествоКт < 0
		|			ТОГДА -ХозрасчетныйДвиженияССубконто.КоличествоКт
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйДвиженияССубконто.Период > &КонМесяцаРеализации
		|				И ХозрасчетныйДвиженияССубконто.КоличествоКт < 0
		|			ТОГДА -ХозрасчетныйДвиженияССубконто.Сумма
		|		ИНАЧЕ 0
		|	КОНЕЦ
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
		|			,
		|			&КонДата,
		|			Организация = &Организация
		|				И Регистратор В
		|					(ВЫБРАТЬ
		|						ВТ_ДокументыОтгрузки.Ссылка
		|					ИЗ
		|						ВТ_ДокументыОтгрузки)
		|				И СчетКт В (&СчетКтПартионный, &СчетКтНеПартионный),
		|			,
		|			) КАК ХозрасчетныйДвиженияССубконто";

	Если ИспользоватьОтборПоСкладуОтгрузки Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоСкладуСубконтоКт2", "СубконтоКт2 = &СкладОтгрузки");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоСкладуСубконтоКт3", "СубконтоКт3 = &СкладОтгрузки");
	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоСкладуСубконто2", "Субконто2 = &СкладОтгрузки");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоСкладуСубконто3", "Субконто3 = &СкладОтгрузки");

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоСкладуВозвратОтПокупателя", "ВозвратТоваровОтПокупателя.ДокументОснование.Склад = &СкладОтгрузки");
		
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоСкладуСубконтоКт2", "ИСТИНА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоСкладуСубконтоКт3", "ИСТИНА");
	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоСкладуСубконто2", "ИСТИНА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоСкладуСубконто3", "ИСТИНА");

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоСкладуВозвратОтПокупателя", "ИСТИНА");
		
	КонецЕсли;
	
	// Исключим запросы, которые не требуются, исходя из настроек плана счетов.
	// Удаляем, начиная с последних запросов, чтобы индексы запросов были корректными. 
	Счет1750 = ПланыСчетов.Хозрасчетный.МБП;
	ВедетсяУчетПоСкладам = БухгалтерскийУчетСервер.ВедетсяУчетПоСкладам(Счет1750);
	ВедетсяСуммовойУчетПоСкладам = БухгалтерскийУчетСервер.ВедетсяСуммовойУчетПоСкладам(Счет1750);

	// Удалим запросы к счетам только с количественным учетом по складам, если такого нет.
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	ИндексПоследнегоПакетаЗапросов = СхемаЗапроса.ПакетЗапросов.Количество() - 1;
	
	Если ВедетсяСуммовойУчетПоСкладам ИЛИ НЕ ВедетсяУчетПоСкладам Тогда
		// Либо складов нет вообще либо ведется суммовой учет по складам, отдельно обрабатывать перемещения между складами не требуется.
		СхемаЗапроса.ПакетЗапросов[ИндексПоследнегоПакетаЗапросов].Операторы.Удалить(3);
		СхемаЗапроса.ПакетЗапросов[ИндексПоследнегоПакетаЗапросов].Операторы.Удалить(2);

	ИначеЕсли ЕстьСчетаПартионные И НЕ ЕстьСчетаНеПартионные Тогда
		СхемаЗапроса.ПакетЗапросов[ИндексПоследнегоПакетаЗапросов].Операторы.Удалить(3);

	ИначеЕсли НЕ ЕстьСчетаПартионные И ЕстьСчетаНеПартионные Тогда
		СхемаЗапроса.ПакетЗапросов[ИндексПоследнегоПакетаЗапросов].Операторы.Удалить(2);

	КонецЕсли; 

	Если НЕ (ЕстьСчетаПартионные И ЕстьСчетаНеПартионные) Тогда

		Если ЕстьСчетаПартионные Тогда
			// Удалим запрос к счетам без партий.
			СхемаЗапроса.ПакетЗапросов[ИндексПоследнегоПакетаЗапросов].Операторы.Удалить(1);
		Иначе
			// Удалим запрос к счетам с партиями.
			СхемаЗапроса.ПакетЗапросов[ИндексПоследнегоПакетаЗапросов].Операторы.Удалить(0);
		КонецЕсли;

	КонецЕсли;
	
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса() + ОбщегоНазначения.РазделительПакетаЗапросов();

КонецФункции

Функция ТекстЗапросаВозвращенныеСписанныеМБПТекущегоМесяца(ЕстьСчетаНеПартионные, ЕстьСчетаПартионные)

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОборотыДтКт.СубконтоКт1 КАК Номенклатура,
	|	ОборотыДтКт.СубконтоКт2 КАК Партия,
	|	ОборотыДтКт.СчетКт КАК СчетУчета,
	|	СУММА(ОборотыДтКт.СуммаОборот) КАК Сумма,
	|	СУММА(ОборотыДтКт.КоличествоОборотКт) КАК Количество,
	|	СУММА(ОборотыДтКт.КоличествоОборотКт) КАК КоличествоОтгружено,
	|	СУММА(ВЫБОР
	|			КОГДА ОборотыДтКт.КоличествоОборотКт < 0
	|				ТОГДА -ОборотыДтКт.КоличествоОборотКт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоВозвращеноРанее,
	|	СУММА(ВЫБОР
	|			КОГДА ОборотыДтКт.КоличествоОборотКт < 0
	|				ТОГДА -ОборотыДтКт.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВозвращеноРанее
	|ПОМЕСТИТЬ ВременнаяТаблицаСписанныеМБП
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачТекущегоМесяца, &КонДата, Запись, , , СчетКт В (&СчетКтПартионный), &ВидыСубконтоПартий, СубконтоКт1 В (&Номенклатура)) КАК ОборотыДтКт
	|ГДЕ
	|	(ОборотыДтКт.Регистратор = &Регистратор
	|				И ОборотыДтКт.КоличествоОборотКт >= 0
	|			ИЛИ ОборотыДтКт.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|				И ОборотыДтКт.Регистратор <> &ЭтотВозврат
	|				И ОборотыДтКт.КоличествоОборотКт <= 0
	|				И ВЫРАЗИТЬ(ОборотыДтКт.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).ДокументОснование = &Регистратор)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОборотыДтКт.СчетКт,
	|	ОборотыДтКт.СубконтоКт1,
	|	ОборотыДтКт.СубконтоКт2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОборотыДтКт.СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО,
	|	ОборотыДтКт.СчетКт,
	|	СУММА(ОборотыДтКт.СуммаОборот),
	|	СУММА(ОборотыДтКт.КоличествоОборотКт),
	|	СУММА(ОборотыДтКт.КоличествоОборотКт),
	|	СУММА(ВЫБОР
	|			КОГДА ОборотыДтКт.КоличествоОборотКт < 0
	|				ТОГДА -ОборотыДтКт.КоличествоОборотКт
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА ОборотыДтКт.КоличествоОборотКт < 0
	|				ТОГДА -ОборотыДтКт.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачТекущегоМесяца, &КонДата, Запись, , , СчетКт В (&СчетКтНеПартионный), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура), СубконтоКт1 В (&Номенклатура)) КАК ОборотыДтКт
	|ГДЕ
	|	(ОборотыДтКт.Регистратор = &Регистратор
	|				И ОборотыДтКт.КоличествоОборотКт >= 0
	|			ИЛИ ОборотыДтКт.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|				И ОборотыДтКт.Регистратор <> &ЭтотВозврат
	|				И ОборотыДтКт.КоличествоОборотКт <= 0
	|				И ВЫРАЗИТЬ(ОборотыДтКт.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).ДокументОснование = &Регистратор)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОборотыДтКт.СчетКт,
	|	ОборотыДтКт.СубконтоКт1";

	Если НЕ (ЕстьСчетаПартионные И ЕстьСчетаНеПартионные) Тогда

		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);

		ИндексПоследнегоПакетаЗапросов = СхемаЗапроса.ПакетЗапросов.Количество() - 1;

		Если ЕстьСчетаПартионные Тогда
			// Удалим запрос к счетам без партий.
			СхемаЗапроса.ПакетЗапросов[ИндексПоследнегоПакетаЗапросов].Операторы.Удалить(1);
		Иначе
			// Удалим запрос к счетам с партиями.
			СхемаЗапроса.ПакетЗапросов[ИндексПоследнегоПакетаЗапросов].Операторы.Удалить(0);
		КонецЕсли;
		
		ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
		
	КонецЕсли;
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();

КонецФункции

Функция ПодготовитьПараметрыТаблицыВозвращенныеСписанныеМБП(ТаблицаМБП, ТаблицаСчетаУчетаМБП, ТаблицаСписокНоменклатуры, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаМБП

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"        // <Строка,0> - имя списка в документе
	+ "СинонимСписка,"    // <Строка,0> - синоним списка
	+ "Период,"           // <Дата> - дата списания
	+ "НомерСтроки,"      // <Число> - номер строки в списке
	+ "СчетУчета,"        // <ПланСчетовСсылка.Хозрасчетный> - счет учета, с которого списывается номенклатура
	+ "Номенклатура,"     // <СправочникСсылка.Номенклатура> - списываемая номенклатура
	+ "Склад,"            // <СправочникСсылка.Склад> - склад, с которого списывается номенклатура
	+ "Партия,"           // <ДокументСсылка.*> - документ поступления номенклатуры (партия)
	+ "Себестоимость,"    // <Число,15,2> - сумма списываемой номенклатуры, указанная в документе списания
	+ "Количество,"       // <Число,15,3> - количество списываемой номенклатуры
	+ "КорСчетСписания,"  // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который списывается номенклатура
	+ "КорСубконто1,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто2,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто3,"     // - значение субконто счета, на который списывается номенклатура
	+ "СуммаСписания";  // <Число,15,2> - сумма временных разниц в стоимости списываемой номенклатуры, определенной по данным остатков
	
	Параметры.Вставить("ТаблицаМБП",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаМБП, СписокОбязательныхКолонок));

	СписокОбязательныхКолонок = ""
	+ "СчетУчета";     // <Булево>
	
	Параметры.Вставить("СчетаУчетаМБП",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСчетаУчетаМБП, СписокОбязательныхКолонок));

	СписокОбязательныхКолонок = ""
	+ "Номенклатура";     // <СправочникСсылка.Номенклатура> - ссылка на номенклатуру, по которой будет определяться партия
	
	Параметры.Вставить("СписокНоменклатуры",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСписокНоменклатуры, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                 // <Дата> - период движений - дата документа
	+ "Регистратор,"            // <ДокументСсылка>
	+ "Организация,"            // <СправочникСсылка.Организации>
	+ "УказанДокументОтгрузки," // <Булево>
	+ "ДатаДокументаРеализации," // <Дата>
	+ "Сделка";                 // <ДокументСсылка>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;
	
КонецФункции

Функция РазделитьСчетаУчетаПоПартионномуУчету(ТаблицаСчетаУчетаМБП)

	СтруктураСчетов = Новый Структура;
	СтруктураСчетов.Вставить("СчетаПартионные",   Новый Массив);
	СтруктураСчетов.Вставить("СчетаНеПартионные", Новый Массив);

	Для каждого СтрокаСчета Из ТаблицаСчетаУчетаМБП Цикл
		Если БухгалтерскийУчетСервер.НаСчетеВедетсяПартионныйУчет(СтрокаСчета.СчетУчета) Тогда
			СтруктураСчетов.СчетаПартионные.Добавить(СтрокаСчета.СчетУчета);
		Иначе
			СтруктураСчетов.СчетаНеПартионные.Добавить(СтрокаСчета.СчетУчета);
		КонецЕсли;
	КонецЦикла;

	Возврат СтруктураСчетов;

КонецФункции

Процедура ПроставитьСторноТаблицы(Таблица, СтруктураПолейДляСторно, Множитель) Экспорт
	
	Если Таблица = Неопределено
		ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Сторнируем 
	Для Каждого Строка Из Таблица Цикл
		Для каждого КолонкаСторно Из СтруктураПолейДляСторно Цикл
			Строка[КолонкаСторно.Ключ] = Множитель * Строка[КолонкаСторно.Ключ];
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПоступлениеМБП

Процедура СформироватьДвиженияПоступлениеМБП(ТаблицаМБП, ТаблицаРеквизиты, Движения, Отказ, ПоступлениеАО = Ложь) Экспорт
	
	Параметры = ПодготовитьПараметрыПоступлениеМБП(ТаблицаМБП, ТаблицаРеквизиты);
	
	Если Параметры.ТаблицаМБП.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	СпособОценкиТМЗ = БухгалтерскийУчетСервер.СпособОценкиТМЗ(Реквизиты.Период, Реквизиты.Организация);
	ВедетсяУчетПоПартиям = СпособОценкиТМЗ <> Перечисления.СпособыОценки.ПоСредней;
	
	СвойстваСчетаКеш = Новый Соответствие;

	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаМБП Цикл
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СокрЛП(СтрокаТаблицы.Содержание);
		
		Проводка.СчетДт = СтрокаТаблицы.СчетУчета;
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Местонахождение", СтрокаТаблицы.Местонахождение);
		
		Если ВедетсяУчетПоПартиям Тогда
			БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", Реквизиты.Регистратор);
		КонецЕсли;
		
		СвойстваСчета = СвойстваСчетаКеш[Проводка.СчетДт];
		Если СвойстваСчета = Неопределено Тогда   // первое использование счета
			СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			СвойстваСчетаКеш.Вставить(Проводка.СчетДт, СвойстваСчета);
		КонецЕсли;
		
		Если СвойстваСчета.Количественный Тогда
			Проводка.КоличествоДт = СтрокаТаблицы.Количество;
		КонецЕсли;
		
		Проводка.СчетКт = СтрокаТаблицы.КорСчет;
		
		СвойстваСчета = СвойстваСчетаКеш[Проводка.СчетКт];
		Если СвойстваСчета = Неопределено Тогда   // первое использование счета
			СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			СвойстваСчетаКеш.Вставить(Проводка.СчетКт, СвойстваСчета);
		КонецЕсли;
		
		БухгалтерскийУчетСервер.УстановитьСубконтоПоКешуСвойствСчета(
			Проводка.СчетКт, 
			Проводка.СубконтоКт, 
			СвойстваСчетаКеш, 
			СтрокаТаблицы.КорСубконто1,
			СтрокаТаблицы.КорСубконто2,
			СтрокаТаблицы.КорСубконто3);
		
		Если СвойстваСчета.Валютный Тогда
			Проводка.ВалютаКт        = СтрокаТаблицы.ВалютаВзаиморасчетов;// Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВзаиморасчетов;
		КонецЕсли;
		
		Проводка.Сумма = СтрокаТаблицы.Сумма;
		
		//// Отражение НДС
		//Если НЕ СтрокаТаблицы.СуммаНДС = 0 Тогда			
		//	Проводка = Движения.Хозрасчетный.Добавить();
		//
		//	Проводка.Период      = Реквизиты.Период;
		//	Проводка.Организация = Реквизиты.Организация;
		//	Проводка.Содержание  = СокрЛП(СтрокаТаблицы.СодержаниеНДС);
		//	
		//	Проводка.СчетДт = СтрокаТаблицы.СчетУчета;
		//	БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
		//	БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Местонахождение", СтрокаТаблицы.Местонахождение);
		//	
		//	Если ВедетсяУчетПоПартиям Тогда
		//		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", Реквизиты.Регистратор);
		//	КонецЕсли;
		//	
		//	СвойстваСчета = СвойстваСчетаКеш[Проводка.СчетДт];
		//	Если СвойстваСчета = Неопределено Тогда   // первое использование счета
		//		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		//		СвойстваСчетаКеш.Вставить(Проводка.СчетДт, СвойстваСчета);
		//	КонецЕсли;
		//	
		//	Проводка.СчетКт = СтрокаТаблицы.КорСчет;
		//	
		//	СвойстваСчета = СвойстваСчетаКеш[Проводка.СчетКт];
		//	Если СвойстваСчета = Неопределено Тогда   // первое использование счета
		//		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		//		СвойстваСчетаКеш.Вставить(Проводка.СчетКт, СвойстваСчета);
		//	КонецЕсли;
		//	
		//	БухгалтерскийУчетСервер.УстановитьСубконтоПоКешуСвойствСчета(
		//		Проводка.СчетКт, 
		//		Проводка.СубконтоКт, 
		//		СвойстваСчетаКеш, 
		//		СтрокаТаблицы.КорСубконто1,
		//		СтрокаТаблицы.КорСубконто2,
		//		СтрокаТаблицы.КорСубконто3);
		//	
		//	Если СвойстваСчета.Валютный Тогда
		//		Проводка.ВалютаКт        = Реквизиты.ВалютаРегламентированногоУчета;
		//		Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаНДС;
		//	КонецЕсли;
		//	
		//	Проводка.Сумма = СтрокаТаблицы.СуммаНДС;	
		//КонецЕсли;
			
		//// Отражение акциза.
		//Если НЕ СтрокаТаблицы.СуммаАкциза = 0 Тогда  
		//	Проводка = Движения.Хозрасчетный.Добавить();
		//	
		//	Проводка.Период      = Реквизиты.Период;
		//	Проводка.Организация = Реквизиты.Организация;
		//	Проводка.Содержание  = НСтр("ru = 'Акциз'");
		//	
		//	Проводка.СчетДт = СтрокаТаблицы.СчетУчета;
		//	БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
		//	БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", СтрокаТаблицы.Местонахождение);
		//	
		//	Если ВедетсяУчетПоПартиям Тогда
		//		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", Реквизиты.Регистратор);
		//	КонецЕсли;
		//	
		//	СвойстваСчета = СвойстваСчетаКеш[Проводка.СчетДт];
		//	Если СвойстваСчета.Количественный Тогда
		//		Проводка.КоличествоДт = СтрокаТаблицы.Количество;
		//	КонецЕсли;
		//	
		//	Проводка.СчетКт = ПланыСчетов.Хозрасчетный.Акцизы;
		//	Проводка.Сумма = СтрокаТаблицы.СуммаАкциза;
		//КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыПоступлениеМБП(ТаблицаМБП, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаМБП
	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"         	// <Число> - номер строки в списке
	+ "Номенклатура,"        	// <СправочникСсылка.Номенклатура> - поступающий МБП
	+ "СуммаВзаиморасчетов," 	// <Число,15,2> - сумма в валюте взаиморасчетов
	+ "Сумма,"             		// <Число,15,2> - сумма в валюте регламентированного учета
	+ "Количество,"          	// <Число,15,3> - количество поступающего МБП
	+ "СчетУчета,"           	// <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который приходуется МБП
	+ "КорСчет,"             	// <ПланСчетовСсылка.Хозрасчетный> - счет учета, с которого поступает МБП
	+ "КорСубконто1,"        	// <Характеристика.ВидыСубконтоХозрасчетные> - значение субконто счета, с которого поступает МБП
	+ "КорСубконто2,"        	// <Характеристика.ВидыСубконтоХозрасчетные> - значение субконто счета, с которого поступает МБП
	+ "КорСубконто3,"        	// <Характеристика.ВидыСубконтоХозрасчетные> - значение субконто счета, с которого поступает МБП
	+ "Содержание,"          	// <Строка,150> - содержание проводки
	+ "ВалютаВзаиморасчетов,"	// <СправочникСсылка.Валюты> - валюта взаиморасчетов
	+ "Местонахождение"; 		// <СправочникСсылка.Склады> - склад, на который поступает МБП
	
	Параметры.Вставить("ТаблицаМБП",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаМБП, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты
	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организация> - организация, в которую поступает МБП
	+ "ВалютаРегламентированногоУчета"; // <СправочникСсылка.Валюты> - валюта регламентированного учета	
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

#КонецОбласти

#Область ОприходованиеМБП

Процедура СформироватьДвиженияОприходованиеМБП(ТаблицаМБП, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыОприходованиеМБП(ТаблицаМБП, ТаблицаРеквизиты);

	Если Параметры.ТаблицаМБП.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	СпособОценкиТМЗ = БухгалтерскийУчетСервер.СпособОценкиТМЗ(Реквизиты.Период, Реквизиты.Организация);
	ВедетсяУчетПоПартиям = СпособОценкиТМЗ <> Перечисления.СпособыОценки.ПоСредней;

	СвойстваСчетаКеш = Новый Соответствие;

	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаМБП Цикл

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СокрЛП(СтрокаТаблицы.Содержание);
		Проводка.КорректироватьНУ  = Реквизиты.КорректироватьНУ;

		Проводка.СчетДт = СтрокаТаблицы.СчетУчета;
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Местонахождение", Реквизиты.Склад);
		Если ВедетсяУчетПоПартиям Тогда
			БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", Реквизиты.Регистратор);
		КонецЕсли;

		СвойстваСчета = СвойстваСчетаКеш[Проводка.СчетДт];
		Если СвойстваСчета = Неопределено Тогда   // первое использование счета
			СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			СвойстваСчетаКеш.Вставить(Проводка.СчетДт, СвойстваСчета);
		КонецЕсли;
		
		Если СвойстваСчета.Количественный Тогда
			Проводка.КоличествоДт = СтрокаТаблицы.Количество;
		КонецЕсли;
		
		Проводка.СчетКт = СтрокаТаблицы.КорСчет;
		
		СвойстваСчета = СвойстваСчетаКеш[Проводка.СчетКт];
		Если СвойстваСчета = Неопределено Тогда   // первое использование счета
			СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			СвойстваСчетаКеш.Вставить(Проводка.СчетКт, СвойстваСчета);
		КонецЕсли;
		
		БухгалтерскийУчетСервер.УстановитьСубконтоПоКешуСвойствСчета(
			Проводка.СчетКт, 
			Проводка.СубконтоКт, 
			СвойстваСчетаКеш, 
			СтрокаТаблицы.КорСубконто1,
			СтрокаТаблицы.КорСубконто2,
			СтрокаТаблицы.КорСубконто3);
		
		Проводка.Сумма = СтрокаТаблицы.Сумма;

		//// Цикл субконто по строке партий
		//Для НомерСубконто = 1 По 3 Цикл
		//	КорСубконто = СтрокаТаблицы["КорСубконто" + НомерСубконто];
		//	
		//	// Определение положения субконто по типу
		//	Если СвойстваСчетаКт.ВидСубконто1ТипЗначения <> Неопределено
		//		И СвойстваСчетаКт.ВидСубконто1ТипЗначения.СодержитТип(ТипЗнч(КорСубконто)) Тогда 
		//		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СвойстваСчетаКт.ВидСубконто1, КорСубконто);
		//	ИначеЕсли СвойстваСчетаКт.ВидСубконто2ТипЗначения <> Неопределено
		//		И СвойстваСчетаКт.ВидСубконто2ТипЗначения.СодержитТип(ТипЗнч(КорСубконто)) Тогда 
		//		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СвойстваСчетаКт.ВидСубконто2, КорСубконто);
		//	ИначеЕсли СвойстваСчетаКт.ВидСубконто3ТипЗначения <> Неопределено
		//		И СвойстваСчетаКт.ВидСубконто3ТипЗначения.СодержитТип(ТипЗнч(КорСубконто)) Тогда 
		//		БухгалтерскийУчетСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СвойстваСчетаКт.ВидСубконто3, КорСубконто);
		//	КонецЕсли;
		//КонецЦикла;
		
	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыОприходованиеМБП(ТаблицаМБП, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаМБП

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"       // <Число> - номер строки в списке
	+ "Номенклатура,"      // <СправочникСсылка.Номенклатура> - оприходуемый МБП
	+ "Сумма,"             // <Число,15,2> - сумма в валюте регламентированного учета
	+ "Количество,"        // <Число,15,3> - количество оприходуемого МБП
	+ "СчетУчета,"         // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который приходуется МБП
	+ "КорСчет,"           // <ПланСчетовСсылка.Хозрасчетный> - счет учета, с которого поступает МБП
	+ "КорСубконто1,"      // <Характеристика.ВидыСубконтоХозрасчетные> - значение субконто счета, с которого поступает МБП
	+ "КорСубконто2,"      // <Характеристика.ВидыСубконтоХозрасчетные> - значение субконто счета, с которого поступает МБП
	+ "КорСубконто3,"      // <Характеристика.ВидыСубконтоХозрасчетные> - значение субконто счета, с которого поступает МБП
	+ "Содержание";        // <Строка,150> - содержание проводки

	Параметры.Вставить("ТаблицаМБП",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаМБП, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                   // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                        // <Дата> - период движений - дата документа
	+ "Организация,"                   // <СправочникСсылка.Организация> - организация, в которую приходуется МБП
	+ "Склад,"                         // <СправочникСсылка.Склады> - склад, на который приходуется МБП
	+ "КорректироватьНУ";              // <Булево> - Истина, если стоит признак ПриходСОсновногоСредства

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПустуюТаблицуСписанныеМБП(ВЭксплуатации, ДопПроводки) Экспорт
	
	ТаблицаСписанныеМБП = Новый ТаблицаЗначений;
	ТаблицаСписанныеМБП.Колонки.Добавить("ИмяСписка",		ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаСписанныеМБП.Колонки.Добавить("СинонимСписка",	ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаСписанныеМБП.Колонки.Добавить("Период",			ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаСписанныеМБП.Колонки.Добавить("НомерСтроки",		ОбщегоНазначения.ОписаниеТипаЧисло(5, 0));
	ТаблицаСписанныеМБП.Колонки.Добавить("СчетУчета",		Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаСписанныеМБП.Колонки.Добавить("Номенклатура",	Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Если ВЭксплуатации Тогда 
		ТаблицаСписанныеМБП.Колонки.Добавить("Склад",		Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Иначе 
		ТаблицаСписанныеМБП.Колонки.Добавить("Склад",		Новый ОписаниеТипов("СправочникСсылка.Склады"));
	КонецЕсли;	
	ТаблицаСписанныеМБП.Колонки.Добавить("Партия",			Документы.ТипВсеСсылки());
	ТаблицаСписанныеМБП.Колонки.Добавить("Себестоимость",	ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаСписанныеМБП.Колонки.Добавить("Количество",		ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ТаблицаСписанныеМБП.Колонки.Добавить("КорСчетСписания",	Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаСписанныеМБП.Колонки.Добавить("КорСубконто1");
	ТаблицаСписанныеМБП.Колонки.Добавить("КорСубконто2");
	ТаблицаСписанныеМБП.Колонки.Добавить("КорСубконто3");
	ТаблицаСписанныеМБП.Колонки.Добавить("СуммаСписания",	ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаСписанныеМБП.Колонки.Добавить("Содержание",		ОбщегоНазначения.ОписаниеТипаСтрока(0));	
	Если ДопПроводки Тогда
		ТаблицаСписанныеМБП.Колонки.Добавить("СчетЗатрат",		Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
		ТаблицаСписанныеМБП.Колонки.Добавить("Субконто1");
		ТаблицаСписанныеМБП.Колонки.Добавить("Субконто2");
		ТаблицаСписанныеМБП.Колонки.Добавить("Субконто3");
	КонецЕсли;

	ТаблицаСписанныеМБП.Колонки.Добавить("КлючСтроки",		ОбщегоНазначения.ОписаниеТипаЧисло(5));
	
	Возврат ТаблицаСписанныеМБП;
	
КонецФункции

Функция ПолучитьОстаткиМБП(МоментВремени, Организация, ТаблицаСписания, ТаблицаВозвраты = Неопределено) Экспорт
	
	МассивСчетовУчета = РазличныеЗначенияКолонкиТаблицы(ТаблицаСписания, "СчетУчета");
	
	// Наложение блокировки на регистр Хозрасчетный для получения остатков
	Если ТранзакцияАктивна() И ОбщегоНазначенияБПВызовСервераПовтИсп.ИспользоватьУправляемыеБлокировки() Тогда
		Блокировка = Новый БлокировкаДанных;
		ТаблицаСписания.Индексы.Добавить("СчетУчета");
		
		Для каждого СчетУчета Из МассивСчетовУчета Цикл
			// Отдельная блокировка по каждому счету учета
			СуммовойУчетПоСкладам = БухгалтерскийУчетСервер.ВедетсяСуммовойУчетПоМестонахождениям(СчетУчета);
			Если СуммовойУчетПоСкладам Тогда
				ТаблицаСписанияПоСчету = ТаблицаСписания.Скопировать(Новый Структура("СчетУчета", СчетУчета), "Номенклатура,Склад");
				ТаблицаСписанияПоСчету.Свернуть("Номенклатура,Склад");
			Иначе
				ТаблицаСписанияПоСчету = ТаблицаСписания.Скопировать(Новый Структура("СчетУчета", СчетУчета), "Номенклатура");
				ТаблицаСписанияПоСчету.Свернуть("Номенклатура");
			КонецЕсли;
			ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Хозрасчетный");
			ЭлементБлокировки.УстановитьЗначение("Период",      Новый Диапазон(, МоментВремени.Дата));
			ЭлементБлокировки.УстановитьЗначение("Организация", Организация);
			ЭлементБлокировки.УстановитьЗначение("Счет",        СчетУчета);
			СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетУчета);
			ЭлементБлокировки.ИсточникДанных = ТаблицаСписанияПоСчету;
			Для Ном = 1 По СвойстваСчета.КоличествоСубконто Цикл
				Если СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура
					И НЕ СчетУчета = ПланыСчетов.Хозрасчетный.МБП Тогда // Обход ошибки при наложении блокировки
					ЭлементБлокировки.ИспользоватьИзИсточникаДанных(
					ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура, "Номенклатура");
				ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Местонахождение 
					И СуммовойУчетПоСкладам Тогда
					// Если нет суммового учета по складам - суммы получаются запросом без отбора по складам,
					// поэтому блокировать склады не нужно
					ЭлементБлокировки.ИспользоватьИзИсточникаДанных(
						ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Местонахождение, "Склад");
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		Блокировка.Заблокировать();
	КонецЕсли;
	
	// Получение остатков номенклатуры
	МассивНоменклатуры = РазличныеЗначенияКолонкиТаблицы(ТаблицаСписания, "Номенклатура");
	МассивСкладов      = РазличныеЗначенияКолонкиТаблицы(ТаблицаСписания, "Склад");

	// Сортировка счетов учета
	СчетаУчетаН   = Новый Массив; // счета с суммовым учетом только по номенклатуре
	СчетаУчетаНС  = Новый Массив; // счета с суммовым учетом по номенклатуре и складам
	СчетаУчетаНП  = Новый Массив; // счета с суммовым учетом по номенклатуре и партиям
	СчетаУчетаНПС = Новый Массив; // счета с суммовым учетом по номенклатуре, складам и партиям
	
	СчетаУчетаН_Склад  = Новый Массив; // счета с суммовым учетом только по номенклатуре и количественным по складу
	СчетаУчетаНП_Склад = Новый Массив; // счета с суммовым учетом по номенклатуре и партиям и количественным по складу

	СортировкаСчетовУчета(МассивСчетовУчета,
	                      СчетаУчетаН,
	                      СчетаУчетаНС,
	                      СчетаУчетаНП,
	                      СчетаУчетаНПС,
	                      СчетаУчетаН_Склад,
	                      СчетаУчетаНП_Склад);

	ВидыСубконтоН = Новый Массив;
	ВидысубконтоН.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);

	ВидыСубконтоНС = Новый Массив;
	ВидысубконтоНС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидысубконтоНС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Местонахождение);

	ВидыСубконтоНП = Новый Массив;
	ВидысубконтоНП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидысубконтоНП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);

	ВидыСубконтоНПС = Новый Массив;
	ВидыСубконтоНПС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоНПС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	ВидыСубконтоНПС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Местонахождение);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментВремени",      МоментВремени);
	Запрос.УстановитьПараметр("Организация",        Организация);
	Запрос.УстановитьПараметр("МассивСкладов",      МассивСкладов);
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	Запрос.УстановитьПараметр("СчетаУчетаН",        СчетаУчетаН);
	Запрос.УстановитьПараметр("СчетаУчетаНС",       СчетаУчетаНС);
	Запрос.УстановитьПараметр("СчетаУчетаНП",       СчетаУчетаНП);
	Запрос.УстановитьПараметр("СчетаУчетаНПС",      СчетаУчетаНПС);
	Запрос.УстановитьПараметр("СчетаУчетаН_Склад",  СчетаУчетаН_Склад);
	Запрос.УстановитьПараметр("СчетаУчетаНП_Склад", СчетаУчетаНП_Склад);
	Запрос.УстановитьПараметр("ВидысубконтоН",      ВидысубконтоН);
	Запрос.УстановитьПараметр("ВидысубконтоНС",     ВидысубконтоНС);
	Запрос.УстановитьПараметр("ВидысубконтоНП",     ВидысубконтоНП);
	Запрос.УстановитьПараметр("ВидыСубконтоНПС",    ВидыСубконтоНПС);
	Запрос.УстановитьПараметр("ПустойСклад",        Справочники.Склады.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяПартия",       Документы.ПоступлениеТоваровУслуг.ПустаяСсылка());
	
	ТекстСуммыКоличественныхСкладов = "";
	Текст = "";
	
	// Если не ведется суммовой учет по складам, соберем остатки без учета складов	
	Если СчетаУчетаН_Склад.Количество() > 0 Тогда
		
		ТекстСуммыКоличественныхСкладов = ТекстСуммыКоличественныхСкладов + 
			"ВЫБРАТЬ
			|	Остатки.Счет КАК СчетУчета,
			|	Остатки.Субконто1 КАК Номенклатура,
			|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
			|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Стоимость
			|ПОМЕСТИТЬ ТаблицаСчетаУчетаН
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|			&МоментВремени,
			|			Счет В (&СчетаУчетаН),
			|			&ВидыСубконтоН,
			|				Субконто1 В (&МассивНоменклатуры)
			|				И Организация = &Организация) КАК Остатки
			|
			|СГРУППИРОВАТЬ ПО
			|	Остатки.Счет,
			|	Остатки.Субконто1
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	СчетУчета,
			|	Номенклатура
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОстаткиПоСкладам.Счет КАК СчетУчета,
			|	ОстаткиПоСкладам.Субконто1 КАК Номенклатура,
			|	ЕСТЬNULL(ОстаткиПоСкладам.Субконто2, &ПустойСклад) КАК Склад,
			|	СУММА(ЕСТЬNULL(ОстаткиПоСкладам.КоличествоОстатокДт, 0)) КАК КоличествоОстатокДт
			|ПОМЕСТИТЬ ТаблицаСчетаУчетаН_Склад
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|			&МоментВремени,
			|			Счет В (&СчетаУчетаН_Склад),
			|			&ВидыСубконтоНС,
			|				Субконто1 В (&МассивНоменклатуры)
			|				И Субконто2 В (&МассивСкладов)
			|				И Организация = &Организация) КАК ОстаткиПоСкладам
			|
			|СГРУППИРОВАТЬ ПО
			|	ОстаткиПоСкладам.Счет,
			|	ОстаткиПоСкладам.Субконто1,
			|	ОстаткиПоСкладам.Субконто2
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	СчетУчета,
			|	Номенклатура";

	КонецЕсли;
	
	Если СчетаУчетаНП_Склад.Количество() > 0 Тогда
		
		ТекстСуммыКоличественныхСкладов = ТекстСуммыКоличественныхСкладов + 
			"ВЫБРАТЬ
			|	Остатки.Счет КАК СчетУчета,
			|	Остатки.Субконто1 КАК Номенклатура,
			|	ЕСТЬNULL(Остатки.Субконто2, &ПустаяПартия) КАК ДокументОприходования,
			|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
			|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Стоимость
			|ПОМЕСТИТЬ ТаблицаСчетаУчетаНП
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|			&МоментВремени,
			|			Счет В (&СчетаУчетаНП),
			|			&ВидыСубконтоНП,
			|				Субконто1 В (&МассивНоменклатуры)
			|				И Организация = &Организация) КАК Остатки
			|
			|СГРУППИРОВАТЬ ПО
			|	Остатки.Счет,
			|	Остатки.Субконто1,
			|	Остатки.Субконто2
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	СчетУчета,
			|	Номенклатура,
			|	ДокументОприходования
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОстаткиПоСкладам.Счет КАК СчетУчета,
			|	ОстаткиПоСкладам.Субконто1 КАК Номенклатура,
			|	ЕСТЬNULL(ОстаткиПоСкладам.Субконто2, &ПустаяПартия) КАК ДокументОприходования,
			|	ЕСТЬNULL(ОстаткиПоСкладам.Субконто3, &ПустойСклад) КАК Склад,
			|	СУММА(ЕСТЬNULL(ОстаткиПоСкладам.КоличествоОстатокДт, 0)) КАК КоличествоОстатокДт
			|ПОМЕСТИТЬ ТаблицаСчетаУчетаНП_Склад
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|			&МоментВремени,
			|			Счет В (&СчетаУчетаНП_Склад),
			|			&ВидыСубконтоНПС,
			|				Субконто1 В (&МассивНоменклатуры)
			|				И Субконто3 В (&МассивСкладов)
			|				И Организация = &Организация) КАК ОстаткиПоСкладам
			|
			|СГРУППИРОВАТЬ ПО
			|	ОстаткиПоСкладам.Счет,
			|	ОстаткиПоСкладам.Субконто1,
			|	ОстаткиПоСкладам.Субконто2,
			|	ОстаткиПоСкладам.Субконто3
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	СчетУчета,
			|	Номенклатура,
			|	ДокументОприходования";
		
	КонецЕсли;
	
	Если ТаблицаВозвраты <> Неопределено И ТаблицаВозвраты.Количество() > 0 Тогда
		
		Запрос.УстановитьПараметр("ТаблицаВозвраты",    ТаблицаВозвраты);
	
		Текст = Текст + 
			"ВЫБРАТЬ
			|	ТаблицаВозвраты.Партия,
			|	ТаблицаВозвраты.Склад,
			|	ТаблицаВозвраты.Номенклатура,
			|	&Организация,
			|	ТаблицаВозвраты.СчетУчета,
			|	ТаблицаВозвраты.Количество КАК Количество,
			|	ТаблицаВозвраты.СуммаСписания КАК СуммаСписания
			|ПОМЕСТИТЬ ТаблицаВозвраты
			|ИЗ
			|	&ТаблицаВозвраты КАК ТаблицаВозвраты
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаВозвраты.СчетУчета КАК СчетУчета,
			|	ТаблицаВозвраты.Номенклатура КАК Номенклатура,
			|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
			|	ТаблицаВозвраты.Партия КАК ДокументОприходования,
			|	ТаблицаВозвраты.Склад КАК Склад,
			|	ТаблицаВозвраты.Организация КАК Организация,
			|	СУММА(ТаблицаВозвраты.Количество) КАК КоличествоПоСкладу,
			|	СУММА(ТаблицаВозвраты.Количество) КАК Количество,
			|	СУММА(ТаблицаВозвраты.СуммаСписания) КАК Стоимость
			|ИЗ
			|	ТаблицаВозвраты КАК ТаблицаВозвраты
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаВозвраты.СчетУчета,
			|	ТаблицаВозвраты.Номенклатура,
			|	ТаблицаВозвраты.Склад,
			|	ТаблицаВозвраты.Партия,
			|	ТаблицаВозвраты.Организация";
	КонецЕсли;
	
	Если СчетаУчетаН.Количество() > 0 И СчетаУчетаН_Склад.Количество() = 0 Тогда
		
		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + 
			"ВЫБРАТЬ
			|	Остатки.Счет КАК СчетУчета,
			|	Остатки.Субконто1 КАК Номенклатура,
			|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
			|	&ПустаяПартия КАК ДокументОприходования,
			|	&ПустойСклад КАК Склад,
			|	Остатки.Организация КАК Организация,
			|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
			|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
			|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Стоимость
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|			&МоментВремени,
			|			Счет В (&СчетаУчетаН),
			|			&ВидыСубконтоН,
			|				Субконто1 В (&МассивНоменклатуры)
			|				И Организация = &Организация) КАК Остатки
			|
			|СГРУППИРОВАТЬ ПО
			|	Остатки.Счет,
			|	Остатки.Субконто1,
			|	Остатки.Организация";

	ИначеЕсли СчетаУчетаН.Количество() > 0 Тогда
		
		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст +
			"ВЫБРАТЬ
			|	ОстаткиПоСкладам.СчетУчета,
			|	ОстаткиПоСкладам.Номенклатура,
			|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
			|	&ПустаяПартия КАК ДокументОприходования,
			|	ОстаткиПоСкладам.Склад,
			|	&Организация КАК Организация,
			|	СУММА(ЕСТЬNULL(ОстаткиПоСкладам.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
			|	СУММА(ЕСТЬNULL(СуммовыеОстатки.Количество, 0)) КАК Количество,
			|	СУММА(ЕСТЬNULL(СуммовыеОстатки.Стоимость, 0)) КАК Стоимость
			|ИЗ
			|	ТаблицаСчетаУчетаН_Склад КАК ОстаткиПоСкладам
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетаУчетаН КАК СуммовыеОстатки
			|		ПО ОстаткиПоСкладам.СчетУчета = СуммовыеОстатки.СчетУчета
			|			И ОстаткиПоСкладам.Номенклатура = СуммовыеОстатки.Номенклатура
			|
			|СГРУППИРОВАТЬ ПО
			|	ОстаткиПоСкладам.СчетУчета,
			|	ОстаткиПоСкладам.Номенклатура,
			|	ОстаткиПоСкладам.Склад";

	КонецЕсли;

	Если СчетаУчетаНС.Количество() > 0 Тогда

		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + 
			"ВЫБРАТЬ
			|	Остатки.Счет КАК СчетУчета,
			|	Остатки.Субконто1 КАК Номенклатура,
			|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
			|	&ПустаяПартия КАК ДокументОприходования,
			|	Остатки.Субконто2 КАК Склад,
			|	Остатки.Организация КАК Организация,
			|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
			|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
			|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Стоимость
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|			&МоментВремени,
			|			Счет В (&СчетаУчетаНС),
			|			&ВидыСубконтоНС,
			|				Субконто1 В (&МассивНоменклатуры)
			|				И Субконто2 В (&МассивСкладов)
			|				И Организация = &Организация) КАК Остатки
			|
			|СГРУППИРОВАТЬ ПО
			|	Остатки.Счет,
			|	Остатки.Субконто1,
			|	Остатки.Субконто2,
			|	Остатки.Организация";

	КонецЕсли;

	Если СчетаУчетаНП.Количество() > 0 И СчетаУчетаНП_Склад.Количество() =  0 Тогда

		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
		
		Текст = Текст + 
			"ВЫБРАТЬ
			|	Остатки.Счет КАК СчетУчета,
			|	Остатки.Субконто1 КАК Номенклатура,
			|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
			|	Остатки.Субконто2 КАК ДокументОприходования,
			|	&ПустойСклад КАК Склад,
			|	Остатки.Организация КАК Организация,
			|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
			|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
			|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Стоимость
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|			&МоментВремени,
			|			Счет В (&СчетаУчетаНП),
			|			&ВидыСубконтоНП,
			|				Субконто1 В (&МассивНоменклатуры)
			|				И Организация = &Организация) КАК Остатки
			|
			|СГРУППИРОВАТЬ ПО
			|	Остатки.Счет,
			|	Остатки.Субконто1,
			|	Остатки.Субконто2,
			|	Остатки.Организация";
		
	ИначеЕсли СчетаУчетаНП.Количество() > 0 Тогда
		//СчетаУчетаНП_Склад.Количество() >  0
		
		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + 
			"ВЫБРАТЬ
			|	ОстаткиПоСкладам.СчетУчета,
			|	ОстаткиПоСкладам.Номенклатура,
			|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
			|	ОстаткиПоСкладам.ДокументОприходования,
			|	ОстаткиПоСкладам.Склад,
			|	&Организация КАК Организация,
			|	СУММА(ЕСТЬNULL(ОстаткиПоСкладам.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
			|	СУММА(ЕСТЬNULL(СуммовыеОстатки.Количество, 0)) КАК Количество,
			|	СУММА(ЕСТЬNULL(СуммовыеОстатки.Стоимость, 0)) КАК Стоимость
			|ИЗ
			|	ТаблицаСчетаУчетаНП_Склад КАК ОстаткиПоСкладам
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетаУчетаНП КАК СуммовыеОстатки
			|		ПО ОстаткиПоСкладам.СчетУчета = СуммовыеОстатки.СчетУчета
			|			И ОстаткиПоСкладам.Номенклатура = СуммовыеОстатки.Номенклатура
			|			И ОстаткиПоСкладам.ДокументОприходования = СуммовыеОстатки.ДокументОприходования
			|
			|СГРУППИРОВАТЬ ПО
			|	ОстаткиПоСкладам.СчетУчета,
			|	ОстаткиПоСкладам.Номенклатура,
			|	ОстаткиПоСкладам.ДокументОприходования,
			|	ОстаткиПоСкладам.Склад";

	КонецЕсли;

	Если СчетаУчетаНПС.Количество() > 0 Тогда

		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + 
			"ВЫБРАТЬ
			|	Остатки.Счет КАК СчетУчета,
			|	Остатки.Субконто1 КАК Номенклатура,
			|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
			|	Остатки.Субконто2 КАК ДокументОприходования,
			|	Остатки.Субконто3 КАК Склад,
			|	Остатки.Организация КАК Организация,
			|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
			|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
			|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Стоимость
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|			&МоментВремени,
			|			Счет В (&СчетаУчетаНПС),
			|			&ВидыСубконтоНПС,
			|				Субконто1 В (&МассивНоменклатуры)
			|				И Субконто3 В (&МассивСкладов)
			|				И Организация = &Организация) КАК Остатки
			|
			|СГРУППИРОВАТЬ ПО
			|	Остатки.Счет,
			|	Остатки.Субконто1,
			|	Остатки.Субконто2,
			|	Остатки.Субконто3,
			|	Остатки.Организация";
		
	КонецЕсли;

	Текст = ТекстСуммыКоличественныхСкладов + Текст;
	
	Запрос.Текст = Текст;

	Результат = Запрос.Выполнить().Выгрузить();

	Если СчетаУчетаНПС.Количество() + СчетаУчетаНП.Количество() <> 0 Тогда
		ОбщегоНазначенияБПВызовСервера.ДобавитьДатуДокументаКРезультатуЗапроса(Результат,"ДокументОприходования", "ДокументОприходованияДата");
		Результат.Сортировать("ДокументОприходованияДата, ДокументОприходования", Новый СравнениеЗначений);
	КонецЕсли;

	Результат.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(10,0));
	НомерСтроки = 1;
	Для каждого СтрокаРезультата Из Результат Цикл
		СтрокаРезультата.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;

	Возврат Результат;

КонецФункции 

Функция ПолучитьОстаткиМБПВЭксплуатации(МоментВремени, Организация, ТаблицаСписания, ТаблицаВозвраты = Неопределено) Экспорт
	
	МассивСчетовУчета = РазличныеЗначенияКолонкиТаблицы(ТаблицаСписания, "СчетУчета");
	
	// Наложение блокировки на регистр Хозрасчетный для получения остатков
	Если ТранзакцияАктивна() И ОбщегоНазначенияБПВызовСервераПовтИсп.ИспользоватьУправляемыеБлокировки() Тогда
		Блокировка = Новый БлокировкаДанных;
		ТаблицаСписания.Индексы.Добавить("СчетУчета");
		
		Для каждого СчетУчета Из МассивСчетовУчета Цикл
			// Отдельная блокировка по каждому счету учета
			СуммовойУчетПоСкладам = БухгалтерскийУчетСервер.ВедетсяСуммовойУчетПоМестонахождениям(СчетУчета);
			Если СуммовойУчетПоСкладам Тогда
				ТаблицаСписанияПоСчету = ТаблицаСписания.Скопировать(Новый Структура("СчетУчета", СчетУчета), "Номенклатура,МОЛ");
				ТаблицаСписанияПоСчету.Свернуть("Номенклатура,МОЛ");
			Иначе
				ТаблицаСписанияПоСчету = ТаблицаСписания.Скопировать(Новый Структура("СчетУчета", СчетУчета), "Номенклатура");
				ТаблицаСписанияПоСчету.Свернуть("Номенклатура");
			КонецЕсли;
			ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Хозрасчетный");
			ЭлементБлокировки.УстановитьЗначение("Период",      Новый Диапазон(, МоментВремени.Дата));
			ЭлементБлокировки.УстановитьЗначение("Организация", Организация);
			ЭлементБлокировки.УстановитьЗначение("Счет",        СчетУчета);
			СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетУчета);
			ЭлементБлокировки.ИсточникДанных = ТаблицаСписанияПоСчету;
			Для Ном = 1 По СвойстваСчета.КоличествоСубконто Цикл
				Если СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура
					И НЕ СчетУчета = ПланыСчетов.Хозрасчетный.МБП Тогда // Обход ошибки при наложении блокировки
					ЭлементБлокировки.ИспользоватьИзИсточникаДанных(
					ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура, "Номенклатура");
				ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Местонахождение 
					И СуммовойУчетПоСкладам Тогда
					// Если нет суммового учета по складам - суммы получаются запросом без отбора по складам,
					// поэтому блокировать склады не нужно
					ЭлементБлокировки.ИспользоватьИзИсточникаДанных(
						ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Местонахождение, "Местонахождение");
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		Блокировка.Заблокировать();
	КонецЕсли;
	
	// Получение остатков номенклатуры
	МассивНоменклатуры 	= РазличныеЗначенияКолонкиТаблицы(ТаблицаСписания, "Номенклатура");
	МассивМОЛов      	= РазличныеЗначенияКолонкиТаблицы(ТаблицаСписания, "МОЛ");

	// Сортировка счетов учета
	СчетаУчетаН   = Новый Массив; // счета с суммовым учетом только по номенклатуре
	СчетаУчетаНС  = Новый Массив; // счета с суммовым учетом по номенклатуре и складам
	СчетаУчетаНП  = Новый Массив; // счета с суммовым учетом по номенклатуре и партиям
	СчетаУчетаНПС = Новый Массив; // счета с суммовым учетом по номенклатуре, складам и партиям
	
	СчетаУчетаН_Склад  = Новый Массив; // счета с суммовым учетом только по номенклатуре и количественным по складу
	СчетаУчетаНП_Склад = Новый Массив; // счета с суммовым учетом по номенклатуре и партиям и количественным по складу

	СортировкаСчетовУчета(МассивСчетовУчета,
	                      СчетаУчетаН,
	                      СчетаУчетаНС,
	                      СчетаУчетаНП,
	                      СчетаУчетаНПС,
	                      СчетаУчетаН_Склад,
	                      СчетаУчетаНП_Склад);

	ВидыСубконтоН = Новый Массив;
	ВидысубконтоН.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);

	ВидыСубконтоНС = Новый Массив;
	ВидысубконтоНС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидысубконтоНС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Местонахождение);

	ВидыСубконтоНП = Новый Массив;
	ВидысубконтоНП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидысубконтоНП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);

	ВидыСубконтоНПС = Новый Массив;
	ВидыСубконтоНПС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоНПС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	ВидыСубконтоНПС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Местонахождение);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментВремени",      МоментВремени);
	Запрос.УстановитьПараметр("Организация",        Организация);
	Запрос.УстановитьПараметр("МассивСкладов",      МассивМОЛов);
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	Запрос.УстановитьПараметр("СчетаУчетаН",        СчетаУчетаН);
	Запрос.УстановитьПараметр("СчетаУчетаНС",       СчетаУчетаНС);
	Запрос.УстановитьПараметр("СчетаУчетаНП",       СчетаУчетаНП);
	Запрос.УстановитьПараметр("СчетаУчетаНПС",      СчетаУчетаНПС);
	Запрос.УстановитьПараметр("СчетаУчетаН_Склад",  СчетаУчетаН_Склад);
	Запрос.УстановитьПараметр("СчетаУчетаНП_Склад", СчетаУчетаНП_Склад);
	Запрос.УстановитьПараметр("ВидысубконтоН",      ВидысубконтоН);
	Запрос.УстановитьПараметр("ВидысубконтоНС",     ВидысубконтоНС);
	Запрос.УстановитьПараметр("ВидысубконтоНП",     ВидысубконтоНП);
	Запрос.УстановитьПараметр("ВидыСубконтоНПС",    ВидыСубконтоНПС);
	Запрос.УстановитьПараметр("ПустойСклад",        Справочники.Склады.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяПартия",       Документы.ПоступлениеТоваровУслуг.ПустаяСсылка());
	
	ТекстСуммыКоличественныхСкладов = "";
	Текст = "";
	
	// Если не ведется суммовой учет по складам, соберем остатки без учета складов	
	Если СчетаУчетаН_Склад.Количество() > 0 Тогда
		
		ТекстСуммыКоличественныхСкладов = ТекстСуммыКоличественныхСкладов + 
			"ВЫБРАТЬ
			|	Остатки.Счет КАК СчетУчета,
			|	Остатки.Субконто1 КАК Номенклатура,
			|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
			|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Стоимость
			|ПОМЕСТИТЬ ТаблицаСчетаУчетаН
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|			&МоментВремени,
			|			Счет В (&СчетаУчетаН),
			|			&ВидыСубконтоН,
			|				Субконто1 В (&МассивНоменклатуры)
			|				И Организация = &Организация) КАК Остатки
			|
			|СГРУППИРОВАТЬ ПО
			|	Остатки.Счет,
			|	Остатки.Субконто1
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	СчетУчета,
			|	Номенклатура
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОстаткиПоСкладам.Счет КАК СчетУчета,
			|	ОстаткиПоСкладам.Субконто1 КАК Номенклатура,
			|	ЕСТЬNULL(ОстаткиПоСкладам.Субконто2, &ПустойСклад) КАК Склад,
			|	СУММА(ЕСТЬNULL(ОстаткиПоСкладам.КоличествоОстатокДт, 0)) КАК КоличествоОстатокДт
			|ПОМЕСТИТЬ ТаблицаСчетаУчетаН_Склад
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|			&МоментВремени,
			|			Счет В (&СчетаУчетаН_Склад),
			|			&ВидыСубконтоНС,
			|				Субконто1 В (&МассивНоменклатуры)
			|				И Субконто2 В (&МассивСкладов)
			|				И Организация = &Организация) КАК ОстаткиПоСкладам
			|
			|СГРУППИРОВАТЬ ПО
			|	ОстаткиПоСкладам.Счет,
			|	ОстаткиПоСкладам.Субконто1,
			|	ОстаткиПоСкладам.Субконто2
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	СчетУчета,
			|	Номенклатура";

	КонецЕсли;
	
	Если СчетаУчетаНП_Склад.Количество() > 0 Тогда
		
		ТекстСуммыКоличественныхСкладов = ТекстСуммыКоличественныхСкладов + 
			"ВЫБРАТЬ
			|	Остатки.Счет КАК СчетУчета,
			|	Остатки.Субконто1 КАК Номенклатура,
			|	ЕСТЬNULL(Остатки.Субконто2, &ПустаяПартия) КАК ДокументОприходования,
			|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
			|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Стоимость
			|ПОМЕСТИТЬ ТаблицаСчетаУчетаНП
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|			&МоментВремени,
			|			Счет В (&СчетаУчетаНП),
			|			&ВидыСубконтоНП,
			|				Субконто1 В (&МассивНоменклатуры)
			|				И Организация = &Организация) КАК Остатки
			|
			|СГРУППИРОВАТЬ ПО
			|	Остатки.Счет,
			|	Остатки.Субконто1,
			|	Остатки.Субконто2
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	СчетУчета,
			|	Номенклатура,
			|	ДокументОприходования
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОстаткиПоСкладам.Счет КАК СчетУчета,
			|	ОстаткиПоСкладам.Субконто1 КАК Номенклатура,
			|	ЕСТЬNULL(ОстаткиПоСкладам.Субконто2, &ПустаяПартия) КАК ДокументОприходования,
			|	ЕСТЬNULL(ОстаткиПоСкладам.Субконто3, &ПустойСклад) КАК Склад,
			|	СУММА(ЕСТЬNULL(ОстаткиПоСкладам.КоличествоОстатокДт, 0)) КАК КоличествоОстатокДт
			|ПОМЕСТИТЬ ТаблицаСчетаУчетаНП_Склад
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|			&МоментВремени,
			|			Счет В (&СчетаУчетаНП_Склад),
			|			&ВидыСубконтоНПС,
			|				Субконто1 В (&МассивНоменклатуры)
			|				И Субконто3 В (&МассивСкладов)
			|				И Организация = &Организация) КАК ОстаткиПоСкладам
			|
			|СГРУППИРОВАТЬ ПО
			|	ОстаткиПоСкладам.Счет,
			|	ОстаткиПоСкладам.Субконто1,
			|	ОстаткиПоСкладам.Субконто2,
			|	ОстаткиПоСкладам.Субконто3
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	СчетУчета,
			|	Номенклатура,
			|	ДокументОприходования";
		
	КонецЕсли;
	
	Если ТаблицаВозвраты <> Неопределено И ТаблицаВозвраты.Количество() > 0 Тогда
		
		Запрос.УстановитьПараметр("ТаблицаВозвраты",    ТаблицаВозвраты);
	
		Текст = Текст + 
			"ВЫБРАТЬ
			|	ТаблицаВозвраты.Партия,
			|	ТаблицаВозвраты.Склад,
			|	ТаблицаВозвраты.Номенклатура,
			|	&Организация,
			|	ТаблицаВозвраты.СчетУчета,
			|	ТаблицаВозвраты.Количество КАК Количество,
			|	ТаблицаВозвраты.СуммаСписания КАК СуммаСписания
			|ПОМЕСТИТЬ ТаблицаВозвраты
			|ИЗ
			|	&ТаблицаВозвраты КАК ТаблицаВозвраты
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаВозвраты.СчетУчета КАК СчетУчета,
			|	ТаблицаВозвраты.Номенклатура КАК Номенклатура,
			|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
			|	ТаблицаВозвраты.Партия КАК ДокументОприходования,
			|	ТаблицаВозвраты.Склад КАК Склад,
			|	ТаблицаВозвраты.Организация КАК Организация,
			|	СУММА(ТаблицаВозвраты.Количество) КАК КоличествоПоСкладу,
			|	СУММА(ТаблицаВозвраты.Количество) КАК Количество,
			|	СУММА(ТаблицаВозвраты.СуммаСписания) КАК Стоимость
			|ИЗ
			|	ТаблицаВозвраты КАК ТаблицаВозвраты
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаВозвраты.СчетУчета,
			|	ТаблицаВозвраты.Номенклатура,
			|	ТаблицаВозвраты.Склад,
			|	ТаблицаВозвраты.Партия,
			|	ТаблицаВозвраты.Организация";
	КонецЕсли;
	
	Если СчетаУчетаН.Количество() > 0 И СчетаУчетаН_Склад.Количество() = 0 Тогда
		
		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + 
			"ВЫБРАТЬ
			|	Остатки.Счет КАК СчетУчета,
			|	Остатки.Субконто1 КАК Номенклатура,
			|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
			|	&ПустаяПартия КАК ДокументОприходования,
			|	&ПустойСклад КАК Склад,
			|	Остатки.Организация КАК Организация,
			|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
			|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
			|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Стоимость
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|			&МоментВремени,
			|			Счет В (&СчетаУчетаН),
			|			&ВидыСубконтоН,
			|				Субконто1 В (&МассивНоменклатуры)
			|				И Организация = &Организация) КАК Остатки
			|
			|СГРУППИРОВАТЬ ПО
			|	Остатки.Счет,
			|	Остатки.Субконто1,
			|	Остатки.Организация";

	ИначеЕсли СчетаУчетаН.Количество() > 0 Тогда
		
		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст +
			"ВЫБРАТЬ
			|	ОстаткиПоСкладам.СчетУчета,
			|	ОстаткиПоСкладам.Номенклатура,
			|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
			|	&ПустаяПартия КАК ДокументОприходования,
			|	ОстаткиПоСкладам.Склад,
			|	&Организация КАК Организация,
			|	СУММА(ЕСТЬNULL(ОстаткиПоСкладам.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
			|	СУММА(ЕСТЬNULL(СуммовыеОстатки.Количество, 0)) КАК Количество,
			|	СУММА(ЕСТЬNULL(СуммовыеОстатки.Стоимость, 0)) КАК Стоимость
			|ИЗ
			|	ТаблицаСчетаУчетаН_Склад КАК ОстаткиПоСкладам
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетаУчетаН КАК СуммовыеОстатки
			|		ПО ОстаткиПоСкладам.СчетУчета = СуммовыеОстатки.СчетУчета
			|			И ОстаткиПоСкладам.Номенклатура = СуммовыеОстатки.Номенклатура
			|
			|СГРУППИРОВАТЬ ПО
			|	ОстаткиПоСкладам.СчетУчета,
			|	ОстаткиПоСкладам.Номенклатура,
			|	ОстаткиПоСкладам.Склад";

	КонецЕсли;

	Если СчетаУчетаНС.Количество() > 0 Тогда

		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + 
			"ВЫБРАТЬ
			|	Остатки.Счет КАК СчетУчета,
			|	Остатки.Субконто1 КАК Номенклатура,
			|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
			|	&ПустаяПартия КАК ДокументОприходования,
			|	Остатки.Субконто2 КАК Склад,
			|	Остатки.Организация КАК Организация,
			|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
			|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
			|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Стоимость
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|			&МоментВремени,
			|			Счет В (&СчетаУчетаНС),
			|			&ВидыСубконтоНС,
			|				Субконто1 В (&МассивНоменклатуры)
			|				И Субконто2 В (&МассивСкладов)
			|				И Организация = &Организация) КАК Остатки
			|
			|СГРУППИРОВАТЬ ПО
			|	Остатки.Счет,
			|	Остатки.Субконто1,
			|	Остатки.Субконто2,
			|	Остатки.Организация";

	КонецЕсли;

	Если СчетаУчетаНП.Количество() > 0 И СчетаУчетаНП_Склад.Количество() =  0 Тогда

		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
		
		Текст = Текст + 
			"ВЫБРАТЬ
			|	Остатки.Счет КАК СчетУчета,
			|	Остатки.Субконто1 КАК Номенклатура,
			|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
			|	Остатки.Субконто2 КАК ДокументОприходования,
			|	&ПустойСклад КАК Склад,
			|	Остатки.Организация КАК Организация,
			|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
			|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
			|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Стоимость
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|			&МоментВремени,
			|			Счет В (&СчетаУчетаНП),
			|			&ВидыСубконтоНП,
			|				Субконто1 В (&МассивНоменклатуры)
			|				И Организация = &Организация) КАК Остатки
			|
			|СГРУППИРОВАТЬ ПО
			|	Остатки.Счет,
			|	Остатки.Субконто1,
			|	Остатки.Субконто2,
			|	Остатки.Организация";
		
	ИначеЕсли СчетаУчетаНП.Количество() > 0 Тогда
		//СчетаУчетаНП_Склад.Количество() >  0
		
		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + 
			"ВЫБРАТЬ
			|	ОстаткиПоСкладам.СчетУчета,
			|	ОстаткиПоСкладам.Номенклатура,
			|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
			|	ОстаткиПоСкладам.ДокументОприходования,
			|	ОстаткиПоСкладам.Склад,
			|	&Организация КАК Организация,
			|	СУММА(ЕСТЬNULL(ОстаткиПоСкладам.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
			|	СУММА(ЕСТЬNULL(СуммовыеОстатки.Количество, 0)) КАК Количество,
			|	СУММА(ЕСТЬNULL(СуммовыеОстатки.Стоимость, 0)) КАК Стоимость
			|ИЗ
			|	ТаблицаСчетаУчетаНП_Склад КАК ОстаткиПоСкладам
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетаУчетаНП КАК СуммовыеОстатки
			|		ПО ОстаткиПоСкладам.СчетУчета = СуммовыеОстатки.СчетУчета
			|			И ОстаткиПоСкладам.Номенклатура = СуммовыеОстатки.Номенклатура
			|			И ОстаткиПоСкладам.ДокументОприходования = СуммовыеОстатки.ДокументОприходования
			|
			|СГРУППИРОВАТЬ ПО
			|	ОстаткиПоСкладам.СчетУчета,
			|	ОстаткиПоСкладам.Номенклатура,
			|	ОстаткиПоСкладам.ДокументОприходования,
			|	ОстаткиПоСкладам.Склад";

	КонецЕсли;

	Если СчетаУчетаНПС.Количество() > 0 Тогда

		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + 
			"ВЫБРАТЬ
			|	Остатки.Счет КАК СчетУчета,
			|	Остатки.Субконто1 КАК Номенклатура,
			|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
			|	Остатки.Субконто2 КАК ДокументОприходования,
			|	Остатки.Субконто3 КАК Склад,
			|	Остатки.Организация КАК Организация,
			|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
			|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
			|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Стоимость
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|			&МоментВремени,
			|			Счет В (&СчетаУчетаНПС),
			|			&ВидыСубконтоНПС,
			|				Субконто1 В (&МассивНоменклатуры)
			|				И Субконто3 В (&МассивСкладов)
			|				И Организация = &Организация) КАК Остатки
			|
			|СГРУППИРОВАТЬ ПО
			|	Остатки.Счет,
			|	Остатки.Субконто1,
			|	Остатки.Субконто2,
			|	Остатки.Субконто3,
			|	Остатки.Организация";

	КонецЕсли;

	Текст = ТекстСуммыКоличественныхСкладов + Текст;
	
	Запрос.Текст = Текст;

	Результат = Запрос.Выполнить().Выгрузить();

	Если СчетаУчетаНПС.Количество() + СчетаУчетаНП.Количество() <> 0 Тогда
		ОбщегоНазначенияБПВызовСервера.ДобавитьДатуДокументаКРезультатуЗапроса(Результат,"ДокументОприходования", "ДокументОприходованияДата");
		Результат.Сортировать("ДокументОприходованияДата, ДокументОприходования", Новый СравнениеЗначений);
	КонецЕсли;

	Результат.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(10,0));
	НомерСтроки = 1;
	Для каждого СтрокаРезультата Из Результат Цикл
		СтрокаРезультата.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;

	Возврат Результат;

КонецФункции 

Процедура СортировкаСчетовУчета(СчетаУчета,
	СчетаУчетаН,
	СчетаУчетаНС,
	СчетаУчетаНП,
	СчетаУчетаНПС,
	СчетаУчетаН_Склад,
	СчетаУчетаНП_Склад) Экспорт
	
	Для Каждого Счет Из СчетаУчета Цикл
		
		НаСчетеВедетсяСуммовойУчетПоСкладам = БухгалтерскийУчетСервер.ВедетсяСуммовойУчетПоМестонахождениям(Счет);
		НаСчетеВедетсяПартионныйУчет        = БухгалтерскийУчетСервер.НаСчетеВедетсяПартионныйУчет(Счет);
		НаСчетеВедетсяУчетПоСкладам         = БухгалтерскийУчетСервер.ВедетсяУчетПоМестонахождениям(Счет);
		
		Если НаСчетеВедетсяСуммовойУчетПоСкладам
			И НаСчетеВедетсяПартионныйУчет Тогда
			СчетаУчетаНПС.Добавить(Счет);
			
		ИначеЕсли НаСчетеВедетсяПартионныйУчет Тогда
			СчетаУчетаНП.Добавить(Счет);
			Если НаСчетеВедетсяУчетПоСкладам Тогда
				СчетаУчетаНП_Склад.Добавить(Счет);
			КонецЕсли;
			
		ИначеЕсли НаСчетеВедетсяСуммовойУчетПоСкладам Тогда
			СчетаУчетаНС.Добавить(Счет);
			
		Иначе
			СчетаУчетаН.Добавить(Счет);
			Если НаСчетеВедетсяУчетПоСкладам Тогда
				СчетаУчетаН_Склад.Добавить(Счет);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция РазличныеЗначенияКолонкиТаблицы(ТаблицаЗначений, ИмяКолонки)

	ВсеЗначенияКолонки = ТаблицаЗначений.ВыгрузитьКолонку(ИмяКолонки);
	РазличныеЗначения  = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(ВсеЗначенияКолонки);
	Возврат РазличныеЗначения;

КонецФункции

#КонецОбласти

