#Область ОбщиеПроцедурыИФункции

// Возвращает Истина, если проведение документа выполняется в режиме группового перепроведения.
//
// Параметры:
//	Объект - ДокументОбъект - документ, для которого необходимо вернуть режим.
//
// Возвращаемое значение:
//	Булево
Функция ГрупповоеПерепроведение(Объект) Экспорт

	Перем Результат;
	
	Если Объект.ДополнительныеСвойства.Свойство("ГрупповоеПерепроведение", Результат) Тогда
		Если Результат <> Ложь Тогда
			Результат = Истина;
		КонецЕсли;
	Иначе
		Результат = Ложь;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция формирует массив имен регистров, по которым документ имеет движения.
// Вызывается при подготовке записей к регистрации движений.
//
// Параметры:
//  Регистратор  - ДокументСсылка - документ, движения которого анализируются.
//  Движения     - КоллекцияЗначенийСвойстваОбъектаМетаданных - список регистров, для которых документ-регистратор.
//  ИсключаемыеРегистры - Структура, Массив - список имен регистров, которые не требуется проверять.
//
// Возвращаемое значение:
//   Массив      - список имен регистров, имеющих хотя бы одно движение.
//
Функция ПолучитьМассивИспользуемыхРегистров(Регистратор, Движения, ИсключаемыеРегистры = Неопределено) Экспорт

	Если ЗначениеЗаполнено(ИсключаемыеРегистры)
	   И ТипЗнч(ИсключаемыеРегистры) <> Тип("Структура") Тогда
	   
		ИсключаемыеРегистрыСтруктура = Новый Структура;
		Для каждого ИмяРегистра Из ИсключаемыеРегистры Цикл
			ИсключаемыеРегистрыСтруктура.Вставить(ИмяРегистра);
		КонецЦикла;

	Иначе
		
		ИсключаемыеРегистрыСтруктура = ИсключаемыеРегистры;
		
	КонецЕсли;
	
	РегистрыТребующиеОчистки = НовыеРегистрыТребующиеОчистки();
	РегистрыТребующиеОчистки.Регистратор = Регистратор;
	РегистрыТребующиеОчистки.ПроверяемыеРегистры = ИменаПроверяемыхРегистров(Движения, , ИсключаемыеРегистрыСтруктура);
	
	ПроверитьНаличиеДвижений(РегистрыТребующиеОчистки);
	
	Результат = РегистрыТребующиеОчистки.ПроверяемыеРегистры.ВыгрузитьКолонку("ИмяРегистра");
	
	Возврат Результат;

КонецФункции

// Для организации за период получает списки регистров, по которым нет ни одного движения и по которым есть хоть одно движение.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - анализ по данной организации.
//  ДатаНачала   - Дата - начало периода анализа.
//  ДатаОкончания - Дата - конец периода анализа.
//
// Возвращаемое значение:
//   Структура   - ключ = имя регистра (или предопределённое ПоОрганизации),
//                 значение = см. НовыеРегистрыТребующиеОчистки().
//
Функция РегистрыТребующиеОчисткиДляОрганизации(Организация, ДатаНачала, ДатаОкончания) Экспорт
	
	// Инициализируем структуру хранения информации для алгоритма.
	РегистрыТребующиеОчистки = НовыеРегистрыТребующиеОчистки();
	РегистрыТребующиеОчистки.Организация   = Организация;
	РегистрыТребующиеОчистки.ДатаНачала    = ДатаНачала;
	РегистрыТребующиеОчистки.ДатаОкончания = ДатаОкончания;

	ИменаПроверяемыхРегистров = РегистрыТребующиеОчистки.ПроверяемыеРегистры;
	Для каждого ПроверяемыйРегистр Из Метаданные.РегистрыНакопления Цикл
		
		Если Лев(ПроверяемыйРегистр.Имя, 7) = "Удалить" Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйПроверяемыйРегистр = ИменаПроверяемыхРегистров.Добавить();
		НовыйПроверяемыйРегистр.ВидРегистра = "Накопления";
		НовыйПроверяемыйРегистр.ИмяРегистра = ПроверяемыйРегистр.Имя;
		НовыйПроверяемыйРегистр.ЕстьОрганизация = (ПроверяемыйРегистр.Измерения.Найти("Организация") <> Неопределено
			Или ПроверяемыйРегистр.Реквизиты.Найти("Организация") <> Неопределено);
		НовыйПроверяемыйРегистр.ЕстьПериод = Истина;
			
	КонецЦикла;
	РежимПодчинениеРегистратору = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору;
	НепериодическийРегистр = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический;
	Для каждого ПроверяемыйРегистр Из Метаданные.РегистрыСведений Цикл
		
		Если ПроверяемыйРегистр.РежимЗаписи <> РежимПодчинениеРегистратору Тогда
			Продолжить;
		КонецЕсли;
		
		Если Лев(ПроверяемыйРегистр.Имя, 7) = "Удалить" Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйПроверяемыйРегистр = ИменаПроверяемыхРегистров.Добавить();
		НовыйПроверяемыйРегистр.ВидРегистра = "Сведений";
		НовыйПроверяемыйРегистр.ИмяРегистра = ПроверяемыйРегистр.Имя;
		НовыйПроверяемыйРегистр.ЕстьОрганизация = (ПроверяемыйРегистр.Измерения.Найти("Организация") <> Неопределено
			Или ПроверяемыйРегистр.Реквизиты.Найти("Организация") <> Неопределено
			Или ПроверяемыйРегистр.Ресурсы.Найти("Организация") <> Неопределено);
		НовыйПроверяемыйРегистр.ЕстьПериод = (ПроверяемыйРегистр.ПериодичностьРегистраСведений <> НепериодическийРегистр);
			
	КонецЦикла;
	НовыйПроверяемыйРегистр = ИменаПроверяемыхРегистров.Добавить();
	НовыйПроверяемыйРегистр.ВидРегистра = "Бухгалтерии";
	НовыйПроверяемыйРегистр.ИмяРегистра = "Хозрасчетный";
	НовыйПроверяемыйРегистр.ЕстьОрганизация = Истина;
	НовыйПроверяемыйРегистр.ЕстьПериод      = Истина;
	ИменаПроверяемыхРегистров.Индексы.Добавить("ИмяРегистра");
	
	ПроверитьНаличиеДвижений(РегистрыТребующиеОчистки);
	
	РегистрыТребующиеОчисткиПоДокументам = Новый Структура("ПоОрганизации", РегистрыТребующиеОчистки);
	// В эту структуру будут добавлены элементы, где Ключ = имя регистра, а Значение = кеш информации по данному типу.
	
	Возврат РегистрыТребующиеОчисткиПоДокументам;
	
КонецФункции

// Процедура выполняет подготовку наборов записей документа к проведению документа.
// В стандартной ситуации непосредственная проверка наличия ранее сделанных движений по регистрам выполняется позже
// в процедуре УстановитьЗаписьОчищаемыхНаборовЗаписей().
// Существуют следующие нестандартные ситуации:
// 1. Очищает наборы записей от "старых записей" (ситуация возможна только в толстом клиенте).
// 2. Явно передан флаг ВыборочноОчищатьРегистры = Ложь (регистры будут очищены до формирования движений).
// 3. Устанавливает активность наборам записей документов с установленным флагом ручной корректировки.
// 4. Записывает пустые наборы, если дата ранее проведенного документа была сдвинута вперед.
// Вызывается из модуля документа в начале процедуры ОбработкаПроведения().
//
Процедура ПодготовитьНаборыЗаписейКПроведению(Объект, ВыборочноОчищатьРегистры = Истина) Экспорт
	
	// При перепроведении документа очистка предыдущих движений должна выполняться явно, установкой флага Записывать у
	// наборов записей. Чтобы не устанавливать этот флаг всем наборам, необходимо определить, какие из них содержат
	// движения. При интерактивном перепроведении отдельного документа в доп.свойстве РегистрыТребующиеОчисткиПоДокументам
	// сохраняется список наборов записей, которые планируется проверить. При групповом перепроведении это доп.свойство
	// передается из обработки ГрупповоеПерепроведениеДокументов и может уточняться (сужаться список).
	// Далее в процедуре УстановитьЗаписьОчищаемыхНаборовЗаписей мы применим дополнительный критерий для сужения списка и
	// сделаем запросы, анализирующие наличие движений по регистрам. Варианты критериев см. в комментарии ниже.
	// Может быть ситуация, когда очистка движений происходит в текущей процедуре (перед формированием новых движений),
	// а не в УстановитьЗаписьОчищаемыхНаборовЗаписей (после формирования). Варианты нестандартных ситуаций см. ниже.
	
	Перем РегистрыТребующиеОчистки;
	
	// С целью оптимизации производительности запоминаем значение свойства в переменной.
	ПропуститьПроверкуЗапретаИзменения = Объект.ДополнительныеСвойства.Свойство("ПропуститьПроверкуЗапретаИзменения");
	
	Если Объект.ДополнительныеСвойства.ЭтоНовый Тогда // очистка регистров в информационной базе не нужна
		
		Для каждого НаборЗаписей Из Объект.Движения Цикл
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписей.Очистить();
			КонецЕсли;
			Если ПропуститьПроверкуЗапретаИзменения Тогда
				НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
			КонецЕсли;
		КонецЦикла;
		Возврат;
		
	КонецЕсли;
	
	МетаданныеОбъекта = Объект.Метаданные();
	РучнаяКорректировка = ОбщегоНазначения.ЕстьРеквизитОбъекта("РучнаяКорректировка", МетаданныеОбъекта)
						И Объект.РучнаяКорректировка;
						
	// Варианты нестандартных ситуаций:
	// * Не ВыборочноОчищатьРегистры = нужно очистить все регистры до проведения (например, для зарплатных документов).
	// * РучнаяКорректировка = нужно лишь установить активность у наборов записей, т.к. они вводились пользователем.
	// * ДатаДокументаСдвинутаВперед = нужно записать все наборы, у которых сейчас "Записывать = Истина".
	СтандартнаяОчисткаРегистров = ВыборочноОчищатьРегистры 
									И Не РучнаяКорректировка
									И Не Объект.ДополнительныеСвойства.ДатаДокументаСдвинутаВперед;
	
	// Ведем список имен регистров, наличие движений по которым не нужно проверять, для случаев:
	// 1) движения содержались в памяти и были очищены, поэтому Записывать = Истина;
	// 2) после формирования движений документа заполненные наборы записей всегда будут перезаписаны;
	// 3) при запуске обработки "ГрупповоеПерепроведение" определили, что по отдельным регистрам за весь период
	//    нет ни одного движения. Для конкретного документа их проверять не нужно.
	// В данной процедуре список дополняется по варианту 1.
	Если Объект.ДополнительныеСвойства.Свойство("РегистрыТребующиеОчисткиПоДокументам") Тогда // групповое перепроведение
		
		РегистрыТребующиеОчистки = РегистрыТребующиеОчисткиДляТипа(
			Объект.ДополнительныеСвойства.РегистрыТребующиеОчисткиПоДокументам, МетаданныеОбъекта);
			
	Иначе // перепроведение отдельного документа
			
		РегистрыТребующиеОчистки = НовыеРегистрыТребующиеОчистки();
		Если СтандартнаяОчисткаРегистров Тогда
			// Запоминаем те регистры, которые нужно будет проверять.
			РегистрыТребующиеОчистки.ПроверяемыеРегистры = ИменаПроверяемыхРегистров(МетаданныеОбъекта.Движения);
		КонецЕсли;
		
	КонецЕсли;
	
	РегистрыНеТребующиеОчистки = Новый Структура;
	Для каждого НаборЗаписей Из Объект.Движения Цикл
		
		Если НаборЗаписей.Количество() > 0 Тогда
			
			НаборЗаписей.Очистить();
			
			Если СтандартнаяОчисткаРегистров Тогда
				// Этот набор записей будет записан по итогам проведения. Проверять его заполненность не нужно.
				РегистрыНеТребующиеОчистки.Вставить(НаборЗаписей.Метаданные().Имя);
			КонецЕсли;
			
		КонецЕсли;
		Если ПропуститьПроверкуЗапретаИзменения Тогда
			НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		КонецЕсли;
		
	КонецЦикла;

	Если СтандартнаяОчисткаРегистров Тогда
		// Проверка наличия ранее записанных движений в регистрах и их очистка
		// будут происходить в процедуре УстановитьЗаписьОчищаемыхНаборовЗаписей().
		Объект.ДополнительныеСвойства.Вставить("РегистрыТребующиеОчистки", РегистрыТребующиеОчистки);
		
		ПодготовитьНаборыЗаписейСтандартно(Объект, РегистрыНеТребующиеОчистки);
		
	Иначе
		
		Если РегистрыТребующиеОчистки.ПроверяемыеРегистры.Количество() = 0 Тогда // заполняем
			РегистрыТребующиеОчистки.ПроверяемыеРегистры = ИменаПроверяемыхРегистров(
				МетаданныеОбъекта.Движения, , РегистрыНеТребующиеОчистки);
		Иначе // используем имеющийся список при групповом перепроведении
			УдалитьНепроверяемыеРегистры(РегистрыТребующиеОчистки.ПроверяемыеРегистры, РегистрыНеТребующиеОчистки);
		КонецЕсли;
		
		ПараметрыНестандартнойСитуации = Новый Структура;
		ПараметрыНестандартнойСитуации.Вставить("ВыборочноОчищатьРегистры", ВыборочноОчищатьРегистры);
		ПараметрыНестандартнойСитуации.Вставить("РучнаяКорректировка",      РучнаяКорректировка);
		ПараметрыНестандартнойСитуации.Вставить("ДатаДокументаСдвинутаВперед",
			Объект.ДополнительныеСвойства.ДатаДокументаСдвинутаВперед);
		
		ПодготовитьНаборыЗаписейВОсобойСитуации(Объект, РегистрыТребующиеОчистки, ПараметрыНестандартнойСитуации);
	   
	КонецЕсли;
	
КонецПроцедуры

// Взводит флаг записи у наборов, по которым документ имел движения при прошлом проведении.
// Вызывается из модуля документа в конце процедуры ОбработкаПроведения().
//
Процедура УстановитьЗаписьОчищаемыхНаборовЗаписей(Объект) Экспорт 
	
	Перем РегистрыТребующиеОчистки;
	
	// Ведем список имен регистров, наличие движений по которым не нужно проверять, для случаев:
	// 1) движения содержались в памяти и были очищены, поэтому Записывать = Истина;
	// 2) после формирования движений документа заполненные наборы записей всегда будут перезаписаны;
	// 3) при запуске обработки "ГрупповоеПерепроведение" определили, что по отдельным регистрам за весь период
	//    нет ни одного движения. Для конкретного документа их проверять не нужно.
	// В данной процедуре список дополняется по варианту 2 и осуществляется установка "Записывать = Истина" для регистров,
	// по которым ранее были движения, а сейчас пустые наборы.
	
	Если Не Объект.ДополнительныеСвойства.Свойство("РегистрыТребующиеОчистки", РегистрыТребующиеОчистки) Тогда
		// Очистка наборов записей в информационной базе была выполнена в процедуре ПодготовитьНаборыЗаписейКПроведению().
		Возврат;
	КонецЕсли;
	
	РегистрыНеТребующиеОчистки = Новый Структура;
	Для каждого ПроверяемыйРегистр Из РегистрыТребующиеОчистки.ПроверяемыеРегистры Цикл
		
		НаборЗаписей = Объект.Движения[ПроверяемыйРегистр.ИмяРегистра];
		Если НаборЗаписей.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
			
		// Этот набор записей будет записан по итогам проведения. Очищать его старые записи не нужно.
		РегистрыНеТребующиеОчистки.Вставить(ПроверяемыйРегистр.ИмяРегистра);		
		
	КонецЦикла;
	
	УдалитьНепроверяемыеРегистры(РегистрыТребующиеОчистки.ПроверяемыеРегистры, РегистрыНеТребующиеОчистки);
	
	ПроверитьНаличиеДвижений(РегистрыТребующиеОчистки);
	
	Для Каждого ПроверяемыйРегистр Из РегистрыТребующиеОчистки.ПроверяемыеРегистры Цикл
		Объект.Движения[ПроверяемыйРегистр.ИмяРегистра].Записывать = Истина;
	КонецЦикла;

КонецПроцедуры

// Процедура выполняет подготовку наборов записей документа к отмене проведения документа.
// 1. Взводит флаг записи у наборов, по которым документ имел движения при прошлом проведении
// 2. Снимает активность у наборов записей документов с установленным флагом ручной корректировки
// Вызывается из модуля документа при отмене проведения.
//
Процедура ПодготовитьНаборыЗаписейКОтменеПроведения(Объект) Экспорт
	
	МетаданныеОбъекта = Объект.Метаданные();
	
	МассивИменРегистров = ПолучитьМассивИспользуемыхРегистров(
		Объект.Ссылка, 
		МетаданныеОбъекта.Движения);

	ПропуститьПроверкуЗапретаИзменения = Объект.ДополнительныеСвойства.Свойство("ПропуститьПроверкуЗапретаИзменения");

	Для каждого ИмяРегистра Из МассивИменРегистров Цикл
		НаборЗаписей = Объект.Движения[ИмяРегистра];
		НаборЗаписей.Записывать = Истина;
		Если ПропуститьПроверкуЗапретаИзменения Тогда
			НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		КонецЕсли;
	КонецЦикла;
	
	РучнаяКорректировка = МетаданныеОбъекта.Реквизиты.Найти("РучнаяКорректировка") <> Неопределено
		И Объект.РучнаяКорректировка;
	
	Если РучнаяКорректировка Тогда
		Для каждого ИмяРегистра Из МассивИменРегистров Цикл
			Объект.Движения[ИмяРегистра].Прочитать();
			Объект.Движения[ИмяРегистра].УстановитьАктивность(Ложь);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Создает структуру для хранения информации, необходимой алгоритму очистки движений.
//
Функция НовыеРегистрыТребующиеОчистки()
	
	РегистрыТребующиеОчистки = Новый Структура;
	
	// Хранит список регистров, которые можно проанализировать на наличие записанных движений.
	РегистрыТребующиеОчистки.Вставить("ПроверяемыеРегистры", НовыеИменаРегистровДляПроверки());
	
	РегистрыТребующиеОчистки.Вставить("ДатаНачала",    '00010101');
	РегистрыТребующиеОчистки.Вставить("ДатаОкончания", '00010101');
	РегистрыТребующиеОчистки.Вставить("Организация",   Справочники.Организации.ПустаяСсылка());
	РегистрыТребующиеОчистки.Вставить("ИмяДокумента",  "");
	РегистрыТребующиеОчистки.Вставить("Регистратор",   Неопределено);
	
	Возврат РегистрыТребующиеОчистки;
	
КонецФункции

// Создает таблицу для хранения информации, необходимой алгоритму очистки движений.
//
Функция НовыеИменаРегистровДляПроверки()
	
	ПроверяемыеРегистры = Новый ТаблицаЗначений;
	
	// Бухгалтерии, Сведений, Накопления
	ПроверяемыеРегистры.Колонки.Добавить("ВидРегистра",     ОбщегоНазначения.ОписаниеТипаСтрока(11));
	ПроверяемыеРегистры.Колонки.Добавить("ИмяРегистра",     Новый ОписаниеТипов("Строка"));
	ПроверяемыеРегистры.Колонки.Добавить("ЕстьОрганизация", Новый ОписаниеТипов("Булево"));
	ПроверяемыеРегистры.Колонки.Добавить("ЕстьПериод",      Новый ОписаниеТипов("Булево"));
	
	Возврат ПроверяемыеРегистры;
	
КонецФункции

// Для документов определённого типа по организации за период получает списки регистров, по которым нет ни одного
// движения и по которым есть хоть одно движение.
//
// Параметры:
//  РегистрыТребующиеОчисткиПоДокументам - Структура - см. РегистрыТребующиеОчисткиДляОрганизации().
//  МетаданныеДокумента - ОбъектМетаданных:Документ - описание документа.
//
// Возвращаемое значение:
//   Структура   - см. НовыеРегистрыТребующиеОчистки().
//
Функция РегистрыТребующиеОчисткиДляТипа(РегистрыТребующиеОчисткиПоДокументам, МетаданныеДокумента)
	
	Перем РегистрыПоТипуДокументов;
	
	// Добавляем регистры, движений которых нет ни для одного из документов данного типа.
	Если Не РегистрыТребующиеОчисткиПоДокументам.Свойство(МетаданныеДокумента.Имя, РегистрыПоТипуДокументов) Тогда
		
		РегистрыТребующиеОчистки = РегистрыТребующиеОчисткиПоДокументам.ПоОрганизации;
		
		РегистрыПоТипуДокументов = НовыеРегистрыТребующиеОчистки();
		РегистрыПоТипуДокументов.ДатаНачала        = РегистрыТребующиеОчистки.ДатаНачала;
		РегистрыПоТипуДокументов.ДатаОкончания     = РегистрыТребующиеОчистки.ДатаОкончания;
		РегистрыПоТипуДокументов.Организация       = РегистрыТребующиеОчистки.Организация;
		РегистрыПоТипуДокументов.ИмяДокумента      = МетаданныеДокумента.Имя;
		РегистрыПоТипуДокументов.ПроверяемыеРегистры  = ИменаПроверяемыхРегистров(
			МетаданныеДокумента.Движения, РегистрыТребующиеОчистки.ПроверяемыеРегистры);

		ПроверитьНаличиеДвижений(РегистрыПоТипуДокументов);
		
		РегистрыТребующиеОчисткиПоДокументам.Вставить(МетаданныеДокумента.Имя, РегистрыПоТипуДокументов);
			
	КонецЕсли;
	
	// Копируем имеющуюся информацию.
	РегистрыТребующиеОчистки = НовыеРегистрыТребующиеОчистки();
	РегистрыТребующиеОчистки.ПроверяемыеРегистры = РегистрыПоТипуДокументов.ПроверяемыеРегистры.Скопировать();
		
	Возврат РегистрыТребующиеОчистки;
	
КонецФункции

// Список регистров, которые требуется очистить перед началом перепроведения.
//
// Параметры:
//  ИсключаемыеРегистры - Структура - содержит имена регистров, которые не нужно включать в список.
//
// Возвращаемое значение:
//   ТаблицаЗначений - см. ИменаДляПроверки().
//
Функция РегистрыТребующиеПринудительнойОчистки(ПроверяемыеРегистры)
	
	ИменаРегистровПринудительнойОчистки = НовыеИменаРегистровДляПроверки();
	Если ПроверяемыеРегистры.Найти("РасходыПриУСН", "ИмяРегистра") <> Неопределено Тогда
		НовыйПроверяемыйРегистр = ИменаРегистровПринудительнойОчистки.Добавить();
		НовыйПроверяемыйРегистр.ВидРегистра     = "Накопления";
		НовыйПроверяемыйРегистр.ИмяРегистра     = "РасходыПриУСН";
		НовыйПроверяемыйРегистр.ЕстьОрганизация = Истина;
		НовыйПроверяемыйРегистр.ЕстьПериод      = Истина;
	КонецЕсли;
	
	Возврат ИменаРегистровПринудительнойОчистки;
	
КонецФункции

// Только составляем список имен регистров. Непосредственная проверка наличия ранее записанных движений
// будет происходить в процедуре УстановитьЗаписьОчищаемыхНаборовЗаписей().
//
Процедура ПодготовитьНаборыЗаписейСтандартно(Объект, РегистрыНеТребующиеОчистки)
	
	РегистрыТребующиеОчистки = Объект.ДополнительныеСвойства.РегистрыТребующиеОчистки;
	
	РегистрыТребующиеОчистки.Регистратор = Объект.Ссылка;
	
	// В дальнейшем (после формирования движений) в любом случае не проверять.
	ИменаРегистровПринудительнойОчистки = РегистрыТребующиеПринудительнойОчистки(
		РегистрыТребующиеОчистки.ПроверяемыеРегистры);
	Для каждого ПроверяемыйРегистр Из ИменаРегистровПринудительнойОчистки Цикл	
		РегистрыНеТребующиеОчистки.Вставить(ПроверяемыйРегистр.ИмяРегистра);
	КонецЦикла;
	УдалитьНепроверяемыеРегистры(РегистрыТребующиеОчистки.ПроверяемыеРегистры, РегистрыНеТребующиеОчистки);
		
	ПринудительноОчищаемыеРегистры = НовыеРегистрыТребующиеОчистки();
	ПринудительноОчищаемыеРегистры.ПроверяемыеРегистры = ИменаРегистровПринудительнойОчистки;
	ПринудительноОчищаемыеРегистры.Регистратор         = Объект.Ссылка;
	ПроверитьНаличиеДвижений(ПринудительноОчищаемыеРегистры);
	// Если в списке остались регистры, прошедшие проверку, то нужно очистить их сейчас (до начала формирования движений).
	Для каждого ПроверяемыйРегистр Из ПринудительноОчищаемыеРегистры.ПроверяемыеРегистры Цикл
		
		НаборЗаписей = Объект.Движения[ПроверяемыйРегистр.ИмяРегистра];
		НаборЗаписей.Записать();
		НаборЗаписей.Записывать = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверка наличия ранее записанных движений в регистрах и их очистка будут происходить согласно логике
// нестандартной ситуации.
//
Процедура ПодготовитьНаборыЗаписейВОсобойСитуации(Объект, РегистрыТребующиеОчистки, ПараметрыНестандартнойСитуации)
	
	РегистрыТребующиеОчистки.Регистратор = Объект.Ссылка;
	
	ПроверитьНаличиеДвижений(РегистрыТребующиеОчистки);
	
	ПроверяемыеРегистры = РегистрыТребующиеОчистки.ПроверяемыеРегистры;
	
	МассивДвиженийДляПринудительнойОчистки = Новый Массив;
	Если ПараметрыНестандартнойСитуации.ВыборочноОчищатьРегистры Тогда
		
		ИменаРегистровПринудительнойОчистки = РегистрыТребующиеПринудительнойОчистки(
			РегистрыТребующиеОчистки.ПроверяемыеРегистры);
		
		Для каждого ПроверяемыйРегистр Из ПроверяемыеРегистры Цикл
			Объект.Движения[ПроверяемыйРегистр.ИмяРегистра].Записывать = Истина;
			Если ИменаРегистровПринудительнойОчистки.Найти(ПроверяемыйРегистр.ИмяРегистра, "ИмяРегистра") <> Неопределено Тогда
				МассивДвиженийДляПринудительнойОчистки.Добавить(Объект.Движения[ПроверяемыйРегистр.ИмяРегистра]);
			КонецЕсли; 
		КонецЦикла;
		
	Иначе // очищаем все
		
		Для каждого ПроверяемыйРегистр Из ПроверяемыеРегистры Цикл
			Объект.Движения[ПроверяемыйРегистр.ИмяРегистра].Записывать = Истина;
			МассивДвиженийДляПринудительнойОчистки.Добавить(Объект.Движения[ПроверяемыйРегистр.ИмяРегистра]);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПараметрыНестандартнойСитуации.РучнаяКорректировка Тогда
		
		Для каждого ПроверяемыйРегистр Из ПроверяемыеРегистры Цикл
			Объект.Движения[ПроверяемыйРегистр.ИмяРегистра].Прочитать();
			Объект.Движения[ПроверяемыйРегистр.ИмяРегистра].УстановитьАктивность(Истина);
		КонецЦикла;
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Движения документа %1 отредактированы вручную и не могут быть автоматически актуализированы'"), Объект);
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);
		
	ИначеЕсли НЕ ПараметрыНестандартнойСитуации.ДатаДокументаСдвинутаВперед Тогда
		
		Для каждого НаборЗаписей Из МассивДвиженийДляПринудительнойОчистки Цикл
			НаборЗаписей.Записать();
			НаборЗаписей.Записывать = Ложь;
		КонецЦикла; 
		
	КонецЕсли;
	
	Если ПараметрыНестандартнойСитуации.ДатаДокументаСдвинутаВперед Тогда
		Объект.Движения.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Анализирует наличие движений по регистрам. Удаляет регистры без движений из списка в РегистрыТребующиеОчистки.
//
// Параметры:
//  РегистрыТребующиеОчистки - см. НовыеРегистрыТребующиеОчистки().
//
Процедура ПроверитьНаличиеДвижений(РегистрыТребующиеОчистки)
	
	// Отсюда будем удалять пустые регистры.
	ИменаПроверяемыхРегистров = РегистрыТребующиеОчистки.ПроверяемыеРегистры;
	Если ИменаПроверяемыхРегистров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	// Сюда будем переносить найденные пустые регистры.
	РегистрыНеТребующиеОчистки = Новый Структура;
	
	Запрос = Новый Запрос;
	Если ЗначениеЗаполнено(РегистрыТребующиеОчистки.Регистратор) Тогда
		
		ВариантОтбора = "Документ";
		
		Запрос.УстановитьПараметр("Регистратор", РегистрыТребующиеОчистки.Регистратор);
		
	Иначе
		
		ВариантОтбора = ?(ПустаяСтрока(РегистрыТребующиеОчистки.ИмяДокумента), "Организация", "Тип");
		
		Запрос.УстановитьПараметр("Организация",   РегистрыТребующиеОчистки.Организация);
		Запрос.УстановитьПараметр("ДатаНачала",    РегистрыТребующиеОчистки.ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания", РегистрыТребующиеОчистки.ДатаОкончания);
		
	КонецЕсли;
	
	ШаблонПроверяющегоЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	""Хозрасчетный"" КАК ИмяРегистра
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	&ОтборПоРегистру";
	
	// Порциями делаем запросы к информационной базе за период.
	МаксимумПодзапросовВПорции = 50;
	ИменаРегистровТекущейПорции = Новый Массив;
	ОстатокПроверок = МаксимумПодзапросовВПорции + 1; // инициализируем значение для входа в алгоритм
	ТекстПроверяющегоЗапроса = "";
	Для каждого ПроверяемыйРегистр Из ИменаПроверяемыхРегистров Цикл
		
		ОстатокПроверок = ОстатокПроверок - 1;
		Если ОстатокПроверок = 0 Тогда
			
			Если Не ПустаяСтрока(ТекстПроверяющегоЗапроса) Тогда
				// Выполняем проверку, используя собранный запрос.
				Запрос.Текст = ТекстПроверяющегоЗапроса;
				РегистрыСДвижениями = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяРегистра");
				РегистрыБезДвижений = ОбщегоНазначенияКлиентСервер.СократитьМассив(ИменаРегистровТекущейПорции, РегистрыСДвижениями);
				Для каждого ИмяРегистра Из РегистрыБезДвижений Цикл
					РегистрыНеТребующиеОчистки.Вставить(ИмяРегистра);
				КонецЦикла;
				
				ТекстПроверяющегоЗапроса = "";
				ИменаРегистровТекущейПорции.Очистить();
				
			КонецЕсли;
			
			// Инициализируем значением, которое, с одной стороны, скорее всего превышает количество регистров, где данный
			// документ является регистратором, с другой стороны, позволяет при необходимости большой список регистров
			// анализировать порциями.
			ОстатокПроверок = МаксимумПодзапросовВПорции;
			
		КонецЕсли;
		
		ИменаРегистровТекущейПорции.Добавить(ПроверяемыйРегистр.ИмяРегистра);
		
		ТекстПодзапроса = ШаблонПроверяющегоЗапроса;
		Если ОстатокПроверок < МаксимумПодзапросовВПорции Тогда // убираем имя поля из всех подзапросов кроме первого
			ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, " КАК ИмяРегистра", "");
		КонецЕсли;
		Если ВариантОтбора = "Документ" Тогда // конкретный документ
			
			ОтборПоРегистру = "Хозрасчетный.Регистратор = &Регистратор";
			
		Иначе // за период по организации
			
			ОтборПоРегистру = "";
			
			Если ПроверяемыйРегистр.ЕстьПериод Тогда
				
				ОтборПоРегистру = "Хозрасчетный.Период МЕЖДУ &ДатаНачала И &ДатаОкончания";
				
			КонецЕсли;
			
			Если ВариантОтбора = "Тип" Тогда
				
				Если Не ПустаяСтрока(ОтборПоРегистру) Тогда
					ОтборПоРегистру = ОтборПоРегистру + Символы.ПС + Символы.Таб + "И ";
				КонецЕсли;
				ОтборПоРегистру = ОтборПоРегистру + "Хозрасчетный.Регистратор ССЫЛКА Документ."
					+ РегистрыТребующиеОчистки.ИмяДокумента;
				
			КонецЕсли;
			
			Если ПроверяемыйРегистр.ЕстьОрганизация Тогда
				
				Если Не ПустаяСтрока(ОтборПоРегистру) Тогда
					ОтборПоРегистру = ОтборПоРегистру + Символы.ПС + Символы.Таб + "И ";
				КонецЕсли;
				ОтборПоРегистру = ОтборПоРегистру + "Хозрасчетный.Организация = &Организация";
				
			КонецЕсли;
			
			Если ПустаяСтрока(ОтборПоРегистру) Тогда
				ОтборПоРегистру = "ИСТИНА";
			КонецЕсли;
				
		КонецЕсли; 
		ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&ОтборПоРегистру", ОтборПоРегистру);
		ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "Бухгалтерии", ПроверяемыйРегистр.ВидРегистра);
		ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "Хозрасчетный", ПроверяемыйРегистр.ИмяРегистра);
		
		ТекстПроверяющегоЗапроса = ?(ПустаяСтрока(ТекстПроверяющегоЗапроса), "", ТекстПроверяющегоЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|") + ТекстПодзапроса;
	
	КонецЦикла;
	Если Не ПустаяСтрока(ТекстПроверяющегоЗапроса) Тогда
		// Выполняем проверку, используя собранный запрос.
		Запрос.Текст = ТекстПроверяющегоЗапроса;
		РегистрыСДвижениями = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяРегистра");
		РегистрыБезДвижений = ОбщегоНазначенияКлиентСервер.СократитьМассив(ИменаРегистровТекущейПорции, РегистрыСДвижениями);
		Для каждого ИмяРегистра Из РегистрыБезДвижений Цикл
			РегистрыНеТребующиеОчистки.Вставить(ИмяРегистра);
		КонецЦикла;
		
	КонецЕсли;
	
	// Удалим из общего списка те регистры, чья пустота подтверждена.
	УдалитьНепроверяемыеРегистры(ИменаПроверяемыхРегистров, РегистрыНеТребующиеОчистки);
	
КонецПроцедуры

// Удаляет из списка УменьшаемыйНабор те, чьи имена есть в ВычитаемыйНабор.
//
// Параметры:
//  УменьшаемыйНабор - ТаблицаЗначений - см. НовыеИменаРегистровДляПроверки().
//  ВычитаемыйНабор - Структура - вычитаемый список.
//
Процедура УдалитьНепроверяемыеРегистры(УменьшаемыйНабор, ВычитаемыйНабор)
	
	Если ВычитаемыйНабор.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НомерСтрокиПроверки = 0;
	КоличествоПроверяемыхСтрок = УменьшаемыйНабор.Количество();
	Пока НомерСтрокиПроверки < КоличествоПроверяемыхСтрок Цикл
		Если ВычитаемыйНабор.Свойство(УменьшаемыйНабор[НомерСтрокиПроверки].ИмяРегистра) Тогда
			УменьшаемыйНабор.Удалить(НомерСтрокиПроверки);
			КоличествоПроверяемыхСтрок = КоличествоПроверяемыхСтрок - 1;
		Иначе
			НомерСтрокиПроверки = НомерСтрокиПроверки + 1;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Формирует список имен проверяемых регистров, на основе коллекции метаданных движений документа.
//
// Параметры:
//  Движения     - КоллекцияЗначенийСвойстваОбъектаМетаданных - список регистров, для которых документ-регистратор.
//  ПроверяемыеРегистры - ТаблицаЗначений - какие регистры можно использовать. Если не указано, то можно все.
//                                       См. НовыеИменаРегистровДляПроверки().
//  ИсключаемыеРегистры - Структура - какие регистры нельзя использовать. Если не указано, то можно все.
//
// Возвращаемое значение:
//   ТаблицаЗначений - см. НовыеИменаРегистровДляПроверки().
//
Функция ИменаПроверяемыхРегистров(Движения, ПроверяемыеРегистры = Неопределено, ИсключаемыеРегистры = Неопределено)
	
	ИменаПроверяемыхПоТипу = НовыеИменаРегистровДляПроверки();
	
	Если ПроверяемыеРегистры = Неопределено Тогда // вернуть список имен всех регистров.
		
		Если ИсключаемыеРегистры = Неопределено Тогда
			ИсключаемыеРегистры = Новый Структура;
		КонецЕсли;
		
		НепериодическийРегистр = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический;
	    		
		Для каждого ПроверяемыйРегистр Из Движения Цикл
			
			Если ИсключаемыеРегистры.Свойство(ПроверяемыйРегистр.Имя)
			 Или Лев(ПроверяемыйРегистр.Имя, 7) = "Удалить" Тогда
				Продолжить;
			КонецЕсли;
			
			ПризнакГруппыРегистров = ПроверяемыйРегистр.ПолноеИмя();
			ПризнакГруппыРегистров = Лев(ПризнакГруппыРегистров, СтрНайти(ПризнакГруппыРегистров, ".") - 1);
			ПризнакГруппыРегистров = ВРег(ПризнакГруппыРегистров);
			ЭтоРегистрСведений = (ПризнакГруппыРегистров = "РЕГИСТРСВЕДЕНИЙ" Или ПризнакГруппыРегистров = "INFORMATIONREGISTER");
			ЭтоРегистрРасчета = (ПризнакГруппыРегистров = "РЕГИСТРРАСЧЕТА" Или ПризнакГруппыРегистров = "CALCULATIONREGISTER");
			
			НовыйПроверяемыйРегистр = ИменаПроверяемыхПоТипу.Добавить();
			Если ЭтоРегистрСведений Тогда
				НовыйПроверяемыйРегистр.ВидРегистра = "Сведений";
			ИначеЕсли ПроверяемыйРегистр.Имя = "Хозрасчетный" Тогда
				НовыйПроверяемыйРегистр.ВидРегистра = "Бухгалтерии";
			ИначеЕсли ЭтоРегистрРасчета Тогда 
				НовыйПроверяемыйРегистр.ВидРегистра = "Расчета";
			Иначе
				НовыйПроверяемыйРегистр.ВидРегистра = "Накопления";
			КонецЕсли;
			НовыйПроверяемыйРегистр.ИмяРегистра = ПроверяемыйРегистр.Имя;
			НовыйПроверяемыйРегистр.ЕстьОрганизация = (ПроверяемыйРегистр.Измерения.Найти("Организация") <> Неопределено
				Или ПроверяемыйРегистр.Реквизиты.Найти("Организация") <> Неопределено
				Или ЭтоРегистрСведений И ПроверяемыйРегистр.Ресурсы.Найти("Организация") <> Неопределено);
			НовыйПроверяемыйРегистр.ЕстьПериод = (Не ЭтоРегистрСведений
				Или ПроверяемыйРегистр.ПериодичностьРегистраСведений <> НепериодическийРегистр);
			
		КонецЦикла;

	Иначе // вернуть список с ограничением
		
		Для каждого ПроверяемыйРегистр Из Движения Цикл
			
			ИмяПроверяемогоРегистра = ПроверяемыеРегистры.Найти(ПроверяемыйРегистр.Имя, "ИмяРегистра");
			Если ИмяПроверяемогоРегистра = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйПроверяемыйРегистр = ИменаПроверяемыхПоТипу.Добавить();
			НовыйПроверяемыйРегистр.ВидРегистра     = ИмяПроверяемогоРегистра.ВидРегистра;
			НовыйПроверяемыйРегистр.ИмяРегистра     = ИмяПроверяемогоРегистра.ИмяРегистра;
			НовыйПроверяемыйРегистр.ЕстьОрганизация = ИмяПроверяемогоРегистра.ЕстьОрганизация;
			НовыйПроверяемыйРегистр.ЕстьПериод      = ИмяПроверяемогоРегистра.ЕстьПериод;
			
		КонецЦикла;

	КонецЕсли;
	
	Возврат ИменаПроверяемыхПоТипу;
	
КонецФункции

#КонецОбласти
