#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Учет перерасчетов не ведется.
	Если ВедущиеВидыРасчета.Количество() > 0 Тогда 
		ВедущиеВидыРасчета.Очистить();
	КонецЕсли;	
	
	// Определение базовых и ведущих
	Если СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоДневнойСтавке
		Или СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоМесячнойСтавкеПоДням
		Или СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоМесячнойСтавкеПоЧасам
		Или СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоЧасовойСтавке 
		Или СпособРасчета = Перечисления.СпособыРасчетаНачислений.РаботаСверхурочно
		Или СпособРасчета = Перечисления.СпособыРасчетаНачислений.ВыходныеИПраздничные
		Или СпособРасчета = Перечисления.СпособыРасчетаНачислений.Неявка
		Или СпособРасчета = Перечисления.СпособыРасчетаНачислений.ФиксированнойСуммой Тогда
		
		БазовыеВидыРасчета.Очистить();
	КонецЕсли;
	
	Если СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаБольничного
		Или СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаОтпуска
		Или СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоСреднемуЗаработку
		Или СпособРасчета = Перечисления.СпособыРасчетаНачислений.Неявка
		Или СпособРасчета = Перечисления.СпособыРасчетаНачислений.ФиксированнойСуммой Тогда 
		ВытесняющиеВидыРасчета.Очистить();
	КонецЕсли;	
	
	// Определение ТребуетсяРасчетБазы 
	ТребуетсяРасчетБазы = НЕ БазовыеВидыРасчета.Количество() = 0;
	Если ТребуетсяРасчетБазы Тогда 
		ПериодДействияБазовый = Ложь;	
	КонецЕсли; 	
	
	// Определение ТребуетсяРасчетВремени 
	ТребуетсяРасчетВремени = Ложь;
	Если СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоДневнойСтавке
		Или СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоМесячнойСтавкеПоДням
		Или СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоМесячнойСтавкеПоЧасам
		Или СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоЧасовойСтавке
		Или СпособРасчета = Перечисления.СпособыРасчетаНачислений.РаботаСверхурочно 		
		Или СпособРасчета = Перечисления.СпособыРасчетаНачислений.ВыходныеИПраздничные Тогда 		
		ТребуетсяРасчетВремени = Истина;
	КонецЕсли;	
	
	ТребуетсяРасчетВремениВЧасах = Ложь;
	Если СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоМесячнойСтавкеПоЧасам
		Или СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоЧасовойСтавке Тогда 		
		ТребуетсяРасчетВремениВЧасах = Истина;
	КонецЕсли;	
	
	// Определение для ПроизвольнаяФормула
	Если СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула Тогда 
		Если СтрНайти(Формула, "НормаДней") > 0
			Или СтрНайти(Формула, "НормаЧасов") > 0
			Или СтрНайти(Формула, "ФактДней") > 0
			Или СтрНайти(Формула, "ФактЧасов") > 0 Тогда 
			
			ТребуетсяРасчетВремени = Истина;
			Если СтрНайти(Формула, "НормаЧасов") > 0
				Или СтрНайти(Формула, "ФактЧасов") > 0 Тогда 
				ТребуетсяРасчетВремениВЧасах = Истина;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
	
	// Определение Категории
	Если КатегорияРасчета.Пустая() Тогда 
		КатегорияРасчета = Перечисления.КатегорииРасчетов.Первичное;
	КонецЕсли;	
	
	Если БазовыеВидыРасчета.Количество() = 0 Тогда 
		КатегорияРасчета = Перечисления.КатегорииРасчетов.Первичное;
	Иначе 
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВидыНачисленийБазовыеВидыРасчета.ВидРасчета КАК ВидРасчета
			|ПОМЕСТИТЬ ВременнаяТаблицаКатегорияРасчета
			|ИЗ
			|	&БазовыеВидыРасчета КАК ВидыНачисленийБазовыеВидыРасчета
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МАКСИМУМ(ВременнаяТаблицаКатегорияРасчета.ВидРасчета.КатегорияРасчета) КАК КатегорияРасчета
			|ПОМЕСТИТЬ ВременнаяТаблицаКатегорияРасчетаМАКСИМУМ
			|ИЗ
			|	ВременнаяТаблицаКатегорияРасчета КАК ВременнаяТаблицаКатегорияРасчета
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ВременнаяТаблица.КатегорияРасчета = ЗНАЧЕНИЕ(Перечисление.КатегорииРасчетов.Первичное)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииРасчетов.ЗависимоеПервогоУровня)
			|		КОГДА ВременнаяТаблица.КатегорияРасчета = ЗНАЧЕНИЕ(Перечисление.КатегорииРасчетов.ЗависимоеПервогоУровня)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииРасчетов.ЗависимоеВторогоУровня)
			|		КОГДА ВременнаяТаблица.КатегорияРасчета = ЗНАЧЕНИЕ(Перечисление.КатегорииРасчетов.ЗависимоеВторогоУровня)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииРасчетов.ЗависимоеТретьегоУровня)
			|		КОГДА ВременнаяТаблица.КатегорияРасчета = ЗНАЧЕНИЕ(Перечисление.КатегорииРасчетов.ЗависимоеТретьегоУровня)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииРасчетов.ЗависимоеЧетвертогоУровня)
			|		КОГДА ВременнаяТаблица.КатегорияРасчета = ЗНАЧЕНИЕ(Перечисление.КатегорииРасчетов.ЗависимоеЧетвертогоУровня)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииРасчетов.ЗависимоеПятогоУровня)
			|		КОГДА ВременнаяТаблица.КатегорияРасчета = ЗНАЧЕНИЕ(Перечисление.КатегорииРасчетов.ЗависимоеПятогоУровня)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииРасчетов.ЗависимоеШестогоУровня)
			|		КОГДА ВременнаяТаблица.КатегорияРасчета = ЗНАЧЕНИЕ(Перечисление.КатегорииРасчетов.ЗависимоеШестогоУровня)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииРасчетов.ЗависимоеСедьмогоУровня)
			|		КОГДА ВременнаяТаблица.КатегорияРасчета = ЗНАЧЕНИЕ(Перечисление.КатегорииРасчетов.ЗависимоеСедьмогоУровня)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииРасчетов.ЗависимоеВосьмогоУровня)
			|		КОГДА ВременнаяТаблица.КатегорияРасчета = ЗНАЧЕНИЕ(Перечисление.КатегорииРасчетов.ЗависимоеВосьмогоУровня)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииРасчетов.ЗависимоеДевятогоУровня)
			|		КОГДА ВременнаяТаблица.КатегорияРасчета = ЗНАЧЕНИЕ(Перечисление.КатегорииРасчетов.ЗависимоеДевятогоУровня)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииРасчетов.ЗависимоеДесятогоУровня)
			|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииРасчетов.Первичное)
			|	КОНЕЦ КАК КатегорияРасчета
			|ИЗ
			|	ВременнаяТаблицаКатегорияРасчетаМАКСИМУМ КАК ВременнаяТаблица";
		Запрос.УстановитьПараметр("БазовыеВидыРасчета", БазовыеВидыРасчета.Выгрузить());
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		КатегорияРасчета = ВыборкаДетальныеЗаписи.КатегорияРасчета;
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Если СпособРасчета = Перечисления.СпособыРасчетаНачислений.Процентом
		Или СпособРасчета = Перечисления.СпособыРасчетаНачислений.ГодоваяПремия
		Или СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаБольничного
		Или СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаОтпуска
		Или СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоСреднемуЗаработку Тогда 
		
		ПроверяемыеРеквизиты.Добавить("БазовыеВидыРасчета");		
	КонецЕсли;
	
	Если НЕ (СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаОтпуска
		Или СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаБольничного
		Или СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоСреднемуЗаработку) Тогда 
		
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ПериодРасчетаСреднегоЗаработка");
	КонецЕсли;	
	
	Если СпособРасчета = Перечисления.СпособыРасчетаНачислений.ГодоваяПремия Тогда 
		ПроверяемыеРеквизиты.Добавить("Доля");		
	КонецЕсли;	
	
	Если СпособРасчета = Перечисления.СпособыРасчетаНачислений.РаботаСверхурочно Тогда 
		Если НЕ КоличествоЧасов = 0 Тогда 
			ПроверяемыеРеквизиты.Добавить("Коэффициент1");		
		КонецЕсли;
		
		ПроверяемыеРеквизиты.Добавить("Коэффициент2");		
	КонецЕсли;
	
	Если СпособРасчета = Перечисления.СпособыРасчетаНачислений.ВыходныеИПраздничные Тогда 
		ПроверяемыеРеквизиты.Добавить("Коэффициент1");		
	КонецЕсли;	
	
	Если СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула Тогда
		БазовыеВидыРасчета.Очистить();
		КонтрольФормулы(Отказ);		
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Контроль корректности формулы
//
Процедура КонтрольФормулы(Отказ)

	ФормулаДляКонтроля = Формула;

	МассивКонтрольВидовРасчетов = Новый Массив;
	
	ФормулаДляКонтроля = СтрЗаменить(ФормулаДляКонтроля, "[НормаДней]", 1);
	ФормулаДляКонтроля = СтрЗаменить(ФормулаДляКонтроля, "[НормаЧасов]", 1);
	ФормулаДляКонтроля = СтрЗаменить(ФормулаДляКонтроля, "[ФактДней]", 1);
	ФормулаДляКонтроля = СтрЗаменить(ФормулаДляКонтроля, "[ФактЧасов]", 1);
	ФормулаДляКонтроля = СтрЗаменить(ФормулаДляКонтроля, "[Размер]", 1);
	
	Пока Найти(ФормулаДляКонтроля, "[") > 0
		И Найти(ФормулаДляКонтроля, "]") > 0 Цикл 
		
		Позиция1 = Найти(ФормулаДляКонтроля, "[");
		Позиция2 = Найти(ФормулаДляКонтроля, "]") + 1;
		
		НаименованиеВидаРасчета = Сред(ФормулаДляКонтроля, Позиция1, Позиция2 - Позиция1);
		ФормулаДляКонтроля = СтрЗаменить(ФормулаДляКонтроля, НаименованиеВидаРасчета, 1);
		
		НаименованиеВидаРасчета = СтрЗаменить(НаименованиеВидаРасчета, "[", "");
		НаименованиеВидаРасчета = СтрЗаменить(НаименованиеВидаРасчета, "]", "");

		МассивКонтрольВидовРасчетов.Добавить(НаименованиеВидаРасчета);
	КонецЦикла;	
	
	Для Каждого ЭлментМассиваВидРасчета Из МассивКонтрольВидовРасчетов Цикл 
		ВидРасчетаСсылка = ПланыВидовРасчета.ВидыНачислений.НайтиПоНаименованию(ЭлментМассиваВидРасчета, Истина);
		
		Если НЕ ЗначениеЗаполнено(ВидРасчетаСсылка) Тогда 
			ТекстСообщения = НСтр("ru = 'Не верно указан вид расчета ""%НаименованиеВидаРасчета%""!'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеВидаРасчета%", НаименованиеВидаРасчета);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		Иначе 
			СтрокаТаблицы = БазовыеВидыРасчета.Добавить();
			СтрокаТаблицы.ВидРасчета = ВидРасчетаСсылка;                   
		КонецЕсли;	
	КонецЦикла;	
	
	ФормулаДляКонтроля = СтрЗаменить(ФормулаДляКонтроля, " ", "");
	МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ФормулаДляКонтроля, "+-*/()");
	
	Для Каждого ЭлементМассиваСлово Из МассивСлов Цикл
		Попытка
			Сумма = Вычислить("1+" + ЭлементМассиваСлово);
		Исключение
			ТекстСообщения = НСтр("ru = 'Не верное выражение ""%Слово%""!'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Слово%", ЭлементМассиваСлово);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецПопытки;
	КонецЦикла;	

	Если Отказ Тогда 
		Возврат;
	КонецЕсли;	
	
	// Попытка расчета по формуле.
	Попытка
		Сумма = Вычислить(ФормулаДляКонтроля);
	Исключение
	    ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки(),,,,Отказ);
	КонецПопытки;		
КонецПроцедуры // КонтрольФормулы()

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли