
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВалютаУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ЗаполнитьТаблицуКурсовВалют();
	ПолучитьЗначенияПараметровФормы();
	
	Если ДоговорКонтрагентаЕстьРеквизит Тогда	
		НовыйМассив = Новый Массив();
		Если ВалютаУчета <> ВалютаРасчетов Тогда
			НовыйМассив.Добавить(ВалютаУчета);
		КонецЕсли;
		НовыйМассив.Добавить(ВалютаРасчетов);
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(НовыйМассив));
		НовыйМассив2 = Новый Массив();
		НовыйМассив2.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив2);
		Элементы.Валюта.ПараметрыВыбора = НовыеПараметры;
	КонецЕсли;
	
	Параметры.Свойство("ТекстПредупреждения", ТекстПредупреждения);
	
	Если ПустаяСтрока(ТекстПредупреждения) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПредупреждение", "Видимость", Ложь);
	КонецЕсли;
	
	Элементы.Предупреждение.Заголовок = ТекстПредупреждения;
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма, Параметры.Организация, ДатаДокумента);

КонецПроцедуры // ПриСозданииНаСервере()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
// Процедура заполняет таблицу курсов валют
//
Процедура ЗаполнитьТаблицуКурсовВалют()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаДокумента", Параметры.ДатаДокумента);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
		|	КурсыВалютСрезПоследних.Курс КАК Курс,
		|	КурсыВалютСрезПоследних.Кратность КАК Кратность
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних";
	
	ТаблицаРезультатаЗапроса = Запрос.Выполнить().Выгрузить();
	КурсыВалют.Загрузить(ТаблицаРезультатаЗапроса);
	
КонецПроцедуры // ЗаполнитьТаблицуКурсовВалют()

&НаСервере
// Процедура заполняет параметры формы.
//
Процедура ПолучитьЗначенияПараметровФормы()
	
	КлючПоложения = "";
	
	// Тип цены.
	Если Параметры.Свойство("ТипЦен") Тогда
		
		ТипЦен = Параметры.ТипЦен;
		ТипЦенПриОткрытии = Параметры.ТипЦен;
		ТипЦенЕстьРеквизит = Истина;
		
		КлючПоложения = КлючПоложения + "ТипЦен";
		
	Иначе
		
		// Доступность типа цены.
		Элементы.ТипЦен.Видимость = Ложь;
		ТипЦенЕстьРеквизит = Ложь;
		
		Элементы.ВидСкидкиНаценки.Видимость = Ложь;
		ВидСкидкиНаценкиЕстьРеквизит = Ложь;
		
	КонецЕсли;
	
	Если Параметры.Свойство("ДоступностьВалютыДокумента") Тогда
		
		Элементы.Валюта.Доступность = Параметры.ДоступностьВалютыДокумента;
		Элементы.ПересчитатьЦены.Видимость = Параметры.ДоступностьВалютыДокумента;
		
	КонецЕсли;
	
	// Флаг - перезаполнить цены.
	Если НЕ (ТипЦенЕстьРеквизит) Тогда
		
		Элементы.ПерезаполнитьЦены.Видимость = Ложь;
		КлючПоложения = КлючПоложения + "НеПерезаполнятьЦены";
		
	КонецЕсли; 
	
	// Скидки.
	Если Параметры.Свойство("ВидСкидкиНаценки") Тогда
		
		ВидСкидкиНаценки = Параметры.ВидСкидкиНаценки;
		ВидСкидкиНаценкиПриОткрытии = Параметры.ВидСкидкиНаценки;
		ВидСкидкиНаценкиЕстьРеквизит = Истина;
		
		КлючПоложения = КлючПоложения + "ВидСкидкиНаценки";
		
	Иначе
		
		Элементы.ВидСкидкиНаценки.Видимость = Ложь;
		ВидСкидкиНаценкиЕстьРеквизит = Ложь;
		
	КонецЕсли;
	
	// Валюта документа.
	Если Параметры.Свойство("ВалютаДокумента") Тогда
		
		ВалютаДокумента = Параметры.ВалютаДокумента;
		ВалютаДокументаПриОткрытии = Параметры.ВалютаДокумента;
		ВалютаДокументаЕстьРеквизит = Истина;
		
		КлючПоложения = КлючПоложения + "ВалютаДокумента";
		
	Иначе
		
		Элементы.ВалютаДокумента.Видимость = Ложь;
		Элементы.Курс.Видимость = Ложь;
		Элементы.Кратность.Видимость = Ложь;
		Элементы.ПересчитатьЦены.Видимость = Ложь;
		ВалютаДокументаЕстьРеквизит = Ложь;
		
	КонецЕсли;
	
	// Ставка НДС.
	Если Параметры.Свойство("СтавкаНДС") Тогда
		
		СтавкаНДС = Параметры.СтавкаНДС;
		СтавкаНДСПриОткрытии = Параметры.СтавкаНДС;
		СтавкаНДСЕстьРеквизит = Истина;
		
		КлючПоложения = КлючПоложения + "СтавкаНДС";
		
	Иначе
		
		Элементы.СтавкаНДС.Видимость = Ложь;
		СтавкаНДСЕстьРеквизит = Ложь;
		
	КонецЕсли;
	
	// Налоги включать в стоимость.
	Если Параметры.Свойство("СуммаВключаетНалоги") Тогда
		
		СуммаВключаетНалоги = Параметры.СуммаВключаетНалоги;
		СуммаВключаетНалогиПриОткрытии = Параметры.СуммаВключаетНалоги;
		СуммаВключаетНалогиЕстьРеквизит = Истина;
		
		КлючПоложения = КлючПоложения + "СуммаВключаетНалоги";
		
	Иначе
		
		Элементы.СуммаВключаетНалоги.Видимость = Ложь;
		СуммаВключаетНалогиЕстьРеквизит = Ложь;
		
	КонецЕсли;
	
	Если Параметры.Свойство("Контрагент") Тогда
		Контрагент = Параметры.Контрагент;
	КонецЕсли;
	
	// Валюта расчетов.
	Если Параметры.Свойство("ДоговорКонтрагента") Тогда
		
		ВалютаРасчетов	  = Параметры.ДоговорКонтрагента.ВалютаРасчетов;
		КурсРасчетов 	  = Параметры.Курс;
		КратностьРасчетов = Параметры.Кратность;
		
		КурсРасчетовПриОткрытии 	 = Параметры.Курс;
		КратностьРасчетовПриОткрытии = Параметры.Кратность;
		
		ДоговорКонтрагентаЕстьРеквизит = Истина;
		
		КлючПоложения = КлючПоложения + "ДоговорКонтрагента";
		
	Иначе
		
		Элементы.ВалютаРасчетов.Видимость = Ложь;
		Элементы.КурсРасчетов.Видимость = Ложь;
		Элементы.КратностьРасчетов.Видимость = Ложь;
		
		ДоговорКонтрагентаЕстьРеквизит = Ложь;
		
	КонецЕсли;
	
	ПерезаполнитьЦены = Параметры.ПерезаполнитьЦены;
	ПересчитатьЦены   = Параметры.ПересчитатьЦены;
		
	Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
		МассивКурсКратность = КурсыВалют.НайтиСтроки(Новый Структура("Валюта", ВалютаДокумента));
		Если ВалютаДокумента = ВалютаРасчетов
		   И КурсРасчетов <> 0
		   И КратностьРасчетов <> 0 Тогда
			Курс = КурсРасчетов;
			Кратность = КратностьРасчетов;
		Иначе
			Если ЗначениеЗаполнено(МассивКурсКратность) Тогда
				Курс = МассивКурсКратность[0].Курс;
				Кратность = МассивКурсКратность[0].Кратность;
			Иначе
				Курс = 0;
				Кратность = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Хеш = Новый ХешированиеДанных(ХешФункция.MD5);
	Хеш.Добавить(КлючПоложения);
	ЭтотОбъект.КлючСохраненияПоложенияОкна = "ЦеныИВалюта" + СтрЗаменить(Хеш.ХешСумма, " ", "");
	
КонецПроцедуры // ПолучитьЗначенияПараметровФормы()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиенте
// Процедура проверяет правильность заполнения реквизитов формы.
//
Процедура ПроверитьЗаполнениеРеквизитовФормы(Отказ, НеЗаполненТолькоТипЦен = Ложь)
    	
	// Проверка заполненности реквизитов.
	
	// ДисконтныеКарты
	НеЗаполненТолькоТипЦен = Истина;
	// Конец ДисконтныеКарты
	
	// Валюта документа.
	Если ВалютаДокументаЕстьРеквизит Тогда
		Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
            Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Не заполнена валюта документа.'");
			Сообщение.Поле = "ВалютаДокумента";
			Сообщение.Сообщить();
			Отказ = Истина;
			НеЗаполненТолькоТипЦен = Ложь; // ДисконтныеКарты
   		КонецЕсли;
	КонецЕсли;
	
	// Ставка НДС.
	Если СтавкаНДСЕстьРеквизит Тогда
		Если НЕ ЗначениеЗаполнено(СтавкаНДС) Тогда
            Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Не заполнено налогообложение.'");
			Сообщение.Поле = "СтавкаНДС";
			Сообщение.Сообщить();
			Отказ = Истина;
			НеЗаполненТолькоТипЦен = Ложь; // ДисконтныеКарты
   		КонецЕсли;
	КонецЕсли;
	
	// Расчеты.
	Если ДоговорКонтрагентаЕстьРеквизит Тогда
		Если НЕ ЗначениеЗаполнено(КурсРасчетов) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Обнаружен нулевой курс валюты расчетов.'");
			Сообщение.Поле = "КурсРасчетов";
			Сообщение.Сообщить();
			Отказ = Истина;
			НеЗаполненТолькоТипЦен = Ложь; // ДисконтныеКарты
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(КратностьРасчетов) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Обнаружена нулевая кратность курса валюты расчетов.'");
			Сообщение.Поле = "КратностьРасчетов";
			Сообщение.Сообщить();
			Отказ = Истина;
			НеЗаполненТолькоТипЦен = Ложь; // ДисконтныеКарты
		КонецЕсли;
	КонецЕсли;
	
	// Вид цен.
	Если ПерезаполнитьЦены И ТипЦенЕстьРеквизит Тогда
		Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда
			Если ВидСкидкиНаценки.Пустая() И НеЗаполненТолькоТипЦен Тогда // ДисконтныеКарты
				// Можно в документе пересчитать скидки по дисконтной карте.
			Иначе
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = НСтр("ru = 'Не выбран вид цены для заполнения.'");
				Сообщение.Поле = "ТипЦен";
				Сообщение.Сообщить();
				НеЗаполненТолькоТипЦен = Ложь;
			КонецЕсли;
			Отказ = Истина;
    	КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеРеквизитовФормы()

&НаКлиенте
// Процедура проверяет модифицированность формы.
//
Процедура ПроверитьМодифицированностьФормы()

	БылиВнесеныИзменения = Ложь;
	
	ИзмененияТипЦен 				= ?(ТипЦенЕстьРеквизит, ТипЦенПриОткрытии <> ТипЦен, Ложь);
	ИзмененияВидСкидки 				= ?(ВидСкидкиНаценкиЕстьРеквизит, ВидСкидкиНаценкиПриОткрытии <> ВидСкидкиНаценки, Ложь);
	ИзмененияВалютаДокумента 		= ?(ВалютаДокументаЕстьРеквизит, ВалютаДокументаПриОткрытии <> ВалютаДокумента, Ложь);
	ИзмененияСтавкаНДС 				= ?(СтавкаНДСЕстьРеквизит, СтавкаНДСПриОткрытии <> СтавкаНДС, Ложь);
	ИзмененияСуммаВключаетНалоги 	= ?(СуммаВключаетНалогиЕстьРеквизит, СуммаВключаетНалогиПриОткрытии <> СуммаВключаетНалоги, Ложь);
    ИзмененияКурсРасчетов 			= ?(ДоговорКонтрагентаЕстьРеквизит, КурсРасчетовПриОткрытии <> КурсРасчетов, Ложь);
    ИзмененияКратностьРасчетов 		= ?(ДоговорКонтрагентаЕстьРеквизит, КратностьРасчетовПриОткрытии <> КратностьРасчетов, Ложь);
	
	Если ПерезаполнитьЦены
	 ИЛИ ПересчитатьЦены
	 ИЛИ ИзмененияВалютаДокумента
	 ИЛИ ИзмененияСтавкаНДС
	 ИЛИ ИзмененияСуммаВключаетНалоги
	 ИЛИ ИзмененияКурсРасчетов
	 ИЛИ ИзмененияКратностьРасчетов
	 ИЛИ ИзмененияТипЦен
	 ИЛИ ИзмененияВидСкидки Тогда	

		БылиВнесеныИзменения = Истина;

	КонецЕсли;
	
КонецПроцедуры // ПроверитьМодифицированностьФормы()

&НаКлиенте
// Процедура заполнения курса и кратности валюты документа.
//
Процедура ЗаполнитьКурсКратностьВалютыДокумента()
	
	Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
		МассивКурсКратность = КурсыВалют.НайтиСтроки(Новый Структура("Валюта", ВалютаДокумента));
		Если ВалютаДокумента = ВалютаРасчетов
		   И КурсРасчетов <> 0
		   И КратностьРасчетов <> 0 Тогда
			Курс = КурсРасчетов;
			Кратность = КратностьРасчетов;
		Иначе
			Если ЗначениеЗаполнено(МассивКурсКратность) Тогда
				Курс = МассивКурсКратность[0].Курс;
				Кратность = МассивКурсКратность[0].Кратность;
			Иначе
				Курс = 0;
				Кратность = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьКурсКратностьВалютыДокумента()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

&НаКлиенте
// Процедура - обработчик события нажатия кнопки ОК.
//
Процедура КомандаОК(Команда)
	
	Отказ = Ложь;
	НеЗаполненТолькоТипЦенИЗаполненаКарта = Ложь; // ДисконтныеКарты

	ПроверитьЗаполнениеРеквизитовФормы(Отказ, НеЗаполненТолькоТипЦенИЗаполненаКарта);
	ПроверитьМодифицированностьФормы();
    
	Если НЕ Отказ ИЛИ НеЗаполненТолькоТипЦенИЗаполненаКарта Тогда

		СтруктураРеквизитовФормы = Новый Структура;

        СтруктураРеквизитовФормы.Вставить("БылиВнесеныИзменения", 			БылиВнесеныИзменения);

        СтруктураРеквизитовФормы.Вставить("ТипЦен", 						ТипЦен);
		СтруктураРеквизитовФормы.Вставить("ВидСкидки",  					ВидСкидкиНаценки);

		СтруктураРеквизитовФормы.Вставить("ВалютаДокумента", 				ВалютаДокумента);
		СтруктураРеквизитовФормы.Вставить("СтавкаНДС",						СтавкаНДС);
		СтруктураРеквизитовФормы.Вставить("СуммаВключаетНалоги", 			СуммаВключаетНалоги);

		СтруктураРеквизитовФормы.Вставить("ВалютаРасчетов", 				ВалютаРасчетов);
		СтруктураРеквизитовФормы.Вставить("Курс", 							Курс);
		СтруктураРеквизитовФормы.Вставить("КурсРасчетов", 					КурсРасчетов);
		СтруктураРеквизитовФормы.Вставить("Кратность", 						Кратность);
        СтруктураРеквизитовФормы.Вставить("КратностьРасчетов", 				КратностьРасчетов);
                         
		СтруктураРеквизитовФормы.Вставить("ПредВалютаДокумента", 			ВалютаДокументаПриОткрытии);
		СтруктураРеквизитовФормы.Вставить("ПредСтавкаНДС", 					СтавкаНДСПриОткрытии);
		СтруктураРеквизитовФормы.Вставить("ПредСуммаВключаетНалоги", 		СуммаВключаетНалогиПриОткрытии);

        СтруктураРеквизитовФормы.Вставить("ПерезаполнитьЦены", 				ПерезаполнитьЦены И Не Отказ);
        СтруктураРеквизитовФормы.Вставить("ПересчитатьЦены", 				ПересчитатьЦены);

		СтруктураРеквизитовФормы.Вставить("ИмяФормы", 						"ОбщаяФорма.ФормаВалюта");

		Закрыть(СтруктураРеквизитовФормы);

	КонецЕсли;
	
КонецПроцедуры // КомандаОК()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода ВидСкидки.
//
Процедура ВидСкидкиПриИзменении(Элемент)
	
	Если ВидСкидкиНаценкиПриОткрытии <> ВидСкидкиНаценки Тогда
		ПерезаполнитьЦены = Истина;
	КонецЕсли;
	
КонецПроцедуры // ВидСкидкиПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Валюта.
//
Процедура ВалютаПриИзменении(Элемент)
	
	ЗаполнитьКурсКратностьВалютыДокумента();

	Если ЗначениеЗаполнено(ВалютаДокумента)
		
	   И ВалютаДокументаПриОткрытии <> ВалютаДокумента Тогда
  		ПересчитатьЦены = Истина;
		
  	КонецЕсли;

КонецПроцедуры // ВалютаПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода ВалютаРасчетов.
//
Процедура ВалютаРасчетовПриИзменении(Элемент)
	
	ЗаполнитьКурсКратностьВалютыДокумента();

КонецПроцедуры // ВалютаРасчетовПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода КурсРасчетов.
//
Процедура КурсРасчетовПриИзменении(Элемент)
	
	ЗаполнитьКурсКратностьВалютыДокумента();

КонецПроцедуры // КурсРасчетовПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода КратностьРасчетов.
//
Процедура КратностьРасчетовПриИзменении(Элемент)
	
	ЗаполнитьКурсКратностьВалютыДокумента();

КонецПроцедуры // КратностьРасчетовПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода ПерезаполнитьЦены.
//
Процедура ПерезаполнитьЦеныПриИзменении(Элемент)
	
	Если ТипЦенЕстьРеквизит Тогда
		
		Если ПерезаполнитьЦены Тогда
			Если ВидСкидкиНаценки.Пустая() Тогда // ДисконтныеКарты
				Элементы.ТипЦен.АвтоОтметкаНезаполненного = Ложь;
			Иначе
				Элементы.ТипЦен.АвтоОтметкаНезаполненного = Истина;
			КонецЕсли;
		Иначе	
			Элементы.ТипЦен.АвтоОтметкаНезаполненного = Ложь;
			ОтключитьОтметкуНезаполненного();
		КонецЕсли;		
		
	КонецЕсли;
	
КонецПроцедуры // ПерезаполнитьЦеныПриИзменении()
