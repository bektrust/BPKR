#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	Результат.Вставить("ИспользоватьПослеКомпоновкиМакета",  Ложь);
	Результат.Вставить("ИспользоватьПослеВыводаРезультата",  Истина);
	
	Возврат Результат;

КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета) Экспорт 
	
	Возврат "Реестр продаж" + БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(
								ПараметрыОтчета.КонецПериода, 
								ПараметрыОтчета.Организация);
								
	Если ДанныеУчетнойПолитики.ПлательщикЕН И НЕ ДанныеУчетнойПолитики.ПлательщикНДС Тогда
		ВариантОтчета = 1;	
	ИначеЕсли ДанныеУчетнойПолитики.ПлательщикЕН И ДанныеУчетнойПолитики.ПлательщикНДС Тогда
		ВариантОтчета = 2;
	ИначеЕсли ДанныеУчетнойПолитики.ПлательщикНСП И НЕ ДанныеУчетнойПолитики.ПлательщикНДС Тогда
		ВариантОтчета = 3;
	Иначе
		ВариантОтчета = 4;
	КонецЕсли;
								
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();

	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек.Настройки, "СистемныеПоля.НомерПоПорядкуВГруппировке");
	
	Если ВариантОтчета = 2 ИЛИ ВариантОтчета = 4 Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек.Настройки, "НомерСФ");
	КонецЕсли;	
		
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек.Настройки, "Дата");	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек.Настройки, "Покупатель");	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек.Настройки, "ОписаниеПоставки");	
	
	ДобавитьРесурсыОтчета(КомпоновщикНастроек.Настройки, ПараметрыОтчета, ВариантОтчета);
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоДня(ПараметрыОтчета.НачалоПериода));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
	КонецЕсли;
	
	// Группировка
	БухгалтерскиеОтчетыВызовСервера.ДобавитьГруппировки(ПараметрыОтчета, КомпоновщикНастроек);
	
	// Дополнительные данные
	БухгалтерскиеОтчетыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);

	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	Результат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	// Вывод подписей
	БухгалтерскиеОтчеты.ВыводПодписейОтчета(ПараметрыОтчета, Результат);
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета, ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
КонецПроцедуры

// Настройки размещения в панели отчетов.
//
// Параметры:
//   Настройки - Коллекция - Используется для описания настроек отчетов и вариантов
//       см. описание к ВариантыОтчетов.ДеревоНастроекВариантовОтчетовКонфигурации()
//   НастройкиОтчета - СтрокаДереваЗначений - Настройки размещения всех вариантов отчета.
//       см. "Реквизиты для изменения" функции ВариантыОтчетов.ДеревоНастроекВариантовОтчетовКонфигурации().
//
// Описание:
//   См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//
// Вспомогательные методы:
//   НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "<ИмяВарианта>");
//   ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, НастройкиОтчета, Истина/Ложь); // Отчет
//   поддерживает только этот режим.
//
Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
	НастройкиОтчета.ОпределитьНастройкиФормы = Истина;

	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "РеестрПродаж");
	НастройкиВарианта.Описание = НСтр("ru = 'Информация по продажам.'");
КонецПроцедуры

Процедура ЗаполнитьПараметрыРасшифровкиОтчета(Адрес, Расшифровка, ПараметрыРасшифровки) Экспорт
	
	// Инициализируем список пунктов меню
	СписокПунктовМеню = Новый СписокЗначений();
	
	// Заполним соответствие полей которые мы хотим получить из данных расшифровки
	СоответствиеПолей = Новый Соответствие;
	ДанныеОтчета = ПолучитьИзВременногоХранилища(Адрес);
	
	ЗначениеРасшифровки = ДанныеОтчета.ДанныеРасшифровки.Элементы[Расшифровка];
	Если ТипЗнч(ЗначениеРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Для Каждого ПолеРасшифровки Из ЗначениеРасшифровки.ПолучитьПоля() Цикл
			Если ЗначениеЗаполнено(ПолеРасшифровки.Значение) Тогда
				ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Истина);
				ПараметрыРасшифровки.Вставить("Значение",  ПолеРасшифровки.Значение);
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Укажем что открывать объект сразу не нужно
	ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Ложь);
	
	Если ДанныеОтчета = Неопределено Тогда 
		ПараметрыРасшифровки.Вставить("СписокПунктовМеню", СписокПунктовМеню);
		Возврат;
	КонецЕсли;
	
	// Прежде всего интересны данные группировочных полей
	Для Каждого Группировка Из ДанныеОтчета.Объект.Группировка Цикл
		СоответствиеПолей.Вставить(Группировка.Поле);
	КонецЦикла;
	
	// Инициализация пользовательских настроек
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("РежимРасшифровки", 					Истина);
	ДополнительныеСвойства.Вставить("Организация", 							ДанныеОтчета.Объект.Организация);
	ДополнительныеСвойства.Вставить("НачалоПериода", 						ДанныеОтчета.Объект.НачалоПериода);
	ДополнительныеСвойства.Вставить("КонецПериода", 						ДанныеОтчета.Объект.КонецПериода);
	ДополнительныеСвойства.Вставить("ВыводитьЗаголовок",					ДанныеОтчета.Объект.ВыводитьЗаголовок);
	ДополнительныеСвойства.Вставить("ВыводитьПодвал",						ДанныеОтчета.Объект.ВыводитьПодвал);
	ДополнительныеСвойства.Вставить("МакетОформления",						ДанныеОтчета.Объект.МакетОформления);
	
	СписокПунктовМеню.Добавить("РеестрПродаж", "Реестр продаж");
	
	НастройкиРасшифровки = Новый Структура();
	НастройкиРасшифровки.Вставить("РеестрПродаж", ПользовательскиеНастройки);
	ДанныеОтчета.Вставить("НастройкиРасшифровки", НастройкиРасшифровки);
	
	ПоместитьВоВременноеХранилище(ДанныеОтчета, Адрес);
	
	ПараметрыРасшифровки.Вставить("СписокПунктовМеню", СписокПунктовМеню);
	
КонецПроцедуры

// Процедура используется подсистемой варианты отчетов
//
Процедура НастройкиОтчета(Настройки) Экспорт
	
	ВариантыНастроек = ВариантыНастроек();
	Для Каждого Вариант Из ВариантыНастроек Цикл
		 Настройки.ОписаниеВариантов.Вставить(Вариант.Имя,Вариант.Представление);
	КонецЦикла;
	
КонецПроцедуры

Функция ВариантыНастроек() Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Новый Структура("Имя, Представление","РеестрПродаж", "Реестр продаж"));
	Возврат Массив;
	
КонецФункции

// Возвращает набор параметров, которые необходимо сохранять в рассылке отчетов.
// Значения параметров используются при формировании отчета в рассылке.
//
// Возвращаемое значение:
//   Структура - структура настроек, сохраняемых в рассылке с неинициализированными значениями.
//
Функция НастройкиОтчетаСохраняемыеВРассылке() Экспорт
	
	КоллекцияНастроек = Новый Структура;
	
	Для Каждого Показатель Из ПолучитьНаборПоказателей() Цикл
		КоллекцияНастроек.Вставить(Показатель, Ложь);
	КонецЦикла;
	
	КоллекцияНастроек.Вставить("Организация"                      , Справочники.Организации.ПустаяСсылка());
	КоллекцияНастроек.Вставить("РазмещениеДополнительныхПолей"    , 0);
	КоллекцияНастроек.Вставить("Группировка"                      , Неопределено);
	КоллекцияНастроек.Вставить("ДополнительныеПоля"               , Неопределено);
	КоллекцияНастроек.Вставить("ВыводитьЗаголовок"                , Ложь);
	КоллекцияНастроек.Вставить("ВыводитьПодвал"                   , Ложь);
	КоллекцияНастроек.Вставить("МакетОформления"                  , Неопределено);
	КоллекцияНастроек.Вставить("НастройкиКомпоновкиДанных"        , Неопределено);
	
	Возврат КоллекцияНастроек;
	
КонецФункции

// Возвращает структуру параметров, наличие которых требуется для успешного формирования отчета.
//
// Возвращаемое значение:
//   Структура - структура параметров для формирования отчета.
//
Функция ПустыеПараметрыКомпоновкиОтчета() Экспорт
	
	// Часть параметров компоновки отчета используется так же и в рассылке отчета.
	ПараметрыОтчета = НастройкиОтчетаСохраняемыеВРассылке();
	
	// Дополним параметрами, влияющими на формирование отчета.
	ПараметрыОтчета.Вставить("ПериодОтчета"         , Неопределено);
	ПараметрыОтчета.Вставить("НачалоПериода"        , Дата(1,1,1));
	ПараметрыОтчета.Вставить("КонецПериода"         , Дата(1,1,1));
	ПараметрыОтчета.Вставить("РежимРасшифровки"     , Ложь);
	ПараметрыОтчета.Вставить("ДанныеРасшифровки"    , Неопределено);
	ПараметрыОтчета.Вставить("СхемаКомпоновкиДанных", Неопределено);
	ПараметрыОтчета.Вставить("ИдентификаторОтчета"  , "");
	ПараметрыОтчета.Вставить("СтавкаНСП"  			, Справочники.СтавкиНСП.ПустаяСсылка());
	ПараметрыОтчета.Вставить("ДобавлятьДетальныеЗаписи"  , Ложь);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьНаборПоказателей()
	
	НаборПоказателей = Новый Массив;
	НаборПоказателей.Добавить("ПоказательНСПТорговля");
	НаборПоказателей.Добавить("ПоказательНСППрочее");
	НаборПоказателей.Добавить("ПоказательНСПТорговляОсвобожденные");
	НаборПоказателей.Добавить("ПоказательНСППрочееОсвобожденные");
	НаборПоказателей.Добавить("ПоказательНСПСотоваяСвязь");
	НаборПоказателей.Добавить("ПоказательНСПЗастройщикиЖилья");
	НаборПоказателей.Добавить("ПоказательНСПУслугиБанка");
	
	Возврат НаборПоказателей;
КонецФункции

Процедура ДобавитьРесурсыОтчета(ЭлементСтруктуры, ПараметрыОтчета, ВариантОтчета)
	
	Если ВариантОтчета = 2 ИЛИ ВариантОтчета = 4 Тогда
		ГруппаПоставкиБезНДС = ЭлементСтруктуры.Выбор.Элементы.Добавить(тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ГруппаПоставкиБезНДС.Расположение = РасположениеПоляКомпоновкиДанных.Горизонтально;
		ГруппаПоставкиБезНДС.Заголовок = НСтр("ru = 'Поставки стоимость без НДС'"); 
			
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаПоставкиБезНДС, "Освобожденная");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаПоставкиБезНДС, "Нулевая");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаПоставкиБезНДС, "Облагаемая");
		
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ЭлементСтруктуры.Выбор, "НДС");
	КонецЕсли;
	
	Если ВариантОтчета = 3 Тогда		
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ЭлементСтруктуры.Выбор, "ПоставкиБезНСП");
	КонецЕсли;	
	
	Если ВариантОтчета = 3 ИЛИ ВариантОтчета = 4 Тогда
		
		Если ПараметрыОтчета.ПоказательНСПТорговля Тогда
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ЭлементСтруктуры.Выбор, "НСПТорговля");
		КонецЕсли;	
		
		Если ПараметрыОтчета.ПоказательНСППрочее Тогда
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ЭлементСтруктуры.Выбор, "НСППрочее");
		КонецЕсли;
		
		Если ПараметрыОтчета.ПоказательНСПТорговляОсвобожденные Тогда
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ЭлементСтруктуры.Выбор, "НСПТорговляОсвобожденные");
		КонецЕсли;
		
		Если ПараметрыОтчета.ПоказательНСППрочееОсвобожденные Тогда
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ЭлементСтруктуры.Выбор, "НСППрочееОсвобожденные");
		КонецЕсли;
		
		Если ПараметрыОтчета.ПоказательНСПСотоваяСвязь Тогда
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ЭлементСтруктуры.Выбор, "НСПСотоваяСвязь");
		КонецЕсли;
		
		Если ПараметрыОтчета.ПоказательНСПЗастройщикиЖилья Тогда
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ЭлементСтруктуры.Выбор, "НСПЗастройщикиЖилья");
		КонецЕсли;
		
		Если ПараметрыОтчета.ПоказательНСПУслугиБанка Тогда
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ЭлементСтруктуры.Выбор, "НСПУслугиБанка");
		КонецЕсли;
	КонецЕсли;	
		
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ЭлементСтруктуры.Выбор, "Всего");
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
