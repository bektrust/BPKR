
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Инициализирует набор параметров, задающих флаги выполнения дополнительных действий над сущностями, обрабатываемыми
// в процессе формирования отчета.
//
// Возвращаемое значение:
//   Структура - Флаги, задающие необходимость дополнительных действий.
//
Функция ПолучитьПараметрыИсполненияОтчета() Экспорт

	Параметры = Новый Структура();
	Параметры.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	Параметры.Вставить("ИспользоватьПослеКомпоновкиМакета", Истина);
	Параметры.Вставить("ИспользоватьПриВыводеЗаголовка", Истина); 
	Параметры.Вставить("ИспользоватьДанныеРасшифровки", Истина);
	Параметры.Вставить("ИспользоватьПривилегированныйРежим", Истина);

	Возврат Параметры;

КонецФункции

// Формирует текст, выводимый в заголовке отчета.
//
// Параметры:
//   ПараметрыОтчета - Структура - См. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//
// Возвращаемое значение:
//   Строка - текст заголовка с учетом периода.
//
Функция ПолучитьТекстЗаголовка(ПараметрыОтчета) Экспорт

	ПредставлениеОтчета = ПредставлениеОтчетаПрайсЛист();

	Возврат СтрШаблон(НСтр("ru = '%1 от %2'"), ПредставлениеОтчета.Представление, Формат(ПараметрыОтчета.Период, "ДЛФ=ДД"));

КонецФункции

// Настройки размещения в панели отчетов.
//
// Параметры:
//   Настройки - Коллекция - Передается "как есть" из ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//   ОписаниеОтчета - СтрокаДереваЗначений - Настройки этого отчета, сформированные через ВариантыОтчетов.ОписаниеОтчета().
//
Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт

	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, ПредставлениеОтчетаПрайсЛист().Имя);
	ОписаниеВарианта.Размещение.Вставить(Метаданные.Подсистемы.Руководителю.Подсистемы.Продажи, "");

	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;

КонецПроцедуры

// Заполняет описание настроек отчета в коллекции "Настройки".
//
// Параметры:
//   Настройки - Коллекция - Передается "как есть" из ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//
Процедура НастройкиОтчета(Настройки) Экспорт

	ВариантыНастроек = ВариантыНастроек();
	Для Каждого Вариант Из ВариантыНастроек Цикл
		Настройки.ОписаниеВариантов.Вставить(Вариант.Имя, Вариант.Представление);
	КонецЦикла;

КонецПроцедуры

// Возвращает набор параметров, которые необходимо сохранять в рассылке отчетов.
// Значения параметров используются при формировании отчета в рассылке.
//
// Возвращаемое значение:
//   Структура - Структура настроек, сохраняемых в рассылке с неинициализированными значениями.
//
Функция НастройкиОтчетаСохраняемыеВРассылке() Экспорт

	КоллекцияНастроек = Новый Структура;
	КоллекцияНастроек.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	КоллекцияНастроек.Вставить("ТипЦен", Справочники.ТипыЦенНоменклатуры.ПустаяСсылка());
	КоллекцияНастроек.Вставить("Склад", Справочники.Склады.ПустаяСсылка());
	КоллекцияНастроек.Вставить("ВНаличии", Ложь);
	КоллекцияНастроек.Вставить("ПоказательЕдиницаИзмерения", Ложь);
	КоллекцияНастроек.Вставить("ПоказательКод", Ложь);
	КоллекцияНастроек.Вставить("ПоказательАртикул", Ложь);  
	КоллекцияНастроек.Вставить("СвободныйОстаток", Ложь);
	КоллекцияНастроек.Вставить("МакетОформления", Неопределено);
	КоллекцияНастроек.Вставить("НастройкиКомпоновкиДанных", Неопределено);

	Возврат КоллекцияНастроек;

КонецФункции

// Возвращает структуру параметров, наличие которых требуется для успешного формирования отчета.
//
// Возвращаемое значение:
//   Структура - структура параметров для формирования отчета.
//
Функция ПустыеПараметрыКомпоновкиОтчета() Экспорт

	// Часть параметров компоновки отчета используется так же и в рассылке отчета.
	ПараметрыОтчета = НастройкиОтчетаСохраняемыеВРассылке();

	// Дополним параметрами, влияющими на формирование отчета.
	ПараметрыОтчета.Вставить("Период", Дата(1, 1, 1));
	ПараметрыОтчета.Вставить("РежимРасшифровки", Ложь);
	ПараметрыОтчета.Вставить("ДанныеРасшифровки", Неопределено);
	ПараметрыОтчета.Вставить("СхемаКомпоновкиДанных", Неопределено);
	ПараметрыОтчета.Вставить("ИдентификаторОтчета", "");
	ПараметрыОтчета.Вставить("ВыводитьПодвал", Ложь);

	Возврат ПараметрыОтчета;

КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// В процедуре можно доработать компоновщик перед выводом в отчет. Изменения сохранены не будут.
//
// Параметры:
//   ПараметрыОтчета - Структура - См. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//   Схема - СхемаКомпоновкиДанных - Описание получаемых данных.
//   КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - Связь настроек компоновки данных и схемы компоновки.
//
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт

	// Формирование полей отчета

	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();

	ПоляОтчета = Новый Массив;
	ПоляОтчета.Добавить("Номенклатура");
	
	Если ПараметрыОтчета.СвободныйОстаток Тогда
		ПоляОтчета.Добавить("Остаток");   
	КонецЕсли;	
		
	ПоляОтчета.Добавить("Цена");

	Если ПараметрыОтчета.ПоказательЕдиницаИзмерения Тогда
		ПоляОтчета.Вставить(1, "ЕдиницаИзмерения");
	КонецЕсли;

	Если ПараметрыОтчета.ПоказательАртикул Тогда
		ПоляОтчета.Вставить(1, "Артикул");
	КонецЕсли;

	Если ПараметрыОтчета.ПоказательКод Тогда
		ПоляОтчета.Вставить(1, "Код");
	КонецЕсли;
 
	Для каждого ПолеОтчета Из ПоляОтчета Цикл
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек.Настройки.Выбор, ПолеОтчета);
	КонецЦикла;

	// Установка параметров отчета

	ГраницаПериод = Новый Граница(КонецДня(ПараметрыОтчета.Период), ВидГраницы.Включая);

	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Период", ГраницаПериод);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ТипЦен", ПараметрыОтчета.ТипЦен);
	
	Если ПараметрыОтчета.ВНаличии
		И ЗначениеЗаполнено(ПараметрыОтчета.Склад) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Склад", ПараметрыОтчета.Склад); 
	КонецЕсли;	
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Организация", ПараметрыОтчета.Организация);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СчетаУчетаТоваров", БухгалтерскийУчетПовтИсп.СчетаУчетаТоваров());  
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СчетаУчетаМБП", БухгалтерскийУчетПовтИсп.СчетаУчетаМБП());
	
	// Сортировка по умолчанию по представлению номенклатуры

	КомпоновщикНастроек.Настройки.Порядок.Элементы.Очистить();

	// Отбор по остаткам

	ЭлементыОтборОстаткиУдалить = Новый Массив;
	ЭлементОтбораОстаткиДобавить = ПараметрыОтчета.ВНаличии;

	Для каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл

		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
			И ЭлементОтбора.Представление = "ОстатокОтбор" Тогда

			Если ПараметрыОтчета.ВНаличии Тогда
				ЭлементОтбораОстаткиДобавить = Ложь;
			Иначе
				ЭлементыОтборОстаткиУдалить.Добавить(ЭлементОтбора);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Если ЭлементОтбораОстаткиДобавить Тогда
		ГруппаОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		ГруппаОтбора.Использование = Истина;
		ГруппаОтбора.Представление = "ОстатокОтбор";

		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Остаток");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
		ЭлементОтбора.ПравоеЗначение = 0;
		ЭлементОтбора.Использование  = Истина;

		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Услуга");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Истина;
		ЭлементОтбора.Использование  = Истина;

	КонецЕсли;

	Для каждого ЭлементОтбораОстаткиУдалить Из ЭлементыОтборОстаткиУдалить Цикл
		КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбораОстаткиУдалить); 
	КонецЦикла;

КонецПроцедуры

// Обработчик события подсистемы БухгалтерскиеОтчеты.
// Вызов определяется параметром ИспользоватьПриВыводеЗаголовка.
//
// Параметры:
//   ПараметрыОтчета - Структура - См. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//   КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - описание связи настроек и схемы отчета.
//   Результат - ТабличныйДокумент - табличный документ с сформированным отчетом.
//
Процедура ПриВыводеЗаголовка(ПараметрыОтчета, КомпоновщикНастроек, Результат) Экспорт 

	// Данные заголовка отчета

	ДанныеОрганизации = БухгалтерскийУчетСервер.ПолучитьСведенияОбОрганизации(ПараметрыОтчета.Организация, ПараметрыОтчета.Период);
	ФайлЛоготип = Справочники.Организации.ДвоичныеДанныеКартинкиОрганизации(ПараметрыОтчета.Организация, "ФайлЛоготип");

	ПредставлениеОрганизация = ?(ПустаяСтрока(ДанныеОрганизации.НаименованиеПолное), "",
		СтрШаблон(НСтр("ru = 'Организация: %1'"), ДанныеОрганизации.НаименованиеПолное));

	ПредставлениеАдрес = ?(ПустаяСтрока(ДанныеОрганизации.АдрЮР), "",
		СтрШаблон(НСтр("ru = 'Адрес: %1'"), ДанныеОрганизации.АдрЮР));

	ПредставлениеТелефон = ?(ПустаяСтрока(ДанныеОрганизации.Тел), "",
		СтрШаблон(НСтр("ru = 'Телефон: %1'"), ДанныеОрганизации.Тел));

	ПредставлениеEmail = ?(ПустаяСтрока(ДанныеОрганизации.Email), "",
		СтрШаблон(НСтр("ru = 'Email: %1'"), ДанныеОрганизации.Email));
	
	ДанныеЗаголовка = Новый Структура;
	ДанныеЗаголовка.Вставить("ПредставлениеОрганизация", ПредставлениеОрганизация);
	ДанныеЗаголовка.Вставить("ПредставлениеАдрес", ПредставлениеАдрес);
	ДанныеЗаголовка.Вставить("ПредставлениеТелефон", ПредставлениеТелефон);
	ДанныеЗаголовка.Вставить("ПредставлениеEmail", ПредставлениеEmail);

	// Формирование заголовка отчета

	Макет = Отчеты.ПрайсЛист.ПолучитьМакет("ЗаголовокПрайсЛиста");

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок.Параметры.Заголовок = ПолучитьТекстЗаголовка(ПараметрыОтчета);
	Результат.Вывести(ОбластьЗаголовок);

	Если ЗначениеЗаполнено(ФайлЛоготип) Тогда

		ДанныеОрганизацииСЛоготипом = Макет.ПолучитьОбласть("ДанныеОрганизацииСЛоготипом");  
		ДанныеОрганизацииСЛоготипом.Область("КартинкаЛоготип").Картинка = Новый Картинка(ФайлЛоготип);
		ДанныеОрганизацииСЛоготипом.Параметры.Заполнить(ДанныеЗаголовка);
		Результат.Вывести(ДанныеОрганизацииСЛоготипом);

	Иначе

		ДанныеОрганизацииБезЛоготипа = Макет.ПолучитьОбласть("ДанныеОрганизацииБезЛоготипа|Строка");

		Для каждого ТекущиеДанныеЗаголовка Из ДанныеЗаголовка Цикл

			Если Не ПустаяСтрока(ТекущиеДанныеЗаголовка.Значение) Тогда

				ДанныеОрганизацииБезЛоготипа.Параметры.ДанныеСтроки = ТекущиеДанныеЗаголовка.Значение;
				Результат.Вывести(ДанныеОрганизацииБезЛоготипа);

			КонецЕсли;

		КонецЦикла;

		Результат.Вывести(Макет.ПолучитьОбласть("ДанныеОрганизацииБезЛоготипа|Отступ"));

	КонецЕсли;

КонецПроцедуры

// Обработка макета компоновки после его компоновки, но до вывода в отчет.
//
// Параметры:
//   ПараметрыОтчета - Структура - См. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//   МакетКомпоновки - МакетКомпоновкиДанных - описание выводимых данных.
//
Процедура ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки) Экспорт

	// Удалим строку заголовка иерархии номенклатуры 

	МакетШапкиОтчета = БухгалтерскиеОтчеты.ПолучитьМакетШапки(МакетКомпоновки);
	МакетШапкиОтчета.Макет.Удалить(МакетШапкиОтчета.Макет[0]);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВариантыНастроек()

	ПредставлениеОтчета = ПредставлениеОтчетаПрайсЛист();

	Массив = Новый Массив;
	Массив.Добавить(Новый Структура("Имя, Представление", ПредставлениеОтчета.Имя, ПредставлениеОтчета.Представление));

	Возврат Массив;

КонецФункции

Функция ПредставлениеОтчетаПрайсЛист()

	ПредставлениеОтчета = Новый Структура;
	ПредставлениеОтчета.Вставить("Имя", Метаданные.Отчеты.ПрайсЛист.Имя);
	ПредставлениеОтчета.Вставить("Представление", Метаданные.Отчеты.ПрайсЛист.Представление());

	Возврат ПредставлениеОтчета;

КонецФункции

#КонецОбласти

#КонецЕсли