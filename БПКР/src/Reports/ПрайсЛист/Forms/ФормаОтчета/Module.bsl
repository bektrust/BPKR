
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	БухгалтерскиеОтчетыВызовСервера.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);

	// Заголовок формы

	ОбновитьТекстЗаголовка(ЭтотОбъект);

	//
	// Исключение неактуальных настроек оформления

	МакетОформленияИсключения = Новый Массив;
	МакетОформленияИсключения.Добавить("МакетОформленияКомпоновкиДанныхРеестра");

	Для каждого МакетОформленияИсключение Из МакетОформленияИсключения Цикл

		ДоступныйЭлементОформленияУдалить = Элементы.МакетОформления.СписокВыбора.НайтиПоЗначению(МакетОформленияИсключение);

		Если ДоступныйЭлементОформленияУдалить <> Неопределено Тогда

			Элементы.МакетОформления.СписокВыбора.Удалить(ДоступныйЭлементОформленияУдалить);

		КонецЕсли;

	КонецЦикла;
   
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	БухгалтерскиеОтчетыКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
    УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	БухгалтерскиеОтчетыКлиент.ПередЗакрытием(
		ЭтотОбъект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	БухгалтерскиеОтчетыКлиент.ПриЗакрытии(ЭтотОбъект, ЗавершениеРаботы);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Справочник.РассылкиОтчетов.Форма.НастройкаРассылкиБП" Тогда
		ОбработкаНастройкиРассылкиОтчета(ВыбранноеЗначение);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)

	ОбновитьНастройкиОтбораКомпоновщикаИзДанныхФормы();
	БухгалтерскиеОтчетыВызовСервера.ПриСохраненииПользовательскихНастроекНаСервере(ЭтотОбъект, Настройки);

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки, ИспользуютсяСтандартныеНастройки)

	Если ИспользуютсяСтандартныеНастройки Тогда
		Возврат;
	КонецЕсли;

	БухгалтерскиеОтчетыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервереВОтчетеРуководителю(ЭтотОбъект, Настройки);

	ОбновитьТекстЗаголовка(ЭтотОбъект);
	ЗаполнитьДанныеФормыИзНастроекОтбораКомпоновщика();

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеВариантаНаСервере(Настройки)

	БухгалтерскиеОтчетыВызовСервера.УстановитьНастройкиПоУмолчанию(ЭтотОбъект);

	ОбновитьТекстЗаголовка(ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)

	ОбновитьТекстЗаголовка(ЭтотОбъект);

	УстановитьСостояниеРезультатаОтчетаНеАктуальность();

КонецПроцедуры

&НаКлиенте
Процедура ПолеОрганизацияПриИзменении(Элемент)

	ОбщегоНазначенияБПКлиент.ПолеОрганизацияПриИзменении(Элемент, ПолеОрганизация, Отчет.Организация);

	ОбновитьТекстЗаголовка(ЭтотОбъект);

	УстановитьСостояниеРезультатаОтчетаНеАктуальность();

	БухгалтерскиеОтчетыКлиент.ОрганизацияПриИзменении(ЭтотОбъект, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ПолеОрганизацияОткрытие(Элемент, СтандартнаяОбработка)

	ОбщегоНазначенияБПКлиент.ПолеОрганизацияОткрытие(Элемент, СтандартнаяОбработка,
		ПолеОрганизация, СоответствиеОрганизаций);

КонецПроцедуры

&НаКлиенте
Процедура ПолеОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ОбщегоНазначенияБПКлиент.ПолеОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка,
		СоответствиеОрганизаций, Отчет.Организация);

КонецПроцедуры

&НаКлиенте
Процедура ТипЦенПриИзменении(Элемент)

	УстановитьСостояниеРезультатаОтчетаНеАктуальность();

КонецПроцедуры

&НаКлиенте
Процедура ВНаличииПриИзменении(Элемент)
    УстановитьВидимостьДоступностьЭлементов();
	УстановитьСостояниеРезультатаОтчетаНеАктуальность();
КонецПроцедуры
 
&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	УстановитьСостояниеРезультатаОтчетаНеАктуальность();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПоляТабличногоДокументаРезультат

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)

	БухгалтерскиеОтчетыКлиент.ОбработкаРасшифровкиСтандартногоОтчета(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)

	Расшифровка = Неопределено;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийСтраницыОтбор

&НаКлиенте
Процедура НоменклатураОтборПриИзменении(Элемент)

	УстановитьСостояниеРезультатаОтчетаНеАктуальность();

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураОтборОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	УстановитьСостояниеРезультатаОтчетаНеАктуальность();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийСтраницыПоказатели

&НаКлиенте
Процедура ПоказательКодПриИзменении(Элемент)

	УстановитьСостояниеРезультатаОтчетаНеАктуальность();

КонецПроцедуры

&НаКлиенте
Процедура ПоказательАртикулПриИзменении(Элемент)

	УстановитьСостояниеРезультатаОтчетаНеАктуальность();

КонецПроцедуры

&НаКлиенте
Процедура ПоказательЕдиницаИзмеренияПриИзменении(Элемент)

	УстановитьСостояниеРезультатаОтчетаНеАктуальность();

КонецПроцедуры
   
&НаКлиенте
Процедура СвободныйОстатокПриИзменении(Элемент)
	
	УстановитьСостояниеРезультатаОтчетаНеАктуальность();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийСтраницыОформление

&НаКлиенте
Процедура МакетОформленияПриИзменении(Элемент)

	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Отчет.КомпоновщикНастроек.Настройки, "МакетОформления", МакетОформления);

	УстановитьСостояниеРезультатаОтчетаНеАктуальность();

КонецПроцедуры

&НаКлиенте
Процедура УсловноеОформлениеПриИзменении(Элемент)

	УстановитьСостояниеРезультатаОтчетаНеАктуальность();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьОтчет(Команда)

	ЗапуститьФормированиеОтчета();

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьНастройки(Команда)

	СкрытьНастройки();

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройки(Команда)

	ОткрытьНастройки();

КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)

	БухгалтерскиеОтчетыКлиент.ОтчетСохранитьКак(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочте(Команда)

	БухгалтерскиеОтчетыКлиент.ОтправитьОтчет(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура НастроитьРассылкуОтчета(Команда)

	ЗаполнитьНастройкиОтчетаДляРассылки();

	РассылкаОтчетовБПКлиент.НастроитьРассылкуИзОтчета(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура РаскрытьНаВесьЭкран(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок", Заголовок);
	ПараметрыОткрытия.Вставить("Результат", АдресХранилищаРезультата());

	ОткрытьФорму("ОбщаяФорма.ФормаПредпросмотраОтчета", ПараметрыОткрытия, ЭтотОбъект);
	ТекущийЭлемент = Элементы.СформироватьОтчет;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНастройкиПоУмолчанию(Команда)
	УстановитьНастройкиПоУмолчаниюНаСервере();
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастроитьКолонтитулы(Команда)
	Перем Настройки;
	
	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("НастройкиКолонтитулов", Настройки);
	
	ОткрытьФорму("ОбщаяФорма.НастройкаКолонтитулов",
		Новый Структура("Настройки", Настройки),
		ЭтотОбъект,
		УникальныйИдентификатор,,,
		Новый ОписаниеОповещения("ЗапомнитьНастройкиКолонтитулов", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

// Обработчик закрытия общей формы НастройкаКолонтитулов.
//  См. Синтакс-помощник: ОткрытьФорму - ОписаниеОповещенияОЗакрытии.
//
&НаКлиенте
Процедура ЗапомнитьНастройкиКолонтитулов(Настройки, ДополнительныеПараметры) Экспорт 
	ПредыдущиеНастройки = Неопределено;
	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("НастройкиКолонтитулов", ПредыдущиеНастройки);
	
	Если Настройки <> ПредыдущиеНастройки Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("НастройкиКолонтитулов", Настройки);
КонецПроцедуры

#Область ОбработчикиКомандРасчетаПоказателей

&НаКлиенте
Процедура РассчитатьСумму(Команда)
	РассчитатьПоказатели(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьКоличество(Команда)
	РассчитатьПоказатели(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСреднее(Команда)
	РассчитатьПоказатели(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьМинимум(Команда)
	РассчитатьПоказатели(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьМаксимум(Команда)
	РассчитатьПоказатели(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВсеПоказатели(Команда)
	УстановитьВидимостьПоказателей(Не Элементы.РассчитатьВсеПоказатели.Пометка);
КонецПроцедуры

&НаКлиенте
Процедура СвернутьПоказатели(Команда)
	УстановитьВидимостьПоказателей(Ложь);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПодготовитьПараметрыОтчетаНаСервере()

	ОбновитьНастройкиОтбораКомпоновщикаИзДанныхФормы();

	МенеджерОтчета = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ЭтотОбъект.ИмяФормы);

	ПараметрыОтчета = МенеджерОтчета.ПустыеПараметрыКомпоновкиОтчета();

	ПараметрыОтчета.Период                     = Отчет.Период;
	ПараметрыОтчета.Организация                = Отчет.Организация;
	ПараметрыОтчета.ВНаличии                   = Отчет.ВНаличии;
	ПараметрыОтчета.ТипЦен                     = Отчет.ТипЦен;
	ПараметрыОтчета.Склад                      = Отчет.Склад;
	ПараметрыОтчета.ПоказательКод              = Отчет.ПоказательКод;
	ПараметрыОтчета.ПоказательАртикул          = Отчет.ПоказательАртикул;
	ПараметрыОтчета.СвободныйОстаток           = Отчет.СвободныйОстаток;
	ПараметрыОтчета.ПоказательЕдиницаИзмерения = Отчет.ПоказательЕдиницаИзмерения;
	ПараметрыОтчета.МакетОформления            = МакетОформления;
	ПараметрыОтчета.РежимРасшифровки           = Ложь;
	ПараметрыОтчета.ДанныеРасшифровки          = ДанныеРасшифровки;
	ПараметрыОтчета.СхемаКомпоновкиДанных      = ПолучитьИзВременногоХранилища(СхемаКомпоновкиДанных);
	ПараметрыОтчета.ИдентификаторОтчета        = БухгалтерскиеОтчетыКлиентСервер.ПолучитьИдентификаторОбъекта(ЭтотОбъект);
	ПараметрыОтчета.НастройкиКомпоновкиДанных  = Отчет.КомпоновщикНастроек.ПолучитьНастройки();

	Возврат ПараметрыОтчета;

КонецФункции

&НаСервере
Функция СформироватьОтчетНаСервере() Экспорт

	Если Не ПроверитьЗаполнение() Тогда 
		Возврат Неопределено;
	КонецЕсли;

	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);

	ИдентификаторЗадания = Неопределено;

	//БухгалтерскиеОтчеты.ЗаписатьОперациюБизнесСтатистики(ЭтотОбъект, "СформироватьОтчет", НастройкиОтчетаДляСтатистики());
 
	ПараметрыОтчета = ПодготовитьПараметрыОтчетаНаСервере();

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =
		БухгалтерскиеОтчетыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтотОбъект);

	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне(
		"БухгалтерскиеОтчетыВызовСервера.СформироватьОтчет", ПараметрыОтчета, ПараметрыВыполнения);

	ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;

	Возврат РезультатВыполнения;

КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанныеНаСервере(АдресХранилища)

	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Результат = РезультатВыполнения.Результат;
	ДанныеРасшифровки = РезультатВыполнения.ДанныеРасшифровки;

	ИдентификаторЗадания = Неопределено;

	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");

	ДополнительныеСвойства = Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства;

КонецПроцедуры

&НаСервере
Процедура ОбработкаНастройкиРассылкиОтчета(ВыбранноеЗначение)
	
	РассылкаОтчетовБП.ФормаОтчетаОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиОтчетаДляРассылки()
	
	РассылкаОтчетовБП.ЗаполнитьНастройкиОтчетаДляРассылки(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиОтбораКомпоновщикаИзДанныхФормы()

	Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();

	Если НоменклатураОтбор.Количество() <> 0 Тогда

		ГруппаОтбора = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		ГруппаОтбора.Использование = Истина;
		ГруппаОтбора.Представление = "НоменклатураОтбор";

		Для каждого ТекЗнач Из НоменклатураОтбор Цикл

			ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Номенклатура");
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВИерархии;
			ЭлементОтбора.ПравоеЗначение = ТекЗнач.Значение;
			ЭлементОтбора.Использование  = Истина; 

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормыИзНастроекОтбораКомпоновщика()

	НоменклатураОтбор.Очистить();

	Для каждого ТекущийЭлементОтбора Из Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл

		Если ТипЗнч(ТекущийЭлементОтбора) <> Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
			Или ТекущийЭлементОтбора.Представление <> "НоменклатураОтбор" Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого ТекущийЭлементОтбораНоменклатура Из ТекущийЭлементОтбора.Элементы Цикл

			Если ТипЗнч(ТекущийЭлементОтбораНоменклатура) <> Тип("ЭлементОтбораКомпоновкиДанных")
				Или ТипЗнч(ТекущийЭлементОтбораНоменклатура.ПравоеЗначение) <> Тип("СправочникСсылка.Номенклатура") Тогда
				Продолжить;
			КонецЕсли;
	
			НоменклатураОтбор.Добавить(ТекущийЭлементОтбораНоменклатура.ПравоеЗначение);  

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()
	Элементы.Склад.Видимость = Отчет.ВНаличии;
КонецПроцедуры 


//&НаСервере
//Функция НастройкиОтчетаДляСтатистики()
//	
//	ПараметрыОтчета = ПодготовитьПараметрыОтчетаНаСервере();
//	
//	НастройкиДляСтатистики = БухгалтерскиеОтчеты.ПоказателиОтчетаРуководителяДляСтатистики(ПараметрыОтчета);
//	
//	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет);
//	
//	Возврат ОбщегоНазначенияБП.ЗначениеВСтрокуJSON(НастройкиДляСтатистики, ПараметрыЗаписиJSON);
//	
//КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки)

	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Отчеты руководителя.Прайс лист'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Предупреждение,
		Метаданные.Отчеты.ПрайсЛист,
		,
		ТекстОшибки);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТекстЗаголовка(Форма)

	Отчет = Форма.Отчет;

	Если ЗначениеЗаполнено(Отчет.Организация) И Форма.ИспользуетсяНесколькоОрганизаций Тогда
		ПредставлениеОрганизации = БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстОрганизация(
			Отчет.Организация);
		ТекстЗаголовка = СтрШаблон(НСтр("ru = 'Прайс-лист %1'"), ПредставлениеОрганизации);
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Прайс-лист'");
	КонецЕсли;

	Форма.Заголовок = ТекстЗаголовка;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки()

	Элементы.ПрименитьНастройки.КнопкаПоУмолчанию = Истина;
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.НастройкиОтчета;

КонецПроцедуры

&НаКлиенте
Процедура СкрытьНастройки()

	Элементы.СформироватьОтчет.КнопкаПоУмолчанию = Истина;
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.Отчет;

КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьФормированиеОтчета()

	ОчиститьСообщения();

	ДлительнаяОперация = СформироватьОтчетНаСервере();
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");

		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;

		ОписаниеОповещения = Новый ОписаниеОповещения("СформироватьОтчетЗавершение", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);

		СкрытьНастройки();
	Иначе
		ПоказатьОшибкиФормирования(ДлительнаяОперация);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибкиФормирования(ДлительнаяОперация)

	ЗаписатьОшибкуВЖурналРегистрации(ДлительнаяОперация.ПодробноеПредставлениеОшибки);

	СообщениеОбОшибке = СтрШаблон(НСтр("ru = 'Отчет не сформирован! %1'"), ДлительнаяОперация.КраткоеПредставлениеОшибки);
	ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке);

	ОтображениеСостояния = Элементы.Результат.ОтображениеСостояния;
	ОтображениеСостояния.Видимость = Истина;
	ОтображениеСостояния.Текст = СообщениеОбОшибке;
	ОтображениеСостояния.Картинка = Новый Картинка;

КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетЗавершение(ДлительнаяОперация, ДополнительныеПараметры) Экспорт

	Если ДлительнаяОперация = Неопределено Тогда
		Возврат; // Отменена
	КонецЕсли;

	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		ЗагрузитьПодготовленныеДанныеНаСервере(ДлительнаяОперация.АдресРезультата);
	Иначе
		ПоказатьОшибкиФормирования(ДлительнаяОперация);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция АдресХранилищаРезультата()
	
	Возврат ПоместитьВоВременноеХранилище(Результат, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура УстановитьСостояниеРезультатаОтчетаНеАктуальность()

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиПоУмолчаниюНаСервере()
	БухгалтерскиеОтчетыВызовСервера.УстановитьНастройкиПоУмолчанию(ЭтотОбъект);
КонецПроцедуры 

#Область РасчетПоказателейВыделенныхЯчеек

// Выполняет расчет и вывод показателей выделенных областей ячеек табличного документа.
//
// Параметры:
//  ТекущаяКоманда - Строка - имя команды расчета показателя, например, "РассчитатьСумму".
//                      Определяет, какой показатель является основным.
//
&НаКлиенте
Процедура РассчитатьПоказатели(ТекущаяКоманда = "РассчитатьСумму")
	// Расчет показателей.
	ПараметрыРасчета = БухгалтерскиеОтчетыКлиент.ПараметрыРасчетаПоказателейЯчеек(Результат);
	Если ПараметрыРасчета.РассчитатьНаСервере Тогда 
		РасчетныеПоказатели = РасчетныеПоказателиСервер(ПараметрыРасчета);
	Иначе
		РасчетныеПоказатели = ОбщегоНазначенияСлужебныйКлиентСервер.РасчетныеПоказателиЯчеек(
			Результат, ПараметрыРасчета.ВыделенныеОбласти);
	КонецЕсли;
	
	// Установка значений показателей.
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РасчетныеПоказатели);
	
	// Переключение и форматирование показателей.
	КомандыПоказателей = КомандыПоказателей();
	Для Каждого Команда Из КомандыПоказателей Цикл 
		Элементы[Команда.Ключ].Пометка = Ложь;
		
		ЗначениеПоказателя = РасчетныеПоказатели[Команда.Значение];
		РазрядностьПоказателя = Мин(СтрДлина(Макс(ЗначениеПоказателя, -ЗначениеПоказателя) % 1) - 2, 4);
		
		Элементы[Команда.Значение].ФорматРедактирования = "ЧДЦ=" + РазрядностьПоказателя + "; ЧРГ=' '; ЧН=0";
	КонецЦикла;
	Элементы[ТекущаяКоманда].Пометка = Истина;
	
	// Вывод основного показателя.
	ТекущийПоказатель = КомандыПоказателей[ТекущаяКоманда];
	БыстрыйПоказатель = ЭтотОбъект[ТекущийПоказатель];
	Элементы.БыстрыйПоказатель.ФорматРедактирования = Элементы[ТекущийПоказатель].ФорматРедактирования;
	Элементы.ГруппаВидыПоказателей.Картинка = БиблиотекаКартинок[ТекущийПоказатель];
КонецПроцедуры

// Рассчитывает показатели числовых ячеек в табличном документе.
//  см. ОтчетыКлиентСервер.РасчетныеПоказателиЯчеек.
//
&НаСервере
Функция РасчетныеПоказателиСервер(ПараметрыРасчета)
	Возврат ОбщегоНазначенияСлужебныйКлиентСервер.РасчетныеПоказателиЯчеек(Результат, ПараметрыРасчета.ВыделенныеОбласти);
КонецФункции

// Определяет соответствие между командами расчета показателей и показателями.
//
// Возвращаемое значение:
//   Соответствие - Ключ - имя команды, Значение - имя показателя.
//
&НаКлиенте
Функция КомандыПоказателей()
	КомандыПоказателей = Новый Соответствие();
	КомандыПоказателей.Вставить("РассчитатьСумму", "Сумма");
	КомандыПоказателей.Вставить("РассчитатьКоличество", "Количество");
	КомандыПоказателей.Вставить("РассчитатьСреднее", "Среднее");
	КомандыПоказателей.Вставить("РассчитатьМинимум", "Минимум");
	КомандыПоказателей.Вставить("РассчитатьМаксимум", "Максимум");
	
	Возврат КомандыПоказателей;
КонецФункции

// Управляет признаком видимости панели расчетных показателей.
//
// Параметры:
//  Видимость - Булево - Признак включения / выключения видимости панели показателей.
//              См. также Синтакс-помощник: ГруппаФормы.Видимость.
//
&НаКлиенте
Процедура УстановитьВидимостьПоказателей(Видимость)
	Элементы.ОбластьПоказателей.Видимость = Видимость;
	Элементы.РассчитатьВсеПоказатели.Пометка = Видимость;
КонецПроцедуры

#КонецОбласти

#КонецОбласти