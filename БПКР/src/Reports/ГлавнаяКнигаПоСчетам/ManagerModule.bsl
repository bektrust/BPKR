#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	//Результат.Вставить("ИспользоватьПослеКомпоновкиМакета",  Истина);
	Результат.Вставить("ИспользоватьПослеВыводаРезультата",  Истина);
	
	Возврат Результат;

КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета) Экспорт 
	
	Возврат "Главная книга " + БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
		
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоДня(ПараметрыОтчета.НачалоПериода));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПредставлениеПериода", БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода));
	
	// Дополнительные данные
	БухгалтерскиеОтчетыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);

	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
	// Изменение заголовка полей.
	// Подготовим информацию о переопределении заголовка полей.
	// Для этого, создадим массив, который будет содержать информацию: 
	// ИмяПоля - значения свойства "Путь" в наборе данных, Заголовок - текст заголовка.
	СписокПолей = Новый Массив; 
	ПолеНачальныйОстаток = Новый Структура("ИмяПоля, Заголовок", "Счет", НСтр("ru = 'Главная книга по счету '"));
	СписокПолей.Добавить(ПолеНачальныйОстаток);
	
	стрНачалоПериода = Формат(ПараметрыОтчета.НачалоПериода, "ДФ=dd.MM.yyyy; ДП='Пустая дата'");
	ПолеНачальныйОстаток = Новый Структура("ИмяПоля, Заголовок", "СуммаНачальныйОстаток", СтрШаблон(НСтр("ru = 'Остаток на %1'"), стрНачалоПериода));
	СписокПолей.Добавить(ПолеНачальныйОстаток);
	
	// Получим список полей и зададим новый заголовок, обойдя элементы в цикле.
	ВыбранныеПоля = КомпоновщикНастроек.Настройки.Выбор.Элементы; // Первый уровень полей.
	Для каждого ВыбранноеПоле Из ВыбранныеПоля Цикл
		Для Каждого ЭлементМассива Из СписокПолей Цикл
			ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ЭлементМассива.ИмяПоля);
			Если ВыбранноеПоле.Поле = ПолеКомпоновки Тогда
				ВыбранноеПоле.Заголовок = ЭлементМассива.Заголовок;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	
КонецПроцедуры

//// В процедуре можно доработать макет перед выводом в отчет.
////
//// Параметры:
////   ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
////   МакетКомпоновки - МакетКомпоновкиДанных - схема получения данных.
////
//Процедура ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки) Экспорт
//	
//	// Обработка шапки отчета.
//	// Шапка отчета состоит из 4 макетов, макет шапки таблицы, и 3 макета группировок колонок.
//	// Поместим ссылки на них в массив, для дальнейшей обработки.
//	МакетШапкиТаблицы = БухгалтерскиеОтчетыВызовСервера.ПолучитьМакетШапки(МакетКомпоновки);
//	
//	МакетыШапкиОтчета = Новый Массив;
//	МакетыШапкиОтчета.Добавить(МакетШапкиТаблицы.Имя);

//	// Определим тело макета таблицы.
//	ТелоМакета = Неопределено;
//	Для Каждого ТелоМакета Из МакетКомпоновки.Тело Цикл 
//		Если ТелоМакета.Имя = "Таблица" Тогда 
//			Прервать;
//		КонецЕсли;	
//	КонецЦикла;	

//	Для Каждого Колонка Из ТелоМакета.Колонки Цикл

//		Для Каждого ТелоГруппировки Из Колонка.Тело Цикл
//			МакетыШапкиОтчета.Добавить(ТелоГруппировки.Макет);
//		КонецЦикла;

//	КонецЦикла;
//	
//	//// Удалим лишние строки из шапки отчета.
//	//МассивДляУдаления = Новый Массив;
//	//
//	//Для Каждого ИмяМакетаШапкиОтчета Из МакетыШапкиОтчета Цикл
//	//	
//	//	МакетШапкиОтчета = МакетКомпоновки.Макеты[ИмяМакетаШапкиОтчета];
//	//	
//	//	
//	//	Для Индекс = КоличествоСтрокШапки + 1 По МакетШапкиОтчета.Макет.Количество() - 1 Цикл
//	//		
//	//		МассивДляУдаления.Добавить(МакетШапкиОтчета.Макет[Индекс]);
//	//		
//	//	КонецЦикла;
//	//	
//	//	Для Каждого Элемент Из МассивДляУдаления Цикл
//	//		МакетШапкиОтчета.Макет.Удалить(Элемент);
//	//	КонецЦикла;
//	//	
//	//	// Если группировка только по счету, объединим ячейки заголовка таблицы.
//	//	Если МакетШапкиОтчета = МакетШапкиТаблицы И КоличествоСтрокШапки = 1 Тогда
//	//		
//	//		Для Каждого Ячейка Из МакетШапкиОтчета.Макет[МакетШапкиОтчета.Макет.Количество() - 1].Ячейки Цикл
//	//			
//	//			Оформление = Ячейка.Оформление.Элементы.Найти("ОбъединятьПоВертикали");
//	//			Оформление.Значение = Истина;
//	//			Оформление.Использование = Истина;
//	//			
//	//		КонецЦикла;
//	//		
//	//	КонецЕсли;
//	//		
//	//КонецЦикла;
//	//
//	//// Запомним какие макеты ресурсов каким колонкам соответствуют.
//	//// Это может понадобиться для обработки развернутого сальдо.
//	//СоответствиеМакетовКолонкамОтчета = Новый Соответствие;
//	//
//	//Если ПараметрыОтчета.РазвернутоеСальдо Тогда
//	//	
//	//	// Макет подвала таблицы это макет подвала верхней группировки из этой таблицы.
//	//	МакетПодвалаТаблицы = МакетКомпоновки.Макеты[ТелоМакета.Строки[0].МакетПодвала.Макет];
//	//	
//	//	КоличествоПоказателей = БухгалтерскиеОтчетыВызовСервера.КоличествоПоказателей(ПараметрыОтчета);
//	//	
//	//	// В итогах сначала идет обычное сальдо а затем развернутое, разделим заголовок итогов на 2 части.
//	//	// И нижнюю подпишем "Итого развернутое".
//	//	ЯчейкаРазвернутыйИтог = МакетПодвалаТаблицы.Макет[КоличествоПоказателей].Ячейки[0];
//	//	
//	//	ОбъединятьПоВертикали = ЯчейкаРазвернутыйИтог.Оформление.Элементы.Найти("ОбъединятьПоВертикали");
//	//	
//	//	Если ОбъединятьПоВертикали <> Неопределено Тогда
//	//		
//	//		ОбъединятьПоВертикали.Использование = Ложь;
//	//		
//	//	КонецЕсли;

//	//	ЯчейкаРазвернутыйИтог.Элементы.Очистить();
//	//	НовыйЭлемент = ЯчейкаРазвернутыйИтог.Элементы.Добавить(Тип("ПолеОбластиКомпоновкиДанных"));
//	//	НовыйЭлемент.Значение = НСтр("ru = 'Итого развернутое'");
//	//	
//	//	// В дальнейшей обработке понадобится знать где макеты ресурсов подвала.
//	//	МакетыПодвалаТаблицы = Новый Массив;
//	//	МакетыПодвалаТаблицы.Добавить(МакетПодвалаТаблицы.Имя);
//	//	
//	//	Для Каждого МакетРесурсаПодвала Из ТелоМакета.Строки[0].МакетПодвала.МакетРесурсов Цикл
//	//		МакетыПодвалаТаблицы.Добавить(МакетРесурсаПодвала.Макет);
//	//	КонецЦикла;
//	//	
//	//	// Если включена валютная сумма, то нужно удалить валюту из итогов.
//	//	Если ПараметрыОтчета.ПоказательВалютнаяСумма Тогда
//	//		
//	//		НаборПоказателей = ПолучитьНаборПоказателей();
//	//		
//	//		// Определяем позицию валютной суммы.
//	//		ПозицияВалюты = 0;
//	//		Для Каждого Показатель Из НаборПоказателей Цикл
//	//			
//	//			Если Показатель = "ВалютнаяСумма" Тогда
//	//				Прервать;
//	//			КонецЕсли;
//	//			
//	//			Если ПараметрыОтчета["Показатель" + Показатель] Тогда
//	//				ПозицияВалюты = ПозицияВалюты + 1;
//	//			КонецЕсли;
//	//			
//	//		КонецЦикла;
//	//		
//	//		// Если валюта не единственный показатель, то удаляем ее из итогов.
//	//		Если ПозицияВалюты > 0 Тогда
//	//			Для Каждого Макет Из МакетыПодвалаТаблицы Цикл
//	//				МакетКомпоновки.Макеты[Макет].Макет.Удалить(МакетКомпоновки.Макеты[Макет].Макет[ПозицияВалюты]);
//	//			КонецЦикла;
//	//		КонецЕсли;
//	//		
//	//	КонецЕсли;
//	//	
//	//	// Найдем все макеты ресурсов.
//	//	МакетыРесурсов = Новый Массив;
//	//	
//	//	ЗаполнитьМакетыРесурсовГруппировки(ТелоМакета.Строки, МакетыРесурсов, СоответствиеМакетовКолонкамОтчета, , Истина, Истина);
//	//		
//	//	// Переберем все макеты и удалим из них "простое" сальдо.
//	//	Для Каждого Макет Из МакетКомпоновки.Макеты Цикл
//	//		
//	//		СтрокиМакета = Макет.Макет;
//	//		
//	//		// Макеты шапки и подвала обрабатывать не нужно.
//	//		Если МакетыШапкиОтчета.Найти(Макет.Имя) <> Неопределено ИЛИ МакетыПодвалаТаблицы.Найти(Макет.Имя) <> Неопределено Тогда
//	//			Продолжить;
//	//		КонецЕсли;
//	//		
//	//		УдаляемыеСтроки = Новый Массив;
//	//		
//	//		// Определяем колонку к которой принадлежит макет.
//	//		Колонка = СоответствиеМакетовКолонкамОтчета.Получить(Макет.Имя);
//	//		
//	//		Если Колонка = Неопределено Тогда
//	//			
//	//			Для Сч = КоличествоПоказателей По СтрокиМакета.Количество() - 1 Цикл
//	//				
//	//				УдаляемыеСтроки.Добавить(СтрокиМакета[Сч]);
//	//				
//	//			КонецЦикла;
//	//			
//	//		Иначе
//	//			
//	//			Для Сч = 0 По КоличествоПоказателей - 1 Цикл
//	//				
//	//				УдаляемыеСтроки.Добавить(СтрокиМакета[Сч]);
//	//				
//	//			КонецЦикла;
//	//			
//	//		КонецЕсли;
//	//		
//	//		Для Каждого СтрокаКУдалению Из УдаляемыеСтроки Цикл
//	//			
//	//			СтрокиМакета.Удалить(СтрокаКУдалению);
//	//			
//	//		КонецЦикла;
//	//		
//	//	КонецЦикла;
//	//	
//	//КонецЕсли;
//	//
//	//// Макеты группировки и ресурсов группировки по валюте,
//	//// будем использовать для определения принадлежности элемента Макет, Макета компоновки к группировке по валюте.
//	//МакетГруппировкиВалюта = БухгалтерскиеОтчетыВызовСервера.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Валюта");
//	//МакетРесурсовГруппировкиВалюта = Новый Массив;
//	//
//	//МассивИменМакетовВалюта = Новый Массив;
//	//Для Каждого МакетВалюта Из МакетГруппировкиВалюта Цикл
//	//	МассивИменМакетовВалюта.Добавить(МакетВалюта.Имя);
//	//КонецЦикла;
//	//
//	//ЗаполнитьМакетыРесурсовГруппировки(ТелоМакета.Строки, МакетРесурсовГруппировкиВалюта, СоответствиеМакетовКолонкамОтчета, "Валюта", Истина);
//	//
//	//МассивИменМакетовВключенныхВГруппировкуВалюта = Новый Массив;
//	//НайденаВалюта = Ложь;
//	//Для Каждого СтрокаГруппировка Из ПараметрыОтчета.Группировка Цикл
//	//	
//	//	Если НЕ СтрокаГруппировка.Использование Тогда
//	//		Продолжить;
//	//	КонецЕсли;
//	//	
//	//	Если СтрокаГруппировка.Поле = "Валюта" Тогда
//	//		НайденаВалюта = Истина;
//	//	КонецЕсли;
//	//	
//	//	Если НайденаВалюта Тогда // Нужны все последующие группировки.
//	//		
//	//		МакетГруппировкиВключеннойВВалюту = БухгалтерскиеОтчетыВызовСервера.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, СтрокаГруппировка.Поле);
//	//		
//	//		Для Каждого МакетВключенныйВВалюту Из МакетГруппировкиВключеннойВВалюту Цикл
//	//			МассивИменМакетовВключенныхВГруппировкуВалюта.Добавить(МакетВключенныйВВалюту.Имя);
//	//		КонецЦикла;
//	//		
//	//		ИменаМакетовРесурсов = ЗаполнитьМакетыРесурсовГруппировки(ТелоМакета.Строки, 
//	//			МакетГруппировкиВключеннойВВалюту, СоответствиеМакетовКолонкамОтчета, СтрокаГруппировка.Поле, Истина);
//	//			
//	//		Если ИменаМакетовРесурсов <> Неопределено Тогда
//	//			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивИменМакетовВключенныхВГруппировкуВалюта, ИменаМакетовРесурсов, Истина);
//	//		КонецЕсли;
//	//		
//	//	КонецЕсли;
//	//	
//	//КонецЦикла;

//	//// Если в отчете включена валютная сумма, то ее нужно показывать только по тем счетам
//	//// где есть валюта, для того чтобы убрать вывод показателя валюта там где он не нужен.
//	//// Переберем все макеты, и удалим строки предназначенные для вывода валютных сумм у всех макетов
//	//// кроме макетов группировки по валюте и макетов ресурсов группировки по валюте.
//	//Если ПараметрыОтчета.ПоказательВалютнаяСумма Тогда
//	//	Для Каждого Макет Из МакетКомпоновки.Макеты Цикл 
//	//		// Пропускаем макеты шапки.
//	//		Если МакетыШапкиОтчета.Найти(Макет.Имя) = Неопределено Тогда

//	//			Если МассивИменМакетовВалюта.Найти(Макет.Имя) <> Неопределено 
//	//				ИЛИ МакетРесурсовГруппировкиВалюта.Найти(Макет.Имя) <> Неопределено
//	//				ИЛИ МассивИменМакетовВключенныхВГруппировкуВалюта.Найти(Макет.Имя) <> Неопределено Тогда


//	//			ИначеЕсли Макет.Макет.Количество() > 1 Тогда // Последний не удаляем.

//	//				Макет.Макет.Удалить(Макет.Макет.Количество() - 1);

//	//			КонецЕсли;

//	//		КонецЕсли;

//	//	КонецЦикла;

//	//КонецЕсли;
//КонецПроцедуры

// В процедуре можно доработать результат отчета, выводимый в табличный документ.
//
// Параметры:
//   ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//   Результат   - ТабличныйДокумент - результат выполнения отчета.
//
Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	// Вывод подписей
	БухгалтерскиеОтчеты.ВыводПодписейОтчета(ПараметрыОтчета, Результат);
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета, ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
КонецПроцедуры

// Настройки размещения в панели отчетов.
//
// Параметры:
//   Настройки - Коллекция - Используется для описания настроек отчетов и вариантов
//       см. описание к ВариантыОтчетов.ДеревоНастроекВариантовОтчетовКонфигурации()
//   НастройкиОтчета - СтрокаДереваЗначений - Настройки размещения всех вариантов отчета.
//       см. "Реквизиты для изменения" функции ВариантыОтчетов.ДеревоНастроекВариантовОтчетовКонфигурации().
//
// Описание:
//   См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//
// Вспомогательные методы:
//   НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "<ИмяВарианта>");
//   ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, НастройкиОтчета, Истина/Ложь); // Отчет
//   поддерживает только этот режим.
//
Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
	НастройкиОтчета.ОпределитьНастройкиФормы = Истина;

	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "ГлавнаяКнигаПоСчетам");
	НастройкиВарианта.Описание = НСтр("ru = 'Выводит информацию по по счета: обороты за период в разрезе корреспондирующих счетов.'");
КонецПроцедуры

Процедура ЗаполнитьПараметрыРасшифровкиОтчета(Адрес, Расшифровка, ПараметрыРасшифровки) Экспорт
	
	// Инициализируем список пунктов меню
	СписокПунктовМеню = Новый СписокЗначений();
	
	// Заполним соответствие полей которые мы хотим получить из данных расшифровки
	ДанныеОтчета = ПолучитьИзВременногоХранилища(Адрес);
	
	ЗначениеРасшифровки = ДанныеОтчета.ДанныеРасшифровки.Элементы[Расшифровка];
	Если ТипЗнч(ЗначениеРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Для Каждого ПолеРасшифровки Из ЗначениеРасшифровки.ПолучитьПоля() Цикл
			Если ЗначениеЗаполнено(ПолеРасшифровки.Значение) Тогда
				ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Истина);
				ПараметрыРасшифровки.Вставить("Значение",  ПолеРасшифровки.Значение);
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Укажем что открывать объект сразу не нужно
	ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Ложь);
	
	Если ДанныеОтчета = Неопределено Тогда 
		ПараметрыРасшифровки.Вставить("СписокПунктовМеню", СписокПунктовМеню);
		Возврат;
	КонецЕсли;
		
	// Инициализация пользовательских настроек
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("РежимРасшифровки", 					Истина);
	ДополнительныеСвойства.Вставить("Организация", 							ДанныеОтчета.Объект.Организация);
	ДополнительныеСвойства.Вставить("НачалоПериода", 						ДанныеОтчета.Объект.НачалоПериода);
	ДополнительныеСвойства.Вставить("КонецПериода", 						ДанныеОтчета.Объект.КонецПериода);
	ДополнительныеСвойства.Вставить("ВыводитьЗаголовок",					ДанныеОтчета.Объект.ВыводитьЗаголовок);
	ДополнительныеСвойства.Вставить("ВыводитьПодвал",						ДанныеОтчета.Объект.ВыводитьПодвал);
	ДополнительныеСвойства.Вставить("МакетОформления",						ДанныеОтчета.Объект.МакетОформления);
	
	СписокПунктовМеню.Добавить("ГлавнаяКнигаПоСчетам", "Главная книга по счетам");
	
	НастройкиРасшифровки = Новый Структура();
	НастройкиРасшифровки.Вставить("ГлавнаяКнигаПоСчетам", ПользовательскиеНастройки);
	ДанныеОтчета.Вставить("НастройкиРасшифровки", НастройкиРасшифровки);
	
	ПоместитьВоВременноеХранилище(ДанныеОтчета, Адрес);
	
	ПараметрыРасшифровки.Вставить("СписокПунктовМеню", СписокПунктовМеню);
	
КонецПроцедуры

// Процедура используется подсистемой варианты отчетов
//
Процедура НастройкиОтчета(Настройки) Экспорт
	
	ВариантыНастроек = ВариантыНастроек();
	Для Каждого Вариант Из ВариантыНастроек Цикл
		 Настройки.ОписаниеВариантов.Вставить(Вариант.Имя,Вариант.Представление);
	КонецЦикла;
	
КонецПроцедуры

Функция ВариантыНастроек() Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Новый Структура("Имя, Представление","ГлавнаяКнигаПоСчетам", "Главная книга по счетам"));
	Возврат Массив;
	
КонецФункции

// Возвращает набор параметров, которые необходимо сохранять в рассылке отчетов.
// Значения параметров используются при формировании отчета в рассылке.
//
// Возвращаемое значение:
//   Структура - структура настроек, сохраняемых в рассылке с неинициализированными значениями.
//
Функция НастройкиОтчетаСохраняемыеВРассылке() Экспорт
	
	КоллекцияНастроек = Новый Структура;
	КоллекцияНастроек.Вставить("Организация"                      , Справочники.Организации.ПустаяСсылка());
	КоллекцияНастроек.Вставить("РазмещениеДополнительныхПолей"    , 0);
	КоллекцияНастроек.Вставить("ДополнительныеПоля"               , Неопределено);
	КоллекцияНастроек.Вставить("ВыводитьЗаголовок"                , Ложь);
	КоллекцияНастроек.Вставить("ВыводитьПодвал"                   , Ложь);
	КоллекцияНастроек.Вставить("МакетОформления"                  , Неопределено);
	КоллекцияНастроек.Вставить("НастройкиКомпоновкиДанных"        , Неопределено);
	
	Возврат КоллекцияНастроек;
	
КонецФункции

// Возвращает структуру параметров, наличие которых требуется для успешного формирования отчета.
//
// Возвращаемое значение:
//   Структура - структура параметров для формирования отчета.
//
Функция ПустыеПараметрыКомпоновкиОтчета() Экспорт
	
	// Часть параметров компоновки отчета используется так же и в рассылке отчета.
	ПараметрыОтчета = НастройкиОтчетаСохраняемыеВРассылке();
	
	// Дополним параметрами, влияющими на формирование отчета.
	ПараметрыОтчета.Вставить("ПериодОтчета"         , Неопределено);
	ПараметрыОтчета.Вставить("НачалоПериода"        , Дата(1,1,1));
	ПараметрыОтчета.Вставить("КонецПериода"         , Дата(1,1,1));
	ПараметрыОтчета.Вставить("РежимРасшифровки"     , Ложь);
	ПараметрыОтчета.Вставить("ДанныеРасшифровки"    , Неопределено);
	ПараметрыОтчета.Вставить("СхемаКомпоновкиДанных", Неопределено);
	ПараметрыОтчета.Вставить("ИдентификаторОтчета"  , "");
	
	Возврат ПараметрыОтчета;
	
КонецФункции

#КонецОбласти

#КонецЕсли
