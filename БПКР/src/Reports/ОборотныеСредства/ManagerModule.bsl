#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВариантыОтчетов

// Для подсистемы "Варианты отчетов" при работе в модели сервиса.
//
// Возвращаемое значение:
//  Массив - массив структур (варианты отчета).
Функция ВариантыНастроек() Экспорт
	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Новый Структура("Имя, Представление", "ОборотныеСредства", НСтр("ru = 'Оборотные средства'")));
КонецФункции

// См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
	НастройкиОтчета.ОпределитьНастройкиФормы = Истина;

	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "ОборотныеСредства");
	НастройкиВарианта.Описание = НСтр("ru = 'Оборотные средства'");
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

#КонецОбласти

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьВнешниеНаборыДанных",    Истина);
	Результат.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	Результат.Вставить("ИспользоватьПослеКомпоновкиМакета",  Ложь);
	Результат.Вставить("ИспользоватьПослеВыводаРезультата",  Истина);
	Результат.Вставить("ИспользоватьДанныеРасшифровки",      Истина);
	Результат.Вставить("ИспользоватьПривилегированныйРежим", Истина);
	Результат.Вставить("ИспользоватьРасширенныеПараметрыРасшифровки", Истина);

	Возврат Результат;

КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета) Экспорт 
	
	Возврат "Оборотные средства" + БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);
	
КонецФункции

Функция ПолучитьВнешниеНаборыДанных(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	ПС = ПланыСчетов["Хозрасчетный"];
	
	Счет1600 = ПС.ТоварноМатериальныеЗапасы;
	Счет1610 = ПС.Товары;
	Счет1620 = ПС.ЗапасыСырьяИМатериалов;
	Счет1630 = ПС.ОсновноеПроизводство;
	Счет1631 = ПС.ПроизводствоПолуфабрикатов;
	Счет1633 = ПС.ВспомогательноеПроизводство;
	Счет1635 = ПС.НакладныеРасходы;
	Счет1640 = ПС.ГотоваяПродукция;
	Счет1680 = ПС.МатериалыПереданныеВПереработку;
	Счет1691 = ПС.НереализованнаяТорговаяНаценка;
	Счет1695 = ПС.ПрочиеЗапасы;
	
	Счет1700 = ПС.ЗапасыВспомогательныхМатериалов;
	Счет1300 = ПС.КраткосрочныеИнвестиции;
	
	Счета = Новый Массив;
	Счета.Добавить(Счет1600);
	Счета.Добавить(Счет1700);
	Счета.Добавить(Счет1300);
	
	СписокДоступныхОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ОрганизацииДанныеКоторыхДоступныПользователю();
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ Счета
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&Счета)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОбороты.Период КАК Период,
		|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
		|	ХозрасчетныйОстаткиИОбороты.Организация КАК Организация,
		|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СуммаНачальныйОстатокДт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт КАК СуммаНачальныйОстатокКт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СуммаКонечныйОстатокДт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СуммаКонечныйОстатокКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Месяц,
		|			,
		|			Счет В
		|				(ВЫБРАТЬ
		|					Счета.Ссылка
		|				ИЗ
		|					Счета КАК Счета),
		|			,
		|			Организация В (&СписокОрганизаций)) КАК ХозрасчетныйОстаткиИОбороты
		|ГДЕ
		|	(ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт <> 0
		|			ИЛИ ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт <> 0
		|			ИЛИ ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт <> 0
		|			ИЛИ ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт <> 0)
		|ИТОГИ
		|	СУММА(СуммаНачальныйОстатокДт),
		|	СУММА(СуммаНачальныйОстатокКт),
		|	СУММА(СуммаКонечныйОстатокДт),
		|	СУММА(СуммаКонечныйОстатокКт)
		|ПО
		|	Организация,
		|	Период,
		|	Счет ИЕРАРХИЯ";
	
	Периодичность = БухгалтерскиеОтчетыКлиентСервер.ПолучитьЗначениеПериодичности(
		ПараметрыОтчета.Периодичность, ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);
	Если Периодичность = 6 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Месяц", "День");
	ИначеЕсли Периодичность = 7 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Месяц", "Неделя");
	ИначеЕсли Периодичность = 8 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Месяц", "Декада");
	ИначеЕсли Периодичность = 10 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Месяц", "Квартал");
	ИначеЕсли Периодичность = 11 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Месяц", "Полугодие");
	ИначеЕсли Периодичность = 12 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Месяц", "Год");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счета", Счета);
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокДоступныхОрганизаций);
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ПараметрыОтчета.НачалоПериода));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НачалоПериода", "");
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		Запрос.УстановитьПараметр("КонецПериода",  КонецДня(ПараметрыОтчета.КонецПериода));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КонецПериода", "");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	МассивСтрокаДляУдаления = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаРезультат Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Счет) Тогда
			МассивСтрокаДляУдаления.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаДляУдаления Из МассивСтрокаДляУдаления Цикл
		ТаблицаРезультат.Удалить(СтрокаДляУдаления);
	КонецЦикла;
	ТаблицаРезультат.Свернуть("Период,Счет,Организация,СуммаНачальныйОстатокДт,СуммаНачальныйОстатокКт,СуммаКонечныйОстатокДт,СуммаКонечныйОстатокКт");
	
	ТаблицаРазделы = Новый ТаблицаЗначений;
	ТаблицаРазделы.Колонки.Добавить("Раздел");
	ТаблицаРазделы.Колонки.Добавить("Порядок");
	ТаблицаРазделы.Колонки.Добавить("Родитель");
	
	НоваяСтрока = ТаблицаРазделы.Добавить();
	НоваяСтрока.Раздел  = НСтр("ru = 'Денежные средства'");
	НоваяСтрока.Порядок = 1;
	
	НоваяСтрока = ТаблицаРазделы.Добавить();
	НоваяСтрока.Раздел  = НСтр("ru = 'Краткосрочные финансовые вложения'");
	НоваяСтрока.Порядок = 2;
	
	НоваяСтрока = ТаблицаРазделы.Добавить();
	НоваяСтрока.Раздел  = НСтр("ru = 'Задолженность покупателей'");
	НоваяСтрока.Порядок = 3;
	
	НоваяСтрока = ТаблицаРазделы.Добавить();
	НоваяСтрока.Раздел  = НСтр("ru = 'Сырье и материалы'");
	НоваяСтрока.Родитель = НСтр("ru = 'Запасы'");
	НоваяСтрока.Порядок = 4;
	
	НоваяСтрока = ТаблицаРазделы.Добавить();
	НоваяСтрока.Раздел  = НСтр("ru = 'Незавершенное производство'");
	НоваяСтрока.Порядок = 5;
	
	НоваяСтрока = ТаблицаРазделы.Добавить();
	НоваяСтрока.Раздел  = НСтр("ru = 'Готовая продукция'");
	НоваяСтрока.Порядок = 6;
	
	НоваяСтрока = ТаблицаРазделы.Добавить();
	НоваяСтрока.Раздел  = НСтр("ru = 'Товары'");
	НоваяСтрока.Порядок = 7;
	
	ТаблицаОборотныеСредства = Новый ТаблицаЗначений;
	ТаблицаОборотныеСредства.Колонки.Добавить("Период"               , Новый ОписаниеТипов("Дата"));
	ТаблицаОборотныеСредства.Колонки.Добавить("Организация"          , Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаОборотныеСредства.Колонки.Добавить("СуммаНачальныйОстаток", Новый ОписаниеТипов("Число"));
	ТаблицаОборотныеСредства.Колонки.Добавить("СуммаКонечныйОстаток" , Новый ОписаниеТипов("Число"));
	ТаблицаОборотныеСредства.Колонки.Добавить("Порядок"              , Новый ОписаниеТипов("Число"));
	ТаблицаОборотныеСредства.Колонки.Добавить("Раздел"               , Новый ОписаниеТипов("Строка"));
	ТаблицаОборотныеСредства.Колонки.Добавить("Родитель"             , Новый ОписаниеТипов("Строка"));
	
	Для Каждого СтрокаТаблицы Из ТаблицаРезультат Цикл
		Счет = СтрокаТаблицы.Счет;
		
		// Краткосрочные финансовые вложения
		Если Счет = Счет1300 Тогда
			ДобавитьСтрокуВТаблицу(ТаблицаОборотныеСредства, СтрокаТаблицы, ТаблицаРазделы[1], "Дт", 1);
			
		// Запасы (расчет составных частей)  
		// Сырье и материалы	
		ИначеЕсли Счет = Счет1620 Тогда
			ДобавитьСтрокуВТаблицу(ТаблицаОборотныеСредства, СтрокаТаблицы, ТаблицаРазделы[3], "Дт", 1);
			
		// НЗП	
		ИначеЕсли Счет = Счет1630 Или Счет = Счет1631
			Или Счет = Счет1633 Или Счет = Счет1635 
			Или Счет = Счет1680 Тогда
			ДобавитьСтрокуВТаблицу(ТаблицаОборотныеСредства, СтрокаТаблицы, ТаблицаРазделы[4], "Дт", 1);
			
		// Готовая продукция
		ИначеЕсли Счет = Счет1640 Тогда
			ДобавитьСтрокуВТаблицу(ТаблицаОборотныеСредства, СтрокаТаблицы, ТаблицаРазделы[5], "Дт", 1);
			
		// Товары
		ИначеЕсли Счет = Счет1610 ИЛИ Счет = Счет1695 Тогда
			ДобавитьСтрокуВТаблицу(ТаблицаОборотныеСредства, СтрокаТаблицы, ТаблицаРазделы[6], "Дт", 1);
		ИначеЕсли Счет = Счет1691 Тогда
			ДобавитьСтрокуВТаблицу(ТаблицаОборотныеСредства, СтрокаТаблицы, ТаблицаРазделы[6], "Кт", -1);
			
		КонецЕсли;
	КонецЦикла;
	
	ВнешниеНаборыДанных = Новый Структура("ОборотныеСредства", ТаблицаОборотныеСредства);
	
	Возврат ВнешниеНаборыДанных;

КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	ВидыСубконтоКД = Новый СписокЗначений;
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	СчетаУчетаРасчетов = МониторРуководителя.СчетаРасчетовСКонтрагентами(1);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СчетаКД", СчетаУчетаРасчетов);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВидыДоговоров", БухгалтерскиеОтчеты.ВидыДоговоровПокупателей());
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВидыСубконтоКД", ВидыСубконтоКД);
	
	СчетаДС = Новый Массив;
	СчетаДС.Добавить(ПланыСчетов.Хозрасчетный.ДенежныеСредстваВКассе);
	СчетаДС.Добавить(ПланыСчетов.Хозрасчетный.ДенежныеСредстваВБанке);
	СчетаДС.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами);
	СчетаДС = БухгалтерскийУчетСервер.СформироватьМассивСубсчетов(СчетаДС);
	
	СчетаДС = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СчетаДС, БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ДенежныеДокументы));
	СчетаДС = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СчетаДС, БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ДенежныеЭквиваленты));
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СчетаДС", СчетаДС);
	
	Периодичность = БухгалтерскиеОтчетыКлиентСервер.ПолучитьЗначениеПериодичности(ПараметрыОтчета.Периодичность, ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Периодичность", Периодичность);
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоДня(ПараметрыОтчета.НачалоПериода));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
	КонецЕсли;
	
	ВыводитьДиаграмму = Неопределено;
	
	Если НЕ ПараметрыОтчета.Свойство("ВыводитьДиаграмму", ВыводитьДиаграмму) Тогда
		
		ВыводитьДиаграмму = Истина;
		
	КонецЕсли;
	
	Таблица   = Неопределено;
	Диаграмма = Неопределено;
	Для Каждого ЭлементСтруктуры Из КомпоновщикНастроек.Настройки.Структура Цикл		
		Если ЭлементСтруктуры.Имя = "Таблица" Тогда
			Таблица = ЭлементСтруктуры;
		ИначеЕсли ЭлементСтруктуры.Имя = "Диаграмма" Тогда
			Диаграмма = ЭлементСтруктуры;
		КонецЕсли;		
	КонецЦикла;
	
	Если Диаграмма <> Неопределено Тогда
		
		Если ВыводитьДиаграмму Тогда
			
			Диаграмма.Точки.Очистить();
			ГруппировкаПериод = Диаграмма.Точки.Добавить();
			ПолеГруппировки = ГруппировкаПериод.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование = Истина;
			ПолеГруппировки.Поле          = Новый ПолеКомпоновкиДанных("Период");
			ПолеГруппировки.ТипДополнения = БухгалтерскиеОтчетыВызовСервера.ПолучитьТипДополненияПоИнтервалу(Периодичность);
			ПолеГруппировки.НачалоПериода =	НачалоДня(ПараметрыОтчета.НачалоПериода);
			ПолеГруппировки.КонецПериода  = КонецДня(ПараметрыОтчета.КонецПериода);
			
			ГруппировкаПериод.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			ГруппировкаПериод.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			
			// Группировка
			Диаграмма.Серии.Очистить();
			Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
				Если ПолеВыбраннойГруппировки.Использование Тогда
					Группировка = Диаграмма.Серии.Добавить();
					ПолеГруппировкиДиаграммы = Новый Структура("Использование, ИсходныйНомерСтроки, НомерСтроки, Поле, Представление");
					ЗаполнитьЗначенияСвойств(ПолеГруппировкиДиаграммы, ПолеВыбраннойГруппировки);
					ПолеГруппировкиДиаграммы.Вставить("ТипГруппировки", 0);
					БухгалтерскиеОтчетыВызовСервера.ЗаполнитьГруппировку(ПолеГруппировкиДиаграммы, Группировка);
					Прервать;
				КонецЕсли;
			КонецЦикла; 
			
		Иначе
			
			Диаграмма.Использование = ВыводитьДиаграмму;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Таблица <> Неопределено Тогда
		Таблица.Колонки.Очистить();
		ГруппировкаПериод = Таблица.Колонки.Добавить();
		ПолеГруппировки = ГруппировкаПериод.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование = Истина;
		ПолеГруппировки.Поле          = Новый ПолеКомпоновкиДанных("Период");
		ПолеГруппировки.ТипДополнения = БухгалтерскиеОтчетыВызовСервера.ПолучитьТипДополненияПоИнтервалу(Периодичность);
		ПолеГруппировки.НачалоПериода = НачалоДня(ПараметрыОтчета.НачалоПериода);
		ПолеГруппировки.КонецПериода  = КонецДня(ПараметрыОтчета.КонецПериода);
		
		ГруппировкаПериод.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		ГруппировкаПериод.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		
		// Группировка
		Таблица.Строки.Очистить();
		Группировка = Таблица.Строки;
		Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
			Если ПолеВыбраннойГруппировки.Использование Тогда
				Если ТипЗнч(Группировка) = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") Тогда
					Группировка = Группировка.Добавить();
				Иначе
					Группировка = Группировка.Структура.Добавить();
				КонецЕсли;
				
				БухгалтерскиеОтчетыВызовСервера.ЗаполнитьГруппировку(ПолеВыбраннойГруппировки, Группировка);
				
				Если ПолеВыбраннойГруппировки.Поле = "Раздел" Тогда
					
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(Группировка.Отбор, "СуммаКонечныйОстаток", 0, ВидСравненияКомпоновкиДанных.Заполнено);
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	// Дополнительные данные
	БухгалтерскиеОтчетыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	// Вывод подписей
	БухгалтерскиеОтчеты.ВыводПодписейОтчета(ПараметрыОтчета, Результат);
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета, ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
КонецПроцедуры

// Процедура используется подсистемой варианты отчетов
//
Процедура НастройкиОтчета(Настройки) Экспорт
	
	Схема = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Для Каждого Вариант Из Схема.ВариантыНастроек Цикл
		 Настройки.ОписаниеВариантов.Вставить(Вариант.Имя,Вариант.Представление);
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыРасшифровкиОтчета(Адрес, Расшифровка, ПараметрыРасшифровки) Экспорт
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";
	
	ДанныеОбъекта = ПолучитьИзВременногоХранилища(Адрес);
	
	ОтчетОбъект       = ДанныеОбъекта.Объект;
	ДанныеРасшифровки = ДанныеОбъекта.ДанныеРасшифровки;

	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("Организация", ОтчетОбъект.Организация);
	ДополнительныеСвойства.Вставить("РежимРасшифровки", Истина);
	
	Раздел        = Неопределено;
	Период        = Неопределено;
	Периодичность = БухгалтерскиеОтчетыКлиентСервер.ПолучитьЗначениеПериодичности(ОтчетОбъект.Периодичность, ОтчетОбъект.НачалоПериода, ОтчетОбъект.КонецПериода);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(ДанныеРасшифровки.Настройки);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ДанныеОбъекта.Объект.СхемаКомпоновкиДанных));
	
	МассивПолей = БухгалтерскиеОтчетыВызовСервера.ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки, КомпоновщикНастроек, Истина);

	Для Каждого Отбор Из МассивПолей Цикл
		Если ТипЗнч(Отбор) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
			Если Отбор.Значение = NULL Тогда
				Продолжить;
			КонецЕсли;
			
			Если Отбор.Поле = "Организация" Тогда
				ДополнительныеСвойства.Вставить("Организация", Отбор.Значение);
			ИначеЕсли Отбор.Поле = "Период" Тогда
				Период = Отбор.Значение;
			ИначеЕсли  Отбор.Поле = "Раздел" Тогда
				Раздел = Отбор.Значение;
			Иначе
				Если Отбор.Иерархия Тогда
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле, Отбор.Значение, ВидСравненияКомпоновкиДанных.ВИерархии);
				Иначе
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле, Отбор.Значение);
				КонецЕсли;
			КонецЕсли;	
		ИначеЕсли ТипЗнч(Отбор) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если Отбор.Представление = "###ОтборПоОрганизацииСОП###" Тогда
				Для Каждого ЭлементОтбора Из Отбор.Элементы Цикл
					Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
						ДополнительныеСвойства.Вставить("Организация", ЭлементОтбора.ПравоеЗначение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Отбор) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если Отбор.Представление = "###ОтборПоОрганизации###" Тогда
				ДополнительныеСвойства.Вставить("Организация", Отбор.ПравоеЗначение);
			ИначеЕсли Отбор.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.ЛевоеЗначение, Отбор.ПравоеЗначение, Отбор.ВидСравнения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	НастройкиРасшифровки = Новый Структура;
	
	Если НРег(Раздел) = "денежные средства" Тогда
		Если Период <> Неопределено Тогда
			ДополнительныеСвойства.Вставить("Период", БухгалтерскиеОтчетыКлиентСервер.КонецПериода(Период, Периодичность));
		Иначе
			ДополнительныеСвойства.Вставить("Период", ОтчетОбъект.КонецПериода);
		КонецЕсли;
		ДополнительныеСвойства.Вставить("КлючВарианта", "ОстаткиДенежныхСредств");
		
		СписокПунктовМеню = Новый СписокЗначений;
		СписокПунктовМеню.Добавить("ОстаткиДенежныхСредств", "Остатки денежных средств");
		
		НастройкиРасшифровки.Вставить("ОстаткиДенежныхСредств", ПользовательскиеНастройки);
		
	ИначеЕсли НРег(Раздел) = "задолженность покупателей" Тогда
		Если Период <> Неопределено Тогда
			ДополнительныеСвойства.Вставить("Период", БухгалтерскиеОтчетыКлиентСервер.КонецПериода(Период, Периодичность));
		Иначе
			ДополнительныеСвойства.Вставить("Период", ОтчетОбъект.КонецПериода);
		КонецЕсли;
		ДополнительныеСвойства.Вставить("КлючВарианта", "ЗадолженностьПокупателейПоСрокамДолга");
		
		СписокПунктовМеню = Новый СписокЗначений;
		СписокПунктовМеню.Добавить("ЗадолженностьПокупателейПоСрокамДолга", "Задолженность покупателей по срокам долга");
		
		НастройкиРасшифровки.Вставить("ЗадолженностьПокупателейПоСрокамДолга", ПользовательскиеНастройки);
		
	ИначеЕсли НРег(Раздел) = "сырье и материалы" Тогда
		Если Период <> Неопределено Тогда
			ДополнительныеСвойства.Вставить("КонецПериода", КонецДня(БухгалтерскиеОтчетыКлиентСервер.КонецПериода(Период, Периодичность)));
			ДополнительныеСвойства.Вставить("НачалоПериода", БухгалтерскиеОтчетыКлиентСервер.НачалоПериода(Период, Периодичность));
		Иначе
			ДополнительныеСвойства.Вставить("КонецПериода", КонецДня(ОтчетОбъект.КонецПериода));
			ДополнительныеСвойства.Вставить("НачалоПериода", ОтчетОбъект.КонецПериода);
		КонецЕсли;
		
		СписокПунктовМеню = Новый СписокЗначений;
		СписокПунктовМеню.Добавить("ОстаткиТоваров", "Остатки товаров");
		
		ДополнительныеСвойства.Вставить("КлючВарианта", "ОстаткиТоваров");
		
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Счет", ПланыСчетов.Хозрасчетный.ЗапасыСырьяИМатериалов, ВидСравненияКомпоновкиДанных.ВИерархии,,Истина);
		
		НастройкиРасшифровки.Вставить("ОстаткиТоваров", ПользовательскиеНастройки);
		
	ИначеЕсли НРег(Раздел) = "готовая продукция" Тогда
		Если Период <> Неопределено Тогда
			ДополнительныеСвойства.Вставить("КонецПериода", КонецДня(БухгалтерскиеОтчетыКлиентСервер.КонецПериода(Период, Периодичность)));
			ДополнительныеСвойства.Вставить("НачалоПериода", БухгалтерскиеОтчетыКлиентСервер.НачалоПериода(Период, Периодичность));
		Иначе
			ДополнительныеСвойства.Вставить("КонецПериода", КонецДня(ОтчетОбъект.КонецПериода));
			ДополнительныеСвойства.Вставить("НачалоПериода", ОтчетОбъект.КонецПериода);
		КонецЕсли;
		
		СписокПунктовМеню = Новый СписокЗначений;
		СписокПунктовМеню.Добавить("ОстаткиТоваров", "Остатки товаров");
		
		ДополнительныеСвойства.Вставить("КлючВарианта", "ОстаткиТоваров");
		
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Счет", ПланыСчетов.Хозрасчетный.ГотоваяПродукция, ВидСравненияКомпоновкиДанных.ВИерархии,,Истина);
		
		НастройкиРасшифровки.Вставить("ОстаткиТоваров", ПользовательскиеНастройки);
		
	ИначеЕсли НРег(Раздел) = "товары" Тогда
		Если Период <> Неопределено Тогда
			ДополнительныеСвойства.Вставить("КонецПериода", КонецДня(БухгалтерскиеОтчетыКлиентСервер.КонецПериода(Период, Периодичность)));
			ДополнительныеСвойства.Вставить("НачалоПериода", БухгалтерскиеОтчетыКлиентСервер.НачалоПериода(Период, Периодичность));
		Иначе
			ДополнительныеСвойства.Вставить("КонецПериода", КонецДня(ОтчетОбъект.КонецПериода));
			ДополнительныеСвойства.Вставить("НачалоПериода", ОтчетОбъект.КонецПериода);
		КонецЕсли;
		
		СписокПунктовМеню = Новый СписокЗначений;
		СписокПунктовМеню.Добавить("ОстаткиТоваров", "Остатки товаров");
		
		ДополнительныеСвойства.Вставить("КлючВарианта", "ОстаткиТоваров");
		
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Счет", ПланыСчетов.Хозрасчетный.Товары, ВидСравненияКомпоновкиДанных.ВИерархии,,Истина);
		
		НастройкиРасшифровки.Вставить("ОстаткиТоваров", ПользовательскиеНастройки);
		
	Иначе
		Возврат;
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("НастройкиРасшифровки", НастройкиРасшифровки);
	Адрес = ПоместитьВоВременноеХранилище(ДанныеОбъекта, Адрес);
	ПараметрыРасшифровки.Вставить("СписокПунктовМеню", СписокПунктовМеню);
	ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Ложь);
	
КонецПроцедуры

// Возвращает набор параметров, которые необходимо сохранять в рассылке отчетов.
// Значения параметров используются при формировании отчета в рассылке.
//
// Возвращаемое значение:
//   Структура - структура настроек, сохраняемых в рассылке с неинициализированными значениями.
//
Функция НастройкиОтчетаСохраняемыеВРассылке() Экспорт
	
	КоллекцияНастроек = Новый Структура;
	КоллекцияНастроек.Вставить("Организация"                      , Справочники.Организации.ПустаяСсылка());
	КоллекцияНастроек.Вставить("Периодичность"                    , 0);
	КоллекцияНастроек.Вставить("РазмещениеДополнительныхПолей"    , 0);
	КоллекцияНастроек.Вставить("Группировка"                      , Неопределено);
	КоллекцияНастроек.Вставить("ДополнительныеПоля"               , Неопределено);
	КоллекцияНастроек.Вставить("ВыводитьДиаграмму"                , Ложь);
	КоллекцияНастроек.Вставить("ВыводитьЗаголовок"                , Ложь);
	КоллекцияНастроек.Вставить("ВыводитьПодвал"                   , Ложь);
	КоллекцияНастроек.Вставить("МакетОформления"                  , Неопределено);
	КоллекцияНастроек.Вставить("НастройкиКомпоновкиДанных"        , Неопределено);
	
	Возврат КоллекцияНастроек;
	
КонецФункции

// Возвращает структуру параметров, наличие которых требуется для успешного формирования отчета.
//
// Возвращаемое значение:
//   Структура - структура параметров для формирования отчета.
//
Функция ПустыеПараметрыКомпоновкиОтчета() Экспорт
	
	// Часть параметров компоновки отчета используется так же и в рассылке отчета.
	ПараметрыОтчета = НастройкиОтчетаСохраняемыеВРассылке();
	
	// Дополним параметрами, влияющими на формирование отчета.
	ПараметрыОтчета.Вставить("ПериодОтчета"         , Неопределено);
	ПараметрыОтчета.Вставить("НачалоПериода"        , Дата(1,1,1));
	ПараметрыОтчета.Вставить("КонецПериода"         , Дата(1,1,1));
	ПараметрыОтчета.Вставить("РежимРасшифровки"     , Ложь);
	ПараметрыОтчета.Вставить("ДанныеРасшифровки"    , Неопределено);
	ПараметрыОтчета.Вставить("СхемаКомпоновкиДанных", Неопределено);
	ПараметрыОтчета.Вставить("ИдентификаторОтчета"  , "");
	
	Возврат ПараметрыОтчета;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьСтрокуВТаблицу(Таблица, СтрокаТаблицы, Раздел, СторонаПроводки, Знак)
	
	НоваяСтрока = Таблица.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	НоваяСтрока.СуммаНачальныйОстаток = Знак * СтрокаТаблицы["СуммаНачальныйОстаток" + СторонаПроводки];
	НоваяСтрока.СуммаКонечныйОстаток  = Знак * СтрокаТаблицы["СуммаКонечныйОстаток" + СторонаПроводки];
	НоваяСтрока.Раздел    = Раздел.Раздел;
	НоваяСтрока.Родитель  = Раздел.Родитель;
	НоваяСтрока.Порядок   = Раздел.Порядок;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
