#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВариантыОтчетов

// Для подсистемы "Варианты отчетов" при работе в модели сервиса.
//
// Возвращаемое значение:
//  Массив - массив структур (варианты отчета).
Функция ВариантыНастроек() Экспорт
	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Новый Структура("Имя, Представление", "ОстаткиДенежныхСредств", НСтр("ru = 'Остатки денежных средств'")));
КонецФункции

// См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
	НастройкиОтчета.ОпределитьНастройкиФормы = Истина;

	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "ОстаткиДенежныхСредств");
	НастройкиВарианта.Описание = НСтр("ru = 'Остатки денежных средств'");
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

#КонецОбласти

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	Результат.Вставить("ИспользоватьПослеКомпоновкиМакета",  Ложь);
	Результат.Вставить("ИспользоватьПослеВыводаРезультата",  Истина);
	Результат.Вставить("ИспользоватьДанныеРасшифровки",      Ложь);

	Возврат Результат;

КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета) Экспорт 
	
	Возврат "Остатки денежных средств на " + Формат(ПараметрыОтчета.Период, "ДЛФ=D; ДП=...");
		
КонецФункции

// Формирует таблицу данных для монитора руководителя по организации на дату
// Параметры
// 	Организация - СправочникСсылка.Организации - Организация по которой нужны данные
// 	Дата - Дата - дата на которую нужны остатки
// Возвращаемое значение:
// 	ТаблицаЗначений - Таблица с данными для монитора руководителя
//
Функция ПолучитьОстаткиДенежныхСредствДляМонитораРуководителя(Организация, Дата) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Если КонецДня(ТекущаяДатаСеанса()) = КонецДня(Дата) Тогда
		// Если остатки получаются "на сегодня", то обращаемся к текущим итогам регистра.
		Запрос.УстановитьПараметр("Период", Неопределено);
	Иначе
		Запрос.УстановитьПараметр("Период", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	КонецЕсли;
	
	// ВалютаРегламентированногоУчета пронадобится еще раз ниже
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	
	// Получим список счетов кассы для отбора
	СписокСчетов = ОбщегоНазначения.СкопироватьРекурсивно(БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ДенежныеСредстваВКассе));
	// Уберем из иерархии счета по которым не хотим отбирать
	СписокСчетов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СписокСчетов, БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ДенежныеДокументы)); 
	СписокСчетов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СписокСчетов, БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ДенежныеЭквиваленты)); 
	Запрос.УстановитьПараметр("СчетаКассы", СписокСчетов);
	
	// Получим список счетов безналичных расчетов для отбора
	СписокСчетов = Новый Массив;
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.СчетаВНациональнойВалюте);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.СчетаВИностраннойВалютеВМестныхБанках);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.СчетаВЗарубежныхБанках);
	//СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ДенежныеСредстваВПути);
	СписокСчетов = БухгалтерскийУчетСервер.СформироватьМассивСубсчетов(СписокСчетов);
	
	//// Уберем из иерархии счета по которым не хотим отбирать
	//СписокСчетов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СписокСчетов, БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты)); 
	//СписокСчетов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СписокСчетов, БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам)); 
	//СписокСчетов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СписокСчетов, БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РеализацияИностраннойВалюты)); 
	
	Запрос.УстановитьПараметр("СчетаУчетаБезналичные", СписокСчетов);
	
	ПорядокСубконтоБезналичные = Новый Массив;
	ПорядокСубконтоБезналичные.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДенежныеСредства);
	
	Запрос.УстановитьПараметр("ПорядокСубконтоБезналичные", ПорядокСубконтоБезналичные);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.СуммаОстатокДт КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет В (&СчетаКассы), , Организация = &Организация) КАК ХозрасчетныйОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Субконто1 КАК БанковскийСчет,
		|	ХозрасчетныйОстатки.СуммаОстатокДт КАК Сумма,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстатки.Счет.Валютный
		|			ТОГДА ХозрасчетныйОстатки.Валюта
		|		ИНАЧЕ &ВалютаРегламентированногоУчета
		|	КОНЕЦ КАК Валюта,
		|	ЕСТЬNULL(ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт, 0) КАК СуммаВВалюте,
		|	ХозрасчетныйОстатки.Валюта.Наименование КАК ВалютаНаименование
		|ПОМЕСТИТЬ ВТ_ОстаткиПоБанку
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет В (&СчетаУчетаБезналичные), &ПорядокСубконтоБезналичные, Организация = &Организация) КАК ХозрасчетныйОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОстаткиПоБанку.БанковскийСчет КАК БанковскийСчет,
		|	ВТ_ОстаткиПоБанку.Сумма КАК Сумма,
		|	ВТ_ОстаткиПоБанку.Валюта КАК Валюта,
		|	ВТ_ОстаткиПоБанку.СуммаВВалюте КАК СуммаВВалюте,
		|	ВТ_ОстаткиПоБанку.ВалютаНаименование КАК ВалютаНаименование,
		|	ЕСТЬNULL(БанковскиеСчета.НомерСчета, """") КАК БанковскийСчетНомерСчета,
		|	ЕСТЬNULL(Банки.Код, """") КАК БанковскийСчетБИКБанка
		|ИЗ
		|	ВТ_ОстаткиПоБанку КАК ВТ_ОстаткиПоБанку
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Банки КАК Банки
		|			ПО БанковскиеСчета.Банк = Банки.Ссылка
		|		ПО ВТ_ОстаткиПоБанку.БанковскийСчет = БанковскиеСчета.Ссылка";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТаблицаДанных = МониторРуководителя.ТаблицаДанных();
	
	// Подготовим переменные которые будем использовать при заполнении таблицы
	ПредставлениеВалюты = НСтр("ru = 'В сомовых кассах'");
	ИтогоВКассе = 0;                                                    	
	
	// Касса.
	ТаблицаОстатковВКассе = Результат[0].Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	Для Каждого СтрокаКасса Из ТаблицаОстатковВКассе Цикл
		
		СтрокаДанных = ТаблицаДанных.Добавить();
		СтрокаДанных.Представление 		= НСтр("ru = 'В кассе'");
		СтрокаДанных.ДанныеРасшифровки 	= ВалютаРегламентированногоУчета;
		СтрокаДанных.Порядок       		= ПорядокКассыВМониторе();
		СтрокаДанных.Сумма         		= СтрокаКасса.Сумма;
		
		СтрокаДанных = ТаблицаДанных.Добавить();
		СтрокаДанных.ПодразделМонитора  = Перечисления.ПодразделыМонитораРуководителя.Детально;
		СтрокаДанных.Представление 		= НСтр("ru = 'В кассе'");
		СтрокаДанных.ДанныеРасшифровки 	= ВалютаРегламентированногоУчета;
		СтрокаДанных.Порядок       		= ПорядокКассыВМониторе();
		СтрокаДанных.Сумма         		= СтрокаКасса.Сумма;
		
		ИтогоВКассе = ИтогоВКассе + СтрокаКасса.Сумма;
		
	КонецЦикла;
	
	// Подготовим переменные которые будем использовать при заполнении таблицы.
	ПредставлениеДляРублевыхСчетов = НСтр("ru = 'На рублевых счетах'");
	
	ИтогоНаРасчетныхСчетах = 0;
	
	ТаблицаОстатковНаСчетах = Результат[2].Выгрузить(ОбходРезультатаЗапроса.Прямой);
	ТаблицаОстатковНаСчетахСводно = ТаблицаОстатковНаСчетах.Скопировать();
	ТаблицаОстатковНаСчетахСводно.Свернуть("Валюта, ВалютаНаименование", "Сумма, СуммаВВалюте");
	
	// Остатки по банку для Монитора основных показателей.
	Для Каждого СтрокаНаСчетах Из ТаблицаОстатковНаСчетахСводно Цикл
		
		ВалютаОстатка = СтрокаНаСчетах.Валюта;
		
		// Для рублевых счетов особенное представление и порядок.
		Если ВалютаОстатка = ВалютаРегламентированногоУчета Тогда
			ПредставлениеОстатка = ПредставлениеДляРублевыхСчетов;
			Порядок = ПорядокСомовыхСчетовВМониторе();
		Иначе
			ПредставлениеОстатка = СтрокаНаСчетах.ВалютаНаименование;
			Порядок = ПорядокВалютныхСчетовВМониторе();
		КонецЕсли;
		
		СтрокаДанных = ТаблицаДанных.Добавить();
		СтрокаДанных.Представление 		= ПредставлениеОстатка;
		СтрокаДанных.ДанныеРасшифровки  = ВалютаОстатка;
		СтрокаДанных.Порядок       		= Порядок;
		СтрокаДанных.Сумма         		= СтрокаНаСчетах.Сумма;
		СтрокаДанных.СуммаВВалюте  		= СтрокаНаСчетах.СуммаВВалюте;
		ИтогоНаРасчетныхСчетах = ИтогоНаРасчетныхСчетах + СтрокаНаСчетах.Сумма;
		
	КонецЦикла;
	
	// Остатки по банку в разрезе расчетных счетов для ExternalAPI.
	Для Каждого СтрокаНаСчетах Из ТаблицаОстатковНаСчетах Цикл
		
		ВалютаОстатка = СтрокаНаСчетах.Валюта;
		
		// Для рублевых счетов особенный порядок.
		Если ВалютаОстатка = ВалютаРегламентированногоУчета Тогда
			Порядок = ПорядокСомовыхСчетовВМониторе();
		Иначе
			Порядок = ПорядокВалютныхСчетовВМониторе();
		КонецЕсли;
		
		СтрокаДанных = ТаблицаДанных.Добавить();
		СтрокаДанных.ПодразделМонитора  = Перечисления.ПодразделыМонитораРуководителя.Детально;
		СтрокаДанных.Представление      = СтрШаблон(НСтр("ru = '%1; %2'"), СтрокаНаСчетах.БанковскийСчетНомерСчета, СтрокаНаСчетах.БанковскийСчетБИКБанка);
		СтрокаДанных.ДанныеРасшифровки  = СтрокаНаСчетах.Валюта;
		СтрокаДанных.Порядок            = Порядок;
		СтрокаДанных.Сумма              = СтрокаНаСчетах.Сумма;
		СтрокаДанных.СуммаВВалюте       = СтрокаНаСчетах.СуммаВВалюте;
		
	КонецЦикла;
	
	// Добавляем итог по разделу.
	СтрокаДанных = ТаблицаДанных.Добавить();
	СтрокаДанных.Представление = НСтр("ru = 'Итого'"); 
	СтрокаДанных.Порядок       = ПорядокИтоговВМониторе();
	СтрокаДанных.Сумма         = ИтогоВКассе + ИтогоНаРасчетныхСчетах;
	
	// Добавляем итог по разделу.
	СтрокаДанных = ТаблицаДанных.Добавить();
	СтрокаДанных.ПодразделМонитора  = Перечисления.ПодразделыМонитораРуководителя.Детально;
	СтрокаДанных.Представление = НСтр("ru = 'Итого'");
	СтрокаДанных.Порядок       = ПорядокИтоговВМониторе();
	СтрокаДанных.Сумма         = ИтогоВКассе + ИтогоНаРасчетныхСчетах;
	
	Возврат ТаблицаДанных;
	
КонецФункции 

// Формирует таблицу данных для монитора руководителя по организации на дату
// Параметры
// 	Организация - СправочникСсылка.Организации - Организация по которой нужны данные
// 	Дата - Дата - дата на которую нужны остатки
// Возвращаемое значение:
// 	ТаблицаЗначений - Таблица с данными для монитора руководителя
//
Функция ПолучитьОстаткиДенежныхСредствДляМонитораРуководителяСводно(Организация, Дата) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Если КонецДня(ТекущаяДатаСеанса()) = КонецДня(Дата) Тогда
		// Если остатки получаются "на сегодня", то обращаемся к текущим итогам регистра.
		Запрос.УстановитьПараметр("Период", Неопределено);
	Иначе
		Запрос.УстановитьПараметр("Период", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	КонецЕсли;
	
	// Получим список счетов кассы для отбора
	СписокСчетов = ОбщегоНазначения.СкопироватьРекурсивно(БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ДенежныеСредстваВКассе));
	// Уберем из иерархии счета по которым не хотим отбирать
	СписокСчетов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СписокСчетов,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ДенежныеДокументы)); 
	СписокСчетов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СписокСчетов,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ДенежныеЭквиваленты)); 
	
	СписокСчетовБезналичные = Новый Массив;
	СписокСчетовБезналичные.Добавить(ПланыСчетов.Хозрасчетный.СчетаВНациональнойВалюте);
	СписокСчетовБезналичные.Добавить(ПланыСчетов.Хозрасчетный.СчетаВИностраннойВалютеВМестныхБанках);
	СписокСчетовБезналичные.Добавить(ПланыСчетов.Хозрасчетный.СчетаВЗарубежныхБанках);
	//СписокСчетовБезналичные.Добавить(ПланыСчетов.Хозрасчетный.ДенежныеСредстваВПути);
	СписокСчетовБезналичные = БухгалтерскийУчетСервер.СформироватьМассивСубсчетов(СписокСчетовБезналичные);
	
	//// Уберем из иерархии счета по которым не хотим отбирать
	//СписокСчетовБезналичные = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СписокСчетовБезналичные,
	//	БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты)); 
	//СписокСчетовБезналичные = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СписокСчетовБезналичные,
	//	БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам)); 
	//СписокСчетовБезналичные = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СписокСчетовБезналичные,
	//	БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РеализацияИностраннойВалюты)); 
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокСчетов,СписокСчетовБезналичные);
	
	Запрос.УстановитьПараметр("Счета", СписокСчетов);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.СуммаОстатокДт КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет В (&Счета), , Организация = (&Организация)) КАК ХозрасчетныйОстатки";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ТаблицаДанных = МониторРуководителя.ТаблицаДанных();
	
	// Добавляем итог по разделу
	СтрокаДанных = ТаблицаДанных.Добавить();
	СтрокаДанных.Представление = НСтр("ru = 'Итого'");
	СтрокаДанных.Порядок       = ПорядокИтоговВМониторе();
	СтрокаДанных.Сумма         = Выборка.Сумма;
	
	Возврат ТаблицаДанных;
	
КонецФункции 

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.Период) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Период", КонецДня(ПараметрыОтчета.Период) + 1);
	КонецЕсли;
	
	Таблица = Неопределено;
	Для Каждого ЭлементСтруктуры Из КомпоновщикНастроек.Настройки.Структура Цикл		
		Если ЭлементСтруктуры.Имя = "Таблица" Тогда
			Таблица = ЭлементСтруктуры;
			Прервать;
		КонецЕсли;		
	КонецЦикла;
	
	Если Таблица <> Неопределено Тогда
		// Группировка
		Таблица.Строки.Очистить();
		Группировка = Таблица.Строки;
		Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
			Если ПолеВыбраннойГруппировки.Использование Тогда
				Если ТипЗнч(Группировка) = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") Тогда
					Группировка = Группировка.Добавить();
				Иначе
					Группировка = Группировка.Структура.Добавить();
				КонецЕсли;
				БухгалтерскиеОтчетыВызовСервера.ЗаполнитьГруппировку(ПолеВыбраннойГруппировки, Группировка);				
			КонецЕсли;
		КонецЦикла;
		Если Не БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет() Тогда
			Для Каждого ЭлементСтруктуры Из Таблица.Колонки Цикл
				Для Каждого ПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
					Если Строка(ПолеГруппировки.Поле) =  "Валюта" Тогда
						ЭлементСтруктуры.Использование = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
		
	// Дополнительные данные
	БухгалтерскиеОтчетыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	// Вывод подписей
	БухгалтерскиеОтчеты.ВыводПодписейОтчета(ПараметрыОтчета, Результат);
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета, ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
КонецПроцедуры

// Процедура используется подсистемой варианты отчетов
//
Процедура НастройкиОтчета(Настройки) Экспорт
	
	Схема = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Для Каждого Вариант Из Схема.ВариантыНастроек Цикл
		 Настройки.ОписаниеВариантов.Вставить(Вариант.Имя,Вариант.Представление);
	КонецЦикла;	
	
КонецПроцедуры

// Возвращает набор параметров, которые необходимо сохранять в рассылке отчетов.
// Значения параметров используются при формировании отчета в рассылке.
//
// Возвращаемое значение:
//   Структура - структура настроек, сохраняемых в рассылке с неинициализированными значениями.
//
Функция НастройкиОтчетаСохраняемыеВРассылке() Экспорт
	
	КоллекцияНастроек = Новый Структура;
	КоллекцияНастроек.Вставить("Организация"                      , Справочники.Организации.ПустаяСсылка());
	КоллекцияНастроек.Вставить("РазмещениеДополнительныхПолей"    , 0);
	КоллекцияНастроек.Вставить("Группировка"                      , Неопределено);
	КоллекцияНастроек.Вставить("ДополнительныеПоля"               , Неопределено);
	КоллекцияНастроек.Вставить("ВыводитьЗаголовок"                , Ложь);
	КоллекцияНастроек.Вставить("ВыводитьПодвал"                   , Ложь);
	КоллекцияНастроек.Вставить("МакетОформления"                  , Неопределено);
	КоллекцияНастроек.Вставить("НастройкиКомпоновкиДанных"        , Неопределено);
	
	Возврат КоллекцияНастроек;
	
КонецФункции

// Возвращает структуру параметров, наличие которых требуется для успешного формирования отчета.
//
// Возвращаемое значение:
//   Структура - структура параметров для формирования отчета.
//
Функция ПустыеПараметрыКомпоновкиОтчета() Экспорт
	
	// Часть параметров компоновки отчета используется так же и в рассылке отчета.
	ПараметрыОтчета = НастройкиОтчетаСохраняемыеВРассылке();
	
	// Дополним параметрами, влияющими на формирование отчета.
	ПараметрыОтчета.Вставить("ПериодОтчета"         , Неопределено);
	ПараметрыОтчета.Вставить("Период"               , Дата(1,1,1));
	ПараметрыОтчета.Вставить("РежимРасшифровки"     , Ложь);
	ПараметрыОтчета.Вставить("ДанныеРасшифровки"    , Неопределено);
	ПараметрыОтчета.Вставить("СхемаКомпоновкиДанных", Неопределено);
	ПараметрыОтчета.Вставить("ИдентификаторОтчета"  , "");
	
	Возврат ПараметрыОтчета;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПорядокИтоговВМониторе() Экспорт
	
	Возврат 0;
	
КонецФункции

Функция ПорядокКассыВМониторе() Экспорт
	
	Возврат 1;
	
КонецФункции

Функция ПорядокВалютнойКассыВМониторе() Экспорт
	
	Возврат 2;
	
КонецФункции

Функция ПорядокСомовыхСчетовВМониторе() Экспорт
	
	Возврат 3;
	
КонецФункции

Функция ПорядокВалютныхСчетовВМониторе() Экспорт
	
	Возврат 4;
	
КонецФункции

#КонецОбласти

#КонецЕсли
