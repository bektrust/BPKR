#Область ОписаниеПеременных

&НаКлиенте
Перем УстановкаОсновнойКассыВыполнена; // Признак успешной установки основной кассы из формы организации.

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Отбор.Свойство("Владелец", ВладелецКасс);
	
	Если ЗначениеЗаполнено(ВладелецКасс) Тогда
		// Контекстное открытие формы с отбором по контрагенту/организации
		
		АвтоЗаголовок = Ложь;
		Заголовок = НСтр("ru='Кассы '") + " """ + ВладелецКасс + """";
		
		Список.Параметры.УстановитьЗначениеПараметра("ОсновнаяКассаВладельца",
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецКасс, "ОсновнаяКасса"));
			
	Иначе
		// Открытие в общем режиме
	
		Элементы.Владелец.Видимость = Истина;
		Список.Параметры.УстановитьЗначениеПараметра("ОсновнаяКассаВладельца", Неопределено);
		
	КонецЕсли;

	// СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов
	МожноРедактировать = ПравоДоступа("Редактирование", Метаданные.Справочники.Кассы);
	Элементы.СписокКонтекстноеМенюИзменитьВыделенные.Видимость = МожноРедактировать;
	// Конец СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события ОбработкаОповещения.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "УстановкаОсновнойКассыВыполнена" Тогда
		УстановкаОсновнойКассыВыполнена = Истина;
	ИначеЕсли ИмяСобытия = "Запись_Организации" Тогда	
		Элементы.Список.Обновить();	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	Если ТипЗнч(Элементы.Список.ТекущаяСтрока) <> Тип("СтрокаГруппировкиДинамическогоСписка")
		И Элементы.Список.ТекущиеДанные <> Неопределено Тогда
		
		Элементы.ИспользоватьКакОсновную.Доступность = Не Элементы.Список.ТекущиеДанные.ЭтоОсновнаяКасса;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
// Устанавливает текущий элемент кассой по умолчанию для владельца
//
Процедура ИспользоватьКакОсновную(Команда)
	
	Если ТипЗнч(Элементы.Список.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка")
		Или Элементы.Список.ТекущиеДанные = Неопределено
		Или Элементы.Список.ТекущиеДанные.ЭтоОсновнаяКасса Тогда
		
		Возврат;
	КонецЕсли;
	
	НоваяОсновнаяКасса = Элементы.Список.ТекущиеДанные.Ссылка;
	
	// Если открыта форма организации, то изменение основной кассы выполняем в ней.
	УстановкаОсновнойКассыВыполнена = Ложь;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Владелец", Элементы.Список.ТекущиеДанные.Владелец);
	СтруктураПараметров.Вставить("НоваяОсновнаяКасса", НоваяОсновнаяКасса);
	
	Оповестить("УстановкаОсновнойКассы", СтруктураПараметров, ЭтотОбъект);
	
	// Если форма организации закрыта, то запишем основную кассу организации самостоятельно.
	Если Не УстановкаОсновнойКассыВыполнена Тогда
		ЗаписатьОсновнуюКассу(СтруктураПараметров);
	КонецЕсли;
	
	// Обновим динамический список.
	Если ЗначениеЗаполнено(ВладелецКасс) Тогда
		Список.Параметры.УстановитьЗначениеПараметра("ОсновнаяКассаВладельца", НоваяОсновнаяКасса);
	Иначе
		Элементы.Список.Обновить();
	КонецЕсли;
КонецПроцедуры // УстановитьКакКассаПоУмолчанию()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Процедура ЗаписатьОсновнуюКассу(СтруктураПараметров)
	
	ВладелецОбъект = СтруктураПараметров.Владелец.ПолучитьОбъект();
	ВладелецУспешноЗаблокирован = Истина;
	
	Попытка
		ВладелецОбъект.Заблокировать();
	Исключение
		
		ВладелецУспешноЗаблокирован = Ложь;
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось заблокировать %1: %2, для изменения основной кассы, по причине:
				|%3'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
				СтруктураПараметров.Владелец.Метаданные().ПредставлениеОбъекта, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Предупреждение,, ВладелецОбъект, ОписаниеОшибки());
		
	КонецПопытки;
	
	// Если удалось заблокировать, изменим основную кассу у организации.
	Если ВладелецУспешноЗаблокирован Тогда
		ВладелецОбъект.ОсновнаяКасса = СтруктураПараметров.НоваяОсновнаяКасса;
		ВладелецОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов
&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов

// СтандартныеПодсистемы.ПодключаемыеКоманды

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
