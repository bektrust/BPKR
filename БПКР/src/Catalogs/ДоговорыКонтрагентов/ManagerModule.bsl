#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает описание блокируемых реквизитов.
//
// Возвращаемое значение:
//  Массив - содержит строки в формате ИмяРеквизита[;ИмяЭлементаФормы,...]
//           где ИмяРеквизита - имя реквизита объекта, ИмяЭлементаФормы - имя элемента формы,
//           связанного с реквизитом.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	БлокируемыеРеквизиты = Новый Массив;
	
	БлокируемыеРеквизиты.Добавить("Организация");
	БлокируемыеРеквизиты.Добавить("Владелец");
	БлокируемыеРеквизиты.Добавить("ВалютаРасчетов");
	БлокируемыеРеквизиты.Добавить("ВидДоговора");
	БлокируемыеРеквизиты.Добавить("СтавкаНДС");
	БлокируемыеРеквизиты.Добавить("СуммаВключаетНалоги");
	
	Возврат БлокируемыеРеквизиты;
	
КонецФункции 

// Получает договор контрагента по умолчанию с учетом условий отбора. Возвращается основной договор или единственный или
// пустую ссылку.
//
// Параметры
//  Контрагент	-	<СправочникСсылка.Контрагенты> 
//							Контрагент, договор которого нужно получить
//  Организация	-	<СправочникСсылка.Организации> 
//							Организация, договор которой нужно получить
//  СписокВидовДоговора	-	<Массив> или <СписокЗначений>, состоящий из значений типа <ПеречислениеСсылка.ВидыДоговоров> 
//							Нужные виды договора
//
// Возвращаемое значение:
//   <СправочникСсылка.ДоговорыКонтрагентов> - найденный договор или пустая ссылка
//
Функция ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговора = Неопределено) Экспорт
	
	ОсновнойДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
	ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОсновныеДоговорыКонтрагента.Договор КАК Договор
		|ИЗ
		|	РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
		|ГДЕ
		|	ОсновныеДоговорыКонтрагента.Организация = &Организация
		|	И ОсновныеДоговорыКонтрагента.Контрагент = &Контрагент
		|	И ОсновныеДоговорыКонтрагента.ВидДоговора В(&СписокВидовДоговора)";
	Если СписокВидовДоговора = Неопределено Тогда 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОсновныеДоговорыКонтрагента.ВидДоговора В(&СписокВидовДоговора)", "Истина");
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("СписокВидовДоговора", СписокВидовДоговора);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		
		ОсновнойДоговорКонтрагента = ВыборкаДетальныеЗаписи.Договор;
	КонецЕсли;
	
	Возврат ОсновнойДоговорКонтрагента;

КонецФункции // ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора()

// Проверяет договор контрагента на соответствие переданным параметрам.
//
// Параметры
//	ТекстСообщения - <Строка> - текст сообщения об ошибках
//	Договор	-	<СправочникСсылка.ДоговорыКонтрагентов> - проверяемый договор
//	Организация	-	<СправочникСсылка.Организации> - организация документа
//	Контрагент	-	<СправочникСсылка.Контрагенты> - контрагент документа
//	СписокВидовДоговора	-	<СписокЗначений>, состоящий из значений типа <ПеречислениеСсылка.ВидыДоговоров>. 
//							Нужные виды договора.
//
// Возвращаемое значение:
//	<Булево> - Истина, если проверка пройдена успешно.
//
Функция ДоговорСоответствуетУсловиямДокумента(ТекстСообщения, Договор, Организация, Контрагент, СписокВидовДоговора) Экспорт
	
	ТекстСообщения = "";
	
	Если Не Контрагент.ВестиРасчетыПоДоговорам Тогда
		Возврат Истина;
	КонецЕсли;
	
	НеСоответствуетОрганизация = Ложь;
	НеСоответствуетВидДоговора = Ложь;
	
	Если Договор.Организация <> Организация Тогда
		НеСоответствуетОрганизация = Истина;
	КонецЕсли;
		
	Если СписокВидовДоговора.НайтиПоЗначению(Договор.ВидДоговора) = Неопределено Тогда
		НеСоответствуетВидДоговора = Истина;
	КонецЕсли;
	
	Если (НеСоответствуетОрганизация ИЛИ НеСоответствуетВидДоговора) = Ложь Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'Реквизиты договора не соответствуют условиям документа:'");
	
	Если НеСоответствуетОрганизация Тогда
		ТекстСообщения = ТекстСообщения + НСтр("ru = '
		| - Не совпадает организация'");
	КонецЕсли;
	
	Если НеСоответствуетВидДоговора Тогда
		ТекстСообщения = ТекстСообщения + НСтр("ru = '
		| - Не совпадает вид договора'");
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ДоговорСоответствуетУсловиямДокумента()

// Возвращает список доступных видов договора для документа.
//
// Параметры
//	Документ  - любой документ, предусматривающий договор контрагента
//	ВидОперации  - вид операции документа.
//
// Возвращаемое значение:
//	<СписокЗначений>   - список видов договора, доступных для документа.
//
Функция ВидыДоговораДляДокумента(Документ, ВидОперации = Неопределено, ИмяТабличнойЧасти = "") Экспорт
	
	СписокВидовДоговора = Новый СписокЗначений;
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ВводНачальныхОстатков") Тогда
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияУслугПоПереработке")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.РозничнаяПродажа")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.СчетНаОплатуПокупателю")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.СчетФактураВыписанный")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказНаПроизводство")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ЭлектронныйСчетФактураВыписанный")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ЭлектронныйСчетФактураПолученный")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаСтоимостиРеализации") 
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ОбщийСчетФактураВыписанный") Тогда
		
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") 
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") 
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ОплатаПлатежнойКартой") Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика
			ИЛИ ВидОперации = Перечисления.ВидыОперацийППВ.ВозвратОтПоставщика Тогда
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоЗаймам
			Или ВидОперации = Перечисления.ВидыОперацийППВ.РасчетыПоЗаймам
			Или ВидОперации = Перечисления.ВидыОперацийППВ.ПоступлениОтПродажПоДоговорамЭквайринга Тогда  
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
		Иначе 	
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ДополнительныеРасходы")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.АвансовыйОтчет")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.Доверенность")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.СчетНаОплатуПоставщика")		
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеИзПереработки")		
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ПередачаТоваров")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаСтоимостиПоступления")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаСтоимостиДополнительныхРасходов")Тогда
		
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") 
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику 
			ИЛИ ВидОперации = Перечисления.ВидыОперацийППИ.ОплатаПоставщику Тогда
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИ.РасчетыПоЗаймам
			Или ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоЗаймам 
			ИЛИ ВидОперации = Перечисления.ВидыОперацийППИ.ПрочийРасход Тогда
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИ.ОплатаНалогов Тогда 
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоровКонтрагентов.ПустаяСсылка());
		Иначе
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ГТДПоИмпорту") Тогда 
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	ИначеЕсли ТипЗнч(Документ) = Тип("СправочникСсылка.ВидыОплатОрганизаций") Тогда 
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	КонецЕсли;
	
	Возврат СписокВидовДоговора;
	
КонецФункции // ВидыДоговораДляДокумента()

// Устанавливает договор в качестве основного в регистре сведений "Основные договора контрагента"
// 
// Параметры:
//   Договор - Договор, который необходимо установить как основной
//
Процедура УстановитьОсновнойДоговорКонтрагента(Договор) Экспорт
	
	ПараметрыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "Организация, Владелец, ВидДоговора");
	
	НоваяЗапись = РегистрыСведений.ОсновныеДоговорыКонтрагента.СоздатьМенеджерЗаписи();
	НоваяЗапись.Организация = ПараметрыДоговора.Организация;
	НоваяЗапись.Контрагент  = ПараметрыДоговора.Владелец;
	НоваяЗапись.ВидДоговора = ПараметрыДоговора.ВидДоговора;
	НоваяЗапись.Договор     = Договор;
	НоваяЗапись.Записать(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция составляет наименование договора.
//
Функция НаименованиеДоговора(ВалютаРасчетов, Знач НомерДоговора = "", Знач ДатаДоговора = Неопределено) Экспорт 
	
	Если НомерДоговора = "" Тогда 
		НомерДоговора = НаименованиеПоУмолчаниюБезРеквизитов();
	КонецЕсли;	
	
	Слова = Новый Массив;
	Если ЗначениеЗаполнено(НомерДоговора) Тогда
		Слова.Добавить(СокрЛП(НомерДоговора));
	КонецЕсли;
	Если ЗначениеЗаполнено(ДатаДоговора) Тогда
		Слова.Добавить(СтрШаблон(НСтр("ru = 'от %1'"), Формат(ДатаДоговора, "ДЛФ=D")));
	КонецЕсли;
	Если ЗначениеЗаполнено(ВалютаРасчетов) Тогда
		Слова.Добавить("(" + СокрЛП(ВалютаРасчетов) + ")");
	КонецЕсли;
	
	Возврат СтрСоединить(Слова, " ");
	
КонецФункции // НаименованиеДоговора()

Функция НаименованиеПоУмолчаниюБезРеквизитов() Экспорт
	
	// Такое наименование по умолчанию используется только тогда, когда договор нужно сохранить, но дата и номер договора неизвестны.
	// При интерактивном вводе договора наименование по умолчанию устанавливается исходя из номера и даты - см. РеквизитыДоговораСтрокой().
	
	Возврат НСтр("ru='Основной договор'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция РеквизитыДоговораДляПечати()
	
	ИменаРеквизитов = Новый Массив;
	
	ИменаРеквизитов.Добавить("Владелец");
	ИменаРеквизитов.Добавить("Организация");
	ИменаРеквизитов.Добавить("ДатаДоговора");
	ИменаРеквизитов.Добавить("НомерДоговора");
	//ИменаРеквизитов.Добавить("СрокДействия");
	ИменаРеквизитов.Добавить("ВидДоговора");
	ИменаРеквизитов.Добавить("ВалютаРасчетов");
	ИменаРеквизитов.Добавить("УстановленСрокОплаты");
	ИменаРеквизитов.Добавить("СрокОплаты");
	//ИменаРеквизитов.Добавить("ДатаОплаты");
	//ИменаРеквизитов.Добавить("Руководитель");
	//ИменаРеквизитов.Добавить("ЗаРуководителяПоПриказу");
	//ИменаРеквизитов.Добавить("ДолжностьРуководителя");
	//ИменаРеквизитов.Добавить("РуководительКонтрагента");
	//ИменаРеквизитов.Добавить("ЗаРуководителяКонтрагентаПоПриказу");
	//ИменаРеквизитов.Добавить("ДолжностьРуководителяКонтрагента");
	//ИменаРеквизитов.Добавить("ПолРуководителяКонтрагента");
	
	Возврат ИменаРеквизитов;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.ШаблоныДоговоров) Тогда
		// Текст договора
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "Договор";
		КомандаПечати.Представление = НСтр("ru = 'Договор'");
		КомандаПечати.Обработчик    = "ПечатьДоговоровКлиент.ВыполнитьКомандуПечатиТекстаДоговора";
		КомандаПечати.СписокФорм    = "ФормаЭлемента,ФормаСпискаОбщая";
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.Контрагенты) Тогда
		// Печать конвертов
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "Конверт";
		КомандаПечати.Представление = НСтр("ru = 'Конверт'");
		КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиКонверта";
		КомандаПечати.СписокФорм    = "ФормаЭлемента,ФормаСпискаОбщая";
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру с перечнем полей, которые могут быть поставлены в текст 
// договора по данным из справочника "Договоры контрагентов".
//
Функция ПодготовитьПараметрыПечатиТекстаДоговора(ДоговорКонтрагента) Экспорт
	
	ИменаНеобходимыхРеквизитовДоговора = РеквизитыДоговораДляПечати();
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДоговорКонтрагента, ИменаНеобходимыхРеквизитовДоговора);
		
	// Дополнительные поля
	РеквизитыДоговора.Вставить("Руководитель", Справочники.ФизическиеЛица.ПустаяСсылка()); // Физ.лицо
	РеквизитыДоговора.Вставить("ДолжностьРуководителя", Справочники.Должности.ПустаяСсылка()); // Должность
	РеквизитыДоговора.Вставить("РуководительФИО", ""); // Фамилия Имя Отчество
	РеквизитыДоговора.Вставить("РуководительПол", ""); // Пол физического лица
	РеквизитыДоговора.Вставить("УсловиеОплаты", "");
	РеквизитыДоговора.Вставить("ИмяМакета", "");
	
	ДатаСреза = ?(ЗначениеЗаполнено(РеквизитыДоговора.ДатаДоговора), РеквизитыДоговора.ДатаДоговора, ТекущаяДатаСеанса());

	// Если срок оплаты не указан в самом договоре, берем его из константы.
	Если НЕ РеквизитыДоговора.УстановленСрокОплаты Тогда
		Если РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			РеквизитыДоговора.Вставить("СрокОплаты", Константы.СрокОплатыПоставщикам.Получить());
		Иначе
			РеквизитыДоговора.Вставить("СрокОплаты", Константы.СрокОплатыПокупателей.Получить());
		КонецЕсли;
	КонецЕсли;
	
	ОтветственныеЛица = БухгалтерскийУчетСервер.ОтветственныеЛицаОрганизацийРуководители(РеквизитыДоговора.Организация, ДатаСреза);

	Если ЗначениеЗаполнено(ОтветственныеЛица) Тогда
		РеквизитыДоговора.Вставить("Руководитель", ОтветственныеЛица.РуководительФизЛицо);
		РеквизитыДоговора.Вставить("РуководительФИО", ОтветственныеЛица.Руководитель);
		РеквизитыДоговора.Вставить("ДолжностьРуководителя", ОтветственныеЛица.РуководительДолжностьСсылка);
		
		Если ЗначениеЗаполнено(РеквизитыДоговора.Руководитель) Тогда
			РеквизитыДоговора.Вставить("РуководительПол", 
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыДоговора.Руководитель, "Пол"));
		КонецЕсли;
	КонецЕсли;	
	
	РеквизитыДоговора.Вставить("РуководительКонтрагента", ""); // Физ.лицо
	РеквизитыДоговора.Вставить("ДолжностьРуководителяКонтрагента", Справочники.Должности.ПустаяСсылка()); // Должность
	
	Возврат РеквизитыДоговора;

КонецФункции

// Заполняет переданный список данными о поддерживаемых форматах сохранения в файл.
//
// Параметры:
//	СписокФорматов - СписокЗначений - Список, который заполняется данными о форматах.
//
Процедура ЗаполнитьПоддерживаемыеФорматыСохранения(СписокФорматов) Экспорт

	СписокФорматов.Добавить("PDF",
		Перечисления.ФорматыСохраненияОтчетов.PDF, Истина, БиблиотекаКартинок.ФорматPDF);
	СписокФорматов.Добавить("RTF", 
		НСтр("ru = 'Текст в формате RTF (.rtf)'"), Ложь, БиблиотекаКартинок.ФорматWord);
	СписокФорматов.Добавить("HTML",
		Перечисления.ФорматыСохраненияОтчетов.HTML, Ложь, БиблиотекаКартинок.ФорматHTML);

КонецПроцедуры

#КонецОбласти

#КонецЕсли