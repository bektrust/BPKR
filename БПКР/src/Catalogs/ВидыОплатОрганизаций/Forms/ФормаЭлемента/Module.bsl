
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ПодготовитьФормуНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Передадим объекту информацию о том, что запись идет из формы.
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ЗаписьИзФормыЭлемента", Истина);
	
	КоличествоСтрокКомиссияБанка = ТекущийОбъект.КомиссияБанка.Количество();
	Если КоличествоСтрокКомиссияБанка = 0 Тогда
		ТекущийОбъект.КомиссияБанка.Добавить().ПроцентБанковскойКомиссии = ТекущийОбъект.ПроцентБанковскойКомиссии;
	ИначеЕсли КоличествоСтрокКомиссияБанка = 1 Тогда
		ТекущийОбъект.ПроцентБанковскойКомиссии = ТекущийОбъект.КомиссияБанка[0].ПроцентБанковскойКомиссии;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьДобавленнныеКолонкиТаблиц(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипОплатыПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ТипОплаты) Тогда
		ТипОплатыПриИзмененииНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент, Объект.Организация);
	Объект.ДоговорКонтрагента = СтруктураДанные.ДоговорКонтрагента;
КонецПроцедуры

&НаКлиенте
Процедура ПодключаемоеОборудованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	СтруктураОтбора = Новый Структура("Организация, ТипОборудования", Объект.Организация, ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал"));
	
	ПараметрыФормыВыбора = Новый Структура("Отбор, Заголовок", СтруктураОтбора, НСтр("ru='Выберите эвайринговый терминал'", "ru") );
	ОткрытьФорму("Справочник.ПодключаемоеОборудование.ФормаВыбора", ПараметрыФормыВыбора, Элементы.ПодключаемоеОборудование,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПроцентБанковскойКомиссииПриИзменении(Элемент)
	
	Если Объект.ПроцентБанковскойКомиссии = 0 Тогда
		Объект.КомиссияБанка.Очистить();
	Иначе
		Объект.КомиссияБанка.Очистить();
		Объект.КомиссияБанка.Добавить().ПроцентБанковскойКомиссии = Объект.ПроцентБанковскойКомиссии;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗависитОтСуммыОперацийПриИзменении(Элемент)
	
	Объект.КомиссияБанка.Очистить();
	Объект.КомиссияБанка.Добавить().ПроцентБанковскойКомиссии = Объект.ПроцентБанковскойКомиссии;
	Если ЗависитОтСуммыОпераций = 1 Тогда
		ЗаполнитьДобавленнныеКолонкиТаблиц(ЭтотОбъект);
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыКомиссияБанка

&НаКлиенте
Процедура КомиссияБанкаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ЗаполнитьДобавленнныеКолонкиТаблиц(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомиссияБанкаПослеУдаления(Элемент)
	
	ЗаполнитьДобавленнныеКолонкиТаблиц(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомиссияБанкаПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.НомерСтроки = 1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомиссияБанкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УправлениеФормой()
	
	// Видимость по умолчанию
	ВидимостьРеквизитовБезналичнойОплаты = Истина;
	ВидимостьКомиссииБанка               = Истина;
	ВидимостьПодключаемоеОборудование    = Ложь;
	
	Элементы.СчетУчетаРасчетов.Заголовок = НСтр("ru = 'Счет расчетов:'");
	
	Если Объект.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплат.Наличные") Тогда
		ВидимостьРеквизитовБезналичнойОплаты = Ложь;
	ИначеЕсли Объект.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплат.ПлатежнаяКарта") Тогда
		Элементы.Контрагент.ПодсказкаВвода = "Банк-плательщик";
		ВидимостьПодключаемоеОборудование = Истина;
	ИначеЕсли Объект.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплат.БанковскийКредит") Тогда
		Элементы.Контрагент.ПодсказкаВвода = "Банк-кредитор";
	ИначеЕсли Объект.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплат.ПодарочныйСертификатСобственный") Тогда
		Элементы.Контрагент.ПодсказкаВвода = "Обобщенный покупатель, например: ""Розничный покупатель"" или ""Частное лицо""";
		ВидимостьКомиссииБанка = Ложь;
		Элементы.СчетУчетаРасчетов.Заголовок = НСтр("ru = 'Счет авансов:'");
	КонецЕсли;
	
	Элементы.БезналичнаяОплата.Видимость        = ВидимостьРеквизитовБезналичнойОплаты;
	Элементы.ПодключаемоеОборудование.Видимость = ВидимостьПодключаемоеОборудование;
	Элементы.БанковскаяКомиссия.Видимость       = ВидимостьКомиссииБанка;
	
	Элементы.ДоговорКонтрагента.Доступность     = ЗначениеЗаполнено(Объект.Организация)
		И ЗначениеЗаполнено(Объект.Контрагент);
	
	Элементы.БанковскаяКомиссияТарифы.Видимость = ЗависитОтСуммыОпераций = 1;
	Элементы.БанковскаяКомиссияОдноЗначение.Доступность = ЗависитОтСуммыОпераций = 0;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	Если Параметры.Свойство("ТипОплатыДоступныеЗначения") Тогда
		Элементы.ТипОплаты.СписокВыбора.ЗагрузитьЗначения(Параметры.ТипОплатыДоступныеЗначения);
	ИначеЕсли Параметры.Свойство("ЗначенияЗаполнения") И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") Тогда
		
		Если Параметры.ЗначенияЗаполнения.Свойство("ТипОплаты") Тогда
			
			Элементы.ТипОплаты.СписокВыбора.Очистить();
			
			Если ТипЗнч(Параметры.ЗначенияЗаполнения.ТипОплаты) = Тип("ФиксированныйМассив") Тогда
			
				Для ИндексОтбора = 0 по Параметры.ЗначенияЗаполнения.ТипОплаты.Количество() - 1 Цикл
					
					Если Параметры.ЗначенияЗаполнения.ТипОплаты[ИндексОтбора] = Перечисления.ТипыОплат.ПлатежнаяКарта Тогда
						Элементы.ТипОплаты.СписокВыбора.Вставить(0, Параметры.ЗначенияЗаполнения.ТипОплаты[ИндексОтбора]);
					Иначе
						Элементы.ТипОплаты.СписокВыбора.Добавить(Параметры.ЗначенияЗаполнения.ТипОплаты[ИндексОтбора]);
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				Элементы.ТипОплаты.СписокВыбора.Добавить(Параметры.ЗначенияЗаполнения.ТипОплаты);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.ТипОплаты.СписокВыбора.Количество() = 0 Тогда
		
		Элементы.ТипОплаты.СписокВыбора.Добавить(Перечисления.ТипыОплат.ПлатежнаяКарта);
		Элементы.ТипОплаты.СписокВыбора.Добавить(Перечисления.ТипыОплат.БанковскийКредит);
		
		Если ПолучитьфункциональнуюОпцию("ИспользуютсяПодарочныеСертификаты") Тогда
			Элементы.ТипОплаты.СписокВыбора.Добавить(Перечисления.ТипыОплат.ПодарочныйСертификатСобственный);
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.Контрагент.Видимость         = ПравоДоступа("Просмотр", Метаданные.Справочники.Контрагенты);
	Элементы.ДоговорКонтрагента.Видимость = ПравоДоступа("Просмотр", Метаданные.Справочники.ДоговорыКонтрагентов);
	
	УстановитьПараметрыВыбораКонтрагента();
	УстановитьПараметрыВыбораДоговора();
	ЗависитОтСуммыОпераций = ?(Объект.КомиссияБанка.Количество() < 2, 0, 1);
	ЗаполнитьДобавленнныеКолонкиТаблиц(ЭтотОбъект);
	УправлениеФормой();
	
КонецПроцедуры

// Получает набор данных с сервера для процедуры КонтрагентПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Контрагент, Организация)
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Контрагент, Организация);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ДоговорКонтрагента",
		ДоговорПоУмолчанию);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

// Получает договор по умолчанию
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Ссылка, Контрагент, Организация)
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ВидыДоговораДляДокумента(Ссылка);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

&НаСервере
Процедура ТипОплатыПриИзмененииНаСервере()
	
	УстановитьПараметрыВыбораКонтрагента();
	УстановитьПараметрыВыбораДоговора();
	
	Если ЗначениеЗаполнено(Объект.Контрагент)
		И Объект.ТипОплаты = Перечисления.ТипыОплат.ПодарочныйСертификатСобственный Тогда
		
		// для собственных сертификатов контрагент может быть только физлицом
		ВидТекущегоКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Объект.Контрагент, "ЮридическоеФизическоеЛицо");
		
		Если ВидТекущегоКонтрагента <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
	ДоступныеВидыДоговоров = Справочники.ВидыОплатОрганизаций.ВидыДоговоровПоТипуОплаты(Объект.ТипОплаты);
	ВидТекущегоДоговора    = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ВидДоговора");
	Если ДоступныеВидыДоговоров.Найти(ВидТекущегоДоговора) = Неопределено Тогда
		Объект.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	УстановитьСчетУчетаРасчетовПоУмолчанию();
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораКонтрагента()
	
	Если НЕ ПравоДоступа("Просмотр", Метаданные.Справочники.Контрагенты) Тогда
		Возврат;
	КонецЕсли; 
	
	Если Объект.ТипОплаты = Перечисления.ТипыОплат.ПодарочныйСертификатСобственный Тогда
		// Собственный сертификат может быть выдан только обобщенному физическому лицу.
		ДоступныеВидыКонтрагента = 
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	
		ПараметрВыбораКонтрагента = Новый ПараметрВыбора(
			"Отбор.ЮридическоеФизическоеЛицо", Новый ФиксированныйМассив(ДоступныеВидыКонтрагента));
	
		НовыйМассивПараметров = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрВыбораКонтрагента);
		Элементы.Контрагент.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Иначе
		// Очистим параметры выбора.
		Элементы.Контрагент.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораДоговора()
	
	Если НЕ ПравоДоступа("Просмотр", Метаданные.Справочники.ДоговорыКонтрагентов) Тогда
		Возврат;
	КонецЕсли; 
	
	ДоступныеВидыДоговоров    = Справочники.ВидыОплатОрганизаций.ВидыДоговоровПоТипуОплаты(Объект.ТипОплаты);
	ПараметрВыбораВидДоговора = Новый ПараметрВыбора("Отбор.ВидДоговора", Новый ФиксированныйМассив(ДоступныеВидыДоговоров));
	
	ПараметрВыбораВалютный = Новый ПараметрВыбора("Отбор.Валютный", Ложь);
	
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(ПараметрВыбораВидДоговора);
	НовыйМассивПараметров.Добавить(ПараметрВыбораВалютный);
	
	Элементы.ДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСчетУчетаРасчетовПоУмолчанию()
	
	Объект.СчетУчетаРасчетов = Справочники.ВидыОплатОрганизаций.СчетУчетаРасчетовПоУмолчанию(Объект.ТипОплаты);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДобавленнныеКолонкиТаблиц(Форма)
	
	Объект = Форма.Объект;
	
	Объект.КомиссияБанка.Сортировать("СуммаОперацийОт");
	КоличествоСтрок = Объект.КомиссияБанка.Количество();
	
	ГраницаСуммыОпераций = 0;
	Для сч = 1 По КоличествоСтрок Цикл
		СтрокаТаблицы = Объект.КомиссияБанка[КоличествоСтрок - сч];
		Если КоличествоСтрок = 1 Тогда
			ШаблонСтроки = НСтр("ru = 'Комиссия %1% (не зависит от суммы операций)'");
			СтрокаТаблицы.УсловияБанка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСтроки, СтрокаТаблицы.ПроцентБанковскойКомиссии);
			Прервать;
		КонецЕсли;
		
		Если СтрокаТаблицы.НомерСтроки = КоличествоСтрок Тогда
			ШаблонСтроки = НСтр("ru = 'Свыше %1 сом - комиссия %2%'");
			СтрокаТаблицы.УсловияБанка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСтроки, СтрокаТаблицы.СуммаОперацийОт, СтрокаТаблицы.ПроцентБанковскойКомиссии);
		ИначеЕсли СтрокаТаблицы.НомерСтроки = 1 Тогда
			ШаблонСтроки = НСтр("ru = 'До %1 сом включительно - комиссия %2%'");
			СтрокаТаблицы.УсловияБанка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСтроки, ГраницаСуммыОпераций, СтрокаТаблицы.ПроцентБанковскойКомиссии);
		Иначе
			ШаблонСтроки = НСтр("ru = 'От %1 до %2 сом включительно - комиссия %3%'");
			СтрокаТаблицы.УсловияБанка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСтроки, СтрокаТаблицы.СуммаОперацийОт, ГраницаСуммыОпераций, СтрокаТаблицы.ПроцентБанковскойКомиссии);
		КонецЕсли;
		
		ГраницаСуммыОпераций = СтрокаТаблицы.СуммаОперацийОт;
	КонецЦикла;
	
КонецПроцедуры

#Область УсловноеОформление

&НаСервере
Процедура УстановитьУсловноеОформление() Экспорт
	
	УсловноеОформление.Элементы.Очистить();
	
	УстановитьУсловноеОформлениеКомиссияБанка();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеКомиссияБанка() Экспорт
	
	//Объект.КомиссияБанка.СуммаОперацийОт
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КомиссияБанкаСуммаОпераций");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.КомиссияБанка.НомерСтроки",
		ВидСравненияКомпоновкиДанных.Равно,
		1);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.КомиссияБанка.СуммаОперацийОт",
		ВидСравненияКомпоновкиДанных.Равно,
		0);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", "0");
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//Объект.КомиссияБанка.СуммаОперацийОт
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КомиссияБанкаСуммаОпераций");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.КомиссияБанка.НомерСтроки",
		ВидСравненияКомпоновкиДанных.Больше,
		1);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.КомиссияБанка.СуммаОперацийОт",
		ВидСравненияКомпоновкиДанных.Равно,
		0);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//Объект.КомиссияБанка.От
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", "0");
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КомиссияБанкаТекстОт");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.КомиссияБанка.НомерСтроки",
		ВидСравненияКомпоновкиДанных.Заполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", "от");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
