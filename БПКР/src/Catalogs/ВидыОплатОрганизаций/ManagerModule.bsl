#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция СчетУчетаРасчетовПоУмолчанию(ТипОплаты) Экспорт
	
	СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	
	Если ТипОплаты = Перечисления.ТипыОплат.ПодарочныйСертификатСобственный Тогда
		СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами;
	ИначеЕсли ТипОплаты = Перечисления.ТипыОплат.ПлатежнаяКарта Тогда
		СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.БанковскиеКредитыЗаймы;
	ИначеЕсли ТипОплаты = Перечисления.ТипыОплат.БанковскийКредит Тогда
		СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.БанковскиеКредитыЗаймы;
	КонецЕсли;
	
	Возврат СчетУчетаРасчетов;
	
КонецФункции

Функция ВидОплатыНаличные() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыОплатОрганизаций.Ссылка
	|ИЗ
	|	Справочник.ВидыОплатОрганизаций КАК ВидыОплатОрганизаций
	|ГДЕ
	|	ВидыОплатОрганизаций.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплат.Наличные)
	|	И НЕ ВидыОплатОрганизаций.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		
		НовыйЭлемент = Справочники.ВидыОплатОрганизаций.СоздатьЭлемент();
		
		НовыйЭлемент.ТипОплаты    = Перечисления.ТипыОплат.Наличные;
		НовыйЭлемент.Наименование = "Наличные";
		
		НовыйЭлемент.Записать();
		
		Возврат НовыйЭлемент.Ссылка;
		
	КонецЕсли;
	
КонецФункции

Функция ВидОплатыПоДоговору(Организация, Контрагент, ДоговорКонтрагента) Экспорт
	
	ВидОплаты = Справочники.ВидыОплатОрганизаций.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",        Организация);
	Запрос.УстановитьПараметр("Контрагент",         Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыОплатОрганизаций.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыОплатОрганизаций КАК ВидыОплатОрганизаций
	|ГДЕ
	|	ВидыОплатОрганизаций.Организация = &Организация
	|	И ВидыОплатОрганизаций.Контрагент = &Контрагент
	|	И ВидыОплатОрганизаций.ДоговорКонтрагента = &ДоговорКонтрагента
	|	И НЕ ВидыОплатОрганизаций.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ВидОплаты = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат ВидОплаты;
	
КонецФункции

Функция ВидыДоговоровПоТипуОплаты(ТипОплаты) Экспорт
	
	ВидыДоговоров = Новый Массив;
	
	Если ТипОплаты = Перечисления.ТипыОплат.ПодарочныйСертификатСобственный Тогда
		ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	Иначе
		ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	КонецЕсли;
	
	Возврат ВидыДоговоров;
	
КонецФункции

Функция ОрганизацииДляОтбораВидовОплат(Организация) Экспорт
	
	Организации = Новый Массив;
	Организации.Добавить(Организация);
	
	Возврат Организации;
	
КонецФункции

// Проверяет наличие видов оплат с типом "Платежная карта" в справочнике "ВидыОплатОрганизаций"
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, по которой будет установлен отбор на виды оплат
// 
// Возвращаемое значение:
//  Структура - со следующими свойствами
//              * ВидОплатыПоУмолчанию - СправочникСсылка.ВидыОплатОрганизаций - вид оплаты, который можно использовать по-умолчанию, в случае
//                если это единственный элемент справочника, подходящий по установленному отбору
//              * ТребуетсяВыбратьВидОплаты - Булево - Истина, если по установленному отбору найдено несколько видов оплат
//
Функция ВидыОплатПлатежнойКартой(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	ВидыОплатОрганизаций.Ссылка
	|ИЗ
	|	Справочник.ВидыОплатОрганизаций КАК ВидыОплатОрганизаций
	|ГДЕ
	|	ВидыОплатОрганизаций.Организация = &Организация
	|	И ВидыОплатОрганизаций.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПлатежнаяКарта)
	|	И НЕ ВидыОплатОрганизаций.ПометкаУдаления";
	
	ДанныеВидовОплат = НовыеДанныеОВидахОплат();
	Выборка = Запрос.Выполнить().Выбрать();
	ДанныеВидовОплат.ТребуетсяВыбратьВидОплаты = Выборка.Количество() > 1;
	Если Выборка.Следующий() Тогда
		ДанныеВидовОплат.ВидОплатыПоУмолчанию = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат ДанныеВидовОплат;
	
КонецФункции

// Проверяет наличие в справочнике "ВидыОплат" хотя бы одного элемента, соответствующего заданному отбору
//
// Параметры:
//  Организация - СправочникСсылка.Организации - при поиске вида оплаты будет наложен отбор по значению организации
//  ТипОплаты - ПеречислениеСсылка.ТипыОплат - при поиске вида оплаты будет наложен отбор по значению типа оплаты
// 
// Возвращаемое значение:
//  Булево - Истина, если найден хоть один элемент справочника, соответствующий наложенному отбору
//
Функция ПроверитьЗаполненностьВидовОплат(Организация, ТипОплаты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВидыОплатОрганизаций.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыОплатОрганизаций КАК ВидыОплатОрганизаций
		|ГДЕ
		|	ВидыОплатОрганизаций.Организация = &Организация
		|	И ВидыОплатОрганизаций.ТипОплаты = &ТипОплаты
		|	И НЕ ВидыОплатОрганизаций.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТипОплаты", ТипОплаты);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

Функция ЭквайрингПроцентУслугБанкаПоВидуОплаты(ВидОплаты, СуммаДокумента) Экспорт
	
	ПроцентБанковскойКомиссии = 0;
	
	Если СуммаДокумента = 0 ИЛИ НЕ ЗначениеЗаполнено(ВидОплаты) Тогда
		Возврат ПроцентБанковскойКомиссии;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидОплаты",       ВидОплаты);
	Запрос.УстановитьПараметр("СуммаОперацийОт", СуммаДокумента);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыОплатОрганизацийКомиссияБанка.Ссылка КАК Ссылка,
	|	ВидыОплатОрганизацийКомиссияБанка.СуммаОперацийОт КАК СуммаОперацийОт,
	|	ВидыОплатОрганизацийКомиссияБанка.ПроцентБанковскойКомиссии КАК ПроцентБанковскойКомиссии
	|ИЗ
	|	Справочник.ВидыОплатОрганизаций.КомиссияБанка КАК ВидыОплатОрганизацийКомиссияБанка
	|ГДЕ
	|	ВидыОплатОрганизацийКомиссияБанка.Ссылка = &ВидОплаты
	|	И НЕ ВидыОплатОрганизацийКомиссияБанка.Ссылка.ПометкаУдаления
	|	И ВидыОплатОрганизацийКомиссияБанка.ПроцентБанковскойКомиссии > 0
	|	И ВидыОплатОрганизацийКомиссияБанка.ПроцентБанковскойКомиссии < 100
	|	И 100 * &СуммаОперацийОт / (100 - ВидыОплатОрганизацийКомиссияБанка.ПроцентБанковскойКомиссии) > ВидыОплатОрганизацийКомиссияБанка.СуммаОперацийОт
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка УБЫВ,
	|	СуммаОперацийОт УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПроцентБанковскойКомиссии = Выборка.ПроцентБанковскойКомиссии;
	КонецЕсли;
	
	Возврат ПроцентБанковскойКомиссии;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиОбновленияИБ

Процедура ДобавитьСтрокиТабличнойЧастиКомиссияБанка() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыОплатОрганизаций.Ссылка,
	|	ВидыОплатОрганизаций.ПроцентБанковскойКомиссии
	|ИЗ
	|	Справочник.ВидыОплатОрганизаций КАК ВидыОплатОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыОплатОрганизаций.КомиссияБанка КАК ВидыОплатОрганизацийКомиссияБанка
	|		ПО ВидыОплатОрганизаций.Ссылка = ВидыОплатОрганизацийКомиссияБанка.Ссылка
	|ГДЕ
	|	ВидыОплатОрганизацийКомиссияБанка.Ссылка ЕСТЬ NULL 
	|	И ВидыОплатОрганизаций.ПроцентБанковскойКомиссии > 0";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ВидыОплатыОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВидыОплатыОбъект.КомиссияБанка.Добавить().ПроцентБанковскойКомиссии = ВидыОплатыОбъект.ПроцентБанковскойКомиссии;
		
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВидыОплатыОбъект);
		Исключение
			// Записать предупреждение в журнал регистрации.
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать Вид оплаты: %1 по причине:
					|%2'"),
				ВидыОплатыОбъект.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение, Метаданные.Справочники.ВидыОплатОрганизаций, ВидыОплатыОбъект.Ссылка, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыеДанныеОВидахОплат()
	
	Данные = Новый Структура;
	Данные.Вставить("ВидОплатыПоУмолчанию",      Справочники.ВидыОплатОрганизаций.ПустаяСсылка());
	Данные.Вставить("ТребуетсяВыбратьВидОплаты", Ложь);
	Возврат Данные;
	
КонецФункции

#КонецОбласти

#КонецЕсли
