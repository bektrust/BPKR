#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает список реквизитов, которые не нужно редактировать
// с помощью обработки группового изменения объектов
//
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить("Префикс");
	Результат.Добавить("КонтактнаяИнформация.*");
	
	Возврат Результат
КонецФункции

// Возвращает организацию по умолчанию.
// Если в ИБ есть только одна организация, которая не помечена на удаление и не является предопределенной,
// то будет возвращена ссылка на нее, иначе будет возвращена пустая ссылка.
//
// Возвращаемое значение:
//     СправочникСсылка.Организации - ссылка на организацию
//
Функция ОрганизацияПоУмолчанию(ИмяПользователяИБ = Неопределено) Экспорт
	
	ЗначениеПоУмолчанию = Справочники.Организации.ПустаяСсылка();
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.Организации) Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	// В режиме сервиса при работе под неразделенным пользователем основной орг. быть не может.
	Если ОбщегоНазначения.РазделениеВключено()
		И Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Если ИспользуетсяНесколькоОрганизаций() Тогда
		
		// В информационной базе ведется учет по нескольким организациям.
		// По умолчанию берем основную организация пользователя.
		
		ОсновнаяОрганизация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ОсновнаяОрганизация", "ЗначениеПоУмолчанию",, ИмяПользователяИБ);
		
		Если ТипЗнч(ОсновнаяОрганизация) = Тип("СправочникСсылка.Организации") Тогда
			// Проверка наличия ссылки и прав доступа
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ОсновнаяОрганизация", ОсновнаяОрганизация);
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Организации.Ссылка КАК Организация
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.Ссылка = &ОсновнаяОрганизация";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ЗначениеПоУмолчанию = Выборка.Организация;
			КонецЕсли;
		КонецЕсли;
		
		// При включенном ограничении доступа на уровне записей, если у пользователя назначены права
		// доступа только к одной организации, то эта организация устанавливается в качестве основной
		Если НЕ ЗначениеЗаполнено(ЗначениеПоУмолчанию) И ПолучитьФункциональнуюОпцию("ОграничиватьДоступНаУровнеЗаписей") Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
			|	Организации.Ссылка КАК Организация
			|ИЗ
			|	Справочник.Организации КАК Организации";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Количество() = 1 И Выборка.Следующий() Тогда
				ЗначениеПоУмолчанию = Выборка.Организация;
				ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ВРег("ОсновнаяОрганизация"), "ЗначениеПоУмолчанию", ЗначениеПоУмолчанию,, ИмяПользователяИБ);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		// Ведется учет по единственной организации
		
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
			|	Организации.Ссылка КАК Организация
			|ИЗ
			|	Справочник.Организации КАК Организации";
		
		Если ОбщегоНазначенияКлиентСервер.РежимОтладки() Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ НЕ Организации.ПометкаУдаления";
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			Если Выборка.Количество() = 1 Тогда
				
				Если Выборка.Следующий() Тогда
					ЗначениеПоУмолчанию = Выборка.Организация;
				КонецЕсли;
				
			Иначе
				
				// Значение функциональной опции не соответствует состоянию ИБ
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Заполнение организации по умолчанию'"), УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Константы.ФункциональнаяОпцияУчетПоНесколькимОрганизациям,,
					НСтр("ru = 'Исправлено некорректное значение константы ""Использовать несколько организаций""'"));
					
				УстановитьПривилегированныйРежим(Истина);
				Константы.ФункциональнаяОпцияУчетПоНесколькимОрганизациям.Установить(Истина);
				Константы.НеВестиУчетПоОрганизациям.Установить(Ложь);
				УстановитьПривилегированныйРежим(Ложь);
				
			КонецЕсли;
			
		ИначеЕсли ПолучитьФункциональнуюОпцию("ОграничиватьДоступНаУровнеЗаписей") И КоличествоОрганизаций() > 0 Тогда
			
			// Пользователю недоступна единственная организация.
			ВызватьИсключение НСтр("ru = 'Доступ к данным по организации ограничен. Обратитесь к администратору.'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Если не удалось определить основную организацию.
	// Пользователю вернем первую.
	Если НЕ ЗначениеЗаполнено(ЗначениеПоУмолчанию) Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Организации.Ссылка КАК Организация
			|ИЗ
			|	Справочник.Организации КАК Организации";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗначениеПоУмолчанию = Выборка.Организация;
			ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ВРег("ОсновнаяОрганизация"), "ЗначениеПоУмолчанию", ЗначениеПоУмолчанию,, ИмяПользователяИБ);
		КонецЕсли;
	КонецЕсли;	
	
	// Восстановление зависимой константы.
	Если ИспользуетсяНесколькоОрганизаций() 
		И ИспользуетсяОднаОрганизация() Тогда 
		// Значение функциональной опции не соответствует состоянию ИБ
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Заполнение организации по умолчанию'"), УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Константы.НеВестиУчетПоОрганизациям,,
			НСтр("ru = 'Исправлено некорректное значение константы ""Не вести учет по организациям""'"));
			
		УстановитьПривилегированныйРежим(Истина);
		Константы.НеВестиУчетПоОрганизациям.Установить(Ложь);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;	
	
	Возврат ЗначениеПоУмолчанию;
	
КонецФункции

// Возвращает количество элементов справочника Организации.
// Не учитывает предопределенные и помеченные на удаление элементы.
//
// Возвращаемое значение:
//     Число - количество организаций
//
Функция КоличествоОрганизаций() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Количество = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.Предопределенный";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Количество = Выборка.Количество;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Количество;
	
КонецФункции

// Возвращает значение функциональной опции 
// "УчетПоНесколькимОрганизациям".
//
// Возвращаемое значение:
//     Булево - признак использования нескольких организаций.
//
Функция ИспользуетсяНесколькоОрганизаций() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("УчетПоНесколькимОрганизациям");
	
КонецФункции

// Возвращает значение функциональной опции 
// "НеВестиУчетПоОрганизациям".
//
// Возвращаемое значение:
//     Булево - признак использования нескольких организаций.
//
Функция ИспользуетсяОднаОрганизация() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("НеВестиУчетПоОрганизациям");
	
КонецФункции

// Выполняет поиск организации по ИНН и КПП (если указан).
//
// Параметры:
//   ИНН - Строка - ИНН организации или индивидуального предпринимателя.
//
// Возвращаемое значение:
//   СправочникСсылка.Организации - ссылка на найденную организацию или ПустаяСсылка.
//
Функция НайтиОрганизацию(ИНН) Экспорт
	
	Если ПустаяСтрока(ИНН) Тогда
		Возврат ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ИНН", ИНН);
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	ОператорыЗапроса = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
	ОператорыЗапроса.Отбор.Добавить("Организации.ИНН = &ИНН");
	ОператорыЗапроса.Отбор.Добавить("НЕ Организации.ПометкаУдаления");
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Процедура - Дополнить данные заполнения при однофирменном учете
//
// Параметры:
//  ДанныеЗаполнения		 - 	 - 
//  ИмяРеквизитаОрганизация	 - 	 - 
//
Процедура ДополнитьДанныеЗаполненияПриОднофирменномУчете(ДанныеЗаполнения, ИмяРеквизитаОрганизация = "Организация") Экспорт
	
	Если ИспользуетсяНесколькоОрганизаций() Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеЗаполнения = Неопределено Тогда
		ДанныеЗаполнения = Новый Структура;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДанныеЗаполнения.Свойство(ИмяРеквизитаОрганизация) Тогда
		ОрганизацияПоУмолчанию = ОрганизацияПоУмолчанию();
		ПроверитьНаличиеОрганизацииПриОднофирменномУчете(ОрганизацияПоУмолчанию);
		ДанныеЗаполнения.Вставить(ИмяРеквизитаОрганизация, ОрганизацияПоУмолчанию);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет наличие хотя бы одной организации при ведении однофирменного учета.
//
Процедура ПроверитьНаличиеОрганизацииПриОднофирменномУчете(Организация) Экспорт
	
	Если ИспользуетсяНесколькоОрганизаций() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		
		ТекстСообщения = НСтр("ru = 'Заполните реквизиты организации'") + Символы.ПС;
		ПутьКРазделу = НСтр("ru = '(раздел Настройки - Параметры учета - Справочник ""Организации"")'");
		
		ТекстСообщения = ТекстСообщения + ПутьКРазделу;
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает двоичные данные картинки присоединенного файла к организации
//
// Параметры:
//  Организация - Ссылка на организацию, к которой присоединена картинка
//  ИмяРеквизита - Имя реквизита, который ссылается на нужную картинку
Функция ДвоичныеДанныеКартинкиОрганизации(Организация, ИмяРеквизита) Экспорт
	
	ДвоичныеДанныеКартинки = Неопределено;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		ПрисоединенныйФайл = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, ИмяРеквизита);
		Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
			ДанныеКартинки = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл);
			ДвоичныеДанныеКартинки = ПолучитьИзВременногоХранилища(ДанныеКартинки.СсылкаНаДвоичныеДанныеФайла);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДвоичныеДанныеКартинки;
	
КонецФункции

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Ссылка)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПриНастройкеНачальногоЗаполненияЭлементов(Настройки) Экспорт
	
	Настройки.ПриНачальномЗаполненииЭлемента = Ложь;
	Настройки.ИмяКлючевогоРеквизита = "Наименование";
	
КонецПроцедуры

// Вызывается при начальном заполнении справочника.
//
// Параметры:
//  КодыЯзыков - Массив - список языков конфигурации. Актуально для мультиязычных конфигураций.
//  Элементы   - ТаблицаЗначений - данные заполнения. Состав колонок соответствует набору реквизитов
//                                 справочника ПапкиФайлов.
//  ТабличныеЧасти - Структура - описание табличных частей объекта, где:
//   * Ключ - Строка - имя табличной части;
//   * Значение - ТаблицаЗначений - табличная часть в виде таблицы значений, структуру которой
//                                  необходимо скопировать перед заполнением. Например:
//                                  Элемент.Ключи = ТабличныеЧасти.Ключи.Скопировать();
//                                  ЭлементТЧ = Элемент.Ключи.Добавить();
//                                  ЭлементТЧ.ИмяКлюча = "Первичный";
//
Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт
	
	СправочникМенеджер = Справочники.Организации;
	
	КлассификаторXML = СправочникМенеджер.ПолучитьМакет("МакетЗаполнения").ПолучитьТекст();
	КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
	
	Для Каждого СтрокаТаблицыЗначений Из КлассификаторТаблица Цикл 
		Элемент = Элементы.Добавить();
		ЗаполнитьЗначенияСвойств(Элемент, СтрокаТаблицыЗначений);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтерфейсПечати

// Процедура формирования табличного документа с реквизитами организаций
//
Функция ПечатьКарточкиОрганизации(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Организация_КарточкаОрганизации";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.Организации.РеквизитыОрганизации");
	Разделитель = Макет.ПолучитьОбласть("Разделитель");
	
	ТекДата = ТекущаяДатаСеанса();
	ПервыйДокумент = Истина;
	
	Для каждого Организация Из МассивОбъектов Цикл
	
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.Вывести(Разделитель);
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		СведенияОбОрганизации = БухгалтерскийУчетСервер.ПолучитьСведенияОбОрганизации(Организация, ТекДата);
		
		Область = Макет.ПолучитьОбласть("Наименование");
		Область.Параметры.ПолноеНаименование = СведенияОбОрганизации.НаименованиеПолное;
		ТабличныйДокумент.Вывести(Область);
		
		Если ЗначениеЗаполнено(СведенияОбОрганизации.ИНН) Тогда
			Область = Макет.ПолучитьОбласть("ИНН");
			Область.Параметры.ИНН = СведенияОбОрганизации.ИНН;
			ТабличныйДокумент.Вывести(Область);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СведенияОбОрганизации.ОКПО) Тогда
			Область = Макет.ПолучитьОбласть("ОКПО");
			Область.Параметры.КодПоОКПО = СведенияОбОрганизации.ОКПО;
			ТабличныйДокумент.Вывести(Область);
		КонецЕсли;
		
		Область = Макет.ПолучитьОбласть("РасчетныйСчет");
		Область.Параметры.НомерСчета = СведенияОбОрганизации.НомерСчета;
		Область.Параметры.БИК = СведенияОбОрганизации.БИКБанка;
		Область.Параметры.КоррСчет = СведенияОбОрганизации.КоррСчетБанка;
		Область.Параметры.Банк = СведенияОбОрганизации.Банк;
		ТабличныйДокумент.Вывести(Область);
		
		Если ЗначениеЗаполнено(СведенияОбОрганизации.ГНС) Тогда
			Область = Макет.ПолучитьОбласть("ГНС");
			Область.Параметры.ГНС = СведенияОбОрганизации.ГНС;
			Область.Параметры.ГНСКод = СведенияОбОрганизации.ГНСКод;
			ТабличныйДокумент.Вывести(Область);
		КонецЕсли;   
		
		Если ЗначениеЗаполнено(СведенияОбОрганизации.АдрЮР) 
			ИЛИ ЗначениеЗаполнено(СведенияОбОрганизации.Тел) Тогда
			ТабличныйДокумент.Вывести(Разделитель);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СведенияОбОрганизации.АдрЮР) Тогда
			Область = Макет.ПолучитьОбласть("ЮридическийАдрес");
			Область.Параметры.ЮридическийАдрес = СведенияОбОрганизации.АдрЮР;
			ТабличныйДокумент.Вывести(Область);
		КонецЕсли;
			
		Если ЗначениеЗаполнено(СведенияОбОрганизации.Тел) Тогда
			Область = Макет.ПолучитьОбласть("Телефон");
			Область.Параметры.Телефон = СведенияОбОрганизации.Тел;
			ТабличныйДокумент.Вывести(Область);
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Организация);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Процедура формирования макета печати
//
Функция СформироватьПомощникРаботыФаксимильнойПечати(МасиивОрганизаций, ОбъектыПечати, ИмяМакета)
	
	ТабличныйДокумент	= Новый ТабличныйДокумент;
	Макет				= УправлениеПечатью.МакетПечатнойФормы("Справочник.Организации." + ИмяМакета);
	
	Для каждого Организация Из МасиивОрганизаций Цикл 
	
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ПоляКЗаполнению"));
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Линия"));
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Схема"));
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 1, ОбъектыПечати, Организация);
	
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;

КонецФункции // СформироватьПомощникРаботыФаксимильнойПечати()

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РеквизитыОрганизации") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"РеквизитыОрганизации",
			НСтр("ru='Реквизиты организации'"),
			ПечатьКарточкиОрганизации(МассивОбъектов, ОбъектыПечати));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НапечататьПомощникСозданияФаксимилеПечати") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"НапечататьПомощникСозданияФаксимилеПечати",
			НСтр("ru='Как быстро и просто создать факсимиле печати?'"),
			СформироватьПомощникРаботыФаксимильнойПечати(МассивОбъектов, ОбъектыПечати, "ПомощникСозданияФаксимилеПечати"));
		
	КонецЕсли;
	
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "ПредварительныйПросмотрПечатнойФормыСчетНаОплату");
	Если ПечатнаяФорма <> Неопределено Тогда
		
		ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
		//ПечатнаяФорма.ПолныйПутьКМакету = Обработки.ПечатьСчетНаОплату.ПолныйПутьКМакету();
		//ПечатнаяФорма.СинонимМакета = Обработки.ПечатьСчетНаОплату.ПредставлениеПФ(Ложь);
		
		//ДанныеОбъектовПечати = УниверсальныйЗапросПоДаннымДокумента(МассивОбъектов);
		//Обработки.ПечатьСчетНаОплату.СформироватьПФ(ПечатнаяФорма, ДанныеОбъектовПечати, ОбъектыПечати, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "РеквизитыОрганизации";
	КомандаПечати.Представление = НСтр("ru = 'Реквизиты'");
	КомандаПечати.СписокФорм = "ФормаЭлемента,ФормаСписка";
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Печать реквизитов организации'");
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 1;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
