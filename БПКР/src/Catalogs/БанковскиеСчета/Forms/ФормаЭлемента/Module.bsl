#Область ОписаниеПеременных

&НаКлиенте
Перем УстановитьОсновнойБанковскийСчет; // Признак установки основного банковского счета из формы контрагента/организации

&НаКлиенте
Перем УстановкаОсновногоСчетаВыполнена; // Признак успешной установки основного банковского счета из формы контрагента/организации

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

	// Заполним БИК и кор.счет банка.
	ЗаполнитьБИКиКоррСчет(Объект.Банк, БИКБанка, КоррСчетБанка);
	
	ЗаполнитьСписокВариантовПредставленийСчетаСервер();
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьОсновнойБанковскийСчет = Ложь;

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ОбработкаОповещения.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "УстановкаОсновногоСчетаВыполнена" Тогда
		УстановкаОсновногоСчетаВыполнена = Истина;
	КонецЕсли;	
	
КонецПроцедуры

// Процедура - обработчик события ПередЗаписью формы.
//
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// Заполним текст корреспондента.
	Если РедактироватьТекстКорреспондента Тогда
		Объект.ТекстКорреспондента = ТекстКорреспондента;
	Иначе
		Объект.ТекстКорреспондента = "";
	КонецЕсли;
	   
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события ПередЗакрытием.
//
&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	// Назначение банковского счета основным.
	Если УстановитьОсновнойБанковскийСчет Тогда 
		Отказ = Истина;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросУстановитьОсновнойБанковскийСчет", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Использовать данный банковский счет как основной для подстановки в документы?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	УстановитьОсновнойБанковскийСчет = Ложь;
	
	// Назначение банковского счета основным.
	Если ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда 
		// Проверка основного банковского счета
		ОсновнойБанковскийСчет = ОсновнойБанковскийСчетКонтрагента(Объект.Владелец);
		Если ЗначениеЗаполнено(ОсновнойБанковскийСчет) Тогда 
			Возврат;
		КонецЕсли;
		
		УстановитьОсновнойБанковскийСчет = Истина;
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля Владелец.
//
&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля БИКБанка.
//
&НаКлиенте
Процедура БИКБанкаПриИзменении(Элемент)
	
	Объект.Наименование = Лев(СокрЛП(Объект.НомерСчета) + ?(ЗначениеЗаполнено(Объект.Банк), ", в " + Строка(Объект.Банк), ""), 100);
	
	ЗаполнитьСписокВариантовПредставленийСчета();
	
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля БИКБанка.
//
&НаКлиенте
Процедура БИКБанкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОткрытьФормуВыбораБанка(Истина);
	
КонецПроцедуры // БИКБанкаНачалоВыбора()

// Процедура - обработчик события ОбработкаВыбора поля БИКБанка.
//
&НаКлиенте
Процедура БИКБанкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗаполнитьБИКиКоррСчет(ВыбранноеЗначение, БИКБанка, КоррСчетБанка);
	Объект.Банк = ВыбранноеЗначение;
	Объект.Наименование = Лев(СокрЛП(Объект.НомерСчета) + ?(ЗначениеЗаполнено(Объект.Банк), ", в " + Строка(Объект.Банк), ""), 100);
	
	Если ПустаяСтрока(БИКБанка) Тогда
		
		ТекущийЭлемент = Элементы.БИКБанка;
		
	КонецЕсли;
	
	ЗаполнитьСписокВариантовПредставленийСчета();
	
КонецПроцедуры // БИКБанкаОбработкаВыбора()

// Процедура - обработчик события ОкончаниеВводаТекста поля БИКБанка.
//
&НаКлиенте
Процедура БИКБанкаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	#Если ВебКлиент Тогда
		
		Если СтрДлина(Текст) > 9 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Введенное значение превышает допустимую длину БИК 9 символов.'");
			Сообщение.Сообщить();
			
			СтандартнаяОбработка = Ложь;
			
			Возврат;
			
		КонецЕсли;
		
	#КонецЕсли
	
	СписокНайденныхБанков = НайтиБанки(Текст, Элемент.Имя, Объект.ВалютаДенежныхСредств <> ВалютаРегламентированногоУчета);
	Если ТипЗнч(СписокНайденныхБанков) = Тип("СписокЗначений") Тогда
		
		Если СписокНайденныхБанков.Количество() = 1 Тогда
			
			ОповеститьОбИзменении(Тип("СправочникСсылка.Банки"));
			
			Объект.Банк = СписокНайденныхБанков[0].Значение;
			ЗаполнитьБИКиКоррСчет(Объект.Банк,  БИКБанка, КоррСчетБанка);
			
		ИначеЕсли СписокНайденныхБанков.Количество() > 1 Тогда
			
			ОповеститьОбИзменении(Тип("СправочникСсылка.Банки"));
			
			ОткрытьФормуВыбораБанка(Истина, СписокНайденныхБанков);
			
		Иначе
			
			ОткрытьФормуВыбораБанка(Истина);
			
		КонецЕсли;
		
	Иначе
		
		ТекущийЭлемент = Элемент;
		
	КонецЕсли;
	
КонецПроцедуры // БИКБанкаОкончаниеВводаТекста()

// Процедура - обработчик события ОкончаниеВводаТекста поля КоррСчетБанка.
//
&НаКлиенте
Процедура КоррСчетБанкаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокНайденныхБанков = НайтиБанки(СокрЛП(Текст), Элемент.Имя, Объект.ВалютаДенежныхСредств <> ВалютаРегламентированногоУчета);
	Если ТипЗнч(СписокНайденныхБанков) = Тип("СписокЗначений") Тогда
		
		Если СписокНайденныхБанков.Количество() = 1 Тогда
			
			ОповеститьОбИзменении(Тип("СправочникСсылка.Банки"));
			
			Объект.Банк = СписокНайденныхБанков[0].Значение;
			ЗаполнитьБИКиКоррСчет(Объект.Банк,  БИКБанка, КоррСчетБанка);
			
		ИначеЕсли СписокНайденныхБанков.Количество() > 1 Тогда
			
			ОповеститьОбИзменении(Тип("СправочникСсылка.Банки"));
			
			ОткрытьФормуВыбораБанка(Истина, СписокНайденныхБанков);
			
		Иначе
			
			ОткрытьФормуВыбораБанка(Истина);
			
		КонецЕсли;
		
	Иначе
		
		ТекущийЭлемент = Элемент;
		
	КонецЕсли;
	
КонецПроцедуры // КоррСчетБанкаОкончаниеВводаТекста()

// Процедура - обработчик события ОбработкаВыбора поля БИКБанкаРасчетов.
//
&НаКлиенте
Процедура КоррСчетБанкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗаполнитьБИКиКоррСчет(ВыбранноеЗначение, БИКБанка, КоррСчетБанка);
	Объект.Банк = ВыбранноеЗначение;
	Объект.Наименование = Лев(СокрЛП(Объект.НомерСчета) + ?(ЗначениеЗаполнено(Объект.Банк), ", в " + Строка(Объект.Банк), ""), 100);
	
КонецПроцедуры // БИКБанкаОбработкаВыбора()

// Процедура - обработчик события ПриИзменении флажка РедактироватьТекстПлательщика.
//
&НаКлиенте
Процедура РедактироватьТекстПлательщикаПриИзменении(Элемент)
	
	Элементы.ТекстПлательщика.Доступность = РедактироватьТекстКорреспондента;
	
	Если НЕ РедактироватьТекстКорреспондента Тогда
		ЗаполнитьТекстКорреспондента();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении флажка РедактироватьТекстПолучателя.
//
&НаКлиенте
Процедура РедактироватьТекстПолучателяПриИзменении(Элемент)
	
	Элементы.ТекстПолучателя.Доступность = РедактироватьТекстКорреспондента;
	
	Если НЕ РедактироватьТекстКорреспондента Тогда
		ЗаполнитьТекстКорреспондента();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля НомерСчета.
//
&НаКлиенте
Процедура НомерСчетаПриИзменении(Элемент)
	
	Объект.Наименование = Лев(СокрЛП(Объект.НомерСчета) + ?(ЗначениеЗаполнено(Объект.Банк), ", в " + Строка(Объект.Банк), ""), 100);
	
	ЗаполнитьСписокВариантовПредставленийСчета();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ВалютаДенежныхСредств.
//
&НаКлиенте
Процедура ВалютаДенежныхСредствПриИзменении(Элемент)
	
	ЗаполнитьСписокВариантовПредставленийСчета();
	УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры

// Процедура - обработчик события ОкончаниеВводаТекста поля НомерСчета.
//
&НаКлиенте
Процедура НомерСчетаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	#Если ВебКлиент Тогда
		
		Если СтрДлина(Текст) > 20 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Введенное значение превышает допустимую длину номера счета 20 символов.'");
			Сообщение.Сообщить();
			
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

// Функция проверяет возможность изменения реквизитов.
//
&НаСервереБезКонтекста
Функция ОтказИзменитьРеквизиты(Ссылка) 
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда 
		Возврат Ложь;	
	КонецЕсли;	
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Контрагенты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ОсновнойБанковскийСчет = &БанковскийСчет
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПлатежноеПоручениеИсходящее.Ссылка
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
		|ГДЕ
		|	(ПлатежноеПоручениеИсходящее.БанковскийСчет = &БанковскийСчет
		|			ИЛИ ПлатежноеПоручениеИсходящее.БанковскийСчетЗППроекта = &БанковскийСчет
		|			ИЛИ ПлатежноеПоручениеИсходящее.БанковскийСчетПолучателя = &БанковскийСчет)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПлатежноеПоручениеВходящее.Ссылка
		|ИЗ
		|	Документ.ПлатежноеПоручениеВходящее КАК ПлатежноеПоручениеВходящее
		|ГДЕ
		|	ПлатежноеПоручениеВходящее.БанковскийСчет = &БанковскийСчет
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПриходныйКассовыйОрдер.Ссылка
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
		|ГДЕ
		|	ПриходныйКассовыйОрдер.БанковскийСчет = &БанковскийСчет
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	РасходныйКассовыйОрдер.Ссылка
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
		|ГДЕ
		|	РасходныйКассовыйОрдер.БанковскийСчет = &БанковскийСчет
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЭлектронныйСчетФактураВыписанный.Ссылка
		|ИЗ
		|	Документ.ЭлектронныйСчетФактураВыписанный КАК ЭлектронныйСчетФактураВыписанный
		|ГДЕ
		|	(ЭлектронныйСчетФактураВыписанный.БанковскийСчет = &БанковскийСчет
		|			ИЛИ ЭлектронныйСчетФактураВыписанный.БанковскийСчетКонтрагента = &БанковскийСчет)");
	Запрос.УстановитьПараметр("БанковскийСчет", Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции // ОтказИзменитьРеквизиты()

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
// Процедура-обработчик результата вопроса о подборе банка из классификатора.
//
Процедура ОпределитьНеобходимостьВыбораБанкаИзСправочника(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = "Выбрать" Тогда
		
		ОткрытьФормуВыбораБанка(ДополнительныеПараметры.ЭтоБанк);
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьНеобходимостьПодбораБанкаИзКлассификатора()

// Процедура-обработчик результата вопроса об установке основного банковского счета.
//
&НаКлиенте
Процедура ОтветНаВопросУстановитьОсновнойБанковскийСчет(РезультатВопроса, ДополнительныеПараметры) Экспорт	
	УстановитьОсновнойБанковскийСчет = Ложь;

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		НовыйОсновнойСчет = Объект.Ссылка;
	
		// Если открыта форма контрагента/организации, то изменение основного счета выполняем в ней.
		УстановкаОсновногоСчетаВыполнена = Ложь;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Владелец", Объект.Владелец);
		СтруктураПараметров.Вставить("НовыйОсновнойСчет", НовыйОсновнойСчет);
		
		Оповестить("УстановкаОсновногоСчета", СтруктураПараметров, ЭтотОбъект);
		
		// Если форма контрагента/организации закрыта, то запишем основной счет контрагента/организации самостоятельно.
		Если Не УстановкаОсновногоСчетаВыполнена Тогда
			ЗаписатьОсновнойСчет(СтруктураПараметров);
		КонецЕсли;
	КонецЕсли;
	
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьРедактированиеРеквизитовОбъекта(Результат, ДополнительныеПараметры) Экспорт
	
	Если ОтказИзменитьРеквизиты(Объект.Ссылка) Тогда
		ТекстПредупреждения = НСтр("ru = 'Изменение ключевых реквизитов запрещено.
				|Убедитесь что банковский счет не установлен основным и не используется в документах.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	РазблокируемыеРеквизиты = ЗапретРедактированияРеквизитовОбъектовКлиент.Реквизиты(ЭтотОбъект);
	ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(ЭтотОбъект,
		РазблокируемыеРеквизиты);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость и доступность элементов.
//
&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()
	
	Если Объект.ВалютаДенежныхСредств = ВалютаРегламентированногоУчета
		И ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		Элементы.КоррСчетБанка.Видимость = Ложь;
	Иначе
		Элементы.КоррСчетБанка.Видимость = Истина;
	КонецЕсли;	
	
	Элементы.Владелец.ТолькоПросмотр = ЗначениеЗаполнено(Объект.Владелец);
	
	РедактироватьТекстКорреспондента = ЗначениеЗаполнено(Объект.ТекстКорреспондента);
	Элементы.ТекстПлательщика.Доступность = РедактироватьТекстКорреспондента;
	Элементы.ТекстПолучателя.Доступность = РедактироватьТекстКорреспондента;
	
	ВладелецОрганизация = ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Организации");
	Элементы.ГруппаРеквизитыСчетаОрганизации.Видимость 	= ВладелецОрганизация;
	Элементы.СуммаКомиссияБанка.Видимость = ВладелецОрганизация;
	Элементы.ГруппаРеквизитыСчетаКонтрагента.Видимость 	= НЕ ВладелецОрганизация;
	Элементы.ГруппаВидСчета.Видимость = ВладелецОрганизация; 
	Элементы.СтраницаНастройкаПечати.Видимость = ВладелецОрганизация;
	Элементы.Префикс.Видимость = ВладелецОрганизация;
	
	Если РедактироватьТекстКорреспондента Тогда
		ТекстКорреспондента = Объект.ТекстКорреспондента;
	Иначе
		ЗаполнитьТекстКорреспондента();
	КонецЕсли;
КонецПроцедуры 

// Процедура заполняет значения полей БИК и КоррСчет.
//
&НаСервереБезКонтекста
Процедура ЗаполнитьБИКиКоррСчет(Банк, Бик, КоррСчет)
	
	Если НЕ ЗначениеЗаполнено(Банк) Тогда
		Возврат;
	КонецЕсли;
	
	Бик = Банк.Код;
	КоррСчет = Банк.КоррСчет;
	
КонецПроцедуры // ЗаполнитьБИКиКоррСчет()

// Процедура заполняет значения поля ТекстКорреспондента.
//
&НаСервере
Процедура ЗаполнитьТекстКорреспондента()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.Владелец);
		
	Если ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Организации") Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.НаименованиеПолное КАК НаименованиеПолное
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &Ссылка";
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Контрагенты.НаименованиеПолное
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка = &Ссылка";
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ТекстКорреспондента = СокрЛП(Выборка.НаименованиеПолное);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТекстКорреспондента()

// Процедура открывает форму списка банков для ручного выбора
//
&НаКлиенте
Процедура ОткрытьФормуВыбораБанка(ЭтоБанк, СписокНайденныхБанков = Неопределено)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущаяСтрока", ?(ЭтоБанк, Объект.Банк, Объект.БанкРасчетов));
	ПараметрыФормы.Вставить("ПараметрВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("МножественныхВыбор", Ложь);
	
	Если СписокНайденныхБанков <> Неопределено Тогда
		
		ПараметрыФормы.Вставить("СписокНайденныхБанков", СписокНайденныхБанков);
		
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Банки.ФормаВыбора", ПараметрыФормы, ?(ЭтоБанк, Элементы.БИКБанка, Элементы.БИКБанкаДляРасчетов));
	
КонецПроцедуры // ОткрытьФормуВыбораБанка()

&НаСервереБезКонтекста
Функция БанкиПоРеквизитам(Знач Поле, Знач Значение)

	СписокБанков = Новый СписокЗначений;
	
	Если ПустаяСтрока(Значение) Тогда
	
		Возврат СписокБанков;
		
	КонецЕсли;
	
	ТаблицаБанков = Справочники.Банки.ПолучитьТаблицуБанковПоРеквизитам(Поле, Значение);
	
	СписокБанков.ЗагрузитьЗначения(ТаблицаБанков.ВыгрузитьКолонку("Ссылка"));
	
	Возврат СписокБанков;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьКорректностьНомераСчета(Номер, ВалютныйСчет = Ложь, ТекстОшибки = "")

	Результат = Истина;
	
	Если ПустаяСтрока(Номер) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТекстОшибки = "";
	Если НЕ ВалютныйСчет И СтрДлина(Номер) <> 20 Тогда
		
		ТекстОшибки = НСтр("ru = 'Возможно номер счета указан не полностью'");
		Результат = Ложь;
		
	ИначеЕсли НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Номер) Тогда
		
		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", " ") +
			НСтр("ru = 'В номере банковского счета присутствуют не только цифры.
				|Возможно, номер указан неверно'");
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьКорректностьБИК(БИК, ТекстОшибки = "")
	
	Если ПустаяСтрока(БИК) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	ТекстОшибки = "";
	Если СтрДлина(БИК) <> 9 Тогда
		
		ТекстОшибки = НСтр("ru = 'По указанному БИК банк не найден. Возможно БИК указан не полностью.'");
		
	ИначеЕсли НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(БИК) Тогда
		
		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", " ") +
			НСтр("ru = 'В составе БИК банка должны быть только цифры'");
		
	ИначеЕсли НЕ Лев(БИК, 2) = "04" Тогда
		
		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", " ") +
			НСтр("ru = 'Первые 2 цифры БИК банка должны быть ""04""'");
		
	КонецЕсли;
	
	Возврат ПустаяСтрока(ТекстОшибки);
	
КонецФункции

// Функция возвращает список значений с банком/банками подходящих условию поиска
// 
// В случае неудачи возвращает Неопределено или пустой список значений.
//
&НаКлиенте
Функция НайтиБанки(ТекстДляПоиска, Поле, Валютный = Ложь)
	
	Перем ТекстОшибки;
	
	ЭтоБанк = (Поле = "БИКБанка") ИЛИ (Поле = "КоррСчетБанка");
	ОчиститьЗначенияВСвязанныхПоляхФормы(ЭтоБанк);
	
	Если ПустаяСтрока(ТекстДляПоиска) Тогда
		
		ОчиститьСообщения();
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Поле ""%1"" заполнено не корректно.'"), 
			?(Найти(Поле, "БИК") > 0, "БИК", "Корр. счет"));
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, Поле);
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если Найти(Поле, "БИК") = 1 Тогда
		
		ОбластьПоиска = "Код";
		
	ИначеЕсли Найти(Поле, "КоррСчет") = 1 Тогда
		
		ОбластьПоиска = "КоррСчет";
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	СписокНайденныхБанков = БанкиПоРеквизитам(ОбластьПоиска, ТекстДляПоиска);
	Если СписокНайденныхБанков.Количество() = 0 Тогда
		
		Если ОбластьПоиска = "Код" Тогда
			
			Если НЕ ПроверитьКорректностьБИК(ТекстДляПоиска, ТекстОшибки) Тогда
				
				ОчиститьСообщения();
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,, Поле);
				Возврат Неопределено;
				
			КонецЕсли;
			
			ТекстВопроса = СтрШаблон(
				НСтр("ru = 'Банк с БИК ""%1"" не найден в справочнике банков'"), ТекстДляПоиска);
			
		ИначеЕсли ОбластьПоиска = "КоррСчет" Тогда
			
			Если НЕ ПроверитьКорректностьНомераСчета(ТекстДляПоиска, Валютный, ТекстОшибки) Тогда
				ОчиститьСообщения();
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,, Поле);
				Возврат Неопределено;
			КонецЕсли;
			
			ТекстВопроса = СтрШаблон(
				НСтр("ru = 'Банк с корр. счетом ""%1"" не найден в справочнике банков'"), ТекстДляПоиска);
			
		КонецЕсли;
		
		// Сформируем варианты
		Кнопки	= Новый СписокЗначений;
		Кнопки.Добавить("Выбрать",     НСтр("ru = 'Выбрать из справочника'"));
		Кнопки.Добавить("Отменить",   НСтр("ru = 'Отменить ввод'"));
		
		// Обработка выбора
		ОписаниеОповещения = Новый ОписаниеОповещения("ОпределитьНеобходимостьВыбораБанкаИзСправочника", ЭтотОбъект, Новый Структура("ЭтоБанк", ЭтоБанк));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки,, "Выбрать", НСтр("ru = 'Банк не найден'"));
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СписокНайденныхБанков;
	
КонецФункции // НайтиБанки()

// Функция формирует наименование банковского счета.
//
&НаКлиенте
Процедура ЗаполнитьСписокВариантовПредставленийСчета()
	
	Элементы.Наименование.СписокВыбора.Очистить();
	
	СтрокаНаименования = СокрЛП(Объект.НомерСчета) + ?(ЗначениеЗаполнено(Объект.Банк), ", в " + Строка(Объект.Банк), "");
	СтрокаНаименования = Лев(СтрокаНаименования, 100);
	
	Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	
	СтрокаНаименования = ?(ЗначениеЗаполнено(Объект.Банк), Строка(Объект.Банк), "") + " (" + Строка(Объект.ВалютаДенежныхСредств) + ")";
	СтрокаНаименования = Лев(СтрокаНаименования, 100);
	
	Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	
КонецПроцедуры // ЗаполнитьСписокВариантовПредставленийСчета()

// Функция формирует наименование банковского счета.
//
&НаСервере
Процедура ЗаполнитьСписокВариантовПредставленийСчетаСервер()
	
	Элементы.Наименование.СписокВыбора.Очистить();
	
	СтрокаНаименования = СокрЛП(Объект.НомерСчета) + ?(ЗначениеЗаполнено(Объект.Банк), ", в " + Строка(Объект.Банк), "");
	СтрокаНаименования = Лев(СтрокаНаименования, 100);
	
	Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	
	СтрокаНаименования = ?(ЗначениеЗаполнено(Объект.Банк), Строка(Объект.Банк), "") + " (" + Строка(Объект.ВалютаДенежныхСредств) + ")";
	СтрокаНаименования = Лев(СтрокаНаименования, 100);
	
	Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	
КонецПроцедуры // ЗаполнитьСписокВариантовПредставленийСчетаСервер()

// Процедура очищает значения полей в связанных полях формы
//
// Актуальна для случая, когда пользователь откроет форму выбора и откажется от выбора значения.
//
&НаКлиенте
Процедура ОчиститьЗначенияВСвязанныхПоляхФормы(ЭтоБанк)
	
	Если ЭтоБанк Тогда
		
		Объект.Банк = Неопределено;
		БИКБанка = "";
		КоррСчетБанка = "";
		
	Иначе
		
		Объект.БанкРасчетов = Неопределено;
		БИКБанкаДляРасчетов = "";
		КоррСчетБанкаДляРасчетов = "";
		
	КонецЕсли;
	
КонецПроцедуры // ОчиститьЗначенияВСвязанныхПоляхФормы()

// Функция получает основной банковский счет Контрагента.
//
// Параметры:
//  Контрагент	 - СправочникСсылка.Контрагенты	 - Владелец счета
// 
// Возвращаемое значение:
//  ОсновнойБанковскийСчет - СправочникСсылка.БанковскиеСчета 
//
&НаСервереБезКонтекста
Функция ОсновнойБанковскийСчетКонтрагента(Контрагент)
	Возврат Контрагент.ОсновнойБанковскийСчет
КонецФункции // ОсновнойБанковскийСчетКонтрагента()

&НаСервереБезКонтекста
Процедура ЗаписатьОсновнойСчет(СтруктураПараметров)
	
	ВладелецОбъект = СтруктураПараметров.Владелец.ПолучитьОбъект();
	ВладелецУспешноЗаблокирован = Истина;
	
	Попытка
		ВладелецОбъект.Заблокировать();
	Исключение
		
		ВладелецУспешноЗаблокирован = Ложь;
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось заблокировать %1: %2, для изменения основного банковского счета, по причине:
				|%3'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
				СтруктураПараметров.Владелец.Метаданные().ПредставлениеОбъекта, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Предупреждение,, ВладелецОбъект, ОписаниеОшибки());
		
	КонецПопытки;
	
	// Если удалось заблокировать, изменим банковский счет по умолчанию у контрагента/организации.
	Если ВладелецУспешноЗаблокирован Тогда
		ВладелецОбъект.ОсновнойБанковскийСчет = СтруктураПараметров.НовыйОсновнойСчет;
		ВладелецОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	//ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
	ЗаблокированныеРеквизиты = ЗапретРедактированияРеквизитовОбъектовКлиент.Реквизиты(ЭтотОбъект);
	
	СинонимыРеквизитов = Новый Массив;
	
	Для Каждого ОписаниеРеквизита Из ЭтотОбъект.ПараметрыЗапретаРедактированияРеквизитов Цикл
		Если ЗаблокированныеРеквизиты.Найти(ОписаниеРеквизита.ИмяРеквизита) <> Неопределено Тогда
			СинонимыРеквизитов.Добавить(ОписаниеРеквизита.Представление);
		КонецЕсли;
	КонецЦикла;
	
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(Объект.Ссылка);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	ДополнительныеПараметры.Вставить("ЗаблокированныеРеквизиты", ЗаблокированныеРеквизиты);
	ДополнительныеПараметры.Вставить("ОбработкаПродолжения", Неопределено);
	
	ЗапретРедактированияРеквизитовОбъектовКлиент.ПроверитьСсылкиНаОбъект(
		Новый ОписаниеОповещения("РазрешитьРедактированиеРеквизитовОбъекта",
			ЭтотОбъект, ДополнительныеПараметры),
		МассивСсылок,
		СинонимыРеквизитов);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// СтандартныеПодсистемы.ПодключаемыеКоманды

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

