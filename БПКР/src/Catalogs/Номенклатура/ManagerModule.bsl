#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает описание блокируемых реквизитов.
//
// Возвращаемое значение:
//  Массив - содержит строки в формате ИмяРеквизита[;ИмяЭлементаФормы,...]
//           где ИмяРеквизита - имя реквизита объекта, ИмяЭлементаФормы - имя элемента формы,
//           связанного с реквизитом.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	БлокируемыеРеквизиты = Новый Массив;
	
	БлокируемыеРеквизиты.Добавить("Код");
	БлокируемыеРеквизиты.Добавить("Услуга");
	
	Возврат БлокируемыеРеквизиты;
	
КонецФункции

// Процедура - Загрузить данные ЭСФ из excel
//
// Параметры:
//  Адрес		 - Строка	 - Адрес во временном хранилище
//  Расширение	 - Строка	 - Расширение файла во временном хранилище
//
Процедура ЗагрузитьДанныеЭСФИзExcel(Адрес, Расширение) Экспорт 
	
	ВременныйФайл = ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);
    ДвоичныеДанные.Записать(ВременныйФайл);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Прочитать(ВременныйФайл);  
	
	ТаблицаДанных = Новый ТаблицаЗначений;	
	ТаблицаДанных.Колонки.Добавить("ИдентификаторНоменклатурыЭСФ", ОбщегоНазначения.ОписаниеТипаСтрока(40));
	ТаблицаДанных.Колонки.Добавить("НаименованиеПолное", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ТаблицаДанных.Колонки.Добавить("КодТНВЭД", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	ТаблицаДанных.Колонки.Добавить("КодГКЭД", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	                                       
	ТекущаяОбласть = ТабличныйДокумент.ПолучитьОбласть();
	
	Для НомерСтроки = 2 По ТекущаяОбласть.ВысотаТаблицы Цикл
		
		СртНомерСтроки = СтрЗаменить(НомерСтроки, Символы.НПП, "");
		
		ИдентификаторНоменклатурыЭСФ 	= ТекущаяОбласть.ПолучитьОбласть("R" + СртНомерСтроки + "C" + 1).ТекущаяОбласть.Текст;
		НаименованиеПолное				= ТекущаяОбласть.ПолучитьОбласть("R" + СртНомерСтроки + "C" + 2).ТекущаяОбласть.Текст;
		КодТНВЭД 						= ТекущаяОбласть.ПолучитьОбласть("R" + СртНомерСтроки + "C" + 3).ТекущаяОбласть.Текст;
		КодГКЭД 						= ТекущаяОбласть.ПолучитьОбласть("R" + СртНомерСтроки + "C" + 4).ТекущаяОбласть.Текст;
		
		СтрокаТаблицы = ТаблицаДанных.Добавить();
		СтрокаТаблицы.ИдентификаторНоменклатурыЭСФ 	= ИдентификаторНоменклатурыЭСФ;
		СтрокаТаблицы.НаименованиеПолное			= НаименованиеПолное;
		СтрокаТаблицы.КодТНВЭД 						= КодТНВЭД;
		СтрокаТаблицы.КодГКЭД 						= КодГКЭД;
	КонецЦикла;		
	
	УдалитьФайлы(ВременныйФайл);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДанных.ИдентификаторНоменклатурыЭСФ КАК ИдентификаторНоменклатурыЭСФ,
		|	ТаблицаДанных.НаименованиеПолное КАК НаименованиеПолное,
		|	ТаблицаДанных.КодТНВЭД КАК КодТНВЭД,
		|	ТаблицаДанных.КодГКЭД КАК КодГКЭД
		|ПОМЕСТИТЬ ВременнаяТаблицаДанные
		|ИЗ
		|	&ТаблицаДанных КАК ТаблицаДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(Номенклатура.Ссылка, НЕОПРЕДЕЛЕНО) КАК Ссылка,
		|	ВременнаяТаблицаДанные.ИдентификаторНоменклатурыЭСФ КАК ИдентификаторНоменклатурыЭСФ,
		|	ВременнаяТаблицаДанные.НаименованиеПолное КАК НаименованиеПолное,
		|	ВременнаяТаблицаДанные.КодТНВЭД КАК КодТНВЭД,
		|	ВременнаяТаблицаДанные.КодГКЭД КАК КодГКЭД
		|ИЗ
		|	ВременнаяТаблицаДанные КАК ВременнаяТаблицаДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|		ПО (ВременнаяТаблицаДанные.НаименованиеПолное = (ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(150))))
		|			И (ВЫБОР
		|				КОГДА ВременнаяТаблицаДанные.КодТНВЭД <> """"
		|					ТОГДА ВременнаяТаблицаДанные.КодТНВЭД = Номенклатура.КодТНВЭД.Код
		|				ИНАЧЕ ВременнаяТаблицаДанные.КодГКЭД = Номенклатура.КодГКЭД.Код
		|			КОНЕЦ)";
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Ссылка = Неопределено Тогда
			Если ЗначениеЗаполнено(Выборка.КодГКЭД) Тогда
				ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Не удалось найти номенклатуру с наименованием для печати %1 и кодом ГКЭД %2'"), Выборка.НаименованиеПолное, Выборка.КодГКЭД));
			Иначе
				ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Не удалось найти номенклатуру с наименованием для печати %1 и кодом ТНВЭД %2'"), Выборка.НаименованиеПолное, Выборка.КодТНВЭД));
			КонецЕсли;				
		Иначе	
			НачатьТранзакцию();
			
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировки = БлокировкаДанных.Добавить("Справочник.Номенклатура");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			БлокировкаДанных.Заблокировать();
			
			Попытка
				НоменклатураОбъект = Выборка.Ссылка.ПолучитьОбъект();		
				НоменклатураОбъект.ИдентификаторНоменклатурыЭСФ = Выборка.ИдентификаторНоменклатурыЭСФ;
				
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НоменклатураОбъект);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();	
			КонецПопытки;	
		КонецЕсли;
	КонецЦикла;		
КонецПроцедуры

// Функция получает параметры по данным регистра Параметры номенклатуры
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура	 - Номенклтарура, параметры которой нужно получить
// 
// Возвращаемое значение:
//  ПараметрыНоменклатуры - Структура
//
Функция ПолучитьПараметрыНоменклатуры(Номенклатура) Экспорт 

	ПараметрыНоменклатуры = Новый Структура;
	ПараметрыНоменклатуры.Вставить("ВидУпаковки", Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка());
	ПараметрыНоменклатуры.Вставить("ВесУпаковки", 0);
	ПараметрыНоменклатуры.Вставить("ВесЕдиницыНоменклатуры", 0);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПараметрыНоменклатуры.ВесЕдиницыНоменклатуры КАК ВесЕдиницыНоменклатуры,
		|	ПараметрыНоменклатуры.ВидУпаковки КАК ВидУпаковки,
		|	ПараметрыНоменклатуры.ВесУпаковки КАК ВесУпаковки
		|ИЗ
		|	РегистрСведений.ПараметрыНоменклатуры КАК ПараметрыНоменклатуры
		|ГДЕ
		|	ПараметрыНоменклатуры.Номенклатура = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ПараметрыНоменклатуры, ВыборкаДетальныеЗаписи); 	
	КонецЦикла;
	
	Возврат ПараметрыНоменклатуры;	

КонецФункции // ПолучитьСведенияНоменклатуры()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПриНастройкеНачальногоЗаполненияЭлементов(Настройки) Экспорт
	
	Настройки.ПриНачальномЗаполненииЭлемента = Ложь;
	
КонецПроцедуры

// Вызывается при начальном заполнении справочника.
//
// Параметры:
//  КодыЯзыков - Массив - список языков конфигурации. Актуально для мультиязычных конфигураций.
//  Элементы   - ТаблицаЗначений - данные заполнения. Состав колонок соответствует набору реквизитов
//                                 справочника ПапкиФайлов.
//  ТабличныеЧасти - Структура - описание табличных частей объекта, где:
//   * Ключ - Строка - имя табличной части;
//   * Значение - ТаблицаЗначений - табличная часть в виде таблицы значений, структуру которой
//                                  необходимо скопировать перед заполнением. Например:
//                                  Элемент.Ключи = ТабличныеЧасти.Ключи.Скопировать();
//                                  ЭлементТЧ = Элемент.Ключи.Добавить();
//                                  ЭлементТЧ.ИмяКлюча = "Первичный";
//
Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "Услуги";
	Элемент.Код = "0000000005";
	Элемент.Наименование = НСтр("ru = 'Услуги'", ОбщегоНазначения.КодОсновногоЯзыка());
	Элемент.Услуга = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтерфейсПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Если ПравоДоступа("Использование", Метаданные.Обработки.ПечатьЭтикеток) Тогда
		
		Если Не ПолучитьФункциональнуюОпцию("ПечатьЭтикетокИЦенников") Тогда
			Возврат;
		КонецЕсли;
		
		// Этикетка	
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "Ценники";
		КомандаПечати.Представление = НСтр("ru = 'Этикетка'");
		КомандаПечати.ЗаголовокФормы= НСтр("ru = 'Этикетка'");
		КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиЭтикеток";
		КомандаПечати.СписокФорм    = "ФормаЭлемента";
		КомандаПечати.Порядок       = 10;
		
		// Ценник
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "Ценники";
		КомандаПечати.Представление = НСтр("ru = 'Ценник'");
		КомандаПечати.ЗаголовокФормы= НСтр("ru = 'Ценник'");
		КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиЦенников";
		КомандаПечати.СписокФорм    = "ФормаСписка, ФормаЭлемента";
		КомандаПечати.Порядок       = 20;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецЕсли
