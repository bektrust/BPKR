#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка реквизитов формы.
	ИмяТабличнойЧасти = "СтрокиОтчета";
	
	ИспользоватьСтатьиДвиженияДенежныхСредств = ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиДвиженияДенежныхСредств");
	
	// Установить видимость и доступность элементов формы.
	УстановитьВидимостьДоступностьЭлементов();

	УстановитьУсловноеОформление();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидОтчетаПриИзменении(Элемент)
	Если НЕ Объект.ВидОтчета = ВидОтчета Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросЗаполнитьНастройки", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Табличные части будут перезаполнены настройками по умолчанию. Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);	
	КонецЕсли;	
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ВсеСтрокиПриИзменении(Элемент)
	Если ВсеСтроки Тогда 
		Элементы.НастройкиСтрок.ОтборСтрок = Неопределено;
		Элементы.НастройкиСтрокОДДС.ОтборСтрок = Неопределено;
		Элементы.НастройкиСтрокОДДСПоСтатьям.ОтборСтрок = Неопределено;
		Элементы.НастройкиСтрокОИК.ОтборСтрок = Неопределено;
	Иначе 
		БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "НастройкиСтрок");
		БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "НастройкиСтрокОДДС");
		БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "НастройкиСтрокОДДСПоСтатьям");
		БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "НастройкиСтрокОИК");
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицФормы

// Процедура - обработчик события ПриАктивизации строки табличной части СтрокиОтчета.
//
&НаКлиенте
Процедура СтрокиОтчетаПриАктивизацииСтроки(Элемент)
	Если НЕ ВсеСтроки Тогда
		БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "НастройкиСтрок");
		БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "НастройкиСтрокОДДС");
		БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "НастройкиСтрокОДДСПоСтатьям");
		БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "НастройкиСтрокОИК");
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПередУдалением строки табличной части СтрокиОтчета.
//
&НаКлиенте
Процедура СтрокиОтчетаПередУдалением(Элемент, Отказ)
	БухгалтерскийУчетКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтаФорма, "НастройкиСтрок");
	БухгалтерскийУчетКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтаФорма, "НастройкиСтрокОДДС");
	БухгалтерскийУчетКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтаФорма, "НастройкиСтрокОДДСПоСтатьям");
	БухгалтерскийУчетКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтаФорма, "НастройкиСтрокОИК");
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования строки табличной части СтрокиОтчета.
//
&НаКлиенте
Процедура СтрокиОтчетаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		БухгалтерскийУчетКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтаФорма);
		
		Если НЕ ВсеСтроки Тогда
			БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "НастройкиСтрок");
			БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "НастройкиСтрокОДДС");
			БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "НастройкиСтрокОДДСПоСтатьям");
			БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "НастройкиСтрокОИК");
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПередНачаломДобавления строки табличной части НастройкиСтрок.
//
&НаКлиенте
Процедура НастройкиСтрокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = БухгалтерскийУчетКлиент.ПередНачаломДобавленияВПодчиненнуюТабличнуюЧасть(ЭтаФорма, Элемент.Имя);
	
	Если НЕ Отказ И ВсеСтроки Тогда 
		ТекстСообщения = НСтр("ru = 'Для добавления строки необходимо отключить режим ""Все строки"".'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования строки табличной части НастройкиСтрок.
//
&НаКлиенте
Процедура НастройкиСтрокПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		БухгалтерскийУчетКлиент.ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти(ЭтаФорма, Элемент.Имя);
		
		СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
		СтрокаТабличнойЧасти.КодСтроки = Элементы.СтрокиОтчета.ТекущиеДанные.КодСтроки;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПередНачаломДобавления строки табличной части НастройкиСтрокОДДС.
//
&НаКлиенте
Процедура НастройкиСтрокОДДСПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = БухгалтерскийУчетКлиент.ПередНачаломДобавленияВПодчиненнуюТабличнуюЧасть(ЭтаФорма, Элемент.Имя);
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования строки табличной части НастройкиСтрокОДДС.
//
&НаКлиенте
Процедура НастройкиСтрокОДДСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		БухгалтерскийУчетКлиент.ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти(ЭтаФорма, Элемент.Имя);
				
		СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
		СтрокаТабличнойЧасти.КодСтроки = Элементы.СтрокиОтчета.ТекущиеДанные.КодСтроки;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПередНачаломДобавления строки табличной части НастройкиСтрокОДДС.
//
&НаКлиенте
Процедура НастройкиСтрокОДДСПоСтатьямПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = БухгалтерскийУчетКлиент.ПередНачаломДобавленияВПодчиненнуюТабличнуюЧасть(ЭтаФорма, Элемент.Имя);
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования строки табличной части НастройкиСтрокОДДС.
//
&НаКлиенте
Процедура НастройкиСтрокОДДСПоСтатьямПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		БухгалтерскийУчетКлиент.ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти(ЭтаФорма, Элемент.Имя);
				
		СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
		СтрокаТабличнойЧасти.КодСтроки = Элементы.СтрокиОтчета.ТекущиеДанные.КодСтроки;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПередНачаломДобавления строки табличной части НастройкиСтрокОИК.
//
&НаКлиенте
Процедура НастройкиСтрокОИКПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = БухгалтерскийУчетКлиент.ПередНачаломДобавленияВПодчиненнуюТабличнуюЧасть(ЭтаФорма, Элемент.Имя);
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования строки табличной части НастройкиСтрокОИК.
//
&НаКлиенте
Процедура НастройкиСтрокОИКПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		БухгалтерскийУчетКлиент.ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти(ЭтаФорма, Элемент.Имя);
				
		СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
		СтрокаТабличнойЧасти.КодСтроки = Элементы.СтрокиОтчета.ТекущиеДанные.КодСтроки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСтрокОИКФормулаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.НастройкиСтрокОИК.ТекущиеДанные;
	Если СтрокаТабличнойЧасти.Формула = ПредопределенноеЗначение("Перечисление.Формулы.ОборотыДтКт") Тогда
		СтрокаТабличнойЧасти.СчетУчета = Неопределено;
	Иначе
		СтрокаТабличнойЧасти.СчетДт = Неопределено;
		СтрокаТабличнойЧасти.СчетКт = Неопределено;
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(Команда)
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидОтчета) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'Вид отчета'"));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.ВидОтчета",, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Объект.СтрокиОтчета.Количество() > 0 Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросЗаполнитьНастройки", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Табличные части будут перезаполнены настройками по умолчанию. Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);	
	Иначе
		ЗаполнитьНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНастройки(Команда)	
	
	Отказ = Ложь;

	Если Не ЗначениеЗаполнено(Объект.ВидОтчета) Тогда
		ТекстСообщения = НСтр("ru = 'Для проверки настройки необходимо заполнить вид отчета.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"Объект.ВидОтчета",, Отказ);
	КонецЕсли;

	Если Отказ Тогда
		Возврат;		
	КонецЕсли;	

	МассивСообщений = ПроверитьНастройкиНаСервере();
	Если МассивСообщений.Количество() = 0 Тогда 
		ТекстОповещения = НСтр("ru = 'Проверка выполнена'");
		ТекстПояснения = НСтр("ru = 'Ошибок не обнаружено.'");
		ПоказатьОповещениеПользователя(ТекстОповещения,, ТекстПояснения, БиблиотекаКартинок.Информация32);
	Иначе 	
		Для Каждого СтрокаМассива Из МассивСообщений Цикл		
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаМассива);
		КонецЦикла;
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОтветНаВопросЗаполнитьНастройки(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.СтрокиОтчета.Очистить();
		Объект.НастройкиСтрок.Очистить();
		Объект.НастройкиСтрокОДДС.Очистить();
		Объект.НастройкиСтрокОДДСПоСтатьям.Очистить();
		Объект.НастройкиСтрокОИК.Очистить();
		
        ЗаполнитьНаСервере();
    КонецЕсли;
КонецПроцедуры // ЗаполнитьПоОснованию()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость и доступность элементов.
//
&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()
	Если Объект.ВидОтчета = Перечисления.ВидыРегламентированныхОтчетов.Баланс
		Или Объект.ВидОтчета = Перечисления.ВидыРегламентированныхОтчетов.ОПУ Тогда 
		Элементы.СтраницаНастройкиСтрок.Видимость = Истина;
		Элементы.СтраницаНастройкиСтрокОДДС.Видимость = Ложь;
		Элементы.СтраницаНастройкиСтрокОДДСПоСтатьям.Видимость = Ложь;
		Элементы.СтраницаНастройкиСтрокОИК.Видимость = Ложь;
	ИначеЕсли Объект.ВидОтчета = Перечисления.ВидыРегламентированныхОтчетов.ОДДС Тогда 
		Элементы.СтраницаНастройкиСтрок.Видимость = Ложь;
		Элементы.СтраницаНастройкиСтрокОДДС.Видимость = НЕ ИспользоватьСтатьиДвиженияДенежныхСредств;
		Элементы.СтраницаНастройкиСтрокОДДСПоСтатьям.Видимость = ИспользоватьСтатьиДвиженияДенежныхСредств;
		Элементы.СтраницаНастройкиСтрокОИК.Видимость = Ложь;
	ИначеЕсли Объект.ВидОтчета = Перечисления.ВидыРегламентированныхОтчетов.ОИК Тогда 
		Элементы.СтраницаНастройкиСтрок.Видимость = Ложь;
		Элементы.СтраницаНастройкиСтрокОДДС.Видимость = Ложь;
		Элементы.СтраницаНастройкиСтрокОДДСПоСтатьям.Видимость = Ложь;
		Элементы.СтраницаНастройкиСтрокОИК.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры 

// Процедура настройки условного оформления форм и динамических списков .
//
&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// Таблица СтрокиОтчета.
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СтрокиОтчета");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СтрокиОтчета.ЭтоЗаголовок");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаШапкиОтчета);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	
	// Определение направления заполнения по группе настроек.
	Если Объект.ВидОтчета = Перечисления.ВидыРегламентированныхОтчетов.Баланс Тогда 		
		СправочникОбъект.ЗаполнитьНастройкиБаланс();
	ИначеЕсли Объект.ВидОтчета = Перечисления.ВидыРегламентированныхОтчетов.ОПУ Тогда 
		СправочникОбъект.ЗаполнитьНастройкиОПУ();
	ИначеЕсли Объект.ВидОтчета = Перечисления.ВидыРегламентированныхОтчетов.ОДДС Тогда 		
		Если ИспользоватьСтатьиДвиженияДенежныхСредств Тогда 
			СправочникОбъект.ЗаполнитьНастройкиОДДСПоСтатьям();		
		Иначе 	
			СправочникОбъект.ЗаполнитьНастройкиОДДС();		
		КонецЕсли;	
	ИначеЕсли Объект.ВидОтчета = Перечисления.ВидыРегламентированныхОтчетов.ОИК Тогда 		
		СправочникОбъект.ЗаполнитьНастройкиОИК();
	Иначе 
		Возврат;
	КонецЕсли;	
	
	ЗначениеВРеквизитФормы(СправочникОбъект, "Объект");
	Модифицированность = Истина;
КонецПроцедуры

// Процедура проверяет заполненные настройки в зависимости от выбранной группы настроек. 
//
&НаСервере
Функция ПроверитьНастройкиНаСервере()

	СтруктураТаблиц = Новый Структура();
	СтруктураТаблиц.Вставить("СтрокиОтчета", Объект.СтрокиОтчета.Выгрузить());
	СтруктураТаблиц.Вставить("НастройкиСтрок", Объект.НастройкиСтрок.Выгрузить());
	СтруктураТаблиц.Вставить("НастройкиОДДС", Объект.НастройкиСтрокОДДС.Выгрузить());
	СтруктураТаблиц.Вставить("НастройкиОДДСПоСтатьям", Объект.НастройкиСтрокОДДСПоСтатьям.Выгрузить());
	СтруктураТаблиц.Вставить("НастройкиОИК", Объект.НастройкиСтрокОИК.Выгрузить());
	
	Возврат Справочники.НастройкиРегламентированныхОтчетов.ПолучитьДанныеПроверкиНастроек(Объект.ВидОтчета, СтруктураТаблиц);	
	
КонецФункции // ПроверитьНастройкиНаСервере()


#КонецОбласти



