#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнениеОбъектовБП.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ИнициализироватьДанные(Отказ, РежимПроведения);
	
	ОтразитьДвижения(Отказ, РежимПроведения);
		
	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Проверка заполнения табличных частей
	Если ГотоваяПродукция.Количество() = 0 ИЛИ Материалы.Количество() = 0 Тогда	
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Необходимо заполнить закладки.'"),,,,Отказ);
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из ГотоваяПродукция Цикл
		
		Если Бригада = Справочники.ПодразделенияОрганизаций.ПустаяСсылка()
			И СтрокаТабличнойЧасти.ФИО = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда	
		
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Необходимо заполнить поле ""Бригада"" в шапке документа или поле ""ФИО"" в строках табличной части ""Готовая продукция"".'"),,,,Отказ)		
		КонецЕсли;
		
	КонецЦикла;	
	
	// Выполнение предварительного контроля.
	ВыполнитьПредварительныйКонтроль(Отказ);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииОбработкаПроведения

// Процедура инициализирует данные документа
// и подготавливает таблицы для движения в регистры
//
Процедура ИнициализироватьДанные(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.ОтчетПоПроизводству.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
КонецПроцедуры
	
// Процедура заполняет регистры данными
//
Процедура ОтразитьДвижения(Отказ, РежимПроведения)

	// Отражение в разделах учета.
	УчетТоваров.СформироватьДвиженияСписаниеТоваров(ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСписанныеТовары, 
		ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРеквизиты, Движения, Отказ, ДополнительныеСвойства);
		
	// Необходимо для считывания своих собственных проводок.	
	Движения.Хозрасчетный.Записать();	
		
	БухгалтерскийУчетСервер.ОтразитьВыполненныеРаботы(ДополнительныеСвойства, Движения, Отказ);
	
	Документы.ОтчетПоПроизводству.СформироватьТаблицуГотовыхЗаказов(ДополнительныеСвойства);
	
	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаРеквизитыГП") Тогда  
		УчетТоваров.СформироватьДвиженияГотоваяПродукция(ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаГотоваяПродукция,
			ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРеквизитыГП, Движения, Отказ);
		БухгалтерскийУчетСервер.ОтразитьСостояниеЗаказов(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет контроль противоречий.
//
Процедура ВыполнитьПредварительныйКонтроль(Отказ)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
	    |	ТаблицаГотоваяПродукция.Заказ
		|ПОМЕСТИТЬ ВременнаяТаблицаЗаказы
		|ИЗ
		|	&ТаблицаГотоваяПродукция КАК ТаблицаГотоваяПродукция
		|;
		|
		|//////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВременнаяТаблицаЗаказы.Заказ
		|ИЗ
		|	ВременнаяТаблицаЗаказы КАК ВременнаяТаблицаЗаказы";
	Запрос.УстановитьПараметр("ТаблицаГотоваяПродукция", ГотоваяПродукция);
	ТЗЗаказы = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СостояниеЗаказовСрезПоследних.Заказ КАК Заказ,
		|	СостояниеЗаказовСрезПоследних.Состояние КАК Состояние
		|ИЗ
		|	РегистрСведений.СостояниеЗаказов.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И Заказ В (&МассивЗаказов)) КАК СостояниеЗаказовСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВыполненныеРаботыСрезПоследних.Заказ КАК Заказ,
		|   ВыполненныеРаботыСрезПоследних.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.ВыполненныеРаботы.СрезПоследних(
		|   	&Период,	
		|       Организация = &Организация
		|       	И Заказ В (&МассивЗаказов)) КАК ВыполненныеРаботыСрезПоследних";
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("МассивЗаказов", ТЗЗаказы.ВыгрузитьКолонку("Заказ"));
	МассивРезультатов = Запрос.ВыполнитьПакет();

	ВыборкаСостоянийЗаказов = МассивРезультатов[0].Выбрать();
	ТЗВыполненныеРаботы = МассивРезультатов[1].Выгрузить();
	
	МассивГотовыхЗаказов = Новый Массив();
	МассивОтмененныхЗаказов = Новый Массив();
	
	Пока ВыборкаСостоянийЗаказов.Следующий() Цикл
		
		Если ВыборкаСостоянийЗаказов.Состояние = Перечисления.СостоянияЗаказовПоПроизводству.Отменен Тогда
			МассивОтмененныхЗаказов.Добавить(ВыборкаСостоянийЗаказов.Заказ);	
			
		ИначеЕсли ВыборкаСостоянийЗаказов.Состояние <> Перечисления.СостоянияЗаказовПоПроизводству.Заказан Тогда
			СтруктураОтбора = Новый Структура();
			СтруктураОтбора.Вставить("Заказ", ВыборкаСостоянийЗаказов.Заказ);
			
			ЗаказГотов = Ложь;
			
			Для Каждого СтрокаТаблицы Из ТЗВыполненныеРаботы.НайтиСтроки(СтруктураОтбора) Цикл
				Если СтрокаТаблицы.Регистратор = Ссылка Тогда
					ЗаказГотов = Ложь;
					Прервать;
				Иначе
					ЗаказГотов = Истина;
				КонецЕсли;
			КонецЦикла;	
			
			Если ЗаказГотов Тогда
				МассивГотовыхЗаказов.Добавить(ВыборкаСостоянийЗаказов.Заказ);		
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивГотовыхЗаказов.Количество() > 0 ИЛИ МассивОтмененныхЗаказов.Количество() > 0 Тогда
		Для Каждого СтрокаМассива Из МассивГотовыхЗаказов Цикл
			ТекстСообщения = СтрШаблон(НСтр("ru = '""%1"" уже выполнен.'"), 
							СтрокаМассива);
			БухгалтерскийУчетСервер.СообщитьОбОшибке(
				ЭтотОбъект,
				ТекстСообщения,
				,
				,
				,
				Отказ);
		КонецЦикла;
			
		Для Каждого СтрокаМассива Из МассивОтмененныхЗаказов Цикл
			ТекстСообщения = СтрШаблон(НСтр("ru = '""%1"" отменен.'"), 
							СтрокаМассива);
			БухгалтерскийУчетСервер.СообщитьОбОшибке(
				ЭтотОбъект,
				ТекстСообщения,
				,
				,
				,
				Отказ);
		КонецЦикла;
	КонецЕсли;	
		
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли