
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка реквизитов формы.	
	ДатаДокумента = Объект.Дата;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	
	ПризнакСтраны = Объект.Контрагент.ПризнакСтраны;

	СуммаСкидкиПоСтроке = Объект.ВидСкидкиНаценки = Перечисления.ВидыСкидокНаценок.СуммаПоСтроке;
	
	УстановитьФункциональныеОпцииФормы();

	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	
	// РаботаСФормами
	РаботаСФормамиСервер.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец РаботаСФормами
	
	Если ПолучитьФункциональнуюОпцию("УказыватьТочностьЦены") Тогда 
		ЗаполнитьСписокВыбораТочностьЦены();	
	КонецЕсли;
	
	// КопированиеСтрокТабличныхЧастей
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСервере(Элементы, "Товары");
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСервере(Элементы, "Услуги");
	// Конец КопированиеСтрокТабличныхЧастей
	
	// РегулярныеСчета 
	Если Параметры.Свойство("ПравилоПовторения") И ЗначениеЗаполнено(Параметры.ПравилоПовторения) Тогда
		ПравилоПовторения = Параметры.ПравилоПовторения;
		НадписьПовторение = НадписьПовторение(ПравилоПовторения, Параметры.Ключ.Пустая());
	Иначе
		ЗаполнитьПравилоПовторенияИНадпись();
	КонецЕсли;
	// Конец РегулярныеСчета
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = ПодключаемоеОборудованиеБППовтИсп.ИспользоватьПодключаемоеОборудование();
	// Конец ПодключаемоеОборудование
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом 
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьТекущуюСтраницу();
	ОбновитьПодвалФормы();
	
	УстановитьФорматЦены();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	Если ИспользоватьПодключаемоеОборудование Тогда 
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	КонецЕсли;	
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
КонецПроцедуры

// Процедура - обработчик события ПриЗакрытии.
//
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	// ПодключаемоеОборудование
	Если ИспользоватьПодключаемоеОборудование Тогда 
		МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	КонецЕсли;	
	// Конец ПодключаемоеОборудование
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "МодифицированДоговораКонтрагента"
		И Параметр = Объект.ДоговорКонтрагента Тогда
		ОбработатьИзменениеДоговора(Истина);
		
	ИначеЕсли ИмяСобытия = "ПодборНоменклатурыПроизведен" 
		И ТипЗнч(Параметр) = Тип("Структура")
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор Тогда
		
		АдресЗапасовВХранилище = Параметр.АдресЗапасовВХранилище;
		ПолучитьТоварыИзХранилища(АдресЗапасовВХранилище, "Товары");
		
		ОбновитьПодвалФормы();
		
	ИначеЕсли ИмяСобытия = "ПодборОСПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор Тогда
		
		АдресЗапасовВХранилище = Параметр;
		ПолучитьОСИзХранилища(АдресЗапасовВХранилище);	
		
	ИначеЕсли (ИмяСобытия = "Запись_ПлатежноеПоручениеВходящее"
		Или ИмяСобытия = "Запись_ОплатаПлатежнойКартой" 
		Или ИмяСобытия = "Запись_ПриходныйКассовыйОрдер") 
		И ЗначениеЗаполнено(Параметр) 
		И Параметр.ДокументОснование = Объект.Ссылка Тогда 
		
		Объект.ДатаОплаты = Параметр.Дата;
		Если Не Модифицированность Тогда
			Записать();
		КонецЕсли;
		Оповестить("ЗаполнениеДатыОплатыВыполнено");
		
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Товары");
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Услуги");
	КонецЕсли;
	// Конец КопированиеСтрокТабличныхЧастей
	
	// РегулярныеСчета 
	Если ИмяСобытия = "Запись_ПравилаРегулярныхСчетовПокупателям" И 
		(Параметр = Объект.Ссылка ИЛИ Источник = ПравилоПовторения) Тогда
		
		ЗаполнитьПравилоПовторенияИНадпись();
	КонецЕсли;
	// Конец РегулярныеСчета 
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			// Преобразуем предварительно к ожидаемому формату.
			Если Параметр[1] = Неопределено Тогда
				ТекШтрихкод = Параметр[0]; // Достаем штрихкод из основных данных
			Иначе
				ТекШтрихкод = Параметр[1][1]; // Достаем штрихкод из дополнительных данных
			КонецЕсли;
			
			Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаТовары Тогда 
				ПоискПоШтрихкодуЗавершение(ТекШтрихкод, Новый Структура("ТекШтрихкод, ИмяТабличнойЧасти", ТекШтрихкод, "Товары"));
			ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУслуги Тогда
				ПоискПоШтрихкодуЗавершение(ТекШтрихкод, Новый Структура("ТекШтрихкод, ИмяТабличнойЧасти", ТекШтрихкод, "Услуги"));
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
КонецПроцедуры

// Процедура - обработчик события ПриЗаписиНаСервере.
//
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(ПравилоПовторения) Тогда
		Если Объект.Ссылка.Пустая() Тогда // Новый документ по правилу.
			
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПравилоПовторения, "Организация") <> ТекущийОбъект.Организация Тогда
				ПравилоОбъект = ПравилоПовторения.ПолучитьОбъект();
				ПравилоОбъект.Организация = ТекущийОбъект.Организация;
				ПравилоОбъект.Записать();
			КонецЕсли;
			
			РегистрыСведений.РегулярныеСчетаПокупателям.УстановитьШаблон(ПравилоПовторения, ТекущийОбъект.Ссылка);
			
			НадписьПовторение = НадписьПовторение(ПравилоПовторения, Ложь);
			
			ПараметрыЗаписи.Вставить("ВведенДокументПоПравилу");
			
		Иначе
			РегистрыСведений.РегулярныеСчетаПокупателям.УстановитьШаблон(ПравилоПовторения, ТекущийОбъект.Ссылка,, Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	
	// РаботаСФормами
	РаботаСФормамиСервер.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	// РегулярныеСчета 
	Оповестить("Запись_СчетПокупателю", ПараметрыЗаписи, Объект.Ссылка);
	// Конец РегулярныеСчета 
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением, Объект.ВалютаДокумента);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
		
		ОбработатьИзменениеУчетнойПолитики();	
	КонецЕсли;
	
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
	
	УстановитьФункциональныеОпцииФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Объект.Номер = "";

	ОбработатьИзменениеУчетнойПолитики();	

	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
	
	УстановитьСтавкиНСППоУмолчанию();
	
	ПриИзмененииСтавкиНСП();
	ПриИзмененииСтавкиНСПУслуги();
	
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент, Объект.Организация);	
	Объект.ДоговорКонтрагента = СтруктураДанные.ДоговорКонтрагента;
	ОбработатьИзменениеДоговора();
	
	УстановитьФункциональныеОпцииФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Контрагент.
//
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент, Объект.Организация);
	Объект.ДоговорКонтрагента = СтруктураДанные.ДоговорКонтрагента;
	ПризнакСтраны = СтруктураДанные.ПризнакСтраны;
	
	Если НЕ ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.КР") Тогда
		Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл 
			СтрокаТабличнойЧасти.СтавкаНСП = ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка");
		КонецЦикла;	
		Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл 
			СтрокаТабличнойЧасти.СтавкаНСП = ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка");
		КонецЦикла;	
		Для Каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл 
			СтрокаТабличнойЧасти.СтавкаНСП = ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка");
		КонецЦикла;	
	КонецЕсли;
	
	ОбработатьИзменениеДоговора();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Договор контрагента.
//
&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	ОбработатьИзменениеДоговора();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Вид скидки.
//
&НаКлиенте
Процедура ВидСкидкиПриИзменении(Элемент)
	СуммаСкидкиПоСтроке = Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке");
	ВидСкидкиПриИзмененииНаКлиенте();	
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Скидка процент.
//
&НаКлиенте
Процедура ПроцентСкидкиНаценкиПриИзменении(Элемент)
	ВидСкидкиПриИзмененииНаКлиенте()
КонецПроцедуры

// Процедура - обработчик события ПриИзменении флага Безналичный расчет.
//
&НаКлиенте
Процедура БезналичныйРасчетПриИзменении(Элемент)
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Товары");
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(Объект, ПараметрыРасчета);
		
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Услуги");	
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(Объект, ПараметрыРасчета);
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("ОС");	
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(Объект, ПараметрыРасчета);
					
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	ОбновитьПодвалФормы();	
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Ставка НДС.
//
&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Товары");
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(Объект, ПараметрыРасчета);
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Услуги");
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(Объект, ПараметрыРасчета);
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("ОС");	
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(Объект, ПараметрыРасчета);
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Ставка НСП.
//
&НаКлиенте
Процедура СтавкаНСППриИзменении(Элемент)
	
	ПриИзмененииСтавкиНСП();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Ставка НСП Услуги.
//
&НаКлиенте
Процедура СтавкаНСПУслугиПриИзменении(Элемент)
	
	ПриИзмененииСтавкиНСПУслуги();
	
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура ТочностьЦеныПриИзменении(Элемент)
	УстановитьФорматЦены();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Процедура - обработчик события ПередНачаломДобавления таблицы Товары.
//
&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда 
		ИтогВсего = Объект.Товары.Итог("Всего") + Объект.Услуги.Итог("Всего") + Объект.ОС.Итог("Всего") + Элемент.ТекущиеДанные.Всего;
		ИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС") + Объект.ОС.Итог("СуммаНДС") + Элемент.ТекущиеДанные.СуммаНДС;
		ИтогСуммаНСП = Объект.Товары.Итог("СуммаНСП") + Объект.Услуги.Итог("СуммаНСП") + Объект.ОС.Итог("СуммаНСП") + Элемент.ТекущиеДанные.СуммаНСП;
		
		ИтогСуммаСкидки = Объект.Товары.Итог("СуммаСкидки") + Объект.Услуги.Итог("СуммаСкидки") + Объект.ОС.Итог("СуммаСкидки") + Элемент.ТекущиеДанные.СуммаСкидки;
		ИтогСуммаКОплате = ИтогВсего - ИтогСуммаСкидки;
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования таблицы Товары.
//
&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
		
		Если Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.ПроцентОбщий") Тогда 
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Объект.ПроцентСкидкиНаценки;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПослеУдаления таблицы Товары.
//
&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ОбработатьИзменениеНоменклатуры(СтрокаТабличнойЧасти, "Товары");	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Количество.
//
&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Товары");
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	
	Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;	
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, НЕ Объект.СуммаВключаетНалоги);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ТоварыЦена.
//
&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Товары");
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	
	Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;	
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, НЕ Объект.СуммаВключаетНалоги);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Товары");
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);	

	Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;	

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, НЕ Объект.СуммаВключаетНалоги);	
		
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНСППриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Товары");
	
	//Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	//Иначе
	//	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);	
	//КонецЕсли;	
		
	Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;	
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СуммаНДС.
//
&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНалоги, 0, СтрокаТабличнойЧасти.СуммаНДС + СтрокаТабличнойЧасти.СуммаНСП);	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ТоварыСуммаНСП.
//
&НаКлиенте
Процедура ТоварыСуммаНСППриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНалоги, 0, СтрокаТабличнойЧасти.СуммаНДС + СтрокаТабличнойЧасти.СуммаНСП);	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ТоварыПроцентСкидкиНаценки.
//
&НаКлиенте
Процедура ТоварыПроцентСкидкиНаценкиПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Товары");
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	
	Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;	
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, НЕ Объект.СуммаВключаетНалоги);	
		
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ТоварыСуммаСкидки.
//
&НаКлиенте
Процедура ТоварыСуммаСкидкиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Товары");
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, НЕ Объект.СуммаВключаетНалоги);	
		
	ОбновитьПодвалФормы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

// Процедура - обработчик события ПередНачаломДобавления таблицы Услуги.
//
&НаКлиенте
Процедура УслугиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда 
		ИтогВсего = Объект.Товары.Итог("Всего") + Объект.Услуги.Итог("Всего") + Объект.ОС.Итог("Всего") + Элемент.ТекущиеДанные.Всего;
		ИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС") + Объект.ОС.Итог("СуммаНДС") + Элемент.ТекущиеДанные.СуммаНДС;
		ИтогСуммаНСП = Объект.Товары.Итог("СуммаНСП") + Объект.Услуги.Итог("СуммаНСП") + Объект.ОС.Итог("СуммаНСП") + Элемент.ТекущиеДанные.СуммаНСП;
		
		ИтогСуммаСкидки = Объект.Товары.Итог("СуммаСкидки") + Объект.Услуги.Итог("СуммаСкидки") + Объект.ОС.Итог("СуммаСкидки") + Элемент.ТекущиеДанные.СуммаСкидки;
		ИтогСуммаКОплате = ИтогВсего - ИтогСуммаСкидки;
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования таблицы Услуги.
//
&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
		
		Если Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.ПроцентОбщий") Тогда 
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Объект.ПроцентСкидкиНаценки;
		КонецЕсли;
	КонецЕсли;		
КонецПроцедуры

// Процедура - обработчик события ПослеУдаления таблицы Услуги.
//
&НаКлиенте
Процедура УслугиПослеУдаления(Элемент)
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	ОбработатьИзменениеНоменклатуры(СтрокаТабличнойЧасти, "Услуги");	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Количество.
//
&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Услуги");
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	
	Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;	
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, НЕ Объект.СуммаВключаетНалоги);	
		
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода УслугиЦена.
//
&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Услуги");
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	
	Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;	
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);	
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, НЕ Объект.СуммаВключаетНалоги);	
		
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Услуги");
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);	
	
	Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;	

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, НЕ Объект.СуммаВключаетНалоги);	
		
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНСППриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Услуги");
	
	//Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	//Иначе
	//	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);	
	//КонецЕсли;	
		
	Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;	
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СуммаНДС.
//
&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНалоги, 0, СтрокаТабличнойЧасти.СуммаНДС + СтрокаТабличнойЧасти.СуммаНСП);	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода УслугиСуммаНСП.
//
&НаКлиенте
Процедура УслугиСуммаНСППриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНалоги, 0, СтрокаТабличнойЧасти.СуммаНДС + СтрокаТабличнойЧасти.СуммаНСП);	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода УслугиПроцентСкидкиНаценки.
//
&НаКлиенте
Процедура УслугиПроцентСкидкиНаценкиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Услуги");
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	
	Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;	
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, НЕ Объект.СуммаВключаетНалоги);	
		
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода УслугиСуммаСкидки.
//
&НаКлиенте
Процедура УслугиСуммаСкидкиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Услуги");
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, НЕ Объект.СуммаВключаетНалоги);	
		
	ОбновитьПодвалФормы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОС

// Процедура - обработчик события ПередНачаломДобавления таблицы ОС.
//
&НаКлиенте
Процедура ОСПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда 
		ИтогВсего = Объект.Товары.Итог("Всего") + Объект.Услуги.Итог("Всего") + Объект.ОС.Итог("Всего") + Элемент.ТекущиеДанные.Всего;
		ИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС") + Объект.ОС.Итог("СуммаНДС") + Элемент.ТекущиеДанные.СуммаНДС;
		ИтогСуммаНСП = Объект.Товары.Итог("СуммаНСП") + Объект.Услуги.Итог("СуммаНСП") + Объект.ОС.Итог("СуммаНСП") + Элемент.ТекущиеДанные.СуммаНСП;
		
		ИтогСуммаСкидки = Объект.Товары.Итог("СуммаСкидки") + Объект.Услуги.Итог("СуммаСкидки") + Объект.ОС.Итог("СуммаСкидки") + Элемент.ТекущиеДанные.СуммаСкидки;
		ИтогСуммаКОплате = ИтогВсего - ИтогСуммаСкидки;
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования таблицы ОС.
//
&НаКлиенте
Процедура ОСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
		
		Если Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.ПроцентОбщий") Тогда 
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Объект.ПроцентСкидкиНаценки;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.СтавкаНСП = ПредопределенноеЗначение("Справочник.СтавкиНСП.Прочее");
	КонецЕсли;	
	
КонецПроцедуры

// Процедура - обработчик события ПослеУдаления таблицы ОС.
//
&НаКлиенте
Процедура ОСПослеУдаления(Элемент)
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Количество.
//
&НаКлиенте
Процедура ОСКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("ОС");
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	
	Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;	
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, НЕ Объект.СуммаВключаетНалоги);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОСЦена.
//
&НаКлиенте
Процедура ОСЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("ОС");
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	
	Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;	
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, НЕ Объект.СуммаВключаетНалоги);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура ОССуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("ОС");
	                                                               
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);	
	
	Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;	

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, НЕ Объект.СуммаВключаетНалоги);	
		
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОССтавкаНСППриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("ОС");
	
	//Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	//Иначе
	//	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);	
	//КонецЕсли;	
		
	Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;	
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СуммаНДС.
//
&НаКлиенте
Процедура ОССуммаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНалоги, 0, СтрокаТабличнойЧасти.СуммаНДС + СтрокаТабличнойЧасти.СуммаНСП);	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОССуммаНСП.
//
&НаКлиенте
Процедура ОССуммаНСППриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНалоги, 0, СтрокаТабличнойЧасти.СуммаНДС + СтрокаТабличнойЧасти.СуммаНСП);	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОСПроцентСкидкиНаценки.
//
&НаКлиенте
Процедура ОСПроцентСкидкиНаценкиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("ОС");
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	
	Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;	
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, НЕ Объект.СуммаВключаетНалоги);	
		
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОССуммаСкидки.
//
&НаКлиенте
Процедура ОССуммаСкидкиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("ОС");
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, НЕ Объект.СуммаВключаетНалоги);	
		
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОС.
//
&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ОсновноеСредство) Тогда
		Если ДанныеУчетнойПолитики.ПлательщикНСП И ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.КР") Тогда
			СтрокаТабличнойЧасти.СтавкаНСП = Объект.СтавкаНСП;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик события действия команды Подбор в табличную часть Товары.
// Открывает форму подбора.
//
&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	РаботаСПодборомНоменклатурыКлиент.ОткрытьПодбор(ЭтаФорма, "Товары", "Реализация");
КонецПроцедуры

// РегулярныеСчета 
&НаКлиенте
Процедура НадписьПовторениеНажатие(Элемент, СтандартнаяОбработка)
	
	Если Объект.Организация.Пустая() Тогда
		
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Организация'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Организация", "Объект");
		
	ИначеЕсли Объект.Ссылка.Пустая()  Тогда
		
		ТекстВопроса = НСтр("ru = 'Расписание повторения доступно только после записи. Записать?'");
		
		Оповещение = Новый ОписаниеОповещения("ВопросРедактированиеПравилаЗавершение", ЭтотОбъект);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да, ТекстВопроса);
		
	Иначе
		
		ОткрытьПравилоПовторения();
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры
// Конец РегулярныеСчета 

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла
&НаКлиенте
Процедура ЗагрузитьТоварыИзФайла(Команда)
    ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
    ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "СчетНаОплатуПокупателю.Товары";
    ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка списка товаров из файла'");
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьТоварыИзФайлаЗавершение", ЭтотОбъект);
    ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

// Процедура - обработчик события Действие команды Подбор
//
&НаКлиенте
Процедура ПодборОС(Команда)
	УправлениеВнеоборотнымиАктивамиКлиент.ОткрытьПодбор(ЭтаФорма, "ОС");  
КонецПроцедуры

// ПодключаемоеОборудование
&НаКлиенте
Процедура ПоискПоШтрихкодуТовары(Команда)
	
	ТекШтрихкод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", 
		ЭтотОбъект, Новый Структура("ТекШтрихкод, ИмяТабличнойЧасти", ТекШтрихкод, "Товары")), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
		
КонецПроцедуры
	
&НаКлиенте
Процедура ПоискПоШтрихкодуУслуги(Команда)
	
	ТекШтрихкод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", 
		ЭтотОбъект, Новый Структура("ТекШтрихкод, ИмяТабличнойЧасти", ТекШтрихкод, "Услуги")), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));

КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ТекШтрихкод = ?(Результат = Неопределено, ДополнительныеПараметры.ТекШтрихкод, Результат);
    
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
        ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1), ДополнительныеПараметры.ИмяТабличнойЧасти);
	КонецЕсли;	

КонецПроцедуры 
// Конец ПодключаемоеОборудование

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла
&НаКлиенте
Процедура ЗагрузитьТоварыИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
    Если АдресЗагруженныхДанных = Неопределено Тогда 
        Возврат;
    КонецЕсли;
    ЗагрузитьТоварыИзФайлаНаСервере(АдресЗагруженныхДанных);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость и доступность элементов.
//
&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()	
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидСкидкиНаценки) Тогда 
		Элементы.ПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.ТоварыПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.ТоварыСуммаСкидки.Видимость = Ложь;
		Элементы.УслугиПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.УслугиСуммаСкидки.Видимость = Ложь;
		Элементы.ОСПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.ОССуммаСкидки.Видимость = Ложь;
		Элементы.ИтогСуммаСкидки.Видимость = Ложь;
		Элементы.ИтогСуммаКОплате.Видимость = Ложь;
	ИначеЕсли Объект.ВидСкидкиНаценки = Перечисления.ВидыСкидокНаценок.ПроцентПоСтроке Тогда 
		Элементы.ПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.ТоварыПроцентСкидкиНаценки.Видимость = Истина;
		Элементы.ТоварыСуммаСкидки.Видимость = Истина;
		Элементы.УслугиПроцентСкидкиНаценки.Видимость = Истина;
		Элементы.УслугиСуммаСкидки.Видимость = Истина;
		Элементы.ОСПроцентСкидкиНаценки.Видимость = Истина;
		Элементы.ОССуммаСкидки.Видимость = Истина;
		Элементы.ИтогСуммаСкидки.Видимость = Истина;		
		Элементы.ИтогСуммаКОплате.Видимость = Истина;		
		Элементы.ТоварыСуммаСкидки.ТолькоПросмотр = Истина;
		Элементы.УслугиСуммаСкидки.ТолькоПросмотр = Истина;
	ИначеЕсли Объект.ВидСкидкиНаценки = Перечисления.ВидыСкидокНаценок.СуммаПоСтроке Тогда 
		Элементы.ПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.ТоварыПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.ТоварыСуммаСкидки.Видимость = Истина;
		Элементы.УслугиПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.УслугиСуммаСкидки.Видимость = Истина;
		Элементы.ОСПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.ОССуммаСкидки.Видимость = Истина;
		Элементы.ИтогСуммаСкидки.Видимость = Истина;		
		Элементы.ИтогСуммаКОплате.Видимость = Истина;		
		Элементы.ТоварыСуммаСкидки.ТолькоПросмотр = Ложь;
		Элементы.УслугиСуммаСкидки.ТолькоПросмотр = Ложь;
	ИначеЕсли Объект.ВидСкидкиНаценки = Перечисления.ВидыСкидокНаценок.ПроцентОбщий Тогда 
		Элементы.ПроцентСкидкиНаценки.Видимость = Истина;
		Элементы.ТоварыПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.ТоварыСуммаСкидки.Видимость = Истина;
		Элементы.УслугиПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.УслугиСуммаСкидки.Видимость = Истина;
		Элементы.ОСПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.ОССуммаСкидки.Видимость = Истина;
		Элементы.ИтогСуммаСкидки.Видимость = Истина;		
		Элементы.ИтогСуммаКОплате.Видимость = Истина;		
		Элементы.ТоварыСуммаСкидки.ТолькоПросмотр = Истина;
		Элементы.УслугиСуммаСкидки.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Элементы.СтавкаНДС.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС;
	
	// Ставка НСП.
	Если ПризнакСтраны = Перечисления.ПризнакиСтраны.КР Тогда 
		Элементы.ТоварыСтавкаНСП.Видимость = Истина;
		Элементы.УслугиСтавкаНСП.Видимость = Истина;
		Элементы.ОССтавкаНСП.Видимость = Истина;
	Иначе 
		Элементы.ТоварыСтавкаНСП.Видимость = Ложь;
		Элементы.УслугиСтавкаНСП.Видимость = Ложь;
		Элементы.ОССтавкаНСП.Видимость = Ложь;
	КонецЕсли;	
	
	// Сумма НСП.
	Если Объект.БезналичныйРасчет 
		Или НЕ ПризнакСтраны = Перечисления.ПризнакиСтраны.КР Тогда
		Элементы.ТоварыСуммаНСП.Видимость = Ложь;
		Элементы.УслугиСуммаНСП.Видимость = Ложь;
		Элементы.ОССуммаНСП.Видимость = Ложь;
		Элементы.ИтогСуммаНСП.Видимость = Ложь;
		
		Если Объект.СтавкаНСП = Справочники.СтавкиНСП.ЗастройщикиЖилья Тогда
			Элементы.ТоварыСуммаНСП.Видимость = Истина;
			Элементы.ОССуммаНСП.Видимость = Истина;
			Элементы.ИтогСуммаНСП.Видимость = Истина;
		КонецЕсли;
		
		Если Объект.СтавкаНСПУслуги = Справочники.СтавкиНСП.ЗастройщикиЖилья Тогда
			Элементы.УслугиСуммаНСП.Видимость = Истина;
			Элементы.ИтогСуммаНСП.Видимость = Истина;
		КонецЕсли;
		
	Иначе
		Элементы.ТоварыСуммаНСП.Видимость = Истина;
		Элементы.УслугиСуммаНСП.Видимость = Истина;
		Элементы.ОССуммаНСП.Видимость = Истина;
		Элементы.ИтогСуммаНСП.Видимость = Истина;
	КонецЕсли;	
	
КонецПроцедуры 

// Процедура устанавливает Ставку НСП и Ставку НСП Услуги в значения по умолчанию.
//
&НаСервере
Процедура УстановитьСтавкиНСППоУмолчанию()
	Объект.СтавкаНСП = ДанныеУчетнойПолитики.СтавкаНСПРеализацииТовары;
	Объект.СтавкаНСПУслуги = ДанныеУчетнойПолитики.СтавкаНСПРеализацииУслуги;
КонецПроцедуры

// Процедура устанавливает текущую страницу при открытии формы.
//
&НаКлиенте
Процедура УстановитьТекущуюСтраницу()	
	Если Объект.Товары.Количество() > 0 Тогда 
		Возврат;
	ИначеЕсли Объект.Услуги.Количество() > 0 Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаУслуги;
	КонецЕсли;	
КонецПроцедуры

// Процедура устанавливает функциональные опции формы документа.
//
&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма, Объект.Организация, ДатаДокумента);
КонецПроцедуры

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением, ВалютаДокумента)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением);
	ВалютаКурсКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДатаНовая);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат);
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		ВалютаКурсКратность);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаКлиенте
Процедура ОбработатьИзменениеУчетнойПолитики()
	
	НовыеДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	
	Если НЕ ДанныеУчетнойПолитики = НовыеДанныеУчетнойПолитики Тогда 
		ДанныеУчетнойПолитики = НовыеДанныеУчетнойПолитики;
	КонецЕсли;	

КонецПроцедуры

// Получает набор данных с сервера для процедуры КонтрагентПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Контрагент, Организация)
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Контрагент, Организация);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ДоговорКонтрагента",
		ДоговорПоУмолчанию);
		
	СтруктураДанные.Вставить(
		"ПризнакСтраны",
		Контрагент.ПризнакСтраны);	
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

// Получает договор по умолчанию
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация)
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ВидыДоговораДляДокумента(Документ);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(Период, ВалютаДокумента, ДоговорКонтрагента)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		ДоговорКонтрагента.ВалютаРасчетов);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаРасчетов, Период));
	
	СтруктураДанные.Вставить(
		"ТипЦен",
		ДоговорКонтрагента.ТипЦен);
	
	СтруктураДанные.Вставить(
		"СуммаВключаетНалоги",
		ДоговорКонтрагента.СуммаВключаетНалоги);
	
	СтруктураДанные.Вставить(
		"СтавкаНДС",
		ДоговорКонтрагента.СтавкаНДС);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

&НаКлиенте
Процедура ОбработатьИзменениеДоговора(МодифицированДоговор = Ложь)
	
	СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(ДатаДокумента, Объект.ВалютаДокумента, Объект.ДоговорКонтрагента);

	// Обработка изменения валюты
	СтруктураКурсыПред = Новый Структура("Валюта, Курс, Кратность", Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность);
	
	Объект.ВалютаДокумента = СтруктураДанные.ВалютаРасчетов;
	Объект.Курс      = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
	Объект.Кратность = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
	
	СтруктураКурсы = Новый Структура("Валюта, Курс, Кратность", Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность);
	
	// Обработка изменения налогообложения
	Объект.СуммаВключаетНалоги = СтруктураДанные.СуммаВключаетНалоги;
	Объект.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		
	// Пересчет табличной части
	// Цена
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(Объект, ДатаДокумента, СтруктураКурсыПред, СтруктураКурсы, "Товары", Объект.ТочностьЦены);
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(Объект, ДатаДокумента, СтруктураКурсыПред, СтруктураКурсы, "Услуги", Объект.ТочностьЦены);
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(Объект, ДатаДокумента, СтруктураКурсыПред, СтруктураКурсы, "ОС", Объект.ТочностьЦены);
	// Сумма
	МассивТабличныхЧастей = Новый Массив();
	МассивТабличныхЧастей.Добавить("Товары");
	МассивТабличныхЧастей.Добавить("Услуги");
	МассивТабличныхЧастей.Добавить("ОС");
	
	Для Каждого ТабличнаяЧасть Из МассивТабличныхЧастей Цикл
		
		Для Каждого СтрокаТабличнойЧасти Из Объект[ТабличнаяЧасть] Цикл				
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
			
			Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Налоги
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Товары");
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(Объект, ПараметрыРасчета);
		
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Услуги");	
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(Объект, ПараметрыРасчета);
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("ОС");	
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(Объект, ПараметрыРасчета);
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеДоговораФрагментЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СтруктураКурсыПред = ДополнительныеПараметры.СтруктураКурсыПред;
		СтруктураКурсы = ДополнительныеПараметры.СтруктураКурсы;
		
		// Цена 
		ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(Объект, ДатаДокумента, СтруктураКурсыПред, СтруктураКурсы, "Товары", Объект.ТочностьЦены);
		ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(Объект, ДатаДокумента, СтруктураКурсыПред, СтруктураКурсы, "Услуги", Объект.ТочностьЦены);
		ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(Объект, ДатаДокумента, СтруктураКурсыПред, СтруктураКурсы, "ОС", Объект.ТочностьЦены);
		
		// Сумма
		МассивТабличныхЧастей = Новый Массив();
		МассивТабличныхЧастей.Добавить("Товары");
		МассивТабличныхЧастей.Добавить("Услуги");
		МассивТабличныхЧастей.Добавить("ОС");
		
		Для Каждого ТабличнаяЧасть Из МассивТабличныхЧастей Цикл
			
			Для Каждого СтрокаТабличнойЧасти Из Объект[ТабличнаяЧасть] Цикл		
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
				
				Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;	
	
	// Налоги
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Товары");
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(Объект, ПараметрыРасчета);
		
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Услуги");	
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(Объект, ПараметрыРасчета);
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("ОС");	
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(Объект, ПараметрыРасчета);

	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеНоменклатуры(СтрокаТабличнойЧасти, ИмяТабличнойЧасти)
	
	СтавкаНДС = ?(ДанныеУчетнойПолитики.ПлательщикНДС, 
		Объект.СтавкаНДС, 
		ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка"));
		
	СтавкаНСП = ?(ДанныеУчетнойПолитики.ПлательщикНСП И ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.КР"), 
		?(ИмяТабличнойЧасти = "Товары", Объект.СтавкаНСП,Объект.СтавкаНСПУслуги),//?(ИмяТабличнойЧасти = "Товары", ДанныеУчетнойПолитики.СтавкаНСПРеализацииТовары, ДанныеУчетнойПолитики.СтавкаНСПРеализацииУслуги), 
		ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка"));
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Дата", ДатаДокумента);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Контрагент", Объект.Контрагент);
	СтруктураДанные.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("СуммаВключаетНалоги", Объект.СуммаВключаетНалоги);
	СтруктураДанные.Вставить("СтавкаНДС", СтавкаНДС);
	СтруктураДанные.Вставить("СтавкаНСП", СтавкаНСП);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("ТочностьЦены", Объект.ТочностьЦены);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);

	// Заполнение по данным номенклатуры
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	
	Если ИмяТабличнойЧасти = "Услуги" Тогда
		СтрокаТабличнойЧасти.ДополнительныеСведения = НаименованиеУслуги(СтрокаТабличнойЧасти.Номенклатура);
	КонецЕсли;
	
	СтрокаТабличнойЧасти.СтавкаНСП = СтруктураДанные.СтавкаНСП;
	
	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	
	Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;	
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета(ИмяТабличнойЧасти);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, НЕ Объект.СуммаВключаетНалоги);
		
	ОбновитьПодвалФормы();
КонецПроцедуры	

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	// Данные номенклатуры
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	СтруктураДанные.Вставить("ЭтоУслуга", СтруктураДанные.Номенклатура.Услуга);
	
	// Счета учета
	СчетаУчетаНоменклатуры = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(СтруктураДанные.Организация, СтруктураДанные.Номенклатура);
	СтруктураДанные.Вставить("СчетУчета", СчетаУчетаНоменклатуры.СчетУчета);
	
	// Ставка НСП.
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура.СтавкаНСП) Тогда 
		СтруктураДанные.Вставить("СтавкаНСП", СтруктураДанные.Номенклатура.СтавкаНСП);
	КонецЕсли;	

	// Цены 
	СтруктураДанные.Вставить("ТипЦен", СтруктураДанные.ДоговорКонтрагента.ТипЦен);
	Цена = Ценообразование.ПолучитьЦенуНоменклатуры(СтруктураДанные);
	// Цены документов
	Если Цена = 0 Тогда
		СтруктураДанные.Вставить("ЗначениеСтавкиНДС", УчетНДС.ПолучитьСтавкуНДС(СтруктураДанные.Дата, СтруктураДанные.СтавкаНДС));
		СтруктураДанные.Вставить("ЗначениеСтавкиНСП", УчетНДС.ПолучитьСтавкуНСП(СтруктураДанные.Дата, СтруктураДанные.Организация, СтруктураДанные.СтавкаНСП));
		СтруктураДанные.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
		Цена = Ценообразование.ПолучитьЦенуПоДокументам(СтруктураДанные);
	КонецЕсли;	
	СтруктураДанные.Вставить("Цена", Цена);
	
	Если СтруктураДанные.Свойство("ВидСкидкиНаценки") 
		И ЗначениеЗаполнено(СтруктураДанные.ВидСкидкиНаценки) Тогда
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", СтруктураДанные.ВидСкидкиНаценки.Процент);
	Иначе	
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", 0);
	КонецЕсли;
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Производит расчет суммы скидки/наценки
//
&НаКлиенте
Процедура ВидСкидкиПриИзмененииНаКлиенте()
	
	// Товары
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Товары");
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл 
		Если НЕ ЗначениеЗаполнено(Объект.ВидСкидкиНаценки) Тогда 
			Объект.ПроцентСкидкиНаценки = 0;
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0;
		ИначеЕсли Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.ПроцентОбщий") Тогда 
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Объект.ПроцентСкидкиНаценки;
		ИначеЕсли Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.ПроцентПоСтроке") Тогда 
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Объект.ПроцентСкидкиНаценки;
		ИначеЕсли Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда 
			Объект.ПроцентСкидкиНаценки = 0;
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0;
		КонецЕсли;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		
		Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		КонецЕсли;	
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, НЕ Объект.СуммаВключаетНалоги);
	КонецЦикла;
	
	// Услуги
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Услуги");
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл 
		Если НЕ ЗначениеЗаполнено(Объект.ВидСкидкиНаценки) Тогда 
			Объект.ПроцентСкидкиНаценки = 0;
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0;
		ИначеЕсли Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.ПроцентОбщий") Тогда 
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Объект.ПроцентСкидкиНаценки;
		ИначеЕсли Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.ПроцентПоСтроке") Тогда 
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Объект.ПроцентСкидкиНаценки;
		ИначеЕсли Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда 
			Объект.ПроцентСкидкиНаценки = 0;
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0;
		КонецЕсли;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		
		Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		КонецЕсли;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, НЕ Объект.СуммаВключаетНалоги);
	КонецЦикла;
	
	// ОС
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("ОС");
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл 
		Если НЕ ЗначениеЗаполнено(Объект.ВидСкидкиНаценки) Тогда 
			Объект.ПроцентСкидкиНаценки = 0;
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0;
		ИначеЕсли Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.ПроцентОбщий") Тогда 
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Объект.ПроцентСкидкиНаценки;
		ИначеЕсли Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.ПроцентПоСтроке") Тогда 
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Объект.ПроцентСкидкиНаценки;
		ИначеЕсли Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда 
			Объект.ПроцентСкидкиНаценки = 0;
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0;
		КонецЕсли;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		
		Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		КонецЕсли;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, НЕ Объект.СуммаВключаетНалоги);
	КонецЦикла;
	
	ОбновитьПодвалФормы();
	
КонецПроцедуры // ВидСкидкиПриИзмененииНаКлиенте()

// Процедура рассчитывает итоги для подвала формы.
//
&НаКлиенте
Процедура ОбновитьПодвалФормы()
	
	ИтогВсего = Объект.Товары.Итог("Всего") + Объект.Услуги.Итог("Всего") + Объект.ОС.Итог("Всего");
	ИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС") + Объект.ОС.Итог("СуммаНДС");
	ИтогСуммаНСП = Объект.Товары.Итог("СуммаНСП") + Объект.Услуги.Итог("СуммаНСП") + Объект.ОС.Итог("СуммаНСП");
	
	ИтогСуммаСкидки = Объект.Товары.Итог("СуммаСкидки") + Объект.Услуги.Итог("СуммаСкидки") + Объект.ОС.Итог("СуммаСкидки");
	ИтогСуммаКОплате = ИтогВсего - ИтогСуммаСкидки;
	
КонецПроцедуры // ОбновитьПодвалФормы()

// Процедура - обработчик подбора товаров.
//
&НаСервере
Процедура ПолучитьТоварыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти)
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	СтавкаНДС = ?(ДанныеУчетнойПолитики.ПлательщикНДС, 
		Объект.СтавкаНДС, 
		ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка"));
					
	СтавкаНСП = ?(ДанныеУчетнойПолитики.ПлательщикНСП И ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.КР"), 
		?(ИмяТабличнойЧасти = "Товары", ДанныеУчетнойПолитики.СтавкаНСПРеализацииТовары, ДанныеУчетнойПолитики.СтавкаНСПРеализацииУслуги), 
		ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка"));
					
	ПараметрыРасчета = ПодготовитьПараметрыРасчета(ИмяТабличнойЧасти);					
	
	Для Каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", СтрокаЗагрузки.Номенклатура));
		
		Если НайденныеСтроки.Количество() > 0 Тогда 
			Продолжить;
		КонецЕсли;	
		
		СтрокаТабличнойЧасти = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаЗагрузки);
		
		СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("Дата", ДатаДокумента);
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("Контрагент", Объект.Контрагент);
		СтруктураДанные.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
		СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНалоги", Объект.СуммаВключаетНалоги);
		СтруктураДанные.Вставить("СтавкаНДС", СтавкаНДС);
		СтруктураДанные.Вставить("СтавкаНСП", СтавкаНСП);
		СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанные.Вставить("ТочностьЦены", Объект.ТочностьЦены);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
		СтрокаТабличнойЧасти.СтавкаНСП = СтруктураДанные.СтавкаНСП;
		
		// Расчет суммы
		//Если Объект.СуммаВключаетНалоги Тогда
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		//Иначе		
		//	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
		//КонецЕсли;
		
		Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		КонецЕсли;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, НЕ Объект.СуммаВключаетНалоги);
	КонецЦикла;
КонецПроцедуры // ПолучитьТоварыИзХранилища()

// Процедура получает список ОС из временного хранилища
//
&НаСервере
Процедура ПолучитьОСИзХранилища(АдресЗапасовВХранилище)
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	МассивОсновныхСредств = Новый Массив;
	
	Для Каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		НайденныеСтроки = Объект.ОС.НайтиСтроки(Новый Структура("ОсновноеСредство", СтрокаЗагрузки.ОсновноеСредство));
		
		Если НайденныеСтроки.Количество() > 0 Тогда 
			Продолжить;
		КонецЕсли;	
		
		СтрокаТабличнойЧасти = Объект.ОС.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаЗагрузки);
		//СтрокаТабличнойЧасти.Цена 	= СтрокаЗагрузки.Стоимость / СтрокаЗагрузки.Количество;
		//СтрокаТабличнойЧасти.Сумма 	= СтрокаЗагрузки.Стоимость;
		
		Если Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.ПроцентОбщий") Тогда 
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Объект.ПроцентСкидкиНаценки;
		КонецЕсли;	
			
		МассивОсновныхСредств.Добавить(СтрокаТабличнойЧасти.ОсновноеСредство);
	КонецЦикла;
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

// Подготовка параметров для расчетов
//
// Параметры:
//	ИмяТабличнойЧасти - Строка - наименование табличной части
//	СчитатьОтДохода - Булево - признак того, что расчет необходимо делать от реквизита "Доход"
//
// Возвращаемое значение:
//	Структура - разделенные данные URI
//		*Период - Дата - дата документа
//		*Организация - СправочникСсылка.Организации - организация документа
//		*ПризнакСтраныЕАЭС - Булево - признак страны ЕАЭС или нет
//		*ПризнакСтраныИмпортЭкспорт - Булево - признак страны ИмпортЭкспорт или нет
//		*СуммаВключаетНалоги - Булево - сумма включает налоги или нет
//		*БезналичныйРасчет - Булево - признак безначличного расчета
//		*СчитатьОтДохода - Булево - признак того, что расчет необходимо делать от реквизита "Доход"
//		*ИмяТабличнойЧасти - Строка - наименование табличной части
//		*Точность - Булево - точность цены (количество знаков цены после запятой)
//		*СтавкаНДС - СправочникСсылка.СтавкиНДС - ставка НДС
//
&НаСервере
Функция ПодготовитьПараметрыРасчета(ИмяТабличнойЧасти)

	ПараметрыРасчета = ОбработкаТабличныхЧастейКлиентСервер.ШаблонПараметровРасчета();
	
	ПараметрыРасчета.Период = ДатаДокумента;
	ПараметрыРасчета.Организация = Объект.Организация;
	ПараметрыРасчета.БезналичныйРасчет = Объект.БезналичныйРасчет;
	ПараметрыРасчета.СуммаВключаетНалоги = Объект.СуммаВключаетНалоги;
	ПараметрыРасчета.ИмяТабличнойЧасти = ИмяТабличнойЧасти;
	ПараметрыРасчета.СтавкаНДС = ?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, Справочники.СтавкиНДС.ПустаяСсылка());
	ПараметрыРасчета.СтавкаНСП = ?(ДанныеУчетнойПолитики.ПлательщикНСП, ?(ИмяТабличнойЧасти = "Услуги",Объект.СтавкаНСПУслуги,Объект.СтавкаНСП), Справочники.СтавкиНСП.ПустаяСсылка());
	
	Возврат ПараметрыРасчета;
КонецФункции

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла
&НаСервере
Процедура ЗагрузитьТоварыИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
    ТоварыДобавлены = Ложь;
	
	СтавкаНДС = ?(ДанныеУчетнойПолитики.ПлательщикНДС, 
					Объект.СтавкаНДС, 
					ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка"));
					
	СтавкаНСП = ?(ДанныеУчетнойПолитики.ПлательщикНСП И ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.КР"), 
		ДанныеУчетнойПолитики.СтавкаНСПРеализацииТовары, 
		ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка"));
	
	Для каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
        Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда 
            Продолжить;
        КонецЕсли;
        НоваяСтрокаТабличнойЧасти = Объект.Товары.Добавить();
        НоваяСтрокаТабличнойЧасти.Номенклатура 	= СтрокаТаблицы.Номенклатура;
        НоваяСтрокаТабличнойЧасти.Количество 	= СтрокаТаблицы.Количество;
		НоваяСтрокаТабличнойЧасти.Цена			= СтрокаТаблицы.Цена;
		НоваяСтрокаТабличнойЧасти.Сумма 	 	= СтрокаТаблицы.Сумма;
		НоваяСтрокаТабличнойЧасти.СуммаНДС 	 	= СтрокаТаблицы.СуммаНДС;
		НоваяСтрокаТабличнойЧасти.СуммаНСП 	 	= СтрокаТаблицы.СуммаНСП;
		
		// Счета учета
		СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("Номенклатура", СтрокаТаблицы.Номенклатура);
		СтруктураДанные.Вставить("ТочностьЦены", Объект.ТочностьЦены);
		СтруктураДанные.Вставить("Дата", ДатаДокумента);
		СтруктураДанные.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
		СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СтавкаНДС", СтавкаНДС);
		СтруктураДанные.Вставить("СтавкаНСП", СтавкаНСП);

		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		НоваяСтрокаТабличнойЧасти.Цена = ?(СтруктураДанные.Цена = 0, НоваяСтрокаТабличнойЧасти.Цена, СтруктураДанные.Цена);

		ТоварыДобавлены = Истина;
    КонецЦикла;
	
	Если ТоварыДобавлены Тогда
        Модифицированность = Истина;
    КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

// Процедура - Установить пиктограмму комментария.
//
&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

// ПодключаемоеОборудование

// Процедура - Получены штрихкоды
//
// Параметры:
//  ДанныеШтрихкодов	 - Структура/Массив - В зависимости от точки вызова передается структура (обработка сканера) или массив (обработка ТСД)
//  ИмяТабличнойЧасти	 - Строка	 - Имя табличной части для загрузки
//
&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрихкодов, ИмяТабличнойЧасти) Экспорт
	
	Модифицированность = Истина;
	
	НеДобавленныеШтрихкоды = ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов, ИмяТабличнойЧасти);
	
	// Неизвестные штрихкоды.
	Если НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды.Количество() > 0 Тогда
		Для Каждого СтруктураДанные Из НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды Цикл 
			СтрокаСообщения = СтрШаблон(НСтр("ru = 'Данные по штрихкоду не найдены: %1'"), СтруктураДанные.Штрихкод);
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		КонецЦикла;	
	// Штрихкоды некорректного типа.
	ИначеЕсли НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа.Количество() > 0 Тогда 
		Для Каждого СтруктураДанные Из НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа Цикл 
			СтрокаСообщения = СтрШаблон(НСтр("ru = 'Найденная по штрихкоду %1 номенклатура: ""%2"", не подходит для этой табличной части'"),
				СтруктураДанные.ТекШтрихкод, СтруктураДанные.Номенклатура);
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаСервереБезКонтекста
Функция ПолучитьДанныеПоШтрихкоду(ТекШтрихкод)
	
	Номенклатура = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьНоменклатуруПоШтрихкоду(ТекШтрихкод);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", Номенклатура);
	СтруктураДанные.Вставить("ТипНоменклатурыУслуга", ?(ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура"), Номенклатура.Услуга, Ложь));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеПоШтрихкоду()

// Функция - Заполнить по данным штрихкодов
//
// Параметры:
//  ДанныеШтрихкодов		 - 	 - Структура/Массив	 - В зависимости от точки вызова передается структура (обработка сканера) или массив (обработка ТСД)
//  ИмяТабличнойЧасти	 - Строка	 - Имя табличной части для загрузки
// 
// Возвращаемое значение:
//  Структура - Массивы неизвестных штрих кодов
//
&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов, ИмяТабличнойЧасти) 
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	Для каждого ТекШтрихкод Из МассивШтрихкодов Цикл
		СтруктураДанные = ПолучитьДанныеПоШтрихкоду(ТекШтрихкод);
		
		Если НЕ ЗначениеЗаполнено(СтруктураДанные.Номенклатура) Тогда 
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли ИмяТабличнойЧасти = "Товары"
			И СтруктураДанные.ТипНоменклатурыУслуга Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("ТекШтрихкод, Номенклатура", ТекШтрихкод, СтруктураДанные.Номенклатура));
		ИначеЕсли ИмяТабличнойЧасти = "Услуги"
			И НЕ СтруктураДанные.ТипНоменклатурыУслуга Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("ТекШтрихкод, Номенклатура", ТекШтрихкод, СтруктураДанные.Номенклатура));
		Иначе 
			СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти].Добавить();
			СтрокаТабличнойЧасти.Номенклатура = СтруктураДанные.Номенклатура;
			СтрокаТабличнойЧасти.Количество = ТекШтрихкод.Количество;
			
			ОбработатьИзменениеНоменклатуры(СтрокаТабличнойЧасти, ИмяТабличнойЧасти);
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа",
		НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа);

КонецФункции // ЗаполнитьПоДаннымШтрихкодов()
// Конец ПодключаемоеОборудование

// Получает наименование Услуги
//
&НаСервереБезКонтекста
Функция НаименованиеУслуги(Номенклатура)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "НаименованиеПолное");
КонецФункции

// Процедура заполняет список выбора Точность цены
//
&НаСервере
Процедура ЗаполнитьСписокВыбораТочностьЦены()

	Элементы.ТочностьЦены.СписокВыбора.Очистить();

	ЗначенияТочностиЦены = Ценообразование.ЗначенияТочностиЦены();
	Для Каждого ЗначениеТочностиЦены Из ЗначенияТочностиЦены Цикл 
		Элементы.ТочностьЦены.СписокВыбора.Добавить(ЗначениеТочностиЦены.Значение, ЗначениеТочностиЦены.Представление);
	КонецЦикла;	

КонецПроцедуры // ЗаполнитьСписокВыбораТочностьЦены()

// Процедура устанавливает формат и формат редактирования элементов "Цена" в ТЧ "Товары" и "Услуги"
//
&НаКлиенте
Процедура УстановитьФорматЦены()

	ФорматЦены = ЦенообразованиеКлиент.ФорматЦены(Объект.ТочностьЦены);
	
	Элементы.ТоварыЦена.ФорматРедактирования = ФорматЦены;
	Элементы.ТоварыЦена.Формат = ФорматЦены;

	Элементы.УслугиЦена.ФорматРедактирования = ФорматЦены;
	Элементы.УслугиЦена.Формат = ФорматЦены;
	
	Элементы.ОСЦена.ФорматРедактирования = ФорматЦены;
	Элементы.ОСЦена.Формат = ФорматЦены;

	Элементы.Товары.Обновить();
	Элементы.Услуги.Обновить();
	Элементы.ОС.Обновить();
	
КонецПроцедуры

// Процедура - При изменении поля "Ставка НСП"
//
&НаКлиенте
Процедура ПриИзмененииСтавкиНСП()
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		СтрокаТабличнойЧасти.СтавкаНСП = Объект.СтавкаНСП;
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
		СтрокаТабличнойЧасти.СтавкаНСП = Объект.СтавкаНСПУслуги;
	КонецЦикла;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Товары");
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(Объект, ПараметрыРасчета);
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Услуги");
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(Объект, ПараметрыРасчета);
		
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	ОбновитьПодвалФормы();
	
КонецПроцедуры	

// Процедура - При изменении поля "Ставка НСП услуги"
//
&НаКлиенте
Процедура ПриИзмененииСтавкиНСПУслуги()
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл
		СтрокаТабличнойЧасти.СтавкаНСП = Объект.СтавкаНСПУслуги;
	КонецЦикла;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("ОС");	
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(Объект, ПараметрыРасчета);
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	ОбновитьПодвалФормы();
	
КонецПроцедуры	

#КонецОбласти

#Область КопированиеСтрокТабличныхЧастей

&НаКлиенте
Процедура ТоварыКопироватьСтроки(Команда)
	
	КопироватьСтроки("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВставитьСтроки(Команда)
	
	ВставитьСтроки("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКопироватьСтроки(Команда)
	
	КопироватьСтроки("Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиВставитьСтроки(Команда)
	
	ВставитьСтроки("Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура ОСКопироватьСтроки(Команда)
	
	КопироватьСтроки("ОС");
	
КонецПроцедуры

&НаКлиенте
Процедура ОСВставитьСтроки(Команда)
	
	ВставитьСтроки("ОС");
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСтроки(ИмяТЧ)
	
	Если КопированиеТабличнойЧастиКлиент.МожноКопироватьСтроки(Объект[ИмяТЧ], Элементы[ИмяТЧ].ТекущиеДанные) Тогда
		КоличествоСкопированных = 0;
		КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных);
		КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСкопированных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(ИмяТЧ)
	
	КоличествоСкопированных = 0;
	КоличествоВставленных = 0;
	ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных);
	КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных)
	
	КопированиеТабличнойЧастиСервер.Копировать(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки, КоличествоСкопированных);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных)
	
	КопированиеТабличнойЧастиСервер.Вставить(Объект, ИмяТЧ, Элементы, КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

#КонецОбласти

#Область РегулярныеСчета

&НаКлиенте
Процедура ОткрытьПравилоПовторения()
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПравила = Новый Структура;
	ПараметрыПравила.Вставить("Шаблон",      Объект.Ссылка);
	ПараметрыПравила.Вставить("ДатаШаблона", Объект.Дата);
	
	Если ЗначениеЗаполнено(ПравилоПовторения) Тогда
		ПараметрыПравила.Вставить("Ключ", ПравилоПовторения);
	Иначе
		
		ЗначенияЗаполнения = Новый Структура;
		
		ЗначенияЗаполнения.Вставить("Выполняется",   Истина);
		ЗначенияЗаполнения.Вставить("Периодичность", ПредопределенноеЗначение("Перечисление.Периодичность.Месяц"));
		
		ПараметрыПравила.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ПравилаРегулярныхСчетовПокупателям.ФормаОбъекта", ПараметрыПравила, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПравилоПовторенияИНадпись()
	
	ПравилоПовторения = Справочники.ПравилаРегулярныхСчетовПокупателям.ПравилоПоСчету(Объект.Ссылка);
	
	НадписьПовторение = НадписьПовторение(ПравилоПовторения, Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НадписьПовторение(ПравилоПовторения, НовыйДокумент)
	
	Если ЗначениеЗаполнено(ПравилоПовторения)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПравилоПовторения, "Выполняется") Тогда
		
		ДатаСледующего = Справочники.ПравилаРегулярныхСчетовПокупателям.ДатаСледующего(ПравилоПовторения);
		
		Если НовыйДокумент Тогда
			ДатаСледующего = ИнтерфейсыВзаимодействияБРОКлиентСервер.ДобавитьПериод(ДатаСледующего,
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПравилоПовторения, "Периодичность"));
		КонецЕсли;
		
		НадписьПовторение = СтрШаблон(НСтр("ru = 'Следующий %1'"), Формат(ДатаСледующего, "ДЛФ=D"));
		
	Иначе
		НадписьПовторение = НСтр("ru = 'Повторять?'");
	КонецЕсли;
	
	Возврат НадписьПовторение;
	
КонецФункции

&НаКлиенте
Процедура ВопросРедактированиеПравилаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПараметрыЗаписи = Новый Структура("ОткрытьПравилоПовторения");
		
		Если Записать(ПараметрыЗаписи) Тогда
			
			ОткрытьПравилоПовторения();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.РаботаСФайлами

//@skip-warning
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)

	РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);

КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
    РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
    РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент,
		ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
    РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент,
		ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры

// Конец СтандартныеПодсистемы.РаботаСФайлами

#КонецОбласти
