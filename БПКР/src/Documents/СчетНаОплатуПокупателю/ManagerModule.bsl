#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Процедура - Заполнить дату оплаты
//
// Параметры:
//  ДатаОплаты			 	- Дата	 - Дата оплаты
//  СчетНаОплатуПокупателю	- ДокументСсылка.СчетНаОплатуПокупателю - Ссылка на документ счет на оплату для которого нужно заполнить дату оплаты
//
Процедура ЗаполнитьДатуОплаты(ДатаОплаты, СчетНаОплатуПокупателю) Экспорт 
	ДокументОбъект = СчетНаОплатуПокупателю.ПолучитьОбъект();
	ДокументОбъект.ДатаОплаты = ДатаОплаты;
	
	Попытка
		ДокументОбъект.Записать();	
	Исключение
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить запись документа по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
	КонецПопытки;
КонецПроцедуры // ЗаполнитьДатуОплаты()

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла 
 
// Устанавливает параметры загрузки.
//
//@skip-warning
Процедура УстановитьПараметрыЗагрузкиИзФайлаВТЧ(Параметры) Экспорт
	
КонецПроцедуры

// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
//
// Параметры:
//   АдресЗагружаемыхДанных    - Строка - Адрес временного хранилища с таблицей значений, в которой
//                                        находятся загруженные данные из файла. Состав колонок:
//     * Идентификатор - Число - Порядковый номер строки;
//     * остальные колонки соответствуют колонкам макета ЗагрузкаИзФайла.
//   АдресТаблицыСопоставления - Строка - Адрес временного хранилища с пустой таблицей значений,
//                                        являющейся копией табличной части документа, 
//                                        которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
//   СписокНеоднозначностей - ТаблицаЗначений - Список неоднозначных значений, для которых в ИБ имеется несколько
//                                              подходящих вариантов.
//     * Колонка       - Строка - Имя колонки, в которой была обнаружена неоднозначность;
//     * Идентификатор - Число  - Идентификатор строки, в которой была обнаружена неоднозначность.
//   ПолноеИмяТабличнойЧасти   - Строка - Полное имя табличной части, в которую загружаются данные.
//   ДополнительныеПараметры   - ЛюбойТип - Любые дополнительные сведения.
//
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ПолноеИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт
	
	Товары = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления);
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
	
	ТаблицаНоменклатура = ЗагрузкаДанныхИзФайлаПереопределяемыйБП.СопоставитьНоменклатуруДоПервогоСовпадения(ЗагружаемыеДанные); 
	
	Для Каждого СтрокаТаблицы Из ЗагружаемыеДанные Цикл
		
		СтрокаТабличнойЧасти = Товары.Добавить();
		СтрокаТабличнойЧасти.Идентификатор = СтрокаТаблицы.Идентификатор;
		СтрокаТабличнойЧасти.Количество = СтрокаТаблицы.Количество;
		СтрокаТабличнойЧасти.Цена = СтрокаТаблицы.Цена;
		СтрокаТабличнойЧасти.Сумма = СтрокаТаблицы.Сумма;
		СтрокаТабличнойЧасти.СуммаНДС = СтрокаТаблицы.СуммаНДС;
		СтрокаТабличнойЧасти.СуммаНСП = СтрокаТаблицы.СуммаНСП;
				
		СтрокаНоменклатура = ТаблицаНоменклатура.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
		Если СтрокаНоменклатура <> Неопределено Тогда 
			Если СтрокаНоменклатура.Количество = 1 Тогда 
				СтрокаТабличнойЧасти.Номенклатура = СтрокаНоменклатура.Ссылка;
			ИначеЕсли СтрокаНоменклатура.Количество > 1 Тогда
				ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
				ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор; 
				ЗаписьОНеоднозначности.Колонка = "Номенклатура";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Товары, АдресТаблицыСопоставления);
	
КонецПроцедуры

// Возвращает список подходящих объектов ИБ для неоднозначного значения ячейки.
// 
// Параметры:
//   ПолноеИмяТабличнойЧасти  - Строка - Полное имя табличной части, в которую загружаются данные.
//  ИмяКолонки                - Строка - Имя колонки, в который возникла неоднозначность.
//  СписокНеоднозначностей    - Массив - Массив для заполнения с неоднозначными данными.
//  ЗагружаемыеЗначенияСтрока - Строка - Загружаемые данные на основании которых возникла неоднозначность.
//  ДополнительныеПараметры   - ЛюбойТип - Любые дополнительные сведения.
//
Процедура ЗаполнитьСписокНеоднозначностей(ПолноеИмяТабличнойЧасти, СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока, ДополнительныеПараметры) Экспорт
	
	Если ИмяКолонки = "Номенклатура" Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Номенклатура.Ссылка
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.Номенклатура);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СписокНеоднозначностей.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла
 
#КонецОбласти
	
#Область ВерсионированиеОбъектов

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//@skip-warning
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область ИнтерфейсПечати

// Функция формирует табличный документ с печатной формой СчетНаОплату
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьСчетНаОплату(МассивОбъектов, ОбъектыПечати)
	Ошибки = Неопределено;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СчетНаОплатуПокупателю.Ссылка КАК Ссылка,
		|	СчетНаОплатуПокупателю.Номер КАК Номер,
		|	СчетНаОплатуПокупателю.Дата КАК Дата,
		|	СчетНаОплатуПокупателю.ВалютаДокумента КАК ВалютаДокумента,
		|	СчетНаОплатуПокупателю.Организация КАК Организация,
		|	СчетНаОплатуПокупателю.Организация.НаименованиеПолное КАК ОрганизацияПредставление,
		|	СчетНаОплатуПокупателю.Организация.ФайлЛоготип КАК ФайлЛоготип,
		|	СчетНаОплатуПокупателю.Организация.ИНН КАК ОрганизацияИНН,
		|	СчетНаОплатуПокупателю.БанковскийСчет.Банк.Наименование КАК ОрганизацияБанк,
		|	СчетНаОплатуПокупателю.БанковскийСчет.НомерСчета КАК ОрганизацияБанковскийСчет,
		|	СчетНаОплатуПокупателю.БанковскийСчет.Банк.Код КАК ОрганизацияБикБанка,
		|	СчетНаОплатуПокупателю.БанковскийСчет.Банк.SWIFT КАК ОрганизацияSWIFTБанка,
		|	СчетНаОплатуПокупателю.Контрагент КАК Контрагент,
		|	СчетНаОплатуПокупателю.Контрагент.НаименованиеПолное КАК КонтрагентПредставление,
		|	СчетНаОплатуПокупателю.Контрагент.ИНН КАК КонтрагентИНН,
		|	СчетНаОплатуПокупателю.Контрагент.ОсновнойБанковскийСчет.Банк.Наименование КАК КонтрагентБанк,
		|	СчетНаОплатуПокупателю.Контрагент.ОсновнойБанковскийСчет.НомерСчета КАК КонтрагентБанковскийСчет,
		|	СчетНаОплатуПокупателю.Контрагент.ОсновнойБанковскийСчет.Банк.Код КАК КонтрагентБикБанковскогоСчета,
		|	СчетНаОплатуПокупателю.Комментарий КАК Комментарий,
		|	СчетНаОплатуПокупателю.ТочностьЦены КАК ТочностьЦены,      
		|	СчетНаОплатуПокупателю.ВыводитьБанкКорреспондент КАК ВыводитьБанкКорреспондент,      
		|	СчетНаОплатуПокупателю.БанковскийСчет.БанкКорреспондент.Наименование КАК БанкКорреспондентНаименование,
		|	СчетНаОплатуПокупателю.БанковскийСчет.БанкКорреспондент.Адрес КАК БанкКорреспондентАдрес,
		|	СчетНаОплатуПокупателю.БанковскийСчет.БанкКорреспондент.SWIFT КАК БанкКорреспондентSWIFT,
		|	СчетНаОплатуПокупателю.БанковскийСчет.БанкКорреспондент.КоррСчет КАК БанкКорреспондентКоррСчет,
		|	СчетНаОплатуПокупателю.Товары.(
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура КАК Номенклатура,
		|		Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
		|		ПРЕДСТАВЛЕНИЕ(СчетНаОплатуПокупателю.Товары.Номенклатура.ЕдиницаИзмерения) КАК ЕИ,
		|		Количество КАК Количество,
		|		Цена КАК Цена,
		|		Сумма КАК Сумма,
		|		СуммаНДС КАК СуммаНДС,
		|		СуммаНСП КАК СуммаНСП,
		|		СуммаСкидки КАК СуммаСкидки,
		|		Всего КАК Всего
		|	) КАК Товары,
		|	СчетНаОплатуПокупателю.Услуги.(
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура КАК Номенклатура,
		|		ВЫБОР
		|			КОГДА СчетНаОплатуПокупателю.Услуги.ДополнительныеСведения = """"
		|				ТОГДА СчетНаОплатуПокупателю.Услуги.Номенклатура.НаименованиеПолное
		|			ИНАЧЕ СчетНаОплатуПокупателю.Услуги.ДополнительныеСведения
		|		КОНЕЦ КАК НоменклатураПредставление,
		|		ПРЕДСТАВЛЕНИЕ(СчетНаОплатуПокупателю.Услуги.Номенклатура.ЕдиницаИзмерения) КАК ЕИ,
		|		Количество КАК Количество,
		|		Цена КАК Цена,
		|		Сумма КАК Сумма,
		|		СуммаНДС КАК СуммаНДС,
		|		СуммаНСП КАК СуммаНСП,
		|		СуммаСкидки КАК СуммаСкидки,
		|		Всего КАК Всего
		|	) КАК Услуги,
		|	СчетНаОплатуПокупателю.ОС.(
		|		НомерСтроки КАК НомерСтроки,
		|		ОсновноеСредство КАК Номенклатура,
		|		ОсновноеСредство.НаименованиеПолное КАК НоменклатураПредставление,
		|		НЕОПРЕДЕЛЕНО КАК ЕИ,
		|		Количество КАК Количество,
		|		Цена КАК Цена,
		|		Сумма КАК Сумма,
		|		СуммаНДС КАК СуммаНДС,
		|		СуммаНСП КАК СуммаНСП,
		|		СуммаСкидки КАК СуммаСкидки,
		|		Всего КАК Всего
		|	) КАК ОС
		|ИЗ
		|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
		|ГДЕ
		|	СчетНаОплатуПокупателю.Ссылка В(&СписокДокументов)";		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокДокументов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "СчетНаОплатуПокупателю_СчетНаОплату";

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СчетНаОплатуПокупателю.ПФ_MXL_СчетНаОплату");
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Пока Шапка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Подготовка данных
		ДанныеПечати = Новый Структура;
		
		// Сведения об организации
		АдресОрганизации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Шапка.Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Шапка.Дата); 
		ТелефонОрганизации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Шапка.Организация, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, Шапка.Дата);
		
		ДанныеПечати.Вставить("ОрганизацияПредставление", "" + Шапка.ОрганизацияПредставление 
		+ ?(ЗначениеЗаполнено(Шапка.ОрганизацияИНН),", " + "ИНН " + Шапка.ОрганизацияИНН, "")               
		+ ?(ЗначениеЗаполнено(АдресОрганизации),", " + АдресОрганизации, "")                       
		+ ?(ЗначениеЗаполнено(ТелефонОрганизации),", " + "тел: " + ТелефонОрганизации, "")
		+ ?(ЗначениеЗаполнено(Шапка.ОрганизацияБанковскийСчет),", " + "р/с " + Шапка.ОрганизацияБанковскийСчет, "")
		+ ?(ЗначениеЗаполнено(Шапка.ОрганизацияБанк),", " + Шапка.ОрганизацияБанк, "")
		+ ?(ЗначениеЗаполнено(Шапка.ОрганизацияБикБанка),", " + "БИК " + Шапка.ОрганизацияБикБанка, "")
		+ ?(ЗначениеЗаполнено(Шапка.ОрганизацияSWIFTБанка) И НЕ Шапка.ВалютаДокумента = ВалютаРегламентированногоУчета,", " + "SWIFT " + Шапка.ОрганизацияSWIFTБанка, ""));
		
		// Сведения о Банке-Корреспонденте
		Если Шапка.ВыводитьБанкКорреспондент И ЗначениеЗаполнено(Шапка.БанкКорреспондентНаименование)Тогда 
			ДанныеПечати.Вставить("БанкКорреспондент","Банк-корреспондент:"+Символы.ПС + Шапка.БанкКорреспондентНаименование
			+ ?(ЗначениеЗаполнено(Шапка.БанкКорреспондентАдрес),", " + "адрес " + Шапка.БанкКорреспондентАдрес, "")
			+ ?(ЗначениеЗаполнено(Шапка.БанкКорреспондентSWIFT),", " + "SWIFT " + Шапка.БанкКорреспондентSWIFT, "")
			+ ?(ЗначениеЗаполнено(Шапка.БанкКорреспондентКоррСчет),", " + "Корр.счет " + Шапка.БанкКорреспондентКоррСчет, ""));
		КонецЕсли;
		
		// Сведения о контрагенте
		АдресКонтрагента = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Шапка.Контрагент, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента); 
		ТелефонКонтрагента = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Шапка.Контрагент, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента); 
		
		ДанныеПечати.Вставить("ПолучательПредставление", "" + Шапка.КонтрагентПредставление 
		+ ?(ЗначениеЗаполнено(Шапка.КонтрагентИНН),", " + "ИНН " + Шапка.КонтрагентИНН, "") 
		+ ?(ЗначениеЗаполнено(АдресКонтрагента),", " + АдресКонтрагента, "")
		+ ?(ЗначениеЗаполнено(ТелефонКонтрагента),", " + "тел: " + ТелефонКонтрагента, "")
		+ ?(ЗначениеЗаполнено(Шапка.КонтрагентБанковскийСчет),", " + "р/с " + Шапка.КонтрагентБанковскийСчет, "")
		+ ?(ЗначениеЗаполнено(Шапка.КонтрагентБанк),", " + Шапка.КонтрагентБанк, "")
		+ ?(ЗначениеЗаполнено(Шапка.КонтрагентБикБанковскогоСчета),", " + "БИК " + Шапка.КонтрагентБикБанковскогоСчета, ""));		
		
		ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, НСтр("ru = 'Счет на оплату'"));
		ДанныеПечати.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		ДанныеПечати.Вставить("ФайлЛоготип", Шапка.ФайлЛоготип);
		ДанныеПечати.Вставить("Комментарий", Шапка.Комментарий);

		ТаблицаТовары 	= Шапка.Товары.Выгрузить();
		ТаблицаУслуги 	= Шапка.Услуги.Выгрузить();
		ТаблицаОС 		= Шапка.ОС.Выгрузить();
		
		Всего = ТаблицаТовары.Итог("Всего") + ТаблицаУслуги.Итог("Всего") + ТаблицаОС.Итог("Всего");
		ВсегоНДС = ТаблицаТовары.Итог("СуммаНДС") + ТаблицаУслуги.Итог("СуммаНДС") + ТаблицаОС.Итог("СуммаНДС");
		ВсегоНСП = ТаблицаТовары.Итог("СуммаНСП") + ТаблицаУслуги.Итог("СуммаНСП") + ТаблицаОС.Итог("СуммаНСП");
		КоличествоНаименований = ТаблицаТовары.Количество() + ТаблицаУслуги.Количество() + ТаблицаОС.Количество();		
		
		ВсегоСкидка = ТаблицаТовары.Итог("СуммаСкидки") + ТаблицаУслуги.Итог("СуммаСкидки") + ТаблицаОС.Итог("СуммаСкидки");
		ДанныеПечати.Вставить("ВсегоСкидка", ВсегоСкидка);

		ЕстьСкидка = ВсегоСкидка <> 0;
		ИтогоКОплате = Всего - ВсегоСкидка;
		
		ДанныеПечати.Вставить("ИтогоКОплате", ИтогоКОплате);
		
		ДанныеПечати.Вставить("Всего", Всего);
		ДанныеПечати.Вставить("ВсегоНДС", ВсегоНДС);
		ДанныеПечати.Вставить("ВсегоНСП", ВсегоНСП);
		ДанныеПечати.Вставить("ИтоговаяСтрока", 
			СтрШаблон(НСтр("ru = 'Всего наименований %1, на сумму %2 %3'"), 
						Формат(КоличествоНаименований, "ЧН=0; ЧГ=0"), 
						Формат(ДанныеПечати.ИтогоКОплате, "ЧЦ=15; ЧДЦ=2"),
						Шапка.ВалютаДокумента));
		ДанныеПечати.Вставить("СуммаПрописью", БухгалтерскийУчетСервер.СформироватьСуммуПрописью(ДанныеПечати.ИтогоКОплате, Шапка.ВалютаДокумента));

		// Подписи.
		РасшифровкаПодписиРуководителя = "";
		РасшифровкаПодписиГлавногоБухгалтера = "";
		ОтветственныеЛица = БухгалтерскийУчетСервер.ОтветственныеЛицаОрганизацийРуководители(Шапка.Организация, Шапка.Дата);
		БухгалтерскийУчетСервер.ФамилияИнициалыПоНаименованию(РасшифровкаПодписиРуководителя, ОтветственныеЛица.Руководитель);
		БухгалтерскийУчетСервер.ФамилияИнициалыПоНаименованию(РасшифровкаПодписиГлавногоБухгалтера, ОтветственныеЛица.ГлавныйБухгалтер);
		
		ДанныеПечати.Вставить("РасшифровкаПодписиРуководителя", РасшифровкаПодписиРуководителя);
		ДанныеПечати.Вставить("РасшифровкаПодписиГлавногоБухгалтера", РасшифровкаПодписиГлавногоБухгалтера);
		
		// Области
		МассивОбластейМакета = Новый Массив;
		
		// Печать с логотипом.
		Если ЗначениеЗаполнено(Шапка.ФайлЛоготип) Тогда 
			МассивОбластейМакета.Добавить("ЗаголовокСЛоготипом");			
		Иначе 	
			МассивОбластейМакета.Добавить("Заголовок");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Шапка.Комментарий) Тогда
			Если ЗначениеЗаполнено(Шапка.ФайлЛоготип) Тогда 
				МассивОбластейМакета.Добавить("КомментарийСЛоготипом");			
			Иначе 	
				МассивОбластейМакета.Добавить("Комментарий");
			КонецЕсли;			
		КонецЕсли;
		
		Если ЕстьСкидка Тогда 
			МассивОбластейМакета.Добавить("ШапкаТаблицыСоСкидкой");
			МассивОбластейМакета.Добавить("СтрокаСоСкидкой");
		Иначе 
			МассивОбластейМакета.Добавить("ШапкаТаблицы");
			МассивОбластейМакета.Добавить("Строка");
		КонецЕсли;	
		МассивОбластейМакета.Добавить("Подвал");
		МассивОбластейМакета.Добавить("Итоги");
		Если ЕстьСкидка Тогда 
			МассивОбластейМакета.Добавить("ИтогиСкидка");
		КонецЕсли;
		МассивОбластейМакета.Добавить("ИтогоКОплате");
		МассивОбластейМакета.Добавить("ИтогиНДС");
		МассивОбластейМакета.Добавить("ИтогиНСП");
		МассивОбластейМакета.Добавить("СуммаПрописью");
		МассивОбластейМакета.Добавить("ПодписиСФаксимиле");
	
		Для Каждого ИмяОбласти Из МассивОбластейМакета Цикл
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
			Если ИмяОбласти = "ЗаголовокСЛоготипом" Тогда
				Логотип = Новый Соответствие; // Ключ - имя картинки в области, Значение - имя реквизита
				Логотип.Вставить("Логотип", "ФайлЛоготип");
				ЗаполнитьЛоготипФаксимилеВОбластиМакета(ОбластьМакета, ДанныеПечати, Логотип, Ошибки);
			КонецЕсли;	
			
			Если ИмяОбласти <> "Строка" И ИмяОбласти <> "СтрокаСоСкидкой" Тогда
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			Иначе 
				Для Каждого СтрокаТаблицы Из ТаблицаТовары Цикл
					ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
					ОбластьМакета.Параметры.Цена = Формат(СтрокаТаблицы.Цена, "ЧЦ=23; ЧДЦ=" + Шапка.ТочностьЦены +" ; ЧГ=3,0");
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
				
				Для Каждого СтрокаТаблицы Из ТаблицаУслуги Цикл
					ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
					ОбластьМакета.Параметры.Цена = Формат(СтрокаТаблицы.Цена, "ЧЦ=23; ЧДЦ=" + Шапка.ТочностьЦены +" ; ЧГ=3,0");
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
				
				Для Каждого СтрокаТаблицы Из ТаблицаОС Цикл
					ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
					ОбластьМакета.Параметры.Цена = Формат(СтрокаТаблицы.Цена, "ЧЦ=23; ЧДЦ=" + Шапка.ТочностьЦены +" ; ЧГ=3,0");
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
			КонецЕсли;	
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетНаОплату") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"СчетНаОплату", НСтр("ru = 'Счет на оплату'"), ПечатьСчетНаОплату(МассивОбъектов, ОбъектыПечати),,
		"Документ.СчетНаОплатуПокупателю.ПФ_MXL_СчетНаОплату");
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетНаОплату";
	КомандаПечати.Представление = НСтр("ru = 'Счет на оплату'");
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 1; 
	
	// Текст договора
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Договора";
	КомандаПечати.Представление = НСтр("ru = 'Договор'");
	КомандаПечати.Обработчик    = "ПечатьДоговоровКлиент.ВыполнитьКомандуПечатиТекстаДоговора";
	КомандаПечати.СписокФорм    = "ФормаДокумента";
	КомандаПечати.Порядок       = 30;
	
	Если ПравоДоступа("Использование", Метаданные.Отчеты.РеестрДокументов) Тогда
		// Реестр документов
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор  = "РеестрСчетНаОплатуПокупателю";
		КомандаПечати.Представление  = НСтр("ru = 'Реестр документов'");
		КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Реестр документов ""Счет на оплату покупателю""'");
		КомандаПечати.Обработчик     = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
		КомандаПечати.СписокФорм     = "ФормаСписка";
		КомандаПечати.Порядок        = 100;
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает заголовок документа для печатной формы.
//
// Параметры:
//  Шапка - любая структура с полями:
//           Номер         - Строка или Число - номер документа;
//           Дата          - Дата - дата документа;
//           Представление - Строка - (необязательный) платформенное представление ссылки на документ.
//                                    Если параметр НазваниеДокумента не задан, то название документа будет вычисляться
//                                    из этого параметра.
//  НазваниеДокумента - Строка - название документа (например, "Счет на оплату").
//
// Возвращаемое значение:
//  Строка - заголовок документа.
//
Функция СформироватьЗаголовокДокумента(Шапка, Знач НазваниеДокумента = "")
	
	ДанныеДокумента = Новый Структура("Номер,Дата,Представление");
	ЗаполнитьЗначенияСвойств(ДанныеДокумента, Шапка);
	
	// Если название документа не передано, получим название по представлению документа.
	Если ПустаяСтрока(НазваниеДокумента) И ЗначениеЗаполнено(ДанныеДокумента.Представление) Тогда
		ПоложениеНомера = СтрНайти(ДанныеДокумента.Представление, ДанныеДокумента.Номер);
		Если ПоложениеНомера > 0 Тогда
			НазваниеДокумента = СокрЛП(Лев(ДанныеДокумента.Представление, ПоложениеНомера - 1));
		КонецЕсли;
	КонецЕсли;

	НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеДокумента.Номер);
	Возврат СтрШаблон(НСтр("ru = '%1 № %2 от %3'"),
		НазваниеДокумента, НомерНаПечать, Формат(ДанныеДокумента.Дата, "ДЛФ=DD"));
	
КонецФункции

Процедура ЗаполнитьЛоготипФаксимилеВОбластиМакета(ОбластьМакета, ДанныеОбъекта, ПодписиИФаксимиле, Ошибки)
	
	Для каждого ЭлементСоответствия Из ПодписиИФаксимиле Цикл
		
		ПлашкаПодписи = ПолучитьПлашкуПодписиБезопасно(ОбластьМакета, ЭлементСоответствия.Ключ, "", Ошибки);
		Если ПлашкаПодписи = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеОбъекта[ЭлементСоответствия.Значение]) Тогда
			
			ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(ДанныеОбъекта[ЭлементСоответствия.Значение]);
			Если ЗначениеЗаполнено(ДвоичныеДанные) Тогда
				
				ПлашкаПодписи.Картинка = Новый Картинка(ДвоичныеДанные);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПлашкуПодписиБезопасно(ОбластьМакета, ИмяПлашки, ПредставлениеПодписи, Ошибки)
	
	ПлашкаПодписи = ОбластьМакета.Области.Найти(ИмяПлашки);
	Если ПлашкаПодписи = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru ='ВНИМАНИЕ! Нет места для картинки %1. Возможно используется пользовательский макет.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ?(ПустаяСтрока(ПредставлениеПодписи), ИмяПлашки, ПредставлениеПодписи));
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстСообщения, Неопределено);
		
	КонецЕсли;
	
	ПлашкаПодписи.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
	
	Возврат ПлашкаПодписи;
	
КонецФункции

// Возвращает структуру с перечнем полей, которые могут быть поставлены в текст 
// договора по данным из документа.
//
Функция ПодготовитьПараметрыПечатиТекстаДоговора(СсылкаНаДокумент) Экспорт

	Результат = Новый Структура();
	Результат.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	Результат.Вставить("БанковскийСчет", Справочники.БанковскиеСчета.ПустаяСсылка());
	Результат.Вставить("ВалютаДокумента", Справочники.Валюты.ПустаяСсылка());
	Результат.Вставить("СуммаДокумента", 0);
	Результат.Вставить("СуммаНДС", 0);
	Результат.Вставить("СуммаНСП", 0);

	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаДокумент, 
		"Организация, СуммаДокумента, СуммаВключаетНалоги, ВалютаДокумента");
	
	ЗаполнитьЗначенияСвойств(Результат, РеквизитыДокумента); 

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаНаДокумент", СсылкаНаДокумент);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ТЧТовары.СуммаНДС) КАК СуммаНДС,
		|	СУММА(ТЧТовары.СуммаНСП) КАК СуммаНСП
		|ИЗ
		|	Документ.СчетНаОплатуПокупателю.Товары КАК ТЧТовары
		|ГДЕ
		|	ТЧТовары.Ссылка = &СсылкаНаДокумент";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка); 
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецЕсли