#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ЗаполненияДокумента

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.ИнвентаризацияТоваров - Данные заполнения документа.
//	
Процедура ЗаполнитьПоИнвентаризацииТМЗ(ДанныеЗаполнения) Экспорт

	ДокументОснование = ДанныеЗаполнения;
	
	Организация	= ДанныеЗаполнения.Организация;
	Склад = ДанныеЗаполнения.Склад;
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Товары Цикл 
		Если СтрокаТабличнойЧасти.Отклонение > 0 Тогда 
			НоваяСтрокаТабличнойЧасти = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
			
			НоваяСтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Отклонение;
			НоваяСтрокаТабличнойЧасти.Сумма = НоваяСтрокаТабличнойЧасти.Количество * НоваяСтрокаТабличнойЧасти.Цена;
			
			// Счета учета
			СчетаУчетаНоменклатуры = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТабличнойЧасти.Номенклатура);
			НоваяСтрокаТабличнойЧасти.СчетОприходования = СчетаУчетаНоменклатуры.СчетДоходов;
		КонецЕсли;	
	КонецЦикла;	
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.МБП Цикл 
		Если СтрокаТабличнойЧасти.Отклонение > 0 Тогда 
			НоваяСтрокаТабличнойЧасти = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
			
			НоваяСтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Отклонение;
			НоваяСтрокаТабличнойЧасти.Сумма = НоваяСтрокаТабличнойЧасти.Количество * НоваяСтрокаТабличнойЧасти.Цена;
			
			// Счета учета
			СчетаУчетаНоменклатуры = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТабличнойЧасти.Номенклатура);
			НоваяСтрокаТабличнойЧасти.СчетОприходования = СчетаУчетаНоменклатуры.СчетДоходов;
			НоваяСтрокаТабличнойЧасти.СчетУчета = ПланыСчетов.Хозрасчетный.МБП;
		КонецЕсли;	
	КонецЦикла;
	
	СуммаДокумента = Товары.Итог("Сумма");
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.ИнвентаризацияМБП - Данные заполнения документа.
//	
Процедура ЗаполнитьПоИнвентаризацииМБП(ДанныеЗаполнения) Экспорт

	ДокументОснование = ДанныеЗаполнения;
	
	Организация	= ДанныеЗаполнения.Организация;
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.МБП Цикл 
		Если СтрокаТабличнойЧасти.Отклонение > 0 Тогда 
			НоваяСтрокаТабличнойЧасти = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
			
			НоваяСтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Отклонение;
			НоваяСтрокаТабличнойЧасти.Сумма = НоваяСтрокаТабличнойЧасти.Количество * НоваяСтрокаТабличнойЧасти.Цена;
			
			// Счета учета
			СчетаУчетаНоменклатуры = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТабличнойЧасти.Номенклатура);
			НоваяСтрокаТабличнойЧасти.СчетОприходования = СчетаУчетаНоменклатуры.СчетДоходов;
			НоваяСтрокаТабличнойЧасти.СчетУчета = ПланыСчетов.Хозрасчетный.МБП;
		КонецЕсли;	
	КонецЦикла;	
	
	СуммаДокумента = Товары.Итог("Сумма");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.ИнвентаризацияТоваров")] = "ЗаполнитьПоИнвентаризацииТМЗ";
	СтратегияЗаполнения[Тип("ДокументСсылка.ИнвентаризацияМБП")] = "ЗаполнитьПоИнвентаризацииМБП";
	
	ЗаполнениеОбъектовБП.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	// Предварительный контроль	
	ВыполнитьПредварительныйКонтроль(Отказ);
КонецПроцедуры

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СуммаДокумента = Товары.Итог("Сумма");
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ИнициализироватьДанные(Отказ, РежимПроведения);
	
	ОтразитьДвижения(Отказ, РежимПроведения);
	
	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)

	// Инициализация дополнительных свойств для проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииОбработкаПроведения

// Процедура инициализирует данные документа
// и подготавливает таблицы для движения в регистры
//
Процедура ИнициализироватьДанные(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	 	
	// Инициализация данных документа.
	Документы.ОприходованиеТоваров.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
КонецПроцедуры
	
// Процедура заполняет регистры данными
//
Процедура ОтразитьДвижения(Отказ, РежимПроведения)

	// Отражение в разделах учета.
	// ТМЗ.
	УчетТоваров.СформироватьДвиженияОприходованиеТоваров(ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаТовары,
		ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРеквизиты, Движения, Отказ);
	УчетМБП.СформироватьДвиженияОприходованиеМБП(ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаМБП,
		ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРеквизиты, Движения, Отказ);
		
	БухгалтерскийУчетСервер.ОтразитьДвижениеОСНУ(ДополнительныеСвойства, Движения, Отказ);
	НалоговыйУчет.СформироватьДвиженияКорректировкаНУ(ДополнительныеСвойства, Движения, Отказ);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет контроль противоречий.
//
Процедура ВыполнитьПредварительныйКонтроль(Отказ)
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДокумента.Номенклатура,
		|	ТаблицаДокумента.СчетУчета
		|ПОМЕСТИТЬ ТаблицаДокумента
		|ИЗ
		|	&ТаблицаДокумента КАК ТаблицаДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ТаблицаДокумента1.НомерСтроки) КАК НомерСтроки,
		|	ТаблицаДокумента1.Номенклатура
		|ИЗ
		|	ТаблицаДокумента КАК ТаблицаДокумента1
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокумента КАК ТаблицаДокумента2
		|		ПО ТаблицаДокумента1.НомерСтроки <> ТаблицаДокумента2.НомерСтроки
		|			И ТаблицаДокумента1.Номенклатура = ТаблицаДокумента2.Номенклатура
		|			И ТаблицаДокумента1.СчетУчета = ТаблицаДокумента2.СчетУчета
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДокумента1.Номенклатура
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	Запрос.УстановитьПараметр("ТаблицаДокумента", Товары);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Дубли строк.
	Если НЕ МассивРезультатов[1].Пустой() Тогда
		ВыборкаИзРезультатаЗапроса = МассивРезультатов[1].Выбрать();
		Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Номенклатура указывается повторно в строке %1 списка ""Товары"".'"), 
							ВыборкаИзРезультатаЗапроса.НомерСтроки);
			БухгалтерскийУчетСервер.СообщитьОбОшибке(
				ЭтотОбъект,
				ТекстСообщения,
				"Товары",
				ВыборкаИзРезультатаЗапроса.НомерСтроки,
				"Номенклатура",
				Отказ);
		КонецЦикла;
	КонецЕсли;		

КонецПроцедуры

#КонецОбласти
	
#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли