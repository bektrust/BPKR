#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыПроведенияДокумента

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСотрудникиПоТрудовымСоглашениям(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Период,
		|	ТаблицаДокумента.Организация,
		|	ТаблицаДокумента.ФизЛицо,
		|	ТаблицаДокумента.Подразделение,
		|	ТаблицаДокумента.Должность,
		|	ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.Основной) КАК ГрафикРаботы,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием) КАК ВидСобытия
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ТаблицаДокумента
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.ДатаОкончанияРаботы,
		|	ТаблицаДокумента.Организация,
		|	ТаблицаДокумента.ФизЛицо,
		|	ТаблицаДокумента.Подразделение,
		|	ТаблицаДокумента.Должность,
		|	ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.Основной),
		|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ТаблицаДокумента";
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСотрудникиПоТрудовымСоглашениям", РезультатЗапроса.Выгрузить());
КонецПроцедуры // СформироватьТаблицаСотрудники()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСтатусыСотрудников(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Период,
		|	ТаблицаДокумента.Организация,
		|	ТаблицаДокумента.ФизЛицо,
		|	ТаблицаДокумента.Статус,
		|	ТаблицаДокумента.ПризнакРезидентства
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ТаблицаДокумента";
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСтатусыСотрудников", РезультатЗапроса.Выгрузить());
КонецПроцедуры // СформироватьТаблицаСтатусыСотрудников()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаНачисления(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	ВременнаяТаблицаНачисленияПоПериодам = Новый ТаблицаЗначений;
	ВременнаяТаблицаНачисленияПоПериодам.Колонки.Добавить("ФизЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ВременнаяТаблицаНачисленияПоПериодам.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты()));
	ВременнаяТаблицаНачисленияПоПериодам.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты()));
	ВременнаяТаблицаНачисленияПоПериодам.Колонки.Добавить("ПериодРегистрации", Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты()));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.ФизЛицо,
		|	ТаблицаДокумента.Период КАК ДатаНачала,
		|	ТаблицаДокумента.ДатаОкончанияРаботы КАК ДатаОкончания
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ТаблицаДокумента";
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();	
	Пока Выборка.Следующий() Цикл 
		
		// Подготовить таблицу по периодам
		ПериодРегистрацииДатаОкончания = НачалоМесяца(Выборка.ДатаОкончания);
		
		Шаг = 0;
		Пока Истина Цикл 
			СтрокаТаблицы = ВременнаяТаблицаНачисленияПоПериодам.Добавить();
			СтрокаТаблицы.ФизЛицо = Выборка.ФизЛицо;
			
			СтрокаТаблицы.ДатаНачала = ?(Шаг = 0,  
				Выборка.ДатаНачала, 
				НачалоМесяца(ДобавитьМесяц(Выборка.ДатаНачала, Шаг)));
				
			СтрокаТаблицы.ПериодРегистрации = НачалоМесяца(СтрокаТаблицы.ДатаНачала);
	
			СтрокаТаблицы.ДатаОкончания = ?(СтрокаТаблицы.ПериодРегистрации = ПериодРегистрацииДатаОкончания, 
				Выборка.ДатаОкончания, 
				КонецМесяца(ДобавитьМесяц(Выборка.ДатаНачала, Шаг)));
			
			Если СтрокаТаблицы.ПериодРегистрации = ПериодРегистрацииДатаОкончания Тогда 
				Прервать;
			КонецЕсли;	
				
			Шаг = Шаг + 1;			
		КонецЦикла;	
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаНачисленияПоПериодам.ФизЛицо,
		|	ВременнаяТаблицаНачисленияПоПериодам.ДатаНачала,
		|	ВременнаяТаблицаНачисленияПоПериодам.ДатаОкончания,
		|	ВременнаяТаблицаНачисленияПоПериодам.ПериодРегистрации
		|ПОМЕСТИТЬ ВременнаяТаблицаНачисленияПоПериодам
		|ИЗ
		|	&ВременнаяТаблицаНачисленияПоПериодам КАК ВременнаяТаблицаНачисленияПоПериодам
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.ПериодРегистрации,
		|	ТаблицаДокумента.ДатаНачала КАК ПериодДействияНачало,
		|	КОНЕЦПЕРИОДА(ТаблицаДокумента.ДатаОкончания, ДЕНЬ) КАК ПериодДействияКонец,
		|	ВременнаяТаблицаШапка.ВидРасчета,
		|	ВременнаяТаблицаШапка.СпособОтражения,
		|	ТаблицаДокумента.ФизЛицо,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.Подразделение,
		|	ВременнаяТаблицаШапка.Должность,
		|	ВременнаяТаблицаШапка.Размер,
		|	ВременнаяТаблицаШапка.Размер КАК Результат,
		|	ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.Основной) КАК ГрафикРаботы
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаНачисленияПоПериодам КАК ТаблицаДокумента
		|		ПО (ИСТИНА)";
	Запрос.УстановитьПараметр("ВременнаяТаблицаНачисленияПоПериодам", ВременнаяТаблицаНачисленияПоПериодам);

	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаНачисления", РезультатЗапроса.Выгрузить());
КонецПроцедуры // СформироватьТаблицаНачисления()

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Период,
		|	ТаблицаДокумента.Организация,
		|	ТаблицаДокумента.ФизЛицо,
		|	ТаблицаДокумента.Подразделение,
		|	ТаблицаДокумента.Должность,
		|	ТаблицаДокумента.ДатаОкончанияРаботы,
		|	ТаблицаДокумента.ВидРасчета,
		|	ТаблицаДокумента.СпособОтражения,
		|	ТаблицаДокумента.Размер,
		|	ТаблицаДокумента.Статус,
		|	ТаблицаДокумента.ПризнакРезидентства
		|ПОМЕСТИТЬ ВременнаяТаблицаШапка
		|ИЗ
		|	Документ.ТрудовоеСоглашение КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Выполнить();
	
	СформироватьТаблицаСотрудникиПоТрудовымСоглашениям(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаСтатусыСотрудников(ДокументСсылка,СтруктураДополнительныеСвойства);
	СформироватьТаблицаНачисления(ДокументСсылка, СтруктураДополнительныеСвойства);
КонецПроцедуры // ИнициализироватьДанныеДокумента()

#КонецОбласти

#Область ВерсионированиеОбъектов

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//@skip-warning
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область ИнтерфейсПечати

// Функция формирует табличный документ с печатной формой Трудовое соглашение
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьТрудовогоСоглашения(МассивОбъектов, ОбъектыПечати)
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТрудовоеСоглашение.Ссылка КАК Ссылка,
		|	ТрудовоеСоглашение.Дата КАК Дата,
		|	ТрудовоеСоглашение.Номер КАК Номер,
		|	ТрудовоеСоглашение.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
		|	ТрудовоеСоглашение.Организация КАК Организация,
		|	ТрудовоеСоглашение.ФизЛицо КАК ФизЛицо,
		|	ТрудовоеСоглашение.Размер КАК Сумма,
		|	ТрудовоеСоглашение.ДатаОкончанияРаботы КАК ДатаОкончанияРаботы,
		|	ТрудовоеСоглашение.Назначение КАК Назначение
		|ИЗ
		|	Документ.ТрудовоеСоглашение КАК ТрудовоеСоглашение
		|ГДЕ
		|	ТрудовоеСоглашение.Ссылка В(&СписокДокументов)";		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокДокументов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ТрудовоеСоглашение_ТрудовоеСоглашение";     

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ТрудовоеСоглашение.ПФ_MXL_ТрудовоеСоглашение");
	
	Пока Шапка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Подготовка данных
		ДанныеПечати = Новый Структура;
		
		ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, НСтр("ru = 'Трудовое соглашение'"));
		ДанныеПечати.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		
		ДанныеПечати.Вставить("ОрганизацияПредставление", Шапка.ОрганизацияНаименованиеПолное);
		ДанныеПечати.Вставить("Назначение", Шапка.Назначение);
		ДанныеПечати.Вставить("ДатаОкончанияРаботы", Формат(Шапка.ДатаОкончанияРаботы, "ДЛФ=D"));
		
		ДанныеФизЛица = БухгалтерскийУчетСервер.ПолучитьСведенияОФизЛице(Шапка.Организация, Шапка.ФизЛицо, Шапка.Дата);
		
		ДанныеПечати.Вставить("ФизЛицоПредставление", ДанныеФизЛица.ФИО);
		ДанныеПечати.Вставить("ДатаРождения", Формат(ДанныеФизЛица.ДатаРождения, "ДЛФ=D"));
		ДанныеПечати.Вставить("МестоРождения", ДанныеФизЛица.МестоРождения);
		ДанныеПечати.Вставить("АдресПоПрописке", ДанныеФизЛица.АдрПоПрописке);
		ДанныеПечати.Вставить("ФизЛицоИНН", ДанныеФизЛица.ИНН);

		ДанныеПечати.Вставить("СерияПаспорта", ДанныеФизЛица.ПаспортСерия);
		ДанныеПечати.Вставить("НомерПаспорта", ДанныеФизЛица.ПаспортНомер);
		ДанныеПечати.Вставить("КемВыдан", ДанныеФизЛица.ПаспортКемВыдан);
		ДанныеПечати.Вставить("ДатаВыдачиПаспорта", Формат(ДанныеФизЛица.ПаспортДатаВыдачи, "ДЛФ=D"));
		
		ДанныеПечати.Вставить("СуммаПрописью", БухгалтерскийУчетСервер.СформироватьСуммуПрописью(Шапка.Сумма));
		
		ДанныеОбОрганизации = БухгалтерскийУчетСервер.ПолучитьСведенияОбОрганизации(Шапка.Организация, Шапка.Дата);
		ДанныеПечати.Вставить("АдресОгранизация", ДанныеОбОрганизации.АдрЮР);
		ДанныеПечати.Вставить("ИННОгранизация", ДанныеОбОрганизации.ИНН);
		ДанныеПечати.Вставить("БанкОгранизация", ДанныеОбОрганизации.Банк);
		ДанныеПечати.Вставить("РасСчетОгранизация", ДанныеОбОрганизации.НомерСчета);
		ДанныеПечати.Вставить("БИКОгранизация", ДанныеОбОрганизации.БИКБанка);
		ДанныеПечати.Вставить("ТелефонОгранизация", ДанныеОбОрганизации.Тел);														

		// Подписи
		ФамилияИОРуководителя = "";
		ОтветственныеЛица = БухгалтерскийУчетСервер.ОтветственныеЛицаОрганизацийРуководители(Шапка.Организация, Шапка.Дата);
		БухгалтерскийУчетСервер.ФамилияИнициалыПоНаименованию(ФамилияИОРуководителя, ОтветственныеЛица.Руководитель);
		ДанныеПечати.Вставить("ФамилияИОРуководителя", ФамилияИОРуководителя);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");		
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьТрудовогоСоглашения()

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТрудовоеСоглашение") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, 
			"ТрудовоеСоглашение", 
			НСтр("ru = 'Трудовое соглашение'"), 
			ПечатьТрудовогоСоглашения(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.ТрудовоеСоглашение.ПФ_MXL_ТрудовоеСоглашение");
	КонецЕсли;

КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТрудовоеСоглашение";
	КомандаПечати.Представление = НСтр("ru = 'Трудовое соглашение'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 1;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает заголовок документа для печатной формы.
//
// Параметры:
//  Шапка - любая структура с полями:
//           Номер         - Строка или Число - номер документа;
//           Дата          - Дата - дата документа;
//           Представление - Строка - (необязательный) платформенное представление ссылки на документ.
//                                    Если параметр НазваниеДокумента не задан, то название документа будет вычисляться
//                                    из этого параметра.
//  НазваниеДокумента - Строка - название документа (например, "Счет на оплату").
//
// Возвращаемое значение:
//  Строка - заголовок документа.
//
Функция СформироватьЗаголовокДокумента(Шапка, Знач НазваниеДокумента = "")
	
	ДанныеДокумента = Новый Структура("Номер,Дата,Представление");
	ЗаполнитьЗначенияСвойств(ДанныеДокумента, Шапка);
	
	// Если название документа не передано, получим название по представлению документа.
	Если ПустаяСтрока(НазваниеДокумента) И ЗначениеЗаполнено(ДанныеДокумента.Представление) Тогда
		ПоложениеНомера = СтрНайти(ДанныеДокумента.Представление, ДанныеДокумента.Номер);
		Если ПоложениеНомера > 0 Тогда
			НазваниеДокумента = СокрЛП(Лев(ДанныеДокумента.Представление, ПоложениеНомера - 1));
		КонецЕсли;
	КонецЕсли;

	НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеДокумента.Номер);
	Возврат СтрШаблон(НСтр("ru = '%1 № %2 от %3'"),
		НазваниеДокумента, НомерНаПечать, Формат(ДанныеДокумента.Дата, "ДЛФ=DD"));
	
КонецФункции

#КонецОбласти

#КонецЕсли