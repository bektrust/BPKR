#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет табличную часть Материалы на основании данных табличных частей Продукция и Услуги.
// Процедура добавляет строки, не очищая табличную часть перед заполнением.
// Счета учета не заполняются. При необходимости, об этом должен позаботиться вызывающий код.
// 
Процедура ЗаполнитьМатериалыПоПродукцииУслугам() Экспорт
	
	// Получим данные о сырье для заполнения табличной части
	ТекстыЗапроса = Новый Массив;
	// Исходные данные
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Продукция.НомерСтроки КАК НомерСтроки,
		|	Продукция.Номенклатура КАК НоменклатураПродукции,
		|	Продукция.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	Продукция.Спецификация КАК Спецификация,
		|	Продукция.Количество КАК Количество
		|ПОМЕСТИТЬ Продукция
		|ИЗ
		|	&Продукция КАК Продукция
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Услуги.НомерСтроки КАК НомерСтроки,
		|	Услуги.Номенклатура КАК НоменклатураУслуги,
		|	Услуги.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	Услуги.Спецификация КАК Спецификация,
		|	Услуги.Количество КАК Количество
		|ПОМЕСТИТЬ Услуги
		|ИЗ
		|	&Услуги КАК Услуги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	0 КАК НомерСписка,
		|	Продукция.НоменклатураПродукции КАК НоменклатураПродукции,
		|	Продукция.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	Продукция.Спецификация КАК Спецификация,
		|	Продукция.Количество КАК КоличествоПродукции
		|ПОМЕСТИТЬ Выпуск
		|ИЗ
		|	Продукция КАК Продукция
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	1,
		|	Услуги.НоменклатураУслуги,
		|	Услуги.НоменклатурнаяГруппа,
		|	Услуги.Спецификация,
		|	Услуги.Количество
		|ИЗ
		|	Услуги КАК Услуги");
	
	// Данные о расходе сырья
	ТекстыЗапроса.Добавить(УправлениеПроизводством.ТекстЗапросаВременнаяТаблицаЗатратыСырья());
	
	// Преобразуем в формат получателя
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	МАКСИМУМ(ЗатратыСырья.НомерСтрокиСпецификации) КАК НомерСтрокиСпецификации,
		|	МИНИМУМ(ЗатратыСырья.НомерСписка) КАК НомерСписка,
		|	ЗатратыСырья.НоменклатурнаяГруппа,
		|	ЗатратыСырья.Номенклатура,
		|	ЗатратыСырья.Номенклатура.Наименование КАК НоменклатураПредставление,
		|	СУММА(ЗатратыСырья.Количество) КАК Количество,
		|	ЗатратыСырья.ЕдиницаИзмерения,
		|	ЗатратыСырья.СтатьяЗатрат
		|ИЗ
		|	ЗатратыСырья КАК ЗатратыСырья
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗатратыСырья.Номенклатура,
		|	ЗатратыСырья.Номенклатура.Наименование,
		|	ЗатратыСырья.НоменклатурнаяГруппа,
		|	ЗатратыСырья.ЕдиницаИзмерения,
		|	ЗатратыСырья.СтатьяЗатрат
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСписка,
		|	НомерСтрокиСпецификации,
		|	НоменклатураПредставление");
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Продукция", Продукция.Выгрузить());
	Запрос.Параметры.Вставить("Услуги", Услуги.Выгрузить());
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Материалы.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

#КонецОбласти
	
#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	СчетЗатрат = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство; // 1630
	ЗаполнениеОбъектовБП.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения);
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
		
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если НоменклатурнаяГруппаВТаблице Тогда 
		МассивНепроверяемыхРеквизитов.Добавить("НоменклатурнаяГруппа");
	Иначе 
		МассивНепроверяемыхРеквизитов.Добавить("Продукция.НоменклатурнаяГруппа");
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.НоменклатурнаяГруппа");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратныеОтходы.НоменклатурнаяГруппа");
		МассивНепроверяемыхРеквизитов.Добавить("Материалы.НоменклатурнаяГруппа");
	КонецЕсли;	
	
	// Если установлена база распределения "по материальным затратам",
	// то спецификация будет учавствовать в алгоритмах распределения,
	// Для остальных способов спецификация не важна.
	БазаРаспределенияКорректировкиСебестоимости = Константы.БазаРаспределенияКорректировкиСебестоимости.Получить();
	Если НЕ БазаРаспределенияКорректировкиСебестоимости = Перечисления.БазыРаспределенияКосвенныхРасходов.МатериальныеЗатраты Тогда 
		МассивНепроверяемыхРеквизитов.Добавить("Продукция.Спецификация");
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.Спецификация");
	КонецЕсли;	
	
	Если ПолучитьФункциональнуюОпцию("НесколькоСкладовВПроизводстве") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
		
		Если Продукция.Количество() = 0 Тогда
			МассивНепроверяемыхРеквизитов.Добавить("СкладПродукция");	
		КонецЕсли;
		
		Если ВозвратныеОтходы.Количество() = 0 Тогда
			МассивНепроверяемыхРеквизитов.Добавить("СкладВозвратныеОтходы");	
		КонецЕсли;
		
		Если Материалы.Количество() = 0 Тогда
			МассивНепроверяемыхРеквизитов.Добавить("СкладМатериалы");	
		КонецЕсли;		
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("СкладПродукция");
		МассивНепроверяемыхРеквизитов.Добавить("СкладВозвратныеОтходы");
		МассивНепроверяемыхРеквизитов.Добавить("СкладМатериалы");
	КонецЕсли;	
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

	// Предварительный контроль	
	ВыполнитьПредварительныйКонтроль(Отказ);
КонецПроцедуры

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СуммаДокумента = Продукция.Итог("СуммаПлановая") + Услуги.Итог("СуммаПлановая");
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ИнициализироватьДанные(Отказ, РежимПроведения);
	
	ОтразитьДвижения(Отказ, РежимПроведения);
	
	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)

	// Инициализация дополнительных свойств для проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииОбработкаПроведения

// Процедура инициализирует данные документа
// и подготавливает таблицы для движения в регистры
//
Процедура ИнициализироватьДанные(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	 	
	// Инициализация данных документа.
	Документы.ОтчетПроизводстваЗаСмену.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
КонецПроцедуры
	
// Процедура заполняет регистры данными
//
Процедура ОтразитьДвижения(Отказ, РежимПроведения)

	// Отражение в разделах учета.
	УчетПроизводства.СформироватьДвиженияПлановаяСтоимостьВыпущеннойПродукции(ДополнительныеСвойства, Движения, Отказ);
	УчетПроизводства.СформироватьДвиженияВыпускПродукции(ДополнительныеСвойства, Движения, Отказ);
	
	// Оказание услуг собственным производственным подразделениям.
	УчетПроизводства.СформироватьДвиженияПлановаяСтоимостьВыпущенныхУслуг(ДополнительныеСвойства, Движения, Отказ);
	УчетПроизводства.СформироватьДвиженияВыпускУслуг(ДополнительныеСвойства, Движения, Отказ);
	
	// Отходы.
	УчетПроизводства.СформироватьДвиженияВыпускОтходов(ДополнительныеСвойства, Движения, Отказ);

	// Списание материалов на расходы производства
	УчетТоваров.СформироватьДвиженияСписаниеТоваров(ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСписанныеМатериалы, 
		ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРеквизитыМатериалы, Движения, Отказ, ДополнительныеСвойства);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет контроль противоречий.
//
Процедура ВыполнитьПредварительныйКонтроль(Отказ)
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДокумента.Номенклатура,
		|	ТаблицаДокумента.СчетУчета
		|ПОМЕСТИТЬ ТаблицаДокумента
		|ИЗ
		|	&ТаблицаДокумента КАК ТаблицаДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ТаблицаДокумента1.НомерСтроки) КАК НомерСтроки,
		|	ТаблицаДокумента1.Номенклатура
		|ИЗ
		|	ТаблицаДокумента КАК ТаблицаДокумента1
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокумента КАК ТаблицаДокумента2
		|		ПО ТаблицаДокумента1.НомерСтроки <> ТаблицаДокумента2.НомерСтроки
		|			И ТаблицаДокумента1.Номенклатура = ТаблицаДокумента2.Номенклатура
		|			И ТаблицаДокумента1.СчетУчета = ТаблицаДокумента2.СчетУчета
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДокумента1.Номенклатура
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	Запрос.УстановитьПараметр("ТаблицаДокумента", Продукция);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Дубли строк.
	Если НЕ МассивРезультатов[1].Пустой() Тогда
		ВыборкаИзРезультатаЗапроса = МассивРезультатов[1].Выбрать();
		Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Номенклатура указывается повторно в строке %1 списка ""Продукция"".'"), 
							ВыборкаИзРезультатаЗапроса.НомерСтроки);
			БухгалтерскийУчетСервер.СообщитьОбОшибке(
				ЭтотОбъект,
				ТекстСообщения,
				"Продукция",
				ВыборкаИзРезультатаЗапроса.НомерСтроки,
				"Номенклатура",
				Отказ);
		КонецЦикла;
	КонецЕсли;		

КонецПроцедуры

#КонецОбласти
	
#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли