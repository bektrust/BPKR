#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ЗаполненияДокумента

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.РеализацияТоваровУслуг - Данные заполнения документа.
//	
Процедура ЗаполнитьПоРеализацияТоваровУслуг(ДанныеЗаполнения) Экспорт
	ДокументОснование = ДанныеЗаполнения;
	
	Организация				= ДанныеЗаполнения.Организация;
	Склад               	= ДанныеЗаполнения.Склад;
	БезналичныйРасчет		= ДанныеЗаполнения.БезналичныйРасчет;
	БезвозмезднаяПоставка 	= ДанныеЗаполнения.БезвозмезднаяПоставка;
	ТочностьЦены			= ДанныеЗаполнения.ТочностьЦены;
	РеализацияСДоначислениемНДС	= ДанныеЗаполнения.РеализацияСДоначислениемНДС;	
	// Сведения о контрагенте
	Контрагент          	= ДанныеЗаполнения.Контрагент;
	ДоговорКонтрагента  	= ДанныеЗаполнения.ДоговорКонтрагента;
	СчетРасчетов 			= ДанныеЗаполнения.СчетРасчетов;			
	// Валюта
	ВалютаДокумента     	= ДанныеЗаполнения.ВалютаДокумента;
	Курс					= ДанныеЗаполнения.Курс;
	Кратность				= ДанныеЗаполнения.Кратность;
	// Налоги
	СтавкаНДС				= ДанныеЗаполнения.СтавкаНДС;
	СуммаВключаетНалоги		= ДанныеЗаполнения.СуммаВключаетНалоги;
	// Скидки
	ВидСкидкиНаценки    	= ДанныеЗаполнения.ВидСкидкиНаценки;
	ПроцентСкидкиНаценки 	= ДанныеЗаполнения.ПроцентСкидкиНаценки;
	СчетУчетаСкидок 		= ПланыСчетов.Хозрасчетный.ВозвратПроданныхТоваровИСкидки;
	СтавкаНСП 				= ДанныеЗаполнения.СтавкаНСП;
	СтавкаНСПУслуги 		= ДанныеЗаполнения.СтавкаНСПУслуги;
	
	ЗаполнитьДанныеКорректировкиСФ(ДанныеЗаполнения);	
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Товары Цикл
		НоваяСтрокаТабличнойЧасти = Товары.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
	КонецЦикла;	
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Услуги Цикл
		НоваяСтрокаТабличнойЧасти = Услуги.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
	КонецЦикла;	
		
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.ОС Цикл
		НоваяСтрокаТабличнойЧасти = ОС.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
	КонецЦикла;	

	СуммаДокумента = Товары.Итог("Всего") + Услуги.Итог("Всего") + ОС.Итог("Всего");	

КонецПроцедуры

#КонецОбласти
	
#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.РеализацияТоваровУслуг")] = "ЗаполнитьПоРеализацияТоваровУслуг";
	
	ЗаполнениеОбъектовБП.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
	Если НЕ ЗначениеЗаполнено(СтавкаНСП) Тогда
		ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(Дата, Организация);
		СтавкаНСП = ДанныеУчетнойПолитики.СтавкаНСПРеализацииТовары;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(СтавкаНСПУслуги) Тогда
		ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(Дата, Организация);
		СтавкаНСПУслуги = ДанныеУчетнойПолитики.СтавкаНСПРеализацииУслуги;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	// Проверка заполнения табличных частей
	Если Товары.Количество() = 0
		И Услуги.Количество() = 0 
		И ОС.Количество() = 0 Тогда	
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не заполнен ни один список.'"),,,,Отказ)		
	КонецЕсли;

	Если Товары.Количество() = 0
		И ОС.Количество() = 0 Тогда	
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
	КонецЕсли;
	
	// Указан документ реализации.
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Себестоимость");
	КонецЕсли;
	
	// Проверка заполнения Скидки/Наценки
	Если НЕ ЗначениеЗаполнено(ВидСкидкиНаценки) Тогда 
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаСкидок");
	КонецЕсли;
	
	Если НЕ Контрагент.ПризнакСтраны = Перечисления.ПризнакиСтраны.КР Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНСП");
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.СтавкаНСП");
		МассивНепроверяемыхРеквизитов.Добавить("ОС.СтавкаНСП");
	КонецЕсли;
	
	Если РеализацияСДоначислениемНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СуммаДохода");
	КонецЕсли;

	Если Курс = 0 Или Кратность = 0 Тогда 
		ТекстСообщения = НСтр("ru = 'Не заполнен курс валюты ""%1"". Откройте список валют (Банк и касса - Валюты) и проверьте,
			|что у валюты ""%1"" установлен курс на дату %2 или ранее.
			|Перевыберите договор и заново проведите документ.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ВалютаДокумента, Формат(Дата, "ДЛФ=D"));	
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;

	ПлательщикНДС = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(Дата, Организация).ПлательщикНДС;
	
	Если НЕ ПлательщикНДС Тогда
		МассивТабличныхЧастей = Новый Массив();
		МассивТабличныхЧастей.Добавить(Товары);
		МассивТабличныхЧастей.Добавить(Услуги);
		МассивТабличныхЧастей.Добавить(ОС);
		ПрерватьЦикл = Ложь;
		
		Для Каждого ТабличнаяЧасть Из МассивТабличныхЧастей Цикл
			
			Если ПрерватьЦикл Тогда
				Прервать;				
			КонецЕсли;	
			
			Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
				
				Если СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.СуммаСкидки
					ИЛИ СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.СуммаСкидки Тогда
					
					МассивНепроверяемыхРеквизитов.Добавить("Товары.СуммаДохода");
					МассивНепроверяемыхРеквизитов.Добавить("Услуги.СуммаДохода");
					МассивНепроверяемыхРеквизитов.Добавить("ОС.СуммаДохода");
					ПрерватьЦикл = Истина;
					Прервать;
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;	
	КонецЕсли;
	
	ОбщегоНазначенияБПСервер.ДобавитьНепроверяемыеРеквизитыПоПараметрамФункциональныхОпций(МассивНепроверяемыхРеквизитов, Организация, Дата);
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	// Выполнение предварительного контроля.
	ВыполнитьПредварительныйКонтроль(Отказ);
КонецПроцедуры

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СуммаДокумента = Товары.Итог("Всего") + Услуги.Итог("Всего") + ОС.Итог("Всего") - Товары.Итог("СуммаСкидки") - Услуги.Итог("СуммаСкидки") - ОС.Итог("СуммаСкидки");
	
	РассчитатьСуммыВРегламентированнойВалюте();
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ИнициализироватьДанные(Отказ, РежимПроведения);
	
	ОтразитьДвижения(Отказ, РежимПроведения);
	
	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	СерияБланкаСФ = "";
	НомерБланкаСФ = "";
	ДатаСФ = '00010101';
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииОбработкаПроведения

// Процедура инициализирует данные документа
// и подготавливает таблицы для движения в регистры
//
Процедура ИнициализироватьДанные(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.ВозвратТоваровОтПокупателя.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
КонецПроцедуры
	
// Процедура заполняет регистры данными
//
Процедура ОтразитьДвижения(Отказ, РежимПроведения)

	// Отражение в разделах учета.
	УчетТоваров.СформироватьДвиженияСписанияТоваровВозвратОтПокупателя(ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСписанныеТовары, 
		ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРеквизиты, Движения, Отказ, ДополнительныеСвойства);
	УчетМБП.СформироватьДвиженияСписаниеМБП(ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСписанныеМБП,
		ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРеквизиты, Движения, Отказ, ДополнительныеСвойства);
	
	БухгалтерскийУчетСервер.ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьПродажи(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьБланкиСчетовФактур(ДополнительныеСвойства, Движения, Отказ);

	БухгалтерскийУчетСервер.ОтразитьСобытияОС(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьСостоянияОС(ДополнительныеСвойства, Движения, Отказ); 
	БухгалтерскийУчетСервер.ОтразитьДвижениеОСНУ(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьПродажиОсновныхСредств(ДополнительныеСвойства, Движения, Отказ);
	
	// Переход на метод начисления.
	Если Дата >= Дата(2021, 01, 01) Тогда 
		БухгалтерскийУчетСервер.ОтразитьОборотыПоДаннымЕдиногоНалога(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;	
	
	// Переход на ЭСФ.
	Если Дата < Дата(2020, 07, 01) Тогда 
		БухгалтерскийУчетСервер.ОтразитьСчетаФактурыВыписанные(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет контроль противоречий.
//
Процедура ВыполнитьПредварительныйКонтроль(Отказ)
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	// Проверка наличия серии и номера СФ в базе.
	Если ЗначениеЗаполнено(СерияБланкаСФ) И СерияБланкаСФ <> "ДПБУ" Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	БланкиСчетовФактурОбороты.СерияБланкаСФ КАК СерияБланкаСФ,
			|	БланкиСчетовФактурОбороты.Регистратор КАК Регистратор,
			|	ЕСТЬNULL(БланкиСчетовФактурОбороты.КоличествоРасход, 0) КАК КоличествоРасход,
			|	ЕСТЬNULL(БланкиСчетовФактурОбороты.КоличествоПриход, 0) КАК КоличествоПриход
			|ПОМЕСТИТЬ ВременнаяТаблицаБланкиСчетовФактур
			|ИЗ
			|	РегистрНакопления.БланкиСчетовФактур.Обороты(
			|			,
			|			&КонецПериода,
			|			Авто,
			|			Организация = &Организация
			|				И СерияБланкаСФ = &СерияБланкаСФ
			|				И НомерБланкаСФ = &НомерБланкаСФ) КАК БланкиСчетовФактурОбороты
			|ГДЕ
			|	НЕ БланкиСчетовФактурОбороты.Регистратор = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВременнаяТаблицаБланкиСчетовФактур.СерияБланкаСФ КАК СерияБланкаСФ,
			|	ВременнаяТаблицаБланкиСчетовФактур.КоличествоПриход КАК КоличествоПриход
			|ИЗ
			|	ВременнаяТаблицаБланкиСчетовФактур КАК ВременнаяТаблицаБланкиСчетовФактур
			|ГДЕ
			|	ВременнаяТаблицаБланкиСчетовФактур.КоличествоПриход > 0
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВременнаяТаблицаБланкиСчетовФактур.СерияБланкаСФ КАК СерияБланкаСФ,
			|	ВременнаяТаблицаБланкиСчетовФактур.Регистратор КАК Регистратор,
			|	ВременнаяТаблицаБланкиСчетовФактур.КоличествоРасход КАК КоличествоРасход
			|ИЗ
			|	ВременнаяТаблицаБланкиСчетовФактур КАК ВременнаяТаблицаБланкиСчетовФактур
			|ГДЕ
			|	ВременнаяТаблицаБланкиСчетовФактур.КоличествоРасход > 0";
		
		КонецПериода = ?(ЗначениеЗаполнено(ДатаСФ),ДатаСФ, Дата);
		
		Запрос.УстановитьПараметр("КонецПериода", 	КонецДня(КонецПериода));
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("СерияБланкаСФ", СерияБланкаСФ);
		Запрос.УстановитьПараметр("НомерБланкаСФ", НомерБланкаСФ);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		              
		Если МассивРезультатов[1].Пустой() Тогда
			ТекстСообщения = НСтр("ru = 'Указанных серии или номера СФ нет в базе. Необходимо оформить документ ""Поступление бланков счетов-фактур"".'");
			БухгалтерскийУчетСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения,,,, Отказ);	
		ИначеЕсли НЕ МассивРезультатов[2].Пустой() Тогда
			ВыборкаДетальныеЗаписи = МассивРезультатов[2].Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Указанные серия и номер СФ уже использованы. %1.'"), ВыборкаДетальныеЗаписи.Регистратор);
			БухгалтерскийУчетСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения,,,, Отказ);	
		КонецЕсли;			
	КонецЕсли;	
	
	// Проверка ставок НСП
	Если Дата >= Дата(2022,01,01) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Товары.СтавкаНСП КАК СтавкаНСП
		|ПОМЕСТИТЬ ВременнаяТаблицаТоварыВозврат
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Услуги.СтавкаНСП КАК СтавкаНСП
		|ПОМЕСТИТЬ ВременнаяТаблицаУслугиВозврат
		|ИЗ
		|	&Услуги КАК Услуги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОС.СтавкаНСП КАК СтавкаНСП
		|ПОМЕСТИТЬ ВременнаяТаблицаОСВозврат
		|ИЗ
		|	&ОС КАК ОС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВременнаяТаблицаТоварыВозврат.СтавкаНСП КАК СтавкаНСП
		|ИЗ
		|	ВременнаяТаблицаТоварыВозврат КАК ВременнаяТаблицаТоварыВозврат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВременнаяТаблицаУслугиВозврат.СтавкаНСП КАК СтавкаНСП
		|ИЗ
		|	ВременнаяТаблицаУслугиВозврат КАК ВременнаяТаблицаУслугиВозврат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВременнаяТаблицаОСВозврат.СтавкаНСП КАК СтавкаНСП
		|ИЗ
		|	ВременнаяТаблицаОСВозврат КАК ВременнаяТаблицаОСВозврат";
		
		Запрос.УстановитьПараметр("Товары", Товары);
		Запрос.УстановитьПараметр("Услуги", Услуги);
		Запрос.УстановитьПараметр("ОС", 	ОС);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		// Товары
		Если НЕ МассивРезультатов[3].Пустой() И МассивРезультатов[3].Выбрать().Количество() >= 2 Тогда
			ТекстСообщения = НСтр("ru = 'На закладке ""Товары"" значения ставок НСП должны быть одинаковыми.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,, "Объект.Товары", Отказ);	
		КонецЕсли;
		
		// Услуги
		Если НЕ МассивРезультатов[4].Пустой() И МассивРезультатов[4].Выбрать().Количество() >= 2 Тогда
			ТекстСообщения = НСтр("ru = 'На закладке ""Услуги"" значения ставок НСП должны быть одинаковыми.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,, "Объект.Услуги", Отказ);	
		КонецЕсли;
		
		// ОС
		Если НЕ МассивРезультатов[5].Пустой() И МассивРезультатов[5].Выбрать().Количество() >= 2 Тогда
			ТекстСообщения = НСтр("ru = 'На закладке ""ОС"" значения ставок НСП должны быть одинаковыми.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,, "Объект.ОС", Отказ);	
		КонецЕсли;
	КонецЕсли;	

	
КонецПроцедуры

// Процедура заполнения реквизитов "КорректировкаСерияБланкаСФ",
// "КорректировкаНомерБланкаСФ" и "КорректировкаДатаСФ".
Процедура ЗаполнитьДанныеКорректировкиСФ(ДокументРеализации)

	Если ДокументРеализации.СерияБланкаСФ <> "" Тогда
		КорректировкаСерияБланкаСФ 	= ДокументРеализации.СерияБланкаСФ;
		КорректировкаНомерБланкаСФ 	= ДокументРеализации.НомерБланкаСФ;
		КорректировкаДатаСФ 		= ДокументРеализации.ДатаСФ;
		
	Иначе
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СчетаФактурыВыписанные.СерияБланкаСФ КАК СерияБланкаСФ,
			|	СчетаФактурыВыписанные.НомерБланкаСФ КАК НомерБланкаСФ,
			|	СчетаФактурыВыписанные.ДатаСФ КАК ДатаСФ
			|ИЗ
			|	РегистрСведений.СчетаФактурыВыписанные КАК СчетаФактурыВыписанные
			|ГДЕ
			|	СчетаФактурыВыписанные.Организация = &Организация
			|	И СчетаФактурыВыписанные.Документ = &Документ";
		Запрос.УстановитьПараметр("Организация", ДокументРеализации);
		Запрос.УстановитьПараметр("Документ", ДокументРеализации);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			КорректировкаСерияБланкаСФ 	= Выборка.СерияБланкаСФ;
			КорректировкаНомерБланкаСФ 	= Выборка.НомерБланкаСФ;
			КорректировкаДатаСФ 		= Выборка.ДатаСФ;	
		КонецЕсли;	
	КонецЕсли;	

КонецПроцедуры

// Процедура рассчитывает суммы табличных частей в валюте регламентированного учета
//
Процедура РассчитатьСуммыВРегламентированнойВалюте()

	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		
		МассивТабличныхЧастей = Новый Массив();
		МассивТабличныхЧастей.Добавить(Товары);
		МассивТабличныхЧастей.Добавить(Услуги);
		МассивТабличныхЧастей.Добавить(ОС);
		
		Для Каждого ТабличнаяЧасть Из МассивТабличныхЧастей Цикл
			Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл					
				СтрокаТабличнойЧасти.СуммаВВалютеРеглУчета 		 		= СтрокаТабличнойЧасти.Сумма;
				СтрокаТабличнойЧасти.СуммаНДСВВалютеРеглУчета 	 		= СтрокаТабличнойЧасти.СуммаНДС;
				СтрокаТабличнойЧасти.СуммаНСПВВалютеРеглУчета 	 		= СтрокаТабличнойЧасти.СуммаНСП;
				СтрокаТабличнойЧасти.СуммаСкидкиВВалютеРеглУчета 		= СтрокаТабличнойЧасти.СуммаСкидки;
				СтрокаТабличнойЧасти.СуммаДоходаВВалютеРеглУчета 		= СтрокаТабличнойЧасти.СуммаДохода;
				СтрокаТабличнойЧасти.ВсегоВВалютеРеглУчета 				= СтрокаТабличнойЧасти.Всего;
				СтрокаТабличнойЧасти.СуммаНДССкидкиВВалютеРеглУчета 	= СтрокаТабличнойЧасти.СуммаНДССкидки;
				СтрокаТабличнойЧасти.СуммаНСПСкидкиВВалютеРеглУчета 	= СтрокаТабличнойЧасти.СуммаНСПСкидки;
				СтрокаТабличнойЧасти.СуммаДоходаСкидкиВВалютеРеглУчета  = СтрокаТабличнойЧасти.СуммаДоходаСкидки;
				
				Если ТабличнаяЧасть = Товары И РеализацияСДоначислениемНДС Тогда 
					СтрокаТабличнойЧасти.СуммаДоначисленияВВалютеРеглУчета 	= СтрокаТабличнойЧасти.СуммаДоначисления;
					СтрокаТабличнойЧасти.СуммаДоначисленияНДСВВалютеРеглУчета = СтрокаТабличнойЧасти.СуммаДоначисленияНДС;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(Дата, Организация);	
		МассивТабличныхЧастей = Новый Массив();
		МассивТабличныхЧастей.Добавить(Товары);
		МассивТабличныхЧастей.Добавить(Услуги);
		МассивТабличныхЧастей.Добавить(ОС);
		
		КурсРасчета 	 = ?(КурсВозврата = 0, Курс, КурсВозврата);
		КратностьРасчета = ?(КурсВозврата = 0, Кратность, 1);
		
		Для Каждого ТабличнаяЧасть Из МассивТабличныхЧастей Цикл
			
			Если ТабличнаяЧасть = Товары Тогда
				ИмяТабличнойЧасти = "Товары"; 
			ИначеЕсли ТабличнаяЧасть = Услуги Тогда
				ИмяТабличнойЧасти = "Услуги";	
			Иначе
				ИмяТабличнойЧасти = "ОС";	
			КонецЕсли;	
			
			ПараметрыРасчета = ПодготовитьПараметрыРасчета(ИмяТабличнойЧасти, ДанныеУчетнойПолитики);
			
			Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		
				// Структура для пересчета и заполнения суммами в валюте регламетированного учета.
				ДанныеВВалютеРеглУчета = Новый Структура();	
				ДанныеВВалютеРеглУчета.Вставить("Всего", СтрокаТабличнойЧасти.Всего);
				ДанныеВВалютеРеглУчета.Вставить("СуммаНДС", СтрокаТабличнойЧасти.СуммаНДС);
				ДанныеВВалютеРеглУчета.Вставить("СуммаНСП", СтрокаТабличнойЧасти.СуммаНСП);
				ДанныеВВалютеРеглУчета.Вставить("ПроцентСкидкиНаценки", СтрокаТабличнойЧасти.ПроцентСкидкиНаценки);
				ДанныеВВалютеРеглУчета.Вставить("СтавкаНДС", ПараметрыРасчета.СтавкаНДС);
				ДанныеВВалютеРеглУчета.Вставить("СтавкаНСП", СтрокаТабличнойЧасти.СтавкаНСП);
				
				Если ВидСкидкиНаценки = Перечисления.ВидыСкидокНаценок.СуммаПоСтроке Тогда
					ДанныеВВалютеРеглУчета.Вставить("СуммаСкидки", Окр(СтрокаТабличнойЧасти.СуммаСкидки * КурсРасчета / КратностьРасчета, 2));	
				Иначе	
					ДанныеВВалютеРеглУчета.Вставить("СуммаСкидки", СтрокаТабличнойЧасти.СуммаСкидки);
				КонецЕсли;
				
				Если СуммаВключаетНалоги Тогда
					ДанныеВВалютеРеглУчета.Вставить("Сумма", Окр(СтрокаТабличнойЧасти.Сумма * КурсРасчета / КратностьРасчета, 2));
					ДанныеВВалютеРеглУчета.Вставить("СуммаДохода", СтрокаТабличнойЧасти.СуммаДохода);	
				Иначе
					ДанныеВВалютеРеглУчета.Вставить("Сумма", СтрокаТабличнойЧасти.Сумма);
					ДанныеВВалютеРеглУчета.Вставить("СуммаДохода", Окр(СтрокаТабличнойЧасти.СуммаДохода * КурсРасчета / КратностьРасчета, 2));	
				КонецЕсли;
				
				Если ТабличнаяЧасть <> ОС Тогда
					ДанныеВВалютеРеглУчета.Вставить("Цена", Окр(СтрокаТабличнойЧасти.Цена * КурсРасчета / КратностьРасчета, 2));
					ДанныеВВалютеРеглУчета.Вставить("Количество", СтрокаТабличнойЧасти.Количество);	
				КонецЕсли;				
				
				ДанныеВВалютеРеглУчета.Вставить("СуммаНДССкидки", СтрокаТабличнойЧасти.СуммаНДССкидки);
				ДанныеВВалютеРеглУчета.Вставить("СуммаНСПСкидки", СтрокаТабличнойЧасти.СуммаНСПСкидки);
				ДанныеВВалютеРеглУчета.Вставить("СуммаДоходаСкидки", СтрокаТабличнойЧасти.СуммаДоходаСкидки);
				
				Если ТабличнаяЧасть = Товары И РеализацияСДоначислениемНДС Тогда 
					ДанныеВВалютеРеглУчета.Вставить("СуммаДоначисления", Окр(СтрокаТабличнойЧасти.СуммаДоначисления * КурсРасчета / КратностьРасчета, 2));
					ДанныеВВалютеРеглУчета.Вставить("СуммаДоначисленияНДС", Окр(СтрокаТабличнойЧасти.СуммаДоначисленияНДС * КурсРасчета / КратностьРасчета, 2));
				КонецЕсли;

				Если СуммаВключаетНалоги Тогда					
					Если ВидСкидкиНаценки <> Перечисления.ВидыСкидокНаценок.СуммаПоСтроке Тогда
						ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(ДанныеВВалютеРеглУчета);
					КонецЕсли;	
						
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(ДанныеВВалютеРеглУчета, ПараметрыРасчета);	
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(ДанныеВВалютеРеглУчета);
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(ДанныеВВалютеРеглУчета, Истина);
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСкидкиСтрокиТабличнойЧасти(ДанныеВВалютеРеглУчета);
					
				Иначе
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(ДанныеВВалютеРеглУчета, ПараметрыРасчета);	
					
					Если ВидСкидкиНаценки <> Перечисления.ВидыСкидокНаценок.СуммаПоСтроке Тогда
						ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(ДанныеВВалютеРеглУчета);
					КонецЕсли;
					
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(ДанныеВВалютеРеглУчета, ПараметрыРасчета);		
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(ДанныеВВалютеРеглУчета);
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСкидкиСтрокиТабличнойЧасти(ДанныеВВалютеРеглУчета);
				КонецЕсли;
									
				СтрокаТабличнойЧасти.СуммаВВалютеРеглУчета 		 		= ДанныеВВалютеРеглУчета.Сумма;
				СтрокаТабличнойЧасти.СуммаНДСВВалютеРеглУчета 	 		= ДанныеВВалютеРеглУчета.СуммаНДС;
				СтрокаТабличнойЧасти.СуммаНСПВВалютеРеглУчета 	 		= ДанныеВВалютеРеглУчета.СуммаНСП;
				СтрокаТабличнойЧасти.СуммаДоходаВВалютеРеглУчета 		= ДанныеВВалютеРеглУчета.СуммаДохода;
				СтрокаТабличнойЧасти.ВсегоВВалютеРеглУчета 		 		= ДанныеВВалютеРеглУчета.Всего;
				СтрокаТабличнойЧасти.СуммаСкидкиВВалютеРеглУчета 		= ДанныеВВалютеРеглУчета.СуммаСкидки;
				СтрокаТабличнойЧасти.СуммаНДССкидкиВВалютеРеглУчета 	= ДанныеВВалютеРеглУчета.СуммаНДССкидки;
				СтрокаТабличнойЧасти.СуммаНСПСкидкиВВалютеРеглУчета 	= ДанныеВВалютеРеглУчета.СуммаНСПСкидки;
				СтрокаТабличнойЧасти.СуммаДоходаСкидкиВВалютеРеглУчета  = ДанныеВВалютеРеглУчета.СуммаДоходаСкидки;
				Если ДанныеВВалютеРеглУчета.Свойство("СуммаДоначисления") Тогда
					СтрокаТабличнойЧасти.СуммаДоначисленияВВалютеРеглУчета 	= ДанныеВВалютеРеглУчета.СуммаДоначисления;
					СтрокаТабличнойЧасти.СуммаДоначисленияНДСВВалютеРеглУчета = ДанныеВВалютеРеглУчета.СуммаДоначисленияНДС;
				КонецЕсли;
			КонецЦикла;	
		КонецЦикла;			
	КонецЕсли;	
КонецПроцедуры

Функция ПодготовитьПараметрыРасчета(ИмяТабличнойЧасти, ДанныеУчетнойПолитики, СчитатьОтДохода = Ложь, УказыватьТочностьЦены = Ложь) Экспорт

	ПараметрыРасчета = ОбработкаТабличныхЧастейКлиентСервер.ШаблонПараметровРасчета();
	
	ПараметрыРасчета.Период = Дата;
	ПараметрыРасчета.Организация = Организация;
	// СуммаВключаетНалоги - всегда ИСТИНА,
	// потому что расчет налогов идет от "Всего", а "Всего" всегда с налогами.
	ПараметрыРасчета.СуммаВключаетНалоги = Истина;
	ПараметрыРасчета.БезналичныйРасчет = БезналичныйРасчет;
	ПараметрыРасчета.СчитатьОтДохода = СчитатьОтДохода;
	ПараметрыРасчета.ИмяТабличнойЧасти = ИмяТабличнойЧасти;
	ПараметрыРасчета.СчитатьСкидкуОтдельно = Истина;
	ПараметрыРасчета.Точность = ?(УказыватьТочностьЦены, ТочностьЦены, ПараметрыРасчета.Точность);

	ПараметрыРасчета.СтавкаНДС = ?(ДанныеУчетнойПолитики.ПлательщикНДС, СтавкаНДС, Справочники.СтавкиНДС.ПустаяСсылка());
	
	ПараметрыРасчета.СтавкаНСП = ?(ДанныеУчетнойПолитики.ПлательщикНСП, ?(ИмяТабличнойЧасти = "Услуги",СтавкаНСПУслуги,СтавкаНСП), Справочники.СтавкиНСП.ПустаяСсылка());
	
	ПараметрыРасчета.ПризнакСтраныЕАЭС = ?(Контрагент.ПризнакСтраны = Перечисления.ПризнакиСтраны.ЕАЭС, Истина, Ложь);
	ПараметрыРасчета.ПризнакСтраныИмпортЭкспорт = ?(Контрагент.ПризнакСтраны = Перечисления.ПризнакиСтраны.ИмпортЭкспорт, Истина, Ложь);
	
	Возврат ПараметрыРасчета;
	
КонецФункции

#КонецОбласти	

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли