#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента);
	
	ОсновнойСклад = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойСклад");

	ПрефиксНоменклатуры = "";
	
	// Всегда берется самая первая запись.
	ДанныеУчетнойПолитики = ПолучитьДанныеУчетнойПолитики(Объект.Организация);
	
	Если Объект.РазделУчета = "Денежные средства" Тогда 
		Для Каждого СтрокаТабличнойЧасти Из Объект.ДенежныеСредства Цикл 
			СтруктураДанные = ПолучитьДанныеДенежныеСредстваБанковскийСчетКассаПриИзменении(СтрокаТабличнойЧасти.БанковскийСчетКасса);
			СтрокаТабличнойЧасти.СчетУчета = СтруктураДанные.СчетУчета;
		КонецЦикла;
	ИначеЕсли Объект.РазделУчета = "Основные средства" Тогда 
		ЗаполнитьПризнакиПоГруппамИмущества();
		УстановитьОтборДляСписковГруппИмущества();
		ЗаполнитьОтборЗемельныйНалог();
		УстановитьОтборЗемельныйНалог();
	ИначеЕсли Объект.РазделУчета = "Прочее" Тогда 	
		Если Параметры.Ключ.Пустая() Тогда
			УстановитьНачальныеСвойстваСубконтоТаблицы();
		КонецЕсли;		
	КонецЕсли;	
	
	УстановитьПараметрыВыбора();	
	
	// ГрупповоеИзменениеСтрок
	ЗаполнитьСписокДействий("МБП");
	ГрупповоеИзменениеСтрокСервер.ПриСозданииНаСервере(НаборЭлементовГрупповогоИзмененияСтрокСервер("МБП"), ЭтотОбъект.МБПИзменениеСтрокДействие);
	МБПИзменениеСтрокДействиеПриОткрытии = МБПИзменениеСтрокДействие;
	УстановитьПометку("МБП", Истина);
	// Конец ГрупповоеИзменениеСтрок
	
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	
	УстановитьУсловноеОформление();

	// РаботаСФормами
	РаботаСФормамиСервер.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = ПодключаемоеОборудованиеБППовтИсп.ИспользоватьПодключаемоеОборудование();
	// Конец ПодключаемоеОборудование

КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	Если Объект.РазделУчета = "Прочее" Тогда 	
		УстановитьНачальныеСвойстваСубконтоТаблицы();
	КонецЕсли;	
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом 
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// ГрупповоеИзменениеСтрок
	ОпределитьОбъектИзменений("МБП");
	// Конец ГрупповоеИзменениеСтрок
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	Если ИспользоватьПодключаемоеОборудование Тогда 
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	КонецЕсли;	
	// Конец ПодключаемоеОборудование
КонецПроцедуры    

// Процедура - обработчик события ПриЗакрытии.
//
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если НЕ ЗавершениеРаботы Тогда
		// ГрупповоеИзменениеСтрок
		СохранитьТекущееДействиеИзмененияСтрок();
		// Конец ГрупповоеИзменениеСтрок
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если ИспользоватьПодключаемоеОборудование Тогда 
		МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	КонецЕсли;	
	// Конец ПодключаемоеОборудование
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	
	Если Объект.РазделУчета = "Денежные средства" Тогда 
		Для Каждого СтрокаТабличнойЧасти Из Объект.ДенежныеСредства Цикл 
			СтруктураДанные = ПолучитьДанныеДенежныеСредстваБанковскийСчетКассаПриИзменении(СтрокаТабличнойЧасти.БанковскийСчетКасса);
			СтрокаТабличнойЧасти.СчетУчета = СтруктураДанные.СчетУчета;
		КонецЦикла;
	ИначеЕсли Объект.РазделУчета = "Основные средства" Тогда 
		ЗаполнитьПризнакиПоГруппамИмущества();
		ЗаполнитьОтборЗемельныйНалог();
	ИначеЕсли Объект.РазделУчета = "Прочее" Тогда 
		УстановитьНачальныеСвойстваСубконтоТаблицы();
	КонецЕсли;	
	
	// ГрупповоеИзменениеСтрок
	Если Элементы.ГруппаМБПИзменениеСтрок.Видимость Тогда
		УстановитьПометку("МБП", Истина);
	КонецЕсли;
	// Конец ГрупповоеИзменениеСтрок
	
	// РаботаСФормами
	РаботаСФормамиСервер.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчета.ПослеЗаписиНаСервере(ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ПодборНоменклатурыПроизведен" 
		И ТипЗнч(Параметр) = Тип("Структура")
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор Тогда
		
		АдресЗапасовВХранилище = Параметр.АдресЗапасовВХранилище;
		ПолучитьТоварыИзХранилища(АдресЗапасовВХранилище);
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			// Преобразуем предварительно к ожидаемому формату.
			Если Параметр[1] = Неопределено Тогда
				ТекШтрихкод = Параметр[0]; // Достаем штрихкод из основных данных
			Иначе
				ТекШтрихкод = Параметр[1][1]; // Достаем штрихкод из дополнительных данных
			КонецЕсли;
			
			ПоискПоШтрихкодуЗавершение(ТекШтрихкод, Новый Структура("ТекШтрихкод, ИмяТабличнойЧасти", ТекШтрихкод, "Товары"));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
	// Всегда берется самая первая запись.
	ДанныеУчетнойПолитики = ПолучитьДанныеУчетнойПолитики(Объект.Организация);
	
	Если НЕ ЗначениеЗаполнено(ДанныеУчетнойПолитики.СпособОценкиТМЗ) Тогда 
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Для организации %1 не заполнена учетная политика.'"), Объект.Организация);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;	
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоТаблицыПриИзмененииОрганизации(
		Объект.Прочее,
		ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода РазделУчета.
//
&НаКлиенте
Процедура РазделУчетаПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
	
	Объект.ОС.Очистить();
	Объект.ГруппаНалоговогоУчета.Очистить();
	Объект.НалоговаяДекларация.Очистить();
	Объект.РасчетыСПерсоналом.Очистить();
	Объект.ДенежныеСредства.Очистить();
	Объект.Товары.Очистить();
	Объект.Прочее.Очистить();
	Объект.СчетУчета = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка");
	Объект.МБП.Очистить();
	
КонецПроцедуры 

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Асинх Процедура СкладПриИзменении(Элемент)
		
	Если НЕ ЗначениеЗаполнено(ОсновнойСклад)
		И ЗначениеЗаполнено(Объект.Склад) Тогда 
		ТекстВопроса = НСтр("ru = 'Использовать данный склад как основной для подстановки в документы?'");
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
        
        Если Ответ = КодВозвратаДиалога.Нет Тогда
            Возврат;  
		КонецЕсли;
		
		ОсновнойСклад = Объект.Склад;
		ОбщегоНазначенияБПВызовСервера.УстановитьЗначениеПоУмолчанию("ОсновнойСклад", ОсновнойСклад);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ЭксплуатируемыеМБП.
//
&НаКлиенте
Процедура ЭксплуатируемыеМБППриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
	ЗаполнитьСписокДействий("МБП");
КонецПроцедуры

&НаКлиенте
Асинх Процедура НеПринятыеКУчетуПриИзменении(Элемент)
	
	Если Объект.НеПринятыеКУчету 
		И НЕ Объект.ОС.Количество() = 0 Тогда 
        ТекстВопроса = СтрШаблон(НСтр("ru = 'Некоторые колонки табличной части ""%1"" будут очищены. Продолжить?'"), "Основные средства");
        Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
        
		Если Ответ = КодВозвратаДиалога.Нет Тогда 
			Объект.НеПринятыеКУчету = Ложь;
            Возврат;
		КонецЕсли;	
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл
            СтрокаТабличнойЧасти.ЛиквидационнаяСтоимость = 0 ;
			СтрокаТабличнойЧасти.НакопленнаяАмортизация = 0;
			СтрокаТабличнойЧасти.СрокСлужбы = '00010101';
			СтрокаТабличнойЧасти.СтоимостьДляРасчетаАмортизации = 0;
			СтрокаТабличнойЧасти.СпособНачисленияАмортизации = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПустаяСсылка");
			СтрокаТабличнойЧасти.СпособОтраженияРасходовПоАмортизации = ПредопределенноеЗначение("Справочник.СпособыОтраженияРасходовПоАмортизации.ПустаяСсылка");
			СтрокаТабличнойЧасти.ДатаВводаВЭксплуатацию = '00010101';
			СтрокаТабличнойЧасти.ГруппаНУ = ПредопределенноеЗначение("Справочник.ГруппыНалоговогоУчетаОС.ПустаяСсылка");
			СтрокаТабличнойЧасти.ГруппаИмущества = ПредопределенноеЗначение("Справочник.ГруппыИмущества.ПустаяСсылка");
			
			// Земельный налог.
			СтрокаТабличнойЧасти.КатегорияЗемель = Неопределено;
			СтрокаТабличнойЧасти.ВидЗемельногоУчастка = Неопределено;
			СтрокаТабличнойЧасти.КоличествоЧеловек = 0;
			СтрокаТабличнойЧасти.КоэффициентКоммерческогоИспользования = Неопределено;
			СтрокаТабличнойЧасти.Площадь = 0;
			СтрокаТабличнойЧасти.Область = Неопределено;
			СтрокаТабличнойЧасти.Район = Неопределено;
			СтрокаТабличнойЧасти.ДатаНачисленияЗамельногоНалога = '00010101';
   		КонецЦикла;
	КонецЕсли;    
	
	УстановитьВидимостьДоступностьЭлементов();	

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОС

&НаКлиенте
Процедура ОСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)	
	Если НоваяСтрока И Не Копирование И НЕ Объект.НеПринятыеКУчету Тогда
		СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;	
		СтрокаТабличнойЧасти.СпособНачисленияАмортизации = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.Линейный");	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОСПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ОСПослеУдаления(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ТранспортПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ТекстСообщения = НСтр("ru = 'Для добавления строки перейдите на вкладку ""Основные средства"".'");
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.ОС",, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура НедвижимостьПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ТекстСообщения = НСтр("ru = 'Для добавления строки перейдите на вкладку ""Основные средства"".'");
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.ОС",, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ЗемельныйНалогПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ТекстСообщения = НСтр("ru = 'Для добавления строки перейдите на вкладку ""Основные средства"".'");
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.ОС",, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ТранспортПередУдалением(Элемент, Отказ)
	ТекстСообщения = НСтр("ru = 'Для удаления строки перейдите на вкладку ""Основные средства"".'");
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.ОС",, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура НедвижимостьПередУдалением(Элемент, Отказ)
	ТекстСообщения = НСтр("ru = 'Для удаления строки перейдите на вкладку ""Основные средства"".'");
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.ОС",, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ЗемельныйНалогПередУдалением(Элемент, Отказ)
	ТекстСообщения = НСтр("ru = 'Для удаления строки перейдите на вкладку ""Основные средства"".'");
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.ОС",, Отказ);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОСОсновноеСредство.
//
&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("ОсновноеСредство", СтрокаТабличнойЧасти.ОсновноеСредство);

	СтруктураДанные = ПолучитьДанныеОСПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.СчетУчета = СтруктураДанные.СчетУчета;
	СтрокаТабличнойЧасти.ИнвентарныйНомер = СтруктураДанные.ИнвентарныйНомер;
КонецПроцедуры

&НаКлиенте
Процедура ОССчетУчетаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	ПрисваиватьИнвентарныеНомераДляНМА = ЗначениеКонстантыПрисваиватьИнвентарныеНомераДляНМА();
	СчетаУчетаНематериальныхАктивов = СписокСчетовНМА();
	ЭтоНМА = НЕ СчетаУчетаНематериальныхАктивов.Найти(СтрокаТабличнойЧасти.СчетУчета) = Неопределено;
	Если ЭтоНМА И НЕ ПрисваиватьИнвентарныеНомераДляНМА Тогда
		СтрокаТабличнойЧасти.ИнвентарныйНомер = "";
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.СчетУчета = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.Земля") Тогда 
		СтрокаТабличнойЧасти.ОтборЗамельныйНалог = Истина;
	Иначе 
		СтрокаТабличнойЧасти.ОтборЗамельныйНалог = Ложь;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОСГруппаИмуществаПриИзменении(Элемент)
	// Для отбора в списках Недвижимость и Транспорт.
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.ГруппаИмущества = ПредопределенноеЗначение("Справочник.ГруппыИмущества.ГИ2")
		Или СтрокаТабличнойЧасти.ГруппаИмущества = ПредопределенноеЗначение("Справочник.ГруппыИмущества.ГИ3") Тогда 
		
		СтрокаТабличнойЧасти.ГруппаИмуществаНедвижимость = Истина;
		СтрокаТабличнойЧасти.ГруппаИмуществаТранспорт = Ложь;
		
		СтрокаТабличнойЧасти.КатегорияИмущества = Неопределено;
		СтрокаТабличнойЧасти.КодПользователяИмущества = Неопределено;
		
	ИначеЕсли СтрокаТабличнойЧасти.ГруппаИмущества = ПредопределенноеЗначение("Справочник.ГруппыИмущества.ГИ4с")
		Или СтрокаТабличнойЧасти.ГруппаИмущества = ПредопределенноеЗначение("Справочник.ГруппыИмущества.ГИ4нс") Тогда 
		СтрокаТабличнойЧасти.ГруппаИмуществаНедвижимость = Ложь;
		СтрокаТабличнойЧасти.ГруппаИмуществаТранспорт = Истина;
		
		СтрокаТабличнойЧасти.КатегорияИмущества = ПредопределенноеЗначение("Справочник.КатегорияОбъектаИмущества.О");
		СтрокаТабличнойЧасти.КодПользователяИмущества = ПредопределенноеЗначение("Справочник.КодыПользователейИмущества.Собственник");		
	Иначе 
		СтрокаТабличнойЧасти.ГруппаИмуществаНедвижимость = Ложь;
		СтрокаТабличнойЧасти.ГруппаИмуществаТранспорт = Ложь;
		
		СтрокаТабличнойЧасти.КатегорияИмущества = Неопределено;
		СтрокаТабличнойЧасти.КодПользователяИмущества = Неопределено;

	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОСПервоначальнаяСтоимостьПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.СтоимостьДляРасчетаАмортизации = СтрокаТабличнойЧасти.ПервоначальнаяСтоимость - СтрокаТабличнойЧасти.ЛиквидационнаяСтоимость;

КонецПроцедуры

&НаКлиенте
Процедура ОСЛиквидационнаяСтоимостьПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.СтоимостьДляРасчетаАмортизации = СтрокаТабличнойЧасти.ПервоначальнаяСтоимость - СтрокаТабличнойЧасти.ЛиквидационнаяСтоимость;
	
КонецПроцедуры

&НаКлиенте
Процедура ОСДатаНачисленияНалогаНаИмуществоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.ДатаНачисленияНалогаНаИмущество = НачалоМесяца(СтрокаТабличнойЧасти.ДатаНачисленияНалогаНаИмущество);
КонецПроцедуры

&НаКлиенте
Процедура ЗемельныйНалогКатегорияЗемельПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	СтрокаТабличнойЧасти.ВидЗемельногоУчастка = ПредопределенноеЗначение("Перечисление.ВидыЗемельныхУчастков.ПустаяСсылка");
	СтрокаТабличнойЧасти.КоличествоЧеловек = 0;
	СтрокаТабличнойЧасти.Площадь = 0;
	СтрокаТабличнойЧасти.КоэффициентКоммерческогоИспользования = ПредопределенноеЗначение("Справочник.КоэффициентыКоммерческогоИспользования.ПустаяСсылка");
	СтрокаТабличнойЧасти.ЗональныйКоэффициент = ПредопределенноеЗначение("Справочник.ЗональныеКоэффициенты.ПустаяСсылка");
	СтрокаТабличнойЧасти.Область = ПредопределенноеЗначение("Справочник.Области.ПустаяСсылка");
	СтрокаТабличнойЧасти.Район = ПредопределенноеЗначение("Справочник.Районы.ПустаяСсылка");
	СтрокаТабличнойЧасти.СтавкаЗНВторойКатегории = 0;
	СтрокаТабличнойЧасти.ДатаНачисленияЗамельногоНалога = Дата(1,1,1);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДенежныеСредства

// Процедура - обработчик события ПриИзменении поля ввода БанковскийСчетКасса.
//
&НаКлиенте
Процедура ДенежныеСредстваБанковскийСчетКассаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДенежныеСредства.ТекущиеДанные;
	
	СтруктураДанные = ПолучитьДанныеДенежныеСредстваБанковскийСчетКассаПриИзменении(СтрокаТабличнойЧасти.БанковскийСчетКасса);
	
	СтрокаТабличнойЧасти.СчетУчета = СтруктураДанные.СчетУчета;
	СтрокаТабличнойЧасти.ВалютаДенежныхСредств = СтруктураДанные.Валюта;
	
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(
	СтрокаТабличнойЧасти.СуммаВал,
	СтрокаТабличнойЧасти.ВалютаДенежныхСредств,
	ДатаДокумента);
	
КонецПроцедуры // ДенежныеСредстваБанковскийСчетКассаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода ВалютаДенежныхСредств
// в строке табличной части ДенежныеСредства.
// Осуществляет пересчет суммы по сумме (вал.) в строке табличной части.
//
&НаКлиенте
Процедура ДенежныеСредстваВалютаДенежныхСредствПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДенежныеСредства.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
	СтрокаТабличнойЧасти.ВалютаДенежныхСредств,
	ДатаДокумента);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СуммаВал
// в строке табличной части ДенежныеСредства.
// Осуществляет пересчет суммы по сумме (вал.) в строке табличной части.
//
&НаКлиенте
Процедура ДенежныеСредстваСуммаВалПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДенежныеСредства.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
	СтрокаТабличнойЧасти.ВалютаДенежныхСредств,
	ДатаДокумента);
	
КонецПроцедуры // ДенежныеСредстваСуммаВалПриИзменении()

// Процедура - обработчик события НачалоВыбора поля ввода ВалютаДенежныхСредств.
// Табличной части ДенежныеСредства.
//
&НаКлиенте
Процедура ДенежныеСредстваВалютаДенежныхСредствНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ДенежныеСредства.ТекущиеДанные;
	
	// Если тип денежных средств изменился, необходимо выполнить соответствующие действия.
	Если ТипЗнч(СтрокаТабличнойЧасти.БанковскийСчетКасса) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Для банковского счета нельзя изменить валюту денежных средств.'"));
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры // ДенежныеСредстваВалютаДенежныхСредствНачалоВыбора()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Процедура - обработчик события ПриИзменении поля ввода Количество.
//
&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ТоварыЦена.
//
&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПрочее

// Процедура - обработчик события ПередНачаломИзменения таблицы Прочее.
//
&НаКлиенте
Процедура ПрочееПередНачаломИзменения(Элемент, Отказ)
	ТекущиеДанные = Элементы.Прочее.ТекущиеДанные;
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоСтроки(
		ЭтотОбъект, ТекущиеДанные, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования табличной части "Прочее".
//
&НаКлиенте
Процедура ПрочееПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти = Элементы.Прочее.ТекущиеДанные;
		СтрокаТабличнойЧасти.ВидСальдо = "СальдоДт";
		СтрокаТабличнойЧасти.Валюта = ВалютаРегламентированногоУчета;
		СтрокаТабличнойЧасти.Курс = 1;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура ПрочееВалютнаяСуммаПриИзменении(Элемент)
	// получаем текущую строку
	СтрокаТабличнойЧасти = Элементы.Прочее.ТекущиеДанные;
	
	// не удалось получить- возвращаемся
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РассчитатьСуммуВСтроке(СтрокаТабличнойЧасти);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Валюта.
//
&НаКлиенте
Процедура ПрочееВалютаПриИзменении(Элемент)
	// получаем текущую строку
	СтрокаТабличнойЧасти = Элементы.Прочее.ТекущиеДанные;
	
	// не удалось получить- возвращаемся
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Курс = ПолучитьКурсВалюты(СтрокаТабличнойЧасти.Валюта, ДатаДокумента); 
	РассчитатьСуммуВСтроке(СтрокаТабличнойЧасти);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Курс.
//
&НаКлиенте
Процедура ПрочееКурсПриИзменении(Элемент)
	// получаем текущую строку
	СтрокаТабличнойЧасти = Элементы.Прочее.ТекущиеДанные;
	
	// не удалось получить- возвращаемся
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РассчитатьСуммуВСтроке(СтрокаТабличнойЧасти);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СчетУчета.
//
&НаКлиенте
Процедура ПрочееСчетУчетаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Прочее.ТекущиеДанные;
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСчета(
		ЭтотОбъект, ТекущиеДанные, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ПрочееСубконто1.
//
&НаКлиенте
Процедура ПрочееСубконто1ПриИзменении(Элемент)
	ПриИзмененииСубконто(1);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ПрочееСубконто2.
//
&НаКлиенте
Процедура ПрочееСубконто2ПриИзменении(Элемент)
	ПриИзмененииСубконто(2);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ПрочееСубконто3.
//
&НаКлиенте
Процедура ПрочееСубконто3ПриИзменении(Элемент)
	ПриИзмененииСубконто(3);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМБП

&НаКлиенте
Процедура МБППриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	// ГрупповоеИзменениеСтрок
	Элемент.ТекущиеДанные.Пометка = Истина;
	// Конец ГрупповоеИзменениеСтрок
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода МБПКоличество.
//
&НаКлиенте
Процедура МБПКоличествоПриИзменении(Элемент)	
	СтрокаТабличнойЧасти = Элементы.МБП.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода МБПЦена.
//
&НаКлиенте
Процедура МБПЦенаПриИзменении(Элемент)	
	СтрокаТабличнойЧасти = Элементы.МБП.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);		
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода МБПСумма.
//
&НаКлиенте
Процедура МБПСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.МБП.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик события действия команды Подбор в табличную часть Товары.
// Открывает форму подбора.
//
&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	Если Объект.РазделУчета = "МБП" Тогда 
		РаботаСПодборомНоменклатурыКлиент.ОткрытьПодбор(ЭтаФорма, "МБП", "Поступление");
	ИначеЕсли Объект.РазделУчета = "Запасы" Тогда
		РаботаСПодборомНоменклатурыКлиент.ОткрытьПодбор(ЭтаФорма, "Товары", "Поступление");
	КонецЕсли;
КонецПроцедуры

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла
&НаКлиенте
Процедура ЗагрузитьТоварыИзФайла(Команда)
	
	Если ТребуетсяНастройкаАвторизацияИнтернетПоддержки() Тогда
		ТекстВопроса = НСтр("ru='Для загрузки данных из файла
			|необходимо подключиться к Интернет-поддержке пользователей.
			|Подключиться сейчас?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриПодключенииИнтернетПоддержки", ЭтотОбъект, Новый Структура("РазделУчета", Объект.РазделУчета));
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Подключиться'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
	Иначе
		ПродолжитьЗагрузкуТоваров();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРасчетыИзФайла(Команда)
	
	Если ТребуетсяНастройкаАвторизацияИнтернетПоддержки() Тогда
		ТекстВопроса = НСтр("ru='Для загрузки данных из файла
			|необходимо подключиться к Интернет-поддержке пользователей.
			|Подключиться сейчас?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриПодключенииИнтернетПоддержки", ЭтотОбъект, Новый Структура("РазделУчета", Объект.РазделУчета));
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Подключиться'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
	Иначе
		ПродолжитьЗагрузкуРасчетов();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьМБПИзФайла(Команда)
	
	Если ТребуетсяНастройкаАвторизацияИнтернетПоддержки() Тогда
		ТекстВопроса = НСтр("ru='Для загрузки данных из файла
			|необходимо подключиться к Интернет-поддержке пользователей.
			|Подключиться сейчас?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриПодключенииИнтернетПоддержки", ЭтотОбъект, Новый Структура("РазделУчета", Объект.РазделУчета));
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Подключиться'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
	Иначе
		ПродолжитьЗагрузкуМБП();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОСИзФайла(Команда)
	
	Если ТребуетсяНастройкаАвторизацияИнтернетПоддержки() Тогда
		ТекстВопроса = НСтр("ru='Для загрузки данных из файла
			|необходимо подключиться к Интернет-поддержке пользователей.
			|Подключиться сейчас?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриПодключенииИнтернетПоддержки", ЭтотОбъект, Новый Структура("РазделУчета", Объект.РазделУчета));
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Подключиться'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
	Иначе
		ПродолжитьЗагрузкуОС();
	КонецЕсли;

КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

// ПодключаемоеОборудование
&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ИмяТабличнойЧасти = ?(Объект.РазделУчета = "МБП", "МБП", "Товары");

	ТекШтрихкод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", 
		ЭтотОбъект, Новый Структура("ТекШтрихкод, ИмяТабличнойЧасти", ТекШтрихкод, ИмяТабличнойЧасти)), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
		
КонецПроцедуры
	
&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ТекШтрихкод = ?(Результат = Неопределено, ДополнительныеПараметры.ТекШтрихкод, Результат);
    
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
        ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1), ДополнительныеПараметры.ИмяТабличнойЧасти);
	КонецЕсли;	

КонецПроцедуры 
// Конец ПодключаемоеОборудование

&НаКлиенте
Асинх Процедура ЗаполнитьАвансы(Команда)
	
	Если Объект.АвансыИДоотгрузка.Количество() > 0 Тогда 
        ТекстВопроса = НСтр("ru = 'Табличная часть документа будет заполнена. Продолжить выполнение операции?'");
        Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
        
        Если Ответ = КодВозвратаДиалога.Нет Тогда
            Возврат;
		КонецЕсли;	
		
		Объект.АвансыИДоотгрузка.Очистить();
	КонецЕсли;    
	
	ЗаполнитьАвансыНаСервере();	

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла
&НаКлиенте
Процедура ЗагрузитьТоварыИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
    Если АдресЗагруженныхДанных = Неопределено Тогда 
        Возврат;
    КонецЕсли;
    ЗагрузитьТоварыИзФайлаНаСервере(АдресЗагруженныхДанных);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРасчетыИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
    Если АдресЗагруженныхДанных = Неопределено Тогда 
        Возврат;
    КонецЕсли;
    ЗагрузитьРасчетыИзФайлаНаСервере(АдресЗагруженныхДанных);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьМБПИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
    Если АдресЗагруженныхДанных = Неопределено Тогда 
        Возврат;
    КонецЕсли;
    ЗагрузитьМБПИзФайлаНаСервере(АдресЗагруженныхДанных);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОСИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
    Если АдресЗагруженныхДанных = Неопределено Тогда 
        Возврат;
    КонецЕсли;
    ЗагрузитьОСИзФайлаНаСервере(АдресЗагруженныхДанных);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость и доступность элементов.
//
&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()
	
	Элементы.СтраницаРасчетыСПерсоналом.Видимость = Ложь;
	Элементы.СтраницаОС.Видимость = Ложь;
	Элементы.СтраницаОСНедвижимость.Видимость = Ложь;
	Элементы.СтраницаОСТранспорт.Видимость = Ложь;
	Элементы.СтраницаОСЗемельныйНалог.Видимость = Ложь;
	Элементы.СтраницаНалоговыйУчет.Видимость = Ложь;
	Элементы.СтраницыДенежныеСредства.Видимость = Ложь;
	Элементы.СтраницаПрочее.Видимость = Ложь;
	Элементы.СтраницаТовары.Видимость = Ложь;
	Элементы.СчетУчета.Видимость = Ложь;
	Элементы.ЭксплуатируемыеМБП.Видимость = Ложь;
	Элементы.НеПринятыеКУчету.Видимость = Ложь;
	Элементы.СтраницаМБП.Видимость = Ложь;
	Элементы.СтраницаАвансыИДоотгрузка.Видимость = Ложь;

	Элементы.Склад.Видимость = Ложь;
	
	Если Объект.РазделУчета = "Расчеты с персоналом" Тогда  
		Элементы.СтраницаРасчетыСПерсоналом.Видимость = Истина;
	ИначеЕсли Объект.РазделУчета = "Основные средства" Тогда 	
		Элементы.СтраницаОС.Видимость = Истина;
		
		Элементы.НеПринятыеКУчету.Видимость = Истина;
		
		// Видимость страниц имущества.
		НайденныеСтрокиГИ2 = Объект.ОС.НайтиСтроки(Новый Структура("ГруппаИмущества", Справочники.ГруппыИмущества.ГИ2));
		НайденныеСтрокиГИ3 = Объект.ОС.НайтиСтроки(Новый Структура("ГруппаИмущества", Справочники.ГруппыИмущества.ГИ3));
		НайденныеСтрокиГИ4с = Объект.ОС.НайтиСтроки(Новый Структура("ГруппаИмущества", Справочники.ГруппыИмущества.ГИ4с));
		НайденныеСтрокиГИ4нс = Объект.ОС.НайтиСтроки(Новый Структура("ГруппаИмущества", Справочники.ГруппыИмущества.ГИ4нс));
		
		НедвижимостьКоличество = НайденныеСтрокиГИ2.Количество() + НайденныеСтрокиГИ3.Количество();
		ТранспортКоличество = НайденныеСтрокиГИ4с.Количество() + НайденныеСтрокиГИ4нс.Количество();
		ЗемельныйНалогКоличество = ?(Объект.НеПринятыеКУчету, 0, Объект.ОС.НайтиСтроки(Новый Структура("СчетУчета", ПланыСчетов.Хозрасчетный.Земля)).Количество());
		
		Элементы.СтраницаОСНедвижимость.Видимость = НедвижимостьКоличество > 0;
		Элементы.СтраницаОСТранспорт.Видимость = ТранспортКоличество > 0;
		Элементы.СтраницаОСЗемельныйНалог.Видимость = ЗемельныйНалогКоличество > 0;
		
		// Обновление заголовка подчиненных списков.
		Элементы.СтраницаОСНедвижимость.Заголовок = СтрШаблон(НСтр("ru = 'Недвижимость (%1)'"), НедвижимостьКоличество);
		Элементы.СтраницаОСТранспорт.Заголовок = СтрШаблон(НСтр("ru = 'Транспорт (%1)'"), ТранспортКоличество);
		Элементы.СтраницаОСЗемельныйНалог.Заголовок = СтрШаблон(НСтр("ru = 'Земельный налог (%1)'"), ЗемельныйНалогКоличество);
		
		// Видимость страницы ОСГруппа10 (Параметр выработки, Объем продукции).
		НайденнаяСтрокаСоСпособомПроизводственный = Объект.ОС.НайтиСтроки(Новый Структура("СпособНачисленияАмортизации", Перечисления.СпособыНачисленияАмортизацииОС.Производственный));
        КоличествоПроизводственный = НайденнаяСтрокаСоСпособомПроизводственный.Количество();
		Элементы.ОСГруппа10.Видимость = КоличествоПроизводственный > 0;
		
		// Видимость колонки Коэффициент ускорения
		НайденнаяСтрокаСоСпособомУмОстатка = Объект.ОС.НайтиСтроки(Новый Структура("СпособНачисленияАмортизации", Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка));
		КоличествоУмОстатка = НайденнаяСтрокаСоСпособомУмОстатка.Количество();
		Элементы.ОСКоэффициентУскорения.Видимость = КоличествоУмОстатка > 0;
		
		// Видимость колонок в зависимости от настройки "Не приятиые к учета"
		Элементы.ОСНазваниеДокументаПринятияКУчету.Видимость = НЕ Объект.НеПринятыеКУчету;
		Элементы.ОСНомерДокументаПринятияКУчету.Видимость 	 = НЕ Объект.НеПринятыеКУчету;
		Элементы.ОСМОЛ.Видимость 							 = НЕ Объект.НеПринятыеКУчету;
		Элементы.ОСПодразделение.Видимость 					 = НЕ Объект.НеПринятыеКУчету;
		Элементы.ОССпособПоступленияРегл.Видимость 			 = НЕ Объект.НеПринятыеКУчету;
		Элементы.ОСДатаНачисленияНалогаНаИмущество.Видимость = НЕ Объект.НеПринятыеКУчету;
		
	ИначеЕсли Объект.РазделУчета = "Налоговый учет" Тогда 	
		Элементы.СтраницаНалоговыйУчет.Видимость = Истина;
	ИначеЕсли Объект.РазделУчета = "Денежные средства" Тогда 	
		Элементы.СтраницыДенежныеСредства.Видимость = Истина;
	ИначеЕсли Объект.РазделУчета = "Запасы" Тогда 
		Элементы.СтраницаТовары.Видимость = Истина;
		Элементы.СчетУчета.Видимость = Истина;
		Элементы.Склад.Видимость = Истина;
	ИначеЕсли Объект.РазделУчета = "Прочее" Тогда 
		Элементы.СтраницаПрочее.Видимость = Истина;
	ИначеЕсли Объект.РазделУчета = "Прочее" Тогда 
		Элементы.СтраницаПрочее.Видимость = Истина;
	ИначеЕсли Объект.РазделУчета = "МБП" Тогда
		Элементы.СтраницаМБП.Видимость = Истина;
		Элементы.ЭксплуатируемыеМБП.Видимость = Истина;
		
		Если Объект.ЭксплуатируемыеМБП Тогда  
			Элементы.МБПСуммаИзноса.Видимость = Истина;
			Элементы.Склад.Видимость = Ложь;
			Элементы.МБПМОЛ.Видимость = Истина;
		Иначе 
			Элементы.МБПСуммаИзноса.Видимость = Ложь;
			Элементы.Склад.Видимость = Истина;
			Элементы.МБПМОЛ.Видимость = Ложь;
		КонецЕсли;
	ИначеЕсли Объект.РазделУчета = "Авансы и доотгрузка" Тогда
		Элементы.СтраницаАвансыИДоотгрузка.Видимость = Истина;	
	КонецЕсли;	                  
	
	Если Объект.НеПринятыеКУчету Тогда 
		Элементы.ОСЛиквидационнаяСтоимость.Видимость = Ложь;
		Элементы.ОСНакопленнаяАмортизация.Видимость = Ложь;
		Элементы.ОССрокСлужбы.Видимость = Ложь;
		Элементы.ОССтоимостьДляРасчетаАмортизации.Видимость = Ложь;
		Элементы.ОССпособНачисленияАмортизации.Видимость = Ложь;
		Элементы.ОССпособыОтраженияРасходовПоАмортизации.Видимость = Ложь;
		Элементы.ОСДатаВводаВЭксплуатацию.Видимость = Ложь;
		Элементы.ОСГруппаНУ.Видимость = Ложь;
		Элементы.ОСГруппаИмущества.Видимость = Ложь;
		Элементы.ОССчетУчетаПарныйСчет.Видимость = Ложь;
	Иначе 
		Элементы.ОСЛиквидационнаяСтоимость.Видимость = Истина;
		Элементы.ОСНакопленнаяАмортизация.Видимость = Истина;
		Элементы.ОССрокСлужбы.Видимость = Истина;
		Элементы.ОССтоимостьДляРасчетаАмортизации.Видимость = Истина;
		Элементы.ОССпособНачисленияАмортизации.Видимость = Истина;
		Элементы.ОССпособыОтраженияРасходовПоАмортизации.Видимость = Истина;
		Элементы.ОСДатаВводаВЭксплуатацию.Видимость = Истина;
		Элементы.ОСГруппаНУ.Видимость = Истина;
		Элементы.ОСГруппаИмущества.Видимость = Истина;
		Элементы.ОССчетУчетаПарныйСчет.Видимость = Истина;
	КонецЕсли;	
	
КонецПроцедуры 

// Процедура настройки условного оформления форм и динамических списков .
//
&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// Таблица Прочее Субконто1.
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПрочееСубконто1");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Прочее.Субконто1Доступность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Таблица Прочее Субконто2.
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПрочееСубконто2");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Прочее.Субконто2Доступность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Таблица Прочее Субконто3.
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПрочееСубконто3");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Прочее.Субконто3Доступность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Таблица Прочее Валюты.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПрочееВалюта");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПрочееКурс");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПрочееВалютнаяСумма");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Прочее.ВалютныйДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//Земельный налог // Сельхозугодья
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	// Поля.
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ЗемельныйНалогКоличествоЧеловек");
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ЗемельныйНалогКоэффициентКоммерческогоИспользования");
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ЗемельныйНалогЗональныйКоэффициент");
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ЗемельныйНалогОбласть");
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ЗемельныйНалогСтавкаЗНВторойКатегории");
	// Условия.
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОС.КатегорияЗемель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.КатегорииЗемель.Сельхозугодья;
	// Оформления.
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//Земельный налог // Приусадебные
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	// Поля.
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ЗемельныйНалогВидЗемельногоУчастка");
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ЗемельныйНалогКоличествоЧеловек");
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ЗемельныйНалогКоэффициентКоммерческогоИспользования");
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ЗемельныйНалогОбласть");
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ЗемельныйНалогРайон");
	// Условия.
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОС.КатегорияЗемель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.КатегорииЗемель.Приусадебные;
	// Оформления.
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//Земельный налог // Несельскохозяйственные
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	// Поля.
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ЗемельныйНалогВидЗемельногоУчастка");
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ЗемельныйНалогРайон");
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ЗемельныйНалогСтавкаЗНВторойКатегории");
	// Условия.
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОС.КатегорияЗемель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.КатегорииЗемель.Несельскохозяйственные;
	// Оформления.
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакиПоГруппамИмущества()
	Для Каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл 
		Если СтрокаТабличнойЧасти.ГруппаИмущества = ПредопределенноеЗначение("Справочник.ГруппыИмущества.ГИ2")
			Или СтрокаТабличнойЧасти.ГруппаИмущества = ПредопределенноеЗначение("Справочник.ГруппыИмущества.ГИ3") Тогда 
			
			СтрокаТабличнойЧасти.ГруппаИмуществаНедвижимость = Истина;
			СтрокаТабличнойЧасти.ГруппаИмуществаТранспорт = Ложь;
		ИначеЕсли СтрокаТабличнойЧасти.ГруппаИмущества = ПредопределенноеЗначение("Справочник.ГруппыИмущества.ГИ4с")
			Или СтрокаТабличнойЧасти.ГруппаИмущества = ПредопределенноеЗначение("Справочник.ГруппыИмущества.ГИ4нс") Тогда  
			
			СтрокаТабличнойЧасти.ГруппаИмуществаНедвижимость = Ложь;
			СтрокаТабличнойЧасти.ГруппаИмуществаТранспорт = Истина;
		Иначе 
			СтрокаТабличнойЧасти.ГруппаИмуществаНедвижимость = Ложь;
			СтрокаТабличнойЧасти.ГруппаИмуществаТранспорт = Ложь;
		КонецЕсли;		
	КонецЦикла;
КонецПроцедуры // ЗаполнитьПризнакиПоГруппамИмущества()

// Процедура - Установить отбор для списков групп имущества
//
&НаСервере
Процедура УстановитьОтборДляСписковГруппИмущества()
	// Отбор по станицам
	Элементы.Недвижимость.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("ГруппаИмуществаНедвижимость", Истина));
	Элементы.Транспорт.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("ГруппаИмуществаТранспорт", Истина));
КонецПроцедуры // УстановитьОтборДляСписковГруппИмущества()

&НаСервере
Процедура ЗаполнитьОтборЗемельныйНалог()
	Для Каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл 
		Если СтрокаТабличнойЧасти.СчетУчета = ПланыСчетов.Хозрасчетный.Земля Тогда 
			СтрокаТабличнойЧасти.ОтборЗамельныйНалог = Истина
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры // ЗаполнитьОтборЗамельныйНалог()

&НаСервере
Процедура УстановитьОтборЗемельныйНалог()
	// Отбор по станицам.
	Элементы.ЗемельныйНалог.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("ОтборЗамельныйНалог", Истина));
КонецПроцедуры // УстановитьОтборЗемельныйНалог()

// Процедура - Установить параметры выбора
//
&НаСервере
Процедура УстановитьПараметрыВыбора()
	// Основные средства.
	СчетаУчетаОсновныхСредств = БухгалтерскийУчетСервер.СчетаУчетаОсновныхСредств();
	СчетаУчетаНематериальныхАктивов = БухгалтерскийУчетСервер.СчетаУчетаНематериальныхАктивов();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУчетаОсновныхСредств, СчетаУчетаНематериальныхАктивов); 
	ФиксированныйМассивСчетов = Новый ФиксированныйМассив(СчетаУчетаОсновныхСредств);
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", ФиксированныйМассивСчетов);
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.ОССчетУчета.ПараметрыВыбора = НовыеПараметры;
	
	// Товары.
	СчетаУчетаТоваров = БухгалтерскийУчетСервер.СчетаУчетаТоваров();
	СчетаУчетаМБП = БухгалтерскийУчетСервер.СчетаУчетаМБП();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУчетаТоваров, СчетаУчетаМБП); 
	ФиксированныйМассивСчетов = Новый ФиксированныйМассив(СчетаУчетаТоваров);
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", ФиксированныйМассивСчетов);
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.СчетУчета.ПараметрыВыбора = НовыеПараметры;
КонецПроцедуры // УстановитьПараметрыВыбора()

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура - Установить пиктограмму комментария.
//
&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

// Процедура - Рассчитать сумму в строке
//
&НаКлиенте
Процедура РассчитатьСуммуВСтроке(СтрокаТабличнойЧасти)
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.ВалютнаяСумма * СтрокаТабличнойЧасти.Курс;
КонецПроцедуры // РассчитатьСуммуВСтроке()

// См. РаботаСКурсамиВалют.ПолучитьКурсВалюты.
&НаСервереБезКонтекста
Функция ПолучитьКурсВалюты(Валюта, ДатаКурса)
	Возврат РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, ДатаКурса).Курс;
КонецФункции // ПолучитьКурсВалюты()

// Получает набор данных с сервера для процедуры ОСПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеОСПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить(
		"ИнвентарныйНомер",
		БухгалтерскийУчетСервер.НовыйИнвентарныйНомерОС());
		
	СтруктураДанные.Вставить(
		"СчетУчета",
		ПланыСчетов.Хозрасчетный.Оборудование);
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОСПриИзменении()

// Получает набор данных с сервера для процедуры ДенежныеСредстваБанковскийСчетКассаПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДенежныеСредстваБанковскийСчетКассаПриИзменении(БанковскийСчетКасса)
	
	Если БанковскийСчетКасса = Неопределено Тогда 
		БанковскийСчетКасса = Справочники.Кассы.ПустаяСсылка();
	КонецЕсли;	
	
	СтруктураДанные = Новый Структура();
	
	Если ТипЗнч(БанковскийСчетКасса) = Тип("СправочникСсылка.Кассы") Тогда
		СтруктураДанные.Вставить("Валюта", БанковскийСчетКасса.ВалютаДенежныхСредств);
	ИначеЕсли ТипЗнч(БанковскийСчетКасса) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		СтруктураДанные.Вставить("Валюта", БанковскийСчетКасса.ВалютаДенежныхСредств);
	Иначе
		СтруктураДанные.Вставить("Валюта", Справочники.Валюты.ПустаяСсылка());
	КонецЕсли;
	
	СтруктураДанные.Вставить("СчетУчета", БанковскийСчетКасса.СчетУчета);

	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДенежныеСредстваБанковскийСчетКассаПриИзменении()

// Функция пересчитывает сумму из указанной валюты в валюту упр. учета.
//
// Параметры:      
//	СуммаВал  - Число                    - сумма в валюте, которую следует пересчитать.
//	Валюта    - Справочник.Ссылка.Валюты - валюте, из которой следует пересчитать.
// 	ДатаКурса - Дата                     - дата курса.
//
// Возвращаемое значение: 
//  Число - сумма в валюте упр. учета.
//
&НаСервереБезКонтекста
Функция ПересчитатьИзВалютыВВалютуУчета(СуммаВал, Валюта, ДатаКурса)
	
	Сумма = 0;
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		ВалютаУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		Сумма = РаботаСКурсамиВалют.ПересчитатьВВалюту(СуммаВал, Валюта, ВалютаУчета, ДатаКурса);  
	КонецЕсли;
	
	Возврат Сумма;
	
КонецФункции // ПересчитатьИзВалют()

// Процедура - обработчик подбора товаров.
//
&НаСервере
Процедура ПолучитьТоварыИзХранилища(АдресЗапасовВХранилище)
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Для Каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", СтрокаЗагрузки.Номенклатура));
		
		Если НайденныеСтроки.Количество() > 0 Тогда 
			Продолжить;
		КонецЕсли;	
		
		Если Объект.РазделУчета = "МБП" Тогда 
			СтрокаТабличнойЧасти = Объект.МБП.Добавить();
		ИначеЕсли Объект.РазделУчета = "Запасы" Тогда
			СтрокаТабличнойЧасти = Объект.Товары.Добавить();
		КонецЕсли; 
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаЗагрузки);
	КонецЦикла;
		
КонецПроцедуры // ПолучитьТоварыИзХранилища()

&НаСервере
Функция ТребуетсяНастройкаАвторизацияИнтернетПоддержки()
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
		Возврат Не МодульИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура ПриПодключенииИнтернетПоддержки(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПодключенияИнтернетПоддержки", ЭтотОбъект, ДополнительныеПараметры);
		МодульИнтернетПоддержкаПользователейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтернетПоддержкаПользователейКлиент");
		МодульИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОписаниеОповещения, ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияИнтернетПоддержки(Результат, ДополнительныеПараметры) Экспорт
	Если Не (ТипЗнч(Результат) = Тип("Структура")
		И ЗначениеЗаполнено(Результат.Логин)) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.РазделУчета = "Запасы" Тогда 
		ПродолжитьЗагрузкуТоваров();
	ИначеЕсли ДополнительныеПараметры.РазделУчета = "Расчеты с персоналом" Тогда
		ПродолжитьЗагрузкуРасчетов();
	ИначеЕсли ДополнительныеПараметры.РазделУчета = "МБП" Тогда
		ПродолжитьЗагрузкуМБП();
	ИначеЕсли ДополнительныеПараметры.РазделУчета = "Основные средства" Тогда
		ПродолжитьЗагрузкуОС();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЗагрузкуТоваров()

	ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "ВводНачальныхОстатков.Товары";
	ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка списка товаров из файла'");
	ПараметрыЗагрузки.ИмяМакетаСШаблоном = "ЗагрузкаИзФайлаТовары";
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Организация", Объект.Организация);
	ДополнительныеПараметры.Вставить("РазделУчета", Объект.РазделУчета);
	ПараметрыЗагрузки.ДополнительныеПараметры = ДополнительныеПараметры;
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьТоварыИзФайлаЗавершение", ЭтотОбъект);
	ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);

КонецПроцедуры // ПродолжитьЗагрузкуТоваров()

&НаКлиенте
Процедура ПродолжитьЗагрузкуРасчетов()

	ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "ВводНачальныхОстатков.РасчетыСПерсоналом";
	ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка списка расчетов из файла'");
	ПараметрыЗагрузки.ИмяМакетаСШаблоном = "ЗагрузкаИзФайлаРасчетыСПерсоналом";
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Организация", Объект.Организация);
	ДополнительныеПараметры.Вставить("РазделУчета", Объект.РазделУчета);
	ПараметрыЗагрузки.ДополнительныеПараметры = ДополнительныеПараметры;
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьРасчетыИзФайлаЗавершение", ЭтотОбъект);
	ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);

КонецПроцедуры // ПродолжитьЗагрузкуРасчетов()

&НаКлиенте
Процедура ПродолжитьЗагрузкуМБП()

	ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "ВводНачальныхОстатков.МБП";
	ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка списка МБП из файла'");
	ПараметрыЗагрузки.ИмяМакетаСШаблоном = "ЗагрузкаИзФайлаМБП";
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Организация", Объект.Организация);
	ДополнительныеПараметры.Вставить("РазделУчета", Объект.РазделУчета);
	ПараметрыЗагрузки.ДополнительныеПараметры = ДополнительныеПараметры;
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьМБПИзФайлаЗавершение", ЭтотОбъект);
	ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);

КонецПроцедуры // ПродолжитьЗагрузкуТоваров()

&НаКлиенте
Процедура ПродолжитьЗагрузкуОС()

	ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "ВводНачальныхОстатков.ОС";
	ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка списка ОС из файла'");
	ПараметрыЗагрузки.ИмяМакетаСШаблоном = "ЗагрузкаИзФайлаОС";
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Организация", Объект.Организация);
	ДополнительныеПараметры.Вставить("РазделУчета", Объект.РазделУчета);
	ПараметрыЗагрузки.ДополнительныеПараметры = ДополнительныеПараметры;
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьОСИзФайлаЗавершение", ЭтотОбъект);
	ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);

КонецПроцедуры // ПродолжитьЗагрузкуТоваров()

&НаСервере
Процедура ЗаполнитьАвансыНаСервере()
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьАвансы(ДатаДокумента);                           	
	ЗначениеВРеквизитФормы(Документ, "Объект");	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеУчетнойПолитики(Организация)
	Возврат РегистрыСведений.УчетнаяПолитикаОрганизаций.ПолучитьПервое(, Новый Структура("Организация", Организация));	
КонецФункции 

// Подготовка параметров для расчетов
//
// Возвращаемое значение:
//	Структура - разделенные данные URI
//		*ПризнакСтраныЕАЭС - Булево - признак страны ЕАЭС или нет
//		*ПризнакСтраныИмпортЭкспорт - Булево - признак страны ИмпортЭкспорт или нет
//		*СчитатьОтДохода - Булево - признак того, что расчет необходимо делать от реквизита "Доход"
//		*Точность - Булево - точность цены (количество знаков цены после запятой)
//
&НаСервере
Функция ПодготовитьПараметрыРасчета()
	Возврат ОбработкаТабличныхЧастейКлиентСервер.ШаблонПараметровРасчета();
КонецФункции

// ПодключаемоеОборудование

// Процедура - Получены штрихкоды
//
// Параметры:
//  ДанныеШтрихкодов	 - Структура/Массив - В зависимости от точки вызова передается структура (обработка сканера) или массив (обработка ТСД)
//  ИмяТабличнойЧасти	 - Строка	 - Имя табличной части для загрузки
//
&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрихкодов, ИмяТабличнойЧасти) Экспорт
	
	Модифицированность = Истина;
	
	НеДобавленныеШтрихкоды = ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов, ИмяТабличнойЧасти);
	
	// Неизвестные штрихкоды.
	Если НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды.Количество() > 0 Тогда
		Для Каждого СтруктураДанные Из НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды Цикл 
			СтрокаСообщения = СтрШаблон(НСтр("ru = 'Данные по штрихкоду не найдены: %1'"), СтруктураДанные.Штрихкод);
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		КонецЦикла;	
	// Штрихкоды некорректного типа.
	ИначеЕсли НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа.Количество() > 0 Тогда 
		Для Каждого СтруктураДанные Из НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа Цикл 
			СтрокаСообщения = СтрШаблон(НСтр("ru = 'Найденная по штрихкоду %1 номенклатура: ""%2"", не подходит для этой табличной части'"),
				СтруктураДанные.ТекШтрихкод, СтруктураДанные.Номенклатура);
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаСервереБезКонтекста
Функция ПолучитьДанныеПоШтрихкоду(ТекШтрихкод)
	
	Номенклатура = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьНоменклатуруПоШтрихкоду(ТекШтрихкод);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", Номенклатура);
	СтруктураДанные.Вставить("ТипНоменклатурыУслуга", ?(ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура"), Номенклатура.Услуга, Ложь));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеПоШтрихкоду()

// Функция - Заполнить по данным штрихкодов
//
// Параметры:
//  ДанныеШтрихкодов		 - 	 - Структура/Массив	 - В зависимости от точки вызова передается структура (обработка сканера) или массив (обработка ТСД)
//  ИмяТабличнойЧасти	 - Строка	 - Имя табличной части для загрузки
// 
// Возвращаемое значение:
//  Структура - Массивы неизвестных штрих кодов
//
&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов, ИмяТабличнойЧасти) 
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	Для каждого ТекШтрихкод Из МассивШтрихкодов Цикл
		СтруктураДанные = ПолучитьДанныеПоШтрихкоду(ТекШтрихкод);
		
		Если НЕ ЗначениеЗаполнено(СтруктураДанные.Номенклатура) Тогда 
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли СтруктураДанные.ТипНоменклатурыУслуга Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("ТекШтрихкод, Номенклатура", ТекШтрихкод, СтруктураДанные.Номенклатура));
		Иначе 
			СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти].Добавить();
			СтрокаТабличнойЧасти.Номенклатура = СтруктураДанные.Номенклатура;
			СтрокаТабличнойЧасти.Количество = ТекШтрихкод.Количество;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа",
		НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа);

КонецФункции // ЗаполнитьПоДаннымШтрихкодов()
// Конец ПодключаемоеОборудование

&НаСервереБезКонтекста
Функция ЗначениеКонстантыПрисваиватьИнвентарныеНомераДляНМА()
	
	Возврат Константы.ПрисваиватьИнвентарныеНомераДляНМА.Получить();
	
КонецФункции

&НаСервереБезКонтекста
Функция СписокСчетовНМА()
	
	Возврат БухгалтерскийУчетСервер.СчетаУчетаНематериальныхАктивов();	

КонецФункции

&НаСервереБезКонтекста
Функция ВалютаСубконто(ТекущееСубконто)
	Если ТипЗнч(ТекущееСубконто) =  Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда 
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущееСубконто, "ВалютаРасчетов");
	ИначеЕсли ТипЗнч(ТекущееСубконто) =  Тип("СправочникСсылка.Кассы")
		Или ТипЗнч(ТекущееСубконто) =  Тип("СправочникСсылка.БанковскиеСчета") Тогда 
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущееСубконто, "ВалютаДенежныхСредств");
	КонецЕсли;	
КонецФункции 

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииРаботаССубконто

&НаСервере
Процедура УстановитьНачальныеСвойстваСубконтоТаблицы()
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоТаблицы(
		Объект.Прочее,
		ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконто(Форма, ТекущееСубконто = Неопределено)

	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"ПрочееСубконто", "Субконто", "СчетУчета");
	
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	Результат.ПоляОбъекта.Вставить("Валютный", "ВалютныйДоступность");
	
	// Установка валюты из субконто.
	Если НЕ ТекущееСубконто = Неопределено Тогда 
		Если ТипЗнч(ТекущееСубконто) =  Тип("СправочникСсылка.ДоговорыКонтрагентов") 
			Или  ТипЗнч(ТекущееСубконто) =  Тип("СправочникСсылка.Кассы")
			Или ТипЗнч(ТекущееСубконто) =  Тип("СправочникСсылка.БанковскиеСчета") Тогда 
			Результат.ДопРеквизиты.Вставить("ВалютаСубконто", ВалютаСубконто(ТекущееСубконто));
			Результат.ЗаполнятьВалютуИзСубконто = Истина;
		КонецЕсли;	
	КонецЕсли;	
	
	Результат.СкрыватьСубконто = Ложь;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ПриИзмененииСубконто(НомерСубконто)
	
	СтрокаТабличнойЧасти = Элементы.Прочее.ТекущиеДанные;	
	ПараметрыУстановкиСвойствСубконто = ПараметрыУстановкиСвойствСубконто(ЭтотОбъект, СтрокаТабличнойЧасти["Субконто" + НомерСубконто]);
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСубконто(
		ЭтотОбъект, 
		СтрокаТабличнойЧасти,
		НомерСубконто, 
		ПараметрыУстановкиСвойствСубконто);
		
	// При изменении валюты.	
	Если ПараметрыУстановкиСвойствСубконто.ЗаполнятьВалютуИзСубконто Тогда 
		СтрокаТабличнойЧасти.Курс = ПолучитьКурсВалюты(СтрокаТабличнойЧасти.Валюта, ДатаДокумента); 
		РассчитатьСуммуВСтроке(СтрокаТабличнойЧасти);
	КонецЕсли;	
		
КонецПроцедуры
	
#КонецОбласти

#Область ГрупповоеИзменениеСтрок

&НаКлиенте
Процедура МБПСнятьФлажки(Команда)
	УстановитьПометку("МБП", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура МБПУстановитьФлажки(Команда)
	УстановитьПометку("МБП", Истина);
КонецПроцедуры

&НаКлиенте
Процедура МБПИзменитьСтроки(Команда)
	ПоказатьСкрытьПанельРедактирования("МБП", Истина);
КонецПроцедуры

&НаКлиенте
Процедура МБПВыполнитьДействие(Команда)
	ОбработатьТаблицу("МБП");
	НастроитьОформлениеПанелиРедактирования("МБП", 4);
КонецПроцедуры

&НаКлиенте
Процедура МБПОтменитьИзменения(Команда)
	ПоказатьСкрытьПанельРедактирования("МБП");
КонецПроцедуры

&НаКлиенте
Процедура МБПИзменениеСтрокДействиеПриИзменении(Элемент)
	ОпределитьОбъектИзменений("МБП");
	НастроитьОформлениеПанелиРедактирования("МБП", 2);
КонецПроцедуры

&НаКлиенте
Процедура МБПИзменениеСтрокЗначениеПриИзменении(Элемент)
	НастроитьОформлениеПанелиРедактирования("МБП", 3);
КонецПроцедуры

&НаСервере
Процедура УстановитьПометку(ИмяТЧ, Пометка)
	
	НаборЭлементов = НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ);
	НаборЭлементов.КнопкаСнятьФлажки.Видимость = НЕ НаборЭлементов.КнопкаСнятьФлажки.Видимость;
	НаборЭлементов.КнопкаУстановитьФлажки.Видимость = НЕ НаборЭлементов.КнопкаУстановитьФлажки.Видимость;
	
	Для каждого Строка Из Объект[НаборЭлементов.ИмяТЧ] Цикл
		Строка.Пометка = Пометка;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСкрытьПанельРедактирования(ИмяТЧ, ИзменяетДанные = Неопределено)
	
	Перем СостояниеПерехода;
	ГрупповоеИзменениеСтрокСервер.ПоказатьСкрытьПанельРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ),
		СостояниеПерехода,
		ИзменяетДанные);
	
	УправлениеРезервнымиКопиямиТаблицы(ИмяТЧ, СостояниеПерехода, ИзменяетДанные);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеРезервнымиКопиямиТаблицы(ИмяТЧ, СостояниеПерехода, ИзменяетДанные)
	
	Если ИмяТЧ = "МБП" Тогда
		РеквизитРезервнаяКопияТаблицыАдрес = "МБПРезервнаяКопияТаблицыАдрес";
	КонецЕсли;
	
	ГрупповоеИзменениеСтрокСервер.УправлениеРезервнымиКопиями(
		ЭтотОбъект,
		Объект[ИмяТЧ],
		ЭтотОбъект[РеквизитРезервнаяКопияТаблицыАдрес],
		СостояниеПерехода,
		ИзменяетДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОформлениеПанелиРедактирования(ИмяТЧ, Состояние, СохранитьИзменения = Неопределено)
	
	Если ИмяТЧ = "МБП" Тогда
		РеквизитЗначение = "МБПИзменениеСтрокЗначение";
	КонецЕсли;
	
	Результат = ГрупповоеИзменениеСтрокКлиент.НастроитьОформлениеПанелиРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокКлиент(ИмяТЧ),
		Состояние,
		ЭтотОбъект[РеквизитЗначение]);
	
	Если Результат.Свойство("УстановитьСвязиПараметровВыбора") И Результат.УстановитьСвязиПараметровВыбора Тогда
		УстановитьСвязиПараметровВыбораДляЗначения(ИмяТЧ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвязиПараметровВыбораДляЗначения(ИмяТЧ)
	
	ГрупповоеИзменениеСтрокСервер.УстановитьСвязиПараметровВыбора(
		НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ));
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТекущееДействиеИзмененияСтрок()
	
	СохраняемыеНастройки = "";
	
	Если МБПИзменениеСтрокДействие <> МБПИзменениеСтрокДействиеПриОткрытии Тогда
		СохраняемыеНастройки = "МБП";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СохраняемыеНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьТекущееДействиеИзмененияСтрокСервер(СохраняемыеНастройки);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьТекущееДействиеИзмененияСтрокСервер(СохраняемыеНастройки)
	
	ИменаТЧ = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СохраняемыеНастройки);
	Для каждого ИмяТЧ Из ИменаТЧ Цикл
		ГрупповоеИзменениеСтрокСервер.СохранитьНастройки(НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьТаблицу(ИмяТЧ)
	ОбработатьТаблицуНаСервере(ИмяТЧ);
КонецПроцедуры

&НаСервере
Процедура ОбработатьТаблицуНаСервере(ИмяТЧ)
	
	Если ИмяТЧ = "МБП" Тогда
		
		ГрупповоеИзменениеСтрокСервер.ОбработатьТаблицу(
			ЭтотОбъект,
			Объект.МБП,
			МБПИзменениеСтрокДействие,
			МБПИзменениеСтрокОбъектИзмененийРеквизит,
			МБПИзменениеСтрокЗначение,
			"МБПНоменклатура");
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьОбъектИзменений(ИмяТЧ)
	
	Если ИмяТЧ = "МБП" Тогда
		
		Если МБПИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьМОЛ") Тогда
			
			МБПИзменениеСтрокОбъектИзмененийРеквизит = "МОЛ";
			МБПИзменениеСтрокОбъектИзмененийЭлемент = "МБПМОЛ";
			
		ИначеЕсли МБПИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки") Тогда
			
			МБПИзменениеСтрокОбъектИзмененийРеквизит = "";
			МБПИзменениеСтрокОбъектИзмененийЭлемент = "";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НаборЭлементовГрупповогоИзмененияСтрокКлиент(ИмяТЧ)
	
	Если ИмяТЧ = "МБП" Тогда
		
		НаборЭлементов = Новый Структура();
		НаборЭлементов.Вставить("ИмяТЧ", "МБП");
		НаборЭлементов.Вставить("ДокументСсылка",          Объект.Ссылка);
		НаборЭлементов.Вставить("ПанельРедактирования",    Элементы.ГруппаМБПИзменениеСтрок);
		НаборЭлементов.Вставить("КнопкаУстановитьФлажки",  Элементы.МБПУстановитьФлажки);
		НаборЭлементов.Вставить("КнопкаСнятьФлажки",       Элементы.МБПСнятьФлажки);
		НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.МБПВыполнитьДействие);
		НаборЭлементов.Вставить("КолонкаПометка",          Элементы.МБППометка);
		НаборЭлементов.Вставить("КолонкаНомерСтроки",      Элементы.МБПНомерСтроки);
		НаборЭлементов.Вставить("Действие",                ЭтотОбъект.МБПИзменениеСтрокДействие);
		НаборЭлементов.Вставить("ДействиеЭлемент",         Элементы.МБПИзменениеСтрокДействие);
		НаборЭлементов.Вставить("Значение",                ЭтотОбъект.МБПИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ЗначениеЭлемент",         Элементы.МБПИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ОбъектИзменений",         МБПИзменениеСтрокОбъектИзмененийЭлемент);
		НаборЭлементов.Вставить("КолонкаОбъектИзменений",  ?(ЗначениеЗаполнено(МБПИзменениеСтрокОбъектИзмененийЭлемент), 
		                                                     Элементы[МБПИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));
	КонецЕсли;
	
	Возврат НаборЭлементов;
	
КонецФункции

&НаСервере
Функция НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ)
	
	Если ИмяТЧ = "МБП" Тогда
		
		НаборЭлементов = Новый Структура();
		НаборЭлементов.Вставить("ИмяТЧ", "МБП");
		НаборЭлементов.Вставить("ДокументСсылка",          Объект.Ссылка);
		НаборЭлементов.Вставить("ПанельРедактирования",    Элементы.ГруппаМБПИзменениеСтрок);
		НаборЭлементов.Вставить("КнопкаУстановитьФлажки",  Элементы.МБПУстановитьФлажки);
		НаборЭлементов.Вставить("КнопкаСнятьФлажки",       Элементы.МБПСнятьФлажки);
		НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.МБПВыполнитьДействие);
		НаборЭлементов.Вставить("КолонкаПометка",          Элементы.МБППометка);
		НаборЭлементов.Вставить("КолонкаНомерСтроки",      Элементы.МБПНомерСтроки);
		НаборЭлементов.Вставить("Действие",                ЭтотОбъект.МБПИзменениеСтрокДействие);
		НаборЭлементов.Вставить("ДействиеЭлемент",         Элементы.МБПИзменениеСтрокДействие);
		НаборЭлементов.Вставить("Значение",                ЭтотОбъект.МБПИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ЗначениеЭлемент",         Элементы.МБПИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ОбъектИзменений",         МБПИзменениеСтрокОбъектИзмененийЭлемент);
		НаборЭлементов.Вставить("КолонкаОбъектИзменений",  ?(ЗначениеЗаполнено(МБПИзменениеСтрокОбъектИзмененийЭлемент), 
		                                                     Элементы[МБПИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));
	КонецЕсли;
	
	Возврат НаборЭлементов;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокДействий(ИмяТЧ)
	
	Если ИмяТЧ = "МБП" Тогда
		
		Действия = Новый Массив;
		Если Объект.ЭксплуатируемыеМБП Тогда 
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьМОЛ);
		КонецЕсли;	
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки);
		
		Элементы.МБПИзменениеСтрокДействие.СписокВыбора.Очистить();
		Для каждого Действие Из Действия Цикл
			ДействиеОписание = ГрупповоеИзменениеСтрокСервер.ПредставлениеДействия(Действие);
			Элементы.МБПИзменениеСтрокДействие.СписокВыбора.Добавить(Действие, ДействиеОписание);
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МБППометкаПриИзменении(Элемент)
	ГрупповоеИзменениеСтрокКлиент.СтрокаПометкаПриИзменении(Объект.МБП, Элементы.МБПУстановитьФлажки, Элементы.МБПСнятьФлажки);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла
&НаСервере
Процедура ЗагрузитьТоварыИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	ТоварыДобавлены = Ложь;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	Для Каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаТабличнойЧасти = Объект.Товары.Добавить();
		НоваяСтрокаТабличнойЧасти.Номенклатура = СтрокаТаблицы.Номенклатура;
		НоваяСтрокаТабличнойЧасти.Количество = СтрокаТаблицы.Количество;
		НоваяСтрокаТабличнойЧасти.Сумма = СтрокаТаблицы.Сумма;
		// Цена
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(НоваяСтрокаТабличнойЧасти, ПараметрыРасчета);
		
		ТоварыДобавлены = Истина;
	КонецЦикла;
	
	Если ТоварыДобавлены Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРасчетыИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	РасчетыСПерсоналомДобавлены = Ложь;
	
	Для Каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ФизЛицо) Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаТабличнойЧасти = Объект.РасчетыСПерсоналом.Добавить();
		НоваяСтрокаТабличнойЧасти.ФизЛицо = СтрокаТаблицы.ФизЛицо;
		НоваяСтрокаТабличнойЧасти.Сумма = СтрокаТаблицы.Сумма;
		
		РасчетыСПерсоналомДобавлены = Истина;
	КонецЦикла;
	
	Если РасчетыСПерсоналомДобавлены Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьМБПИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	МБПДобавлены = Ложь;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	Для Каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаТабличнойЧасти = Объект.МБП.Добавить();
		НоваяСтрокаТабличнойЧасти.МОЛ = СтрокаТаблицы.МОЛ;
		НоваяСтрокаТабличнойЧасти.Номенклатура = СтрокаТаблицы.Номенклатура;
		НоваяСтрокаТабличнойЧасти.Количество = СтрокаТаблицы.Количество;
		НоваяСтрокаТабличнойЧасти.Сумма = СтрокаТаблицы.Сумма;
		НоваяСтрокаТабличнойЧасти.СуммаИзноса = СтрокаТаблицы.СуммаИзноса;
		// Цена
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(НоваяСтрокаТабличнойЧасти, ПараметрыРасчета);
		
		МБПДобавлены = Истина;
	КонецЦикла;
	
	Если МБПДобавлены Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьОСИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	СтрокиДобавлены = Ложь;
	
	Для Каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ОсновноеСредство) Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаТабличнойЧасти = Объект.ОС.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТаблицы);
		
		НоваяСтрокаТабличнойЧасти.СпособПоступления = Перечисления.СпособыПоступленияАктивов.Приобретение;
		
		СтрокиДобавлены = Истина;
	КонецЦикла;
	
	Если СтрокиДобавлены Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

// СтандартныеПодсистемы.ПодключаемыеКоманды

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

