#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнениеОбъектовБП.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ РазделУчета = "Запасы"
		И (НЕ РазделУчета = "МБП" Или ЭксплуатируемыеМБП) Тогда 
		Склад = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;	
	
	ПрисваиватьИнвентарныеНомераДляНМА = Константы.ПрисваиватьИнвентарныеНомераДляНМА.Получить();
	СчетаУчетаНематериальныхАктивов = БухгалтерскийУчетСервер.СчетаУчетаНематериальныхАктивов();
	Если РазделУчета = "Основные средства" И НЕ ПрисваиватьИнвентарныеНомераДляНМА Тогда 
		Для каждого СтрокаТабличнойЧасти Из ОС Цикл
			ЭтоНМА = НЕ СчетаУчетаНематериальныхАктивов.Найти(СтрокаТабличнойЧасти.СчетУчета) = Неопределено;
			Если ЭтоНМА И НЕ СтрокаТабличнойЧасти.ИнвентарныйНомер = "" Тогда
				СтрокаТабличнойЧасти.ИнвентарныйНомер = "";
			КонецЕсли;		
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ИнициализироватьДанные(Отказ, РежимПроведения);
	
	ОтразитьДвижения(Отказ, РежимПроведения);
	
	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	МассивНепроверяемыхРеквизитов = Новый Массив;

	// МБП
	Если РазделУчета = "МБП" Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчета");		

		Если ЭксплуатируемыеМБП Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Склад");		
		Иначе 	
			МассивНепроверяемыхРеквизитов.Добавить("МБП.МОЛ");
		КонецЕсли;
		ПроверяемыеРеквизиты.Добавить("МБП");
	ИначеЕсли РазделУчета = "Запасы" Тогда 
		ПроверяемыеРеквизиты.Добавить("Товары");
	Иначе 
		МассивНепроверяемыхРеквизитов.Добавить("Склад");		
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчета");		
	КонецЕсли;
		
	// ОС
	Если НеПринятыеКУчету Тогда 
		МассивНепроверяемыхРеквизитов.Добавить("ОС.СрокСлужбы");
		МассивНепроверяемыхРеквизитов.Добавить("ОС.СпособНачисленияАмортизации");
		МассивНепроверяемыхРеквизитов.Добавить("ОС.СпособОтраженияРасходовПоАмортизации");
		МассивНепроверяемыхРеквизитов.Добавить("ОС.ДатаВводаВЭксплуатацию");
		МассивНепроверяемыхРеквизитов.Добавить("ОС.Подразделение");
	КонецЕсли;	
		
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	// Предварительный контроль
	ВыполнитьПредварительныйКонтроль(Отказ);
	ВыполнитьКонтрольИнвентарныхНомеров(Отказ);	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииОбработкаПроведения

// Процедура инициализирует данные документа
// и подготавливает таблицы для движения в регистры
//
Процедура ИнициализироватьДанные(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	ДополнительныеСвойства.ДляПроведения.Вставить("СпособОценки", Перечисления.СпособыОценки.ПоСредней);
	
	// Инициализация данных документа.
	Документы.ВводНачальныхОстатков.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
КонецПроцедуры
	
// Процедура заполняет регистры данными
//
Процедура ОтразитьДвижения(Отказ, РежимПроведения)

	// Отражение в разделах учета.	
	БухгалтерскийУчетСервер.ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Отказ);		
	// ОС
	БухгалтерскийУчетСервер.ОтразитьПараметрыУчетаОС(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьСостоянияОС(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьМестонахождениеОС(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьСобытияОС(ДополнительныеСвойства, Движения, Отказ);
	// Сведения об имуществе
	БухгалтерскийУчетСервер.ОтразитьСведенияОбИмуществе(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьСведенияОТранспорте(ДополнительныеСвойства, Движения, Отказ);	
	// Декларация
	БухгалтерскийУчетСервер.ОтразитьНалоговаяАмортизация(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьУбыткиПрошлыхЛет(ДополнительныеСвойства, Движения, Отказ);
	// Авансы и доотгрузка
	БухгалтерскийУчетСервер.ОтразитьАвансыДоотгрузка(ДополнительныеСвойства, Движения, Отказ);
	// Земельный налог
	БухгалтерскийУчетСервер.ОтразитьПараметрыУчетаОСЗемельныйНалог(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьПараметрыУчетаОСЗемельныйНалогПодОбъектомИмущества(ДополнительныеСвойства, Движения, Отказ);
	
	БухгалтерскийУчетСервер.ОтразитьАвансыПодотчетника(ДополнительныеСвойства, Движения, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет контроль противоречий.
//
Процедура ВыполнитьПредварительныйКонтроль(Отказ)
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДокумента.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаДокумента.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
		|	ТаблицаДокумента.СрокСлужбы КАК СрокСлужбы,
		|	ТаблицаДокумента.НакопленнаяАмортизация КАК НакопленнаяАмортизация,
		|	ТаблицаДокумента.СчетУчета КАК СчетУчета,
		|	ТаблицаДокумента.ОбъемПродукции КАК ОбъемПродукции,
		|	ТаблицаДокумента.ГруппаИмущества КАК ГруппаИмущества,
		|	ТаблицаДокумента.ДатаНачисленияНалогаНаИмущество КАК ДатаНачисленияНалогаНаИмущество
		|ПОМЕСТИТЬ ВременнаяТаблицаОС
		|ИЗ
		|	&ВременнаяТаблицаОС КАК ТаблицаДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаОС.НомерСтроки КАК НомерСтроки,
		|	ВременнаяТаблицаОС.ОсновноеСредство КАК ОсновноеСредство
		|ИЗ
		|	ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|ГДЕ
		|	ВременнаяТаблицаОС.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.Линейный)
		|	И ВременнаяТаблицаОС.СрокСлужбы = 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаОС.НомерСтроки КАК НомерСтроки,
		|	ВременнаяТаблицаОС.ОсновноеСредство КАК ОсновноеСредство
		|ИЗ
		|	ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|ГДЕ
		|	ВременнаяТаблицаОС.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.Производственный)
		|	И ВременнаяТаблицаОС.ОбъемПродукции = 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаОС.СчетУчета КАК СчетУчета
		|ИЗ
		|	ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|ГДЕ
		|	ВременнаяТаблицаОС.НакопленнаяАмортизация <> 0
		|	И ВременнаяТаблицаОС.СчетУчета.ПарныйСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаОС.СчетУчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаОС.СчетУчета КАК СчетУчета,
		|	ВременнаяТаблицаОС.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации
		|ИЗ
		|	ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|ГДЕ
		|	ВременнаяТаблицаОС.СпособНачисленияАмортизации <> ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.НеНачислять)
		|	И ВременнаяТаблицаОС.СпособНачисленияАмортизации <> ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПустаяСсылка)
		|	И ВременнаяТаблицаОС.СчетУчета.ПарныйСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВременнаяТаблицаОСДубли.НомерСтроки) КАК НомерСтроки,
		|	ВременнаяТаблицаОСДубли.ОсновноеСредство КАК ОсновноеСредство
		|ИЗ
		|	ВременнаяТаблицаОС КАК ВременнаяТаблицаОСДубли
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ПО ВременнаяТаблицаОСДубли.НомерСтроки <> ВременнаяТаблицаОС.НомерСтроки
		|			И ВременнаяТаблицаОСДубли.ОсновноеСредство = ВременнаяТаблицаОС.ОсновноеСредство
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаОСДубли.ОсновноеСредство
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаОС.НомерСтроки КАК НомерСтроки,
		|	ВременнаяТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ВременнаяТаблицаОС.ОсновноеСредство.Представление КАК ОсновноеСредствоПредставление,
		|	ВременнаяТаблицаОС.ГруппаИмущества КАК ГруппаИмущества,
		|	ВременнаяТаблицаОС.ДатаНачисленияНалогаНаИмущество КАК ДатаНачисленияНалогаНаИмущество
		|ИЗ
		|	ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|ГДЕ
		|	НЕ ВременнаяТаблицаОС.ДатаНачисленияНалогаНаИмущество = ДАТАВРЕМЯ(1, 1, 1)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	Запрос.УстановитьПараметр("ВременнаяТаблицаОС", ОС.Выгрузить());
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Линейный. Должен быть указан срок службы.
	ВыборкаИзРезультатаЗапроса = МассивРезультатов[1].Выбрать();
	Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнена колонка ""Срок службы"" в строке %1 списка ""ОС"".'"), 
						ВыборкаИзРезультатаЗапроса.НомерСтроки);
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
			ЭтотОбъект,
			ТекстСообщения,
			"ОС",
			ВыборкаИзРезультатаЗапроса.НомерСтроки,
			"СрокСлужбы",
			Отказ);
	КонецЦикла;
	
	// Производственный. Должен быть указан объем продукции.
	ВыборкаИзРезультатаЗапроса = МассивРезультатов[2].Выбрать();
	Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнена колонка ""Объем продукции"" в строке %1 списка ""ОС"".'"), 
						ВыборкаИзРезультатаЗапроса.НомерСтроки);
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
			ЭтотОбъект,
			ТекстСообщения,
			"ОС",
			ВыборкаИзРезультатаЗапроса.НомерСтроки,
			"ОбъемПродукции",
			Отказ);
	КонецЦикла;
	
	// Проверка заполнения парного счета.
	ВыборкаИзРезультатаЗапроса = МассивРезультатов[3].Выбрать();
	Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Для счета учета %1 не задан парный счет, но указана сумма накопленной амортизации.'"), 
						ВыборкаИзРезультатаЗапроса.СчетУчета);
		БухгалтерскийУчетСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения,,,, Отказ);
	КонецЦикла;
		
	// Проверка заполнения парного счета.
	Если НЕ МассивРезультатов[4].Пустой() Тогда
		ВыборкаИзРезультатаЗапроса = МассивРезультатов[4].Выбрать();
		Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Для счета учета %1 не задан парный счет, но указан способ амортизации %2.'"), 
							ВыборкаИзРезультатаЗапроса.СчетУчета, ВыборкаИзРезультатаЗапроса.СпособНачисленияАмортизации);
			БухгалтерскийУчетСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения,,,, Отказ);
		КонецЦикла;
	КонецЕсли;

	// Дубли строк ОС.
	ВыборкаИзРезультатаЗапроса = МассивРезультатов[5].Выбрать();
	Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Основное средство указывается повторно в строке %1 списка ""ОС"".'"), 
						ВыборкаИзРезультатаЗапроса.НомерСтроки);
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
			ЭтотОбъект,
			ТекстСообщения,
			"ОС",
			ВыборкаИзРезультатаЗапроса.НомерСтроки,
			"ОсновноеСредство",
			Отказ);
	КонецЦикла;
		
	// Проверка заполнения "Начисления НИ с даты".
	ВыборкаИзРезультатаЗапроса = МассивРезультатов[6].Выбрать();
	Если КонецДня(Дата) = КонецГода(Дата) Тогда
		Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
			ТекстСообщения = СтрШаблон(НСтр("ru = 'У основного средства ""%1"" значение ""Начисления НИ с даты"" должно быть пустым.'"), 
													ВыборкаИзРезультатаЗапроса.ОсновноеСредствоПредставление);
			БухгалтерскийУчетСервер.СообщитьОбОшибке(
				ЭтотОбъект,
				ТекстСообщения,
				"ОС",
				ВыборкаИзРезультатаЗапроса.НомерСтроки,
				"ОсновноеСредство",
				Отказ);
		КонецЦикла;	
		
	Иначе
		Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
			Если (ВыборкаИзРезультатаЗапроса.ГруппаИмущества = Справочники.ГруппыИмущества.ГИ2 
				ИЛИ ВыборкаИзРезультатаЗапроса.ГруппаИмущества = Справочники.ГруппыИмущества.ГИ3) 
				И НЕ (ВыборкаИзРезультатаЗапроса.ДатаНачисленияНалогаНаИмущество = НачалоКвартала(ВыборкаИзРезультатаЗапроса.ДатаНачисленияНалогаНаИмущество)
				// Период может быть любой квартал текущего года
				И (Год(ВыборкаИзРезультатаЗапроса.ДатаНачисленияНалогаНаИмущество) = Год(Дата) 
				// либо период может быть любой квартал следующего года
				Или Год(ВыборкаИзРезультатаЗапроса.ДатаНачисленияНалогаНаИмущество) = (Год(Дата)+1))) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'У основного средства ""%1"" с группой имущества %2 значение ""Начисление НИ с даты"" должно быть пустым или началом квартала текущего года, или началом квартала следующего года.'"), 
														ВыборкаИзРезультатаЗапроса.ОсновноеСредствоПредставление, ВыборкаИзРезультатаЗапроса.ГруппаИмущества);
				БухгалтерскийУчетСервер.СообщитьОбОшибке(
					ЭтотОбъект,
					ТекстСообщения,
					"ОС",
					ВыборкаИзРезультатаЗапроса.НомерСтроки,
					"ОсновноеСредство",
					Отказ);
			ИначеЕсли (ВыборкаИзРезультатаЗапроса.ГруппаИмущества = Справочники.ГруппыИмущества.ГИ4с
				ИЛИ ВыборкаИзРезультатаЗапроса.ГруппаИмущества = Справочники.ГруппыИмущества.ГИ4нс)
				И НЕ ВыборкаИзРезультатаЗапроса.ДатаНачисленияНалогаНаИмущество = КонецГода(Дата) + 1 Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'У основного средства ""%1"" с группой имущества %2 значение ""Начисление НИ с даты"" должно быть пустым или началом следующего года.'"), 
														ВыборкаИзРезультатаЗапроса.ОсновноеСредствоПредставление, ВыборкаИзРезультатаЗапроса.ГруппаИмущества);
				БухгалтерскийУчетСервер.СообщитьОбОшибке(
					ЭтотОбъект,
					ТекстСообщения,
					"ОС",
					ВыборкаИзРезультатаЗапроса.НомерСтроки,
					"ОсновноеСредство",
					Отказ);
			КонецЕсли;			
		КонецЦикла;		
			
	КонецЕсли;

	Если НЕ НеПринятыеКУчету Тогда
		// Проверка заполнения группы НУ, если первоначальная стоимость больше минимальной стоимости ОС для НУ.
		ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(Дата, Организация);
		
		Для Каждого СтрокаТабличнойЧасти Из ОС Цикл
			
			Если СтрокаТабличнойЧасти.СчетУчета <> ПланыСчетов.Хозрасчетный.Земля 
				И ДанныеУчетнойПолитики.МинимумСтоимостиОСДляНУ <= СтрокаТабличнойЧасти.ПервоначальнаяСтоимость 
				И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ГруппаНУ) Тогда
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'У основного средства ""%1"" не заполнена группа НУ.'"), 
													СтрокаТабличнойЧасти.ОсновноеСредство);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);	
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьКонтрольИнвентарныхНомеров(Отказ)
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДокумента.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаДокумента.ИнвентарныйНомер КАК ИнвентарныйНомер
		|ПОМЕСТИТЬ ВременнаяТаблицаОС
		|ИЗ
		|	&ВременнаяТаблицаОС КАК ТаблицаДокумента
		|ГДЕ
		|	НЕ ТаблицаДокумента.ИнвентарныйНомер = """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаОС.НомерСтроки КАК НомерСтроки,
		|	ВременнаяТаблицаОС.ИнвентарныйНомер КАК ИнвентарныйНомер
		|ИЗ
		|	ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыУчетаОС.СрезПоследних(
		|				,
		|				НЕ ОсновноеСредство В
		|						(ВЫБРАТЬ
		|							ВременнаяТаблицаОС.ОсновноеСредство КАК ОсновноеСредство
		|						ИЗ
		|							ВременнаяТаблицаОС КАК ВременнаяТаблицаОС)) КАК ПараметрыУчетаОССрезПоследних
		|		ПО ВременнаяТаблицаОС.ИнвентарныйНомер = ПараметрыУчетаОССрезПоследних.ИнвентарныйНомер
		|ГДЕ
		|	НЕ ПараметрыУчетаОССрезПоследних.ИнвентарныйНомер ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ТаблицаДокумента1.НомерСтроки) КАК НомерСтроки,
		|	ТаблицаДокумента1.ИнвентарныйНомер КАК ИнвентарныйНомер
		|ИЗ
		|	ВременнаяТаблицаОС КАК ТаблицаДокумента1
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ТаблицаДокумента2
		|		ПО ТаблицаДокумента1.НомерСтроки <> ТаблицаДокумента2.НомерСтроки
		|			И ТаблицаДокумента1.ИнвентарныйНомер = ТаблицаДокумента2.ИнвентарныйНомер
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДокумента1.ИнвентарныйНомер
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	Запрос.УстановитьПараметр("ВременнаяТаблицаОС", ОС.Выгрузить());
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Инвентарный номер уже используется.
	ВыборкаИзРезультатаЗапроса = МассивРезультатов[1].Выбрать();
	Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Инвентарный номер в строке %1 списка ""ОС"" уже используется.'"), 
						ВыборкаИзРезультатаЗапроса.НомерСтроки);
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
			ЭтотОбъект,
			ТекстСообщения,
			"ОС",
			ВыборкаИзРезультатаЗапроса.НомерСтроки,
			"ИнвентарныйНомер",
			Отказ);
	КонецЦикла;	

	// Дубли инвентарных номеров.
	ВыборкаИзРезультатаЗапроса = МассивРезультатов[2].Выбрать();
	Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Инвентарный номер указывается повторно в строке %1 списка ""ОС"".'"), 
						ВыборкаИзРезультатаЗапроса.НомерСтроки);
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
			ЭтотОбъект,
			ТекстСообщения,
			"ОС",
			ВыборкаИзРезультатаЗапроса.НомерСтроки,
			"ИнвентарныйНомер",
			Отказ);
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьАвансы(ДатаДокумента) Экспорт
	
	СтавкаНСПДляРасчетаНДСНаАвансы = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Организация).СтавкаНСПДляРасчетаНДСНаАвансы;
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры); 
	
	// 1. Договоры контрагентов с признаком "СПокупателем".
	// 2. Остатки по счетам с субконто "Контрагент" и "Договор" по договорам из 1 пункта.
	// 3. Данные из 2 пункта по счету 1549 (НДС на авансы).
	// 4. Все данные из 2 пункта за исключением данных из 3 пункта.
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка КАК Договор,
		|	ДоговорыКонтрагентов.СтавкаНДС КАК СтавкаНДС
		|ПОМЕСТИТЬ ВременнаяТаблицаДоговоры
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК Счет,
		|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
		|	ХозрасчетныйОстатки.Субконто2 КАК Договор,
		|	ВременнаяТаблицаДоговоры.СтавкаНДС КАК СтавкаНДС,
		|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаОстатокДт,
		|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаОстатокКт
		|ПОМЕСТИТЬ ВременнаяТаблицаОстаткиПоДоговорам
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, , &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОстатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаДоговоры КАК ВременнаяТаблицаДоговоры
		|		ПО ХозрасчетныйОстатки.Субконто2 = ВременнаяТаблицаДоговоры.Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаОстаткиПоДоговорам.Контрагент КАК Контрагент,
		|	ВременнаяТаблицаОстаткиПоДоговорам.Договор КАК Договор,
		|	ВременнаяТаблицаОстаткиПоДоговорам.СуммаОстатокДт КАК Сумма,
		|	ВременнаяТаблицаОстаткиПоДоговорам.СтавкаНДС КАК СтавкаНДС
		|ИЗ
		|	ВременнаяТаблицаОстаткиПоДоговорам КАК ВременнаяТаблицаОстаткиПоДоговорам
		|ГДЕ
		|	ВременнаяТаблицаОстаткиПоДоговорам.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНаАвансы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаОстаткиПоДоговорам.Договор КАК Договор,
		|	СУММА(ВременнаяТаблицаОстаткиПоДоговорам.СуммаОстатокКт) КАК Сумма
		|ИЗ
		|	ВременнаяТаблицаОстаткиПоДоговорам КАК ВременнаяТаблицаОстаткиПоДоговорам
		|ГДЕ
		|	НЕ ВременнаяТаблицаОстаткиПоДоговорам.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНаАвансы)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаОстаткиПоДоговорам.Договор";
	Запрос.УстановитьПараметр("Период", 		ДатаДокумента + 1);
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("ВидыСубконто", 	ВидыСубконто);        
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Выборка 				= МассивРезультатов[2].Выбрать();
	
	ТЗОстаткиПоСчетам		= МассивРезультатов[3].Выгрузить();
	ТЗОстаткиПоСчетам.Индексы.Добавить("Договор");
	
	// Значение ставки НСП (ставка берется из учетной политики).
	СтавкаНСП = СтавкаНСПДляРасчетаНДСНаАвансы;
	Если СтавкаНСП = Справочники.СтавкиНСП.ПустаяСсылка() Тогда
		ЗначениеСтавкиНСП = 0;
	Иначе
		ЗначениеСтавкиНСП = УчетНДС.ПолучитьСтавкуНСП(ДатаДокумента, Организация, СтавкаНСП);
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл		
		СтрокаТабличнойЧасти = АвансыИДоотгрузка.Добавить();
		СтрокаТабличнойЧасти.Контрагент 		= Выборка.Контрагент;
		СтрокаТабличнойЧасти.ДоговорКонтрагента = Выборка.Договор;
		СтрокаТабличнойЧасти.СуммаНДС 			= Выборка.Сумма;
		
		// Значение ставки НДС (ставка берется по договору).
		ЗначениеСтавкиНДС = УчетНДС.ПолучитьСтавкуНДС(ДатаДокумента, Выборка.СтавкаНДС);
		
		Если ЗначениеСтавкиНДС = 0 Тогда
			СуммаУч = 0;
		Иначе
			СуммаУч = Выборка.Сумма / ЗначениеСтавкиНДС * 100;	
		КонецЕсли;			
		
		СтрокаТЗ = ТЗОстаткиПоСчетам.Найти(Выборка.Договор, "Договор");
		
		Если СтрокаТЗ = Неопределено Тогда
			СтрокаТабличнойЧасти.Сумма = 0;
		Иначе
			СтрокаТабличнойЧасти.Сумма = СтрокаТЗ.Сумма;
		КонецЕсли;
		
		СуммаНСП = СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаНДС - СуммаУч;
		
		Если СуммаНСП = 0 Тогда
			СтрокаТабличнойЧасти.СуммаНСП = 0;
			Продолжить;
		КонецЕсли;	
		
		СуммаРасчетная = (СуммаУч * ЗначениеСтавкиНСП / СуммаНСП) / 100;
		
		Если СуммаРасчетная = 0 Тогда
			СтрокаТабличнойЧасти.СуммаНСП = 0;

		ИначеЕсли (СуммаНСП / СуммаРасчетная) > 1 Тогда
			
			Если СуммаНСП < 0 Тогда
				СтрокаТабличнойЧасти.СуммаНСП = 0;
			Иначе
				СтрокаТабличнойЧасти.СуммаНСП = СуммаНСП;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли