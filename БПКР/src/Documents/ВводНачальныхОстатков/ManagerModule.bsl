#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

// Устанавливает параметры загрузки.
//
//@skip-warning
Процедура УстановитьПараметрыЗагрузкиИзФайлаВТЧ(Параметры) Экспорт
	
КонецПроцедуры

// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
//
// Параметры:
//   АдресЗагружаемыхДанных    - Строка - Адрес временного хранилища с таблицей значений, в которой
//                                        находятся загруженные данные из файла. Состав колонок:
//     * Идентификатор - Число - Порядковый номер строки;
//     * остальные колонки соответствуют колонкам макета ЗагрузкаИзФайла.
//   АдресТаблицыСопоставления - Строка - Адрес временного хранилища с пустой таблицей значений,
//                                        являющейся копией табличной части документа, 
//                                        которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
//   СписокНеоднозначностей - ТаблицаЗначений - Список неоднозначных значений, для которых в ИБ имеется несколько
//                                              подходящих вариантов.
//     * Колонка       - Строка - Имя колонки, в которой была обнаружена неоднозначность;
//     * Идентификатор - Число  - Идентификатор строки, в которой была обнаружена неоднозначность.
//   ПолноеИмяТабличнойЧасти   - Строка - Полное имя табличной части, в которую загружаются данные.
//   ДополнительныеПараметры   - ЛюбойТип - Любые дополнительные сведения.
//
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ПолноеИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.РазделУчета = "Запасы" Тогда 
		
		Товары = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления);
		ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
		
		ТаблицаНоменклатура = ЗагрузкаДанныхИзФайлаПереопределяемыйБП.СопоставитьНоменклатуруДоПервогоСовпадения(ЗагружаемыеДанные); 
		
		Для Каждого СтрокаТаблицы Из ЗагружаемыеДанные Цикл
			СтрокаТабличнойЧасти = Товары.Добавить();
			СтрокаТабличнойЧасти.Идентификатор = СтрокаТаблицы.Идентификатор;
			СтрокаТабличнойЧасти.Количество = СтрокаТаблицы.Количество;
			СтрокаТабличнойЧасти.Сумма = СтрокаТаблицы.Сумма;
						
			СтрокаНоменклатура = ТаблицаНоменклатура.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
			Если СтрокаНоменклатура <> Неопределено Тогда 
				Если СтрокаНоменклатура.Количество = 1 Тогда 
					СтрокаТабличнойЧасти.Номенклатура = СтрокаНоменклатура.Ссылка;
				ИначеЕсли СтрокаНоменклатура.Количество > 1 Тогда
					ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
					ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор; 
					ЗаписьОНеоднозначности.Колонка = "Номенклатура";
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ПоместитьВоВременноеХранилище(Товары, АдресТаблицыСопоставления);
		
	ИначеЕсли ДополнительныеПараметры.РазделУчета = "Расчеты с персоналом" Тогда
		
		РасчетыСПерсоналом = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления);
		ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДанныеДляСопоставления.ФизЛицо,
			|	ДанныеДляСопоставления.Идентификатор
			|ПОМЕСТИТЬ ДанныеДляСопоставления
			|ИЗ
			|	&ДанныеДляСопоставления КАК ДанныеДляСопоставления
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			// Сопоставление по физлицу
			|ВЫБРАТЬ
			|	МАКСИМУМ(ТаблицаСправочника.Ссылка) КАК Ссылка,
			|	ДанныеДляСопоставления.Идентификатор,
			|	КОЛИЧЕСТВО(ДанныеДляСопоставления.Идентификатор) КАК Количество
			|ИЗ
			|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ТаблицаСправочника
			|		ПО (ТаблицаСправочника.Наименование ПОДОБНО ДанныеДляСопоставления.ФизЛицо)
			|ГДЕ
			|	НЕ ТаблицаСправочника.Ссылка ЕСТЬ NULL
			|
			|СГРУППИРОВАТЬ ПО
			|	ДанныеДляСопоставления.Идентификатор";
		Запрос.УстановитьПараметр("ДанныеДляСопоставления", ЗагружаемыеДанные);
		РезультатЗапроса = Запрос.Выполнить();
		
		ТаблицаФизЛиц = РезультатЗапроса.Выгрузить();
		ТаблицаФизЛиц.Индексы.Добавить("Идентификатор");

		Для Каждого СтрокаТаблицы Из ЗагружаемыеДанные Цикл
			СтрокаТабличнойЧасти = РасчетыСПерсоналом.Добавить();
			СтрокаТабличнойЧасти.Идентификатор = СтрокаТаблицы.Идентификатор;
			СтрокаТабличнойЧасти.Сумма = СтрокаТаблицы.Сумма;
			
			СтрокаФизЛицо = ТаблицаФизЛиц.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
			Если СтрокаФизЛицо <> Неопределено Тогда 
				Если СтрокаФизЛицо.Количество = 1 Тогда 
					СтрокаТабличнойЧасти.ФизЛицо = СтрокаФизЛицо.Ссылка;
				ИначеЕсли СтрокаФизЛицо.Количество > 1 Тогда
					ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
					ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор; 
					ЗаписьОНеоднозначности.Колонка = "ФизЛицо";
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ПоместитьВоВременноеХранилище(РасчетыСПерсоналом, АдресТаблицыСопоставления);
		
	ИначеЕсли ДополнительныеПараметры.РазделУчета = "МБП" Тогда 
		
		МБП = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления);
		ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДанныеДляСопоставления.МОЛ,
			|	ДанныеДляСопоставления.Номенклатура,
			|	ДанныеДляСопоставления.Идентификатор
			|ПОМЕСТИТЬ ДанныеДляСопоставления
			|ИЗ
			|	&ДанныеДляСопоставления КАК ДанныеДляСопоставления
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			// Сопоставление по МОЛ
			|ВЫБРАТЬ
			|	МАКСИМУМ(ФизическиеЛица.Ссылка) КАК Ссылка,
			|	ДанныеДляСопоставления.Идентификатор КАК Идентификатор,
			|	КОЛИЧЕСТВО(ДанныеДляСопоставления.Идентификатор) КАК Количество
			|ИЗ
			|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
			|		ПО (ФизическиеЛица.Наименование ПОДОБНО ДанныеДляСопоставления.МОЛ)
			|ГДЕ
			|	НЕ ФизическиеЛица.Ссылка ЕСТЬ NULL
			|
			|СГРУППИРОВАТЬ ПО
			|	ДанныеДляСопоставления.Идентификатор;";
		Запрос.УстановитьПараметр("ДанныеДляСопоставления", ЗагружаемыеДанные);
		РезультатыЗапросов = Запрос.ВыполнитьПакет();
		
		ТаблицаМОЛ = РезультатыЗапросов[1].Выгрузить();
		ТаблицаМОЛ.Индексы.Добавить("Идентификатор");

		ТаблицаНоменклатура = ЗагрузкаДанныхИзФайлаПереопределяемыйБП.СопоставитьНоменклатуруДоПервогоСовпадения(ЗагружаемыеДанные); 
		
		Для Каждого СтрокаТаблицы Из ЗагружаемыеДанные Цикл
			СтрокаТабличнойЧасти = МБП.Добавить();
			СтрокаТабличнойЧасти.Идентификатор = СтрокаТаблицы.Идентификатор;
			СтрокаТабличнойЧасти.Количество = СтрокаТаблицы.Количество;
			СтрокаТабличнойЧасти.Сумма = СтрокаТаблицы.Сумма;
			СтрокаТабличнойЧасти.СуммаИзноса = СтрокаТаблицы.СуммаИзноса;
			
			СтрокаМОЛ = ТаблицаМОЛ.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
			Если СтрокаМОЛ <> Неопределено Тогда 
				Если СтрокаМОЛ.Количество = 1 Тогда 
					СтрокаТабличнойЧасти.МОЛ = СтрокаМОЛ.Ссылка;
				ИначеЕсли СтрокаМОЛ.Количество > 1 Тогда
					ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
					ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор; 
					ЗаписьОНеоднозначности.Колонка = "МОЛ";
				КонецЕсли;
			КонецЕсли;
			
			СтрокаНоменклатура = ТаблицаНоменклатура.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
			Если СтрокаНоменклатура <> Неопределено Тогда 
				Если СтрокаНоменклатура.Количество = 1 Тогда 
					СтрокаТабличнойЧасти.Номенклатура = СтрокаНоменклатура.Ссылка;
				ИначеЕсли СтрокаНоменклатура.Количество > 1 Тогда
					ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
					ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор; 
					ЗаписьОНеоднозначности.Колонка = "Номенклатура";
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ПоместитьВоВременноеХранилище(МБП, АдресТаблицыСопоставления);
		
	ИначеЕсли ДополнительныеПараметры.РазделУчета = "Основные средства" Тогда 
		
		ОС = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления);
		ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		УчетДвиженияОСПоПодразделениям = ПолучитьФункциональнуюОпцию("УчетДвиженияОСПоПодразделениям");
		УчетДвиженияОСПоМОЛ = ПолучитьФункциональнуюОпцию("УчетДвиженияОСПоМОЛ");
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДанныеДляСопоставления.ОсновноеСредство,
			|	ДанныеДляСопоставления.ИнвентарныйНомер,
			|	ДанныеДляСопоставления.СпособОтраженияРасходовПоАмортизации,
			|	"""" КАК МОЛ,
			|	&ДанныеДляСопоставленияПодразделение КАК Подразделение,
			|	ДанныеДляСопоставления.Идентификатор
			|ПОМЕСТИТЬ ДанныеДляСопоставления
			|ИЗ
			|	&ДанныеДляСопоставления КАК ДанныеДляСопоставления
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			// Сопоставление по ОС- по коду и инвентарному номеру
			|ВЫБРАТЬ
			|	МАКСИМУМ(ОсновныеСредства.Ссылка) КАК Ссылка,
			|	ДанныеДляСопоставления.Идентификатор,
			|	КОЛИЧЕСТВО(ДанныеДляСопоставления.Идентификатор) КАК Количество
			|ИЗ
			|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОсновныеСредства КАК ОсновныеСредства
			|		ПО (ОсновныеСредства.Код ПОДОБНО ДанныеДляСопоставления.ИнвентарныйНомер)
			|ГДЕ
			|	НЕ ОсновныеСредства.Ссылка ЕСТЬ NULL
			|
			|СГРУППИРОВАТЬ ПО
			|	ДанныеДляСопоставления.Идентификатор
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			// Сопоставление по Подразделению
			|ВЫБРАТЬ
			|	МАКСИМУМ(ПодразделенияОрганизаций.Ссылка) КАК Ссылка,
			|	ДанныеДляСопоставления.Идентификатор КАК Идентификатор,
			|	КОЛИЧЕСТВО(ДанныеДляСопоставления.Идентификатор) КАК Количество
			|ИЗ
			|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
			|		ПО (ПодразделенияОрганизаций.Наименование ПОДОБНО ДанныеДляСопоставления.Подразделение)
			|ГДЕ
			|	НЕ ПодразделенияОрганизаций.Ссылка ЕСТЬ NULL
			|
			|СГРУППИРОВАТЬ ПО
			|	ДанныеДляСопоставления.Идентификатор
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			// Сопоставление по МОЛ
			|ВЫБРАТЬ
			|	МАКСИМУМ(ФизическиеЛица.Ссылка) КАК Ссылка,
			|	ДанныеДляСопоставления.Идентификатор КАК Идентификатор,
			|	КОЛИЧЕСТВО(ДанныеДляСопоставления.Идентификатор) КАК Количество
			|ИЗ
			|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
			|		ПО (ФизическиеЛица.Наименование ПОДОБНО ДанныеДляСопоставления.МОЛ)
			|ГДЕ
			|	НЕ ФизическиеЛица.Ссылка ЕСТЬ NULL
			|
			|СГРУППИРОВАТЬ ПО
			|	ДанныеДляСопоставления.Идентификатор
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			// Сопоставление по способ отражения расходов по амортизации
			|ВЫБРАТЬ
			|	МАКСИМУМ(СпособыОтраженияРасходовПоАмортизации.Ссылка) КАК Ссылка,
			|	ДанныеДляСопоставления.Идентификатор,
			|	КОЛИЧЕСТВО(ДанныеДляСопоставления.Идентификатор) КАК Количество
			|ИЗ
			|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОтраженияРасходовПоАмортизации КАК СпособыОтраженияРасходовПоАмортизации
			|		ПО (СпособыОтраженияРасходовПоАмортизации.Наименование ПОДОБНО ДанныеДляСопоставления.СпособОтраженияРасходовПоАмортизации)
			|ГДЕ
			|	НЕ СпособыОтраженияРасходовПоАмортизации.Ссылка ЕСТЬ NULL
			|
			|СГРУППИРОВАТЬ ПО
			|	ДанныеДляСопоставления.Идентификатор";
		Если УчетДвиженияОСПоМОЛ Тогда 
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДанныеДляСопоставленияМОЛ", "ДанныеДляСопоставления.МОЛ");				
		Иначе 
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДанныеДляСопоставленияМОЛ", """""");				
		КонецЕсли;
		
		Если УчетДвиженияОСПоПодразделениям Тогда 
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДанныеДляСопоставленияПодразделение", "ДанныеДляСопоставления.Подразделение");				
		Иначе 
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДанныеДляСопоставленияПодразделение", """""");				
		КонецЕсли;	
			
		Запрос.УстановитьПараметр("ДанныеДляСопоставления", ЗагружаемыеДанные);
		РезультатыЗапросов = Запрос.ВыполнитьПакет();
		
		ТаблицаОС = РезультатыЗапросов[1].Выгрузить();
		ТаблицаОС.Индексы.Добавить("Идентификатор");
		
		ТаблицаПодразделения = РезультатыЗапросов[2].Выгрузить();
		ТаблицаПодразделения.Индексы.Добавить("Идентификатор");
		
		ТаблицаМОЛ = РезультатыЗапросов[3].Выгрузить();
		ТаблицаМОЛ.Индексы.Добавить("Идентификатор");

		ТаблицаСпособыАмортизации = РезультатыЗапросов[4].Выгрузить();
		ТаблицаСпособыАмортизации.Индексы.Добавить("Идентификатор");
		
		Для Каждого СтрокаТаблицы Из ЗагружаемыеДанные Цикл
			СтрокаТабличнойЧасти = ОС.Добавить();
			СтрокаТабличнойЧасти.Идентификатор = СтрокаТаблицы.Идентификатор;
			СтрокаТабличнойЧасти.ИнвентарныйНомер = СтрокаТаблицы.ИнвентарныйНомер;
			СтрокаТабличнойЧасти.ПервоначальнаяСтоимость = СтрокаТаблицы.ПервоначальнаяСтоимость;
			СтрокаТабличнойЧасти.ЛиквидационнаяСтоимость = СтрокаТаблицы.ЛиквидационнаяСтоимость;
			СтрокаТабличнойЧасти.СтоимостьДляРасчетаАмортизации = СтрокаТаблицы.ПервоначальнаяСтоимость - СтрокаТабличнойЧасти.ЛиквидационнаяСтоимость;
			СтрокаТабличнойЧасти.НакопленнаяАмортизация = СтрокаТаблицы.НакопленнаяАмортизация;
			СтрокаТабличнойЧасти.СрокСлужбы = СтрокаТаблицы.СрокСлужбы;
			СтрокаТабличнойЧасти.СчетУчета = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрокаТаблицы.СчетУчета);
			СтрокаТабличнойЧасти.СпособНачисленияАмортизации = 
				?(ЗначениеЗаполнено(СтрокаТаблицы.СпособНачисленияАмортизации), Перечисления.СпособыНачисленияАмортизацииОС[СтрокаТаблицы.СпособНачисленияАмортизации], Неопределено);
			СтрокаТабличнойЧасти.ДатаВводаВЭксплуатацию = СтрокаТаблицы.ДатаВводаВЭксплуатацию;
			СтрокаТабличнойЧасти.СпособПоступления = Перечисления.СпособыПоступленияАктивов.Приобретение;

			СтрокаОС = ТаблицаОС.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
			Если СтрокаОС <> Неопределено Тогда 
				Если СтрокаОС.Количество = 1 Тогда 
					СтрокаТабличнойЧасти.ОсновноеСредство = СтрокаОС.Ссылка;
				ИначеЕсли СтрокаОС.Количество > 1 Тогда
					ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
					ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор; 
					ЗаписьОНеоднозначности.Колонка = "ОсновноеСредство";
				КонецЕсли;
			КонецЕсли;
			
			СтрокаПодразделение = ТаблицаПодразделения.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
			Если СтрокаПодразделение <> Неопределено Тогда 
				Если СтрокаПодразделение.Количество = 1 Тогда 
					СтрокаТабличнойЧасти.Подразделение = СтрокаПодразделение.Ссылка;
				ИначеЕсли СтрокаПодразделение.Количество > 1 Тогда
					ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
					ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор; 
					ЗаписьОНеоднозначности.Колонка = "Подразделение";
				КонецЕсли;
			КонецЕсли;
			
			СтрокаМОЛ = ТаблицаМОЛ.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
			Если СтрокаМОЛ <> Неопределено Тогда 
				Если СтрокаМОЛ.Количество = 1 Тогда 
					СтрокаТабличнойЧасти.МОЛ = СтрокаМОЛ.Ссылка;
				ИначеЕсли СтрокаМОЛ.Количество > 1 Тогда
					ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
					ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор; 
					ЗаписьОНеоднозначности.Колонка = "МОЛ";
				КонецЕсли;
			КонецЕсли;
			
			СтрокаСпособ = ТаблицаСпособыАмортизации.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
			Если СтрокаСпособ <> Неопределено Тогда 
				Если СтрокаСпособ.Количество = 1 Тогда 
					СтрокаТабличнойЧасти.СпособОтраженияРасходовПоАмортизации = СтрокаСпособ.Ссылка;
				ИначеЕсли СтрокаСпособ.Количество > 1 Тогда
					ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
					ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор; 
					ЗаписьОНеоднозначности.Колонка = "СпособОтраженияРасходовПоАмортизации";
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ПоместитьВоВременноеХранилище(ОС, АдресТаблицыСопоставления);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает список подходящих объектов ИБ для неоднозначного значения ячейки.
// 
// Параметры:
//   ПолноеИмяТабличнойЧасти  - Строка - Полное имя табличной части, в которую загружаются данные.
//  ИмяКолонки                - Строка - Имя колонки, в который возникла неоднозначность.
//  СписокНеоднозначностей    - Массив - Массив для заполнения с неоднозначными данными.
//  ЗагружаемыеЗначенияСтрока - Строка - Загружаемые данные на основании которых возникла неоднозначность.
//  ДополнительныеПараметры   - ЛюбойТип - Любые дополнительные сведения.
//
Процедура ЗаполнитьСписокНеоднозначностей(ПолноеИмяТабличнойЧасти, СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.РазделУчета = "Запасы" Тогда 

		Если ИмяКолонки = "Номенклатура" Тогда

			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	Номенклатура.Ссылка
				|ИЗ
				|	Справочник.Номенклатура КАК Номенклатура
				|ГДЕ
				|	Номенклатура.Наименование = &Наименование";
			Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.Номенклатура);
			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СписокНеоднозначностей.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры.РазделУчета = "МБП" Тогда 

		Если ИмяКолонки = "МОЛ" Тогда

			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ФизическиеЛица.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.ФизическиеЛица КАК ФизическиеЛица
				|ГДЕ
				|	ФизическиеЛица.Наименование = &Наименование";
			Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.МОЛ);
			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СписокНеоднозначностей.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
			КонецЦикла;
			
		ИначеЕсли ИмяКолонки = "Номенклатура" Тогда

			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	Номенклатура.Ссылка
				|ИЗ
				|	Справочник.Номенклатура КАК Номенклатура
				|ГДЕ
				|	Номенклатура.Наименование = &Наименование";
			Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.Номенклатура);
			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СписокНеоднозначностей.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры.РазделУчета = "Основные средства" Тогда 

		Если ИмяКолонки = "ОсновноеСредство" Тогда

			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ОсновныеСредства.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.ОсновныеСредства КАК ОсновныеСредства
				|ГДЕ
				|	ОсновныеСредства.Код = &ИнвентарныйНомер";
			Запрос.УстановитьПараметр("ИнвентарныйНомер", ЗагружаемыеЗначенияСтрока.ИнвентарныйНомер);
			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СписокНеоднозначностей.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
			КонецЦикла;
			
		ИначеЕсли ИмяКолонки = "Подразделение" Тогда

			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ПодразделенияОрганизаций.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
				|ГДЕ
				|	ПодразделенияОрганизаций.Наименование = &Наименование";
			Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.Подразделение);
			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СписокНеоднозначностей.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
			КонецЦикла;
			
		ИначеЕсли ИмяКолонки = "МОЛ" Тогда

			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ФизическиеЛица.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.ФизическиеЛица КАК ФизическиеЛица
				|ГДЕ
				|	ФизическиеЛица.Наименование = &Наименование";
			Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.МОЛ);
			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СписокНеоднозначностей.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
			КонецЦикла;
			
		ИначеЕсли ИмяКолонки = "СпособОтраженияРасходовПоАмортизации" Тогда

			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	СпособыОтраженияРасходовПоАмортизации.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.СпособыОтраженияРасходовПоАмортизации КАК СпособыОтраженияРасходовПоАмортизации
				|ГДЕ
				|	СпособыОтраженияРасходовПоАмортизации.Наименование = &Наименование";
			Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.СпособОтраженияРасходовПоАмортизации);
			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СписокНеоднозначностей.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры.РазделУчета = "Расчеты с персоналом" Тогда
		
		Если ИмяКолонки = "ФизЛицо" Тогда

			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ТаблицаСправочника.Ссылка
				|ИЗ
				|	Справочник.ФизическиеЛица КАК ТаблицаСправочника
				|ГДЕ
				|	ТаблицаСправочника.Наименование = &Наименование";
			Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.ФизЛицо);
			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СписокНеоднозначностей.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
			КонецЦикла;
		КонецЕсли;	
			
	КонецЕсли;	
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

#КонецОбласти
	
#Область ПроцедурыПроведенияДокумента

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаХозрасчетный(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	// 1. Товары
	// 2. ОС
	// 3. Амортизация ОС
	// 4. Денежные средства
	// 5. Расчеты с персоналом
	// 6. МБП
	// 7. Износ МБП
	// 8. Прочее Дт
	// 9. Прочее Кт
	Запрос = Новый Запрос;    
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	1 КАК Порядок,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.СчетУчета КАК СчетДт,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный) КАК СчетКт,
		|	ВременнаяТаблицаТовары.Номенклатура КАК СубконтоДт1,
		|	ВременнаяТаблицаШапка.Склад КАК СубконтоДт2,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаШапка.ВедетсяУчетПоПартиям
		|			ТОГДА ВременнаяТаблицаШапка.Ссылка
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК СубконтоДт3,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	НЕОПРЕДЕЛЕНО КАК ВалютаДт,
		|	НЕОПРЕДЕЛЕНО КАК ВалютаКт,
		|	0 КАК ВалютнаяСуммаДт,
		|	0 КАК ВалютнаяСуммаКт,
		|	ВременнаяТаблицаТовары.Сумма КАК Сумма,
		|	&СодержаниеТовары КАК Содержание,
		|	ВременнаяТаблицаТовары.Количество КАК КоличествоДт,
		|	0 КАК КоличествоКт
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ПО (ИСТИНА)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2,
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаОС.СчетУчета,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный),
		|	ВременнаяТаблицаОС.ОсновноеСредство,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	0,
		|	0,
		|	ВременнаяТаблицаОС.ПервоначальнаяСтоимость,
		|	&СодержаниеОС,
		|	0,
		|	0
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ПО (ИСТИНА)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	3,
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный),
		|	ВременнаяТаблицаОС.СчетУчета.ПарныйСчет,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаОС.ОсновноеСредство,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	0,
		|	0,
		|	ВременнаяТаблицаОС.НакопленнаяАмортизация,
		|	&СодержаниеОСАмортизация,
		|	0,
		|	0
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаОС.НакопленнаяАмортизация = 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	4,
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаДенежныеСредства.БанковскийСчетКасса.СчетУчета,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный),
		|	ВременнаяТаблицаДенежныеСредства.БанковскийСчетКасса,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаДенежныеСредства.ВалютаДенежныхСредств,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаДенежныеСредства.СуммаВал,
		|	0,
		|	ВременнаяТаблицаДенежныеСредства.Сумма,
		|	&СодержаниеДенежныеСредства,
		|	0,
		|	0
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаДенежныеСредства КАК ВременнаяТаблицаДенежныеСредства
		|		ПО (ИСТИНА)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	5,
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный),
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НачисленнаяЗаработнаяПлата),
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаРасчетыСПерсоналом.ФизЛицо,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	0,
		|	0,
		|	ВременнаяТаблицаРасчетыСПерсоналом.Сумма,
		|	&СодержаниеРасчетыСПерсоналом,
		|	0,
		|	0
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаРасчетыСПерсоналом КАК ВременнаяТаблицаРасчетыСПерсоналом
		|		ПО (ИСТИНА)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	6,
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.МБП),
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный),
		|	ВременнаяТаблицаМБП.Номенклатура,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаШапка.ЭксплуатируемыеМБП
		|			ТОГДА ВременнаяТаблицаМБП.МОЛ
		|		ИНАЧЕ ВременнаяТаблицаШапка.Склад
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаШапка.ВедетсяУчетПоПартиям
		|			ТОГДА ВременнаяТаблицаШапка.Ссылка
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	0,
		|	0,
		|	ВременнаяТаблицаМБП.Сумма,
		|	&СодержаниеМБП,
		|	ВременнаяТаблицаМБП.Количество,
		|	0
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаМБП КАК ВременнаяТаблицаМБП
		|		ПО (ИСТИНА)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	7,
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный),
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НачисленныйИзносМБП),
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаМБП.Номенклатура,
		|	ВременнаяТаблицаШапка.Склад,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаШапка.ВедетсяУчетПоПартиям
		|			ТОГДА ВременнаяТаблицаШапка.Ссылка
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	0,
		|	0,
		|	ВременнаяТаблицаМБП.СуммаИзноса,
		|	&СодержаниеМБПИзнос,
		|	0,
		|	0
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаМБП КАК ВременнаяТаблицаМБП
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаМБП.СуммаИзноса = 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	8,
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаПрочее.СчетУчета,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный),
		|	ВременнаяТаблицаПрочее.Субконто1,
		|	ВременнаяТаблицаПрочее.Субконто2,
		|	ВременнаяТаблицаПрочее.Субконто3,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаПрочее.Валюта,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаПрочее.ВалютнаяСумма,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаПрочее.Сумма,
		|	&СодержаниеПрочее,
		|	ВременнаяТаблицаПрочее.Количество,
		|	0
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаПрочее КАК ВременнаяТаблицаПрочее
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ВременнаяТаблицаПрочее.ВидСальдо = ""СальдоДт""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	9,
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный),
		|	ВременнаяТаблицаПрочее.СчетУчета,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаПрочее.Субконто1,
		|	ВременнаяТаблицаПрочее.Субконто2,
		|	ВременнаяТаблицаПрочее.Субконто3,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаПрочее.Валюта,
		|	0,
		|	ВременнаяТаблицаПрочее.ВалютнаяСумма,
		|	ВременнаяТаблицаПрочее.Сумма,
		|	&СодержаниеПрочее,
		|	0,
		|	ВременнаяТаблицаПрочее.Количество
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаПрочее КАК ВременнаяТаблицаПрочее
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ВременнаяТаблицаПрочее.ВидСальдо = ""СальдоКт""";
	Запрос.УстановитьПараметр("СодержаниеТовары", НСтр("ru = 'Ввод остатков товаров'")); 
	Запрос.УстановитьПараметр("СодержаниеОС", НСтр("ru = 'Ввод остатков ОС (перв.стоимость)'")); 
	Запрос.УстановитьПараметр("СодержаниеОСАмортизация", НСтр("ru = 'Ввод остатков по ОС (начисл.амортизация)'")); 
	Запрос.УстановитьПараметр("СодержаниеДенежныеСредства", НСтр("ru = 'Ввод остатков по денежным средствам'")); 
	Запрос.УстановитьПараметр("СодержаниеПрочее", НСтр("ru = 'Ввод остатков (прочее)'")); 
	Запрос.УстановитьПараметр("СодержаниеРасчетыСПерсоналом", НСтр("ru = 'Ввод остатков по начислению заработной платы'")); 
	Запрос.УстановитьПараметр("СодержаниеМБП", НСтр("ru = 'Ввод остатков МБП'")); 
	Запрос.УстановитьПараметр("СодержаниеМБПИзнос", НСтр("ru = 'Ввод остатков МБП с износом'")); 
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаХозрасчетный", РезультатЗапроса.Выгрузить());
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПараметрыУчетаОС(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаОС.ДатаВводаВЭксплуатацию КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ВременнаяТаблицаОС.ИнвентарныйНомер КАК ИнвентарныйНомер,
		|	ВременнаяТаблицаОС.СчетУчета КАК СчетУчета,
		|	ВременнаяТаблицаОС.ГруппаНУ КАК ГруппаНУ,
		|	ВременнаяТаблицаОС.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
		|	ВременнаяТаблицаОС.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость,
		|	ВременнаяТаблицаОС.СрокСлужбы КАК СрокСлужбы,
		|	ВременнаяТаблицаОС.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
		|	ВременнаяТаблицаОС.СпособОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизации,
		|	ВременнаяТаблицаОС.СпособПоступления КАК СпособПоступления,
		|	ВременнаяТаблицаОС.ОбъемПродукции КАК ОбъемПродукции,
		|	ВременнаяТаблицаОС.КоэффициентУскорения КАК КоэффициентУскорения,
		|	ВременнаяТаблицаОС.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию,
		|	ВременнаяТаблицаОС.СтоимостьДляРасчетаАмортизации КАК СтоимостьДляРасчетаАмортизации,
		|	ВременнаяТаблицаОС.ДатаНачисленияНалогаНаИмущество КАК ДатаНачисленияНалогаНаИмущество,
		|	ВременнаяТаблицаОС.Консервация КАК Консервация
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаШапка.НеПринятыеКУчету
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаОС.ОсновноеСредство,
		|	ВременнаяТаблицаОС.ИнвентарныйНомер,
		|	ВременнаяТаблицаОС.СчетУчета,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаОС.ПервоначальнаяСтоимость,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаОС.СпособПоступления,
		|	ВременнаяТаблицаОС.ОбъемПродукции,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаОС.Консервация
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ВременнаяТаблицаШапка.НеПринятыеКУчету";
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПараметрыУчетаОС", РезультатЗапроса.Выгрузить()); 
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСостоянияОС(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаОС.ДатаВводаВЭксплуатацию КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.ПринятоКУчету) КАК Состояние
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаШапка.НеПринятыеКУчету
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаОС.ОсновноеСредство,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.Поступило)
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ВременнаяТаблицаШапка.НеПринятыеКУчету";
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСостоянияОС", РезультатЗапроса.Выгрузить()); 
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаМестонахождениеОС(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаОС.ДатаВводаВЭксплуатацию КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ВременнаяТаблицаОС.МОЛ КАК МОЛ,
		|	ВременнаяТаблицаОС.Подразделение КАК Подразделение
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ПО (ИСТИНА)
		|ГДЕ
		|	(&УчетДвиженияОСПоПодразделениям
		|			ИЛИ &УчетДвиженияОСПоМОЛ)
		|	И НЕ ВременнаяТаблицаШапка.НеПринятыеКУчету";
	Запрос.УстановитьПараметр("УчетДвиженияОСПоПодразделениям", ПолучитьФункциональнуюОпцию("УчетДвиженияОСПоПодразделениям"));
	Запрос.УстановитьПараметр("УчетДвиженияОСПоМОЛ", ПолучитьФункциональнуюОпцию("УчетДвиженияОСПоМОЛ"));
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаМестонахождениеОС", РезультатЗапроса.Выгрузить()); 
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСобытияОС(ДокументСсылка, СтруктураДополнительныеСвойства) 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаОС.ДатаВводаВЭксплуатацию КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Прочее) КАК Событие,
		|	ВременнаяТаблицаОС.НомерДокументаПринятияКУчету КАК НомерДокумента,
		|	ВременнаяТаблицаОС.НазваниеДокументаПринятияКУчету КАК НазваниеДокумента
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаШапка.НеПринятыеКУчету
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаОС.ОсновноеСредство,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Прочее),
		|	ВременнаяТаблицаОС.НомерДокументаПринятияКУчету,
		|	ВременнаяТаблицаОС.НазваниеДокументаПринятияКУчету
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ВременнаяТаблицаШапка.НеПринятыеКУчету";
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСобытияОС", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры 

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаНалоговаяАмортизация(ДокументСсылка, СтруктураДополнительныеСвойства) 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	НАЧАЛОПЕРИОДА(ВременнаяТаблицаШапка.Дата, ГОД) КАК Год,
		|	ВременнаяТаблицаГруппаНалоговогоУчета.ГруппаНУ КАК ГруппаНУ,
		|	ВременнаяТаблицаГруппаНалоговогоУчета.ОсновноеСредство КАК ОсновноеСредство,
		|	ВременнаяТаблицаГруппаНалоговогоУчета.БалансоваяСтоимостьНаКонецГода КАК БалансоваяСтоимостьНаКонецГода,
		|	ВременнаяТаблицаГруппаНалоговогоУчета.АмортизацияЗаГод КАК АмортизацияЗаГод,
		|	ВременнаяТаблицаГруппаНалоговогоУчета.СуммаПоступленияОстаток КАК СуммаПоступленияОстаток,
		|	ВременнаяТаблицаГруппаНалоговогоУчета.СуммаВыбытияОстаток КАК СуммаВыбытияОстаток
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаГруппаНалоговогоУчета КАК ВременнаяТаблицаГруппаНалоговогоУчета
		|		ПО (ИСТИНА)";
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаНалоговаяАмортизация", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры       

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСведенияОбИмуществе(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаОС.ОсновноеСредство,
		|	ВременнаяТаблицаОС.ГруппаИмущества,
		|	ВременнаяТаблицаОС.ДатаВводаВЭксплуатацию,
		|	ВременнаяТаблицаОС.КодИмущества,
		|	ВременнаяТаблицаОС.МатериалСтен,
		|	ВременнаяТаблицаОС.ЖилаяПлощадь,
		|	ВременнаяТаблицаОС.НежилаяПлощадь,
		|	ВременнаяТаблицаОС.РегиональныйКоэффициент,
		|	ВременнаяТаблицаОС.ЗональныйКоэффициент,
		|	ВременнаяТаблицаОС.ОтраслевойКоэффициент,
		|	ВременнаяТаблицаОС.КатегорияИмущества КАК КатегорияОбъектаИмущества,
		|	ВременнаяТаблицаОС.ОтраслевойКоэффициент КАК КодНазначенияИмущества,
		|	ВременнаяТаблицаОС.КодПользователяИмущества
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ПО (ИСТИНА)
		|ГДЕ
		|	(ВременнаяТаблицаОС.ГруппаИмущества = ЗНАЧЕНИЕ(Справочник.ГруппыИмущества.ГИ2)
		|			ИЛИ ВременнаяТаблицаОС.ГруппаИмущества = ЗНАЧЕНИЕ(Справочник.ГруппыИмущества.ГИ3))";
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСведенияОбИмуществе", РезультатЗапроса.Выгрузить());
КонецПроцедуры // СформироватьТаблицаСведенияОбИмуществе

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСведенияОТранспорте(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаОС.ОсновноеСредство,
		|	ВременнаяТаблицаОС.ГруппаИмущества,
		|	ВременнаяТаблицаОС.ДатаВводаВЭксплуатацию,
		|	ВременнаяТаблицаОС.ВидТранспорта,
		|	ВременнаяТаблицаОС.ОбъемДвигателя,
		|	ВременнаяТаблицаОС.ГосНомер,
		|	ВременнаяТаблицаОС.КодПользователяИмущества,
		|	ВременнаяТаблицаОС.КатегорияИмущества,
		|	ВременнаяТаблицаОС.МаркаТранспортногоСредства
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ВременнаяТаблицаОС.ГруппаИмущества = ЗНАЧЕНИЕ(Справочник.ГруппыИмущества.ГИ4с)
		|	ИЛИ ВременнаяТаблицаОС.ГруппаИмущества = ЗНАЧЕНИЕ(Справочник.ГруппыИмущества.ГИ4нс)";
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСведенияОТранспорте", РезультатЗапроса.Выгрузить());
КонецПроцедуры // СформироватьТаблицаСведенияОТранспорте

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаАвансыДоотгрузка(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаШапка.Дата КАК Период,
		|	ТаблицаШапка.Организация,
		|	ТаблицаШапка.Ссылка КАК ДокументА,
		|	ТаблицаАвасыДоотгрузка.Контрагент,
		|	ТаблицаАвасыДоотгрузка.ДоговорКонтрагента КАК Договор,
		|	ЗНАЧЕНИЕ(ВидДВиженияНакопления.Приход) КАК ВидДвижения,
		|	ТаблицаАвасыДоотгрузка.Сумма,
		|	ТаблицаАвасыДоотгрузка.СуммаНДС,
		|	ТаблицаАвасыДоотгрузка.СуммаНСП
		|ИЗ
		|	ВременнаяТаблицаАвансыДоотгрузка КАК ТаблицаАвасыДоотгрузка
	    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ТаблицаШапка
		|		ПО (ИСТИНА)";
	
	РезультатЗапроса = Запрос.Выполнить();
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаАвансыДоотгрузка", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗемельныйНалог(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаШапка.Дата КАК Период,
		|	ТаблицаШапка.Организация КАК Организация,
		|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаОС.КатегорияЗемель КАК КатегорияЗемель,
		|	ТаблицаОС.ВидЗемельногоУчастка КАК ВидЗемельногоУчастка,
		|	ТаблицаОС.КоличествоЧеловек КАК КоличествоЧеловек,
		|	ТаблицаОС.КоэффициентКоммерческогоИспользования КАК КоэффициентКоммерческогоИспользования,
		|	ТаблицаОС.Площадь КАК Площадь,
		|	ТаблицаОС.Область КАК Область,
		|	ТаблицаОС.Район КАК Район,
		|	ТаблицаОС.ДатаНачисленияЗамельногоНалога КАК ДатаНачисленияЗамельногоНалога,
		|	ТаблицаОС.ЗональныйКоэффициент КАК ЗональныйКоэффициент,
		|	ТаблицаОС.СтавкаЗНВторойКатегории КАК СтавкаЗНВторойКатегории,
		|	ТаблицаОС.УчастокПодОбъектомИмущества КАК УчастокПодОбъектомИмущества,
		|	ТаблицаОС.ПлощадьПодОбъектомИмущества КАК ПлощадьПодОбъектомИмущества,
		|	ТаблицаОС.КатегорияИмущества КАК КатегорияОбъектаИмущества,
		|	ТаблицаОС.КодПользователяИмущества
		|ИЗ
		|	ВременнаяТаблицаОС КАК ТаблицаОС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ТаблицаШапка
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ТаблицаОС.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Земля)
		|	И &ПлательщикЗН";
		
	Запрос.УстановитьПараметр("ПлательщикЗН", СтруктураДополнительныеСвойства.УчетнаяПолитика.ПлательщикЗН);	
		
	РезультатЗапроса = Запрос.Выполнить();
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПараметрыУчетаОСЗемельныйНалог", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗемельныйНалогПодОбъектомИмущества(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	//Если не заполнена колонка ДатаНачисленияНалогаНаИмущество, то записываем дату начисления Земельного налога с начала месяца, следующего за месяцем оформления дока
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаШапка.Дата КАК Период,
		|	ТаблицаШапка.Организация КАК Организация,
		|	ТаблицаОС.ОсновноеСредство КАК ОбъектИмущества,
		|	ТаблицаОС.УчастокПодОбъектомИмущества КАК ОсновноеСредство,
		|	ТаблицаОС.ПлощадьПодОбъектомИмущества КАК ПлощадьПодОбъектомИмущества,
		|	ВЫБОР
		|		КОГДА ТаблицаОС.ДатаНачисленияНалогаНаИмущество = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ТаблицаШапка.Дата, МЕСЯЦ, 1), МЕСЯЦ)
		|		ИНАЧЕ ТаблицаОС.ДатаНачисленияНалогаНаИмущество
		|	КОНЕЦ КАК ДатаНачисленияЗамельногоНалога
		|ИЗ
		|	ВременнаяТаблицаОС КАК ТаблицаОС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ТаблицаШапка
		|		ПО (ИСТИНА)
		|ГДЕ
		|	Не ТаблицаОС.УчастокПодОбъектомИмущества = ЗНАЧЕНИЕ(Справочник.ОсновныеСредства.ПустаяСсылка)
		|	И &ПлательщикЗН";
		
	Запрос.УстановитьПараметр("ПлательщикЗН", СтруктураДополнительныеСвойства.УчетнаяПолитика.ПлательщикЗН);	
		
	РезультатЗапроса = Запрос.Выполнить();
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПараметрыУчетаОСЗемельныйНалогПодОбъектомИмущества", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаУбыткиПрошлыхЛет(ДокументСсылка, СтруктураДополнительныеСвойства) 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ЗНАЧЕНИЕ(ВидДВиженияНакопления.Приход) КАК ВидДвижения,
		|	НАЧАЛОПЕРИОДА(ВременнаяТаблицаНалоговаяДекларация.ГОД, ГОД) КАК Год,
		|	ВременнаяТаблицаНалоговаяДекларация.Убыток КАК Сумма
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаНалоговаяДекларация КАК ВременнаяТаблицаНалоговаяДекларация
		|		ПО (ИСТИНА)";
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаУбыткиПрошлыхЛет", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры  

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаАвансыПодотчетника(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаШапка.Дата КАК Период,
		|	ТаблицаШапка.Дата КАК ДатаАванса,
		|	ТаблицаШапка.Организация КАК Организация,
		|	ТаблицаШапка.Ссылка КАК ДокументАванса,
		|	ТаблицаПрочее.Субконто1 КАК ФизЛицо,
		|	ТаблицаПрочее.СчетУчета КАК СчетУчета,
		|	ТаблицаПрочее.Валюта КАК Валюта,
		|	СУММА(ВЫБОР
		|			КОГДА ТаблицаПрочее.СчетУчета = &СчетРасчетаСПодотчетнымиЛицами
		|				ТОГДА ТаблицаПрочее.Сумма
		|			ИНАЧЕ -ТаблицаПрочее.Сумма
		|		КОНЕЦ) КАК Сумма
		|ИЗ
		|	ВременнаяТаблицаПрочее КАК ТаблицаПрочее
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ТаблицаШапка
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ТаблицаПрочее.СчетУчета В(&СписокСчетов)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаШапка.Дата,
		|	ТаблицаШапка.Ссылка,
		|	ТаблицаШапка.Организация,
		|	ТаблицаПрочее.Валюта,
		|	ТаблицаПрочее.СчетУчета,
		|	ТаблицаПрочее.Субконто1,
		|	ТаблицаШапка.Дата";
	
	СчетРасчетаСПодотчетнымиЛицами = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами;
	СписокСчетов = Новый Массив;
	СписокСчетов.Добавить(СчетРасчетаСПодотчетнымиЛицами);
	СписокСчетов.Добавить(СчетРасчетаСПодотчетнымиЛицами.ПарныйСчет);
	
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
	Запрос.УстановитьПараметр("СчетРасчетаСПодотчетнымиЛицами", СчетРасчетаСПодотчетнымиЛицами);
	
	РезультатЗапроса = Запрос.Выполнить();
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаАвансыПодотчетника", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК Ссылка,
		|	ТаблицаДокумента.Дата КАК Дата,
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ТаблицаДокумента.Склад КАК Склад,
		|	ТаблицаДокумента.СчетУчета КАК СчетУчета,
		|	ТаблицаДокумента.РазделУчета КАК РазделУчета,
		|	ТаблицаДокумента.ЭксплуатируемыеМБП КАК ЭксплуатируемыеМБП,
		|	ТаблицаДокумента.НеПринятыеКУчету КАК НеПринятыеКУчету,
		|	&ВедетсяУчетПоПартиям КАК ВедетсяУчетПоПартиям
		|ПОМЕСТИТЬ ВременнаяТаблицаШапка
		|ИЗ
		|	Документ.ВводНачальныхОстатков КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
		|	ТаблицаДокумента.Количество КАК Количество,
		|	ТаблицаДокумента.Сумма КАК Сумма
		|ПОМЕСТИТЬ ВременнаяТаблицаТовары
		|ИЗ
		|	Документ.ВводНачальныхОстатков.Товары КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
		|	ТаблицаДокумента.Количество КАК Количество,
		|	ТаблицаДокумента.СуммаИзноса КАК СуммаИзноса,
		|	ТаблицаДокумента.МОЛ КАК МОЛ,
		|	ТаблицаДокумента.Сумма КАК Сумма
		|ПОМЕСТИТЬ ВременнаяТаблицаМБП
		|ИЗ
		|	Документ.ВводНачальныхОстатков.МБП КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.ФизЛицо КАК ФизЛицо,
		|	ТаблицаДокумента.Сумма КАК Сумма
		|ПОМЕСТИТЬ ВременнаяТаблицаРасчетыСПерсоналом
		|ИЗ
		|	Документ.ВводНачальныхОстатков.РасчетыСПерсоналом КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.БанковскийСчетКасса КАК БанковскийСчетКасса,
		|	ТаблицаДокумента.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств,
		|	ТаблицаДокумента.СуммаВал КАК СуммаВал,
		|	ТаблицаДокумента.Сумма КАК Сумма
		|ПОМЕСТИТЬ ВременнаяТаблицаДенежныеСредства
		|ИЗ
		|	Документ.ВводНачальныхОстатков.ДенежныеСредства КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию,
		|	ТаблицаДокумента.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаДокумента.ИнвентарныйНомер КАК ИнвентарныйНомер,
		|	ТаблицаДокумента.СчетУчета КАК СчетУчета,
		|	ТаблицаДокумента.ГруппаНУ КАК ГруппаНУ,
		|	ТаблицаДокумента.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
		|	ТаблицаДокумента.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость,
		|	ТаблицаДокумента.НакопленнаяАмортизация КАК НакопленнаяАмортизация,
		|	ТаблицаДокумента.СрокСлужбы КАК СрокСлужбы,
		|	ТаблицаДокумента.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
		|	ТаблицаДокумента.СпособОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизации,
		|	ТаблицаДокумента.ОбъемПродукции КАК ОбъемПродукции,
		|	ТаблицаДокумента.КоэффициентУскорения КАК КоэффициентУскорения,
		|	ТаблицаДокумента.МОЛ КАК МОЛ,
		|	ТаблицаДокумента.Подразделение КАК Подразделение,
		|	ТаблицаДокумента.СпособПоступления КАК СпособПоступления,
		|	ТаблицаДокумента.НомерДокументаПринятияКУчету КАК НомерДокументаПринятияКУчету,
		|	ТаблицаДокумента.НазваниеДокументаПринятияКУчету КАК НазваниеДокументаПринятияКУчету,
		|	ТаблицаДокумента.ГруппаИмущества КАК ГруппаИмущества,
		|	ТаблицаДокумента.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию1,
		|	ТаблицаДокумента.КодИмущества КАК КодИмущества,
		|	ТаблицаДокумента.МатериалСтен КАК МатериалСтен,
		|	ТаблицаДокумента.ЖилаяПлощадь КАК ЖилаяПлощадь,
		|	ТаблицаДокумента.НежилаяПлощадь КАК НежилаяПлощадь,
		|	ТаблицаДокумента.РегиональныйКоэффициент КАК РегиональныйКоэффициент,
		|	ТаблицаДокумента.ЗональныйКоэффициент КАК ЗональныйКоэффициент,
		|	ТаблицаДокумента.ОтраслевойКоэффициент КАК ОтраслевойКоэффициент,
		|	ТаблицаДокумента.КатегорияИмущества КАК КатегорияИмущества,
		|	ТаблицаДокумента.КодПользователяИмущества КАК КодПользователяИмущества,
		|	ТаблицаДокумента.ВидТранспорта КАК ВидТранспорта,
		|	ТаблицаДокумента.ОбъемДвигателя КАК ОбъемДвигателя,
		|	ТаблицаДокумента.ГосНомер КАК ГосНомер,
		|	ТаблицаДокумента.МаркаТранспортногоСредства КАК МаркаТранспортногоСредства,
		|	ТаблицаДокумента.СтоимостьДляРасчетаАмортизации КАК СтоимостьДляРасчетаАмортизации,
		|	ТаблицаДокумента.ДатаНачисленияНалогаНаИмущество КАК ДатаНачисленияНалогаНаИмущество,
		|	ТаблицаДокумента.Консервация КАК Консервация,
		|	ТаблицаДокумента.КатегорияЗемель КАК КатегорияЗемель,
		|	ТаблицаДокумента.ВидЗемельногоУчастка КАК ВидЗемельногоУчастка,
		|	ТаблицаДокумента.КоличествоЧеловек КАК КоличествоЧеловек,
		|	ТаблицаДокумента.КоэффициентКоммерческогоИспользования КАК КоэффициентКоммерческогоИспользования,
		|	ТаблицаДокумента.Площадь КАК Площадь,
		|	ТаблицаДокумента.Область КАК Область,
		|	ТаблицаДокумента.Район КАК Район,
		|	ТаблицаДокумента.ДатаНачисленияЗамельногоНалога КАК ДатаНачисленияЗамельногоНалога,
		|	ТаблицаДокумента.СтавкаЗНВторойКатегории КАК СтавкаЗНВторойКатегории,
		|	ТаблицаДокумента.УчастокПодОбъектомИмущества КАК УчастокПодОбъектомИмущества,
		|	ТаблицаДокумента.ПлощадьПодОбъектомИмущества КАК ПлощадьПодОбъектомИмущества
		|ПОМЕСТИТЬ ВременнаяТаблицаОС
		|ИЗ
		|	Документ.ВводНачальныхОстатков.ОС КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.БалансоваяСтоимостьНаКонецГода КАК БалансоваяСтоимостьНаКонецГода,
		|	ТаблицаДокумента.АмортизацияЗаГод КАК АмортизацияЗаГод,
		|	ТаблицаДокумента.ГруппаНУ КАК ГруппаНУ,
		|	ТаблицаДокумента.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаДокумента.СуммаПоступленияОстаток КАК СуммаПоступленияОстаток,
		|	ТаблицаДокумента.СуммаВыбытияОстаток КАК СуммаВыбытияОстаток
		|ПОМЕСТИТЬ ВременнаяТаблицаГруппаНалоговогоУчета
		|ИЗ
		|	Документ.ВводНачальныхОстатков.ГруппаНалоговогоУчета КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Год КАК Год,
		|	ТаблицаДокумента.Убыток КАК Убыток
		|ПОМЕСТИТЬ ВременнаяТаблицаНалоговаяДекларация
		|ИЗ
		|	Документ.ВводНачальныхОстатков.НалоговаяДекларация КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.СчетУчета КАК СчетУчета,
		|	ТаблицаДокумента.Субконто1 КАК Субконто1,
		|	ТаблицаДокумента.Субконто2 КАК Субконто2,
		|	ТаблицаДокумента.Субконто3 КАК Субконто3,
		|	ТаблицаДокумента.Количество КАК Количество,
		|	ТаблицаДокумента.Валюта КАК Валюта,
		|	ТаблицаДокумента.Курс КАК Курс,
		|	ТаблицаДокумента.ВалютнаяСумма КАК ВалютнаяСумма,
		|	ТаблицаДокумента.ВидСальдо КАК ВидСальдо,
		|	ТаблицаДокумента.Сумма КАК Сумма
		|ПОМЕСТИТЬ ВременнаяТаблицаПрочее
		|ИЗ
		|	Документ.ВводНачальныхОстатков.Прочее КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Контрагент КАК Контрагент,
		|	ТаблицаДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаДокумента.Сумма КАК Сумма,
		|	ТаблицаДокумента.СуммаНДС КАК СуммаНДС,
		|	ТаблицаДокумента.СуммаНСП КАК СуммаНСП
		|ПОМЕСТИТЬ ВременнаяТаблицаАвансыДоотгрузка
		|ИЗ
		|	Документ.ВводНачальныхОстатков.АвансыИДоотгрузка КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Если БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(СтруктураДополнительныеСвойства.ДляПроведения.Организация, СтруктураДополнительныеСвойства.ДляПроведения.Дата) Тогда 
		СпособОценкиТМЗ = БухгалтерскийУчетСервер.СпособОценкиТМЗ(
			СтруктураДополнительныеСвойства.ДляПроведения.Дата,
			СтруктураДополнительныеСвойства.ДляПроведения.Организация);
		ВедетсяУчетПоПартиям = СпособОценкиТМЗ <> Перечисления.СпособыОценки.ПоСредней;
	Иначе 
		ВедетсяУчетПоПартиям = Истина;	
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ВедетсяУчетПоПартиям", ВедетсяУчетПоПартиям);
	Запрос.Выполнить();      	
	
	СформироватьТаблицаХозрасчетный(ДокументСсылка, СтруктураДополнительныеСвойства);			 
	// ОС
	СформироватьТаблицаПараметрыУчетаОС(ДокументСсылка, СтруктураДополнительныеСвойства); 
	СформироватьТаблицаСостоянияОС(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаМестонахождениеОС(ДокументСсылка, СтруктураДополнительныеСвойства); 
	СформироватьТаблицаСобытияОС(ДокументСсылка, СтруктураДополнительныеСвойства);
	// Сведения об имуществе
	СформироватьТаблицаСведенияОбИмуществе(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаСведенияОТранспорте(ДокументСсылка, СтруктураДополнительныеСвойства);
	// Декларация
	СформироватьТаблицаНалоговаяАмортизация(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаУбыткиПрошлыхЛет(ДокументСсылка, СтруктураДополнительныеСвойства);
	// Авансы доотгрузка
	СформироватьТаблицаАвансыДоотгрузка(ДокументСсылка, СтруктураДополнительныеСвойства);
	// Земельный налог
	СформироватьТаблицаЗемельныйНалог(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗемельныйНалогПодОбъектомИмущества(ДокументСсылка, СтруктураДополнительныеСвойства);

	СформироватьТаблицаАвансыПодотчетника(ДокументСсылка, СтруктураДополнительныеСвойства);
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

#КонецОбласти

#Область ВерсионированиеОбъектов

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//@skip-warning
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#КонецЕсли

