#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет табличную часть Материалы остатками Контрагента.
// 
Процедура ЗаполнитьМатериалыПоОстаткамКонтрагента(ДатаДокумента) Экспорт
	
	// Остатки по счету Z021.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Субконто2 КАК Номенклатура,
		|	ХозрасчетныйОстатки.КоличествоОстатокДт КАК Количество,
		|	ХозрасчетныйОстатки.Счет КАК СчетУчета
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&Период,
		|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.МатериалыПринятыеВПереработку),
		|			&ВидыСубконто,
		|			Организация = &Организация
		|				И Субконто1 = &Контрагент И Субконто3 = &Склад) КАК ХозрасчетныйОстатки";
	
	Запрос.УстановитьПараметр("Период", ДатаДокумента);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Склад", Склад);
	ВидыСубконто= Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	МатериалыЗаказчика.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполненияДокумента

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.ОтчетПроизводстваЗаСмену - Данные заполнения документа.
//	
Процедура ЗаполнитьПоОтчетуПроизводстваЗаСмену(ДанныеЗаполнения) Экспорт

	ДокументОснование = ДанныеЗаполнения;
	
	Организация	= ДанныеЗаполнения.Организация;
	Склад = ДанныеЗаполнения.Склад;
	СчетаУчетаЗатратВТаблице = Ложь;
	СчетЗатрат = ДанныеЗаполнения.СчетЗатрат;
	Субконто1 = ДанныеЗаполнения.ПодразделениеЗатрат;
	Субконто2 = ДанныеЗаполнения.НоменклатурнаяГруппа;
	Субконто3 = Справочники.СтатьиЗатрат.СписаниеМатериалов;

	// Получим данные о сырье для заполнения табличной части
	ТекстыЗапроса = Новый Массив;
	// Исходные данные
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	0 КАК НомерСписка,
		|	Продукция.Номенклатура КАК НоменклатураПродукции,
		|	Продукция.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	Продукция.Спецификация КАК Спецификация,
		|	Продукция.Количество КАК КоличествоПродукции
		|ПОМЕСТИТЬ Выпуск
		|ИЗ
		|	&Продукция КАК Продукция");
	
	// Данные о расходе сырья
	ТекстыЗапроса.Добавить(УправлениеПроизводством.ТекстЗапросаВременнаяТаблицаЗатратыСырья());
	
	// Преобразуем в формат получателя
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	МАКСИМУМ(ЗатратыСырья.НомерСтрокиСпецификации) КАК НомерСтрокиСпецификации,
		|	ЗатратыСырья.Номенклатура КАК Номенклатура,
		|	ЗатратыСырья.Номенклатура.Наименование КАК НоменклатураПредставление,
		|	СУММА(ЗатратыСырья.Количество) КАК Количество
		|ИЗ
		|	ЗатратыСырья КАК ЗатратыСырья
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗатратыСырья.Номенклатура,
		|	ЗатратыСырья.Номенклатура.Наименование
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтрокиСпецификации,
		|	НоменклатураПредставление");
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Продукция", ДанныеЗаполнения.Продукция.Выгрузить());
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Материалы.Загрузить(Запрос.Выполнить().Выгрузить());
	
	// Заполнение счета учета.	
	Для Каждого СтрокаТабличнойЧасти Из Материалы Цикл 
		СчетаУчетаНоменклатуры = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТабличнойЧасти.Номенклатура);
		СтрокаТабличнойЧасти.СчетУчета = СчетаУчетаНоменклатуры.СчетУчета;
	КонецЦикла;

КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.ОтчетПроизводстваЗаСмену - Данные заполнения документа.
//	
Процедура ЗаполнитьПоАктуОбОказанииПроизводственныхУслуг(ДанныеЗаполнения) Экспорт

	ДокументОснование = ДанныеЗаполнения;
	
	Организация	= ДанныеЗаполнения.Организация;
	Склад = ДанныеЗаполнения.Склад;
	
	СчетаУчетаЗатратВТаблице = Ложь;
	СчетЗатрат = ДанныеЗаполнения.СчетЗатрат;
	Субконто1 = ДанныеЗаполнения.ПодразделениеЗатрат;
	Субконто2 = ДанныеЗаполнения.НоменклатурнаяГруппа;
	Субконто3 = Справочники.СтатьиЗатрат.МатериальныеЗатраты;
		
	// Получим данные о сырье для заполнения табличной части
	ТекстыЗапроса = Новый Массив;
	// Исходные данные
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	0 КАК НомерСписка,
		|	Услуги.Номенклатура КАК НоменклатураПродукции,
		|	Услуги.Спецификация КАК Спецификация,
		|	Услуги.Количество КАК КоличествоПродукции
		|ПОМЕСТИТЬ Выпуск
		|ИЗ
		|	&Услуги КАК Услуги");
	
	// Данные о расходе сырья
	ТекстыЗапроса.Добавить(УправлениеПроизводством.ТекстЗапросаВременнаяТаблицаЗатратыСырья());
	
	// Преобразуем в формат получателя
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	МАКСИМУМ(ЗатратыСырья.НомерСтрокиСпецификации) КАК НомерСтрокиСпецификации,
		|	ЗатратыСырья.Номенклатура КАК Номенклатура,
		|	СУММА(ЗатратыСырья.Количество) КАК Количество
		|ИЗ
		|	ЗатратыСырья КАК ЗатратыСырья
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗатратыСырья.Номенклатура
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтрокиСпецификации");
	
	Запрос = Новый Запрос();
	ТаблицаУслуги = ДанныеЗаполнения.Услуги.Выгрузить();
	Запрос.Параметры.Вставить("Услуги", ТаблицаУслуги);
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Материалы.Загрузить(Запрос.Выполнить().Выгрузить());
	
	// Заполнение счета учета.	
	Для Каждого СтрокаТабличнойЧасти Из Материалы Цикл 
		СчетаУчетаНоменклатуры = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТабличнойЧасти.Номенклатура);
		СтрокаТабличнойЧасти.СчетУчета = СчетаУчетаНоменклатуры.СчетУчета;
	КонецЦикла;

КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.ПоступлениеТоваровУслуг - Данные заполнения документа.
//	
Процедура ЗаполнитьПоПоступлениюТоваровУслуг(ДанныеЗаполнения) Экспорт

	ДокументОснование = ДанныеЗаполнения;
	
	Организация	= ДанныеЗаполнения.Организация;
	Склад = ДанныеЗаполнения.Склад;
	СчетаУчетаЗатратВТаблице = Ложь;
	
	Материалы.Загрузить(ДанныеЗаполнения.Товары.Выгрузить());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену")] = "ЗаполнитьПоОтчетуПроизводстваЗаСмену";
	СтратегияЗаполнения[Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг")] = "ЗаполнитьПоАктуОбОказанииПроизводственныхУслуг";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПоступлениеТоваровУслуг")] = "ЗаполнитьПоПоступлениюТоваровУслуг";

	ЗаполнениеОбъектовБП.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения, "Субконто1, Субконто2, Субконто3");
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если СчетаУчетаЗатратВТаблице Тогда 
		МассивНепроверяемыхРеквизитов.Добавить("СчетЗатрат");
	Иначе 
		МассивНепроверяемыхРеквизитов.Добавить("Материалы.СчетЗатрат");
	КонецЕсли;	
	
	Если Материалы.Количество() = 0
		И МатериалыЗаказчика.Количество() = 0 Тогда 
		ПроверяемыеРеквизиты.Добавить("Материалы");
	КонецЕсли;	
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

	// Предварительный контроль.
	ВыполнитьПредварительныйКонтроль(Отказ);	

КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ИнициализироватьДанные(Отказ, РежимПроведения);
	
	ОтразитьДвижения(Отказ, РежимПроведения);
	
	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)

	// Инициализация дополнительных свойств для проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииОбработкаПроведения

// Процедура инициализирует данные документа
// и подготавливает таблицы для движения в регистры
//
Процедура ИнициализироватьДанные(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	 	
	// Инициализация данных документа.
	Документы.ТребованиеНакладная.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
КонецПроцедуры
	
// Процедура заполняет регистры данными
//
Процедура ОтразитьДвижения(Отказ, РежимПроведения)

	// Отражение в разделах учета.
	УчетТоваров.СформироватьДвиженияСписаниеТоваров(ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСписанныеТовары, 
		ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРеквизиты, Движения, Отказ, ДополнительныеСвойства);
	УчетМБП.СформироватьДвиженияСписаниеМБП(ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСписанныеМБП, 
		ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРеквизиты, Движения, Отказ, ДополнительныеСвойства);
	УчетТоваров.СформироватьДвиженияСписаниеТоваров(ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСписанныеМатериалыЗаказчика, 
		ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРеквизиты, Движения, Отказ, ДополнительныеСвойства);
		
	КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет контроль противоречий.
//
Процедура ВыполнитьПредварительныйКонтроль(Отказ)
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") 
		И НЕ ДокументОснование.Материалы.Количество() = 0 Тогда 
		ТекстСообщения = НСтр("ru = 'В документе-основании заполнен список ""Материалы"".'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,"ДокументОснование", Отказ);
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли