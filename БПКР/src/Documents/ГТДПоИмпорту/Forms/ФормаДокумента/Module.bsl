#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);			
	
	// Одной строкой / Списком.
	Если Объект.Разделы.Количество() = 0 Тогда
		СтрокаТабличнойЧасти = Объект.Разделы.Добавить();
		СтрокаТабличнойЧасти.КлючСвязи = 1;
		СтрокаТабличнойЧасти.СтавкаСбора = ДанныеУчетнойПолитики.СтавкаТаможенногоСбора;
		СтрокаТабличнойЧасти.СтавкаНДС = УчетНДС.ПолучитьСтавкуНДС(ДатаДокумента, Справочники.СтавкиНДС.Стандарт);
		Элементы.Разделы.ТекущаяСтрока = СтрокаТабличнойЧасти.ПолучитьИдентификатор();	
		
	Иначе
		СтрокаТабличнойЧасти = Объект.Разделы[0];
		
		Если СтрокаТабличнойЧасти.КлючСвязи = 0 Тогда
			СтрокаТабличнойЧасти.КлючСвязи = 1;
			СтрокаТабличнойЧасти.СтавкаСбора = ДанныеУчетнойПолитики.СтавкаТаможенногоСбора;
			СтрокаТабличнойЧасти.СтавкаНДС = УчетНДС.ПолучитьСтавкуНДС(ДатаДокумента, Справочники.СтавкиНДС.Стандарт);	
		КонецЕсли;	
		
		Элементы.Разделы.ТекущаяСтрока = Объект.Разделы[0].ПолучитьИдентификатор();
	КонецЕсли;	
	
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	// РаботаСФормами
	РаботаСФормамиСервер.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом 
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Объект.Товары.Количество() > 0 ИЛИ Объект.ОС.Количество() > 0 Тогда 
		ОписатьОтборДокументовПоступленияИКурс(Элементы.Разделы.ТекущиеДанные);
	КонецЕсли;
	
	Если Объект.Разделы.Количество() > 1 Тогда
		РазделыГТД = Истина;
		УстановитьВозможностьРедактированияСпискомФрагмент();
	КонецЕсли;	
	
	УстановитьПараметрыВыбора();
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ПодборДокументаПоступления"  
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор Тогда
		
		МассивДокументов = Параметр.МассивДокументов;
		СтрокаТабличнойЧасти = Элементы.Разделы.ТекущиеДанные;
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			ЗаполнениеПоПоступлению(МассивДокументов, СтрокаТабличнойЧасти.КлючСвязи);
			ОписатьОтборДокументовПоступленияИКурс(СтрокаТабличнойЧасти);
			
			Объект.КонтрагентПоПоступлению = КонтрагентОтбор;
			
			Если ИспользоватьДопЕдиницыОтбор Тогда	
				СтрокаТабличнойЧасти.РаспределениеАкциза = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияДопРасходов.ПоДопЕдиницам");		
			КонецЕсли;	
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ПодборДокументовДопрасходов" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор Тогда
		
		МассивДокументов = Параметр.МассивДокументов;
		СтрокаТабличнойЧасти = Элементы.Разделы.ТекущиеДанные;
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			СуммаДопрасходов = ЗаполнитьДопрасходыИВернутьСумму(МассивДокументов, СтрокаТабличнойЧасти.КлючСвязи);
		КонецЕсли;
		
		СтрокаТабличнойЧасти.ДопРасходы = СтрокаТабличнойЧасти.ДопРасходы + СуммаДопрасходов;
		
		Если Объект.Разделы.Итог("ДопРасходы") = Объект.ДопРасходы.Итог("СуммаДопРасходов") Тогда
			Объект.НеобходимоПеревыбратьДопрасходы = Ложь;	
		КонецЕсли;	
		
		УстановитьВидимостьДоступностьЭлементов();
		
	ИначеЕсли ИмяСобытия = "ПодборНоменклатурыПроизведен" 
		И ТипЗнч(Параметр) = Тип("Структура")
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор Тогда
		
		АдресЗапасовВХранилище = Параметр.АдресЗапасовВХранилище;
		ПолучитьТоварыИзХранилища(АдресЗапасовВХранилище, Элементы.Разделы.ТекущиеДанные.КлючСвязи);
		
		// Если для в текущем разделе есть допрасходы, то показывать сообщение.
		Если Объект.ДопРасходы.НайтиСтроки(Новый Структура("КлючСвязи",  Элементы.Разделы.ТекущиеДанные.КлючСвязи)).Количество() > 0 Тогда
			Объект.НеобходимоПеревыбратьДопрасходы = Истина;
			УстановитьВидимостьДоступностьЭлементов();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	
	// РаботаСФормами
	РаботаСФормамиСервер.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчета.ПослеЗаписиНаСервере(ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
	Валюта = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка");
	
	Если Объект.Разделы.Количество() = 1 Тогда
		Валюта = Объект.Разделы[0].Валюта;	
	Иначе
		СтрокаТабличнойЧасти = Элементы.Разделы.ТекущиеДанные;
		
		Если НЕ СтрокаТабличнойЧасти = Неопределено Тогда
			Валюта = СтрокаТабличнойЧасти.Валюта;	
		КонецЕсли;	
	КонецЕсли;	
	
	Если НЕ ВалютаОтбор.Пустая() Тогда
		КурсКратность 	 = ПолучитьКурсИКратность(Валюта, ДатаДокумента);
		Объект.Курс 	 = КурсКратность.Курс;
		Объект.Кратность = КурсКратность.Кратность;
	КонецЕсли;
	
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Контрагент.
//
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент, Объект.Организация);
	
	Объект.ДоговорКонтрагента = СтруктураДанные.ДоговорКонтрагента;
	
	ПриИзмененииДоговора(ДатаДокумента, Объект.ДоговорКонтрагента);
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Договор контрагента.
//
&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	ПриИзмененииДоговора(ДатаДокумента, Объект.ДоговорКонтрагента)
КонецПроцедуры

&НаКлиенте
Процедура ВводСуммГТДВручнуюПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеВручнуюПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Асинх Процедура РазделыГТДПриИзменении(Элемент)
	
	КоличествоСтрок = Объект.Разделы.Количество();	
	
	Если НЕ РазделыГТД И КоличествоСтрок > 1 Тогда		
		ТекстВопроса = НСтр("ru = 'Все строки кроме первой будут удалены. Продолжить выполнение операции?'");
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			РазделыГТД = Истина;
			Возврат;
		КонецЕсли;	
		
		УстановитьВозможностьРедактированияСписком(КоличествоСтрок);
	Иначе
		УстановитьВозможностьРедактированияСпискомФрагмент();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СопровождениеПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРазделы

&НаКлиенте
Процедура РазделыПриАктивизацииСтроки(Элемент)
	
	ИмяТабличнойЧасти = "Разделы";
	БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "Товары");
	БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ОС");
	БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ДопРасходы");
	
	СтрокаТабличнойЧасти = Элементы.Разделы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		ОписатьОтборДокументовПоступленияИКурс(СтрокаТабличнойЧасти);
	КонецЕсли; 
	
	РассчитатьИтогиТабличныхЧастей();
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыПередУдалением(Элемент, Отказ)
	
	ИмяТабличнойЧасти = "Разделы";
	БухгалтерскийУчетКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтотОбъект, "Товары");
	БухгалтерскийУчетКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтотОбъект, "ОС");
	БухгалтерскийУчетКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтотОбъект, "ДопРасходы");
КонецПроцедуры

&НаКлиенте
Процедура РазделыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ИмяТабличнойЧасти = "Разделы";
	КлючСвязиПриКопировании = 0;
	
	Если Элемент.ТекущиеДанные.КлючСвязи = 0 ИЛИ Копирование Тогда	
		КлючСвязиПриКопировании = ?(Копирование, Элемент.ТекущиеДанные.КлючСвязи, 0);
		
		БухгалтерскийУчетКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтотОбъект);
	КонецЕсли;
	
	// Вместе с разделом коппируются данные товаров и ОС
	Если Копирование И НЕ КлючСвязиПриКопировании = 0 Тогда
		
		КлючСвязи = Элемент.ТекущиеДанные.КлючСвязи;
		
		// Сбор данных
		МассивТоваров = Новый Массив();		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
			МассивТоваров.Добавить(СтрокаТабличнойЧасти);	
		КонецЦикла;	
		
		МассивОС = Новый Массив();		
		Для Каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл
			МассивОС.Добавить(СтрокаТабличнойЧасти);	
		КонецЦикла;
		
		// Создание строк ТЧ
		Для Каждого СтрокаМассива Из МассивТоваров Цикл
			СтрокаТабличнойЧасти = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаМассива);
			СтрокаТабличнойЧасти.КлючСвязи = КлючСвязи;
		КонецЦикла;
		
		Для Каждого СтрокаМассива Из МассивОС Цикл
			СтрокаТабличнойЧасти = Объект.ОС.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаМассива);
			СтрокаТабличнойЧасти.КлючСвязи = КлючСвязи;
		КонецЦикла;
	КонецЕсли;	
	
	БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "Товары");
	БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ОС");
	БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ДопРасходы");
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.СтавкаСбора = ДанныеУчетнойПолитики.СтавкаТаможенногоСбора;	
		Элемент.ТекущиеДанные.СтавкаНДС = УчетНДСВызовСервера.ПолучитьСтавкуНДС(ДатаДокумента, ПредопределенноеЗначение("Справочник.СтавкиНДС.Стандарт"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РазделыРаспределениеАкциза1ПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();	
КонецПроцедуры

&НаКлиенте
Процедура РазделыРаспределениеАкцизаПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();	
КонецПроцедуры

&НаКлиенте
Процедура РазделыДопРасходыПриИзменении(Элемент)
	Объект.НеобходимоПеревыбратьДопрасходы = Истина;
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура РазделыДопРасходы1ПриИзменении(Элемент)
	Объект.НеобходимоПеревыбратьДопрасходы = Истина;
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Процедура - обработчик события ПередНачаломДобавления поля ввода Товары.
//
&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ИмяТабличнойЧасти = "Разделы";
	Отказ = БухгалтерскийУчетКлиент.ПередНачаломДобавленияВПодчиненнуюТабличнуюЧасть(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования поля ввода Товары.
//
&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ИмяТабличнойЧасти = "Товары";
		БухгалтерскийУчетКлиент.ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти(ЭтотОбъект, Элемент.Имя);
		
		// Если для в текущем разделе есть допрасходы, то показывать сообщение.
		Если Объект.ДопРасходы.НайтиСтроки(Новый Структура("КлючСвязи", Элемент.ТекущиеДанные.КлючСвязи)).Количество() > 0 Тогда
			Объект.НеобходимоПеревыбратьДопрасходы = Истина;
			УстановитьВидимостьДоступностьЭлементов();
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Разделы.ТекущиеДанные;
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи);
	
	МассивСтрокТовары = Объект.Товары.НайтиСтроки(СтруктураОтбора);
	МассивСтрокОС = Объект.ОС.НайтиСтроки(СтруктураОтбора);
	
	Если МассивСтрокТовары.Количество() = 0 И МассивСтрокОС.Количество() = 0 Тогда
		
		Если Объект.Товары.Количество() = 0 И Объект.ОС.Количество() = 0 Тогда	
			КонтрагентОтбор = Неопределено;
		КонецЕсли;	
		
		Элементы.ДекорацияОписанияОтборовДокументовПоступления.Заголовок = 
			ПолучитьТекстОписания(КонтрагентОтбор, ДатаОтбор, ВалютаОтбор, ДоговорОтбор, ИспользоватьДопЕдиницыОтбор);
			
		Объект.КонтрагентПоПоступлению = ?(Объект.ВводСуммГТДВручную, Объект.КонтрагентПоПоступлению, КонтрагентОтбор);	
			
		Если НЕ ВалютаОтбор.Пустая() Тогда
			КурсКратность 	 = ПолучитьКурсИКратность(ВалютаОтбор, ДатаОтбор);
			Объект.Курс 	 = КурсКратность.Курс;
			Объект.Кратность = КурсКратность.Кратность;
			
			СтрокаТабличнойЧасти.Валюта = ВалютаОтбор;
		КонецЕсли;
		
		УстановитьВидимостьДоступностьЭлементов();
	КонецЕсли;	
	
	Если НЕ (Объект.Товары.Итог("ДопРасходы") + Объект.ОС.Итог("ДопРасходы")) = Объект.ДопРасходы.Итог("СуммаДопРасходов") Тогда
		Объект.НеобходимоПеревыбратьДопрасходы = Истина;
		УстановитьВидимостьДоступностьЭлементов();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДопРасходыПриИзменении(Элемент)
	Объект.НеобходимоПеревыбратьДопрасходы = Истина;
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	РассчитатьИтогиТабличныхЧастей();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОС

// Процедура - обработчик события ПередНачаломДобавления поля ввода ОС.
//
&НаКлиенте
Процедура ОСПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ИмяТабличнойЧасти = "Разделы";
	Отказ = БухгалтерскийУчетКлиент.ПередНачаломДобавленияВПодчиненнуюТабличнуюЧасть(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования поля ввода ОС.
//
&НаКлиенте
Процедура ОСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ИмяТабличнойЧасти = "ОС";
		БухгалтерскийУчетКлиент.ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти(ЭтотОбъект, Элемент.Имя);
		
		// Если для в текущем разделе есть допрасходы, то показывать сообщение.
		Если Объект.ДопРасходы.НайтиСтроки(Новый Структура("КлючСвязи", Элемент.ТекущиеДанные.КлючСвязи)).Количество() > 0 Тогда
			Объект.НеобходимоПеревыбратьДопрасходы = Истина;
			УстановитьВидимостьДоступностьЭлементов();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОСПослеУдаления(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Разделы.ТекущиеДанные;
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи);
	
	МассивСтрокТовары = Объект.Товары.НайтиСтроки(СтруктураОтбора);
	МассивСтрокОС = Объект.ОС.НайтиСтроки(СтруктураОтбора);
	
	Если МассивСтрокТовары.Количество() = 0 И МассивСтрокОС.Количество() = 0 Тогда
		
		Если Объект.Товары.Количество() = 0 И Объект.ОС.Количество() = 0 Тогда	
			КонтрагентОтбор = Неопределено;
		КонецЕсли;	
		
		Элементы.ДекорацияОписанияОтборовДокументовПоступления.Заголовок = 
			ПолучитьТекстОписания(КонтрагентОтбор, ДатаОтбор, ВалютаОтбор, ДоговорОтбор, ИспользоватьДопЕдиницыОтбор);
			
		Объект.КонтрагентПоПоступлению = ?(Объект.ВводСуммГТДВручную, Объект.КонтрагентПоПоступлению, КонтрагентОтбор);	
			
		Если НЕ ВалютаОтбор.Пустая() Тогда
			КурсКратность 	 = ПолучитьКурсИКратность(ВалютаОтбор, ДатаОтбор);
			Объект.Курс 	 = КурсКратность.Курс;
			Объект.Кратность = КурсКратность.Кратность;
			
			СтрокаТабличнойЧасти.Валюта = ВалютаОтбор;
		КонецЕсли;
		
		УстановитьВидимостьДоступностьЭлементов();
	КонецЕсли;	
	
	Если НЕ (Объект.Товары.Итог("ДопРасходы") + Объект.ОС.Итог("ДопРасходы")) = Объект.ДопРасходы.Итог("СуммаДопРасходов") Тогда
		Объект.НеобходимоПеревыбратьДопрасходы = Истина;
		УстановитьВидимостьДоступностьЭлементов();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОСДопРасходыПриИзменении(Элемент)
	Объект.НеобходимоПеревыбратьДопрасходы = Истина;
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ОСПриИзменении(Элемент)
	РассчитатьИтогиТабличныхЧастей();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДопрасходы

&НаКлиенте
Процедура ДопрасходыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ИмяТабличнойЧасти = "Разделы";
	Отказ = БухгалтерскийУчетКлиент.ПередНачаломДобавленияВПодчиненнуюТабличнуюЧасть(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ДопрасходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ИмяТабличнойЧасти = "ДопРасходы";
		БухгалтерскийУчетКлиент.ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти(ЭтотОбъект, Элемент.Имя);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДопрасходыПередУдалением(Элемент, Отказ)
	
	Если Объект.Разделы.Количество() = 1 Тогда
		Для Каждого СтрокаТабличнойЧасти Из Объект.Разделы Цикл
			СтрокаТабличнойЧасти.ДопРасходы = 0;	
		КонецЦикла;
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
			СтрокаТабличнойЧасти.ДопРасходы = 0;	
		КонецЦикла;
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл
			СтрокаТабличнойЧасти.ДопРасходы = 0;	
		КонецЦикла;
		
		ДопрасходыПослеУдаленияНаСервере();	
	КонецЕсли;	
	
	УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДопрасходыПослеУдаления(Элемент)
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Разделы Цикл
		СтрокаТабличнойЧасти.ДопРасходы = 0;	
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		СтрокаТабличнойЧасти.ДопРасходы = 0;	
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл
		СтрокаТабличнойЧасти.ДопРасходы = 0;	
	КонецЦикла;
	
	ДопрасходыПослеУдаленияНаСервере();
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ДопрасходыПриИзменении(Элемент)
	РассчитатьИтогиТабличныхЧастей();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьПоступление(Команда)	
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ДатаДокумента", ДатаДокумента);
	ПараметрыОтбора.Вставить("Организация", Объект.Организация);
	ПараметрыОтбора.Вставить("ИспользоватьДопЕдиницы", ИспользоватьДопЕдиницыОтбор);
	ПараметрыОтбора.Вставить("ДатаОтбор", ДатаОтбор);
	ПараметрыОтбора.Вставить("Валюта", ВалютаОтбор);
	ПараметрыОтбора.Вставить("УникальныйИдентификаторФормыВладельца", УникальныйИдентификатор);
	ПараметрыОтбора.Вставить("МассивПоступлений", ДокументыПоступленияТекущегоРаздела());
	
	ОткрытьФорму("Документ.ГТДПоИмпорту.Форма.ФормаПодбораДокументовПоступления", ПараметрыОтбора, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборДокументовДопрасходов(Команда)
	
	Если Объект.Разделы.Количество() = 1 Тогда
		
		МассивДопРасходов = Новый Массив();
		Для Каждого СтрокаТабличнойЧасти Из Объект.ДопРасходы Цикл
			МассивДопРасходов.Добавить(СтрокаТабличнойЧасти.ДокументДопРасходов);	
		КонецЦикла;
		
	Иначе
		ТекущаяСтрокаРаздела = Элементы.Разделы.ТекущиеДанные;
		
		Если ТекущаяСтрокаРаздела = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Необходимо выделить один из разделов.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.Разделы");	
			Возврат;
		КонецЕсли;	
		
		КлючСвязи = ТекущаяСтрокаРаздела.КлючСвязи;
		
		МассивДопРасходов = Новый Массив();
		Для Каждого СтрокаТабличнойЧасти Из Объект.ДопРасходы Цикл
			Если СтрокаТабличнойЧасти.КлючСвязи = КлючСвязи Тогда
				МассивДопРасходов.Добавить(СтрокаТабличнойЧасти.ДокументДопРасходов);
			КонецЕсли;	
		КонецЦикла;		
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ДатаОтбора", ДатаДокумента);
	ПараметрыОтбора.Вставить("МассивПоступлений", ДокументыПоступленияТекущегоРаздела());
	ПараметрыОтбора.Вставить("МассивДопРасходов", МассивДопРасходов);
	ПараметрыОтбора.Вставить("УникальныйИдентификаторФормыВладельца", УникальныйИдентификатор);
	
	ОткрытьФорму("Документ.ГТДПоИмпорту.Форма.ФормаПодбораДокументовДопРасходов", ПараметрыОтбора, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура Рассчитать(Команда)
	
	Отказ = ПроверитьЗаполнениеПередРасчетом();
	
	Если Отказ Тогда 
		Возврат
	КонецЕсли;
	
	СтрокаТабличнойЧасти = Элементы.Разделы.ТекущиеДанные;
	
	ПервыйРасчет = Ложь;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		Если СтрокаТабличнойЧасти.ФактурнаяСтоимость = 0 Тогда
			РассчитатьИРаспределить();
			ПервыйРасчет = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПервыйРасчет Тогда    		
		ТекстВопроса = НСтр("ru = 'Данные будут заново распределены и пересчитаны. Продолжить выполнение операции?'");
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
		РассчитатьИРаспределить(); 
		РассчитатьИтогиТабличныхЧастей();
	КонецЕсли;
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события действия команды Подбор в табличную часть Товары.
// Открывает форму подбора.
//
&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	РаботаСПодборомНоменклатурыКлиент.ОткрытьПодбор(ЭтаФорма, "Товары", "Поступление");
КонецПроцедуры

&НаКлиенте
Асинх Процедура Очистить(Команда)
	
	Если Объект.Товары.Количество() > 0 ИЛИ Объект.ОС.Количество() > 0 Тогда  
		ТекстВопроса = НСтр("ru = 'Закладки ""Товары"" и ""ОС"" будут очищены. Продолжить выполнение операции?'");
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
		Объект.Товары.Очистить();
		Объект.ОС.Очистить();
	КонецЕсли;			
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПерезаполнитьПоПоступлениям(Команда)
	
	Отказ = ПроверитьЗаполнениеПередРасчетом();
	
	Если Отказ Тогда 
		Возврат
	КонецЕсли;
	
	Если Объект.Товары.Количество() = 0 И Объект.ОС.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Данных в табличных частях ""Товары"" и ""ОС"" нет. Перезаполнение отменено.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);		
	Иначе
		ТекстВопроса = НСтр("ru = 'Данные выбранных документов будут перезаполнены и документ ГТД будет рассчитан. Продолжить выполнение операции?'");
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
		ПерезаполнитьПоПоступлениямНаСервере();
		ПерезаполнитьСуммыДопрасходов();
		РассчитатьИРаспределить();
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Разделы Цикл
			ОписатьОтборДокументовПоступленияИКурс(СтрокаТабличнойЧасти);	
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура - Установить пиктограмму комментария.
//
&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

// Процедура устанавливает видимость и доступность элементов.
//
&НаКлиенте
Процедура УстановитьВидимостьДоступностьЭлементов()
	
	СтрокаТабличнойЧасти = Элементы.Разделы.ТекущиеДанные;
	
	СопровождениеПоВесу 	= Объект.РаспределениеСопровождения = ПредопределенноеЗначение("Перечисление.СпособРаспределения.ПоВесу");
	АкцизНеНулевой 			= СтрокаТабличнойЧасти.Акциз <> 0;
	СопровождениеНеНулевое 	= Объект.Сопровождение <> 0;
	ДопрасходыНеНулевые 	= СтрокаТабличнойЧасти.ДопРасходы <> 0;
	
	Элементы.ТоварыКоличествоДопЕдиницы.Видимость = СтрокаТабличнойЧасти.РаспределениеАкциза = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияДопРасходов.ПоДопЕдиницам");
		
	Элементы.ТоварыКоэффициентДопЕдиницы.Видимость = СтрокаТабличнойЧасти.РаспределениеАкциза = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияДопРасходов.ПоДопЕдиницам");
														
	Элементы.ТоварыВес.Видимость 						= СопровождениеПоВесу;													
	Элементы.ТоварыАкциз.Видимость 						= АкцизНеНулевой;
	Элементы.ТоварыСопровождение.Видимость 				= СопровождениеНеНулевое;
	Элементы.ТоварыДопРасходы.Видимость 				= ДопрасходыНеНулевые;
	
	Элементы.ОСВес.Видимость 							= СопровождениеПоВесу;
	Элементы.ОСАкциз.Видимость 							= АкцизНеНулевой;	
	Элементы.ОССопровождение.Видимость	 				= СопровождениеНеНулевое;	
	Элементы.ОСДопРасходы.Видимость 					= ДопрасходыНеНулевые;
	
	Элементы.ТоварыКоличество.ТолькоПросмотр 			= НЕ Объект.РаспределениеВручную;
	Элементы.ТоварыКоличествоДопЕдиницы.ТолькоПросмотр 	= НЕ Объект.РаспределениеВручную;
	Элементы.ТоварыКоэффициентДопЕдиницы.ТолькоПросмотр = НЕ Объект.РаспределениеВручную;
	Элементы.ТоварыВес.ТолькоПросмотр 					= НЕ Объект.РаспределениеВручную;	
	Элементы.ТоварыСумма.ТолькоПросмотр 				= НЕ Объект.РаспределениеВручную;
	Элементы.ТоварыПошлина.ТолькоПросмотр 				= НЕ Объект.РаспределениеВручную;
	Элементы.ТоварыТаможенныйСбор.ТолькоПросмотр 		= НЕ Объект.РаспределениеВручную;	
	Элементы.ТоварыАкциз.ТолькоПросмотр 				= НЕ Объект.РаспределениеВручную;
	Элементы.ТоварыСопровождение.ТолькоПросмотр 		= НЕ Объект.РаспределениеВручную;
	Элементы.ТоварыДопРасходы.ТолькоПросмотр 			= НЕ Объект.РаспределениеВручную;
	
	Элементы.ОСВес.ТолькоПросмотр 						= НЕ Объект.РаспределениеВручную;	
	Элементы.ОССумма.ТолькоПросмотр 					= НЕ Объект.РаспределениеВручную;
	Элементы.ОСПошлина.ТолькоПросмотр	 				= НЕ Объект.РаспределениеВручную;
	Элементы.ОСТаможенныйСбор.ТолькоПросмотр 			= НЕ Объект.РаспределениеВручную;	
	Элементы.ОСАкциз.ТолькоПросмотр 					= НЕ Объект.РаспределениеВручную;
	Элементы.ОССопровождение.ТолькоПросмотр 			= НЕ Объект.РаспределениеВручную;
	Элементы.ОСДопРасходы.ТолькоПросмотр 				= НЕ Объект.РаспределениеВручную;
	
	Элементы.РазделыФактурнаяСтоимость.ТолькоПросмотр	= НЕ Объект.ВводСуммГТДВручную;
	Элементы.РазделыФактурнаяСтоимость1.ТолькоПросмотр	= НЕ Объект.ВводСуммГТДВручную;
	Элементы.РазделыДопРасходы.ТолькоПросмотр			= НЕ Объект.ВводСуммГТДВручную;
	Элементы.РазделыДопРасходы1.ТолькоПросмотр			= НЕ Объект.ВводСуммГТДВручную;
	Элементы.РазделыТаможеннаяСтоимость.ТолькоПросмотр 	= НЕ Объект.ВводСуммГТДВручную;
	Элементы.РазделыТаможеннаяСтоимость1.ТолькоПросмотр = НЕ Объект.ВводСуммГТДВручную;
	Элементы.РазделыБазаНДС.ТолькоПросмотр 				= НЕ Объект.ВводСуммГТДВручную;
	Элементы.РазделыБазаНДС1.ТолькоПросмотр 			= НЕ Объект.ВводСуммГТДВручную;
	Элементы.РазделыНДС.ТолькоПросмотр 					= НЕ Объект.ВводСуммГТДВручную;
	Элементы.РазделыНДС1.ТолькоПросмотр 				= НЕ Объект.ВводСуммГТДВручную;
	Элементы.РазделыТаможенныйСбор.ТолькоПросмотр 		= НЕ Объект.ВводСуммГТДВручную;
	Элементы.РазделыТаможенныйСбор1.ТолькоПросмотр 		= НЕ Объект.ВводСуммГТДВручную;
	Элементы.РазделыПошлина.ТолькоПросмотр 				= НЕ Объект.ВводСуммГТДВручную;
	Элементы.РазделыПошлина1.ТолькоПросмотр 			= НЕ Объект.ВводСуммГТДВручную;
		
	Элементы.РазделыЗачетНДС.Видимость					= ДанныеУчетнойПолитики.УказыватьПризнакЗачетаНДСПриПоступлении; 
	Элементы.РазделыЗачетНДС1.Видимость					= ДанныеУчетнойПолитики.УказыватьПризнакЗачетаНДСПриПоступлении;
	
	Элементы.ТоварыСуммаБазыНДС.Видимость				= Объект.ВводСуммГТДВручную И Объект.РаспределениеВручную;
	Элементы.ОССуммаБазыНДС.Видимость					= Объект.ВводСуммГТДВручную И Объект.РаспределениеВручную;
	
	Если НЕ ВалютаОтбор.Пустая() Тогда
		Элементы.Курс.Видимость = Истина;
		
		Если Объект.Кратность > 1 Тогда
			Элементы.Кратность.Видимость = Истина;
		Иначе 
			Элементы.Кратность.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.Курс.Видимость = Ложь;
		Элементы.Кратность.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.КонтрагентПоПоступлению.Видимость = Объект.ВводСуммГТДВручную;
	
	Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.ТоварыДобавить.Видимость 	= Объект.ВводСуммГТДВручную;
	Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.ТоварыСкопировать.Видимость = Объект.ВводСуммГТДВручную;
	Элементы.ОС.КоманднаяПанель.ПодчиненныеЭлементы.ОСДобавить.Видимость 			= Объект.ВводСуммГТДВручную;
	Элементы.ОС.КоманднаяПанель.ПодчиненныеЭлементы.ОССкопировать.Видимость 		= Объект.ВводСуммГТДВручную;
	
	Элементы.Товары.КонтекстноеМеню.ПодчиненныеЭлементы.ТоварыКонтекстноеМенюДобавить.Видимость 	= Объект.ВводСуммГТДВручную;
	Элементы.Товары.КонтекстноеМеню.ПодчиненныеЭлементы.ТоварыКонтекстноеМенюСкопировать.Видимость 	= Объект.ВводСуммГТДВручную;
	Элементы.ОС.КонтекстноеМеню.ПодчиненныеЭлементы.ОСКонтекстноеМенюДобавить.Видимость				= Объект.ВводСуммГТДВручную;
	Элементы.ОС.КонтекстноеМеню.ПодчиненныеЭлементы.ОСКонтекстноеМенюСкопировать.Видимость			= Объект.ВводСуммГТДВручную;
	
	Элементы.ГруппаСообщенияОПерезаполненииДопрасходов.Видимость = Объект.НеобходимоПеревыбратьДопрасходы И НЕ Объект.ВводСуммГТДВручную;
КонецПроцедуры 

// Получает набор данных с сервера для процедуры КонтрагентПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Контрагент, Организация)
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Контрагент, Организация);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ДоговорКонтрагента",
		ДоговорПоУмолчанию);
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

// Получает договор по умолчанию
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация)
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ВидыДоговораДляДокумента(Документ);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции
 
&НаКлиенте
Процедура УстановитьВозможностьРедактированияСписком(КоличествоСтрок) Экспорт
    	
	// Удаление строк ТЧ "Разделы" в обратном порядке.
	Пока КоличествоСтрок > 1 Цикл  
        Объект.Разделы.Удалить(Объект.Разделы[КоличествоСтрок - 1]);
        КоличествоСтрок = КоличествоСтрок - 1;
	КонецЦикла;
	
	СтрокаТабличнойЧастиРазделы = Объект.Разделы[0];
	
	КоличествоТовары = Объект.Товары.Количество();
	// Удаление строк ТЧ "Товары" в обратном порядке.
	Пока КоличествоТовары > 0 Цикл
		СтрокаТабличнойЧастиТовары = Объект.Товары[КоличествоТовары - 1];
		
		Если СтрокаТабличнойЧастиРазделы.КлючСвязи <> СтрокаТабличнойЧастиТовары.КлючСвязи Тогда
			Объект.Товары.Удалить(СтрокаТабличнойЧастиТовары);
		КонецЕсли;
		КоличествоТовары = КоличествоТовары - 1;
	КонецЦикла;
	
	КоличествоОС = Объект.ОС.Количество();
	// Удаление строк ТЧ "ОС" в обратном порядке.
	Пока КоличествоОС > 0 Цикл
		СтрокаТабличнойЧастиОС = Объект.ОС[КоличествоОС - 1];
		
		Если СтрокаТабличнойЧастиРазделы.КлючСвязи <> СтрокаТабличнойЧастиОС.КлючСвязи Тогда
			Объект.ОС.Удалить(СтрокаТабличнойЧастиОС);
		КонецЕсли;
		КоличествоОС = КоличествоОС - 1;
	КонецЦикла;
	
	КоличествоДопРасходов = Объект.ДопРасходы.Количество();
	// Удаление строк ТЧ "ДопРасходы" в обратном порядке.
	Пока КоличествоДопРасходов > 0 Цикл
		СтрокаТабличнойЧастиДопРасходов = Объект.ДопРасходы[КоличествоДопРасходов - 1];
		
		Если СтрокаТабличнойЧастиРазделы.КлючСвязи <> СтрокаТабличнойЧастиДопРасходов.КлючСвязи Тогда
			Объект.ДопРасходы.Удалить(СтрокаТабличнойЧастиДопРасходов);
		КонецЕсли;
		КоличествоДопРасходов = КоличествоДопРасходов - 1;
	КонецЦикла;
	
    Элементы.Разделы.ТекущаяСтрока = СтрокаТабличнойЧастиРазделы.ПолучитьИдентификатор();
    
    УстановитьВозможностьРедактированияСпискомФрагмент();
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеПоПоступлению(МассивДокументов, КлючСвязи)
	
	Для каждого ДокументПоступления Из МассивДокументов Цикл	
		
		Если ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
			Для каждого СтрокаПоступления Из ДокументПоступления.Товары Цикл
				СтрокаТабличнойЧасти = Объект.Товары.Добавить();                     	
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаПоступления);
				СтрокаТабличнойЧасти.СуммаНДС			 = 0;
				СтрокаТабличнойЧасти.Сумма 				 = СтрокаПоступления.Всего;
				СтрокаТабличнойЧасти.ФактурнаяСтоимость  = СтрокаПоступления.Всего * ДокументПоступления.Курс 
						/ ?(ЗначениеЗаполнено(ДокументПоступления.Кратность), ДокументПоступления.Кратность, 1);
				СтрокаТабличнойЧасти.Вес 				 = 0;
				СтрокаТабличнойЧасти.ДокументПоступления = ДокументПоступления;
				СтрокаТабличнойЧасти.КлючСвязи 			 = КлючСвязи;	
			КонецЦикла;
			
			Для каждого СтрокаПоступления Из ДокументПоступления.ОС Цикл
				СтрокаТабличнойЧасти = Объект.ОС.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаПоступления);
				СтрокаТабличнойЧасти.СуммаНДС			 = 0;
				СтрокаТабличнойЧасти.Сумма 				 = СтрокаПоступления.Всего;
				СтрокаТабличнойЧасти.ФактурнаяСтоимость  = СтрокаПоступления.Всего * ДокументПоступления.Курс 
						/ ?(ЗначениеЗаполнено(ДокументПоступления.Кратность), ДокументПоступления.Кратность, 1);			
				СтрокаТабличнойЧасти.ДокументПоступления = ДокументПоступления;
				СтрокаТабличнойЧасти.КлючСвязи 			 = КлючСвязи;
			КонецЦикла;
			
		Иначе	
			СуммаВал = ДокументПоступления.Услуги.Итог("Всего");
			Сумма 	 = ДокументПоступления.Услуги.Итог("Сумма");
			
			Для каждого СтрокаПоступления Из ДокументПоступления.Продукция Цикл
				СтрокаТабличнойЧасти = Объект.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаПоступления);
				СтрокаТабличнойЧасти.Сумма 				 = СуммаВал;
				СтрокаТабличнойЧасти.ФактурнаяСтоимость  = Сумма;
				СтрокаТабличнойЧасти.ДокументПоступления = ДокументПоступления;
				СтрокаТабличнойЧасти.КлючСвязи 			 = КлючСвязи;	
			КонецЦикла;			
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры //

&НаСервере
Функция ЗаполнитьДопрасходыИВернутьСумму(МассивДокументов, КлючСвязи)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДопРасходы();
	Запрос.УстановитьПараметр("МассивСсылок", МассивДокументов);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Сумма = 0;
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаТабличнойЧасти = Объект.ДопРасходы.Добавить();
		СтрокаТабличнойЧасти.ДокументДопРасходов = Выборка.Ссылка;
		СтрокаТабличнойЧасти.КлючСвязи 			 = КлючСвязи;
		
		КурсКратность = ПолучитьКурсИКратность(Выборка.ВалютаДокумента, ДатаДокумента);
		
		ВыборкаДетальныеЗаписи = Выборка.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Отбор = Новый Структура();
			Отбор.Вставить("Номенклатура", ВыборкаДетальныеЗаписи.Номенклатура);
			Отбор.Вставить("ДокументПоступления", ВыборкаДетальныеЗаписи.ДокументПоступления);
			// Могут быть дубли номенклатуры, поэтому добавляем поиск по количеству и сумме.
			Отбор.Вставить("Количество", ВыборкаДетальныеЗаписи.Количество);
			
			Если ТипЗнч(ВыборкаДетальныеЗаписи.ДокументПоступления) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
				Отбор.Вставить("Сумма", ВыборкаДетальныеЗаписи.Сумма);
			КонецЕсли;	
				
			Отбор.Вставить("КлючСвязи", КлючСвязи);
				
			МассивСтрок = Объект.Товары.НайтиСтроки(Отбор);
			
			Для Каждого СтрокаМассива Из МассивСтрок Цикл
				СтрокаМассива.ДокументДопРасходов = Выборка.Ссылка;
				
				СуммаДопРасхода = Окр(ВыборкаДетальныеЗаписи.СуммаРасходов * КурсКратность.Курс / КурсКратность.Кратность, 2);
				
				СтрокаМассива.ДопРасходы = СтрокаМассива.ДопРасходы + СуммаДопРасхода;	
				СтрокаТабличнойЧасти.СуммаДопРасходов = СтрокаТабличнойЧасти.СуммаДопРасходов + СуммаДопРасхода;
			КонецЦикла;	
			
			Отбор = Новый Структура();
			Отбор.Вставить("ОсновноеСредство", ВыборкаДетальныеЗаписи.Номенклатура);
			Отбор.Вставить("ДокументПоступления", ВыборкаДетальныеЗаписи.ДокументПоступления);
			Отбор.Вставить("КлючСвязи", КлючСвязи);
			
			МассивСтрок = Объект.ОС.НайтиСтроки(Отбор);
			
			Для Каждого СтрокаМассива Из МассивСтрок Цикл
				СтрокаМассива.ДокументДопРасходов = Выборка.Ссылка;
				
				СуммаДопРасхода = Окр(ВыборкаДетальныеЗаписи.СуммаРасходов * КурсКратность.Курс / КурсКратность.Кратность, 2);
				
				СтрокаМассива.ДопРасходы = СтрокаМассива.ДопРасходы + СуммаДопРасхода;	
				СтрокаТабличнойЧасти.СуммаДопРасходов = СтрокаТабличнойЧасти.СуммаДопРасходов + СуммаДопРасхода;		
			КонецЦикла;
		КонецЦикла;	
		
		Сумма = Сумма + СтрокаТабличнойЧасти.СуммаДопРасходов;
	КонецЦикла;

	Возврат Сумма;
КонецФункции //

&НаСервере
Функция ПолучитьТекстЗапросаДопРасходы()

	Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеРасходыТовары.Ссылка КАК Ссылка,
	|	ДополнительныеРасходыТовары.ДокументПоступления КАК ДокументПоступления,
	|	ДополнительныеРасходыТовары.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ДополнительныеРасходыТовары.ЗачетНДС = ЗНАЧЕНИЕ(Перечисление.ВидыЗачетаНДС.Себестоимость)
	|			ТОГДА ДополнительныеРасходыТовары.СуммаРасходов + ДополнительныеРасходыТовары.СуммаРасходовНСП + ДополнительныеРасходыТовары.СуммаРасходовНДС
	|		ИНАЧЕ ДополнительныеРасходыТовары.СуммаРасходов + ДополнительныеРасходыТовары.СуммаРасходовНСП
	|	КОНЕЦ КАК СуммаРасходов,
	|	ДополнительныеРасходыТовары.Количество КАК Количество,
	|	ДополнительныеРасходыТовары.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВременнаяТаблицаДанные
	|ИЗ
	|	Документ.ДополнительныеРасходы.Товары КАК ДополнительныеРасходыТовары
	|ГДЕ
	|	ДополнительныеРасходыТовары.Ссылка В(&МассивСсылок)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДополнительныеРасходыОС.Ссылка,
	|	ДополнительныеРасходыОС.ДокументПоступления,
	|	ДополнительныеРасходыОС.ОсновноеСредство,
	|	ВЫБОР
	|		КОГДА ДополнительныеРасходыОС.ЗачетНДС = ЗНАЧЕНИЕ(Перечисление.ВидыЗачетаНДС.Себестоимость)
	|			ТОГДА ДополнительныеРасходыОС.СуммаРасходов + ДополнительныеРасходыОС.СуммаРасходовНСП + ДополнительныеРасходыОС.СуммаРасходовНДС
	|		ИНАЧЕ ДополнительныеРасходыОС.СуммаРасходов + ДополнительныеРасходыОС.СуммаРасходовНСП
	|	КОНЕЦ,
	|	ДополнительныеРасходыОС.Количество,
	|	ДополнительныеРасходыОС.Сумма
	|ИЗ
	|	Документ.ДополнительныеРасходы.ОС КАК ДополнительныеРасходыОС
	|ГДЕ
	|	ДополнительныеРасходыОС.Ссылка В(&МассивСсылок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаДанные.Ссылка КАК Ссылка,
	|	ВременнаяТаблицаДанные.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ВременнаяТаблицаДанные.ДокументПоступления КАК ДокументПоступления,
	|	ВременнаяТаблицаДанные.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаДанные.СуммаРасходов КАК СуммаРасходов,
	|	ВременнаяТаблицаДанные.Количество КАК Количество,
	|	ВременнаяТаблицаДанные.Сумма КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаДанные КАК ВременнаяТаблицаДанные
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокументПоступления),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Номенклатура),
	|	СУММА(СуммаРасходов)
	|ПО
	|	Ссылка";	

	Возврат Текст;
	
КонецФункции // ПолучитьТекстЗапросаДопРасходы()

&НаСервере
Процедура ДопрасходыПослеУдаленияНаСервере()

	МассивДокументов = Новый Массив();
	СоответствиеКлючейСвязи = Новый Соответствие();
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.ДопРасходы Цикл
		МассивДокументов.Добавить(СтрокаТабличнойЧасти.ДокументДопРасходов);	
		СоответствиеКлючейСвязи.Вставить(СтрокаТабличнойЧасти.ДокументДопРасходов, СтрокаТабличнойЧасти.КлючСвязи);
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДопРасходы();
	Запрос.УстановитьПараметр("МассивСсылок", МассивДокументов);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		
		Отбор = Новый Структура();
		Отбор.Вставить("КлючСвязи", СоответствиеКлючейСвязи.Получить(Выборка.Ссылка));
		
		МассивСтрокРазделы = Объект.Разделы.НайтиСтроки(Отбор);
		
		// В данном массиве всегда должна быть одна строка, т.к. при добавлении
		// документа доп расхода он добавляется для какого-то конкретного раздела. 
		СтрокаТабличнойЧасти = МассивСтрокРазделы[0];		
		
		КурсКратность = ПолучитьКурсИКратность(Выборка.ВалютаДокумента, ДатаДокумента);
		
		ВыборкаДетальныеЗаписи = Выборка.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Отбор = Новый Структура();
			Отбор.Вставить("Номенклатура", ВыборкаДетальныеЗаписи.Номенклатура);
			Отбор.Вставить("ДокументПоступления", ВыборкаДетальныеЗаписи.ДокументПоступления);
			// Могут быть дубли номенклатуры, поэтому добавляем поиск по количеству и сумме.
			Отбор.Вставить("Количество", ВыборкаДетальныеЗаписи.Количество);
			Отбор.Вставить("Сумма", ВыборкаДетальныеЗаписи.Сумма);
			
			Отбор.Вставить("КлючСвязи", СоответствиеКлючейСвязи.Получить(Выборка.Ссылка));
			
			МассивСтрок = Объект.Товары.НайтиСтроки(Отбор);
			
			Для Каждого СтрокаМассива Из МассивСтрок Цикл
				СтрокаМассива.ДокументДопРасходов = Выборка.Ссылка;
				
				СуммаДопРасхода = Окр(ВыборкаДетальныеЗаписи.СуммаРасходов * КурсКратность.Курс / КурсКратность.Кратность, 2);
				
				СтрокаМассива.ДопРасходы = СтрокаМассива.ДопРасходы + СуммаДопРасхода;	
				СтрокаТабличнойЧасти.ДопРасходы = СтрокаТабличнойЧасти.ДопРасходы + СуммаДопРасхода;
			КонецЦикла;	
			
			Отбор = Новый Структура();
			Отбор.Вставить("ОсновноеСредство", ВыборкаДетальныеЗаписи.Номенклатура);
			Отбор.Вставить("ДокументПоступления", ВыборкаДетальныеЗаписи.ДокументПоступления);
			
			МассивСтрок = Объект.ОС.НайтиСтроки(Отбор);
			
			Для Каждого СтрокаМассива Из МассивСтрок Цикл
				СтрокаМассива.ДокументДопРасходов = Выборка.Ссылка;
				
				СуммаДопРасхода = Окр(ВыборкаДетальныеЗаписи.СуммаРасходов * КурсКратность.Курс / КурсКратность.Кратность, 2);
				
				СтрокаМассива.ДопРасходы = СтрокаМассива.ДопРасходы + СуммаДопРасхода;	
				СтрокаТабличнойЧасти.ДопРасходы = СтрокаТабличнойЧасти.ДопРасходы + СуммаДопРасхода;		
			КонецЦикла;
		КонецЦикла;	
	КонецЦикла;	

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииДоговора(ДатаДокумента, ДоговорКонтрагента)
	УстановитьСчетаРасчетовСКонтрагентами();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСчетаРасчетовСКонтрагентами()
	СтруктураДанные = Новый Структура("Организация, Контрагент, ДоговорКонтрагента", Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	СчетаУчета = ПолучитьСчетаРасчетовСКонтрагентами(СтруктураДанные);
	Объект.СчетРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПоставщика;		
	
КонецПроцедуры // УстановитьСчетаРасчетовСКонтрагентами()

&НаСервереБезКонтекста
Функция ПолучитьСчетаРасчетовСКонтрагентами(СтруктураДанные)
	Возврат БухгалтерскийУчетСервер.ПолучитьСчетаРасчетовСКонтрагентом(СтруктураДанные.Организация, СтруктураДанные.Контрагент, СтруктураДанные.ДоговорКонтрагента);
КонецФункции

&НаСервере
Процедура РассчитатьИРаспределить()
	
	Документ = РеквизитФормыВЗначение("Объект");
	//Если РазделыГТД Тогда
	//	Документ.ПересчитатьСуммыДокументовДопрасходовПоРазделам();
	//КонецЕсли;
	Документ.ПолноеРаспределениеПоДокументу();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
КонецПроцедуры // РаспределитьТабЧастьРасходыПоКоличеству()

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        УстановитьВидимостьДоступностьЭлементов();
    КонецЕсли;
КонецПроцедуры // ЗаполнитьПоОснованию()

// Процедура - обработчик подбора товаров.
//
&НаСервере
Процедура ПолучитьТоварыИзХранилища(АдресЗапасовВХранилище, КлючСвязи)
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Для Каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", СтрокаЗагрузки.Номенклатура));
		
		Если НайденныеСтроки.Количество() > 0 Тогда 
			Продолжить;
		КонецЕсли;	
		
		СтрокаТабличнойЧасти = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаЗагрузки);
		СтрокаТабличнойЧасти.КлючСвязи = КлючСвязи;
	КонецЦикла;
		
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

// Процедура - устанавливает возможность редактирования списком (продолжение).
//
&НаКлиенте
Процедура УстановитьВозможностьРедактированияСпискомФрагмент()
    Если РазделыГТД Тогда
        Элементы.СтраницыРазделыСтрокойСписком.ТекущаяСтраница = Элементы.Списком;
    Иначе
        Элементы.СтраницыРазделыСтрокойСписком.ТекущаяСтраница = Элементы.ОднаСтрока;
    КонецЕсли;
КонецПроцедуры // УстановитьВозможностьРедактированияСписком()

&НаКлиенте
Процедура ОписатьОтборДокументовПоступленияИКурс(СтрокаТабличнойЧасти)

	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи);
	
	МассивТовары = Объект.Товары.НайтиСтроки(СтруктураОтбора);
	МассивОС 	 = Объект.ОС.НайтиСтроки(СтруктураОтбора);
	
	Если МассивТовары.Количество() > 0 Тогда
		Текст = ПолучитьТекстОписания(КонтрагентОтбор, ДатаОтбор, ВалютаОтбор, ДоговорОтбор, ИспользоватьДопЕдиницыОтбор, МассивТовары[0].ДокументПоступления);	
	ИначеЕсли МассивОС.Количество() > 0 Тогда
		Текст = ПолучитьТекстОписания(КонтрагентОтбор, ДатаОтбор, ВалютаОтбор, ДоговорОтбор, ИспользоватьДопЕдиницыОтбор, МассивОС[0].ДокументПоступления);
	Иначе
		Текст = ПолучитьТекстОписания(КонтрагентОтбор, ДатаОтбор, ВалютаОтбор, ДоговорОтбор, ИспользоватьДопЕдиницыОтбор);
	КонецЕсли;	
	
	Если НЕ ВалютаОтбор.Пустая() Тогда
		КурсКратность 	 = ПолучитьКурсИКратность(ВалютаОтбор, ДатаДокумента);
		Объект.Курс 	 = КурсКратность.Курс;
		Объект.Кратность = КурсКратность.Кратность;
		
		СтрокаТабличнойЧасти.Валюта = ВалютаОтбор;
	КонецЕсли;
	
	УстановитьВидимостьДоступностьЭлементов();
	
	Элементы.ДекорацияОписанияОтборовДокументовПоступления.Заголовок = Текст;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекстОписания(КонтрагентОтбор, ДатаОтбор, ВалютаОтбор, ДоговорОтбор, ИспользоватьДопЕдиницыОтбор, Документ = Неопределено)
	
	Если (Документ = Неопределено И КонтрагентОтбор = Справочники.Контрагенты.ПустаяСсылка()) 
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ВводНачальныхОстатков") Тогда
		ДоговорОтбор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ВалютаОтбор = Справочники.Валюты.ПустаяСсылка();
		Возврат "";
	Иначе	
		Если Документ = Неопределено Тогда
			ДоговорОтбор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Иначе	
			КонтрагентОтбор = Документ.Контрагент;
			ДоговорОтбор = Документ.ДоговорКонтрагента;
			ИспользоватьДопЕдиницыОтбор = ?(ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг"), 
											Документ.ИспользоватьДопЕдиницы, Ложь);
			ВалютаОтбор = Документ.ВалютаДокумента;
			ДатаОтбор = Документ.Дата; 
		КонецЕсли;
		
		Если ДоговорОтбор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
			Возврат СтрШаблон(НСтр("ru = 'Контрагент: %1; Дата: %2; Валюта: %3.'"), 
						КонтрагентОтбор.НаименованиеПолное,
						Формат(ДатаОтбор, "ДЛФ=DD"),
						ВалютаОтбор);
			
		Иначе
			Возврат СтрШаблон(НСтр("ru = 'Контрагент: %1; Дата: %2; Валюта: %3; Договор: %4; %5.'"), 
						КонтрагентОтбор.НаименованиеПолное,
						Формат(ДатаОтбор, "ДЛФ=DD"),
						ВалютаОтбор,
						ДоговорОтбор.Наименование,
						?(ИспользоватьДопЕдиницыОтбор, НСтр("ru = 'С использованием допединиц'"), НСтр("ru = 'Без использования допединиц'")));
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКурсИКратность(Валюта, Дата)

	Возврат РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, Дата);

КонецФункции // ПолучитьКурсИКратность()

&НаСервере
Функция ПроверитьЗаполнениеПередРасчетом()

	Отказ = Ложь;
	
	Если Объект.Сопровождение <> 0 И Объект.РаспределениеСопровождения = Перечисления.СпособРаспределения.ПустаяСсылка() Тогда
		ТекстСообщения = НСтр("ru = 'Сумма сопровождения заполнена, но не указан способ распределения. Расчет отменен.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "Объект.РаспределениеСопровождения",,Отказ);
	КонецЕсли;
	
	Если Объект.Разделы.Количество() = 1 Тогда
		СтрокаТабличнойЧасти = Объект.Разделы[0];
		
		Если СтрокаТабличнойЧасти.Акциз <> 0  
			И СтрокаТабличнойЧасти.РаспределениеАкциза = Перечисления.СпособыРаспределенияДопРасходов.ПустаяСсылка() Тогда
				
			ТекстСообщения = НСтр("ru = 'В разделе заполнена сумма акциза, но не указан способ распределения. Расчет отменен.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти.СтавкаПошлины <> 0  
			И Объект.РаспределениеПошлины = Перечисления.СпособыРаспределенияПошлины.ПустаяСсылка() Тогда
				
			ТекстСообщения = НСтр("ru = 'В разделе заполнена ставка пошлины, но не указан способ распределения. Расчет отменен.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"Объект.РаспределениеПошлины",,Отказ);
		КонецЕсли;
		
	Иначе	
		Для Каждого СтрокаТабличнойЧасти Из Объект.Разделы Цикл	
			Если СтрокаТабличнойЧасти.Акциз <> 0  
				И СтрокаТабличнойЧасти.РаспределениеАкциза = Перечисления.СпособыРаспределенияДопРасходов.ПустаяСсылка() Тогда
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'В разделе №%1 заполнена сумма акциза, но не указан способ распределения. Расчет отменен.'"),
											СтрокаТабличнойЧасти.НомерСтроки);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			КонецЕсли;
			
			Если СтрокаТабличнойЧасти.СтавкаПошлины <> 0  
				И Объект.РаспределениеПошлины = Перечисления.СпособыРаспределенияПошлины.ПустаяСсылка() Тогда
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'В разделе №%1 заполнена ставка пошлины, но не указан способ распределения. Расчет отменен.'"),
											СтрокаТабличнойЧасти.НомерСтроки);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"Объект.РаспределениеПошлины",,Отказ);
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Отказ;
КонецФункции // ПроверитьЗаполнениеПередРасчетом()

&НаСервере
Процедура ПерезаполнитьПоПоступлениямНаСервере()

	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаТовары.ДокументПоступления КАК Документ,
		|   ТаблицаТовары.КлючСвязи КАК КлючСвязи
		|ПОМЕСТИТЬ ВременнаяТаблицаТовары
		|ИЗ
		|  	&ТаблицаТовары КАК ТаблицаТовары
		|;
		|
		|//////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОС.ДокументПоступления КАК Документ,
		|   ТаблицаОС.КлючСвязи КАК КлючСвязи
		|ПОМЕСТИТЬ ВременнаяТаблицаОС
		|ИЗ
		|  	&ТаблицаОС КАК ТаблицаОС
		|;
		|
		|//////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.Документ КАК Документ,
		|   ВременнаяТаблицаТовары.КлючСвязи КАК КлючСвязи
		|ПОМЕСТИТЬ ВременнаяТаблицаДокументы
		|ИЗ
		|  	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаОС.Документ КАК Документ,
		|   ВременнаяТаблицаОС.КлючСвязи КАК КлючСвязи
		|ИЗ
		|  	ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|;
		|
		|//////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕСТЬNULL(ТаблицаПоступлений.ДоговорКонтрагента, ТаблицаПоступленийИзПереработки.ДоговорКонтрагента) КАК Договор,
		|	ЕСТЬNULL(ТаблицаПоступлений.ИспользоватьДопЕдиницы, ЛОЖЬ) КАК ИспользоватьДопЕдиницы,
		|	ДЕНЬ(ЕСТЬNULL(ТаблицаПоступлений.Дата, ТаблицаПоступленийИзПереработки.Дата)) КАК Дата,
		|	ЕСТЬNULL(ТаблицаПоступлений.ВалютаДокумента, ТаблицаПоступленийИзПереработки.ВалютаДокумента) КАК ВалютаДокумента,
		|   ВременнаяТаблицаДокументы.КлючСвязи КАК КлючСвязи
		|ИЗ
		|  	ВременнаяТаблицаДокументы КАК ВременнаяТаблицаДокументы
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ТаблицаПоступлений
		|		ПО ВременнаяТаблицаДокументы.Документ = ТаблицаПоступлений.Ссылка
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеИзПереработки КАК ТаблицаПоступленийИзПереработки
		|		ПО ВременнаяТаблицаДокументы.Документ = ТаблицаПоступленийИзПереработки.Ссылка
		|;
		|
		|//////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВременнаяТаблицаДокументы.Документ КАК Документ,
		|   ВременнаяТаблицаДокументы.КлючСвязи КАК КлючСвязи,
		|	ЕСТЬNULL(ТаблицаПоступлений.ИспользоватьДопЕдиницы, ЛОЖЬ) КАК ИспользоватьДопЕдиницы
		|ИЗ
		|  	ВременнаяТаблицаДокументы КАК ВременнаяТаблицаДокументы
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ТаблицаПоступлений
		|		ПО ВременнаяТаблицаДокументы.Документ = ТаблицаПоступлений.Ссылка";
	Запрос.УстановитьПараметр("ТаблицаТовары", Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаОС", Объект.ОС.Выгрузить());
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаОтборов = МассивРезультатов[3].Выгрузить();
	
	// Контроль
	Если ТаблицаОтборов.Количество() <> Объект.Разделы.Количество() Тогда
		
		ТекстСообщения = НСтр("ru = 'В одном из разделов есть документы поступления с разными значениями реквизита(реквизитов) участвующего в отборе.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	КонецЕсли;	
	
	ТаблицаДокументов = МассивРезультатов[4].Выгрузить();
	
	Объект.Товары.Очистить();
	Объект.ОС.Очистить();
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("КлючСвязи", 0);
	
	МассивДокументов = Новый Массив();
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Разделы Цикл
		
		СтруктураОтбора.КлючСвязи = СтрокаТабличнойЧасти.КлючСвязи;
		
		МассивСтрок = ТаблицаДокументов.НайтиСтроки(СтруктураОтбора);
		
		МассивДокументов.Очистить();
		
		Для Каждого СтрокаМассива Из МассивСтрок Цикл
			МассивДокументов.Добавить(СтрокаМассива.Документ);
			ИспользоватьДопЕдиницы = СтрокаМассива.ИспользоватьДопЕдиницы; 
		КонецЦикла;	
		
		ЗаполнениеПоПоступлению(МассивДокументов, СтрокаТабличнойЧасти.КлючСвязи);
		
		Если ИспользоватьДопЕдиницы Тогда
			СтрокаТабличнойЧасти.РаспределениеАкциза = Перечисления.СпособыРаспределенияДопРасходов.ПоДопЕдиницам;
		КонецЕсли;
	КонецЦикла;	

КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьСуммыДопрасходов()

	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("КлючСвязи", 0);
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.ДопРасходы Цикл
		
		КурсКратность = ПолучитьКурсИКратность(СтрокаТабличнойЧасти.ДокументДопРасходов.ВалютаДокумента, ДатаДокумента);
		
		СтрокаТабличнойЧасти.СуммаДопРасходов = Окр(СтрокаТабличнойЧасти.ДокументДопРасходов.СуммаДопРасходов * КурсКратность.Курс / КурсКратность.Кратность, 2); 	
		
	КонецЦикла;	
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Разделы Цикл
		
		СтруктураОтбора.КлючСвязи = СтрокаТабличнойЧасти.КлючСвязи;
		
		ТаблицаДокументов = Объект.ДопРасходы.Выгрузить(СтруктураОтбора, "СуммаДопРасходов"); 
		
		СтрокаТабличнойЧасти.ДопРасходы = ТаблицаДокументов.Итог("СуммаДопРасходов");
		
	КонецЦикла;	

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыВыбора()

	МассивРазделУчета = Новый Массив;
	МассивРазделУчета.Добавить("Запасы");
	ФиксированныйМассивРазделУчета = Новый ФиксированныйМассив(МассивРазделУчета);
	НовыйПараметр = Новый ПараметрВыбора("Отбор.РазделУчета", ФиксированныйМассивРазделУчета);
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.ТоварыДокументПоступления.ПараметрыВыбора = НовыеПараметры;

	МассивРазделУчета = Новый Массив;
	МассивРазделУчета.Добавить("Основные средства");
	ФиксированныйМассивРазделУчета = Новый ФиксированныйМассив(МассивРазделУчета);
	НовыйПараметр = Новый ПараметрВыбора("Отбор.РазделУчета", ФиксированныйМассивРазделУчета);
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.ОСДокументПоступления.ПараметрыВыбора = НовыеПараметры;
КонецПроцедуры

// Получает документы постепления текущего раздела
// 
// Возвращаемое значение:
//  Массив - Массив документов поступления
//
&НаКлиенте
Функция ДокументыПоступленияТекущегоРаздела()

	// Отбор по разделам ГТД.
	// В одном разделе не могут повторяться документы,
	// но они могут повториться в другом.
	КлючСвязиТекущийРазделГТД = 1;	
	Если РазделыГТД Тогда 
		СтрокаТабличнойЧасти = Элементы.Разделы.ТекущиеДанные;
		
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Для подбора документов укажите на закладке ""Разделы"" необходимый раздел.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;
		
		КлючСвязиТекущийРазделГТД = СтрокаТабличнойЧасти.КлючСвязи;
	КонецЕсли;	
	
	МассивПоступлений = Новый Массив();

	Отбор = Новый Структура();
	Отбор.Вставить("КлючСвязи", КлючСвязиТекущийРазделГТД);
	
	НайденныеСтрокиТовары = Объект.Товары.НайтиСтроки(Отбор);
	Для Каждого СтрокаМассива Из НайденныеСтрокиТовары Цикл
		МассивПоступлений.Добавить(СтрокаМассива.ДокументПоступления);	
	КонецЦикла;	
	
	НайденныеСтрокиОС = Объект.ОС.НайтиСтроки(Отбор);
	Для Каждого СтрокаМассива Из НайденныеСтрокиОС Цикл
		МассивПоступлений.Добавить(СтрокаМассива.ДокументПоступления);	
	КонецЦикла;

	Возврат МассивПоступлений;
	
КонецФункции 


&НаКлиенте
Процедура РассчитатьИтогиТабличныхЧастей()
	// Инициализация
	ИтогиТоварыАкциз 				= 0;
	ИтогиТоварыДопРасходы 			= 0;
	ИтогиТоварыПошлина 				= 0;
	ИтогиТоварыСопровождение 		= 0;
	ИтогиТоварыСумма 				= 0;
	ИтогиТоварыТаможенныйСбор 		= 0;
	ИтогиТоварыФактурнаяСтоимость 	= 0;
	ИтогиТоварыСуммаБазыНДС 		= 0;
	ИтогиТоварыСуммаНДС 			= 0;
	
	ИтогиОСАкциз 					= 0;
	ИтогиОСДопРасходы 				= 0;	
	ИтогиОСПошлина 					= 0;
	ИтогиОССопровождение 			= 0;
	ИтогиОССумма 					= 0;
	ИтогиОСТаможенныйСбор 			= 0;
	ИтогиОСФактурнаяСтоимость 		= 0;
	ИтогиОСуммаБазыНДС 				= 0;
	ИтогиОССуммаНДС 				= 0;
	
	ИтогиДопрасходыСуммаДопрасходов = 0;
	
	СтрокаТаблицыРазделы = Элементы.Разделы.ТекущиеДанные;
	Если Не СтрокаТаблицыРазделы = Неопределено Тогда
		КлючСвязи = СтрокаТаблицыРазделы.КлючСвязи;
		Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
			Если СтрокаТабличнойЧасти.КлючСвязи = КлючСвязи Тогда
				ИтогиТоварыАкциз 				= ИтогиТоварыАкциз + СтрокаТабличнойЧасти.Акциз;
				ИтогиТоварыДопРасходы 			= ИтогиТоварыДопРасходы + СтрокаТабличнойЧасти.ДопРасходы;
				ИтогиТоварыПошлина 				= ИтогиТоварыПошлина + СтрокаТабличнойЧасти.Пошлина;
				ИтогиТоварыСопровождение 		= ИтогиТоварыСопровождение + СтрокаТабличнойЧасти.Сопровождение;
				ИтогиТоварыСумма 				= ИтогиТоварыСумма + СтрокаТабличнойЧасти.Сумма;
				ИтогиТоварыТаможенныйСбор 		= ИтогиТоварыТаможенныйСбор + СтрокаТабличнойЧасти.ТаможенныйСбор;
				ИтогиТоварыФактурнаяСтоимость 	= ИтогиТоварыФактурнаяСтоимость + СтрокаТабличнойЧасти.ФактурнаяСтоимость;
				ИтогиТоварыСуммаБазыНДС 		= ИтогиТоварыСуммаБазыНДС + СтрокаТабличнойЧасти.СуммаБазыНДС;
				ИтогиТоварыСуммаНДС 			= ИтогиТоварыСуммаНДС + СтрокаТабличнойЧасти.СуммаНДС;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл
			Если СтрокаТабличнойЧасти.КлючСвязи = КлючСвязи Тогда
				ИтогиОСАкциз 					= ИтогиОСАкциз + СтрокаТабличнойЧасти.Акциз;
				ИтогиОСДопРасходы 				= ИтогиОСДопРасходы + СтрокаТабличнойЧасти.ДопРасходы;
				ИтогиОСПошлина 					= ИтогиОСПошлина + СтрокаТабличнойЧасти.Пошлина;
				ИтогиОССопровождение 			= ИтогиОССопровождение + СтрокаТабличнойЧасти.Сопровождение;
				ИтогиОССумма 					= ИтогиОССумма + СтрокаТабличнойЧасти.Сумма;
				ИтогиОСТаможенныйСбор 			= ИтогиОСТаможенныйСбор + СтрокаТабличнойЧасти.ТаможенныйСбор;
				ИтогиОСФактурнаяСтоимость 		= ИтогиОСФактурнаяСтоимость + СтрокаТабличнойЧасти.ФактурнаяСтоимость;
				ИтогиОССуммаБазыНДС 			= ИтогиОССуммаБазыНДС + СтрокаТабличнойЧасти.СуммаБазыНДС;
				ИтогиОССуммаНДС 				= ИтогиОССуммаНДС + СтрокаТабличнойЧасти.СуммаНДС;
			КонецЕсли;
		КонецЦикла;		
		
		Для каждого СтрокаТабличнойЧасти Из Объект.ДопРасходы Цикл
			Если СтрокаТабличнойЧасти.КлючСвязи = КлючСвязи Тогда
				ИтогиДопрасходыСуммаДопрасходов	= ИтогиДопрасходыСуммаДопрасходов + СтрокаТабличнойЧасти.СуммаДопРасходов;
			КонецЕсли;
		КонецЦикла;		
			
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
