#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.Дата", "МесяцСтрокой");
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	
	УстановитьВидимостьДоступностьЭлементов();
	
	// РаботаСФормами
	РаботаСФормамиСервер.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.Дата", "МесяцСтрокой");
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом 
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	
	// РаботаСФормами
	РаботаСФормамиСервер.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
	БухгалтерскийУчетВызовСервераПовтИсп.УчетнаяПолитикаСуществует(Объект.Организация, Объект.Дата, Истина, Объект.Ссылка);
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(Объект.Дата, Объект.Организация);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьДокумент(Команда)
		
	Если Объект.ОтчетОсновной.Количество() > 0 
		ИЛИ Объект.ОтчетРеестрПоставок.Количество() > 0
		ИЛИ Объект.ОтчетРеестрПриобретенныхМатРесурсовИтоги.Количество() > 0
		ИЛИ Объект.ОтчетРеестрВвезенныхМатериальныхРесурсовВКР.Количество() > 0
		ИЛИ Объект.ОтчетРеестрПоставокНаОсновеНалоговогоКонтракта.Количество() > 0
		ИЛИ Объект.ОтчетРеестрПриобретенныхНаОсновеНалоговогоКонтракта.Количество() > 0 Тогда 
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросЗаполнитьДокумент", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Табличные части документа будут очищены и перезаполнены. Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	Иначе
		ЗаполнитьТабличнуюЧастьОтчетОсновнойНаСервере();
		ЗаполнитьТабличнуюЧастьОтчетРеестрПоставокНаСервере();
		ЗаполнитьТабличнуюЧастьОтчетРеестрПриобретенныхНаСервере();
		ЗаполнитьТабличнуюЧастьОтчетРеестрВвезенныхНаСервере();
		
		Если НЕ ДанныеУчетнойПолитики.Контракт Тогда
			РассчитатьИтогиОтчетаРеестрПоставокНаСервере();
			РассчитатьИтогиОтчетаРеестрПриобретенныхНаСервере();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОсновнойОтчет(Команда)
	Если Объект.ОтчетОсновной.Количество() > 0 Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросЗаполнитьТабличнуюЧастьОтчетОсновной", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Табличная часть документа будет очищена и перезаполнена. Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	Иначе
		ЗаполнитьТабличнуюЧастьОтчетОсновнойНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеестрПоставок(Команда)
	Если Объект.ОтчетРеестрПоставок.Количество() > 0 Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросЗаполнитьТабличнуюЧастьОтчетРеестрПоставок", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Табличная часть документа будет очищена и перезаполнена. Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	Иначе
		// Если изменили значение галочки "Контракт" в УП, 
		// то необходимо очистить возможно ранее заполненную закладку.
		Объект.ОтчетРеестрПоставокНаОсновеНалоговогоКонтракта.Очистить();
		
		ЗаполнитьТабличнуюЧастьОтчетРеестрПоставокНаСервере();
		РассчитатьИтогиОтчетаРеестрПоставокНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеестрПриобретенных(Команда)
	Если Объект.ОтчетРеестрПриобретенныхМатРесурсовИтоги.Количество() > 0 Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросЗаполнитьТабличнуюЧастьОтчетРеестрПриобретенных", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Табличная часть документа будет очищена и перезаполнена. Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	Иначе
		// Если изменили значение галочки "Контракт" в УП, 
		// то необходимо очистить возможно ранее заполненную закладку.
		Объект.ОтчетРеестрПриобретенныхНаОсновеНалоговогоКонтракта.Очистить();
	
		ЗаполнитьТабличнуюЧастьОтчетРеестрПриобретенныхНаСервере();
		РассчитатьИтогиОтчетаРеестрПриобретенныхНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеестрВвезенных(Команда)
	Если Объект.ОтчетРеестрВвезенныхМатериальныхРесурсовВКР.Количество() > 0 Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросЗаполнитьТабличнуюЧастьОтчетРеестрВвезенных", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Табличная часть документа будет очищена и перезаполнена. Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	Иначе
		ЗаполнитьТабличнуюЧастьОтчетРеестрВвезенныхНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеестрПоставокНК(Команда)
	Если Объект.ОтчетРеестрПоставокНаОсновеНалоговогоКонтракта.Количество() > 0 Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросЗаполнитьТабличнуюЧастьОтчетРеестрПоставок", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Табличная часть документа будет очищена и перезаполнена. Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	Иначе
		// Если изменили значение галочки "Контракт" в УП, 
		// то необходимо очистить возможно ранее заполненные закладки.
		Объект.ОтчетРеестрПоставок.Очистить();
		Объект.ОтчетРеестрПоставокИтоги.Очистить();
		
		ЗаполнитьТабличнуюЧастьОтчетРеестрПоставокНаСервере();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеестрПриобретенныхНК(Команда)
	Если Объект.ОтчетРеестрПриобретенныхНаОсновеНалоговогоКонтракта.Количество() > 0 Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросЗаполнитьТабличнуюЧастьОтчетРеестрПриобретенных", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Табличная часть документа будет очищена и перезаполнена. Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	Иначе
		// Если изменили значение галочки "Контракт" в УП, 
		// то необходимо очистить возможно ранее заполненные закладки.
		Объект.ОтчетРеестрПриобретенныхМатРесурсов.Очистить();
		Объект.ОтчетРеестрПриобретенныхМатРесурсовИтоги.Очистить();
		
		ЗаполнитьТабличнуюЧастьОтчетРеестрПриобретенныхНаСервере();
	КонецЕсли;
КонецПроцедуры

// Процедура - Выгрузка в excel основная форма
//
&НаКлиенте
Процедура ВыгрузкаВExcelОсновнаяФорма_до2022г(Команда)
	Если ТребуетсяНастройкаАвторизацияИнтернетПоддержки() Тогда
		ТекстВопроса = НСтр("ru='Для формирования отчета в электронной форме
			|необходимо подключиться к Интернет-поддержке пользователей.
			|Подключиться сейчас?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриПодключенииИнтернетПоддержки", ЭтотОбъект, Новый Структура("НаправлениеВыгрузки", "ОсновнаяФорма_до2022г"));
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Подключиться'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
	Иначе
		ПродолжитьВыгрузку("ОсновнаяФорма_до2022г");  
	КонецЕсли;
	
КонецПроцедуры
    
// Процедура - Выгрузка в excel основная форма
//
&НаКлиенте
Процедура ВыгрузкаВExcelОсновнаяФорма(Команда)
	Если ТребуетсяНастройкаАвторизацияИнтернетПоддержки() Тогда
		ТекстВопроса = НСтр("ru='Для формирования отчета в электронной форме
			|необходимо подключиться к Интернет-поддержке пользователей.
			|Подключиться сейчас?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриПодключенииИнтернетПоддержки", ЭтотОбъект, Новый Структура("НаправлениеВыгрузки", "ОсновнаяФорма"));
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Подключиться'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
	Иначе
		ПродолжитьВыгрузку("ОсновнаяФорма");  
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Выгрузка в excel приложение01
//
&НаКлиенте
Процедура ВыгрузкаВExcelПриложение01(Команда)
	Если ТребуетсяНастройкаАвторизацияИнтернетПоддержки() Тогда
		ТекстВопроса = НСтр("ru='Для формирования отчета в электронной форме
			|необходимо подключиться к Интернет-поддержке пользователей.
			|Подключиться сейчас?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриПодключенииИнтернетПоддержки", ЭтотОбъект, Новый Структура("НаправлениеВыгрузки", "Приложение01"));
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Подключиться'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
	Иначе
		ПродолжитьВыгрузку("Приложение01");
	КонецЕсли;
КонецПроцедуры

// Процедура - Выгрузка в excel приложение02
//
&НаКлиенте
Процедура ВыгрузкаВExcelПриложение02(Команда)
	Если ТребуетсяНастройкаАвторизацияИнтернетПоддержки() Тогда
		ТекстВопроса = НСтр("ru='Для формирования отчета в электронной форме
			|необходимо подключиться к Интернет-поддержке пользователей.
			|Подключиться сейчас?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриПодключенииИнтернетПоддержки", ЭтотОбъект, Новый Структура("НаправлениеВыгрузки", "Приложение02"));
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Подключиться'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
	Иначе
		ПродолжитьВыгрузку("Приложение02");
	КонецЕсли;
КонецПроцедуры

// Процедура - Выгрузка в excel приложение03
//
&НаКлиенте
Процедура ВыгрузкаВExcelПриложение03(Команда)
	Если ТребуетсяНастройкаАвторизацияИнтернетПоддержки() Тогда
		ТекстВопроса = НСтр("ru='Для формирования отчета в электронной форме
			|необходимо подключиться к Интернет-поддержке пользователей.
			|Подключиться сейчас?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриПодключенииИнтернетПоддержки", ЭтотОбъект, Новый Структура("НаправлениеВыгрузки", "Приложение03"));
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Подключиться'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
	Иначе
		ПродолжитьВыгрузку("Приложение03");
	КонецЕсли;
КонецПроцедуры

// Процедура - Выгрузка в excel приложение04
//
&НаКлиенте
Процедура ВыгрузкаВExcelПриложение04(Команда)
	Если ТребуетсяНастройкаАвторизацияИнтернетПоддержки() Тогда
		ТекстВопроса = НСтр("ru='Для формирования отчета в электронной форме
			|необходимо подключиться к Интернет-поддержке пользователей.
			|Подключиться сейчас?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриПодключенииИнтернетПоддержки", ЭтотОбъект, Новый Структура("НаправлениеВыгрузки", "Приложение04"));
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Подключиться'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
	Иначе
		ПродолжитьВыгрузку("Приложение04");
	КонецЕсли;
КонецПроцедуры

// Процедура - Выгрузка в excel приложение05
//
&НаКлиенте
Процедура ВыгрузкаВExcelПриложение05(Команда)
	Если ТребуетсяНастройкаАвторизацияИнтернетПоддержки() Тогда
		ТекстВопроса = НСтр("ru='Для формирования отчета в электронной форме
			|необходимо подключиться к Интернет-поддержке пользователей.
			|Подключиться сейчас?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриПодключенииИнтернетПоддержки", ЭтотОбъект, Новый Структура("НаправлениеВыгрузки", "Приложение05"));
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Подключиться'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
	Иначе
		ПродолжитьВыгрузку("Приложение05");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВЭлектроннойФорме(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		Или Модифицированность Тогда 
		ТекстСообщения = НСтр("ru='Для формирования отчета по НДС в электронной форме необходимо записать документ.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;	
	
	Если ТребуетсяНастройкаАвторизацияИнтернетПоддержки() Тогда
		ТекстВопроса = НСтр("ru='Для формирования отчета по НДС в электронной форме
			|необходимо подключиться к Интернет-поддержке пользователей.
			|Подключиться сейчас?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриПодключенииИнтернетПоддержки", ЭтотОбъект, Новый Структура("НаправлениеВыгрузки", "СохранитьВЭлектроннойФорме"));
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Подключиться'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
	Иначе
		ПродолжитьСохранение("СохранитьВЭлектроннойФорме");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВЭлектроннойФормеЛК(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		Или Модифицированность Тогда 
		ТекстСообщения = НСтр("ru='Для формирования отчета по НДС в электронной форме необходимо записать документ.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;	
	
	Если ТребуетсяНастройкаАвторизацияИнтернетПоддержки() Тогда
		ТекстВопроса = НСтр("ru='Для формирования отчета по НДС в электронной форме
			|необходимо подключиться к Интернет-поддержке пользователей.
			|Подключиться сейчас?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриПодключенииИнтернетПоддержки", ЭтотОбъект, Новый Структура("НаправлениеВыгрузки", "СохранитьВЭлектроннойФормеЛК"));
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Подключиться'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
	Иначе
		ПродолжитьСохранение("СохранитьВЭлектроннойФормеЛК");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОтветНаВопросЗаполнитьТабличнуюЧастьОтчетОсновной(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ОтчетОсновной.Очистить();
		ЗаполнитьТабличнуюЧастьОтчетОсновнойНаСервере();
	КонецЕсли; 
КонецПроцедуры	

&НаКлиенте
Процедура ОтветНаВопросЗаполнитьТабличнуюЧастьОтчетРеестрПоставок(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ОтчетРеестрПоставокНаОсновеНалоговогоКонтракта.Очистить();
		Объект.ОтчетРеестрПоставок.Очистить();
		Объект.ОтчетРеестрПоставокИтоги.Очистить();
		
		Если ДанныеУчетнойПолитики.Контракт Тогда
			ЗаполнитьТабличнуюЧастьОтчетРеестрПоставокНаСервере();
		Иначе	
			ЗаполнитьТабличнуюЧастьОтчетРеестрПоставокНаСервере();
			РассчитатьИтогиОтчетаРеестрПоставокНаСервере();
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры	

&НаКлиенте
Процедура ОтветНаВопросЗаполнитьТабличнуюЧастьОтчетРеестрПриобретенных(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ОтчетРеестрПриобретенныхНаОсновеНалоговогоКонтракта.Очистить();
		Объект.ОтчетРеестрПриобретенныхМатРесурсов.Очистить();
		Объект.ОтчетРеестрПриобретенныхМатРесурсовИтоги.Очистить();
		
		Если ДанныеУчетнойПолитики.Контракт Тогда
			ЗаполнитьТабличнуюЧастьОтчетРеестрПриобретенныхНаСервере();
		Иначе
			ЗаполнитьТабличнуюЧастьОтчетРеестрПриобретенныхНаСервере();
			РассчитатьИтогиОтчетаРеестрПриобретенныхНаСервере();
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОтветНаВопросЗаполнитьТабличнуюЧастьОтчетРеестрВвезенных(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ОтчетРеестрВвезенныхМатериальныхРесурсовВКР.Очистить();
		ЗаполнитьТабличнуюЧастьОтчетРеестрВвезенныхНаСервере();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОтветНаВопросЗаполнитьДокумент(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ОтчетОсновной.Очистить();
		Объект.ОтчетРеестрПоставокНаОсновеНалоговогоКонтракта.Очистить();
		Объект.ОтчетРеестрПоставок.Очистить();
		Объект.ОтчетРеестрПоставокИтоги.Очистить();
		Объект.ОтчетРеестрПриобретенныхНаОсновеНалоговогоКонтракта.Очистить();
		Объект.ОтчетРеестрПриобретенныхМатРесурсов.Очистить();
		Объект.ОтчетРеестрПриобретенныхМатРесурсовИтоги.Очистить();
		Объект.ОтчетРеестрВвезенныхМатериальныхРесурсовВКР.Очистить();
		
		ЗаполнитьТабличнуюЧастьОтчетОсновнойНаСервере();
		ЗаполнитьТабличнуюЧастьОтчетРеестрПоставокНаСервере();
		ЗаполнитьТабличнуюЧастьОтчетРеестрПриобретенныхНаСервере();
		ЗаполнитьТабличнуюЧастьОтчетРеестрВвезенныхНаСервере();
		
		Если НЕ ДанныеУчетнойПолитики.Контракт Тогда
			РассчитатьИтогиОтчетаРеестрПоставокНаСервере();
			РассчитатьИтогиОтчетаРеестрПриобретенныхНаСервере();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НачатьПодключениеРасширенияРаботыСФайламиЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
	Если НЕ Подключено Тогда
		Оповещение = Новый ОписаниеОповещения("НачатьУстановкуРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстСообщения = НСтр("ru = 'Для продолжении работы необходимо установить расширение для веб-клиента ""1С:Предприятие"". Установить?'");
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет); 
	КонецЕсли;
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Укажите путь для сохранения файла'");
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	
	ДополнительныеПараметры.Вставить("ВидДиалога", "РасширенияРаботыСФайламиЗавершение");
	
	Оповещение = Новый ОписаниеОповещения("ДиалогОткрытияФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ДиалогОткрытияФайла.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьУстановкуРасширенияРаботыСФайламиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		НачатьУстановкуРасширенияРаботыСФайлами();
	КонецЕсли;
	
КонецПроцедуры

// Ветка процедуры, возникающая после диалога подтверждения записи.
&НаКлиенте
Процедура ПродолжитьВыполнениеКомандыПослеПодтвержденияЗаписи(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ОчиститьСообщения();
		Записать();
		Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
			Возврат; // Запись не удалась, сообщения о причинах выводит платформа.
		КонецЕсли;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	ПродолжитьВыгрузкуЗавершение(ДополнительныеПараметры. НаправлениеВыгрузки)
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПроводник(ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ПолноеИмяФайла) Тогда 
		ФайловаяСистемаКлиент.ОткрытьПроводник(ДополнительныеПараметры.ПолноеИмяФайла);
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ТребуетсяНастройкаАвторизацияИнтернетПоддержки()
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
		Возврат Не МодульИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура ПриПодключенииИнтернетПоддержки(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПодключенияИнтернетПоддержки", ЭтотОбъект, ДополнительныеПараметры);
		МодульИнтернетПоддержкаПользователейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтернетПоддержкаПользователейКлиент");
		МодульИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОписаниеОповещения, ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияИнтернетПоддержки(Результат, ДополнительныеПараметры) Экспорт
	Если Не (ТипЗнч(Результат) = Тип("Структура")
		И ЗначениеЗаполнено(Результат.Логин)) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.НаправлениеВыгрузки = "СохранитьВЭлектроннойФорме" Тогда
		ПродолжитьСохранение("СохранитьВЭлектроннойФорме");	
	ИначеЕсли ДополнительныеПараметры.НаправлениеВыгрузки = "СохранитьВЭлектроннойФормеЛК" Тогда
		ПродолжитьСохранение("СохранитьВЭлектроннойФормеЛК");	
	Иначе
		ПродолжитьВыгрузку(ДополнительныеПараметры.НаправлениеВыгрузки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьВыгрузку(НаправлениеВыгрузки)
	
	Если Объект.Ссылка.Пустая() 
		Или Модифицированность Тогда  
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Выполнение действия возможно только после записи данных.
			|Данные будут записаны.'");
		Обработчик = Новый ОписаниеОповещения("ПродолжитьВыполнениеКомандыПослеПодтвержденияЗаписи", ЭтотОбъект, Новый Структура("НаправлениеВыгрузки", НаправлениеВыгрузки));
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;		
	
	ПродолжитьВыгрузкуЗавершение(НаправлениеВыгрузки);

КонецПроцедуры // ПродолжитьВыгрузку()

&НаКлиенте
Процедура ПродолжитьВыгрузкуЗавершение(НаправлениеВыгрузки)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Команда", НаправлениеВыгрузки);
	
	Оповещение = Новый ОписаниеОповещения("НачатьПодключениеРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
	
КонецПроцедуры 

// Процедура - Заполнить табличную часть на сервере
//
&НаСервере
Процедура ЗаполнитьТабличнуюЧастьОтчетОсновнойНаСервере()
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьТабличнуюЧастьОтчетОсновной();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
КонецПроцедуры

// Процедура - Заполнить табличную часть на сервере
//
&НаСервере
Процедура ЗаполнитьТабличнуюЧастьОтчетРеестрПоставокНаСервере()
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьТабличнуюЧастьОтчетРеестрПоставок(ДанныеУчетнойПолитики.Контракт, ДанныеУчетнойПолитики.ОтчетПоНДСПоПоставке);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
КонецПроцедуры

// Процедура - Заполнить табличную часть на сервере
//
&НаСервере
Процедура ЗаполнитьТабличнуюЧастьОтчетРеестрПриобретенныхНаСервере()
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьТабличнуюЧастьОтчетРеестрПриобретенных(ДанныеУчетнойПолитики.Контракт, 
		ДанныеУчетнойПолитики.НеУчитыватьЗакупкиБезНДС, ДанныеУчетнойПолитики.ОтчетПоНДСПоПоставке);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
КонецПроцедуры

// Процедура - Заполнить табличную часть на сервере
//
&НаСервере
Процедура ЗаполнитьТабличнуюЧастьОтчетРеестрВвезенныхНаСервере()
	
	Если НЕ ДанныеУчетнойПолитики.Контракт Тогда
		Документ = РеквизитФормыВЗначение("Объект");
		Документ.ЗаполнитьТабличнуюЧастьОтчетРеестрВвезенных(ДанныеУчетнойПолитики.НеУчитыватьЗакупкиБезНДС);
		ЗначениеВРеквизитФормы(Документ, "Объект");
	КонецЕсли;
	
	Модифицированность = Истина;
КонецПроцедуры

// Процедура - Заполнить табличную часть на сервере
//
&НаСервере
Процедура РассчитатьИтогиОтчетаРеестрПоставокНаСервере()
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.РассчитатьИтогиОтчетаРеестрПоставок();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
КонецПроцедуры

// Процедура - Заполнить табличную часть на сервере
//
&НаСервере
Процедура РассчитатьИтогиОтчетаРеестрПриобретенныхНаСервере()
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.РассчитатьИтогиОтчетаРеестрПриобретенных();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеФайла(КаталогФайлаВыгрузки, ДополнительныеПараметры)
	#Если МобильныйКлиент Тогда
		Возврат;
	#Иначе
		
		КаталогФайлаВыгрузки = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогФайлаВыгрузки);
		
		// Открытие приложения Excel
		Попытка
			Excel = Новый COMОбъект("Excel.Application");
			Excel.AutomationSecurity = 3; // msoAutomationSecurityForceDisable = 3 отключение исполнение макросов.
		Исключение
			ВызватьИсключение НСтр("ru = 'Не удалось подключить COM-объект Excel.
				|Вероятные причины:
				| - На компьютере не установлен Microsoft Office или установлена не полная версия;
				| - У пользователя недостаточно прав на создание COM-объектов;
				| - Включен контроль учетных записей Windows;
				| - Операционная система не из семейства Windows.
				|
				|Техническая информация:
				|'") + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
		Excel.Visible = 0;
		Excel.DisplayAlerts = 0;
		Excel.DefaultSaveFormat = 51;
		
		Расширение = "xlsx";
		ТипФайла = ТипФайлаТабличногоДокумента.XLSX;
		
		// Проверка версии
		ВерсияExcel = Лев(Excel.Version, Найти(Excel.Version,".") -1);
		Если ВерсияExcel < "16" Тогда
			ТекстСообщения = НСтр("ru = 'Используется устаревшая версия Excel.
				|Рекомендуется установить версию Excel не меньше, чем Excel 2007.
				|(Для администратора: Для корректрой работы необходима версия Application 16 и выше).'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);	
			
			// для сохранения в старом формате
			Excel.DefaultSaveFormat = 56;
			Расширение = "xls";  
			ТипФайла = ТипФайлаТабличногоДокумента.XLS;
		КонецЕсли;

		МассивИменТемпФайлов = Новый Массив;

		КоличествоОперацийПриложение01 = 0;
		КоличествоОперацийПриложение02 = 0;
		КоличествоОперацийПриложение03 = 0;
		КоличествоОперацийПриложение04 = 0;
		КоличествоОперацийПриложение05 = 0;

		Если ДополнительныеПараметры.Команда = "ОсновнаяФорма_до2022г" Тогда 
			// Формирование табличных документов 
			ТабличныйДокументОсновнаяФорма= ОтчетНДСОсновнаяФорма_до2022г();	
			ТабличныйДокументПриложение01 = ОтчетНДСПриложение01(КоличествоОперацийПриложение01);
			ТабличныйДокументПриложение02 = ОтчетНДСПриложение02(КоличествоОперацийПриложение02);
			ТабличныйДокументПриложение03 = ОтчетНДСПриложение03(КоличествоОперацийПриложение03);
			ТабличныйДокументПриложение04 = ОтчетНДСПриложение04(КоличествоОперацийПриложение04);
			ТабличныйДокументПриложение05 = ОтчетНДСПриложение05(КоличествоОперацийПриложение05);

			// Сохранение во временных файлах
			#Если ВебКлиент Тогда
				ИмяТемпФайла0 = КаталогФайлаВыгрузки + "report_NDS_temp0." + Расширение;
				ИмяТемпФайла1 = КаталогФайлаВыгрузки + "report_NDS_temp1." + Расширение;
				ИмяТемпФайла2 = КаталогФайлаВыгрузки + "report_NDS_temp2." + Расширение;
				ИмяТемпФайла3 = КаталогФайлаВыгрузки + "report_NDS_temp3." + Расширение;
				ИмяТемпФайла4 = КаталогФайлаВыгрузки + "report_NDS_temp4." + Расширение;
				ИмяТемпФайла5 = КаталогФайлаВыгрузки + "report_NDS_temp5." + Расширение;
			#Иначе
				ИмяТемпФайла0 = ПолучитьИмяВременногоФайла("." + Расширение);
				ИмяТемпФайла1 = ПолучитьИмяВременногоФайла("." + Расширение);
				ИмяТемпФайла2 = ПолучитьИмяВременногоФайла("." + Расширение);
				ИмяТемпФайла3 = ПолучитьИмяВременногоФайла("." + Расширение);
				ИмяТемпФайла4 = ПолучитьИмяВременногоФайла("." + Расширение);
				ИмяТемпФайла5 = ПолучитьИмяВременногоФайла("." + Расширение);
			#КонецЕсли
			
			ТабличныйДокументОсновнаяФорма.Записать(ИмяТемпФайла0, ТипФайла);
			ТабличныйДокументПриложение01.Записать(ИмяТемпФайла1, ТипФайла);
		    ТабличныйДокументПриложение02.Записать(ИмяТемпФайла2, ТипФайла);
			ТабличныйДокументПриложение03.Записать(ИмяТемпФайла3, ТипФайла);
			ТабличныйДокументПриложение04.Записать(ИмяТемпФайла4, ТипФайла);
			ТабличныйДокументПриложение05.Записать(ИмяТемпФайла5, ТипФайла);

			МассивИменТемпФайлов.Добавить(ИмяТемпФайла5);
			МассивИменТемпФайлов.Добавить(ИмяТемпФайла4);
			МассивИменТемпФайлов.Добавить(ИмяТемпФайла3);
			МассивИменТемпФайлов.Добавить(ИмяТемпФайла2);
			МассивИменТемпФайлов.Добавить(ИмяТемпФайла1);
			МассивИменТемпФайлов.Добавить(ИмяТемпФайла0);
			
			// Добавление общей книги
			ОбщаяКнигаExcel = Excel.Application.Workbooks.Add();
			ОбщаяКнигаExcel.Activate();

			// Заполнение книги путем копирования листов
			Для Каждого ИмяТемпФайла Из МассивИменТемпФайлов Цикл
				// Открытие временной книги
				ВременнаяКнигаExcel = Excel.WorkBooks.Open(ИмяТемпФайла);
				// Чтение первого листа
				ЛистСДанными = ВременнаяКнигаExcel.Sheets(1);
				ЛистСДанными.Select();
				// Копирование в общую книгу
				ЛистСДанными.Copy(ОбщаяКнигаExcel.Sheets(1));
				
				// Закрытие временной книги
				ВременнаяКнигаExcel.Close(0);
				ВременнаяКнигаExcel = Неопределено;
				ЛистСДанными = Неопределено;
			КонецЦикла;
					
			// Удаление крайних листов (должно остаться только 4)
			КолЛистов = ОбщаяКнигаExcel.WorkSheets.Count;
			Пока КолЛистов > 6 Цикл 
				ОбщаяКнигаExcel.WorkSheets(КолЛистов).Delete();
				КолЛистов = КолЛистов - 1;
			КонецЦикла;	
			
			// Переименование листов по порядку
			Для Каждого ЛистExcel Из ОбщаяКнигаExcel.Sheets Цикл
				Если ЛистExcel.Index = 1 Тогда 
					ЛистExcel.Name = "Отчет НДС";
					УстановитьТипыЯчеек(ЛистExcel);
				ИначеЕсли ЛистExcel.Index = 2 Тогда 	
					ЛистExcel.Name = "Приложение 01";
					УстановитьТипыЯчеек(ЛистExcel, КоличествоОперацийПриложение01);
				ИначеЕсли ЛистExcel.Index = 3 Тогда 	
					ЛистExcel.Name = "Приложение 02";
					УстановитьТипыЯчеек(ЛистExcel, КоличествоОперацийПриложение02);
				ИначеЕсли ЛистExcel.Index = 4 Тогда 
					ЛистExcel.Name = "Приложение 03";
					УстановитьТипыЯчеек(ЛистExcel, КоличествоОперацийПриложение03);
				ИначеЕсли ЛистExcel.Index = 5 Тогда 
					ЛистExcel.Name = "Приложение 04";
					УстановитьТипыЯчеек(ЛистExcel, КоличествоОперацийПриложение04);
				ИначеЕсли ЛистExcel.Index = 6 Тогда 
					ЛистExcel.Name = "Приложение 05";
					УстановитьТипыЯчеек(ЛистExcel, КоличествоОперацийПриложение05);
					
				КонецЕсли;	
			КонецЦикла;	
			
			// Имя файла
			ПолноеИмяФайла = КаталогФайлаВыгрузки + "OtchetNDS_" + Формат(Объект.Дата,"ДЛФ=D") + "." + Расширение;
			
			// Сохранение общей книги
			ОбщаяКнигаExcel.SaveCopyAs(ПолноеИмяФайла);
			ОбщаяКнигаExcel.Close();
			ОбщаяКнигаExcel = Неопределено;
			
		ИначеЕсли ДополнительныеПараметры.Команда = "ОсновнаяФорма" Тогда 
			// Формирование табличных документов 
			ТабличныйДокументОсновнаяФорма= ОтчетНДСОсновнаяФорма();   	
			ТабличныйДокументПриложение01 = ОтчетНДСПриложение01(КоличествоОперацийПриложение01);
			ТабличныйДокументПриложение02 = ОтчетНДСПриложение02(КоличествоОперацийПриложение02);
			ТабличныйДокументПриложение03 = ОтчетНДСПриложение03(КоличествоОперацийПриложение03);

			// Сохранение во временных файлах
			#Если ВебКлиент Тогда
				ИмяТемпФайла0 = КаталогФайлаВыгрузки + "report_NDS_temp0." + Расширение;
				ИмяТемпФайла1 = КаталогФайлаВыгрузки + "report_NDS_temp1." + Расширение;
				ИмяТемпФайла2 = КаталогФайлаВыгрузки + "report_NDS_temp2." + Расширение;
				ИмяТемпФайла3 = КаталогФайлаВыгрузки + "report_NDS_temp3." + Расширение;
			#Иначе
				ИмяТемпФайла0 = ПолучитьИмяВременногоФайла("." + Расширение);
				ИмяТемпФайла1 = ПолучитьИмяВременногоФайла("." + Расширение);
				ИмяТемпФайла2 = ПолучитьИмяВременногоФайла("." + Расширение);
				ИмяТемпФайла3 = ПолучитьИмяВременногоФайла("." + Расширение);
			#КонецЕсли
			
			ТабличныйДокументОсновнаяФорма.Записать(ИмяТемпФайла0, ТипФайла);
			ТабличныйДокументПриложение01.Записать(ИмяТемпФайла1, ТипФайла);
		    ТабличныйДокументПриложение02.Записать(ИмяТемпФайла2, ТипФайла);
			ТабличныйДокументПриложение03.Записать(ИмяТемпФайла3, ТипФайла);

			МассивИменТемпФайлов.Добавить(ИмяТемпФайла3);
			МассивИменТемпФайлов.Добавить(ИмяТемпФайла2);
			МассивИменТемпФайлов.Добавить(ИмяТемпФайла1);
			МассивИменТемпФайлов.Добавить(ИмяТемпФайла0);
			
			// Добавление общей книги
			ОбщаяКнигаExcel = Excel.Application.Workbooks.Add();
			ОбщаяКнигаExcel.Activate();

			// Заполнение книги путем копирования листов
			Для Каждого ИмяТемпФайла Из МассивИменТемпФайлов Цикл
				// Открытие временной книги
				ВременнаяКнигаExcel = Excel.WorkBooks.Open(ИмяТемпФайла);
				// Чтение первого листа
				ЛистСДанными = ВременнаяКнигаExcel.Sheets(1);
				ЛистСДанными.Select();
				// Копирование в общую книгу
				ЛистСДанными.Copy(ОбщаяКнигаExcel.Sheets(1));
				
				// Закрытие временной книги
				ВременнаяКнигаExcel.Close(0);
				ВременнаяКнигаExcel = Неопределено;
				ЛистСДанными = Неопределено;
			КонецЦикла;
			
			// Удаление крайних листов (должно остаться только 4)
			КолЛистов = ОбщаяКнигаExcel.WorkSheets.Count;
			Пока КолЛистов > 4 Цикл 
				ОбщаяКнигаExcel.WorkSheets(КолЛистов).Delete();
				КолЛистов = КолЛистов - 1;
			КонецЦикла;
			
			// Переименование листов по порядку
			Для Каждого ЛистExcel Из ОбщаяКнигаExcel.Sheets Цикл
				Если ЛистExcel.Index = 1 Тогда 
					ЛистExcel.Name = "Отчет НДС";
					УстановитьТипыЯчеек(ЛистExcel);
				ИначеЕсли ЛистExcel.Index = 2 Тогда 	
					ЛистExcel.Name = "Приложение 01";
					УстановитьТипыЯчеек(ЛистExcel, КоличествоОперацийПриложение01);
				ИначеЕсли ЛистExcel.Index = 3 Тогда 	
					ЛистExcel.Name = "Приложение 02";
					УстановитьТипыЯчеек(ЛистExcel, КоличествоОперацийПриложение02);
				ИначеЕсли ЛистExcel.Index = 4 Тогда 
					ЛистExcel.Name = "Приложение 03";
					УстановитьТипыЯчеек(ЛистExcel, КоличествоОперацийПриложение03);
				КонецЕсли;	
			КонецЦикла;	
			
			// Имя файла
			ПолноеИмяФайла = КаталогФайлаВыгрузки + "OtchetNDS_" + Формат(Объект.Дата,"ДЛФ=D") + "." + Расширение;
			
			// Сохранение общей книги
			ОбщаяКнигаExcel.SaveCopyAs(ПолноеИмяФайла);
			ОбщаяКнигаExcel.Close();
			ОбщаяКнигаExcel = Неопределено;	
			
		ИначеЕсли ДополнительныеПараметры.Команда = "Приложение01" Тогда 
			ПолноеИмяФайла = КаталогФайлаВыгрузки + "addition01_NDS_" + Формат(Объект.Дата,"ДФ=yyyyMMdd") + "." + Расширение;

			ТабличныйДокументПриложение = ОтчетНДСПриложение01(КоличествоОперацийПриложение01);
			ТабличныйДокументПриложение.Записать(ПолноеИмяФайла, ТипФайла);
			
		ИначеЕсли ДополнительныеПараметры.Команда = "Приложение02" Тогда 
			ПолноеИмяФайла = КаталогФайлаВыгрузки + "addition02_NDS_" + Формат(Объект.Дата,"ДФ=yyyyMMdd") + "." + Расширение;

			ТабличныйДокументПриложение = ОтчетНДСПриложение02(КоличествоОперацийПриложение02);
			ТабличныйДокументПриложение.Записать(ПолноеИмяФайла, ТипФайла);
			
		ИначеЕсли ДополнительныеПараметры.Команда = "Приложение03" Тогда 
			ПолноеИмяФайла = КаталогФайлаВыгрузки + "addition03_NDS_" + Формат(Объект.Дата,"ДФ=yyyyMMdd") + "." + Расширение;

			ТабличныйДокументПриложение = ОтчетНДСПриложение03(КоличествоОперацийПриложение03);
			ТабличныйДокументПриложение.Записать(ПолноеИмяФайла, ТипФайла);
			
		ИначеЕсли ДополнительныеПараметры.Команда = "Приложение04" Тогда 
			ПолноеИмяФайла = КаталогФайлаВыгрузки + "addition04_NDS_" + Формат(Объект.Дата,"ДФ=yyyyMMdd") + "." + Расширение;

			ТабличныйДокументПриложение = ОтчетНДСПриложение04(КоличествоОперацийПриложение04);
			ТабличныйДокументПриложение.Записать(ПолноеИмяФайла, ТипФайла);
			
		ИначеЕсли ДополнительныеПараметры.Команда = "Приложение05" Тогда 
			ПолноеИмяФайла = КаталогФайлаВыгрузки + "addition05_NDS_" + Формат(Объект.Дата,"ДФ=yyyyMMdd") + "." + Расширение;

			ТабличныйДокументПриложение = ОтчетНДСПриложение05(КоличествоОперацийПриложение05);
			ТабличныйДокументПриложение.Записать(ПолноеИмяФайла, ТипФайла);

		КонецЕсли;
		
		// Закрытие приложения
		Excel.Quit();	
		Excel = Неопределено;
		
		ТекстОповещения = НСтр("ru = 'Файл успешно сформирован'");
		ТекстПояснения = ПолноеИмяФайла;
		ПоказатьОповещениеПользователя(
			ТекстОповещения, 
			Новый ОписаниеОповещения("ОткрытьПроводник", ЭтотОбъект, Новый Структура("ПолноеИмяФайла", ПолноеИмяФайла)), 
			ТекстПояснения, 
			БиблиотекаКартинок.Информация32);
		
		// Удаление временных файлов
		Для каждого ИмяТемпФайла Из МассивИменТемпФайлов Цикл
			УдалитьФайлы(ИмяТемпФайла);
		КонецЦикла;
	#КонецЕсли			

КонецПроцедуры // ФормированиеФайла()

// Функция - Отчет НДСОсновная форма
// 
// Возвращаемое значение:
//  ТабличныйДокумент - 
//
&НаСервере
Функция ОтчетНДСОсновнаяФорма_до2022г()
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Макет = Документы.ОтчетПоНДС.ПолучитьМакет("ПФ_MXL_ОтчетНДСОсновнаяФорма_до2022г");
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	// Подготовка данных
	ДанныеПечати = Новый Структура;
	
	// Вид отчета
	Если Объект.ВидОтчета = Перечисления.ВидыОтчетаПоНалогам.Уточненный Тогда
		ДанныеПечати.Вставить("ВидОтчета", "1");
		
	ИначеЕсли Объект.ВидОтчета = Перечисления.ВидыОтчетаПоНалогам.Ликвидационный Тогда
		ДанныеПечати.Вставить("ВидОтчета", "3");
		
	Иначе
		ДанныеПечати.Вставить("ВидОтчета", "0");
	КонецЕсли;
	
	// Данные Организации
	ГНС = Объект.Организация.ГНС;
	ДанныеПечати.Вставить("Ячейка102", Объект.Организация.ИНН);
	ДанныеПечати.Вставить("Ячейка103", Объект.Организация.НаименованиеПолное);
	ДанныеПечати.Вставить("Ячейка104", ГНС.Код);
	ДанныеПечати.Вставить("Ячейка104Наименование", ГНС.Наименование);
	ДанныеПечати.Вставить("Ячейка107", Объект.Организация.КодПоОКПО);
	
	// Контактная информация
	СведенияОбОрганизации = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСведенияОбОрганизации(Объект.Организация, КонецМесяца(Объект.Дата));
	
	ДанныеПечати.Вставить("Ячейка112", СведенияОбОрганизации.Индекс);

	// Область/Город/Район/НаселенныйПункт
	ДанныеПечати.Вставить("Ячейка113", ?(ЗначениеЗаполнено(СведенияОбОрганизации.Регион), СведенияОбОрганизации.Регион, "")
		+ ?(ЗначениеЗаполнено(СведенияОбОрганизации.Район), " " + СведенияОбОрганизации.Район, "")
		+ ?(ЗначениеЗаполнено(СведенияОбОрганизации.Город), " " + СведенияОбОрганизации.Город, "")
		+ ?(ЗначениеЗаполнено(СведенияОбОрганизации.НаселенныйПункт), " " + СведенияОбОрганизации.НаселенныйПункт, ""));
	
	// Улица/Дом
	ДанныеПечати.Вставить("Ячейка114", ?(ЗначениеЗаполнено(СведенияОбОрганизации.Улица), СведенияОбОрганизации.Улица, "")
		+ ?(ЗначениеЗаполнено(СведенияОбОрганизации.Дом), " ,д." + СведенияОбОрганизации.Дом, "")
		+ ?(ЗначениеЗаполнено(СведенияОбОрганизации.Квартира), " кв." + СведенияОбОрганизации.Квартира, ""));
		
	ДанныеПечати.Вставить("Ячейка115", СведенияОбОрганизации.Тел);
	ДанныеПечати.Вставить("Ячейка116", СведенияОбОрганизации.Email);

	ДанныеПечати.Вставить("Ячейка201", НачалоМесяца(Объект.Дата));
	ДанныеПечати.Вставить("Ячейка202", КонецМесяца(Объект.Дата));

	ДанныеПечати.Вставить("Ячейка050", 0);
	ДанныеПечати.Вставить("Ячейка051", 0);
	ДанныеПечати.Вставить("Ячейка052", 0);
	ДанныеПечати.Вставить("Ячейка053", 0);
	ДанныеПечати.Вставить("Ячейка054", 0);
	ДанныеПечати.Вставить("Ячейка055", 0);
	ДанныеПечати.Вставить("Ячейка056", 0);
	ДанныеПечати.Вставить("Ячейка057", 0);
	ДанныеПечати.Вставить("Ячейка058", 0);
	ДанныеПечати.Вставить("Ячейка059", 0);
	ДанныеПечати.Вставить("Ячейка060", 0);
	ДанныеПечати.Вставить("Ячейка061", 0);
	ДанныеПечати.Вставить("Ячейка062", 0);
	ДанныеПечати.Вставить("Ячейка063", 0);
	ДанныеПечати.Вставить("Ячейка064", 0);
	ДанныеПечати.Вставить("Ячейка065", 0);
	ДанныеПечати.Вставить("Ячейка066", 0);
	ДанныеПечати.Вставить("Ячейка067", 0);
	ДанныеПечати.Вставить("Ячейка068", 0);
	ДанныеПечати.Вставить("Ячейка069", 0);
	ДанныеПечати.Вставить("Ячейка070", 0);
	ДанныеПечати.Вставить("Ячейка071", 0);
	ДанныеПечати.Вставить("Ячейка072", 0);
	
	// Информация о НДС
	Для Каждого СтрокаТабличнойЧасти Из Объект.ОтчетОсновной Цикл 
		Если СтрокаТабличнойЧасти.Строка = "050" Тогда
			ДанныеПечати.Ячейка050 = СтрокаТабличнойЧасти.Сумма;
		ИначеЕсли СтрокаТабличнойЧасти.Строка = "051" Тогда    
			ДанныеПечати.Ячейка051 = СтрокаТабличнойЧасти.Сумма;
		ИначеЕсли СтрокаТабличнойЧасти.Строка = "052" Тогда
			ДанныеПечати.Ячейка052 = СтрокаТабличнойЧасти.Сумма;
		ИначеЕсли СтрокаТабличнойЧасти.Строка = "053" Тогда
			ДанныеПечати.Ячейка053 = СтрокаТабличнойЧасти.Сумма;
		ИначеЕсли СтрокаТабличнойЧасти.Строка = "054" Тогда
			ДанныеПечати.Ячейка054 = СтрокаТабличнойЧасти.Сумма;
		ИначеЕсли СтрокаТабличнойЧасти.Строка = "055" Тогда
			ДанныеПечати.Ячейка055 = СтрокаТабличнойЧасти.Сумма;
		ИначеЕсли СтрокаТабличнойЧасти.Строка = "056" Тогда
			ДанныеПечати.Ячейка056 = СтрокаТабличнойЧасти.Сумма;
		ИначеЕсли СтрокаТабличнойЧасти.Строка = "057" Тогда
			ДанныеПечати.Ячейка057 = СтрокаТабличнойЧасти.Сумма;
		ИначеЕсли СтрокаТабличнойЧасти.Строка = "058" Тогда
			ДанныеПечати.Ячейка058 = СтрокаТабличнойЧасти.Сумма;
		ИначеЕсли СтрокаТабличнойЧасти.Строка = "059" Тогда
			ДанныеПечати.Ячейка059 = СтрокаТабличнойЧасти.Сумма;			
		ИначеЕсли СтрокаТабличнойЧасти.Строка = "060" Тогда
			ДанныеПечати.Ячейка060 = СтрокаТабличнойЧасти.Сумма;
		ИначеЕсли СтрокаТабличнойЧасти.Строка = "061" Тогда
			ДанныеПечати.Ячейка061 = СтрокаТабличнойЧасти.Сумма;
		ИначеЕсли СтрокаТабличнойЧасти.Строка = "062" Тогда
			ДанныеПечати.Ячейка062 = СтрокаТабличнойЧасти.Сумма;
		ИначеЕсли СтрокаТабличнойЧасти.Строка = "063" Тогда
			ДанныеПечати.Ячейка063 = СтрокаТабличнойЧасти.Сумма;
		ИначеЕсли СтрокаТабличнойЧасти.Строка = "064" Тогда
			ДанныеПечати.Ячейка064 = СтрокаТабличнойЧасти.Сумма;
		ИначеЕсли СтрокаТабличнойЧасти.Строка = "065" Тогда
			ДанныеПечати.Ячейка065 = СтрокаТабличнойЧасти.Сумма;
		ИначеЕсли СтрокаТабличнойЧасти.Строка = "066" Тогда
			ДанныеПечати.Ячейка066 = СтрокаТабличнойЧасти.Сумма;
		ИначеЕсли СтрокаТабличнойЧасти.Строка = "067" Тогда
			ДанныеПечати.Ячейка067 = СтрокаТабличнойЧасти.Сумма;			
		ИначеЕсли СтрокаТабличнойЧасти.Строка = "068" Тогда
			ДанныеПечати.Ячейка068 = СтрокаТабличнойЧасти.Сумма;			
		ИначеЕсли СтрокаТабличнойЧасти.Строка = "069" Тогда
			ДанныеПечати.Ячейка069 = СтрокаТабличнойЧасти.Сумма;			
		ИначеЕсли СтрокаТабличнойЧасти.Строка = "070" Тогда
			ДанныеПечати.Ячейка070 = СтрокаТабличнойЧасти.Сумма;			
		ИначеЕсли СтрокаТабличнойЧасти.Строка = "071" Тогда
			ДанныеПечати.Ячейка071 = СтрокаТабличнойЧасти.Сумма;			
		ИначеЕсли СтрокаТабличнойЧасти.Строка = "072" Тогда
			ДанныеПечати.Ячейка072 = СтрокаТабличнойЧасти.Сумма;					
		КонецЕсли;
	КонецЦикла;
	
	ДанныеПечати.Вставить("Приложение01", ?(Объект.ОтчетРеестрПоставок.Количество() = 0, "0", "1"));
	ДанныеПечати.Вставить("Приложение02", ?(Объект.ОтчетРеестрПриобретенныхМатРесурсов.Количество() = 0, "0", "1"));
	ДанныеПечати.Вставить("Приложение03", ?(Объект.ОтчетРеестрВвезенныхМатериальныхРесурсовВКР.Количество() = 0, "0", "1"));
	ДанныеПечати.Вставить("Приложение04", ?(Объект.ОтчетРеестрПоставокНаОсновеНалоговогоКонтракта.Количество() = 0, "0", "1"));
	ДанныеПечати.Вставить("Приложение05", ?(Объект.ОтчетРеестрПриобретенныхНаОсновеНалоговогоКонтракта.Количество() = 0, "0", "1"));

	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабличныйДокумент;	
КонецФункции
  
// Функция - Отчет НДСОсновная форма
// 
// Возвращаемое значение:
//  ТабличныйДокумент - 
//
&НаСервере
Функция ОтчетНДСОсновнаяФорма()
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Макет = Документы.ОтчетПоНДС.ПолучитьМакет("ПФ_MXL_ОтчетНДСОсновнаяФорма");
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	// Подготовка данных
	ДанныеПечати = Новый Структура;
	
	// Вид отчета
	Если Объект.ВидОтчета = Перечисления.ВидыОтчетаПоНалогам.Уточненный Тогда
		ДанныеПечати.Вставить("ВидОтчета", "1");
		
	ИначеЕсли Объект.ВидОтчета = Перечисления.ВидыОтчетаПоНалогам.Ликвидационный Тогда
		ДанныеПечати.Вставить("ВидОтчета", "3");
		
	Иначе
		ДанныеПечати.Вставить("ВидОтчета", "0");
	КонецЕсли;
	
	// Данные Организации
	ГНС = Объект.Организация.ГНС;
	ДанныеПечати.Вставить("Ячейка102", Объект.Организация.ИНН);
	ДанныеПечати.Вставить("Ячейка103", Объект.Организация.НаименованиеПолное);
	ДанныеПечати.Вставить("Ячейка104", ГНС.Код);
	ДанныеПечати.Вставить("Ячейка104Наименование", ГНС.Наименование);
	ДанныеПечати.Вставить("Ячейка107", Объект.Организация.КодПоОКПО);
	
	// Контактная информация
	СведенияОбОрганизации = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСведенияОбОрганизации(Объект.Организация, КонецМесяца(Объект.Дата));
	
	ДанныеПечати.Вставить("Ячейка112", СведенияОбОрганизации.Индекс);

	// Область/Город/Район/НаселенныйПункт
	ДанныеПечати.Вставить("Ячейка113", ?(ЗначениеЗаполнено(СведенияОбОрганизации.Регион), СведенияОбОрганизации.Регион, "")
		+ ?(ЗначениеЗаполнено(СведенияОбОрганизации.Район), " " + СведенияОбОрганизации.Район, "")
		+ ?(ЗначениеЗаполнено(СведенияОбОрганизации.Город), " " + СведенияОбОрганизации.Город, "")
		+ ?(ЗначениеЗаполнено(СведенияОбОрганизации.НаселенныйПункт), " " + СведенияОбОрганизации.НаселенныйПункт, ""));
	
	// Улица/Дом
	ДанныеПечати.Вставить("Ячейка114", ?(ЗначениеЗаполнено(СведенияОбОрганизации.Улица), СведенияОбОрганизации.Улица, "")
		+ ?(ЗначениеЗаполнено(СведенияОбОрганизации.Дом), " ,д." + СведенияОбОрганизации.Дом, "")
		+ ?(ЗначениеЗаполнено(СведенияОбОрганизации.Квартира), " кв." + СведенияОбОрганизации.Квартира, ""));
		
	ДанныеПечати.Вставить("Ячейка115", СведенияОбОрганизации.Тел);
	ДанныеПечати.Вставить("Ячейка116", СведенияОбОрганизации.Email);

	ДанныеПечати.Вставить("Ячейка201", НачалоМесяца(Объект.Дата));
	ДанныеПечати.Вставить("Ячейка202", КонецМесяца(Объект.Дата));

	ДанныеПечати.Вставить("Ячейка050", 0);
	ДанныеПечати.Вставить("Ячейка051", 0);
	ДанныеПечати.Вставить("Ячейка052", 0);
	ДанныеПечати.Вставить("Ячейка053", 0);
	ДанныеПечати.Вставить("Ячейка054", 0);
	ДанныеПечати.Вставить("Ячейка055", 0);
	ДанныеПечати.Вставить("Ячейка056", 0);
	ДанныеПечати.Вставить("Ячейка057", 0);
	ДанныеПечати.Вставить("Ячейка058", 0);
	ДанныеПечати.Вставить("Ячейка059", 0);
	ДанныеПечати.Вставить("Ячейка060", 0);
	ДанныеПечати.Вставить("Ячейка061", 0);
	ДанныеПечати.Вставить("Ячейка062", 0);
	ДанныеПечати.Вставить("Ячейка063", 0);
	ДанныеПечати.Вставить("Ячейка064", 0);
	ДанныеПечати.Вставить("Ячейка065", 0);
	ДанныеПечати.Вставить("Ячейка066", 0);
	ДанныеПечати.Вставить("Ячейка067", 0);
	ДанныеПечати.Вставить("Ячейка068", 0);
	
	// Информация о НДС
	Для Каждого СтрокаТабличнойЧасти Из Объект.ОтчетОсновной Цикл 
		Если СтрокаТабличнойЧасти.Строка = "050" Тогда
			ДанныеПечати.Ячейка050 = СтрокаТабличнойЧасти.Сумма;
		ИначеЕсли СтрокаТабличнойЧасти.Строка = "051" Тогда    
			ДанныеПечати.Ячейка051 = СтрокаТабличнойЧасти.Сумма;
		ИначеЕсли СтрокаТабличнойЧасти.Строка = "052" Тогда
			ДанныеПечати.Ячейка052 = СтрокаТабличнойЧасти.Сумма;
		ИначеЕсли СтрокаТабличнойЧасти.Строка = "053" Тогда
			ДанныеПечати.Ячейка053 = СтрокаТабличнойЧасти.Сумма;
		ИначеЕсли СтрокаТабличнойЧасти.Строка = "054" Тогда
			ДанныеПечати.Ячейка054 = СтрокаТабличнойЧасти.Сумма;
		ИначеЕсли СтрокаТабличнойЧасти.Строка = "055" Тогда
			ДанныеПечати.Ячейка055 = СтрокаТабличнойЧасти.Сумма;
		ИначеЕсли СтрокаТабличнойЧасти.Строка = "056" Тогда
			ДанныеПечати.Ячейка056 = СтрокаТабличнойЧасти.Сумма;
		ИначеЕсли СтрокаТабличнойЧасти.Строка = "057" Тогда
			ДанныеПечати.Ячейка057 = СтрокаТабличнойЧасти.Сумма;
		ИначеЕсли СтрокаТабличнойЧасти.Строка = "058" Тогда
			ДанныеПечати.Ячейка058 = СтрокаТабличнойЧасти.Сумма;
		ИначеЕсли СтрокаТабличнойЧасти.Строка = "059" Тогда
			ДанныеПечати.Ячейка059 = СтрокаТабличнойЧасти.Сумма;			
		ИначеЕсли СтрокаТабличнойЧасти.Строка = "060" Тогда
			ДанныеПечати.Ячейка060 = СтрокаТабличнойЧасти.Сумма;
		ИначеЕсли СтрокаТабличнойЧасти.Строка = "061" Тогда
			ДанныеПечати.Ячейка061 = СтрокаТабличнойЧасти.Сумма;
		ИначеЕсли СтрокаТабличнойЧасти.Строка = "062" Тогда
			ДанныеПечати.Ячейка062 = СтрокаТабличнойЧасти.Сумма;
		ИначеЕсли СтрокаТабличнойЧасти.Строка = "063" Тогда
			ДанныеПечати.Ячейка063 = СтрокаТабличнойЧасти.Сумма;
		ИначеЕсли СтрокаТабличнойЧасти.Строка = "064" Тогда
			ДанныеПечати.Ячейка064 = СтрокаТабличнойЧасти.Сумма;
		ИначеЕсли СтрокаТабличнойЧасти.Строка = "065" Тогда
			ДанныеПечати.Ячейка065 = СтрокаТабличнойЧасти.Сумма;
		ИначеЕсли СтрокаТабличнойЧасти.Строка = "066" Тогда
			ДанныеПечати.Ячейка066 = СтрокаТабличнойЧасти.Сумма;
		ИначеЕсли СтрокаТабличнойЧасти.Строка = "067" Тогда
			ДанныеПечати.Ячейка067 = СтрокаТабличнойЧасти.Сумма;			
		ИначеЕсли СтрокаТабличнойЧасти.Строка = "068" Тогда
			ДанныеПечати.Ячейка068 = СтрокаТабличнойЧасти.Сумма;								
		КонецЕсли;
	КонецЦикла;
	
	ДанныеПечати.Вставить("Приложение01", ?(Объект.ОтчетРеестрПоставок.Количество() = 0, "0", "1"));
	ДанныеПечати.Вставить("Приложение02", ?(Объект.ОтчетРеестрПриобретенныхМатРесурсов.Количество() = 0, "0", "1"));
	ДанныеПечати.Вставить("Приложение03", ?(Объект.ОтчетРеестрВвезенныхМатериальныхРесурсовВКР.Количество() = 0, "0", "1"));

	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабличныйДокумент;	
КонецФункции

&НаСервере
Функция ОтчетНДСПриложение01(КоличествоОпераций)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Переход на ЭСФ.
	Если ДатаДокумента < Дата(2020, 07, 01) Тогда	
		Макет = Документы.ОтчетПоНДС.ПолучитьМакет("ПФ_MXL_Приложение01_старый");
	Иначе 
		Макет = Документы.ОтчетПоНДС.ПолучитьМакет("ПФ_MXL_Приложение01");
	КонецЕсли;	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		
	// Подготовка данных
	ДанныеПечати = Новый Структура;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.ОтчетРеестрПоставокИтоги Цикл 
		Если СтрокаТабличнойЧасти.НомерСтроки = 1 Тогда
			ДанныеПечати.Вставить("ВсегоСуммаБНДС", СтрокаТабличнойЧасти.СтоимостьБезНДС);
			ДанныеПечати.Вставить("ВсегоСуммаНДС", СтрокаТабличнойЧасти.СуммаНДС);
			ДанныеПечати.Вставить("ВсегоОбщСтоимостьНДС", СтрокаТабличнойЧасти.ОбщаяСтоимостьСНДС);
		ИначеЕсли  СтрокаТабличнойЧасти.НомерСтроки = 2 Тогда 
			ДанныеПечати.Вставить("ОблСуммаБНДС", СтрокаТабличнойЧасти.СтоимостьБезНДС);
			ДанныеПечати.Вставить("ОблСуммаНДС", СтрокаТабличнойЧасти.СуммаНДС);
			ДанныеПечати.Вставить("ОблОбщСтоимостьНДС", СтрокаТабличнойЧасти.ОбщаяСтоимостьСНДС);
		ИначеЕсли СтрокаТабличнойЧасти.НомерСтроки = 3 Тогда 
			ДанныеПечати.Вставить("СуммаБНДССельхоз", СтрокаТабличнойЧасти.СтоимостьБезНДС);
			ДанныеПечати.Вставить("СуммаНДССельхоз", СтрокаТабличнойЧасти.СуммаНДС);
			ДанныеПечати.Вставить("СтоимостьНДССельхоз", СтрокаТабличнойЧасти.ОбщаяСтоимостьСНДС);			
		ИначеЕсли СтрокаТабличнойЧасти.НомерСтроки = 4 Тогда 
			ДанныеПечати.Вставить("СтоимостьНДСНулевая", СтрокаТабличнойЧасти.СтоимостьБезНДС);
			ДанныеПечати.Вставить("СуммаНДСНулевая", СтрокаТабличнойЧасти.СуммаНДС);
			ДанныеПечати.Вставить("ОбщСтоимостьНДСНулевая", СтрокаТабличнойЧасти.ОбщаяСтоимостьСНДС);
		ИначеЕсли СтрокаТабличнойЧасти.НомерСтроки = 5 Тогда 	
			ДанныеПечати.Вставить("СтоимНДСВТомЧисле", СтрокаТабличнойЧасти.СтоимостьБезНДС);
			ДанныеПечати.Вставить("СуммаНДСВТомЧисле", СтрокаТабличнойЧасти.СуммаНДС);
			ДанныеПечати.Вставить("ОбщСтоимостьНДСВТомЧисле", СтрокаТабличнойЧасти.ОбщаяСтоимостьСНДС);
		ИначеЕсли СтрокаТабличнойЧасти.НомерСтроки = 6 Тогда 	
			ДанныеПечати.Вставить("ОсвСуммаБНДС", СтрокаТабличнойЧасти.СтоимостьБезНДС);			
		КонецЕсли;		
	КонецЦикла;
	
	КоличествоОпераций = Объект.ОтчетРеестрПоставок.Количество();
	ДанныеПечати.Вставить("КолОпераций", КоличествоОпераций);
	
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	
	// Вывод шапки	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Вывод строк
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Для Каждого СтрокаТабличнойЧасти Из Объект.ОтчетРеестрПоставок Цикл 
		ОбластьМакета.Параметры.Заполнить(СтрокаТабличнойЧасти);
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЦикла;	
	
	Возврат ТабличныйДокумент;	
КонецФункции // ОтчетНДСПриложение01()

&НаСервере
Функция ОтчетНДСПриложение02(КоличествоОпераций)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Переход на ЭСФ.
	Если ДатаДокумента < Дата(2020, 07, 01) Тогда	
		Макет = Документы.ОтчетПоНДС.ПолучитьМакет("ПФ_MXL_Приложение02_старый");
	Иначе 
		Макет = Документы.ОтчетПоНДС.ПолучитьМакет("ПФ_MXL_Приложение02");
	КонецЕсли;	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	// Подготовка данных
	ДанныеПечати = Новый Структура;
	ДанныеПечати.Вставить("ИтогСтоимостьБезНДССельхоз", 0);
	ДанныеПечати.Вставить("ИтогСуммаНДССельхоз", 0);
	ДанныеПечати.Вставить("ИтогСуммаПодлЗачетуНДССельхоз", 0);
	ДанныеПечати.Вставить("ИтогСтоимостьБезНДСДругие", Объект.ОтчетРеестрПриобретенныхМатРесурсов.Итог("СтоимостьБезНДС"));
	ДанныеПечати.Вставить("ИтогСуммаНДСДругие",  Объект.ОтчетРеестрПриобретенныхМатРесурсов.Итог("СуммаНДС"));
	ДанныеПечати.Вставить("ИтогСуммаПодлЗачетуНДСДругие",  Объект.ОтчетРеестрПриобретенныхМатРесурсов.Итог("СуммаПодлежащаяКЗачетуНДС"));	
	ДанныеПечати.Вставить("ИтогСтоимостьБезНДС",  Объект.ОтчетРеестрПриобретенныхМатРесурсов.Итог("СтоимостьБезНДС"));
	ДанныеПечати.Вставить("ИтогСуммаНДС",  Объект.ОтчетРеестрПриобретенныхМатРесурсов.Итог("СуммаНДС"));
	ДанныеПечати.Вставить("ИтогСуммаПодлЗачетуНДС",  Объект.ОтчетРеестрПриобретенныхМатРесурсов.Итог("СуммаПодлежащаяКЗачетуНДС"));	
	
	КоличествоОпераций =  Объект.ОтчетРеестрПриобретенныхМатРесурсов.Количество();
	ДанныеПечати.Вставить("КолОпераций", КоличествоОпераций);
	
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);

	// Вывод шапки	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Вывод строк
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Для Каждого СтрокаТабличнойЧасти Из  Объект.ОтчетРеестрПриобретенныхМатРесурсов Цикл 
		ОбластьМакета.Параметры.Заполнить(СтрокаТабличнойЧасти);
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЦикла;	
	
	Возврат ТабличныйДокумент;	
КонецФункции // ОтчетНДСПриложение02()

&НаСервере
Функция ОтчетНДСПриложение03(КоличествоОпераций)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Макет = Документы.ОтчетПоНДС.ПолучитьМакет("ПФ_MXL_Приложение03");
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	СведенияОбОрганизации = БухгалтерскийУчетСервер.ПолучитьСведенияОбОрганизации(Объект.Организация);
	
	ДанныеПечати = Новый Структура;
	ДанныеПечати.Вставить("ИНН", СведенияОбОрганизации.ИНН); 
	ДанныеПечати.Вставить("ПолноеНаименование", СведенияОбОрганизации.НаименованиеПолное);
	ДанныеПечати.Вставить("ДатаС", НачалоМесяца(Объект.Дата));
	ДанныеПечати.Вставить("ДатаПо", КонецМесяца(Объект.Дата));
	
	//Вывод шапка
	ДанныеПечати.Вставить("ИтогСтоимостьБезНДС", 		Объект.ОтчетРеестрВвезенныхМатериальныхРесурсовВКР.Итог("ГТДСуммаБезНДС"));
	ДанныеПечати.Вставить("ИтогСуммаНДС", 				Объект.ОтчетРеестрВвезенныхМатериальныхРесурсовВКР.Итог("ГТДСуммаНДС"));
	ДанныеПечати.Вставить("ИтогСуммаНДСПД",				Объект.ОтчетРеестрВвезенныхМатериальныхРесурсовВКР.Итог("ПДСуммаНДС"));
	ДанныеПечати.Вставить("СуммаНДСПодлежащаяЗачету",	Объект.ОтчетРеестрВвезенныхМатериальныхРесурсовВКР.Итог("НДСЗачет"));
	  
	ГТДСуммаБезНДС_ЕАЭС = 0; 
	ГТДСуммаНДС_ЕАЭС 	= 0;	
	ПДСуммаНДС_ЕАЭС 	= 0;
	СуммаНДСЗачет_ЕАЭС 	= 0;
	Для каждого СтрокаТабличнойЧасти Из Объект.ОтчетРеестрВвезенныхМатериальныхРесурсовВКР Цикл
		Если СтрокаТабличнойЧасти.КонтрагентСтранаРезидентстваЕАЭС Тогда 
			ГТДСуммаБезНДС_ЕАЭС = ГТДСуммаБезНДС_ЕАЭС 	+ СтрокаТабличнойЧасти.ГТДСуммаБезНДС;
			ГТДСуммаНДС_ЕАЭС 	= ГТДСуммаНДС_ЕАЭС 		+ СтрокаТабличнойЧасти.ГТДСуммаНДС;
			ПДСуммаНДС_ЕАЭС 	= ПДСуммаНДС_ЕАЭС 		+ СтрокаТабличнойЧасти.ПДСуммаНДС;
			СуммаНДСЗачет_ЕАЭС 	= СуммаНДСЗачет_ЕАЭС 	+ СтрокаТабличнойЧасти.НДСЗачет;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеПечати.Вставить("ИтогСтоимостьБезНДС_ЕАЭС", 			ГТДСуммаБезНДС_ЕАЭС);
	ДанныеПечати.Вставить("ИтогСуммаНДС_ЕАЭС", 				 	ГТДСуммаНДС_ЕАЭС);
	ДанныеПечати.Вставить("ИтогСуммаНДСПД_ЕАЭС",				ПДСуммаНДС_ЕАЭС);
	ДанныеПечати.Вставить("ИтогСуммаНДСПодлежащаяЗачету_ЕАЭС",	СуммаНДСЗачет_ЕАЭС);
	
	ДанныеПечати.Вставить("ИтогСтоимостьБезНДС_Сельхоз", 			0);
	ДанныеПечати.Вставить("ИтогСуммаНДС_Сельхоз", 				 	0);
	ДанныеПечати.Вставить("ИтогСуммаНДСПД_Сельхоз",					0);
	ДанныеПечати.Вставить("ИтогСуммаНДСПодлежащаяЗачету_Сельхоз",	0);
	
	КоличествоОпераций =  Объект.ОтчетРеестрВвезенныхМатериальныхРесурсовВКР.Количество();
	ДанныеПечати.Вставить("КолОпераций", КоличествоОпераций);
	
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	
	// Вывод шапки	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Вывод строк
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Для Каждого СтрокаТабличнойЧасти Из Объект.ОтчетРеестрВвезенныхМатериальныхРесурсовВКР Цикл 
		ОбластьМакета.Параметры.Заполнить(СтрокаТабличнойЧасти);
		ОбластьМакета.Параметры.КодСтраны = СтрокаТабличнойЧасти.КодСтраныКонтрагента;
		ОбластьМакета.Параметры.КонтрагентНаименование = ?(СтрокаТабличнойЧасти.Контрагент.НаименованиеПолное <> "",
															СтрокаТабличнойЧасти.Контрагент.НаименованиеПолное,
															СтрокаТабличнойЧасти.Контрагент.Наименование);
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;	
КонецФункции // ОтчетНДСПриложение03()

&НаСервере
Функция ОтчетНДСПриложение04(КоличествоОпераций)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Переход на ЭСФ.
	Если ДатаДокумента < Дата(2020, 07, 01) Тогда	
		Макет = Документы.ОтчетПоНДС.ПолучитьМакет("ПФ_MXL_Приложение04_старый");
	Иначе 
		Макет = Документы.ОтчетПоНДС.ПолучитьМакет("ПФ_MXL_Приложение04");
	КонецЕсли;	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
			
	// Подготовка данных
	ДанныеПечати = Новый Структура;	
	ДанныеПечати.Вставить("СтоимостьБезНДС",  		Объект.ОтчетРеестрПоставокНаОсновеНалоговогоКонтракта.Итог("СтоимостьБезНДС"));
	ДанныеПечати.Вставить("СуммаНДС",  				Объект.ОтчетРеестрПоставокНаОсновеНалоговогоКонтракта.Итог("СуммаНДС"));
	ДанныеПечати.Вставить("ОбщаяСтоимостьСНДС",  	Объект.ОтчетРеестрПоставокНаОсновеНалоговогоКонтракта.Итог("ОбщаяСтоимостьСНДС"));	

	КоличествоОпераций = Объект.ОтчетРеестрПоставокНаОсновеНалоговогоКонтракта.Количество();
	ДанныеПечати.Вставить("КолОпераций", КоличествоОпераций);
	
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	
	// Вывод шапки	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Вывод строк
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Для Каждого СтрокаТабличнойЧасти Из Объект.ОтчетРеестрПоставокНаОсновеНалоговогоКонтракта Цикл 
		ОбластьМакета.Параметры.Заполнить(СтрокаТабличнойЧасти);
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЦикла;	
	
	Возврат ТабличныйДокумент;	
КонецФункции // ОтчетНДСПриложение04()

&НаСервере
Функция ОтчетНДСПриложение05(КоличествоОпераций)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Переход на ЭСФ.
	Если ДатаДокумента < Дата(2020, 07, 01) Тогда	
		Макет = Документы.ОтчетПоНДС.ПолучитьМакет("ПФ_MXL_Приложение05_старый");
	Иначе 
		Макет = Документы.ОтчетПоНДС.ПолучитьМакет("ПФ_MXL_Приложение05");
	КонецЕсли;	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	// Подготовка данных
	ДанныеПечати = Новый Структура;	
	ДанныеПечати.Вставить("СтоимостьБезНДС",  	Объект.ОтчетРеестрПриобретенныхНаОсновеНалоговогоКонтракта.Итог("СтоимостьБезНДС"));
	ДанныеПечати.Вставить("СуммаНДС",  			Объект.ОтчетРеестрПриобретенныхНаОсновеНалоговогоКонтракта.Итог("СуммаНДС"));
	ДанныеПечати.Вставить("СуммаПодлежащаяКЗачетуНДС", Объект.ОтчетРеестрПриобретенныхНаОсновеНалоговогоКонтракта.Итог("СуммаПодлежащаяКЗачетуНДС"));	
	
	КоличествоОпераций =  Объект.ОтчетРеестрПриобретенныхНаОсновеНалоговогоКонтракта.Количество();
	ДанныеПечати.Вставить("КолОпераций", КоличествоОпераций);
	
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);

	// Вывод шапки	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Вывод строк
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Для Каждого СтрокаТабличнойЧасти Из  Объект.ОтчетРеестрПриобретенныхНаОсновеНалоговогоКонтракта Цикл 
		ОбластьМакета.Параметры.Заполнить(СтрокаТабличнойЧасти);
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЦикла;	
	
	Возврат ТабличныйДокумент;	
КонецФункции // ОтчетНДСПриложение05()

&НаКлиенте
Процедура УстановитьТипыЯчеек(ЛистExcel, КоличествоОпераций = 0)
	ФорматДата 		= "ДД.ММ.ГГГГ";
	ФорматСтрока 	= "@";

	Если ЛистExcel.Name = "Отчет 062" Тогда
		ЛистExcel.Cells(5,6).NumberFormat = ФорматСтрока; // Ячейка102
		ЛистExcel.Cells(7,6).NumberFormat = ФорматСтрока; // Ячейка103
		ЛистExcel.Cells(9,6).NumberFormat = ФорматСтрока; // Ячейка104
		ЛистExcel.Cells(11,6).NumberFormat = ФорматСтрока; // Ячейка104Наименование
		ЛистExcel.Cells(13,6).NumberFormat = ФорматСтрока; // Ячейка107
		ЛистExcel.Cells(16,6).NumberFormat = ФорматСтрока; // Ячейка112
		ЛистExcel.Cells(18,6).NumberFormat = ФорматСтрока; // Ячейка113
		ЛистExcel.Cells(20,6).NumberFormat = ФорматСтрока; // Ячейка114
		ЛистExcel.Cells(22,6).NumberFormat = ФорматСтрока; // Ячейка115
		ЛистExcel.Cells(24,6).NumberFormat = ФорматСтрока; // Ячейка116
		ЛистExcel.Cells(26,6).NumberFormat = ФорматДата;  // Ячейка201
		ЛистExcel.Cells(26,9).NumberFormat = ФорматДата;  // Ячейка202
		
	ИначеЕсли ЛистExcel.Name = "Приложение 01" Или ЛистExcel.Name = "Приложение 04" Тогда
		// Формат ячеек таблицы
		Для Счетчик = 0 По КоличествоОпераций - 1 Цикл
			ЛистExcel.Cells(19 + Счетчик, 1).NumberFormat = ФорматДата; // ДатаВыписки 
			ЛистExcel.Cells(19 + Счетчик, 2).NumberFormat = ФорматСтрока; // Номер СФ
			ЛистExcel.Cells(19 + Счетчик, 3).NumberFormat = ФорматСтрока; // Серия СФ
			ЛистExcel.Cells(19 + Счетчик, 4).NumberFormat = ФорматСтрока; // КодПоставки
			ЛистExcel.Cells(19 + Счетчик, 5).NumberFormat = ФорматСтрока; // Наименование
			ЛистExcel.Cells(19 + Счетчик, 6).NumberFormat = ФорматСтрока; // ИНН
			ЛистExcel.Cells(19 + Счетчик, 7).NumberFormat = ФорматСтрока; // КодСтраны
			ЛистExcel.Cells(19 + Счетчик, 8).NumberFormat = ФорматДата; // ДатаПоставки
			ЛистExcel.Cells(19 + Счетчик, 12).NumberFormat = ФорматСтрока; // Корр Номер СФ
			ЛистExcel.Cells(19 + Счетчик, 13).NumberFormat = ФорматСтрока; // Корр Серия СФ			
		КонецЦикла;
		
	ИначеЕсли ЛистExcel.Name = "Приложение 02" Или ЛистExcel.Name = "Приложение 05" Тогда
		// Формат ячеек таблицы
		Для Счетчик = 0 По КоличествоОпераций - 1 Цикл
			ЛистExcel.Cells(11 + Счетчик, 1).NumberFormat = ФорматСтрока; // Номер СФ
			ЛистExcel.Cells(11 + Счетчик, 2).NumberFormat = ФорматСтрока; // Серия СФ			
			ЛистExcel.Cells(11 + Счетчик, 3).NumberFormat = ФорматСтрока; // Наименование
			ЛистExcel.Cells(11 + Счетчик, 4).NumberFormat = ФорматСтрока; // ИНН
			ЛистExcel.Cells(11 + Счетчик, 5).NumberFormat = ФорматСтрока; // Код налог органа
			ЛистExcel.Cells(11 + Счетчик, 6).NumberFormat = ФорматДата; // ДатаПоставки
			ЛистExcel.Cells(11 + Счетчик, 10).NumberFormat = ФорматСтрока; // Корр Номер СФ
			ЛистExcel.Cells(11 + Счетчик, 11).NumberFormat = ФорматСтрока; // Корр Серия СФ						
		КонецЦикла;
		
	ИначеЕсли ЛистExcel.Name = "Приложение 03" Тогда
		// Формат ячеек таблицы
		Для Счетчик = 0 По КоличествоОпераций - 1 Цикл
			ЛистExcel.Cells(12 + Счетчик, 1).NumberFormat = ФорматСтрока; // Наименование
			ЛистExcel.Cells(12 + Счетчик, 2).NumberFormat = ФорматСтрока; // КодСтраны
			ЛистExcel.Cells(12 + Счетчик, 3).NumberFormat = ФорматДата; 	// Дата ГТД
			ЛистExcel.Cells(12 + Счетчик, 4).NumberFormat = ФорматСтрока; // Номер ГТД
			ЛистExcel.Cells(12 + Счетчик, 7).NumberFormat = ФорматДата; 	// Дата Платежный документ
			ЛистExcel.Cells(12 + Счетчик, 8).NumberFormat = ФорматСтрока; // Номер Платежный документ						
		КонецЦикла;
		
	КонецЕсли;	

КонецПроцедуры

// Процедура устанавливает видимость и доступность элементов.
//
&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()
	
	Если ДатаДокумента >= Дата(2022, 01, 01) Тогда
		Элементы.СтраницаРеестрПоставокНаОсновеНалоговогоКонтракта.Видимость = Ложь;
		Элементы.СтраницаРеестрПриобретенныхНаОсновеНалоговогоКонтракта.Видимость = Ложь;
	КонецЕсли;	
		
КонецПроцедуры 

#КонецОбласти

#Область ФормированиеЗаявленияВЭлектронномФормате

&НаКлиенте
Процедура ПродолжитьСохранение(НаправлениеВыгрузки)
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Укажите путь для сохранения файла'");
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ВидДиалога", НаправлениеВыгрузки);
	
	Оповещение = Новый ОписаниеОповещения("ДиалогОткрытияФайлаЗавершение", ЭтотОбъект, СтруктураПараметров);
	ДиалогОткрытияФайла.Показать(Оповещение);

КонецПроцедуры // ПродолжитьСохранение()

&НаКлиенте
Процедура ДиалогОткрытияФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ВидДиалога = "РасширенияРаботыСФайламиЗавершение" Тогда
		Если ВыбранныеФайлы <> Неопределено И ВыбранныеФайлы.Количество() > 0 Тогда
			ФормированиеФайла(ВыбранныеФайлы[0], ДополнительныеПараметры);
		КонецЕсли;
	
	Иначе	      		
		Если ВыбранныеФайлы <> Неопределено И ВыбранныеФайлы.Количество() > 0 Тогда
			Попытка
				Ошибки = Неопределено;
				
				Если ДополнительныеПараметры.ВидДиалога = "СохранитьВЭлектроннойФормеЛК" Тогда
					СтруктураДанных = ФормированиеФайлаXML_ЛК(ДополнительныеПараметры, Ошибки);
					
					Если СтруктураДанных = Неопределено Тогда
						Возврат;	
					КонецЕсли;	
					
				Иначе	
					СтруктураДанных = ФормированиеФайлаXML(ДополнительныеПараметры, Ошибки);
				КонецЕсли;
				
			Исключение
				ТекстСообщения = НСтр("ru='Не удалось завершить формирование файла.
					|Техническая информация об ошибке: %1'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
				
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
				Возврат;
			КонецПопытки;
			
			Если НЕ Ошибки = Неопределено Тогда 
				ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);	
				Возврат;
			КонецЕсли;		
			
			// Формирование имени файла.
			КаталогФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ВыбранныеФайлы[0]);
			ИмяФайла = СтруктураДанных.ИмяФайла;
			ПолноеИмяФайла = КаталогФайла + ИмяФайла;
			
			// Сохранение файла.
			Двоичное = ПолучитьИзВременногоХранилища(СтруктураДанных.АдресВременногоХранилища);
			Двоичное.Записать(ПолноеИмяФайла);	
			
			ТекстОповещения = НСтр("ru = 'Файл успешно сформирован'");
			ТекстПояснения = ИмяФайла;
			ПоказатьОповещениеПользователя(
				ТекстОповещения, 
				Новый ОписаниеОповещения("ОткрытьПроводник", ЭтотОбъект, Новый Структура("ПолноеИмяФайла", ПолноеИмяФайла)), 
				ТекстПояснения, 
				БиблиотекаКартинок.Информация32);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция ФормированиеФайлаXML(ДополнительныеПараметры, Ошибки)
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ИмяФайла", "");
	СтруктураДанных.Вставить("АдресВременногоХранилища", "");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Дата КАК Дата,
		|	ТаблицаДокумента.Номер КАК Номер,
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ТаблицаДокумента.Организация.ИНН КАК ОрганизацияИНН,
		|	ТаблицаДокумента.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
		|	ТаблицаДокумента.Организация.ГНС.Код КАК ГНСКод,
		|	ТаблицаДокумента.Организация.ГНС.Наименование КАК ГНСНаименование,
		|	ТаблицаДокумента.Организация.КодПоОКПО КАК ОрганизацияКодПоОКПО,
		|	ТаблицаДокумента.ОтчетОсновной.(
		|		Строка КАК Строка,
		|		Сумма КАК Сумма
		|	) КАК ОтчетОсновной,
		|	ТаблицаДокумента.ОтчетРеестрПоставок.(
		|		ДатаВыписки,
		|		НомерСФ,
		|		СерияСФ,
		|		КодПоставки,
		|		КонтрагентНаименование,
		|		ИННКонтрагента,
		|		КодГНС,
		|		ДатаПоставки,
		|		СтоимостьБезНДС,
		|		СуммаНДС,
		|		СуммаНСП,
		|		КорСерияСФ,
		|		КорНомерСФ
		|	) КАК ОтчетРеестрПоставок,
		|	ТаблицаДокумента.ОтчетРеестрПриобретенныхМатРесурсов.(
		|		НомерСФ,
		|		СерияСФ,
		|		КонтрагентНаименование,
		|		ИННКонтрагента,
		|		КодГНС,
		|		ДатаПоставки,
		|		СтоимостьБезНДС,
		|		СуммаНДС,
		|		СуммаПодлежащаяКЗачетуНДС,
		|		КорСерияСФ,
		|		КорНомерСФ
		|	) КАК ОтчетРеестрПриобретенныхМатРесурсов,
		|	ТаблицаДокумента.ОтчетРеестрВвезенныхМатериальныхРесурсовВКР.(
		|		ВЫБОР
		|			КОГДА Контрагент.НаименованиеПолное <> """"
		|				ТОГДА Контрагент.НаименованиеПолное
		|			ИНАЧЕ Контрагент.Наименование
		|		КОНЕЦ КАК КонтрагентНаименование,
		|		КодСтраныКонтрагента,
		|		ГТДДата,
		|		ГТДНомер,
		|		ГТДСуммаБезНДС,
		|		ГТДСуммаНДС,
		|		ПДДата,
		|		ПДНомер,
		|		ПДСуммаНДС,
		|		НДСЗачет
		|	) КАК ОтчетРеестрВвезенных,
		|	ТаблицаДокумента.ОтчетРеестрПоставокНаОсновеНалоговогоКонтракта.(
		|		ДатаВыписки,
		|		НомерСФ,
		|		СерияСФ,
		|		КодПоставки,
		|		КонтрагентНаименование,
		|		ИННКонтрагента,
		|		КодГНС,
		|		ДатаПоставки,
		|		СтоимостьБезНДС,
		|		СуммаНДС,
		|		СуммаНСП,
		|		КорСерияСФ,
		|		КорНомерСФ
		|	) КАК ОтчетРеестрПоставокНаОсновеНалоговогоКонтракта,
		|	ТаблицаДокумента.ОтчетРеестрПриобретенныхНаОсновеНалоговогоКонтракта.(
		|		НомерСФ,
		|		СерияСФ,
		|		КонтрагентНаименование,
		|		ИННКонтрагента,
		|		КодГНС,
		|		ДатаПоставки,
		|		СтоимостьБезНДС,
		|		СуммаНДС,
		|		СуммаПодлежащаяКЗачетуНДС,
		|		КорСерияСФ,
		|		КорНомерСФ
		|	) КАК ОтчетРеестрПриобретенныхНаОсновеНалоговогоКонтракта
		|ИЗ
		|	Документ.ОтчетПоНДС КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось сформировать имя файла.'");
	КонецЕсли;	
	
	ВыборкаШапка = РезультатЗапроса.Выбрать();
	ВыборкаШапка.Следующий();
		                           
	// Имя файла обмена должно иметь следующий вид:
	// P_UC_TP_GGGGMMDD_N, где:
	// P 	- префикс, принимающий значение CU_DECL;
	// UC 	- код налогового органа по месту налоговой регистрации облагаемого субъекта;
	// TP 	- ИНН облагаемого субъекта;
	// GGGG - год формирования передаваемого файла, MM - месяц, DD - день;
	// ID 	- идентификационный номер файла. (Длина - от 1 до 36 знаков. Идентификационный номер файла должен обеспечивать уникальность файла).
	// Расширение имени файла - xml. Расширение имени файла может указываться как строчными, так и прописными буквами.
	UC = ВыборкаШапка.ГНСКод;
	TP = ВыборкаШапка.ОрганизацияИНН;
	GGGGMMDD = Формат(ВыборкаШапка.Дата, "ДФ=yyyyMMdd");
	ID = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаШапка.Номер, Истина, Истина);

	Если НЕ ЗначениеЗаполнено(UC) Тогда 
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'ГНС организации'"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "Объект.Организация");
		ВызватьИсключение НСтр("ru = 'Не удалось сформировать имя файла.'");
	КонецЕсли;	
	
	ШаблонИмениФайла = СтрШаблон("%1_%2_%3_%4_%5", "CU_DECL", UC, TP, GGGGMMDD, ID);
	ИмяФайла = ШаблонИмениФайла + ".xml";
	
	// Файл обмена.
 	// report_main_form.
	ОбъектXDTO = СоздатьОбъектXDTO("report");

	ОбъектXDTO.id = "sti_062";
	 
	ОбъектXDTO.data.Добавить(data("102", ВыборкаШапка.ОрганизацияИНН));
	ОбъектXDTO.data.Добавить(data("103", ВыборкаШапка.ОрганизацияНаименованиеПолное));
	
	ОбъектXDTO.data.Добавить(data("104_1", ВыборкаШапка.ГНСКод));
	ОбъектXDTO.data.Добавить(data("104_2", ВыборкаШапка.ГНСНаименование));
	ОбъектXDTO.data.Добавить(data("107", ВыборкаШапка.ОрганизацияКодПоОКПО));
	
	СведенияОбОрганизации = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСведенияОбОрганизации(ВыборкаШапка.Организация, КонецМесяца(ВыборкаШапка.Дата));
	
	ОбъектXDTO.data.Добавить(data("112", СведенияОбОрганизации.Индекс));
	
	Значение113 = ?(ЗначениеЗаполнено(СведенияОбОрганизации.Регион), СведенияОбОрганизации.Регион, "")
		+ ?(ЗначениеЗаполнено(СведенияОбОрганизации.Район), " " + СведенияОбОрганизации.Район, "")
		+ ?(ЗначениеЗаполнено(СведенияОбОрганизации.Город), " " + СведенияОбОрганизации.Город, "")
		+ ?(ЗначениеЗаполнено(СведенияОбОрганизации.НаселенныйПункт), " " + СведенияОбОрганизации.НаселенныйПункт, "");
	
	ОбъектXDTO.data.Добавить(data("113", Значение113));
	
	Значение114 = ?(ЗначениеЗаполнено(СведенияОбОрганизации.Улица), СведенияОбОрганизации.Улица, "")
		+ ?(ЗначениеЗаполнено(СведенияОбОрганизации.Дом), " ,д." + СведенияОбОрганизации.Дом, "")
		+ ?(ЗначениеЗаполнено(СведенияОбОрганизации.Квартира), " кв." + СведенияОбОрганизации.Квартира, "");
		
	ОбъектXDTO.data.Добавить(data("114", Значение114));
	ОбъектXDTO.data.Добавить(data("115", СведенияОбОрганизации.Тел));
	ОбъектXDTO.data.Добавить(data("116", СведенияОбОрганизации.Email));
	
	ОбъектXDTO.data.Добавить(data("201", НачалоМесяца(ВыборкаШапка.Дата)));
	ОбъектXDTO.data.Добавить(data("202", КонецМесяца(ВыборкаШапка.Дата)));
	
	ВыборкаОтчетОсновной = ВыборкаШапка.ОтчетОсновной.Выбрать();
	
	Пока ВыборкаОтчетОсновной.Следующий() Цикл
		Если ВыборкаОтчетОсновной.Строка = "050" Тогда
			ОбъектXDTO.data.Добавить(data("050", ВыборкаОтчетОсновной.Сумма));		
		ИначеЕсли ВыборкаОтчетОсновной.Строка = "051" Тогда
			ОбъектXDTO.data.Добавить(data("051", ВыборкаОтчетОсновной.Сумма));
		ИначеЕсли ВыборкаОтчетОсновной.Строка = "052" Тогда
			ОбъектXDTO.data.Добавить(data("052", ВыборкаОтчетОсновной.Сумма));
		ИначеЕсли ВыборкаОтчетОсновной.Строка = "053" Тогда
			ОбъектXDTO.data.Добавить(data("053", ВыборкаОтчетОсновной.Сумма));
		ИначеЕсли ВыборкаОтчетОсновной.Строка = "054" Тогда
			ОбъектXDTO.data.Добавить(data("054", ВыборкаОтчетОсновной.Сумма));
		ИначеЕсли ВыборкаОтчетОсновной.Строка = "055" Тогда
			ОбъектXDTO.data.Добавить(data("055", ВыборкаОтчетОсновной.Сумма));
		ИначеЕсли ВыборкаОтчетОсновной.Строка = "056" Тогда
			ОбъектXDTO.data.Добавить(data("056", ВыборкаОтчетОсновной.Сумма));
		ИначеЕсли ВыборкаОтчетОсновной.Строка = "057" Тогда
			ОбъектXDTO.data.Добавить(data("057", ВыборкаОтчетОсновной.Сумма));
		ИначеЕсли ВыборкаОтчетОсновной.Строка = "058" Тогда
			ОбъектXDTO.data.Добавить(data("058", ВыборкаОтчетОсновной.Сумма));
		ИначеЕсли ВыборкаОтчетОсновной.Строка = "059" Тогда
			ОбъектXDTO.data.Добавить(data("059", ВыборкаОтчетОсновной.Сумма));
		ИначеЕсли ВыборкаОтчетОсновной.Строка = "060" Тогда
			ОбъектXDTO.data.Добавить(data("060", ВыборкаОтчетОсновной.Сумма));
		ИначеЕсли ВыборкаОтчетОсновной.Строка = "061" Тогда
			ОбъектXDTO.data.Добавить(data("061", ВыборкаОтчетОсновной.Сумма));
		ИначеЕсли ВыборкаОтчетОсновной.Строка = "062" Тогда
			ОбъектXDTO.data.Добавить(data("062", ВыборкаОтчетОсновной.Сумма));
		ИначеЕсли ВыборкаОтчетОсновной.Строка = "063" Тогда
			ОбъектXDTO.data.Добавить(data("063", ВыборкаОтчетОсновной.Сумма));
		ИначеЕсли ВыборкаОтчетОсновной.Строка = "064" Тогда
			ОбъектXDTO.data.Добавить(data("064", ВыборкаОтчетОсновной.Сумма));
		ИначеЕсли ВыборкаОтчетОсновной.Строка = "065" Тогда
			ОбъектXDTO.data.Добавить(data("065", ВыборкаОтчетОсновной.Сумма));
		ИначеЕсли ВыборкаОтчетОсновной.Строка = "066" Тогда
			ОбъектXDTO.data.Добавить(data("066", ВыборкаОтчетОсновной.Сумма));
		ИначеЕсли ВыборкаОтчетОсновной.Строка = "067" Тогда
			ОбъектXDTO.data.Добавить(data("067", ВыборкаОтчетОсновной.Сумма));
		ИначеЕсли ВыборкаОтчетОсновной.Строка = "068" Тогда
			ОбъектXDTO.data.Добавить(data("068", ВыборкаОтчетОсновной.Сумма));
		ИначеЕсли ВыборкаОтчетОсновной.Строка = "069" Тогда
			ОбъектXDTO.data.Добавить(data("069", ВыборкаОтчетОсновной.Сумма));
		ИначеЕсли ВыборкаОтчетОсновной.Строка = "070" Тогда
			ОбъектXDTO.data.Добавить(data("070", ВыборкаОтчетОсновной.Сумма));
		ИначеЕсли ВыборкаОтчетОсновной.Строка = "071" Тогда
			ОбъектXDTO.data.Добавить(data("071", ВыборкаОтчетОсновной.Сумма));
		ИначеЕсли ВыборкаОтчетОсновной.Строка = "072" Тогда
			ОбъектXDTO.data.Добавить(data("072", ВыборкаОтчетОсновной.Сумма));
		КонецЕсли;
	КонецЦикла;	
	
	ТаблицаРеестрПоставок 					= ВыборкаШапка.ОтчетРеестрПоставок.Выгрузить();
	ТаблицаРеестрПриобретенныхМатРесурсов 	= ВыборкаШапка.ОтчетРеестрПриобретенныхМатРесурсов.Выгрузить();
	ТаблицаРеестрВвезенных 					= ВыборкаШапка.ОтчетРеестрВвезенных.Выгрузить();
	ТаблицаРеестрПоставокНаОсновеНК 		= ВыборкаШапка.ОтчетРеестрПоставокНаОсновеНалоговогоКонтракта.Выгрузить();
	ТаблицаРеестрПриобретенныхНаОсновеНК 	= ВыборкаШапка.ОтчетРеестрПриобретенныхНаОсновеНалоговогоКонтракта.Выгрузить();
	
	ОбъектXDTO.data.Добавить(data("sti_062_001", ?(ТаблицаРеестрПоставок.Количество() = 0, 0, 1)));
	ОбъектXDTO.data.Добавить(data("sti_062_002", ?(ТаблицаРеестрПриобретенныхМатРесурсов.Количество() = 0, 0, 1)));
	ОбъектXDTO.data.Добавить(data("sti_062_003", ?(ТаблицаРеестрВвезенных.Количество() = 0, 0, 1)));
	ОбъектXDTO.data.Добавить(data("sti_062_004", ?(ТаблицаРеестрПоставокНаОсновеНК.Количество() = 0, 0, 1)));
	ОбъектXDTO.data.Добавить(data("sti_062_005", ?(ТаблицаРеестрПриобретенныхНаОсновеНК.Количество() = 0, 0, 1)));
	
	// Заполнение приложений.
	ОбъектXDTO.attachment.Добавить(attachment(1, ТаблицаРеестрПоставок));
	ОбъектXDTO.attachment.Добавить(attachment(2, ТаблицаРеестрПриобретенныхМатРесурсов));
	ОбъектXDTO.attachment.Добавить(attachment(3, ТаблицаРеестрВвезенных));
	ОбъектXDTO.attachment.Добавить(attachment(4, ТаблицаРеестрПоставокНаОсновеНК));
	ОбъектXDTO.attachment.Добавить(attachment(5, ТаблицаРеестрПриобретенныхНаОсновеНК));
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьXML = Новый ЗаписьXML;
	ПараметрыЗаписиXML = Новый ПараметрыЗаписиXML("UTF-8", "1.0", Ложь);	
	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, ПараметрыЗаписиXML);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
	ЗаписьXML.Закрыть();
	
	Двоичное = Новый ДвоичныеДанные(ИмяВременногоФайла);
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(Двоичное, УникальныйИдентификатор);
	
	// Удаление временного файла
	ФайловаяСистема.УдалитьВременныйФайл(ИмяВременногоФайла);
	
	СтруктураДанных.ИмяФайла = ИмяФайла;
	СтруктураДанных.АдресВременногоХранилища = АдресВременногоХранилища;
	
	Возврат СтруктураДанных;
КонецФункции // ФормированиеФайла()

&НаСервере
Функция СоздатьОбъектXDTO(ТипОбъекта, ЛК = Ложь)
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЛК Тогда
		Возврат ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.sample-package1.org", ТипОбъекта));
	Иначе	
		Возврат ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.sample-package.org", ТипОбъекта));
	КонецЕсли;
	
КонецФункции // СоздатьОбъектXDTO()

&НаСервере
Функция data(Номер, Значение, НомерПриложения = Неопределено, ТаблицаДанных = Неопределено)
	// Создание объекта.
	ОбъектXDTO = СоздатьОбъектXDTO("data");
	
	ОбъектXDTO.id = Номер;

	ОбъектXDTO.value = Значение;
	
	Если ТаблицаДанных <> Неопределено Тогда
		
		Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
			ОбъектXDTO.record.Добавить(record(СтрокаДанных, НомерПриложения));	
		КонецЦикла;	
		
	КонецЕсли;	
	
	Возврат ОбъектXDTO;
КонецФункции 

&НаСервере
Функция attachment(НомерПриложения, ТаблицаДанных)
	// Создание объекта.
	ОбъектXDTO = СоздатьОбъектXDTO("attachment");
	
	ОбъектXDTO.id = НомерПриложения;

	ОбъектXDTO.data.Добавить(data(203, ТаблицаДанных.Количество(), НомерПриложения, ТаблицаДанных));
	
	Возврат ОбъектXDTO;
КонецФункции 

&НаСервере
Функция record(СтрокаДанных, НомерПриложения)
	// Создание объекта.
	ОбъектXDTO = СоздатьОбъектXDTO("record");
	
	Если НомерПриложения = 1 Тогда
		ОбъектXDTO.column.Добавить(column(1, СтрокаДанных.ДатаВыписки));
		ОбъектXDTO.column.Добавить(column(2, СтрокаДанных.НомерСФ));
		ОбъектXDTO.column.Добавить(column(3, СтрокаДанных.СерияСФ));
		ОбъектXDTO.column.Добавить(column(4, СтрокаДанных.КодПоставки));
		ОбъектXDTO.column.Добавить(column(5, СтрокаДанных.КонтрагентНаименование));
		ОбъектXDTO.column.Добавить(column(6, СтрокаДанных.ИННКонтрагента));
		ОбъектXDTO.column.Добавить(column(7, СтрокаДанных.КодГНС));
		ОбъектXDTO.column.Добавить(column(8, СтрокаДанных.ДатаПоставки));
		ОбъектXDTO.column.Добавить(column(9, СтрокаДанных.СтоимостьБезНДС));
		ОбъектXDTO.column.Добавить(column(10, СтрокаДанных.СуммаНДС));
		ОбъектXDTO.column.Добавить(column(11, СтрокаДанных.СуммаНСП));
		ОбъектXDTO.column.Добавить(column(12, СтрокаДанных.КорНомерСФ));
		ОбъектXDTO.column.Добавить(column(13, СтрокаДанных.КорСерияСФ));
		
	ИначеЕсли НомерПриложения = 2 Тогда
		ОбъектXDTO.column.Добавить(column(1, СтрокаДанных.НомерСФ));
		ОбъектXDTO.column.Добавить(column(2, СтрокаДанных.СерияСФ));
		ОбъектXDTO.column.Добавить(column(3, СтрокаДанных.КонтрагентНаименование));
		ОбъектXDTO.column.Добавить(column(4, СтрокаДанных.ИННКонтрагента));
		ОбъектXDTO.column.Добавить(column(5, СтрокаДанных.КодГНС));
		ОбъектXDTO.column.Добавить(column(6, СтрокаДанных.ДатаПоставки));
		ОбъектXDTO.column.Добавить(column(7, СтрокаДанных.СтоимостьБезНДС));
		ОбъектXDTO.column.Добавить(column(8, СтрокаДанных.СуммаНДС));
		ОбъектXDTO.column.Добавить(column(9, СтрокаДанных.СуммаПодлежащаяКЗачетуНДС));
		ОбъектXDTO.column.Добавить(column(10, СтрокаДанных.КорНомерСФ));
		ОбъектXDTO.column.Добавить(column(11, СтрокаДанных.КорСерияСФ));
		
	ИначеЕсли НомерПриложения = 3 Тогда
		ОбъектXDTO.column.Добавить(column(1, СтрокаДанных.КонтрагентНаименование));
		ОбъектXDTO.column.Добавить(column(2, СтрокаДанных.КодСтраныКонтрагента));
		ОбъектXDTO.column.Добавить(column(3, СтрокаДанных.ГТДДата));
		ОбъектXDTO.column.Добавить(column(4, СтрокаДанных.ГТДНомер));
		ОбъектXDTO.column.Добавить(column(5, СтрокаДанных.ГТДСуммаБезНДС));
		ОбъектXDTO.column.Добавить(column(6, СтрокаДанных.ГТДСуммаНДС));
		ОбъектXDTO.column.Добавить(column(7, СтрокаДанных.ПДДата));
		ОбъектXDTO.column.Добавить(column(8, СтрокаДанных.ПДНомер));
		ОбъектXDTO.column.Добавить(column(9, СтрокаДанных.ПДСуммаНДС));
		ОбъектXDTO.column.Добавить(column(10, СтрокаДанных.НДСЗачет));
		
	ИначеЕсли НомерПриложения = 4 Тогда
		ОбъектXDTO.column.Добавить(column(1, СтрокаДанных.ДатаВыписки));
		ОбъектXDTO.column.Добавить(column(2, СтрокаДанных.НомерСФ));
		ОбъектXDTO.column.Добавить(column(3, СтрокаДанных.СерияСФ));
		ОбъектXDTO.column.Добавить(column(4, СтрокаДанных.КодПоставки));
		ОбъектXDTO.column.Добавить(column(5, СтрокаДанных.КонтрагентНаименование));
		ОбъектXDTO.column.Добавить(column(6, СтрокаДанных.ИННКонтрагента));
		ОбъектXDTO.column.Добавить(column(7, СтрокаДанных.КодГНС));
		ОбъектXDTO.column.Добавить(column(8, СтрокаДанных.ДатаПоставки));
		ОбъектXDTO.column.Добавить(column(9, СтрокаДанных.СтоимостьБезНДС));
		ОбъектXDTO.column.Добавить(column(10, СтрокаДанных.СуммаНДС));
		ОбъектXDTO.column.Добавить(column(11, СтрокаДанных.СуммаНСП));
		ОбъектXDTO.column.Добавить(column(12, СтрокаДанных.КорНомерСФ));
		ОбъектXDTO.column.Добавить(column(13, СтрокаДанных.КорСерияСФ));
		
	ИначеЕсли НомерПриложения = 5 Тогда
		ОбъектXDTO.column.Добавить(column(1, СтрокаДанных.НомерСФ));
		ОбъектXDTO.column.Добавить(column(2, СтрокаДанных.СерияСФ));
		ОбъектXDTO.column.Добавить(column(3, СтрокаДанных.КонтрагентНаименование));
		ОбъектXDTO.column.Добавить(column(4, СтрокаДанных.ИННКонтрагента));
		ОбъектXDTO.column.Добавить(column(5, СтрокаДанных.КодГНС));
		ОбъектXDTO.column.Добавить(column(6, СтрокаДанных.ДатаПоставки));
		ОбъектXDTO.column.Добавить(column(7, СтрокаДанных.СтоимостьБезНДС));
		ОбъектXDTO.column.Добавить(column(8, СтрокаДанных.СуммаНДС));
		ОбъектXDTO.column.Добавить(column(9, СтрокаДанных.СуммаПодлежащаяКЗачетуНДС));
		ОбъектXDTO.column.Добавить(column(10, СтрокаДанных.КорНомерСФ));
		ОбъектXDTO.column.Добавить(column(11, СтрокаДанных.КорСерияСФ));
	КонецЕсли;
	
	Возврат ОбъектXDTO;
КонецФункции

&НаСервере
Функция column(Номер, Значение)
	// Создание объекта.
	ОбъектXDTO = СоздатьОбъектXDTO("column");
	
	ОбъектXDTO.id = Номер;

	ОбъектXDTO.value = Значение;	
	
	Возврат ОбъектXDTO;
КонецФункции

// Процедура создания XML файла
//
&НаСервере
Функция ФормированиеФайлаXML_ЛК(ДополнительныеПараметры, Ошибки)
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ИмяФайла", "");
	СтруктураДанных.Вставить("АдресВременногоХранилища", "");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Дата КАК Дата,
		|	ТаблицаДокумента.Номер КАК Номер,
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ТаблицаДокумента.Организация.ИНН КАК ОрганизацияИНН,
		|	ТаблицаДокумента.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
		|	ТаблицаДокумента.Организация.ГНС.Код КАК ГНСКод,
		|	ТаблицаДокумента.Организация.ГНС.Наименование КАК ГНСНаименование,
		|	ТаблицаДокумента.Организация.КодПоОКПО КАК ОрганизацияКодПоОКПО,
		|	ТаблицаДокумента.ОтчетОсновной.(
		|		Строка КАК Строка,
		|		Сумма КАК Сумма
		|	) КАК ОтчетОсновной,
		|	ТаблицаДокумента.ОтчетРеестрПоставок.(
		|		НомерСтроки,
		|		ДатаВыписки,
		|		НомерСФ,
		|		СерияСФ,
		|		КодПоставки,
		|		КонтрагентНаименование,
		|		ИННКонтрагента,
		|		КодГНС,
		|		ДатаПоставки,
		|		СтоимостьБезНДС,
		|		СуммаНДС,
		|		СуммаНСП,
		|		КорСерияСФ,
		|		КорНомерСФ
		|	) КАК ОтчетРеестрПоставок,
		|	ТаблицаДокумента.ОтчетРеестрПриобретенныхМатРесурсов.(
		|		НомерСтроки,
		|		НомерСФ,
		|		СерияСФ,
		|		КонтрагентНаименование,
		|		ИННКонтрагента,
		|		КодГНС,
		|		ДатаПоставки,
		|		СтоимостьБезНДС,
		|		СуммаНДС,
		|		СуммаПодлежащаяКЗачетуНДС,
		|		КорСерияСФ,
		|		КорНомерСФ
		|	) КАК ОтчетРеестрПриобретенныхМатРесурсов,
		|	ТаблицаДокумента.ОтчетРеестрВвезенныхМатериальныхРесурсовВКР.(
		|		НомерСтроки,
		|		ВЫБОР
		|			КОГДА Контрагент.НаименованиеПолное <> """"
		|				ТОГДА Контрагент.НаименованиеПолное
		|			ИНАЧЕ Контрагент.Наименование
		|		КОНЕЦ КАК КонтрагентНаименование,
		|		КодСтраныКонтрагента,
		|		КодСтраныКонтрагента,
		|		ГТДДата,
		|		ГТДНомер,
		|		ГТДСуммаБезНДС,
		|		ГТДСуммаНДС,
		|		ПДДата,
		|		ПДНомер,
		|		ПДСуммаНДС,
		|		НДСЗачет,
		|		КонтрагентСтранаРезидентстваЕАЭС
		|	) КАК ОтчетРеестрВвезенных,
		|	ТаблицаДокумента.ОтчетРеестрПоставокНаОсновеНалоговогоКонтракта.(
		|		НомерСтроки,
		|		ДатаВыписки,
		|		НомерСФ,
		|		СерияСФ,
		|		КодПоставки,
		|		КонтрагентНаименование,
		|		ИННКонтрагента,
		|		КодГНС,
		|		ДатаПоставки,
		|		СтоимостьБезНДС,
		|		СуммаНДС,
		|		СуммаНСП,
		|		КорСерияСФ,
		|		КорНомерСФ
		|	) КАК ОтчетРеестрПоставокНаОсновеНалоговогоКонтракта,
		|	ТаблицаДокумента.ОтчетРеестрПриобретенныхНаОсновеНалоговогоКонтракта.(
		|		НомерСтроки,
		|		НомерСФ,
		|		СерияСФ,
		|		КонтрагентНаименование,
		|		ИННКонтрагента,
		|		КодГНС,
		|		ДатаПоставки,
		|		СтоимостьБезНДС,
		|		СуммаНДС,
		|		СуммаПодлежащаяКЗачетуНДС,
		|		КорСерияСФ,
		|		КорНомерСФ
		|	) КАК ОтчетРеестрПриобретенныхНаОсновеНалоговогоКонтракта
		|ИЗ
		|	Документ.ОтчетПоНДС КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ВызватьИсключение НСтр("ru = 'Нет данных в отчете.'");
	КонецЕсли;	
	
	ВыборкаШапка = РезультатЗапроса.Выбрать();
	ВыборкаШапка.Следующий();
	
	Дата = Формат(ВыборкаШапка.Дата, "ДФ=yyyy-MM-dd");

	ШаблонИмениФайла = СтрШаблон(НСтр("ru = 'Form62_%1.'"), Дата);
	ИмяФайла = ШаблонИмениФайла + ".xml";
	
	// Массив для описания ошибок и если ошибки есть то отмена создания XML файла.
	МассивОшибок = Новый Массив();
	
	// FORM
	ОбъектXDTO = СоздатьОбъектXDTO("FORM", Истина);

	ОбъектXDTO.IDFORM = "62_3";
	ОбъектXDTO.NOMDOC = "1";
	ОбъектXDTO.VERSFORM = "1.01";
	ОбъектXDTO.DATEREPORT = Формат(ТекущаяДатаСеанса(), "ДЛФ=D");
	
	// PART1 - НАЧАЛО
	ОбъектXDTOPART1 = СоздатьОбъектXDTO("PART1", Истина);
	
	ОбъектXDTOTIN = СоздатьОбъектXDTO("TIN", Истина);
	ОбъектXDTOTIN.Text = ВыборкаШапка.ОрганизацияИНН;
	
	Если ВыборкаШапка.ОрганизацияИНН = "" Тогда
		МассивОшибок.Добавить(НСтр("ru = 'У организации не указан ИНН.'"));
	КонецЕсли;
	
	ОбъектXDTORAYON = СоздатьОбъектXDTO("RAYON", Истина);
	ОбъектXDTORAYON.Text = ВыборкаШапка.ГНСКод;
	
	Если ВыборкаШапка.ГНСКод = "" Тогда
		МассивОшибок.Добавить(НСтр("ru = 'У организации не указан ГНС или у выбранного ГНС не указан код.'"));
	КонецЕсли;
	
	Если Объект.ВидОтчета = Перечисления.ВидыОтчетаПоНалогам.Первоначальный Тогда 
		FTYPE = 0;
	ИначеЕсли Объект.ВидОтчета = Перечисления.ВидыОтчетаПоНалогам.Уточненный Тогда 
		FTYPE = 1;
	ИначеЕсли Объект.ВидОтчета = Перечисления.ВидыОтчетаПоНалогам.Ликвидационный Тогда 
		FTYPE = 3;
	Иначе
		FTYPE = 0;
		МассивОшибок.Добавить(НСтр("ru = 'Не указан вид отчета.'"));
	КонецЕсли;
	
	ОбъектXDTOFTYPE = СоздатьОбъектXDTO("FTYPE", Истина);
	ОбъектXDTOFTYPE.Text = FTYPE;
	
	ОбъектXDTOSTARTDATE = СоздатьОбъектXDTO("STARTDATE", Истина);
	ОбъектXDTOSTARTDATE.Text = Формат(НачалоМесяца(ВыборкаШапка.Дата), "ДЛФ=D");
	
	ОбъектXDTOENDDATE = СоздатьОбъектXDTO("ENDDATE", Истина);
	ОбъектXDTOENDDATE.Text = Формат(КонецМесяца(ВыборкаШапка.Дата), "ДЛФ=D");
	
	ОбъектXDTOPART1.TIN.Добавить(ОбъектXDTOTIN);
	ОбъектXDTOPART1.RAYON.Добавить(ОбъектXDTORAYON);
	ОбъектXDTOPART1.FTYPE.Добавить(ОбъектXDTOFTYPE);
	ОбъектXDTOPART1.STARTDATE.Добавить(ОбъектXDTOSTARTDATE);
	ОбъектXDTOPART1.ENDDATE.Добавить(ОбъектXDTOENDDATE);
	
	ОбъектXDTO.PART1.Добавить(ОбъектXDTOPART1);
	// PART1 - КОНЕЦ 
	
	// PART2 - НАЧАЛО
	ОбъектXDTOPART2 = СоздатьОбъектXDTO("PART2", Истина);
	
	ТаблицаОсновная 	= ВыборкаШапка.ОтчетОсновной.Выгрузить();
	ТаблицаПриложение1 	= ВыборкаШапка.ОтчетРеестрПоставок.Выгрузить();
	ТаблицаПриложение2 	= ВыборкаШапка.ОтчетРеестрПриобретенныхМатРесурсов.Выгрузить();
	ТаблицаПриложение3 	= ВыборкаШапка.ОтчетРеестрВвезенных.Выгрузить();
	ТаблицаПриложение4 	= ВыборкаШапка.ОтчетРеестрПоставокНаОсновеНалоговогоКонтракта.Выгрузить();
	ТаблицаПриложение5 	= ВыборкаШапка.ОтчетРеестрПриобретенныхНаОсновеНалоговогоКонтракта.Выгрузить();
	
	// Приложение 5 - Реестр приобретенных на основе налогового контракта.
	ТаблицаПриложение5 = ВыборкаШапка.ОтчетРеестрПриобретенныхНаОсновеНалоговогоКонтракта.Выгрузить();
		
	ОбъектXDTOSTI062X0021 = СоздатьОбъектXDTO("STI062X0021", Истина);
	ОбъектXDTOSTI062X0021.Text = ?(ТаблицаПриложение1.Количество() > 0, 1, 0);
	
	ОбъектXDTOSTI062X0022 = СоздатьОбъектXDTO("STI062X0022", Истина);
	ОбъектXDTOSTI062X0022.Text = ?(ТаблицаПриложение2.Количество() > 0, 1, 0);
	
	ОбъектXDTOSTI062X0023 = СоздатьОбъектXDTO("STI062X0023", Истина);
	ОбъектXDTOSTI062X0023.Text = ?(ТаблицаПриложение3.Количество() > 0, 1, 0);
	
	ОбъектXDTOSTI062X0024 = СоздатьОбъектXDTO("STI062X0024", Истина);
	ОбъектXDTOSTI062X0024.Text = ?(ТаблицаПриложение4.Количество() > 0, 1, 0);
	
	ОбъектXDTOSTI062X0025 = СоздатьОбъектXDTO("STI062X0025", Истина);
	ОбъектXDTOSTI062X0025.Text = ?(ТаблицаПриложение5.Количество() > 0, 1, 0);
	
	ОбъектXDTOSTI062X003 = СоздатьОбъектXDTO("STI062X003", Истина);
	ОбъектXDTOSTI062X003.Text = ?(ДанныеУчетнойПолитики.Контракт, 0, 1);
	
	СтрокаТаблицы = ТаблицаОсновная.Найти("050", "Строка");
	ОбъектXDTOSTI062X050 = СоздатьОбъектXDTO("STI062X050", Истина);
	ОбъектXDTOSTI062X050.Text = ?(СтрокаТаблицы = Неопределено, 0, СтрокаТаблицы.Сумма);
	
	СтрокаТаблицы = ТаблицаОсновная.Найти("051", "Строка");
	ОбъектXDTOSTI062X051 = СоздатьОбъектXDTO("STI062X051", Истина);
	ОбъектXDTOSTI062X051.Text = ?(СтрокаТаблицы = Неопределено, 0, СтрокаТаблицы.Сумма);
	
	СтрокаТаблицы = ТаблицаОсновная.Найти("052", "Строка");
	ОбъектXDTOSTI062X052 = СоздатьОбъектXDTO("STI062X052", Истина);
	ОбъектXDTOSTI062X052.Text = ?(СтрокаТаблицы = Неопределено, 0, СтрокаТаблицы.Сумма);
	
	СтрокаТаблицы = ТаблицаОсновная.Найти("053", "Строка");
	ОбъектXDTOSTI062X053 = СоздатьОбъектXDTO("STI062X053", Истина);
	ОбъектXDTOSTI062X053.Text = ?(СтрокаТаблицы = Неопределено, 0, СтрокаТаблицы.Сумма);
	
	СтрокаТаблицы = ТаблицаОсновная.Найти("054", "Строка");
	ОбъектXDTOSTI062X054 = СоздатьОбъектXDTO("STI062X054", Истина);
	ОбъектXDTOSTI062X054.Text = ?(СтрокаТаблицы = Неопределено, 0, СтрокаТаблицы.Сумма);
	
	СтрокаТаблицы = ТаблицаОсновная.Найти("055", "Строка");
	ОбъектXDTOSTI062X055 = СоздатьОбъектXDTO("STI062X055", Истина);
	ОбъектXDTOSTI062X055.Text = ?(СтрокаТаблицы = Неопределено, 0, СтрокаТаблицы.Сумма);
	 
	СтрокаТаблицы = ТаблицаОсновная.Найти("056", "Строка");
	ОбъектXDTOSTI062X056 = СоздатьОбъектXDTO("STI062X056", Истина);
	ОбъектXDTOSTI062X056.Text = ?(СтрокаТаблицы = Неопределено, 0, СтрокаТаблицы.Сумма);
	 
	СтрокаТаблицы = ТаблицаОсновная.Найти("057", "Строка");
	ОбъектXDTOSTI062X057 = СоздатьОбъектXDTO("STI062X057", Истина);
	ОбъектXDTOSTI062X057.Text = ?(СтрокаТаблицы = Неопределено, 0, СтрокаТаблицы.Сумма);
	  
	СтрокаТаблицы = ТаблицаОсновная.Найти("058", "Строка");
	ОбъектXDTOSTI062X058 = СоздатьОбъектXDTO("STI062X058", Истина);
	ОбъектXDTOSTI062X058.Text = ?(СтрокаТаблицы = Неопределено, 0, СтрокаТаблицы.Сумма);
	   
	СтрокаТаблицы = ТаблицаОсновная.Найти("059", "Строка");
	ОбъектXDTOSTI062X059 = СоздатьОбъектXDTO("STI062X059", Истина);
	ОбъектXDTOSTI062X059.Text = ?(СтрокаТаблицы = Неопределено, 0, СтрокаТаблицы.Сумма);
	  
	СтрокаТаблицы = ТаблицаОсновная.Найти("060", "Строка");
	ОбъектXDTOSTI062X060 = СоздатьОбъектXDTO("STI062X060", Истина);
	ОбъектXDTOSTI062X060.Text = ?(СтрокаТаблицы = Неопределено, 0, СтрокаТаблицы.Сумма);
	   
	СтрокаТаблицы = ТаблицаОсновная.Найти("061", "Строка");
	ОбъектXDTOSTI062X061 = СоздатьОбъектXDTO("STI062X061", Истина);
	ОбъектXDTOSTI062X061.Text = ?(СтрокаТаблицы = Неопределено, 0, СтрокаТаблицы.Сумма);
	  
	СтрокаТаблицы = ТаблицаОсновная.Найти("062", "Строка");
	ОбъектXDTOSTI062X062 = СоздатьОбъектXDTO("STI062X062", Истина);
	ОбъектXDTOSTI062X062.Text = ?(СтрокаТаблицы = Неопределено, 0, СтрокаТаблицы.Сумма);
	   
	СтрокаТаблицы = ТаблицаОсновная.Найти("063", "Строка");
	ОбъектXDTOSTI062X063 = СоздатьОбъектXDTO("STI062X063", Истина);
	ОбъектXDTOSTI062X063.Text = ?(СтрокаТаблицы = Неопределено, 0, СтрокаТаблицы.Сумма);
	   
	СтрокаТаблицы = ТаблицаОсновная.Найти("064", "Строка");
	ОбъектXDTOSTI062X064 = СоздатьОбъектXDTO("STI062X064", Истина);
	ОбъектXDTOSTI062X064.Text = ?(СтрокаТаблицы = Неопределено, 0, СтрокаТаблицы.Сумма);
	   
	СтрокаТаблицы = ТаблицаОсновная.Найти("065", "Строка");
	ОбъектXDTOSTI062X065 = СоздатьОбъектXDTO("STI062X065", Истина);
	ОбъектXDTOSTI062X065.Text = ?(СтрокаТаблицы = Неопределено, 0, СтрокаТаблицы.Сумма);
	  
	СтрокаТаблицы = ТаблицаОсновная.Найти("066", "Строка");
	ОбъектXDTOSTI062X066 = СоздатьОбъектXDTO("STI062X066", Истина);
	ОбъектXDTOSTI062X066.Text = ?(СтрокаТаблицы = Неопределено, 0, СтрокаТаблицы.Сумма);
	   
	СтрокаТаблицы = ТаблицаОсновная.Найти("067", "Строка");
	ОбъектXDTOSTI062X067 = СоздатьОбъектXDTO("STI062X067", Истина);
	ОбъектXDTOSTI062X067.Text = ?(СтрокаТаблицы = Неопределено, 0, СтрокаТаблицы.Сумма);
	  
	СтрокаТаблицы = ТаблицаОсновная.Найти("068", "Строка");
	ОбъектXDTOSTI062X068 = СоздатьОбъектXDTO("STI062X068", Истина);
	ОбъектXDTOSTI062X068.Text = ?(СтрокаТаблицы = Неопределено, 0, СтрокаТаблицы.Сумма);
	   
	СтрокаТаблицы = ТаблицаОсновная.Найти("069", "Строка");
	ОбъектXDTOSTI062X069 = СоздатьОбъектXDTO("STI062X069", Истина);
	ОбъектXDTOSTI062X069.Text = ?(СтрокаТаблицы = Неопределено, 0, СтрокаТаблицы.Сумма);
	  
	СтрокаТаблицы = ТаблицаОсновная.Найти("070", "Строка");
	ОбъектXDTOSTI062X070 = СоздатьОбъектXDTO("STI062X070", Истина);
	ОбъектXDTOSTI062X070.Text = ?(СтрокаТаблицы = Неопределено, 0, СтрокаТаблицы.Сумма);
	   
	СтрокаТаблицы = ТаблицаОсновная.Найти("071", "Строка");
	ОбъектXDTOSTI062X071 = СоздатьОбъектXDTO("STI062X071", Истина);
	ОбъектXDTOSTI062X071.Text = ?(СтрокаТаблицы = Неопределено, 0, СтрокаТаблицы.Сумма);
	   
	СтрокаТаблицы = ТаблицаОсновная.Найти("072", "Строка");
	ОбъектXDTOSTI062X072 = СоздатьОбъектXDTO("STI062X072", Истина);
	ОбъектXDTOSTI062X072.Text = ?(СтрокаТаблицы = Неопределено, 0, СтрокаТаблицы.Сумма);
	
	ОбъектXDTOPART2.STI062X0021.Добавить(ОбъектXDTOSTI062X0021);
	ОбъектXDTOPART2.STI062X0022.Добавить(ОбъектXDTOSTI062X0022);
	ОбъектXDTOPART2.STI062X0023.Добавить(ОбъектXDTOSTI062X0023);
	ОбъектXDTOPART2.STI062X0024.Добавить(ОбъектXDTOSTI062X0024);
	ОбъектXDTOPART2.STI062X0025.Добавить(ОбъектXDTOSTI062X0025);
	ОбъектXDTOPART2.STI062X003.Добавить(ОбъектXDTOSTI062X003);
	ОбъектXDTOPART2.STI062X050.Добавить(ОбъектXDTOSTI062X050);
	ОбъектXDTOPART2.STI062X051.Добавить(ОбъектXDTOSTI062X051);
	ОбъектXDTOPART2.STI062X052.Добавить(ОбъектXDTOSTI062X052);
	ОбъектXDTOPART2.STI062X053.Добавить(ОбъектXDTOSTI062X053);
	ОбъектXDTOPART2.STI062X054.Добавить(ОбъектXDTOSTI062X054);
	ОбъектXDTOPART2.STI062X055.Добавить(ОбъектXDTOSTI062X055);
	ОбъектXDTOPART2.STI062X056.Добавить(ОбъектXDTOSTI062X056);
	ОбъектXDTOPART2.STI062X057.Добавить(ОбъектXDTOSTI062X057);
	ОбъектXDTOPART2.STI062X058.Добавить(ОбъектXDTOSTI062X058);
	ОбъектXDTOPART2.STI062X059.Добавить(ОбъектXDTOSTI062X059);
	ОбъектXDTOPART2.STI062X060.Добавить(ОбъектXDTOSTI062X060);
	ОбъектXDTOPART2.STI062X061.Добавить(ОбъектXDTOSTI062X061);
	ОбъектXDTOPART2.STI062X062.Добавить(ОбъектXDTOSTI062X062);
	ОбъектXDTOPART2.STI062X063.Добавить(ОбъектXDTOSTI062X063);
	ОбъектXDTOPART2.STI062X064.Добавить(ОбъектXDTOSTI062X064);
	ОбъектXDTOPART2.STI062X065.Добавить(ОбъектXDTOSTI062X065);
	ОбъектXDTOPART2.STI062X066.Добавить(ОбъектXDTOSTI062X066);
	ОбъектXDTOPART2.STI062X067.Добавить(ОбъектXDTOSTI062X067);
	ОбъектXDTOPART2.STI062X068.Добавить(ОбъектXDTOSTI062X068);
	ОбъектXDTOPART2.STI062X069.Добавить(ОбъектXDTOSTI062X069);
	ОбъектXDTOPART2.STI062X070.Добавить(ОбъектXDTOSTI062X070);
	ОбъектXDTOPART2.STI062X071.Добавить(ОбъектXDTOSTI062X071);
	ОбъектXDTOPART2.STI062X072.Добавить(ОбъектXDTOSTI062X072);
	
	// Приложение 1 - Реестр поставок.
	ОбъектXDTOPART2.STI062DECLARATIONDETAIL1.Добавить(STI062DECLARATIONDETAIL1(ТаблицаПриложение1, МассивОшибок));
	
	// Приложение 2 - Реестр приобретенных материальных ресурсов.
	ОбъектXDTOPART2.STI062DECLARATIONDETAIL2.Добавить(STI062DECLARATIONDETAIL2(ТаблицаПриложение2, МассивОшибок));;		
		
	// Приложение 3 - Реестр ввезенных материальных ресурсов в КР.
	ОбъектXDTOPART2.STI062DECLARATIONDETAIL3.Добавить(STI062DECLARATIONDETAIL3(ТаблицаПриложение3, МассивОшибок));
	
	// Приложение 4 - Реестр поставок на основе налогового контракта.
	ОбъектXDTOPART2.STI062DECLARATIONDETAIL4.Добавить(STI062DECLARATIONDETAIL4(ТаблицаПриложение4, МассивОшибок));
	
	// Приложение 5 - Реестр приобретенных на основе налогового контракта.
	ОбъектXDTOPART2.STI062DECLARATIONDETAIL5.Добавить(STI062DECLARATIONDETAIL5(ТаблицаПриложение5, МассивОшибок));
	
	ОбъектXDTO.PART2.Добавить(ОбъектXDTOPART2);
	// PART2 - КОНЕЦ
	
	// Если есть ошибки файл не создается.
	Если МассивОшибок.Количество() > 0 Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Файл XML не сформирован по следующим причинам:'"));
		
		Для Каждого СтрокаМассива Из МассивОшибок Цикл
			ОбщегоНазначения.СообщитьПользователю(СтрокаМассива);			
		КонецЦикла;	
		
		Возврат Неопределено;
		
	Иначе
		// Создание файла.
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
		ЗаписьXML = Новый ЗаписьXML;
		ПараметрыЗаписиXML = Новый ПараметрыЗаписиXML("UTF-8", "1.0", Ложь);	
		ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, ПараметрыЗаписиXML);
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
		ЗаписьXML.Закрыть();
		
		// Удаление лишнего текста из xml файла
		ТекстДокумент = Новый ТекстовыйДокумент;
		ТекстДокумент.Прочитать(ИмяВременногоФайла);
		ТекстФайла = ТекстДокумент.ПолучитьТекст();
		ТекстФайла = СтрЗаменить(
			ТекстФайла,
			" xmlns=""http://www.sample-package1.org"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""",
			"");
		ТекстДокумент.УстановитьТекст(ТекстФайла);	
		ТекстДокумент.Записать(ИмяВременногоФайла);	
		
		Двоичное = Новый ДвоичныеДанные(ИмяВременногоФайла);
		АдресВременногоХранилища = ПоместитьВоВременноеХранилище(Двоичное, УникальныйИдентификатор);
		
		// Удаление временного файла
		ФайловаяСистема.УдалитьВременныйФайл(ИмяВременногоФайла);
		
		СтруктураДанных.ИмяФайла = ИмяФайла;
		СтруктураДанных.АдресВременногоХранилища = АдресВременногоХранилища;
		
		Возврат СтруктураДанных;
	КонецЕсли;
КонецФункции // ФормированиеФайла()

// Процедура формирования 1 приложения файла XML
//
&НаСервере
Функция STI062DECLARATIONDETAIL1(Таблица, МассивОшибок)
	// Создание объекта.
	ОбъектXDTO = СоздатьОбъектXDTO("STI062DECLARATIONDETAIL1", Истина);
	
	// Итоговые суммы по реестру поставок.		
	Структура = Новый Структура();
	Структура.Вставить("F9Total", 		0);
	Структура.Вставить("F10Total", 		0);
	Структура.Вставить("F11Total", 		0);
	Структура.Вставить("F9Total1", 		0);
	Структура.Вставить("F10Total1", 	0);
	Структура.Вставить("F11Total1", 	0);
	Структура.Вставить("F9Total1_1", 	0);
	Структура.Вставить("F10Total1_1", 	0);
	Структура.Вставить("F11Total1_1", 	0);
	Структура.Вставить("F9Total2", 		0);
	Структура.Вставить("F10Total2", 	0);
	Структура.Вставить("F11Total2", 	0);
	Структура.Вставить("F9Total2eeu", 	0);
	Структура.Вставить("F10Total2eeu", 	0);
	Структура.Вставить("F11Total2eeu", 	0);
	Структура.Вставить("F9Total3", 		0);
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.РассчитатьИтогиОтчетаРеестрПоставок(Структура);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	ОбъектXDTOF203 = СоздатьОбъектXDTO("F203", Истина);
	ОбъектXDTOF203.Text = ?(ДанныеУчетнойПолитики.Контракт, 0, Таблица.Количество());
	
	ОбъектXDTOF9Total = СоздатьОбъектXDTO("F9Total", Истина);
	ОбъектXDTOF9Total.Text = ?(ДанныеУчетнойПолитики.Контракт, 0, Структура.F9Total);
	
	ОбъектXDTOF10Total = СоздатьОбъектXDTO("F10Total", Истина);
	ОбъектXDTOF10Total.Text = ?(ДанныеУчетнойПолитики.Контракт, 0, Структура.F10Total);
	
	ОбъектXDTOF11Total = СоздатьОбъектXDTO("F11Total", Истина);
	ОбъектXDTOF11Total.Text = ?(ДанныеУчетнойПолитики.Контракт, 0, Структура.F11Total);
	
	ОбъектXDTOF9Total1 = СоздатьОбъектXDTO("F9Total1", Истина);
	ОбъектXDTOF9Total1.Text = ?(ДанныеУчетнойПолитики.Контракт, 0, Структура.F9Total1);
	
	ОбъектXDTOF10Total1 = СоздатьОбъектXDTO("F10Total1", Истина);
	ОбъектXDTOF10Total1.Text = ?(ДанныеУчетнойПолитики.Контракт, 0, Структура.F10Total1);
	
	ОбъектXDTOF11Total1 = СоздатьОбъектXDTO("F11Total1", Истина);
	ОбъектXDTOF11Total1.Text = ?(ДанныеУчетнойПолитики.Контракт, 0, Структура.F11Total1);
	
	ОбъектXDTOF9Total1_1 = СоздатьОбъектXDTO("F9Total1_1", Истина);
	ОбъектXDTOF9Total1_1.Text = ?(ДанныеУчетнойПолитики.Контракт, 0, Структура.F9Total1_1);
	
	ОбъектXDTOF10Total1_1 = СоздатьОбъектXDTO("F10Total1_1", Истина);
	ОбъектXDTOF10Total1_1.Text = ?(ДанныеУчетнойПолитики.Контракт, 0, Структура.F10Total1_1);
	
	ОбъектXDTOF11Total1_1 = СоздатьОбъектXDTO("F11Total1_1", Истина);
	ОбъектXDTOF11Total1_1.Text = ?(ДанныеУчетнойПолитики.Контракт, 0, Структура.F11Total1_1);
	
	ОбъектXDTOF9Total2 = СоздатьОбъектXDTO("F9Total2", Истина);
	ОбъектXDTOF9Total2.Text = ?(ДанныеУчетнойПолитики.Контракт, 0, Структура.F9Total2);
	
	ОбъектXDTOF10Total2 = СоздатьОбъектXDTO("F10Total2", Истина);
	ОбъектXDTOF10Total2.Text = ?(ДанныеУчетнойПолитики.Контракт, 0, Структура.F10Total2);
	
	ОбъектXDTOF11Total2 = СоздатьОбъектXDTO("F11Total2", Истина);
	ОбъектXDTOF11Total2.Text = ?(ДанныеУчетнойПолитики.Контракт, 0, Структура.F11Total2);
	
	ОбъектXDTOF9Total2eeu = СоздатьОбъектXDTO("F9Total2eeu", Истина);
	ОбъектXDTOF9Total2eeu.Text = ?(ДанныеУчетнойПолитики.Контракт, 0, Структура.F9Total2eeu);
	
	ОбъектXDTOF10Total2eeu = СоздатьОбъектXDTO("F10Total2eeu", Истина);
	ОбъектXDTOF10Total2eeu.Text = ?(ДанныеУчетнойПолитики.Контракт, 0, Структура.F10Total2eeu);
	
	ОбъектXDTOF11Total2eeu = СоздатьОбъектXDTO("F11Total2eeu", Истина);
	ОбъектXDTOF11Total2eeu.Text = ?(ДанныеУчетнойПолитики.Контракт, 0, Структура.F11Total2eeu);
	
	ОбъектXDTOF9Total3 = СоздатьОбъектXDTO("F9Total3", Истина);
	ОбъектXDTOF9Total3.Text = ?(ДанныеУчетнойПолитики.Контракт, 0, Структура.F9Total3);
	
	ОбъектXDTO.F203.Добавить(ОбъектXDTOF203);
	ОбъектXDTO.F9Total.Добавить(ОбъектXDTOF9Total);
	ОбъектXDTO.F10Total.Добавить(ОбъектXDTOF10Total);
	ОбъектXDTO.F11Total.Добавить(ОбъектXDTOF11Total);
	ОбъектXDTO.F9Total1.Добавить(ОбъектXDTOF9Total1);
	ОбъектXDTO.F10Total1.Добавить(ОбъектXDTOF10Total1);
	ОбъектXDTO.F11Total1.Добавить(ОбъектXDTOF11Total1);
	ОбъектXDTO.F9Total1_1.Добавить(ОбъектXDTOF9Total1_1);
	ОбъектXDTO.F10Total1_1.Добавить(ОбъектXDTOF10Total1_1);
	ОбъектXDTO.F11Total1_1.Добавить(ОбъектXDTOF11Total1_1);
	ОбъектXDTO.F9Total2.Добавить(ОбъектXDTOF9Total2);
	ОбъектXDTO.F10Total2.Добавить(ОбъектXDTOF10Total2);
	ОбъектXDTO.F11Total2.Добавить(ОбъектXDTOF11Total2);
	ОбъектXDTO.F9Total2eeu.Добавить(ОбъектXDTOF9Total2eeu);
	ОбъектXDTO.F10Total2eeu.Добавить(ОбъектXDTOF10Total2eeu);
	ОбъектXDTO.F11Total2eeu.Добавить(ОбъектXDTOF11Total2eeu);
	ОбъектXDTO.F9Total3.Добавить(ОбъектXDTOF9Total3);
	
	// Строки реестра поставок
	Если НЕ ДанныеУчетнойПолитики.Контракт Тогда
		
		Для Каждого СтрокаТаблицы Из Таблица Цикл
			ОбъектXDTO.STI062DECLARATIONDETAIL1LIST.Добавить(STI062DECLARATIONDETAIL1LIST(СтрокаТаблицы, МассивОшибок));
		КонецЦикла;	
	КонецЕсли;	
		
	Возврат ОбъектXDTO;
КонецФункции

// Процедура формирования строк 1 приложения файла XML
//
&НаСервере
Функция STI062DECLARATIONDETAIL1LIST(СтрокаТаблицы, МассивОшибок)
	// Создание объекта.
	ОбъектXDTO = СоздатьОбъектXDTO("STI062DECLARATIONDETAIL1LIST", Истина);
	
	ОбъектXDTOF1 = СоздатьОбъектXDTO("F1", Истина);
	ОбъектXDTOF1.Text = Формат(СтрокаТаблицы.ДатаВыписки, "ДЛФ=D");
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаВыписки) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'В приложении 1 в строке №%1 не указана дата выписки.'"), СтрокаТаблицы.НомерСтроки);
		МассивОшибок.Добавить(ТекстОшибки);	
	КонецЕсли;	
	
	ОбъектXDTOF2 = СоздатьОбъектXDTO("F2", Истина);
	ОбъектXDTOF2.Text = СтрокаТаблицы.НомерСФ;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НомерСФ) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'В приложении 1 в строке №%1 не указан номер СФ.'"), СтрокаТаблицы.НомерСтроки);
		МассивОшибок.Добавить(ТекстОшибки);	
	КонецЕсли;
	
	ОбъектXDTOF3 = СоздатьОбъектXDTO("F3", Истина);
	ОбъектXDTOF3.Text = СтрокаТаблицы.СерияСФ;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СерияСФ) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'В приложении 1 в строке №%1 не указана серия СФ.'"), СтрокаТаблицы.НомерСтроки);
		МассивОшибок.Добавить(ТекстОшибки);	
	КонецЕсли;
	
	ОбъектXDTOF4 = СоздатьОбъектXDTO("F4", Истина);
	ОбъектXDTOF4.Text = СтрокаТаблицы.КодПоставки;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.КодПоставки) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'В приложении 1 в строке №%1 не указан код поставки.'"), СтрокаТаблицы.НомерСтроки);
		МассивОшибок.Добавить(ТекстОшибки);	
	КонецЕсли;
	
	ОбъектXDTOF5 = СоздатьОбъектXDTO("F5", Истина);
	ОбъектXDTOF5.Text = СтрокаТаблицы.КонтрагентНаименование;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.КонтрагентНаименование) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'В приложении 1 в строке №%1 не указано наименование покупателя.'"), СтрокаТаблицы.НомерСтроки);
		МассивОшибок.Добавить(ТекстОшибки);	
	КонецЕсли;
	
	ОбъектXDTOF6 = СоздатьОбъектXDTO("F6", Истина);
	ОбъектXDTOF6.Text = СтрокаТаблицы.ИННКонтрагента;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ИННКонтрагента) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'В приложении 1 в строке №%1 не указан ИНН покупателя.'"), СтрокаТаблицы.НомерСтроки);
		МассивОшибок.Добавить(ТекстОшибки);	
	КонецЕсли;
	
	ОбъектXDTOF7 = СоздатьОбъектXDTO("F7", Истина);
	ОбъектXDTOF7.Text = СтрокаТаблицы.КодГНС;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.КодГНС) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'В приложении 1 в строке №%1 не указан код ГНС покупателя.'"), СтрокаТаблицы.НомерСтроки);
		МассивОшибок.Добавить(ТекстОшибки);	
	КонецЕсли;
	
	// На дату поставки проверка не нужна, т.к. при авансах дата поставки не заполнена.
	ОбъектXDTOF8 = СоздатьОбъектXDTO("F8", Истина);
	ОбъектXDTOF8.Text = Формат(СтрокаТаблицы.ДатаПоставки, "ДЛФ=D");
	
	ОбъектXDTOF9 = СоздатьОбъектXDTO("F9", Истина);
	ОбъектXDTOF9.Text = СтрокаТаблицы.СтоимостьБезНДС;
	
	ОбъектXDTOF10 = СоздатьОбъектXDTO("F10", Истина);
	ОбъектXDTOF10.Text = СтрокаТаблицы.СуммаНДС;
	
	ОбъектXDTOF11 = СоздатьОбъектXDTO("F11", Истина);
	ОбъектXDTOF11.Text = СтрокаТаблицы.СтоимостьБезНДС + СтрокаТаблицы.СуммаНДС;
	
	КорСФВНаличии = СтрокаТаблицы.КорСерияСФ <> "" И СтрокаТаблицы.КорНомерСФ <> "";
	
	Если КорСФВНаличии Тогда
		ОбъектXDTOF12 = СоздатьОбъектXDTO("F12", Истина);
		ОбъектXDTOF12.Text = СтрокаТаблицы.КорНомерСФ;
		
		ОбъектXDTOF13 = СоздатьОбъектXDTO("F13", Истина);
		ОбъектXDTOF13.Text = СтрокаТаблицы.КорСерияСФ;
	КонецЕсли;
	
	ОбъектXDTO.F1.Добавить(ОбъектXDTOF1);
	ОбъектXDTO.F2.Добавить(ОбъектXDTOF2);
	ОбъектXDTO.F3.Добавить(ОбъектXDTOF3);
	ОбъектXDTO.F4.Добавить(ОбъектXDTOF4);
	ОбъектXDTO.F5.Добавить(ОбъектXDTOF5);
	ОбъектXDTO.F6.Добавить(ОбъектXDTOF6);
	ОбъектXDTO.F7.Добавить(ОбъектXDTOF7);
	ОбъектXDTO.F8.Добавить(ОбъектXDTOF8);
	ОбъектXDTO.F9.Добавить(ОбъектXDTOF9);
	ОбъектXDTO.F10.Добавить(ОбъектXDTOF10);
	ОбъектXDTO.F11.Добавить(ОбъектXDTOF11);
	
	Если КорСФВНаличии Тогда
		ОбъектXDTO.F12.Добавить(ОбъектXDTOF12);
		ОбъектXDTO.F13.Добавить(ОбъектXDTOF13);
	КонецЕсли;	
	
	Возврат ОбъектXDTO;
КонецФункции

// Процедура формирования 2 приложения файла XML
//
&НаСервере
Функция STI062DECLARATIONDETAIL2(Таблица, МассивОшибок)
	// Создание объекта.
	ОбъектXDTO = СоздатьОбъектXDTO("STI062DECLARATIONDETAIL2", Истина);
	
	// Итоговые суммы по приобретенных мат. ресурсов.
	ОбъектXDTOF203 = СоздатьОбъектXDTO("F203", Истина);
	ОбъектXDTOF203.Text = ?(ДанныеУчетнойПолитики.Контракт, 0, Таблица.Количество());
	
	ОбъектXDTOF7Total = СоздатьОбъектXDTO("F7Total", Истина);
	ОбъектXDTOF7Total.Text = ?(ДанныеУчетнойПолитики.Контракт, 0, Таблица.Итог("СтоимостьБезНДС"));
	
	ОбъектXDTOF8Total = СоздатьОбъектXDTO("F8Total", Истина);
	ОбъектXDTOF8Total.Text = ?(ДанныеУчетнойПолитики.Контракт, 0, Таблица.Итог("СуммаНДС"));;
	
	ОбъектXDTOF9Total = СоздатьОбъектXDTO("F9Total", Истина);
	ОбъектXDTOF9Total.Text = ?(ДанныеУчетнойПолитики.Контракт, 0, Таблица.Итог("СуммаПодлежащаяКЗачетуНДС"));;
	
	ОбъектXDTOF7Total1 = СоздатьОбъектXDTO("F7Total1", Истина);
	ОбъектXDTOF7Total1.Text = 0;
	
	ОбъектXDTOF8Total1 = СоздатьОбъектXDTO("F8Total1", Истина);
	ОбъектXDTOF8Total1.Text = 0;
	
	ОбъектXDTOF9Total1 = СоздатьОбъектXDTO("F9Total1", Истина);
	ОбъектXDTOF9Total1.Text = 0;
	
	ОбъектXDTOF7Total2 = СоздатьОбъектXDTO("F7Total2", Истина);
	ОбъектXDTOF7Total2.Text = 0;
	
	ОбъектXDTOF8Total2 = СоздатьОбъектXDTO("F8Total2", Истина);
	ОбъектXDTOF8Total2.Text = 0;
	
	ОбъектXDTOF9Total2 = СоздатьОбъектXDTO("F9Total2", Истина);
	ОбъектXDTOF9Total2.Text = 0;
	
	ОбъектXDTO.F203.Добавить(ОбъектXDTOF203);
	ОбъектXDTO.F7Total.Добавить(ОбъектXDTOF7Total);
	ОбъектXDTO.F8Total.Добавить(ОбъектXDTOF8Total);
	ОбъектXDTO.F9Total.Добавить(ОбъектXDTOF9Total);
	ОбъектXDTO.F7Total1.Добавить(ОбъектXDTOF7Total1);
	ОбъектXDTO.F8Total1.Добавить(ОбъектXDTOF8Total1);
	ОбъектXDTO.F9Total1.Добавить(ОбъектXDTOF9Total1);
	ОбъектXDTO.F7Total2.Добавить(ОбъектXDTOF7Total2);
	ОбъектXDTO.F8Total2.Добавить(ОбъектXDTOF8Total2);
	ОбъектXDTO.F9Total2.Добавить(ОбъектXDTOF9Total2);
	
	// Строки реестра приобретенных мат. ресурсов.
	Если НЕ ДанныеУчетнойПолитики.Контракт Тогда
		
		Для Каждого СтрокаТаблицы Из Таблица Цикл
			ОбъектXDTO.STI062DECLARATIONDETAIL2LIST.Добавить(STI062DECLARATIONDETAIL2LIST(СтрокаТаблицы, МассивОшибок));
		КонецЦикла;	
	КонецЕсли;
	
	Возврат ОбъектXDTO;
КонецФункции

// Процедура формирования строк 2 приложения файла XML
//
&НаСервере
Функция STI062DECLARATIONDETAIL2LIST(СтрокаТаблицы, МассивОшибок)
	// Создание объекта.
	ОбъектXDTO = СоздатьОбъектXDTO("STI062DECLARATIONDETAIL2LIST", Истина);
	             
	ОбъектXDTOF1 = СоздатьОбъектXDTO("F1", Истина);
	ОбъектXDTOF1.Text = СтрокаТаблицы.НомерСФ;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НомерСФ) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'В приложении 2 в строке №%1 не указан номер СФ.'"), СтрокаТаблицы.НомерСтроки);
		МассивОшибок.Добавить(ТекстОшибки);	
	КонецЕсли;
	
	ОбъектXDTOF2 = СоздатьОбъектXDTO("F2", Истина);
	ОбъектXDTOF2.Text = СтрокаТаблицы.СерияСФ;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СерияСФ) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'В приложении 2 в строке №%1 не указана серия СФ.'"), СтрокаТаблицы.НомерСтроки);
		МассивОшибок.Добавить(ТекстОшибки);	
	КонецЕсли;
	
	ОбъектXDTOF3 = СоздатьОбъектXDTO("F3", Истина);
	ОбъектXDTOF3.Text = СтрокаТаблицы.КонтрагентНаименование;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.КонтрагентНаименование) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'В приложении 2 в строке №%1 не указано наименование поставщика.'"), СтрокаТаблицы.НомерСтроки);
		МассивОшибок.Добавить(ТекстОшибки);	
	КонецЕсли;
	
	ОбъектXDTOF4 = СоздатьОбъектXDTO("F4", Истина);
	ОбъектXDTOF4.Text = СтрокаТаблицы.ИННКонтрагента;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ИННКонтрагента) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'В приложении 2 в строке №%1 не указано ИНН поставщика.'"), СтрокаТаблицы.НомерСтроки);
		МассивОшибок.Добавить(ТекстОшибки);	
	КонецЕсли;
	
	ОбъектXDTOF5 = СоздатьОбъектXDTO("F5", Истина);
	ОбъектXDTOF5.Text = СтрокаТаблицы.КодГНС;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.КодГНС) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'В приложении 2 в строке №%1 не указан код ГНС.'"), СтрокаТаблицы.НомерСтроки);
		МассивОшибок.Добавить(ТекстОшибки);	
	КонецЕсли;
	
	ОбъектXDTOF6 = СоздатьОбъектXDTO("F6", Истина);
	ОбъектXDTOF6.Text = Формат(СтрокаТаблицы.ДатаПоставки, "ДЛФ=D");
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаПоставки) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'В приложении 2 в строке №%1 не указана дата поставки.'"), СтрокаТаблицы.НомерСтроки);
		МассивОшибок.Добавить(ТекстОшибки);	
	КонецЕсли;
	
	ОбъектXDTOF7 = СоздатьОбъектXDTO("F7", Истина);
	ОбъектXDTOF7.Text = СтрокаТаблицы.СтоимостьБезНДС;
	
	ОбъектXDTOF8 = СоздатьОбъектXDTO("F8", Истина);
	ОбъектXDTOF8.Text = СтрокаТаблицы.СуммаНДС;
	
	ОбъектXDTOF9 = СоздатьОбъектXDTO("F9", Истина);
	ОбъектXDTOF9.Text = СтрокаТаблицы.СуммаПодлежащаяКЗачетуНДС;
	
	КорСФВНаличии = СтрокаТаблицы.КорСерияСФ <> "" И СтрокаТаблицы.КорНомерСФ <> "";
	
	Если КорСФВНаличии Тогда
		ОбъектXDTOF10 = СоздатьОбъектXDTO("F10", Истина);
		ОбъектXDTOF10.Text = СтрокаТаблицы.КорНомерСФ;
		
		ОбъектXDTOF11 = СоздатьОбъектXDTO("F11", Истина);
		ОбъектXDTOF11.Text = СтрокаТаблицы.КорСерияСФ;
	КонецЕсли;
	
	ОбъектXDTO.F1.Добавить(ОбъектXDTOF1);
	ОбъектXDTO.F2.Добавить(ОбъектXDTOF2);
	ОбъектXDTO.F3.Добавить(ОбъектXDTOF3);
	ОбъектXDTO.F4.Добавить(ОбъектXDTOF4);
	ОбъектXDTO.F5.Добавить(ОбъектXDTOF5);
	ОбъектXDTO.F6.Добавить(ОбъектXDTOF6);
	ОбъектXDTO.F7.Добавить(ОбъектXDTOF7);
	ОбъектXDTO.F8.Добавить(ОбъектXDTOF8);
	ОбъектXDTO.F9.Добавить(ОбъектXDTOF9);
	
	Если КорСФВНаличии Тогда
		ОбъектXDTO.F10.Добавить(ОбъектXDTOF10);
		ОбъектXDTO.F11.Добавить(ОбъектXDTOF11);
	КонецЕсли;
	
	Возврат ОбъектXDTO;
КонецФункции

// Процедура формирования 3 приложения файла XML
//
&НаСервере
Функция STI062DECLARATIONDETAIL3(Таблица, МассивОшибок)
	// Создание объекта.
	ОбъектXDTO = СоздатьОбъектXDTO("STI062DECLARATIONDETAIL3", Истина);
	
	// Итоговые суммы по реестру ввезенных мат. ресурсов в КР.
	МассивСуммЕАЭС = Таблица.НайтиСтроки(Новый Структура("КонтрагентСтранаРезидентстваЕАЭС", Истина));
	
	F5TotalEeu  = 0;
	F6TotalEeu  = 0;
	F9TotalEeu  = 0;
	F10TotalEeu = 0;
	
	Для Каждого СтрокаМассива Из МассивСуммЕАЭС Цикл
		F5TotalEeu  = F5TotalEeu  + СтрокаМассива.ГТДСуммаБезНДС;
		F6TotalEeu  = F6TotalEeu  + СтрокаМассива.ГТДСуммаНДС;
		F9TotalEeu  = F9TotalEeu  + СтрокаМассива.ПДСуммаНДС;
		F10TotalEeu = F10TotalEeu + СтрокаМассива.НДСЗачет;	
	КонецЦикла;	
	
	ОбъектXDTOF203 = СоздатьОбъектXDTO("F203", Истина);
	ОбъектXDTOF203.Text = Таблица.Количество();
	
	ОбъектXDTOF5Total = СоздатьОбъектXDTO("F5Total", Истина);
	ОбъектXDTOF5Total.Text = Таблица.Итог("ГТДСуммаБезНДС");
	
	ОбъектXDTOF6Total = СоздатьОбъектXDTO("F6Total", Истина);
	ОбъектXDTOF6Total.Text = Таблица.Итог("ГТДСуммаНДС");
	
	ОбъектXDTOF9Total = СоздатьОбъектXDTO("F9Total", Истина);
	ОбъектXDTOF9Total.Text = Таблица.Итог("ПДСуммаНДС");
	
	ОбъектXDTOF10Total = СоздатьОбъектXDTO("F10Total", Истина);
	ОбъектXDTOF10Total.Text = Таблица.Итог("НДСЗачет");
	
	ОбъектXDTOF5TotalAgri = СоздатьОбъектXDTO("F5TotalAgri", Истина);
	ОбъектXDTOF5TotalAgri.Text = 0;
	
	ОбъектXDTOF6TotalAgri = СоздатьОбъектXDTO("F6TotalAgri", Истина);
	ОбъектXDTOF6TotalAgri.Text = 0;
	
	ОбъектXDTOF9TotalAgri = СоздатьОбъектXDTO("F9TotalAgri", Истина);
	ОбъектXDTOF9TotalAgri.Text = 0;
	
	ОбъектXDTOF10TotalAgri = СоздатьОбъектXDTO("F10TotalAgri", Истина);
	ОбъектXDTOF10TotalAgri.Text = 0;
	
	ОбъектXDTOF5TotalEeu = СоздатьОбъектXDTO("F5TotalEeu", Истина);
	ОбъектXDTOF5TotalEeu.Text = F5TotalEeu;
	
	ОбъектXDTOF6TotalEeu = СоздатьОбъектXDTO("F6TotalEeu", Истина);
	ОбъектXDTOF6TotalEeu.Text = F6TotalEeu;
	
	ОбъектXDTOF9TotalEeu = СоздатьОбъектXDTO("F9TotalEeu", Истина);
	ОбъектXDTOF9TotalEeu.Text = F9TotalEeu;
	
	ОбъектXDTOF10TotalEeu = СоздатьОбъектXDTO("F10TotalEeu", Истина);
	ОбъектXDTOF10TotalEeu.Text = F10TotalEeu;
		
	ОбъектXDTO.F203.Добавить(ОбъектXDTOF203);
	ОбъектXDTO.F5Total.Добавить(ОбъектXDTOF5Total);
	ОбъектXDTO.F6Total.Добавить(ОбъектXDTOF6Total);
	ОбъектXDTO.F9Total.Добавить(ОбъектXDTOF9Total);
	ОбъектXDTO.F10Total.Добавить(ОбъектXDTOF10Total);
	ОбъектXDTO.F5TotalAgri.Добавить(ОбъектXDTOF5TotalAgri);
	ОбъектXDTO.F6TotalAgri.Добавить(ОбъектXDTOF6TotalAgri);
	ОбъектXDTO.F9TotalAgri.Добавить(ОбъектXDTOF9TotalAgri);
	ОбъектXDTO.F10TotalAgri.Добавить(ОбъектXDTOF10TotalAgri);
	ОбъектXDTO.F5TotalEeu.Добавить(ОбъектXDTOF5TotalEeu);
	ОбъектXDTO.F6TotalEeu.Добавить(ОбъектXDTOF6TotalEeu);
	ОбъектXDTO.F9TotalEeu.Добавить(ОбъектXDTOF9TotalEeu);
	ОбъектXDTO.F10TotalEeu.Добавить(ОбъектXDTOF10TotalEeu);
	
	// Строки реестра ввезенных мат. ресурсов в КР.
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		ОбъектXDTO.STI062DECLARATIONDETAIL3LIST.Добавить(STI062DECLARATIONDETAIL3LIST(СтрокаТаблицы, МассивОшибок));
	КонецЦикла;
	
	Возврат ОбъектXDTO;
КонецФункции

// Процедура формирования строк 3 приложения файла XML
//
&НаСервере
Функция STI062DECLARATIONDETAIL3LIST(СтрокаТаблицы, МассивОшибок)
	// Создание объекта.
	ОбъектXDTO = СоздатьОбъектXDTO("STI062DECLARATIONDETAIL3LIST", Истина);
	             
	ОбъектXDTOF1 = СоздатьОбъектXDTO("F1", Истина);
	ОбъектXDTOF1.Text = СтрокаТаблицы.КонтрагентНаименование;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.КонтрагентНаименование) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'В приложении 3 в строке №%1 не указано наименование поставщика.'"), СтрокаТаблицы.НомерСтроки);
		МассивОшибок.Добавить(ТекстОшибки);	
	КонецЕсли;
	
	ОбъектXDTOF2 = СоздатьОбъектXDTO("F2", Истина);
	ОбъектXDTOF2.Text = СтрокаТаблицы.КодСтраныКонтрагента;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.КодСтраныКонтрагента) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'В приложении 3 в строке №%1 не указан код страны поставщика.'"), СтрокаТаблицы.НомерСтроки);
		МассивОшибок.Добавить(ТекстОшибки);	
	КонецЕсли;
	
	ОбъектXDTOF3 = СоздатьОбъектXDTO("F3", Истина);
	ОбъектXDTOF3.Text = Формат(СтрокаТаблицы.ГТДДата, "ДЛФ=D");
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ГТДДата) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'В приложении 3 в строке №%1 не указана дата ГТД.'"), СтрокаТаблицы.НомерСтроки);
		МассивОшибок.Добавить(ТекстОшибки);	
	КонецЕсли;
	
	ОбъектXDTOF4 = СоздатьОбъектXDTO("F4", Истина);
	ОбъектXDTOF4.Text = СтрокаТаблицы.ГТДНомер;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ГТДНомер) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'В приложении 3 в строке №%1 не указан номер ГТД.'"), СтрокаТаблицы.НомерСтроки);
		МассивОшибок.Добавить(ТекстОшибки);	
	КонецЕсли;
	
	ОбъектXDTOF5 = СоздатьОбъектXDTO("F5", Истина);
	ОбъектXDTOF5.Text = СтрокаТаблицы.ГТДСуммаБезНДС;
	
	ОбъектXDTOF6 = СоздатьОбъектXDTO("F6", Истина);
	ОбъектXDTOF6.Text = СтрокаТаблицы.ГТДСуммаНДС;
	
	ОбъектXDTOF7 = СоздатьОбъектXDTO("F7", Истина);
	ОбъектXDTOF7.Text = Формат(СтрокаТаблицы.ПДДата, "ДЛФ=D");
	
	ОбъектXDTOF8 = СоздатьОбъектXDTO("F8", Истина);
	ОбъектXDTOF8.Text = СтрокаТаблицы.ПДНомер;
	
	ОбъектXDTOF9 = СоздатьОбъектXDTO("F9", Истина);
	ОбъектXDTOF9.Text = СтрокаТаблицы.ПДСуммаНДС;
	
	ОбъектXDTOF10 = СоздатьОбъектXDTO("F10", Истина);
	ОбъектXDTOF10.Text = СтрокаТаблицы.НДСЗачет;
	
	ОбъектXDTO.F1.Добавить(ОбъектXDTOF1);
	ОбъектXDTO.F2.Добавить(ОбъектXDTOF2);
	ОбъектXDTO.F3.Добавить(ОбъектXDTOF3);
	ОбъектXDTO.F4.Добавить(ОбъектXDTOF4);
	ОбъектXDTO.F5.Добавить(ОбъектXDTOF5);
	ОбъектXDTO.F6.Добавить(ОбъектXDTOF6);
	ОбъектXDTO.F7.Добавить(ОбъектXDTOF7);
	ОбъектXDTO.F8.Добавить(ОбъектXDTOF8);
	ОбъектXDTO.F9.Добавить(ОбъектXDTOF9);
	ОбъектXDTO.F10.Добавить(ОбъектXDTOF10);
	
	Возврат ОбъектXDTO;
КонецФункции

// Процедура формирования 4 приложения файла XML
//
&НаСервере
Функция STI062DECLARATIONDETAIL4(Таблица, МассивОшибок)
	// Создание объекта.
	ОбъектXDTO = СоздатьОбъектXDTO("STI062DECLARATIONDETAIL4", Истина);
	
	// Итоговые суммы по реестру поставок.
	ОбъектXDTOF203 = СоздатьОбъектXDTO("F203", Истина);
	ОбъектXDTOF203.Text = ?(ДанныеУчетнойПолитики.Контракт, Таблица.Количество(), 0);
	
	ОбъектXDTOF9Total = СоздатьОбъектXDTO("F9Total", Истина);
	ОбъектXDTOF9Total.Text = ?(ДанныеУчетнойПолитики.Контракт, Таблица.Итог("СтоимостьБезНДС"), 0);
	
	ОбъектXDTOF10Total = СоздатьОбъектXDTO("F10Total", Истина);
	ОбъектXDTOF10Total.Text = ?(ДанныеУчетнойПолитики.Контракт, Таблица.Итог("СуммаНДС"), 0);
	
	ОбъектXDTOF11Total = СоздатьОбъектXDTO("F11Total", Истина);
	ОбъектXDTOF11Total.Text = ?(ДанныеУчетнойПолитики.Контракт, Таблица.Итог("СтоимостьБезНДС") + Таблица.Итог("СуммаНДС"), 0);
		
	ОбъектXDTO.F203.Добавить(ОбъектXDTOF203);
	ОбъектXDTO.F9Total.Добавить(ОбъектXDTOF9Total);
	ОбъектXDTO.F10Total.Добавить(ОбъектXDTOF10Total);
	ОбъектXDTO.F11Total.Добавить(ОбъектXDTOF11Total);
	
	// Строки реестра поставок на основе налогового контракта.
	Если ДанныеУчетнойПолитики.Контракт Тогда
		
		Для Каждого СтрокаТаблицы Из Таблица Цикл
			ОбъектXDTO.STI062DECLARATIONDETAIL4LIST.Добавить(STI062DECLARATIONDETAIL4LIST(СтрокаТаблицы, МассивОшибок));
		КонецЦикла;
	КонецЕсли;
	
	Возврат ОбъектXDTO;
КонецФункции

// Процедура формирования строк 4 приложения файла XML
//
&НаСервере
Функция STI062DECLARATIONDETAIL4LIST(СтрокаТаблицы, МассивОшибок)
	// Создание объекта.
	ОбъектXDTO = СоздатьОбъектXDTO("STI062DECLARATIONDETAIL4LIST", Истина);
	             
	ОбъектXDTOF1 = СоздатьОбъектXDTO("F1", Истина);
	ОбъектXDTOF1.Text = Формат(СтрокаТаблицы.ДатаВыписки, "ДЛФ=D");
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаВыписки) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'В приложении 4 в строке №%1 не указана дата выписки.'"), СтрокаТаблицы.НомерСтроки);
		МассивОшибок.Добавить(ТекстОшибки);	
	КонецЕсли;
	
	ОбъектXDTOF2 = СоздатьОбъектXDTO("F2", Истина);
	ОбъектXDTOF2.Text = СтрокаТаблицы.НомерСФ;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НомерСФ) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'В приложении 4 в строке №%1 не указан номер СФ.'"), СтрокаТаблицы.НомерСтроки);
		МассивОшибок.Добавить(ТекстОшибки);	
	КонецЕсли;
	
	ОбъектXDTOF3 = СоздатьОбъектXDTO("F3", Истина);
	ОбъектXDTOF3.Text = СтрокаТаблицы.СерияСФ;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СерияСФ) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'В приложении 4 в строке №%1 не указана серия СФ.'"), СтрокаТаблицы.НомерСтроки);
		МассивОшибок.Добавить(ТекстОшибки);	
	КонецЕсли;
	
	ОбъектXDTOF4 = СоздатьОбъектXDTO("F4", Истина);
	ОбъектXDTOF4.Text = СтрокаТаблицы.КодПоставки;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.КодПоставки) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'В приложении 4 в строке №%1 не указан код поставки.'"), СтрокаТаблицы.НомерСтроки);
		МассивОшибок.Добавить(ТекстОшибки);	
	КонецЕсли;
	
	ОбъектXDTOF5 = СоздатьОбъектXDTO("F5", Истина);
	ОбъектXDTOF5.Text = СтрокаТаблицы.КонтрагентНаименование;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.КонтрагентНаименование) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'В приложении 4 в строке №%1 не указано наименование покупателя.'"), СтрокаТаблицы.НомерСтроки);
		МассивОшибок.Добавить(ТекстОшибки);	
	КонецЕсли;
	
	ОбъектXDTOF6 = СоздатьОбъектXDTO("F6", Истина);
	ОбъектXDTOF6.Text = СтрокаТаблицы.ИННКонтрагента;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ИННКонтрагента) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'В приложении 4 в строке №%1 не указан ИНН покупателя.'"), СтрокаТаблицы.НомерСтроки);
		МассивОшибок.Добавить(ТекстОшибки);	
	КонецЕсли;
	
	ОбъектXDTOF7 = СоздатьОбъектXDTO("F7", Истина);
	ОбъектXDTOF7.Text = СтрокаТаблицы.КодГНС;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.КодГНС) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'В приложении 4 в строке №%1 не указан код ГНС покупателя.'"), СтрокаТаблицы.НомерСтроки);
		МассивОшибок.Добавить(ТекстОшибки);	
	КонецЕсли;
	
	// На дату поставки проверка не нужна, т.к. при авансах дата поставки не заполнена.
	ОбъектXDTOF8 = СоздатьОбъектXDTO("F8", Истина);
	ОбъектXDTOF8.Text = Формат(СтрокаТаблицы.ДатаПоставки, "ДЛФ=D");
	
	ОбъектXDTOF9 = СоздатьОбъектXDTO("F9", Истина);
	ОбъектXDTOF9.Text = СтрокаТаблицы.СтоимостьБезНДС;
	
	ОбъектXDTOF10 = СоздатьОбъектXDTO("F10", Истина);
	ОбъектXDTOF10.Text = СтрокаТаблицы.СуммаНДС;
	
	ОбъектXDTOF11 = СоздатьОбъектXDTO("F11", Истина);
	ОбъектXDTOF11.Text = СтрокаТаблицы.СтоимостьБезНДС + СтрокаТаблицы.СуммаНДС;
	
	КорСФВНаличии = СтрокаТаблицы.КорСерияСФ <> "" И СтрокаТаблицы.КорНомерСФ <> "";
	
	Если КорСФВНаличии Тогда
		ОбъектXDTOF12 = СоздатьОбъектXDTO("F12", Истина);
		ОбъектXDTOF12.Text = СтрокаТаблицы.КорНомерСФ;
		
		ОбъектXDTOF13 = СоздатьОбъектXDTO("F13", Истина);
		ОбъектXDTOF13.Text = СтрокаТаблицы.КорСерияСФ;
	КонецЕсли;
	
	ОбъектXDTO.F1.Добавить(ОбъектXDTOF1);
	ОбъектXDTO.F2.Добавить(ОбъектXDTOF2);
	ОбъектXDTO.F3.Добавить(ОбъектXDTOF3);
	ОбъектXDTO.F4.Добавить(ОбъектXDTOF4);
	ОбъектXDTO.F5.Добавить(ОбъектXDTOF5);
	ОбъектXDTO.F6.Добавить(ОбъектXDTOF6);
	ОбъектXDTO.F7.Добавить(ОбъектXDTOF7);
	ОбъектXDTO.F8.Добавить(ОбъектXDTOF8);
	ОбъектXDTO.F9.Добавить(ОбъектXDTOF9);
	ОбъектXDTO.F10.Добавить(ОбъектXDTOF10);
	ОбъектXDTO.F11.Добавить(ОбъектXDTOF11);
	
	Если КорСФВНаличии Тогда
		ОбъектXDTO.F12.Добавить(ОбъектXDTOF12);
		ОбъектXDTO.F13.Добавить(ОбъектXDTOF13);
	КонецЕсли;	   	
		
	Возврат ОбъектXDTO;
КонецФункции

// Процедура формирования 5 приложения файла XML
//
&НаСервере
Функция STI062DECLARATIONDETAIL5(Таблица, МассивОшибок)
	// Создание объекта.
	ОбъектXDTO = СоздатьОбъектXDTO("STI062DECLARATIONDETAIL5", Истина);
	
	// Итоговые суммы по приобретенных мат. ресурсов.
	ОбъектXDTOF203 = СоздатьОбъектXDTO("F203", Истина);
	ОбъектXDTOF203.Text = ?(ДанныеУчетнойПолитики.Контракт, Таблица.Количество(), 0);
	
	ОбъектXDTOF7Total = СоздатьОбъектXDTO("F7Total", Истина);
	ОбъектXDTOF7Total.Text = ?(ДанныеУчетнойПолитики.Контракт, Таблица.Итог("СтоимостьБезНДС"), 0);
	
	ОбъектXDTOF8Total = СоздатьОбъектXDTO("F8Total", Истина);
	ОбъектXDTOF8Total.Text = ?(ДанныеУчетнойПолитики.Контракт, Таблица.Итог("СуммаНДС"), 0);
	
	ОбъектXDTOF9Total = СоздатьОбъектXDTO("F9Total", Истина);
	ОбъектXDTOF9Total.Text = ?(ДанныеУчетнойПолитики.Контракт, Таблица.Итог("СтоимостьБезНДС") + Таблица.Итог("СуммаНДС"), 0);
	
	ОбъектXDTO.F203.Добавить(ОбъектXDTOF203);
	ОбъектXDTO.F7Total.Добавить(ОбъектXDTOF7Total);
	ОбъектXDTO.F8Total.Добавить(ОбъектXDTOF8Total);
	ОбъектXDTO.F9Total.Добавить(ОбъектXDTOF9Total);
	
	// Строки реестра приобретенных мат. ресурсов.
	Если ДанныеУчетнойПолитики.Контракт Тогда
		
		Для Каждого СтрокаТаблицы Из Таблица Цикл
			ОбъектXDTO.STI062DECLARATIONDETAIL5LIST.Добавить(STI062DECLARATIONDETAIL5LIST(СтрокаТаблицы, МассивОшибок));
		КонецЦикла;
	КонецЕсли;
	
	Возврат ОбъектXDTO;
КонецФункции

// Процедура формирования строк 5 приложения файла XML
//
&НаСервере
Функция STI062DECLARATIONDETAIL5LIST(СтрокаТаблицы, МассивОшибок)
	// Создание объекта.
	ОбъектXDTO = СоздатьОбъектXDTO("STI062DECLARATIONDETAIL5LIST", Истина);
	             
	ОбъектXDTOF1 = СоздатьОбъектXDTO("F1", Истина);
	ОбъектXDTOF1.Text = СтрокаТаблицы.НомерСФ;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НомерСФ) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'В приложении 5 в строке №%1 не указан номер СФ.'"), СтрокаТаблицы.НомерСтроки);
		МассивОшибок.Добавить(ТекстОшибки);	
	КонецЕсли;
	
	ОбъектXDTOF2 = СоздатьОбъектXDTO("F2", Истина);
	ОбъектXDTOF2.Text = СтрокаТаблицы.СерияСФ;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СерияСФ) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'В приложении 5 в строке №%1 не указана серия СФ.'"), СтрокаТаблицы.НомерСтроки);
		МассивОшибок.Добавить(ТекстОшибки);	
	КонецЕсли;
	
	ОбъектXDTOF3 = СоздатьОбъектXDTO("F3", Истина);
	ОбъектXDTOF3.Text = СтрокаТаблицы.КонтрагентНаименование;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.КонтрагентНаименование) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'В приложении 5 в строке №%1 не указано наименование поставщика.'"), СтрокаТаблицы.НомерСтроки);
		МассивОшибок.Добавить(ТекстОшибки);	
	КонецЕсли;
	
	ОбъектXDTOF4 = СоздатьОбъектXDTO("F4", Истина);
	ОбъектXDTOF4.Text = СтрокаТаблицы.ИННКонтрагента;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ИННКонтрагента) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'В приложении 5 в строке №%1 не указан ИНН поставщика.'"), СтрокаТаблицы.НомерСтроки);
		МассивОшибок.Добавить(ТекстОшибки);	
	КонецЕсли;
	
	ОбъектXDTOF5 = СоздатьОбъектXDTO("F5", Истина);
	ОбъектXDTOF5.Text = СтрокаТаблицы.КодГНС;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.КодГНС) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'В приложении 5 в строке №%1 не указан код ГНС поставщика.'"), СтрокаТаблицы.НомерСтроки);
		МассивОшибок.Добавить(ТекстОшибки);	
	КонецЕсли;
	
	ОбъектXDTOF6 = СоздатьОбъектXDTO("F6", Истина);
	ОбъектXDTOF6.Text = Формат(СтрокаТаблицы.ДатаПоставки, "ДЛФ=D");
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаПоставки) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'В приложении 5 в строке №%1 не указана дата поставки.'"), СтрокаТаблицы.НомерСтроки);
		МассивОшибок.Добавить(ТекстОшибки);	
	КонецЕсли;
	
	ОбъектXDTOF7 = СоздатьОбъектXDTO("F7", Истина);
	ОбъектXDTOF7.Text = СтрокаТаблицы.СтоимостьБезНДС;
	
	ОбъектXDTOF8 = СоздатьОбъектXDTO("F8", Истина);
	ОбъектXDTOF8.Text = СтрокаТаблицы.СуммаНДС;
	
	ОбъектXDTOF9 = СоздатьОбъектXDTO("F9", Истина);
	ОбъектXDTOF9.Text = СтрокаТаблицы.СуммаПодлежащаяКЗачетуНДС;
	
	КорСФВНаличии = СтрокаТаблицы.КорСерияСФ <> "" И СтрокаТаблицы.КорНомерСФ <> "";
	
	Если КорСФВНаличии Тогда
		ОбъектXDTOF10 = СоздатьОбъектXDTO("F10", Истина);
		ОбъектXDTOF10.Text = СтрокаТаблицы.КорНомерСФ;
		
		ОбъектXDTOF11 = СоздатьОбъектXDTO("F11", Истина);
		ОбъектXDTOF11.Text = СтрокаТаблицы.КорСерияСФ;
	КонецЕсли;
	
	ОбъектXDTO.F1.Добавить(ОбъектXDTOF1);
	ОбъектXDTO.F2.Добавить(ОбъектXDTOF2);
	ОбъектXDTO.F3.Добавить(ОбъектXDTOF3);
	ОбъектXDTO.F4.Добавить(ОбъектXDTOF4);
	ОбъектXDTO.F5.Добавить(ОбъектXDTOF5);
	ОбъектXDTO.F6.Добавить(ОбъектXDTOF6);
	ОбъектXDTO.F7.Добавить(ОбъектXDTOF7);
	ОбъектXDTO.F8.Добавить(ОбъектXDTOF8);
	ОбъектXDTO.F9.Добавить(ОбъектXDTOF9);
	
	Если КорСФВНаличии Тогда
		ОбъектXDTO.F10.Добавить(ОбъектXDTOF10);
		ОбъектXDTO.F11.Добавить(ОбъектXDTOF11);
	КонецЕсли;
	
	Возврат ОбъектXDTO;
КонецФункции

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область РедактированиеМесяцаСтрокой

&НаКлиенте
Процедура ПериодОтчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.Дата", "МесяцСтрокой");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ПериодОтчета.
//
&НаКлиенте
Процедура ПериодОтчетаПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.Дата", "МесяцСтрокой", Модифицированность);
	
	УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтчетаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.Дата", "МесяцСтрокой", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтчетаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтчетаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти
