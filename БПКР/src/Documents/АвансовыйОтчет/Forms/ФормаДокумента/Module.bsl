#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ВедомостьЗаработнойПлаты") Тогда
		Объект.Организация = Параметры.Организация;
		Объект.ДокументОснование = Параметры.ВедомостьЗаработнойПлаты;
		
		Для Каждого СтрокаТаблицы Из Параметры.ТаблицаЗарплата Цикл
			СтрокаТабличнойЧасти = Объект.ВыплатаЗаработнойПлаты.Добавить();
			СтрокаТабличнойЧасти.Ведомость 	= Параметры.ВедомостьЗаработнойПлаты;
			СтрокаТабличнойЧасти.ФизЛицо 	= СтрокаТаблицы.ФизЛицо;
			СтрокаТабличнойЧасти.Сумма 		= СтрокаТаблицы.СуммаПоКассе;
		КонецЦикла;
	КонецЕсли;
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	Если Параметры.Ключ.Пустая() Тогда
		УстановитьНачальныеСвойстваСубконтоТаблицы();
	КонецЕсли;	
	
	УстановитьПараметрыВыбора();
	
	//ЗаполнитьСписокВыбораСчетаУчетаРаботники();
	//ЗаполнитьПараметрыВыбораСчетовПатентов();
	
	ОбновитьПодвал();
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	
	УстановитьУсловноеОформление();
	
	// РаботаСФормами
	РаботаСФормамиСервер.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УстановитьНачальныеСвойстваСубконтоТаблицы();

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом 
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды	
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
КонецПроцедуры

// Процедура - обработчик события ПередЗаписью.
//
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ЗаполнитьАвансыПоОстаткамНаКлиенте();
	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	
	УстановитьНачальныеСвойстваСубконтоТаблицы();
	
	// РаботаСФормами
	РаботаСФормамиСервер.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец РаботаСФормами

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчета.ПослеЗаписиНаСервере(ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ПодборДокументовОплатыПоставщикам"
		И ТипЗнч(Параметр) = Тип("Структура")
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор Тогда
		
		АдресЗапасовВХранилище = Параметр.АдресЗапасовВХранилище;
		Если ЗначениеЗаполнено(АдресЗапасовВХранилище) Тогда			
			ПолучитьДанныеДокументовИзХранилища(АдресЗапасовВХранилище);	
		КонецЕсли;
		
		ОбновитьПодвал("Оплата");
		
		ТекстОповещения = НСтр("ru = 'Заполнение'");
		ТекстПояснения = НСтр("ru = 'Табличная часть ""Оплата"" заполнена.'");
		ПоказатьОповещениеПользователя(ТекстОповещения,, ТекстПояснения, БиблиотекаКартинок.Информация32);		
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Прочее Цикл
		ЗаполнитьКурсИКратность(СтрокаТабличнойЧасти);
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.ОплатаПоставщикам Цикл
		ЗаполнитьКурсИКратность(СтрокаТабличнойЧасти);
	КонецЦикла;
	
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
	ЗаполнитьАвансыПоОстаткамНаКлиенте();
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоТаблицыПриИзмененииОрганизации(
		Объект.ТоварыУслуги,
		ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));

		
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоТаблицыПриИзмененииОрганизации(
		Объект.Прочее,
		ПараметрыУстановкиСвойствСубконтоПрочее(ЭтотОбъект));

	ЗаполнитьАвансыПоОстаткамНаКлиенте();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ФизЛицо.
//
&НаКлиенте
Процедура ФизЛицоПриИзменении(Элемент)
	ЗаполнитьАвансыПоОстаткамНаКлиенте();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ПоВедомости.
//
&НаКлиенте
Процедура ПоВедомостиПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДвижениеДенежныхСредств

&НаКлиенте
Процедура ДвижениеДенежныхСредствПриАктивизацииСтроки(Элемент)
	
	ИмяТабличнойЧасти = "ДвижениеДенежныхСредств";
	БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ТаблицаДокументов");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОплатаПоставщикам

// Процедура - обработчик события ПриИзменении поля ввода ОплатаПоставщикамКонтрагент.
//
&НаКлиенте
Процедура ОплатаПоставщикамКонтрагентПриИзменении(Элемент)	
	СтрокаТабличнойЧасти = Элементы.ОплатаПоставщикам.ТекущиеДанные;
	
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(СтрокаТабличнойЧасти.Контрагент, Объект.Организация);
	СтрокаТабличнойЧасти.ДоговорКонтрагента = СтруктураДанные.ДоговорКонтрагента;
	
	ОбработатьИзменениеДоговора(СтрокаТабличнойЧасти);
	ОбновитьПодвал("Оплата");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОплатаПоставщикамДоговорКонтрагента.
//
&НаКлиенте
Процедура ОплатаПоставщикамДоговорКонтрагентаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ОплатаПоставщикам.ТекущиеДанные;
	ОбработатьИзменениеДоговора(СтрокаТабличнойЧасти);
	ОбновитьПодвал("Оплата");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОплатаПоставщикамСумма.
//
&НаКлиенте
Процедура ОплатаПоставщикамСуммаПриИзменении(Элемент)
	ОбновитьПодвал("Оплата");
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамПослеУдаления(Элемент)
	ОбновитьПодвал("Оплата");
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьПодвал("Оплата");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПрочее

// Процедура - обработчик события ПередНачаломИзменения таблицы Прочее.
//
&НаКлиенте
Процедура ПрочееПередНачаломИзменения(Элемент, Отказ)
	ТекущиеДанные = Элементы.Прочее.ТекущиеДанные;
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоСтроки(
		ЭтотОбъект, ТекущиеДанные, ПараметрыУстановкиСвойствСубконтоПрочее(ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура ПрочееПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти = Элементы.Прочее.ТекущиеДанные;
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			
			СтрокаТабличнойЧасти.Валюта = ВалютаРегламентированногоУчета;	
			
			ЗаполнитьКурсИКратность(СтрокаТабличнойЧасти);
		КонецЕсли;	
	КонецЕсли;	
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ПрочееПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьПодвал("Прочее");
КонецПроцедуры

&НаКлиенте
Процедура ПрочееПослеУдаления(Элемент)
	ОбновитьПодвал("Прочее");
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСуммаПриИзменении(Элемент)
	ОбновитьПодвал("Прочее");
КонецПроцедуры

&НаКлиенте
Процедура ПрочееВалютаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Прочее.ТекущиеДанные;
		
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		Если СтрокаТабличнойЧасти.Валюта <> ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка") Тогда		
			ЗаполнитьКурсИКратность(СтрокаТабличнойЧасти);
		КонецЕсли;
	КонецЕсли;	
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ПрочееСчетУчета.
//
&НаКлиенте
Процедура ПрочееСчетУчетаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Прочее.ТекущиеДанные;
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСчета(
		ЭтотОбъект, ТекущиеДанные, ПараметрыУстановкиСвойствСубконтоПрочее(ЭтотОбъект));
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ПрочееСубконтоДт1.
//
&НаКлиенте
Процедура ПрочееСубконтоДт1ПриИзменении(Элемент)
	ПриИзмененииСубконтоПрочее(1);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ПрочееСубконтоДт2.
//
&НаКлиенте
Процедура ПрочееСубконтоДт2ПриИзменении(Элемент)
	ПриИзмененииСубконтоПрочее(2);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ПрочееСубконтоДт3.
//
&НаКлиенте
Процедура ПрочееСубконтоДт3ПриИзменении(Элемент)
	ПриИзмененииСубконтоПрочее(3);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыплатаЗаработнойПлаты

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьПодвал("ВыплатаЗП");
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыПослеУдаления(Элемент)
	ОбновитьПодвал("ВыплатаЗП");
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыСуммаПриИзменении(Элемент)
	ОбновитьПодвал("ВыплатаЗП");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ВыплатаЗаработнойПлатыВедомость.
//
&НаКлиенте
Процедура ВыплатаЗаработнойПлатыВедомостьПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ВыплатаЗаработнойПлаты.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Ведомость) Тогда
		СтрокаТабличнойЧасти.Сумма = ПолучитьСуммуВедомости(СтрокаТабличнойЧасти.Ведомость);
	КонецЕсли;
	
	ОбновитьПодвал("ВыплатаЗП");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВладельцыПатентов

&НаКлиенте
Процедура ВладельцыПатентовПриАктивизацииСтроки(Элемент)
	
	ИмяТабличнойЧасти = "ВладельцыПатентов";
	БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ТоварыУслуги");
КонецПроцедуры

&НаКлиенте
Процедура ВладельцыПатентовПередУдалением(Элемент, Отказ)
	
	ИмяТабличнойЧасти = "ВладельцыПатентов";
	БухгалтерскийУчетКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтотОбъект, "ТоварыУслуги");
КонецПроцедуры

&НаКлиенте
Процедура ВладельцыПатентовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ИмяТабличнойЧасти = "ВладельцыПатентов";
	Если Элемент.ТекущиеДанные.КлючСвязи = 0 Тогда
		БухгалтерскийУчетКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтотОбъект);
	КонецЕсли;
	БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ТоварыУслуги");
КонецПроцедуры

&НаКлиенте
Процедура ВладельцыПатентовПослеУдаления(Элемент)
	ОбновитьПодвал("Патенты");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТоварыУслуги

&НаКлиенте
Процедура ТоварыУслугиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ИмяТабличнойЧасти = "ВладельцыПатентов";
	Отказ = БухгалтерскийУчетКлиент.ПередНачаломДобавленияВПодчиненнуюТабличнуюЧасть(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

// Процедура - обработчик события ПередНачаломИзменения таблицы ТоварыУслуги.
//
&НаКлиенте
Процедура ТоварыУслугиПередНачаломИзменения(Элемент, Отказ)
	ТекущиеДанные = Элементы.ТоварыУслуги.ТекущиеДанные;
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоСтроки(
		ЭтотОбъект, ТекущиеДанные, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ИмяТабличнойЧасти = "ТоварыУслуги";
		БухгалтерскийУчетКлиент.ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти(ЭтотОбъект, Элемент.Имя);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУслугиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	СтрокаТабличнойЧасти = Элементы.ТоварыУслуги.ТекущиеДанные;
	Если ТипЗнч(СтрокаТабличнойЧасти.СубконтоДт1) = Тип("СправочникСсылка.Номенклатура")
		И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СубконтоДт1) Тогда
		СтрокаТабличнойЧасти.СубконтоДт1 = СтрокаТабличнойЧасти.Номенклатура;
	ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.СубконтоДт2) = Тип("СправочникСсылка.Номенклатура")
		И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СубконтоДт2) Тогда
		СтрокаТабличнойЧасти.СубконтоДт2 = СтрокаТабличнойЧасти.Номенклатура;
	ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.СубконтоДт3) = Тип("СправочникСсылка.Номенклатура")
		И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СубконтоДт3) Тогда
		СтрокаТабличнойЧасти.СубконтоДт3 = СтрокаТабличнойЧасти.Номенклатура;
	КонецЕсли;
	
	Если ТипЗнч(СтрокаТабличнойЧасти.СубконтоДт1) = Тип("СправочникСсылка.Склады") 
		И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СубконтоДт1) Тогда
		СтрокаТабличнойЧасти.СубконтоДт1 = БухгалтерскийУчетВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнойСклад");
	ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.СубконтоДт2) = Тип("СправочникСсылка.Склады")
		И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СубконтоДт2) Тогда
		СтрокаТабличнойЧасти.СубконтоДт2 = БухгалтерскийУчетВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнойСклад");
	ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.СубконтоДт3) = Тип("СправочникСсылка.Склады")
		И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СубконтоДт3) Тогда
		СтрокаТабличнойЧасти.СубконтоДт3 = БухгалтерскийУчетВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнойСклад");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьПодвал("Патенты");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУслугиПослеУдаления(Элемент)
	ОбновитьПодвал("Патенты");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ТоварыУслугиНоменклатура.
//
&НаКлиенте
Процедура ТоварыУслугиНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ТоварыУслуги.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);

	// Заполнение по данным номенклатуры.
	СтрокаТабличнойЧасти.СчетУчета = СтруктураДанные.СчетУчета;
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	
	Если СтрокаТабличнойЧасти.Количество = 0 Тогда  
		СтрокаТабличнойЧасти.Количество = 1;
	КонецЕсли;	
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСчета(
		ЭтотОбъект, СтрокаТабличнойЧасти, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
	// Заполнение субконто номенклатура.
	Если ТипЗнч(СтрокаТабличнойЧасти.СубконтоДт1) = Тип("СправочникСсылка.Номенклатура") Тогда
		СтрокаТабличнойЧасти.СубконтоДт1 = СтрокаТабличнойЧасти.Номенклатура;
	ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.СубконтоДт2) = Тип("СправочникСсылка.Номенклатура") Тогда
		СтрокаТабличнойЧасти.СубконтоДт2 = СтрокаТабличнойЧасти.Номенклатура;
	ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.СубконтоДт3) = Тип("СправочникСсылка.Номенклатура") Тогда
		СтрокаТабличнойЧасти.СубконтоДт3 = СтрокаТабличнойЧасти.Номенклатура;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ТоварыУслугиСчетУчета.
//
&НаКлиенте
Процедура ТоварыУслугиСчетУчетаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТоварыУслуги.ТекущиеДанные;
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСчета(
		ЭтотОбъект, ТекущиеДанные, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ТоварыУслугиСубконтоДт1.
//
&НаКлиенте
Процедура ТоварыУслугиСубконтоДт1ПриИзменении(Элемент)
	ПриИзмененииСубконто(1);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ТоварыУслугиСубконтоДт2.
//
&НаКлиенте
Процедура ТоварыУслугиСубконтоДт2ПриИзменении(Элемент)
	ПриИзмененииСубконто(2);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ТоварыУслугиСубконтоДт3.
//
&НаКлиенте
Процедура ТоварыУслугиСубконтоДт3ПриИзменении(Элемент)
	ПриИзмененииСубконто(3);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ТоварыУслугиЦена.
//
&НаКлиенте
Процедура ТоварыУслугиЦенаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ТоварыУслуги.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);	
	ОбновитьПодвал("Патенты");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ТоварыУслугиКоличество.
//
&НаКлиенте
Процедура ТоварыУслугиКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ТоварыУслуги.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);	
	ОбновитьПодвал("Патенты");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ТоварыУслугиСумма.
//
&НаКлиенте
Процедура ТоварыУслугиСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ТоварыУслуги.ТекущиеДанные;	
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ПризнакСтраныЕАЭС", 			Ложь);
	ПараметрыРасчета.Вставить("ПризнакСтраныИмпортЭкспорт", Ложь);
	ПараметрыРасчета.Вставить("СчитатьОтДохода", 			Ложь);
	ПараметрыРасчета.Вставить("Точность", 					2);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	ОбновитьПодвал("Патенты");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбменВалют

&НаКлиенте
Процедура ОбменВалютПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьПодвал("ОбменВалют");
КонецПроцедуры

&НаКлиенте
Процедура ОбменВалютПослеУдаления(Элемент)
	ОбновитьПодвал("ОбменВалют");
КонецПроцедуры

&НаКлиенте
Процедура ОбменВалютВалютаДоПриИзменении(Элемент)
	ОбновитьПодвал("ОбменВалют");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОбменВалютСуммаДо.
//
&НаКлиенте
Процедура ОбменВалютСуммаДоПриИзменении(Элемент)
	СтрокаТабличнойЧасти 			= Элементы.ОбменВалют.ТекущиеДанные;	
	СтрокаТабличнойЧасти.КурсОтчета = ПересчитатьКурсОбмена(СтрокаТабличнойЧасти.СуммаДо, СтрокаТабличнойЧасти.СуммаПосле);
	ОбновитьПодвал("ОбменВалют");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОбменВалютСуммаПосле.
//
&НаКлиенте
Процедура ОбменВалютСуммаПослеПриИзменении(Элемент)
	СтрокаТабличнойЧасти 			= Элементы.ОбменВалют.ТекущиеДанные;	
	СтрокаТабличнойЧасти.КурсОтчета = ПересчитатьКурсОбмена(СтрокаТабличнойЧасти.СуммаДо, СтрокаТабличнойЧасти.СуммаПосле);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОбменВалютКурсОтчета.
//
&НаКлиенте
Процедура ОбменВалютКурсОтчетаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ОбменВалют.ТекущиеДанные;
		
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВалютаДо) И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВалютаПосле) 
		И СтрокаТабличнойЧасти.КурсОтчета <> 0 Тогда
	
		КурсыВалютДоИПосле = ПолучитьКурсыВалют(СтрокаТабличнойЧасти.ВалютаДо, СтрокаТабличнойЧасти.ВалютаПосле, Объект.Дата);
		
		Если КурсыВалютДоИПосле.ВалютаКурсКратностьДо.Курс > КурсыВалютДоИПосле.ВалютаКурсКратностьПосле.Курс
			ИЛИ СтрокаТабличнойЧасти.КурсОтчета < 1 Тогда
			
			СтрокаТабличнойЧасти.СуммаПосле = Окр(СтрокаТабличнойЧасти.СуммаДо * СтрокаТабличнойЧасти.КурсОтчета, 2);
			
		ИначеЕсли КурсыВалютДоИПосле.ВалютаКурсКратностьДо.Курс < КурсыВалютДоИПосле.ВалютаКурсКратностьПосле.Курс Тогда
			СтрокаТабличнойЧасти.СуммаПосле = Окр(СтрокаТабличнойЧасти.СуммаДо / СтрокаТабличнойЧасти.КурсОтчета, 2);
			
		Иначе
			СтрокаТабличнойЧасти.СуммаПосле = СтрокаТабличнойЧасти.СуммаДо;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Асинх Процедура ЗаполнитьАвансыПоОстаткам(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ФизЛицо) Тогда
		Отказ = Ложь;
		
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Сотрудник"". Заполнение закладки ""Авансы"" отменено.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ФизЛицо",,Отказ);
		
		Если Отказ Тогда
			Возврат;	
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ДвижениеДенежныхСредств.Количество() > 0 ИЛИ  Объект.ТаблицаДокументов.Количество() > 0 Тогда   
		ТекстВопроса = НСтр("ru = 'Табличные части закладки ""Авансы"" будут перезаполнены. Продолжить выполнение операции?'");
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;			
	КонецЕсли;
	
	ЗаполнитьАвансыПоОстаткамНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьДокументыПоступления(Команда)
	ПараметрыПодбора = Новый Структура;
	
	ПараметрыПодбора.Вставить("Дата", 			 		 Объект.Дата);
	ПараметрыПодбора.Вставить("Организация", 			 Объект.Организация);
	ПараметрыПодбора.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	
	Если Объект.ОплатаПоставщикам.Количество() > 0 Тогда
		ДанныеТабличнойЧасти(ПараметрыПодбора);
	КонецЕсли;
	
	ОткрытьФорму("Документ.АвансовыйОтчет.Форма.ФормаПодбораДокументовОплаты", ПараметрыПодбора);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура - Установить пиктограмму комментария.
//
&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСуммуВедомости(Ведомость)
	Возврат Ведомость.СуммаДокумента;
КонецФункции

&НаКлиенте
Процедура ОбработатьИзменениеДоговора(СтрокаТабличнойЧасти)
	
	СтруктураДанные = ПолучитьДанныеДоговораПриИзменении(Объект.Организация, Объект.Дата, 
								СтрокаТабличнойЧасти.Контрагент ,СтрокаТабличнойЧасти.ДоговорКонтрагента);	
	
	СтрокаТабличнойЧасти.Курс 		  	= СтруктураДанные.Курс;
	СтрокаТабличнойЧасти.Кратность 		= СтруктураДанные.Кратность;
	СтрокаТабличнойЧасти.Валюта		  	= СтруктураДанные.Валюта;
	СтрокаТабличнойЧасти.СчетРасчетов 	= СтруктураДанные.СчетРасчетов;
			
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеДокументовИзХранилища(АдресЗапасовВХранилище)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	КешДанных = Новый Соответствие();
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		СтрокаТабличнойЧасти = Объект.ОплатаПоставщикам.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаЗагрузки);
		
		СтруктураДанные = КешДанных.Получить(СтрокаТабличнойЧасти.ДоговорКонтрагента);
	
		Если СтруктураДанные = Неопределено Тогда	
			СтруктураДанные = ПолучитьДанныеДоговораПриИзменении(Объект.Организация, Объект.Дата, 
										СтрокаТабличнойЧасти.Контрагент ,СтрокаТабличнойЧасти.ДоговорКонтрагента);
			КешДанных.Вставить(СтрокаТабличнойЧасти.ДоговорКонтрагента, СтруктураДанные); 
		КонецЕсли;
		
		СтрокаТабличнойЧасти.Курс 		  = СтруктураДанные.Курс;
		СтрокаТабличнойЧасти.Кратность 	  = СтруктураДанные.Кратность;
		СтрокаТабличнойЧасти.Валюта		  = СтруктураДанные.Валюта;
		СтрокаТабличнойЧасти.СчетРасчетов = СтруктураДанные.СчетРасчетов;
	КонецЦикла;	
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

&НаСервере
Процедура ДанныеТабличнойЧасти(ПараметрыПодбора)

	ТЗДокументовОплаты  = Объект.ОплатаПоставщикам.Выгрузить(,"ВидДокВходящий");
		
	АдресВХранилище = ПоместитьВоВременноеХранилище(ТЗДокументовОплаты);
	ПараметрыПодбора.Вставить("АдресВХранилище", АдресВХранилище); 
	
КонецПроцедуры

// Процедура устанавливает видимость и доступность элементов.
//
&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()
		
	Если Объект.ПоВедомости Тогда
		Элементы.ВыплатаЗаработнойПлатыФизЛицо.Видимость 	= Ложь;	
		Элементы.ВыплатаЗаработнойПлатыВедомость.Видимость 	= Истина;
		Элементы.ВыплатаЗаработнойПлатыСумма.ТолькоПросмотр = Истина;
	Иначе
		Элементы.ВыплатаЗаработнойПлатыФизЛицо.Видимость 	= Истина;
		Элементы.ВыплатаЗаработнойПлатыВедомость.Видимость 	= Ложь;
		Элементы.ВыплатаЗаработнойПлатыСумма.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	// ТЧ "Прочее".
	КурсВиден = Ложь;
	КратностьВидна = Ложь;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Прочее Цикл
		Если СтрокаТабличнойЧасти.Валюта <> ВалютаРегламентированногоУчета Тогда
			КурсВиден = Истина;	
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти.Кратность > 1 Тогда
			КратностьВидна = Истина;	
		КонецЕсли;
	КонецЦикла;	
	
	Элементы.ПрочееКурс.Видимость = КурсВиден;	
	Элементы.ПрочееКратность.Видимость = КратностьВидна;
	
	// ТЧ "ОплатаПоставщикам".
	КурсВиден = Ложь;
	КратностьВидна = Ложь;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.ОплатаПоставщикам Цикл
		Если СтрокаТабличнойЧасти.Валюта <> ВалютаРегламентированногоУчета Тогда
			КурсВиден = Истина;	
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти.Кратность > 1 Тогда
			КратностьВидна = Истина;	
		КонецЕсли;
	КонецЦикла;	
	
	Элементы.ОплатаПоставщикамКурс.Видимость = КурсВиден;	
	Элементы.ОплатаПоставщикамКратность.Видимость = КратностьВидна;
КонецПроцедуры 

// Процедура настройки условного оформления форм и динамических списков .
//
&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// Только просмотр СубконтоДт1.
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПрочееСубконтоДт1");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Прочее.СубконтоДт1Доступность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Только просмотр СубконтоДт2.
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПрочееСубконтоДт2");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Прочее.СубконтоДт2Доступность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Только просмотр СубконтоДт3.
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПрочееСубконтоДт3");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Прочее.СубконтоДт3Доступность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	// Только просмотр СубконтоДт1.
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТоварыУслугиСубконтоДт1");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТоварыУслуги.СубконтоДт1Доступность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Только просмотр СубконтоДт2.
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТоварыУслугиСубконтоДт2");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТоварыУслуги.СубконтоДт2Доступность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Только просмотр СубконтоДт3.
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТоварыУслугиСубконтоДт3");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТоварыУслуги.СубконтоДт3Доступность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

// Получает набор данных с сервера для процедуры КонтрагентПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Контрагент, Организация)
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Контрагент, Организация);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ДоговорКонтрагента",
		ДоговорПоУмолчанию);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

// Получает договор по умолчанию
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация)
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ВидыДоговораДляДокумента(Документ);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговораПриИзменении(Организация, Дата, Контрагент, Договор)
	СтруктураВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Договор.ВалютаРасчетов, Дата);	
	СтруктураСчета	= БухгалтерскийУчетСервер.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, Договор);
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Валюта", 		 	СтруктураВалюты.Валюта);
	СтруктураДанные.Вставить("Курс", 		 	СтруктураВалюты.Курс);
	СтруктураДанные.Вставить("Кратность", 		СтруктураВалюты.Кратность);
	
	Если Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
		СтруктураДанные.Вставить("СчетРасчетов", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
		
	ИначеЕсли Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		СтруктураДанные.Вставить("СчетРасчетов", СтруктураСчета.СчетРасчетовПокупателя);
		
	ИначеЕсли Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
		СтруктураДанные.Вставить("СчетРасчетов", СтруктураСчета.СчетАвансовПоставщика);
		
	Иначе
		СтруктураДанные.Вставить("СчетРасчетов", СтруктураСчета.СчетРасчетовПоЗаймам);
	КонецЕсли;
		
	Возврат СтруктураДанные;
КонецФункции

&НаСервереБезКонтекста
Функция ПересчитатьКурсОбмена(Сумма, СуммаОтчета)
	Если Сумма <> 0 И СуммаОтчета <> 0 Тогда
		Если СуммаОтчета > Сумма Тогда
			Возврат Окр(СуммаОтчета / Сумма, 4);
		Иначе
			Возврат Окр(Сумма / СуммаОтчета, 4);
		КонецЕсли;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКурсыВалют(ВалютаДо, ВалютаПосле, Дата)

	ВалютаКурсКратностьДо 		= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДо, Дата);
	ВалютаКурсКратностьПосле 	= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаПосле, Дата);	

	Структура = Новый Структура();
	Структура.Вставить("ВалютаКурсКратностьДо", ВалютаКурсКратностьДо);
	Структура.Вставить("ВалютаКурсКратностьПосле", ВалютаКурсКратностьПосле);
	
	Возврат Структура;
КонецФункции // ПолучитьКурсыВалют()

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	// Счета учета
	СчетаУчетаНоменклатуры = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(СтруктураДанные.Организация, СтруктураДанные.Номенклатура);
	СтруктураДанные.Вставить("СчетУчета", СчетаУчетаНоменклатуры.СчетУчета);
	
	// Цены
	СтруктураДанные.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам);
	Цена = Ценообразование.ПолучитьЦенуПоДокументам(СтруктураДанные);
	СтруктураДанные.Вставить("Цена", Цена);

	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаКлиенте
Процедура ЗаполнитьАвансыПоОстаткамНаКлиенте()
	Объект.ДвижениеДенежныхСредств.Очистить();
	Объект.ТаблицаДокументов.Очистить();	
	
	ЗаполнитьАвансыПоОстаткамНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвансыПоОстаткамНаСервере()
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьАвансы(ДатаДокумента);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	Если Объект.ДвижениеДенежныхСредств.Количество() > 0 Тогда
		Объект.ВалютаДокумента = ВалютаРегламентированногоУчета;//Объект.ДвижениеДенежныхСредств[0].Валюта;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКурсИКратность(СтрокаТабличнойЧасти)

	ВалютаКурсКратность = ПолучитьКурсИКратностьВалюты(СтрокаТабличнойЧасти.Валюта);		

	СтрокаТабличнойЧасти.Курс 		= ВалютаКурсКратность.Курс;	
	СтрокаТабличнойЧасти.Кратность 	= ВалютаКурсКратность.Кратность;
КонецПроцедуры

&НаСервере
Функция ПолучитьКурсИКратностьВалюты(Валюта)

	Возврат РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, Объект.Дата);	

КонецФункции // ПолучитьКурсИКратностьВалюты()

// Процедура устанавливает параметры выбора.
//
&НаСервере
Процедура УстановитьПараметрыВыбора()
	
	//// Основные средства.
	//СчетаУчетаОсновныхСредств = БухгалтерскийУчетСервер.СчетаУчетаОсновныхСредств();
	//СчетаУчетаНематериальныхАктивов = БухгалтерскийУчетСервер.СчетаУчетаНематериальныхАктивов();
	//ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУчетаОсновныхСредств, СчетаУчетаНематериальныхАктивов); 
	//// Товары.
	//СчетаУчетаТоваров = БухгалтерскийУчетСервер.СчетаУчетаТоваров();
	//СчетаУчетаМБП = БухгалтерскийУчетСервер.СчетаУчетаМБП();
	//ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУчетаТоваров, СчетаУчетаМБП); 
	//ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУчетаТоваров, СчетаУчетаОсновныхСредств); 
	//
	//ФиксированныйМассивСчетов = Новый ФиксированныйМассив(СчетаУчетаТоваров);
	//НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", ФиксированныйМассивСчетов);
	//НовыйМассив = Новый Массив();
	//НовыйМассив.Добавить(НовыйПараметр);
	//НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	//Элементы.ТоварыУслугиСчетУчета.ПараметрыВыбора = НовыеПараметры;
	
	// Счет учета подотчетного лица.
	СчетаРасчетовСПодотчетнымиЛицами = БухгалтерскийУчетСервер.СчетаРасчетовСПодотчетнымиЛицами();
	ФиксированныйМассивСчетов = Новый ФиксированныйМассив(СчетаРасчетовСПодотчетнымиЛицами);
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", ФиксированныйМассивСчетов);
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.СчетУчета.ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры // УстановитьПараметрыВыбора()

&НаСервере
Процедура ОбновитьПодвал(Закладка = Неопределено)

	Если Закладка = "Оплата" ИЛИ Закладка = Неопределено Тогда		
		ИтогСуммаОплаты = 0;	
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.ОплатаПоставщикам Цикл
			Сумма = СтрокаТабличнойЧасти.Сумма
						* ?(СтрокаТабличнойЧасти.Курс = 0, 1, СтрокаТабличнойЧасти.Курс)
						/ ?(СтрокаТабличнойЧасти.Кратность = 0, 1, СтрокаТабличнойЧасти.Кратность); 					
			
			ИтогСуммаОплаты = ИтогСуммаОплаты + Сумма;	
		КонецЦикла;	
	КонецЕсли; 	
		
	Если Закладка = "Прочее" ИЛИ Закладка = Неопределено Тогда
		ИтогСуммаПрочее = 0;	
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Прочее Цикл
			ИтогСуммаПрочее = ИтогСуммаПрочее + СтрокаТабличнойЧасти.Сумма
									* ?(СтрокаТабличнойЧасти.Курс = 0, 1, СтрокаТабличнойЧасти.Курс)
									/ ?(СтрокаТабличнойЧасти.Кратность = 0, 1, СтрокаТабличнойЧасти.Кратность); 						
		КонецЦикла;	
	КонецЕсли;	
		
	Если Закладка = "ВыплатаЗП" ИЛИ Закладка = Неопределено Тогда
		ИтогСуммаВыплатаЗП = Объект.ВыплатаЗаработнойПлаты.Итог("Сумма");	
	КонецЕсли;	
		
	Если Закладка = "Патенты" ИЛИ Закладка = Неопределено Тогда	
		ИтогСуммаПатенты = Объект.ТоварыУслуги.Итог("Сумма");	
	КонецЕсли;	
		
	Если Закладка = "ОбменВалют" ИЛИ Закладка = Неопределено Тогда
		ИтогСуммаОбменВалют = 0;
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.ОбменВалют Цикл 
			Если СтрокаТабличнойЧасти.ВалютаПосле = ВалютаРегламентированногоУчета Тогда
				ИтогСуммаОбменВалют = ИтогСуммаОбменВалют + СтрокаТабличнойЧасти.СуммаПосле;
			Иначе	
				СтруктураВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтрокаТабличнойЧасти.ВалютаДо, ДатаДокумента);		
				ИтогСуммаОбменВалют = ИтогСуммаОбменВалют + СтрокаТабличнойЧасти.СуммаДо 
							* ?(СтруктураВалюты.Курс = 0, 1, СтруктураВалюты.Курс) 
							/ ?(СтруктураВалюты.Кратность = 0, 1, СтруктураВалюты.Кратность);
			КонецЕсли;
		КонецЦикла;									
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииРаботаССубконто

&НаСервере
Процедура УстановитьНачальныеСвойстваСубконтоТаблицы()
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоТаблицы(
		Объект.Прочее,
		ПараметрыУстановкиСвойствСубконтоПрочее(ЭтотОбъект));
		
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоТаблицы(
		Объект.ТоварыУслуги,
		ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконто(Форма)

	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"ТоварыУслугиСубконтоДт", "СубконтоДт", "СчетУчета");
	
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	Результат.СкрыватьСубконто = Ложь;

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ПриИзмененииСубконто(НомерСубконто)
	
	СтрокаТаблицы = Элементы.ТоварыУслуги.ТекущиеДанные;
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСубконто(
		ЭтотОбъект, 
		СтрокаТаблицы,
		НомерСубконто, 
		ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконтоПрочее(Форма)

	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"ПрочееСубконтоДт", "СубконтоДт", "СчетУчета");
	
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	Результат.СкрыватьСубконто = Ложь;

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ПриИзмененииСубконтоПрочее(НомерСубконто)
	
	СтрокаТаблицы = Элементы.Прочее.ТекущиеДанные;
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСубконто(
		ЭтотОбъект, 
		СтрокаТаблицы,
		НомерСубконто, 
		ПараметрыУстановкиСвойствСубконтоПрочее(ЭтотОбъект));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.РаботаСФайлами

//@skip-warning
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
    РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
    РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент,
		ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
    РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент,
		ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

#КонецОбласти
