
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	
	// РаботаСФормами
	РаботаСФормамиСервер.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом 
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	
	// РаботаСФормами
	РаботаСФормамиСервер.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыФормы = Новый Структура("НачалоПериода, КонецПериода", Объект.НачалоПериода, Объект.КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыФормы, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура Заполнить(Команда)
	
	Если Объект.ЕдиныйНалог.Количество() > 0 Тогда 
        ТекстВопроса = НСтр("ru = 'Данные будут перезаполнены. Продолжить выполнение операции?'");
        Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
        
        Если Ответ = КодВозвратаДиалога.Нет Тогда
            Возврат;
		КонецЕсли;	

		Объект.ЕдиныйНалог.Очистить();
    КонецЕсли;
    
    ЗаполнитьНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Объект, РезультатВыбора, "НачалоПериода,КонецПериода");
	
КонецПроцедуры

// Процедура - Установить пиктограмму комментария.
//
&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

// Процедура заполнения ТЧ "ЕдиныйНалог".
//
&НаСервере
Процедура ЗаполнитьНаСервере()

	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗакрытиеМесяца.ВидДеятельности КАК ВидДеятельности,
		|	СУММА(ЗакрытиеМесяца.СуммаНаличная) КАК СуммаНаличная,
		|	СУММА(ЗакрытиеМесяца.СуммаБезналичная) КАК СуммаБезналичная,
		|	СУММА(ЗакрытиеМесяца.СуммаНаличнаяЕдиныйНалог) КАК СуммаНаличнаяЕдиныйНалог,
		|	СУММА(ЗакрытиеМесяца.СуммаБезналичнаяЕдиныйНалог) КАК СуммаБезналичнаяЕдиныйНалог
		|ИЗ
		|	Документ.ЗакрытиеМесяца.ЕдиныйНалог КАК ЗакрытиеМесяца
		|ГДЕ
		|	ЗакрытиеМесяца.Ссылка.Проведен
		|	И ЗакрытиеМесяца.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ЗакрытиеМесяца.Ссылка.Организация = &Организация
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗакрытиеМесяца.ВидДеятельности";	
	Запрос.УстановитьПараметр("НачалоПериода", Объект.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Объект.КонецПериода));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Нет данных по единому налогу за указанный период. Заполнение отменено.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;	
	КонецЕсли;	
	
	Пока Выборка.Следующий() Цикл
		СтрокаТабличнойЧасти = Объект.ЕдиныйНалог.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
	КонецЦикла;
	
	//// ППТ - переработка производство торговля
	//ППТ_СуммаНаличная 				= 0;
	//ППТ_СуммаБезналичная 			= 0;
	//ППТ_СуммаНаличнаяЕдиныйНалог 	= 0;
	//ППТ_СуммаБезналичнаяЕдиныйНалог = 0;
	//
	//// П - прочее
	//П_СуммаНаличная 				= 0;
	//П_СуммаБезналичная 				= 0;
	//П_СуммаНаличнаяЕдиныйНалог 		= 0;
	//П_СуммаБезналичнаяЕдиныйНалог 	= 0;
	//
	//Пока Выборка.Следующий() Цикл
	//	
	//	Если Выборка.ВидДеятельности = Перечисления.ВидыДеятельностиЕН.ПереработкаПроизводствоТорговля Тогда			
	//		ППТ_СуммаНаличная 				= ППТ_СуммаНаличная 				+ Выборка.СуммаНаличная;
	//		ППТ_СуммаБезналичная 			= ППТ_СуммаБезналичная 				+ Выборка.СуммаБезналичная;
	//		ППТ_СуммаНаличнаяЕдиныйНалог 	= ППТ_СуммаНаличнаяЕдиныйНалог 		+ Выборка.СуммаНаличнаяЕдиныйНалог;
	//		ППТ_СуммаБезналичнаяЕдиныйНалог = ППТ_СуммаБезналичнаяЕдиныйНалог 	+ Выборка.СуммаБезналичнаяЕдиныйНалог;
	//		
	//	Иначе
	//		П_СуммаНаличная 				= П_СуммаНаличная 					+ Выборка.СуммаНаличная;
	//		П_СуммаБезналичная 				= П_СуммаБезналичная 				+ Выборка.СуммаБезналичная;
	//		П_СуммаНаличнаяЕдиныйНалог 		= П_СуммаНаличнаяЕдиныйНалог 		+ Выборка.СуммаНаличнаяЕдиныйНалог;
	//		П_СуммаБезналичнаяЕдиныйНалог 	= П_СуммаБезналичнаяЕдиныйНалог 	+ Выборка.СуммаБезналичнаяЕдиныйНалог;
	//	КонецЕсли;			
	//КонецЦикла;	
	//
	//// Строка по виду деятельности "ПереработкаПроизводствоТорговля"
	//СтрокаТабличнойЧасти = Объект.ЕдиныйНалог.Добавить();
	//СтрокаТабличнойЧасти.ВидДеятельности 				= Перечисления.ВидыДеятельностиЕН.ПереработкаПроизводствоТорговля;
	//СтрокаТабличнойЧасти.СуммаНаличная 					= ППТ_СуммаНаличная;
	//СтрокаТабличнойЧасти.СуммаБезналичная 				= ППТ_СуммаБезналичная;
	//СтрокаТабличнойЧасти.СуммаНаличнаяЕдиныйНалог 		= ППТ_СуммаНаличнаяЕдиныйНалог;
	//СтрокаТабличнойЧасти.СуммаБезналичнаяЕдиныйНалог 	= ППТ_СуммаБезналичнаяЕдиныйНалог;
	//
	//// Строка по виду деятельности "Прочее"
	//СтрокаТабличнойЧасти = Объект.ЕдиныйНалог.Добавить();
	//СтрокаТабличнойЧасти.ВидДеятельности 				= Перечисления.ВидыДеятельностиЕН.Прочее;
	//СтрокаТабличнойЧасти.СуммаНаличная 					= П_СуммаНаличная;
	//СтрокаТабличнойЧасти.СуммаБезналичная 				= П_СуммаБезналичная;
	//СтрокаТабличнойЧасти.СуммаНаличнаяЕдиныйНалог 		= П_СуммаНаличнаяЕдиныйНалог;
	//СтрокаТабличнойЧасти.СуммаБезналичнаяЕдиныйНалог 	= П_СуммаБезналичнаяЕдиныйНалог;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
