#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ЗаполненияДокумента

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.ВозвратТоваровОтПокупателя - Данные заполнения документа.
//	
Процедура ЗаполнитьПоВозвратуОтПокупателя(ДанныеЗаполнения) Экспорт
	
	Организация			= ДанныеЗаполнения.Организация;
	Контрагент			= ДанныеЗаполнения.Контрагент;
	ДоговорКонтрагента  = ДанныеЗаполнения.ДоговорКонтрагента;
	ВалютаДокумента     = ДанныеЗаполнения.ВалютаДокумента;
	СуммаВключаетНалоги	= ДанныеЗаполнения.СуммаВключаетНалоги;	
	СуммаДокумента      = ДанныеЗаполнения.СуммаДокумента;
	СуммаВключаетНалоги	= ДанныеЗаполнения.СуммаВключаетНалоги;
	ВозвратТоваров		= Истина;
	ЭкспортнаяПоставка	= ДанныеЗаполнения.ЭкспортнаяПоставка;
	
	Если ДанныеЗаполнения.БезвозмезднаяПоставка Тогда
		ФормаОплаты = Перечисления.ФормыОплаты.БезвозмезднаяПоставка;	
	ИначеЕсли ДанныеЗаполнения.БезналичныйРасчет Тогда
		ФормаОплаты = Перечисления.ФормыОплаты.Безналичная;
	Иначе
		ФормаОплаты = Перечисления.ФормыОплаты.Наличная;
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧастиТовары Из ДанныеЗаполнения.Товары Цикл
		СтрокаТабличнойЧасти = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТабличнойЧастиТовары);
		
		СтрокаТабличнойЧасти.Сумма 		 = -СтрокаТабличнойЧасти.Сумма;
		СтрокаТабличнойЧасти.СуммаНСП 	 = -СтрокаТабличнойЧасти.СуммаНСП;
		СтрокаТабличнойЧасти.СуммаДохода = -СтрокаТабличнойЧасти.СуммаДохода;
		СтрокаТабличнойЧасти.Всего		 = -СтрокаТабличнойЧасти.Всего;
		
		СтрокаТабличнойЧасти.ДокументОснование 	= ДанныеЗаполнения;
		СтрокаТабличнойЧасти.КлючСвязи			= 1;
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧастиУслуги Из ДанныеЗаполнения.Услуги Цикл
		СтрокаТабличнойЧасти = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТабличнойЧастиУслуги);
		
		СтрокаТабличнойЧасти.Сумма 		 = -СтрокаТабличнойЧасти.Сумма;
		СтрокаТабличнойЧасти.СуммаНСП 	 = -СтрокаТабличнойЧасти.СуммаНСП;
		СтрокаТабличнойЧасти.СуммаДохода = -СтрокаТабличнойЧасти.СуммаДохода;
		СтрокаТабличнойЧасти.Всего		 = -СтрокаТабличнойЧасти.Всего;
		
		СтрокаТабличнойЧасти.ДокументОснование 	= ДанныеЗаполнения;
		СтрокаТабличнойЧасти.КлючСвязи			= 1;
	КонецЦикла;
	
	СтрокаТабличнойЧастиДокументы = ДокументыОснования.Добавить();
	СтрокаТабличнойЧастиДокументы.ДокументОснование = ДанныеЗаполнения;
	СтрокаТабличнойЧастиДокументы.КлючСвязи			= 1;
	СтрокаТабличнойЧастиДокументы.Сумма 			= -(ДанныеЗаполнения.Товары.Итог("Сумма") + ДанныеЗаполнения.Услуги.Итог("Сумма"));
	СтрокаТабличнойЧастиДокументы.СуммаНСП 			= -(ДанныеЗаполнения.Товары.Итог("СуммаНСП") + ДанныеЗаполнения.Услуги.Итог("СуммаНСП"));
	СтрокаТабличнойЧастиДокументы.Всего 			= -(ДанныеЗаполнения.Товары.Итог("Всего") + ДанныеЗаполнения.Услуги.Итог("Всего"));
	СтрокаТабличнойЧастиДокументы.СуммаДохода 		= -(ДанныеЗаполнения.Товары.Итог("СуммаДохода") + ДанныеЗаполнения.Услуги.Итог("СуммаДохода"));
	СтрокаТабличнойЧастиДокументы.Валюта			= ДанныеЗаполнения.ВалютаДокумента;
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.РеализацияТоваровУслуг - Данные заполнения документа.
//	
Процедура ЗаполнитьПоРеализацииТоваровУслуг(ДанныеЗаполнения) Экспорт
	
	Организация			= ДанныеЗаполнения.Организация;
	Контрагент			= ДанныеЗаполнения.Контрагент;
	ДоговорКонтрагента  = ДанныеЗаполнения.ДоговорКонтрагента;
	ВалютаДокумента     = ДанныеЗаполнения.ВалютаДокумента;
	СуммаВключаетНалоги	= ДанныеЗаполнения.СуммаВключаетНалоги;	
	СуммаДокумента      = ДанныеЗаполнения.СуммаДокумента;
	СуммаВключаетНалоги	= ДанныеЗаполнения.СуммаВключаетНалоги;
	ЭкспортнаяПоставка	= ДанныеЗаполнения.ЭкспортнаяПоставка;
	
	Если ДанныеЗаполнения.БезвозмезднаяПоставка Тогда
		ФормаОплаты = Перечисления.ФормыОплаты.БезвозмезднаяПоставка;	
	ИначеЕсли ДанныеЗаполнения.БезналичныйРасчет Тогда
		ФормаОплаты = Перечисления.ФормыОплаты.Безналичная;
	Иначе
		ФормаОплаты = Перечисления.ФормыОплаты.Наличная;
	КонецЕсли;	
	
	Для Каждого СтрокаТабличнойЧастиТовары Из ДанныеЗаполнения.Товары Цикл
		СтрокаТабличнойЧасти = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТабличнойЧастиТовары);
		
		СтрокаТабличнойЧасти.ДокументОснование 	= ДанныеЗаполнения;
		СтрокаТабличнойЧасти.КлючСвязи			= 1;
	КонецЦикла;	
	
	Для Каждого СтрокаТабличнойЧастиУслуги Из ДанныеЗаполнения.Услуги Цикл
		СтрокаТабличнойЧасти = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТабличнойЧастиУслуги);
		
		СтрокаТабличнойЧасти.ДокументОснование 	= ДанныеЗаполнения;
		СтрокаТабличнойЧасти.КлючСвязи			= 1;
	КонецЦикла;
	
	СтрокаТабличнойЧастиДокументы = ДокументыОснования.Добавить();
	СтрокаТабличнойЧастиДокументы.ДокументОснование = ДанныеЗаполнения;
	СтрокаТабличнойЧастиДокументы.КлючСвязи			= 1;
	СтрокаТабличнойЧастиДокументы.Сумма 			= ДанныеЗаполнения.Товары.Итог("Сумма") + ДанныеЗаполнения.Услуги.Итог("Сумма");
	СтрокаТабличнойЧастиДокументы.СуммаНСП 			= ДанныеЗаполнения.Товары.Итог("СуммаНСП") + ДанныеЗаполнения.Услуги.Итог("СуммаНСП");
	СтрокаТабличнойЧастиДокументы.Всего 			= ДанныеЗаполнения.Товары.Итог("Всего") + ДанныеЗаполнения.Услуги.Итог("Всего");
	СтрокаТабличнойЧастиДокументы.СуммаДохода 		= ДанныеЗаполнения.Товары.Итог("СуммаДохода") + ДанныеЗаполнения.Услуги.Итог("СуммаДохода");
	СтрокаТабличнойЧастиДокументы.Валюта			= ДанныеЗаполнения.ВалютаДокумента;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) Экспорт 
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")] = "ЗаполнитьПоВозвратуОтПокупателя";
	СтратегияЗаполнения[Тип("ДокументСсылка.РеализацияТоваровУслуг")] = "ЗаполнитьПоРеализацииТоваровУслуг";
	
	ЗаполнениеОбъектовБП.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)	
	ВыполнитьПредварительныйКонтроль(Отказ);
КонецПроцедуры

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СуммаДокумента = ДокументыОснования.Итог("Сумма");	
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ИнициализироватьДанные(Отказ, РежимПроведения);
	
	ОтразитьДвижения(Отказ, РежимПроведения);
	
	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	СерияБланкаСФ = "";
	НомерБланкаСФ = "";
	ДатаПоставки = '00010101';
	ЭкспортнаяПоставка = Ложь;
	КодПоставкиНДС = Справочники.КодыПоставокНДС.ПустаяСсылка();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииОбработкаПроведения

// Процедура инициализирует данные документа
// и подготавливает таблицы для движения в регистры
//
Процедура ИнициализироватьДанные(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.ОбщийСчетФактураВыписанный.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
КонецПроцедуры
	
// Процедура заполняет регистры данными
//
Процедура ОтразитьДвижения(Отказ, РежимПроведения)

	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьБланкиСчетовФактур(ДополнительныеСвойства, Движения, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет контроль противоречий.
//
Процедура ВыполнитьПредварительныйКонтроль(Отказ)
	
	// Проверка наличия серии и номера СФ в базе.
	Если ЗначениеЗаполнено(СерияБланкаСФ) И СерияБланкаСФ <> "ДПБУ" Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	БланкиСчетовФактурОбороты.СерияБланкаСФ КАК СерияБланкаСФ,
			|	БланкиСчетовФактурОбороты.Регистратор КАК Регистратор,
			|	ЕСТЬNULL(БланкиСчетовФактурОбороты.КоличествоРасход, 0) КАК КоличествоРасход,
			|	ЕСТЬNULL(БланкиСчетовФактурОбороты.КоличествоПриход, 0) КАК КоличествоПриход
			|ПОМЕСТИТЬ ВременнаяТаблицаБланкиСчетовФактур
			|ИЗ
			|	РегистрНакопления.БланкиСчетовФактур.Обороты(
			|			,
			|			&КонецПериода,
			|			Авто,
			|			Организация = &Организация
			|				И СерияБланкаСФ = &СерияБланкаСФ
			|				И НомерБланкаСФ = &НомерБланкаСФ) КАК БланкиСчетовФактурОбороты
			|ГДЕ
			|	НЕ БланкиСчетовФактурОбороты.Регистратор = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВременнаяТаблицаБланкиСчетовФактур.СерияБланкаСФ КАК СерияБланкаСФ,
			|	ВременнаяТаблицаБланкиСчетовФактур.КоличествоПриход КАК КоличествоПриход
			|ИЗ
			|	ВременнаяТаблицаБланкиСчетовФактур КАК ВременнаяТаблицаБланкиСчетовФактур
			|ГДЕ
			|	ВременнаяТаблицаБланкиСчетовФактур.КоличествоПриход > 0
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВременнаяТаблицаБланкиСчетовФактур.СерияБланкаСФ КАК СерияБланкаСФ,
			|	ВременнаяТаблицаБланкиСчетовФактур.Регистратор КАК Регистратор,
			|	ВременнаяТаблицаБланкиСчетовФактур.КоличествоРасход КАК КоличествоРасход
			|ИЗ
			|	ВременнаяТаблицаБланкиСчетовФактур КАК ВременнаяТаблицаБланкиСчетовФактур
			|ГДЕ
			|	ВременнаяТаблицаБланкиСчетовФактур.КоличествоРасход > 0";
		Запрос.УстановитьПараметр("КонецПериода", Дата);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("СерияБланкаСФ", СерияБланкаСФ);
		Запрос.УстановитьПараметр("НомерБланкаСФ", НомерБланкаСФ);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		              
		Если МассивРезультатов[1].Пустой() Тогда
			ТекстСообщения = НСтр("ru = 'Указанных серии или номера СФ нет в базе. Необходимо оформить документ ""Поступление бланков счетов-фактур"".'");
			БухгалтерскийУчетСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения,,,, Отказ);	
		ИначеЕсли НЕ МассивРезультатов[2].Пустой() Тогда
			ВыборкаДетальныеЗаписи = МассивРезультатов[2].Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Указанные серия и номер СФ уже использованы. %1.'"), ВыборкаДетальныеЗаписи.Регистратор);
			БухгалтерскийУчетСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения,,,, Отказ);	
		КонецЕсли;			
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокументыОснования.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДокументыОснования.Валюта КАК Валюта
		|ПОМЕСТИТЬ ВременнаяТаблицаДокументыОснования
		|ИЗ
		|	&ТаблицаДокументыОснования КАК ТаблицаДокументыОснования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаДокументыОснования.НомерСтроки
		|ИЗ
		|	ВременнаяТаблицаДокументыОснования КАК ВременнаяТаблицаДокументыОснования
		|ГДЕ
		|	ВременнаяТаблицаДокументыОснования.Валюта <> &Валюта";
	Запрос.УстановитьПараметр("ТаблицаТовары", Товары);
	Запрос.УстановитьПараметр("ТаблицаДокументыОснования", ДокументыОснования);
	Запрос.УстановитьПараметр("Валюта", ВалютаДокумента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТекстСообщения = СтрШаблон(НСтр("ru = 'В табличной части ""Документы"" в строке номер %1 валюта отличается от валюты документа.'"), Выборка.НомерСтроки);
		БухгалтерскийУчетСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения,,,, Отказ);	
	КонецЦикла;
КонецПроцедуры // ВыполнитьПредварительныйКонтроль()

// Процедура заполнения табличной части "ДокументыОснования".
//
Процедура ЗаполнитьДокументыОснования() Экспорт

	// Заполнение массива контрагентов,
	// при включенной настройке добавляются филиалы.
	Контрагенты = Новый Массив;
	Контрагенты.Добавить(Контрагент);
	
	ПечататьСчетаФактурыСГоловнымКонтрагентом = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьЗначениеКонстанты("ПечататьСчетаФактурыСГоловнымКонтрагентом");
	Если ПечататьСчетаФактурыСГоловнымКонтрагентом Или ВключаяФилиалы Тогда 
		ПодчиненныеКонтрагенты = Справочники.Контрагенты.ПодчиненныеКонтрагенты(Контрагент);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Контрагенты, ПодчиненныеКонтрагенты); 
	КонецЕсли;	
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Отбор документов по периоду, контрагенту и организации,
	// а также отсечение документов уже использованных в счет фактурах выписанных.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка КАК Документ,
		|	РеализацияТоваровУслуг.СерияБланкаСФ КАК СерияБланкаСФ,
		|	РеализацияТоваровУслуг.НомерБланкаСФ КАК НомерБланкаСФ
		|ПОМЕСТИТЬ ВременнаяТаблицаБланкиСФ
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВозвратТоваровОтПокупателя.Ссылка,
		|	ВозвратТоваровОтПокупателя.СерияБланкаСФ,
		|	ВозвратТоваровОтПокупателя.НомерБланкаСФ
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПродажиОбороты.ДокументРеализации КАК ДокументОснование,
		|	ПродажиОбороты.БезналичныйРасчет КАК БезналичныйРасчет,
		|	ПродажиОбороты.БезвозмезднаяПоставка КАК БезвозмезднаяПоставка,
		|	ПродажиОбороты.Договор КАК ДоговорКонтрагента
		|ПОМЕСТИТЬ ВременнаяТаблицаДокументы
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Авто,
		|			Организация = &Организация
		|				И Контрагент В (&Контрагенты)) КАК ПродажиОбороты";
	Запрос.УстановитьПараметр("Ссылка", 			Ссылка);
	Запрос.УстановитьПараметр("НачалоПериода", 		НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонецПериода", 		КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("Контрагенты", Контрагенты);
	Запрос.Выполнить();
	
	Отбор = 
		"ВременнаяТаблицаДокументы.ДоговорКонтрагента.ВалютаРасчетов = &Валюта
		|	И ВЫБОР
		|		КОГДА &ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ВременнаяТаблицаДокументы.ДоговорКонтрагента = &ДоговорКонтрагента
		|	КОНЕЦ
		|	И ВЫБОР
		|		КОГДА &ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.БезвозмезднаяПоставка)
		|			ТОГДА ВременнаяТаблицаДокументы.БезвозмезднаяПоставка = ИСТИНА
		|		КОГДА &ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная)
		|			ТОГДА ВременнаяТаблицаДокументы.БезналичныйРасчет = ЛОЖЬ
		|		КОГДА &ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная)
		|			ТОГДА ВременнаяТаблицаДокументы.БезналичныйРасчет = ИСТИНА
		|		КОГДА &ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Смешанная)
		|			ТОГДА ИСТИНА
		|	КОНЕЦ";
	
	КлючСвязи = 1;
	
	// Подбор документов "Возврат товаров от покупателя"
	Если ВозвратТоваров Тогда
		ОтборПоСФ =
			"И ЕСТЬNULL(ВременнаяТаблицаБланкиСФ.СерияБланкаСФ, """") = """"
			|	И ЕСТЬNULL(ВременнаяТаблицаБланкиСФ.НомерБланкаСФ, """") = """"";
		
		// Получение документов с отбором по ставкам и значению безналичного расчета.
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = 		
			"ВЫБРАТЬ
			|	ВременнаяТаблицаДокументы.ДокументОснование,
			|	ВременнаяТаблицаДокументы.ДоговорКонтрагента.ВалютаРасчетов КАК Валюта
			|ИЗ
			|	ВременнаяТаблицаДокументы КАК ВременнаяТаблицаДокументы
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаБланкиСФ КАК ВременнаяТаблицаБланкиСФ
			|		ПО ВременнаяТаблицаДокументы.ДокументОснование = ВременнаяТаблицаБланкиСФ.Документ
		 	|ГДЕ " + Отбор + " 
			|	И ВременнаяТаблицаДокументы.ДокументОснование ССЫЛКА Документ.ВозвратТоваровОтПокупателя
			|	" + ОтборПоСФ;
		Запрос.УстановитьПараметр("Валюта", 			ВалютаДокумента);
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
		Запрос.УстановитьПараметр("ФормаОплаты", 		ФормаОплаты);

		Выборка = Запрос.Выполнить().Выбрать();
		                        
		Если Выборка.Количество() > 0 Тогда
			
			Пока Выборка.Следующий() Цикл
            	СтрокаТабличнойЧасти = ДокументыОснования.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
				СтрокаТабличнойЧасти.КлючСвязи			= КлючСвязи;
				СтрокаТабличнойЧасти.Сумма 				= -(Выборка.ДокументОснование.Товары.Итог("Сумма")
															+ Выборка.ДокументОснование.Услуги.Итог("Сумма"));
				СтрокаТабличнойЧасти.СуммаНСП 			= -(Выборка.ДокументОснование.Товары.Итог("СуммаНСП")
															+ Выборка.ДокументОснование.Услуги.Итог("СуммаНСП"));
				СтрокаТабличнойЧасти.СуммаДохода 		= -(Выборка.ДокументОснование.Товары.Итог("СуммаДохода")
															+ Выборка.ДокументОснование.Услуги.Итог("СуммаДохода"));
				СтрокаТабличнойЧасти.Всего 				= -(Выборка.ДокументОснование.Товары.Итог("Всего")
															+ Выборка.ДокументОснование.Услуги.Итог("Всего"));
															
				КлючСвязи = КлючСвязи + 1;																
			КонецЦикла;
			
			СуммаДокумента = ДокументыОснования.Итог("Сумма");
			
		Иначе
			// 1. Получение всех оставшихся документов, кроме полученных в первом пакете для
			// проверки наличия таковых и показа пользователю соответствующего сообщения.
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			Запрос.Текст = 		
				"ВЫБРАТЬ
				|	ВременнаяТаблицаДокументы.ДокументОснование КАК ДокументОснование,
				|	ВременнаяТаблицаДокументы.ДоговорКонтрагента.ВалютаРасчетов КАК Валюта
				|ИЗ
				|	ВременнаяТаблицаДокументы КАК ВременнаяТаблицаДокументы
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаБланкиСФ КАК ВременнаяТаблицаБланкиСФ
				|		ПО ВременнаяТаблицаДокументы.ДокументОснование = ВременнаяТаблицаБланкиСФ.Документ
				|ГДЕ
				|	 " + Отбор + "
				|	И ВременнаяТаблицаДокументы.ДокументОснование ССЫЛКА Документ.ВозвратТоваровОтПокупателя
				|	" + ОтборПоСФ + "
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВременнаяТаблицаДокументы.ДокументОснование
				|ИЗ
				|	ВременнаяТаблицаДокументы КАК ВременнаяТаблицаДокументы
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаБланкиСФ КАК ВременнаяТаблицаБланкиСФ
				|		ПО ВременнаяТаблицаДокументы.ДокументОснование = ВременнаяТаблицаБланкиСФ.Документ
				|ГДЕ
				|	НЕ(" + Отбор + ")
				|	И ВременнаяТаблицаДокументы.ДокументОснование ССЫЛКА Документ.ВозвратТоваровОтПокупателя
				|	" + ОтборПоСФ;
			Запрос.УстановитьПараметр("Валюта", 			ВалютаДокумента);
			Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
			Запрос.УстановитьПараметр("ФормаОплаты", 		ФормаОплаты);

			РезультатЗапроса = Запрос.ВыполнитьПакет();
			
			Выборка = РезультатЗапроса[0].Выбрать();
			
			Пока Выборка.Следующий() Цикл
				СтрокаТабличнойЧасти = ДокументыОснования.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
				СтрокаТабличнойЧасти.КлючСвязи			= КлючСвязи;
				СтрокаТабличнойЧасти.Сумма 				= -(Выборка.ДокументОснование.Товары.Итог("Сумма")
															+ Выборка.ДокументОснование.Услуги.Итог("Сумма"));
				СтрокаТабличнойЧасти.СуммаНСП 			= -(Выборка.ДокументОснование.Товары.Итог("СуммаНСП")
															+ Выборка.ДокументОснование.Услуги.Итог("СуммаНСП"));
				СтрокаТабличнойЧасти.СуммаДохода 		= -(Выборка.ДокументОснование.Товары.Итог("СуммаДохода")
															+ Выборка.ДокументОснование.Услуги.Итог("СуммаДохода"));
				СтрокаТабличнойЧасти.Всего 				= -(Выборка.ДокументОснование.Товары.Итог("Всего")
															+ Выборка.ДокументОснование.Услуги.Итог("Всего"));
				
				КлючСвязи = КлючСвязи + 1;	
			КонецЦикла;
			
			СуммаДокумента = ДокументыОснования.Итог("Сумма");
			
			Если НЕ РезультатЗапроса[1].Пустой() И ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Для контрагента %1 обнаружены документы возврата с другим договором.'"), 
									Контрагент);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);		
			КонецЕсли;		
		КонецЕсли;
		
	// Подбор документов "Реализация товаров услуг"
	Иначе
		ОтборПоСФ =
			"И ЕСТЬNULL(ВременнаяТаблицаБланкиСФ.СерияБланкаСФ, """") = """"
			|	И ЕСТЬNULL(ВременнаяТаблицаБланкиСФ.НомерБланкаСФ, """") = """"";
		
		// Получение документов с отбором по ставкам, значению безналичного расчета,
		// и наличия пустых значений серии и номера бланка счет фактуры.
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = 		
			"ВЫБРАТЬ
			|	ВременнаяТаблицаДокументы.ДокументОснование КАК ДокументОснование,
			|	ВременнаяТаблицаДокументы.ДоговорКонтрагента.ВалютаРасчетов КАК Валюта
			|ИЗ
			|	ВременнаяТаблицаДокументы КАК ВременнаяТаблицаДокументы
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаБланкиСФ КАК ВременнаяТаблицаБланкиСФ
			|		ПО ВременнаяТаблицаДокументы.ДокументОснование = ВременнаяТаблицаБланкиСФ.Документ
			|ГДЕ
			|	" + Отбор + "
			|	И ВременнаяТаблицаДокументы.ДокументОснование ССЫЛКА Документ.РеализацияТоваровУслуг
			|	" + ОтборПоСФ;	
		
		Запрос.УстановитьПараметр("Валюта", 			ВалютаДокумента);
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
		Запрос.УстановитьПараметр("ФормаОплаты", 		ФормаОплаты);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() > 0 Тогда
			
			Пока Выборка.Следующий() Цикл
            	СтрокаТабличнойЧасти = ДокументыОснования.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
				СтрокаТабличнойЧасти.КлючСвязи			= КлючСвязи;
				СтрокаТабличнойЧасти.Сумма 				= Выборка.ДокументОснование.Товары.Итог("Сумма")
															+ Выборка.ДокументОснование.Услуги.Итог("Сумма");
				СтрокаТабличнойЧасти.СуммаНСП 			= Выборка.ДокументОснование.Товары.Итог("СуммаНСП")
															+ Выборка.ДокументОснование.Услуги.Итог("СуммаНСП");
				СтрокаТабличнойЧасти.СуммаДохода 		= Выборка.ДокументОснование.Товары.Итог("СуммаДохода")
															+ Выборка.ДокументОснование.Услуги.Итог("СуммаДохода");
				СтрокаТабличнойЧасти.Всего 				= Выборка.ДокументОснование.Товары.Итог("Всего")
															+ Выборка.ДокументОснование.Услуги.Итог("Всего");
															
				КлючСвязи = КлючСвязи + 1;											
			КонецЦикла;
			
			СуммаДокумента = ДокументыОснования.Итог("Сумма");
			
		Иначе
			// 1. Получение всех оставшихся документов, кроме полученных в первом пакете для
			// проверки наличия таковых и показа пользователю соответствующего сообщения.
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			Запрос.Текст = 		
				"ВЫБРАТЬ
				|	ВременнаяТаблицаДокументы.ДокументОснование КАК ДокументОснование,
				|	ВременнаяТаблицаДокументы.ДоговорКонтрагента.ВалютаРасчетов КАК Валюта
				|ИЗ
				|	ВременнаяТаблицаДокументы КАК ВременнаяТаблицаДокументы
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаБланкиСФ КАК ВременнаяТаблицаБланкиСФ
				|		ПО ВременнаяТаблицаДокументы.ДокументОснование = ВременнаяТаблицаБланкиСФ.Документ
				|ГДЕ
				|	 " + Отбор + "
				|	И ВременнаяТаблицаДокументы.ДокументОснование ССЫЛКА Документ.РеализацияТоваровУслуг
				|	" + ОтборПоСФ + "
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВременнаяТаблицаДокументы.ДокументОснование КАК ДокументОснование
				|ИЗ
				|	ВременнаяТаблицаДокументы КАК ВременнаяТаблицаДокументы
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаБланкиСФ КАК ВременнаяТаблицаБланкиСФ
				|		ПО ВременнаяТаблицаДокументы.ДокументОснование = ВременнаяТаблицаБланкиСФ.Документ
				|ГДЕ
				|	НЕ( " + Отбор + " )
				|	И ВременнаяТаблицаДокументы.ДокументОснование ССЫЛКА Документ.РеализацияТоваровУслуг
				|	" + ОтборПоСФ;
			Запрос.УстановитьПараметр("Валюта", 			ВалютаДокумента);
			Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
			Запрос.УстановитьПараметр("ФормаОплаты", 		ФормаОплаты);
			
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			
			Выборка = РезультатЗапроса[0].Выбрать();
			
			Пока Выборка.Следующий() Цикл
				СтрокаТабличнойЧасти = ДокументыОснования.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
				СтрокаТабличнойЧасти.КлючСвязи			= КлючСвязи;
				СтрокаТабличнойЧасти.Сумма 				= Выборка.ДокументОснование.Товары.Итог("Сумма")
															+ Выборка.ДокументОснование.Услуги.Итог("Сумма");
				СтрокаТабличнойЧасти.СуммаНСП 			= Выборка.ДокументОснование.Товары.Итог("СуммаНСП")
															+ Выборка.ДокументОснование.Услуги.Итог("СуммаНСП");
				СтрокаТабличнойЧасти.СуммаДохода 		= Выборка.ДокументОснование.Товары.Итог("СуммаДохода")
															+ Выборка.ДокументОснование.Услуги.Итог("СуммаДохода");
				СтрокаТабличнойЧасти.Всего 				= Выборка.ДокументОснование.Товары.Итог("Всего")
															+ Выборка.ДокументОснование.Услуги.Итог("Всего");
				
				КлючСвязи = КлючСвязи + 1;	
			КонецЦикла;
			
			СуммаДокумента = ДокументыОснования.Итог("Сумма");
			
			Если НЕ РезультатЗапроса[1].Пустой() И ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Для контрагента %1 обнаружены документы реализации с другим договором.'"), 
									Контрагент);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);		
			КонецЕсли;	
		КонецЕсли;			
	КонецЕсли;
КонецПроцедуры

// Процедура заполняет табличную часть "Товары" по документам,
// подобранным в табличной части "ДокументыПоступления".
//
// Параметры:
//	ВозвратОтПокупателя - Булево - реквизит "Возврат" данного документа 
//
Процедура ЗаполнитьПоПодобраннымДокументам() Экспорт

	МассивДокументов = ДокументыОснования.Выгрузить().ВыгрузитьКолонку("ДокументОснование");
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(Дата, Организация);
	
	Запрос = Новый Запрос;         
	
	Если ВозвратТоваров Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВозвратТоваровОтПокупателяТовары.Ссылка КАК ДокументОснование,
			|	ВЫБОР
			|		КОГДА &ПлательщикНСП
			|			ТОГДА ВозвратТоваровОтПокупателяТовары.СтавкаНСП
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтавкИНСП.ПустаяСсылка)
			|	КОНЕЦ КАК СтавкаНСП,
			|	ВозвратТоваровОтПокупателяТовары.Номенклатура КАК Номенклатура,
			|	ВозвратТоваровОтПокупателяТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	-ВозвратТоваровОтПокупателяТовары.Количество КАК Количество,
			|	ВозвратТоваровОтПокупателяТовары.Цена КАК Цена,
			|	-ВозвратТоваровОтПокупателяТовары.Сумма КАК Сумма,
			|	ВЫБОР
			|		КОГДА &ПлательщикНСП
			|			ТОГДА -ВозвратТоваровОтПокупателяТовары.СуммаНСП
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК СуммаНСП,
			|	-ВозвратТоваровОтПокупателяТовары.Всего КАК Всего,
			|	-ВозвратТоваровОтПокупателяТовары.СуммаДохода КАК СуммаДохода,
			|	-ВозвратТоваровОтПокупателяТовары.СуммаСкидки КАК СуммаСкидки,
			|	-ВозвратТоваровОтПокупателяТовары.СуммаВВалютеРеглУчета КАК СуммаВВалютеРеглУчета,
			|	ВЫБОР
			|		КОГДА &ПлательщикНСП
			|			ТОГДА -ВозвратТоваровОтПокупателяТовары.СуммаНСПВВалютеРеглУчета
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК СуммаНСПВВалютеРеглУчета,
			|	-ВозвратТоваровОтПокупателяТовары.ВсегоВВалютеРеглУчета КАК ВсегоВВалютеРеглУчета,
			|	-ВозвратТоваровОтПокупателяТовары.СуммаДоходаВВалютеРеглУчета КАК СуммаДоходаВВалютеРеглУчета,
			|	-ВозвратТоваровОтПокупателяТовары.СуммаСкидкиВВалютеРеглУчета КАК СуммаСкидкиВВалютеРеглУчета
			|ИЗ
			|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
			|ГДЕ
			|	ВозвратТоваровОтПокупателяТовары.Ссылка В(&МассивДокументов)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВозвратТоваровОтПокупателяУслуги.Ссылка,
			|	ВЫБОР
			|		КОГДА &ПлательщикНСП
			|			ТОГДА ВозвратТоваровОтПокупателяУслуги.СтавкаНСП
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтавкИНСП.ПустаяСсылка)
			|	КОНЕЦ,
			|	ВозвратТоваровОтПокупателяУслуги.Номенклатура,
			|	ВозвратТоваровОтПокупателяУслуги.Номенклатура.ЕдиницаИзмерения,
			|	-ВозвратТоваровОтПокупателяУслуги.Количество,
			|	ВозвратТоваровОтПокупателяУслуги.Цена,
			|	-ВозвратТоваровОтПокупателяУслуги.Сумма,
			|	ВЫБОР
			|		КОГДА &ПлательщикНСП
			|			ТОГДА -ВозвратТоваровОтПокупателяУслуги.СуммаНСП
			|		ИНАЧЕ 0
			|	КОНЕЦ,
			|	-ВозвратТоваровОтПокупателяУслуги.Всего,
			|	-ВозвратТоваровОтПокупателяУслуги.СуммаДохода,
			|	-ВозвратТоваровОтПокупателяУслуги.СуммаСкидки,
			|	-ВозвратТоваровОтПокупателяУслуги.СуммаВВалютеРеглУчета КАК СуммаВВалютеРеглУчета,
			|	ВЫБОР
			|		КОГДА &ПлательщикНСП
			|			ТОГДА -ВозвратТоваровОтПокупателяУслуги.СуммаНСПВВалютеРеглУчета
			|		ИНАЧЕ 0
			|	КОНЕЦ,
			|	-ВозвратТоваровОтПокупателяУслуги.ВсегоВВалютеРеглУчета,
			|	-ВозвратТоваровОтПокупателяУслуги.СуммаДоходаВВалютеРеглУчета,
			|	-ВозвратТоваровОтПокупателяУслуги.СуммаСкидкиВВалютеРеглУчета
			|ИЗ
			|	Документ.ВозвратТоваровОтПокупателя.Услуги КАК ВозвратТоваровОтПокупателяУслуги
			|ГДЕ
			|	ВозвратТоваровОтПокупателяУслуги.Ссылка В(&МассивДокументов)";
	Иначе
		Запрос.Текст =		
			"ВЫБРАТЬ
			|	РеализацияТоваровУслугТовары.Ссылка КАК ДокументОснование,
			|	ВЫБОР
			|		КОГДА &ПлательщикНСП
			|			ТОГДА РеализацияТоваровУслугТовары.СтавкаНСП
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтавкИНСП.ПустаяСсылка)
			|	КОНЕЦ КАК СтавкаНСП,
			|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
			|	РеализацияТоваровУслугТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	РеализацияТоваровУслугТовары.Количество КАК Количество,
			|	РеализацияТоваровУслугТовары.Цена КАК Цена,
			|	РеализацияТоваровУслугТовары.Сумма КАК Сумма,
			|	ВЫБОР
			|		КОГДА &ПлательщикНСП
			|			ТОГДА РеализацияТоваровУслугТовары.СуммаНСП
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК СуммаНСП,
			|	РеализацияТоваровУслугТовары.Всего КАК Всего,
			|	РеализацияТоваровУслугТовары.СуммаДохода КАК СуммаДохода,
			|	РеализацияТоваровУслугТовары.СуммаСкидки КАК СуммаСкидки,
			|	РеализацияТоваровУслугТовары.СуммаВВалютеРеглУчета КАК СуммаВВалютеРеглУчета,
			|	ВЫБОР
			|		КОГДА &ПлательщикНСП
			|			ТОГДА РеализацияТоваровУслугТовары.СуммаНСПВВалютеРеглУчета
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК СуммаНСПВВалютеРеглУчета,
			|	РеализацияТоваровУслугТовары.ВсегоВВалютеРеглУчета КАК ВсегоВВалютеРеглУчета,
			|	РеализацияТоваровУслугТовары.СуммаДоходаВВалютеРеглУчета КАК СуммаДоходаВВалютеРеглУчета,
			|	РеализацияТоваровУслугТовары.СуммаСкидкиВВалютеРеглУчета КАК СуммаСкидкиВВалютеРеглУчета
			|ИЗ
			|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
			|ГДЕ
			|	РеализацияТоваровУслугТовары.Ссылка В(&МассивДокументов)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РеализацияТоваровУслугУслуги.Ссылка,
			|	ВЫБОР
			|		КОГДА &ПлательщикНСП
			|			ТОГДА РеализацияТоваровУслугУслуги.СтавкаНСП
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтавкИНСП.ПустаяСсылка)
			|	КОНЕЦ,
			|	РеализацияТоваровУслугУслуги.Номенклатура,
			|	РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаИзмерения,
			|	РеализацияТоваровУслугУслуги.Количество,
			|	РеализацияТоваровУслугУслуги.Цена,
			|	РеализацияТоваровУслугУслуги.Сумма,
			|	ВЫБОР
			|		КОГДА &ПлательщикНСП
			|			ТОГДА РеализацияТоваровУслугУслуги.СуммаНСП
			|		ИНАЧЕ 0
			|	КОНЕЦ,
			|	РеализацияТоваровУслугУслуги.Всего,
			|	РеализацияТоваровУслугУслуги.СуммаДохода,
			|	РеализацияТоваровУслугУслуги.СуммаСкидки,
			|	РеализацияТоваровУслугУслуги.СуммаВВалютеРеглУчета,
			|	ВЫБОР
			|		КОГДА &ПлательщикНСП
			|			ТОГДА РеализацияТоваровУслугУслуги.СуммаНСПВВалютеРеглУчета
			|		ИНАЧЕ 0
			|	КОНЕЦ,
			|	РеализацияТоваровУслугУслуги.ВсегоВВалютеРеглУчета,
			|	РеализацияТоваровУслугУслуги.СуммаДоходаВВалютеРеглУчета,
			|	РеализацияТоваровУслугУслуги.СуммаСкидкиВВалютеРеглУчета
			|ИЗ
			|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
			|ГДЕ
			|	РеализацияТоваровУслугУслуги.Ссылка В(&МассивДокументов)";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", 			Ссылка);
	Запрос.УстановитьПараметр("НачалоПериода", 		НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонецПериода", 		КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("МассивДокументов", 	МассивДокументов);
	Запрос.УстановитьПараметр("ПлательщикНСП", 		ДанныеУчетнойПолитики.ПлательщикНСП);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаТабличнойЧасти = Товары.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка); 
		
		СтрокаТабличнойЧастиДокументы = ДокументыОснования.Найти(Выборка.ДокументОснование, "ДокументОснование");
		
		Если СтрокаТабличнойЧастиДокументы <> Неопределено Тогда
			СтрокаТабличнойЧасти.КлючСвязи = СтрокаТабличнойЧастиДокументы.КлючСвязи;	
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли