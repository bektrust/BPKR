#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыПроведенияДокумента

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаБланкиСчетовФактур(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.СерияБланкаСФ,
		|	ВременнаяТаблицаШапка.НомерБланкаСФ,
		|	1 КАК Количество,		
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|ГДЕ
		|	НЕ ВременнаяТаблицаШапка.СерияБланкаСФ = """"
		|			И НЕ ВременнаяТаблицаШапка.НомерБланкаСФ = """"";		
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаБланкиСчетовФактур", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры 

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК Ссылка,
		|	ТаблицаДокумента.Дата КАК Дата,
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ТаблицаДокумента.СерияБланкаСФ КАК СерияБланкаСФ,
		|	ТаблицаДокумента.НомерБланкаСФ КАК НомерБланкаСФ
		|ПОМЕСТИТЬ ВременнаяТаблицаШапка
		|ИЗ
		|	Документ.ОбщийСчетФактураВыписанный КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Выполнить();
	
	СформироватьТаблицаБланкиСчетовФактур(ДокументСсылка, СтруктураДополнительныеСвойства);	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

#КонецОбласти

#Область ВерсионированиеОбъектов

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//@skip-warning
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область ИнтерфейсПечати

// Функция формирует табличный документ с печатной формой Счет-фактура
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьСчетФактураБезНДС(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	Ошибки = Неопределено;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;	
	ТабличныйДокумент.КлючПараметровПечати = "ОбщийСчетФактураВыписанный_СчетФактураБезНДС";

	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьСчетФактура.ПФ_MXL_СчетФактураБезНДС");
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	СчетФактураВыписанный.Ссылка КАК Ссылка,
		|	СчетФактураВыписанный.Номер КАК Номер,
		|	СчетФактураВыписанный.Дата КАК Дата,
		|	СчетФактураВыписанный.ВалютаДокумента КАК ВалютаДокумента,
		|	СчетФактураВыписанный.Организация КАК Организация,
		|	СчетФактураВыписанный.Организация.НаименованиеПолное КАК ОрганизацияПредставление,
		|	СчетФактураВыписанный.Организация.ФайлЛоготип КАК ФайлЛоготип,
		|	СчетФактураВыписанный.Контрагент.НаименованиеПолное КАК КонтрагентПредставление,
		|	СчетФактураВыписанный.Организация.ИНН КАК ИНН,
		|	ЕСТЬNULL(СчетФактураВыписанный.Организация.ОсновнойБанковскийСчет.НомерСчета, """") КАК НомерСчета,
		|	ЕСТЬNULL(СчетФактураВыписанный.Организация.ОсновнойБанковскийСчет.Банк.Наименование, """") КАК БанкПредставление,
		|	ЕСТЬNULL(СчетФактураВыписанный.Организация.ОсновнойБанковскийСчет.Банк.Код, """") КАК БИКБанка,
		|	СчетФактураВыписанный.ЭкспортнаяПоставка КАК ЭкспортнаяПоставка,
		|	СчетФактураВыписанный.ПечатьВРегламентированнойВалюте КАК ПечатьВРегламентированнойВалюте,
		|	СчетФактураВыписанный.ГруппироватьПоНоменклатуре КАК ГруппироватьПоНоменклатуре,
		|	СчетФактураВыписанный.ВозвратТоваров КАК ВозвратТоваров
		|ИЗ
		|	Документ.ОбщийСчетФактураВыписанный КАК СчетФактураВыписанный
		|ГДЕ
		|	СчетФактураВыписанный.Ссылка В(&СписокДокументов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СчетФактураВыписанныйТовары.Ссылка КАК Ссылка,
		|	СчетФактураВыписанныйТовары.НомерСтроки КАК НомерСтроки,
		|	СчетФактураВыписанныйТовары.Номенклатура КАК Номенклатура,
		|	СчетФактураВыписанныйТовары.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
		|	СчетФактураВыписанныйТовары.Количество КАК Количество,
		|	СчетФактураВыписанныйТовары.ДокументОснование.Курс КАК Курс,
		|	СчетФактураВыписанныйТовары.ДокументОснование.Кратность КАК Кратность,
		|	СчетФактураВыписанныйТовары.Цена КАК Цена,
		|	СчетФактураВыписанныйТовары.СуммаДохода КАК Сумма,
		|	СчетФактураВыписанныйТовары.СуммаНСП КАК СуммаНСП,
		|	СчетФактураВыписанныйТовары.Всего - СчетФактураВыписанныйТовары.СуммаСкидки КАК Всего,
		|	СчетФактураВыписанныйТовары.СуммаДоходаВВалютеРеглУчета КАК СуммаВВалютеРеглУчета,
		|	СчетФактураВыписанныйТовары.СуммаНСПВВалютеРеглУчета КАК СуммаНСПВВалютеРеглУчета,
		|	СчетФактураВыписанныйТовары.ВсегоВВалютеРеглУчета - СчетФактураВыписанныйТовары.СуммаСкидкиВВалютеРеглУчета КАК ВсегоВВалютеРеглУчета,
		|	СчетФактураВыписанныйТовары.СуммаСкидкиВВалютеРеглУчета КАК СуммаСкидкиВВалютеРеглУчета,
		|	СчетФактураВыписанныйТовары.СуммаСкидки КАК СуммаСкидки,
		|	СчетФактураВыписанныйТовары.СтавкаНСП КАК СтавкаНСП
		|ИЗ
		|	Документ.ОбщийСчетФактураВыписанный.Товары КАК СчетФактураВыписанныйТовары
		|ГДЕ
		|	СчетФактураВыписанныйТовары.Ссылка В(&СписокДокументов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НоменклатураПредставление
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СчетФактураВыписанныйТовары.Ссылка КАК Ссылка,
		|	СУММА(СчетФактураВыписанныйТовары.НомерСтроки) КАК НомерСтроки,
		|	СчетФактураВыписанныйТовары.Номенклатура КАК Номенклатура,
		|	СчетФактураВыписанныйТовары.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
		|   СРЕДНЕЕ(СчетФактураВыписанныйТовары.ДокументОснование.Курс) КАК Курс,
		|   СРЕДНЕЕ(СчетФактураВыписанныйТовары.ДокументОснование.Кратность) КАК Кратность,
		|	СУММА(СчетФактураВыписанныйТовары.Количество) КАК Количество,
		|	СРЕДНЕЕ(СчетФактураВыписанныйТовары.Цена) КАК Цена,
		|	СУММА(СчетФактураВыписанныйТовары.СуммаДохода) КАК Сумма,
		|	СУММА(СчетФактураВыписанныйТовары.СуммаНСП) КАК СуммаНСП,
		|	СУММА(СчетФактураВыписанныйТовары.Всего - СчетФактураВыписанныйТовары.СуммаСкидки) КАК Всего,
		|	СУММА(СчетФактураВыписанныйТовары.СуммаДоходаВВалютеРеглУчета) КАК СуммаВВалютеРеглУчета,
		|	СУММА(СчетФактураВыписанныйТовары.СуммаНСПВВалютеРеглУчета) КАК СуммаНСПВВалютеРеглУчета,
		|	СУММА(СчетФактураВыписанныйТовары.ВсегоВВалютеРеглУчета - СчетФактураВыписанныйТовары.СуммаСкидкиВВалютеРеглУчета) КАК ВсегоВВалютеРеглУчета,
		|	СУММА(СчетФактураВыписанныйТовары.СуммаСкидкиВВалютеРеглУчета) КАК СуммаСкидкиВВалютеРеглУчета,
		|	СУММА(СчетФактураВыписанныйТовары.СуммаСкидки) КАК СуммаСкидки,
		|	СчетФактураВыписанныйТовары.СтавкаНСП КАК СтавкаНСП
		|ИЗ
		|	Документ.ОбщийСчетФактураВыписанный.Товары КАК СчетФактураВыписанныйТовары
		|ГДЕ
		|	СчетФактураВыписанныйТовары.Ссылка В(&СписокДокументов)
		|
		|СГРУППИРОВАТЬ ПО
		|	СчетФактураВыписанныйТовары.Ссылка,
		|	СчетФактураВыписанныйТовары.Номенклатура,
		|	СчетФактураВыписанныйТовары.Номенклатура.НаименованиеПолное,
		|	СчетФактураВыписанныйТовары.СтавкаНСП
		|
		|УПОРЯДОЧИТЬ ПО
		|	НоменклатураПредставление";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокДокументов", МассивОбъектов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Шапка = МассивРезультатов[0].Выбрать();
	
	Пока Шапка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ДанныеПечати = Новый Структура;
		
		ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, 
						?(Шапка.ВозвратТоваров, НСтр("ru = 'Возвратная счет-фактура'"), НСтр("ru = 'Счет-фактура'")));
		ДанныеПечати.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		ДанныеПечати.Вставить("Дата", Шапка.Дата);
		ДанныеПечати.Вставить("ОрганизацияПредставление", Шапка.ОрганизацияПредставление);
		ДанныеПечати.Вставить("ФайлЛоготип", Шапка.ФайлЛоготип);
		ДанныеПечати.Вставить("ПолучательПредставление", Шапка.КонтрагентПредставление);
		ДанныеПечати.Вставить("Адрес", УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			Шапка.Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Шапка.Дата));
			
		ДанныеПечати.Вставить("ИНН", Шапка.ИНН);
		ДанныеПечати.Вставить("БанкПредставление", Шапка.БанкПредставление);
		ДанныеПечати.Вставить("РасчетныйСчетПредставление", Шапка.НомерСчета + " " + Шапка.БанкПредставление);
		ДанныеПечати.Вставить("БИКБанка", Шапка.БИКБанка);
		
		ДанныеПечати.Вставить("ТипПоставки", ?(Шапка.ЭкспортнаяПоставка, НСтр("ru = 'Экспорт'"), НСтр("ru = 'Внутренняя'")));
		
		// Подписи.
		РасшифровкаПодписиРуководителя = "";
		РасшифровкаПодписиГлавногоБухгалтера = "";
		ОтветственныеЛица = БухгалтерскийУчетСервер.ОтветственныеЛицаОрганизацийРуководители(Шапка.Организация, Шапка.Дата);
		БухгалтерскийУчетСервер.ФамилияИнициалыПоНаименованию(РасшифровкаПодписиРуководителя, ОтветственныеЛица.Руководитель);
		БухгалтерскийУчетСервер.ФамилияИнициалыПоНаименованию(РасшифровкаПодписиГлавногоБухгалтера, ОтветственныеЛица.ГлавныйБухгалтер);
		
		ДанныеПечати.Вставить("РасшифровкаПодписиРуководителя", РасшифровкаПодписиРуководителя);
		ДанныеПечати.Вставить("РасшифровкаПодписиГлавногоБухгалтера", РасшифровкаПодписиГлавногоБухгалтера);
		
		// Области.
		МассивОбластейМакета = Новый Массив;
		МассивОбластейМакета.Добавить("Заголовок");
		МассивОбластейМакета.Добавить("ШапкаТаблицы");
		МассивОбластейМакета.Добавить("СтрокаТаблицы");
		МассивОбластейМакета.Добавить("Подвал");
		МассивОбластейМакета.Добавить("СуммаПрописью");
		МассивОбластейМакета.Добавить("ПодписиСФаксимиле");
		
		// Подготовка перед заполнением.
		Если Шапка.ГруппироватьПоНоменклатуре Тогда
			ТаблицаТовары = МассивРезультатов[2].Выгрузить();
		Иначе
			ТаблицаТовары = МассивРезультатов[1].Выгрузить();
		КонецЕсли;	
		
		ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(Шапка.Дата, Шапка.Организация);
		МассивСтрок = ТаблицаТовары.НайтиСтроки(Новый Структура("Ссылка", Шапка.Ссылка));
		
		Всего = 0;
		Сумма = 0;
		ВсегоНСП = 0;
		КоличествоНаименований = 0;
		
		Для Каждого ИмяОбласти Из МассивОбластейМакета Цикл
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
			
			Если ИмяОбласти = "ЗаголовокСЛоготипом" Тогда
				Логотип = Новый Соответствие; // Ключ - имя картинки в области, Значение - имя реквизита
				Логотип.Вставить("Логотип", "ФайлЛоготип");
				ЗаполнитьЛоготипФаксимилеВОбластиМакета(ОбластьМакета, ДанныеПечати, Логотип, Ошибки);
			КонецЕсли;	

			Если ИмяОбласти <> "СтрокаТаблицы" Тогда
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			ИначеЕсли ИмяОбласти = "СтрокаТаблицы" Тогда 
				
				КэшЗначенийСтавок = Новый Соответствие();
				
				СтруктураЗначенийСтавок = Новый Структура();
				СтруктураЗначенийСтавок.Вставить("ЗначениеСтавкиНСП", 0);
				
				СтруктураНомераСтроки = Новый Структура("НомерСтроки", 1);
				
				Для Каждого СтрокаМассива Из МассивСтрок Цикл
					СтруктураСтроки = Новый Структура();
					
					Если Шапка.ПечатьВРегламентированнойВалюте Тогда
						СтруктураСтроки.Вставить("Цена", 	 СтрокаМассива.Цена * СтрокаМассива.Курс / СтрокаМассива.Кратность);
						СтруктураСтроки.Вставить("Сумма", 	 СтрокаМассива.СуммаВВалютеРеглУчета);
						СтруктураСтроки.Вставить("СуммаНСП", СтрокаМассива.СуммаНСПВВалютеРеглУчета);
						СтруктураСтроки.Вставить("Всего", 	 СтрокаМассива.ВсегоВВалютеРеглУчета);
						
						Всего = Всего + СтруктураСтроки.Всего;
						Сумма = Сумма + СтруктураСтроки.Сумма;
						ВсегоНСП = ВсегоНСП + СтруктураСтроки.СуммаНСП;
						КоличествоНаименований = КоличествоНаименований + 1;
						
					Иначе
						Всего = Всего + СтрокаМассива.Всего;
						Сумма = Сумма + СтрокаМассива.Сумма;
						ВсегоНСП = ВсегоНСП + СтрокаМассива.СуммаНСП;
						КоличествоНаименований = КоличествоНаименований + 1;
					КонецЕсли;
					
					ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
					ОбластьМакета.Параметры.Заполнить(СтрокаМассива);
					ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
					ОбластьМакета.Параметры.Заполнить(СтруктураНомераСтроки);
					
					ЗначениеСтавкиНСП = ?(ДанныеУчетнойПолитики.ПлательщикНСП, 
											КэшЗначенийСтавок.Получить(СтрокаМассива.СтавкаНСП), 0);
					
					Если ЗначениеСтавкиНСП = Неопределено Тогда
						ЗначениеСтавкиНСП = ?(ДанныеУчетнойПолитики.ПлательщикНСП,
									УчетНДС.ПолучитьСтавкуНСП(Шапка.Дата, Шапка.Организация, СтрокаМассива.СтавкаНСП), 0);
						КэшЗначенийСтавок.Вставить(СтрокаМассива.СтавкаНСП, ЗначениеСтавкиНСП);
					КонецЕсли;	
					
					СтруктураЗначенийСтавок.ЗначениеСтавкиНСП = ЗначениеСтавкиНСП;
					
					ОбластьМакета.Параметры.Заполнить(СтруктураЗначенийСтавок);		
					
					ТабличныйДокумент.Вывести(ОбластьМакета);
					
					СтруктураНомераСтроки.НомерСтроки = СтруктураНомераСтроки.НомерСтроки + 1;
				КонецЦикла;
				
				// Подвал.
				ДанныеПечати.Вставить("Всего", Всего);
				ДанныеПечати.Вставить("Сумма", Сумма);
				ДанныеПечати.Вставить("ВсегоНСП", ВсегоНСП);
				ДанныеПечати.Вставить("ИтоговаяСтрока", 
					СтрШаблон(НСтр("ru = 'Всего наименований %1, на сумму %2'"), 
					Формат(КоличествоНаименований, "ЧН=0; ЧГ=0"), Формат(Всего, "ЧЦ=15; ЧДЦ=2")));
					
				Если Шапка.ПечатьВРегламентированнойВалюте Тогда
					ДанныеПечати.Вставить("СуммаПрописью", БухгалтерскийУчетСервер.СформироватьСуммуПрописью(Всего, ВалютаРегламентированногоУчета));
				Иначе
					ДанныеПечати.Вставить("СуммаПрописью", БухгалтерскийУчетСервер.СформироватьСуммуПрописью(Всего, Шапка.ВалютаДокумента));
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
 			
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
		
	Возврат ТабличныйДокумент;
	
КонецФункции
	
// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
			
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактураБезНДС") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"СчетФактураБезНДС", НСтр("ru = 'Счет-фактура без бланка НДС'"), ПечатьСчетФактураБезНДС(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	КонецЕсли;
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактураБезНДС";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура без бланка НДС'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ДополнительныеПараметры.Вставить("ПлательщикНДС",  Ложь);
	КомандаПечати.Порядок = 1;
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает заголовок документа для печатной формы.
//
// Параметры:
//  Шапка - любая структура с полями:
//           Номер         - Строка или Число - номер документа;
//           Дата          - Дата - дата документа;
//           Представление - Строка - (необязательный) платформенное представление ссылки на документ.
//                                    Если параметр НазваниеДокумента не задан, то название документа будет вычисляться
//                                    из этого параметра.
//  НазваниеДокумента - Строка - название документа (например, "Счет на оплату").
//
// Возвращаемое значение:
//  Строка - заголовок документа.
//
Функция СформироватьЗаголовокДокумента(Шапка, Знач НазваниеДокумента = "")
	
	ДанныеДокумента = Новый Структура("Номер,Дата,Представление");
	ЗаполнитьЗначенияСвойств(ДанныеДокумента, Шапка);
	
	// Если название документа не передано, получим название по представлению документа.
	Если ПустаяСтрока(НазваниеДокумента) И ЗначениеЗаполнено(ДанныеДокумента.Представление) Тогда
		ПоложениеНомера = СтрНайти(ДанныеДокумента.Представление, ДанныеДокумента.Номер);
		Если ПоложениеНомера > 0 Тогда
			НазваниеДокумента = СокрЛП(Лев(ДанныеДокумента.Представление, ПоложениеНомера - 1));
		КонецЕсли;
	КонецЕсли;

	НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеДокумента.Номер);
	Возврат СтрШаблон(НСтр("ru = '%1 № %2 от %3'"),
		НазваниеДокумента, НомерНаПечать, Формат(ДанныеДокумента.Дата, "ДЛФ=DD"));
	
КонецФункции

Процедура ЗаполнитьЛоготипФаксимилеВОбластиМакета(ОбластьМакета, ДанныеОбъекта, ПодписиИФаксимиле, Ошибки)
	
	Для каждого ЭлементСоответствия Из ПодписиИФаксимиле Цикл
		
		ПлашкаПодписи = ПолучитьПлашкуПодписиБезопасно(ОбластьМакета, ЭлементСоответствия.Ключ, , Ошибки);
		Если ПлашкаПодписи = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеОбъекта[ЭлементСоответствия.Значение]) Тогда
			
			ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(ДанныеОбъекта[ЭлементСоответствия.Значение]);
			Если ЗначениеЗаполнено(ДвоичныеДанные) Тогда
				
				ПлашкаПодписи.Картинка = Новый Картинка(ДвоичныеДанные);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПлашкуПодписиБезопасно(ОбластьМакета, ИмяПлашки, ПредставлениеПодписи, Ошибки)
	
	ПлашкаПодписи = ОбластьМакета.Области.Найти(ИмяПлашки);
	Если ПлашкаПодписи = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru ='ВНИМАНИЕ! Нет места для картинки %1. Возможно используется пользовательский макет.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ?(ПустаяСтрока(ПредставлениеПодписи), ИмяПлашки, ПредставлениеПодписи));
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстСообщения, Неопределено);
		
	КонецЕсли;
	
	ПлашкаПодписи.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
	
	Возврат ПлашкаПодписи;
	
КонецФункции

#КонецОбласти

#КонецЕсли