#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	
	НеобходимостьПерезаполнения = Ложь;
	ВалютаРегламентированногоУчета 	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	
	УстановитьФункциональныеОпцииФормы();
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	
	// РаботаСФормами
	РаботаСФормамиСервер.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом 
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СформироватьСериюСчетаФактуры();
	СформироватьНомераСчетФактур();
	УстановитьТипДляВыбораДокумента();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ПодборДокументовСФПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор Тогда
		
		АдресЗапасовВХранилище = Параметр;
		НеобходимостьПерезаполнения = ПолучитьДокументыИзХранилища(АдресЗапасовВХранилище);
		
		ТекстОповещения = НСтр("ru = 'Заполнение'");
		ТекстПояснения = НСтр("ru = 'Табличная часть ""Документы"" заполнена'");
		ПоказатьОповещениеПользователя(ТекстОповещения,, ТекстПояснения, БиблиотекаКартинок.Информация32);		
	КонецЕсли;
	                                                              
	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Товары");
	КонецЕсли;
	// Конец КопированиеСтрокТабличныхЧастей
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	СписокДокументов = Новый Массив;
	Для Каждого СтрокаТабличнойЧасти Из Объект.ДокументыОснования Цикл 
		СписокДокументов.Добавить(СтрокаТабличнойЧасти.ДокументОснование);
	КонецЦикла;	
	Оповестить("СчетФактураВыписанныйПослеЗаписи", СписокДокументов);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	
	// РаботаСФормами
	РаботаСФормамиСервер.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
	
	Объект.БанковскийСчет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьОсновнойБанковскийСчетОрганизации(Объект.Организация);
	
	СформироватьСериюСчетаФактуры();
	Элементы.НомерБланкаСФ.СписокВыбора.Очистить();
	Объект.СерияБланкаСФ = "";
	Объект.НомерБланкаСФ = "";
	
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СерияБланкаСФ.
//
&НаКлиенте
Процедура СерияБланкаСФПриИзменении(Элемент)
	
	СформироватьНомераСчетФактур();
	
	Если ЗначениеЗаполнено(Объект.СерияБланкаСФ) И (НЕ ЗначениеЗаполнено(Объект.Дата)) Тогда
			Объект.Дата = ДатаДокумента;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ОбработкаВыбора поля ввода Номер бланка счет-фактуры.
//
&НаКлиенте
Процедура НомерБланкаСФОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение = "000000" Тогда
		СтандартнаяОбработка = Ложь;
		ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("НомерБланкаСФОбработкаВыбораЗавершение", ЭтотОбъект);
		ПоказатьВводСтроки(ОбработчикОповещенияОЗакрытии, "", НСтр("ru = 'Укажите номер'"), 6);
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Контрагент.
//
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент, Объект.Организация);
	
	Объект.ЭкспортнаяПоставка = СтруктураДанные.ЭкспортнаяПоставка;
	Объект.ДоговорКонтрагента = СтруктураДанные.ДоговорКонтрагента;
	ОбработатьИзменениеДоговора();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Договор контрагента.
//
&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	ОбработатьИзменениеДоговора();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Возврат.
//
&НаКлиенте
Процедура ВозвратПриИзменении(Элемент)
	УстановитьТипДляВыбораДокумента();
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении при установке настройки По головному контрагенту.
//
&НаКлиенте
Процедура ВключаяФилиалыПриИзменении(Элемент)
	Если Объект.ВключаяФилиалы И ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Объект.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	КонецЕсли;
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыОснования

// Процедура - обработчик события ПриИзменении поля ввода ДокументыДокументОплаты.
//
&НаКлиенте
Процедура ДокументыДокументОплатыПриИзменении(Элемент)	
	СтрокаТабличнойЧасти = Элементы.Документы.ТекущиеДанные;
	СтрокаТабличнойЧасти.Сумма = ПолучитьСуммыВыбираемогоДокумента(СтрокаТабличнойЧасти.ДокументОснование);
	НеобходимостьПерезаполнения = Истина;
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПередУдалением(Элемент, Отказ)
	
	ИмяТабличнойЧасти = "Документы";
	БухгалтерскийУчетКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтотОбъект, "Товары");	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Процедура - обработчик события ПриИзменении поля ввода Товары.
//
&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	ПересчитатьИтоги();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ТекстСообщения = СтрШаблон(НСтр("ru = 'Добавление строк не предусмотрено. Воспользуйтесь командой ""Заполнить по документам"".'"));
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.Товары",, Отказ);	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура заполнения ТЧ "ДокументыОснования".
//
&НаКлиенте
Процедура Заполнить(Команда)
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = НСтр("ru = 'Для заполнения табличной части необходимо указать контрагента.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.Контрагент",,Отказ)		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ФормаОплаты) Тогда
		ТекстСообщения = НСтр("ru = 'Для заполнения табличной части необходимо указать форму оплаты.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.ФормаОплаты",,Отказ)		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		ТекстСообщения = НСтр("ru = 'Для заполнения табличной части необходимо указать валюту документа.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.ВалютаДокумента",,Отказ)		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		ТекстСообщения = НСтр("ru = 'Для заполнения табличной части необходимо задать дату.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.Дата",,Отказ)		
	КонецЕсли;
	
	Если Не Отказ Тогда	
		Если Объект.ДокументыОснования.Количество() > 0 Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросЗаполнитьТабличнуюЧасть", ЭтотОбъект);
			ТекстВопроса = НСтр("ru = 'Табличная часть документа будет очищена. Продолжить выполнение операции?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);				
		Иначе
			ЗаполнитьНаСервере();
			
			Если Объект.ДокументыОснования.Количество() = 0 Тогда 
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Для контрагента %1 не найдены документы с незаполненными СФ.'"), Объект.Контрагент);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.ДокументыОснования");
			Иначе
				ТекстОповещения = НСтр("ru = 'Заполнение'");
				ТекстПояснения = НСтр("ru = 'Табличная часть заполнена'");
				ПоказатьОповещениеПользователя(ТекстОповещения,, ТекстПояснения, БиблиотекаКартинок.Информация32);
			КонецЕсли
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

// Процедура заполнения ТЧ "Товары".
//
&НаКлиенте
Процедура ЗаполнитьПоДокументам(Команда)
	Отказ = Ложь;
	
	Если Объект.ДокументыОснования.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена табличная часть ""Документы"". Операция отменена.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.ДокументыПоступления",,Отказ);		
	КонецЕсли;

	Если Отказ Тогда 
		Возврат
	КонецЕсли;		
	
	Если Объект.Товары.Количество() > 0 Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросЗаполнитьПоДокументам", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные табличной части ""Товары"" будут перезаполнены. Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	Иначе
		ЗаполнениеТабличнойЧастиТовары();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОтветНаВопросЗаполнитьТабличнуюЧасть(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ДокументыОснования.Очистить();
		
		ЗаполнитьНаСервере();
		
		Если Объект.ДокументыОснования.Количество() = 0 Тогда 
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Для контрагента %1 не найдены документы с незаполненными СФ.'"), Объект.Контрагент);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.ДокументыОснования");
		Иначе
			ТекстОповещения = НСтр("ru = 'Заполнение'");
			ТекстПояснения = НСтр("ru = 'Табличная часть заполнена'");
			ПоказатьОповещениеПользователя(ТекстОповещения,, ТекстПояснения, БиблиотекаКартинок.Информация32);
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОтветНаВопросЗаполнитьПоДокументам(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнениеТабличнойЧастиТовары();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НомерБланкаСФОбработкаВыбораЗавершение(НомерБланкаСФ, ДополнительныеПараметры) Экспорт
	Если НомерБланкаСФ <> Неопределено Тогда
		СформироватьНомераСчетФактур(НомерБланкаСФ);
		
		Если НЕ Элементы.НомерБланкаСФ.СписокВыбора.НайтиПоЗначению(НомерБланкаСФ) = Неопределено Тогда 
			Объект.НомерБланкаСФ = НомерБланкаСФ;	
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПроводник(ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ПолноеИмяФайла) Тогда 
		ФайловаяСистемаКлиент.ОткрытьПроводник(ДополнительныеПараметры.ПолноеИмяФайла);
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость и доступность элементов.
//
&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()
	
	Элементы.ГруппаСообщенияОНеобходимостиПерезаполненияТЧТовары.Видимость = НеобходимостьПерезаполнения;
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Элементы.ВалютаДокумента.ТолькоПросмотр = Истина;
	Иначе
		Элементы.ВалютаДокумента.ТолькоПросмотр = Ложь;
	КонецЕсли;	
	
	Элементы.ДокументыСуммаНСП.Видимость  	= ДанныеУчетнойПолитики.ПлательщикНСП;
	Элементы.ТоварыСуммаНСП.Видимость 		= ДанныеУчетнойПолитики.ПлательщикНСП;
	
	Если Объект.СуммаВключаетНалоги Тогда
		Элементы.ТоварыСумма.Видимость 	= Истина;
		Элементы.ТоварыСуммаДохода1.Видимость = Ложь;
		Элементы.ТоварыВсего.Видимость 	= Ложь;
		Элементы.ТоварыСуммаДохода2.Видимость = Истина;
		
		Элементы.ДокументыСумма.Видимость 	= Истина;
		Элементы.ДокументыСуммаДохода1.Видимость 	= Ложь;
		Элементы.ДокументыВсего.Видимость 	= Ложь;
		Элементы.ДокументыСуммаДохода2.Видимость 	= Истина;
	Иначе
		Элементы.ТоварыСумма.Видимость 	= Ложь;
		Элементы.ТоварыСуммаДохода1.Видимость = Истина;
		Элементы.ТоварыВсего.Видимость 	= Истина;		
		Элементы.ТоварыСуммаДохода2.Видимость = Ложь;
		
		Элементы.ДокументыСумма.Видимость 	= Ложь;
		Элементы.ДокументыСуммаДохода1.Видимость 	= Истина;
		Элементы.ДокументыВсего.Видимость 	= Истина;
		Элементы.ДокументыСуммаДохода2.Видимость 	= Ложь;
	КонецЕсли;
	
	Элементы.ДоговорКонтрагента.Доступность = НЕ Объект.ВключаяФилиалы;
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьНаСервере()

	ОбъектДокумента = РеквизитФормыВЗначение("Объект");
	ОбъектДокумента.ЗаполнитьДокументыОснования();                           	
	ЗначениеВРеквизитФормы(ОбъектДокумента, "Объект");	

КонецПроцедуры

// Процедура устанавливает функциональные опции формы документа.
//
&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма, Объект.Организация, ДатаДокумента);
КонецПроцедуры

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, ДатаДокумента, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура формирования списка серий счетов-фактур.
//
&НаКлиенте
Процедура СформироватьСериюСчетаФактуры()	
	
	Элементы.СерияБланкаСФ.СписокВыбора.Очистить();
	СписокСерийБланковСФ = БухгалтерскийУчетВызовСервера.СформироватьСписокСерийСФ(Объект.Организация);
	Элементы.СерияБланкаСФ.СписокВыбора.ЗагрузитьЗначения(СписокСерийБланковСФ);

КонецПроцедуры

// Процедура формирования списка номеров серии счет фактуры.
//
&НаКлиенте
Процедура СформироватьНомераСчетФактур(НомерБланкаСФ = "0")
	
	Элементы.НомерБланкаСФ.СписокВыбора.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Объект.СерияБланкаСФ) Тогда 
		Возврат;
	КонецЕсли;
	
	СписокНомеров = БухгалтерскийУчетВызовСервера.СформироватьСписокНомеровБланковСФ(Объект.Организация, Объект.СерияБланкаСФ, НомерБланкаСФ);
	
	Для Каждого НомерБланка Из СписокНомеров Цикл
		Элементы.НомерБланкаСФ.СписокВыбора.Добавить(НомерБланка.Значение, НомерБланка.Представление);
	КонецЦикла;
КонецПроцедуры	

// Процедура получает список документов из временного хранилища
//
// Параметры:
//  АдресЗапасовВХранилище - Структура - адрес в хранилище и идентификатор формы владельца.
//
// Возвращаемое значение:
//  Булево - Истина, если подобранные документы отличаются от уже имеющихся документов 
//	в ТЧ "ДокументыОплаты". 
//
&НаСервере
Функция ПолучитьДокументыИзХранилища(АдресЗапасовВХранилище)
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Перезаполнить = Ложь;
	Если ТаблицаДляЗагрузки.Количество() <> Объект.ДокументыОснования.Количество() Тогда
		Перезаполнить = Истина;
	Иначе
		СтарыеДанныеТабличнойЧасти = Объект.ДокументыОснования.Выгрузить();
		Для каждого ДокументПодбора Из ТаблицаДляЗагрузки Цикл
			РезультатПоиска = СтарыеДанныеТабличнойЧасти.Найти(ДокументПодбора.ДокументОснование,"ДокументОплаты");
			Если РезультатПоиска = Неопределено Тогда
				Перезаполнить = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Перезаполнить Тогда
		Объект.ДокументыОснования.Очистить();  
		                                                             
		Для Каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл			
			СтрокаТабличнойЧасти = Объект.ДокументыОснования.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаЗагрузки);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Перезаполнить;
КонецФункции

// Процедура устанавливает тип реквизита "ДокументОплаты",
// табличной части "ДокументыПодбора", в зависимости от значения
// реквизита шапки "Возврат".
//
&НаКлиенте
Процедура УстановитьТипДляВыбораДокумента()	
	МассивТипов = Новый Массив();
	
	Если Объект.ВозвратТоваров Тогда
		МассивТипов.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
 		Элементы.ДокументыДокументОплаты.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	Иначе
		МассивТипов.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
		МассивТипов.Добавить(Тип("ДокументСсылка.СчетНаОплатуПокупателю"));
		Элементы.ДокументыДокументОплаты.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет реквизит "СуммаДокумента",
// табличной части "ДокументыПодбора", при выборе
// самого документа.
//
// Параметры:
//  ТекущийПодобранныйДокумент - ДокументСсылка - ссылка на выбранный документ в ТЧ "ДокументыПодбора".
//  
// Возвращаемое значение:
//  Число - сумма передаваемого в функцию документа.
//
&НаСервере
Функция ПолучитьСуммыВыбираемогоДокумента(ТекущийПодобранныйДокумент)
	Возврат ТекущийПодобранныйДокумент.СуммаДокумента		
КонецФункции

// Процедура - Установить пиктограмму комментария.
//
&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

// Получает набор данных с сервера для процедуры КонтрагентПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Контрагент, Организация)
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Контрагент, Организация);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ДоговорКонтрагента",
		ДоговорПоУмолчанию);
	
	СтруктураДанные.Вставить(
		"ЭкспортнаяПоставка",
		НЕ Объект.Контрагент.ПризнакСтраны = Перечисления.ПризнакиСтраны.КР);
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

// Получает договор по умолчанию
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация)
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ВидыДоговораДляДокумента(Документ);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьИзменениеДоговора(МодифицированДоговор = Ложь)
	
	СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(Объект.ДоговорКонтрагента);
	
	Объект.КодПоставкиНДС 	= СтруктураДанные.КодПоставкиНДС;	
	Объект.ВалютаДокумента 	= ?(ЗначениеЗаполнено(СтруктураДанные.ВалютаРасчетов), 
		СтруктураДанные.ВалютаРасчетов, ВалютаРегламентированногоУчета);
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(ДоговорКонтрагента)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		ДоговорКонтрагента.ВалютаРасчетов);
	
	СтруктураДанные.Вставить(
		"КодПоставкиНДС",
		ДоговорКонтрагента.КодПоставкиНДС);
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

// Процедура заполняет ТЧ "ДокументыПоступления" и  
// производит необходимые действия после заполнения.
//
&НаКлиенте
Процедура ЗаполнениеТабличнойЧастиТовары()
	Объект.Товары.Очистить();
	ЗаполнитьПоДокументамНаСервере();
	ПересчитатьИтоги();
	НеобходимостьПерезаполнения = Ложь;
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	
	ТекстОповещения = НСтр("ru = 'Заполнение'");
	ТекстПояснения = НСтр("ru = 'Табличная часть ""Товары"" заполнена'");
	ПоказатьОповещениеПользователя(ТекстОповещения,, ТекстПояснения, БиблиотекаКартинок.Информация32);	
КонецПроцедуры

// Процедура заполняет табличную часть "Товары"
// по подобранным документам.
//
&НаСервере
Процедура ЗаполнитьПоДокументамНаСервере()
	
	ОбъектДокумента = РеквизитФормыВЗначение("Объект");
	ОбъектДокумента.ЗаполнитьПоПодобраннымДокументам();                           	
	ЗначениеВРеквизитФормы(ОбъектДокумента, "Объект");
	
КонецПроцедуры

// Процедура пересчитывает сумму документа
//
&НаКлиенте
Процедура ПересчитатьИтоги()
	Объект.СуммаДокумента 	= Объект.Товары.Итог("Сумма");	
КонецПроцедуры // ()

#КонецОбласти

#Область КопированиеСтрокТабличныхЧастей

&НаКлиенте
Процедура ТоварыКопироватьСтроки(Команда)
	
	КопироватьСтроки("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВставитьСтроки(Команда)
	
	ВставитьСтроки("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСтроки(ИмяТЧ)
	
	Если КопированиеТабличнойЧастиКлиент.МожноКопироватьСтроки(Объект[ИмяТЧ], Элементы[ИмяТЧ].ТекущиеДанные) Тогда
		КоличествоСкопированных = 0;
		КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных);
		КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСкопированных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(ИмяТЧ)
	
	КоличествоСкопированных = 0;
	КоличествоВставленных = 0;
	ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных);
	КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных)
	
	КопированиеТабличнойЧастиСервер.Копировать(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки, КоличествоСкопированных);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных)
	
	КопированиеТабличнойЧастиСервер.Вставить(Объект, ИмяТЧ, Элементы, КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
