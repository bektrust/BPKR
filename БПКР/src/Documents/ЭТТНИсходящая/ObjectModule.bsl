#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ЗаполненияДокумента

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.РеализацияТоваровУслуг - Данные заполнения документа.
//	
Процедура ЗаполнитьПоРеализацииТоваровУслуг(ДанныеЗаполнения) Экспорт
	
	ДокументОснование = ДанныеЗаполнения;
	
	Организация = ДанныеЗаполнения.Организация;
	Контрагент = ДанныеЗаполнения.Контрагент;
	
	Если Контрагент.ПризнакСтраны = Перечисления.ПризнакиСтраны.КР Тогда
		ВидПоставки = 10;	
	Иначе
		ВидПоставки = 20;	
	КонецЕсли;	
	
	ЗаполнитьДанныеГрузополучателя();
	
	Если БухгалтерскийУчетВызовСервераПовтИсп.ВедетсяУчетЭСФ() Тогда 
		СведенияОбЭСФ = ЭСФСервер.СведенияОбЭСФПоДокументуОснованию(Организация, ДокументОснование);
		
		Если ТипЗнч(СведенияОбЭСФ.ПредставлениеЭСФ) = Тип("ДокументСсылка.ЭлектронныйСчетФактураВыписанный") Тогда
			НомерЭСФ = СведенияОбЭСФ.ПредставлениеЭСФ.НомерЭСФ;
		КонецЕсли;	
	КонецЕсли;
	
	Товары.Очистить();  
	
	КлючСвязи = 1;
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Товары Цикл
		НоваяСтрокаТабличнойЧасти = Товары.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
		
		ПараметрыНоменклатуры = Справочники.Номенклатура.ПолучитьПараметрыНоменклатуры(СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, ПараметрыНоменклатуры);
		
		НоваяСтрокаТабличнойЧасти.КоличествоМест = НоваяСтрокаТабличнойЧасти.Количество;
		
		НоваяСтрокаТабличнойЧасти.МассаГрузаНетто = НоваяСтрокаТабличнойЧасти.Количество * НоваяСтрокаТабличнойЧасти.ВесЕдиницыНоменклатуры;
		НоваяСтрокаТабличнойЧасти.МассаГрузаБрутто = НоваяСтрокаТабличнойЧасти.МассаГрузаНетто + НоваяСтрокаТабличнойЧасти.КоличествоМест * НоваяСтрокаТабличнойЧасти.ВесУпаковки;
		
		НоваяСтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Всего;  
		
		Если СтрокаТабличнойЧасти.СуммаСкидки > 0 Тогда
			НоваяСтрокаТабличнойЧасти.Сумма	= СтрокаТабличнойЧасти.Всего - СтрокаТабличнойЧасти.СуммаСкидки; 
			НоваяСтрокаТабличнойЧасти.Цена 	= НоваяСтрокаТабличнойЧасти.Сумма / НоваяСтрокаТабличнойЧасти.Количество;	
		КонецЕсли;
		
		НоваяСтрокаТабличнойЧасти.КлючСвязи = КлючСвязи;
		КлючСвязи = КлючСвязи + 1;
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.ВозвратТоваровПоставщику - Данные заполнения документа.
//	
Процедура ЗаполнитьПоВозвратТоваровПоставщику(ДанныеЗаполнения) Экспорт
	
	ДокументОснование = ДанныеЗаполнения;
	
	Организация = ДанныеЗаполнения.Организация;
	Контрагент = ДанныеЗаполнения.Контрагент;
	
	ЗаполнитьДанныеГрузополучателя();
	
	Если БухгалтерскийУчетВызовСервераПовтИсп.ВедетсяУчетЭСФ() Тогда 
		СведенияОбЭСФ = ЭСФСервер.СведенияОбЭСФПоДокументуОснованию(Организация, ДокументОснование);
		
		Если ТипЗнч(СведенияОбЭСФ.ПредставлениеЭСФ) = Тип("ДокументСсылка.ЭлектронныйСчетФактураВыписанный") Тогда
			НомерЭСФ = СведенияОбЭСФ.ПредставлениеЭСФ.НомерЭСФ;
		КонецЕсли;	
	КонецЕсли;
	
	Товары.Очистить(); 
	
	КлючСвязи = 1;
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Товары Цикл
		НоваяСтрокаТабличнойЧасти = Товары.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
		
		ПараметрыНоменклатуры = Справочники.Номенклатура.ПолучитьПараметрыНоменклатуры(СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, ПараметрыНоменклатуры);
		
		НоваяСтрокаТабличнойЧасти.КоличествоМест = НоваяСтрокаТабличнойЧасти.Количество;
		
		НоваяСтрокаТабличнойЧасти.МассаГрузаНетто = НоваяСтрокаТабличнойЧасти.Количество * НоваяСтрокаТабличнойЧасти.ВесЕдиницыНоменклатуры;
		НоваяСтрокаТабличнойЧасти.МассаГрузаБрутто = НоваяСтрокаТабличнойЧасти.МассаГрузаНетто + НоваяСтрокаТабличнойЧасти.КоличествоМест * НоваяСтрокаТабличнойЧасти.ВесУпаковки;
		
		НоваяСтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Всего;   
		
		НоваяСтрокаТабличнойЧасти.КлючСвязи = КлючСвязи;
		КлючСвязи = КлючСвязи + 1;
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.ВозвратТоваровОтПокупателя - Данные заполнения документа.
//	
Процедура ЗаполнитьПоВозвратуТоваровОтПокупателя(ДанныеЗаполнения) Экспорт
	
	ДокументОснование = ДанныеЗаполнения;
	
	Организация = ДанныеЗаполнения.Организация;
	Контрагент = ДанныеЗаполнения.Контрагент;
	
	ЗаполнитьДанныеГрузополучателя();
	
	Если БухгалтерскийУчетВызовСервераПовтИсп.ВедетсяУчетЭСФ() Тогда 
		СведенияОбЭСФ = ЭСФСервер.СведенияОбЭСФПоДокументуОснованию(Организация, ДокументОснование);
		
		Если ТипЗнч(СведенияОбЭСФ.ПредставлениеЭСФ) = Тип("ДокументСсылка.ЭлектронныйСчетФактураВыписанный") Тогда
			НомерЭСФ = СведенияОбЭСФ.ПредставлениеЭСФ.НомерЭСФ;
		КонецЕсли;	
	КонецЕсли;
	
	Товары.Очистить(); 
	
	КлючСвязи = 1;
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Товары Цикл
		НоваяСтрокаТабличнойЧасти = Товары.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
		
		ПараметрыНоменклатуры = Справочники.Номенклатура.ПолучитьПараметрыНоменклатуры(СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, ПараметрыНоменклатуры);
		
		НоваяСтрокаТабличнойЧасти.КоличествоМест = НоваяСтрокаТабличнойЧасти.Количество;
		
		НоваяСтрокаТабличнойЧасти.МассаГрузаНетто = НоваяСтрокаТабличнойЧасти.Количество * НоваяСтрокаТабличнойЧасти.ВесЕдиницыНоменклатуры;
		НоваяСтрокаТабличнойЧасти.МассаГрузаБрутто = НоваяСтрокаТабличнойЧасти.МассаГрузаНетто + НоваяСтрокаТабличнойЧасти.КоличествоМест * НоваяСтрокаТабличнойЧасти.ВесУпаковки;
		
		НоваяСтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Всего; 
		
		НоваяСтрокаТабличнойЧасти.КлючСвязи = КлючСвязи;
		КлючСвязи = КлючСвязи + 1;
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.ПеремещениеТоваров - Данные заполнения документа.
//	
Процедура ЗаполнитьПоПеремещениюТоваров(ДанныеЗаполнения) Экспорт
	
	ДокументОснование = ДанныеЗаполнения;
	
	Организация = ДанныеЗаполнения.Организация;
	Склад = ДанныеЗаполнения.СкладОтправитель;
	СкладПолучатель = ДанныеЗаполнения.СкладПолучатель;
	
	Товары.Очистить();   
	
	КлючСвязи = 1;
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Товары Цикл
		НоваяСтрокаТабличнойЧасти = Товары.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
		
		ПараметрыНоменклатуры = Справочники.Номенклатура.ПолучитьПараметрыНоменклатуры(СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, ПараметрыНоменклатуры);
		
		НоваяСтрокаТабличнойЧасти.КоличествоМест = НоваяСтрокаТабличнойЧасти.Количество;
		
		НоваяСтрокаТабличнойЧасти.МассаГрузаНетто = НоваяСтрокаТабличнойЧасти.Количество * НоваяСтрокаТабличнойЧасти.ВесЕдиницыНоменклатуры;
		НоваяСтрокаТабличнойЧасти.МассаГрузаБрутто = НоваяСтрокаТабличнойЧасти.МассаГрузаНетто + НоваяСтрокаТабличнойЧасти.КоличествоМест * НоваяСтрокаТабличнойЧасти.ВесУпаковки;
		
		НоваяСтрокаТабличнойЧасти.КлючСвязи = КлючСвязи;
		КлючСвязи = КлючСвязи + 1;	
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.СписаниеТоваров - Данные заполнения документа.
//	
Процедура ЗаполнитьПоСписаниюТоваров(ДанныеЗаполнения) Экспорт
	
	ДокументОснование = ДанныеЗаполнения;
	
	Организация = ДанныеЗаполнения.Организация;
	Склад = ДанныеЗаполнения.Склад;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Счет КАК СчетУчета,
		|	ХозрасчетныйОбороты.Субконто1 КАК Номенклатура,
		|	-ХозрасчетныйОбороты.СуммаОборот КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&Период,
		|			&Период,
		|			Регистратор,
		|			Счет В (&СчетаУчета),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура),
		|			Организация = &Организация
		|				И Субконто1 В (&СписокНоменклатуры),
		|			КорСчет В (&СчетаЗатрат),
		|			) КАК ХозрасчетныйОбороты";
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("Период", 			ДанныеЗаполнения.Дата);     
	Запрос.УстановитьПараметр("СписокНоменклатуры",	ДанныеЗаполнения.Товары.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("СчетаЗатрат", 		ДанныеЗаполнения.Товары.ВыгрузитьКолонку("СчетЗатрат"));
	Запрос.УстановитьПараметр("СчетаУчета", 		ДанныеЗаполнения.Товары.ВыгрузитьКолонку("СчетУчета"));
	
	ТаблицаСебестоимости = Запрос.Выполнить().Выгрузить();	
	
	Отбор = Новый Структура();
	Отбор.Вставить("Номенклатура", 	Неопределено);
	Отбор.Вставить("СчетУчета", 	Неопределено);
	
	Товары.Очистить();
	
	КлючСвязи = 1;
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Товары Цикл
		НоваяСтрокаТабличнойЧасти = Товары.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
		
		ПараметрыНоменклатуры = Справочники.Номенклатура.ПолучитьПараметрыНоменклатуры(СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, ПараметрыНоменклатуры);
		
		НоваяСтрокаТабличнойЧасти.КоличествоМест = НоваяСтрокаТабличнойЧасти.Количество;
		
		НоваяСтрокаТабличнойЧасти.МассаГрузаНетто = НоваяСтрокаТабличнойЧасти.Количество * НоваяСтрокаТабличнойЧасти.ВесЕдиницыНоменклатуры;
		НоваяСтрокаТабличнойЧасти.МассаГрузаБрутто = НоваяСтрокаТабличнойЧасти.МассаГрузаНетто + НоваяСтрокаТабличнойЧасти.КоличествоМест * НоваяСтрокаТабличнойЧасти.ВесУпаковки;
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТабличнойЧасти);
		
		НайденныеДанные = ТаблицаСебестоимости.НайтиСтроки(Отбор);
		
		Если НайденныеДанные.Количество() > 0 Тогда
			НоваяСтрокаТабличнойЧасти.Сумма = НайденныеДанные[0].Сумма;
			НоваяСтрокаТабличнойЧасти.Цена	= НоваяСтрокаТабличнойЧасти.Сумма / НоваяСтрокаТабличнойЧасти.Количество;
		КонецЕсли;  
		
		НоваяСтрокаТабличнойЧасти.КлючСвязи = КлючСвязи;
		КлючСвязи = КлючСвязи + 1;
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.ОприходованиеТоваров - Данные заполнения документа.
//	
Процедура ЗаполнитьПоОприходованиюТоваров(ДанныеЗаполнения) Экспорт
	
	ДокументОснование = ДанныеЗаполнения;
	
	Организация = ДанныеЗаполнения.Организация;
	Склад = ДанныеЗаполнения.Склад;
	
	Товары.Очистить();
	
	КлючСвязи = 1;
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Товары Цикл
		НоваяСтрокаТабличнойЧасти = Товары.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
		
		ПараметрыНоменклатуры = Справочники.Номенклатура.ПолучитьПараметрыНоменклатуры(СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, ПараметрыНоменклатуры);
		
		НоваяСтрокаТабличнойЧасти.КоличествоМест = НоваяСтрокаТабличнойЧасти.Количество;
		
		НоваяСтрокаТабличнойЧасти.МассаГрузаНетто = НоваяСтрокаТабличнойЧасти.Количество * НоваяСтрокаТабличнойЧасти.ВесЕдиницыНоменклатуры;
		НоваяСтрокаТабличнойЧасти.МассаГрузаБрутто = НоваяСтрокаТабличнойЧасти.МассаГрузаНетто + НоваяСтрокаТабличнойЧасти.КоличествоМест * НоваяСтрокаТабличнойЧасти.ВесУпаковки;
		
		НоваяСтрокаТабличнойЧасти.КлючСвязи = КлючСвязи;
		КлючСвязи = КлючСвязи + 1;	
	КонецЦикла;
	
КонецПроцедуры
 
// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.ПоступлениеТоваровУслуг - Данные заполнения документа.
//	
Процедура ЗаполнитьПоПоступлениюТоваровУслуг(ДанныеЗаполнения) Экспорт
	
	ДокументОснование = ДанныеЗаполнения;
	
	Организация = ДанныеЗаполнения.Организация;
	Склад = ДанныеЗаполнения.Склад;
	
	КлючСвязи = 1;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Товары Цикл
		НоваяСтрокаТабличнойЧасти = Товары.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
		
		Если НЕ ВалютаРегламентированногоУчета = ДанныеЗаполнения.Курс Тогда
			НоваяСтрокаТабличнойЧасти.Цена = НоваяСтрокаТабличнойЧасти.Цена * ДанныеЗаполнения.Курс;	
		КонецЕсли;	
		
		НоваяСтрокаТабличнойЧасти.КлючСвязи = КлючСвязи;
		КлючСвязи = КлючСвязи + 1;	
	КонецЦикла;	
КонецПроцедуры
  
// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.ОтчетПроизводстваЗаСмену - Данные заполнения документа.
//	
Процедура ЗаполнитьПоОтчетуПроизводстваЗаСмену(ДанныеЗаполнения) Экспорт
	
	ДокументОснование = ДанныеЗаполнения;
	
	Организация = ДанныеЗаполнения.Организация;
	Склад = ДанныеЗаполнения.СкладПродукция;
	
	КлючСвязи = 1;
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Продукция Цикл
		НоваяСтрокаТабличнойЧасти = Товары.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
		
		НоваяСтрокаТабличнойЧасти.Цена 	= СтрокаТабличнойЧасти.ПлановаяСтоимость;
		НоваяСтрокаТабличнойЧасти.Сумма	= СтрокаТабличнойЧасти.СуммаПлановая;
		
		НоваяСтрокаТабличнойЧасти.КлючСвязи = КлючСвязи;
		КлючСвязи = КлючСвязи + 1;	
	КонецЦикла;	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.РеализацияТоваровУслуг")] = "ЗаполнитьПоРеализацииТоваровУслуг";
	СтратегияЗаполнения[Тип("ДокументСсылка.ВозвратТоваровПоставщику")] = "ЗаполнитьПоВозвратТоваровПоставщику";
	СтратегияЗаполнения[Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")] = "ЗаполнитьПоВозвратуТоваровОтПокупателя";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПеремещениеТоваров")] = "ЗаполнитьПоПеремещениюТоваров";
	СтратегияЗаполнения[Тип("ДокументСсылка.СписаниеТоваров")] = "ЗаполнитьПоСписаниюТоваров";
	СтратегияЗаполнения[Тип("ДокументСсылка.ОприходованиеТоваров")] = "ЗаполнитьПоОприходованиюТоваров";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПоступлениеТоваровУслуг")] = "ЗаполнитьПоПоступлениюТоваровУслуг";
	СтратегияЗаполнения[Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену")] = "ЗаполнитьПоОтчетуПроизводстваЗаСмену";
	
	ЗаполнениеОбъектовБП.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ВидОперации = Перечисления.ВидыОперацийТТН.Реализация;	
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		ВидОперации = Перечисления.ВидыОперацийТТН.Возврат;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		ВидОперации = Перечисления.ВидыОперацийТТН.Перемещение;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СписаниеТоваров") Тогда
		ВидОперации = Перечисления.ВидыОперацийТТН.Списание;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОприходованиеТоваров")
		ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") Тогда
		ВидОперации = Перечисления.ВидыОперацийТТН.Оприходование;	
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	ПроверяемыеРеквизиты.Добавить("Товары");
	
	Если ВидОперации = Перечисления.ВидыОперацийТТН.Перемещение
		ИЛИ ВидОперации = Перечисления.ВидыОперацийТТН.Списание
		ИЛИ ВидОперации = Перечисления.ВидыОперацийТТН.Оприходование
		ИЛИ ВидОперации = Перечисления.ВидыОперацийТТН.ВыгрузкаОстатков Тогда
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Контрагент");	
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийТТН.ВыгрузкаОстатков Тогда
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДокументОснование");	
	КонецЕсли;
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьДанныеГрузополучателя()

	Если ЗначениеЗаполнено(Контрагент) Тогда
		СведенияОКонтрагенте = БухгалтерскийУчетСервер.ПолучитьСведенияОКонтрагенте(Контрагент);
		АдресКонтрагента = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Контрагент, 
								Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента); 
		ТелефонКонтрагента = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Контрагент, 
									Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента); 
		
		Грузополучатель = "" + СведенияОКонтрагенте.НаименованиеПолное 
								+ ?(ЗначениеЗаполнено(СведенияОКонтрагенте.ИНН),", " + СведенияОКонтрагенте.ИНН, "") 
								+ ?(ЗначениеЗаполнено(АдресКонтрагента),", " + АдресКонтрагента, "")
								+ ", " + ТелефонКонтрагента;		
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли