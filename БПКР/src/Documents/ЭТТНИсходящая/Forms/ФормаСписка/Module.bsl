
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// БП.ОтборыСписка
	РаботаСОтборами.ВосстановитьНастройкиОтборов(ЭтотОбъект, Список);
	УстановитьОтборПоОсновнойОрганизации();
	// Конец БП.ОтборыСписка
	
	// РаботаСФормами
	РаботаСФормамиСервер.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов
	МожноРедактировать = ПравоДоступа("Редактирование", Метаданные.Документы.ИнвентаризацияНезавершенногоПроизводства);
	Элементы.СписокКонтекстноеМенюИзменитьВыделенные.Видимость = МожноРедактировать;
	// Конец СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события ПриЗакрытии.
//
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если НЕ ЗавершениеРаботы Тогда
		// БП.ОтборыСписка
		СохранитьНастройкиОтборов();
		// Конец БП.ОтборыСписка
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти
   
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СохранитьВФорматеXML(Команда)
	
	Отказ = Ложь;
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не выделен ни один документ в списке, формирование файла xml отменено.'"),,,, Отказ);
	Иначе
		ДокументыВыгрузки.Очистить(); 
		ВидОперацииВыгрузки	= Неопределено;
		
		Для Каждого СтрокаМассива Из ВыделенныеСтроки Цикл 
			
			Если НЕ ЗначениеЗаполнено(ВидОперацииВыгрузки) Тогда
				ВидОперацииВыгрузки = ВидОперацииДокумента(СтрокаМассива);
				
			ИначеЕсли НЕ ВидОперацииВыгрузки = ВидОперацииДокумента(СтрокаМассива) Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					НСтр("ru = 'Для формирования файла xml необходимо выделить документы с одинаковыми видами операции.'"),,,, Отказ);
				Прервать;	
			КонецЕсли;	
			
			ДокументыВыгрузки.Добавить(СтрокаМассива);	
		КонецЦикла;
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Отказ = ПроверкаЗаполненияПередФормированиемФайлаXML();
	
	Если Отказ Тогда 
		Возврат
	КонецЕсли;
	
	Если ТребуетсяНастройкаАвторизацияИнтернетПоддержки() Тогда
		ТекстВопроса = НСтр("ru='Для сохранения накладной в xml
			|необходимо подключиться к Интернет-поддержке пользователей.
			|Подключиться сейчас?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриПодключенииИнтернетПоддержки", ЭтотОбъект);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Подключиться'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
	Иначе
		ПродолжитьВыгрузку();
	КонецЕсли;		
КонецПроцедуры

#КонецОбласти
   
#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОткрытьПроводник(ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ПолноеИмяФайла) Тогда 
		ФайловаяСистемаКлиент.ОткрытьПроводник(ДополнительныеПараметры.ПолноеИмяФайла);
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРеквизитовОтборов

&НаКлиенте
Процедура ОтборОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Организация", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

#КонецОбласти
  
#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ВидОперацииДокумента(Ссылка)

	Возврат Ссылка.ВидОперации;	

КонецФункции // ВидОперацииДокумента()

&НаСервере
Функция ПроверкаЗаполненияПередФормированиемФайлаXML()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭТТНИсходящая.Ссылка КАК Ссылка,
		|	ЭТТНИсходящая.Склад КАК Склад,
		|	ЭТТНИсходящая.СкладПолучатель КАК СкладПолучатель,
		|	ЭТТНИсходящая.Автомобиль КАК Автомобиль,
		|	ЭТТНИсходящая.Водитель КАК Водитель,
		|	ЭТТНИсходящая.СпособПеревозки КАК СпособПеревозки,
		|	ЭТТНИсходящая.Перевозчик КАК Перевозчик,
		|	ЭТТНИсходящая.ИННПеревозчика КАК ИННПеревозчика,
		|	ЭТТНИсходящая.Контрагент КАК Контрагент,
		|	ЭТТНИсходящая.Контрагент.СтранаРезидентства КАК КонтрагентСтранаРезидентства,
		|	ЭТТНИсходящая.Контрагент.ИНН КАК КонтрагентИНН,
		|	ЭТТНИсходящая.ВидПоставки КАК ВидПоставки,
		|	ЭТТНИсходящая.ПричинаСписания КАК ПричинаСписания,
		|	ЭТТНИсходящая.ПричинаСписания.Код КАК ПричинаСписанияКод,
		|	ЭТТНИсходящая.ПричинаОприходования КАК ПричинаОприходования,
		|	ЭТТНИсходящая.ПричинаОприходования.Код КАК ПричинаОприходованияКод
		|ПОМЕСТИТЬ ВременнаяТаблицаЭТТНИсходящая
		|ИЗ
		|	Документ.ЭТТНИсходящая КАК ЭТТНИсходящая
		|ГДЕ
		|	ЭТТНИсходящая.Ссылка В(&МассивСсылок)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаЭТТНИсходящая.Ссылка КАК Ссылка,
		|	ВременнаяТаблицаЭТТНИсходящая.Ссылка.Представление КАК ПредставлениеДокумента,
		|	ВременнаяТаблицаЭТТНИсходящая.Склад КАК Склад,
		|	ВременнаяТаблицаЭТТНИсходящая.СкладПолучатель КАК СкладПолучатель,
		|	ВременнаяТаблицаЭТТНИсходящая.Автомобиль КАК Автомобиль,
		|	ВременнаяТаблицаЭТТНИсходящая.Водитель КАК Водитель,
		|	ВременнаяТаблицаЭТТНИсходящая.СпособПеревозки КАК СпособПеревозки,
		|	ВременнаяТаблицаЭТТНИсходящая.Перевозчик КАК Перевозчик,
		|	ВременнаяТаблицаЭТТНИсходящая.ИННПеревозчика КАК ИННПеревозчика,
		|	ВременнаяТаблицаЭТТНИсходящая.Контрагент КАК Контрагент,
		|	ВременнаяТаблицаЭТТНИсходящая.КонтрагентСтранаРезидентства КАК КонтрагентСтранаРезидентства,
		|	ВременнаяТаблицаЭТТНИсходящая.КонтрагентИНН КАК КонтрагентИНН,
		|	ВременнаяТаблицаЭТТНИсходящая.ВидПоставки КАК ВидПоставки,
		|	ВременнаяТаблицаЭТТНИсходящая.ПричинаСписания КАК ПричинаСписания,
		|	ВременнаяТаблицаЭТТНИсходящая.ПричинаСписанияКод КАК ПричинаСписанияКод,
		|	ВременнаяТаблицаЭТТНИсходящая.ПричинаОприходования КАК ПричинаОприходования,
		|	ВременнаяТаблицаЭТТНИсходящая.ПричинаОприходованияКод КАК ПричинаОприходованияКод
		|ИЗ
		|	ВременнаяТаблицаЭТТНИсходящая КАК ВременнаяТаблицаЭТТНИсходящая
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоответствиеОбъектовСервисов.Идентификатор КАК Идентификатор,
		|	СоответствиеОбъектовСервисов.ОбъектСоответствия КАК ОбъектСоответствия
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектовСервисов КАК СоответствиеОбъектовСервисов
		|ГДЕ
		|	СоответствиеОбъектовСервисов.ИмяСервиса = ЗНАЧЕНИЕ(Перечисление.ИменаСервисов.ЭТТН)
		|	И СоответствиеОбъектовСервисов.ОбъектСоответствия В
		|			(ВЫБРАТЬ
		|				ВременнаяТаблицаЭТТНИсходящая.Склад
		|			ИЗ
		|				ВременнаяТаблицаЭТТНИсходящая
		|		
		|			ОБЪЕДИНИТЬ ВСЕ
		|		
		|			ВЫБРАТЬ
		|				ВременнаяТаблицаЭТТНИсходящая.СкладПолучатель
		|			ИЗ
		|				ВременнаяТаблицаЭТТНИсходящая
		|		
		|			ОБЪЕДИНИТЬ ВСЕ
		|		
		|			ВЫБРАТЬ
		|				ВременнаяТаблицаЭТТНИсходящая.Автомобиль
		|			ИЗ
		|				ВременнаяТаблицаЭТТНИсходящая
		|		
		|			ОБЪЕДИНИТЬ ВСЕ
		|		
		|			ВЫБРАТЬ
		|				ВременнаяТаблицаЭТТНИсходящая.Водитель
		|			ИЗ
		|				ВременнаяТаблицаЭТТНИсходящая)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка КАК Ссылка,
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Номенклатура.КодТНВЭД.Код КАК КодТНВЭД,
		|	ТаблицаТовары.Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
		|	ТаблицаТовары.Номенклатура.ЭтоМаркированнаяПродукция КАК ЭтоМаркированнаяПродукция,
		|	ТаблицаТовары.Количество КАК Количество,
		|	ТаблицаТовары.Цена КАК Цена,
		|	ТаблицаТовары.МассаГрузаНетто КАК МассаГрузаНетто,
		|	ТаблицаТовары.МассаГрузаБрутто КАК МассаГрузаБрутто,
		|	ТаблицаТовары.КлючСвязи КАК КлючСвязи,
		|	ЕСТЬNULL(СоответствиеОбъектовСервисов.Идентификатор, """") КАК Идентификатор
		|ИЗ
		|	Документ.ЭТТНИсходящая.Товары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектовСервисов КАК СоответствиеОбъектовСервисов
		|		ПО ТаблицаТовары.Номенклатура = СоответствиеОбъектовСервисов.ОбъектСоответствия
		|			И (СоответствиеОбъектовСервисов.ИмяСервиса = ЗНАЧЕНИЕ(Перечисление.ИменаСервисов.ЭТТН))
		|ГДЕ
		|	ТаблицаТовары.Ссылка В(&МассивСсылок)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаКодыМаркировки.Ссылка КАК Ссылка,
		|	ТаблицаКодыМаркировки.КлючСвязи КАК КлючСвязи,
		|	ТаблицаКодыМаркировки.КодМаркировки КАК КодМаркировки
		|ИЗ
		|	Документ.ЭТТНИсходящая.КодыМаркировки КАК ТаблицаКодыМаркировки
		|ГДЕ
		|	ТаблицаКодыМаркировки.Ссылка В(&МассивСсылок)";
	Запрос.УстановитьПараметр("МассивСсылок", ДокументыВыгрузки);
	
	Результаты = Запрос.ВыполнитьПакет();
		
	ВыборкаДокументы 			= Результаты[1].Выбрать();  
	ТаблицаОбъектыСоответствия 	= Результаты[2].Выгрузить();
	ВыборкаТовары 				= Результаты[3].Выбрать();
	ВыборкаКодыМаркировки 		= Результаты[4].Выбрать();
	
	ОтборТоваров = Новый Структура();  
	ОтборТоваров.Вставить("Ссылка", Неопределено);
	
	ОтборКодовМарикровки = Новый Структура();  
	ОтборКодовМарикровки.Вставить("Ссылка", 	Неопределено);
	ОтборКодовМарикровки.Вставить("КлючСвязи", 	Неопределено);	
	
	Отказ = Ложь;
	
	Пока ВыборкаДокументы.Следующий() Цикл
		ПредставлениеДокумента 	= ВыборкаДокументы.ПредставлениеДокумента;	
	    ОтборТоваров.Ссылка 	= ВыборкаДокументы.Ссылка;
	
		Пока ВыборкаТовары.НайтиСледующий(ОтборТоваров) Цикл 
			
			Если НЕ ЗначениеЗаполнено(ВыборкаТовары.Идентификатор) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе ""%1"" для номенклатуры %2 нет идентификатора в ""Соответствие объектов сервисов"".'"),
					ПредставлениеДокумента,
					ВыборкаТовары.Номенклатура);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(ВыборкаТовары.ЕдиницаИзмеренияКод) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе ""%1"" у номенклатуры %2 не заполнена единица измерения (или у единицы измерения не заполнен код).'"),
					ПредставлениеДокумента,
					ВыборкаТовары.Номенклатура);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ВыборкаТовары.Количество) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе ""%1"" в строке %2 не заполнено количество.'"),
					ПредставлениеДокумента,
					ВыборкаТовары.НомерСтроки);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
				
			ИначеЕсли ВыборкаТовары.Количество > Цел(ВыборкаТовары.Количество) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе ""%1"" для выгрузки файла количество, в строке %2, необходимо указать целое.'"),
					ПредставлениеДокумента,
					ВыборкаТовары.НомерСтроки);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ВыборкаТовары.КодТНВЭД) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе ""%1"" у номенклатуры %2 не заполнен ТН ВЭД.'"),
					ПредставлениеДокумента,
					ВыборкаТовары.Номенклатура);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
			КонецЕсли;
				
			Если ВидОперацииВыгрузки = Перечисления.ВидыОперацийТТН.Оприходование
				ИЛИ ВидОперацииВыгрузки = Перечисления.ВидыОперацийТТН.ВыгрузкаОстатков
				ИЛИ ВидОперацииВыгрузки = Перечисления.ВидыОперацийТТН.Реализация
				ИЛИ ВидОперацииВыгрузки = Перечисления.ВидыОперацийТТН.Возврат
				ИЛИ ВидОперацииВыгрузки = Перечисления.ВидыОперацийТТН.Списание Тогда
				
				Если НЕ ЗначениеЗаполнено(ВыборкаТовары.Цена) Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе ""%1"" в строке %2 не заполнен цена.'"),
						ПредставлениеДокумента,
						ВыборкаТовары.НомерСтроки);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
				КонецЕсли;				
			КонецЕсли;	
			
			Если ВидОперацииВыгрузки = Перечисления.ВидыОперацийТТН.Перемещение
				ИЛИ ВидОперацииВыгрузки = Перечисления.ВидыОперацийТТН.Реализация
				ИЛИ ВидОперацииВыгрузки = Перечисления.ВидыОперацийТТН.Возврат Тогда
				
				Если НЕ ЗначениеЗаполнено(ВыборкаТовары.МассаГрузаНетто) Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе ""%1"" в строке %2 не заполнена Масса груза (нетто).'"),
						ПредставлениеДокумента,
						ВыборкаТовары.НомерСтроки);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ВыборкаТовары.МассаГрузаБрутто) Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе ""%1"" в строке %2 не заполнена Масса груза (брутто).'"),
						ПредставлениеДокумента,
						ВыборкаТовары.НомерСтроки);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
				КонецЕсли;
			КонецЕсли;	
				
			Если ВидОперацииВыгрузки = Перечисления.ВидыОперацийТТН.Перемещение
				ИЛИ ВидОперацииВыгрузки = Перечисления.ВидыОперацийТТН.Реализация
				ИЛИ ВидОперацииВыгрузки = Перечисления.ВидыОперацийТТН.Возврат
				ИЛИ ВидОперацииВыгрузки = Перечисления.ВидыОперацийТТН.Списание Тогда
				
				Если ВыборкаТовары.ЭтоМаркированнаяПродукция Тогда
					ОтборКодовМарикровки.Ссылка 	= ВыборкаТовары.Ссылка;
					ОтборКодовМарикровки.КлючСвязи 	= ВыборкаТовары.КлючСвязи;
					
					КоличествоКодовМаркировки = 0;
					
					Пока ВыборкаКодыМаркировки.НайтиСледующий(ОтборКодовМарикровки) Цикл 
						КоличествоКодовМаркировки = КоличествоКодовМаркировки + 1;
					КонецЦикла;
					
					ВыборкаКодыМаркировки.Сбросить();
					
					Если НЕ ВыборкаТовары.Количество = КоличествоКодовМаркировки Тогда
						ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе ""%1"" количество маркируемой номенклатуры %2 не соответствует количество кодов маркировки.'"),
							ПредставлениеДокумента,
							ВыборкаТовары.Номенклатура);
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;	
		
		ВыборкаТовары.Сбросить();
		

		Если НЕ ЗначениеЗаполнено(ВыборкаДокументы.Склад) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе ""%1"" необходимо заполнить склад.'"), 
				ПредставлениеДокумента);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
		Иначе
			Если ТаблицаОбъектыСоответствия.Найти(ВыборкаДокументы.Склад, "ОбъектСоответствия") = Неопределено Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе ""%1"" для ""Склад"" нет идентификатора в ""Соответствие объектов сервисов"".'"), 
					ПредставлениеДокумента);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
			КонецЕсли;	
		КонецЕсли;
		
		Если ВидОперацииВыгрузки = Перечисления.ВидыОперацийТТН.Перемещение Тогда
			
			Если НЕ ЗначениеЗаполнено(ВыборкаДокументы.СкладПолучатель) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе ""%1"" необходимо заполнить склад получатель.'"), 
					ПредставлениеДокумента);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
			Иначе
				Если ТаблицаОбъектыСоответствия.Найти(ВыборкаДокументы.СкладПолучатель, "ОбъектСоответствия") = Неопределено Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе ""%1"" для ""Склад получатель"" нет идентификатора в ""Соответствие объектов сервисов"".'"), 
						ПредставлениеДокумента);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
				КонецЕсли;
			КонецЕсли;
			
			Если ВыборкаДокументы.СпособПеревозки = 10 Тогда
				
				Если НЕ ЗначениеЗаполнено(ВыборкаДокументы.Автомобиль) Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе ""%1"" необходимо заполнить автомобиль.'"), 
						ПредставлениеДокумента);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
				Иначе
					Если ТаблицаОбъектыСоответствия.Найти(ВыборкаДокументы.Автомобиль, "ОбъектСоответствия") = Неопределено Тогда
						ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе ""%1"" для ""Автомобиль"" нет идентификатора в ""Соответствие объектов сервисов"".'"), 
							ПредставлениеДокумента);
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ВыборкаДокументы.Водитель) Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе ""%1"" необходимо заполнить водителя.'"), 
						ПредставлениеДокумента);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
				Иначе
					Если ТаблицаОбъектыСоответствия.Найти(ВыборкаДокументы.Водитель, "ОбъектСоответствия") = Неопределено Тогда
						ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе ""%1"" для ""Водитель"" нет идентификатора в ""Соответствие объектов сервисов"".'"), 
							ПредставлениеДокумента);
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(ВыборкаДокументы.СпособПеревозки) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе ""%1"" необходимо указать способ перевозки.'"), 
					ПредставлениеДокумента);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
			КонецЕсли;
			
			Если ВыборкаДокументы.СпособПеревозки = 10 Тогда 
				
				Если НЕ ЗначениеЗаполнено(ВыборкаДокументы.Перевозчик)
					ИЛИ НЕ ЗначениеЗаполнено(ВыборкаДокументы.ИННПеревозчика) Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе ""%1"" для способа перевозки ""Автомобильный"" необходимо указать перевозчика и ИНН перевозчика.'"), 
						ПредставлениеДокумента);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;	
		
		Если ВидОперацииВыгрузки = Перечисления.ВидыОперацийТТН.Реализация
			ИЛИ ВидОперацииВыгрузки = Перечисления.ВидыОперацийТТН.Возврат Тогда
			
			Если НЕ ВыборкаДокументы.ВидПоставки = 20 Тогда 
				
				Если НЕ ЗначениеЗаполнено(ВыборкаДокументы.СкладПолучатель) Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе ""%1"" необходимо заполнить склад получатель.'"), 
						ПредставлениеДокумента);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
				Иначе
					Если ТаблицаОбъектыСоответствия.Найти(ВыборкаДокументы.СкладПолучатель, "ОбъектСоответствия") = Неопределено Тогда
						ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе ""%1"" для ""Склад получатель"" нет идентификатора в ""Соответствие объектов сервисов"".'"), 
							ПредставлениеДокумента);
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
			
			Если ВыборкаДокументы.СпособПеревозки = 10 Тогда
				
				Если НЕ ЗначениеЗаполнено(ВыборкаДокументы.Автомобиль) Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе ""%1"" необходимо заполнить автомобиль.'"), 
						ПредставлениеДокумента);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
				Иначе
					Если ТаблицаОбъектыСоответствия.Найти(ВыборкаДокументы.Автомобиль, "ОбъектСоответствия") = Неопределено Тогда
						ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе ""%1"" для ""Автомобиль"" нет идентификатора в ""Соответствие объектов сервисов"".'"), 
							ПредставлениеДокумента);
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ВыборкаДокументы.Водитель) Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе ""%1"" необходимо заполнить водителя.'"), 
						ПредставлениеДокумента);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
				Иначе
					Если ТаблицаОбъектыСоответствия.Найти(ВыборкаДокументы.Водитель, "ОбъектСоответствия") = Неопределено Тогда
						ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе ""%1"" для ""Водитель"" нет идентификатора в ""Соответствие объектов сервисов"".'"), 
							ПредставлениеДокумента);
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ВыборкаДокументы.Контрагент) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе ""%1"" необходимо указать контрагента.'"), 
					ПредставлениеДокумента);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
				
			Иначе
				Если НЕ ЗначениеЗаполнено(ВыборкаДокументы.КонтрагентСтранаРезидентства) Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе ""%1"" у контрагента не заполнена страна (или у страны не заполнен код).'"), 
						ПредставлениеДокумента);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ВыборкаДокументы.КонтрагентИНН) Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе ""%1"" у контрагента не заполнен ИНН.'"), 
						ПредставлениеДокумента);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ВыборкаДокументы.СпособПеревозки) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе ""%1"" необходимо указать способ перевозки.'"), 
					ПредставлениеДокумента);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
			КонецЕсли;
			
			Если ВыборкаДокументы.СпособПеревозки = 10 Тогда 
				
				Если НЕ ЗначениеЗаполнено(ВыборкаДокументы.Перевозчик)
					ИЛИ НЕ ЗначениеЗаполнено(ВыборкаДокументы.ИННПеревозчика) Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе ""%1"" для способа перевозки ""Автомобильный"" необходимо указать перевозчика и ИНН перевозчика.'"), 
						ПредставлениеДокумента);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ВыборкаДокументы.ВидПоставки) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе ""%1"" необходимо указать вид поставки.'"), 
					ПредставлениеДокумента);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			КонецЕсли;	
		КонецЕсли;	
		
		Если ВидОперацииВыгрузки = Перечисления.ВидыОперацийТТН.Списание Тогда
			
			Если НЕ ЗначениеЗаполнено(ВыборкаДокументы.ПричинаСписания) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе ""%1"" необходимо указать причину списания.'"), 
					ПредставлениеДокумента);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			Иначе
				Если НЕ ЗначениеЗаполнено(ВыборкаДокументы.ПричинаСписанияКод) Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе ""%1"" в причине списания необходимо указать код.'"), 
						ПредставлениеДокумента);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
		
		Если ВидОперацииВыгрузки = Перечисления.ВидыОперацийТТН.Оприходование
			ИЛИ ВидОперацииВыгрузки = Перечисления.ВидыОперацийТТН.ВыгрузкаОстатков Тогда
			
			Если НЕ ЗначениеЗаполнено(ВыборкаДокументы.ПричинаОприходования) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе ""%1"" необходимо указать причину оприходования.'"), 
					ПредставлениеДокумента);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			Иначе
				Если НЕ ЗначениеЗаполнено(ВыборкаДокументы.ПричинаОприходованияКод) Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе ""%1"" в причине оприходования необходимо указать код.'"), 
						ПредставлениеДокумента);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Отказ;
КонецФункции

&НаСервере
Функция ТребуетсяНастройкаАвторизацияИнтернетПоддержки()
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
		Возврат Не МодульИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура ПриПодключенииИнтернетПоддержки(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПодключенияИнтернетПоддержки", ЭтотОбъект, ДополнительныеПараметры);
		МодульИнтернетПоддержкаПользователейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтернетПоддержкаПользователейКлиент");
		МодульИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОписаниеОповещения, ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияИнтернетПоддержки(Результат, ДополнительныеПараметры) Экспорт
	Если Не (ТипЗнч(Результат) = Тип("Структура")
		И ЗначениеЗаполнено(Результат.Логин)) Тогда
		Возврат;
	КонецЕсли;
	
	ПродолжитьСохранение();	
КонецПроцедуры

&НаКлиенте
Процедура ДиалогОткрытияФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	      		
	Если ВыбранныеФайлы <> Неопределено И ВыбранныеФайлы.Количество() > 0 Тогда
		Попытка
			Ошибки = Неопределено;
			СтруктураДанных = ФормированиеФайлаXML();
			
			Если СтруктураДанных = Неопределено Тогда
				Возврат;				
			КонецЕсли;	
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось завершить формирование файла.
				|Техническая информация об ошибке: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецПопытки;
		
		Если НЕ Ошибки = Неопределено Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);	
			Возврат;
		КонецЕсли;		
		
		// Формирование имени файла.
		КаталогФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ВыбранныеФайлы[0]);
		ИмяФайла = СтруктураДанных.ИмяФайла;
		ПолноеИмяФайла = КаталогФайла + ИмяФайла;
		
		// Сохранение файла.
		Двоичное = ПолучитьИзВременногоХранилища(СтруктураДанных.АдресВременногоХранилища);
		Двоичное.Записать(ПолноеИмяФайла);	
		
		ТекстОповещения = НСтр("ru = 'Файл успешно сформирован'");
		ТекстПояснения = ИмяФайла;
		ПоказатьОповещениеПользователя(
			ТекстОповещения, 
			Новый ОписаниеОповещения("ОткрытьПроводник", ЭтотОбъект, Новый Структура("ПолноеИмяФайла", ПолноеИмяФайла)), 
			ТекстПояснения, 
			БиблиотекаКартинок.Информация32);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьСохранение()
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Укажите путь для сохранения файла'");
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ДиалогОткрытияФайлаЗавершение", ЭтотОбъект);
	ДиалогОткрытияФайла.Показать(Оповещение);

КонецПроцедуры // ПродолжитьСохранение()

&НаКлиенте
Процедура ПродолжитьВыгрузку()
	
	ПродолжитьВыгрузкуЗавершение();

КонецПроцедуры // ПродолжитьВыгрузку()

&НаКлиенте
Процедура ПродолжитьВыгрузкуЗавершение()
 
	Оповещение = Новый ОписаниеОповещения("НачатьПодключениеРасширенияРаботыСФайламиЗавершение", ЭтотОбъект);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
КонецПроцедуры 

&НаКлиенте
Процедура НачатьПодключениеРасширенияРаботыСФайламиЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
	Если НЕ Подключено Тогда
		Оповещение = Новый ОписаниеОповещения("НачатьУстановкуРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстСообщения = НСтр("ru = 'Для продолжении работы необходимо установить расширение для веб-клиента ""1С:Предприятие"". Установить?'");
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет); 
	КонецЕсли;
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Укажите путь для сохранения файла'");
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ДиалогОткрытияФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ДиалогОткрытияФайла.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьУстановкуРасширенияРаботыСФайламиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		НачатьУстановкуРасширенияРаботыСФайлами();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ФормированиеФайлаXML()
	
	Реквизиты = РаботаСКонтрагентамиБП.РеквизитыЭлектроннойТТН(ВидОперацииВыгрузки);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭТТНИсходящая.Ссылка КАК Ссылка,
		|	ЭТТНИсходящая.Склад КАК Склад,
		|	ЭТТНИсходящая.СкладПолучатель КАК СкладПолучатель,
		|	ЭТТНИсходящая.Автомобиль КАК Автомобиль,
		|	ЭТТНИсходящая.Водитель КАК Водитель,
		|	ЭТТНИсходящая.СпособПеревозки КАК СпособПеревозки,
		|	ЭТТНИсходящая.Перевозчик КАК Перевозчик,
		|	ЭТТНИсходящая.ИННПеревозчика КАК ИННПеревозчика,
		|	ЭТТНИсходящая.Контрагент КАК Контрагент,
		|	ЭТТНИсходящая.Контрагент.СтранаРезидентства КАК КонтрагентСтранаРезидентства,
		|	ЭТТНИсходящая.Контрагент.ИНН КАК КонтрагентИНН,
		|	ЭТТНИсходящая.ВидПоставки КАК ВидПоставки,
		|	ЭТТНИсходящая.ПричинаСписания КАК ПричинаСписания,
		|	ЭТТНИсходящая.ПричинаСписания.Код КАК ПричинаСписанияКод,
		|	ЭТТНИсходящая.ПричинаОприходования КАК ПричинаОприходования,
		|	ЭТТНИсходящая.ПричинаОприходования.Код КАК ПричинаОприходованияКод,
		|	ЭТТНИсходящая.Комментарий КАК Комментарий,
		|	ЭТТНИсходящая.НомерПрицепа КАК НомерПрицепа,
		|	ЭТТНИсходящая.НомерЭСФ КАК НомерЭСФ
		|ПОМЕСТИТЬ ВременнаяТаблицаЭТТНИсходящая
		|ИЗ
		|	Документ.ЭТТНИсходящая КАК ЭТТНИсходящая
		|ГДЕ
		|	ЭТТНИсходящая.Ссылка В(&МассивСсылок)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаЭТТНИсходящая.Ссылка КАК Ссылка,
		|	ВременнаяТаблицаЭТТНИсходящая.Склад КАК Склад,
		|	ВременнаяТаблицаЭТТНИсходящая.СкладПолучатель КАК СкладПолучатель,
		|	ВременнаяТаблицаЭТТНИсходящая.Автомобиль КАК Автомобиль,
		|	ВременнаяТаблицаЭТТНИсходящая.Водитель КАК Водитель,
		|	ВременнаяТаблицаЭТТНИсходящая.СпособПеревозки КАК СпособПеревозки,
		|	ВременнаяТаблицаЭТТНИсходящая.Перевозчик КАК Перевозчик,
		|	ВременнаяТаблицаЭТТНИсходящая.ИННПеревозчика КАК ИННПеревозчика,
		|	ВременнаяТаблицаЭТТНИсходящая.Контрагент КАК Контрагент,
		|	ВременнаяТаблицаЭТТНИсходящая.КонтрагентСтранаРезидентства КАК КонтрагентСтранаРезидентства,
		|	ВременнаяТаблицаЭТТНИсходящая.КонтрагентСтранаРезидентства.Код КАК КонтрагентСтранаРезидентстваКод,
		|	ВременнаяТаблицаЭТТНИсходящая.КонтрагентИНН КАК КонтрагентИНН,
		|	ВременнаяТаблицаЭТТНИсходящая.ВидПоставки КАК ВидПоставки,
		|	ВременнаяТаблицаЭТТНИсходящая.ПричинаСписания КАК ПричинаСписания,
		|	ВременнаяТаблицаЭТТНИсходящая.ПричинаСписанияКод КАК ПричинаСписанияКод,
		|	ВременнаяТаблицаЭТТНИсходящая.ПричинаОприходования КАК ПричинаОприходования,
		|	ВременнаяТаблицаЭТТНИсходящая.ПричинаОприходованияКод КАК ПричинаОприходованияКод,
		|	ВременнаяТаблицаЭТТНИсходящая.Комментарий КАК Комментарий,
		|	ВременнаяТаблицаЭТТНИсходящая.НомерПрицепа КАК НомерПрицепа,
		|	ВременнаяТаблицаЭТТНИсходящая.НомерЭСФ КАК НомерЭСФ
		|ИЗ
		|	ВременнаяТаблицаЭТТНИсходящая КАК ВременнаяТаблицаЭТТНИсходящая
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоответствиеОбъектовСервисов.Идентификатор КАК Идентификатор,
		|	СоответствиеОбъектовСервисов.ОбъектСоответствия КАК ОбъектСоответствия
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектовСервисов КАК СоответствиеОбъектовСервисов
		|ГДЕ
		|	СоответствиеОбъектовСервисов.ИмяСервиса = ЗНАЧЕНИЕ(Перечисление.ИменаСервисов.ЭТТН)
		|	И СоответствиеОбъектовСервисов.ОбъектСоответствия В
		|			(ВЫБРАТЬ
		|				ВременнаяТаблицаЭТТНИсходящая.Склад
		|			ИЗ
		|				ВременнаяТаблицаЭТТНИсходящая
		|		
		|			ОБЪЕДИНИТЬ ВСЕ
		|		
		|			ВЫБРАТЬ
		|				ВременнаяТаблицаЭТТНИсходящая.СкладПолучатель
		|			ИЗ
		|				ВременнаяТаблицаЭТТНИсходящая
		|		
		|			ОБЪЕДИНИТЬ ВСЕ
		|		
		|			ВЫБРАТЬ
		|				ВременнаяТаблицаЭТТНИсходящая.Автомобиль
		|			ИЗ
		|				ВременнаяТаблицаЭТТНИсходящая
		|		
		|			ОБЪЕДИНИТЬ ВСЕ
		|		
		|			ВЫБРАТЬ
		|				ВременнаяТаблицаЭТТНИсходящая.Водитель
		|			ИЗ
		|				ВременнаяТаблицаЭТТНИсходящая)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка КАК Ссылка,
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Номенклатура.КодТНВЭД.Код КАК КодТНВЭД,
		|	ТаблицаТовары.Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
		|	ТаблицаТовары.Номенклатура.ЭтоМаркированнаяПродукция КАК ЭтоМаркированнаяПродукция,
		|	ТаблицаТовары.Количество КАК Количество,
		|	ТаблицаТовары.Цена КАК Цена,
		|	ТаблицаТовары.МассаГрузаНетто КАК МассаГрузаНетто,
		|	ТаблицаТовары.МассаГрузаБрутто КАК МассаГрузаБрутто,
		|	ТаблицаТовары.КлючСвязи КАК КлючСвязи,
		|	ЕСТЬNULL(СоответствиеОбъектовСервисов.Идентификатор, """") КАК Идентификатор
		|ИЗ
		|	Документ.ЭТТНИсходящая.Товары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектовСервисов КАК СоответствиеОбъектовСервисов
		|		ПО ТаблицаТовары.Номенклатура = СоответствиеОбъектовСервисов.ОбъектСоответствия
		|			И (СоответствиеОбъектовСервисов.ИмяСервиса = ЗНАЧЕНИЕ(Перечисление.ИменаСервисов.ЭТТН))
		|ГДЕ
		|	ТаблицаТовары.Ссылка В(&МассивСсылок)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаКодыМаркировки.Ссылка КАК Ссылка,
		|	ТаблицаКодыМаркировки.КлючСвязи КАК КлючСвязи,
		|	ТаблицаКодыМаркировки.КодМаркировки КАК КодМаркировки
		|ИЗ
		|	Документ.ЭТТНИсходящая.КодыМаркировки КАК ТаблицаКодыМаркировки
		|ГДЕ
		|	ТаблицаКодыМаркировки.Ссылка В(&МассивСсылок)";
	Запрос.УстановитьПараметр("МассивСсылок", ДокументыВыгрузки);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ВыборкаДокументы 			= Результаты[1].Выбрать();  
	ТаблицаОбъектыСоответствия 	= Результаты[2].Выгрузить();
	ВыборкаТовары 				= Результаты[3].Выбрать();
	ВыборкаКодыМаркировки 		= Результаты[4].Выбрать();
	
	ОтборТоваров = Новый Структура();  
	ОтборТоваров.Вставить("Ссылка", Неопределено);
	
	ОтборКодовМарикровки = Новый Структура();  
	ОтборКодовМарикровки.Вставить("Ссылка", 	Неопределено);
	ОтборКодовМарикровки.Вставить("КлючСвязи", 	Неопределено);		
	
	// Разделение по видам операций
	Если ВидОперацииВыгрузки = Перечисления.ВидыОперацийТТН.Оприходование
		ИЛИ ВидОперацииВыгрузки = Перечисления.ВидыОперацийТТН.ВыгрузкаОстатков Тогда
		ШаблонИмениФайла = СтрШаблон("Electronic product invoice postings %1", Формат(ТекущаяДатаСеанса(), "ДЛФ=D"));
		ИмяФайла = ШаблонИмениФайла + ".xml";
		
		ОбъектXDTO = СоздатьОбъектXDTO(Реквизиты, "PostingBatchUpload");	
		ОбъектXDTO.InfoType = "Posting";
		ОбъектXDTO.FileVer = "1.0";
		
		Postings = СоздатьОбъектXDTO(Реквизиты, "Postings");
				
		Пока ВыборкаДокументы.Следующий() Цикл
			ОтборТоваров.Ссылка = ВыборкаДокументы.Ссылка;
			
			ИдентификаторСклад = ТаблицаОбъектыСоответствия.Найти(ВыборкаДокументы.Склад, "ОбъектСоответствия").Идентификатор;
			
			Posting = СоздатьОбъектXDTO(Реквизиты, "Posting");
			Posting.FacilityId = ИдентификаторСклад;
			Posting.Comment = ВыборкаДокументы.Комментарий;
			
			Products = СоздатьОбъектXDTO(Реквизиты, "Products");
			
			Пока ВыборкаТовары.НайтиСледующий(ОтборТоваров) Цикл
				PostingProduct = СоздатьОбъектXDTO(Реквизиты, "PostingProduct");
				PostingProduct.ProductId 			= ВыборкаТовары.Идентификатор;
				PostingProduct.SourceOfProductCode 	= ВыборкаДокументы.ПричинаОприходованияКод;
				PostingProduct.UnitCode 			= ВыборкаТовары.ЕдиницаИзмеренияКод;
				PostingProduct.Amount 				= Формат(ВыборкаТовары.Количество, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0");
				PostingProduct.Price 				= Формат(ВыборкаТовары.Цена, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0");
				
				Products.PostingProduct.Добавить(PostingProduct);
			КонецЦикла;
			
			ВыборкаТовары.Сбросить();
			
			Posting.Products.Добавить(Products);	
			Postings.Posting.Добавить(Posting);
		КонецЦикла;
			
		ОбъектXDTO.Postings.Добавить(Postings);
		
	ИначеЕсли ВидОперацииВыгрузки = Перечисления.ВидыОперацийТТН.Перемещение Тогда
		ШаблонИмениФайла = СтрШаблон("Electronic product invoice transfers %1", Формат(ТекущаяДатаСеанса(), "ДЛФ=D"));
		ИмяФайла = ШаблонИмениФайла + ".xml";
		
		ОбъектXDTO = СоздатьОбъектXDTO(Реквизиты, "TransferBatchUpload");	
		ОбъектXDTO.InfoType = "Transfer";
		ОбъектXDTO.FileVer = "1.0";
		
		Transfers = СоздатьОбъектXDTO(Реквизиты, "Transfers");
		
		Пока ВыборкаДокументы.Следующий() Цикл 
			ОтборТоваров.Ссылка = ВыборкаДокументы.Ссылка;
			
			ИдентификаторСклад = ТаблицаОбъектыСоответствия.Найти(ВыборкаДокументы.Склад, "ОбъектСоответствия").Идентификатор;
			
			ИдентификаторСкладПолучатель = ТаблицаОбъектыСоответствия.Найти(ВыборкаДокументы.СкладПолучатель, "ОбъектСоответствия").Идентификатор;
			
			Если ВыборкаДокументы.СпособПеревозки = 10 Тогда
				ИдентификаторАтомобиль 	= ТаблицаОбъектыСоответствия.Найти(ВыборкаДокументы.Автомобиль, "ОбъектСоответствия").Идентификатор;
				ИдентификаторВодитель 	= ТаблицаОбъектыСоответствия.Найти(ВыборкаДокументы.Водитель, "ОбъектСоответствия").Идентификатор;
			КонецЕсли;	
			
			Transfer = СоздатьОбъектXDTO(Реквизиты, "Transfer");
			Transfer.ProviderFacilityId = ИдентификаторСклад; 
			Transfer.CustomerFacilityId = ИдентификаторСкладПолучатель; 
			Transfer.ShippingTypeCode = Строка(ВыборкаДокументы.СпособПеревозки);
			
			Если ВыборкаДокументы.СпособПеревозки = 10 Тогда 
				Transfer.VehicleId = ИдентификаторАтомобиль;
				Transfer.DriverId = ИдентификаторВодитель;
				Transfer.ShippingOrganizationTin = ВыборкаДокументы.ИННПеревозчика;
				Transfer.TrailerNumber = ВыборкаДокументы.НомерПрицепа;
			Иначе
				Transfer.VehicleId = "";
				Transfer.TrailerNumber = "";	
			КонецЕсли;	
				
			Transfer.Comment = ВыборкаДокументы.Комментарий;
			
			Products = СоздатьОбъектXDTO(Реквизиты, "Products");
					
			Пока ВыборкаТовары.НайтиСледующий(ОтборТоваров) Цикл
				TransferProduct = СоздатьОбъектXDTO(Реквизиты, "TransferProduct");
				TransferProduct.ProductId 			= ВыборкаТовары.Идентификатор;
				TransferProduct.UnitCode 			= ВыборкаТовары.ЕдиницаИзмеренияКод;
				TransferProduct.Amount 				= Формат(ВыборкаТовары.Количество, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0");
				TransferProduct.NetWeight 			= Формат(ВыборкаТовары.МассаГрузаНетто, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0");
				TransferProduct.GrossWeight 		= Формат(ВыборкаТовары.МассаГрузаБрутто, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0");
							
				Если ВыборкаТовары.ЭтоМаркированнаяПродукция Тогда   
					ОтборКодовМарикровки.Ссылка 	= ВыборкаТовары.Ссылка;
					ОтборКодовМарикровки.КлючСвязи 	= ВыборкаТовары.КлючСвязи;
					
					MarkCodes = СоздатьОбъектXDTO(Реквизиты, "MarkCodes");
					
					Пока ВыборкаКодыМаркировки.НайтиСледующий(ОтборКодовМарикровки) Цикл							
						MarkCodes.MarkCode.Добавить(ВыборкаКодыМаркировки.КодМаркировки);
					КонецЦикла;
					
					TransferProduct.MarkCodes.Добавить(MarkCodes);
					
					ВыборкаКодыМаркировки.Сбросить();
				КонецЕсли;				
				
				Products.TransferProduct.Добавить(TransferProduct);
			КонецЦикла;
			
			ВыборкаТовары.Сбросить();
			
			Transfer.Products.Добавить(Products);	
			Transfers.Transfer.Добавить(Transfer);
		КонецЦикла;	
			
		ОбъектXDTO.Transfers.Добавить(Transfers);

	ИначеЕсли ВидОперацииВыгрузки = Перечисления.ВидыОперацийТТН.Реализация
		ИЛИ ВидОперацииВыгрузки = Перечисления.ВидыОперацийТТН.Возврат Тогда
		ШаблонИмениФайла = СтрШаблон("Electronic product invoice sellings %1", Формат(ТекущаяДатаСеанса(), "ДЛФ=D"));
		ИмяФайла = ШаблонИмениФайла + ".xml";
		
		ОбъектXDTO = СоздатьОбъектXDTO(Реквизиты, "SellingBatchUpload");	
		ОбъектXDTO.InfoType = "Selling";
		ОбъектXDTO.FileVer = "1.0";
		
		Sellings = СоздатьОбъектXDTO(Реквизиты, "Sellings");
		
		Пока ВыборкаДокументы.Следующий() Цикл  
			ОтборТоваров.Ссылка = ВыборкаДокументы.Ссылка;
			
			ИдентификаторСклад = ТаблицаОбъектыСоответствия.Найти(ВыборкаДокументы.Склад, "ОбъектСоответствия").Идентификатор;
			
			Если НЕ ВыборкаДокументы.ВидПоставки = 20 Тогда 
				ИдентификаторСкладПолучатель = ТаблицаОбъектыСоответствия.Найти(ВыборкаДокументы.СкладПолучатель, "ОбъектСоответствия").Идентификатор;
			КонецЕсли;	
				
			Если ВыборкаДокументы.СпособПеревозки = 10 Тогда
				ИдентификаторАтомобиль 	= ТаблицаОбъектыСоответствия.Найти(ВыборкаДокументы.Автомобиль, "ОбъектСоответствия").Идентификатор;
				ИдентификаторВодитель 	= ТаблицаОбъектыСоответствия.Найти(ВыборкаДокументы.Водитель, "ОбъектСоответствия").Идентификатор;
			КонецЕсли;
			
			Selling = СоздатьОбъектXDTO(Реквизиты, "Selling");
			
			Selling.DeliveryTypeCode 	= ВыборкаДокументы.ВидПоставки;				
			Selling.EsfNum 				= ВыборкаДокументы.НомерЭСФ; 
			Selling.GtdNum 				= "";
			Selling.ProviderFacilityId 	= ИдентификаторСклад; 
			Selling.CustomerTin 		= ВыборкаДокументы.КонтрагентИНН;
			Selling.CustomerCountryCode = ВыборкаДокументы.КонтрагентСтранаРезидентстваКод; 
			
			Если НЕ ВыборкаДокументы.ВидПоставки = 20 Тогда
				Selling.CustomerFacilityId 	= ИдентификаторСкладПолучатель;   
			КонецЕсли;	
				
			Selling.ShippingTypeCode 	= ВыборкаДокументы.СпособПеревозки;	
			
			Если ВыборкаДокументы.СпособПеревозки = 10 Тогда 
				Selling.VehicleId = ИдентификаторАтомобиль;
				Selling.DriverId = ИдентификаторВодитель;
				Selling.ShippingOrganizationTin = ВыборкаДокументы.ИННПеревозчика;
				Selling.TrailerNumber = ВыборкаДокументы.НомерПрицепа;
			Иначе
				Selling.VehicleId = "";
				Selling.DriverId = "";
				Selling.ShippingOrganizationTin = "";
				Selling.TrailerNumber = "";	
			КонецЕсли;
			
			Selling.BatchAndNumberOfSeal = "";
			
			Products = СоздатьОбъектXDTO(Реквизиты, "Products");
			
			Пока ВыборкаТовары.НайтиСледующий(ОтборТоваров) Цикл			
				SellingProduct = СоздатьОбъектXDTO(Реквизиты, "SellingProduct");
				SellingProduct.ProductId 			= ВыборкаТовары.Идентификатор;
				SellingProduct.UnitCode 			= ВыборкаТовары.ЕдиницаИзмеренияКод;
				SellingProduct.Amount 				= Формат(ВыборкаТовары.Количество, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0");
				SellingProduct.Price 				= Формат(ВыборкаТовары.Цена, "ЧЦ=15; ЧДЦ=3; ЧРД=.; ЧГ=0");
				SellingProduct.NetWeight 			= Формат(ВыборкаТовары.МассаГрузаНетто, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0");
				SellingProduct.GrossWeight 			= Формат(ВыборкаТовары.МассаГрузаБрутто, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0");
				
				Если ВыборкаТовары.ЭтоМаркированнаяПродукция Тогда   
					ОтборКодовМарикровки.Ссылка 	= ВыборкаТовары.Ссылка;
					ОтборКодовМарикровки.КлючСвязи 	= ВыборкаТовары.КлючСвязи;
					
					MarkCodes = СоздатьОбъектXDTO(Реквизиты, "MarkCodes");
					
					Пока ВыборкаКодыМаркировки.НайтиСледующий(ОтборКодовМарикровки) Цикл							
						MarkCodes.MarkCode.Добавить(ВыборкаКодыМаркировки.КодМаркировки);
					КонецЦикла;
					
					SellingProduct.MarkCodes.Добавить(MarkCodes);
					
					ВыборкаКодыМаркировки.Сбросить();
				КонецЕсли;			
				
				Products.SellingProduct.Добавить(SellingProduct);
			КонецЦикла;
			
			ВыборкаТовары.Сбросить();
			
			Selling.Products.Добавить(Products);  
			
			Selling.Comment = ВыборкаДокументы.Комментарий;
			
			Sellings.Selling.Добавить(Selling);	
		КонецЦикла;			
		
		ОбъектXDTO.Sellings.Добавить(Sellings);	
		
	ИначеЕсли ВидОперацииВыгрузки = Перечисления.ВидыОперацийТТН.Списание Тогда
		ШаблонИмениФайла = СтрШаблон("Electronic product invoice writeoffs %1", Формат(ТекущаяДатаСеанса(), "ДЛФ=D"));
		ИмяФайла = ШаблонИмениФайла + ".xml";
		
		ОбъектXDTO = СоздатьОбъектXDTO(Реквизиты, "WriteoffBatchUpload");	
		ОбъектXDTO.InfoType = "Writeoff";
		ОбъектXDTO.FileVer = "1.0";
		
		Writeoffs = СоздатьОбъектXDTO(Реквизиты, "Writeoffs");
		
		Пока ВыборкаДокументы.Следующий() Цикл  
			ОтборТоваров.Ссылка = ВыборкаДокументы.Ссылка;
			
			ИдентификаторСклад = ТаблицаОбъектыСоответствия.Найти(ВыборкаДокументы.Склад, "ОбъектСоответствия").Идентификатор;
			
			Writeoff = СоздатьОбъектXDTO(Реквизиты, "Writeoff");
			Writeoff.FacilityId = ИдентификаторСклад;
			Writeoff.WriteOffReasonCode = ВыборкаДокументы.ПричинаСписанияКод;
			Writeoff.Comment = ВыборкаДокументы.Комментарий;
			
			Products = СоздатьОбъектXDTO(Реквизиты, "Products");
			
			Пока ВыборкаТовары.НайтиСледующий(ОтборТоваров) Цикл
				WriteoffProduct = СоздатьОбъектXDTO(Реквизиты, "WriteoffProduct");
				WriteoffProduct.ProductId 			= ВыборкаТовары.Идентификатор;
				WriteoffProduct.UnitCode 			= ВыборкаТовары.ЕдиницаИзмеренияКод;
				WriteoffProduct.Amount 				= Формат(ВыборкаТовары.Количество, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0");
				WriteoffProduct.Price 				= Формат(ВыборкаТовары.Цена, "ЧЦ=15; ЧДЦ=3; ЧРД=.; ЧГ=0");
				
				Если ВыборкаТовары.ЭтоМаркированнаяПродукция Тогда   
					ОтборКодовМарикровки.Ссылка 	= ВыборкаТовары.Ссылка;
					ОтборКодовМарикровки.КлючСвязи 	= ВыборкаТовары.КлючСвязи;
					
					MarkCodes = СоздатьОбъектXDTO(Реквизиты, "MarkCodes");
					
					Пока ВыборкаКодыМаркировки.НайтиСледующий(ОтборКодовМарикровки) Цикл							
						MarkCodes.MarkCode.Добавить(ВыборкаКодыМаркировки.КодМаркировки);
					КонецЦикла;
					
					WriteoffProduct.MarkCodes.Добавить(MarkCodes);
						
					ВыборкаКодыМаркировки.Сбросить();
				КонецЕсли;			
				
				Products.WriteoffProduct.Добавить(WriteoffProduct);
			КонецЦикла;
			
			ВыборкаТовары.Сбросить();
			
			Writeoff.Products.Добавить(Products);	
			Writeoffs.Writeoff.Добавить(Writeoff);	
		КонецЦикла;	
			
		ОбъектXDTO.Writeoffs.Добавить(Writeoffs);	
	КонецЕсли;	
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьXML = Новый ЗаписьXML;
	ПараметрыЗаписиXML = Новый ПараметрыЗаписиXML("UTF-8", "1.0", Ложь);	
	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, ПараметрыЗаписиXML);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	Реквизиты.Прокси.ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
	ЗаписьXML.Закрыть();
	
	// Удаление лишнего текста из xml файла
	ТекстДокумент = Новый ТекстовыйДокумент;
	ТекстДокумент.Прочитать(ИмяВременногоФайла);
	ТекстФайла = ТекстДокумент.ПолучитьТекст();
	
	Если ВидОперацииВыгрузки = Перечисления.ВидыОперацийТТН.Оприходование
		ИЛИ ВидОперацииВыгрузки = Перечисления.ВидыОперацийТТН.ВыгрузкаОстатков Тогда
		Операция = "posting";
			
	ИначеЕсли ВидОперацииВыгрузки = Перечисления.ВидыОперацийТТН.Перемещение Тогда
		Операция = "transfer";
		
	ИначеЕсли ВидОперацииВыгрузки = Перечисления.ВидыОперацийТТН.Реализация
		ИЛИ ВидОперацииВыгрузки = Перечисления.ВидыОперацийТТН.Возврат Тогда
		Операция = "selling"; 
				
	ИначеЕсли ВидОперацииВыгрузки = Перечисления.ВидыОперацийТТН.Списание Тогда
		Операция = "writeoff";		
	КонецЕсли;		
	
	ТекстФайла = СтрЗаменить(
			ТекстФайла, 
			" xmlns=""http://ws.electronicproductinvoice"
				+ Операция
				+ ".company1c.com"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""",			
			"");
			
	ТекстДокумент.УстановитьТекст(ТекстФайла);	
	ТекстДокумент.Записать(ИмяВременногоФайла);
		
	Двоичное = Новый ДвоичныеДанные(ИмяВременногоФайла);
		
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(Двоичное, УникальныйИдентификатор);
	
	// Удаление временного файла
	ФайловаяСистема.УдалитьВременныйФайл(ИмяВременногоФайла);
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ИмяФайла", ИмяФайла);
	СтруктураДанных.Вставить("АдресВременногоХранилища", АдресВременногоХранилища);
		
	Возврат СтруктураДанных;
КонецФункции

&НаСервере
Функция СоздатьОбъектXDTO(Реквизиты, ИмяТипаОбъекта)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Реквизиты.Прокси.ФабрикаXDTO.Создать(Реквизиты.Прокси.ФабрикаXDTO.Тип(Реквизиты.ИмяПакета, ИмяТипаОбъекта));
	
КонецФункции

#КонецОбласти


#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов
&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов

// СтандартныеПодсистемы.ПодключаемыеКоманды

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область МеткиОтборов

&НаСервере
Процедура УстановитьОтборПоОсновнойОрганизации()

	Если Справочники.Организации.ИспользуетсяНесколькоОрганизаций() Тогда
		ОсновнаяОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		Если ЗначениеЗаполнено(ОсновнаяОрганизация) Тогда 
			УстановитьМеткуИОтборСписка("Организация", Элементы.ОтборОрганизация.Родитель.Имя, ОсновнаяОрганизация);
		КонецЕсли;	
	Иначе
		УдаляемыеМетки = Новый СписокЗначений;
		Для Каждого Элемент Из Элементы.ОтборОрганизация.Родитель.ПодчиненныеЭлементы Цикл 
			Если СтрНайти(Элемент.Имя, "Метка_") > 0 Тогда 
				МеткаИД = Сред(Элемент.Имя, СтрДлина("Метка_")+1);
				УдалитьМеткуОтбора(МеткаИД);
			КонецЕсли;	
		КонецЦикла;	
		
		УдалитьМеткиОтбора(УдаляемыеМетки);
		ОбновитьЭлементыМеток();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьМеткуИОтборСписка(ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения="")
	
	Если ПредставлениеЗначения = "" Тогда
		ПредставлениеЗначения = Строка(ВыбранноеЗначение);
	КонецЕсли; 
	
	РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, Список, ИмяПоляОтбораСписка);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	МеткаИД = Сред(Элемент.Имя, СтрДлина("Метка_")+1);
	УдалитьМеткуОтбора(МеткаИД);	
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД)
	
	РаботаСОтборами.УдалитьМеткуОтбораСервер(ЭтотОбъект, Список, МеткаИД);

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСОтборамиКлиент.ПредставлениеПериодаВыбратьПериод(ЭтотОбъект, "Список", "Дата");
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиОтборов()
	
	РаботаСОтборами.СохранитьНастройкиОтборов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПанельОтборов(Элемент)
	
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость);
		
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтборыНажатие(Элемент)
	УдаляемыеМетки = Новый СписокЗначений;
	Для МеткаИД = 0 По ДанныеМеток.Количество() Цикл
		УдаляемыеМетки.Добавить(МеткаИД);
	КонецЦикла;
	
	УдалитьМеткиОтбора(УдаляемыеМетки);
	ОбновитьЭлементыМеток();
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткиОтбора(Метки)
	
	РаботаСОтборами.УдалитьМеткиОтбораСервер(ЭтотОбъект, Список, Метки);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыМеток()
	
	РаботаСОтборами.ОбновитьЭлементыМеток(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти
