#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	ИмяТабличнойЧасти = "Товары";
	УстановитьВидимостьДоступностьЭлементов();
	УстановитьПараметрыВыбора();
	УстановитьТипДляВыбораСкладаПолучатель();
	
	// РаботаСФормами
	РаботаСФормамиСервер.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = ПодключаемоеОборудованиеБППовтИсп.ИспользоватьПодключаемоеОборудование();
	// Конец ПодключаемоеОборудование
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом 
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьПодвалФормы();

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	Если ИспользоватьПодключаемоеОборудование Тогда 
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	КонецЕсли;	
	// Конец ПодключаемоеОборудование
КонецПроцедуры

// Процедура - обработчик события ПриЗакрытии.
//
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	Если ИспользоватьПодключаемоеОборудование Тогда 
		МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	КонецЕсли;	
	// Конец ПодключаемоеОборудование
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПодборНоменклатурыПроизведен" 
		И ТипЗнч(Параметр) = Тип("Структура")
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор Тогда
		
		АдресЗапасовВХранилище = Параметр.АдресЗапасовВХранилище;
		ПолучитьТоварыИзХранилища(АдресЗапасовВХранилище);
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			// Преобразуем предварительно к ожидаемому формату.
			Если Параметр[1] = Неопределено Тогда
				ТекШтрихкод = Параметр[0]; // Достаем штрихкод из основных данных
			Иначе
				ТекШтрихкод = Параметр[1][1]; // Достаем штрихкод из дополнительных данных
			КонецЕсли;
			
			Штрихкод = ОбщегоНазначенияКлиентСервер.УдалитьНедопустимыеСимволыXML(ТекШтрихкод);

			ДанныеШтрихкодов = Новый Структура;
			ДанныеШтрихкодов.Вставить("Штрихкод", Штрихкод); 
			ДанныеШтрихкодов.Вставить("Количество", 1); 
			
			ПолученыШтрихкоды(ДанныеШтрихкодов);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	      
	// РаботаСФормами
	РаботаСФормамиСервер.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	УстановитьВидимостьДоступностьЭлементов();
	УстановитьПараметрыВыбора(Истина);
	УстановитьТипДляВыбораСкладаПолучатель();

КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	ЗаполнитьПоОснованиюНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ЗаполнитьДанныеГрузополучателя();
	
	// так на клиенте делать низя- исправить
	//Если Объект.Контрагент.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.КР") Тогда
	//	Объект.ВидПоставки = 10;	
	//Иначе
	//	Объект.ВидПоставки = 20;	
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПеревозчикПриИзменении(Элемент)
	
	Если ТипЗнч(Объект.Перевозчик) = Тип("СправочникСсылка.Контрагенты") Тогда
		Объект.ИННПеревозчика = ИННПеревозчика(Объект.Перевозчик);		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СохранитьВФорматеXML(Команда)
	
	Отказ = ПроверкаЗаполненияПередФормированиемФайлаXML();
	
	Если Отказ Тогда 
		Возврат
	КонецЕсли;
	
	Если ТребуетсяНастройкаАвторизацияИнтернетПоддержки() Тогда
		ТекстВопроса = НСтр("ru='Для сохранения накладной в xml
			|необходимо подключиться к Интернет-поддержке пользователей.
			|Подключиться сейчас?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриПодключенииИнтернетПоддержки", ЭтотОбъект);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Подключиться'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
	Иначе
		ПродолжитьВыгрузку();
	КонецЕсли;		
КонецПроцедуры
     
&НаКлиенте
Асинх Процедура ЗаполнитьТовары(Команда)
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен склад. Заполнение документа отменено.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Склад",,Отказ)		
	КонецЕсли;

	Если Отказ Тогда 
		Возврат
	КонецЕсли;		
	
	Если Объект.Товары.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Табличная часть документа будет очищена. Продолжить выполнение операции?'");
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;	

		Объект.Товары.Очистить();
	КонецЕсли;
	
	ЗаполнитьТоварыНаСервере();
КонецПроцедуры
    
// Процедура - обработчик события действия команды Подбор в табличную часть Товары.
// Открывает форму подбора.
//
&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	РаботаСПодборомНоменклатурыКлиент.ОткрытьПодбор(ЭтаФорма, "Товары", "Списание");
КонецПроцедуры

// ПодключаемоеОборудование
&НаКлиенте
Процедура ПоискПоШтрихкодуТовары(Команда)
	ТекШтрихкод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ТекШтрихкод, ДополнительныеПараметры) Экспорт
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
		ДанныеШтрихкодов = Новый Структура;
		ДанныеШтрихкодов.Вставить("Штрихкод", ТекШтрихкод);
		ДанныеШтрихкодов.Вставить("Количество", 1);
        ПолученыШтрихкоды(ДанныеШтрихкодов);
	КонецЕсли;	
КонецПроцедуры 

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	Доступность = Ложь;
	
	ОповещенияПриЗавершение = Новый ОписаниеОповещения("ЗагрузитьДанныеИзТСДЗавершение", ЭтотОбъект);
	ОборудованиеТерминалыСбораДанныхКлиент.НачатьЗагрузкуДанныеИзТСД(ОповещенияПриЗавершение, УникальныйИдентификатор);
	
КонецПроцедуры

// Обработка результата загрузки данных из ТСД.
//
// Параметры:
//  РезультатВыполнения - Структура - структура результата выполнения операции.
//  Параметры - Структура - структура дополнительных параметров.
//
&НаКлиенте
Процедура ЗагрузитьДанныеИзТСДЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат И РезультатВыполнения.Свойство("ТаблицаТоваров") Тогда
		ПолученыШтрихкоды(РезультатВыполнения.ТаблицаТоваров);
	КонецЕсли;
	
	ТекстЗаголовка = НСтр("ru='Операция выполнена'");
	ТекстСообщения = НСтр("ru='Загрузка данных из ТСД завершена'");
	
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Успешно32);
	
	Доступность = Истина;
	
КонецПроцедуры
// Конец ПодключаемоеОборудование

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОткрытьПроводник(ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ПолноеИмяФайла) Тогда 
		ФайловаяСистемаКлиент.ОткрытьПроводник(ДополнительныеПараметры.ПолноеИмяФайла);
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "КодыМаркировки");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	БухгалтерскийУчетКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтаФорма, "КодыМаркировки");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		БухгалтерскийУчетКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтаФорма);
		БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "КодыМаркировки");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ОбработатьИзменениеНоменклатуры(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоМестПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РассчитатьМассуГруза(СтрокаТабличнойЧасти);
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыМассаГрузаНеттоПриИзменении(Элемент)
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыМассаГрузаБруттоПриИзменении(Элемент)
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.КоличествоМест = СтрокаТабличнойЧасти.Количество;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);	
	
	РассчитатьМассуГруза(СтрокаТабличнойЧасти);
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);	
	
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВесЕдиницыНоменклатурыПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РассчитатьМассуГруза(СтрокаТабличнойЧасти);
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВесУпаковкиПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РассчитатьМассуГруза(СтрокаТабличнойЧасти);
	ОбновитьПодвалФормы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКодыМаркировки

&НаКлиенте
Процедура КодыМаркировкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		БухгалтерскийУчетКлиент.ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти(ЭтаФорма, Элемент.Имя);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КодыМаркировкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = БухгалтерскийУчетКлиент.ПередНачаломДобавленияВПодчиненнуюТабличнуюЧасть(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость и доступность элементов.
//
&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()
	
	Элементы.ПричинаСписания.Видимость 				= Ложь;
	Элементы.Грузополучатель.Видимость 				= Ложь;
	Элементы.СкладПолучатель.Видимость 				= Ложь;
	Элементы.НомерЭСФ.Видимость 					= Ложь;
	Элементы.Контрагент.Видимость 					= Ложь;
	Элементы.ПричинаОприходования.Видимость 		= Ложь;
	Элементы.СтраницаДоставка.Видимость 			= Ложь; 
	Элементы.ВидПоставки.Видимость 					= Ложь;
	Элементы.ДокументОснование.Видимость			= Ложь;
	Элементы.ТоварыЦена.Видимость 					= Ложь;
	Элементы.ТоварыСумма.Видимость 					= Ложь;
	Элементы.ТоварыНомерПрейскуранта.Видимость 		= Ложь;  
	Элементы.ТоварыВесЕдиницыНоменклатуры.Видимость = Ложь;
	Элементы.ТоварыВидУпаковки.Видимость 			= Ложь;
	Элементы.ТоварыВесУпаковки.Видимость 			= Ложь;
	Элементы.ТоварыКоличествоМест.Видимость 		= Ложь;
	Элементы.ТоварыМассаГрузаНетто.Видимость 		= Ложь;
	Элементы.ТоварыМассаГрузаБрутто.Видимость 		= Ложь;
	Элементы.КодыМаркировки.Видимость 				= Ложь;	
	Элементы.ТоварыПодборНоменклатуры.Видимость 	= Ложь;
	Элементы.ТоварыЗаполнитьТовары.Видимость 		= Ложь;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийТТН.Списание Тогда 
		Элементы.ПричинаСписания.Видимость 				= Истина;		
		Элементы.НомерЭСФ.Видимость 					= Истина; 
		Элементы.ДокументОснование.Видимость			= Истина;
		Элементы.ТоварыЦена.Видимость 					= Истина;
		Элементы.ТоварыСумма.Видимость 					= Истина;
		Элементы.ТоварыНомерПрейскуранта.Видимость 		= Истина;  
		Элементы.ТоварыВесЕдиницыНоменклатуры.Видимость = Истина;
		Элементы.ТоварыВидУпаковки.Видимость 			= Истина;
		Элементы.ТоварыВесУпаковки.Видимость 			= Истина;
		Элементы.ТоварыКоличествоМест.Видимость 		= Истина;
		Элементы.ТоварыМассаГрузаНетто.Видимость 		= Истина;
		Элементы.ТоварыМассаГрузаБрутто.Видимость 		= Истина;
		Элементы.КодыМаркировки.Видимость 				= Истина;   
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийТТН.Перемещение Тогда 		
		Элементы.СкладПолучатель.Видимость 				= Истина;
		Элементы.СтраницаДоставка.Видимость 			= Истина;
		Элементы.ДокументОснование.Видимость			= Истина;
		Элементы.ТоварыНомерПрейскуранта.Видимость 		= Истина;  
		Элементы.ТоварыВесЕдиницыНоменклатуры.Видимость = Истина;
		Элементы.ТоварыВидУпаковки.Видимость 			= Истина;
		Элементы.ТоварыВесУпаковки.Видимость 			= Истина;
		Элементы.ТоварыКоличествоМест.Видимость 		= Истина;
		Элементы.ТоварыМассаГрузаНетто.Видимость 		= Истина;
		Элементы.ТоварыМассаГрузаБрутто.Видимость 		= Истина;
		Элементы.КодыМаркировки.Видимость 				= Истина;  
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийТТН.Реализация Тогда 
		Элементы.Грузополучатель.Видимость 				= Истина;
		Элементы.СкладПолучатель.Видимость 				= Истина;		
		Элементы.НомерЭСФ.Видимость 					= Истина;
		Элементы.Контрагент.Видимость 					= Истина;
		Элементы.СтраницаДоставка.Видимость 			= Истина;
		Элементы.ВидПоставки.Видимость 					= Истина;
		Элементы.ДокументОснование.Видимость			= Истина;
		Элементы.ТоварыЦена.Видимость 					= Истина;
		Элементы.ТоварыСумма.Видимость 					= Истина;
		Элементы.ТоварыНомерПрейскуранта.Видимость 		= Истина;  
		Элементы.ТоварыВесЕдиницыНоменклатуры.Видимость = Истина;
		Элементы.ТоварыВидУпаковки.Видимость 			= Истина;
		Элементы.ТоварыВесУпаковки.Видимость 			= Истина;
		Элементы.ТоварыКоличествоМест.Видимость 		= Истина;
		Элементы.ТоварыМассаГрузаНетто.Видимость 		= Истина;
		Элементы.ТоварыМассаГрузаБрутто.Видимость 		= Истина;
		Элементы.КодыМаркировки.Видимость 				= Истина;  
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийТТН.Возврат Тогда 
		Элементы.Грузополучатель.Видимость 				= Истина;
		Элементы.СкладПолучатель.Видимость 				= Истина;		
		Элементы.НомерЭСФ.Видимость 					= Истина;
		Элементы.Контрагент.Видимость 					= Истина;
		Элементы.СтраницаДоставка.Видимость 			= Истина;
		Элементы.ВидПоставки.Видимость 					= Истина;
		Элементы.ДокументОснование.Видимость			= Истина;
		Элементы.ТоварыЦена.Видимость 					= Истина;
		Элементы.ТоварыСумма.Видимость 					= Истина;
		Элементы.ТоварыНомерПрейскуранта.Видимость 		= Истина;  
		Элементы.ТоварыВесЕдиницыНоменклатуры.Видимость = Истина;
		Элементы.ТоварыВидУпаковки.Видимость 			= Истина;
		Элементы.ТоварыВесУпаковки.Видимость 			= Истина;
		Элементы.ТоварыКоличествоМест.Видимость 		= Истина;
		Элементы.ТоварыМассаГрузаНетто.Видимость 		= Истина;
		Элементы.ТоварыМассаГрузаБрутто.Видимость 		= Истина;
		Элементы.КодыМаркировки.Видимость 				= Истина; 
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийТТН.Оприходование Тогда
		Элементы.ДокументОснование.Видимость			= Истина;
		Элементы.ТоварыЦена.Видимость 					= Истина;
		Элементы.ТоварыСумма.Видимость 					= Истина;
		Элементы.ПричинаОприходования.Видимость 		= Истина;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийТТН.ВыгрузкаОстатков Тогда
		Элементы.ТоварыЦена.Видимость 					= Истина;
		Элементы.ТоварыСумма.Видимость 					= Истина;
		Элементы.ПричинаОприходования.Видимость 		= Истина;
		Элементы.ТоварыПодборНоменклатуры.Видимость 	= Истина;
		Элементы.ТоварыЗаполнитьТовары.Видимость 		= Истина;
	КонецЕсли;			
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьТоварыНаСервере() Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,
		|	ХозрасчетныйОстатки.Субконто1.Наименование КАК НаименованиеНоменклатура,
		|	ХозрасчетныйОстатки.КоличествоОстаток КАК Количество,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстатки.КоличествоОстаток <> 0
		|			ТОГДА ХозрасчетныйОстатки.СуммаОстаток / ХозрасчетныйОстатки.КоличествоОстаток
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Цена,
		|	ХозрасчетныйОстатки.СуммаОстаток КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&Период,
		|			Счет В (&СчетаУчетаТоваров),
		|			&ВидыСубконто,
		|			Организация = &Организация
		|				И Субконто2 = &Склад) КАК ХозрасчетныйОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Субконто1,
		|	ХозрасчетныйОстатки.Субконто1.Наименование,
		|	ХозрасчетныйОстатки.КоличествоОстаток,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстатки.КоличествоОстаток <> 0
		|			ТОГДА ХозрасчетныйОстатки.СуммаОстаток / ХозрасчетныйОстатки.КоличествоОстаток
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ХозрасчетныйОстатки.СуммаОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&Период,
		|			Счет В (&СчетаУчетаМБП),
		|			&ВидыСубконтоМБП,
		|			Организация = &Организация
		|				И Субконто2 = &Склад) КАК ХозрасчетныйОстатки
		|
		|УПОРЯДОЧИТЬ ПО
		|	НаименованиеНоменклатура";	
	Запрос.УстановитьПараметр("Период", 	 ДатаДокумента);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Склад", 		 Объект.Склад);
	
	СчетаУчетаТоваров = БухгалтерскийУчетСервер.СчетаУчетаТоваров();
	Запрос.УстановитьПараметр("СчетаУчетаТоваров", СчетаУчетаТоваров);	
	
	ВидыСубконто = Новый Массив();
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	СчетаУчетаМБП = БухгалтерскийУчетСервер.СчетаУчетаМБП();
	Запрос.УстановитьПараметр("СчетаУчетаМБП", СчетаУчетаМБП);	
	
	ВидыСубконтоМБП = Новый Массив();
	ВидыСубконтоМБП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоМБП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Местонахождение);
	Запрос.УстановитьПараметр("ВидыСубконтоМБП", ВидыСубконтоМБП);
	
	Объект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());	
КонецПроцедуры
  
// Процедура - обработчик подбора товаров.
//
&НаСервере
Процедура ПолучитьТоварыИзХранилища(АдресЗапасовВХранилище)
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Для Каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", СтрокаЗагрузки.Номенклатура));
		
		Если НайденныеСтроки.Количество() > 0 Тогда 
			Продолжить;
		КонецЕсли;	
		
		СтрокаТабличнойЧасти = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаЗагрузки);
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбора(ИзменениеВидаОперации = Ложь)
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийТТН.Перемещение Тогда
		Элементы.СкладПолучатель.СвязиПараметровВыбора = Новый ФиксированныйМассив(Новый Массив());
		
		Если ИзменениеВидаОперации Тогда
			Объект.СкладПолучатель = Неопределено;
		КонецЕсли;	
	Иначе	
		СвязиСкладаПолучатель = Новый Массив;
		СвязиСкладаПолучатель.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Контрагент", РежимИзмененияСвязанногоЗначения.Очищать));
		
		Элементы.СкладПолучатель.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиСкладаПолучатель);
		
		Если ТипЗнч(Объект.СкладПолучатель) = Тип("СправочникСсылка.Склады") Тогда
			Объект.СкладПолучатель = Неопределено;	
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура УстановитьТипДляВыбораСкладаПолучатель()

	МассивТипов = Новый Массив();
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийТТН.Перемещение Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.Склады"));
 		Элементы.СкладПолучатель.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	Иначе
		МассивТипов.Добавить(Тип("СправочникСсылка.СкладыКонтрагентов"));
		Элементы.СкладПолучатель.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	КонецЕсли;	

КонецПроцедуры

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура - Установить пиктограмму комментария.
//
&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

// Процедура - Заполнить по основанию на сервере
//
&НаСервере
Процедура ЗаполнитьПоОснованиюНаСервере()
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Заполнить(Объект.ДокументОснование);
	ЗначениеВРеквизитФормы(Документ, "Объект");	
	Модифицированность = Истина;
КонецПроцедуры // ЗаполнитьПоОснованиюНаСервере()

&НаКлиенте
Процедура ОбработатьИзменениеНоменклатуры(СтрокаТабличнойЧасти)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);

	// Заполнение по данным номенклатуры
	СтрокаТабличнойЧасти.ВесЕдиницыНоменклатуры = СтруктураДанные.ВесЕдиницыНоменклатуры;
	СтрокаТабличнойЧасти.ВидУпаковки = СтруктураДанные.ВидУпаковки;
	СтрокаТабличнойЧасти.ВесУпаковки = СтруктураДанные.ВесУпаковки;
	
	Если СтрокаТабличнойЧасти.Количество = 0 Тогда 
		СтрокаТабличнойЧасти.Количество = 1;
		СтрокаТабличнойЧасти.КоличествоМест = 1;
	КонецЕсли;	
	
	РассчитатьМассуГруза(СтрокаТабличнойЧасти);
	ОбновитьПодвалФормы();
КонецПроцедуры	

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	ПараметрыНоменклатуры = Справочники.Номенклатура.ПолучитьПараметрыНоменклатуры(СтруктураДанные.Номенклатура);
	
	СтруктураДанные.Вставить("ВесЕдиницыНоменклатуры", ПараметрыНоменклатуры.ВесЕдиницыНоменклатуры);
	СтруктураДанные.Вставить("ВидУпаковки", ПараметрыНоменклатуры.ВидУпаковки);
	СтруктураДанные.Вставить("ВесУпаковки", ПараметрыНоменклатуры.ВесУпаковки);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаКлиенте
Процедура РассчитатьМассуГруза(СтрокаТабличнойЧасти)
	СтрокаТабличнойЧасти.МассаГрузаНетто = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ВесЕдиницыНоменклатуры;
	СтрокаТабличнойЧасти.МассаГрузаБрутто = СтрокаТабличнойЧасти.МассаГрузаНетто + СтрокаТабличнойЧасти.КоличествоМест *СтрокаТабличнойЧасти.ВесУпаковки;
КонецПроцедуры // РассчитатьМассуГруза()

&НаСервере
Процедура ЗаполнитьДанныеГрузополучателя()

	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		СведенияОКонтрагенте = БухгалтерскийУчетСервер.ПолучитьСведенияОКонтрагенте(Объект.Контрагент);
		АдресКонтрагента = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект.Контрагент, 
								Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента); 
		ТелефонКонтрагента = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект.Контрагент, 
									Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента); 
		
		Объект.Грузополучатель = "" + СведенияОКонтрагенте.НаименованиеПолное 
								+ ?(ЗначениеЗаполнено(СведенияОКонтрагенте.ИНН),", " + СведенияОКонтрагенте.ИНН, "") 
								+ ?(ЗначениеЗаполнено(АдресКонтрагента),", " + АдресКонтрагента, "")
								+ ", " + ТелефонКонтрагента;	
	Иначе								
		Объект.Грузополучатель = "";		
	КонецЕсли;	
КонецПроцедуры

// Процедура рассчитывает итоги для подвала формы.
//
&НаКлиенте
Процедура ОбновитьПодвалФормы()
	
	ИтогКоличествоМест = Объект.Товары.Итог("КоличествоМест");
	ИтогМассаГрузаНетто = Объект.Товары.Итог("МассаГрузаНетто");
	ИтогМассаГрузаБрутто = Объект.Товары.Итог("МассаГрузаБрутто");
	ИтогСумма = Объект.Товары.Итог("Сумма");
	
КонецПроцедуры // ОбновитьПодвалФормы()

&НаСервереБезКонтекста
Функция ИННПеревозчика(Перевозчик)

	Возврат Перевозчик.ИНН;	

КонецФункции // ИННПеревозчика()

&НаСервере
Функция ПроверкаЗаполненияПередФормированиемФайлаXML()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Количество КАК Количество,
		|	Товары.Цена КАК Цена,
		|	Товары.МассаГрузаНетто КАК МассаГрузаНетто,
		|	Товары.МассаГрузаБрутто КАК МассаГрузаБрутто,
		|	Товары.КлючСвязи КАК КлючСвязи
		|ПОМЕСТИТЬ ВременнаяТаблицаТовары
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ВЫРАЗИТЬ(ВременнаяТаблицаТовары.Номенклатура КАК Справочник.Номенклатура).КодТНВЭД.Код КАК КодТНВЭД,
		|	ВЫРАЗИТЬ(ВременнаяТаблицаТовары.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
		|	ВЫРАЗИТЬ(ВременнаяТаблицаТовары.Номенклатура КАК Справочник.Номенклатура).ЭтоМаркированнаяПродукция КАК ЭтоМаркированнаяПродукция,
		|	ВременнаяТаблицаТовары.Количество КАК Количество,
		|	ВременнаяТаблицаТовары.Цена КАК Цена,
		|	ВременнаяТаблицаТовары.МассаГрузаНетто КАК МассаГрузаНетто,
		|	ВременнаяТаблицаТовары.МассаГрузаБрутто КАК МассаГрузаБрутто,
		|	ВременнаяТаблицаТовары.КлючСвязи КАК КлючСвязи,
		|	ЕСТЬNULL(СоответствиеОбъектовСервисов.Идентификатор, """") КАК Идентификатор
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектовСервисов КАК СоответствиеОбъектовСервисов
		|		ПО ВременнаяТаблицаТовары.Номенклатура = СоответствиеОбъектовСервисов.ОбъектСоответствия
		|			И (СоответствиеОбъектовСервисов.ИмяСервиса = ЗНАЧЕНИЕ(Перечисление.ИменаСервисов.ЭТТН))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоответствиеОбъектовСервисов.Идентификатор КАК Идентификатор,
		|	СоответствиеОбъектовСервисов.ОбъектСоответствия КАК ОбъектСоответствия
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектовСервисов КАК СоответствиеОбъектовСервисов
		|ГДЕ
		|	СоответствиеОбъектовСервисов.ИмяСервиса = ЗНАЧЕНИЕ(Перечисление.ИменаСервисов.ЭТТН)
		|	И СоответствиеОбъектовСервисов.ОбъектСоответствия В (&ОбъектыСоответствия)";
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить());
	
	ОбъектыСоответствия = Новый Массив();
	ОбъектыСоответствия.Добавить(Объект.Склад);
	ОбъектыСоответствия.Добавить(Объект.СкладПолучатель);
	ОбъектыСоответствия.Добавить(Объект.Автомобиль);
	ОбъектыСоответствия.Добавить(Объект.Водитель);
	Запрос.УстановитьПараметр("ОбъектыСоответствия", ОбъектыСоответствия);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Выборка = Результаты[1].Выбрать();
	
	ОтборКодовМарикровки = Новый Структура();
	ОтборКодовМарикровки.Вставить("КлючСвязи", Неопределено);	
	
	Отказ = Ложь;
	
	Пока Выборка.Следующий() Цикл 
		
		Если НЕ ЗначениеЗаполнено(Выборка.Идентификатор) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Для номенклатуры %1 нет идентификатора в ""Соответствие объектов сервисов"".'"),
				Выборка.Номенклатура);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(Выборка.ЕдиницаИзмеренияКод) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'У номенклатуры %1 не заполнена единица измерения (или у единицы измерения не заполнен код).'"),
				Выборка.Номенклатура);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Выборка.Количество) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'В строке %1 не заполнено количество.'"),
				Выборка.НомерСтроки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
			
		ИначеЕсли Выборка.Количество > Цел(Выборка.Количество) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Для выгрузки файла количество, в строке %1, необходимо указать целое.'"),
				Выборка.НомерСтроки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Выборка.КодТНВЭД) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'У номенклатуры %1 не заполнен ТН ВЭД.'"),
				Выборка.Номенклатура);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
		КонецЕсли;
			
		Если Объект.ВидОперации = Перечисления.ВидыОперацийТТН.Оприходование
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийТТН.ВыгрузкаОстатков
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийТТН.Реализация
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийТТН.Возврат
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийТТН.Списание Тогда
			
			Если НЕ ЗначениеЗаполнено(Выборка.Цена) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'В строке %1 не заполнен цена.'"),
					Выборка.НомерСтроки);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
			КонецЕсли;				
		КонецЕсли;	
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийТТН.Перемещение
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийТТН.Реализация
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийТТН.Возврат Тогда
			
			Если НЕ ЗначениеЗаполнено(Выборка.МассаГрузаНетто) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'В строке %1 не заполнена Масса груза (нетто).'"),
					Выборка.НомерСтроки);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Выборка.МассаГрузаБрутто) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'В строке %1 не заполнена Масса груза (брутто).'"),
					Выборка.НомерСтроки);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
			КонецЕсли;
		КонецЕсли;	
			
		Если Объект.ВидОперации = Перечисления.ВидыОперацийТТН.Перемещение
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийТТН.Реализация
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийТТН.Возврат
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийТТН.Списание Тогда
			
			Если Выборка.ЭтоМаркированнаяПродукция Тогда			
				ОтборКодовМарикровки.КлючСвязи = Выборка.КлючСвязи;
				
				КоличествоКодовМаркировки = Объект.КодыМаркировки.НайтиСтроки(ОтборКодовМарикровки).Количество();
							
				Если НЕ Выборка.Количество = КоличествоКодовМаркировки Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Количество маркируемой номенклатуры %1 не соответствует количество кодов маркировки.'"),
						Выборка.Номенклатура);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;	
	
	ТаблицаОбъектыСоответствия = Результаты[2].Выгрузить();	
	
	Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо заполнить склад.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
	Иначе
		Если ТаблицаОбъектыСоответствия.Найти(Объект.Склад, "ОбъектСоответствия") = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Для ""Склад"" нет идентификатора в ""Соответствие объектов сервисов"".'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
		КонецЕсли;	
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийТТН.Перемещение Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.СкладПолучатель) Тогда
			ТекстСообщения = НСтр("ru = 'Необходимо заполнить склад получатель.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
		Иначе
			Если ТаблицаОбъектыСоответствия.Найти(Объект.СкладПолучатель, "ОбъектСоответствия") = Неопределено Тогда
				ТекстСообщения = НСтр("ru = 'Для ""Склад получатель"" нет идентификатора в ""Соответствие объектов сервисов"".'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.СпособПеревозки = 10 Тогда
			
			Если НЕ ЗначениеЗаполнено(Объект.Автомобиль) Тогда
				ТекстСообщения = НСтр("ru = 'Необходимо заполнить автомобиль.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
			Иначе
				Если ТаблицаОбъектыСоответствия.Найти(Объект.Автомобиль, "ОбъектСоответствия") = Неопределено Тогда
					ТекстСообщения = НСтр("ru = 'Для ""Автомобиль"" нет идентификатора в ""Соответствие объектов сервисов"".'");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Водитель) Тогда
				ТекстСообщения = НСтр("ru = 'Необходимо заполнить водителя.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
			Иначе
				Если ТаблицаОбъектыСоответствия.Найти(Объект.Водитель, "ОбъектСоответствия") = Неопределено Тогда
					ТекстСообщения = НСтр("ru = 'Для ""Водитель"" нет идентификатора в ""Соответствие объектов сервисов"".'");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(Объект.СпособПеревозки) Тогда
			ТекстСообщения = НСтр("ru = 'Необходимо указать способ перевозки.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
		КонецЕсли;
		
		Если Объект.СпособПеревозки = 10 Тогда 
			
			Если НЕ ЗначениеЗаполнено(Объект.Перевозчик)
				ИЛИ НЕ ЗначениеЗаполнено(Объект.ИННПеревозчика) Тогда
				ТекстСообщения = НСтр("ru = 'Для способа перевозки ""Автомобильный"" необходимо указать перевозчика и ИНН перевозчика.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийТТН.Реализация
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийТТН.Возврат Тогда
		
		Если НЕ Объект.ВидПоставки = 20 Тогда
			
			Если НЕ ЗначениеЗаполнено(Объект.СкладПолучатель) Тогда
				ТекстСообщения = НСтр("ru = 'Необходимо заполнить склад получатель.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
			Иначе
				Если ТаблицаОбъектыСоответствия.Найти(Объект.СкладПолучатель, "ОбъектСоответствия") = Неопределено Тогда
					ТекстСообщения = НСтр("ru = 'Для ""Склад получатель"" нет идентификатора в ""Соответствие объектов сервисов"".'");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
		
		Если Объект.СпособПеревозки = 10 Тогда
			
			Если НЕ ЗначениеЗаполнено(Объект.Автомобиль) Тогда
				ТекстСообщения = НСтр("ru = 'Необходимо заполнить автомобиль.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
			Иначе
				Если ТаблицаОбъектыСоответствия.Найти(Объект.Автомобиль, "ОбъектСоответствия") = Неопределено Тогда
					ТекстСообщения = НСтр("ru = 'Для ""Автомобиль"" нет идентификатора в ""Соответствие объектов сервисов"".'");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Водитель) Тогда
				ТекстСообщения = НСтр("ru = 'Необходимо заполнить водителя.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
			Иначе
				Если ТаблицаОбъектыСоответствия.Найти(Объект.Водитель, "ОбъектСоответствия") = Неопределено Тогда
					ТекстСообщения = НСтр("ru = 'Для ""Водитель"" нет идентификатора в ""Соответствие объектов сервисов"".'");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ТекстСообщения = НСтр("ru = 'Необходимо указать контрагента.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
			
		Иначе
			Если НЕ ЗначениеЗаполнено(Объект.Контрагент.СтранаРезидентства) Тогда
				ТекстСообщения = НСтр("ru = 'У контрагента не заполнена страна (или у страны не заполнен код).'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Контрагент.ИНН) Тогда
				ТекстСообщения = НСтр("ru = 'У контрагента не заполнен ИНН.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.СпособПеревозки) Тогда
			ТекстСообщения = НСтр("ru = 'Необходимо указать способ перевозки.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
		КонецЕсли;
		
		Если Объект.СпособПеревозки = 10 Тогда 
			
			Если НЕ ЗначениеЗаполнено(Объект.Перевозчик)
				ИЛИ НЕ ЗначениеЗаполнено(Объект.ИННПеревозчика) Тогда
				ТекстСообщения = НСтр("ru = 'Для способа перевозки ""Автомобильный"" необходимо указать перевозчика и ИНН перевозчика.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ВидПоставки) Тогда
			ТекстСообщения = НСтр("ru = 'Необходимо указать вид поставки.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;	
	КонецЕсли;	
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийТТН.Списание Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ПричинаСписания) Тогда
			ТекстСообщения = НСтр("ru = 'Необходимо указать причину списания.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		Иначе
			Если НЕ ЗначениеЗаполнено(Объект.ПричинаСписания.Код) Тогда
				ТекстСообщения = НСтр("ru = 'В причине списания необходимо указать код.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийТТН.Оприходование
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийТТН.ВыгрузкаОстатков Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ПричинаОприходования) Тогда
			ТекстСообщения = НСтр("ru = 'Необходимо указать причину оприходования.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		Иначе
			Если НЕ ЗначениеЗаполнено(Объект.ПричинаОприходования.Код) Тогда
				ТекстСообщения = НСтр("ru = 'В причине оприходования необходимо указать код.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	Возврат Отказ;	
КонецФункции

&НаСервере
Функция ТребуетсяНастройкаАвторизацияИнтернетПоддержки()
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
		Возврат Не МодульИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура ПриПодключенииИнтернетПоддержки(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПодключенияИнтернетПоддержки", ЭтотОбъект, ДополнительныеПараметры);
		МодульИнтернетПоддержкаПользователейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтернетПоддержкаПользователейКлиент");
		МодульИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОписаниеОповещения, ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияИнтернетПоддержки(Результат, ДополнительныеПараметры) Экспорт
	Если Не (ТипЗнч(Результат) = Тип("Структура")
		И ЗначениеЗаполнено(Результат.Логин)) Тогда
		Возврат;
	КонецЕсли;
	
	ПродолжитьСохранение();	
КонецПроцедуры

&НаКлиенте
Процедура ДиалогОткрытияФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	      		
	Если ВыбранныеФайлы <> Неопределено И ВыбранныеФайлы.Количество() > 0 Тогда
		Попытка
			Ошибки = Неопределено;
			СтруктураДанных = ФормированиеФайлаXML();
			
			Если СтруктураДанных = Неопределено Тогда
				Возврат;				
			КонецЕсли;	
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось завершить формирование файла.
				|Техническая информация об ошибке: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецПопытки;
		
		Если НЕ Ошибки = Неопределено Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);	
			Возврат;
		КонецЕсли;		
		
		// Формирование имени файла.
		КаталогФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ВыбранныеФайлы[0]);
		ИмяФайла = СтруктураДанных.ИмяФайла;
		ПолноеИмяФайла = КаталогФайла + ИмяФайла;
		
		// Сохранение файла.
		Двоичное = ПолучитьИзВременногоХранилища(СтруктураДанных.АдресВременногоХранилища);
		Двоичное.Записать(ПолноеИмяФайла);	
		
		ТекстОповещения = НСтр("ru = 'Файл успешно сформирован'");
		ТекстПояснения = ИмяФайла;
		ПоказатьОповещениеПользователя(
			ТекстОповещения, 
			Новый ОписаниеОповещения("ОткрытьПроводник", ЭтотОбъект, Новый Структура("ПолноеИмяФайла", ПолноеИмяФайла)), 
			ТекстПояснения, 
			БиблиотекаКартинок.Информация32);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьСохранение()
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Укажите путь для сохранения файла'");
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ДиалогОткрытияФайлаЗавершение", ЭтотОбъект);
	ДиалогОткрытияФайла.Показать(Оповещение);

КонецПроцедуры // ПродолжитьСохранение()

&НаКлиенте
Процедура ПродолжитьВыгрузку()
	
	Если Объект.Ссылка.Пустая() Или Модифицированность Тогда  
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Выполнение действия возможно только после записи данных.
			|Данные будут записаны.'");
		Обработчик = Новый ОписаниеОповещения("ПродолжитьВыполнениеКомандыПослеПодтвержденияЗаписи", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;		
	
	ПродолжитьВыгрузкуЗавершение();

КонецПроцедуры // ПродолжитьВыгрузку()

// Ветка процедуры, возникающая после диалога подтверждения записи.
&НаКлиенте
Процедура ПродолжитьВыполнениеКомандыПослеПодтвержденияЗаписи(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ОчиститьСообщения();
		Записать();
		Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
			Возврат; // Запись не удалась, сообщения о причинах выводит платформа.
		КонецЕсли;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	ПродолжитьВыгрузкуЗавершение()
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьВыгрузкуЗавершение()
 
	Оповещение = Новый ОписаниеОповещения("НачатьПодключениеРасширенияРаботыСФайламиЗавершение", ЭтотОбъект);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
КонецПроцедуры 

&НаКлиенте
Процедура НачатьПодключениеРасширенияРаботыСФайламиЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
	Если НЕ Подключено Тогда
		Оповещение = Новый ОписаниеОповещения("НачатьУстановкуРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстСообщения = НСтр("ru = 'Для продолжении работы необходимо установить расширение для веб-клиента ""1С:Предприятие"". Установить?'");
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет); 
	КонецЕсли;
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Укажите путь для сохранения файла'");
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ДиалогОткрытияФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ДиалогОткрытияФайла.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьУстановкуРасширенияРаботыСФайламиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		НачатьУстановкуРасширенияРаботыСФайлами();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ФормированиеФайлаXML()
	
	Реквизиты = РаботаСКонтрагентамиБП.РеквизитыЭлектроннойТТН(Объект.ВидОперации);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Количество КАК Количество,
		|	Товары.Цена КАК Цена,
		|	Товары.МассаГрузаНетто КАК МассаГрузаНетто,
		|	Товары.МассаГрузаБрутто КАК МассаГрузаБрутто,
		|	Товары.КлючСвязи КАК КлючСвязи
		|ПОМЕСТИТЬ ВременнаяТаблицаТовары
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ВЫРАЗИТЬ(ВременнаяТаблицаТовары.Номенклатура КАК Справочник.Номенклатура).КодТНВЭД.Код КАК КодТНВЭД,
		|	ВЫРАЗИТЬ(ВременнаяТаблицаТовары.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
		|	ВЫРАЗИТЬ(ВременнаяТаблицаТовары.Номенклатура КАК Справочник.Номенклатура).ЭтоМаркированнаяПродукция КАК ЭтоМаркированнаяПродукция,
		|	ВременнаяТаблицаТовары.Количество КАК Количество,
		|	ВременнаяТаблицаТовары.Цена КАК Цена,
		|	ВременнаяТаблицаТовары.МассаГрузаНетто КАК МассаГрузаНетто,
		|	ВременнаяТаблицаТовары.МассаГрузаБрутто КАК МассаГрузаБрутто,
		|	ВременнаяТаблицаТовары.КлючСвязи КАК КлючСвязи,
		|	ЕСТЬNULL(СоответствиеОбъектовСервисов.Идентификатор, """") КАК Идентификатор
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектовСервисов КАК СоответствиеОбъектовСервисов
		|		ПО ВременнаяТаблицаТовары.Номенклатура = СоответствиеОбъектовСервисов.ОбъектСоответствия
		|			И (СоответствиеОбъектовСервисов.ИмяСервиса = ЗНАЧЕНИЕ(Перечисление.ИменаСервисов.ЭТТН))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоответствиеОбъектовСервисов.Идентификатор КАК Идентификатор,
		|	СоответствиеОбъектовСервисов.ОбъектСоответствия КАК ОбъектСоответствия
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектовСервисов КАК СоответствиеОбъектовСервисов
		|ГДЕ
		|	СоответствиеОбъектовСервисов.ИмяСервиса = ЗНАЧЕНИЕ(Перечисление.ИменаСервисов.ЭТТН)
		|	И СоответствиеОбъектовСервисов.ОбъектСоответствия В (&ОбъектыСоответствия)";
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить());
	
	ОбъектыСоответствия = Новый Массив();
	ОбъектыСоответствия.Добавить(Объект.Склад);
	ОбъектыСоответствия.Добавить(Объект.СкладПолучатель);
	ОбъектыСоответствия.Добавить(Объект.Автомобиль);
	ОбъектыСоответствия.Добавить(Объект.Водитель);
	Запрос.УстановитьПараметр("ОбъектыСоответствия", ОбъектыСоответствия);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Выборка = Результаты[1].Выбрать();
	
	ТаблицаОбъектыСоответствия = Результаты[2].Выгрузить();	
	ИдентификаторСклад = ТаблицаОбъектыСоответствия.Найти(Объект.Склад, "ОбъектСоответствия").Идентификатор;
			
	// Разделение по видам операций
	Если Объект.ВидОперации = Перечисления.ВидыОперацийТТН.Оприходование
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийТТН.ВыгрузкаОстатков Тогда
		ШаблонИмениФайла = СтрШаблон("Electronic product invoice posting %1", Формат(ДатаДокумента, "ДЛФ=D"));
		ИмяФайла = ШаблонИмениФайла + ".xml";
		
		ОбъектXDTO = СоздатьОбъектXDTO(Реквизиты, "PostingBatchUpload");	
		ОбъектXDTO.InfoType = "Posting";
		ОбъектXDTO.FileVer = "1.0";
		
		Postings = СоздатьОбъектXDTO(Реквизиты, "Postings");
		
		Posting = СоздатьОбъектXDTO(Реквизиты, "Posting");
		Posting.FacilityId = ИдентификаторСклад;
		Posting.Comment = Объект.Комментарий;
		
		Products = СоздатьОбъектXDTO(Реквизиты, "Products");
		
		Пока Выборка.Следующий() Цикл
			PostingProduct = СоздатьОбъектXDTO(Реквизиты, "PostingProduct");
			PostingProduct.ProductId 			= Выборка.Идентификатор;
			PostingProduct.SourceOfProductCode 	= Объект.ПричинаОприходования.Код;
			PostingProduct.UnitCode 			= Выборка.ЕдиницаИзмеренияКод;
			PostingProduct.Amount 				= Формат(Выборка.Количество, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0");
			PostingProduct.Price 				= Формат(Выборка.Цена, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0");
			
			Products.PostingProduct.Добавить(PostingProduct);
		КонецЦикла;

		Posting.Products.Добавить(Products);	
		Postings.Posting.Добавить(Posting);	
		ОбъектXDTO.Postings.Добавить(Postings);
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийТТН.Перемещение Тогда
		ШаблонИмениФайла = СтрШаблон("Electronic product invoice transfer %1", Формат(ДатаДокумента, "ДЛФ=D"));
		ИмяФайла = ШаблонИмениФайла + ".xml";
		
		ИдентификаторСкладПолучатель = ТаблицаОбъектыСоответствия.Найти(Объект.СкладПолучатель, "ОбъектСоответствия").Идентификатор;
		
		Если Объект.СпособПеревозки = 10 Тогда
			ИдентификаторАтомобиль 	= ТаблицаОбъектыСоответствия.Найти(Объект.Автомобиль, "ОбъектСоответствия").Идентификатор;
			ИдентификаторВодитель 	= ТаблицаОбъектыСоответствия.Найти(Объект.Водитель, "ОбъектСоответствия").Идентификатор;
		КонецЕсли;	
		
		ОбъектXDTO = СоздатьОбъектXDTO(Реквизиты, "TransferBatchUpload");	
		ОбъектXDTO.InfoType = "Transfer";
		ОбъектXDTO.FileVer = "1.0";
		
		Transfers = СоздатьОбъектXDTO(Реквизиты, "Transfers");
		
		Transfer = СоздатьОбъектXDTO(Реквизиты, "Transfer");
		//Transfer.ProviderBranchTin = "";
		Transfer.ProviderFacilityId = ИдентификаторСклад; 
		//Transfer.CustomerBranchTin = "";
		Transfer.CustomerFacilityId = ИдентификаторСкладПолучатель; 
		Transfer.ShippingTypeCode = Строка(Объект.СпособПеревозки);
		
		Если Объект.СпособПеревозки = 10 Тогда 
			Transfer.VehicleId = ИдентификаторАтомобиль;
			Transfer.DriverId = ИдентификаторВодитель;
			Transfer.ShippingOrganizationTin = Объект.ИННПеревозчика;
			Transfer.TrailerNumber = Объект.НомерПрицепа;
		Иначе
			Transfer.VehicleId = "";
			//Transfer.DriverId = "";
			//Transfer.ShippingOrganizationTin = "";
			Transfer.TrailerNumber = "";	
		КонецЕсли;	
		
		//Transfer.TrailerCount = "";
		//Transfer.BatchAndNumberOfSeal = "";
			
		Transfer.Comment = Объект.Комментарий;
		
		Products = СоздатьОбъектXDTO(Реквизиты, "Products");
		
		ОтборКодовМарикровки = Новый Структура();
		ОтборКодовМарикровки.Вставить("КлючСвязи", Неопределено);
				
		Пока Выборка.Следующий() Цикл
			TransferProduct = СоздатьОбъектXDTO(Реквизиты, "TransferProduct");
			TransferProduct.ProductId 			= Выборка.Идентификатор;
			TransferProduct.UnitCode 			= Выборка.ЕдиницаИзмеренияКод;
			TransferProduct.Amount 				= Формат(Выборка.Количество, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0");
			TransferProduct.NetWeight 			= Формат(Выборка.МассаГрузаНетто, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0");
			TransferProduct.GrossWeight 		= Формат(Выборка.МассаГрузаБрутто, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0");
						
			Если Выборка.ЭтоМаркированнаяПродукция Тогда
				ОтборКодовМарикровки.КлючСвязи = Выборка.КлючСвязи;
					
				НайденныеКодыМаркировок = Объект.КодыМаркировки.НайтиСтроки(ОтборКодовМарикровки);
				
				MarkCodes = СоздатьОбъектXDTO(Реквизиты, "MarkCodes");
				
				Для Каждого СтрокаКодаМаркировок Из НайденныеКодыМаркировок Цикл							
					MarkCodes.MarkCode.Добавить(СтрокаКодаМаркировок.КодМаркировки);
				КонецЦикла;   
				
				TransferProduct.MarkCodes.Добавить(MarkCodes);
			КонецЕсли;				
			
			Products.TransferProduct.Добавить(TransferProduct);
		КонецЦикла;

		Transfer.Products.Добавить(Products);	
		Transfers.Transfer.Добавить(Transfer);	
		ОбъектXDTO.Transfers.Добавить(Transfers);
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийТТН.Реализация
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийТТН.Возврат Тогда
		ШаблонИмениФайла = СтрШаблон("Electronic product invoice selling %1", Формат(ДатаДокумента, "ДЛФ=D"));
		ИмяФайла = ШаблонИмениФайла + ".xml";
		
		Если НЕ Объект.ВидПоставки = 20 Тогда
			ИдентификаторСкладПолучатель = ТаблицаОбъектыСоответствия.Найти(Объект.СкладПолучатель, "ОбъектСоответствия").Идентификатор;
		КонецЕсли;	
			
		Если Объект.СпособПеревозки = 10 Тогда
			ИдентификаторАтомобиль 	= ТаблицаОбъектыСоответствия.Найти(Объект.Автомобиль, "ОбъектСоответствия").Идентификатор;
			ИдентификаторВодитель 	= ТаблицаОбъектыСоответствия.Найти(Объект.Водитель, "ОбъектСоответствия").Идентификатор;
		КонецЕсли;	
		
		ОбъектXDTO = СоздатьОбъектXDTO(Реквизиты, "SellingBatchUpload");	
		ОбъектXDTO.InfoType = "Selling";
		ОбъектXDTO.FileVer = "1.0";
		
		Sellings = СоздатьОбъектXDTO(Реквизиты, "Sellings");
		
		Selling = СоздатьОбъектXDTO(Реквизиты, "Selling");
		
		Selling.DeliveryTypeCode = Объект.ВидПоставки;				
		Selling.EsfNum 				= Объект.НомерЭСФ; 
		Selling.GtdNum 				= "";
		//Selling.ProviderBranchTin 	= "";
		Selling.ProviderFacilityId 	= ИдентификаторСклад; 
		Selling.CustomerTin 		= Объект.Контрагент.ИНН;
		Selling.CustomerCountryCode = Объект.Контрагент.СтранаРезидентства.Код;
		
		Если НЕ Объект.ВидПоставки = 20 Тогда    	
			Selling.CustomerFacilityId 	= ИдентификаторСкладПолучатель;  
		КонецЕсли;	
			
		Selling.ShippingTypeCode 	= Объект.СпособПеревозки;	
		
		Если Объект.СпособПеревозки = 10 Тогда 
			Selling.VehicleId = ИдентификаторАтомобиль;
			Selling.DriverId = ИдентификаторВодитель;
			Selling.ShippingOrganizationTin = Объект.ИННПеревозчика;
			Selling.TrailerNumber = Объект.НомерПрицепа;
		Иначе
			Selling.VehicleId = "";
			Selling.DriverId = "";
			Selling.ShippingOrganizationTin = "";
			Selling.TrailerNumber = "";	
		КонецЕсли;
		
		//Selling.TrailerCount = "";
		Selling.BatchAndNumberOfSeal = "";
		
		Products = СоздатьОбъектXDTO(Реквизиты, "Products");
		
		ОтборКодовМарикровки = Новый Структура();
		ОтборКодовМарикровки.Вставить("КлючСвязи", Неопределено);
		
		Пока Выборка.Следующий() Цикл			
			SellingProduct = СоздатьОбъектXDTO(Реквизиты, "SellingProduct");
			SellingProduct.ProductId 			= Выборка.Идентификатор;
			SellingProduct.UnitCode 			= Выборка.ЕдиницаИзмеренияКод;
			SellingProduct.Amount 				= Формат(Выборка.Количество, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0");
			SellingProduct.Price 				= Формат(Выборка.Цена, "ЧЦ=15; ЧДЦ=3; ЧРД=.; ЧГ=0");
			SellingProduct.NetWeight 			= Формат(Выборка.МассаГрузаНетто, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0");
			SellingProduct.GrossWeight 			= Формат(Выборка.МассаГрузаБрутто, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0");
						
			Если Выборка.ЭтоМаркированнаяПродукция Тогда
				ОтборКодовМарикровки.КлючСвязи = Выборка.КлючСвязи;
					
				НайденныеКодыМаркировок = Объект.КодыМаркировки.НайтиСтроки(ОтборКодовМарикровки);
				
				MarkCodes = СоздатьОбъектXDTO(Реквизиты, "MarkCodes");
				
				Для Каждого СтрокаКодаМаркировок Из НайденныеКодыМаркировок Цикл							
					MarkCodes.MarkCode.Добавить(СтрокаКодаМаркировок.КодМаркировки);
				КонецЦикла;
				
				SellingProduct.MarkCodes.Добавить(MarkCodes);
			КонецЕсли;				
			
			Products.SellingProduct.Добавить(SellingProduct);
		КонецЦикла;

		Selling.Products.Добавить(Products);  
		
		Selling.Comment = Объект.Комментарий;
		
		Sellings.Selling.Добавить(Selling);	
		ОбъектXDTO.Sellings.Добавить(Sellings);	
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийТТН.Списание Тогда
		ШаблонИмениФайла = СтрШаблон("Electronic product invoice writeoff %1", Формат(ДатаДокумента, "ДЛФ=D"));
		ИмяФайла = ШаблонИмениФайла + ".xml";
		
		ОбъектXDTO = СоздатьОбъектXDTO(Реквизиты, "WriteoffBatchUpload");	
		ОбъектXDTO.InfoType = "Writeoff";
		ОбъектXDTO.FileVer = "1.0";
		
		Writeoffs = СоздатьОбъектXDTO(Реквизиты, "Writeoffs");
		
		Writeoff = СоздатьОбъектXDTO(Реквизиты, "Writeoff");
		Writeoff.FacilityId = ИдентификаторСклад;
		Writeoff.WriteOffReasonCode = Объект.ПричинаСписания.Код;
		Writeoff.Comment = Объект.Комментарий;
		
		Products = СоздатьОбъектXDTO(Реквизиты, "Products");
		
		ОтборКодовМарикровки = Новый Структура();
		ОтборКодовМарикровки.Вставить("КлючСвязи", Неопределено);

		Пока Выборка.Следующий() Цикл
			WriteoffProduct = СоздатьОбъектXDTO(Реквизиты, "WriteoffProduct");
			WriteoffProduct.ProductId 			= Выборка.Идентификатор;
			WriteoffProduct.UnitCode 			= Выборка.ЕдиницаИзмеренияКод;
			WriteoffProduct.Amount 				= Формат(Выборка.Количество, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0");
			WriteoffProduct.Price 				= Формат(Выборка.Цена, "ЧЦ=15; ЧДЦ=3; ЧРД=.; ЧГ=0");
						
			Если Выборка.ЭтоМаркированнаяПродукция Тогда
				ОтборКодовМарикровки.КлючСвязи = Выборка.КлючСвязи;
					
				НайденныеКодыМаркировок = Объект.КодыМаркировки.НайтиСтроки(ОтборКодовМарикровки);
				
				MarkCodes = СоздатьОбъектXDTO(Реквизиты, "MarkCodes");
				
				Для Каждого СтрокаКодаМаркировок Из НайденныеКодыМаркировок Цикл							
					MarkCodes.MarkCode.Добавить(СтрокаКодаМаркировок.КодМаркировки);
				КонецЦикла;
				
				WriteoffProduct.MarkCodes.Добавить(MarkCodes);
			КонецЕсли;				
			
			Products.WriteoffProduct.Добавить(WriteoffProduct);
		КонецЦикла;

		Writeoff.Products.Добавить(Products);	
		Writeoffs.Writeoff.Добавить(Writeoff);	
		ОбъектXDTO.Writeoffs.Добавить(Writeoffs);	
	КонецЕсли;	
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьXML = Новый ЗаписьXML;
	ПараметрыЗаписиXML = Новый ПараметрыЗаписиXML("UTF-8", "1.0", Ложь);	
	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, ПараметрыЗаписиXML);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	Реквизиты.Прокси.ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
	ЗаписьXML.Закрыть();
	
	// Удаление лишнего текста из xml файла
	ТекстДокумент = Новый ТекстовыйДокумент;
	ТекстДокумент.Прочитать(ИмяВременногоФайла);
	ТекстФайла = ТекстДокумент.ПолучитьТекст();
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийТТН.Оприходование
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийТТН.ВыгрузкаОстатков Тогда
		Операция = "posting"; 
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийТТН.Перемещение Тогда
		Операция = "transfer";
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийТТН.Реализация
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийТТН.Возврат Тогда
		Операция = "selling";
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийТТН.Списание Тогда
		Операция = "writeoff";		
	КонецЕсли;		
	
	ТекстФайла = СтрЗаменить(
			ТекстФайла, 
			" xmlns=""http://ws.electronicproductinvoice" 
				+ Операция 
				+ ".company1c.com"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""",			
			"");
	
	ТекстДокумент.УстановитьТекст(ТекстФайла);	
	ТекстДокумент.Записать(ИмяВременногоФайла);
		
	Двоичное = Новый ДвоичныеДанные(ИмяВременногоФайла);
		
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(Двоичное, УникальныйИдентификатор);
	
	// Удаление временного файла
	ФайловаяСистема.УдалитьВременныйФайл(ИмяВременногоФайла);
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ИмяФайла", ИмяФайла);
	СтруктураДанных.Вставить("АдресВременногоХранилища", АдресВременногоХранилища);
		
	Возврат СтруктураДанных;
КонецФункции

&НаСервере
Функция СоздатьОбъектXDTO(Реквизиты, ИмяТипаОбъекта)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Реквизиты.Прокси.ФабрикаXDTO.Создать(Реквизиты.Прокси.ФабрикаXDTO.Тип(Реквизиты.ИмяПакета, ИмяТипаОбъекта));
	
КонецФункции

// ПодключаемоеОборудование

// Процедура - Получены штрихкоды
//
// Параметры:
//  ДанныеШтрихкодов	 - Структура/Массив - В зависимости от точки вызова передается структура (обработка сканера) или массив (обработка ТСД)
//  ИмяТабличнойЧасти	 - Строка	 - Имя табличной части для загрузки
//
&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрихкодов, ИмяТабличнойЧасти = "Товары") Экспорт
	
	Модифицированность = Истина;
	
	НеДобавленныеШтрихкоды = ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов, ИмяТабличнойЧасти);
	
	// Неизвестные штрихкоды.
	Если НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды.Количество() > 0 Тогда
		Для Каждого ДанныеШтрихкода Из НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды Цикл 
			СтрокаСообщения = СтрШаблон(НСтр("ru = 'Данные по штрихкоду не найдены: %1'"), ДанныеШтрихкода.Штрихкод);
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		КонецЦикла;	
	// Штрихкоды некорректного типа.
	ИначеЕсли НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа.Количество() > 0 Тогда 
		Для Каждого ДанныеШтрихкода Из НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа Цикл 
			СтрокаСообщения = СтрШаблон(НСтр("ru = 'Найденная по штрихкоду %1 номенклатура: ""%2"", не подходит для этой табличной части'"),
				ДанныеШтрихкода.Штрихкод, ДанныеШтрихкода.Номенклатура);
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаСервереБезКонтекста
Функция ПолучитьДанныеПоШтрихкоду(ДанныеШтрихкода)
	
	ЭтоШтрихкодDataMatrix(ДанныеШтрихкода);
	
	Номенклатура = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьНоменклатуруПоШтрихкоду(ДанныеШтрихкода);
	
	Результат = Новый Структура;
	Результат.Вставить("Номенклатура", Номенклатура);
	Результат.Вставить("ТипНоменклатурыУслуга", ?(ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура"), Номенклатура.Услуга, Ложь));
	
	Возврат Результат;
	
КонецФункции // ПолучитьДанныеПоШтрихкоду()

&НаСервереБезКонтекста
Функция ЭтоШтрихкодDataMatrix(ДанныеШтрихкода) Экспорт
	
	ДанныеШтрихкода.Вставить("КодМаркировки", "");
	Штрихкод = ДанныеШтрихкода.Штрихкод;
	
	// Табак.
	// Пример DataMatrix: 000000461984883z+S-i:reSAAser
	// Штрихкод: 00000046198488 
	Если СтрДлина(Штрихкод) = 29 Тогда
		// Выделим штрихкод.
		Штрихкод = Лев(Штрихкод, 14);
	КонецЕсли;	
	
	// Алкоголь.
	// Пример GS1-DataMatrix: 0100000046198488213z+S-i:93reSA
	// Штрихкод: 00000046198488
	Если СтрДлина(Штрихкод) = 31 Тогда 
		Если Лев(Штрихкод, 2) = "01" Тогда 
			// Выделим штрихкод.
			Штрихкод = Прав(Лев(Штрихкод, 16), 14);
		КонецЕсли;	
	КонецЕсли;	
	
	Если СтрДлина(Штрихкод) =  14
		И НЕ Штрихкод = ДанныеШтрихкода.Штрихкод Тогда 
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Штрихкод) Тогда 
			Штрихкод = СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(Штрихкод, "0");
			
			ДанныеШтрихкода.КодМаркировки = ДанныеШтрихкода.Штрихкод;
			ДанныеШтрихкода.Штрихкод = Штрихкод;
			Возврат Истина;
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции

// Функция - Заполнить по данным штрихкодов
//
// Параметры:
//  ДанныеШтрихкодов		 - 	 - Структура/Массив	 - В зависимости от точки вызова передается структура (обработка сканера) или массив (обработка ТСД)
//  ИмяТабличнойЧасти	 - Строка	 - Имя табличной части для загрузки
// 
// Возвращаемое значение:
//  Структура - Массивы неизвестных штрих кодов
//
&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов, ИмяТабличнойЧасти) 
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	Для каждого ДанныеШтрихкода Из МассивШтрихкодов Цикл
		Результат = ПолучитьДанныеПоШтрихкоду(ДанныеШтрихкода);
		
		Если НЕ ЗначениеЗаполнено(Результат.Номенклатура) Тогда 
			НеизвестныеШтрихкоды.Добавить(ДанныеШтрихкода);
		ИначеЕсли Результат.ТипНоменклатурыУслуга Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод, Номенклатура", ДанныеШтрихкода.Штрихкод, Результат.Номенклатура));
		Иначе
			// Поиск номенклатуры в табличной части.
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура", Результат.Номенклатура);
			НайденныеСтроки = Объект[ИмяТабличнойЧасти].НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() = 0 Тогда 
				СтрокаСообщения = СтрШаблон(НСтр("ru = 'Номенклатура в табличной части не найдена: %1'"), Результат.Номенклатура);
				ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
				Продолжить;
			КонецЕсли;	
			
			СтрокаТабличнойЧасти = НайденныеСтроки[0];
			КлючСвязи = СтрокаТабличнойЧасти.КлючСвязи;
			
			Если ЗначениеЗаполнено(ДанныеШтрихкода.КодМаркировки) Тогда 
				ПараметрыОтбора = Новый Структура("КодМаркировки", ДанныеШтрихкода.КодМаркировки);
				НайденныеСтроки = Объект.КодыМаркировки.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтроки.Количество() > 0 Тогда
	            	Продолжить;	
				КонецЕсли;	
				
				СтрокаТабличнойЧасти = Объект.КодыМаркировки.Добавить();
				СтрокаТабличнойЧасти.КодМаркировки = ДанныеШтрихкода.КодМаркировки;
				СтрокаТабличнойЧасти.КлючСвязи = КлючСвязи;
			КонецЕсли;	
			
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа",
		НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа);

КонецФункции // ЗаполнитьПоДаннымШтрихкодов()
// Конец ПодключаемоеОборудование

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

