#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	// РаботаСФормами
	РаботаСФормамиСервер.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды	
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.Дата", "МесяцСтрокой");

	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом 
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	
	// РаботаСФормами
	РаботаСФормамиСервер.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка); 
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Объект.ДанныеОтчета.Количество() > 0 Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросЗаполнить", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Табличная часть документа будет очищена. Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	Иначе
		ЗаполнитьНалогиНаСервере();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОтветНаВопросЗаполнить(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ДанныеОтчета.Очистить();
		ЗаполнитьНалогиНаСервере();
	КонецЕсли;
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции 

//Для экспорта в Excel 

&НаСервере
Функция ТребуетсяНастройкаАвторизацияИнтернетПоддержки()
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
		Возврат Не МодульИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура ПриПодключенииИнтернетПоддержки(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПодключенияИнтернетПоддержки", ЭтотОбъект);
		МодульИнтернетПоддержкаПользователейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтернетПоддержкаПользователейКлиент");
		МодульИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОписаниеОповещения, ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияИнтернетПоддержки(Результат, ДополнительныеПараметры) Экспорт
	Если Не (ТипЗнч(Результат) = Тип("Структура")
		И ЗначениеЗаполнено(Результат.Логин)) Тогда
		Возврат;
	КонецЕсли;
	
	ПродолжитьВыгрузку();	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьВыгрузку()
	
	Если Объект.Ссылка.Пустая() Или Модифицированность Тогда  
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Выполнение действия возможно только после записи данных.
			|Данные будут записаны.'");
		Обработчик = Новый ОписаниеОповещения("ПродолжитьВыполнениеКомандыПослеПодтвержденияЗаписи", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;		
	
	ПродолжитьВыгрузкуЗавершение();

КонецПроцедуры 

&НаКлиенте
Процедура ПродолжитьВыполнениеКомандыПослеПодтвержденияЗаписи(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ОчиститьСообщения();
		Записать();
		Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
			Возврат; // Запись не удалась, сообщения о причинах выводит платформа.
		КонецЕсли;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	ПродолжитьВыгрузкуЗавершение()
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьВыгрузкуЗавершение()
 
	Оповещение = Новый ОписаниеОповещения("НачатьПодключениеРасширенияРаботыСФайламиЗавершение", ЭтотОбъект);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
КонецПроцедуры 

&НаКлиенте
Процедура НачатьПодключениеРасширенияРаботыСФайламиЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
	Если НЕ Подключено Тогда
		Оповещение = Новый ОписаниеОповещения("НачатьУстановкуРасширенияРаботыСФайламиЗавершение", ЭтотОбъект);
		ТекстСообщения = НСтр("ru = 'Для продолжении работы необходимо установить расширение для веб-клиента ""1С:Предприятие"". Установить?'");
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет); 
	КонецЕсли;
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Укажите путь для сохранения файла'");
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ДиалогОткрытияФайлаЗавершение", ЭтотОбъект);
	ДиалогОткрытияФайла.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьУстановкуРасширенияРаботыСФайламиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		НачатьУстановкуРасширенияРаботыСФайлами();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДиалогОткрытияФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено И ВыбранныеФайлы.Количество() > 0 Тогда
		ФормированиеФайла(ВыбранныеФайлы[0]);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьДокДляИмпортаВExcel()
	МассивОбъектов = Новый("Массив");
	МассивОбъектов.Добавить(Объект.Ссылка);
	Возврат(ДанныеДляИмпортаВExcel(МассивОбъектов, Новый("СписокЗначений")));
КонецФункции

&НаКлиенте
Процедура ОткрытьПроводник(ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ПолноеИмяФайла) Тогда 
		ФайловаяСистемаКлиент.ОткрытьПроводник(ДополнительныеПараметры.ПолноеИмяФайла);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеФайла(КаталогФайлаВыгрузки)
	
	#Если ТонкийКлиент Тогда
		КаталогФайлаВыгрузки = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогФайлаВыгрузки);
		
		// Открытие приложения Excel
		Попытка
			Excel = Новый COMОбъект("Excel.Application");
		Исключение
			ВызватьИсключение НСтр("ru = 'Не удалось подключить COM-объект Excel.
				|Вероятные причины:
				| - На компьютере не установлен Microsoft Office или установлена не полная версия;
				| - У пользователя недостаточно прав на создание COM-объектов;
				| - Включен контроль учетных записей Windows;
				| - Операционная система не из семейства Windows.
				|
				|Техническая информация:
				|'") + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
		Excel.Visible = 0;
		Excel.DisplayAlerts = 0;
		Excel.DefaultSaveFormat = 51;
		
		Расширение = "xlsx";
		ТипФайла = ТипФайлаТабличногоДокумента.XLSX;
		
		// Проверка версии
		ВерсияExcel = Лев(Excel.Version, Найти(Excel.Version,".") -1);
		Если ВерсияExcel < "16" Тогда
			ТекстСообщения = НСтр("ru = 'Используется устаревшая версия Excel. Возможны ошибки.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			// для сохранения в старом формате
			Excel.DefaultSaveFormat = 56;
			Расширение = "xls";  
			ТипФайла = ТипФайлаТабличногоДокумента.XLS;
		КонецЕсли;
		
		ПолноеИмяФайла = КаталогФайлаВыгрузки + "Отчет налогового агента по НДС" 
							+ Формат(ДатаДокумента,"ДФ=yyyyMMdd") + "." + Расширение;

		ТабличныйДокументПриложение = ПолучитьДокДляИмпортаВExcel();
		ТабличныйДокументПриложение.Записать(ПолноеИмяФайла, ТипФайла);
		
		Книга = Excel.WorkBooks.Open(ПолноеИмяФайла);
		Лист = Книга.WorkSheets(1);
		
		//КоличествоСтрок = Объект.ДанныеОтчета.Количество();
		//	
		//	Для Счетчик = 1 По КоличествоСтрок Цикл 
		//		Лист.Cells(Счетчик, 1).NumberFormat = "@";
		//		Лист.Cells(Счетчик, 2).NumberFormat = "@";
		//		Лист.Cells(Счетчик, 3).NumberFormat = "@";
		//		Лист.Cells(Счетчик, 4).NumberFormat = "0,00";
		//		Лист.Cells(Счетчик, 5).NumberFormat = "0,00";
		//		Лист.Cells(Счетчик, 6).NumberFormat = "0,00";
		//		Лист.Cells(Счетчик, 7).NumberFormat = "0,00";
		//	КонецЦикла;	
		
		//КоличествоСтрок = Объект.ДанныеОтчета.Количество();
		//	
		//	Для Счетчик = 1 По КоличествоСтрок Цикл 
		//		Лист.Cells(Счетчик, 1).NumberFormat = "@";
		//		Лист.Cells(Счетчик, 2).NumberFormat = "@";
		//		Лист.Cells(Счетчик, 3).NumberFormat = "@";
		//		Лист.Cells(Счетчик, 4).NumberFormat = "@";
		//		Лист.Cells(Счетчик, 5).NumberFormat = "@";
		//		Лист.Cells(Счетчик, 6).NumberFormat = "0,00";
		//		Лист.Cells(Счетчик, 7).NumberFormat = "0,00";
		//	КонецЦикла;	
		//КонецЕсли;	
		
		Книга.SaveAs(ПолноеИмяФайла);
		Книга.Close();
		
		// Закрытие приложения
		Excel.Quit();	
		Excel = Неопределено;
		
		ТекстОповещения = НСтр("ru = 'Файл сформирован'");
		ТекстПояснения = ПолноеИмяФайла;
		ПоказатьОповещениеПользователя(
			ТекстОповещения, 
			Новый ОписаниеОповещения("ОткрытьПроводник", ЭтотОбъект, Новый Структура("ПолноеИмяФайла", ПолноеИмяФайла)), 
			ТекстПояснения, 
			БиблиотекаКартинок.Информация32);
	#Иначе
	ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
	#КонецЕсли
КонецПроцедуры // ФормированиеФайла()

// Процедура - Выгрузка в excel основная форма
//
&НаКлиенте
Процедура ВыгрузкаВExcelОсновнаяФорма(Команда)
	Если ТребуетсяНастройкаАвторизацияИнтернетПоддержки() Тогда
		ТекстВопроса = НСтр("ru='Для формирования отчета в электронной форме
		|необходимо подключиться к Интернет-поддержке пользователей.
		|Подключиться сейчас?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриПодключенииИнтернетПоддержки", ЭтотОбъект, Новый Структура("НаправлениеВыгрузки", "ОсновнаяФорма"));
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Подключиться'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
	Иначе
		ПродолжитьВыгрузку();  
	КонецЕсли;
	
КонецПроцедуры         

// Процедура - Установить пиктограмму комментария.
//
&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНалогиНаСервере()
	
	Запрос = Новый Запрос; 
	
	Если ДанныеУчетнойПолитики.ОтчетПоНДСПоПоставке Тогда
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СведенияОПоступлении.Контрагент КАК Контрагент,
			|	СведенияОПоступлении.ДатаДокумента КАК ДатаПоставки,
			|	ЕСТЬNULL(СведенияОбЭСФ.НомерЭСФ, НЕОПРЕДЕЛЕНО) КАК НомерЭСФ,
			|	СУММА(СведенияОПоступлении.БазаНДС) КАК СтоимостьБезНДС,
			|	СУММА(СведенияОПоступлении.СуммаНДС) КАК СуммаНДС,
			|	СУММА(СведенияОПоступлении.БазаНДС + СведенияОПоступлении.СуммаНДС) КАК Всего
			|ИЗ
			|	РегистрСведений.СведенияОПоступлении КАК СведенияОПоступлении
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбЭСФ КАК СведенияОбЭСФ
			|		ПО СведенияОПоступлении.ДокументСсылка = СведенияОбЭСФ.ДокументОснование
			|ГДЕ
			|	СведенияОПоступлении.Организация = &Организация
			|	И СведенияОПоступлении.ДатаДокумента МЕЖДУ &НачалоПериода И &КонецПериода
			|	И СведенияОПоступлении.ПоступлениеОтНерезидента
			|
			|СГРУППИРОВАТЬ ПО
			|	СведенияОПоступлении.Контрагент,
			|	СведенияОПоступлении.ДатаДокумента,
			|	ЕСТЬNULL(СведенияОбЭСФ.НомерЭСФ, НЕОПРЕДЕЛЕНО)";
		Запрос.УстановитьПараметр("Организация", 	Объект.Организация);	
		Запрос.УстановитьПараметр("НачалоПериода", 	НачалоМесяца(Объект.Дата));
		Запрос.УстановитьПараметр("КонецПериода", 	КонецМесяца(Объект.Дата));
		
	Иначе	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ   
			|	СведенияОбЭСФ.ДокументОснование КАК ДокументОснование,
			|	СведенияОбЭСФ.ДокументОснование.Дата КАК ДатаДокумента
			|ИЗ
			|	РегистрСведений.СведенияОбЭСФ КАК СведенияОбЭСФ
			|ГДЕ
			|	СведенияОбЭСФ.Дата МЕЖДУ &НачалоПериода И &КонецПериода
			|	И СведенияОбЭСФ.Организация = &Организация
			|	И СведенияОбЭСФ.Регистратор.ПоступлениеОтНерезидента";
		Запрос.УстановитьПараметр("Организация", 	Объект.Организация);	
		Запрос.УстановитьПараметр("НачалоПериода", 	НачалоМесяца(Объект.Дата));
		Запрос.УстановитьПараметр("КонецПериода", 	КонецМесяца(Объект.Дата));
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		СписокДокументов 	= Новый Массив();
		НачалоПериода 		= Неопределено; 
		КонецПериода 		= Неопределено;
		
		Пока Выборка.Следующий() Цикл
			СписокДокументов.Добавить(Выборка.ДокументОснование);
			
			Если НачалоПериода = Неопределено Тогда
				НачалоПериода = Выборка.ДатаДокумента;
				КонецПериода = Выборка.ДатаДокумента;
			КонецЕсли;	
			
			Если НачалоПериода > Выборка.ДатаДокумента Тогда
				НачалоПериода = Выборка.ДатаДокумента;	
			КонецЕсли;
			
			Если КонецПериода < Выборка.ДатаДокумента Тогда
				КонецПериода = Выборка.ДатаДокумента;	
			КонецЕсли;
		КонецЦикла;
		
		Если СписокДокументов.Количество() = 0 Тогда
			Объект.ДанныеОтчета.Очистить();
			Возврат;
		КонецЕсли;	
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СведенияОПоступлении.Контрагент КАК Контрагент,
			|	СведенияОПоступлении.ДатаДокумента КАК ДатаПоставки,
			|	ЕСТЬNULL(СведенияОбЭСФ.НомерЭСФ, НЕОПРЕДЕЛЕНО) КАК НомерЭСФ,
			|	СУММА(СведенияОПоступлении.БазаНДС) КАК СтоимостьБезНДС,
			|	СУММА(СведенияОПоступлении.СуммаНДС) КАК СуммаНДС,
			|	СУММА(СведенияОПоступлении.БазаНДС + СведенияОПоступлении.СуммаНДС) КАК Всего
			|ИЗ
			|	РегистрСведений.СведенияОПоступлении КАК СведенияОПоступлении
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбЭСФ КАК СведенияОбЭСФ
			|		ПО СведенияОПоступлении.ДокументСсылка = СведенияОбЭСФ.ДокументОснование
			|ГДЕ
			|	СведенияОПоступлении.Организация = &Организация
			|	И СведенияОПоступлении.ДатаДокумента МЕЖДУ &НачалоПериода И &КонецПериода
			|	И СведенияОПоступлении.ПоступлениеОтНерезидента
			|	И СведенияОПоступлении.Регистратор В (&СписокДокументов)
			|
			|СГРУППИРОВАТЬ ПО
			|	СведенияОПоступлении.Контрагент,
			|	СведенияОПоступлении.ДатаДокумента,
			|	ЕСТЬNULL(СведенияОбЭСФ.НомерЭСФ, НЕОПРЕДЕЛЕНО)";
		Запрос.УстановитьПараметр("Организация", 		Объект.Организация);	
		Запрос.УстановитьПараметр("НачалоПериода", 		НачалоДня(НачалоПериода));
		Запрос.УстановитьПараметр("КонецПериода", 		КонецДня(КонецПериода));
		Запрос.УстановитьПараметр("СписокДокументов", 	СписокДокументов);
	КонецЕсли;
	
	Объект.ДанныеОтчета.Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры

#КонецОбласти

#Область ИнтерфейсДляExcel

//Для импорта в Excel
// Возвращаемое значение:
//  Табличный документ - печатная форма
Функция ДанныеДляИмпортаВExcel(МассивОбъектов, ОбъектыПечати) Экспорт	 
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтчетНалоговогоАгентаНДС.Ссылка КАК Ссылка,
		|	ОтчетНалоговогоАгентаНДС.Дата КАК Дата,
		|	ОтчетНалоговогоАгентаНДС.Организация КАК Организация,
		|	ОтчетНалоговогоАгентаНДС.ВидОтчета КАК ВидОтчета,
		|	ОтчетНалоговогоАгентаНДС.ДанныеОтчета.(
		|		НомерСтроки КАК НомерСтроки,
		|		НомерЭСФ КАК НомерЭСФ,
		|		Контрагент.НаименованиеПолное КАК КонтрагентПредставление,
		|		ВЫБОР
		|			КОГДА Контрагент.ИНН = """"
		|				ТОГДА ""99999999999999""
		|			ИНАЧЕ Контрагент.ИНН
		|		КОНЕЦ КАК ИНН,
		|		Контрагент.СтранаРезидентства.Код КАК КодСтраны,
		|		ДатаПоставки КАК ДатаПоставки,
		|		СтоимостьБезНДС КАК СтоимостьБезНДС,
		|		СуммаНДС КАК СуммаНДС
		|	) КАК ДанныеОтчета
		|ИЗ
		|	Документ.ОтчетНалоговогоАгентаНДС КАК ОтчетНалоговогоАгентаНДС
		|ГДЕ
		|	ОтчетНалоговогоАгентаНДС.Ссылка В (&СписокДокументов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";		
	Запрос.УстановитьПараметр("СписокДокументов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ОтчетНалоговогоАгентаНДС_ОтчетНалоговогоАгента_Excel";

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ОтчетНалоговогоАгентаНДС.ПФ_MXL_ОтчетНалоговогоАгента_Excel");

	
	Пока Шапка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Заголовок
		Если Шапка.ВидОтчета = Перечисления.ВидыОтчетаПоНалогам.Первоначальный Тогда
			ОбластьМакета = ?(ДанныеУчетнойПолитики.ПлательщикНДС,  
			Макет.ПолучитьОбласть("ЗаголовокПервоначальныйПлательщикНДС"), 
			Макет.ПолучитьОбласть("ЗаголовокПервоначальный"));		
		ИначеЕсли Шапка.ВидОтчета = Перечисления.ВидыОтчетаПоНалогам.Уточненный Тогда
			ОбластьМакета = ?(ДанныеУчетнойПолитики.ПлательщикНДС,  
			Макет.ПолучитьОбласть("ЗаголовокУточненныйПлательщикНДС"), 
			Макет.ПолучитьОбласть("ЗаголовокУточненный"));
		Иначе
			ОбластьМакета = ?(ДанныеУчетнойПолитики.ПлательщикНДС,  
			Макет.ПолучитьОбласть("ЗаголовокЛиквидационныйПлательщикНДС"), 
			Макет.ПолучитьОбласть("ЗаголовокЛиквидационный"));
		КонецЕсли;
			
		ТабличныйДокумент.Вывести(ОбластьМакета);	

		//Разделитель
		ОбластьМакета= Макет.ПолучитьОбласть("СтрокаПустая");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Шапка
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		
		КонтактныеДанные = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСведенияОбОрганизации(Шапка.организация, КонецМесяца(Шапка.Дата));

		ОКПО	= КонтактныеДанные.ОКПО;
		ИНН		= КонтактныеДанные.ИНН;
		КодГНС	= КонтактныеДанные.ГНСКод;
		Индекс	= КонтактныеДанные.Индекс;
					
		ДанныеПечати = Новый Структура();
		ОбластьМакета.Параметры.ОРГАНИЗАЦИЯ	= КонтактныеДанные.НаименованиеПолное;
		ОбластьМакета.Параметры.НАЛОГОВАЯ 	= КонтактныеДанные.ГНСНаименование;
		ОбластьМакета.Параметры.ГОРОД 		= ?(КонтактныеДанные.Регион = "",""," " + КонтактныеДанные.Регион + ",")
												+ ?(КонтактныеДанные.Город = "","",КонтактныеДанные.Город + ",")
												+ ?(КонтактныеДанные.Район = "",""," " + КонтактныеДанные.Район + ",");
		ОбластьМакета.Параметры.АДРЕС 		= ?(КонтактныеДанные.Улица = "","",КонтактныеДанные.Улица + ",")
												+ ?(КонтактныеДанные.Дом = "",""," " + КонтактныеДанные.Дом + ",")
												+ ?(КонтактныеДанные.Корпус = "",""," " + КонтактныеДанные.Корпус + ",")
												+ ?(КонтактныеДанные.Квартира = "",""," " + КонтактныеДанные.Квартира);	
		ОбластьМакета.Параметры.ТЕЛЕФОН 	= КонтактныеДанные.Тел;
		ОбластьМакета.Параметры.ЕМЭЙЛ 		= КонтактныеДанные.Email;
		
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		
		ОбластьМакета.Параметры.ИНН = ИНН;	
		ОбластьМакета.Параметры.ГНС = КодГНС;
		
		Если ЗначениеЗаполнено(ОКПО) Тогда 
			  ОбластьМакета.Параметры.ОКПО = ОКПО;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Индекс) Тогда
			 ОбластьМакета.Параметры.ИНДЕКС = Индекс;
		 КонецЕсли; 

		ДатаНачала = НачалоМесяца(Шапка.Дата);
		ОбластьМакета.Параметры.ДатаН = ДатаНачала;	
		
		ДатаОкончания = КонецМесяца(Шапка.Дата);
		ОбластьМакета.Параметры.ДатаК = ДатаОкончания;
		
		ТаблицаОтчет = Шапка.ДанныеОтчета.Выгрузить();
		ОбластьМакета.Параметры.КОЛИЧЕСТВО = ТаблицаОтчет.Количество();
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Строки 
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");	
		МассивОбластейМакета = Новый Массив;
				
		КоличестовСтрок = ТаблицаОтчет.Количество();
		НомерСтроки = 1;
		
	    Для Каждого СтрокаТаблицы Из ТаблицаОтчет Цикл
			ОбластьСтрока.Параметры.Заполнить(СтрокаТаблицы);	
			
			Если КоличестовСтрок = НомерСтроки Тогда
				МассивОбластейМакета = Новый Массив;
				МассивОбластейМакета.Добавить(ОбластьСтрока);
							
				Если НЕ ТабличныйДокумент.ПроверитьВывод(МассивОбластейМакета) Тогда
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;	
			КонецЕсли;				
			
			ТабличныйДокумент.Вывести(ОбластьСтрока);
			
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;	
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

# КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область РедактированиеМесяцаСтрокой

&НаКлиенте
Процедура ПериодОтчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.Дата", "МесяцСтрокой");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ПериодОтчета.
//
&НаКлиенте
Процедура ПериодОтчетаПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.Дата", "МесяцСтрокой", Модифицированность);
	ДатаДокумента = Объект.Дата;
	
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтчетаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.Дата", "МесяцСтрокой", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтчетаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтчетаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти
