#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();	

	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	Если Объект.Сотрудники.Количество() = 0 Тогда
		СтрокаТабличнойЧасти = Объект.Сотрудники.Добавить();
		Элементы.Сотрудники.ТекущаяСтрока = СтрокаТабличнойЧасти.ПолучитьИдентификатор();
	Иначе
		Элементы.Сотрудники.ТекущаяСтрока = Объект.Сотрудники[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	Элементы.РедактироватьСписком.Пометка = Объект.Сотрудники.Количество() > 1;

	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	
	// РаботаСФормами
	РаботаСФормамиСервер.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом 
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	
	// РаботаСФормами
	РаботаСФормамиСервер.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСотрудники

// Процедура - обработчик события ПриИзменении поля ввода СотрудникиФизЛицо.
//
&НаКлиенте
Процедура СотрудникиФизЛицоПриИзменении(Элемент)
	// получаем текущую строку
	СтрокаТабличнойЧасти = Элементы.Сотрудники.ТекущиеДанные;
	
	// не удалось получить- возвращаемся
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СведенияОСотруднике = ПолучитьСведенияОСотруднике(ДатаДокумента, Объект.Организация, СтрокаТабличнойЧасти.ФизЛицо);
	СтрокаТабличнойЧасти.ГрафикРаботы = СведенияОСотруднике.ГрафикРаботы;
	СтрокаТабличнойЧасти.Подразделение = СведенияОСотруднике.Подразделение;
	СтрокаТабличнойЧасти.Размер = СведенияОСотруднике.Размер;
	СтрокаТабличнойЧасти.Валюта = СведенияОСотруднике.Валюта;
	
	РасчетДнейЧасов(СтрокаТабличнойЧасти);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СотрудникиДатаНачала.
//
&НаКлиенте
Процедура СотрудникиДатаНачалаПриИзменении(Элемент)
	// получаем текущую строку
	СтрокаТабличнойЧасти = Элементы.Сотрудники.ТекущиеДанные;
	
	// не удалось получить- возвращаемся
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РасчетДнейЧасов(СтрокаТабличнойЧасти);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СотрудникиДатаОкончания.
//
&НаКлиенте
Процедура СотрудникиДатаОкончанияПриИзменении(Элемент)
	// получаем текущую строку
	СтрокаТабличнойЧасти = Элементы.Сотрудники.ТекущиеДанные;
	
	// не удалось получить- возвращаемся
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РасчетДнейЧасов(СтрокаТабличнойЧасти);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик команды РедактироватьСписком.
//
&НаКлиенте
Процедура РедактироватьСписком(Команда)
	УстановитьВозможностьРедактированияСписком();
КонецПроцедуры // РедактироватьСписком()

&НаКлиенте
Процедура Рассчитать(Команда)
	РассчитатьНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОтветНаВопросУстановитьВозможностьРедактированияСписком(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Элементы.РедактироватьСписком.Пометка = Истина;
        Возврат;
    КонецЕсли;
	
	КоличествоСтрок = ДополнительныеПараметры.КоличествоСтрок;
	
	// удаление строк в обратном порядке
    Пока КоличествоСтрок > 1 Цикл
        Объект.Сотрудники.Удалить(Объект.Сотрудники[КоличествоСтрок - 1]);
        КоличествоСтрок = КоличествоСтрок - 1;
    КонецЦикла;
    Элементы.Сотрудники.ТекущаяСтрока = Объект.Сотрудники[0].ПолучитьИдентификатор();
    
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура - Установить пиктограмму комментария.
//
&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

// Процедура устанавливает видимость и доступность элементов.
//
&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()
	Если Элементы.РедактироватьСписком.Пометка Тогда
        Элементы.СтраницыСтрокойСписком.ТекущаяСтраница = Элементы.Списком;
		Элементы.Рассчитать.Видимость = Ложь;
    Иначе
        Элементы.СтраницыСтрокойСписком.ТекущаяСтраница = Элементы.ОднаСтрока;
		Элементы.Рассчитать.Видимость = Истина;
    КонецЕсли;
КонецПроцедуры

// Получает сведения о сотруднике
//
// Параметры:
//  Период		 - Дата	- 
//  Организация	 - СправочникСсылка.Организации	 - 
//  ФизЛицо		 - СправочникСсылка.ФизическиеЛица	 - 
// Возвращаемое значение:
//  Структура - 
&НаСервереБезКонтекста
Функция ПолучитьСведенияОСотруднике(Период, Организация, ФизЛицо)
	СведенияОСотруднике = ПроведениеРасчетовПоЗарплатеСервер.СведенияОСотруднике(Период, Организация, ФизЛицо);
	СведенияОСотруднике.Вставить("Размер", 0);
	
	// Пересчет размера основного вида расчета на среднемесячный размер.
	Если НЕ СведенияОСотруднике.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоЧасовойСтавке Тогда 
		КоличествоДнейГрафикаРаботы = ПроведениеРасчетовПоЗарплатеСервер.КоличествоДнейГрафикаРаботы(СведенияОСотруднике.ГрафикРаботы, НачалоМесяца(Период), КонецМесяца(Период));
		НормаЧасов = КоличествоДнейГрафикаРаботы.КоличествоЧасов; // сумма всех часов, которые заполнены в графике без привязки к виду дня.
		СведенияОСотруднике.Размер = ?(НормаЧасов = 0, 0, СведенияОСотруднике.РазмерОсновногоВидаРасчета / НормаЧасов);
	КонецЕсли;	

	Возврат СведенияОСотруднике;
КонецФункции // ПолучитьСведенияОСотруднике()

// Функция возвращает количество рабочих дней
//
// Параметры:
//  ГрафикиРаботы  	- СправочникСсылка.Календари - графики работы, по которому работает сотрудник
//  ДатаНачала 		- Дата - дата начала
//  ДатаОкончания 	- Дата - дата окончания
//
// Возвращаемое значение:
//   Число   - количество дней
//
&НаСервереБезКонтекста
Функция КоличествоДней(ГрафикРаботы, ДатаНачала, ДатаОкончания)
	Возврат ПроведениеРасчетовПоЗарплатеСервер.КоличествоДнейГрафикаРаботы(ГрафикРаботы, ДатаНачала, ДатаОкончания);
КонецФункции // КоличествоДней()

// Процедура - устанавливает возможность редактирования списком.
//
&НаКлиенте
Процедура УстановитьВозможностьРедактированияСписком()
	
	Элементы.РедактироватьСписком.Пометка = НЕ Элементы.РедактироватьСписком.Пометка;
	
	КоличествоСтрок = Объект.Сотрудники.Количество();
	
	Если НЕ Элементы.РедактироватьСписком.Пометка
		И КоличествоСтрок > 1 Тогда
		  
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросУстановитьВозможностьРедактированияСписком", ЭтотОбъект, Новый Структура("КоличествоСтрок", КоличествоСтрок));
		ТекстВопроса = НСтр("ru = 'Все строки кроме первой будут удалены. Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	Иначе
		// Установить видимость и доступность элементов формы
		УстановитьВидимостьДоступностьЭлементов();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасчетДнейЧасов(СтрокаТабличнойЧасти)
	// расчет дней и часов	
	КоличествоДней = КоличествоДней(СтрокаТабличнойЧасти.ГрафикРаботы, СтрокаТабличнойЧасти.ДатаНачала, СтрокаТабличнойЧасти.ДатаОкончания); 
	СтрокаТабличнойЧасти.Часов = КоличествоДней.КоличествоЧасовНеРабочих; 
КонецПроцедуры // РасчетДней()

&НаСервере
Процедура РассчитатьНаСервере()
	
	УчетЗаработнойПлатыВВалюте = ПолучитьФункциональнуюОпцию("УчетЗаработнойПлатыВВалюте");
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Сотрудники Цикл
		Курс = 1;
		Кратность = 1;
		
		// Учет заработной платы в валюте.
		Если УчетЗаработнойПлатыВВалюте 
			И НЕ СтрокаТабличнойЧасти.Валюта = ВалютаРегламентированногоУчета Тогда
			КурсыВалюты = ПроведениеРасчетовПоЗарплатеСервер.ПолучитьКурсВалюты(СтрокаТабличнойЧасти.Валюта, ДатаДокумента); 
			
			Если КурсыВалюты.Курс = 0 Или КурсыВалюты.Кратность = 0 Тогда 
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не задан курс валют для расчета заработной платы для валюты ""%1"".'"), СтрокаТабличнойЧасти.Валюта);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				Возврат;				
			КонецЕсли; 
			
			Курс = КурсыВалюты.Курс;
			Кратность = КурсыВалюты.Кратность;
		КонецЕсли;		
		
		Коэффициент1 = СтрокаТабличнойЧасти.ВидРасчета.Коэффициент1;
		КоличествоЧасов = СтрокаТабличнойЧасти.Часов;
		СтрокаТабличнойЧасти.Результат = ?(Коэффициент1 = 0, 0, СтрокаТабличнойЧасти.Размер * КоличествоЧасов * Коэффициент1) * Курс / Кратность;
	КонецЦикла;
	
	// Определение способа отражения.
	СтруктураОтбора = ПроведениеРасчетовПоЗарплатеСервер.СтруктураОтбораСпособыОтраженияЗаработнойПлаты();
	Для Каждого СтрокаТабличнойЧасти Из Объект.Сотрудники Цикл 
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТабличнойЧасти);
		СтрокаТабличнойЧасти.СпособОтражения = ПроведениеРасчетовПоЗарплатеСервер.СпособОтраженияЗаработнойПлаты(СтруктураОтбора);		
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
