#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

Функция ТекстЗапросаДанныеДляОбновленияЦенДокументов() Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
		|	ТаблицаДокумента.Цена КАК Цена,
		|	&Валюта КАК Валюта,
		|	&СпособЗаполненияЦены КАК СпособЗаполненияЦены,
		|	&ЦенаВключаетНалоги КАК ЦенаВключаетНалоги
		|ПОМЕСТИТЬ ТаблицаНоменклатуры
		|ИЗ
		|	Документ.РеализацияУслугПоПереработке.Услуги КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции
 
// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла 
 
// Устанавливает параметры загрузки.
//
//@skip-warning
Процедура УстановитьПараметрыЗагрузкиИзФайлаВТЧ(Параметры) Экспорт
	
КонецПроцедуры

// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
//
// Параметры:
//   АдресЗагружаемыхДанных    - Строка - Адрес временного хранилища с таблицей значений, в которой
//                                        находятся загруженные данные из файла. Состав колонок:
//     * Идентификатор - Число - Порядковый номер строки;
//     * остальные колонки соответствуют колонкам макета ЗагрузкаИзФайла.
//   АдресТаблицыСопоставления - Строка - Адрес временного хранилища с пустой таблицей значений,
//                                        являющейся копией табличной части документа, 
//                                        которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
//   СписокНеоднозначностей - ТаблицаЗначений - Список неоднозначных значений, для которых в ИБ имеется несколько
//                                              подходящих вариантов.
//     * Колонка       - Строка - Имя колонки, в которой была обнаружена неоднозначность;
//     * Идентификатор - Число  - Идентификатор строки, в которой была обнаружена неоднозначность.
//   ПолноеИмяТабличнойЧасти   - Строка - Полное имя табличной части, в которую загружаются данные.
//   ДополнительныеПараметры   - ЛюбойТип - Любые дополнительные сведения.
//
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ПолноеИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт
	
	Товары = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления);
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
	
	ТаблицаНоменклатура = ЗагрузкаДанныхИзФайлаПереопределяемыйБП.СопоставитьНоменклатуруДоПервогоСовпадения(ЗагружаемыеДанные); 
	
	Для Каждого СтрокаТаблицы Из ЗагружаемыеДанные Цикл
		
		СтрокаТабличнойЧасти = Товары.Добавить();
		СтрокаТабличнойЧасти.Идентификатор = СтрокаТаблицы.Идентификатор;
		СтрокаТабличнойЧасти.Количество = СтрокаТаблицы.Количество;
		СтрокаТабличнойЧасти.Цена = СтрокаТаблицы.Цена;
		СтрокаТабличнойЧасти.Сумма = СтрокаТаблицы.Сумма;
		СтрокаТабличнойЧасти.СуммаНДС = СтрокаТаблицы.СуммаНДС;
		СтрокаТабличнойЧасти.СуммаНСП = СтрокаТаблицы.СуммаНСП;
				
		СтрокаНоменклатура = ТаблицаНоменклатура.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
		Если СтрокаНоменклатура <> Неопределено Тогда 
			Если СтрокаНоменклатура.Количество = 1 Тогда 
				СтрокаТабличнойЧасти.Номенклатура = СтрокаНоменклатура.Ссылка;
			ИначеЕсли СтрокаНоменклатура.Количество > 1 Тогда
				ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
				ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор; 
				ЗаписьОНеоднозначности.Колонка = "Номенклатура";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Товары, АдресТаблицыСопоставления);
	
КонецПроцедуры

// Возвращает список подходящих объектов ИБ для неоднозначного значения ячейки.
// 
// Параметры:
//   ПолноеИмяТабличнойЧасти  - Строка - Полное имя табличной части, в которую загружаются данные.
//  ИмяКолонки                - Строка - Имя колонки, в который возникла неоднозначность.
//  СписокНеоднозначностей    - Массив - Массив для заполнения с неоднозначными данными.
//  ЗагружаемыеЗначенияСтрока - Строка - Загружаемые данные на основании которых возникла неоднозначность.
//  ДополнительныеПараметры   - ЛюбойТип - Любые дополнительные сведения.
//
Процедура ЗаполнитьСписокНеоднозначностей(ПолноеИмяТабличнойЧасти, СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока, ДополнительныеПараметры) Экспорт
	
	Если ИмяКолонки = "Номенклатура" Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Номенклатура.Ссылка
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.Номенклатура);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СписокНеоднозначностей.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла
 
#КонецОбласти

#Область ПроцедурыПроведенияДокумента

// Формирует таблицу значений, содержащую данные для проведения по регистру бухгалтерии Хозрасчетный.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаХозрасчетный(ДокументСсылка,СтруктураДополнительныеСвойства, Отказ)
	
	// Подготовка данных	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Ссылка КАК Регистратор,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	&Содержание КАК Содержание,
		|	ВременнаяТаблицаШапка.Склад КАК Склад,
		|	ВременнаяТаблицаШапка.Контрагент КАК Контрагент
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""Услуги"" КАК ИмяСписка,
		|	&СинонимСписка КАК СинонимСписка,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаУслуги.НомерСтроки КАК НомерСтроки,
		|	ВременнаяТаблицаУслуги.СчетУчета КАК СчетУчета,
		|	ВременнаяТаблицаУслуги.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаШапка.Склад КАК Склад,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОприходования,
		|	0 КАК Себестоимость,
		|	ВременнаяТаблицаУслуги.Количество КАК Количество,
		|	ВременнаяТаблицаУслуги.СчетРасходов КАК КорСчетСписания,
		|	ВременнаяТаблицаУслуги.СтатьяРасходов КАК КорСубконто1,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги
		|		ПО (ИСТИНА)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		// Материалы заказчика.
		|ВЫБРАТЬ
		|	""МатериалыЗаказчика"" КАК ИмяСписка,
		|	&СинонимСпискаМатериалыЗаказчика КАК СинонимСписка,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаМатериалыЗаказчика.НомерСтроки КАК НомерСтроки,
		|	ВременнаяТаблицаМатериалыЗаказчика.СчетУчета КАК СчетУчета,
		|	ВременнаяТаблицаМатериалыЗаказчика.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаШапка.Склад КАК Склад,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОприходования,
		|	0 КАК Себестоимость,
		|	ВременнаяТаблицаМатериалыЗаказчика.Количество КАК Количество,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК КорСчетСписания,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто1,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаМатериалыЗаказчика КАК ВременнаяТаблицаМатериалыЗаказчика
		|		ПО (ИСТИНА)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	Запрос.УстановитьПараметр("Содержание", НСтр("ru = 'Списание товаров'")); 
	Запрос.УстановитьПараметр("СинонимСписка", НСтр("ru = 'Услуги'"));
	Запрос.УстановитьПараметр("СинонимСпискаМатериалыЗаказчика", НСтр("ru = 'Материалы заказчика'"));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизиты = МассивРезультатов[0].Выгрузить();
	ТаблицаТовары = МассивРезультатов[1].Выгрузить();
	ТаблицаМатериалыЗаказчика = МассивРезультатов[2].Выгрузить();
	
	ТаблицаСписанныеТовары = УчетТоваров.ПодготовитьТаблицуСписанныеТовары(ТаблицаТовары, ТаблицаРеквизиты, Отказ);
	ТаблицаСписанныеМатериалыЗаказчика = УчетТоваров.ПодготовитьТаблицуСписанныеТовары(ТаблицаМатериалыЗаказчика, ТаблицаРеквизиты, Отказ);
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРеквизиты", ТаблицаРеквизиты);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСписанныеТовары", ТаблицаСписанныеТовары);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСписанныеМатериалыЗаказчика", ТаблицаСписанныеМатериалыЗаказчика);

	// 1. Доход от реализации товаров
	// 2. НДС товары
	// 3. НСП товары
	ТекстыЗапроса = Новый Массив;
	
	// Доход от реализации товаров.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	1 КАК Порядок,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.СчетРасчетов КАК СчетДт,
		|	ВременнаяТаблицаУслуги.СчетДоходов КАК СчетКт,
		|	ВременнаяТаблицаШапка.Контрагент КАК СубконтоДт1,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ВременнаяТаблицаУслуги.СтатьяДоходов КАК СубконтоКт1,
		|	ВременнаяТаблицаУслуги.НоменклатурнаяГруппа КАК СубконтоКт2,
		|	ВременнаяТаблицаУслуги.Номенклатура КАК СубконтоКт3,
		|	ВременнаяТаблицаУслуги.СуммаДоходаВВалютеРеглУчета КАК Сумма,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаДт,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаКт,
		|	ВременнаяТаблицаУслуги.СуммаДохода КАК ВалютнаяСуммаДт,
		|	ВременнаяТаблицаУслуги.СуммаДохода КАК ВалютнаяСуммаКт,
		|	ВЫРАЗИТЬ(&СодержаниеТоварыДоход КАК СТРОКА(150)) КАК Содержание,
		|	0 КАК КоличествоДт,
		|	0 КАК КоличествоКт,
		|	ЛОЖЬ КАК КорректироватьНУ
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаУслуги.ВсегоВВалютеРеглУчета = 0";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// НДС товары.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	2 КАК Порядок,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.СчетРасчетов КАК СчетДт,
		|	ВременнаяТаблицаШапка.СчетУчетаНДС КАК СчетКт,
		|	ВременнаяТаблицаШапка.Контрагент КАК СубконтоДт1,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ВременнаяТаблицаУслуги.СуммаНДСВВалютеРеглУчета КАК Сумма,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаДт,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаКт,
		|	ВременнаяТаблицаУслуги.СуммаНДС КАК ВалютнаяСуммаДт,
		|	ВременнаяТаблицаУслуги.СуммаНДС КАК ВалютнаяСуммаКт,
		|	&СодержаниеТоварыНДС КАК Содержание,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоДт,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоКт,
		|	ЛОЖЬ КАК КорректироватьНУ
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги
		|		ПО (ИСТИНА)
		|ГДЕ
		|	&ПлательщикНДС
		|	И НЕ ВременнаяТаблицаУслуги.СуммаНДСВВалютеРеглУчета = 0";
	ТекстыЗапроса.Добавить(ТекстЗапроса);

	// НСП товары.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	3 КАК Порядок,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.СчетРасчетов КАК СчетДт,
		|	ВременнаяТаблицаШапка.СчетУчетаНСП КАК СчетКт,
		|	ВременнаяТаблицаШапка.Контрагент КАК СубконтоДт1,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ВременнаяТаблицаУслуги.СуммаНСПВВалютеРеглУчета КАК Сумма,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаДт,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаКт,
		|	ВременнаяТаблицаУслуги.СуммаНСП КАК ВалютнаяСуммаДт,
		|	ВременнаяТаблицаУслуги.СуммаНСП КАК ВалютнаяСуммаКт,
		|	&СодержаниеТоварыНСП КАК Содержание,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоДт,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоКт,
		|	ЛОЖЬ КАК КорректироватьНУ
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаУслуги.СуммаНСПВВалютеРеглУчета = 0";
	ТекстыЗапроса.Добавить(ТекстЗапроса);

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, Символы.ПС + " ОБЪЕДИНИТЬ ВСЕ " + Символы.ПС);
	Запрос.УстановитьПараметр("СодержаниеТоварыДоход", 	НСтр("ru = 'Доход от реализации товаров'")); 
	Запрос.УстановитьПараметр("СодержаниеТоварыНДС", 	НСтр("ru = 'НДС (товары)'")); 
	Запрос.УстановитьПараметр("СодержаниеТоварыНСП", 	НСтр("ru = 'НСП (товары)'")); 
	
	Запрос.УстановитьПараметр("ПлательщикНДС", СтруктураДополнительныеСвойства.УчетнаяПолитика.ПлательщикНДС);
	
	РезультатЗапроса = Запрос.Выполнить();	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаХозрасчетный", РезультатЗапроса.Выгрузить());	
		
КонецПроцедуры // СформироватьТаблицаХозрасчетный()

// Формирует таблицу значений, содержащую данные для проведения по регистру бухгалтерии Хозрасчетный.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПродажи(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	1 КАК Порядок,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.Ссылка КАК ДокументРеализации,
		|	ВременнаяТаблицаШапка.Склад КАК Склад,
		|	ВременнаяТаблицаШапка.Контрагент КАК Контрагент,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента КАК Договор,
		|	ВременнаяТаблицаШапка.СтавкаНДС КАК СтавкаНДС,
		|	ВременнаяТаблицаУслуги.СтавкаНСП КАК СтавкаНСП,
		|	ВременнаяТаблицаШапка.БезналичныйРасчет КАК БезналичныйРасчет,
		|	ВременнаяТаблицаУслуги.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаУслуги.Количество КАК Количество,
		|	ВременнаяТаблицаУслуги.ВсегоВВалютеРеглУчета - ВременнаяТаблицаУслуги.СуммаНДСВВалютеРеглУчета - ВременнаяТаблицаУслуги.СуммаНСПВВалютеРеглУчета КАК Сумма,
		|	ВременнаяТаблицаУслуги.СуммаНДСВВалютеРеглУчета КАК СуммаНДС,
		|	ВременнаяТаблицаУслуги.СуммаНСПВВалютеРеглУчета КАК СуммаНСП,
		|	ВременнаяТаблицаУслуги.СуммаДоходаВВалютеРеглУчета КАК СуммаДохода,
		|	ВременнаяТаблицаУслуги.ВсегоВВалютеРеглУчета КАК СуммаВсего,
		|	0 КАК Себестоимость
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаУслуги.ВсегоВВалютеРеглУчета = 0";
	РезультатЗапроса = Запрос.Выполнить();	
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажи", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаРеализацияТоваров(ДокументСсылка, СтруктураДополнительныеСвойства) 

// Формирует таблицу значений, содержащую данные для проведения по регистру накопления ОборотыПоДаннымЕдиногоНалога.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаОборотыПоДаннымЕдиногоНалога(СтруктураДополнительныеСвойства)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаУслуги.ВидДеятельности КАК ВидДеятельности
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги
		|		ПО (ИСТИНА)
		|ГДЕ
		|	&ПлательщикЕН";
	Запрос.УстановитьПараметр("ПлательщикЕН", СтруктураДополнительныеСвойства.УчетнаяПолитика.ПлательщикЕНМетодНачисления);
	РезультатЗапроса = Запрос.Выполнить();	
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ОборотыПоДаннымЕдиногоНалога", РезультатЗапроса.Выгрузить());
КонецПроцедуры

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства, Отказ) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК Ссылка,
		|	ТаблицаДокумента.Дата КАК Дата,
		|	ТаблицаДокумента.Номер КАК Номер,
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ТаблицаДокумента.БезналичныйРасчет КАК БезналичныйРасчет,
		|	ТаблицаДокумента.Склад КАК Склад,
		|	ТаблицаДокумента.Контрагент КАК Контрагент,
		|	ТаблицаДокумента.Контрагент.ПризнакСтраны КАК ПризнакСтраны,
		|	ТаблицаДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаДокумента.СчетРасчетов КАК СчетРасчетов,
		|	ТаблицаДокумента.ВалютаДокумента КАК ВалютаДокумента,
		|	ТаблицаДокумента.Курс КАК Курс,
		|	ТаблицаДокумента.Кратность КАК Кратность,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСКОплате) КАК СчетУчетаНДС,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НалогСПродаж) КАК СчетУчетаНСП,
		|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаДокумента.СуммаВключаетНалоги КАК СуммаВключаетНалоги,
		|	ТаблицаДокумента.СерияБланкаСФ КАК СерияБланкаСФ,
		|	ТаблицаДокумента.НомерБланкаСФ КАК НомерБланкаСФ,
		|	ТаблицаДокумента.ДатаСФ КАК ДатаСФ
		|ПОМЕСТИТЬ ВременнаяТаблицаШапка
		|ИЗ
		|	Документ.РеализацияУслугПоПереработке КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
		|	ТаблицаДокумента.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	ТаблицаДокумента.Количество КАК Количество,
		|	ТаблицаДокумента.Всего КАК Всего,
		|	ТаблицаДокумента.Сумма КАК Сумма,
		|	ТаблицаДокумента.СуммаДохода КАК СуммаДохода,
		|	ТаблицаДокумента.СуммаНДС КАК СуммаНДС,
		|	ТаблицаДокумента.СтавкаНСП КАК СтавкаНСП,
		|	ТаблицаДокумента.СуммаНСП КАК СуммаНСП,
		|	ТаблицаДокумента.ВсегоВВалютеРеглУчета КАК ВсегоВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаВВалютеРеглУчета КАК СуммаВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаДоходаВВалютеРеглУчета КАК СуммаДоходаВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаНДСВВалютеРеглУчета КАК СуммаНДСВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаНСПВВалютеРеглУчета КАК СуммаНСПВВалютеРеглУчета,
		|	ТаблицаДокумента.СчетУчета КАК СчетУчета,
		|	ТаблицаДокумента.СчетДоходов КАК СчетДоходов,
		|	ТаблицаДокумента.СтатьяДоходов КАК СтатьяДоходов,
		|	ТаблицаДокумента.СчетРасходов КАК СчетРасходов,
		|	ТаблицаДокумента.СтатьяРасходов КАК СтатьяРасходов,
		|	ТаблицаДокумента.ВидДеятельности КАК ВидДеятельности
		|ПОМЕСТИТЬ ВременнаяТаблицаУслуги
		|ИЗ
		|	Документ.РеализацияУслугПоПереработке.Услуги КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
		|	ТаблицаДокумента.Количество КАК Количество,
		|	ТаблицаДокумента.СчетУчета КАК СчетУчета
		|ПОМЕСТИТЬ ВременнаяТаблицаМатериалыЗаказчика
		|ИЗ
		|	Документ.РеализацияУслугПоПереработке.МатериалыЗаказчика КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка";		
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Период", СтруктураДополнительныеСвойства.ДляПроведения.Дата);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ПлательщикНСП", СтруктураДополнительныеСвойства.УчетнаяПолитика.ПлательщикНСП);
	Запрос.Выполнить();
	
	СформироватьТаблицаХозрасчетный(ДокументСсылка, СтруктураДополнительныеСвойства, Отказ);
	СформироватьТаблицаПродажи(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаОборотыПоДаннымЕдиногоНалога(СтруктураДополнительныеСвойства);
	
КонецПроцедуры

#КонецОбласти	

#Область ВерсионированиеОбъектов

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//@skip-warning
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область ИнтерфейсПечати

// Функция формирует табличный документ с печатной формой акта об
// оказании услуг
//
// Возвращаемое значение:
//  Табличный документ - печатная форма акта
//
Функция ПечатьАктаОбОказанииУслуг(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "РеализацияУслугПоПереработке_Акт";

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РеализацияУслугПоПереработке.ПФ_MXL_Акт");
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК Ссылка,
		|	ТаблицаДокумента.Номер КАК Номер,
		|	ТаблицаДокумента.Дата КАК Дата,
		|	ТаблицаДокумента.Комментарий КАК Комментарий,
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ТаблицаДокумента.Организация.НаименованиеПолное КАК ОрганизацияПредставление,
		|	ТаблицаДокумента.ВалютаДокумента КАК ВалютаДокумента,
		|	ТаблицаДокумента.Склад КАК Склад,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокумента.Склад) КАК СкладПредставление,
		|	ТаблицаДокумента.Контрагент КАК Контрагент,
		|	ТаблицаДокумента.Контрагент.НаименованиеПолное КАК КонтрагентПредставление,
		|	ТаблицаДокумента.ВыводитьКомментарий КАК ВыводитьКомментарий,
		|	ТаблицаДокумента.Услуги.(
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
		|		ПРЕДСТАВЛЕНИЕ(ТаблицаДокумента.Услуги.Номенклатура.ЕдиницаИзмерения) КАК ЕИ,
		|		Количество КАК Количество,
		|		Цена КАК Цена,
		|		СуммаНДС КАК СуммаНДС,
		|		СуммаНСП КАК СуммаНСП,
		|		Всего КАК Всего
		|	) КАК Услуги
		|ИЗ
		|	Документ.РеализацияУслугПоПереработке КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В(&СписокДокументов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаДокумента.Дата,
		|	ТаблицаДокумента.Ссылка";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокДокументов", МассивОбъектов);

	Шапка = Запрос.Выполнить().Выбрать();
	Пока Шапка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Подготовка данных
		ДанныеПечати = Новый Структура;

		ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, НСтр("ru = 'Акт оказания услуг по переработке'"));
		ДанныеПечати.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		ДанныеПечати.Вставить("ОрганизацияПредставление", Шапка.ОрганизацияПредставление);
		ДанныеПечати.Вставить("СкладПредставление", Шапка.СкладПредставление);
		ДанныеПечати.Вставить("ПолучательПредставление", Шапка.КонтрагентПредставление);
		ДанныеПечати.Вставить("Комментарий", Шапка.Комментарий);
		
		ТаблицаУслуги = Шапка.Услуги.Выгрузить();

		Всего = ТаблицаУслуги.Итог("Всего");
		ВсегоНДС = ТаблицаУслуги.Итог("СуммаНДС");
		ВсегоНСП = ТаблицаУслуги.Итог("СуммаНСП");
		КоличествоНаименований = ТаблицаУслуги.Количество();		
		
		ДанныеПечати.Вставить("Всего", Всего);
		ДанныеПечати.Вставить("ВсегоНДС", ВсегоНДС);
		ДанныеПечати.Вставить("ВсегоНСП", ВсегоНСП);
		ДанныеПечати.Вставить("ИтоговаяСтрока", 
			СтрШаблон(НСтр("ru = 'Всего наименований %1, на сумму %2'"), 
			Формат(КоличествоНаименований, "ЧН=0; ЧГ=0"), Формат(ДанныеПечати.Всего, "ЧЦ=15; ЧДЦ=2")));
		ДанныеПечати.Вставить("СуммаПрописью", БухгалтерскийУчетСервер.СформироватьСуммуПрописью(ДанныеПечати.Всего, Шапка.ВалютаДокумента));
		
		// Области
		МассивОбластейМакета = Новый Массив;
		МассивОбластейМакета.Добавить("Заголовок");
		Если Шапка.ВыводитьКомментарий Тогда
			МассивОбластейМакета.Добавить("Комментарий");
		КонецЕсли;
		МассивОбластейМакета.Добавить("ШапкаТаблицы");
		МассивОбластейМакета.Добавить("Строка");
		МассивОбластейМакета.Добавить("Подвал");
		МассивОбластейМакета.Добавить("Итоги");
		МассивОбластейМакета.Добавить("ИтогиНДС");
		МассивОбластейМакета.Добавить("ИтогиНСП");
		МассивОбластейМакета.Добавить("СуммаПрописью");
		МассивОбластейМакета.Добавить("Подписи");
		
		Для Каждого ИмяОбласти Из МассивОбластейМакета Цикл
			
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
			
			Если ИмяОбласти = "Строка" Тогда 
				Для Каждого СтрокаТаблицы Из ТаблицаУслуги Цикл
					ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
			Иначе 
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьМакета);	
			КонецЕсли;	
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;

	Возврат ТабличныйДокумент;

КонецФункции

// Функция формирует табличный документ с печатной формой отчета о
// продукции, произведенной из давальческого сырья и переданной давальцу
//
// Возвращаемое значение:
//  Табличный документ - печатная форма отчета
//
Функция ПечатьОтчета(ТабЧасть, МассивОбъектов, ОбъектыПечати, ПараметрыПечати)

	//УстановитьПривилегированныйРежим(Истина);
	//
	//ДополнительнаяКолонкаПечатныхФормДокументов = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	//Если НЕ ЗначениеЗаполнено(ДополнительнаяКолонкаПечатныхФормДокументов) Тогда
	//	ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	//КонецЕсли;
	// ВыводитьКоды = ДополнительнаяКолонкаПечатныхФормДокументов <> Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	//
	//ТабличныйДокумент = Новый ТабличныйДокумент;
	//ТабличныйДокумент.АвтоМасштаб			= Истина;
	//ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	//ТабличныйДокумент.КлючПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияУслугПоПереработке_Отчет_о_" + ТабЧасть;

	//Запрос = Новый Запрос();
	//Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	//Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", ДополнительнаяКолонкаПечатныхФормДокументов);
	//Запрос.Текст = "
	//	|//Шапка
	//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	РеализацияУслугПоПереработке.Ссылка,
	//	|	РеализацияУслугПоПереработке.ВерсияДанных,
	//	|	РеализацияУслугПоПереработке.ПометкаУдаления,
	//	|	РеализацияУслугПоПереработке.Номер,
	//	|	РеализацияУслугПоПереработке.Дата,
	//	|	РеализацияУслугПоПереработке.Проведен,
	//	|	РеализацияУслугПоПереработке.ВалютаДокумента,
	//	|	РеализацияУслугПоПереработке.ДоговорКонтрагента,
	//	|	РеализацияУслугПоПереработке.ДоговорКонтрагента.ГосударственныйКонтракт.Код КАК ГосударственныйКонтракт,
	//	|	РеализацияУслугПоПереработке.Комментарий,
	//	|	РеализацияУслугПоПереработке.Исполнитель,
	//	|	РеализацияУслугПоПереработке.ИсполнительНаОсновании,
	//	|	РеализацияУслугПоПереработке.Контрагент,
	//	|	РеализацияУслугПоПереработке.КратностьВзаиморасчетов,
	//	|	РеализацияУслугПоПереработке.КурсВзаиморасчетов,
	//	|	РеализацияУслугПоПереработке.Организация,
	//	|	РеализацияУслугПоПереработке.Ответственный,
	//	|	РеализацияУслугПоПереработке.СуммаВключаетНалоги,
	//	|	РеализацияУслугПоПереработке.СчетУчетаРасчетовПоАвансам,
	//	|	РеализацияУслугПоПереработке.СчетУчетаРасчетовСКонтрагентом,
	//	|	РеализацияУслугПоПереработке.ТипЦен,
	//	|	РеализацияУслугПоПереработке.СуммаДокумента,
	//	|	РеализацияУслугПоПереработке.РучнаяКорректировка,
	//	|	РеализацияУслугПоПереработке.ПодразделениеОрганизации,
	//	|	РеализацияУслугПоПереработке.СпособЗачетаАвансов
	//	|ИЗ
	//	|	Документ.РеализацияУслугПоПереработке КАК РеализацияУслугПоПереработке
	//	|ГДЕ
	//	|	РеализацияУслугПоПереработке.Ссылка В (&МассивОбъектов)
	//	|УПОРЯДОЧИТЬ ПО
	//	|	РеализацияУслугПоПереработке.Дата,
	//	|	РеализацияУслугПоПереработке.Ссылка
	//	|;
	//	|
	//	|// Табличная часть (услуги или материалы заказчика)
	//	|ВЫБРАТЬ
	//	|	РеализацияУслугПоПереработке.Ссылка       КАК Ссылка,
	//	|	РеализацияУслугПоПереработке.НомерСтроки  КАК НомерСтроки,
	//	|	РеализацияУслугПоПереработке.Номенклатура КАК Номенклатура,
	//	|	ВЫБОР
	//	|		КОГДА РеализацияУслугПоПереработке.Номенклатура.НаименованиеПолное = """"
	//	|		ТОГДА ПРЕДСТАВЛЕНИЕ(РеализацияУслугПоПереработке.Номенклатура)
	//	|		ИНАЧЕ РеализацияУслугПоПереработке.Номенклатура.НаименованиеПолное
	//	|	КОНЕЦ КАК Товар,
	//	|	ВЫБОР
	//	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	//	|			ТОГДА РеализацияУслугПоПереработке.Номенклатура.Артикул
	//	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	//	|			ТОГДА РеализацияУслугПоПереработке.Номенклатура.Код
	//	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
	//	|			ТОГДА """"
	//	|	КОНЕЦ КАК КодАртикул,
	//	|	РеализацияУслугПоПереработке.Количество КАК Количество,
	//	|	РеализацияУслугПоПереработке.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения" +

	//	?(ТабЧасть = "Услуги", ",
	//		|	РеализацияУслугПоПереработке.Цена,
	//		|	РеализацияУслугПоПереработке.Сумма","") + "

	//	|ИЗ
	//	|	Документ.РеализацияУслугПоПереработке." + ТабЧасть + " КАК РеализацияУслугПоПереработке
	//	|
	//	|ГДЕ
	//	|	РеализацияУслугПоПереработке.Ссылка В (&МассивОбъектов)
	//	|УПОРЯДОЧИТЬ ПО
	//	|	РеализацияУслугПоПереработке.Ссылка.Дата,
	//	|	РеализацияУслугПоПереработке.Ссылка,
	//	|	РеализацияУслугПоПереработке.НомерСтроки
	//	|";

	//Результат = Запрос.ВыполнитьПакет();
	//Выборка   = Результат[0].Выбрать();
	//ВсеСтроки = Результат[1].Выгрузить();
	//ВсеСтроки.Индексы.Добавить("Ссылка,НомерСтроки");

	//ПервыйДокумент = Истина;

	//Пока Выборка.Следующий() Цикл

	//	Если Не ПервыйДокумент Тогда
	//		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	//	КонецЕсли;

	//	ПервыйДокумент = Ложь;
	//	// Запомним номер строки, с которой начали выводить текущий документ.
	//	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

	//	ТаблицаПродукция = ВсеСтроки.НайтиСтроки(Новый Структура("Ссылка", Выборка.Ссылка));

	//	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РеализацияУслугПоПереработке.ПФ_MXL_Акт");

	//	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	//	НазваниеДокумента = НСтр("ru='Отчет о '") + ?(ТабЧасть = "Услуги",
	//						НСтр("ru='продукции, произведенной из сырья заказчика'"),
	//						НСтр("ru='переработанном сырье '"));
	//	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Выборка,
	//											 НСтр("ru='Отчет о '") + ?(ТабЧасть = "Услуги",
	//											 НСтр("ru='продукции, произведенной из сырья заказчика'"),
	//											 НСтр("ru='переработанном сырье '")),
	//											 Истина);
	//	ТабличныйДокумент.Вывести(ОбластьМакета);

	//	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	//	СведенияОбОрганизации   = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Выборка.Организация, Выборка.Дата);
	//	ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
	//	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
	//	ОбластьМакета.Параметры.Поставщик               = Выборка.Организация;
	//	ТабличныйДокумент.Вывести(ОбластьМакета);

	//	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	//	СведенияОКонтрагенте    = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Выборка.Контрагент, Выборка.Дата);
	//	ПредставлениеПолучателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм,");
	//	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
	//	ОбластьМакета.Параметры.Получатель              = Выборка.Контрагент;
	//	ТабличныйДокумент.Вывести(ОбластьМакета);
	//	
	//	Если Макет.Области.Найти("Основание") <> Неопределено Тогда
	//		ОбластьМакета = Макет.ПолучитьОбласть("Основание");
	//		ОбластьМакета.Параметры.Заполнить(Новый Структура("Основание", СокрЛП(Строка(Выборка.ДоговорКонтрагента))));
	//		ТабличныйДокумент.Вывести(ОбластьМакета);
	//	КонецЕсли;
	//	
	//	// Вывести табличную часть
	//	ОбластьШапки = ?(ВыводитьКоды, "ШапкаТаблицы" + ТабЧасть + "СКодом", "ШапкаТаблицы" + ТабЧасть);
	//	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	//	Если ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
	//		ОбластьМакета.Параметры.ИмяКодАртикул = "Артикул";
	//	ИначеЕсли ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
	//		ОбластьМакета.Параметры.ИмяКодАртикул = "Код";
	//	КонецЕсли;
	//	ТабличныйДокумент.Вывести(ОбластьМакета);
	//	
	//	ОбластьСтроки = ?(ВыводитьКоды, "Строка" + ТабЧасть + "СКодом", "Строка" + ТабЧасть);
	//	ОбластьСтроки = Макет.ПолучитьОбласть(ОбластьСтроки);

	//	НомерСтроки = 0;

	//	Сумма = 0;

	//	Для Каждого СтрокаТабличнойЧасти Из ТаблицаПродукция Цикл
	//		НомерСтроки = НомерСтроки + 1;
	//		ОбластьСтроки.Параметры.Заполнить(СтрокаТабличнойЧасти);
	//		ОбластьСтроки.Параметры.НомерСтроки = НомерСтроки;

	//		Если ТабЧасть = "Услуги" Тогда
	//			Сумма = Сумма + СтрокаТабличнойЧасти.Сумма;
	//		КонецЕсли;

	//		ТабличныйДокумент.Вывести(ОбластьСтроки);
	//	КонецЦикла;

	//	Если ТабЧасть = "Услуги" Тогда
	//		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	//		ОбластьМакета.Параметры.Всего = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Сумма);
	//		ТабличныйДокумент.Вывести(ОбластьМакета);

	//		СуммаКПрописи = Сумма;
	//		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	//		ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего продукции '") + НомерСтроки +
	//			НСтр("ru=', на сумму '") + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКПрописи, Выборка.ВалютаДокумента);
	//		ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, Выборка.ВалютаДокумента);
	//		ТабличныйДокумент.Вывести(ОбластьМакета);
	//	КонецЕсли;

	//	Если ТабЧасть = "МатериалыЗаказчика" Тогда
	//		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоМатериалы");
	//		ТабличныйДокумент.Вывести(ОбластьМакета);
	//	КонецЕсли;

	//	ОбластьМакета = Макет.ПолучитьОбласть("Подписи" + ТабЧасть);
	//	ОтветственныеЛицаОрганизации = ОтветственныеЛицаБП.ОтветственныеЛица(Выборка.Организация, Выборка.Дата, Выборка.ПодразделениеОрганизации);
	//	НаименованиеДолжности = ?(ЗначениеЗаполнено(ОтветственныеЛицаОрганизации.РуководительДолжностьПредставление), ОтветственныеЛицаОрганизации.РуководительДолжностьПредставление + " ", "");
	//	ДолжностьИНазваниеОрганизации = НаименованиеДолжности + ПредставлениеПоставщика;
	//	
	//	Если ЗначениеЗаполнено(Выборка.Исполнитель) Тогда
	//		ДанныеОтветственногоЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Выборка.Организация, Выборка.Исполнитель, Выборка.Дата);
	//		Если Выборка.Исполнитель = ОтветственныеЛицаОрганизации.Руководитель Тогда 
	//			ЗаместительПоПриказу = ОтветственныеЛицаОрганизации.РуководительПредставление;
	//		Иначе
	//			ЗаместительПоПриказу = "" + ДанныеОтветственногоЛица.Представление;
	//		КонецЕсли;
	//	Иначе
	//		ЗаместительПоПриказу = ОтветственныеЛицаОрганизации.РуководительПредставление;
	//	КонецЕсли;
	//	
	//	Отпустил = Новый Структура("Отпустил", ЗаместительПоПриказу);
	//	ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, Отпустил);
	//	ТабличныйДокумент.Вывести(ОбластьМакета);
	//	
	//	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ПодвалПечать"));
	//	
	//	// В табличном документе зададим имя области, в которую был
	//	// выведен объект. Нужно для возможности печати покомплектно.
	//	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент,
	//		НомерСтрокиНачало, ОбъектыПечати, Выборка.Ссылка);
	//		
	//	УправлениеПечатьюБП.ДополнитьДокументПодписьюИПечатью(ТабличныйДокумент, Выборка, ОбъектыПечати, ПараметрыПечати);
	//		
	//КонецЦикла;

	//Возврат ТабличныйДокумент;

КонецФункции

// Функция формирует табличный документ с печатной формой Счет-фактура
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьСчетФактура007_008_009_010(МассивОбъектов, ОбъектыПечати, НомерСФ)

	ТабличныйДокумент = Новый ТабличныйДокумент;		
	ТабличныйДокумент.КлючПараметровПечати = "РеализацияУслугПоПереработке_СчетФактура";
	
	Если НомерСФ = "007" Тогда	
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;	
		Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьСчетФактура.ПФ_MXL_СчетФактура007");
		
	ИначеЕсли НомерСФ = "008" Тогда
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьСчетФактура.ПФ_MXL_СчетФактура008");
		
	ИначеЕсли НомерСФ = "009" Тогда
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьСчетФактура.ПФ_MXL_СчетФактура009");
		
	Иначе
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьСчетФактура.ПФ_MXL_СчетФактура010");
	КонецЕсли;	
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	СведенияОбЭСФ.Дата КАК Дата,
		|	СведенияОбЭСФ.ДатаПоставки КАК ДатаПоставки,
		|	СведенияОбЭСФ.НомерЭСФ КАК НомерЭСФ,
		|	СведенияОбЭСФ.НомерКорректируемогоЭСФ КАК НомерКорректируемогоЭСФ,
		|	СведенияОбЭСФ.КодСпособаОтправки КАК КодСпособаОтправки,
		|	СведенияОбЭСФ.ДокументОснование КАК ДокументОснование
		|ПОМЕСТИТЬ ВременнаяТаблицаСведенияОбЭСФ
		|ИЗ
		|	РегистрСведений.СведенияОбЭСФ КАК СведенияОбЭСФ
		|ГДЕ
		|	СведенияОбЭСФ.ДокументОснование В(&СписокДокументов)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РеализацияУслугПоПереработке.Ссылка КАК Ссылка,
		|	РеализацияУслугПоПереработке.Номер КАК Номер,
		|	РеализацияУслугПоПереработке.ВалютаДокумента.Код КАК КодВалюты,
		|	РеализацияУслугПоПереработке.Курс КАК Курс,
		|	РеализацияУслугПоПереработке.КодПоставкиНДС.Код КАК КодПоставкиНДС,
		|	РеализацияУслугПоПереработке.Организация КАК Организация,
		|	РеализацияУслугПоПереработке.Контрагент КАК Контрагент,
		|	РеализацияУслугПоПереработке.БезналичныйРасчет КАК БезналичныйРасчет,
		|	РеализацияУслугПоПереработке.СтавкаНДС КАК СтавкаНДС,
		//|	РеализацияУслугПоПереработке.СтавкаНСП КАК СтавкаНСП,
		|	РеализацияУслугПоПереработке.ДоговорКонтрагента.НомерДоговора КАК НомерДоговора,
		|	РеализацияУслугПоПереработке.ДоговорКонтрагента.ДатаДоговора КАК ДатаДоговора,
		|	ЕСТЬNULL(ВременнаяТаблицаСведенияОбЭСФ.НомерЭСФ, НЕОПРЕДЕЛЕНО) КАК НомерБланкаСФ,
		|	ЕСТЬNULL(ВременнаяТаблицаСведенияОбЭСФ.НомерКорректируемогоЭСФ, НЕОПРЕДЕЛЕНО) КАК НомерБланкаСФКор,
		|	ЕСТЬNULL(ВременнаяТаблицаСведенияОбЭСФ.КодСпособаОтправки, НЕОПРЕДЕЛЕНО) КАК КодСпособаОтправки,
		|	ЕСТЬNULL(ВременнаяТаблицаСведенияОбЭСФ.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК Дата,
		|	ЕСТЬNULL(ВременнаяТаблицаСведенияОбЭСФ.ДатаПоставки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПоставки,
		|	РеализацияУслугПоПереработке.Услуги.(
		|		Номенклатура.КодГКЭД КАК КодТовара,
		|		Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
		|		Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		Цена КАК Цена,
		|		Количество КАК Количество,
		|		РеализацияУслугПоПереработке.Услуги.Всего - РеализацияУслугПоПереработке.Услуги.СуммаНДС - РеализацияУслугПоПереработке.Услуги.СуммаНСП КАК Стоимость,
		|		СуммаНДС КАК СуммаНДС,
		|		СуммаНСП КАК СуммаНСП,
		|		Всего КАК Всего
		|	) КАК Услуги
		|ИЗ
		|	Документ.РеализацияУслугПоПереработке КАК РеализацияУслугПоПереработке
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСведенияОбЭСФ КАК ВременнаяТаблицаСведенияОбЭСФ
		|		ПО РеализацияУслугПоПереработке.Ссылка = ВременнаяТаблицаСведенияОбЭСФ.ДокументОснование
		|ГДЕ
		|	РеализацияУслугПоПереработке.Ссылка В(&СписокДокументов)";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокДокументов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	Пока Шапка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
	
		ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(Шапка.Дата, Шапка.Организация);
		ПлательщикНДС = ДанныеУчетнойПолитики.ПлательщикНДС;
		ПлательщикНСП = ДанныеУчетнойПолитики.ПлательщикНСП;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		КоличествоЛистов = КоличествоЛистовСчетФатуры(Макет, Шапка, НомерСФ);		
		КоличествоЛистовСтрокой = Формат(КоличествоЛистов, "ЧГ=0");
		
		// Подготовка данных
		ДанныеПечати = Новый Структура;
		
		Если КоличествоЛистов < 10 Тогда
			ДанныеПечати.Вставить("Лист1", "");
			ДанныеПечати.Вставить("Лист2", "");
			ДанныеПечати.Вставить("Лист3", КоличествоЛистовСтрокой);
		ИначеЕсли КоличествоЛистов < 100 Тогда
			ДанныеПечати.Вставить("Лист1", "");
			ДанныеПечати.Вставить("Лист2", Сред(КоличествоЛистовСтрокой, 1, 1));
			ДанныеПечати.Вставить("Лист3", Сред(КоличествоЛистовСтрокой, 2, 1));
		Иначе
			ДанныеПечати.Вставить("Лист1", Сред(КоличествоЛистовСтрокой, 1, 1));
			ДанныеПечати.Вставить("Лист2", Сред(КоличествоЛистовСтрокой, 2, 1));
			ДанныеПечати.Вставить("Лист3", Сред(КоличествоЛистовСтрокой, 3, 1));
		КонецЕсли;	
		
		ДанныеПечати.Вставить("НомерБланкаСФ", ?(ПлательщикНДС ИЛИ ЗначениеЗаполнено(Шапка.НомерБланкаСФ), Шапка.НомерБланкаСФ, ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер)));
		ДанныеПечати.Вставить("ВидПоставки", Шапка.КодПоставкиНДС);
		ДанныеПечати.Вставить("ТипПоставки", "Внутренняя");
		
		ДанныеПечати.Вставить("ВидПлатежа", ?(Шапка.БезналичныйРасчет, "Безналичная", "Наличная"));
		
		ДанныеПечати.Вставить("КодВалюты", Шапка.КодВалюты);
		ДанныеПечати.Вставить("КурсВалюты", Формат(Шапка.Курс, "ЧЦ=15; ЧДЦ=4"));
		
		Если ЗначениеЗаполнено(Шапка.Дата) Тогда
			ДанныеПечати.Вставить("ДатаПоставки1", Сред(Шапка.Дата,1,1));
			ДанныеПечати.Вставить("ДатаПоставки2", Сред(Шапка.Дата,2,1));
			ДанныеПечати.Вставить("ДатаПоставки3", Сред(Шапка.Дата,4,1));
			ДанныеПечати.Вставить("ДатаПоставки4", Сред(Шапка.Дата,5,1));
			ДанныеПечати.Вставить("ДатаПоставки5", Сред(Шапка.Дата,7,1));
			ДанныеПечати.Вставить("ДатаПоставки6", Сред(Шапка.Дата,8,1));
			ДанныеПечати.Вставить("ДатаПоставки7", Сред(Шапка.Дата,9,1));
			ДанныеПечати.Вставить("ДатаПоставки8", Сред(Шапка.Дата,10,1));
		КонецЕсли;
		
		ДанныеПечати.Вставить("НомерДоговора", Шапка.НомерДоговора);
		
		Если ЗначениеЗаполнено(Шапка.ДатаДоговора) Тогда
			ДанныеПечати.Вставить("ДатаДоговора1", Сред(Шапка.ДатаДоговора,1,1));
			ДанныеПечати.Вставить("ДатаДоговора2", Сред(Шапка.ДатаДоговора,2,1));
			ДанныеПечати.Вставить("ДатаДоговора3", Сред(Шапка.ДатаДоговора,4,1));
			ДанныеПечати.Вставить("ДатаДоговора4", Сред(Шапка.ДатаДоговора,5,1));
			ДанныеПечати.Вставить("ДатаДоговора5", Сред(Шапка.ДатаДоговора,7,1));
			ДанныеПечати.Вставить("ДатаДоговора6", Сред(Шапка.ДатаДоговора,8,1));
			ДанныеПечати.Вставить("ДатаДоговора7", Сред(Шапка.ДатаДоговора,9,1));
			ДанныеПечати.Вставить("ДатаДоговора8", Сред(Шапка.ДатаДоговора,10,1));
		КонецЕсли;
		
		СведенияОбОрганизации = БухгалтерскийУчетСервер.ПолучитьСведенияОбОрганизации(Шапка.Организация, Шапка.Дата);
		
		ДанныеПечати.Вставить("БанкПоставщика", СведенияОбОрганизации.Банк);		
		
		ИНН 					= СведенияОбОрганизации.ИНН;
	    ГНС 					= СведенияОбОрганизации.ГНС;
	    КодГНС 					= СведенияОбОрганизации.ГНСКод;		
		ПредставлениеПоставщика = СведенияОбОрганизации.НаименованиеПолное;
		            
		Если ЗначениеЗаполнено(Шапка.ДатаПоставки) Тогда
			ДанныеПечати.Вставить("Дата1", Сред(Шапка.ДатаПоставки,1,1));
			ДанныеПечати.Вставить("Дата2", Сред(Шапка.ДатаПоставки,2,1));
			ДанныеПечати.Вставить("Дата3", Сред(Шапка.ДатаПоставки,4,1));
			ДанныеПечати.Вставить("Дата4", Сред(Шапка.ДатаПоставки,5,1));
			ДанныеПечати.Вставить("Дата5", Сред(Шапка.ДатаПоставки,7,1));
			ДанныеПечати.Вставить("Дата6", Сред(Шапка.ДатаПоставки,8,1));
			ДанныеПечати.Вставить("Дата7", Сред(Шапка.ДатаПоставки,9,1));
			ДанныеПечати.Вставить("Дата8", Сред(Шапка.ДатаПоставки,10,1));
		КонецЕсли;
		
		ДанныеПечати.Вставить("ИННПост1", Сред(ИНН,1,1));
		ДанныеПечати.Вставить("ИННПост2", Сред(ИНН,2,1));
		ДанныеПечати.Вставить("ИННПост3", Сред(ИНН,3,1));
		ДанныеПечати.Вставить("ИННПост4", Сред(ИНН,4,1));
		ДанныеПечати.Вставить("ИННПост5", Сред(ИНН,5,1));
		ДанныеПечати.Вставить("ИННПост6", Сред(ИНН,6,1));
		ДанныеПечати.Вставить("ИННПост7", Сред(ИНН,7,1));
		ДанныеПечати.Вставить("ИННПост8", Сред(ИНН,8,1));
		ДанныеПечати.Вставить("ИННПост9", Сред(ИНН,9,1));
		ДанныеПечати.Вставить("ИННПост10", Сред(ИНН,10,1));
		ДанныеПечати.Вставить("ИННПост11", Сред(ИНН,11,1));
		ДанныеПечати.Вставить("ИННПост12", Сред(ИНН,12,1));
		ДанныеПечати.Вставить("ИННПост13", Сред(ИНН,13,1));
		ДанныеПечати.Вставить("ИННПост14", Сред(ИНН,14,1));

        БИК = СведенияОбОрганизации.БИКБанка;
		ДанныеПечати.Вставить("КодБанкаПоставщика1", Сред(БИК,1,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика2", Сред(БИК,2,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика3", Сред(БИК,3,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика4", Сред(БИК,4,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика5", Сред(БИК,5,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика6", Сред(БИК,6,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика7", Сред(БИК,7,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика8", Сред(БИК,8,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика9", Сред(БИК,9,1));		
		
		НомерСчета = СведенияОбОрганизации.НомерСчета;
		ДанныеПечати.Вставить("СчетПоставщика1", Сред(НомерСчета,1,1));		
		ДанныеПечати.Вставить("СчетПоставщика2", Сред(НомерСчета,2,1));		
		ДанныеПечати.Вставить("СчетПоставщика3", Сред(НомерСчета,3,1));		
		ДанныеПечати.Вставить("СчетПоставщика4", Сред(НомерСчета,4,1));		
		ДанныеПечати.Вставить("СчетПоставщика5", Сред(НомерСчета,5,1));		
		ДанныеПечати.Вставить("СчетПоставщика6", Сред(НомерСчета,6,1));		
		ДанныеПечати.Вставить("СчетПоставщика7", Сред(НомерСчета,7,1));		
		ДанныеПечати.Вставить("СчетПоставщика8", Сред(НомерСчета,8,1));		
		ДанныеПечати.Вставить("СчетПоставщика9", Сред(НомерСчета,9,1));		
		ДанныеПечати.Вставить("СчетПоставщика10", Сред(НомерСчета,10,1));		
		ДанныеПечати.Вставить("СчетПоставщика11", Сред(НомерСчета,11,1));		
		ДанныеПечати.Вставить("СчетПоставщика12", Сред(НомерСчета,12,1));		
		ДанныеПечати.Вставить("СчетПоставщика13", Сред(НомерСчета,13,1));		
		ДанныеПечати.Вставить("СчетПоставщика14", Сред(НомерСчета,14,1));		
		ДанныеПечати.Вставить("СчетПоставщика15", Сред(НомерСчета,15,1));		
		ДанныеПечати.Вставить("СчетПоставщика16", Сред(НомерСчета,16,1));		
		
		ДанныеПечати.Вставить("ГНСПоставщика1", Сред(КодГНС,1,1));		
		ДанныеПечати.Вставить("ГНСПоставщика2", Сред(КодГНС,2,1));		
		ДанныеПечати.Вставить("ГНСПоставщика3", Сред(КодГНС,3,1));		

		ДанныеПечати.Вставить("НаименованиеГНСПоставщика", ГНС);		
		ДанныеПечати.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);		
		
		АдресПоставщика = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ШАпка.Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Шапка.Дата); 
		ДанныеПечати.Вставить("АдресПоставщика", АдресПоставщика);		

		// Данные по контрагенту
		СведенияОКонтрагенте = БухгалтерскийУчетСервер.ПолучитьСведенияОКонтрагенте(Шапка.Контрагент);
		
		ДанныеПечати.Вставить("ПредставлениеПокупателя", СведенияОКонтрагенте.НаименованиеПолное);
		
		ВыводДопИнформацииПоКонтрагенту = БухгалтерскийУчетСервер.ПолучитьПризнакПатентаПоКонтрагенту(Шапка.Контрагент) ИЛИ
			(Шапка.Контрагент.СтранаРезидентства = Справочники.СтраныМира.Киргизия ИЛИ Шапка.Контрагент.СтранаРезидентства.УчастникЕАЭС);
		
		Если ВыводДопИнформацииПоКонтрагенту Тогда
			Если Шапка.Контрагент.ПризнакСтраны = Перечисления.ПризнакиСтраны.ЕАЭС Тогда
				ДанныеПечати.Вставить("НаименованиеГНСПокупателя", Шапка.Контрагент.СтранаРезидентства.Наименование);
				КодГНСКонтрагента = Шапка.Контрагент.СтранаРезидентства.Код;
				ДанныеПечати.Вставить("ГНСПокупателя1", Сред(КодГНСКонтрагента,1,1));		
				ДанныеПечати.Вставить("ГНСПокупателя2", Сред(КодГНСКонтрагента,2,1));		
				ДанныеПечати.Вставить("ГНСПокупателя3", Сред(КодГНСКонтрагента,3,1));	
			Иначе
				ДанныеПечати.Вставить("НаименованиеГНСПокупателя", СведенияОКонтрагенте.ГНСНаименование);
				КодГНСКонтрагента = СведенияОКонтрагенте.ГНСКод;
				ДанныеПечати.Вставить("ГНСПокупателя1", Сред(КодГНСКонтрагента,1,1));		
				ДанныеПечати.Вставить("ГНСПокупателя2", Сред(КодГНСКонтрагента,2,1));		
				ДанныеПечати.Вставить("ГНСПокупателя3", Сред(КодГНСКонтрагента,3,1));	
			КонецЕсли;	
		Иначе
			ДанныеПечати.Вставить("НаименованиеГНСПокупателя", "отсутствует");
		КонецЕсли;
		
		ДанныеПечати.Вставить("АдресПокупателя", СведенияОКонтрагенте.АдрЮР);		
		
		ИННКонтрагента = СведенияОКонтрагенте.ИНН;
		ДанныеПечати.Вставить("ИННПокупателя1", Сред(ИННКонтрагента,1,1));		
		ДанныеПечати.Вставить("ИННПокупателя2", Сред(ИННКонтрагента,2,1));		
		ДанныеПечати.Вставить("ИННПокупателя3", Сред(ИННКонтрагента,3,1));		
		ДанныеПечати.Вставить("ИННПокупателя4", Сред(ИННКонтрагента,4,1));		
		ДанныеПечати.Вставить("ИННПокупателя5", Сред(ИННКонтрагента,5,1));		
		ДанныеПечати.Вставить("ИННПокупателя6", Сред(ИННКонтрагента,6,1));		
		ДанныеПечати.Вставить("ИННПокупателя7", Сред(ИННКонтрагента,7,1));		
		ДанныеПечати.Вставить("ИННПокупателя8", Сред(ИННКонтрагента,8,1));		
		ДанныеПечати.Вставить("ИННПокупателя9", Сред(ИННКонтрагента,9,1));		
		ДанныеПечати.Вставить("ИННПокупателя10", Сред(ИННКонтрагента,10,1));		
		ДанныеПечати.Вставить("ИННПокупателя11", Сред(ИННКонтрагента,11,1));		
		ДанныеПечати.Вставить("ИННПокупателя12", Сред(ИННКонтрагента,12,1));		
		ДанныеПечати.Вставить("ИННПокупателя13", Сред(ИННКонтрагента,13,1));		
		ДанныеПечати.Вставить("ИННПокупателя14", Сред(ИННКонтрагента,14,1));		
		
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.НомерСчета) И ВыводДопИнформацииПоКонтрагенту Тогда 
			НомерСчетаКонтрагента = СведенияОКонтрагенте.НомерСчета;
			ДанныеПечати.Вставить("СчетПокупателя1", Сред(НомерСчетаКонтрагента,1,1));		
			ДанныеПечати.Вставить("СчетПокупателя2", Сред(НомерСчетаКонтрагента,2,1));		
			ДанныеПечати.Вставить("СчетПокупателя3", Сред(НомерСчетаКонтрагента,3,1));		
			ДанныеПечати.Вставить("СчетПокупателя4", Сред(НомерСчетаКонтрагента,4,1));		
			ДанныеПечати.Вставить("СчетПокупателя5", Сред(НомерСчетаКонтрагента,5,1));		
			ДанныеПечати.Вставить("СчетПокупателя6", Сред(НомерСчетаКонтрагента,6,1));		
			ДанныеПечати.Вставить("СчетПокупателя7", Сред(НомерСчетаКонтрагента,7,1));		
			ДанныеПечати.Вставить("СчетПокупателя8", Сред(НомерСчетаКонтрагента,8,1));		
			ДанныеПечати.Вставить("СчетПокупателя9", Сред(НомерСчетаКонтрагента,9,1));		
			ДанныеПечати.Вставить("СчетПокупателя10", Сред(НомерСчетаКонтрагента,10,1));		
			ДанныеПечати.Вставить("СчетПокупателя11", Сред(НомерСчетаКонтрагента,11,1));		
			ДанныеПечати.Вставить("СчетПокупателя12", Сред(НомерСчетаКонтрагента,12,1));		
			ДанныеПечати.Вставить("СчетПокупателя13", Сред(НомерСчетаКонтрагента,13,1));		
			ДанныеПечати.Вставить("СчетПокупателя14", Сред(НомерСчетаКонтрагента,14,1));
			ДанныеПечати.Вставить("СчетПокупателя15", Сред(НомерСчетаКонтрагента,15,1));		
			ДанныеПечати.Вставить("СчетПокупателя16", Сред(НомерСчетаКонтрагента,16,1));
			
			БикБанкаКонтрагента = СведенияОКонтрагенте.БИКБанка;
			ДанныеПечати.Вставить("КодБанкаПокупателя1", Сред(БикБанкаКонтрагента,1,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя2", Сред(БикБанкаКонтрагента,2,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя3", Сред(БикБанкаКонтрагента,3,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя4", Сред(БикБанкаКонтрагента,4,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя5", Сред(БикБанкаКонтрагента,5,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя6", Сред(БикБанкаКонтрагента,6,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя7", Сред(БикБанкаКонтрагента,7,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя8", Сред(БикБанкаКонтрагента,8,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя9", Сред(БикБанкаКонтрагента,9,1));		
			
			ДанныеПечати.Вставить("БанкПокупателя", СведенияОКонтрагенте.Банк);
		КонецЕсли;	
		
		Руководители = БухгалтерскийУчетСервер.ОтветственныеЛицаОрганизацийРуководители(Шапка.Организация, Шапка.Дата);
		ДанныеПечати.Вставить("Руководитель", Руководители.Руководитель);
		ДанныеПечати.Вставить("ГлавныйБухгалтер", Руководители.ГлавныйБухгалтер);
		
		// Ставки
		ЗначениеСтавкиНДС = УчетНДС.ПолучитьСтавкуНДС(Шапка.Дата, Шапка.СтавкаНДС);
		
		Если Шапка.БезналичныйРасчет Тогда 
			ЗначениеСтавкиНСП = "0";
		Иначе 
			ЗначениеСтавкиНСП = "0";
			//ЗначениеСтавкиНСП = ?(ПлательщикНСП, 
			//					УчетНДС.ПолучитьСтавкуНСП(Шапка.Дата, Шапка.Организация, Шапка.СтавкаНСП), 
			//					Справочники.СтавкиНСП.ПустаяСсылка());
		КонецЕсли;
		
		ДанныеПечати.Вставить("СтавкаНДС", ЗначениеСтавкиНДС);
		ДанныеПечати.Вставить("СтавкаНСП", ЗначениеСтавкиНСП);
		ДанныеПечати.Вставить("НомерСтроки", 1);
		
		ДанныеПечати.Вставить("СтоимостьПоЛисту", 		 0);
		ДанныеПечати.Вставить("СуммаНДСПоЛисту", 		 0);
		ДанныеПечати.Вставить("СуммаНСППоЛисту", 		 0);
		ДанныеПечати.Вставить("ВсегоПоЛисту", 			 0);
		ДанныеПечати.Вставить("СтоимостьПоСчетуФактуре", 0);
		ДанныеПечати.Вставить("СуммаНДСПоСчетуФактуре",  0);
		ДанныеПечати.Вставить("СуммаНСППоСчетуФактуре",  0);
		ДанныеПечати.Вставить("ВсегоПоСчетуФактуре", 	 0);
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьШапка.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Вывести(ОбластьШапка);	
		
		ОбластьЗаголовокТекущегоЛиста 			= Макет.ПолучитьОбласть("ЗаголовокТекущегоЛиста");
		ОбластьЗаголовокЗаключительногоЛиста 	= Макет.ПолучитьОбласть("ЗаголовокЗаключительногоЛиста");
		ОбластьШапкаТаблицы 					= Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтрокаТаблицы 					= Макет.ПолучитьОбласть("СтрокаТаблицы");
		ОбластьИтогиПервогоЛиста 				= Макет.ПолучитьОбласть("ИтогиПервогоЛиста");
		ОбластьИтогиТекущегоЛиста 				= Макет.ПолучитьОбласть("ИтогиТекущегоЛиста");
		ОбластьИтогиПоСчетуФактуре 				= Макет.ПолучитьОбласть("ИтогиПоСчетуФактуре");
		ОбластьПодвал 							= Макет.ПолучитьОбласть("Подвал");
		
		Если НомерСФ = "009" ИЛИ НомерСФ = "010" Тогда
			ОбластьПодвалПервыйЛист = Макет.ПолучитьОбласть("ПодвалПервыйЛист");
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		ДанныеКодТовара = Новый Структура();
		ДанныеКодТовара.Вставить("КодТовара1", "");
		ДанныеКодТовара.Вставить("КодТовара2", "");
		ДанныеКодТовара.Вставить("КодТовара3", "");
		ДанныеКодТовара.Вставить("КодТовара4", "");
		ДанныеКодТовара.Вставить("КодТовара5", "");
		ДанныеКодТовара.Вставить("КодТовара6", "");
		ДанныеКодТовара.Вставить("КодТовара7", "");
		ДанныеКодТовара.Вставить("КодТовара8", "");
		ДанныеКодТовара.Вставить("КодТовара9", "");
		ДанныеКодТовара.Вставить("КодТовара10", "");
		
		// Номер листа 2, потому что на первом листе печатается титульная страница и указывается общее число листов.
		НомерЛиста = 2;
		
		МассивОбластей = Новый Массив();
		МассивОбластей.Добавить(ОбластьИтогиПервогоЛиста);
		
		Если НомерСФ = "009" ИЛИ НомерСФ = "010" Тогда
			МассивОбластей.Добавить(ОбластьПодвалПервыйЛист);
		Иначе	
			МассивОбластей.Добавить(ОбластьПодвал);	
		КонецЕсли;
		
		Если НомерСФ = "007" ИЛИ НомерСФ = "009" Тогда
			ИменаТабличныхЧастей = Новый Массив();
			ИменаТабличныхЧастей.Добавить("Товары");
			ИменаТабличныхЧастей.Добавить("ОС");
			
			Для Каждого ИмяТабличнойЧасти Из ИменаТабличныхЧастей Цикл
				
				Если ИмяТабличнойЧасти = "Товары" Тогда
					ДанныеПечати.СтавкаНСП = ЗначениеСтавкиНСП;
				КонецЕсли;	
					
				Выборка = Шапка[ИмяТабличнойЧасти].Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					ОбластьСтрокаТаблицы.Параметры.Заполнить(ДанныеПечати);
					ОбластьСтрокаТаблицы.Параметры.Заполнить(Выборка);
					
					Если ЗначениеЗаполнено(Выборка.КодТовара) Тогда
						ДанныеКодТовара.КодТовара1 	= Сред(Выборка.КодТовара,1,1);
						ДанныеКодТовара.КодТовара2 	= Сред(Выборка.КодТовара,2,1);
						ДанныеКодТовара.КодТовара3 	= Сред(Выборка.КодТовара,3,1);
						ДанныеКодТовара.КодТовара4 	= Сред(Выборка.КодТовара,4,1);
						ДанныеКодТовара.КодТовара5 	= Сред(Выборка.КодТовара,5,1);
						ДанныеКодТовара.КодТовара6 	= Сред(Выборка.КодТовара,6,1);
						ДанныеКодТовара.КодТовара7 	= Сред(Выборка.КодТовара,7,1);
						ДанныеКодТовара.КодТовара8 	= Сред(Выборка.КодТовара,8,1);
						ДанныеКодТовара.КодТовара9 	= Сред(Выборка.КодТовара,9,1);
						ДанныеКодТовара.КодТовара10 = Сред(Выборка.КодТовара,10,1);
					Иначе	
						ДанныеКодТовара.КодТовара1 	= "";
						ДанныеКодТовара.КодТовара2 	= "";
						ДанныеКодТовара.КодТовара3 	= "";
						ДанныеКодТовара.КодТовара4 	= "";
						ДанныеКодТовара.КодТовара5 	= "";
						ДанныеКодТовара.КодТовара6 	= "";
						ДанныеКодТовара.КодТовара7 	= "";
						ДанныеКодТовара.КодТовара8 	= "";
						ДанныеКодТовара.КодТовара9 	= "";
						ДанныеКодТовара.КодТовара10 = "";
					КонецЕсли;
					
					ОбластьСтрокаТаблицы.Параметры.Заполнить(ДанныеКодТовара);
					
					МассивОбластей.Добавить(ОбластьСтрокаТаблицы);
					
					Если ТабличныйДокумент.ПроверитьВывод(МассивОбластей) Тогда			
						ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
						
						ДанныеПечати.СтоимостьПоЛисту 			= ДанныеПечати.СтоимостьПоЛисту + Выборка.Стоимость;
						ДанныеПечати.СуммаНДСПоЛисту 			= ДанныеПечати.СуммаНДСПоЛисту + Выборка.СуммаНДС;
						ДанныеПечати.СуммаНСППоЛисту 			= ДанныеПечати.СуммаНСППоЛисту + Выборка.СуммаНСП;
						ДанныеПечати.ВсегоПоЛисту 				= ДанныеПечати.ВсегоПоЛисту + Выборка.Всего;
						ДанныеПечати.СтоимостьПоСчетуФактуре 	= ДанныеПечати.СтоимостьПоСчетуФактуре + Выборка.Стоимость;
						ДанныеПечати.СуммаНДСПоСчетуФактуре 	= ДанныеПечати.СуммаНДСПоСчетуФактуре + Выборка.СуммаНДС;
						ДанныеПечати.СуммаНСППоСчетуФактуре 	= ДанныеПечати.СуммаНСППоСчетуФактуре + Выборка.СуммаНСП;
						ДанныеПечати.ВсегоПоСчетуФактуре 		= ДанныеПечати.ВсегоПоСчетуФактуре + Выборка.Всего;
						
						МассивОбластей.Удалить(МассивОбластей.Количество() - 1);
						
					Иначе	
						// Заканчивается лист
						// Нумерация листов начинается с 2, поэтому 2 лист это первый лист после титульного
						Если НомерЛиста = 2 Тогда
							ОбластьИтогиПервогоЛиста.Параметры.Заполнить(ДанныеПечати);
							ТабличныйДокумент.Вывести(ОбластьИтогиПервогоЛиста);
							
							Если НомерСФ = "009" Тогда
								ОбластьПодвалПервыйЛист.Параметры.Заполнить(ДанныеПечати);
								ТабличныйДокумент.Вывести(ОбластьПодвалПервыйЛист);
							Иначе
								ОбластьПодвал.Параметры.Заполнить(ДанныеПечати);
								ТабличныйДокумент.Вывести(ОбластьПодвал);
							КонецЕсли;
						Иначе
							ОбластьИтогиТекущегоЛиста.Параметры.Заполнить(ДанныеПечати);
							ТабличныйДокумент.Вывести(ОбластьИтогиТекущегоЛиста);
							
							ОбластьПодвал.Параметры.Заполнить(ДанныеПечати);
							ТабличныйДокумент.Вывести(ОбластьПодвал);
						КонецЕсли;	
						
						ДанныеПечати.СтоимостьПоЛисту 			= 0;
						ДанныеПечати.СуммаНДСПоЛисту 			= 0;
						ДанныеПечати.СуммаНСППоЛисту 			= 0;
						ДанныеПечати.ВсегоПоЛисту 				= 0;
						ДанныеПечати.СтоимостьПоСчетуФактуре 	= ДанныеПечати.СтоимостьПоСчетуФактуре + Выборка.Стоимость;
						ДанныеПечати.СуммаНДСПоСчетуФактуре 	= ДанныеПечати.СуммаНДСПоСчетуФактуре + Выборка.СуммаНДС;
						ДанныеПечати.СуммаНСППоСчетуФактуре 	= ДанныеПечати.СуммаНСППоСчетуФактуре + Выборка.СуммаНСП;
						ДанныеПечати.ВсегоПоСчетуФактуре 		= ДанныеПечати.ВсегоПоСчетуФактуре + Выборка.Всего;
						
						// Начинается новый лист
						НомерЛистаСтрокой = Формат(НомерЛиста, "ЧГ=0");
						
						Если НомерЛиста < 10 Тогда
							ДанныеПечати.Лист1 = "";
							ДанныеПечати.Лист2 = "";
							ДанныеПечати.Лист3 = НомерЛистаСтрокой;
						ИначеЕсли НомерЛиста < 100 Тогда
							ДанныеПечати.Лист1 = "";
							ДанныеПечати.Лист2 = Сред(НомерЛистаСтрокой, 1, 1);
							ДанныеПечати.Лист3 = Сред(НомерЛистаСтрокой, 2, 1);
						Иначе
							ДанныеПечати.Лист1 = Сред(НомерЛистаСтрокой, 1, 1);
							ДанныеПечати.Лист2 = Сред(НомерЛистаСтрокой, 2, 1);
							ДанныеПечати.Лист3 = Сред(НомерЛистаСтрокой, 3, 1);
						КонецЕсли;
						
						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						
						Если НомерЛиста = КоличествоЛистов Тогда
							ОбластьЗаголовокЗаключительногоЛиста.Параметры.Заполнить(ДанныеПечати);
							ТабличныйДокумент.Вывести(ОбластьЗаголовокЗаключительногоЛиста);
						Иначе	
							ОбластьЗаголовокТекущегоЛиста.Параметры.Заполнить(ДанныеПечати);
							ТабличныйДокумент.Вывести(ОбластьЗаголовокТекущегоЛиста);
						КонецЕсли;
						
						ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
						ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
						
						МассивОбластей.Удалить(МассивОбластей.Количество() - 1);
						
						Если НомерСФ = "009" Тогда
							МассивОбластей.Удалить(МассивОбластей.Количество() - 1);	
							МассивОбластей.Добавить(ОбластьПодвал);	
						КонецЕсли;
						
						НомерЛиста = НомерЛиста + 1;
					КонецЕсли;
					
					ДанныеПечати.НомерСтроки = ДанныеПечати.НомерСтроки + 1;
				КонецЦикла;
			КонецЦикла;
			
		Иначе	
			ВыборкаУслуги = Шапка.Услуги.Выбрать();
			
			Пока ВыборкаУслуги.Следующий() Цикл
				
				ОбластьСтрокаТаблицы.Параметры.Заполнить(ДанныеПечати);
				ОбластьСтрокаТаблицы.Параметры.Заполнить(ВыборкаУслуги);
				
				Если ЗначениеЗаполнено(ВыборкаУслуги.КодТовара) Тогда
					ДанныеКодТовара.КодТовара1 	= Сред(ВыборкаУслуги.КодТовара,1,1);
					ДанныеКодТовара.КодТовара2 	= Сред(ВыборкаУслуги.КодТовара,2,1);
					ДанныеКодТовара.КодТовара3 	= Сред(ВыборкаУслуги.КодТовара,4,1);
					ДанныеКодТовара.КодТовара4 	= Сред(ВыборкаУслуги.КодТовара,5,1);
				Иначе
					ДанныеКодТовара.КодТовара1 	= "";
					ДанныеКодТовара.КодТовара2 	= "";
					ДанныеКодТовара.КодТовара3 	= "";
					ДанныеКодТовара.КодТовара4 	= "";
				КонецЕсли;
				
				ОбластьСтрокаТаблицы.Параметры.Заполнить(ДанныеКодТовара);
				
				МассивОбластей.Добавить(ОбластьСтрокаТаблицы);
				
				Если ТабличныйДокумент.ПроверитьВывод(МассивОбластей) Тогда			
					ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
					
					ДанныеПечати.СтоимостьПоЛисту 			= ДанныеПечати.СтоимостьПоЛисту + ВыборкаУслуги.Стоимость;
					ДанныеПечати.СуммаНДСПоЛисту 			= ДанныеПечати.СуммаНДСПоЛисту + ВыборкаУслуги.СуммаНДС;
					ДанныеПечати.СуммаНСППоЛисту 			= ДанныеПечати.СуммаНСППоЛисту + ВыборкаУслуги.СуммаНСП;
					ДанныеПечати.ВсегоПоЛисту 				= ДанныеПечати.ВсегоПоЛисту + ВыборкаУслуги.Всего;
					ДанныеПечати.СтоимостьПоСчетуФактуре 	= ДанныеПечати.СтоимостьПоСчетуФактуре + ВыборкаУслуги.Стоимость;
					ДанныеПечати.СуммаНДСПоСчетуФактуре 	= ДанныеПечати.СуммаНДСПоСчетуФактуре + ВыборкаУслуги.СуммаНДС;
					ДанныеПечати.СуммаНСППоСчетуФактуре 	= ДанныеПечати.СуммаНСППоСчетуФактуре + ВыборкаУслуги.СуммаНСП;
					ДанныеПечати.ВсегоПоСчетуФактуре 		= ДанныеПечати.ВсегоПоСчетуФактуре + ВыборкаУслуги.Всего;
					
					МассивОбластей.Удалить(МассивОбластей.Количество() - 1);
					
				Иначе	
					// Заканчивается лист
					// Нумерация листов начинается с 2, поэтому 2 лист это первый лист после титульного
					Если НомерЛиста = 2 Тогда
						ОбластьИтогиПервогоЛиста.Параметры.Заполнить(ДанныеПечати);
						ТабличныйДокумент.Вывести(ОбластьИтогиПервогоЛиста);
						
						Если НомерСФ = "010" Тогда
							ОбластьПодвалПервыйЛист.Параметры.Заполнить(ДанныеПечати);
							ТабличныйДокумент.Вывести(ОбластьПодвалПервыйЛист);
						Иначе
							ОбластьПодвал.Параметры.Заполнить(ДанныеПечати);
							ТабличныйДокумент.Вывести(ОбластьПодвал);
						КонецЕсли;
					Иначе
						ОбластьИтогиТекущегоЛиста.Параметры.Заполнить(ДанныеПечати);
						ТабличныйДокумент.Вывести(ОбластьИтогиТекущегоЛиста);
						
						ОбластьПодвал.Параметры.Заполнить(ДанныеПечати);
						ТабличныйДокумент.Вывести(ОбластьПодвал);
					КонецЕсли;
					
					ДанныеПечати.СтоимостьПоЛисту 			= 0;
					ДанныеПечати.СуммаНДСПоЛисту 			= 0;
					ДанныеПечати.СуммаНСППоЛисту 			= 0;
					ДанныеПечати.ВсегоПоЛисту 				= 0;
					ДанныеПечати.СтоимостьПоСчетуФактуре 	= ДанныеПечати.СтоимостьПоСчетуФактуре + ВыборкаУслуги.Стоимость;
					ДанныеПечати.СуммаНДСПоСчетуФактуре 	= ДанныеПечати.СуммаНДСПоСчетуФактуре + ВыборкаУслуги.СуммаНДС;
					ДанныеПечати.СуммаНСППоСчетуФактуре 	= ДанныеПечати.СуммаНСППоСчетуФактуре + ВыборкаУслуги.СуммаНСП;
					ДанныеПечати.ВсегоПоСчетуФактуре 		= ДанныеПечати.ВсегоПоСчетуФактуре + ВыборкаУслуги.Всего;
					
					// Начинается новый лист
					НомерЛистаСтрокой = Формат(НомерЛиста, "ЧГ=0");
					
					Если НомерЛиста < 10 Тогда
						ДанныеПечати.Лист1 = "";
						ДанныеПечати.Лист2 = "";
						ДанныеПечати.Лист3 = НомерЛистаСтрокой;
					ИначеЕсли НомерЛиста < 100 Тогда
						ДанныеПечати.Лист1 = "";
						ДанныеПечати.Лист2 = Сред(НомерЛистаСтрокой, 1, 1);
						ДанныеПечати.Лист3 = Сред(НомерЛистаСтрокой, 2, 1);
					Иначе
						ДанныеПечати.Лист1 = Сред(НомерЛистаСтрокой, 1, 1);
						ДанныеПечати.Лист2 = Сред(НомерЛистаСтрокой, 2, 1);
						ДанныеПечати.Лист3 = Сред(НомерЛистаСтрокой, 3, 1);
					КонецЕсли;
					
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					
					Если НомерЛиста = КоличествоЛистов Тогда
						ОбластьЗаголовокЗаключительногоЛиста.Параметры.Заполнить(ДанныеПечати);
						ТабличныйДокумент.Вывести(ОбластьЗаголовокЗаключительногоЛиста);
					Иначе	
						ОбластьЗаголовокТекущегоЛиста.Параметры.Заполнить(ДанныеПечати);
						ТабличныйДокумент.Вывести(ОбластьЗаголовокТекущегоЛиста);
					КонецЕсли;
					
					ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
					ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
					
					МассивОбластей.Удалить(МассивОбластей.Количество() - 1);
					
					Если НомерСФ = "010" Тогда
						МассивОбластей.Удалить(МассивОбластей.Количество() - 1);	
						МассивОбластей.Добавить(ОбластьПодвал);	
					КонецЕсли;
					
					НомерЛиста = НомерЛиста + 1;
				КонецЕсли;
				
				ДанныеПечати.НомерСтроки = ДанныеПечати.НомерСтроки + 1;
			КонецЦикла;
		КонецЕсли;	
				
		ОбластьИтогиПоСчетуФактуре.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Вывести(ОбластьИтогиПоСчетуФактуре);
		
		Если (НомерСФ = "009" ИЛИ НомерСФ = "010") И НомерЛиста = 2 Тогда
			ОбластьПодвалПервыйЛист.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластьПодвалПервыйЛист);
		Иначе	
			ОбластьПодвал.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластьПодвал);
		КонецЕсли;	
			
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;	
КонецФункции

// Функция формирует табличный документ с печатной формой Счет-фактура
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьСчетФактураБезНДС(МассивОбъектов, ОбъектыПечати)
	Ошибки = Неопределено;

	ТабличныйДокумент = Новый ТабличныйДокумент;	
	ТабличныйДокумент.КлючПараметровПечати = "РеализацияУслугПоПереработке_СчетФактураБезНДС";

	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьСчетФактура.ПФ_MXL_СчетФактураБезНДС");
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	РеализацияУслугПоПереработке.Ссылка КАК Ссылка,
		|	РеализацияУслугПоПереработке.Номер КАК Номер,
		|	РеализацияУслугПоПереработке.Дата КАК Дата,
		|	РеализацияУслугПоПереработке.ВалютаДокумента КАК ВалютаДокумента,
		|	РеализацияУслугПоПереработке.Курс КАК Курс,
		|	РеализацияУслугПоПереработке.Кратность КАК Кратность,
		|	РеализацияУслугПоПереработке.ПечатьВРегламентированнойВалюте КАК ПечатьВРегламентированнойВалюте,
		|	РеализацияУслугПоПереработке.Организация КАК Организация,
		|	РеализацияУслугПоПереработке.Организация.НаименованиеПолное КАК ОрганизацияПредставление,
		|	РеализацияУслугПоПереработке.Организация.ФайлЛоготип КАК ФайлЛоготип,
		|	ВЫБОР
		|		КОГДА &ПечататьСчетаФактурыСГоловнымКонтрагентом
		|				И НЕ РеализацияУслугПоПереработке.Контрагент.ГоловнойКонтрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА РеализацияУслугПоПереработке.Контрагент.ГоловнойКонтрагент.НаименованиеПолное
		|		ИНАЧЕ РеализацияУслугПоПереработке.Контрагент.НаименованиеПолное
		|	КОНЕЦ КАК КонтрагентПредставление,
		|	РеализацияУслугПоПереработке.Организация.ИНН КАК ИНН,
		|	ЕСТЬNULL(РеализацияУслугПоПереработке.Организация.ОсновнойБанковскийСчет.НомерСчета, """") КАК НомерСчета,
		|	ЕСТЬNULL(РеализацияУслугПоПереработке.Организация.ОсновнойБанковскийСчет.Банк.Наименование, """") КАК БанкПредставление,
		|	ЕСТЬNULL(РеализацияУслугПоПереработке.Организация.ОсновнойБанковскийСчет.Банк.Код, """") КАК БИКБанка,
		|	РеализацияУслугПоПереработке.СтавкаНДС КАК СтавкаНДС,
		//|	РеализацияУслугПоПереработке.СтавкаНСП КАК СтавкаНСП,
		|	РеализацияУслугПоПереработке.Услуги.(
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура КАК Номенклатура,
		|		ВЫБОР
		|			КОГДА (ВЫРАЗИТЬ(РеализацияУслугПоПереработке.Услуги.Содержание КАК СТРОКА(100))) = """"
		|				ТОГДА РеализацияУслугПоПереработке.Услуги.Номенклатура.НаименованиеПолное
		|			ИНАЧЕ РеализацияУслугПоПереработке.Услуги.Содержание
		|		КОНЕЦ КАК НоменклатураПредставление,
		|		Количество КАК Количество,
		|		Цена КАК Цена,
		|		СуммаДохода КАК Сумма,
		|		СуммаНДС КАК СуммаНДС,
		|		СуммаНСП КАК СуммаНСП,
		|		Всего КАК Всего,
		|		СуммаДоходаВВалютеРеглУчета КАК СуммаВВалютеРеглУчета,
		|		СуммаНДСВВалютеРеглУчета КАК СуммаНДСВВалютеРеглУчета,
		|		СуммаНСПВВалютеРеглУчета КАК СуммаНСПВВалютеРеглУчета,
		|		ВсегоВВалютеРеглУчета КАК ВсегоВВалютеРеглУчета,
		|		0 КАК СуммаСкидки,
		|		0 КАК СуммаСкидкиВВалютеРеглУчета
		|	) КАК Услуги
		|ИЗ
		|	Документ.РеализацияУслугПоПереработке КАК РеализацияУслугПоПереработке
		|ГДЕ
		|	РеализацияУслугПоПереработке.Ссылка В(&СписокДокументов)";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПечататьСчетаФактурыСГоловнымКонтрагентом", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьЗначениеКонстанты("ПечататьСчетаФактурыСГоловнымКонтрагентом"));
	Запрос.УстановитьПараметр("СписокДокументов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	Пока Шапка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ДанныеПечати = Новый Структура;
		
		ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, НСтр("ru = 'Счет-фактура'"));
		ДанныеПечати.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		ДанныеПечати.Вставить("Дата", Шапка.Дата);
		ДанныеПечати.Вставить("ОрганизацияПредставление", Шапка.ОрганизацияПредставление);
		ДанныеПечати.Вставить("ФайлЛоготип", Шапка.ФайлЛоготип);
		ДанныеПечати.Вставить("ПолучательПредставление", Шапка.КонтрагентПредставление);
		ДанныеПечати.Вставить("Адрес", УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			Шапка.Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Шапка.Дата));
			
		ДанныеПечати.Вставить("ИНН", Шапка.ИНН);
		ДанныеПечати.Вставить("БанкПредставление", Шапка.БанкПредставление);
		ДанныеПечати.Вставить("РасчетныйСчетПредставление", Шапка.НомерСчета + " " + Шапка.БанкПредставление);
		ДанныеПечати.Вставить("БИКБанка", Шапка.БИКБанка);
		
		ДанныеПечати.Вставить("ТипПоставки", НСтр("ru = 'Внутренняя'"));
		
		ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(Шапка.Дата, Шапка.Организация);
		ПлательщикНСП = ДанныеУчетнойПолитики.ПлательщикНСП;
		
		ДанныеПечати.Вставить("ЗначениеСтавкиНДС", УчетНДС.ПолучитьСтавкуНДС(Шапка.Дата, Шапка.СтавкаНДС));
		ДанныеПечати.Вставить("ЗначениеСтавкиНСП", 0);
		//ДанныеПечати.Вставить("ЗначениеСтавкиНСП", ?(ПлательщикНСП,
		//						УчетНДС.ПолучитьСтавкуНСП(Шапка.Дата, Шапка.Организация, Шапка.СтавкаНСП), 0));
		
		// Подписи.
		РасшифровкаПодписиРуководителя = "";
		РасшифровкаПодписиГлавногоБухгалтера = "";
		ОтветственныеЛица = БухгалтерскийУчетСервер.ОтветственныеЛицаОрганизацийРуководители(Шапка.Организация, Шапка.Дата);
		БухгалтерскийУчетСервер.ФамилияИнициалыПоНаименованию(РасшифровкаПодписиРуководителя, ОтветственныеЛица.Руководитель);
		БухгалтерскийУчетСервер.ФамилияИнициалыПоНаименованию(РасшифровкаПодписиГлавногоБухгалтера, ОтветственныеЛица.ГлавныйБухгалтер);
		
		ДанныеПечати.Вставить("РасшифровкаПодписиРуководителя", РасшифровкаПодписиРуководителя);
		ДанныеПечати.Вставить("РасшифровкаПодписиГлавногоБухгалтера", РасшифровкаПодписиГлавногоБухгалтера);
		
		// Области.
		МассивОбластейМакета = Новый Массив;
		МассивОбластейМакета.Добавить("Заголовок");
		МассивОбластейМакета.Добавить("ШапкаТаблицы");
		МассивОбластейМакета.Добавить("СтрокаТаблицы");
		МассивОбластейМакета.Добавить("Подвал");
		МассивОбластейМакета.Добавить("СуммаПрописью");
		МассивОбластейМакета.Добавить("ПодписиСФаксимиле");
		
		// Подготовка перед заполнением.
		МассивВыборок = Новый Массив();
		МассивВыборок.Добавить(Шапка.Услуги.Выбрать());
		
		Всего = 0;
		Сумма = 0;
		ВсегоНДС = 0;
		ВсегоНСП = 0;
		КоличествоНаименований = 0;
		
		Для Каждого ИмяОбласти Из МассивОбластейМакета Цикл
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
			
			Если ИмяОбласти = "ЗаголовокСЛоготипом" Тогда
				Логотип = Новый Соответствие; // Ключ - имя картинки в области, Значение - имя реквизита
				Логотип.Вставить("Логотип", "ФайлЛоготип");
				ЗаполнитьЛоготипФаксимилеВОбластиМакета(ОбластьМакета, ДанныеПечати, Логотип, Ошибки);
			КонецЕсли;	

			Если ИмяОбласти <> "СтрокаТаблицы" Тогда
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			ИначеЕсли ИмяОбласти = "СтрокаТаблицы" Тогда 
				
				Индекс = 0;
				
				Для Каждого Выборка Из МассивВыборок Цикл
					
					Пока Выборка.Следующий() Цикл
						СтруктураСтроки = Новый Структура();
						
						Если Шапка.ПечатьВРегламентированнойВалюте Тогда
							СтруктураСтроки.Вставить("Цена", 	 Выборка.Цена * Шапка.Курс / Шапка.Кратность);
							СтруктураСтроки.Вставить("Сумма", 	 Выборка.СуммаВВалютеРеглУчета);
							СтруктураСтроки.Вставить("СуммаНДС", Выборка.СуммаНДСВВалютеРеглУчета);
							СтруктураСтроки.Вставить("СуммаНСП", Выборка.СуммаНСПВВалютеРеглУчета);
							СтруктураСтроки.Вставить("Всего", 	 Выборка.ВсегоВВалютеРеглУчета);
							
							Всего = Всего + СтруктураСтроки.Всего;
							Сумма = Сумма + СтруктураСтроки.Сумма;
							ВсегоНДС = ВсегоНДС + СтруктураСтроки.СуммаНДС;
							ВсегоНСП = ВсегоНСП + СтруктураСтроки.СуммаНСП;
							КоличествоНаименований = КоличествоНаименований + 1;
							
						Иначе
							Всего = Всего + Выборка.Всего;
							Сумма = Сумма + Выборка.Сумма;
							ВсегоНДС = ВсегоНДС + Выборка.СуммаНДС;
							ВсегоНСП = ВсегоНСП + Выборка.СуммаНСП;
							КоличествоНаименований = КоличествоНаименований + 1;
						КонецЕсли;
						
						ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
						ОбластьМакета.Параметры.Заполнить(Выборка);
						ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
						
						ТабличныйДокумент.Вывести(ОбластьМакета);
					КонецЦикла;
					
					Индекс = Индекс + 1;
				КонецЦикла;
				
				// Подвал.
				ДанныеПечати.Вставить("Всего", Всего);
				ДанныеПечати.Вставить("Сумма", Сумма);
				ДанныеПечати.Вставить("ВсегоНДС", ВсегоНДС);
				ДанныеПечати.Вставить("ВсегоНСП", ВсегоНСП);
				ДанныеПечати.Вставить("ИтоговаяСтрока", 
					СтрШаблон(НСтр("ru = 'Всего наименований %1, на сумму %2'"), 
					Формат(КоличествоНаименований, "ЧН=0; ЧГ=0"), Формат(Всего, "ЧЦ=15; ЧДЦ=2")));
					
				Если Шапка.ПечатьВРегламентированнойВалюте Тогда
					ДанныеПечати.Вставить("СуммаПрописью", БухгалтерскийУчетСервер.СформироватьСуммуПрописью(Всего, ВалютаРегламентированногоУчета));
				Иначе
					ДанныеПечати.Вставить("СуммаПрописью", БухгалтерскийУчетСервер.СформироватьСуммуПрописью(Всего, Шапка.ВалютаДокумента));
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
 			
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
		
КонецФункции

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РеализацияУслугПоПереработке") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РеализацияУслугПоПереработке", НСтр("ru = 'Реализация услуг по переработке'"),
			ПечатьАктаОбОказанииУслуг(МассивОбъектов, ОбъектыПечати, ПараметрыПечати), , "Документ.РеализацияУслугПоПереработке.ПФ_MXL_Акт");
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОтчетОПродукции") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ОтчетОПродукции", НСтр("ru = 'Отчет о продукции'"), 
			ПечатьОтчета("Услуги", МассивОбъектов, ОбъектыПечати, ПараметрыПечати), , "Документ.РеализацияУслугПоПереработке.ПФ_MXL_Акт");
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОтчетОМатериалах") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ОтчетОМатериалах", НСтр("ru = 'Отчет о материалах'"),
			ПечатьОтчета("МатериалыЗаказчика", МассивОбъектов, ОбъектыПечати, ПараметрыПечати), , "Документ.РеализацияУслугПоПереработке.ПФ_MXL_Акт");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактура007") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"СчетФактура007", НСтр("ru = 'Счет-фактура (007)'"), ПечатьСчетФактура007_008_009_010(МассивОбъектов, ОбъектыПечати, "007"));
	КонецЕсли;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактура008") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"СчетФактура008", НСтр("ru = 'Счет-фактура (008)'"), ПечатьСчетФактура007_008_009_010(МассивОбъектов, ОбъектыПечати, "008"));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактура009") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"СчетФактура009", НСтр("ru = 'Счет-фактура (009)'"), ПечатьСчетФактура007_008_009_010(МассивОбъектов, ОбъектыПечати, "009"));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактура010") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"СчетФактура010", НСтр("ru = 'Счет-фактура (010)'"), ПечатьСчетФактура007_008_009_010(МассивОбъектов, ОбъектыПечати, "010"));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактураБезНДС") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"СчетФактураБезНДС", НСтр("ru = 'Счет-фактура без бланка НДС'"), ПечатьСчетФактураБезНДС(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Акт об оказании услуг
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "РеализацияУслугПоПереработке";
	КомандаПечати.Представление = НСтр("ru = 'Акт об оказании услуг'");
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 1;

	// Отчет о продукции
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ОтчетОПродукции";
	КомандаПечати.Представление = НСтр("ru = 'Отчет о продукции'");
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 1;
	
	// Отчет о материалах
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ОтчетОМатериалах";
	КомандаПечати.Представление = НСтр("ru = 'Отчет о материалах'");
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 1;
	
	// Счет-фактура
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактура007";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура (007)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 4;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактура008";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура (008)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 5;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактура009";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура (009)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 6;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактура010";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура (010)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 7;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактураБезНДС";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура без бланка НДС'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 9;
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "РеестрРеализацияУслугПоПереработке";
	КомандаПечати.Представление  = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Реестр документов ""Реализация товаров и услуг""'");
	КомандаПечати.Обработчик     = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает заголовок документа для печатной формы.
//
// Параметры:
//  Шапка - любая структура с полями:
//           Номер         - Строка или Число - номер документа;
//           Дата          - Дата - дата документа;
//           Представление - Строка - (необязательный) платформенное представление ссылки на документ.
//                                    Если параметр НазваниеДокумента не задан, то название документа будет вычисляться
//                                    из этого параметра.
//  НазваниеДокумента - Строка - название документа (например, "Счет на оплату").
//
// Возвращаемое значение:
//  Строка - заголовок документа.
//
Функция СформироватьЗаголовокДокумента(Шапка, Знач НазваниеДокумента = "")
	
	ДанныеДокумента = Новый Структура("Номер,Дата,Представление");
	ЗаполнитьЗначенияСвойств(ДанныеДокумента, Шапка);
	
	// Если название документа не передано, получим название по представлению документа.
	Если ПустаяСтрока(НазваниеДокумента) И ЗначениеЗаполнено(ДанныеДокумента.Представление) Тогда
		ПоложениеНомера = СтрНайти(ДанныеДокумента.Представление, ДанныеДокумента.Номер);
		Если ПоложениеНомера > 0 Тогда
			НазваниеДокумента = СокрЛП(Лев(ДанныеДокумента.Представление, ПоложениеНомера - 1));
		КонецЕсли;
	КонецЕсли;

	НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеДокумента.Номер);
	Возврат СтрШаблон(НСтр("ru = '%1 № %2 от %3'"),
		НазваниеДокумента, НомерНаПечать, Формат(ДанныеДокумента.Дата, "ДЛФ=DD"));
	
КонецФункции

Процедура ЗаполнитьЛоготипФаксимилеВОбластиМакета(ОбластьМакета, ДанныеОбъекта, ПодписиИФаксимиле, Ошибки)
	
	Для каждого ЭлементСоответствия Из ПодписиИФаксимиле Цикл
		
		ПлашкаПодписи = ПолучитьПлашкуПодписиБезопасно(ОбластьМакета, ЭлементСоответствия.Ключ, , Ошибки);
		Если ПлашкаПодписи = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеОбъекта[ЭлементСоответствия.Значение]) Тогда
			
			ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(ДанныеОбъекта[ЭлементСоответствия.Значение]);
			Если ЗначениеЗаполнено(ДвоичныеДанные) Тогда
				
				ПлашкаПодписи.Картинка = Новый Картинка(ДвоичныеДанные);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПлашкуПодписиБезопасно(ОбластьМакета, ИмяПлашки, ПредставлениеПодписи, Ошибки)
	
	ПлашкаПодписи = ОбластьМакета.Области.Найти(ИмяПлашки);
	Если ПлашкаПодписи = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru ='ВНИМАНИЕ! Нет места для картинки %1. Возможно используется пользовательский макет.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ?(ПустаяСтрока(ПредставлениеПодписи), ИмяПлашки, ПредставлениеПодписи));
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстСообщения, Неопределено);
		
	КонецЕсли;
	
	ПлашкаПодписи.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
	
	Возврат ПлашкаПодписи;
	
КонецФункции

Функция КоличествоЛистовСчетФатуры(Макет, Шапка, НомерСФ)

	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если НомерСФ = "007" ИЛИ НомерСФ = "009" Тогда
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;	
	Иначе
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	КонецЕсли;
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	ОбластьЗаголовокТекущегоЛиста 	= Макет.ПолучитьОбласть("ЗаголовокТекущегоЛиста");
	ОбластьШапкаТаблицы 			= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьСтрокаТаблицы 			= Макет.ПолучитьОбласть("СтрокаТаблицы");
	ОбластьИтогиТекущегоЛиста 		= Макет.ПолучитьОбласть("ИтогиТекущегоЛиста");
	ОбластьПодвал 					= Макет.ПолучитьОбласть("Подвал");

	Если НомерСФ = "009" ИЛИ НомерСФ = "010" Тогда
		ОбластьПодвалПервыйЛист = Макет.ПолучитьОбласть("ПодвалПервыйЛист");
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
	
	МассивОбластей = Новый Массив();
	МассивОбластей.Добавить(ОбластьИтогиТекущегоЛиста);
	
	Если НомерСФ = "009" ИЛИ НомерСФ = "010" Тогда
		МассивОбластей.Добавить(ОбластьПодвалПервыйЛист);
	Иначе
		МассивОбластей.Добавить(ОбластьПодвал);	
	КонецЕсли;
	
	КоличествоЛистов = 1;
	
	ИменаТабличныхЧастей = Новый Массив();
	
	Если НомерСФ = "007" ИЛИ НомерСФ = "009" Тогда	
		ИменаТабличныхЧастей.Добавить("Товары");
	Иначе
		ИменаТабличныхЧастей.Добавить("Услуги");
	КонецЕсли;	
	
	Для Каждого ИмяТабличнойЧасти Из ИменаТабличныхЧастей Цикл
		Выборка = Шапка[ИмяТабличнойЧасти].Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ОбластьСтрокаТаблицы.Параметры.Заполнить(Выборка);
			
			МассивОбластей.Добавить(ОбластьСтрокаТаблицы);
			
			Если ТабличныйДокумент.ПроверитьВывод(МассивОбластей) Тогда			
				ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
				МассивОбластей.Удалить(МассивОбластей.Количество() - 1);
			Иначе	
				// Заканчивается лист
				ТабличныйДокумент.Вывести(ОбластьИтогиТекущегоЛиста);
				ТабличныйДокумент.Вывести(ОбластьПодвал);
				
				// Начинается новый лист
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();	
				ТабличныйДокумент.Вывести(ОбластьЗаголовокТекущегоЛиста);
				ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
				ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
				
				МассивОбластей.Удалить(МассивОбластей.Количество() - 1);
		
				Если (НомерСФ = "009" ИЛИ НомерСФ = "010") И КоличествоЛистов = 1 Тогда
					МассивОбластей.Удалить(МассивОбластей.Количество() - 1);
					МассивОбластей.Добавить(ОбластьПодвал);				
				КонецЕсли;	
				
				КоличествоЛистов = КоличествоЛистов + 1;
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;	
		
	Возврат КоличествоЛистов;
КонецФункции

#КонецОбласти

#КонецЕсли