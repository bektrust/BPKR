#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ЭлементОтбора = СписокРасходныйКассовыйОрдер.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДокументОснование");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбора = СписокРасходныйКассовыйОрдер.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидОперации");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаПодотчетнику");
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	
	// РаботаСФормами
	РаботаСФормамиСервер.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом 
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ПодборСотрудникаПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор Тогда
		
		АдресЗапасовВХранилище = Параметр;
		ПолучитьРезультатПодбораИзХранилища(АдресЗапасовВХранилище, "Сотрудники");
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	
	УстановитьВидимостьДоступностьЭлементов();
	
	// РаботаСФормами
	РаботаСФормамиСервер.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Объект.Номер = "";
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ДатаНачала.
//
&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	Объект.КоличествоДней = КоличествоДней(Объект.ДатаОкончания, Объект.ДатаНачала);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ДатаОкончания.
//
&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	Объект.КоличествоДней = КоличествоДней(Объект.ДатаОкончания, Объект.ДатаНачала);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСотрудники

&НаКлиенте
Процедура СотрудникиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти = Элементы.Сотрудники.ТекущиеДанные;	
		СтрокаТабличнойЧасти.Валюта = ВалютаРегламентированногоУчета;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СотрудникиФизЛицо.
//
&НаКлиенте
Процедура СотрудникиФизЛицоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Сотрудники.ТекущиеДанные;	
	
	СтруктураСотрудник = СведенияОСотруднике(ДатаДокумента, Объект.Организация, СтрокаТабличнойЧасти.ФизЛицо);
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтруктураСотрудник);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СотрудникиСуточные.
//
&НаКлиенте
Процедура СотрудникиСуточныеПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Сотрудники.ТекущиеДанные;
	РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.КоличествоДней);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СотрудникиПроживание.
//
&НаКлиенте
Процедура СотрудникиПроживаниеПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Сотрудники.ТекущиеДанные;
	РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.КоличествоДней);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СотрудникиПроездные.
//
&НаКлиенте
Процедура СотрудникиПроездныеПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Сотрудники.ТекущиеДанные;
	РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.КоличествоДней);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьРасходныйКассовыйОрдер(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		Или Модифицированность Тогда 
		ТекстСообщения = НСтр("ru='Для формирования документов ""Расходный кассовый ордер"" необходимо записать документ.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросСформироватьДокументыРасходныйКассовыйОрдер", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Будут сформированы документы ""Расходный кассовый ордер"". Продолжить выполнение операции?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
КонецПроцедуры

&НаКлиенте
Процедура СформироватьАвансовыйОтчет(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		Или Модифицированность Тогда 
		ТекстСообщения = НСтр("ru='Для формирования документов ""Авансовый отчет"" необходимо записать документ.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросСформироватьАвансовыйОтчет", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Будут сформированы документы ""Авансовый отчет"". Продолжить выполнение операции?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);

КонецПроцедуры

&НаКлиенте
Асинх Процедура Заполнить(Команда)
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено подразделение. Заполнение документа отменено.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Подразделение",,Отказ)		
	КонецЕсли;

	Если Отказ Тогда 
		Возврат
	КонецЕсли;	
			
    Если Объект.Сотрудники.Количество() > 0 Тогда 
        ТекстВопроса = НСтр("ru = 'Табличная часть документа будет перезаполнена. Продолжить выполнение операции?'");
        Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
        
        Если Ответ = КодВозвратаДиалога.Нет Тогда
            Возврат;
        КонецЕсли;
    КонецЕсли;
    
    ЗаполнитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Рассчитать(Команда)
	Отказ = Ложь;

	Если Объект.Сотрудники.Количество() = 0  Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена табличная часть ""Сотрудники"". Расчет документа отменен.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Сотрудники",,Отказ);		
	КонецЕсли;

	Если Отказ Тогда 
		Возврат
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросРассчитать", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Табличная часть документа будет пересчитана. Продолжить выполнение операции?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
КонецПроцедуры

&НаКлиенте
Процедура ПодборСотрудников(Команда)
	СотрудникиКлиент.ОткрытьПодбор(ЭтаФорма, "Сотрудники");  
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОтветНаВопросРассчитать(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ТарифыКомандировочных = ПолучитьТарифыКомандировочных();
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Сотрудники Цикл 
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ТарифыКомандировочных, "Суточные, Проживание, Проездные, Валюта");
			РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.КоличествоДней);
		КонецЦикла;	
	КонецЕсли; 
КонецПроцедуры	

&НаКлиенте
Процедура ОтветНаВопросСформироватьДокументыРасходныйКассовыйОрдер(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СоздатьДокументыРасходныйКассовыйОрдерЗавершение();
	КонецЕсли; 
КонецПроцедуры	

&НаКлиенте
Процедура ОтветНаВопросСформироватьАвансовыйОтчет(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СоздатьДокументыАвансовыйОтчетЗавершение();
	КонецЕсли; 
КонецПроцедуры	

&НаКлиенте
Процедура ОтветНаВопросОчиститьТабличнуюЧастьСотрудники(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Подразделение = Объект.Подразделение;
		Объект.Сотрудники.Очистить();
	Иначе
		// Отмена изменения - возврат прежних значений
		Объект.Подразделение = Подразделение;
	КонецЕсли; 
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость и доступность элементов.
//
&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()
	СписокРасходныйКассовыйОрдер.Отбор.Элементы.Очистить();
	ЭлементОтбора = СписокРасходныйКассовыйОрдер.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДокументОснование");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбора = СписокРасходныйКассовыйОрдер.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидОперации");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаПодотчетнику");
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	СписокАвансовыйОтчет.Отбор.Элементы.Очистить();
	ЭлементОтбора = СписокАвансовыйОтчет.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДокументОснование");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;

КонецПроцедуры 

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, ДатаДокумента, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура - Установить пиктограмму комментария.
//
&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

// Функция - Количество дней
//
// Параметры:
//  Дата1	 - Дата	 - Окончание периода
//  Дата2	 - Дата	 - Начало периода
// 
// Возвращаемое значение:
//   КоличествоДней - Число
//
&НаСервере
Функция КоличествоДней(Дата1, Дата2)
	Если ЗначениеЗаполнено(Дата1)
		И ЗначениеЗаполнено(Дата2)
		И Дата1 >= Дата2 Тогда 	
		Возврат Окр((НачалоДня(Дата1) - НачалоДня(Дата2) + 86400) / 86400);
	Иначе 
		Возврат 0;
	КонецЕсли;	
КонецФункции

&НаСервереБезКонтекста
Функция СведенияОСотруднике(Дата, Организация, ФизЛицо)
	Возврат ПроведениеРасчетовПоЗарплатеСервер.СведенияОСотруднике(Дата, Организация, ФизЛицо)
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, КоличествоДней)
	СтрокаТабличнойЧасти.СуммаВсего = (КоличествоДней * СтрокаТабличнойЧасти.Суточные) + (СтрокаТабличнойЧасти.Проживание * (КоличествоДней - 1)) + СтрокаТабличнойЧасти.Проездные;
КонецПроцедуры 

&НаСервере
Функция ПолучитьТарифыКомандировочных()
	
	ТарифыКомандировочных = Новый Структура();
	ТарифыКомандировочных.Вставить("Валюта", 	 Неопределено);
	ТарифыКомандировочных.Вставить("Суточные", 	 0);
	ТарифыКомандировочных.Вставить("Проживание", 0);
	ТарифыКомандировочных.Вставить("Проездные",  0);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТарифыКомандировочныхСрезПоследних.Валюта КАК Валюта,
		|	ТарифыКомандировочныхСрезПоследних.СуммаСуточные КАК Суточные,
		|	ТарифыКомандировочныхСрезПоследних.СуммаПроживание КАК Проживание,
		|	ТарифыКомандировочныхСрезПоследних.СуммаПроездные КАК Проездные
		|ИЗ
		|	РегистрСведений.ТарифыКомандировочных.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И Страна = &Страна
		|				И &Город = Город) КАК ТарифыКомандировочныхСрезПоследних";
	Запрос.УстановитьПараметр("Период", ДатаДокумента);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Страна", Объект.Страна);
	Запрос.УстановитьПараметр("Город", Объект.Город);

	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда  
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		ЗаполнитьЗначенияСвойств(ТарифыКомандировочных, ВыборкаДетальныеЗаписи); 
	КонецЕсли;	
	
	Возврат ТарифыКомандировочных;
	
КонецФункции

// Процедура получает результат подбора из временного хранилища
//
&НаСервере
Процедура ПолучитьРезультатПодбораИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти)
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	МассивФизЛиц = Новый Массив;
	
	Для Каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		НайденныеСтроки = Объект[ИмяТабличнойЧасти].НайтиСтроки(Новый Структура("ФизЛицо", СтрокаЗагрузки.ФизЛицо));
		
		Если НайденныеСтроки.Количество() > 0 Тогда 
			Продолжить;
		КонецЕсли;	
		
		СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаЗагрузки);
		МассивФизЛиц.Добавить(СтрокаТабличнойЧасти.ФизЛицо);
	КонецЦикла;
	
	ДополнитьСтрокиНаСервере(МассивФизЛиц);
КонецПроцедуры

// Процедура заполняет строки
//
// Параметры:
//  Сотрудники  - Массив - массив физ.лиц, по которым нужно заполнить строки
//
&НаСервере
Процедура ДополнитьСтрокиНаСервере(Сотрудники)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиСрезПоследних.ФизЛицо,
		|	СотрудникиСрезПоследних.Подразделение,
		|	СотрудникиСрезПоследних.Должность
		|ИЗ
		|	РегистрСведений.Сотрудники.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И ФизЛицо В (&Сотрудники)) КАК СотрудникиСрезПоследних";
	Запрос.УстановитьПараметр("Период", ДатаДокумента);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрокиТабличнойЧасти = Объект.Сотрудники.НайтиСтроки(Новый Структура("ФизЛицо", ВыборкаДетальныеЗаписи.ФизЛицо));
		
		Для Каждого СтрокаТабличнойЧасти Из СтрокиТабличнойЧасти Цикл
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаДетальныеЗаписи);			
		КонецЦикла;		
	КонецЦикла;    
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыРасходныйКассовыйОрдерЗавершение()
    МассивДокументов = СоздатьДокументыРасходныйКассовыйОрдерНаСервере();
    Текст = НСтр("ru = 'Создание:'");
    Для каждого СтрокаДокумент Из МассивДокументов Цикл
        ПоказатьОповещениеПользователя(Текст, ПолучитьНавигационнуюСсылку(СтрокаДокумент), СтрокаДокумент, БиблиотекаКартинок.Информация32);
	КонецЦикла;
	
	Элементы.СписокРасходныйКассовыйОрдер.Обновить();
КонецПроцедуры 

&НаКлиенте
Процедура СоздатьДокументыАвансовыйОтчетЗавершение()
    МассивДокументов = СоздатьДокументыАвансовыйОтчетНаСервере();
    Текст = НСтр("ru = 'Создание:'");
    Для каждого СтрокаДокумент Из МассивДокументов Цикл
        ПоказатьОповещениеПользователя(Текст, ПолучитьНавигационнуюСсылку(СтрокаДокумент), СтрокаДокумент, БиблиотекаКартинок.Информация32);
	КонецЦикла;
	
	Элементы.СписокАвансовыйОтчет.Обновить();
КонецПроцедуры

&НаСервере
Функция СоздатьДокументыРасходныйКассовыйОрдерНаСервере()
	ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаПодотчетнику");	

	МассивДокументов = Новый Массив();

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходныйКассовыйОрдер.Ссылка КАК Ссылка,
		|	РасходныйКассовыйОрдер.ВалютаДокумента КАК ВалютаДокумента,
		|	РасходныйКассовыйОрдер.ФизЛицо КАК ФизЛицо,
		|	РасходныйКассовыйОрдер.СуммаДокумента КАК СуммаДокумента
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
		|ГДЕ
		|	РасходныйКассовыйОрдер.ДокументОснование = &ДокументОснование
		|	И НЕ РасходныйКассовыйОрдер.ПометкаУдаления
		|	И РасходныйКассовыйОрдер.ФизЛицо В (&СписокФизЛиц)";
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	Запрос.УстановитьПараметр("СписокФизЛиц", Объект.Сотрудники.Выгрузить(, "ФизЛицо").ВыгрузитьКолонку("ФизЛицо"));
	
	ТаблицаРасходныйКассовыйОрдер = Запрос.Выполнить().Выгрузить();
	ТаблицаРасходныйКассовыйОрдер.Индексы.Добавить("ФизЛицо");
	ТаблицаРасходныйКассовыйОрдер.Индексы.Добавить("ВалютаДокумента");

	ТаблицаСотрудники = Объект.Сотрудники.Выгрузить();
	ТаблицаСотрудники.Свернуть("ФизЛицо, Валюта", "СуммаВсего");

	ПараметрыОтбора = Новый Структура;
	Для каждого СтрокаТаблицыСотрудники Из ТаблицаСотрудники Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыСотрудники.ФизЛицо) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора.Вставить("ФизЛицо", 		СтрокаТаблицыСотрудники.ФизЛицо);
		ПараметрыОтбора.Вставить("ВалютаДокумента", СтрокаТаблицыСотрудники.Валюта);
		СтрокиТаблицыЗначений = ТаблицаРасходныйКассовыйОрдер.НайтиСтроки(ПараметрыОтбора);
		
		НачатьТранзакцию();
		Попытка
			Если СтрокиТаблицыЗначений.Количество() = 0 Тогда
				ДокументОбъект = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();	
			Иначе
				Если СтрокиТаблицыЗначений[0].СуммаДокумента = СтрокаТаблицыСотрудники.СуммаВсего Тогда
					Возврат МассивДокументов;
				Иначе
					ДокументОбъект = СтрокиТаблицыЗначений[0].Ссылка.ПолучитьОбъект();				
					ДокументОбъект.Заблокировать();
				КонецЕсли;			
			КонецЕсли;

			МассивДокументов.Добавить(ДокументОбъект.Ссылка);
			
			ДокументОбъект.Дата = ДатаДокумента;
			
			СтруктураЗаполнения = Новый Структура();
			СтруктураЗаполнения.Вставить("Командировка",		Объект.Ссылка);
			СтруктураЗаполнения.Вставить("ВидОперации",			ВидОперации);
			СтруктураЗаполнения.Вставить("Организация",			Объект.Организация);
			СтруктураЗаполнения.Вставить("ДокументОснование",	Объект.Ссылка);
			СтруктураЗаполнения.Вставить("ФизЛицо",				СтрокаТаблицыСотрудники.ФизЛицо);
			СтруктураЗаполнения.Вставить("ВалютаДокумента",		СтрокаТаблицыСотрудники.Валюта);
			СтруктураЗаполнения.Вставить("СуммаДокумента",		СтрокаТаблицыСотрудники.СуммаВсего);
			СтруктураЗаполнения.Вставить("СчетУчета",			ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами);
			
			ДокументОбъект.Заполнить(СтруктураЗаполнения);
									
			СтрокаТабличнойЧасти = ДокументОбъект.РасшифровкаПлатежа.Добавить();
			СтрокаТабличнойЧасти.СуммаПлатежа = СтрокаТаблицыСотрудники.СуммаВсего;	
					
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект,,,РежимЗаписиДокумента.Запись);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить запись документа по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
		
	Возврат МассивДокументов;

КонецФункции

&НаСервере
Функция СоздатьДокументыАвансовыйОтчетНаСервере()
	МассивДокументов = Новый Массив();

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АвансовыйОтчет.Ссылка КАК Ссылка,
		|	АвансовыйОтчет.ВалютаДокумента КАК ВалютаДокумента,
		|	АвансовыйОтчет.ФизЛицо КАК ФизЛицо,
		|	АвансовыйОтчет.СуммаДокумента КАК СуммаДокумента
		|ИЗ
		|	Документ.АвансовыйОтчет КАК АвансовыйОтчет
		|ГДЕ
		|	АвансовыйОтчет.ДокументОснование = &ДокументОснование
		|	И НЕ АвансовыйОтчет.ПометкаУдаления
		|	И АвансовыйОтчет.ФизЛицо В (&СписокФизЛиц)";
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	Запрос.УстановитьПараметр("СписокФизЛиц", Объект.Сотрудники.Выгрузить(, "ФизЛицо").ВыгрузитьКолонку("ФизЛицо"));
	
	ТаблицаАвансовыйОтчет = Запрос.Выполнить().Выгрузить();	
	ТаблицаАвансовыйОтчет.Индексы.Добавить("ФизЛицо");
	ТаблицаАвансовыйОтчет.Индексы.Добавить("ВалютаДокумента");

	ТаблицаСотрудники = Объект.Сотрудники.Выгрузить();
	ТаблицаСотрудники.Свернуть("ФизЛицо, Валюта", "Суточные, Проживание, Проездные, СуммаВсего");
	
	ПараметрыОтбора = Новый Структура;
	Для каждого СтрокаТаблицыСотрудники Из ТаблицаСотрудники Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыСотрудники.ФизЛицо) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора.Вставить("ФизЛицо", 		СтрокаТаблицыСотрудники.ФизЛицо);
		ПараметрыОтбора.Вставить("ВалютаДокумента", СтрокаТаблицыСотрудники.Валюта);
		СтрокиТаблицыЗначений = ТаблицаАвансовыйОтчет.НайтиСтроки(ПараметрыОтбора);
		
		НачатьТранзакцию();
		Попытка
			Если СтрокиТаблицыЗначений.Количество() = 0 Тогда
				ДокументОбъект = Документы.АвансовыйОтчет.СоздатьДокумент();	
			Иначе
				Если СтрокиТаблицыЗначений[0].СуммаДокумента = СтрокаТаблицыСотрудники.СуммаВсего Тогда
					Возврат МассивДокументов;
				Иначе
					ДокументОбъект = СтрокиТаблицыЗначений[0].Ссылка.ПолучитьОбъект();				
					ДокументОбъект.Заблокировать();
				КонецЕсли;			
			КонецЕсли;
			МассивДокументов.Добавить(ДокументОбъект.Ссылка);
			
			ДокументОбъект.Дата = ДатаДокумента;
			
			СтруктураЗаполнения = Новый Структура();
			СтруктураЗаполнения.Вставить("Организация",			Объект.Организация);
			СтруктураЗаполнения.Вставить("ДокументОснование",	Объект.Ссылка);
			СтруктураЗаполнения.Вставить("ФизЛицо",				СтрокаТаблицыСотрудники.ФизЛицо);
			СтруктураЗаполнения.Вставить("ВалютаДокумента",		СтрокаТаблицыСотрудники.Валюта);
			СтруктураЗаполнения.Вставить("СуммаДокумента",		СтрокаТаблицыСотрудники.СуммаВсего);
			СтруктураЗаполнения.Вставить("СчетУчета",			ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами);
			
			ДокументОбъект.Заполнить(СтруктураЗаполнения);
			
			// Суточные
			Если СтрокаТаблицыСотрудники.Суточные <> 0 Тогда
				СтрокаТабличнойЧасти = ДокументОбъект.Прочее.Добавить();
				СтрокаТабличнойЧасти.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами;
				СтрокаТабличнойЧасти.СубконтоДт1 = СтрокаТаблицыСотрудники.ФизЛицо;
				СтрокаТабличнойЧасти.Сумма = Объект.КоличествоДней * СтрокаТаблицыСотрудники.Суточные;
				СтрокаТабличнойЧасти.Валюта = СтрокаТаблицыСотрудники.Валюта;
				СтрокаТабличнойЧасти.Содержание = "Суточные";
				ЗаполнитьКурсИКратность(СтрокаТабличнойЧасти);
			КонецЕсли;
			
			// Проживание
			Если СтрокаТаблицыСотрудники.Проживание <> 0 Тогда
				СтрокаТабличнойЧасти = ДокументОбъект.Прочее.Добавить();
				СтрокаТабличнойЧасти.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами;
				СтрокаТабличнойЧасти.СубконтоДт1 = СтрокаТаблицыСотрудники.ФизЛицо;
				СтрокаТабличнойЧасти.Сумма = (Объект.КоличествоДней - 1) * СтрокаТаблицыСотрудники.Проживание;
				СтрокаТабличнойЧасти.Валюта = СтрокаТаблицыСотрудники.Валюта;
				СтрокаТабличнойЧасти.Содержание = "Проживание";
				ЗаполнитьКурсИКратность(СтрокаТабличнойЧасти);
			КонецЕсли;
			
			// Проездные
			Если СтрокаТаблицыСотрудники.Проездные <> 0 Тогда
				СтрокаТабличнойЧасти = ДокументОбъект.Прочее.Добавить();
				СтрокаТабличнойЧасти.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами;
				СтрокаТабличнойЧасти.СубконтоДт1 = СтрокаТаблицыСотрудники.ФизЛицо;
				СтрокаТабличнойЧасти.Сумма = СтрокаТаблицыСотрудники.Проездные;
				СтрокаТабличнойЧасти.Валюта = СтрокаТаблицыСотрудники.Валюта;
				СтрокаТабличнойЧасти.Содержание = "Проездные";
				ЗаполнитьКурсИКратность(СтрокаТабличнойЧасти);
		КонецЕсли;
					
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект,,,РежимЗаписиДокумента.Запись);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить запись документа по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);		
		КонецПопытки;
	КонецЦикла;
	
	Возврат МассивДокументов;

КонецФункции

// Процедура заполняет табличную часть
//
&НаСервере
Процедура ЗаполнитьНаСервере()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиСрезПоследних.ФизЛицо КАК ФизЛицо,
		|	СотрудникиСрезПоследних.Подразделение КАК Подразделение,
		|	СотрудникиСрезПоследних.Должность КАК Должность
		|ИЗ
		|	РегистрСведений.Сотрудники.СрезПоследних(&Период, Организация = &Организация) КАК СотрудникиСрезПоследних
		|ГДЕ
		|	СотрудникиСрезПоследних.Подразделение = &Подразделение
		|	И НЕ СотрудникиСрезПоследних.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)";
	Запрос.УстановитьПараметр("Период", ДатаДокумента);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	
	РезультатЗапроса = Запрос.Выполнить();
	Объект.Сотрудники.Загрузить(РезультатЗапроса.Выгрузить());	
	
	ТарифыКомандировочных = ПолучитьТарифыКомандировочных();
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Сотрудники Цикл 
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ТарифыКомандировочных, "Суточные, Проживание, Проездные, Валюта");
		РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.КоличествоДней);
	КонецЦикла;
	
	Модифицированность = Истина;
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьКурсИКратность(СтрокаТабличнойЧасти)

	ВалютаКурсКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтрокаТабличнойЧасти.Валюта, Объект.Дата);

	СтрокаТабличнойЧасти.Курс 		= ВалютаКурсКратность.Курс;	
	СтрокаТабличнойЧасти.Кратность 	= ВалютаКурсКратность.Кратность;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти  
