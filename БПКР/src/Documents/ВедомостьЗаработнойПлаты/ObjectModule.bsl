#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнениеОбъектовБП.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения);
	Если НЕ ЗначениеЗаполнено(ПорядокОкругления) Тогда
		ПорядокОкругления = Перечисления.ПорядкиОкругления.Окр0_01;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ПериодРегистрации) Тогда
		Если ЗначениеЗаполнено(Дата) Тогда
			ПериодРегистрации = НачалоМесяца(Дата);
		Иначе
			ПериодРегистрации = НачалоМесяца(ТекущаяДатаСеанса());		
		КонецЕсли;
	КонецЕсли;	
	
	// Курс и кратность
	Если ВидВедомости = 1 ИЛИ ВидВедомости = 2 Тогда
		КурсКратность = ПроведениеРасчетовПоЗарплатеСервер.ПолучитьКурсВалюты(Касса.ВалютаДенежныхСредств, Дата);
	Иначе
		КурсКратность = ПроведениеРасчетовПоЗарплатеСервер.ПолучитьКурсВалюты(БанковскийСчет.ВалютаДенежныхСредств, Дата);
	КонецЕсли;
	
	КурсВыплаты 	 = ?(КурсКратность.Курс = 0, 1, КурсКратность.Курс);
	КратностьВыплаты = ?(КурсКратность.Кратность = 0, 1, КурсКратность.Кратность);
КонецПроцедуры

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СуммаДокумента = Зарплата.Итог("СуммаПоБанковскомуСчету") + Зарплата.Итог("СуммаПоКартСчету") + Зарплата.Итог("СуммаПоКассе");
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если НЕ ПолучитьФункциональнуюОпцию("УчетДепонированнойЗарплаты") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Зарплата.ВидВыплаты");	
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Подразделение) Тогда		
		МассивНепроверяемыхРеквизитов.Добавить("Зарплата.Подразделение");		
	КонецЕсли;
	
	Если ВидВедомости = 1 ИЛИ ВидВедомости = 2 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("БанковскийСчет");
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("Касса");
	КонецЕсли;	
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
КонецПроцедуры

#КонецОбласти
	
#Область СлужебныеПроцедурыИФункции

// Процедура заполняет табличную часть "Зарплата"
//
Процедура ЗаполнитьТабличнуюЧасть() Экспорт 
	
	ВидЗаполнения = ДополнительныеСвойства.ВидЗаполненияТабличнойЧасти;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Сотрудники, признак увольнения для выплаты всего остатка
	// Карт счета для определения банка
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ТекстЗапроса =
		// 1. Выбираются все сотрудники по подразделению (или просто все) + с признаком "Уволен".
		// 2. Из первой таблицы выбираются сотрудники с карт счетами + данные их карт счетов.
		// 3. Из первой таблицы выбираются сотрудники с банковскими счетами + данные их банковских счетов.
		// 4. В зависимости от значений реквизитов документа подбирается список необходимых сотруников.
		"ВЫБРАТЬ
		|	СотрудникиСрезПоследних.ФизЛицо КАК ФизЛицо,
		|	СотрудникиСрезПоследних.Подразделение КАК Подразделение,
		|	ВЫБОР
		|		КОГДА СотрудникиСрезПоследних.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Уволен
		|ПОМЕСТИТЬ ВременнаяТаблицаПолныйСписокСотрудников
		|ИЗ
		|	РегистрСведений.Сотрудники.СрезПоследних(&КонецПериода, Организация = &Организация) КАК СотрудникиСрезПоследних
		|ГДЕ
		|	СотрудникиСрезПоследних.Подразделение = &Подразделение
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СотрудникиПоТрудовымСоглашениямСрезПоследних.ФизЛицо,
		|	СотрудникиПоТрудовымСоглашениямСрезПоследних.Подразделение,
		|	ВЫБОР
		|		КОГДА СотрудникиПоТрудовымСоглашениямСрезПоследних.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|ИЗ
		|	РегистрСведений.СотрудникиПоТрудовымСоглашениям.СрезПоследних(&КонецПериода, Организация = &Организация) КАК СотрудникиПоТрудовымСоглашениямСрезПоследних
		|ГДЕ
		|	СотрудникиПоТрудовымСоглашениямСрезПоследних.Подразделение = &Подразделение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаПолныйСписокСотрудников.ФизЛицо КАК ФизЛицо,
		|	ВременнаяТаблицаПолныйСписокСотрудников.Подразделение КАК Подразделение,
		|	ВременнаяТаблицаПолныйСписокСотрудников.Уволен КАК Уволен,
		|	КартСчетаСотрудников.Ссылка КАК КартСчет
		|ПОМЕСТИТЬ ВременнаяТаблицаСотрудникиСКартСчетами
		|ИЗ
		|	ВременнаяТаблицаПолныйСписокСотрудников КАК ВременнаяТаблицаПолныйСписокСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КартСчетаСотрудников КАК КартСчетаСотрудников
		|		ПО ВременнаяТаблицаПолныйСписокСотрудников.ФизЛицо = КартСчетаСотрудников.Владелец
		|ГДЕ
		|	НЕ КартСчетаСотрудников.ВАрхиве
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаПолныйСписокСотрудников.ФизЛицо КАК ФизЛицо,
		|	ВременнаяТаблицаПолныйСписокСотрудников.Подразделение КАК Подразделение,
		|	ВременнаяТаблицаПолныйСписокСотрудников.Уволен КАК Уволен,
		|	БанковскиеСчета.Ссылка КАК БанковскийСчет
		|ПОМЕСТИТЬ ВременнаяТаблицаСотрудникиСБанковскимиСчетами
		|ИЗ
		|	ВременнаяТаблицаПолныйСписокСотрудников КАК ВременнаяТаблицаПолныйСписокСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
		|		ПО ВременнаяТаблицаПолныйСписокСотрудников.ФизЛицо = БанковскиеСчета.Владелец
		|ГДЕ
		|	НЕ БанковскиеСчета.ВАрхиве
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаПолныйСписокСотрудников.ФизЛицо КАК ФизЛицо,
		|	ВременнаяТаблицаПолныйСписокСотрудников.Подразделение КАК Подразделение,
		|	ВременнаяТаблицаПолныйСписокСотрудников.Уволен КАК Уволен,
		|	НЕОПРЕДЕЛЕНО КАК КартСчет,
		|	НЕОПРЕДЕЛЕНО КАК БанковскийСчет
		|ПОМЕСТИТЬ ВременнаяТаблицаСотрудники
		|ИЗ
		|	ВременнаяТаблицаПолныйСписокСотрудников КАК ВременнаяТаблицаПолныйСписокСотрудников
		|ГДЕ
		|	&СотрудникиПоКассе
		|	И НЕ ВременнаяТаблицаПолныйСписокСотрудников.ФизЛицо В
		|				(ВЫБРАТЬ
		|					ВременнаяТаблицаСотрудникиСКартСчетами.ФизЛицо
		|				ИЗ
		|					ВременнаяТаблицаСотрудникиСКартСчетами КАК ВременнаяТаблицаСотрудникиСКартСчетами
		|		
		|				ОБЪЕДИНИТЬ ВСЕ
		|		
		|				ВЫБРАТЬ
		|					ВременнаяТаблицаСотрудникиСБанковскимиСчетами.ФизЛицо
		|				ИЗ
		|					ВременнаяТаблицаСотрудникиСБанковскимиСчетами КАК ВременнаяТаблицаСотрудникиСБанковскимиСчетами)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаСотрудникиСКартСчетами.ФизЛицо,
		|	ВременнаяТаблицаСотрудникиСКартСчетами.Подразделение,
		|	ВременнаяТаблицаСотрудникиСКартСчетами.Уволен,
		|	ВременнаяТаблицаСотрудникиСКартСчетами.КартСчет,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	ВременнаяТаблицаСотрудникиСКартСчетами КАК ВременнаяТаблицаСотрудникиСКартСчетами
		|ГДЕ
		|	&СотрудникиСКартСчетами
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаСотрудникиСБанковскимиСчетами.ФизЛицо,
		|	ВременнаяТаблицаСотрудникиСБанковскимиСчетами.Подразделение,
		|	ВременнаяТаблицаСотрудникиСБанковскимиСчетами.Уволен,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаСотрудникиСБанковскимиСчетами.БанковскийСчет
		|ИЗ
		|	ВременнаяТаблицаСотрудникиСБанковскимиСчетами КАК ВременнаяТаблицаСотрудникиСБанковскимиСчетами
		|ГДЕ
		|	&СотрудникиСБанковскимиСчетами
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаПолныйСписокСотрудников.ФизЛицо,
		|	ВременнаяТаблицаПолныйСписокСотрудников.Подразделение,
		|	ВременнаяТаблицаПолныйСписокСотрудников.Уволен,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	ВременнаяТаблицаПолныйСписокСотрудников КАК ВременнаяТаблицаПолныйСписокСотрудников
		|ГДЕ
		|	&ВсеСотрудники";		
	Если ЗначениеЗаполнено(Подразделение) Тогда  
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Иначе 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СотрудникиСрезПоследних.Подразделение = &Подразделение", "ИСТИНА");	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СотрудникиПоТрудовымСоглашениямСрезПоследних.Подразделение = &Подразделение", "ИСТИНА");	
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВсеСотрудники", ВидВедомости = 1);
	Запрос.УстановитьПараметр("СотрудникиПоКассе", ВидВедомости = 2);
	Запрос.УстановитьПараметр("СотрудникиСБанковскимиСчетами", ВидВедомости = 3);
	Запрос.УстановитьПараметр("СотрудникиСКартСчетами", ВидВедомости = 4);
	
	Запрос.Выполнить();

	// Остатки по счету 3520
	Если ВидЗаполнения = "ЗаполнитьПоОстаткам" Тогда
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ХозрасчетныйОстатки.Субконто1 КАК ФизЛицо,
			|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаКВыплате
			|ПОМЕСТИТЬ ВременнаяТаблицаРассчитанныеСуммы
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|			&КонецПериода,
			|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НачисленнаяЗаработнаяПлата),
			|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СотрудникиОрганизаций),
			|			Организация = &Организация
			|				И Субконто1 В
			|					(ВЫБРАТЬ
			|						ВременнаяТаблицаСотрудники.ФизЛицо
			|					ИЗ
			|						ВременнаяТаблицаСотрудники КАК ВременнаяТаблицаСотрудники)) КАК ХозрасчетныйОстатки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСотрудники КАК ВременнаяТаблицаСотрудники
			|		ПО ХозрасчетныйОстатки.Субконто1 = ВременнаяТаблицаСотрудники.ФизЛицо
			|ГДЕ
			|	ХозрасчетныйОстатки.СуммаОстатокКт > 0";
		
	// Обороты по счету 3520 для не уволенных
	// Остатки по счету 3520 для уволенных
	ИначеЕсли ВидЗаполнения = "ЗаполнитьПоОстаткамЗаМесяц" Тогда
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ФизическиеЛица) КАК ФизЛицо,
			|	ХозрасчетныйОбороты.СуммаОборотКт - ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаКВыплате
			|ПОМЕСТИТЬ ВременнаяТаблицаРассчитанныеСуммы
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Обороты(
			|			&НачалоПериода,
			|			&КонецПериода,
			|			,
			|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НачисленнаяЗаработнаяПлата),
			|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СотрудникиОрганизаций),
			|			Организация = &Организация
			|				И Субконто1 В
			|					(ВЫБРАТЬ
			|						ВременнаяТаблицаСотрудники.ФизЛицо
			|					ИЗ
			|						ВременнаяТаблицаСотрудники КАК ВременнаяТаблицаСотрудники
			|					ГДЕ
			|						НЕ ВременнаяТаблицаСотрудники.Уволен),
			|			,
			|			) КАК ХозрасчетныйОбороты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСотрудники КАК ВременнаяТаблицаСотрудники
			|		ПО ХозрасчетныйОбороты.Субконто1 = ВременнаяТаблицаСотрудники.ФизЛицо
			|ГДЕ
			|	ХозрасчетныйОбороты.СуммаОборотКт - ХозрасчетныйОбороты.СуммаОборотДт > 0
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ФизическиеЛица),
			|	ХозрасчетныйОстатки.СуммаОстатокКт
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|			&КонецПериода,
			|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НачисленнаяЗаработнаяПлата),
			|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СотрудникиОрганизаций),
			|			Организация = &Организация
			|				И Субконто1 В
			|					(ВЫБРАТЬ
			|						ВременнаяТаблицаСотрудники.ФизЛицо
			|					ИЗ
			|						ВременнаяТаблицаСотрудники КАК ВременнаяТаблицаСотрудники
			|					ГДЕ
			|						ВременнаяТаблицаСотрудники.Уволен)) КАК ХозрасчетныйОстатки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСотрудники КАК ВременнаяТаблицаСотрудники
			|		ПО ХозрасчетныйОстатки.Субконто1 = ВременнаяТаблицаСотрудники.ФизЛицо
			|ГДЕ
			|	ХозрасчетныйОстатки.СуммаОстатокКт > 0";			
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ПериодРегистрации) + 1);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Выполнить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВременнаяТаблицаРассчитанныеСуммы.ФизЛицо КАК ФизЛицо,
		|	ВременнаяТаблицаСотрудники.Подразделение КАК Подразделение,
		|	ВременнаяТаблицаСотрудники.Уволен,
		|	ВременнаяТаблицаРассчитанныеСуммы.СуммаКВыплате КАК СуммаКВыплате,
		|	ВременнаяТаблицаСотрудники.КартСчет,
		|	ВременнаяТаблицаСотрудники.БанковскийСчет,
		|	ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено) КАК ВидВыплаты
		|ИЗ
		|	ВременнаяТаблицаРассчитанныеСуммы КАК ВременнаяТаблицаРассчитанныеСуммы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСотрудники КАК ВременнаяТаблицаСотрудники
		|		ПО ВременнаяТаблицаРассчитанныеСуммы.ФизЛицо = ВременнаяТаблицаСотрудники.ФизЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВременнаяТаблицаРассчитанныеСуммы.ФизЛицо.Наименование";
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбщаяСуммаПоБанковскимСчетам = 0;
	ОбщаяСуммаПоКассе 			 = 0;
	
	Пока Выборка.Следующий() Цикл
		СтрокаТабличнойЧасти = Зарплата.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
		
		СуммаВыборки = Выборка.СуммаКВыплате;
		
		Если ВидВедомости = 3 Тогда
			СтрокаТабличнойЧасти.СуммаПоБанковскомуСчету = СуммаВыборки;
			ОбщаяСуммаПоБанковскимСчетам = ОбщаяСуммаПоБанковскимСчетам + СуммаВыборки;
			
		ИначеЕсли ВидВедомости = 4 Тогда
			СтрокаТабличнойЧасти.СуммаПоКартСчету = СуммаВыборки;
			
		ИначеЕсли ВидВедомости = 2 ИЛИ ВидВедомости = 1 Тогда
			СтрокаТабличнойЧасти.СуммаПоКассе = СуммаВыборки;
			ОбщаяСуммаПоКассе = ОбщаяСуммаПоКассе + СуммаВыборки;
		КонецЕсли;
		
		Если Выборка.Уволен Тогда 
			Продолжить;
		КонецЕсли;
		
		// Округление
		Если ВидВедомости = 4 Тогда
			СтрокаТабличнойЧасти.СуммаПоКартСчету = Ценообразование.ОкруглитьЦену(СтрокаТабличнойЧасти.СуммаПоКартСчету, ПорядокОкругления, Ложь);
		ИначеЕсли ВидВедомости = 3 Тогда
			СтрокаТабличнойЧасти.СуммаПоБанковскомуСчету = Ценообразование.ОкруглитьЦену(СтрокаТабличнойЧасти.СуммаПоБанковскомуСчету, ПорядокОкругления, Ложь);
		ИначеЕсли ВидВедомости = 2 ИЛИ ВидВедомости = 1 Тогда
			СтрокаТабличнойЧасти.СуммаПоКассе = Ценообразование.ОкруглитьЦену(СтрокаТабличнойЧасти.СуммаПоКассе, ПорядокОкругления, Ложь);
		КонецЕсли;
	КонецЦикла; 
	
	МенеджерВременныхТаблиц.Закрыть();
	
	// Заполнение результата.
	Если ВидВедомости = 2 Или ВидВедомости = 1 Тогда
		ЗаполнитьТаблицуВыплатПоКассе(ОбщаяСуммаПоКассе);
	ИначеЕсли ВидВедомости = 4 Тогда
		ЗаполнитьТаблицуВыплатПоЗППроектам(Зарплата.Выгрузить());
	ИначеЕсли ВидВедомости = 3 Тогда
		ЗаполнитьТаблицуВыплатПоБанковскимСчетам(ОбщаяСуммаПоБанковскимСчетам);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧасть()

// Процедура создает документы выплаты.
//
// Параметры:
//	ТаблицаЗарплата - ТаблицаЗначений, выгруженная ТЧ "Зарплата".
//
Процедура ЗаполнитьТаблицуВыплатПоЗППроектам(ТаблицаЗарплата) Экспорт 

	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаЗарплата.КартСчет КАК КартСчет,
		|	ТаблицаЗарплата.СуммаПоКартСчету КАК Сумма
		|ПОМЕСТИТЬ ВременнаяТаблицаЗарплата
		|ИЗ
		|	&ТаблицаЗарплата КАК ТаблицаЗарплата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаЗарплата.КартСчет.Банк КАК Банк,
		|	ВременнаяТаблицаЗарплата.Сумма КАК Сумма
		|ИЗ
		|	ВременнаяТаблицаЗарплата КАК ВременнаяТаблицаЗарплата
		|ГДЕ
		|	НЕ ВременнаяТаблицаЗарплата.КартСчет = ЗНАЧЕНИЕ(Справочник.КартСчетаСотрудников.ПустаяСсылка)
		|
		|ИТОГИ
		|	СУММА(Сумма)
		|ПО
		|	КартСчет.Банк";
	Запрос.УстановитьПараметр("ТаблицаЗарплата", ТаблицаЗарплата);
	ВыборкаПоГруппировкам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	КоличествоЗпПроектов = ВыборкаПоГруппировкам.Количество();	
	НомерПроекта = 1;
	
	СуммаОстатка = ПолучитьОстатокПоКассеИлиБанковскомуСчету(Ложь);
	
	Пока ВыборкаПоГруппировкам.Следующий() Цикл
		Если ВыборкаПоГруппировкам.Сумма <> 0 Тогда
			
			СтрокаТабличнойЧасти = ТаблицаВыплат.Добавить();
			
			Если КоличествоЗпПроектов = 1 Тогда
				Наименование = НСтр("ru = 'ЗП проект'");
			Иначе
				Наименование = СтрШаблон(НСтр("ru = 'ЗП проект%1'"), НомерПроекта);
			КонецЕсли;
			
			СтрокаТабличнойЧасти.Наименование = Наименование;
			СтрокаТабличнойЧасти.Банк = ВыборкаПоГруппировкам.Банк;
			СтрокаТабличнойЧасти.Сумма = ВыборкаПоГруппировкам.Сумма * КурсВыплаты / КратностьВыплаты;
			СтрокаТабличнойЧасти.СуммаОстаток = СуммаОстатка;
			
			НомерПроекта = НомерПроекта + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура создает документы выплаты.
//
// Параметры:
//	Сумма - Число, общая сумма по колонке "СуммаПоБанковскомуСчету" из ТЧ "Зарплата".
//
Процедура ЗаполнитьТаблицуВыплатПоБанковскимСчетам(Сумма) Экспорт 
	
	Если Сумма <> 0 Тогда	
		СтрокаТабличнойЧасти = ТаблицаВыплат.Добавить();
		СтрокаТабличнойЧасти.Наименование = НСтр("ru = 'Банковские счета'");
		СтрокаТабличнойЧасти.Сумма 		  = Сумма * КурсВыплаты / КратностьВыплаты;
		СтрокаТабличнойЧасти.СуммаОстаток = ПолучитьОстатокПоКассеИлиБанковскомуСчету(Ложь);
	КонецЕсли;	
		
КонецПроцедуры

// Процедура создает документы выплаты.
//
// Параметры:
//	Сумма - Число, общая сумма по колонке "СуммаПоКассе" из ТЧ "Зарплата".
//
Процедура ЗаполнитьТаблицуВыплатПоКассе(Сумма) Экспорт 
	
	Если Сумма <> 0 Тогда
		СтрокаТабличнойЧасти = ТаблицаВыплат.Добавить();
		СтрокаТабличнойЧасти.Наименование = "Касса";
		СтрокаТабличнойЧасти.Сумма 		  = Сумма * КурсВыплаты / КратностьВыплаты;
		СтрокаТабличнойЧасти.СуммаОстаток = ПолучитьОстатокПоКассеИлиБанковскомуСчету(Истина);
	КонецЕсли;
		
КонецПроцедуры

// Процедура создает документы выплаты.
//
// Параметры:
//	ПолучитьОстатокПоКассе - Булево, параметр для определения по кассе или банку получать сумму остаток.
//
// Возвращаемое значение: Число, сумма остаток по РБ "Хозрасчетный".
//
Функция ПолучитьОстатокПоКассеИлиБанковскомуСчету(ПолучитьОстатокПоКассе) Экспорт 
		
	Запрос = Новый Запрос();
	Запрос.Текст =	
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.СуммаОстаток КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&Период, 
		|			Счет = &Счет, 
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДенежныеСредства), 
		|			Организация = &Организация
		|				И Субконто1 = &БанковскийСчетКасса) КАК ХозрасчетныйОстатки";
	Запрос.УстановитьПараметр("Период", КонецМесяца(ПериодРегистрации) + 1);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Если ПолучитьОстатокПоКассе Тогда
		Запрос.УстановитьПараметр("Счет", Касса.СчетУчета);
		Запрос.УстановитьПараметр("БанковскийСчетКасса", Касса);
	Иначе
		Запрос.УстановитьПараметр("Счет", БанковскийСчет.СчетУчета);
		Запрос.УстановитьПараметр("БанковскийСчетКасса", БанковскийСчет);	
	КонецЕсли;	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Сумма;
КонецФункции // ПолучитьОстатокПоКассеИлиБанковскомуСчета()

// Процедура, посредствам запроса и обработки, подготавливает данные для создаваемых документов РКО или ППИ.
//
Процедура ПодготовитьДанныеДляДокументовВыплаты() Экспорт 

	Запрос = Новый Запрос();
	Запрос.Текст = 
		// 1. Данные табличной части "Зарплата";
		// 2. Данные ТЧ по карт счетам; 
		// 3. Данные ТЧ по банковским счетам;
		// 4. Данные ТЧ по кассе;
		"ВЫБРАТЬ
		|	ТаблицаЗарплата.ФизЛицо КАК ФизЛицо,
		|	ТаблицаЗарплата.БанковскийСчет КАК БанковскийСчет,
		|	ТаблицаЗарплата.СуммаПоБанковскомуСчету КАК СуммаПоБанковскомуСчету,
		|	ТаблицаЗарплата.КартСчет КАК КартСчет,
		|	ТаблицаЗарплата.СуммаПоКартСчету КАК СуммаПоКартСчету,
		|	ТаблицаЗарплата.СуммаПоКассе КАК СуммаПоКассе,
		|	ТаблицаЗарплата.ВидВыплаты КАК ВидВыплаты
		|ПОМЕСТИТЬ ВременнаяТаблицаЗарплата
		|ИЗ
		|	&ТаблицаЗарплата КАК ТаблицаЗарплата
		|;
		|
		|///////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЗарплата.ФизЛицо,
		|	ТаблицаЗарплата.СуммаПоКартСчету,
		|	ТаблицаЗарплата.КартСчет,
		|	ТаблицаЗарплата.КартСчет.Банк КАК Банк
		|ИЗ
		|	ВременнаяТаблицаЗарплата КАК ТаблицаЗарплата
		|ГДЕ
		|	ТаблицаЗарплата.СуммаПоКартСчету <> 0
		|	И ВЫБОР
		|		КОГДА &УчетДепонированнойЗарплаты
		|			ТОГДА ТаблицаЗарплата.ВидВыплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|
		|ИТОГИ ПО
		|	ТаблицаЗарплата.КартСчет.Банк
		|;
		|
		|///////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЗарплата.ФизЛицо,
		|	ТаблицаЗарплата.СуммаПоБанковскомуСчету,
		|	ТаблицаЗарплата.БанковскийСчет,
		|	ТаблицаЗарплата.БанковскийСчет.Банк КАК Банк
		|ИЗ
		|	ВременнаяТаблицаЗарплата КАК ТаблицаЗарплата
		|ГДЕ
		|	ТаблицаЗарплата.СуммаПоБанковскомуСчету <> 0
		|	И ВЫБОР
		|		КОГДА &УчетДепонированнойЗарплаты
		|			ТОГДА ТаблицаЗарплата.ВидВыплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|;
		|
		|///////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЗарплата.ФизЛицо,
		|	ТаблицаЗарплата.СуммаПоКассе
		|ИЗ
		|	ВременнаяТаблицаЗарплата КАК ТаблицаЗарплата
		|ГДЕ
		|	ТаблицаЗарплата.СуммаПоКассе <> 0
		|	И ВЫБОР
		|		КОГДА &УчетДепонированнойЗарплаты
		|			ТОГДА ТаблицаЗарплата.ВидВыплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ";
	Запрос.УстановитьПараметр("ТаблицаЗарплата", Зарплата.Выгрузить());
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("УчетДепонированнойЗарплаты", ПолучитьФункциональнуюОпцию("УчетДепонированнойЗарплаты"));
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаОбщиеППИ 		 = МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаИндивидуальныеППИ = МассивРезультатов[2].Выбрать();
	
	// Подготовка данных для общих ППИ
	Пока ВыборкаОбщиеППИ.Следующий() Цикл
		
		ТаблицаЗначений = Новый ТаблицаЗначений;
		ТаблицаЗначений.Колонки.Добавить("ФизЛицо",,"ФизЛицо");
		ТаблицаЗначений.Колонки.Добавить("СуммаПоКартСчету",,"СуммаПоКартСчету");
		ТаблицаЗначений.Колонки.Добавить("КартСчет",,"КартСчет");
		ТаблицаЗначений.Колонки.Добавить("Банк",,"Банк");
		
		ВыборкаДетальныеЗаписи = ВыборкаОбщиеППИ.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл				
			Стр = ТаблицаЗначений.Добавить();
			Стр.ФизЛицо = ВыборкаДетальныеЗаписи.ФизЛицо;
			Стр.СуммаПоКартСчету = ВыборкаДетальныеЗаписи.СуммаПоКартСчету;
			Стр.КартСчет = ВыборкаДетальныеЗаписи.КартСчет;
			Стр.Банк = ВыборкаДетальныеЗаписи.Банк;				
		КонецЦикла;
		
		СтруктураДляОбщегоППИ = Новый Структура();
		
		СтруктураДляОбщегоППИ.Вставить("ВедомостьЗаработнойПлаты", 		Ссылка);
		СтруктураДляОбщегоППИ.Вставить("Организация", 					Организация);
		СтруктураДляОбщегоППИ.Вставить("БанковскийСчет", 				БанковскийСчет);
		СтруктураДляОбщегоППИ.Вставить("БанковскийСчетЗППроекта", 		БанковскийСчетЗППроекта);
		СтруктураДляОбщегоППИ.Вставить("ТаблицаЗначений", 				ТаблицаЗначений);
		СтруктураДляОбщегоППИ.Вставить("СтатьяДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
		СтруктураДляОбщегоППИ.Вставить("КурсВыплаты", 					КурсВыплаты);
		СтруктураДляОбщегоППИ.Вставить("КратностьВыплаты", 				КратностьВыплаты);
																							
		ДокументМенеджер = Документы.ПлатежноеПоручениеИсходящее;
					
		СозданиеДокументовВыплаты(ДокументМенеджер, СтруктураДляОбщегоППИ);	
	КонецЦикла;
	
	// Подготовка данных для индивидуальных ППИ
	Пока ВыборкаИндивидуальныеППИ.Следующий() Цикл
		
		СтруктураППИ = Новый Структура();
			
		СтруктураППИ.Вставить("ВедомостьЗаработнойПлаты", 		Ссылка);
		СтруктураППИ.Вставить("Организация", 					Организация);
		СтруктураППИ.Вставить("БанковскийСчет", 				БанковскийСчет);
		СтруктураППИ.Вставить("Банк", 							ВыборкаИндивидуальныеППИ.Банк);
		СтруктураППИ.Вставить("БанковскийСчетПолучателя", 		ВыборкаИндивидуальныеППИ.БанковскийСчет);
		СтруктураППИ.Вставить("ФизЛицо", 						ВыборкаИндивидуальныеППИ.ФизЛицо);
		СтруктураППИ.Вставить("СуммаКВыплате", 					ВыборкаИндивидуальныеППИ.СуммаПоБанковскомуСчету);
		СтруктураППИ.Вставить("СтатьяДвиженияДенежныхСредств", 	СтатьяДвиженияДенежныхСредств);
		СтруктураППИ.Вставить("КурсВыплаты", 					КурсВыплаты);
		СтруктураППИ.Вставить("КратностьВыплаты", 				КратностьВыплаты);
											
		ДокументМенеджер = Документы.ПлатежноеПоручениеИсходящее;	
		
		СозданиеДокументовВыплаты(ДокументМенеджер, СтруктураППИ)
	КонецЦикла;
	
	// Подготовка данных для индивидуальных РКО.
	Если ВидДокументаВыплаты = 2 Тогда
		ВыборкаРКО = МассивРезультатов[3].Выбрать();	
			
		Пока ВыборкаРКО.Следующий() Цикл				
			СтруктураДляИндивРКО = Новый Структура();
			
			СтруктураДляИндивРКО.Вставить("ВедомостьЗаработнойПлаты", 		Ссылка);
			СтруктураДляИндивРКО.Вставить("НомерВыплаты", 					Номер);
			СтруктураДляИндивРКО.Вставить("Дата", 							Дата);
			СтруктураДляИндивРКО.Вставить("Организация", 					Организация);
			СтруктураДляИндивРКО.Вставить("Касса", 							Касса);
			СтруктураДляИндивРКО.Вставить("ФизЛицо", 						ВыборкаРКО.ФизЛицо);
			СтруктураДляИндивРКО.Вставить("СуммаПоКассе", 					ВыборкаРКО.СуммаПоКассе);
			СтруктураДляИндивРКО.Вставить("СтатьяДвиженияДенежныхСредств", 	СтатьяДвиженияДенежныхСредств);
			СтруктураДляИндивРКО.Вставить("КурсВыплаты", 					КурсВыплаты);
			СтруктураДляИндивРКО.Вставить("КратностьВыплаты", 				КратностьВыплаты);
												
			ДокументМенеджер = Документы.РасходныйКассовыйОрдер;
			
			СозданиеДокументовВыплаты(ДокументМенеджер, СтруктураДляИндивРКО);		
		КонецЦикла;
		
	// Подготовка данных для общих РКО.
	ИначеЕсли ВидДокументаВыплаты = 1 Тогда
		ТЗ_РКО = МассивРезультатов[3].Выгрузить();
		
		СтруктураДляОбщегоРКО = Новый Структура();
			
		СтруктураДляОбщегоРКО.Вставить("ВедомостьЗаработнойПлаты", 		Ссылка);
		СтруктураДляОбщегоРКО.Вставить("НомерВыплаты", 					Номер);
		СтруктураДляОбщегоРКО.Вставить("Дата", 							Дата);
		СтруктураДляОбщегоРКО.Вставить("Организация", 					Организация);
		СтруктураДляОбщегоРКО.Вставить("Касса", 						Касса);
		СтруктураДляОбщегоРКО.Вставить("ТаблицаЗначений", 				ТЗ_РКО);
		СтруктураДляОбщегоРКО.Вставить("СтатьяДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
		СтруктураДляОбщегоРКО.Вставить("КурсВыплаты", 					КурсВыплаты);
		СтруктураДляОбщегоРКО.Вставить("КратностьВыплаты", 				КратностьВыплаты);
											
		ДокументМенеджер = Документы.РасходныйКассовыйОрдер;
		
		СозданиеДокументовВыплаты(ДокументМенеджер, СтруктураДляОбщегоРКО);
	КонецЕсли;

КонецПроцедуры

// Процедура создает документы выплаты.
//
// Параметры:
//  ДокументМенеджер - ДокументМенеджер, документ менеджер.
//
//	СтруктураДанных - Структура, данные для заполнения документов выплаты.
//
Процедура СозданиеДокументовВыплаты(ДокументМенеджер, СтруктураДанных)	
	ДокументОбъект = ДокументМенеджер.СоздатьДокумент();

	ДокументОбъект.Дата = Дата;
	ДокументОбъект.Заполнить(СтруктураДанных);			
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);	
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось завершить создание документа.
			|Техническая информация об ошибке: %1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
		#Если Сервер Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить создание документа по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		#КонецЕсли	
	КонецПопытки;				
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли