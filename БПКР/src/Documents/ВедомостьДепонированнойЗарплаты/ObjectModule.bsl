#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ЗаполненияДокумента

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа.
//	
Процедура ЗаполнитьПоВедомостиЗП(ДанныеЗаполнения) Экспорт
	
	ДокументОснование = ДанныеЗаполнения;
	
	Организация 					= ДанныеЗаполнения.Организация;
	ПериодРегистрации 				= ДанныеЗаполнения.ПериодРегистрации;
	Подразделение 					= ДанныеЗаполнения.Подразделение;
	СтатьяДвиженияДенежныхСредств 	= ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств;
		
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Зарплата Цикл
		
		Если СтрокаТабличнойЧасти.ВидВыплаты = Перечисления.ВыплаченностьЗарплаты.Задепонировано Тогда
			НоваяСтрокаТабличнойЧасти = Зарплата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
			НоваяСтрокаТабличнойЧасти.РучнаяКорректировка = Ложь;
			
			Если ДанныеЗаполнения.ВидВедомости = 1 
				ИЛИ ДанныеЗаполнения.ВидВедомости = 2 Тогда
				НоваяСтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.СуммаПоКассе;
				
			ИначеЕсли ДанныеЗаполнения.ВидВедомости = 3 Тогда			
				НоваяСтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.СуммаПоБанковскомуСчету; 
			Иначе	
				НоваяСтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.СуммаПоКартСчету;
			КонецЕсли;	
		КонецЕсли;		
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.ВедомостьЗаработнойПлаты")] = "ЗаполнитьПоВедомостиЗП";
	
	ЗаполнениеОбъектовБП.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
	Если Не ЗначениеЗаполнено(ПериодРегистрации) Тогда
		Если ЗначениеЗаполнено(Дата) Тогда
			ПериодРегистрации = НачалоМесяца(Дата);
		Иначе
			ПериодРегистрации = НачалоМесяца(ТекущаяДатаСеанса());		
		КонецЕсли;
	КонецЕсли;	
	
	СчетУчета = ПланыСчетов.Хозрасчетный.ЗадолженностьПоДепонированнойЗаработнойПлате;
КонецПроцедуры

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СуммаДокумента = Зарплата.Итог("Сумма");
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		МассивНепроверяемыхРеквизитов = Новый Массив;
		МассивНепроверяемыхРеквизитов.Добавить("Зарплата.Подразделение");
		ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ИнициализироватьДанные(Отказ, РежимПроведения);
	
	ОтразитьДвижения(Отказ, РежимПроведения);
	
	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
КонецПроцедуры // ОбработкаУдаленияПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииОбработкаПроведения

// Процедура инициализирует данные документа
// и подготавливает таблицы для движения в регистры
//
Процедура ИнициализироватьДанные(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.ВедомостьДепонированнойЗарплаты.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
КонецПроцедуры
	
// Процедура заполняет регистры данными
//
Процедура ОтразитьДвижения(Отказ, РежимПроведения)

	БухгалтерскийУчетСервер.ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли