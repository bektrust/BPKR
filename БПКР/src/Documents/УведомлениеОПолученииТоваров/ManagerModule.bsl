#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

//#Область ПроцедурыПроведенияДокумента

//// Формирует таблицу значений, содержащую данные для проведения по регистру.
//// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
////
//Процедура СформироватьТаблицаСведенияОПодакцизныхТоварах(ДокументСсылка, СтруктураДополнительныеСвойства)
//	
//	Запрос = Новый Запрос;
//	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
//	Запрос.Текст =
//		"ВЫБРАТЬ
//		|	ВременнаяТаблицаШапка.Ссылка КАК ДокументСсылка,
//		|	ВременнаяТаблицаШапка.Дата КАК ДатаУведомления,
//		|	ВременнаяТаблицаШапка.Организация КАК Организация,
//		|	ВременнаяТаблицаШапка.Номер КАК НомерУведомления,
//		|	ВременнаяТаблицаШапка.КодСтраны КАК КодСтраны,		
//		|	ТаблицаДокумента.ДатаВвозаВывоза КАК ДатаФактическогоВвоза,
//		|	ТаблицаДокумента.Количество КАК ОблагаемыйОбъем,
//		|	ТаблицаДокумента.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
//		|	ТаблицаДокумента.НомерСтроки КАК НомерСтрокиВДокументе
//		|ИЗ
//		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаПодакцизныеТовары КАК ТаблицаДокумента
//		|		ПО (ИСТИНА)";
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПодакцизныеТовары", РезультатЗапроса.Выгрузить());
//КонецПроцедуры // СформироватьТаблицаСотрудники()

//// Инициализирует таблицы значений, содержащие данные табличных частей документа.
//// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
////
//Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
//	
//	Запрос = Новый Запрос;
//	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
//	Запрос.Текст =
//		"ВЫБРАТЬ
//		|	УведомлениеОПолученииТоваров.Ссылка КАК Ссылка,
//		|	УведомлениеОПолученииТоваров.Номер КАК Номер,
//		|	УведомлениеОПолученииТоваров.Дата КАК Дата,
//		|	УведомлениеОПолученииТоваров.Организация КАК Организация,
//		|	УведомлениеОПолученииТоваров.Страна.Код КАК КодСтраны
//		|ПОМЕСТИТЬ ВременнаяТаблицаШапка
//		|ИЗ
//		|	Документ.УведомлениеОПолученииТоваров КАК УведомлениеОПолученииТоваров
//		|ГДЕ
//		|	УведомлениеОПолученииТоваров.Ссылка = &Ссылка
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	УведомлениеОПолученииТоваровПодакцизныеТовары.ДатаВвозаВывоза КАК ДатаВвозаВывоза,
//		|	УведомлениеОПолученииТоваровПодакцизныеТовары.Количество КАК Количество,
//		|	УведомлениеОПолученииТоваровПодакцизныеТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
//		|	УведомлениеОПолученииТоваровПодакцизныеТовары.НомерСтроки КАК НомерСтроки
//		|ПОМЕСТИТЬ ВременнаяТаблицаПодакцизныеТовары
//		|ИЗ
//		|	Документ.УведомлениеОПолученииТоваров.ПодакцизныеТовары КАК УведомлениеОПолученииТоваровПодакцизныеТовары
//		|ГДЕ
//		|	УведомлениеОПолученииТоваровПодакцизныеТовары.Ссылка = &Ссылка";
//	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
//	Запрос.Выполнить();
//	
//	СформироватьТаблицаСведенияОПодакцизныхТоварах(ДокументСсылка, СтруктураДополнительныеСвойства);
//КонецПроцедуры // ИнициализироватьДанныеДокумента()

//#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполнение заголовка печатных форм
//
Процедура ЗаполнитьШапкуОтчета(СтруктураПараметров, ОбластьМакета)

	Организация 	= СтруктураПараметров.Организация;
	НачалоПериода 	= СтруктураПараметров.НачалоПериода;
	КонецПериода 	= СтруктураПараметров.КонецПериода;
	ДатаУведомления = СтруктураПараметров.ДатаУведомления;
	
	КонтактныеДанные = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСведенияОбОрганизации(Организация, КонецПериода);

	ОКПО              				= КонтактныеДанные.ОКПО;
	ИНН 							= КонтактныеДанные.ИНН;
	ГНСНаименование                 = КонтактныеДанные.ГНСНаименование;
	КодГНС 							= КонтактныеДанные.ГНСКод;
	ОрганизацияНаменованиеПолное    = КонтактныеДанные.НаименованиеПолное;
	Индекс  						= КонтактныеДанные.Индекс;
	Город  							= КонтактныеДанные.Город;
	Улица							= КонтактныеДанные.Улица; 
	Телефон							= КонтактныеДанные.Тел;
	ЭлектроннаяПочта 				= КонтактныеДанные.Email; 
	
	ДанныеПечати = Новый Структура();
	ДанныеПечати.Вставить("Организация", 		ОрганизацияНаменованиеПолное);
	ДанныеПечати.Вставить("Налоговая", 			ГНСНаименование);
	ДанныеПечати.Вставить("АдресГород", 		Город);
	ДанныеПечати.Вставить("АдресУлица", 		Улица);
	ДанныеПечати.Вставить("Телефон", 			Телефон);
	ДанныеПечати.Вставить("ЭлектроннаяПочта", 	ЭлектроннаяПочта);
	ДанныеПечати.Вставить("НомерДокумента", 	СтруктураПараметров.НомерДокумента);
	
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	
	ОбластьМакета.Параметры.ИНН1 = Сред(ИНН, 1, 1);
	ОбластьМакета.Параметры.ИНН2 = Сред(ИНН, 2, 1);
	ОбластьМакета.Параметры.ИНН3 = Сред(ИНН, 3, 1);                           
	ОбластьМакета.Параметры.ИНН4 = Сред(ИНН, 4, 1);
	ОбластьМакета.Параметры.ИНН5 = Сред(ИНН, 5, 1);
	ОбластьМакета.Параметры.ИНН6 = Сред(ИНН, 6, 1);
	ОбластьМакета.Параметры.ИНН7 = Сред(ИНН, 7, 1);
	ОбластьМакета.Параметры.ИНН8 = Сред(ИНН, 8, 1);
	ОбластьМакета.Параметры.ИНН9 = Сред(ИНН, 9, 1);
	ОбластьМакета.Параметры.ИНН10 = Сред(ИНН, 10, 1);
	ОбластьМакета.Параметры.ИНН11 = Сред(ИНН, 11, 1);
	ОбластьМакета.Параметры.ИНН12 = Сред(ИНН, 12, 1);
	ОбластьМакета.Параметры.ИНН13 = Сред(ИНН, 13, 1);
	ОбластьМакета.Параметры.ИНН14 = Сред(ИНН, 14, 1);         
	
	ОбластьМакета.Параметры.ГНС1 = Сред(КодГНС, 1, 1);
	ОбластьМакета.Параметры.ГНС2 = Сред(КодГНС, 2, 1);
	ОбластьМакета.Параметры.ГНС3 = Сред(КодГНС, 3, 1);
		
	ОбластьМакета.Параметры.ДатаН1 = Сред(НачалоПериода, 1, 1);	
	ОбластьМакета.Параметры.ДатаН2 = Сред(НачалоПериода, 2, 1);	
	ОбластьМакета.Параметры.ДатаН3 = Сред(НачалоПериода, 4, 1);	
	ОбластьМакета.Параметры.ДатаН4 = Сред(НачалоПериода, 5, 1);	
	ОбластьМакета.Параметры.ДатаН5 = Сред(НачалоПериода, 7, 1);	
	ОбластьМакета.Параметры.ДатаН6 = Сред(НачалоПериода, 8, 1);	
	ОбластьМакета.Параметры.ДатаН7 = Сред(НачалоПериода, 9, 1);	
	ОбластьМакета.Параметры.ДатаН8 = Сред(НачалоПериода, 10, 1);		
		
	ОбластьМакета.Параметры.ДатаК1 = Сред(КонецПериода, 1, 1);	
	ОбластьМакета.Параметры.ДатаК2 = Сред(КонецПериода, 2, 1);	
	ОбластьМакета.Параметры.ДатаК3 = Сред(КонецПериода, 4, 1);	
	ОбластьМакета.Параметры.ДатаК4 = Сред(КонецПериода, 5, 1);	
	ОбластьМакета.Параметры.ДатаК5 = Сред(КонецПериода, 7, 1);	
	ОбластьМакета.Параметры.ДатаК6 = Сред(КонецПериода, 8, 1);	
	ОбластьМакета.Параметры.ДатаК7 = Сред(КонецПериода, 9, 1);	
	ОбластьМакета.Параметры.ДатаК8 = Сред(КонецПериода, 10, 1);

	ОбластьМакета.Параметры.ДатаУ1 = Сред(ДатаУведомления, 1, 1);	
	ОбластьМакета.Параметры.ДатаУ2 = Сред(ДатаУведомления, 2, 1);	
	ОбластьМакета.Параметры.ДатаУ3 = Сред(ДатаУведомления, 4, 1);	
	ОбластьМакета.Параметры.ДатаУ4 = Сред(ДатаУведомления, 5, 1);	
	ОбластьМакета.Параметры.ДатаУ5 = Сред(ДатаУведомления, 7, 1);	
	ОбластьМакета.Параметры.ДатаУ6 = Сред(ДатаУведомления, 8, 1);	
	ОбластьМакета.Параметры.ДатаУ7 = Сред(ДатаУведомления, 9, 1);	
	ОбластьМакета.Параметры.ДатаУ8 = Сред(ДатаУведомления, 10, 1);
	
	Если ЗначениеЗаполнено(ОКПО) Тогда 
		ОбластьМакета.Параметры.ОКПО1 = Сред(ОКПО,1,1);
		ОбластьМакета.Параметры.ОКПО2 = Сред(ОКПО,2,1);
		ОбластьМакета.Параметры.ОКПО3 = Сред(ОКПО,3,1);
		ОбластьМакета.Параметры.ОКПО4 = Сред(ОКПО,4,1);
		ОбластьМакета.Параметры.ОКПО5 = Сред(ОКПО,5,1);
		ОбластьМакета.Параметры.ОКПО6 = Сред(ОКПО,6,1);
		ОбластьМакета.Параметры.ОКПО7 = Сред(ОКПО,7,1);
		ОбластьМакета.Параметры.ОКПО8 = Сред(ОКПО,8,1);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Индекс) Тогда
		ОбластьМакета.Параметры.ИНДЕКС1 = Сред(Индекс, 1, 1);	
		ОбластьМакета.Параметры.ИНДЕКС2 = Сред(Индекс, 2, 1);	
		ОбластьМакета.Параметры.ИНДЕКС3 = Сред(Индекс, 3, 1);	
		ОбластьМакета.Параметры.ИНДЕКС4 = Сред(Индекс, 4, 1);	
		ОбластьМакета.Параметры.ИНДЕКС5 = Сред(Индекс, 5, 1);	
		ОбластьМакета.Параметры.ИНДЕКС6 = Сред(Индекс, 6, 1);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ВерсионированиеОбъектов

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//@skip-warning
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область ИнтерфейсПечати

// Функция формирует табличный документ с печатной формой ПечатьНакладной
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьУведомления(МассивОбъектов, ОбъектыПечати)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УведомлениеОПолученииТоваров.Ссылка КАК Ссылка,
		|	УведомлениеОПолученииТоваров.Дата КАК Дата,
		|	УведомлениеОПолученииТоваров.Организация КАК Организация,
		|	УведомлениеОПолученииТоваров.Страна КАК Страна,
		|	УведомлениеОПолученииТоваров.Страна.Код КАК КодСтраны,
		|	УведомлениеОПолученииТоваров.Номер КАК Номер,
		|	УведомлениеОПолученииТоваров.ДатаНачала КАК ДатаНачала,
		|	УведомлениеОПолученииТоваров.ДатаОкончания КАК ДатаОкончания,
		|	УведомлениеОПолученииТоваров.РеквизитыЛицензии.(
		|		НомерСтроки КАК НомерСтроки,
		|		ДатаВыдачи КАК ДатаВыдачи,
		|		НомерЛицензии КАК НомерЛицензии,
		|		СерияЛицензии КАК СерияЛицензии,
		|		ОбъемРазрешенногоИмпорта КАК ОбъемРазрешенногоИмпорта
		|	) КАК РеквизитыЛицензии,
		|	УведомлениеОПолученииТоваров.ПодакцизныеТовары.(
		|		НомерСтроки КАК НомерСтроки,
		|		АдресСкладскогоПомещения КАК АдресСкладскогоПомещения,
		|		АдресНефтебазы КАК АдресНефтебазы,
		|		ДатаВвозаВывоза КАК ДатаВвозаВывоза,
		|		ВидПодакцизногоТовара КАК ВидПодакцизногоТовара,
		|		Количество КАК Количество
		|	) КАК ПодакцизныеТовары
		|ИЗ
		|	Документ.УведомлениеОПолученииТоваров КАК УведомлениеОПолученииТоваров";		
	Запрос.УстановитьПараметр("СписокДокументов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "УведомлениеОПолученииТоваров_Уведомление";

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.УведомлениеОПолученииТоваров.ПФ_MXL_Уведомление");
	
	Пока Шапка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИнфоОбласть");
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Организация", 	Шапка.Организация);
		СтруктураПараметров.Вставить("НачалоПериода", 	Шапка.ДатаНачала);
		СтруктураПараметров.Вставить("КонецПериода", 	Шапка.ДатаОкончания);
		СтруктураПараметров.Вставить("ДатаУведомления", Шапка.Дата);
		СтруктураПараметров.Вставить("НомерДокумента", 	ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер));
														
 		ЗаполнитьШапкуОтчета(СтруктураПараметров, ОбластьМакета);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаЛицензии");
		Выборка = Шапка.РеквизитыЛицензии.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ОбластьМакета.Параметры.Заполнить(Выборка);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЦикла;	
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьМакета.Параметры.Страна = Шапка.Страна;
		
		КодСтраны = Шапка.КодСтраны;
		ОбластьМакета.Параметры.КодСтраны1 = Сред(КодСтраны, 1, 1);
		ОбластьМакета.Параметры.КодСтраны2 = Сред(КодСтраны, 2, 1);
		ОбластьМакета.Параметры.КодСтраны3 = Сред(КодСтраны, 3, 1);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаТовары");
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		
		МассивОбластей = Новый Массив();
		МассивОбластей.Добавить(ОбластьСтрока);
		МассивОбластей.Добавить(ОбластьПодвал);
		
		Выборка = Шапка.ПодакцизныеТовары.Выбрать();
		КоличествоСтрок = Выборка.Количество();
		ВыводимаяСтрока = 1;
		ВыводНаНовойСтранице = Ложь;
		
		Пока Выборка.Следующий() Цикл
			ОбластьСтрока.Параметры.Заполнить(Выборка);
			
			Если КоличествоСтрок = ВыводимаяСтрока И НЕ ТабличныйДокумент.ПроверитьВывод(МассивОбластей) Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьСтрока);
				ТабличныйДокумент.Вывести(ОбластьПодвал);
				ВыводНаНовойСтранице = Истина;
				
			Иначе
				ТабличныйДокумент.Вывести(ОбластьСтрока);
			КонецЕсли;
			
			ВыводимаяСтрока = ВыводимаяСтрока + 1;
		КонецЦикла;
		
		Если НЕ ВыводНаНовойСтранице Тогда
			ТабличныйДокумент.Вывести(ОбластьПодвал);	
		КонецЕсли;	
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
КонецФункции

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Устанавливаем признак доступности печати покомплектно.     
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;      
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Уведомление") Тогда
		 // Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"Уведомление",  
			НСтр("ru = 'Уведомление о предстоящем получении подакцизных товаров, ввозе (вывозе)'"), 
			ПечатьУведомления(МассивОбъектов, ОбъектыПечати),,
			"Документ.УведомлениеОПолученииТоваров.ПФ_MXL_Уведомление");
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
		
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Уведомление";
	КомандаПечати.Представление = НСтр("ru = 'Уведомление о предстоящем получении подакцизных товаров, ввозе (вывозе)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 1;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
