#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнениеОбъектовБП.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения);
	
	Если НЕ Дата = КонецМесяца(ТекущаяДатаСеанса()) Тогда
		Дата = КонецМесяца(ТекущаяДатаСеанса());
	КонецЕсли;
			
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ИнициализироватьДанные(Отказ, РежимПроведения);
	
	ОтразитьДвижения(Отказ, РежимПроведения);

	// Движения записаны на этапе расчетов.
	Движения.Хозрасчетный.Записывать = Ложь;
	
	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
		
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	// Выполнение предварительного контроля.
	ВыполнитьПредварительныйКонтроль(Отказ);	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииОбработкаПроведения

// Процедура инициализирует данные документа
// и подготавливает таблицы для движения в регистры
//
Процедура ИнициализироватьДанные(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.ЗакрытиеМесяца.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	МассивТиповИсключений = Новый Массив;
	МассивТиповИсключений.Добавить(Тип("РегистрБухгалтерииНаборЗаписей.Хозрасчетный"));
	МассивИменРегистровИсключений = Новый Массив;
	МассивИменРегистровИсключений.Добавить("Хозрасчетный");
	СтруктураИсключений = Новый Структура("МассивТиповИсключений, МассивИменРегистровИсключений", МассивТиповИсключений, МассивИменРегистровИсключений);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект, СтруктураИсключений);
	
КонецПроцедуры
	
// Процедура заполняет регистры данными
//
Процедура ОтразитьДвижения(Отказ, РежимПроведения)

	// Отражение в разделах учета за исключением РБ Хозрасчетный.
	БухгалтерскийУчетСервер.ОтразитьАвансыДоотгрузка(ДополнительныеСвойства,Движения,Ложь);	
	БухгалтерскийУчетСервер.ОтразитьАвансыДоотгрузкаРасшифровка(ДополнительныеСвойства,Движения,Ложь);
	БухгалтерскийУчетСервер.ОтразитьСведенияПоНалогуНаимущество(ДополнительныеСвойства,Движения,Ложь);
	БухгалтерскийУчетСервер.ОтразитьНалоговаяАмортизация(ДополнительныеСвойства, Движения, Ложь);
	БухгалтерскийУчетСервер.ОтразитьНалоговаяВыверка(ДополнительныеСвойства, Движения, Ложь);
	БухгалтерскийУчетСервер.ОтразитьУбыткиПрошлыхЛет(ДополнительныеСвойства, Движения, Ложь);

	НалоговыйУчет.СформироватьДвиженияКорректировкаНУ(ДополнительныеСвойства, Движения, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура - Выполнить закрытие месяца
//
Процедура ВыполнитьЗакрытиеМесяца(ПараметрыПроцедуры, АдресХранилища = Неопределено) Экспорт
	
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(Дата, Организация);
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	// Инициализация данных документа.
	ИнициализироватьДанныеДокумента(ДополнительныеСвойства);
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ИмяСобытия = НСтр("ru = 'Ошибка закрытия месяца'");
	
	ОперацииЗакрытияМесяцаСОшибками = Новый Массив;	
	
	Для Каждого ОперацияЗакрытияМесяца Из ПараметрыПроцедуры.СписокОпераций Цикл 
		
		Ошибки = Неопределено;
		Отказ = Ложь;
		ТекстСообщения = "";
		
		ИмяОперации = ОперацияЗакрытияМесяца.Значение;
		
		// Расчет амортизации ОС.
		Если ИмяОперации = "РасчетАмортизацииОС"
			И РасчетАмортизацииОС Тогда

			Попытка
				РассчитатьАмортизациюОсновныхСредств(ДанныеУчетнойПолитики, Ошибки);
				
				Если Ошибки = Неопределено Тогда 
					ОтразитьАмортизациюОсновныхСредствВУчете(ДополнительныеСвойства);
				КонецЕсли;	
			Исключение
				Отказ = Истина;
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить расчет амортизации по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписатьОшибкуВЖурналРегистрации(ТекстСообщения);
			КонецПопытки;
			
		КонецЕсли;	
		
		// Расчет переоценки валютных средств.
		Если ИмяОперации = "РасчетПереоценкиВалютныхСредств"
			И РасчетПереоценкиВалютныхСредств Тогда 

			Попытка
				РассчитатьПереоценкуВалютныхСредств();
				ОтразитьПереоценкуВалютныхСредств(ДополнительныеСвойства);
			Исключение
				Отказ = Истина;
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить расчет переоценки валютных средств по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписатьОшибкуВЖурналРегистрации(ТекстСообщения);
			КонецПопытки;
			
		КонецЕсли;	
		
		// Расчет списания расходов будущих периодов.
		Если ИмяОперации = "РасчетСписанияРасходовБудущихПериодов"
			И РасчетСписанияРасходовБудущихПериодов Тогда 

			Попытка
				РассчитатьСписаниеРасходовБудущихПериодов();
				ОтразитьСписаниеРасходовБудущихПериодов(ДополнительныеСвойства);
			Исключение
				Отказ = Истина;
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить расчет списания расходов будущих периодов по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписатьОшибкуВЖурналРегистрации(ТекстСообщения);
			КонецПопытки;
			
		КонецЕсли;
		
		Если ИмяОперации = "РасчетНДС"
			И РасчетНДС Тогда 

			Попытка
				Если ДанныеУчетнойПолитики.УчетНДСНаАвансы Тогда 
					РассчитатьНДСНаАвансыДоотгрузку(ДанныеУчетнойПолитики, Ошибки);
				КонецЕсли;	
				РассчитатьНДС(ДанныеУчетнойПолитики);
				
				Если Ошибки = Неопределено Тогда 
					ОтразитьНДС(ДополнительныеСвойства);
				КонецЕсли;	
			Исключение
				Отказ = Истина;
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить расчет НДС на авансы по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписатьОшибкуВЖурналРегистрации(ТекстСообщения);
			КонецПопытки;
	
		КонецЕсли;
		
		// Расчет себестоимости готовой продукции по заказам.
		Если ИмяОперации = "РасчетСтоимостиПродукцииПоЗаказам"
			И РасчетСтоимостиПродукцииПоЗаказам Тогда 
			
			Попытка
				РассчитатьСтоимостиПродукцииПоЗаказам();
				ОтразитьРасчетСтоимостиПродукцииПоЗаказам(ДополнительныеСвойства);
			Исключение
				Отказ = Истина;
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить расчет стоимости продукции по заказам по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписатьОшибкуВЖурналРегистрации(ТекстСообщения);
			КонецПопытки;
	
		КонецЕсли;
		
		// Расчет себестоимости готовой продукции по номенклатурным группам.
		Если ИмяОперации = "РасчетСтоимостиПродукцииПоНоменклатурнымГруппам" 
			И РасчетСтоимостиПродукцииПоНоменклатурнымГруппам Тогда 

			Попытка
				РассчитатьСтоимостиПродукцииПоНоменклатурнымГруппам(ДанныеУчетнойПолитики, ПараметрыПроцедуры.Сообщения, Ошибки);
				Если Ошибки = Неопределено Тогда 
					ОтразитьРасчетСтоимостиПродукцииПоНоменклатурнымГруппам(ДополнительныеСвойства, Ошибки);
				КонецЕсли;
			Исключение
				Отказ = Истина;
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить расчет стоимости продукции по номенклатурным группам по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписатьОшибкуВЖурналРегистрации(ТекстСообщения);
			КонецПопытки;
				
		КонецЕсли;
		
		// Расчет земельного налога.
		Если ИмяОперации = "РасчетЗемельногоНалога"
			И РасчетЗемельногоНалога Тогда 
			
			Попытка
				РассчитатьЗемельныйНалог(ДанныеУчетнойПолитики,Ошибки);
				Если Ошибки = Неопределено Тогда 
					ОтразитьЗемельныйНалог(ДанныеУчетнойПолитики, ДополнительныеСвойства);
				КонецЕсли;	
			Исключение
				Отказ = Истина;
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить расчет земельного налога по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписатьОшибкуВЖурналРегистрации(ТекстСообщения);
			КонецПопытки;
	
		КонецЕсли;	
		
		// Расчет налога на имущество.
		Если ИмяОперации = "РасчетНалогаНаИмущество"
			И РасчетНалогаНаИмущество Тогда 
			
			Попытка
				РассчитатьНалогНаИмущество(Ошибки);
				Если Ошибки = Неопределено Тогда 
					ОтразитьНалогНаИмущество(ДополнительныеСвойства);
				КонецЕсли;	
			Исключение
				Отказ = Истина;
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить расчет налога на имущество по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписатьОшибкуВЖурналРегистрации(ТекстСообщения);
			КонецПопытки;
	
		КонецЕсли;	
		
		// Закрытие временных счетов учета.
		Если ИмяОперации = "ЗакрытьВременныеСчетаУчета"
			И ЗакрытьВременныеСчетаУчета Тогда 
			
			Попытка
				ВыполнитьЗакрытиеВременныхСчетовУчета();
				ОтразитьЗакрытиеВременныхСчетовУчета(ДополнительныеСвойства);
			Исключение
				Отказ = Истина;
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить закрытие временных счетов учета по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписатьОшибкуВЖурналРегистрации(ТекстСообщения);
			КонецПопытки;
		КонецЕсли;	
		
		// Расчет налога на прибыль.
		Если ИмяОперации = "РасчетНалогаНаПрибыль"
			И РасчетНалогаНаПрибыль Тогда 
			
			Попытка
				РассчитатьНалоговуюАмортизацию(ДанныеУчетнойПолитики);
				РассчитатьНалоговуюВыверку(ДанныеУчетнойПолитики, Ошибки);
				Если Ошибки = Неопределено Тогда 
					ОтразитьНалогНаПрибыль(ДополнительныеСвойства);
				КонецЕсли;
			Исключение
				Отказ = Истина;
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить расчет налога на прибль по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписатьОшибкуВЖурналРегистрации(ТекстСообщения);
			КонецПопытки;
		КонецЕсли;
		
		// Расчет единого налога.
		Если ИмяОперации = "РасчетЕдиногоНалога"
			И РасчетЕдиногоНалога Тогда
			
			Попытка
				РассчитатьЕдиныйНалог(ДанныеУчетнойПолитики, ПараметрыПроцедуры.РасчетЕдиногоНалогаЗаКвартал);
				ОтразитьЕдиныйНалог(ДополнительныеСвойства);
			Исключение
				Отказ = Истина;
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить расчет единого налога по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписатьОшибкуВЖурналРегистрации(ТекстСообщения);
			КонецПопытки;
		КонецЕсли;

		// Закрытие парных счетов учета
		Если ИмяОперации = "ЗакрытьПарныеСчетаУчета"
			И ЗакрытьПарныеСчетаУчета Тогда
			
			Попытка
				ВыполнитьЗакрытиеПарныхСчетовУчета();
				ОтразитьЗакрытиеПарныхСчетов(ДополнительныеСвойства);
			Исключение
				Отказ = Истина;
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить закрытие парных счетов учета по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписатьОшибкуВЖурналРегистрации(ТекстСообщения);
			КонецПопытки;
		КонецЕсли;
		
		// Добавление ошибки по операции в общий список ошибок.
		// Это первая ошибка.
		Если НЕ Ошибки = Неопределено
			И ПараметрыПроцедуры.Ошибки = Неопределено Тогда 
			ПараметрыПроцедуры.Ошибки = Ошибки;
			Отказ = Истина;
		// Это последующая ошибка.	
		ИначеЕсли НЕ Ошибки = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПараметрыПроцедуры.Ошибки.СписокОшибок, Ошибки.СписокОшибок);
			Отказ = Истина;
		// Это ошибка отражения. 
		ИначеЕсли Отказ Тогда 
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(ПараметрыПроцедуры.Ошибки, Неопределено, ТекстСообщения, Неопределено);
		КонецЕсли;
		
		Если Отказ Тогда 
			ОперацииЗакрытияМесяцаСОшибками.Добавить(ИмяОперации);
		КонецЕсли;	
		
	КонецЦикла;	
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();

	// Формируем надписи для пользователя.
	СформироватьНадписи(ПараметрыПроцедуры, ОперацииЗакрытияМесяцаСОшибками);
	
	Если НЕ ПроверитьЗаполнение()
		Или НЕ ПараметрыПроцедуры.Ошибки = Неопределено Тогда 
		Движения.Хозрасчетный.Записывать = Истина;
		Движения.Хозрасчетный.Очистить();
		Движения.Хозрасчетный.Записать();
		Возврат;	
	КонецЕсли;		
	
	Попытка
		Записать(РежимЗаписиДокумента.Проведение);
	Исключение

		ТекстСообщения = НСтр("ru = 'Не удалось завершить проведение документа.
			|Техническая информация об ошибке: %1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить проведение документа по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписатьОшибкуВЖурналРегистрации(ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры 

// Инициализирует шапку документа.
//
Процедура ИнициализироватьДанныеДокумента(СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК Ссылка,
		|	ТаблицаДокумента.Дата КАК Период,
		|	ТаблицаДокумента.Организация КАК Организация
		|ПОМЕСТИТЬ ВременнаяТаблицаШапка
		|ИЗ
		|	Документ.ЗакрытиеМесяца КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ПредставлениеПериода", Формат(СтруктураДополнительныеСвойства.ДляПроведения.Дата, "ДФ=ММММ") 
		+ " " + Формат(СтруктураДополнительныеСвойства.ДляПроведения.Дата, "ДФ=гггг"));
	Запрос.Выполнить();    	
	                                  
КонецПроцедуры // ИнициализироватьДанныеДокумента()

#Область ПроведениеРасчетов

// Процедура - Рассчитать амортизацию основных средств по коэффициентам.
//
Процедура РассчитатьАмортизациюОсновныхСредств(ДанныеУчетнойПолитики, Ошибки)
	
	УправлениеВнеоборотнымиАктивами.РассчитатьАмортизациюОсновныхСредств(Неопределено, Дата, Организация, 
		Ссылка, ДанныеУчетнойПолитики, АмортизацияОС, Ошибки); 

КонецПроцедуры // РассчитатьАмортизациюОсновныхСредств()

// Процедура - Рассчитать переоценку валютных средств.
//
Процедура РассчитатьПереоценкуВалютныхСредств()
	
	// Получение суммы остатков по счетам учета по условию
	//	* Валютный
	//	* Без СпособыПризнанияКурсовойРазницы Оперативно или НеРассчитывать	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Хозрасчетный.Ссылка КАК СчетУчета
		|ПОМЕСТИТЬ ТаблицаСчетаУчета
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаСОсобымПорядкомПереоценки КАК СчетаУчетаСОсобымПорядкомПереоценки
		|		ПО Хозрасчетный.Ссылка = СчетаУчетаСОсобымПорядкомПереоценки.СчетУчета
		|ГДЕ
		|	НЕ Хозрасчетный.Забалансовый
		|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
		|	И Хозрасчетный.Валютный
		|	И НЕ ЕСТЬNULL(СчетаУчетаСОсобымПорядкомПереоценки.НеСчитатьНКР, ЛОЖЬ) = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК СчетУчета,
		|	ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДенежныеСредстваВКассе))
		|				ИЛИ ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДенежныеСредстваВБанке))
		|			ТОГДА &СтатьяДДСКурсоваяРазница
		|		ИНАЧЕ ХозрасчетныйОстатки.Субконто2
		|	КОНЕЦ КАК Субконто2,
		|	ХозрасчетныйОстатки.Субконто3 КАК Субконто3,
		|	ХозрасчетныйОстатки.Валюта КАК Валюта,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстатки.СуммаОстаток - (ВЫРАЗИТЬ(ХозрасчетныйОстатки.ВалютнаяСуммаОстаток * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) * ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0) КАК ЧИСЛО(15, 2))) < 0
		|			ТОГДА (ХозрасчетныйОстатки.СуммаОстаток - (ВЫРАЗИТЬ(ХозрасчетныйОстатки.ВалютнаяСуммаОстаток * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) * ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0) КАК ЧИСЛО(15, 2)))) * -1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаДоход,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстатки.СуммаОстаток - (ВЫРАЗИТЬ(ХозрасчетныйОстатки.ВалютнаяСуммаОстаток * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) * ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0) КАК ЧИСЛО(15, 2))) > 0
		|			ТОГДА ХозрасчетныйОстатки.СуммаОстаток - (ВЫРАЗИТЬ(ХозрасчетныйОстатки.ВалютнаяСуммаОстаток * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) * ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0) КАК ЧИСЛО(15, 2)))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаУбыток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			ДОБАВИТЬКДАТЕ(&Период, СЕКУНДА, 1),
		|			Счет В
		|				(ВЫБРАТЬ
		|					ТаблицаСчетаУчета.СчетУчета
		|				ИЗ
		|					ТаблицаСчетаУчета КАК ТаблицаСчетаУчета),
		|			,
		|			Организация = &Организация
		|				И НЕ Валюта = &ВалютаРегламентированногоУчета) КАК ХозрасчетныйОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсыВалютСрезПоследних
		|		ПО ХозрасчетныйОстатки.Валюта = КурсыВалютСрезПоследних.Валюта
		|ГДЕ
		|	ХозрасчетныйОстатки.СуммаОстаток <> (ВЫРАЗИТЬ(ХозрасчетныйОстатки.ВалютнаяСуммаОстаток * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) * ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0) КАК ЧИСЛО(15, 2)))
		|	И (ХозрасчетныйОстатки.СуммаОстаток - (ВЫРАЗИТЬ(ХозрасчетныйОстатки.ВалютнаяСуммаОстаток * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) * ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0) КАК ЧИСЛО(15, 2))) >= 0.005
		|			ИЛИ ХозрасчетныйОстатки.СуммаОстаток - (ВЫРАЗИТЬ(ХозрасчетныйОстатки.ВалютнаяСуммаОстаток * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) * ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0) КАК ЧИСЛО(15, 2))) <= -0.005)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ХозрасчетныйОстатки.Счет.Код";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Период", Дата); 
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	Запрос.УстановитьПараметр("СтатьяДДСКурсоваяРазница", Константы.СтатьяДДСКурсоваяРазница.Получить());
	
	ПереоценкаВалюты.Загрузить(Запрос.Выполнить().Выгрузить())
	
КонецПроцедуры // РассчитатьПереоценкуВалютныхСредств()

// Процедура - Рассчитать списание расходов будущих периодов
//
Процедура РассчитатьСписаниеРасходовБудущихПериодов()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходыБудущихПериодов.СчетУчета КАК СчетДт,
		|	РасходыБудущихПериодов.Ссылка КАК РБП,
		|	РасходыБудущихПериодов.ДатаНачалаСписания КАК ДатаНачалаСписания,
		|	КОНЕЦПЕРИОДА(РасходыБудущихПериодов.ДатаОкончанияСписания, ДЕНЬ) КАК ДатаОкончанияСписания,
		|	ВЫБОР
		|		КОГДА РасходыБудущихПериодов.ДатаНачалаСписания > НАЧАЛОПЕРИОДА(РасходыБудущихПериодов.ДатаНачалаСписания, МЕСЯЦ)
		|			ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(РасходыБудущихПериодов.ДатаНачалаСписания, МЕСЯЦ, 1), МЕСЯЦ)
		|		ИНАЧЕ РасходыБудущихПериодов.ДатаНачалаСписания
		|	КОНЕЦ КАК ДатаНачалаПолногоМесяцаСписания,
		|	ВЫБОР
		|		КОГДА КОНЕЦПЕРИОДА(РасходыБудущихПериодов.ДатаОкончанияСписания, ДЕНЬ) < КОНЕЦПЕРИОДА(РасходыБудущихПериодов.ДатаОкончанияСписания, МЕСЯЦ)
		|			ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(РасходыБудущихПериодов.ДатаОкончанияСписания, МЕСЯЦ, -1), МЕСЯЦ)
		|		ИНАЧЕ КОНЕЦПЕРИОДА(РасходыБудущихПериодов.ДатаОкончанияСписания, ДЕНЬ)
		|	КОНЕЦ КАК ДатаОкончанияПолногоМесяцаСписания,
		|	РасходыБудущихПериодов.Себестоимость КАК Себестоимость,
		|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыБудущихПериодов), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов), Организация = &Организация) КАК ХозрасчетныйОстатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РасходыБудущихПериодов КАК РасходыБудущихПериодов
		|		ПО ХозрасчетныйОстатки.Субконто1 = РасходыБудущихПериодов.Ссылка
		|ГДЕ
		|	&Период МЕЖДУ РасходыБудущихПериодов.ДатаНачалаСписания И КОНЕЦПЕРИОДА(РасходыБудущихПериодов.ДатаОкончанияСписания, МЕСЯЦ)";
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Распределение себестоимости для расчета суммы списания.
		Если ВыборкаДетальныеЗаписи.ДатаНачалаСписания < НачалоМесяца(ВыборкаДетальныеЗаписи.ДатаОкончанияСписания) Тогда
			
			//// Определение даты начала полного месяца.
			//Если ВыборкаДетальныеЗаписи.ДатаНачалаСписания > НачалоМесяца(ВыборкаДетальныеЗаписи.ДатаНачалаСписания) Тогда
			//	ДатаНачалаПолногоМесяцаСписания = НачалоМесяца(ДобавитьМесяц(ВыборкаДетальныеЗаписи.ДатаНачалаСписания, 1));
			//Иначе
			//	ДатаНачалаПолногоМесяцаСписания = ВыборкаДетальныеЗаписи.ДатаНачалаСписания;
			//КонецЕсли;
			//
			//// Определение даты окончания полного месяца.
			//Если КонецДня(ВыборкаДетальныеЗаписи.ДатаОкончанияСписания) < КонецМесяца(ВыборкаДетальныеЗаписи.ДатаОкончанияСписания) Тогда
			//	ДатаОкончанияПолногоМесяцаСписания = КонецМесяца(ДобавитьМесяц(ВыборкаДетальныеЗаписи.ДатаОкончанияСписания, -1));
			//Иначе
			//	ДатаОкончанияПолногоМесяцаСписания = КонецДня(ВыборкаДетальныеЗаписи.ДатаОкончанияСписания);
			//КонецЕсли;
			
			// Расчет количество полных месяцев.
			Если ВыборкаДетальныеЗаписи.ДатаОкончанияПолногоМесяцаСписания >= ВыборкаДетальныеЗаписи.ДатаНачалаПолногоМесяцаСписания Тогда
				КоличествоПолныхМесяцев = (Год(ВыборкаДетальныеЗаписи.ДатаОкончанияПолногоМесяцаСписания) - Год(ВыборкаДетальныеЗаписи.ДатаНачалаПолногоМесяцаСписания)) * 12 
					+ Месяц(ВыборкаДетальныеЗаписи.ДатаОкончанияПолногоМесяцаСписания) - Месяц(ВыборкаДетальныеЗаписи.ДатаНачалаПолногоМесяцаСписания) + 1;
			Иначе
				КоличествоПолныхМесяцев = 0;
			КонецЕсли;

			// Расчет Суммы списания по дням.
			КоличествоДней = Цел((ВыборкаДетальныеЗаписи.ДатаОкончанияСписания - ВыборкаДетальныеЗаписи.ДатаНачалаСписания) / 86400) + 1;
			СуммаСписанияПервогоМесяца = Окр(ВыборкаДетальныеЗаписи.Себестоимость * (ВыборкаДетальныеЗаписи.ДатаНачалаПолногоМесяцаСписания - ВыборкаДетальныеЗаписи.ДатаНачалаСписания) / 86400 / КоличествоДней, 2);
			СуммаСписанияПоследнегоМесяца = Окр(ВыборкаДетальныеЗаписи.Себестоимость * (ВыборкаДетальныеЗаписи.ДатаОкончанияСписания - ВыборкаДетальныеЗаписи.ДатаОкончанияПолногоМесяцаСписания) / 86400 / КоличествоДней, 2);
			
			// Расчет суммы списания полоного месяца.
			СуммаСписанияПолногоМесяца = 0;
			Если КоличествоПолныхМесяцев > 0 Тогда
				СуммаСписанияПолногоМесяца = Окр((ВыборкаДетальныеЗаписи.Себестоимость - СуммаСписанияПервогоМесяца - СуммаСписанияПоследнегоМесяца) / КоличествоПолныхМесяцев, 2);
			КонецЕсли;
			
			// Корректировка Суммы списания последного месяца.
			СуммаСписанияПоследнегоМесяца = ВыборкаДетальныеЗаписи.Себестоимость - СуммаСписанияПервогоМесяца - СуммаСписанияПолногоМесяца * КоличествоПолныхМесяцев;
			
			// Определения Суммы списания текущего месяца.
			Если НачалоМесяца(ВыборкаДетальныеЗаписи.ДатаНачалаСписания) = НачалоМесяца(Дата)
				И СуммаСписанияПервогоМесяца > 0 Тогда
				СуммаСписания = СуммаСписанияПервогоМесяца;
			ИначеЕсли ВыборкаДетальныеЗаписи.ДатаОкончанияСписания = Дата Тогда
				СуммаСписания = СуммаСписанияПолногоМесяца + СуммаСписанияПоследнегоМесяца;
			ИначеЕсли КонецМесяца(ВыборкаДетальныеЗаписи.ДатаОкончанияСписания) = Дата
				И СуммаСписанияПоследнегоМесяца > 0 Тогда 
				СуммаСписания = СуммаСписанияПоследнегоМесяца;
			Иначе
				СуммаСписания = СуммаСписанияПолногоМесяца;
			КонецЕсли;
			
		Иначе
			СуммаСписания = ВыборкаДетальныеЗаписи.Себестоимость;
		КонецЕсли;	
		
		// Контроль остатка.
		Если СуммаСписания > ВыборкаДетальныеЗаписи.СуммаОстаток Тогда 
			СуммаСписания = ВыборкаДетальныеЗаписи.СуммаОстаток;
		КонецЕсли;		
		
		Если СуммаСписания = 0 Тогда 
			Продолжить;
		КонецЕсли;	
		
		СтрокаТабличнойЧасти = РасходыБП.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаДетальныеЗаписи); 
		
		СтрокаТабличнойЧасти.Сумма = СуммаСписания;
	КонецЦикла;
	
КонецПроцедуры

// Процедура - Рассчитать НДС на авансы и доотгрузку.
//
Процедура РассчитатьНДСНаАвансыДоотгрузку(ДанныеУчетнойПолитики, Ошибки)
	
	ЗначениеСтавкиНСП = УчетНДС.ПолучитьСтавкуНСП(Дата, Организация, ДанныеУчетнойПолитики.СтавкаНСПДляРасчетаНДСНаАвансы);
		
	// Описание таблиц запроса:
	// 1. Основная таблица для выбора договоров и сумм оборотов для дальнейшей обработки этих данных;	
	// 2. Таблица списка контрагентов - выборка неповторяющихся строк пункта 1;
	// 3. Таблица из 1 пункта, с корректировкой знака у сумм документов "возврат от покупателя";
	// 4. Таблица отгрузка текущего месяца, выборка из пункта 1 с условием не суммы оборотов дт > 0 (страховка от возврата);
	// 5. Таблица сальдо Дт нач. - получает начальное (на начало месяца) сальдо Дт по договорам из пункта 1;
	// 6. Таблица остатков авансов на начало месяца;
	// 7. Таблица начальных остатков - к договорам (пункт 5) прибавляются данные пунктов 6, 4, а также значения ставок НДС и НСП; 
	// 8. Таблица остатков авансов на начало месяца, по которым не было доотгрузок;
	// 9. Упорядоченная таблица итогов пункта 7;
	// 10. Упорядоченная таблица по пункту 2 с проверкой на не нулевую сумму оплаты;
	// 11. Сгруппированная таблица по пункту 3.	
	ТекстыЗапроса = Новый Массив;
	
	// Основная таблица для выбора договоров и сумм оборотов для дальнейшей обработки этих данных.
	// Выбираются только обороты по договорам с видом договора "С покупателем" и ставкой "Стандарт".
	// Поэтому эти реквизиты в уже существующих договорах нельзя изменять.
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
		|	ХозрасчетныйОбороты.Счет КАК Счет,
		|	ХозрасчетныйОбороты.Субконто1 КАК Контрагент,
		|	ХозрасчетныйОбороты.Субконто2 КАК Договор,
		|	ХозрасчетныйОбороты.Период КАК ДатаДокумента,
		|	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
		|	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт
		|ПОМЕСТИТЬ ВременнаяТаблицаОборотыРБ
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Регистратор,
		|			Счет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНаАвансы),
		|			&ВидыСубконто,
		|			Организация = &Организация
		|				И Субконто2.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
		|				И Субконто2.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.Стандарт),
		|			,
		|			) КАК ХозрасчетныйОбороты";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Список контрагентов, договоров (по которым были движения).
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ХозрасчетныйОбороты.Контрагент КАК Контрагент,
		|	ХозрасчетныйОбороты.Договор КАК Договор,
		|	ХозрасчетныйОбороты.Договор.СтавкаНДС КАК СтавкаНДС
		|ПОМЕСТИТЬ ВременнаяТаблицаСписокКонтрагентов
		|ИЗ
		|	ВременнаяТаблицаОборотыРБ КАК ХозрасчетныйОбороты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Договор,
		|	СтавкаНДС";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Оплата месяца.
	// Корректировка знака сумм у документов "возврат от покупателя".
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаОборотыРБ.Регистратор КАК Регистратор,
		|	ВременнаяТаблицаОборотыРБ.Контрагент КАК Контрагент,
		|	ВременнаяТаблицаОборотыРБ.Договор КАК Договор,
		|	ВременнаяТаблицаОборотыРБ.ДатаДокумента КАК ДатаДокумента,
		|	ВременнаяТаблицаОборотыРБ.СуммаОборотКт - ВременнаяТаблицаОборотыРБ.СуммаОборотДт КАК Оплата
		|ПОМЕСТИТЬ ВременнаяТаблицаОплатаТекущегоМесяца
		|ИЗ
		|	ВременнаяТаблицаОборотыРБ КАК ВременнаяТаблицаОборотыРБ
		|ГДЕ
		|	ВременнаяТаблицаОборотыРБ.СуммаОборотДт < 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаОборотыРБ.Регистратор,
		|	ВременнаяТаблицаОборотыРБ.Контрагент,
		|	ВременнаяТаблицаОборотыРБ.Договор,
		|	ВременнаяТаблицаОборотыРБ.ДатаДокумента,
		|	ВременнаяТаблицаОборотыРБ.СуммаОборотКт
		|ИЗ
		|	ВременнаяТаблицаОборотыРБ КАК ВременнаяТаблицаОборотыРБ
		|ГДЕ
		|	ВременнаяТаблицаОборотыРБ.СуммаОборотКт > 0
		|	И НЕ ВременнаяТаблицаОборотыРБ.Счет.Временный";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Отгрузка текущего месяца.
	// Корректировка знака сумм у документов "возврат от покупателя".
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаОборотыРБ.Регистратор КАК Регистратор,
		|	ВременнаяТаблицаОборотыРБ.ДатаДокумента КАК ДатаДокумента,
		|	ВременнаяТаблицаОборотыРБ.Контрагент КАК Контрагент,
		|	ВременнаяТаблицаОборотыРБ.Договор КАК Договор,
		|	ВременнаяТаблицаОборотыРБ.СуммаОборотДт КАК Отгрузка
		|ПОМЕСТИТЬ ВременнаяТаблицаОтгрузкаТекущегоМесяца
		|ИЗ
		|	ВременнаяТаблицаОборотыРБ КАК ВременнаяТаблицаОборотыРБ
		|ГДЕ
		|	ВременнаяТаблицаОборотыРБ.СуммаОборотДт > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаОборотыРБ.Регистратор,
		|	ВременнаяТаблицаОборотыРБ.ДатаДокумента,
		|	ВременнаяТаблицаОборотыРБ.Контрагент,
		|	ВременнаяТаблицаОборотыРБ.Договор,
		|	ВременнаяТаблицаОборотыРБ.СуммаОборотДт - ВременнаяТаблицаОборотыРБ.СуммаОборотКт
		|ИЗ
		|	ВременнаяТаблицаОборотыРБ КАК ВременнаяТаблицаОборотыРБ
		|ГДЕ
		|	ВременнаяТаблицаОборотыРБ.СуммаОборотКт < 0
		|	И НЕ ВременнаяТаблицаОборотыРБ.Счет.Временный";
	ТекстыЗапроса.Добавить(ТекстЗапроса);

	// Остатки авансов на начало месяца.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	АвансыДоотгрузкаОстатки.Контрагент КАК Контрагент,
		|	АвансыДоотгрузкаОстатки.Договор КАК Договор,
		|	АвансыДоотгрузкаОстатки.СуммаОстаток КАК СуммаОстаток,
		|	АвансыДоотгрузкаОстатки.СуммаНДСОстаток КАК СуммаНДСОстаток,
		|	АвансыДоотгрузкаОстатки.СуммаНСПОстаток КАК СуммаНСПОстаток,
		|	АвансыДоотгрузкаОстатки.ДокументА КАК ДокументАванса,
		|	АвансыДоотгрузкаОстатки.ДокументА.Дата КАК ДатаДокумента,
		|	АвансыДоотгрузкаОстатки.СуммаОстаток КАК СуммаАванса
		|ПОМЕСТИТЬ ВременнаяТаблицаОстаткиАвансовНаНачалоМесяца
		|ИЗ
		|	РегистрНакопления.АвансыДоотгрузка.Остатки(&НачалоПериода, Организация = &Организация) КАК АвансыДоотгрузкаОстатки";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Список контрагентов с ранее полученными остатками, а также значения ставок НДС и НСП.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаСписокКонтрагентов.Контрагент КАК Контрагент,
		|	ВременнаяТаблицаСписокКонтрагентов.Договор КАК Договор,
		|	ЕСТЬNULL(ВременнаяТаблицаОстаткиАвансовНаНачалоМесяца.СуммаОстаток, 0) КАК СуммаАванса,
		|	ЕСТЬNULL(ВременнаяТаблицаОстаткиАвансовНаНачалоМесяца.СуммаНДСОстаток, 0) КАК СуммаНДСОстаток,
		|	ЕСТЬNULL(ВременнаяТаблицаОстаткиАвансовНаНачалоМесяца.СуммаНСПОстаток, 0) КАК СуммаНСПОстаток,
		|	ЕСТЬNULL(СтавкиНДССрезПоследних.Ставка, 0) КАК ЗначениеСтавкиНДС,
		|	&ЗначениеСтавкиНСП КАК ЗначениеСтавкиНСП,
		|	ВременнаяТаблицаОстаткиАвансовНаНачалоМесяца.ДокументАванса КАК ДокументАванса,
		|	ВременнаяТаблицаОстаткиАвансовНаНачалоМесяца.ДатаДокумента КАК ДатаДокумента
		|ПОМЕСТИТЬ ВременнаяТаблицаОстаткиНач
		|ИЗ
		|	ВременнаяТаблицаСписокКонтрагентов КАК ВременнаяТаблицаСписокКонтрагентов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОстаткиАвансовНаНачалоМесяца КАК ВременнаяТаблицаОстаткиАвансовНаНачалоМесяца
		|		ПО ВременнаяТаблицаСписокКонтрагентов.Договор = ВременнаяТаблицаОстаткиАвансовНаНачалоМесяца.Договор
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНДС.СрезПоследних(&КонецПериода, ) КАК СтавкиНДССрезПоследних
		|		ПО ВременнаяТаблицаСписокКонтрагентов.СтавкаНДС = СтавкиНДССрезПоследних.СтавкаНДС";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Остатки авансов, по которым не было доотгрузок.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаОстаткиАвансовНаНачалоМесяца.Контрагент КАК Контрагент,
		|	ВременнаяТаблицаОстаткиАвансовНаНачалоМесяца.Договор КАК Договор,
		|	ВременнаяТаблицаОстаткиАвансовНаНачалоМесяца.ДокументАванса КАК Документ,
		|	ВременнаяТаблицаОстаткиАвансовНаНачалоМесяца.ДатаДокумента КАК ДатаДокумента,
		|	ВременнаяТаблицаОстаткиАвансовНаНачалоМесяца.СуммаАванса КАК Сумма
		|ИЗ
		|	ВременнаяТаблицаОстаткиАвансовНаНачалоМесяца КАК ВременнаяТаблицаОстаткиАвансовНаНачалоМесяца
		|ГДЕ
		|	НЕ ВременнаяТаблицаОстаткиАвансовНаНачалоМесяца.Договор В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					ВременнаяТаблицаСписокКонтрагентов.Договор
		|				ИЗ
		|					ВременнаяТаблицаСписокКонтрагентов КАК ВременнаяТаблицаСписокКонтрагентов)";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Упорядоченная таблица остатков.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаОстаткиНач.Контрагент КАК Контрагент,
		|	ВременнаяТаблицаОстаткиНач.Договор КАК Договор,
		|	ЕСТЬNULL(ВременнаяТаблицаОстаткиНач.СуммаАванса, 0) КАК СуммаАванса,
		|	ЕСТЬNULL(ВременнаяТаблицаОстаткиНач.СуммаНДСОстаток, 0) КАК СуммаНДСОстаток,
		|	ЕСТЬNULL(ВременнаяТаблицаОстаткиНач.СуммаНСПОстаток, 0) КАК СуммаНСПОстаток,
		|	ВременнаяТаблицаОстаткиНач.ЗначениеСтавкиНДС КАК ЗначениеСтавкиНДС,
		|	ВременнаяТаблицаОстаткиНач.ЗначениеСтавкиНСП КАК ЗначениеСтавкиНСП,
		|	ВременнаяТаблицаОстаткиНач.ДокументАванса КАК Документ,
		|	ВременнаяТаблицаОстаткиНач.ДатаДокумента КАК Период
		|ИЗ
		|	ВременнаяТаблицаОстаткиНач КАК ВременнаяТаблицаОстаткиНач
		|
		|УПОРЯДОЧИТЬ ПО
		|	Договор,
		|	Период
		|ИТОГИ
		|	МАКСИМУМ(Контрагент),
		|	МАКСИМУМ(СуммаНДСОстаток),
		|	МАКСИМУМ(СуммаНСПОстаток),
		|	МАКСИМУМ(ЗначениеСтавкиНДС),
		|	МАКСИМУМ(ЗначениеСтавкиНСП)
		|ПО
		|	Договор";
	ТекстыЗапроса.Добавить(ТекстЗапроса);

	// Упорядоченная таблица оплат, с проверкой на не нулевую сумму.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаОплатаТекущегоМесяца.Регистратор КАК Документ,
		|	ВременнаяТаблицаОплатаТекущегоМесяца.Контрагент КАК Контрагент,
		|	ВременнаяТаблицаОплатаТекущегоМесяца.Договор КАК Договор,
		|	ВременнаяТаблицаОплатаТекущегоМесяца.Оплата КАК Оплата,
		|	ВременнаяТаблицаОплатаТекущегоМесяца.ДатаДокумента КАК Период
		|ИЗ
		|	ВременнаяТаблицаОплатаТекущегоМесяца КАК ВременнаяТаблицаОплатаТекущегоМесяца
		|ГДЕ
		|	ВременнаяТаблицаОплатаТекущегоМесяца.Оплата <> 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Сгруппированная таблица откгрузок текущего месяца.	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаОтгрузкаТекущегоМесяца.Регистратор КАК Регистратор,
		|	ВременнаяТаблицаОтгрузкаТекущегоМесяца.Контрагент КАК Контрагент,
		|	ВременнаяТаблицаОтгрузкаТекущегоМесяца.Договор КАК Договор,
		|	СУММА(ВременнаяТаблицаОтгрузкаТекущегоМесяца.Отгрузка) КАК Отгрузка,
		|	ВременнаяТаблицаОтгрузкаТекущегоМесяца.ДатаДокумента КАК Период
		|ИЗ
		|	ВременнаяТаблицаОтгрузкаТекущегоМесяца КАК ВременнаяТаблицаОтгрузкаТекущегоМесяца
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаОтгрузкаТекущегоМесяца.Регистратор,
		|	ВременнаяТаблицаОтгрузкаТекущегоМесяца.Контрагент,
		|	ВременнаяТаблицаОтгрузкаТекущегоМесяца.Договор,
		|	ВременнаяТаблицаОтгрузкаТекущегоМесяца.ДатаДокумента
		|
		|УПОРЯДОЧИТЬ ПО
		|	Договор,
		|	Период";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// ОСтаток неоплаченных отгрузок на начало месяца
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
		|	ХозрасчетныйОстатки.Субконто2 КАК Договор,
		|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаНеоплаченныхОтгрузокНаНачало
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&НачалоПериода,
		|			Счет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНаАвансы),
		|			&ВидыСубконто,
		|			Организация = &Организация
		|				И Субконто2.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
		|				И Субконто2.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.Стандарт)) КАК ХозрасчетныйОстатки
		|ГДЕ
		|	ХозрасчетныйОстатки.СуммаОстаток > 0";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());

	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);	
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	Запрос.УстановитьПараметр("КонецПериода", 		КонецМесяца(Дата));
	Запрос.УстановитьПараметр("НачалоПериода", 		НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("ВидыСубконто",		ВидыСубконто);
	Запрос.УстановитьПараметр("Организация", 		Организация);          
	Запрос.УстановитьПараметр("ЗначениеСтавкиНСП", 	ЗначениеСтавкиНСП);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаНеотгруженныхАвансов = РезультатЗапроса[6].Выгрузить();
	ВыборкаДоговор 				= РезультатЗапроса[7].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ТаблицаОплат 				= РезультатЗапроса[8].Выгрузить();
	ТаблицаОтгрузок 			= РезультатЗапроса[9].Выгрузить();
	ТаблицаНеоплаченныхОтгрузок = РезультатЗапроса[10].Выгрузить();
	
	МассивТиповДокументов = Новый Массив;
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));                                     
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеВходящее")); 
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.ОплатаПлатежнойКартой")); 
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер")); 
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.ВводНачальныхОстатков"));	
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));                                     
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее")); 
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщику")); 
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.ОперацияБух"));
	
	ОписаниеТиповДокументов = Новый ОписаниеТипов(МассивТиповДокументов);
	
	ТЗАвансы = Новый ТаблицаЗначений;               
	ТЗАвансы.Колонки.Добавить("Период", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТЗАвансы.Колонки.Добавить("Документ", ОписаниеТиповДокументов);
	ТЗАвансы.Колонки.Добавить("СуммаАванса", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТЗАвансы.Колонки.Добавить("СуммаНДСОстаток", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТЗАвансы.Колонки.Добавить("СуммаНСПОстаток", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТЗАвансы.Колонки.Добавить("ЗначениеСтавкиНДС", ОбщегоНазначения.ОписаниеТипаЧисло(10,2));
	ТЗАвансы.Колонки.Добавить("ЗначениеСтавкиНСП", ОбщегоНазначения.ОписаниеТипаЧисло(10,2));
	ТЗАвансы.Колонки.Добавить("СальдоНаНачало", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	
	// Заполнение авансов прошлого месяца, для которых нет доотгрузок.
	Для Каждого СтрокаТаблицы Из ТаблицаНеотгруженныхАвансов Цикл	
		СтрокаТабличнойЧасти = АвансыИДоотгрузка.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТаблицы);
		СтрокаТабличнойЧасти.СуммаАвансНачало 	= СтрокаТаблицы.Сумма;
		СтрокаТабличнойЧасти.СуммаАвансКонец 	= СтрокаТаблицы.Сумма;
	КонецЦикла;	
	
	Пока ВыборкаДоговор.Следующий() Цикл
		
		СуммаАвансовНаНачалоМесяца = 0;
		
		Договор = ВыборкаДоговор.Договор;		
		
		// Доотгрузка
		ТЗАвансы.Очистить();
		ВыборкаДокумента = ВыборкаДоговор.Выбрать();
		
		Пока ВыборкаДокумента.НайтиСледующий(Договор, "Договор")  Цикл
			Если ВыборкаДокумента.СуммаАванса > 0 Тогда
				СТЗ = ТЗАвансы.Добавить();
				ЗаполнитьЗначенияСвойств(СТЗ, ВыборкаДокумента);
				
				СуммаАвансовНаНачалоМесяца = СуммаАвансовНаНачалоМесяца + ВыборкаДокумента.СуммаАванса;
			КонецЕсли;
		КонецЦикла;
		
		ВсегоАвансов = ТЗАвансы.Количество();
		Счетчик = 0;
		ОстатокТекущегоАванса = 0;
		ОтборПоДоговору = Новый Структура("Договор", Договор);		
		
		Если ТЗАвансы.Количество() > 0 Тогда
			ОстатокТекущегоАванса = ТЗАвансы[Счетчик].СуммаАванса;
			ТекущийОстатокНДС = ТЗАвансы[Счетчик].СуммаНДСОстаток;
			ТекущийОстатокНСП = ТЗАвансы[Счетчик].СуммаНСПОстаток;
			
			ТЗДоотгрузка = ТаблицаОтгрузок.Скопировать(ТаблицаОтгрузок.НайтиСтроки(ОтборПоДоговору));
			Для Каждого СтрокаТЗДоотгрузки Из ТЗДоотгрузка  Цикл       
				// Если все авансы закончились, то выход
				Если Счетчик > ВсегоАвансов - 1 Тогда 
					Прервать;
				КонецЕсли;				
				
				ОстатокТекущейОтгрузки = СтрокаТЗДоотгрузки.Отгрузка;   			
				
				// Перебираем авансы до тех пор пока не кончится очередная отгрузка или аванс
				Пока ОстатокТекущейОтгрузки > 0 Цикл
					
					Если ОстатокТекущегоАванса <= 0 Тогда
						Счетчик = Счетчик + 1;
						Если Счетчик > ВсегоАвансов - 1 Тогда
							Прервать;
						КонецЕсли;
						ОстатокТекущегоАванса = ТЗАвансы[Счетчик].СуммаАванса;
						ТекущийОстатокНДС = ТЗАвансы[Счетчик].СуммаНДСОстаток;
						ТекущийОстатокНСП = ТЗАвансы[Счетчик].СуммаНСПОстаток;
						Продолжить;			 
					КонецЕсли; 
					// СозданиеДоотгрузки
					СуммаДоотгрузки = Мин(ОстатокТекущегоАванса, ОстатокТекущейОтгрузки);
					
					ТекущийДокументАванса = ТЗАвансы[Счетчик].Документ;
					
					МассивСтрок = ДоотгрузкаРасшифровка.НайтиСтроки(Новый Структура("ДокументОперации", ТекущийДокументАванса));
					
					// Условие для обобщающей строки с указанием документа аванса, который доотгружается.
					Если МассивСтрок.Количество() = 0 Тогда
						СтрокаТабличнойЧасти					= ДоотгрузкаРасшифровка.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТЗДоотгрузки); 
						СтрокаТабличнойЧасти.ДокументОперации	= ТекущийДокументАванса;
						СтрокаТабличнойЧасти.ДатаДокумента		= ТЗАвансы[Счетчик].Период;
						СтрокаТабличнойЧасти.СуммаОстатокАванса = ОстатокТекущегоАванса;
					КонецЕсли;					
					
					// Строка доотгрузки для выше указанного аванса.
					СтрокаТабличнойЧасти					= ДоотгрузкаРасшифровка.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТЗДоотгрузки);
					СтрокаТабличнойЧасти.ДокументОперации 	= СтрокаТЗДоотгрузки.Регистратор;
					СтрокаТабличнойЧасти.ДатаДокумента		= СтрокаТЗДоотгрузки.Период;
					СтрокаТабличнойЧасти.Сумма 				= СуммаДоотгрузки;
					СтрокаТабличнойЧасти.ДокументАванса		= ТекущийДокументАванса;
					
					// Списание сумм НДС и НСП 
					Если ОстатокТекущегоАванса > ОстатокТекущейОтгрузки Тогда
						СтрокаТабличнойЧасти.СуммаНДС 	= Окр(СуммаДоотгрузки / ТЗАвансы[Счетчик].СуммаАванса * ТЗАвансы[Счетчик].СуммаНДСОстаток, 2);
						СтрокаТабличнойЧасти.СуммаНСП 	= Окр(СуммаДоотгрузки / ТЗАвансы[Счетчик].СуммаАванса * ТЗАвансы[Счетчик].СуммаНСПОстаток, 2);							
						ТекущийОстатокНДС 				= ТекущийОстатокНДС - СтрокаТабличнойЧасти.СуммаНДС;
						ТекущийОстатокНСП 				= ТекущийОстатокНСП - СтрокаТабличнойЧасти.СуммаНСП;
					Иначе
						СтрокаТабличнойЧасти.СуммаНДС 	= ТекущийОстатокНДС;
						СтрокаТабличнойЧасти.СуммаНСП 	= ТекущийОстатокНСП;						
					КонецЕсли;					
					
					// Остаток аванса			
					ОстатокТекущегоАванса = ОстатокТекущегоАванса - СуммаДоотгрузки; 
					
					Если ОстатокТекущегоАванса > 0 Тогда
						СтрокаТабличнойЧасти.СуммаОстатокАванса = ОстатокТекущегоАванса;	
					КонецЕсли;	
					
					// Если текущая отгрузка закончилась, то начинаем новую
					ОстатокТекущейОтгрузки		= ОстатокТекущейОтгрузки - СуммаДоотгрузки;			
					Если ОстатокТекущейОтгрузки = 0 Тогда 
						Прервать;
					КонецЕсли;
					
					// Если очередной аванс кончился, то начинаем следующий
					Если ОстатокТекущегоАванса <= 0 Тогда
						Счетчик = Счетчик + 1;
						
						// Проверяем, кончились авансы или нет
						Если Счетчик <= ВсегоАвансов - 1 Тогда 
							ОстатокТекущегоАванса 		= ТЗАвансы[Счетчик].СуммаАванса;
							ТекущийОстатокНДС 	= ТЗАвансы[Счетчик].СуммаНДСОстаток;
							ТекущийОстатокНСП 	= ТЗАвансы[Счетчик].СуммаНСПОстаток;
						Иначе
							Прервать;
						КонецЕсли; // Если все авансы закончились, то выход во внешний цикл и выход оттуда
						
						Продолжить;								
					КонецЕсли; 					
				КонецЦикла;				
			КонецЦикла;			
		КонецЕсли; 
		
		// Авансы
		ТЗОплата = ТаблицаОплат.Скопировать(ТаблицаОплат.НайтиСтроки(ОтборПоДоговору));
		
		ВремТаблицаОтгрузок = ТаблицаОтгрузок.Скопировать(ТаблицаОтгрузок.НайтиСтроки(ОтборПоДоговору));
		ВремДоотгрузка 		= ДоотгрузкаРасшифровка.Выгрузить(ДоотгрузкаРасшифровка.НайтиСтроки(ОтборПоДоговору));
		ВремТаблицаНеоплаченныхОтгрузок = ТаблицаНеоплаченныхОтгрузок.Скопировать(ТаблицаНеоплаченныхОтгрузок.НайтиСтроки(ОтборПоДоговору));
		
				
		Оплата = ТЗОплата.Итог("Оплата"); // включая возврат ТМЗ от покупателя
		Отгрузка = ВремТаблицаОтгрузок.Итог("Отгрузка"); // включая возврат ДС
		ИтогСуммаДоотгрузки = ВремДоотгрузка.Итог("Сумма");
		СуммаНеоплаченныхОтгрузокНаНачало = ВремТаблицаНеоплаченныхОтгрузок.Итог("СуммаНеоплаченныхОтгрузокНаНачало"); 
		
		ТекущаяОтгрузка = Макс(0,(Отгрузка - ИтогСуммаДоотгрузки));
		
		//ОстАванс = Макс(0, Оплата - ТекущаяОтгрузка - ВыборкаДоговор.СальдоДтНач);
		ОстАванс = Макс(0, Оплата - ТекущаяОтгрузка - СуммаНеоплаченныхОтгрузокНаНачало); // - СуммаАвансовНаНачалоМесяца);
		
		СуммарнаяСтрокаСоздана = Ложь;
		ОбщаяСуммаАванса = 0;
		
		Для каждого СТЗ Из ТЗОплата Цикл
			
			ТекАванс = Мин(СТЗ.Оплата, ОстАванс);
			
			Если ТекАванс > 0 Тогда
				
				// Создание суммарной строки аванса по контрагенту и договору.
				// Сумма аванса еще не подсчитана, поэтому в данный момент она не указывается. 
				// См. ниже пункт "Заполнение общей суммы аванса"
				Если НЕ СуммарнаяСтрокаСоздана Тогда
					СтрокаТабличнойЧасти = АвансыРасшифровка.Добавить();
					СтрокаТабличнойЧасти.Контрагент = СТЗ.Контрагент;
					СтрокаТабличнойЧасти.Договор = СТЗ.Договор;
					СтрокаТабличнойЧасти.Уровень = 2;
					
					СуммарнаяСтрокаСоздана = Истина;
				КонецЕсли;	
				
				// Расшифровочная строка 
				СтрокаТабличнойЧасти = АвансыРасшифровка.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СТЗ);
				СтрокаТабличнойЧасти.ДатаДокумента = СТЗ.Период;
				СтрокаТабличнойЧасти.Сумма = ТекАванс;
				СтрокаТабличнойЧасти.СуммаДокумента = СТЗ.Оплата;
				СтрокаТабличнойЧасти.Уровень = 3;
				
				ЭтоБезналичныйРасчет = 	ТипЗнч(СТЗ.Документ) = ТИП("ДокументСсылка.ПлатежноеПоручениеВходящее")
					Или ТипЗнч(СТЗ.Документ) = ТИП("ДокументСсылка.ОплатаПлатежнойКартой")
					Или (ТипЗнч(СТЗ.Документ) = ТИП("ДокументСсылка.ВозвратТоваровОтПокупателя")) И СТЗ.Документ.БезналичныйРасчет;
				Если ЭтоБезналичныйРасчет Тогда
					ЗначениеСтавкиНСП = 0;
				Иначе	
				    ЗначениеСтавкиНСП = ВыборкаДоговор.ЗначениеСтавкиНСП;
				КонецЕсли;
				
				СтрокаТабличнойЧасти.СуммаНДС = Окр(ТекАванс * ВыборкаДоговор.ЗначениеСтавкиНДС / (100 + ВыборкаДоговор.ЗначениеСтавкиНДС + ЗначениеСтавкиНСП), 2);
				СтрокаТабличнойЧасти.СуммаНСП = Окр(ТекАванс * ЗначениеСтавкиНСП / (100 + ВыборкаДоговор.ЗначениеСтавкиНДС + ЗначениеСтавкиНСП), 2);
			КонецЕсли;
			
			ОбщаяСуммаАванса = ОбщаяСуммаАванса + ТекАванс;
			
			ОстАванс = ОстАванс - ТекАванс;
			Если ОстАванс <= 0 Тогда 
				Прервать;	
			КонецЕсли;					
		КонецЦикла;
		
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Контрагент", ВыборкаДоговор.Контрагент);
		СтруктураОтбора.Вставить("Договор", ВыборкаДоговор.Договор);
		
		МассивСтрок = АвансыРасшифровка.НайтиСтроки(СтруктураОтбора);
		
		// "Заполнение общей суммы аванса"
		// В верхнем цикле высчитан аванс, теперь в суммарную строку записывается эта общая сумма.
		Если МассивСтрок.Количество() > 0 Тогда
			СтрокаТабличнойЧасти = МассивСтрок[0];
			СтрокаТабличнойЧасти.Сумма = ОбщаяСуммаАванса;
		КонецЕсли;	
		
		// Создается строка ТЧ "АвансыИДоотгрузка" с общими суммами по контрагенту и договору.
		СтрокаТабличнойЧасти = АвансыИДоотгрузка.Добавить();
		СтрокаТабличнойЧасти.Контрагент 		= ВыборкаДоговор.Контрагент;
		СтрокаТабличнойЧасти.Договор 			= ВыборкаДоговор.Договор;
		СтрокаТабличнойЧасти.СуммаАвансНачало 	= СуммаАвансовНаНачалоМесяца;
		СтрокаТабличнойЧасти.СуммаОплата 		= Оплата;
		СтрокаТабличнойЧасти.СуммаОтгрузка 		= Отгрузка;
		СтрокаТабличнойЧасти.СуммаДоотгрузка 	= ИтогСуммаДоотгрузки;
		
		СуммаАвансаКонец = СуммаАвансовНаНачалоМесяца + Оплата - Отгрузка;
		
		Если СуммаАвансаКонец > 0 Тогда
			//СтрокаТабличнойЧасти.СуммаАванс 	 = СуммаАванса;
			СтрокаТабличнойЧасти.СуммаАванс 	 = Оплата - (Отгрузка - ИтогСуммаДоотгрузки);
			СтрокаТабличнойЧасти.СуммаАвансКонец = СуммаАвансаКонец;
		Иначе
			СтрокаТабличнойЧасти.СуммаАванс 	 = 0;
			СтрокаТабличнойЧасти.СуммаАвансКонец = 0;
		КонецЕсли;	
	КонецЦикла;	
	
	// Сортировка по контрагенту и договору, внутри их сортировка по уровню в порядке возрастания
	// и последняя сортировка внутри первой(контрагент и договор) и второй(уровень) по дате документа в порядке убывания.
	АвансыРасшифровка.Сортировать("Контрагент, Договор, Уровень, ДатаДокумента");
КонецПроцедуры

// Процедура - Рассчитать НДС.
//
Процедура РассчитатьНДС(ДанныеУчетнойПолитики)
	НачалоПериода 	= НачалоМесяца(Дата);
	КонецПериода 	= КонецМесяца(Дата);
	
	ЭтоКонтракт = ДанныеУчетнойПолитики.Контракт;
	
	ПараметрыРасчета = Новый Структура;
	
	ТаблицаДоотгрузки = ДоотгрузкаРасшифровка.Выгрузить();
	ТаблицаДоотгрузки.Свернуть("Контрагент, Договор", "Сумма, СуммаНДС, СуммаНСП");
	
	ПараметрыРасчета.Вставить("Таблица", ТаблицаДоотгрузки);
	СуммаДоотгрузки 						= УчетНДС.РасчетСуммыОтчетаНДС("СуммаДоотгрузки", 						ПараметрыРасчета).РезультатРасчета;
	СуммаНДСДоотгрузки 						= УчетНДС.РасчетСуммыОтчетаНДС("СуммаНДСДоотгрузки", 					ПараметрыРасчета).РезультатРасчета;
	СуммаНСПДоотгрузки 						= УчетНДС.РасчетСуммыОтчетаНДС("СуммаНСПДоотгрузки", 					ПараметрыРасчета).РезультатРасчета;
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Таблица", АвансыРасшифровка.Выгрузить());
	СуммаАвансы 							= УчетНДС.РасчетСуммыОтчетаНДС("СуммаАвансы", 							ПараметрыРасчета).РезультатРасчета;
	СуммаНДСАвансы 							= УчетНДС.РасчетСуммыОтчетаНДС("СуммаНДСАвансы", 						ПараметрыРасчета).РезультатРасчета;
	СуммаНСПАвансы 							= УчетНДС.РасчетСуммыОтчетаНДС("СуммаНСПАвансы", 						ПараметрыРасчета).РезультатРасчета;
	
	ТаблицаВсейРеализации	= УчетНДС.СведенияПоСчетамФактурамВыписанным(Организация, НачалоПериода, КонецПериода, 
								ДанныеУчетнойПолитики.ОтчетПоНДСПоПоставке);  
								
	// Сумма050
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ЭтоКонтракт",  		ЭтоКонтракт);
	ПараметрыРасчета.Вставить("Таблица", 			ТаблицаВсейРеализации);
	ПараметрыРасчета.Вставить("Период",  			Дата);
	ПараметрыРасчета.Вставить("СуммаАвансы", 		СуммаАвансы);
	ПараметрыРасчета.Вставить("СуммаНДСАвансы", 	СуммаНДСАвансы);
	ПараметрыРасчета.Вставить("СуммаНСПАвансы", 	СуммаНСПАвансы);
	ПараметрыРасчета.Вставить("СуммаДоотгрузки", 	СуммаДоотгрузки); 
	ПараметрыРасчета.Вставить("СуммаНДСДоотгрузки", СуммаНДСДоотгрузки);
	ПараметрыРасчета.Вставить("СуммаНСПДоотгрузки", СуммаНСПДоотгрузки);
	Сумма050 = УчетНДС.РасчетСуммыОтчетаНДС("Сумма050", ПараметрыРасчета).РезультатРасчета;		
	СтрокаТабличнойЧасти = НДС.Добавить();
	СтрокаТабличнойЧасти.Строка = "050";	
	СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'ОБЛАГАЕМЫЕ ПОСТАВКИ НА ТЕРРИТОРИИ КР'");
	СтрокаТабличнойЧасти.Сумма 	= Сумма050;
	
	// Сумма051
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ЭтоКонтракт", ЭтоКонтракт);
	ПараметрыРасчета.Вставить("Таблица", ТаблицаВсейРеализации);
	Сумма051 = УчетНДС.РасчетСуммыОтчетаНДС("Сумма051", ПараметрыРасчета).РезультатРасчета;		
	СтрокаТабличнойЧасти = НДС.Добавить();
	СтрокаТабличнойЧасти.Строка = "051";	
	СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'ПОСТАВКИ, ОБЛАГАЕМЫЕ ПО НУЛЕВОЙ СТАВКЕ'");
	СтрокаТабличнойЧасти.Сумма 	= Сумма051;	
	
	// Сумма052
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ЭтоКонтракт", ЭтоКонтракт);
	ПараметрыРасчета.Вставить("Таблица", ТаблицаВсейРеализации);
	Сумма052 = УчетНДС.РасчетСуммыОтчетаНДС("Сумма052", ПараметрыРасчета).РезультатРасчета;		
	СтрокаТабличнойЧасти = НДС.Добавить();
	СтрокаТабличнойЧасти.Строка = "052";	
	СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'В ТОМ ЧИСЛЕ В ЕВРАЗИЙСКИЙ ЭКОНОМИЧЕСКИЙ СОЮЗ'");
	СтрокаТабличнойЧасти.Сумма 	= Сумма052;
	
	// Сумма053
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ЭтоКонтракт", ЭтоКонтракт);
	ПараметрыРасчета.Вставить("Таблица", ТаблицаВсейРеализации);
	ПараметрыРасчета.Вставить("Период",  Дата);
	Сумма053 = УчетНДС.РасчетСуммыОтчетаНДС("Сумма053", ПараметрыРасчета).РезультатРасчета;		
	СтрокаТабличнойЧасти = НДС.Добавить();
	СтрокаТабличнойЧасти.Строка = "053";	
	СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'ОСВОБОЖДЕННЫЕ И НЕОБЛАГАЕМЫЕ ПОСТАВКИ'");
	СтрокаТабличнойЧасти.Сумма 	= Сумма053;	
		
	// Сумма054
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ЭтоКонтракт", ЭтоКонтракт);
	ПараметрыРасчета.Вставить("Сумма050", 	Сумма050);
	ПараметрыРасчета.Вставить("Сумма051", 	Сумма051);
	ПараметрыРасчета.Вставить("Сумма053", 	Сумма053);
	Сумма054 = УчетНДС.РасчетСуммыОтчетаНДС("Сумма054", ПараметрыРасчета).РезультатРасчета;		
	СтрокаТабличнойЧасти = НДС.Добавить();
	СтрокаТабличнойЧасти.Строка = "054";	
	СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'ОБЩАЯ СТОИМОСТЬ  ПОСТАВОК (=050+051+053)'");
	СтрокаТабличнойЧасти.Сумма 	= Сумма054;								
								
	ТаблицаВсехПоступлений	= УчетНДС.СведенияОПоступлении(Организация, НачалоПериода, КонецПериода, 
								ДанныеУчетнойПолитики.НеУчитыватьЗакупкиБезНДС, ДанныеУчетнойПолитики.ОтчетПоНДСПоПоставке,
								ЭтоКонтракт, Сумма053, Сумма054);
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Таблица", 			ТаблицаВсейРеализации);
	ПараметрыРасчета.Вставить("СуммаАвансы", 		СуммаАвансы);
	ПараметрыРасчета.Вставить("СуммаДоотгрузки", 	СуммаДоотгрузки);
	
	// НДС для распределения от поставщиков КР	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Таблица", ТаблицаВсехПоступлений);
	ПараметрыРасчета.Вставить("УказыватьПризнакЗачетаНДСПриПоступлении", ДанныеУчетнойПолитики.УказыватьПризнакЗачетаНДСПриПоступлении);
	НДСДляРаспределенияКР = УчетНДС.РасчетСуммыОтчетаНДС("НДСДляРаспределенияКР", ПараметрыРасчета).РезультатРасчета;	
	
	// НДС для распределения от поставщиков ЕАЭС	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Таблица", ТаблицаВсехПоступлений);
	ПараметрыРасчета.Вставить("УказыватьПризнакЗачетаНДСПриПоступлении", ДанныеУчетнойПолитики.УказыватьПризнакЗачетаНДСПриПоступлении);
	НДСДляРаспределенияЕАЭС = УчетНДС.РасчетСуммыОтчетаНДС("НДСДляРаспределенияЕАЭС", ПараметрыРасчета).РезультатРасчета;
	
	// НДС для распределения от поставщиков НЕ КР	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Таблица", ТаблицаВсехПоступлений);
	ПараметрыРасчета.Вставить("УказыватьПризнакЗачетаНДСПриПоступлении", ДанныеУчетнойПолитики.УказыватьПризнакЗачетаНДСПриПоступлении);
	НДСДляРаспределенияНеКР = УчетНДС.РасчетСуммыОтчетаНДС("НДСДляРаспределенияНеКР", ПараметрыРасчета).РезультатРасчета;

	// НДС КР Себестоимость	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Таблица", ТаблицаВсехПоступлений);
	ПараметрыРасчета.Вставить("УказыватьПризнакЗачетаНДСПриПоступлении", ДанныеУчетнойПолитики.УказыватьПризнакЗачетаНДСПриПоступлении);
	НДСКРСебестоимость = УчетНДС.РасчетСуммыОтчетаНДС("НДСКРСебестоимость", ПараметрыРасчета).РезультатРасчета;
	
	// НДС ЕАЭС Себестоимость	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Таблица", ТаблицаВсехПоступлений);
	ПараметрыРасчета.Вставить("УказыватьПризнакЗачетаНДСПриПоступлении", ДанныеУчетнойПолитики.УказыватьПризнакЗачетаНДСПриПоступлении);
	НДСЕАЭССебестоимость = УчетНДС.РасчетСуммыОтчетаНДС("НДСЕАЭССебестоимость", ПараметрыРасчета).РезультатРасчета;
	
	// НДС Не КР Себестоимость	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Таблица", ТаблицаВсехПоступлений);
	ПараметрыРасчета.Вставить("УказыватьПризнакЗачетаНДСПриПоступлении", ДанныеУчетнойПолитики.УказыватьПризнакЗачетаНДСПриПоступлении);
	НДСНеКРСебестоимость = УчетНДС.РасчетСуммыОтчетаНДС("НДСНеКРСебестоимость", ПараметрыРасчета).РезультатРасчета;
		
	// КоэффициентОсвобожденныхПоставокРасчетный
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ПороговыйПроцентОсвобожденныхПоставок", 	ДанныеУчетнойПолитики.ПороговыйПроцентОсвобожденныхПоставок);
	ПараметрыРасчета.Вставить("Сумма053", 								Сумма053);
	ПараметрыРасчета.Вставить("Сумма054", 								Сумма054);
	ПараметрыРасчета.Вставить("СуммаАвансы", 							СуммаАвансы);
	ПараметрыРасчета.Вставить("СуммаНДСАвансы", 						СуммаНДСАвансы);
	ПараметрыРасчета.Вставить("СуммаНСПАвансы", 						СуммаНСПАвансы);
	ПараметрыРасчета.Вставить("СуммаДоотгрузки", 						СуммаДоотгрузки); 
	ПараметрыРасчета.Вставить("СуммаНДСДоотгрузки", 					СуммаНДСДоотгрузки);
	ПараметрыРасчета.Вставить("СуммаНСПДоотгрузки", 					СуммаНСПДоотгрузки);
	КоэффициентОсвобожденныхПоставокРасчетный = УчетНДС.РасчетСуммыОтчетаНДС("КоэффициентОсвобожденныхПоставокРасчетный", ПараметрыРасчета).РезультатРасчета;		
	
	// НДС КР не разрешенный к зачету
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("КоэффициентОсвобожденныхПоставокРасчетный", КоэффициентОсвобожденныхПоставокРасчетный);
	ПараметрыРасчета.Вставить("НДСДляРаспределенияКР", НДСДляРаспределенияКР);
	ПараметрыРасчета.Вставить("НДСКРСебестоимость", НДСКРСебестоимость);
	НДСКРНеРазрешенныйКЗачету = УчетНДС.РасчетСуммыОтчетаНДС("НДСКРНеРазрешенныйКЗачету", ПараметрыРасчета).РезультатРасчета;
	                  
	// НДС ЕАЭС не разрешенный к зачету
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("КоэффициентОсвобожденныхПоставокРасчетный", КоэффициентОсвобожденныхПоставокРасчетный);
	ПараметрыРасчета.Вставить("НДСДляРаспределенияЕАЭС", НДСДляРаспределенияЕАЭС);
	ПараметрыРасчета.Вставить("НДСЕАЭССебестоимость", НДСЕАЭССебестоимость);
	НДСЕАЭСНеРазрешенныйКЗачету = УчетНДС.РасчетСуммыОтчетаНДС("НДСЕАЭСНеРазрешенныйКЗачету", ПараметрыРасчета).РезультатРасчета;
	
	// НДС Не КР не разрешенный к зачету
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("КоэффициентОсвобожденныхПоставокРасчетный", КоэффициентОсвобожденныхПоставокРасчетный);
	ПараметрыРасчета.Вставить("НДСДляРаспределенияНеКР", НДСДляРаспределенияНеКР);
	ПараметрыРасчета.Вставить("НДСНеКРСебестоимость", НДСНеКРСебестоимость);   
	НДСНеКРНеРазрешенныйКЗачету = УчетНДС.РасчетСуммыОтчетаНДС("НДСНеКРНеРазрешенныйКЗачету", ПараметрыРасчета).РезультатРасчета;

	// Сумма055
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ЭтоКонтракт", ЭтоКонтракт);
	ПараметрыРасчета.Вставить("Таблица", ТаблицаВсехПоступлений);
	Сумма055 = УчетНДС.РасчетСуммыОтчетаНДС("Сумма055", ПараметрыРасчета).РезультатРасчета;		
	СтрокаТабличнойЧасти = НДС.Добавить();
	СтрокаТабличнойЧасти.Строка = "055";	
	СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'ПРИОБРЕТЕННЫЕ МАТЕРИАЛЬНЫЕ РЕСУРСЫ В КР'");
	СтрокаТабличнойЧасти.Сумма 	= Сумма055;	
	
	// Сумма056
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ЭтоКонтракт", ЭтоКонтракт);
	ПараметрыРасчета.Вставить("Таблица", ТаблицаВсехПоступлений);
	Сумма056 = УчетНДС.РасчетСуммыОтчетаНДС("Сумма056", ПараметрыРасчета).РезультатРасчета;		
	СтрокаТабличнойЧасти = НДС.Добавить();
	СтрокаТабличнойЧасти.Строка = "056";	
	СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'ИМПОРТ МАТЕРИАЛЬНЫХ РЕСУРСОВ В КР'");
	СтрокаТабличнойЧасти.Сумма 	= Сумма056;	
	
	// Сумма057
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ЭтоКонтракт", ЭтоКонтракт);
	ПараметрыРасчета.Вставить("Таблица", ТаблицаВсехПоступлений);
	Сумма057 = УчетНДС.РасчетСуммыОтчетаНДС("Сумма057", ПараметрыРасчета).РезультатРасчета;		
	СтрокаТабличнойЧасти = НДС.Добавить();
	СтрокаТабличнойЧасти.Строка = "057";	
	СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'В ТОМ ЧИСЛЕ ИЗ ГОСУДАРСТВ-ЧЛЕНОВ ЕВРАЗИЙСКОГО ЭКОНОМИЧЕСКОГО СОЮЗА'");
	СтрокаТабличнойЧасти.Сумма 	= Сумма057;
	
	// Сумма058
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ЭтоКонтракт", ЭтоКонтракт);
	ПараметрыРасчета.Вставить("Сумма055", 	Сумма055);
	ПараметрыРасчета.Вставить("Сумма056", 	Сумма056);
	Сумма058 = УчетНДС.РасчетСуммыОтчетаНДС("Сумма058", ПараметрыРасчета).РезультатРасчета;		
	СтрокаТабличнойЧасти = НДС.Добавить();
	СтрокаТабличнойЧасти.Строка = "058";	
	СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'ОБЩАЯ СТОИМОСТЬ ПРИОБРЕТЕННЫХ МАТЕРИАЛЬНЫХ РЕСУРСОВ (=055+056)'");
	СтрокаТабличнойЧасти.Сумма 	= Сумма058;	
		
	// Сумма059
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ЭтоКонтракт", 		ЭтоКонтракт);
	ПараметрыРасчета.Вставить("Таблица", 			ТаблицаВсейРеализации);
	ПараметрыРасчета.Вставить("СуммаНДСАвансы", 	СуммаНДСАвансы);
	ПараметрыРасчета.Вставить("СуммаНДСДоотгрузки", СуммаНДСДоотгрузки);
	Сумма059 = УчетНДС.РасчетСуммыОтчетаНДС("Сумма059", ПараметрыРасчета).РезультатРасчета;		
	СтрокаТабличнойЧасти = НДС.Добавить();
	СтрокаТабличнойЧасти.Строка = "059";	
	СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'ОБЩАЯ СУММА НДС ЗА ПРОИЗВЕДЕННЫЕ ПОСТАВКИ ( =050 х ставку / 100%)'");
	СтрокаТабличнойЧасти.Сумма 	= Сумма059;	
	
	// Сумма060
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ЭтоКонтракт", 				ЭтоКонтракт);
	ПараметрыРасчета.Вставить("Таблица", 					ТаблицаВсехПоступлений);
	ПараметрыРасчета.Вставить("НДСКРНеРазрешенныйКЗачету", 	НДСКРНеРазрешенныйКЗачету);
	Сумма060 = УчетНДС.РасчетСуммыОтчетаНДС("Сумма060", ПараметрыРасчета).РезультатРасчета;		
	СтрокаТабличнойЧасти = НДС.Добавить();
	СтрокаТабличнойЧасти.Строка = "060";	
	СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'НДС ЗА ПРИОБРЕТЕННЫЕ МАТЕРИАЛЬНЫЕ РЕСУРСЫ, ПОДЛЕЖАЩИЙ ЗАЧЕТУ'");
	СтрокаТабличнойЧасти.Сумма 	= Сумма060;	
		
	// Сумма061
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ЭтоКонтракт", 					ЭтоКонтракт);
	ПараметрыРасчета.Вставить("Таблица", 						ТаблицаВсехПоступлений);
	ПараметрыРасчета.Вставить("НДСНеКРНеРазрешенныйКЗачету", 	НДСНеКРНеРазрешенныйКЗачету);
	Сумма061 = УчетНДС.РасчетСуммыОтчетаНДС("Сумма061", ПараметрыРасчета).РезультатРасчета;		
	СтрокаТабличнойЧасти = НДС.Добавить();
	СтрокаТабличнойЧасти.Строка = "061";	
	СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'НДС НА ИМПОРТ ПОДЛЕЖАЩИЙ ЗАЧЕТУ'");
	СтрокаТабличнойЧасти.Сумма 	= Сумма061;		
		
	// Сумма062
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ЭтоКонтракт", 					ЭтоКонтракт);
	ПараметрыРасчета.Вставить("Таблица", 						ТаблицаВсехПоступлений);
	ПараметрыРасчета.Вставить("НДСЕАЭСНеРазрешенныйКЗачету", 	НДСЕАЭСНеРазрешенныйКЗачету);
	Сумма062 = УчетНДС.РасчетСуммыОтчетаНДС("Сумма062", ПараметрыРасчета).РезультатРасчета;		
	СтрокаТабличнойЧасти = НДС.Добавить();
	СтрокаТабличнойЧасти.Строка = "062";	
	СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'В ТОМ ЧИСЛЕ ИЗ ЕВРАЗИЙСКОГО ЭКОНОМИЧЕСКОГО  СОЮЗА'");
	СтрокаТабличнойЧасти.Сумма 	= Сумма062;	
		
	// Сумма063
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ЭтоКонтракт", 					ЭтоКонтракт);
	ПараметрыРасчета.Вставить("НДСКРНеРазрешенныйКЗачету", 		НДСКРНеРазрешенныйКЗачету);
	ПараметрыРасчета.Вставить("НДСНеКРНеРазрешенныйКЗачету", 	НДСНеКРНеРазрешенныйКЗачету);
	Сумма063 = УчетНДС.РасчетСуммыОтчетаНДС("Сумма063", ПараметрыРасчета).РезультатРасчета;		
	СтрокаТабличнойЧасти = НДС.Добавить();
	СтрокаТабличнойЧасти.Строка = "063";	
	СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'НДС ЗА ПРИОБРЕТЕННЫЕ МАТЕРИАЛЬНЫЕ РЕСУРСЫ, НЕ ПОДЛЕЖАЩИЙ ЗАЧЕТУ'");
	СтрокаТабличнойЧасти.Сумма 	= Сумма063;		
		
	// Сумма064
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ЭтоКонтракт", ЭтоКонтракт);
	ПараметрыРасчета.Вставить("Сумма060", 	Сумма060);
	ПараметрыРасчета.Вставить("Сумма061", 	Сумма061);
	Сумма064 = УчетНДС.РасчетСуммыОтчетаНДС("Сумма064", ПараметрыРасчета).РезультатРасчета;		
	СтрокаТабличнойЧасти = НДС.Добавить();
	СтрокаТабличнойЧасти.Строка = "064";	
	СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'ОБЩАЯ СУММА НДС ЗА ПРИОБРЕТЕННЫЕ МАТЕРИАЛЬНЫЕ РЕСУРСЫ, ПОДЛЕЖАЩАЯ ЗАЧЕТУ (=060+061)'");
	СтрокаТабличнойЧасти.Сумма 	= Сумма064;	
			
	// Сумма065
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ЭтоКонтракт", ЭтоКонтракт);
	ПараметрыРасчета.Вставить("Сумма051", 	Сумма051);
	ПараметрыРасчета.Вставить("Сумма050", 	Сумма050);
	ПараметрыРасчета.Вставить("Сумма064", 	Сумма064);;
	Сумма065 = УчетНДС.РасчетСуммыОтчетаНДС("Сумма065", ПараметрыРасчета).РезультатРасчета;		
	СтрокаТабличнойЧасти = НДС.Добавить();
	СтрокаТабличнойЧасти.Строка = "065";	
	СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'В ТОМ ЧИСЛЕ НДС ЗА ПРИОБРЕТЕННЫЕ МАТЕРИАЛЬНЫЕ РЕСУРСЫ, ИСПОЛЬЗУЕМЫЕ ДЛЯ ПОСТАВОК С НУЛЕВОЙ СТАВКОЙ'");
	СтрокаТабличнойЧасти.Сумма 	= Сумма065;	
			
	// Сумма066
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ЭтоКонтракт", ЭтоКонтракт);
	ПараметрыРасчета.Вставить("Сумма059",	Сумма059);
	ПараметрыРасчета.Вставить("Сумма064", 	Сумма064); 
	Сумма066 = УчетНДС.РасчетСуммыОтчетаНДС("Сумма066", ПараметрыРасчета).РезультатРасчета;		
	СтрокаТабличнойЧасти = НДС.Добавить();
	СтрокаТабличнойЧасти.Строка = "066";	
	СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'НАЛОГОВОЕ ОБЯЗАТЕЛЬСТВО (=059-064) (УКАЖИТЕ ЗНАК МИНУС, ЕСЛИ ЗНАЧЕНИЕ ОТРИЦАТЕЛЬНОЕ)'");
	СтрокаТабличнойЧасти.Сумма 	= Сумма066;	
	
	// Сумма067		
	СтрокаТабличнойЧасти = НДС.Добавить();
	СтрокаТабличнойЧасти.Строка = "067";	
	СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'НАЛОГОВОЕ ОБЯЗАТЕЛЬСТВО ПО ПРОМЫШЛЕННОЙ ПЕРЕРАБОТКЕ СЕЛЬСКОХОЗЯЙСТВЕННОЙ ПРОДУКЦИИ, ПОДЛЕЖАЩЕЕ УМЕНЬШЕНИЮ НА 80 % (УКАЖИТЕ ЗНАК МИНУС, ЕСЛИ ЗНАЧЕНИЕ ОТРИЦАТЕЛЬНОЕ)'");
	СтрокаТабличнойЧасти.Сумма 	= 0;	
	
	// Сумма068
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ЭтоКонтракт", ЭтоКонтракт);
	ПараметрыРасчета.Вставить("Сумма066",	Сумма066);
	ПараметрыРасчета.Вставить("Сумма067", 	0); 
	Сумма068 = УчетНДС.РасчетСуммыОтчетаНДС("Сумма068", ПараметрыРасчета).РезультатРасчета;		
	СтрокаТабличнойЧасти = НДС.Добавить();
	СтрокаТабличнойЧасти.Строка = "068";	
	СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'НАЛОГОВОЕ ОБЯЗАТЕЛЬСТВО ВСЕГО (=066-067) (УКАЖИТЕ ЗНАК МИНУС, ЕСЛИ ЗНАЧЕНИЕ ОТРИЦАТЕЛЬНОЕ)'");
	СтрокаТабличнойЧасти.Сумма 	= Сумма068;	
	
	Если ЭтоКонтракт Тогда					
		// Сумма069			
		ПараметрыРасчета = Новый Структура;
		ПараметрыРасчета.Вставить("Таблица", 			ТаблицаВсейРеализации);
		ПараметрыРасчета.Вставить("Период",  			Дата);
		ПараметрыРасчета.Вставить("СуммаАвансы", 		СуммаАвансы);
		ПараметрыРасчета.Вставить("СуммаНДСАвансы", 	СуммаНДСАвансы);
		ПараметрыРасчета.Вставить("СуммаНСПАвансы", 	СуммаНСПАвансы);
		ПараметрыРасчета.Вставить("СуммаДоотгрузки", 	СуммаДоотгрузки); 
		ПараметрыРасчета.Вставить("СуммаНДСДоотгрузки", СуммаНДСДоотгрузки);
		ПараметрыРасчета.Вставить("СуммаНСПДоотгрузки", СуммаНСПДоотгрузки);
		Сумма069 = УчетНДС.РасчетСуммыОтчетаНДС("Сумма069", ПараметрыРасчета).РезультатРасчета;		
		СтрокаТабличнойЧасти = НДС.Добавить();
		СтрокаТабличнойЧасти.Строка = "069";	
		СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'ОБЛАГАЕМЫЕ ПОСТАВКИ'");
		СтрокаТабличнойЧасти.Сумма 	= Сумма069;		
					
		// Сумма070		
		ПараметрыРасчета = Новый Структура;
		ПараметрыРасчета.Вставить("Таблица", 			ТаблицаВсейРеализации);
		ПараметрыРасчета.Вставить("СуммаНДСАвансы", 	СуммаНДСАвансы);
		ПараметрыРасчета.Вставить("СуммаНДСДоотгрузки", СуммаНДСДоотгрузки);
		Сумма070 = УчетНДС.РасчетСуммыОтчетаНДС("Сумма070", ПараметрыРасчета).РезультатРасчета;		
		СтрокаТабличнойЧасти = НДС.Добавить();
		СтрокаТабличнойЧасти.Строка = "070";	
		СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'СУММА НДС ЗА ПРОИЗВЕДЕННЫЕ ПОСТАВКИ'");
		СтрокаТабличнойЧасти.Сумма 	= Сумма070;		
		
		// Сумма071		
		ПараметрыРасчета = Новый Структура;
		ПараметрыРасчета.Вставить("Таблица", ТаблицаВсехПоступлений);
		Сумма071 = УчетНДС.РасчетСуммыОтчетаНДС("Сумма071", ПараметрыРасчета).РезультатРасчета;		
		СтрокаТабличнойЧасти = НДС.Добавить();
		СтрокаТабличнойЧасти.Строка = "071";	
		СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'ПРИОБРЕТЕННЫЕ МАТЕРИАЛЬНЫЕ РЕСУРСЫ'");
		СтрокаТабличнойЧасти.Сумма 	= Сумма071;		
		
		// Сумма072		
		ПараметрыРасчета = Новый Структура;
		ПараметрыРасчета.Вставить("Таблица", 					ТаблицаВсехПоступлений);
		ПараметрыРасчета.Вставить("НДСКРНеРазрешенныйКЗачету", 	НДСКРНеРазрешенныйКЗачету);
		ПараметрыРасчета.Вставить("НДСНеКРНеРазрешенныйКЗачету",НДСНеКРНеРазрешенныйКЗачету);
		Сумма072 = УчетНДС.РасчетСуммыОтчетаНДС("Сумма072", ПараметрыРасчета).РезультатРасчета;		
		СтрокаТабличнойЧасти = НДС.Добавить();
		СтрокаТабличнойЧасти.Строка = "072";	
		СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'СУММА НДС ЗА ПРИОБРЕТЕННЫЕ МАТЕРИАЛЬНЫЕ РЕСУРСЫ'");
		СтрокаТабличнойЧасти.Сумма 	= Сумма072;
		
	КонецЕсли;
	
	// Формирование проводки 8100 - 1540 	
	Сумма_8100_1540 = НДСКРНеРазрешенныйКЗачету + НДСНеКРНеРазрешенныйКЗачету - НДСКРСебестоимость - НДСНеКРСебестоимость;
									
	Если Сумма_8100_1540 > 0 Тогда
						
		РасходыПоНДСнеПринимаемомуКЗачету = ПланыСчетов.Хозрасчетный.РасходыПоНДСнеПринимаемомуКЗачету;
		
		СтрокаТабличнойЧасти = КорректировкаНДС.Добавить();
		СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'НДС не разрешенный к зачету'");
		СтрокаТабличнойЧасти.СчетДт = РасходыПоНДСнеПринимаемомуКЗачету;
		СтрокаТабличнойЧасти.СчетКт = ПланыСчетов.Хозрасчетный.НДС_ПодлежащийВозмещению;
		СтрокаТабличнойЧасти.Сумма	= Сумма_8100_1540;
	КонецЕсли;
		
	// Закрытие счетов 1540-3430
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаОстатокДт,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаОстатокКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаК, Счет В (&МассивСчетов), , Организация = &Организация) КАК ХозрасчетныйОстатки";
	
	Счет3430 = ПланыСчетов.Хозрасчетный.НДСКОплате;
	Счет1540 = ПланыСчетов.Хозрасчетный.НДС_ПодлежащийВозмещению;
	
	МассивСчетов = Новый Массив();
	МассивСчетов.Добавить(Счет1540);
	МассивСчетов.Добавить(Счет3430);	
	
	Запрос.УстановитьПараметр("МассивСчетов",	МассивСчетов);
	Запрос.УстановитьПараметр("ДатаК", 			КонецМесяца(Дата)+1);
	Запрос.УстановитьПараметр("Организация", 	Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СальдоДт1540 = 0;
	СальдоКт3430 = 0;
	
	Пока Выборка.Следующий() Цикл
		
		// Счет 1540
		Если Выборка.Счет = Счет1540 Тогда
			СальдоДт1540 = Выборка.СуммаОстатокДт;
			
		// Счет 3430
		Иначе
			СальдоКт3430 = Выборка.СуммаОстатокКт;	
		КонецЕсли;		
	КонецЦикла;	
	
	СальдоДт1540 = СальдоДт1540 - Сумма_8100_1540;
	СальдоКт3430 = СальдоКт3430 + АвансыРасшифровка.Итог("СуммаНДС") - ДоотгрузкаРасшифровка.Итог("СуммаНДС");
	
	Если НЕ (СальдоДт1540 = 0 И СальдоКт3430 = 0) Тогда
			
		СтрокаТабличнойЧасти = КорректировкаНДС.Добавить();				
		СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'НДС в зачет'");
			
		Если СальдоКт3430 > СальдоДт1540 Тогда
			СтрокаТабличнойЧасти.СчетДт = Счет3430;
			СтрокаТабличнойЧасти.СчетКт = Счет1540; 
			СтрокаТабличнойЧасти.Сумма	= СальдоДт1540;
		Иначе
			СтрокаТабличнойЧасти.СчетДт = Счет3430;  
			СтрокаТабличнойЧасти.СчетКт = Счет1540;
			СтрокаТабличнойЧасти.Сумма	= СальдоКт3430;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

// Процедура - рассчитать Общехозяйственные расходы и вспомогательное производство
//
Процедура РассчитатьСтоимостиПродукцииПоЗаказам()
	
	// 1. Сумма остатка по счету 1635 на конец месяца.
	// 2. Сумма остатка по счету 1633 на конец месяца.
	// 3. Сумма оборотов Дт по счету 1630 за месяц + субконто (ГП и Заказ).
	// 4. Получает из РС "СостояниеЗаказов" склад по ГП и заказу из 3 пакета.
	// 5. Присоединение к 3 пакету склада и состояния из 4 пакета.
	// 6. Подбираются проводки за месяц, где счет Кт = 1640, для количества оборота Кт и счета Дт. 
	// 7. Подбираются проводки за месяц, где счет Дт = 1640, для количества оборота Дт.
	// 8. Сумма остатка по счету 1630 за весь период до конца предыдущего месяца.
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	1 КАК Порядок,
		|	ХозрасчетныйОстатки.СуммаОстаток КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(ДОБАВИТЬКДАТЕ(&КонецПериода, СЕКУНДА, 1), Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НакладныеРасходы), , Организация = &Организация) КАК ХозрасчетныйОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	2 КАК Порядок,
		|	ХозрасчетныйОстатки.СуммаОстаток КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(ДОБАВИТЬКДАТЕ(&КонецПериода, СЕКУНДА, 1), Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВспомогательноеПроизводство), , Организация = &Организация) КАК ХозрасчетныйОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	3 КАК Порядок,
		|	ХозрасчетныйОбороты.Субконто1 КАК Номенклатура,
		|	ХозрасчетныйОбороты.Субконто2 КАК Заказ,
		|	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаПрямыхЗатратНаГП
		|ПОМЕСТИТЬ ВременнаяТаблицаОсновноеПроизводствоТМ
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОсновноеПроизводство), &ВидыСубконтоПроизводство, Организация = &Организация, , ) КАК ХозрасчетныйОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	4 КАК Порядок,
		|	ВыполненныеРаботыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ВыполненныеРаботыСрезПоследних.Заказ КАК Заказ,
		|	ВыполненныеРаботыСрезПоследних.Склад КАК Склад
		|ПОМЕСТИТЬ ВременнаяТаблицаСклады
		|ИЗ
		|	РегистрСведений.ВыполненныеРаботы.СрезПоследних(
		|			&КонецПериода,
		|			Организация = &Организация
		|				И (Заказ, Номенклатура) В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаОсновноеПроизводствоТМ.Заказ,
		|						ВременнаяТаблицаОсновноеПроизводствоТМ.Номенклатура
		|					ИЗ
		|						ВременнаяТаблицаОсновноеПроизводствоТМ КАК ВременнаяТаблицаОсновноеПроизводствоТМ)) КАК ВыполненныеРаботыСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	5 КАК Порядок,
		|	ВременнаяТаблицаОсновноеПроизводствоТМ.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаОсновноеПроизводствоТМ.Заказ КАК Заказ,
		|	ВременнаяТаблицаОсновноеПроизводствоТМ.СуммаПрямыхЗатратНаГП КАК СуммаПрямыхЗатратНаГП,
		|	ВременнаяТаблицаСклады.Склад КАК Склад
		|ИЗ
		|	ВременнаяТаблицаОсновноеПроизводствоТМ КАК ВременнаяТаблицаОсновноеПроизводствоТМ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСклады КАК ВременнаяТаблицаСклады
		|		ПО ВременнаяТаблицаОсновноеПроизводствоТМ.Номенклатура = ВременнаяТаблицаСклады.Номенклатура
		|			И ВременнаяТаблицаОсновноеПроизводствоТМ.Заказ = ВременнаяТаблицаСклады.Заказ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	6 КАК Порядок,
		|	ХозрасчетныйОборотыДтКт.СчетДт КАК Счет,
		|	ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК Номенклатура,
		|	ХозрасчетныйОборотыДтКт.СубконтоКт3 КАК Заказ,
		|	ХозрасчетныйОборотыДтКт.КоличествоОборотКт КАК Количество
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериода, &КонецПериода, , , , СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ГотоваяПродукция), &ВидыСубконтоГП, Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	7 КАК Порядок,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Номенклатура,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт3 КАК Заказ,
		|	ХозрасчетныйОборотыДтКт.КоличествоОборотДт КАК Количество
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериода, &КонецПериода, , СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ГотоваяПродукция), &ВидыСубконтоГП, , , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	8 КАК Порядок,
		|	СУММА(ХозрасчетныйОстатки.СуммаОстаток) КАК Сумма,
		|	ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,
		|	ХозрасчетныйОстатки.Субконто2 КАК Заказ
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоПериода, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОсновноеПроизводство), &ВидыСубконтоПроизводство, Организация = &Организация) КАК ХозрасчетныйОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОстатки.Субконто1,
		|	ХозрасчетныйОстатки.Субконто2";
	ВидыСубконтоГП = Новый Массив;
	ВидыСубконтоГП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоГП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	ВидыСубконтоГП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);	
	Запрос.УстановитьПараметр("ВидыСубконтоГП", ВидыСубконтоГП);
	
	ВидыСубконтоПроизводство = Новый Массив;
	ВидыСубконтоПроизводство.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоПроизводство.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);	
	Запрос.УстановитьПараметр("ВидыСубконтоПроизводство", ВидыСубконтоПроизводство);
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Дата)); // Начало текущего месяца
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Дата)); // Конец текущего месяца
	Запрос.УстановитьПараметр("Организация", Организация);		
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаОХР = МассивРезультатов[0].Выбрать();
	ВыборкаВП  = МассивРезультатов[1].Выбрать();
		 
	СуммаОбщехозяйственныхРасходов = 0;
	СуммаВспомогательногоПроизводства  = 0;
	
	Если ВыборкаОХР.Следующий() Тогда
		СуммаОбщехозяйственныхРасходов = ВыборкаОХР.Сумма;	
	КонецЕсли;

	Если ВыборкаВП.Следующий() Тогда
		СуммаВспомогательногоПроизводства = ВыборкаВП.Сумма;	
	КонецЕсли;
	
	// Основное производство за текущий месяц.
	ТЗОсновноеПроизводствоТМ = МассивРезультатов[4].Выгрузить();
	
	// Реализованная продукция.
	ТЗРеализованнаяГП = МассивРезультатов[5].Выгрузить();
	ТЗРеализованнаяГП.Индексы.Добавить("Номенклатура");
	ТЗРеализованнаяГП.Индексы.Добавить("Заказ");
		
	// Произведенная готовая продукция на конец месяца.
	ТЗГотоваяПродукция = МассивРезультатов[6].Выгрузить();
	ТЗГотоваяПродукция.Индексы.Добавить("Номенклатура");
	ТЗГотоваяПродукция.Индексы.Добавить("Заказ");
	
	// Остатки по основному производству на конец предыдущего месяца.
	ТЗОсновноеПроизводствоПМ = МассивРезультатов[7].Выгрузить();
	ТЗОсновноеПроизводствоПМ.Индексы.Добавить("Номенклатура");
	ТЗОсновноеПроизводствоПМ.Индексы.Добавить("Заказ");

	// Распределение сумм ОХР и ВП по суммам остатков основного производства за текущий месяц.
	МассивСумм    = ТЗОсновноеПроизводствоТМ.ВыгрузитьКолонку("СуммаПрямыхЗатратНаГП");
	
	МассивСуммОХР = Неопределено;
	Если СуммаОбщехозяйственныхРасходов > 0 Тогда
		МассивСуммОХР = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаОбщехозяйственныхРасходов, МассивСумм, 2);
	КонецЕсли;	
	МассивСуммВП = Неопределено;
	Если СуммаВспомогательногоПроизводства > 0 Тогда
		МассивСуммВП = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаВспомогательногоПроизводства, МассивСумм, 2);
	КонецЕсли;		
	
	ИндексМассива = 0;	
	
	Для Каждого СтрокаТаблицыЗначений Из ТЗОсновноеПроизводствоТМ Цикл
		
		СтрокаТабличнойЧасти = РасходыНаПроизводство.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТаблицыЗначений);
		
		Если МассивСуммОХР <> Неопределено Тогда
			СтрокаТабличнойЧасти.СуммаОбщехозяйственныхРасходов = МассивСуммОХР[ИндексМассива];	
		КонецЕсли;
		
		Если МассивСуммВП <> Неопределено Тогда
			СтрокаТабличнойЧасти.СуммаВспомогательногоПроизводства = МассивСуммВП[ИндексМассива];	
		КонецЕсли;
		
		СтрокаТабличнойЧасти.СуммаНЗП = СтрокаТабличнойЧасти.СуммаОбщехозяйственныхРасходов 
											+ СтрокаТабличнойЧасти.СуммаВспомогательногоПроизводства
											+ СтрокаТабличнойЧасти.СуммаНЗППредыдущегоПериода;
		
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		СтруктураОтбора.Вставить("Заказ", СтрокаТабличнойЧасти.Заказ);
		
		// Поиск готовой продукции по заказу и ГП, если таковые имеются.
		МассивИзготовленнойГП = ТЗГотоваяПродукция.НайтиСтроки(СтруктураОтбора);
		Если МассивИзготовленнойГП.Количество() > 0 Тогда
			СтрокаТабличнойЧасти.Количество = МассивИзготовленнойГП[0].Количество;
		КонецЕсли;
		
		// Поиск начального сальдо по основному производству, если таковые имеются.
		МассивСуммаНЗППредыдущегоПериода = ТЗОсновноеПроизводствоПМ.НайтиСтроки(СтруктураОтбора);
		Если МассивСуммаНЗППредыдущегоПериода.Количество() > 0 Тогда
			СтрокаТабличнойЧасти.СуммаНЗППредыдущегоПериода = МассивСуммаНЗППредыдущегоПериода[0].Сумма;
		КонецЕсли;
		
		// Суммы с основного производства суммируются и если продукция по заказу изготовлена, то 
		// данная сумма записывается как "Сумма корректировки готовой продукции", в ином случае 
		// она остается на счете основного производства до момента изготовления продукции.
		Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
			СтрокаТабличнойЧасти.СуммаКорректировкиГП = СтрокаТабличнойЧасти.СуммаОбщехозяйственныхРасходов 
															+ СтрокаТабличнойЧасти.СуммаВспомогательногоПроизводства;
			СтрокаТабличнойЧасти.СуммаНЗПТекущегоПериода = 0;
		Иначе
			СтрокаТабличнойЧасти.СуммаНЗПТекущегоПериода = СтрокаТаблицыЗначений.СуммаПрямыхЗатратНаГП 
												+ СтрокаТабличнойЧасти.СуммаНЗП;
			СтрокаТабличнойЧасти.СуммаКорректировкиГП = 0;
		КонецЕсли;
		
		// Поиск готовой реализованной продукции по заказу и ГП, если таковые имеются.
		МассивРеализованнойГП = ТЗРеализованнаяГП.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаМассива Из МассивРеализованнойГП Цикл
			
			Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
				СтрокаТабличнойЧасти.СуммаКорректировкиРеализации = (СтрокаТабличнойЧасти.СуммаОбщехозяйственныхРасходов 
								+ СтрокаТабличнойЧасти.СуммаВспомогательногоПроизводства)
								/ СтрокаТабличнойЧасти.Количество * СтрокаМассива.Количество;
			КонецЕсли;
							
			СтрокаТабличнойЧасти.СчетДтРеализации = СтрокаМассива.Счет;
		КонецЦикла;
		
		ИндексМассива = ИндексМассива + 1;
	КонецЦикла;	
	
КонецПроцедуры

// Процедура - Расчет себестоимости продукции по номенклатурным группам
//
Процедура РассчитатьСтоимостиПродукцииПоНоменклатурнымГруппам(ДанныеУчетнойПолитики, Сообщения, Ошибки)
	
	БазаРаспределенияКорректировкиСебестоимости = Константы.БазаРаспределенияКорректировкиСебестоимости.Получить();
	Если НЕ ЗначениеЗаполнено(БазаРаспределенияКорректировкиСебестоимости) Тогда 
		ТекстСообщения = НСтр("ru = 'Расчет себестоимости продукции. Не заполнен метод распределения корректировки себестоимости готовой продукции.
			|Проверьте заполнение ""Параметры учета"" - Раздел ""Производство"" - ""Настройки учета производства"" - поле ""База распределения корректировки себестоимости"".'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстСообщения, Неопределено);                              		
		Возврат;
	КонецЕсли;	
	
	// Поверка наличия остатков на начало месяца на счетах производства.
	ЕстьОстаткиНЗПНаНачалоМесяца();
	
	// Выбираются все накладные расходы в разрезе подразделений и статей затрат.
	// Подразделение служит для определения базы распределения.
	// В случае отсутствия подразделения, вся сумма затрат будет распределена на все подразделения.
	// Статья затрат необходима для отражения субконто, при распределении роли не играет.	
	ТекстыЗапроса = Новый Массив;
	
	// Накладные расходы.
	ТекстЗапроса =
		// Общие накладные расходы подлежащие распределению.
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК СчетРасходов,
		|	ХозрасчетныйОстатки.Субконто1 КАК ПодразделениеЗатрат,
		|	ХозрасчетныйОстатки.Субконто1.Наименование КАК ПодразделениеЗатратНаименование,
		|	ЕСТЬNULL(ХозрасчетныйОстатки.Субконто2, ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)) КАК СтатьяЗатрат,
		|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаРасходов
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоПериода, Счет В ИЕРАРХИИ (&СчетаЗатрат), &ВидыСубконтоНакладныеРасходы, Организация = &Организация) КАК ХозрасчетныйОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Счет,
		|	ХозрасчетныйОбороты.Субконто1,
		|	ХозрасчетныйОбороты.Субконто1.Наименование,
		|	ХозрасчетныйОбороты.Субконто2,
		|	ХозрасчетныйОбороты.СуммаОборотДт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет В ИЕРАРХИИ (&СчетаЗатрат), &ВидыСубконтоНакладныеРасходы, Организация = &Организация, , ) КАК ХозрасчетныйОбороты";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Выбираются прямые расходы.
	// Из прямых расходов определяются материальные затраты- 1600, 1700.
	
	ТекстЗапроса =	
		// Материальные затраты.
		"ВЫБРАТЬ
		|	ХозрасчетныйОборотыДтКт.СчетДт КАК СчетЗатрат,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Подразделение,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт2 КАК НоменклатурнаяГруппа,
		|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериода, &КонецПериода, , СчетДт В ИЕРАРХИИ (&СчетаПрямыхРасходов), &ВидыСубконтоПрямыхРасходов, СчетКт В (&СчетаУчетаТоваров), , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Выпуск готовой продукции.
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВыпускПродукцииУслугОбороты.Продукция КАК Продукция,
		|	ВыпускПродукцииУслугОбороты.СчетЗатрат КАК СчетЗатрат,
		|	ВыпускПродукцииУслугОбороты.Подразделение КАК Подразделение,
		|	ВыпускПродукцииУслугОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	ВыпускПродукцииУслугОбороты.КоличествоОборот КАК КоличествоОборот,
		|	ВыпускПродукцииУслугОбороты.ПлановаяСтоимостьОборот КАК ПлановаяСтоимостьОборот
		|ИЗ
		|	РегистрНакопления.ВыпускПродукцииУслуг.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация) КАК ВыпускПродукцииУслугОбороты";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	СчетаЗатрат = Новый Массив;
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.НакладныеРасходы);
	Запрос.УстановитьПараметр("СчетаЗатрат", СчетаЗатрат);
	Запрос.УстановитьПараметр("СчетаПрямыхРасходов", УчетПроизводства.ПредопределенныеСчетаПрямыхРасходов());
	
	СчетаУчетаТоваровПредопределенные = Новый Массив;
	СчетаУчетаТоваровПредопределенные.Добавить(ПланыСчетов.Хозрасчетный.ТоварноМатериальныеЗапасы);       
	СчетаУчетаТоваровПредопределенные.Добавить(ПланыСчетов.Хозрасчетный.ЗапасыВспомогательныхМатериалов);       
	СчетаУчетаТоваров = БухгалтерскийУчетСервер.СформироватьМассивСубсчетов(СчетаУчетаТоваровПредопределенные);
	Запрос.УстановитьПараметр("СчетаУчетаТоваров", СчетаУчетаТоваров);
	
	ВидыСубконтоНакладныеРасходы = Новый Массив;
	ВидыСубконтоНакладныеРасходы.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения);
	ВидыСубконтоНакладныеРасходы.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидыСубконтоНакладныеРасходы", ВидыСубконтоНакладныеРасходы);

	ВидыСубконтоПрямыхРасходов = Новый Массив;
	ВидыСубконтоПрямыхРасходов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения);
	ВидыСубконтоПрямыхРасходов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	Запрос.УстановитьПараметр("ВидыСубконтоПрямыхРасходов", ВидыСубконтоПрямыхРасходов);

	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаМатериальныеЗатраты = МассивРезультатов[1].Выгрузить();
	ТаблицаМатериальныеЗатраты.Индексы.Добавить("Подразделение");
	
	ТаблицаВыпускПродукцииУслуг = МассивРезультатов[2].Выгрузить();
	СуммаГотоваяПродукцияПлановая = ТаблицаВыпускПродукцииУслуг.Итог("ПлановаяСтоимостьОборот");
	ТаблицаВыпускПродукцииЗатраты = ТаблицаВыпускПродукцииУслуг.Скопировать(,"СчетЗатрат, Подразделение, НоменклатурнаяГруппа, КоличествоОборот, ПлановаяСтоимостьОборот");
	ТаблицаВыпускПродукцииЗатраты.Свернуть("СчетЗатрат, Подразделение, НоменклатурнаяГруппа", "КоличествоОборот, ПлановаяСтоимостьОборот");
	ТаблицаВыпускПродукцииЗатраты.Индексы.Добавить("Подразделение");

	// Накладные расходы подлежащие распределению.
	Если НЕ МассивРезультатов[0].Пустой() Тогда
		РаспределениеНакладныхРасходов(МассивРезультатов, 0, ТаблицаВыпускПродукцииЗатраты, ТаблицаМатериальныеЗатраты, Сообщения, Ошибки);	
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Рассчитать Земельный налог.
//
Процедура РассчитатьЗемельныйНалог(ДанныеУчетнойПолитики, Ошибки)
	
	ЗемельныйНалог.Очистить();
	ЗемельныйНалогПодОбъектомИмущества.Очистить();
	//НачалоПериода = НачалоГода(Дата);
	КонецПериода = КонецМесяца(Дата);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	    "ВЫБРАТЬ
	    |	ШкалаСтавкиОтЧисленностиМакс.ОсновноеСредство КАК ОсновноеСредство,
	    |	ШкалаСтавкиОтЧисленностиМакс.Область КАК Область,
	    |	ОбластиСрезПоследних.Ставка КАК Ставка
	    |ПОМЕСТИТЬ ВременнаяТаблицаСтавкиПоКатегории3
	    |ИЗ
	    |	(ВЫБРАТЬ
	    |		ПараметрыУчетаОСЗемельныйНалогСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	    |		ПараметрыУчетаОСЗемельныйНалогСрезПоследних.Область КАК Область,
	    |		МАКСИМУМ(ОбластиСрезПоследних.НижняяГраница) КАК НижняяГраница
	    |	ИЗ
	    |		РегистрСведений.ПараметрыУчетаОСЗемельныйНалог.СрезПоследних(&Период, Организация = &Организация) КАК ПараметрыУчетаОСЗемельныйНалогСрезПоследних
	    |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиЗемельногоНалогаПоОбластям.СрезПоследних(&Период, ) КАК ОбластиСрезПоследних
	    |			ПО ПараметрыУчетаОСЗемельныйНалогСрезПоследних.Область = ОбластиСрезПоследних.Область
	    |				И ПараметрыУчетаОСЗемельныйНалогСрезПоследних.КоличествоЧеловек >= ОбластиСрезПоследних.НижняяГраница
	    |	
	    |	СГРУППИРОВАТЬ ПО
	    |		ПараметрыУчетаОСЗемельныйНалогСрезПоследних.ОсновноеСредство,
	    |		ПараметрыУчетаОСЗемельныйНалогСрезПоследних.Область) КАК ШкалаСтавкиОтЧисленностиМакс
	    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиЗемельногоНалогаПоОбластям.СрезПоследних(&Период, ) КАК ОбластиСрезПоследних
	    |		ПО ШкалаСтавкиОтЧисленностиМакс.Область = ОбластиСрезПоследних.Область
	    |			И ШкалаСтавкиОтЧисленностиМакс.НижняяГраница = ОбластиСрезПоследних.НижняяГраница
	    |;
	    |
	    |////////////////////////////////////////////////////////////////////////////////
	    |ВЫБРАТЬ
	    |	РайоныСрезПоследних.Район КАК Ссылка,
	    |	РайоныСрезПоследних.ВидЗемельногоУчастка КАК ВидЗемельногоУчастка,
	    |	РайоныСрезПоследних.Ставка КАК Ставка
	    |ПОМЕСТИТЬ ВременнаяТаблицаСтавкиПоКатегории1
	    |ИЗ
	    |	РегистрСведений.СтавкиЗемельногоНалогаПоРайонам.СрезПоследних(&Период, ) КАК РайоныСрезПоследних
	    |;
	    |
	    |////////////////////////////////////////////////////////////////////////////////
	    |ВЫБРАТЬ
	    |	ПараметрыУчетаОСЗемельныйНалогСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	    |	ПараметрыУчетаОСЗемельныйНалогСрезПоследних.КатегорияЗемель КАК КатегорияЗемель,
	    |	ПараметрыУчетаОСЗемельныйНалогСрезПоследних.ВидЗемельногоУчастка КАК ВидЗемельногоУчастка,
	    |	ПараметрыУчетаОСЗемельныйНалогСрезПоследних.КоличествоЧеловек КАК КоличествоЧеловек,
	    |	ПараметрыУчетаОСЗемельныйНалогСрезПоследних.КоэффициентКоммерческогоИспользования КАК КоэффициентКоммерческогоИспользования,
	    |	ПараметрыУчетаОСЗемельныйНалогСрезПоследних.Площадь КАК Площадь,
	    |	ПараметрыУчетаОСЗемельныйНалогСрезПоследних.ДатаНачисленияЗамельногоНалога КАК ДатаНачисленияЗамельногоНалога,
	    |	ПараметрыУчетаОСЗемельныйНалогСрезПоследних.Район КАК Район,
	    |	ПараметрыУчетаОСЗемельныйНалогСрезПоследних.Область КАК Область,
	    |	ПараметрыУчетаОСЗемельныйНалогСрезПоследних.ЗональныйКоэффициент КАК ЗональныйКоэффициент,
	    |	ПараметрыУчетаОСЗемельныйНалогСрезПоследних.СтавкаЗНВторойКатегории КАК СтавкаЗНВторойКатегории
	    |ПОМЕСТИТЬ ВременнаяТаблицаПараметрыУчетаОСЗемельныйНалог
	    |ИЗ
	    |	РегистрСведений.ПараметрыУчетаОСЗемельныйНалог.СрезПоследних(&Период, Организация = &Организация) КАК ПараметрыУчетаОСЗемельныйНалогСрезПоследних
	    |;
	    |
	    |////////////////////////////////////////////////////////////////////////////////
	    |ВЫБРАТЬ
	    |	ВременнаяТаблицаПараметрыУчетаОСЗемельныйНалог.ОсновноеСредство КАК ОсновноеСредство,
	    |	ВременнаяТаблицаПараметрыУчетаОСЗемельныйНалог.КатегорияЗемель КАК КатегорияЗемель,
	    |	ВременнаяТаблицаПараметрыУчетаОСЗемельныйНалог.Площадь КАК Площадь,
	    |	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ВременнаяТаблицаПараметрыУчетаОСЗемельныйНалог.ДатаНачисленияЗамельногоНалога, ДЕНЬ), ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(&Период, ГОД), СЕКУНДА, 1), МЕСЯЦ) КАК КоличествоМесяцевЭксплуатации,
	    |	ВЫБОР
	    |		КОГДА ВременнаяТаблицаПараметрыУчетаОСЗемельныйНалог.КатегорияЗемель = ЗНАЧЕНИЕ(Перечисление.КатегорииЗемель.Сельхозугодья)
	    |				ИЛИ ВременнаяТаблицаПараметрыУчетаОСЗемельныйНалог.КатегорияЗемель = ЗНАЧЕНИЕ(Перечисление.КатегорииЗемель.Несельскохозяйственные)
	    |			ТОГДА &КоэффициентИнфляции
	    |		ИНАЧЕ 1
	    |	КОНЕЦ КАК КИ,
	    |	ВЫБОР
	    |		КОГДА ВременнаяТаблицаПараметрыУчетаОСЗемельныйНалог.КатегорияЗемель = ЗНАЧЕНИЕ(Перечисление.КатегорииЗемель.Приусадебные)
	    |				ИЛИ ВременнаяТаблицаПараметрыУчетаОСЗемельныйНалог.КатегорияЗемель = ЗНАЧЕНИЕ(Перечисление.КатегорииЗемель.Несельскохозяйственные)
	    |			ТОГДА ЕСТЬNULL(ВременнаяТаблицаПараметрыУчетаОСЗемельныйНалог.ЗональныйКоэффициент.Коэффициент, 0)
	    |		ИНАЧЕ 1
	    |	КОНЕЦ КАК КЗ,
	    |	ВЫБОР
	    |		КОГДА ВременнаяТаблицаПараметрыУчетаОСЗемельныйНалог.КатегорияЗемель = ЗНАЧЕНИЕ(Перечисление.КатегорииЗемель.Несельскохозяйственные)
	    |			ТОГДА ЕСТЬNULL(ВременнаяТаблицаПараметрыУчетаОСЗемельныйНалог.КоэффициентКоммерческогоИспользования.Коэффициент, 0)
	    |		ИНАЧЕ 1
	    |	КОНЕЦ КАК КК,
	    |	ВЫБОР
	    |		КОГДА ВременнаяТаблицаПараметрыУчетаОСЗемельныйНалог.КатегорияЗемель = ЗНАЧЕНИЕ(Перечисление.КатегорииЗемель.Сельхозугодья)
	    |			ТОГДА ЕСТЬNULL(ВременнаяТаблицаСтавкиПоКатегории1.Ставка, 0)
	    |		КОГДА ВременнаяТаблицаПараметрыУчетаОСЗемельныйНалог.КатегорияЗемель = ЗНАЧЕНИЕ(Перечисление.КатегорииЗемель.Приусадебные)
	    |			ТОГДА ЕСТЬNULL(ВременнаяТаблицаПараметрыУчетаОСЗемельныйНалог.СтавкаЗНВторойКатегории, 0)
	    |		КОГДА ВременнаяТаблицаПараметрыУчетаОСЗемельныйНалог.КатегорияЗемель = ЗНАЧЕНИЕ(Перечисление.КатегорииЗемель.Несельскохозяйственные)
	    |			ТОГДА ЕСТЬNULL(ВременнаяТаблицаСтавкиПоКатегории3.Ставка, 0)
	    |		ИНАЧЕ 0
	    |	КОНЕЦ КАК Ставка,
		|	ЕСТЬNULL(СтавкиЗемельногоНалогаСрезПоследних.Ставка, 0) КАК СтавкаПроцент
	    |ПОМЕСТИТЬ ВременнаяТаблицаЗемельныйНалог
	    |ИЗ
	    |	ВременнаяТаблицаПараметрыУчетаОСЗемельныйНалог КАК ВременнаяТаблицаПараметрыУчетаОСЗемельныйНалог
	    |		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСтавкиПоКатегории1 КАК ВременнаяТаблицаСтавкиПоКатегории1
	    |		ПО (ВременнаяТаблицаСтавкиПоКатегории1.Ссылка = ВременнаяТаблицаПараметрыУчетаОСЗемельныйНалог.Район)
	    |			И (ВременнаяТаблицаСтавкиПоКатегории1.ВидЗемельногоУчастка = ВременнаяТаблицаПараметрыУчетаОСЗемельныйНалог.ВидЗемельногоУчастка)
	    |		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСтавкиПоКатегории3 КАК ВременнаяТаблицаСтавкиПоКатегории3
	    |		ПО (ВременнаяТаблицаСтавкиПоКатегории3.ОсновноеСредство = ВременнаяТаблицаПараметрыУчетаОСЗемельныйНалог.ОсновноеСредство)
	    |			И (ВременнаяТаблицаСтавкиПоКатегории3.Область = ВременнаяТаблицаПараметрыУчетаОСЗемельныйНалог.Область)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиЗемельногоНалога.СрезПоследних(&Период, ) КАК СтавкиЗемельногоНалогаСрезПоследних
	    |		ПО ВременнаяТаблицаПараметрыУчетаОСЗемельныйНалог.КатегорияЗемель = СтавкиЗемельногоНалогаСрезПоследних.КатегорияЗемель
	    |;
	    |
	    |////////////////////////////////////////////////////////////////////////////////
	    |ВЫБРАТЬ
	    |	ВременнаяТаблицаЗемельныйНалог.ОсновноеСредство КАК ОсновноеСредство,
	    |	ВременнаяТаблицаЗемельныйНалог.КатегорияЗемель КАК КатегорияЗемель,
	    |	ВременнаяТаблицаЗемельныйНалог.Площадь КАК Площадь,
	    |	ВременнаяТаблицаЗемельныйНалог.КоличествоМесяцевЭксплуатации КАК КоличествоМесяцевЭксплуатации,
	    |	ВременнаяТаблицаЗемельныйНалог.КИ КАК КИ,
	    |	ВременнаяТаблицаЗемельныйНалог.КЗ КАК КЗ,
	    |	ВременнаяТаблицаЗемельныйНалог.КК КАК КК,
	    |	ВременнаяТаблицаЗемельныйНалог.Ставка КАК Ставка,
		|	ВременнаяТаблицаЗемельныйНалог.СтавкаПроцент КАК СтавкаПроцент
	    |ИЗ
	    |	ВременнаяТаблицаЗемельныйНалог КАК ВременнаяТаблицаЗемельныйНалог
	    |;
	    |
	    |////////////////////////////////////////////////////////////////////////////////
	    |ВЫБРАТЬ
	    |	ВременнаяТаблицаЗемельныйНалог.ОсновноеСредство КАК ОсновноеСредство,
	    |	ПараметрыУчетаОСЗемельныйНалогПодОбъектомИмуществаСрезПоследних.ОбъектИмущества КАК ОбъектИмущества,
	    |	ПараметрыУчетаОСЗемельныйНалогПодОбъектомИмуществаСрезПоследних.ПлощадьПодОбъектомИмущества КАК Площадь,
	    |	ВременнаяТаблицаЗемельныйНалог.КатегорияЗемель КАК КатегорияЗемель,
		|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ПараметрыУчетаОСЗемельныйНалогПодОбъектомИмуществаСрезПоследних.ДатаНачисленияЗамельногоНалога, ДЕНЬ), ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(&Период, ГОД), СЕКУНДА, 1), МЕСЯЦ) КАК КоличествоМесяцевЭксплуатации,
	    |	ВременнаяТаблицаЗемельныйНалог.КИ КАК КИ,
	    |	ВременнаяТаблицаЗемельныйНалог.КЗ КАК КЗ,
	    |	ВременнаяТаблицаЗемельныйНалог.КК КАК КК,
	    |	ВременнаяТаблицаЗемельныйНалог.Ставка КАК Ставка,
		|	ВременнаяТаблицаЗемельныйНалог.СтавкаПроцент КАК СтавкаПроцент
	    |ИЗ
	    |	ВременнаяТаблицаЗемельныйНалог КАК ВременнаяТаблицаЗемельныйНалог
	    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыУчетаОСЗемельныйНалогПодОбъектомИмущества.СрезПоследних(&Период, Организация = &Организация) КАК ПараметрыУчетаОСЗемельныйНалогПодОбъектомИмуществаСрезПоследних
	    |		ПО ВременнаяТаблицаЗемельныйНалог.ОсновноеСредство = ПараметрыУчетаОСЗемельныйНалогПодОбъектомИмуществаСрезПоследних.ОсновноеСредство";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", КонецПериода);
	Запрос.УстановитьПараметр("КоэффициентИнфляции", ДанныеУчетнойПолитики.КоэффициентИнфляции);
	
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = МассивРезультатовЗапроса[4].Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТабличнойЧасти = ЗемельныйНалог.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
		СтрокаТабличнойЧасти.КоличествоМесяцевЭксплуатации = ?(Выборка.КоличествоМесяцевЭксплуатации > 12, 12,Выборка.КоличествоМесяцевЭксплуатации); 
		СтрокаТабличнойЧасти.Сумма = Выборка.Ставка * Выборка.Площадь * Выборка.КИ * Выборка.КЗ * Выборка.КК * (Выборка.СтавкаПроцент / 100) * ?(Выборка.КоличествоМесяцевЭксплуатации > 12, 12,Выборка.КоличествоМесяцевЭксплуатации) / 12;
	КонецЦикла;
	
	// ЗемельныйНалогПодОбъектомИмущества
	Выборка = МассивРезультатовЗапроса[5].Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.КоличествоМесяцевЭксплуатации = 0 Тогда 
			Продолжить;
		КонецЕсли;
		СтрокаТабличнойЧасти = ЗемельныйНалогПодОбъектомИмущества.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
		СтрокаТабличнойЧасти.КоличествоМесяцевЭксплуатации = ?(Выборка.КоличествоМесяцевЭксплуатации > 12, 12,Выборка.КоличествоМесяцевЭксплуатации); 
		СтрокаТабличнойЧасти.Сумма = Выборка.Ставка * Выборка.Площадь * Выборка.КИ * Выборка.КЗ * Выборка.КК * (Выборка.СтавкаПроцент / 100) * ?(Выборка.КоличествоМесяцевЭксплуатации > 12, 12,Выборка.КоличествоМесяцевЭксплуатации) / 12;
	КонецЦикла;

КонецПроцедуры

// Процедура - Рассчитать Налог на имущество.
//
Процедура РассчитатьНалогНаИмущество(Ошибки)
	
	НомерМесяца = Месяц(Дата);
	Если НомерМесяца = 12 Тогда
		НачалоПериода = НачалоГода(Дата);
	Иначе
	    НачалоПериода = НачалоМесяца(Дата);
	КонецЕсли;
	
	МассивРезультатов = Документы.ЗакрытиеМесяца.ПолучитьДанныеПоНалогуНаИмущество(Организация, НачалоПериода, КонецМесяца(Дата));

	// Недвижимость.
	Выборка = МассивРезультатов[8].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Стоимость = 0;
		Результат = 0;
		
		// Проверка заполнения показателей.
		ТекстСообщения = "";
		Если Выборка.ОбщаяПлощадь = 0 Тогда 
			ТекстСообщения = НСтр("ru = 'Расчет налога на имущество. Общая площадь равна 0. Основное средство ""%1"".'");
		ИначеЕсли Выборка.ОценочнаяСтоимость = 0 Тогда 
			ТекстСообщения = НСтр("ru = 'Расчет налога на имущество. Оценочная стоимость равна 0. Основное средство ""%1"".'");
		ИначеЕсли Выборка.РегиональныйКоэффициент = 0 Тогда 
			ТекстСообщения = НСтр("ru = 'Расчет налога на имущество. Региональный Коэффициент равен 0. Основное средство ""%1"".'");
		ИначеЕсли Выборка.ЗональныйКоэффициент = 0 Тогда 
			ТекстСообщения = НСтр("ru = 'Расчет налога на имущество. Зональный Коэффициент равен 0. Основное средство ""%1"".'");
		ИначеЕсли Выборка.ОтраслевойКоэффициент = 0 Тогда 
			ТекстСообщения = НСтр("ru = 'Расчет налога на имущество. Отраслевой Коэффициент равен 0. Основное средство ""%1"".'");
		ИначеЕсли Выборка.Ставка = 0 Тогда 
			ТекстСообщения = НСтр("ru = 'Расчет налога на имущество. Ставка налога на имущество равна 0. Основное средство ""%1"".'");
		ИначеЕсли Выборка.КоличествоМесяцевЭксплуатации = 0 Тогда 
			// Не ошибка. Снято с учета в первом месяце года.
			Продолжить;	
		ИначеЕсли Выборка.ДатаНачисленияНалогаНаИмущество > КонецМесяца(Дата) Тогда
			Продолжить;	
		Иначе 
			Стоимость = Выборка.ОбщаяПлощадь * Выборка.ОценочнаяСтоимость * Выборка.РегиональныйКоэффициент * Выборка.ЗональныйКоэффициент * Выборка.ОтраслевойКоэффициент;
			Результат = Выборка.КоличествоМесяцевЭксплуатации / 12 * (Стоимость * Выборка.Ставка / 100);
		КонецЕсли;
		
		Если НЕ ТекстСообщения = "" Тогда 
			ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.ОсновноеСредствоНаименование);
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстСообщения, Неопределено);
		КонецЕсли;	
		
		СтрокаТабличнойЧасти = Недвижимость.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
		СтрокаТабличнойЧасти.Кр = Выборка.РегиональныйКоэффициент;
		СтрокаТабличнойЧасти.Кз = Выборка.ЗональныйКоэффициент;
		СтрокаТабличнойЧасти.Ко = Выборка.ОтраслевойКоэффициент;
		СтрокаТабличнойЧасти.СуммаНалога = Результат;
		СтрокаТабличнойЧасти.СтоимостьНУ = Стоимость;
	КонецЦикла; 
	
	// Транспорт.
	Выборка = МассивРезультатов[16].Выбрать();
	
	НесамоходныеТС = Справочники.ВидыТранспортаНалогНаИмущество.НайтиПоНаименованию("Несамоходные");
	ДругиеТС = Справочники.ВидыТранспортаНалогНаИмущество.НайтиПоНаименованию("Другие");
	
	// Старый расчет налога на имущество
	Если Дата < Дата(2022,01,01) Тогда
		Пока Выборка.Следующий() Цикл
			Результат = 0;
			БалансоваяСтоимость = 0;
			
			Если Выборка.ДатаНачисленияНалогаНаИмущество > КонецМесяца(Дата) Тогда
				Продолжить;	
			КонецЕсли;
			
			// Проверка заполнения показателей.
			ТекстСообщения = "";	
			
			Если Выборка.ВидТранспорта = НесамоходныеТС ИЛИ Выборка.ВидТранспорта = ДругиеТС Тогда
				
				СтрокаТабличнойЧасти = АмортизацияОС.Найти(Выборка.ОсновноеСредство, "ОсновноеСредство");
				
				Если СтрокаТабличнойЧасти <> Неопределено Тогда
					БалансоваяСтоимость = Выборка.ПервоначальнаяСтоимость - Выборка.НакопленныйИзнос - СтрокаТабличнойЧасти.Сумма;
				Иначе
					БалансоваяСтоимость = Выборка.ПервоначальнаяСтоимость - Выборка.НакопленныйИзнос;
				КонецЕсли;
				Результат = БалансоваяСтоимость * Выборка.Ставка / 100;
				
			Иначе		
				Если Выборка.ОбъемДвигателя = 0 Тогда 
					ТекстСообщения = НСтр("ru = 'Расчет налога на имущество. Объем двигателя равен 0. Основное средство ""%1"".'");
				ИначеЕсли Выборка.ОценочнаяСтоимость = 0 Тогда 
					ТекстСообщения = НСтр("ru = 'Расчет налога на имущество. Оценочная стоимость равна 0. Основное средство ""%1"".'");	
				Иначе
					Результат = Выборка.ОбъемДвигателя * Выборка.ОценочнаяСтоимость;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ТекстСообщения = "" Тогда 
				ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.ОсновноеСредствоНаименование);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстСообщения, Неопределено);
			КонецЕсли;	
			
			СтрокаТабличнойЧасти = Транспорт.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
			СтрокаТабличнойЧасти.БалансоваяСтоимость = БалансоваяСтоимость;
			СтрокаТабличнойЧасти.СуммаНалога = Результат;
		КонецЦикла;
	
		
	// Новый расчет налога на имущество	
	Иначе	
		Пока Выборка.Следующий() Цикл
			Результат = 0;
			БалансоваяСтоимость = 0;
			
			Если Выборка.ДатаНачисленияНалогаНаИмущество > КонецМесяца(Дата) Тогда
				Продолжить;	
			КонецЕсли;
			
			// Проверка заполнения показателей.
			ТекстСообщения = "";	
			
			Если Выборка.ВидТранспорта = НесамоходныеТС ИЛИ Выборка.ВидТранспорта = ДругиеТС Тогда
				
				СтрокаТабличнойЧасти = АмортизацияОС.Найти(Выборка.ОсновноеСредство, "ОсновноеСредство");
				
				Если СтрокаТабличнойЧасти <> Неопределено Тогда
					БалансоваяСтоимость = Выборка.ПервоначальнаяСтоимость - Выборка.НакопленныйИзнос - СтрокаТабличнойЧасти.Сумма;
				Иначе
					БалансоваяСтоимость = Выборка.ПервоначальнаяСтоимость - Выборка.НакопленныйИзнос;
				КонецЕсли;
				
			Иначе		
				Если Выборка.ОбъемДвигателя = 0 Тогда 
					ТекстСообщения = НСтр("ru = 'Расчет налога на имущество. Объем двигателя равен 0. Основное средство ""%1"".'");
				ИначеЕсли Выборка.ОценочнаяСтоимость = 0 Тогда 
					ТекстСообщения = НСтр("ru = 'Расчет налога на имущество. Оценочная стоимость равна 0. Основное средство ""%1"".'");	
				Иначе
					Результат = Выборка.ОбъемДвигателя * Выборка.ОценочнаяСтоимость;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ТекстСообщения = "" Тогда 
				ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.ОсновноеСредствоНаименование);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстСообщения, Неопределено);
			КонецЕсли;	
			
			Если Выборка.ГруппаИмущества = Справочники.ГруппыИмущества.ГИ4с Тогда
				Результат = Выборка.ОбъемДвигателя * Выборка.Ставка * Выборка.КорректировочныйКоэффициент * Выборка.СтавкаНалогаНаИмущество / 100;
			ИначеЕсли Выборка.ГруппаИмущества = Справочники.ГруппыИмущества.ГИ4нс Тогда
				Результат = БалансоваяСтоимость * Выборка.СтавкаНалогаНаИмущество / 100; 
			КонецЕсли;	
			
			СтрокаТабличнойЧасти = Транспорт.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
			СтрокаТабличнойЧасти.БалансоваяСтоимость = БалансоваяСтоимость;
			СтрокаТабличнойЧасти.СуммаНалога = Результат;
		КонецЦикла; 
	КонецЕсли;	
КонецПроцедуры

// Процедура - Выполнить закрытие временных счетов учета
//
Процедура ВыполнитьЗакрытиеВременныхСчетовУчета()
	
	// 1. Список временных счетов
	// 2. Расходы по амортизации
	// 3. Расходы/доходы от переоценки валют
	// 4. Расходы по налогу на имущество
	//		* Недвижимость
	//		* Транспорт
	// 4. Формирование результирующей таблицы
	//		* Остатки временных счетов актив
	// 		* Остатки временных счетов пассив
	// 		* Данные по амортизации
	// 		* Доходы от переоценки
	// 		* Убытки от переоценки
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	1 КАК Порядок,
		|	Хозрасчетный.Ссылка КАК Ссылка,
		|	Хозрасчетный.Вид КАК ВидСчета,
		|	Хозрасчетный.Код КАК КодСчета
		|ПОМЕСТИТЬ ВременнаяТаблицаСчетаУчета
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Временный
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК СчетУчета,
		|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаДт,
		|	0 КАК СуммаКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&МоментВремени,
		|			Счет В
		|				(ВЫБРАТЬ
		|					ВременнаяТаблицаСчетаУчета.Ссылка
		|				ИЗ
		|					ВременнаяТаблицаСчетаУчета КАК ВременнаяТаблицаСчетаУчета
		|				ГДЕ
		|					ВременнаяТаблицаСчетаУчета.ВидСчета = ЗНАЧЕНИЕ(ВидСчета.Активный)),
		|			,
		|			Организация = &Организация) КАК ХозрасчетныйОстатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСчетаУчета КАК ВременнаяТаблицаСчетаУчета
		|		ПО ХозрасчетныйОстатки.Счет = ВременнаяТаблицаСчетаУчета.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет,
		|	0,
		|	ХозрасчетныйОстатки.СуммаОстаток * -1
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&МоментВремени,
		|			Счет В
		|				(ВЫБРАТЬ
		|					ВременнаяТаблицаСчетаУчета.Ссылка
		|				ИЗ
		|					ВременнаяТаблицаСчетаУчета КАК ВременнаяТаблицаСчетаУчета
		|				ГДЕ
		|					ВременнаяТаблицаСчетаУчета.ВидСчета = ЗНАЧЕНИЕ(ВидСчета.Пассивный)),
		|			,
		|			Организация = &Организация) КАК ХозрасчетныйОстатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСчетаУчета КАК ВременнаяТаблицаСчетаУчета
		|		ПО ХозрасчетныйОстатки.Счет = ВременнаяТаблицаСчетаУчета.Ссылка";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МоментВремени", Дата + 1); 
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ЗакрытиеМесяцаАмортизацияОС", АмортизацияОС.Выгрузить());
	Запрос.УстановитьПараметр("ЗакрытиеМесяцаПереоценкаВалюты", ПереоценкаВалюты.Выгрузить());
	Запрос.УстановитьПараметр("ЗакрытиеМесяцаНедвижимость", Недвижимость.Выгрузить());
	Запрос.УстановитьПараметр("ЗакрытиеМесяцаТранспорт", Транспорт.Выгрузить());
	
	ВременныеСчетаУчета.Загрузить(Запрос.Выполнить().Выгрузить())
	
КонецПроцедуры

// Процедура - рассчитать налоговую амортизацию.
//
Процедура РассчитатьНалоговуюАмортизацию(ДанныеУчетнойПолитики)
	
	ТекстЗапроса = РасчетНалогаНаПрибыльСервер.ТекстЗапросаПоРасчетуНалоговойАмортизацииВДокументеЗакрытиеМесяца();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПрошлогоГода", НачалоГода(НачалоГода(Дата)-1));
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода(Дата));
	Запрос.УстановитьПараметр("КонецГода", КонецГода(Дата));
	Запрос.УстановитьПараметр("ГруппаНУ", Справочники.ГруппыНалоговогоУчетаОС.ПустаяСсылка());
	Запрос.УстановитьПараметр("ОсновноеСредство", Справочники.ОсновныеСредства.ПустаяСсылка());
	Запрос.УстановитьПараметр("МинимумСтоимостиОСДляНУ", ДанныеУчетнойПолитики.МинимумСтоимостиОСДляНУ);
	
	МассивСчетовЗатратНаРемонтОС = Новый Массив();
	МассивСчетовЗатратНаРемонтОС.Добавить(ПланыСчетов.Хозрасчетный.ЗатратыНаРемонтИОбслуживаниеОсновныхСредств); // 7160
	МассивСчетовЗатратНаРемонтОС.Добавить(ПланыСчетов.Хозрасчетный.РемонтИОбслуживаниеОсновныхСредств); // 8110
	Запрос.УстановитьПараметр("СчетаЗатратНаРемонтОС",	МассивСчетовЗатратНаРемонтОС);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	КомментарийПоНалоговойАмортизации = "";
		
	// Заполнение налоговой амортизации.
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СтрокаТабличнойЧасти = НалоговаяАмортизация.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаДетальныеЗаписи);
		
		СтрокаТабличнойЧасти.БалансоваяСтоимостьНаНачалоГода = ВыборкаДетальныеЗаписи.БалансоваяСтоимостьНаКонецПрошлыйГод - ВыборкаДетальныеЗаписи.АмортизацияЗаПрошлыйГод;
		
		// Норма на ремонт 15%, если не укладываемся, то превышение идет на увеличение балансовой стоимости.
		Если НЕ ВыборкаДетальныеЗаписи.ЗатратыНаРемонт = 0 Тогда 
			СтрокаТабличнойЧасти.НормаНаРемонт = СтрокаТабличнойЧасти.БалансоваяСтоимостьНаНачалоГода * ПредельнаяНормаНаРемонтОС / 100;	
		КонецЕсли;			
		
		// Превышение нормы на ремонт.
		Если ВыборкаДетальныеЗаписи.ЗатратыНаРемонт > СтрокаТабличнойЧасти.НормаНаРемонт Тогда 
			СтрокаТабличнойЧасти.ПревышениеНормыНаРемонт = ВыборкаДетальныеЗаписи.ЗатратыНаРемонт - СтрокаТабличнойЧасти.НормаНаРемонт;	
		КонецЕсли;
		
		// Балансовая стоимость группы расчетная.
		СтрокаТабличнойЧасти.БалансоваяСтоимостьНаКонецГода = СтрокаТабличнойЧасти.БалансоваяСтоимостьНаНачалоГода
			+ ВыборкаДетальныеЗаписи.СуммаПоступленияНУ
			+ ВыборкаДетальныеЗаписи.СуммаПоступленияОстатокПрошлыйГод
			- ВыборкаДетальныеЗаписи.СуммаВыбытияНУ
			- ВыборкаДетальныеЗаписи.СуммаВыбытияОстатокПрошлыйГод
			+ СтрокаТабличнойЧасти.ПревышениеНормыНаРемонт;
	                                  		
		СтрокаТабличнойЧасти.БалансоваяСтоимостьИтого = СтрокаТабличнойЧасти.БалансоваяСтоимостьНаКонецГода;
				
		// Проверяем ОС группы 5 больше 20 лет, находящихся на учете.
		СтрокаТабличнойЧасти.КоличествоЛетЭксплуатации = 0;	
		Если ВыборкаДетальныеЗаписи.ГруппаНУ = Справочники.ГруппыНалоговогоУчетаОС.Группа5
			И НЕ ВыборкаДетальныеЗаписи.КоличествоВГруппах = 0 Тогда 
			
			// Проверка указания даты принятия к учету.
			Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ДатаВводаВЭксплуатацию) 
				И ВыборкаДетальныеЗаписи.СуммаВыбытияОстатокПрошлыйГод = 0 Тогда 				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Для ОС ""%1"" не указана дата принятия к учету.'"), ВыборкаДетальныеЗаписи.ОсновноеСредство.Наименование);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			// Расчет количества лет эксплуатации.
			СтрокаТабличнойЧасти.КоличествоЛетЭксплуатации = Год(Дата) - Год(ВыборкаДетальныеЗаписи.ДатаВводаВЭксплуатацию);	
			
			// Проверка заполнения базы для расчета прямолинейной амортизации.
			БазаПрямолинейнойАмортизацииПрошлыйГод = 0;
			Если СтрокаТабличнойЧасти.КоличествоЛетЭксплуатации > 20 
				И ВыборкаДетальныеЗаписи.БазаПрямолинейнойАмортизацииПрошлыйГод = 0 Тогда 
				БазаПрямолинейнойАмортизацииПрошлыйГод = СтрокаТабличнойЧасти.БалансоваяСтоимостьНаНачалоГода;
			КонецЕсли;		
			
			// БазаПрямолинейнойАмортизации = База прошлого года + СуммаПоступления + ПревышениеЗатратНаРемонт
			СтрокаТабличнойЧасти.БазаПрямолинейнойАмортизации = БазаПрямолинейнойАмортизацииПрошлыйГод
				+ ВыборкаДетальныеЗаписи.СуммаПоступления
				+ СтрокаТабличнойЧасти.ПревышениеНормыНаРемонт;
		КонецЕсли;			
		
		КомментарийПоНалоговойАмортизации = "";
		
		// Расчет амортизации и вычетов.
		// Проверка балансовой стоимости меньше нуля
		Если СтрокаТабличнойЧасти.БалансоваяСтоимостьНаКонецГода < 0 Тогда 
						
			СтрокаТабличнойЧасти.УвеличениеСОД = - СтрокаТабличнойЧасти.БалансоваяСтоимостьНаКонецГода;			
			СтрокаТабличнойЧасти.БалансоваяСтоимостьИтого = 0;
			СтрокаТабличнойЧасти.Амортизация = 0;
			
			ДобавитьКомментарийПоНалоговойАмортизации("КомментарийНА_1", КомментарийПоНалоговойАмортизации, СтрокаТабличнойЧасти, ВыборкаДетальныеЗаписи);
			
		// Проверка балансовой стоимости на меньше 100 РП.
		ИначеЕсли СтрокаТабличнойЧасти.БалансоваяСтоимостьНаКонецГода < МинимальнаяСтоимостьГруппыОС Тогда 
			
			СтрокаТабличнойЧасти.ВычетМеньше100РП = СтрокаТабличнойЧасти.БалансоваяСтоимостьНаКонецГода;			
			//СтрокаТабличнойЧасти.БалансоваяСтоимостьИтого = 0;			
			СтрокаТабличнойЧасти.Амортизация = СтрокаТабличнойЧасти.БалансоваяСтоимостьНаКонецГода;
			
			ДобавитьКомментарийПоНалоговойАмортизации("КомментарийНА_2", КомментарийПоНалоговойАмортизации, СтрокаТабличнойЧасти, ВыборкаДетальныеЗаписи);
			
		// Проверка на нулевое количество группы.
		ИначеЕсли ВыборкаДетальныеЗаписи.КоличествоВГруппах = 0 
			И НЕ СтрокаТабличнойЧасти.ГруппаНУ = Справочники.ГруппыНалоговогоУчетаОС.Группа5 Тогда 
			
			ДобавитьКомментарийПоНалоговойАмортизации("КомментарийНА_3", КомментарийПоНалоговойАмортизации, СтрокаТабличнойЧасти, ВыборкаДетальныеЗаписи);
			
			СтрокаТабличнойЧасти.Амортизация = СтрокаТабличнойЧасти.БалансоваяСтоимостьНаКонецГода;			
			//СтрокаТабличнойЧасти.БалансоваяСтоимостьИтого = 0;			
			
		// Проверка на нулевое количество ОС группы 5.
		ИначеЕсли НЕ СтрокаТабличнойЧасти.ОсновноеСредство.Пустая()
			И ВыборкаДетальныеЗаписи.КоличествоВГруппах = 0 Тогда
			
			ДобавитьКомментарийПоНалоговойАмортизации("КомментарийНА_3", КомментарийПоНалоговойАмортизации, СтрокаТабличнойЧасти, ВыборкаДетальныеЗаписи);
			
			СтрокаТабличнойЧасти.Амортизация = СтрокаТабличнойЧасти.БалансоваяСтоимостьНаКонецГода;			
			//СтрокаТабличнойЧасти.БалансоваяСтоимостьИтого = 0;
						
		// Расчет амортизация для ОС группы 5.
		ИначеЕсли СтрокаТабличнойЧасти.КоличествоЛетЭксплуатации > 20 Тогда 
			СтрокаТабличнойЧасти.Амортизация = СтрокаТабличнойЧасти.БазаПрямолинейнойАмортизации * ВыборкаДетальныеЗаписи.НормаАмортизацииДополнительная / 100;
			
		// Обычный расчет.	
		Иначе
			СтрокаТабличнойЧасти.Амортизация = СтрокаТабличнойЧасти.БалансоваяСтоимостьНаКонецГода * СтрокаТабличнойЧасти.НормаАмортизации / 100;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.УвеличениеСтоимости = ВыборкаДетальныеЗаписи.СуммаПоступления;
		СтрокаТабличнойЧасти.УвеличениеСтоимостиНУ = ВыборкаДетальныеЗаписи.СуммаПоступленияНУ;
		СтрокаТабличнойЧасти.ПоступлениеПрошлыйГод = ВыборкаДетальныеЗаписи.СуммаПоступленияОстатокПрошлыйГод;
		СтрокаТабличнойЧасти.ВыбытиеПрошлыйГод = ВыборкаДетальныеЗаписи.СуммаВыбытияОстатокПрошлыйГод;
		
		СтрокаТабличнойЧасти.ПоступлениеБудущийГод = СтрокаТабличнойЧасти.УвеличениеСтоимости - СтрокаТабличнойЧасти.УвеличениеСтоимостиНУ;
		СтрокаТабличнойЧасти.ВыбытиеБудущийГод = СтрокаТабличнойЧасти.СуммаВыбытия - СтрокаТабличнойЧасти.СуммаВыбытияНУ;
		
		СтрокаТабличнойЧасти.Комментарий = КомментарийПоНалоговойАмортизации;
		
	КонецЦикла;
КонецПроцедуры

// Процедура - рассчитать налоговую выверку.
//
Процедура РассчитатьНалоговуюВыверку(ДанныеУчетнойПолитики, Ошибки)

	ТекстЗапроса = РасчетНалогаНаПрибыльСервер.ТекстЗапросаПоРасчетуНалоговойВыверки();
	
	СчетаУчетаИсключения = Новый Массив;
	СчетаУчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.РасходыНаАмортизациюОсновныхСредств);	
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(Дата));
	Запрос.УстановитьПараметр("КонецПериода", КонецГода(Дата));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СчетаУчетаИсключения", СчетаУчетаИсключения);
	// для получения данных из РС ПлатежиПоНалогуНаПрибыль 
	Запрос.УстановитьПараметр("Период3кв", НачалоКвартала(КонецГода(Дата))-1);
	Запрос.УстановитьПараметр("ТекущийГод", Год(Дата));

	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();             
	
	// Суммы КР – доходы/расходы
	СуммаДоходы 	= 0;
	СуммаРасходы 	= 0;	
	Если НЕ МассивРезультатовЗапроса[8].Пустой() Тогда 
		ВыборкаДетальныхЗаписей = МассивРезультатовЗапроса[8].Выбрать();
		Пока ВыборкаДетальныхЗаписей.Следующий() Цикл
			СуммаДоходы = СуммаДоходы + ВыборкаДетальныхЗаписей.Сумма;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ МассивРезультатовЗапроса[9].Пустой() Тогда 
		ВыборкаДетальныхЗаписей = МассивРезультатовЗапроса[9].Выбрать();
		Пока ВыборкаДетальныхЗаписей.Следующий() Цикл
			СуммаРасходы = СуммаРасходы + ВыборкаДетальныхЗаписей.Сумма;
		КонецЦикла;		
	КонецЕсли;
		
//	СуммаДоходы_2_1 		= 0;
//	СуммаРасходы_2_1		= 0;
//	
//	Если СуммаДоходы - СуммаРасходы > 0 Тогда
//		СуммаДоходы_2_1 = СуммаДоходы - СуммаРасходы;
//	Иначе
//		СуммаДоходы_2_1_минус = СуммаДоходы - СуммаРасходы;
//	КонецЕсли;
//	Если СуммаРасходы - СуммаДоходы > 0 Тогда
//		СуммаРасходы_2_1 = СуммаРасходы - СуммаДоходы;
//	Иначе
//		СуммаРасходы_2_1_минус = СуммаРасходы - СуммаДоходы;
//	КонецЕсли;
//	
//	// Превышение КР
//	Если СуммаДоходы - СуммаРасходы > 0 Тогда
//		СуммаДоходыПревышение = СуммаДоходы - СуммаРасходы;
//		СуммаРасходыПревышение = 0;
//	Иначе
//		СуммаДоходыПревышение = 0;
//		СуммаРасходыПревышение = СуммаРасходы - СуммаДоходы;
//	КонецЕсли;	
	
	// 1. Доходы по бухгалтерскому учету.
	СуммаДоходыБУ = 0;
	Если НЕ МассивРезультатовЗапроса[0].Пустой() Тогда 
		ВыборкаДетальныхЗаписей = МассивРезультатовЗапроса[0].Выбрать();
		Пока ВыборкаДетальныхЗаписей.Следующий() Цикл
			СуммаДоходыБУ = СуммаДоходыБУ + ВыборкаДетальныхЗаписей.Сумма;
		КонецЦикла;
	КонецЕсли;	
	
	// 2. Расходы по бухгалтерскому учету.
	СуммаРасходыБУ = 0;
	Если НЕ МассивРезультатовЗапроса[1].Пустой() Тогда 
		ВыборкаДетальныхЗаписей = МассивРезультатовЗапроса[1].Выбрать();
		Пока ВыборкаДетальныхЗаписей.Следующий() Цикл
			СуммаРасходыБУ = СуммаРасходыБУ + ВыборкаДетальныхЗаписей.Сумма;
		КонецЦикла;
	КонецЕсли;
	
	// 3. Прибыль до налогобложения.
	СуммаПрибыльДоНалогов		= СуммаДоходыБУ - СуммаРасходыБУ;	
	
	// 4. Постоянные разницы - доходы.	
	СуммаПостоянныеРазницыДоходы = 0;
	Если НЕ МассивРезультатовЗапроса[2].Пустой() Тогда 
		ВыборкаДетальныхЗаписей = МассивРезультатовЗапроса[2].Выбрать();
		Пока ВыборкаДетальныхЗаписей.Следующий() Цикл
			СуммаПостоянныеРазницыДоходы = СуммаПостоянныеРазницыДоходы + ВыборкаДетальныхЗаписей.Сумма;
		КонецЦикла;
	КонецЕсли;	
	
	// 5. Постоянные разницы - расходы.
	СуммаПостоянныеРазницыРасходы = 0;
	Если НЕ МассивРезультатовЗапроса[3].Пустой() Тогда 
		ВыборкаДетальныхЗаписей = МассивРезультатовЗапроса[3].Выбрать();
		Пока ВыборкаДетальныхЗаписей.Следующий() Цикл
			СуммаПостоянныеРазницыРасходы = СуммаПостоянныеРазницыРасходы + ВыборкаДетальныхЗаписей.Сумма;
		КонецЦикла;
	КонецЕсли;

	// 6. Постоянные разницы.
	
	// 7. Прибыль с учетом постоянных разниц.
	
	// 8. Расходы по налогу на прибыль (справочно).
	//СтавкаНалогаНаПрибыль = СтавкаНалогаНаПрибыль;
	//РасходыПоНалогуНаПрибыль = 0;
	//Если СуммаПрибыльСУчетомПостоянныхРазниц > 0 Тогда 
	//	РасходыПоНалогуНаПрибыль			= Окр(СуммаПрибыльСУчетомПостоянныхРазниц * СтавкаНалогаНаПрибыль / 100,0);
	//КонецЕсли;
	
	// 9. Временные разницы.
	
	// 10. Доход от выбытия ОС.		
	//Для каждого СтрокаТаблицыНА Из ДокументЗакрытиеМесяца.НалоговаяАмортизация Цикл
	//	Если СтрокаТаблицыНА.УвеличениеСОД > 0 Тогда
	//	 	СтрокаТабличнойЧасти = Объект.НалоговаяВыверка10.Добавить();
	//		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТаблицыНА);
	//	    СтрокаТабличнойЧасти.Сумма = СтрокаТаблицыНА.УвеличениеСОД;
	//	КонецЕсли;
	//	
	//КонецЦикла;
		
	// 11. Амортизация бухгалтерская.	
	СуммаАмортизацияОСБУ = 0;
	СуммаАмортизацияОСБУ_Уменьшение = 0;
	Если НЕ МассивРезультатовЗапроса[4].Пустой() Тогда 
		ВыборкаДетальныхЗаписей = МассивРезультатовЗапроса[4].Выбрать();
		Пока ВыборкаДетальныхЗаписей.Следующий() Цикл
			СуммаАмортизацияОСБУ = СуммаАмортизацияОСБУ + ВыборкаДетальныхЗаписей.Сумма;
			Если НЕ ВыборкаДетальныхЗаписей.СчетДтВременный Тогда
			    СуммаАмортизацияОСБУ_Уменьшение = СуммаАмортизацияОСБУ_Уменьшение + ВыборкаДетальныхЗаписей.Сумма;
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;	
	
	// 12. Амортизация налоговая.
	СуммаАмортизацияОСНУ = НалоговаяАмортизация.Итог("Амортизация");
	ПревышениеНормыНаРемонт = НалоговаяАмортизация.Итог("ПревышениеНормыНаРемонт");
	
	// 13. Прочие временные разницы.
	// Пакет МассивРезультатовЗапроса[5] используется в мониторе Налога на Прибыль для расшифровки выверки	
		
	// 13. Прочие временные разницы - доходы/расходы.
	СуммаВР_ПрочиеДоходы = 0;
	СуммаВР_ПрочиеРасходы = 0;	
	Если НЕ МассивРезультатовЗапроса[6].Пустой() Тогда 
		ВыборкаДетальныхЗаписей = МассивРезультатовЗапроса[6].Выбрать();
		ВыборкаДетальныхЗаписей.Следующий();
		СуммаВР_ПрочиеДоходы = ВыборкаДетальныхЗаписей.Сумма;
	КонецЕсли;
	Если НЕ МассивРезультатовЗапроса[7].Пустой() Тогда 
		ВыборкаДетальныхЗаписей = МассивРезультатовЗапроса[7].Выбрать();
		ВыборкаДетальныхЗаписей.Следующий();
		СуммаВР_ПрочиеРасходы = ВыборкаДетальныхЗаписей.Сумма;
	КонецЕсли;	
	
	// 21. СуммаТекущийРасчетНалогаНаПрибыль
	СуммаТекущийРасчетНалогаНаПрибыль = 0;
	Если НЕ МассивРезультатовЗапроса[17].Пустой() Тогда 
		ВыборкаДетальныхЗаписей = МассивРезультатовЗапроса[17].Выбрать();
		ВыборкаДетальныхЗаписей.Следующий();
		СуммаТекущийРасчетНалогаНаПрибыль = ВыборкаДетальныхЗаписей.Сумма;
	КонецЕсли;
	
	// 1. Доходы по бухгалтерскому учету.
	СтрокаНалоговойВыверки 						= НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Доходы по бухучету'");
	СтрокаНалоговойВыверки.Сумма				= СуммаДоходыБУ;
	
	// 2. Расходы по бухгалтерскому учету.
	СтрокаНалоговойВыверки 						= НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Расходы по бухучету'");
	СтрокаНалоговойВыверки.Сумма				= СуммаРасходыБУ;
	
	// 3. Прибыль до налогообложения.
	СтрокаНалоговойВыверки 						= НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Прибыль до налогообложения по бухучету (Стр1 - Стр2)'");
	СуммаПрибыльДоНалогов						= СуммаДоходыБУ - СуммаРасходыБУ;
	СтрокаНалоговойВыверки.Сумма				= СуммаПрибыльДоНалогов;
	
	// 4. Постоянные разницы - доходы.
	СтрокаНалоговойВыверки 						= НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Постоянные разницы - доходы'");
	СтрокаНалоговойВыверки.Сумма				= СуммаПостоянныеРазницыДоходы;
	//СтрокаНалоговойВыверки.Доходы           	= СуммаПостоянныеРазницыДоходы;
	
	// 5. Постоянные разницы - расходы.
	СтрокаНалоговойВыверки 						= НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Постоянные разницы - расходы'");
	СтрокаНалоговойВыверки.Сумма				= СуммаПостоянныеРазницыРасходы;
	//СтрокаНалоговойВыверки.Расходы          	= СуммаПостоянныеРазницыРасходы;
	
	// 6. Постоянные разницы.
	СтрокаНалоговойВыверки 						= НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Постоянные разницы (Стр5 - Стр4)'");
	СуммаПостоянныеРазницы						= СуммаПостоянныеРазницыРасходы - СуммаПостоянныеРазницыДоходы;
	СтрокаНалоговойВыверки.Сумма				= СуммаПостоянныеРазницы;
	
	// 7. Прибыль с учетом постоянных разниц.
	СтрокаНалоговойВыверки 						= НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Прибыль с учетом ПР (Стр3 + Стр6)'");
	СуммаПрибыльСУчетомПостоянныхРазниц			= СуммаПрибыльДоНалогов + СуммаПостоянныеРазницы;
	СтрокаНалоговойВыверки.Сумма				= СуммаПрибыльСУчетомПостоянныхРазниц;
	
	// 8. Расходы по налогу на прибыль (справочно).
	СтрокаНалоговойВыверки 						= НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Расходы по НП (справочно: по ставке Стр16 от Стр7 с округл. до целых)'");
	
	СтавкаНалогаНаПрибыль = ДанныеУчетнойПолитики.СтавкаНалогаНаПрибыль;
	СтрокаНалоговойВыверки.Сумма = 0;
	Если СуммаПрибыльСУчетомПостоянныхРазниц > 0 Тогда 
		СтрокаНалоговойВыверки.Сумма			= Окр(СуммаПрибыльСУчетомПостоянныхРазниц * СтавкаНалогаНаПрибыль / 100,0);
	КонецЕсли;
	
	// 9. Временные разницы.
	СтрокаНалоговойВыверки 						= НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'ВРЕМЕННЫЕ РАЗНИЦЫ:'");	
		
	// 10. Доход от выбытия ОС.
	СтрокаНалоговойВыверки 						= НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Доход от выбытия ОС (отрицательная стоимость категорий ОС)'");
	СуммаДоходОтВыбытияОС						= ?(НалоговаяАмортизация.Итог("УвеличениеСОД") < 0, 0, НалоговаяАмортизация.Итог("УвеличениеСОД"));
	СтрокаНалоговойВыверки.Сумма				= СуммаДоходОтВыбытияОС;
	
	// 11. Амортизация бухгалтерская.
	СтрокаНалоговойВыверки 						= НалоговаяВыверка.Добавить();
	Если СуммаАмортизацияОСБУ_Уменьшение = 0 Тогда
		СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Амортизация бухгалтерская'");
	Иначе	
	    СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Амортизация бухгалтерская уменьшение'");
	КонецЕсли;
	СтрокаНалоговойВыверки.Сумма				= СуммаАмортизацияОСБУ - СуммаАмортизацияОСБУ_Уменьшение;
	
	// 12. Амортизация налоговая.
	СтрокаНалоговойВыверки 						= НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Амортизация налоговая'");
	СуммаАмортизацияОСНУ						= НалоговаяАмортизация.Итог("Амортизация");
	СтрокаНалоговойВыверки.Сумма				= -СуммаАмортизацияОСНУ;
	//СтрокаНалоговойВыверки.Расходы          	= СуммаАмортизацияОСНУ;
	
	// 13. Прочие временные разницы.
	СтрокаНалоговойВыверки 						= НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Прочие временные разницы (ВР)'");
	ПрочиеВР					 				= СуммаВР_ПрочиеРасходы - СуммаВР_ПрочиеДоходы + ПревышениеНормыНаРемонт;
	СтрокаНалоговойВыверки.Сумма 				= ПрочиеВР;
					
	// 14. Итого временные разницы.
	СтрокаНалоговойВыверки 						= НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Итого временные разницы (Стр10 + Стр11 - Стр12 + Стр13)'");
	СуммаИтогоВременныеРазницы					= СуммаДоходОтВыбытияОС + СуммаАмортизацияОСБУ - СуммаАмортизацияОСБУ_Уменьшение - СуммаАмортизацияОСНУ + ПрочиеВР;
	СтрокаНалоговойВыверки.Сумма				= СуммаИтогоВременныеРазницы;
	
	// 15. Убытки прошлых лет
	СтрокаНалоговойВыверки 						= НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Убыток прошлых лет'");
	СуммаУбытокПодлежащийПереносу 				= УбыткиПрошлыхЛет.Итог("УбытокПодлежащийПереносу");
	СтрокаНалоговойВыверки.Сумма				= СуммаУбытокПодлежащийПереносу;

	// 16. Налогооблагаемая прибыль.
	СтрокаНалоговойВыверки 						= НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Налогооблагаемая прибыль (Стр3 + Стр6 + Стр14 - Стр15)'");
	СуммаНалогооблагаемаяПрибыль				= СуммаПрибыльДоНалогов + СуммаПостоянныеРазницы + СуммаИтогоВременныеРазницы - СуммаУбытокПодлежащийПереносу;
	СтрокаНалоговойВыверки.Сумма				= СуммаНалогооблагаемаяПрибыль;
	
	// 17. Ставка налога.
	СтрокаНалоговойВыверки 						= НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Ставка налога'");
	СтрокаНалоговойВыверки.Сумма				= СтавкаНалогаНаПрибыль;
	
	// 18. Сумма налога на прибыль
	СтрокаНалоговойВыверки 						= НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Сумма налога на прибыль до вычета расходов на ККМ(по ставке Стр17 от Стр16)'");		
	СуммаНалогНаПрибыльДоВычетаРасходовНаККМ = 0;
	Если СуммаНалогооблагаемаяПрибыль > 0 Тогда 
		СуммаНалогНаПрибыльДоВычетаРасходовНаККМ = СуммаНалогооблагаемаяПрибыль * СтавкаНалогаНаПрибыль / 100;
	КонецЕсли;	
	СтрокаНалоговойВыверки.Сумма				= СуммаНалогНаПрибыльДоВычетаРасходовНаККМ; // СуммаНалогНаПрибыль;		
	
	// 19. Расходы на ККМ.
	СтрокаНалоговойВыверки 						= НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Расходы на ККМ'");
	СтрокаНалоговойВыверки.Сумма				= СуммаРасходовНаККМ;
	
	// 20. Сумма налога на прибыль (Стр18 - Стр19).
	СтрокаНалоговойВыверки 						= НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Сумма налога на прибыль'");
	СуммаНалогНаПрибыль 						= СуммаНалогНаПрибыльДоВычетаРасходовНаККМ - СуммаРасходовНаККМ;
	СтрокаНалоговойВыверки.Сумма				= СуммаНалогНаПрибыль;
	
	// 21. Предварительно начисленный налог на прибыль.
	СтрокаНалоговойВыверки 						= НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Предварительно начисленный налог на прибыль'");
	СтрокаНалоговойВыверки.Сумма				= СуммаТекущийРасчетНалогаНаПрибыль;
	
	// 22. Предварительно начисленный налог на прибыль (Стр 20 - Стр 21).
	СтрокаНалоговойВыверки 						= НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Сумма налога на прибыль к уплате'");
	СтрокаНалоговойВыверки.Сумма				= СуммаНалогНаПрибыль - СуммаТекущийРасчетНалогаНаПрибыль;

	// Расчет налога на прибыль по бухгалтерскому учету.	
	СуммаНалогНаПрибыльБУ = 0;
	
	БазаРасчета = ?(СуммаПрибыльСУчетомПостоянныхРазниц > 0, СуммаПрибыльСУчетомПостоянныхРазниц, 0);
	СуммаНалогНаПрибыльБУ = БазаРасчета * СтавкаНалогаНаПрибыль / 100;
	
	Если СуммаРасходовНаККМ > СуммаНалогНаПрибыльДоВычетаРасходовНаККМ Тогда 
		ТекстСообщения = НСтр("ru = 'Расчет налога на прибыль. Сумма расходов на ККМ превышает сумму налога на прибыль.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстСообщения, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьКомментарийПоНалоговойАмортизации(ВидКомментария, КомментарийПоНалоговойАмортизации, СтрокаТабличнойЧасти, ВыборкаДетальныеЗаписи)
	Строка = "";
	Если ВидКомментария = "КомментарийНА_1" Тогда
		Строка = СтрШаблон(НСтр("ru = 'Балансовая стоимость = %1, т.е. меньше 0. Налоговая амортизация = 0, Увеличение СОД = %2, Балансовая стоимость = 0'"), 
					СтрокаТабличнойЧасти.БалансоваяСтоимостьНаКонецГода,
					СтрокаТабличнойЧасти.УвеличениеСОД);
	    Строка = Строка + Символы.ПС;
		
	ИначеЕсли ВидКомментария = "КомментарийНА_2" Тогда
		Строка = СтрШаблон(НСтр("ru = 'Балансовая стоимость = %1, т.е. меньше мин. стоимости группы ОС %2. Налоговая амортизация = %1'"), 					
					СтрокаТабличнойЧасти.БалансоваяСтоимостьНаКонецГода,
					МинимальнаяСтоимостьГруппыОС);
	    Строка = Строка + Символы.ПС;	
				
	ИначеЕсли ВидКомментария = "КомментарийНА_3" Тогда
		Строка = СтрШаблон(НСтр("ru = 'Количество ОС = 0. Налоговая амортизация = %1'"), 
					СтрокаТабличнойЧасти.БалансоваяСтоимостьНаКонецГода);
	    Строка = Строка + Символы.ПС;
						
	//ИначеЕсли ВидКомментария = "КомментарийНА_4" Тогда
	//	Строка = СтрШаблон(НСтр("ru = 'Балансовая стоимость итого < Минимальная стоимость группы ОС, Балансовая стоимость итого = 0, Налоговая амортизация = Балансовая стоимость'"), 
	//				СтрокаТабличнойЧасти.СуммаВыбытия);
	//    Строка = Строка + Символы.ПС;		
		
	КонецЕсли;
	
	КомментарийПоНалоговойАмортизации = КомментарийПоНалоговойАмортизации + Строка;	

КонецПроцедуры

// Процедура - рассчитать единый налог
//
Процедура РассчитатьЕдиныйНалог(ДанныеУчетнойПолитики, РасчетЕдиногоНалогаЗаКвартал)

	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОборотыПоДаннымЕдиногоНалогаОбороты.ВидДеятельности КАК ВидДеятельности,
		|	ОборотыПоДаннымЕдиногоНалогаОбороты.СуммаНаличнаяОборот КАК СуммаНаличная,
		|	ОборотыПоДаннымЕдиногоНалогаОбороты.СуммаБезналичнаяОборот КАК СуммаБезналичная
		|ПОМЕСТИТЬ ВременнаяТаблицаОборотыПоДаннымЕдиногоНалога
		|ИЗ
		|	РегистрНакопления.ОборотыПоДаннымЕдиногоНалога.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация) КАК ОборотыПоДаннымЕдиногоНалогаОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаОборотыПоДаннымЕдиногоНалога.ВидДеятельности КАК ВидДеятельности,
		|	ВременнаяТаблицаОборотыПоДаннымЕдиногоНалога.СуммаНаличная КАК СуммаНаличная,
		|	ВременнаяТаблицаОборотыПоДаннымЕдиногоНалога.СуммаБезналичная КАК СуммаБезналичная,
		|	ВременнаяТаблицаОборотыПоДаннымЕдиногоНалога.СуммаНаличная * ЕСТЬNULL(СтавкиЕНСрезПоследних.СтавкаНаличная, 0) / 100 КАК СуммаНаличнаяЕдиныйНалог,
		|	ВременнаяТаблицаОборотыПоДаннымЕдиногоНалога.СуммаБезналичная * ЕСТЬNULL(СтавкиЕНСрезПоследних.СтавкаБезналичная, 0) / 100 КАК СуммаБезналичнаяЕдиныйНалог
		|ИЗ
		|	ВременнаяТаблицаОборотыПоДаннымЕдиногоНалога КАК ВременнаяТаблицаОборотыПоДаннымЕдиногоНалога
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиЕН.СрезПоследних(&КонецПериода, ) КАК СтавкиЕНСрезПоследних
		|		ПО ВременнаяТаблицаОборотыПоДаннымЕдиногоНалога.ВидДеятельности = СтавкиЕНСрезПоследних.ВидДеятельности";	
	Запрос.УстановитьПараметр("Организация", Организация);

	Если РасчетЕдиногоНалогаЗаКвартал Тогда
		Запрос.УстановитьПараметр("НачалоПериода", НачалоКвартала(Дата));
		Запрос.УстановитьПараметр("КонецПериода", КонецКвартала(Дата));
	Иначе	
		Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Дата));
		Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Дата));
	КонецЕсли;
	
	ЕдиныйНалог.Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры

// Процедура - Выполнить закрытие парных счетов учета
//
Процедура ВыполнитьЗакрытиеПарныхСчетовУчета()
	
	// 1. Список активных счетов, с заполненным парным счетом (только Контрагенты и договоры) 
	// 2. Список парных счетов (пассивные)
	// 3. Остатки по активным счетам
	// 4. Остатки по пассивным счетам
	// 5. Соединение активных и пассивных остатков
	// 6. Таблица для заполнения	
	
	ТекстЗапроса =
		// Список активных счетов
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК АктивныйСчетУчета
		|ПОМЕСТИТЬ ВременнаяТаблицаСписокАктивныхПарныхСчетов
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
		|	И НЕ Хозрасчетный.ПарныйСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|	И НЕ Хозрасчетный.ВидыСубконто.ВидСубконто В(&ВидыСубконтоИсключение)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		// Список парных счетов
		|ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК ПассивныйСчетУчета
		|ПОМЕСТИТЬ ВременнаяТаблицаСписокПассивныхПарныхСчетов
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
		|	И НЕ Хозрасчетный.ПарныйСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|	И НЕ Хозрасчетный.ВидыСубконто.ВидСубконто В(&ВидыСубконтоИсключение)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		// Остатки по активным счетам
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК СчетАктивный,
		|	ЕСТЬNULL(ХозрасчетныйОстатки.Субконто1, НЕОПРЕДЕЛЕНО) КАК Субконто1,
		|	ЕСТЬNULL(ХозрасчетныйОстатки.Субконто2, НЕОПРЕДЕЛЕНО) КАК Субконто2,
		|	ЕСТЬNULL(ХозрасчетныйОстатки.Субконто3, НЕОПРЕДЕЛЕНО) КАК Субконто3,
		|	СУММА(ХозрасчетныйОстатки.СуммаОстатокДт) КАК СальдоАктивный,
		|	СУММА(ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт) КАК ВалютноеСальдоАктивный,
		|	ЕСТЬNULL(ХозрасчетныйОстатки.Валюта, НЕОПРЕДЕЛЕНО) КАК Валюта
		|ПОМЕСТИТЬ ВременнаяТаблицаСальдоАктивныхСчетов
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&МоментВремени,
		|			Счет В
		|				(ВЫБРАТЬ
		|					ВременнаяТаблицаСписокАктивныхПарныхСчетов.АктивныйСчетУчета
		|				ИЗ
		|					ВременнаяТаблицаСписокАктивныхПарныхСчетов КАК ВременнаяТаблицаСписокАктивныхПарныхСчетов),
		|			,
		|			Организация = &Организация) КАК ХозрасчетныйОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОстатки.Счет,
		|	ХозрасчетныйОстатки.Субконто1,
		|	ХозрасчетныйОстатки.Субконто2,
		|	ХозрасчетныйОстатки.Субконто3,
		|	ХозрасчетныйОстатки.Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		// Остатки по пассивным счетам
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК СчетПассивный,
		|	ЕСТЬNULL(ХозрасчетныйОстатки.Субконто1, НЕОПРЕДЕЛЕНО) КАК Субконто1,
		|	ЕСТЬNULL(ХозрасчетныйОстатки.Субконто2, НЕОПРЕДЕЛЕНО) КАК Субконто2,
		|	ЕСТЬNULL(ХозрасчетныйОстатки.Субконто3, НЕОПРЕДЕЛЕНО) КАК Субконто3,
		|	СУММА(ХозрасчетныйОстатки.СуммаОстатокКт) КАК СальдоПассивный,
		|	СУММА(ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт) КАК ВалютноеСальдоПассивный,
		|	ЕСТЬNULL(ХозрасчетныйОстатки.Валюта, НЕОПРЕДЕЛЕНО) КАК Валюта
		|ПОМЕСТИТЬ ВременнаяТаблицаСальдоПассивныхСчетов
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&МоментВремени,
		|			Счет В
		|				(ВЫБРАТЬ
		|					ВременнаяТаблицаСписокПассивныхПарныхСчетов.ПассивныйСчетУчета
		|				ИЗ
		|					ВременнаяТаблицаСписокПассивныхПарныхСчетов КАК ВременнаяТаблицаСписокПассивныхПарныхСчетов),
		|			,
		|			Организация = &Организация) КАК ХозрасчетныйОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОстатки.Счет,
		|	ХозрасчетныйОстатки.Субконто1,
		|	ХозрасчетныйОстатки.Субконто2,
		|	ХозрасчетныйОстатки.Субконто3,
		|	ХозрасчетныйОстатки.Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		// Соединение остатков
		|ВЫБРАТЬ
		|	ВременнаяТаблицаСальдоАктивныхСчетов.СчетАктивный КАК СчетАктивный,
		|	ВременнаяТаблицаСальдоАктивныхСчетов.Субконто1 КАК Субконто1,
		|	ВременнаяТаблицаСальдоАктивныхСчетов.Субконто2 КАК Субконто2,
		|	ВременнаяТаблицаСальдоАктивныхСчетов.Субконто3 КАК Субконто3,
		|	ВременнаяТаблицаСальдоАктивныхСчетов.Валюта КАК Валюта,
		|	СУММА(ВременнаяТаблицаСальдоАктивныхСчетов.СальдоАктивный) КАК СальдоАктивный,
		|	СУММА(ВременнаяТаблицаСальдоАктивныхСчетов.ВалютноеСальдоАктивный) КАК ВалютноеСальдоАктивный,
		|	ВременнаяТаблицаСальдоПассивныхСчетов.СчетПассивный КАК СчетПассивный,
		|	СУММА(ВременнаяТаблицаСальдоПассивныхСчетов.СальдоПассивный) КАК СальдоПассивный,
		|	СУММА(ВременнаяТаблицаСальдоПассивныхСчетов.ВалютноеСальдоПассивный) КАК ВалютноеСальдоПассивный
		|ПОМЕСТИТЬ ВременнаяТаблицаСальдоСводПарСчетов
		|ИЗ
		|	ВременнаяТаблицаСальдоАктивныхСчетов КАК ВременнаяТаблицаСальдоАктивныхСчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСальдоПассивныхСчетов КАК ВременнаяТаблицаСальдоПассивныхСчетов
		|		ПО ВременнаяТаблицаСальдоАктивныхСчетов.Субконто1 = ВременнаяТаблицаСальдоПассивныхСчетов.Субконто1
		|			И ВременнаяТаблицаСальдоАктивныхСчетов.Субконто2 = ВременнаяТаблицаСальдоПассивныхСчетов.Субконто2
		|			И ВременнаяТаблицаСальдоАктивныхСчетов.Субконто3 = ВременнаяТаблицаСальдоПассивныхСчетов.Субконто3
		|			И ВременнаяТаблицаСальдоАктивныхСчетов.Валюта = ВременнаяТаблицаСальдоПассивныхСчетов.Валюта
		|			И (ВременнаяТаблицаСальдоАктивныхСчетов.СальдоАктивный <> 0)
		|			И (ВременнаяТаблицаСальдоПассивныхСчетов.СальдоПассивный <> 0)
		|			И ВременнаяТаблицаСальдоАктивныхСчетов.СчетАктивный.ПарныйСчет = ВременнаяТаблицаСальдоПассивныхСчетов.СчетПассивный
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаСальдоАктивныхСчетов.СчетАктивный,
		|	ВременнаяТаблицаСальдоПассивныхСчетов.СчетПассивный,
		|	ВременнаяТаблицаСальдоАктивныхСчетов.Субконто1,
		|	ВременнаяТаблицаСальдоАктивныхСчетов.Субконто2,
		|	ВременнаяТаблицаСальдоАктивныхСчетов.Субконто3,
		|	ВременнаяТаблицаСальдоАктивныхСчетов.Валюта
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		// Остатки (отрицательные) есть только по активным
		|ВЫБРАТЬ
		|	ВременнаяТаблицаСальдоАктивныхСчетов.СчетАктивный,
		|	ВременнаяТаблицаСальдоАктивныхСчетов.Субконто1,
		|	ВременнаяТаблицаСальдоАктивныхСчетов.Субконто2,
		|	ВременнаяТаблицаСальдоАктивныхСчетов.Субконто3,
		|	ВременнаяТаблицаСальдоАктивныхСчетов.Валюта,
		|	СУММА(ВременнаяТаблицаСальдоАктивныхСчетов.СальдоАктивный),
		|	СУММА(ВременнаяТаблицаСальдоАктивныхСчетов.ВалютноеСальдоАктивный),
		|	ВременнаяТаблицаСальдоАктивныхСчетов.СчетАктивный.ПарныйСчет,
		|	СУММА(0),
		|	СУММА(0)
		|ИЗ
		|	ВременнаяТаблицаСальдоАктивныхСчетов КАК ВременнаяТаблицаСальдоАктивныхСчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСальдоПассивныхСчетов КАК ВременнаяТаблицаСальдоПассивныхСчетов
		|		ПО ВременнаяТаблицаСальдоАктивныхСчетов.Субконто1 = ВременнаяТаблицаСальдоПассивныхСчетов.Субконто1
		|			И ВременнаяТаблицаСальдоАктивныхСчетов.Субконто2 = ВременнаяТаблицаСальдоПассивныхСчетов.Субконто2
		|			И ВременнаяТаблицаСальдоАктивныхСчетов.Субконто3 = ВременнаяТаблицаСальдоПассивныхСчетов.Субконто3
		|			И ВременнаяТаблицаСальдоАктивныхСчетов.Валюта = ВременнаяТаблицаСальдоПассивныхСчетов.Валюта
		|			И ВременнаяТаблицаСальдоАктивныхСчетов.СчетАктивный.ПарныйСчет = ВременнаяТаблицаСальдоПассивныхСчетов.СчетПассивный
		|ГДЕ
		|	ВременнаяТаблицаСальдоАктивныхСчетов.СальдоАктивный < 0
		|	И ВременнаяТаблицаСальдоПассивныхСчетов.СчетПассивный ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаСальдоАктивныхСчетов.СчетАктивный,
		|	ВременнаяТаблицаСальдоАктивныхСчетов.Субконто1,
		|	ВременнаяТаблицаСальдоАктивныхСчетов.Субконто2,
		|	ВременнаяТаблицаСальдоАктивныхСчетов.Субконто3,
		|	ВременнаяТаблицаСальдоАктивныхСчетов.Валюта,
		|	ВременнаяТаблицаСальдоАктивныхСчетов.СчетАктивный.ПарныйСчет
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		// Остатки (отрицательные) есть только по пассивным
		|ВЫБРАТЬ
		|	ВременнаяТаблицаСальдоПассивныхСчетов.СчетПассивный.ПарныйСчет,
		|	ВременнаяТаблицаСальдоПассивныхСчетов.Субконто1,
		|	ВременнаяТаблицаСальдоПассивныхСчетов.Субконто2,
		|	ВременнаяТаблицаСальдоПассивныхСчетов.Субконто3,
		|	ВременнаяТаблицаСальдоПассивныхСчетов.Валюта,
		|	СУММА(0),
		|	СУММА(0),
		|	ВременнаяТаблицаСальдоПассивныхСчетов.СчетПассивный,
		|	СУММА(ВременнаяТаблицаСальдоПассивныхСчетов.СальдоПассивный),
		|	СУММА(ВременнаяТаблицаСальдоПассивныхСчетов.ВалютноеСальдоПассивный)
		|ИЗ
		|	ВременнаяТаблицаСальдоПассивныхСчетов КАК ВременнаяТаблицаСальдоПассивныхСчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСальдоАктивныхСчетов КАК ВременнаяТаблицаСальдоАктивныхСчетов
		|		ПО ВременнаяТаблицаСальдоПассивныхСчетов.Субконто1 = ВременнаяТаблицаСальдоАктивныхСчетов.Субконто1
		|			И ВременнаяТаблицаСальдоПассивныхСчетов.Субконто2 = ВременнаяТаблицаСальдоАктивныхСчетов.Субконто2
		|			И ВременнаяТаблицаСальдоПассивныхСчетов.Субконто3 = ВременнаяТаблицаСальдоАктивныхСчетов.Субконто3
		|			И ВременнаяТаблицаСальдоПассивныхСчетов.Валюта = ВременнаяТаблицаСальдоАктивныхСчетов.Валюта
		|			И ВременнаяТаблицаСальдоПассивныхСчетов.СчетПассивный.ПарныйСчет = ВременнаяТаблицаСальдоАктивныхСчетов.СчетАктивный
		|ГДЕ
		|	ВременнаяТаблицаСальдоПассивныхСчетов.СальдоПассивный < 0
		|	И ВременнаяТаблицаСальдоАктивныхСчетов.СчетАктивный ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаСальдоПассивныхСчетов.СчетПассивный,
		|	ВременнаяТаблицаСальдоПассивныхСчетов.Субконто1,
		|	ВременнаяТаблицаСальдоПассивныхСчетов.Субконто2,
		|	ВременнаяТаблицаСальдоПассивныхСчетов.Субконто3,
		|	ВременнаяТаблицаСальдоПассивныхСчетов.Валюта,
		|	ВременнаяТаблицаСальдоПассивныхСчетов.СчетПассивный.ПарныйСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		// Определение проводки и сумм.
		|ВЫБРАТЬ
		|	ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный КАК СальдоАктивный,
		|	ВременнаяТаблицаСальдоСводПарСчетов.ВалютноеСальдоАктивный КАК СальдоАктивныйВалютное,
		|	ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный КАК СальдоПассивный,
		|	ВременнаяТаблицаСальдоСводПарСчетов.ВалютноеСальдоПассивный КАК СальдоПассивныйВалютное,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный > 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный > 0
		|			ТОГДА ВременнаяТаблицаСальдоСводПарСчетов.СчетПассивный
		|		ИНАЧЕ ВременнаяТаблицаСальдоСводПарСчетов.СчетАктивный
		|	КОНЕЦ КАК СчетДт,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный > 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный > 0
		|			ТОГДА ВременнаяТаблицаСальдоСводПарСчетов.СчетАктивный
		|		ИНАЧЕ ВременнаяТаблицаСальдоСводПарСчетов.СчетПассивный
		|	КОНЕЦ КАК СчетКт,
		|	ВременнаяТаблицаСальдоСводПарСчетов.Субконто1 КАК Субконто1,
		|	ВременнаяТаблицаСальдоСводПарСчетов.Субконто2 КАК Субконто2,
		|	ВременнаяТаблицаСальдоСводПарСчетов.Субконто3 КАК Субконто3,
		|	ВременнаяТаблицаСальдоСводПарСчетов.Валюта КАК Валюта,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный >= 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный < 0
		|			ТОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный * -1
		|		КОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный < 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный >= 0
		|			ТОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный * -1
		|		КОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный > 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный > 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный >= ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный
		|			ТОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный
		|		КОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный > 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный > 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный < ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный
		|			ТОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный
		|		КОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный < 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный < 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный >= ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный
		|			ТОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный * -1
		|		КОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный < 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный < 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный < ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный
		|			ТОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный * -1
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный >= 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный < 0
		|			ТОГДА ВременнаяТаблицаСальдоСводПарСчетов.ВалютноеСальдоПассивный * -1
		|		КОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный < 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный >= 0
		|			ТОГДА ВременнаяТаблицаСальдоСводПарСчетов.ВалютноеСальдоАктивный * -1
		|		КОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный > 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный > 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный >= ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный
		|			ТОГДА ВременнаяТаблицаСальдоСводПарСчетов.ВалютноеСальдоПассивный
		|		КОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный > 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный > 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный < ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный
		|			ТОГДА ВременнаяТаблицаСальдоСводПарСчетов.ВалютноеСальдоАктивный
		|		КОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный < 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный < 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный >= ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный
		|			ТОГДА ВременнаяТаблицаСальдоСводПарСчетов.ВалютноеСальдоПассивный * -1
		|		КОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный < 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный < 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный < ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный
		|			ТОГДА ВременнаяТаблицаСальдоСводПарСчетов.ВалютноеСальдоАктивный * -1
		|	КОНЕЦ КАК ВалютнаяСумма
		|ИЗ
		|	ВременнаяТаблицаСальдоСводПарСчетов КАК ВременнаяТаблицаСальдоСводПарСчетов
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВЫРАЗИТЬ(ВременнаяТаблицаСальдоСводПарСчетов.Субконто1 КАК Справочник.Контрагенты).Наименование,
		|	ВЫРАЗИТЬ(ВременнаяТаблицаСальдоСводПарСчетов.Субконто2 КАК Справочник.ДоговорыКонтрагентов).Наименование";
	ВидыСубконтоИсключение = Новый Массив;
	ВидыСубконтоИсключение.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоИсключение.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МоментВремени", 	Дата + 1); 
	Запрос.УстановитьПараметр("Период", 		Дата);
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("ВидыСубконтоИсключение", 	ВидыСубконтоИсключение);
	
	ПарныеСчетаУчета.Загрузить(Запрос.Выполнить().Выгрузить())
	
КонецПроцедуры 

#КонецОбласти

#Область ОтражениеВУчете

// Процедура - Отразить амортизацию основных средств в учете
//
Процедура ОтразитьАмортизациюОсновныхСредствВУчете(СтруктураДополнительныеСвойства)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаДокумента.СчетУчета КАК СчетУчета,
		|	ТаблицаДокумента.СчетАмортизации КАК СчетАмортизации,
		|	ТаблицаДокумента.СпособОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизации,
		|	ТаблицаДокумента.СчетЗатрат КАК СчетЗатрат,
		|	ТаблицаДокумента.Субконто1 КАК Субконто1,
		|	ТаблицаДокумента.Субконто2 КАК Субконто2,
		|	ТаблицаДокумента.Субконто3 КАК Субконто3,
		|	ТаблицаДокумента.КорректироватьНУ КАК КорректироватьНУ,
		|	ТаблицаДокумента.Сумма КАК Сумма
		|ПОМЕСТИТЬ ВременнаяТаблицаАмортизацияОС
		|ИЗ
		|	&АмортизацияОС КАК ТаблицаДокумента";
	Запрос.УстановитьПараметр("АмортизацияОС", АмортизацияОС.Выгрузить());
	Запрос.Выполнить();    	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	1 КАК Порядок,
		|	ТаблицаШапка.Период КАК Период,
		|	ТаблицаШапка.Организация КАК Организация,
		|	ТаблицаДокумента.СчетЗатрат КАК СчетДт,
		|	ТаблицаДокумента.СчетУчета.ПарныйСчет КАК СчетКт,
		|	ТаблицаДокумента.Субконто1 КАК СубконтоДт1,
		|	ТаблицаДокумента.Субконто2 КАК СубконтоДт2,
		|	ТаблицаДокумента.Субконто3 КАК СубконтоДт3,
		|	ТаблицаДокумента.ОсновноеСредство КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ТаблицаДокумента.КорректироватьНУ КАК КорректироватьНУ,
		|	ТаблицаДокумента.Сумма КАК Сумма,
		|	&Содержание КАК Содержание,
		|	0 КАК КоличествоДт,
		|	0 КАК КоличествоКт,
		|	НЕОПРЕДЕЛЕНО КАК ВалютаДт,
		|	НЕОПРЕДЕЛЕНО КАК ВалютаКт,
		|	0 КАК ВалютнаяСуммаДт,
		|	0 КАК ВалютнаяСуммаКт
		|ИЗ
		|	ВременнаяТаблицаАмортизацияОС КАК ТаблицаДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ТаблицаШапка
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ТаблицаДокумента.Сумма = 0";
	Запрос.УстановитьПараметр("Содержание", НСтр("ru = 'Начисление амортизации'"));
	ТаблицаХозрасчетный = Запрос.Выполнить().Выгрузить();
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаХозрасчетный", ТаблицаХозрасчетный);
	
	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Ложь);
	Движения.Хозрасчетный.Записать(Ложь);
	
КонецПроцедуры 

// Процедура - Отразить переоценку валютных средств
//
Процедура ОтразитьПереоценкуВалютныхСредств(СтруктураДополнительныеСвойства)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.СчетУчета КАК СчетУчета,
		|	ТаблицаДокумента.Валюта КАК Валюта,
		|	ТаблицаДокумента.Субконто1 КАК Субконто1,
		|	ТаблицаДокумента.Субконто2 КАК Субконто2,
		|	ТаблицаДокумента.Субконто3 КАК Субконто3,
		|	ТаблицаДокумента.СуммаДоход КАК СуммаДоход,
		|	ТаблицаДокумента.СуммаУбыток КАК СуммаУбыток
		|ПОМЕСТИТЬ ВременнаяТаблицаПереоценкаВалюты
		|ИЗ
		|	&ПереоценкаВалюты КАК ТаблицаДокумента";
	Запрос.УстановитьПараметр("ПереоценкаВалюты", ПереоценкаВалюты.Выгрузить());
	Запрос.Выполнить();    	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ТаблицаШапка.Период КАК Период,
		|	ТаблицаШапка.Организация КАК Организация,
		|	ТаблицаДокумента.СчетУчета КАК СчетДт,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДоходОтКурсовыхРазницПоОперациямВИностраннойВалюте) КАК СчетКт,
		|	ТаблицаДокумента.Субконто1 КАК СубконтоДт1,
		|	ТаблицаДокумента.Субконто2 КАК СубконтоДт2,
		|	ТаблицаДокумента.Субконто3 КАК СубконтоДт3,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ТаблицаДокумента.СуммаДоход КАК Сумма,
		|	&СодержаниеДоход КАК Содержание,
		|	0 КАК КоличествоДт,
		|	0 КАК КоличествоКт,
		|	ТаблицаДокумента.Валюта КАК ВалютаДт,
		|	НЕОПРЕДЕЛЕНО КАК ВалютаКт,
		|	0 КАК ВалютнаяСуммаДт,
		|	0 КАК ВалютнаяСуммаКт
		|ИЗ
		|	ВременнаяТаблицаПереоценкаВалюты КАК ТаблицаДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ТаблицаШапка
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ТаблицаДокумента.СуммаДоход = 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаШапка.Период,
		|	ТаблицаШапка.Организация,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УбыткиОтКурсовыхРазницПоОперациямВИностраннойВалюте),
		|	ТаблицаДокумента.СчетУчета,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ТаблицаДокумента.Субконто1,
		|	ТаблицаДокумента.Субконто2,
		|	ТаблицаДокумента.Субконто3,
		|	ТаблицаДокумента.СуммаУбыток,
		|	&СодержаниеУбытки,
		|	0,
		|	0,
		|	НЕОПРЕДЕЛЕНО,
		|	ТаблицаДокумента.Валюта,
		|	0,
		|	0
		|ИЗ
		|	ВременнаяТаблицаПереоценкаВалюты КАК ТаблицаДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ТаблицаШапка
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ТаблицаДокумента.СуммаУбыток = 0";
	Запрос.УстановитьПараметр("СодержаниеДоход", НСтр("ru = 'Доход от курсовых разниц'"));
	Запрос.УстановитьПараметр("СодержаниеУбытки", НСтр("ru = 'Убытки от курсовых разниц'"));
	ТаблицаХозрасчетный = Запрос.Выполнить().Выгрузить();
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаХозрасчетный", ТаблицаХозрасчетный);
	
	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Ложь);
	Движения.Хозрасчетный.Записать(Ложь);
	
КонецПроцедуры 

// Процедура - Отразить списание расходов будущих периодов
//
Процедура ОтразитьСписаниеРасходовБудущихПериодов(СтруктураДополнительныеСвойства)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.СчетДт КАК СчетДт,
		|	ТаблицаДокумента.РБП КАК РБП,
		|	ТаблицаДокумента.Сумма КАК Сумма
		|ПОМЕСТИТЬ ВременнаяТаблица
		|ИЗ
		|	&РасходыБП КАК ТаблицаДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблица.СчетДт КАК СчетДт,
		|	РасходыБудущихПериодов.Субконто1 КАК СубконтоДт1,
		|	РасходыБудущихПериодов.Субконто2 КАК СубконтоДт2,
		|	РасходыБудущихПериодов.Субконто3 КАК СубконтоДт3,
		|	ВременнаяТаблица.РБП КАК СубконтоКт1,
		|	ВременнаяТаблица.Сумма КАК Сумма
		|ПОМЕСТИТЬ ВременнаяТаблицаРасходыБудущихПериодов
		|ИЗ
		|	ВременнаяТаблица КАК ВременнаяТаблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РасходыБудущихПериодов КАК РасходыБудущихПериодов
		|		ПО ВременнаяТаблица.РБП = РасходыБудущихПериодов.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВременнаяТаблица";
	Запрос.УстановитьПараметр("РасходыБП", РасходыБП.Выгрузить());
	Запрос.Выполнить();    	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ТаблицаШапка.Период КАК Период,
		|	ТаблицаШапка.Организация КАК Организация,
		|	ТаблицаДокумента.СчетДт КАК СчетДт,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыБудущихПериодов) КАК СчетКт,
		|	ТаблицаДокумента.СубконтоДт1 КАК СубконтоДт1,
		|	ТаблицаДокумента.СубконтоДт2 КАК СубконтоДт2,
		|	ТаблицаДокумента.СубконтоДт3 КАК СубконтоДт3,
		|	ТаблицаДокумента.СубконтоКт1 КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ТаблицаДокумента.Сумма КАК Сумма,
		|	&Содержание КАК Содержание,
		|	0 КАК КоличествоДт,
		|	0 КАК КоличествоКт,
		|	НЕОПРЕДЕЛЕНО КАК ВалютаДт,
		|	НЕОПРЕДЕЛЕНО КАК ВалютаКт,
		|	0 КАК ВалютнаяСуммаДт,
		|	0 КАК ВалютнаяСуммаКт
		|ИЗ
		|	ВременнаяТаблицаРасходыБудущихПериодов КАК ТаблицаДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ТаблицаШапка
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ТаблицаДокумента.Сумма = 0";
	Запрос.УстановитьПараметр("Содержание", НСтр("ru = 'Расходы будущих периодов'"));
	ТаблицаХозрасчетный = Запрос.Выполнить().Выгрузить();
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаХозрасчетный", ТаблицаХозрасчетный);
	
	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Ложь);
	Движения.Хозрасчетный.Записать(Ложь);
	
КонецПроцедуры 

// Процедура - Отразить НДС
//
Процедура ОтразитьНДС(СтруктураДополнительныеСвойства)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Контрагент КАК Контрагент,
		|	ТаблицаДокумента.Договор КАК Договор,
		|	ТаблицаДокумента.Сумма КАК Сумма,
		|	ТаблицаДокумента.СуммаНДС КАК СуммаНДС,
		|	ТаблицаДокумента.СуммаНСП КАК СуммаНСП,
		|	ТаблицаДокумента.Документ КАК Документ,
		|	ТаблицаДокумента.СуммаДокумента КАК СуммаДокумента
		|ПОМЕСТИТЬ ВременнаяТаблицаАвансы
		|ИЗ
		|	&АвансыРасшифровка КАК ТаблицаДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Контрагент КАК Контрагент,
		|	ТаблицаДокумента.Договор КАК Договор,
		|	ТаблицаДокумента.ДокументАванса КАК ДокументАванса,
		|	ТаблицаДокумента.Сумма КАК Сумма,
		|	ТаблицаДокумента.СуммаНДС КАК СуммаНДС,
		|	ТаблицаДокумента.СуммаНСП КАК СуммаНСП,
		|	ТаблицаДокумента.ДокументОперации КАК ДокументОперации
		|ПОМЕСТИТЬ ВременнаяТаблицаДоотгрузкаРасшифровка
		|ИЗ
		|	&ДоотгрузкаРасшифровка КАК ТаблицаДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.СчетДт КАК СчетДт,
		|	ТаблицаДокумента.СчетКт КАК СчетКт,
		|	ТаблицаДокумента.Сумма КАК Сумма,
		|	ТаблицаДокумента.Содержание КАК Содержание
		|ПОМЕСТИТЬ ВременнаяТаблицаКорректировкаНДС
		|ИЗ
		|	&КорректировкаНДС КАК ТаблицаДокумента";
	Запрос.УстановитьПараметр("АвансыРасшифровка", АвансыРасшифровка.Выгрузить());
	Запрос.УстановитьПараметр("ДоотгрузкаРасшифровка", ДоотгрузкаРасшифровка.Выгрузить());
	Запрос.УстановитьПараметр("КорректировкаНДС", КорректировкаНДС.Выгрузить());
	Запрос.Выполнить();    	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ТаблицаШапка.Период КАК Период,
		|	ТаблицаШапка.Организация КАК Организация,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНаАвансы) КАК СчетДт,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСКОплате) КАК СчетКт,
		|	ВременнаяТаблицаАвансы.Контрагент КАК СубконтоДт1,
		|	ВременнаяТаблицаАвансы.Договор КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ВременнаяТаблицаАвансы.СуммаНДС КАК Сумма,
		|	&СодержаниеАвансы КАК Содержание,
		|	0 КАК КоличествоДт,
		|	0 КАК КоличествоКт,
		|	НЕОПРЕДЕЛЕНО КАК ВалютаДт,
		|	НЕОПРЕДЕЛЕНО КАК ВалютаКт,
		|	0 КАК ВалютнаяСуммаДт,
		|	0 КАК ВалютнаяСуммаКт
		|ИЗ
		|	ВременнаяТаблицаАвансы КАК ВременнаяТаблицаАвансы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ТаблицаШапка
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаАвансы.СуммаНДС = 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Период,
		|	ВременнаяТаблицаШапка.Организация,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНаАвансы),
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСКОплате),
		|	ВременнаяТаблицаДоотгрузкаРасшифровка.Контрагент,
		|	ВременнаяТаблицаДоотгрузкаРасшифровка.Договор,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	-ВременнаяТаблицаДоотгрузкаРасшифровка.СуммаНДС,
		|	&СодержаниеОтгрузка,
		|	0,
		|	0,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	0,
		|	0
		|ИЗ
		|	ВременнаяТаблицаДоотгрузкаРасшифровка КАК ВременнаяТаблицаДоотгрузкаРасшифровка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаДоотгрузкаРасшифровка.СуммаНДС = 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Период,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаКорректировкаНДС.СчетДт,
		|	ВременнаяТаблицаКорректировкаНДС.СчетКт,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаКорректировкаНДС.Сумма,
		|	ВременнаяТаблицаКорректировкаНДС.Содержание,
		|	0,
		|	0,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	0,
		|	0
		|ИЗ
		|	ВременнаяТаблицаКорректировкаНДС КАК ВременнаяТаблицаКорректировкаНДС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаКорректировкаНДС.Сумма = 0";
	Запрос.УстановитьПараметр("СодержаниеАвансы", НСтр("ru = 'Авансы полученные'"));
	Запрос.УстановитьПараметр("СодержаниеОтгрузка", НСтр("ru = 'Отгрузка в счет аванса'"));
	ТаблицаХозрасчетный = Запрос.Выполнить().Выгрузить();
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаХозрасчетный", ТаблицаХозрасчетный);
	
	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Ложь);
	Движения.Хозрасчетный.Записать(Ложь);
	
КонецПроцедуры 

// Процедура - Отразить расчет стоимости продукции по заказам
//
Процедура ОтразитьРасчетСтоимостиПродукцииПоЗаказам(СтруктураДополнительныеСвойства)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
		|	ТаблицаДокумента.Заказ КАК Заказ,
		|	ТаблицаДокумента.Склад КАК Склад,
		|	ТаблицаДокумента.СуммаОбщехозяйственныхРасходов КАК СуммаОбщехозяйственныхРасходов,
		|	ТаблицаДокумента.СуммаВспомогательногоПроизводства КАК СуммаВспомогательногоПроизводства,
		|	ТаблицаДокумента.СуммаНЗП КАК СуммаНЗП,
		|	ТаблицаДокумента.СуммаКорректировкиРеализации КАК СуммаКорректировкиРеализации,
		|	ТаблицаДокумента.СчетДтРеализации КАК СчетДтРеализации
		|ПОМЕСТИТЬ ВременнаяТаблицаРасходыНаПроизводство
		|ИЗ
		|	&РасходыНаПроизводство КАК ТаблицаДокумента";
	Запрос.УстановитьПараметр("РасходыНаПроизводство", РасходыНаПроизводство.Выгрузить());
	Запрос.Выполнить();    	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ТаблицаШапка.Период КАК Период,
		|	ТаблицаШапка.Организация КАК Организация,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОсновноеПроизводство) КАК СчетДт,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВспомогательноеПроизводство) КАК СчетКт,
		|	ВременнаяТаблицаРасходыНаПроизводство.Номенклатура КАК СубконтоДт1,
		|	ВременнаяТаблицаРасходыНаПроизводство.Заказ КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ВременнаяТаблицаРасходыНаПроизводство.СуммаВспомогательногоПроизводства КАК Сумма,
		|	&СодержаниеВспомогательноеПроизводство КАК Содержание,
		|	0 КАК КоличествоДт,
		|	0 КАК КоличествоКт,
		|	НЕОПРЕДЕЛЕНО КАК ВалютаДт,
		|	НЕОПРЕДЕЛЕНО КАК ВалютаКт,
		|	0 КАК ВалютнаяСуммаДт,
		|	0 КАК ВалютнаяСуммаКт
		|ИЗ
		|	ВременнаяТаблицаРасходыНаПроизводство КАК ВременнаяТаблицаРасходыНаПроизводство
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ТаблицаШапка
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаРасходыНаПроизводство.СуммаВспомогательногоПроизводства = 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаШапка.Период,
		|	ТаблицаШапка.Организация,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОсновноеПроизводство),
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НакладныеРасходы),
		|	ВременнаяТаблицаРасходыНаПроизводство.Номенклатура,
		|	ВременнаяТаблицаРасходыНаПроизводство.Заказ,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаРасходыНаПроизводство.СуммаОбщехозяйственныхРасходов,
		|	&СодержаниеНакладныеРасходы,
		|	0,
		|	0,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	0,
		|	0
		|ИЗ
		|	ВременнаяТаблицаРасходыНаПроизводство КАК ВременнаяТаблицаРасходыНаПроизводство
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ТаблицаШапка
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаРасходыНаПроизводство.СуммаОбщехозяйственныхРасходов = 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаШапка.Период,
		|	ТаблицаШапка.Организация,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ГотоваяПродукция),
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОсновноеПроизводство),
		|	ВременнаяТаблицаРасходыНаПроизводство.Номенклатура,
		|	ВременнаяТаблицаРасходыНаПроизводство.Склад,
		|	ВременнаяТаблицаРасходыНаПроизводство.Заказ,
		|	ВременнаяТаблицаРасходыНаПроизводство.Номенклатура,
		|	ВременнаяТаблицаРасходыНаПроизводство.Заказ,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаРасходыНаПроизводство.СуммаНЗП,
		|	&СодержаниеДозакрытиеПрямыхЗатрат,
		|	0,
		|	0,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	0,
		|	0
		|ИЗ
		|	ВременнаяТаблицаРасходыНаПроизводство КАК ВременнаяТаблицаРасходыНаПроизводство
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ТаблицаШапка
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаРасходыНаПроизводство.СуммаНЗП = 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаШапка.Период,
		|	ТаблицаШапка.Организация,
		|	ВременнаяТаблицаРасходыНаПроизводство.СчетДтРеализации,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ГотоваяПродукция),
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаРасходыНаПроизводство.Номенклатура,
		|	ВременнаяТаблицаРасходыНаПроизводство.Склад,
		|	ВременнаяТаблицаРасходыНаПроизводство.Заказ,
		|	ВременнаяТаблицаРасходыНаПроизводство.СуммаКорректировкиРеализации,
		|	&СодержаниеДозакрытиеГП,
		|	0,
		|	0,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	0,
		|	0
		|ИЗ
		|	ВременнаяТаблицаРасходыНаПроизводство КАК ВременнаяТаблицаРасходыНаПроизводство
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ТаблицаШапка
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаРасходыНаПроизводство.СуммаКорректировкиРеализации = 0";
	Запрос.УстановитьПараметр("СодержаниеВспомогательноеПроизводство", НСтр("ru = 'Вспомогательное производство'"));
	Запрос.УстановитьПараметр("СодержаниеНакладныеРасходы", НСтр("ru = 'Накладные расходы'"));
	Запрос.УстановитьПараметр("СодержаниеДозакрытиеПрямыхЗатрат", НСтр("ru = 'Дозакрытие прямых затрат'"));
	Запрос.УстановитьПараметр("СодержаниеДозакрытиеГП", НСтр("ru = 'Дозакрытие суммы реализованной ГП'"));
	ТаблицаХозрасчетный = Запрос.Выполнить().Выгрузить();
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаХозрасчетный", ТаблицаХозрасчетный);
	
	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Ложь);
	Движения.Хозрасчетный.Записать(Ложь);
	
КонецПроцедуры 

// Процедура - Отразить расчет стоимости продукции по номенклатурным группам
//
Процедура ОтразитьРасчетСтоимостиПродукцииПоНоменклатурнымГруппам(СтруктураДополнительныеСвойства, Ошибки)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.СчетЗатрат КАК СчетЗатрат,
		|	ТаблицаДокумента.СчетРасходов КАК СчетРасходов,
		|	ТаблицаДокумента.Подразделение КАК Подразделение,
		|	ТаблицаДокумента.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	ТаблицаДокумента.ПодразделениеЗатрат КАК ПодразделениеЗатрат,
		|	ТаблицаДокумента.СтатьяЗатрат КАК СтатьяЗатрат,
		|	ТаблицаДокумента.Сумма КАК Сумма
		|ПОМЕСТИТЬ ВременнаяТаблицаНакладныеРасходы
		|ИЗ
		|	&НакладныеРасходы КАК ТаблицаДокумента";
	Запрос.УстановитьПараметр("НакладныеРасходы", НакладныеРасходы.Выгрузить());
	Запрос.Выполнить();    	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ТаблицаШапка.Период КАК Период,
		|	ТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаНакладныеРасходы.СчетЗатрат КАК СчетДт,
		|	ВременнаяТаблицаНакладныеРасходы.СчетРасходов КАК СчетКт,
		|	ВременнаяТаблицаНакладныеРасходы.Подразделение КАК СубконтоДт1,
		|	ВременнаяТаблицаНакладныеРасходы.НоменклатурнаяГруппа КАК СубконтоДт2,
		|	ВременнаяТаблицаНакладныеРасходы.СтатьяЗатрат КАК СубконтоДт3,
		|	ВременнаяТаблицаНакладныеРасходы.ПодразделениеЗатрат КАК СубконтоКт1,
		|	ВременнаяТаблицаНакладныеРасходы.СтатьяЗатрат КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ВременнаяТаблицаНакладныеРасходы.Сумма КАК Сумма,
		|	&СодержаниеНакладныеРасходы КАК Содержание,
		|	0 КАК КоличествоДт,
		|	0 КАК КоличествоКт,
		|	НЕОПРЕДЕЛЕНО КАК ВалютаДт,
		|	НЕОПРЕДЕЛЕНО КАК ВалютаКт,
		|	0 КАК ВалютнаяСуммаДт,
		|	0 КАК ВалютнаяСуммаКт
		|ИЗ
		|	ВременнаяТаблицаНакладныеРасходы КАК ВременнаяТаблицаНакладныеРасходы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ТаблицаШапка
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаНакладныеРасходы.Сумма = 0";	
	Запрос.УстановитьПараметр("СодержаниеНакладныеРасходы", НСтр("ru = 'Накладные расходы'"));
	ТаблицаХозрасчетный = Запрос.Выполнить().Выгрузить();
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаХозрасчетный", ТаблицаХозрасчетный);
	
	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Ложь);
	Движения.Хозрасчетный.Записать(Ложь);
	
	// Подготовка таблиц для проведения.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Ссылка КАК Регистратор,
		|	ВременнаяТаблицаШапка.Период КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	&БазаРаспределения КАК БазаРаспределения
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка";
	Запрос.УстановитьПараметр("БазаРаспределения", Константы.БазаРаспределенияКорректировкиСебестоимости.Получить());                 

	ТаблицаРеквизиты = Запрос.Выполнить().Выгрузить();
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРеквизиты", ТаблицаРеквизиты);
	
	СуммаГотоваяПродукцияКорректировка = 0;
	Если Константы.УчетПроизводстваПоНоменклатурнымГруппамПерепроведение.Получить() Тогда 
		// Перепроведение документов, в которых учавствовала готовая продукция.
		УчетПроизводства.КорректировкаСебестоимостиПродукцииПерепроведение(ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРеквизиты, Движения, Ошибки, СуммаГотоваяПродукцияКорректировка);		
	Иначе 
		// Формирование отдельных проводок по корректировке движений готовой продукции.
		УчетПроизводства.КорректировкаСебестоимостиПродукции(ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРеквизиты, Движения, Ошибки, СуммаГотоваяПродукцияКорректировка);		
	КонецЕсли;
	// Запись движений происходит в процедуре общего модуля
	//Движения.Хозрасчетный.Записать(Ложь);
КонецПроцедуры 

// Процедура - Отразить земельный налог
//
Процедура ОтразитьЗемельныйНалог(ДанныеУчетнойПолитики, СтруктураДополнительныеСвойства)
	
	// Проводки по земельному налогу формируются в конце года.
	Если НЕ СтруктураДополнительныеСвойства.ДляПроведения.Дата = КонецГода(СтруктураДополнительныеСвойства.ДляПроведения.Дата) Тогда 
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Период КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	&СчетДт КАК СчетДт,
		|	&СчетКт КАК СчетКт,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	&Сумма КАК Сумма,
		|	&СодержаниеЗемельныйНалог КАК Содержание,
		|	0 КАК КоличествоДт,
		|	0 КАК КоличествоКт,
		|	НЕОПРЕДЕЛЕНО КАК ВалютаДт,
		|	НЕОПРЕДЕЛЕНО КАК ВалютаКт,
		|	0 КАК ВалютнаяСуммаДт,
		|	0 КАК ВалютнаяСуммаКт
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|ГДЕ
		|	НЕ &Сумма = 0";
	Запрос.УстановитьПараметр("СодержаниеЗемельныйНалог", НСтр("ru = 'Земельный налог'"));
	Запрос.УстановитьПараметр("Сумма", ЗемельныйНалог.Итог("Сумма"));
	Запрос.УстановитьПараметр("СчетДт", ДанныеУчетнойПолитики.СчетРасходовЗН);
	Запрос.УстановитьПараметр("СчетКт", ДанныеУчетнойПолитики.СчетУчетаЗН);
	ТаблицаХозрасчетный = Запрос.Выполнить().Выгрузить();
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаХозрасчетный", ТаблицаХозрасчетный);
	
	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Ложь);
	Движения.Хозрасчетный.Записать(Ложь);

	
	// РН ЗемельныйНалог
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ОбъектИмущества КАК ОсновноеСредство,
	|	ТаблицаДокумента.Сумма КАК СуммаЗемельногоНалогаПодОбъектомИмущества
	|ПОМЕСТИТЬ ВременнаяТаблицаЗемельныйНалог
	|ИЗ
	|	&ЗемельныйНалогПодОбъектомИмущества КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаШапка.Период КАК Период,
	|	ВременнаяТаблицаШапка.Организация КАК Организация,
	|	ВременнаяТаблицаЗемельныйНалог.ОсновноеСредство КАК ОсновноеСредство,
	|	ВременнаяТаблицаЗемельныйНалог.СуммаЗемельногоНалогаПодОбъектомИмущества КАК СуммаЗемельногоНалогаПодОбъектомИмущества
	|ИЗ
	|	ВременнаяТаблицаЗемельныйНалог КАК ВременнаяТаблицаЗемельныйНалог
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ВременнаяТаблицаЗемельныйНалог.СуммаЗемельногоНалогаПодОбъектомИмущества > 0";

	Запрос.УстановитьПараметр("ЗемельныйНалогПодОбъектомИмущества", ЗемельныйНалогПодОбъектомИмущества.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗемельныйНалог", РезультатЗапроса.Выгрузить());

	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьЗемельныйНалог(ДополнительныеСвойства, Движения, Ложь);
	Движения.ЗемельныйНалог.Записать(Ложь);
	
КонецПроцедуры 

// Процедура - Отразить налог на имущество
//
Процедура ОтразитьНалогНаИмущество(СтруктураДополнительныеСвойства)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаДокумента.ГруппаИмущества КАК ГруппаИмущества,
		|	ТаблицаДокумента.КоличествоМесяцевЭксплуатации КАК КоличествоМесяцев,
		|	ТаблицаДокумента.Ставка КАК Ставка,
		|	ТаблицаДокумента.СуммаНалога КАК СуммаНалога,
		|	ТаблицаДокумента.ОценочнаяСтоимость КАК ОценочнаяСтоимость,
		|	ТаблицаДокумента.СрокЭксплуатации КАК СрокЭксплуатации,
		|	ТаблицаДокумента.ОбщаяПлощадь КАК ОбщаяПлощадь,
		|	ТаблицаДокумента.Кр КАК Кр,
		|	ТаблицаДокумента.Кз КАК Кз,
		|	ТаблицаДокумента.Ко КАК Ко,
		|	ТаблицаДокумента.СтоимостьНУ КАК СтоимостьНУ,
		|	ТаблицаДокумента.МатериалСтен КАК МатериалСтен,
		|	ТаблицаДокумента.ЗемельныйНалог КАК ЗемельныйНалог,
		|	ТаблицаДокумента.ОтЛет КАК ОтЛет,
		|	ТаблицаДокумента.ДоЛет КАК ДоЛет,
		|	ТаблицаДокумента.ЖилаяПлощадь КАК ЖилаяПлощадь,
		|	ТаблицаДокумента.НежилаяПлощадь КАК НежилаяПлощадь,
		|	ТаблицаДокумента.НалогСУчетомЗемельногоНалога КАК НалогСУчетомЗемельногоНалога,
		|	ТаблицаДокумента.Объект КАК Объект
		|ПОМЕСТИТЬ ВременнаяТаблицаНедвижимость
		|ИЗ
		|	&Недвижимость КАК ТаблицаДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаДокумента.ГруппаИмущества КАК ГруппаИмущества,
		|	ТаблицаДокумента.ВидТранспортаКатегорияАБВ КАК ВидТранспортаКатегорияАБВ,
		|	ТаблицаДокумента.КоличествоМесяцевЭксплуатации КАК КоличествоМесяцев,
		|	ТаблицаДокумента.ОбъемДвигателя КАК ОбъемДвигателя,
		|	ТаблицаДокумента.Ставка КАК Ставка,
		|	ТаблицаДокумента.СуммаНалога КАК СуммаНалога,
		|	ТаблицаДокумента.ОтЛет КАК ОтЛет,
		|	ТаблицаДокумента.ДоЛет КАК ДоЛет
		|ПОМЕСТИТЬ ВременнаяТаблицаТранспорт
		|ИЗ
		|	&Транспорт КАК ТаблицаДокумента";
	Запрос.УстановитьПараметр("Недвижимость", Недвижимость.Выгрузить());
	Запрос.УстановитьПараметр("Транспорт", Транспорт.Выгрузить());
	Запрос.Выполнить();    	
	
	// Проводки по налогу на имущество формируются в конце года.
	Если НЕ СтруктураДополнительныеСвойства.ДляПроведения.Дата = КонецГода(СтруктураДополнительныеСвойства.ДляПроведения.Дата) Тогда 
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Период КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыПоНалогам) КАК СчетДт,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НалогНаИмущество) КАК СчетКт,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		// Сумма берется за минусом земельного налога
		|	СУММА(ЗакрытиеМесяцаНедвижимость.СуммаНалога - ЗакрытиеМесяцаНедвижимость.ЗемельныйНалог) КАК Сумма,
		|	&СодержаниеНедвижимость КАК Содержание,
		|	0 КАК КоличествоДт,
		|	0 КАК КоличествоКт,
		|	НЕОПРЕДЕЛЕНО КАК ВалютаДт,
		|	НЕОПРЕДЕЛЕНО КАК ВалютаКт,
		|	0 КАК ВалютнаяСуммаДт,
		|	0 КАК ВалютнаяСуммаКт
		|ИЗ
		|	ВременнаяТаблицаНедвижимость КАК ЗакрытиеМесяцаНедвижимость
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ЗакрытиеМесяцаНедвижимость.СуммаНалога - ЗакрытиеМесяцаНедвижимость.ЗемельныйНалог <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаШапка.Период,
		|	ВременнаяТаблицаШапка.Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Период,
		|	ВременнаяТаблицаШапка.Организация,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыПоНалогам),
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НалогНаТранспортныеСредства),
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	СУММА(ЗакрытиеМесяцаТранспорт.СуммаНалога),
		|	&СодержаниеТранспорт,
		|	0,
		|	0,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	0,
		|	0
		|ИЗ
		|	ВременнаяТаблицаТранспорт КАК ЗакрытиеМесяцаТранспорт
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ЗакрытиеМесяцаТранспорт.СуммаНалога <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаШапка.Период,
		|	ВременнаяТаблицаШапка.Организация";
	Запрос.УстановитьПараметр("СодержаниеНедвижимость", НСтр("ru = 'Налог на имущество: Недвижимость'"));
	Запрос.УстановитьПараметр("СодержаниеТранспорт", НСтр("ru = 'Налог на имущество: Транспорт'"));
	ТаблицаХозрасчетный = Запрос.Выполнить().Выгрузить();
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаХозрасчетный", ТаблицаХозрасчетный);
	
	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Ложь);
	Движения.Хозрасчетный.Записать(Ложь);

КонецПроцедуры 

// Процедура - Отразить закрытие временных счетов учета
//
Процедура ОтразитьЗакрытиеВременныхСчетовУчета(СтруктураДополнительныеСвойства)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.СчетУчета КАК СчетУчета,
		|	ТаблицаДокумента.СуммаДт КАК СуммаДт,
		|	ТаблицаДокумента.СуммаКт КАК СуммаКт
		|ПОМЕСТИТЬ ВременнаяТаблицаВременныеСчетаУчета
		|ИЗ
		|	&ВременныеСчетаУчета КАК ТаблицаДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.СуммаКт <> 0
		|			ТОГДА ТаблицаДокумента.СуммаКт
		|		КОГДА ТаблицаДокумента.СуммаДт <> 0
		|			ТОГДА -ТаблицаДокумента.СуммаДт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Сумма5300
		|ПОМЕСТИТЬ ВременныеСчетаУчета
		|ИЗ
		|	&ВременныеСчетаУчета КАК ТаблицаДокумента
		|ГДЕ
		|	&РасчетНераспределеннойПрибыли
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВременныеСчетаУчета.Сумма5300) КАК Сумма5300
		|ПОМЕСТИТЬ ВременнаяТаблица5300
		|ИЗ
		|	ВременныеСчетаУчета КАК ВременныеСчетаУчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВременныеСчетаУчета";
	Запрос.УстановитьПараметр("ВременныеСчетаУчета", ВременныеСчетаУчета.Выгрузить());
	Запрос.УстановитьПараметр("РасчетНераспределеннойПрибыли", РасчетНераспределеннойПрибыли);
	Запрос.Выполнить();    	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Период КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СводДоходовИРасходов) КАК СчетДт,
		|	ТаблицаДокумента.СчетУчета КАК СчетКт,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ТаблицаДокумента.СуммаДт КАК Сумма,
		|	&СодержаниеЗакрытиеВременныхСчетов КАК Содержание,
		|	0 КАК КоличествоДт,
		|	0 КАК КоличествоКт,
		|	НЕОПРЕДЕЛЕНО КАК ВалютаДт,
		|	НЕОПРЕДЕЛЕНО КАК ВалютаКт,
		|	0 КАК ВалютнаяСуммаДт,
		|	0 КАК ВалютнаяСуммаКт
		|ИЗ
		|	ВременнаяТаблицаВременныеСчетаУчета КАК ТаблицаДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ТаблицаДокумента.СуммаДт = 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Период,
		|	ВременнаяТаблицаШапка.Организация,
		|	ТаблицаДокумента.СчетУчета,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СводДоходовИРасходов),
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ТаблицаДокумента.СуммаКт,
		|	&СодержаниеЗакрытиеВременныхСчетов,
		|	0,
		|	0,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	0,
		|	0
		|ИЗ
		|	ВременнаяТаблицаВременныеСчетаУчета КАК ТаблицаДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ТаблицаДокумента.СуммаКт = 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Период,
		|	ВременнаяТаблицаШапка.Организация,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НераспределеннаяПрибыль),
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СводДоходовИРасходов),
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	-ТаблицаДокумента.Сумма5300,
		|	&СодержаниеЗакрытие5300,
		|	0,
		|	0,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	0,
		|	0
		|ИЗ
		|	ВременнаяТаблица5300 КАК ТаблицаДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ТаблицаДокумента.Сумма5300 < 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Период,
		|	ВременнаяТаблицаШапка.Организация,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СводДоходовИРасходов),
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НераспределеннаяПрибыль),
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ТаблицаДокумента.Сумма5300,
		|	&СодержаниеЗакрытие5300,
		|	0,
		|	0,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	0,
		|	0
		|ИЗ
		|	ВременнаяТаблица5300 КАК ТаблицаДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ТаблицаДокумента.Сумма5300 > 0";
	Запрос.УстановитьПараметр("СодержаниеЗакрытиеВременныхСчетов", НСтр("ru = 'Закрытие временных счетов'"));
	Запрос.УстановитьПараметр("СодержаниеЗакрытие5300", НСтр("ru = 'Закрытие 5300'"));
	ТаблицаХозрасчетный = Запрос.Выполнить().Выгрузить();
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаХозрасчетный", ТаблицаХозрасчетный);
	
	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Ложь);
	Движения.Хозрасчетный.Записать(Ложь);
	
КонецПроцедуры 

// Процедура - Отразить налог на прибыль
//
Процедура ОтразитьНалогНаПрибыль(СтруктураДополнительныеСвойства)

	Если СуммаНалогНаПрибыль = 0 Тогда 
		Возврат;
	КонецЕсли;	
	
	// 9910 - 4310
	ТекстЗапроса =		
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Период КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыДоходыПоНалогуНаПрибыль) КАК СчетДт,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОтсроченныеНалоговыеОбязательстваПоНалогуНаПрибыль) КАК СчетКт,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	&СуммаНалогНаПрибыльБУ - &СуммаНалогНаПрибыль КАК Сумма,
		|	&СодержаниеОтсроченныеНалоговыеОбязательства КАК Содержание
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|ГДЕ
		|	НЕ &НеФормироватьОтсроченныеПроводки
		|	И &СуммаНалогНаПрибыльБУ > &СуммаНалогНаПрибыль";
	
	ТекстЗапроса = ТекстЗапроса +
		"
		|ОБЪЕДИНИТЬ ВСЕ
		|";
	
	// 9910 - 2410
	ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Период КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыДоходыПоНалогуНаПрибыль) КАК СчетДт,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОтсроченныеНалоговыеТребованияНП) КАК СчетКт,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	&СуммаНалогНаПрибыльБУ - &СуммаНалогНаПрибыль КАК Сумма,
		|	&СодержаниеОтсроченныеНалоговыеТребования КАК Содержание
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|ГДЕ
		|	НЕ &НеФормироватьОтсроченныеПроводки
		|	И &СуммаНалогНаПрибыльБУ < &СуммаНалогНаПрибыль";
	
	ТекстЗапроса = ТекстЗапроса +
		"
		|ОБЪЕДИНИТЬ ВСЕ
		|";
	
	// 9910 - 3410
	ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Период КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыДоходыПоНалогуНаПрибыль) КАК СчетДт,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НалогНаПрибыль) КАК СчетКт,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	&СуммаНалогНаПрибыль КАК Сумма,
		|	&СодержаниеНалогНаПрибыль КАК Содержание
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка";
	
	ТекстЗапроса = ТекстЗапроса +
		"
		|ОБЪЕДИНИТЬ ВСЕ
		|";
	
	// 5300 - 9910
	ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Период КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НераспределеннаяПрибыль) КАК СчетДт,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыДоходыПоНалогуНаПрибыль) КАК СчетКт,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ВЫБОР
		|		КОГДА &НеФормироватьОтсроченныеПроводки
		|			ТОГДА &СуммаНалогНаПрибыль
		|		ИНАЧЕ &СуммаНалогНаПрибыль + (&СуммаНалогНаПрибыльБУ - &СуммаНалогНаПрибыль)
		|	КОНЕЦ КАК Сумма,
		|	&СодержаниеЗакрытие5300 КАК Содержание
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;

	Запрос.УстановитьПараметр("СуммаНалогНаПрибыль", СуммаНалогНаПрибыль);	
	Запрос.УстановитьПараметр("СуммаНалогНаПрибыльБУ", СуммаНалогНаПрибыльБУ);
	Запрос.УстановитьПараметр("НеФормироватьОтсроченныеПроводки", НеФормироватьОтсроченныеПроводки);
	Запрос.УстановитьПараметр("СодержаниеНалогНаПрибыль", НСтр("ru = 'Налог на прибыль'"));
	Запрос.УстановитьПараметр("СодержаниеЗакрытие5300", НСтр("ru = 'Закрытие 5300'"));
	Запрос.УстановитьПараметр("СодержаниеОтсроченныеНалоговыеОбязательства", НСтр("ru = 'Отсроченные налоговые обязательства'"));
	Запрос.УстановитьПараметр("СодержаниеОтсроченныеНалоговыеТребования", НСтр("ru = 'Отсроченные налоговые требования'"));
	ТаблицаХозрасчетный = Запрос.Выполнить().Выгрузить();
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаХозрасчетный", ТаблицаХозрасчетный);
	
	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Ложь);
	Движения.Хозрасчетный.Записать(Ложь);
КонецПроцедуры

// Процедура - Отразить единый налог
//
Процедура ОтразитьЕдиныйНалог(СтруктураДополнительныеСвойства)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.ВидДеятельности КАК ВидДеятельности,
		|	ТаблицаДокумента.СуммаНаличнаяЕдиныйНалог КАК СуммаНаличнаяЕдиныйНалог,
		|	ТаблицаДокумента.СуммаБезналичнаяЕдиныйНалог КАК СуммаБезналичнаяЕдиныйНалог
		|ПОМЕСТИТЬ ВременнаяТаблицаЕдиныйНалог
		|ИЗ
		|	&ЕдиныйНалог КАК ТаблицаДокумента";
	Запрос.УстановитьПараметр("ЕдиныйНалог", ЕдиныйНалог.Выгрузить());
	Запрос.Выполнить();    	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =		
  		"ВЫБРАТЬ
		|	ТаблицаШапка.Период КАК Период,
		|	ТаблицаШапка.Организация КАК Организация,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыДоходыПоНалогуНаПрибыль) КАК СчетДт,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НалогНаПрибыль) КАК СчетКт,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ТаблицаДокумента.СуммаНаличнаяЕдиныйНалог КАК Сумма,
		//|	ВЫБОР
		//|		КОГДА ТаблицаДокумента.ВидДеятельности = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиЕН.ПереработкаПроизводствоТорговля)
		//|			ТОГДА &СодержаниеНаличные1
		//|		ИНАЧЕ &СодержаниеНаличные2
		//|	КОНЕЦ КАК Содержание,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.ВидДеятельности = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиЕН.ПереработкаПроизводствоТорговля)
		|			ТОГДА &СодержаниеНаличные1
		|		КОГДА ТаблицаДокумента.ВидДеятельности = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиЕН.Прочее)
		|			ТОГДА &СодержаниеНаличные2
		|		КОГДА ТаблицаДокумента.ВидДеятельности = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиЕН.РежимУсловногоНачисленияНДС)
		|			ТОГДА &СодержаниеНаличные3
		|		КОГДА ТаблицаДокумента.ВидДеятельности = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиЕН.ШвейноеТекстильноеПроизводство)
		|			ТОГДА &СодержаниеНаличные4
		|		КОГДА ТаблицаДокумента.ВидДеятельности = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиЕН.Услуги)
		|			ТОГДА &СодержаниеНаличные5
		|		КОГДА ТаблицаДокумента.ВидДеятельности = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиЕН.УслугиСаун)
		|			ТОГДА &СодержаниеНаличные6
		|		КОГДА ТаблицаДокумента.ВидДеятельности = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиЕН.УслугиБильярда)
		|			ТОГДА &СодержаниеНаличные7                                            
		|		КОГДА ТаблицаДокумента.ВидДеятельности = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиЕН.УслугиБань)
		|			ТОГДА &СодержаниеНаличные8
		|	КОНЕЦ КАК Содержание,
		|	0 КАК КоличествоДт,
		|	0 КАК КоличествоКт,
		|	НЕОПРЕДЕЛЕНО КАК ВалютаДт,
		|	НЕОПРЕДЕЛЕНО КАК ВалютаКт,
		|	0 КАК ВалютнаяСуммаДт,
		|	0 КАК ВалютнаяСуммаКт
		|ИЗ
		|	ВременнаяТаблицаЕдиныйНалог КАК ТаблицаДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ТаблицаШапка
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ТаблицаДокумента.СуммаНаличнаяЕдиныйНалог = 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаШапка.Период,
		|	ТаблицаШапка.Организация,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыДоходыПоНалогуНаПрибыль),
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НалогНаПрибыль),
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ТаблицаДокумента.СуммаБезналичнаяЕдиныйНалог,
		//|	ВЫБОР
		//|		КОГДА ТаблицаДокумента.ВидДеятельности = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиЕН.Прочее)
		//|			ТОГДА &СодержаниеБезналичные1
		//|		ИНАЧЕ &СодержаниеБезналичные2
		//|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.ВидДеятельности = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиЕН.ПереработкаПроизводствоТорговля)
		|			ТОГДА &СодержаниеБезналичные1
		|		КОГДА ТаблицаДокумента.ВидДеятельности = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиЕН.Прочее)
		|			ТОГДА &СодержаниеБезналичные2
		|		КОГДА ТаблицаДокумента.ВидДеятельности = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиЕН.РежимУсловногоНачисленияНДС)
		|			ТОГДА &СодержаниеБезналичные3
		|		КОГДА ТаблицаДокумента.ВидДеятельности = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиЕН.ШвейноеТекстильноеПроизводство)
		|			ТОГДА &СодержаниеБезналичные4
		|		КОГДА ТаблицаДокумента.ВидДеятельности = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиЕН.Услуги)
		|			ТОГДА &СодержаниеБезналичные5
		|		КОГДА ТаблицаДокумента.ВидДеятельности = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиЕН.УслугиСаун)
		|			ТОГДА &СодержаниеБезналичные6
		|		КОГДА ТаблицаДокумента.ВидДеятельности = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиЕН.УслугиБильярда)
		|			ТОГДА &СодержаниеБезналичные7
		|		КОГДА ТаблицаДокумента.ВидДеятельности = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиЕН.УслугиБань)
		|			ТОГДА &СодержаниеБезналичные8		
		|	КОНЕЦ,
		|	0,
		|	0,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	0,
		|	0
		|ИЗ
		|	ВременнаяТаблицаЕдиныйНалог КАК ТаблицаДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ТаблицаШапка
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ТаблицаДокумента.СуммаБезналичнаяЕдиныйНалог = 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаШапка.Период,
		|	ТаблицаШапка.Организация,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НераспределеннаяПрибыль),
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыДоходыПоНалогуНаПрибыль),
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	СУММА(ВЫРАЗИТЬ(ТаблицаДокумента.СуммаНаличнаяЕдиныйНалог + ТаблицаДокумента.СуммаБезналичнаяЕдиныйНалог КАК ЧИСЛО(15, 2))),
		|	&СодержаниеЗакрытие5300,
		|	0,
		|	0,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	0,
		|	0
		|ИЗ
		|	ВременнаяТаблицаЕдиныйНалог КАК ТаблицаДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ТаблицаШапка
		|		ПО (ИСТИНА)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаШапка.Период,
		|	ТаблицаШапка.Организация
		|
		|ИМЕЮЩИЕ
		|	НЕ СУММА(ТаблицаДокумента.СуммаНаличнаяЕдиныйНалог) + СУММА(ТаблицаДокумента.СуммаБезналичнаяЕдиныйНалог) = 0";
	Запрос.УстановитьПараметр("СодержаниеНаличные1", НСтр("ru = '1. Наличные'"));
	Запрос.УстановитьПараметр("СодержаниеНаличные2", НСтр("ru = '2. Наличные'"));
	Запрос.УстановитьПараметр("СодержаниеНаличные3", НСтр("ru = '3. Наличные'"));
	Запрос.УстановитьПараметр("СодержаниеНаличные4", НСтр("ru = '4. Наличные'"));
	Запрос.УстановитьПараметр("СодержаниеНаличные5", НСтр("ru = '5. Наличные'"));
	Запрос.УстановитьПараметр("СодержаниеНаличные6", НСтр("ru = '6. Наличные'"));
	Запрос.УстановитьПараметр("СодержаниеНаличные7", НСтр("ru = '7. Наличные'"));
	Запрос.УстановитьПараметр("СодержаниеНаличные8", НСтр("ru = '8. Наличные'"));
	Запрос.УстановитьПараметр("СодержаниеБезналичные1", НСтр("ru = '1. Безналичные'"));
	Запрос.УстановитьПараметр("СодержаниеБезналичные2", НСтр("ru = '2. Безналичные'"));
	Запрос.УстановитьПараметр("СодержаниеБезналичные3", НСтр("ru = '3. Безналичные'"));
	Запрос.УстановитьПараметр("СодержаниеБезналичные4", НСтр("ru = '4. Безналичные'"));
	Запрос.УстановитьПараметр("СодержаниеБезналичные5", НСтр("ru = '5. Безналичные'"));
	Запрос.УстановитьПараметр("СодержаниеБезналичные6", НСтр("ru = '6. Безналичные'"));
	Запрос.УстановитьПараметр("СодержаниеБезналичные7", НСтр("ru = '7. Безналичные'"));
	Запрос.УстановитьПараметр("СодержаниеБезналичные8", НСтр("ru = '8. Безналичные'"));
	Запрос.УстановитьПараметр("СодержаниеЗакрытие5300", НСтр("ru = 'Закрытие 5300'"));
	ТаблицаХозрасчетный = Запрос.Выполнить().Выгрузить();
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаХозрасчетный", ТаблицаХозрасчетный);
	
	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Ложь);
	Движения.Хозрасчетный.Записать(Ложь);
	
КонецПроцедуры 

// Процедура - Отразить закрытие парных счетов
//
Процедура ОтразитьЗакрытиеПарныхСчетов(СтруктураДополнительныеСвойства)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.СчетДт КАК СчетДт,
		|	ТаблицаДокумента.СчетКт КАК СчетКт,
		|	ТаблицаДокумента.Субконто1 КАК Субконто1,
		|	ТаблицаДокумента.Субконто2 КАК Субконто2,
		|	ТаблицаДокумента.Субконто3 КАК Субконто3,
		|	ТаблицаДокумента.Валюта КАК Валюта,
		|	ТаблицаДокумента.Сумма КАК Сумма,
		|	ТаблицаДокумента.ВалютнаяСумма КАК ВалютнаяСумма
		|ПОМЕСТИТЬ ВременнаяТаблицаПарныеСчетаУчета
		|ИЗ
		|	&ПарныеСчетаУчета КАК ТаблицаДокумента";
	Запрос.УстановитьПараметр("ПарныеСчетаУчета", ПарныеСчетаУчета.Выгрузить());
	Запрос.Выполнить();    	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ТаблицаШапка.Период КАК Период,
		|	ТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаПарныеСчетаУчета.СчетДт КАК СчетДт,
		|	ВременнаяТаблицаПарныеСчетаУчета.СчетКт КАК СчетКт,
		|	ВременнаяТаблицаПарныеСчетаУчета.Субконто1 КАК СубконтоДт1,
		|	ВременнаяТаблицаПарныеСчетаУчета.Субконто2 КАК СубконтоДт2,
		|	ВременнаяТаблицаПарныеСчетаУчета.Субконто3 КАК СубконтоДт3,
		|	ВременнаяТаблицаПарныеСчетаУчета.Субконто1 КАК СубконтоКт1,
		|	ВременнаяТаблицаПарныеСчетаУчета.Субконто2 КАК СубконтоКт2,
		|	ВременнаяТаблицаПарныеСчетаУчета.Субконто3 КАК СубконтоКт3,
		|	ВременнаяТаблицаПарныеСчетаУчета.Сумма КАК Сумма,
		|	&Содержание КАК Содержание,
		|	0 КАК КоличествоДт,
		|	0 КАК КоличествоКт,
		|	ВременнаяТаблицаПарныеСчетаУчета.Валюта КАК ВалютаДт,
		|	ВременнаяТаблицаПарныеСчетаУчета.Валюта КАК ВалютаКт,
		|	ВременнаяТаблицаПарныеСчетаУчета.ВалютнаяСумма КАК ВалютнаяСуммаДт,
		|	ВременнаяТаблицаПарныеСчетаУчета.ВалютнаяСумма КАК ВалютнаяСуммаКт
		|ИЗ
		|	ВременнаяТаблицаПарныеСчетаУчета КАК ВременнаяТаблицаПарныеСчетаУчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ТаблицаШапка
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаПарныеСчетаУчета.Сумма = 0";
	Запрос.УстановитьПараметр("Содержание", НСтр("ru = 'Закрытие парных счетов'"));
	ТаблицаХозрасчетный = Запрос.Выполнить().Выгрузить();
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаХозрасчетный", ТаблицаХозрасчетный);
	
	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Ложь);
	Движения.Хозрасчетный.Записать(Ложь);
	
КонецПроцедуры 

#КонецОбласти

Процедура ЗаписатьОшибкуВЖурналРегистрации(СообщениеОбОшибке) Экспорт
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		СообщениеОбОшибке);
	
КонецПроцедуры

Функция ИмяСобытияЖурналаРегистрации()
	Возврат НСтр("ru = 'Закрытие месяца'", ОбщегоНазначения.КодОсновногоЯзыка());
КонецФункции // ИмяСобытияЖурналаРегистрации()

Процедура РаспределениеНакладныхРасходов(МассивРезультатов, ИндексЗапроса, ТаблицаВыпускПродукцииЗатраты, ТаблицаМатериальныеЗатраты, Сообщения, Ошибки)

	РаспределятьРасходыСобственныхПодразделений = Константы.РаспределятьРасходыСобственныхПодразделений.Получить();
	
	ВыборкаИзРезультатаЗапроса = МассивРезультатов[ИндексЗапроса].Выбрать();
	Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
		
		ПодразделениеЗатрат = ВыборкаИзРезультатаЗапроса.ПодразделениеЗатрат;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Подразделение", ПодразделениеЗатрат);
		БазаРаспределения = ПолучитьБазуРаспределения(СтруктураОтбора);
		
		Если НЕ ЗначениеЗаполнено(БазаРаспределения) Тогда 
			ТекстСообщения = НСтр("ru = 'Расчет себестоимости продукции. Не заполнены методы распределения косвенных расходов.'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстСообщения, Неопределено);
			Продолжить;
		КонецЕсли;	
		
		СуммаРасходов = ВыборкаИзРезультатаЗапроса.СуммаРасходов;
		НайденныеСтроки = Новый Массив;
		
		// Распределение расходов.
		// Общие накладные расходы распределяются по всем подразделениям по всем номенклатурным группам.
		// Накладные расходы, в которых указано подразделение, распределяются внутри этого подразделения по номенклатурным группам.
		// Если не удалось найти подразделение для распределения, то такие накладные расходы распределяются на все подразделения.
		МассивКоэффициентов = Новый Массив;	
		Если БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ПлановаяСебестоимость Тогда 
			ТаблицаЗатрат = ТаблицаВыпускПродукцииЗатраты;

			Если ЗначениеЗаполнено(ПодразделениеЗатрат) Тогда 
				НайденныеСтроки = ТаблицаЗатрат.НайтиСтроки(Новый Структура("Подразделение", ПодразделениеЗатрат));
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
					МассивКоэффициентов.Добавить(НайденнаяСтрока.ПлановаяСтоимостьОборот);
				КонецЦикла;
			Иначе 
				Для Каждого СтрокаТаблицы Из ТаблицаЗатрат Цикл 
					МассивКоэффициентов.Добавить(СтрокаТаблицы.ПлановаяСтоимостьОборот);
				КонецЦикла;
			КонецЕсли;
			// Не удалось найти подразделение затрат- распределение по всем подразделениям.
			Если НЕ ЗначениеЗаполнено(МассивКоэффициентов)
				И РаспределятьРасходыСобственныхПодразделений Тогда 
				Для Каждого СтрокаТаблицы Из ТаблицаЗатрат Цикл 
					МассивКоэффициентов.Добавить(СтрокаТаблицы.ПлановаяСтоимостьОборот);
				КонецЦикла;
			КонецЕсли;	
			
		ИначеЕсли БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ОбъемВыпуска Тогда	
			ТаблицаЗатрат = ТаблицаВыпускПродукцииЗатраты;
			
			Если ЗначениеЗаполнено(ПодразделениеЗатрат) Тогда 
				НайденныеСтроки = ТаблицаЗатрат.НайтиСтроки(Новый Структура("Подразделение", ПодразделениеЗатрат));
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
					МассивКоэффициентов.Добавить(НайденнаяСтрока.КоличествоОборот);
				КонецЦикла;
			Иначе 
				Для Каждого СтрокаТаблицы Из ТаблицаЗатрат Цикл 
					МассивКоэффициентов.Добавить(СтрокаТаблицы.КоличествоОборот);
				КонецЦикла;	
			КонецЕсли;
			// Не удалось найти подразделение затрат- распределение по всем подразделениям.
			Если НЕ ЗначениеЗаполнено(МассивКоэффициентов)
				И РаспределятьРасходыСобственныхПодразделений Тогда 
				Для Каждого СтрокаТаблицы Из ТаблицаЗатрат Цикл 
					МассивКоэффициентов.Добавить(СтрокаТаблицы.КоличествоОборот);
				КонецЦикла;
			КонецЕсли;	
			
		ИначеЕсли БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.МатериальныеЗатраты Тогда	
			ТаблицаЗатрат = ТаблицаМатериальныеЗатраты;

			Если ЗначениеЗаполнено(ПодразделениеЗатрат) Тогда 
				НайденныеСтроки = ТаблицаЗатрат.НайтиСтроки(Новый Структура("Подразделение", ПодразделениеЗатрат));
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
					МассивКоэффициентов.Добавить(НайденнаяСтрока.Сумма);
				КонецЦикла;
			Иначе 
				Для Каждого СтрокаТаблицы Из ТаблицаЗатрат Цикл 
					МассивКоэффициентов.Добавить(СтрокаТаблицы.Сумма);
				КонецЦикла;	
			КонецЕсли;
			// Не удалось найти подразделение затрат- распределение по всем подразделениям.
			Если НЕ ЗначениеЗаполнено(МассивКоэффициентов)
				И РаспределятьРасходыСобственныхПодразделений Тогда 
				Для Каждого СтрокаТаблицы Из ТаблицаЗатрат Цикл 
					МассивКоэффициентов.Добавить(СтрокаТаблицы.Сумма);
				КонецЦикла;
			КонецЕсли;	
		КонецЕсли;	
		
		МассивСуммРасходов = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(СуммаРасходов, МассивКоэффициентов);
		Если МассивСуммРасходов = Неопределено Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Расчет себестоимости продукции. Не удалось распределить общие накладные расходы.
							|База распределения: %1; Подразделение: %2'"),
							БазаРаспределения, ВыборкаИзРезультатаЗапроса.ПодразделениеЗатратНаименование);
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Сообщения, Неопределено, ТекстСообщения, Неопределено);
			Продолжить;
		КонецЕсли;	
		
		// Определение коллекции обхода.
		Если ЗначениеЗаполнено(НайденныеСтроки) Тогда 
			КоллекцияСтрок = НайденныеСтроки;
		Иначе 
			КоллекцияСтрок = ТаблицаЗатрат;
		КонецЕсли;	
		
		ИндексВМассиве = 0;
		Для Каждого СтрокаТаблицы Из КоллекцияСтрок Цикл
			СтрокаТабличнойЧасти = НакладныеРасходы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТаблицы);
			СтрокаТабличнойЧасти.СчетРасходов = ВыборкаИзРезультатаЗапроса.СчетРасходов; 
			СтрокаТабличнойЧасти.ПодразделениеЗатрат = ВыборкаИзРезультатаЗапроса.ПодразделениеЗатрат; 
			СтрокаТабличнойЧасти.СтатьяЗатрат = ВыборкаИзРезультатаЗапроса.СтатьяЗатрат; 
			СтрокаТабличнойЧасти.Сумма = МассивСуммРасходов[ИндексВМассиве];
			
			ИндексВМассиве = ИндексВМассиве + 1;
		КонецЦикла;	
	КонецЦикла;	

КонецПроцедуры 

Функция ПолучитьБазуРаспределения(СтруктураОтбора) 

	// Выбирается значение по всем параметрам
	// по убыванию от максимально подходящего.
	БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ПустаяСсылка();

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.Подразделение КАК Подразделение,
		|	МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.БазаРаспределения КАК БазаРаспределения
		|ПОМЕСТИТЬ ВременнаяТаблицаМетодыРаспределенияКосвенныхРасходовОрганизаций
		|ИЗ
		|	РегистрСведений.МетодыРаспределенияКосвенныхРасходовОрганизаций.СрезПоследних(&Период, Организация = &Организация) КАК МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Подразделение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		// По Счету, Подразделению, Статье.
		|ВЫБРАТЬ
		|	ВременнаяТаблицаМетоды.БазаРаспределения КАК БазаРаспределения
		|ПОМЕСТИТЬ ВременнаяТаблицаМетодыОтбор
		|ИЗ
		|	ВременнаяТаблицаМетодыРаспределенияКосвенныхРасходовОрганизаций КАК ВременнаяТаблицаМетоды
		|ГДЕ
		|	ВременнаяТаблицаМетоды.Подразделение = &Подразделение
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		// По пустому Счету, пустому Подразделению, пустой Статье.
		|ВЫБРАТЬ
		|	ВременнаяТаблицаМетоды.БазаРаспределения КАК БазаРаспределения
		|ИЗ
		|	ВременнаяТаблицаМетодыРаспределенияКосвенныхРасходовОрганизаций КАК ВременнаяТаблицаМетоды
		|ГДЕ
		|	ВременнаяТаблицаМетоды.Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВременнаяТаблицаМетодыОтбор.БазаРаспределения КАК БазаРаспределения
		|ИЗ
		|	ВременнаяТаблицаМетодыОтбор КАК ВременнаяТаблицаМетодыОтбор";
	Запрос.УстановитьПараметр("Период", КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Подразделение", СтруктураОтбора.Подразделение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		БазаРаспределения = ВыборкаДетальныеЗаписи.БазаРаспределения;
	КонецЕсли;
	
	Возврат БазаРаспределения;	
КонецФункции 

// Процедура проверяет, есть ли остатки на начало периода.
// Такая ситуация возможна, если в прошлом месяце были закрыты (списаны на счета НЗП)
// не все затраты.
// Кроме того, этими "незакрытыми" затратами могут оказаться остатки НЗП, введенные 
// в качестве начальных остатков.
Процедура ЕстьОстаткиНЗПНаНачалоМесяца()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 		КАК Субконто1,
	|	ХозрасчетныйОстатки.Счет 			КАК Счет,
	|	ХозрасчетныйОстатки.Субконто2 		КАК Субконто2,
	|	ХозрасчетныйОстатки.СуммаОстатокДт 	КАК КонОстаток	
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&НачГраница, Счет В ИЕРАРХИИ (&СчетаЗатрат), 
	|					 	 &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстатокДт <> 0
	|ИТОГИ
	|	СУММА(КонОстаток)
	|ПО
	|	Субконто1";
	
	НачГраница =  Новый Граница(НачалоМесяца(Дата), ВидГраницы.Исключая);

	Запрос.УстановитьПараметр("НачГраница",    	НачГраница);
	Запрос.УстановитьПараметр("Организация",  	Организация);
		
	СчетаЗатрат = Новый Массив;
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ПроизводствоПолуфабрикатов);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательноеПроизводство);

	Запрос.УстановитьПараметр("СчетаЗатрат", СчетаЗатрат);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	Результат = Запрос.Выполнить();
	
	// существуют остатки на начало
	Если НЕ Результат.Пустой() Тогда
		
		ТекстСообщения = НСтр("ru = 'На начало месяца существуют остатки по счетам прямых затрат производственного учета.
		|Такая ситуация возможна, если в прошлом месяце были закрыты (списаны на счета 
		|незавершенного производства) не все затраты. Ниже приведен перечень затрат:'");
		
		ВыборкаПоПодразделениям = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоПодразделениям.Следующий() Цикл		
			ТекстСообщения = ТекстСообщения + СтрШаблон(НСтр("ru = '
			|Подразделение		: %1. Сумма %2'"), ВыборкаПоПодразделениям.Субконто1, ВыборкаПоПодразделениям.КонОстаток);
			
			ВыборкаПоСчетамИНоменклатурнымГруппам = ВыборкаПоПодразделениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоСчетамИНоменклатурнымГруппам.Следующий() Цикл		
				
				ТекстСообщения = ТекстСообщения + СтрШаблон(НСтр("ru = '
				|Счет затрат : %1. Номенклатурная группа : %2. Сумма : %3'"), 
				ВыборкаПоСчетамИНоменклатурнымГруппам.Счет, 
				ВыборкаПоСчетамИНоменклатурнымГруппам.Субконто2,
				ВыборкаПоСчетамИНоменклатурнымГруппам.КонОстаток);
				
			КонецЦикла;
		КонецЦикла;
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьНадписи(ПараметрыПроцедуры, ОперацииЗакрытияМесяцаСОшибками)
	
	ТекстНеВыполнялось = НСтр("ru = '... не выполнялось'");
	ТекстОшибка = НСтр("ru = '... при выполнении возникли ошибки'");
	
	// Заполнение надписей "не выполнялось".
	Для Каждого ОперацияЗакрытияМесяца Из ПараметрыПроцедуры.СписокОпераций Цикл 
		ИмяОперации = ОперацияЗакрытияМесяца.Значение;
		ЭтотОбъект["Надпись" + ИмяОперации]	= ТекстНеВыполнялось;
	КонецЦикла;	

	Если РасчетАмортизацииОС Тогда
		НадписьРасчетАмортизацииОС = СтрШаблон(НСтр("ru = 'Сумма амортизации: %1'"), АмортизацияОС.Итог("Сумма"));
	КонецЕсли;
	
	Если РасчетПереоценкиВалютныхСредств Тогда
		НадписьРасчетПереоценкиВалютныхСредств	= СтрШаблон(НСтр("ru = 'Доходы: %1. Убытки: %2'"), 
			ПереоценкаВалюты.Итог("СуммаДоход"), ПереоценкаВалюты.Итог("СуммаУбыток"));	
	КонецЕсли;
	
	Если РасчетНалогаНаПрибыль Тогда 
		НадписьРасчетНалогаНаПрибыль = СтрШаблон(НСтр("ru = 'Сумма: %1'"), СуммаНалогНаПрибыль);
	КонецЕсли;
	
	Если РасчетНДС Тогда
		Сумма059 = 0;
		Сумма064 = 0;
		
		СтрокаТабличнойЧасти = НДС.Найти("059", "Строка");
		Если НЕ СтрокаТабличнойЧасти = Неопределено Тогда 
			Сумма059 = СтрокаТабличнойЧасти.Сумма;
		КонецЕсли;	
		СтрокаТабличнойЧасти = НДС.Найти("064", "Строка");
		Если НЕ СтрокаТабличнойЧасти = Неопределено Тогда 
			Сумма064 = СтрокаТабличнойЧасти.Сумма;		
		КонецЕсли;
		
		НадписьРасчетНДС = СтрШаблон(НСтр("ru = 'НДС начисленный: %1. НДС, разрешенный к зачету: %2'"), 
			Сумма059, Сумма064);	
	КонецЕсли;								
	
	Если РасчетЗемельногоНалога Тогда 
		НадписьРасчетЗемельногоНалога = СтрШаблон(НСтр("ru = 'Сумма земельног налога: %1'"), ЗемельныйНалог.Итог("Сумма"));
	КонецЕсли;	
	
	Если РасчетНалогаНаИмущество Тогда
		НадписьРасчетНалогаНаИмущество = СтрШаблон(НСтр("ru = 'Недвижимость сумма: %1. Транспорт сумма: %2'"), 
			Недвижимость.Итог("СуммаНалога"), Транспорт.Итог("СуммаНалога"));	
	КонецЕсли;
	
	Если ЗакрытьПарныеСчетаУчета Тогда
		НадписьЗакрытьПарныеСчетаУчета = СтрШаблон(НСтр("ru = 'Контрольная сумма проводок: %1'"), ПарныеСчетаУчета.Итог("Сумма"));	
	КонецЕсли;
	
	Если ЗакрытьВременныеСчетаУчета Тогда
		НадписьЗакрытьВременныеСчетаУчета = СтрШаблон(НСтр("ru = 'Сумма: %1'"), 0);	
	КонецЕсли;
	
	Если НЕ РучнойВводКомментариев Тогда
		Комментарий = СтрШаблон(НСтр("ru = 'Закрытие месяца за %1 %2. Сформировано %3'"), 
			Формат(Дата,"ДФ=ММММ"), Формат(Дата, "ДФ=гггг"), ТекущаяДатаСеанса()); 
	КонецЕсли;
	
	Если РасчетСписанияРасходовБудущихПериодов Тогда
		НадписьРасчетСписанияРасходовБудущихПериодов = СтрШаблон(НСтр("ru = 'Списание расходов будущих периодов: %1'"), РасходыБП.Итог("Сумма"));
	КонецЕсли;			
	
	Если РасчетСтоимостиПродукцииПоЗаказам Тогда
		НадписьРасчетСтоимостиПродукцииПоЗаказам = СтрШаблон(НСтр("ru = 'Сумма: %1'"), 
			РасходыНаПроизводство.Итог("СуммаПрямыхЗатратНаГП") +
			РасходыНаПроизводство.Итог("СуммаНЗППредыдущегоПериода") +
			РасходыНаПроизводство.Итог("СуммаНЗП"));
	КонецЕсли;
	
	Если РасчетНераспределеннойПрибыли Тогда 
		СуммаНераспределеннойПрибыли = ВременныеСчетаУчета.Итог("СуммаКт") - ВременныеСчетаУчета.Итог("СуммаДт");
		
		Если СуммаНераспределеннойПрибыли > 0 Тогда 
			ТекстНадписи = НСтр("ru = 'Сумма прибыли: %1'");
		ИначеЕсли СуммаНераспределеннойПрибыли < 0 Тогда 
			ТекстНадписи = НСтр("ru = 'Сумма убытка: %1'");
			СуммаНераспределеннойПрибыли = СуммаНераспределеннойПрибыли * -1;
		Иначе 
			ТекстНадписи = НСтр("ru = 'Сумма: %1'");
		КонецЕсли;	
			
		НадписьРасчетНераспределеннойПрибыли = СтрШаблон(ТекстНадписи, Формат(СуммаНераспределеннойПрибыли, "ЧЦ=15; ЧГ=3,0"));
	КонецЕсли;
	
	Если РасчетЕдиногоНалога Тогда
		СуммаНаличные = ЕдиныйНалог.Итог("СуммаНаличнаяЕдиныйНалог");
		СуммаБезналичные = ЕдиныйНалог.Итог("СуммаБезналичнаяЕдиныйНалог");
		
		НадписьРасчетЕдиногоНалога = СтрШаблон(НСтр("ru = 'Сумма наличные: %1; Сумма безналичные: %2'"), 
			СуммаНаличные, СуммаБезналичные);	
	КонецЕсли;
	
	Если РасчетСтоимостиПродукцииПоНоменклатурнымГруппам Тогда
		НадписьРасчетСтоимостиПродукцииПоНоменклатурнымГруппам = СтрШаблон(НСтр("ru = 'Сумма плановая: %1; Сумма фактическая: %2'"), 
			СуммаГотоваяПродукцияПлановая, СуммаГотоваяПродукцияПлановая + СуммаГотоваяПродукцияКорректировка);	
	КонецЕсли;
	
	// Замена надписи текстом ошибки.
	Для Каждого ИмяОперации Из ОперацииЗакрытияМесяцаСОшибками Цикл 
		ЭтотОбъект["Надпись" + ИмяОперации]	= ТекстОшибка;
	КонецЦикла;	
	
КонецПроцедуры

// Процедура выполняет контроль противоречий.
//
Процедура ВыполнитьПредварительныйКонтроль(Отказ) 

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗакрытиеМесяца.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗакрытиеМесяца КАК ЗакрытиеМесяца
		|ГДЕ
		|	НЕ ЗакрытиеМесяца.ПометкаУдаления
		|	И НЕ ЗакрытиеМесяца.Ссылка = &Ссылка
		|	И КОНЕЦПЕРИОДА(ЗакрытиеМесяца.Дата, МЕСЯЦ) = &ДатаДокумента
		|	И ЗакрытиеМесяца.Организация = &Организация";
	Запрос.УстановитьПараметр("Организация", Организация);		
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);		
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Дублирование документа.
	Если НЕ МассивРезультатов[0].Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'Для указанного периода существует проведенный документ ""Закрытие месяца"".'");
		БухгалтерскийУчетСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения,,,, Отказ);	    
	КонецЕсли;
		
КонецПроцедуры

// Процедура заполняет табличную часть
//
Процедура ЗаполнитьТабличнуюЧастьУбыткиПрошлыхЛет() Экспорт 
	// за пред. 5 лет, не считаем текущий год
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УбыткиПрошлыхЛетОстатки.Год КАК Год,
		|	УбыткиПрошлыхЛетОстатки.СуммаОстаток КАК Убыток
		|ИЗ
		|	РегистрНакопления.УбыткиПрошлыхЛет.Остатки(ДОБАВИТЬКДАТЕ(&КонецПериода, СЕКУНДА, 1), Организация = &Организация) КАК УбыткиПрошлыхЛетОстатки
		|ГДЕ
		|	УбыткиПрошлыхЛетОстатки.Год МЕЖДУ &НачалоПериода И &КонецПериода";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(ДобавитьМесяц(НачалоГода(Дата),-60)));		
	Запрос.УстановитьПараметр("КонецПериода", КонецГода(ДобавитьМесяц(НачалоГода(Дата),-1)));
	
	УбыткиПрошлыхЛет.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли