#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ПодготовитьПараметрыРасчета() Экспорт 

	ПризнакСтраныЕАЭС 			= Контрагент.ПризнакСтраны = Перечисления.ПризнакиСтраны.ЕАЭС;
	ПризнакСтраныИмпортЭкспорт 	= Контрагент.ПризнакСтраны = Перечисления.ПризнакиСтраны.ИмпортЭкспорт;
	
	ПараметрыРасчета = ОбработкаТабличныхЧастейКлиентСервер.ШаблонПараметровРасчета();
	ПараметрыРасчета.ПризнакСтраныЕАЭС = ПризнакСтраныЕАЭС;
	ПараметрыРасчета.ЕстьАкциз = Истина;
	ПараметрыРасчета.СуммаВключаетНалоги = СуммаВключаетНалоги;
	ПараметрыРасчета.ЗначениеСтавкиНДС = ЗначениеСтавкиНДС;
	ПараметрыРасчета.БезналичныйРасчет = БезналичныйРасчет;
	
	Если Контрагент.ПризнакСтраны = Перечисления.ПризнакиСтраны.КР Тогда
		ПараметрыРасчета.КурсДокумента = 1;
		ПараметрыРасчета.КратностьДокумента = 1;
	Иначе		
		ПараметрыРасчета.КурсДокумента = Курс;
		ПараметрыРасчета.КратностьДокумента = Кратность;
	КонецЕсли;	
		
	ПараметрыРасчета.РассчитатьБазуНДС = ПризнакСтраныЕАЭС;
	ПараметрыРасчета.РассчитатьОтБазыНДС = ПризнакСтраныЕАЭС;
	ПараметрыРасчета.ПризнакСтраныИмпортЭкспорт = ПризнакСтраныИмпортЭкспорт;
	ПараметрыРасчета.Точность = ТочностьЦены;

	Возврат ПараметрыРасчета;
КонецФункции

#КонецОбласти

#Область ЗаполненияДокумента

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.ПоступлениеТоваровУслуг - Данные заполнения документа.
//	
Процедура ЗаполнитьПоПоступлениюТоваровУслуг(ДанныеЗаполнения) Экспорт
	
	ДокументОснование = ДанныеЗаполнения;
	
	Организация 			= ДанныеЗаполнения.Организация;
	БезналичныйРасчет 		= ДанныеЗаполнения.БезналичныйРасчет;
	Контрагент 				= ДанныеЗаполнения.Контрагент;
	ДоговорКонтрагента 		= ДанныеЗаполнения.ДоговорКонтрагента;
	Склад 					= ДанныеЗаполнения.Склад;
	СчетРасчетов 			= ДанныеЗаполнения.СчетРасчетов;	
	ВалютаДокумента 		= ДанныеЗаполнения.ВалютаДокумента;
	Курс 					= ДанныеЗаполнения.Курс;
	Кратность 				= ДанныеЗаполнения.Кратность;	
	ЗначениеСтавкиНДС 		= ДанныеЗаполнения.ЗначениеСтавкиНДС;
	СуммаВключаетНалоги 	= ДанныеЗаполнения.СуммаВключаетНалоги;
	ТочностьЦены 			= ДанныеЗаполнения.ТочностьЦены;
	НДСНеПодтвержден 		= ДанныеЗаполнения.НДСНеПодтвержден;
	ПоступлениеОтНерезидента = ДанныеЗаполнения.ПоступлениеОтНерезидента;
	ЗначениеСтавкиНСП 		= ДанныеЗаполнения.ЗначениеСтавкиНСП;
	ЗначениеСтавкиНСПДляОС 	= ДанныеЗаполнения.ЗначениеСтавкиНСПДляОС;
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Товары Цикл
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Услуги Цикл
		НоваяСтрока = Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.ОС Цикл
		НоваяСтрока = ОС.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.ПоступлениеВПереработку - Данные заполнения документа.
//	
Процедура ЗаполнитьПоПоступлениеИзПереработки(ДанныеЗаполнения) Экспорт
	
	ДокументОснование = ДанныеЗаполнения;
	
	Организация 			= ДанныеЗаполнения.Организация;
	БезналичныйРасчет 		= ДанныеЗаполнения.БезналичныйРасчет;
	Контрагент 				= ДанныеЗаполнения.Контрагент;
	ДоговорКонтрагента 		= ДанныеЗаполнения.ДоговорКонтрагента;
	Склад 					= ДанныеЗаполнения.Склад;
	СчетРасчетов 			= ДанныеЗаполнения.СчетРасчетов;	
	ВалютаДокумента 		= ДанныеЗаполнения.ВалютаДокумента;
	Курс 					= ДанныеЗаполнения.Курс;
	Кратность 				= ДанныеЗаполнения.Кратность;	
	ЗначениеСтавкиНДС 		= ДанныеЗаполнения.ЗначениеСтавкиНДС;
	СуммаВключаетНалоги 	= ДанныеЗаполнения.СуммаВключаетНалоги;
	ТочностьЦены 			= ДанныеЗаполнения.ТочностьЦены;
	ПоступлениеОтНерезидента = ДанныеЗаполнения.ПоступлениеОтНерезидента;
	ЗначениеСтавкиНСП 		= ДанныеЗаполнения.ЗначениеСтавкиНСП;
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Услуги Цикл
		НоваяСтрока = Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);;
		
		СчетаУчетаНоменклатуры = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(
									Организация, СтрокаТабличнойЧасти.Номенклатура);
									
		НоваяСтрока.СчетРасходов = СчетаУчетаНоменклатуры.СчетРасходов;									
	КонецЦикла;
					
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа.
//	
Процедура ЗаполнитьПоЭлектронныйСчетФактураПолученныйЗагрузка(СтрокаТабличнойЧастиДокументы, НайденныеСтроки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СведенияОбЭСФ.ДокументОснование КАК ДокументОснование
		|ИЗ
		|	РегистрСведений.СведенияОбЭСФ КАК СведенияОбЭСФ
		|ГДЕ
		|	СведенияОбЭСФ.НомерЭСФ = &НомерЭСФ";
	Запрос.УстановитьПараметр("НомерЭСФ", СтрокаТабличнойЧастиДокументы.НомерКорректируемогоЭСФ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ДокументОснование = Выборка.ДокументОснование;		
	КонецЕсли;	
	
	Если СтрокаТабличнойЧастиДокументы.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда 
		БезналичныйРасчет = Истина;	
	КонецЕсли;	
		
	Контрагент = СтрокаТабличнойЧастиДокументы.Контрагент;
	ДоговорКонтрагента = СтрокаТабличнойЧастиДокументы.ДоговорКонтрагента;
	ВалютаДокумента = ДоговорКонтрагента.ВалютаРасчетов;
	
	Курс      = СтрокаТабличнойЧастиДокументы.Курс;
	Кратность = 1;

	ЗначениеСтавкиНДС = СтрокаТабличнойЧастиДокументы.ЗначениеСтавкиНДС;
	
	СуммаВключаетНалоги = ДоговорКонтрагента.СуммаВключаетНалоги;
	
	СчетаУчета = БухгалтерскийУчетСервер.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	СчетРасчетов = СчетаУчета.СчетРасчетовПоставщика;
		
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	Товары.Очистить();
	Услуги.Очистить();
	
	Если СтрокаТабличнойЧастиДокументы.ВидОперации = Перечисления.ВидыОперацийЭСФ.ПоставкаТоваров Тогда 
		Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуИБазуНДССтрокиТабличнойЧастиПоступление(НоваяСтрока, ПараметрыРасчета,
				ЗначениеЗаполнено(НоваяСтрока.Сумма));
			
			СчетаУчетаНоменклатуры = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(Организация, НоваяСтрока.Номенклатура);
			НоваяСтрока.СчетУчета = СчетаУчетаНоменклатуры.СчетУчета;
		КонецЦикла;
	Иначе 	
		Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
			НоваяСтрока = Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуИБазуНДССтрокиТабличнойЧастиПоступление(НоваяСтрока, ПараметрыРасчета,
				ЗначениеЗаполнено(НоваяСтрока.Сумма));
			
			СчетаУчетаНоменклатуры = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(Организация, НоваяСтрока.Номенклатура);
			НоваяСтрока.СчетРасходов = СчетаУчетаНоменклатуры.СчетРасходов;
		КонецЦикла;
	КонецЕсли;
	
	СуммаДокумента = Товары.Итог("Всего") + Услуги.Итог("Всего") + ОС.Итог("Всего");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.ПоступлениеТоваровУслуг")] = "ЗаполнитьПоПоступлениюТоваровУслуг";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПоступлениеИзПереработки")] = "ЗаполнитьПоПоступлениеИзПереработки";
	
	ЗаполнениеОбъектовБП.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);

КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ДанныеУчетнойПолитики = БухгалтерскийУчетСервер.ПолучитьДанныеУчетнойПолитикиОрганизаций(Дата, Организация);
	
	МассивНепроверяемыхРеквизитов = Новый Массив;

	Если Товары.Количество() = 0
		И Услуги.Количество() = 0
		И ОС.Количество() = 0 Тогда	
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не заполнен ни один список.'"),,,,Отказ)		
	КонецЕсли;
	
	Если Товары.Количество() = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
	КонецЕсли;
	
	Если Курс = 0 Или Кратность = 0 Тогда 
		ТекстСообщения = НСтр("ru = 'Не заполнен курс валюты ""%1"". Откройте список валют (Банк и касса - Валюты) и проверьте,
			|что у валюты ""%1"" установлен курс на дату %2 или ранее.
			|Перевыберите договор и заново проведите документ.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ВалютаДокумента, Формат(Дата, "ДЛФ=D"));	
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;
	
	// Контроль заполнения Контрагента ГНС.
	Если Контрагент.ПризнакСтраны = Перечисления.ПризнакиСтраны.ЕАЭС Тогда 
		КонтрагентГНС = Организация.КонтрагентГНС;
		Если НЕ ЗначениеЗаполнено(КонтрагентГНС) Тогда 
			ТекстСообщения = НСтр("ru = 'Не заполнен Контрагент ГНС. Откройте организацию и проверьте, что поле Контрагент ГНС заполнено.
				|Заново проведите документ.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "Объект.Организация",, Отказ);
		Иначе 
			СписокВидовДоговора = Новый СписокЗначений;
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
			ДоговорКонтрагентаГНС = Справочники.ДоговорыКонтрагентов.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(КонтрагентГНС, Организация, СписокВидовДоговора);
			
			Если НЕ ЗначениеЗаполнено(ДоговорКонтрагентаГНС) Тогда 
				ТекстСообщения = НСтр("ru = 'Не установлен основной договор у Контрагента ГНС.
					|Откройте организацию и перейдите к указанному Контрагенту ГНС. На вкладке Договоры контрагента установите основной договор.
					|Вид договора должен быть Прочее, валюта договора KGS. Заново проведите документ.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "Объект.Организация",, Отказ);
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;		
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

	// Выполнение предварительного контроля.
	ВыполнитьПредварительныйКонтроль(Отказ);	
	
КонецПроцедуры

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СуммаДокумента = Товары.Итог("Всего") + Услуги.Итог("Всего") + ОС.Итог("Всего");
		
	Если Товары.Количество() = 0 Тогда 
		Склад = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ИнициализироватьДанные(Отказ, РежимПроведения);
	
	ОтразитьДвижения(Отказ, РежимПроведения);
	
	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииОбработкаПроведения

// Процедура инициализирует данные документа
// и подготавливает таблицы для движения в регистры
//
Процедура ИнициализироватьДанные(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.КорректировкаСтоимостиПоступления.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
КонецПроцедуры
	
// Процедура заполняет регистры данными
//
Процедура ОтразитьДвижения(Отказ, РежимПроведения)

	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Отказ);
	
	// ОС
	БухгалтерскийУчетСервер.ОтразитьПараметрыУчетаОС(ДополнительныеСвойства, Движения, Отказ);
	
	// Прочее
	БухгалтерскийУчетСервер.ОтразитьПоступлениеТоваров(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьРеестрВвезенных(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьРеестрПриобретенныхМатериальныхРесурсов(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьСведенияОПоступлении(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьНДСНаИмпорт(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьСведенияПоПоказателямИмпорта(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьРеестрЗакупок(ДополнительныеСвойства, Движения, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВыполнитьПредварительныйКонтроль(Отказ)

	Если НЕ Контрагент = ДокументОснование.Контрагент Тогда
		ТекстСообщения = НСтр("ru = 'Контрагент в текущем документе отличается от контрагента в документе основания.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "Объект.Контрагент",, Отказ);	
	КонецЕсли;
		
	Если НЕ ДоговорКонтрагента = ДокументОснование.ДоговорКонтрагента Тогда
		ТекстСообщения = НСтр("ru = 'Договор в текущем документе отличается от договора в документе основания.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "Объект.ДоговорКонтрагента",, Отказ);	
	КонецЕсли;
	
	Если НЕ БезналичныйРасчет = ДокументОснование.БезналичныйРасчет Тогда
		ТекстСообщения = НСтр("ru = 'Безналичный расчет в текущем документе отличается от безналичного расчета в документе основания.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "Объект.БезналичныйРасчет",, Отказ);	
	КонецЕсли;
	
	Если НЕ ЗначениеСтавкиНДС = ДокументОснование.ЗначениеСтавкиНДС Тогда
		ТекстСообщения = НСтр("ru = 'Значение ставки НДС в текущем документе отличается от значения ставки НДС в документе основания.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "Объект.ЗначениеСтавкиНДС",, Отказ);	
	КонецЕсли;
	
	// Проверка товаров
	ПроверитьТовары = Ложь;
	
	Для Каждого СтрокаТабличнойЧасти Из Товары Цикл
		
		Если СтрокаТабличнойЧасти.Сумма < 0
			ИЛИ СтрокаТабличнойЧасти.БазаНДС < 0
			ИЛИ СтрокаТабличнойЧасти.СуммаНДС < 0
			ИЛИ СтрокаТабличнойЧасти.СуммаНСП < 0
			ИЛИ СтрокаТабличнойЧасти.Всего < 0 Тогда
			ПроверитьТовары = Истина;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	// Проверка услуг
	ПроверитьУслуги = Ложь;
	
	Для Каждого СтрокаТабличнойЧасти Из Услуги Цикл
		
		Если СтрокаТабличнойЧасти.Сумма < 0
			ИЛИ СтрокаТабличнойЧасти.БазаНДС < 0
			ИЛИ СтрокаТабличнойЧасти.СуммаНДС < 0
			ИЛИ СтрокаТабличнойЧасти.СуммаНСП < 0
			ИЛИ СтрокаТабличнойЧасти.Всего < 0 Тогда
			ПроверитьУслуги = Истина;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	// Проверка ОС
	ПроверитьОС = Ложь;
	
	Для Каждого СтрокаТабличнойЧасти Из ОС Цикл
		
		Если СтрокаТабличнойЧасти.Сумма < 0
			ИЛИ СтрокаТабличнойЧасти.БазаНДС < 0
			ИЛИ СтрокаТабличнойЧасти.СуммаНДС < 0
			ИЛИ СтрокаТабличнойЧасти.СуммаНСП < 0
			ИЛИ СтрокаТабличнойЧасти.Всего < 0 Тогда
			ПроверитьОС = Истина;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	Если ПроверитьТовары ИЛИ ПроверитьУслуги ИЛИ ПроверитьОС Тогда
		
		// Проверка табличных частей док. "Поступление товаров и услуг"	
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			
			Если НЕ Склад = ДокументОснование.Склад 
				И НЕ Товары.Количество() = 0 Тогда
				ТекстСообщения = НСтр("ru = 'Склад в текущем документе отличается от склада в документе основания.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "Объект.Склад",, Отказ);	
			КонецЕсли;
			
			КонтрольТабличныхЧастейПоступленияТоваров(ПроверитьТовары, ПроверитьУслуги, ПроверитьОС, Отказ);
						
		// Проверка табличных частей док. "Поступление из переработки"	
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеИзПереработки") Тогда
			
			Если ПроверитьУслуги Тогда
				КонтрольТабличныхЧастейПоступленияИзПереработки(Отказ);
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
	
	// Проверка ставок НСП
	Если Дата >= Дата(2022,01,01) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Товары.ЗначениеСтавкиНСП КАК ЗначениеСтавкиНСП
		|ПОМЕСТИТЬ ВременнаяТаблицаТовары
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Услуги.ЗначениеСтавкиНСП КАК ЗначениеСтавкиНСП
		|ПОМЕСТИТЬ ВременнаяТаблицаУслуги
		|ИЗ
		|	&Услуги КАК Услуги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОС.ЗначениеСтавкиНСП КАК ЗначениеСтавкиНСП
		|ПОМЕСТИТЬ ВременнаяТаблицаОС
		|ИЗ
		|	&ОС КАК ОС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВременнаяТаблицаТовары.ЗначениеСтавкиНСП КАК ЗначениеСтавкиНСП
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВременнаяТаблицаУслуги.ЗначениеСтавкиНСП КАК ЗначениеСтавкиНСП
		|ИЗ
		|	ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВременнаяТаблицаОС.ЗначениеСтавкиНСП КАК ЗначениеСтавкиНСП
		|ИЗ
		|	ВременнаяТаблицаОС КАК ВременнаяТаблицаОС";
		
		Запрос.УстановитьПараметр("Товары", Товары);
		Запрос.УстановитьПараметр("Услуги", Услуги);
		Запрос.УстановитьПараметр("ОС", 	ОС);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		// Товары
		Если НЕ МассивРезультатов[3].Пустой() И МассивРезультатов[3].Выбрать().Количество() >= 2 Тогда
			ТекстСообщения = НСтр("ru = 'На закладке ""Товары"" значения ставок НСП должны быть одинаковыми.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,, "Объект.Товары", Отказ);	
		КонецЕсли;
		
		// Услуги
		Если НЕ МассивРезультатов[4].Пустой() И МассивРезультатов[4].Выбрать().Количество() >= 2 Тогда
			ТекстСообщения = НСтр("ru = 'На закладке ""Услуги"" значения ставок НСП должны быть одинаковыми.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,, "Объект.Услуги", Отказ);	
		КонецЕсли;
		
		// ОС
		Если НЕ МассивРезультатов[5].Пустой() И МассивРезультатов[5].Выбрать().Количество() >= 2 Тогда
			ТекстСообщения = НСтр("ru = 'На закладке ""ОС"" значения ставок НСП должны быть одинаковыми.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,, "Объект.ОС", Отказ);	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура КонтрольТабличныхЧастейПоступленияТоваров(ПроверитьТовары, ПроверитьУслуги, ПроверитьОС, Отказ)

	Если ПроверитьТовары Тогда
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Товары.Номенклатура КАК Номенклатура,
			|	Товары.СчетУчета КАК СчетУчета,
			|	Товары.Сумма КАК Сумма,
			|	Товары.БазаНДС КАК БазаНДС,
			|	Товары.СуммаНДС КАК СуммаНДС,
			|	Товары.СуммаНСП КАК СуммаНСП,
			|	Товары.Всего КАК Всего
			|ПОМЕСТИТЬ ВременнаяТаблицаТовары
			|ИЗ
			|	&Товары КАК Товары
			|;
			|
			|////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЕСТЬNULL(ПоступлениеТоваровУслугТовары.Номенклатура, НЕОПРЕДЕЛЕНО) КАК НоменклатураПоступления,
			|	ЕСТЬNULL(ВременнаяТаблицаТовары.Номенклатура, НЕОПРЕДЕЛЕНО) КАК Номенклатура,
			|	ЕСТЬNULL(ВременнаяТаблицаТовары.СчетУчета, НЕОПРЕДЕЛЕНО) КАК СчетУчета
			|ИЗ
			|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
			|		ПОЛНОЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
			|		ПО ПоступлениеТоваровУслугТовары.Номенклатура = ВременнаяТаблицаТовары.Номенклатура
			|		И ПоступлениеТоваровУслугТовары.СчетУчета = ВременнаяТаблицаТовары.СчетУчета
			|ГДЕ
			|	ПоступлениеТоваровУслугТовары.Ссылка = &ДокументОснование
			|	И (ПоступлениеТоваровУслугТовары.Номенклатура ЕСТЬ NULL
			|		ИЛИ ЕСТЬNULL(ПоступлениеТоваровУслугТовары.Сумма, 0) < ЕСТЬNULL(-ВременнаяТаблицаТовары.Сумма, 0)
			|		ИЛИ ЕСТЬNULL(ПоступлениеТоваровУслугТовары.БазаНДС, 0) < ЕСТЬNULL(-ВременнаяТаблицаТовары.БазаНДС, 0)
			|		ИЛИ ЕСТЬNULL(ПоступлениеТоваровУслугТовары.СуммаНДС, 0) < ЕСТЬNULL(-ВременнаяТаблицаТовары.СуммаНДС, 0)
			|		ИЛИ ЕСТЬNULL(ПоступлениеТоваровУслугТовары.СуммаНСП, 0) < ЕСТЬNULL(-ВременнаяТаблицаТовары.СуммаНСП, 0)
			|		ИЛИ ЕСТЬNULL(ПоступлениеТоваровУслугТовары.Всего, 0) < ЕСТЬNULL(-ВременнаяТаблицаТовары.Всего, 0))";
		Запрос.УстановитьПараметр("Товары", 			Товары);
		Запрос.УстановитьПараметр("ДокументОснование", 	ДокументОснование);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.НоменклатураПоступления = Неопределено Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе основания нет товара %1 и счетом учета %2.'"),
									Выборка.Номенклатура, Выборка.СчетУчета);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			Иначе
				ТекстСообщения = СтрШаблон(НСтр("ru = 'На закладке ""Товары"" у номенклатуры %1 с счетом учета %2 корректировка по суммам превышает суммы из основания.'"),
									Выборка.Номенклатура, Выборка.СчетУчета);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	

	Если ПроверитьУслуги Тогда
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Услуги.Номенклатура КАК Номенклатура,
			|	Услуги.Сумма КАК Сумма,
			|	Услуги.БазаНДС КАК БазаНДС,
			|	Услуги.СуммаНДС КАК СуммаНДС,
			|	Услуги.СуммаНСП КАК СуммаНСП,
			|	Услуги.Всего КАК Всего
			|ПОМЕСТИТЬ ВременнаяТаблицаУслуги
			|ИЗ
			|	&Услуги КАК Услуги
			|;
			|
			|////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЕСТЬNULL(ПоступлениеТоваровУслугУслуги.Номенклатура, НЕОПРЕДЕЛЕНО) КАК НоменклатураПоступления,
			|	ЕСТЬNULL(ВременнаяТаблицаУслуги.Номенклатура, НЕОПРЕДЕЛЕНО) КАК Номенклатура
			|ИЗ
			|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
			|		ПОЛНОЕ СОЕДИНЕНИЕ ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги
			|		ПО ПоступлениеТоваровУслугУслуги.Номенклатура = ВременнаяТаблицаУслуги.Номенклатура
			|ГДЕ
			|	ПоступлениеТоваровУслугУслуги.Ссылка = &ДокументОснование
			|	И (ПоступлениеТоваровУслугУслуги.Номенклатура ЕСТЬ NULL
			|		ИЛИ ЕСТЬNULL(ПоступлениеТоваровУслугУслуги.Сумма, 0) < ЕСТЬNULL(-ВременнаяТаблицаУслуги.Сумма, 0)
			|		ИЛИ ЕСТЬNULL(ПоступлениеТоваровУслугУслуги.БазаНДС, 0) < ЕСТЬNULL(-ВременнаяТаблицаУслуги.БазаНДС, 0)
			|		ИЛИ ЕСТЬNULL(ПоступлениеТоваровУслугУслуги.СуммаНДС, 0) < ЕСТЬNULL(-ВременнаяТаблицаУслуги.СуммаНДС, 0)
			|		ИЛИ ЕСТЬNULL(ПоступлениеТоваровУслугУслуги.СуммаНСП, 0) < ЕСТЬNULL(-ВременнаяТаблицаУслуги.СуммаНСП, 0)
			|		ИЛИ ЕСТЬNULL(ПоступлениеТоваровУслугУслуги.Всего, 0) < ЕСТЬNULL(-ВременнаяТаблицаУслуги.Всего, 0))";
		Запрос.УстановитьПараметр("Услуги", 			Услуги);
		Запрос.УстановитьПараметр("ДокументОснование", 	ДокументОснование);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.НоменклатураПоступления = Неопределено Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе основания нет услуги %1.'"), Выборка.Номенклатура);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			Иначе
				ТекстСообщения = СтрШаблон(НСтр("ru = 'На закладке ""Услуги"" у номенклатуры %1 корректировка по суммам превышает суммы из основания.'"),
									Выборка.Номенклатура);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
	Если ПроверитьОС Тогда
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ОС.ОсновноеСредство КАК ОсновноеСредство,
			|	ОС.Сумма КАК Сумма,
			|	ОС.БазаНДС КАК БазаНДС,
			|	ОС.СуммаНДС КАК СуммаНДС,
			|	ОС.СуммаНСП КАК СуммаНСП,
			|	ОС.Всего КАК Всего
			|ПОМЕСТИТЬ ВременнаяТаблицаОС
			|ИЗ
			|	&ОС КАК ОС
			|;
			|
			|////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЕСТЬNULL(ПоступлениеТоваровУслугОС.ОсновноеСредство, НЕОПРЕДЕЛЕНО) КАК ОсновноеСредствоПоступления,
			|	ЕСТЬNULL(ВременнаяТаблицаОС.ОсновноеСредство, НЕОПРЕДЕЛЕНО) КАК ОсновноеСредство
			|ИЗ
			|	Документ.ПоступлениеТоваровУслуг.ОС КАК ПоступлениеТоваровУслугОС
			|		ПОЛНОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
			|		ПО ПоступлениеТоваровУслугОС.ОсновноеСредство = ВременнаяТаблицаОС.ОсновноеСредство
			|ГДЕ
			|	ПоступлениеТоваровУслугОС.Ссылка = &ДокументОснование
			|	И (ПоступлениеТоваровУслугОС.ОсновноеСредство ЕСТЬ NULL
			|		ИЛИ ЕСТЬNULL(ПоступлениеТоваровУслугОС.Сумма, 0) < ЕСТЬNULL(-ВременнаяТаблицаОС.Сумма, 0)
			|		ИЛИ ЕСТЬNULL(ПоступлениеТоваровУслугОС.БазаНДС, 0) < ЕСТЬNULL(-ВременнаяТаблицаОС.БазаНДС, 0)
			|		ИЛИ ЕСТЬNULL(ПоступлениеТоваровУслугОС.СуммаНДС, 0) < ЕСТЬNULL(-ВременнаяТаблицаОС.СуммаНДС, 0)
			|		ИЛИ ЕСТЬNULL(ПоступлениеТоваровУслугОС.СуммаНСП, 0) < ЕСТЬNULL(-ВременнаяТаблицаОС.СуммаНСП, 0)
			|		ИЛИ ЕСТЬNULL(ПоступлениеТоваровУслугОС.Всего, 0) < ЕСТЬNULL(-ВременнаяТаблицаОС.Всего, 0))";
		Запрос.УстановитьПараметр("ОС", 				ОС);
		Запрос.УстановитьПараметр("ДокументОснование", 	ДокументОснование);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ОсновноеСредствоПоступления = Неопределено Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе основания нет ОС %1.'"), Выборка.ОсновноеСредство);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			Иначе
				ТекстСообщения = СтрШаблон(НСтр("ru = 'На закладке ""Основные средства"" у ОС %1 корректировка по суммам превышает суммы из основания.'"),
									Выборка.ОсновноеСредство);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры

Процедура КонтрольТабличныхЧастейПоступленияИзПереработки(Отказ)

	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Услуги.Номенклатура КАК Номенклатура,
		|	Услуги.Сумма КАК Сумма,
		|	Услуги.БазаНДС КАК БазаНДС,
		|	Услуги.СуммаНДС КАК СуммаНДС,
		|	Услуги.СуммаНСП КАК СуммаНСП,
		|	Услуги.Всего КАК Всего
		|ПОМЕСТИТЬ ВременнаяТаблицаУслуги
		|ИЗ
		|	&Услуги КАК Услуги
		|;
		|
		|////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ПоступлениеИзПереработкиУслуги.Номенклатура, НЕОПРЕДЕЛЕНО) КАК НоменклатураПоступления,
		|	ЕСТЬNULL(ВременнаяТаблицаУслуги.Номенклатура, НЕОПРЕДЕЛЕНО) КАК Номенклатура
		|ИЗ
		|	Документ.ПоступлениеИзПереработки.Услуги КАК ПоступлениеИзПереработкиУслуги
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги
		|		ПО ПоступлениеИзПереработкиУслуги.Номенклатура = ВременнаяТаблицаУслуги.Номенклатура
		|ГДЕ
		|	ПоступлениеИзПереработкиУслуги.Ссылка = &ДокументОснование
		|	И (ПоступлениеИзПереработкиУслуги.Номенклатура ЕСТЬ NULL
		|		ИЛИ ЕСТЬNULL(ПоступлениеИзПереработкиУслуги.Сумма, 0) < ЕСТЬNULL(-ВременнаяТаблицаУслуги.Сумма, 0)
		|		ИЛИ ЕСТЬNULL(ПоступлениеИзПереработкиУслуги.БазаНДС, 0) < ЕСТЬNULL(-ВременнаяТаблицаУслуги.БазаНДС, 0)
		|		ИЛИ ЕСТЬNULL(ПоступлениеИзПереработкиУслуги.СуммаНДС, 0) < ЕСТЬNULL(-ВременнаяТаблицаУслуги.СуммаНДС, 0)
		|		ИЛИ ЕСТЬNULL(ПоступлениеИзПереработкиУслуги.СуммаНСП, 0) < ЕСТЬNULL(-ВременнаяТаблицаУслуги.СуммаНСП, 0)
		|		ИЛИ ЕСТЬNULL(ПоступлениеИзПереработкиУслуги.Всего, 0) < ЕСТЬNULL(-ВременнаяТаблицаУслуги.Всего, 0))";
	Запрос.УстановитьПараметр("Услуги", 			Услуги);
	Запрос.УстановитьПараметр("ДокументОснование", 	ДокументОснование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.НоменклатураПоступления = Неопределено Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе основания нет услуги %1.'"), Выборка.Номенклатура);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		Иначе
			ТекстСообщения = СтрШаблон(НСтр("ru = 'На закладке ""Услуги"" у номенклатуры %1 корректировка по суммам превышает суммы из основания.'"),
								Выборка.Номенклатура);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли