#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка реквизитов формы.	
	ДатаДокумента = Объект.Дата;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаФормированияПроводок) Тогда
		Объект.ДатаФормированияПроводок = ДатаДокумента;	
	КонецЕсли;	
	
	ПризнакСтраны = Объект.Контрагент.ПризнакСтраны;
	
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();	
	
	Если Параметры.Ключ.Пустая() Тогда
		УстановитьНачальныеСвойстваСубконтоТаблицы();
	КонецЕсли;	

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		СтруктураКурсКратность 	= РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ДоговорКонтрагента.ВалютаРасчетов, ДатаДокумента);	
		КурсНБКР      			= ?(СтруктураКурсКратность.Курс = 0, 1, СтруктураКурсКратность.Курс);
		КратностьНБКР 			= ?(СтруктураКурсКратность.Кратность = 0, 1, СтруктураКурсКратность.Кратность);
	КонецЕсли;
	
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	УстановитьФункциональныеОпцииФормы();
	УстановитьПараметрыВыбора();
	УстановитьВидимостьДоступностьЭлементов();
	
	УстановитьУсловноеОформление();

	Если ПолучитьФункциональнуюОпцию("УказыватьТочностьЦены") Тогда 
		ЗаполнитьСписокВыбораТочностьЦены();	
	КонецЕсли;	

	Если БухгалтерскийУчетВызовСервераПовтИсп.ВедетсяУчетЭСФ() Тогда
		ПолучитьПредставлениеЭСФ();
	КонецЕсли;	
	
	// РаботаСФормами
	РаботаСФормамиСервер.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УстановитьНачальныеСвойстваСубконтоТаблицы();
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом 
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьТекущуюСтраницу();
	ОбновитьПодвалФормы();
	
	УстановитьФорматЦены();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "МодифицированДоговораКонтрагента"
		И Параметр = Объект.ДоговорКонтрагента Тогда
		ОбработатьИзменениеДоговора(Истина);
		
	ИначеЕсли ИмяСобытия = "ЭлектронныйСчетФактураПолученныйПослеЗаписи"
		И НЕ Параметр.Найти(Объект.Ссылка) = Неопределено Тогда  
		
		Если БухгалтерскийУчетВызовСервераПовтИсп.ВедетсяУчетЭСФ() Тогда
			ПолучитьПредставлениеЭСФ();
		КонецЕсли;

	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);	
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	
	УстановитьНачальныеСвойстваСубконтоТаблицы();
	
	// РаботаСФормами
	РаботаСФормамиСервер.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчета.ПослеЗаписиНаСервере(ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением, Объект.ВалютаДокумента);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);	
	УстановитьФункциональныеОпцииФормы();
	ОбработатьИзменениеУчетнойПолитики();
	ОбработатьИзменениеДоговора();  
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Объект.Номер = "";

	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
	УстановитьФункциональныеОпцииФормы();	
	ОбработатьИзменениеУчетнойПолитики();
	
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент, Объект.Организация);
	Объект.ДоговорКонтрагента = СтруктураДанные.ДоговорКонтрагента;
	ОбработатьИзменениеДоговора();
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоТаблицыПриИзмененииОрганизации(
		Объект.Услуги,
		ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
	Если БухгалтерскийУчетВызовСервераПовтИсп.ВедетсяУчетЭСФ() Тогда
		ПолучитьПредставлениеЭСФ();
	КонецЕсли;
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении флажка Безналичный расчет.
//
&НаКлиенте
Процедура БезналичныйРасчетПриИзменении(Элемент)
	
	Если Объект.БезналичныйРасчет Тогда
		УстановитьЗначениеСтавкиНСП("Товары");
		УстановитьЗначениеСтавкиНСП("Услуги");
		УстановитьЗначениеСтавкиНСП("ОС");
	КонецЕсли;	
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект, "Товары", ПараметрыРасчета);
		
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект, "Услуги", ПараметрыРасчета);
		
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект, "ОС", ПараметрыРасчета);
		
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл	 
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);	
	КонецЦикла;	
		
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Контрагент.
//
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент, Объект.Организация);
	
	Объект.ДоговорКонтрагента = СтруктураДанные.ДоговорКонтрагента;
	ПризнакСтраны = СтруктураДанные.ПризнакСтраны;
	
	Если СтруктураДанные.СЭЗ Тогда
		Объект.ЗначениеСтавкиНДС = 0;	
	КонецЕсли;	
	
	// Изменение признака страны
	Если ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС") Тогда
		Объект.БезналичныйРасчет = Истина;
		// Ставки
		УстановитьЗначениеСтавкиНСП("Товары");
		УстановитьЗначениеСтавкиНСП("Услуги");
		УстановитьЗначениеСтавкиНСП("ОС");
	ИначеЕсли ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ИмпортЭкспорт") Тогда	
		Объект.БезналичныйРасчет = Истина;
		// Ставки
		Объект.ЗначениеСтавкиНДС = 0;
		УстановитьЗначениеСтавкиНСП("Товары");
		УстановитьЗначениеСтавкиНСП("Услуги");
		УстановитьЗначениеСтавкиНСП("ОС");
	Иначе // КР или не заполнен Контрагент
		Объект.БезналичныйРасчет = Ложь;
		Объект.ПоступлениеОтНерезидента = Ложь;
	КонецЕсли;	
	
	ОбработатьИзменениеДоговора();
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Договор контрагента.
//
&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ОбработатьИзменениеДоговора();
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Основание.
//
&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Объект.Товары.Очистить();
		Объект.Услуги.Очистить();
		Объект.ОС.Очистить();
		
		ЗаполнитьПоДокументуОснования();
	КонецЕсли;	
	
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент, Объект.Организация);
	ПризнакСтраны = СтруктураДанные.ПризнакСтраны;
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеСтавкиНДСПриИзменении(Элемент)
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект, "Товары", ПараметрыРасчета);
		
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект, "Услуги", ПараметрыРасчета);
		
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
		
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект, "ОС", ПараметрыРасчета);
		
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл	 
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);	
	КонецЦикла;
		
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	ОбновитьПодвалФормы();	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Ставка НСП.
//
&НаКлиенте
Процедура ЗначениеСтавкиНСППриИзменении(Элемент)
	
	МассивТабличныхЧастей = Новый Массив();
	МассивТабличныхЧастей.Добавить("Товары");
	МассивТабличныхЧастей.Добавить("Услуги");
	
	Для Каждого ТабличнаяЧасть Из МассивТабличныхЧастей Цикл
		Для Каждого СтрокаТабличнойЧасти Из Объект[ТабличнаяЧасть] Цикл
			СтрокаТабличнойЧасти.ЗначениеСтавкиНСП = Объект.ЗначениеСтавкиНСП;
		КонецЦикла;
	КонецЦикла;	
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект, "Товары", ПараметрыРасчета);
		
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект, "Услуги", ПараметрыРасчета);
		
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл	 
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(
			СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(
			СтрокаТабличнойЧасти, ПараметрыРасчета);	
	КонецЦикла;	
		
	УстановитьВидимостьДоступностьЭлементов();
	ОбновитьПодвалФормы();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Ставка НСП для ОС.
//
&НаКлиенте
Процедура ЗначениеСтавкиНСПДляОСПриИзменении(Элемент)
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();	
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл
		СтрокаТабличнойЧасти.ЗначениеСтавкиНСП = Объект.ЗначениеСтавкиНСПДляОС;
	КонецЦикла;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект, "ОС", ПараметрыРасчета);
		
КонецПроцедуры

&НаКлиенте
Процедура КурсПриИзменении(Элемент)	
	РассчитатьСуммыИНалоги();
КонецПроцедуры

&НаКлиенте
Процедура КратностьПриИзменении(Элемент)
	РассчитатьСуммыИНалоги();	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля выбора Точность цены.
//
&НаКлиенте
Процедура ТочностьЦеныПриИзменении(Элемент)
	
	УстановитьФорматЦены();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеЭСФНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ТекстСообщения = НСтр("ru = 'Документ еще не записан.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	ЭСФКлиент.ПредставлениеЭСФНажатие(ПредставлениеЭСФ, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПоступлениеОтНерезидентаПриИзменении(Элемент)
	
	УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Процедура - обработчик события ПриНачалеРедактирования таблицы Товары.
//
&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Копирование Тогда 
		ОбновитьПодвалФормы();
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПослеУдаления таблицы Товары.
//
&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Всего.
//
&НаКлиенте
Процедура ТоварыВсегоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;

	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуИБазуНДССтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, ПараметрыРасчета);	
		
	// Расчет налогов	      
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, ПараметрыРасчета);

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);	

	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода БазаНДС.
//
&НаКлиенте
Процедура ТоварыБазаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ОбновитьПодвалФормы();		
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СуммаНДС.
//
&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	Если ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС") Тогда
		
		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
		
		ПараметрыРасчета = ПодготовитьПараметрыРасчета();
		
		// Расчет суммы
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНСПСтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЕсли;
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ЗначениеСтавкиНСП.
//
&НаКлиенте
Процедура ТоварыЗначениеСтавкиНСППриИзменении(Элемент)
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуИБазуНДССтрокиТабличнойЧастиПоступление(СтрокаТабличнойЧасти, ПараметрыРасчета);
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(СтрокаТабличнойЧасти, ПараметрыРасчета);
	// Расчет цены.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СуммаНСП.
//
&НаКлиенте
Процедура ТоварыСуммаНСППриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.Всего - СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаНСП;	
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.ЗначениеСтавкиНСП = Объект.ЗначениеСтавкиНСП;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

// Процедура - обработчик события ПередНачаломИзменения таблицы Товары.
//
&НаКлиенте
Процедура УслугиПередНачаломИзменения(Элемент, Отказ)
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоСтроки(
		ЭтотОбъект, ТекущиеДанные, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования таблицы Услуги.
//
&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Копирование Тогда 
		ОбновитьПодвалФормы();
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПослеУдаления таблицы Услуги.
//
&НаКлиенте
Процедура УслугиПослеУдаления(Элемент)
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Всего.
//
&НаКлиенте
Процедура УслугиВсегоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуИБазуНДССтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, ПараметрыРасчета);	
		
	// Расчет налогов	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, ПараметрыРасчета);

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);	

	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, ПараметрыРасчета);

	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода БазаНДС.
//
&НаКлиенте
Процедура УслугиБазаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, ПараметрыРасчета);

	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СуммаНДС.
//
&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)
	
	Если ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС") Тогда
		СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
		
		ПараметрыРасчета = ПодготовитьПараметрыРасчета();
		
		// Расчет суммы
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНСПСтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЕсли;
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ЗначениеСтавкиНСП.
//
&НаКлиенте
Процедура УслугиЗначениеСтавкиНСППриИзменении(Элемент)
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуИБазуНДССтрокиТабличнойЧастиПоступление(СтрокаТабличнойЧасти, ПараметрыРасчета);
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(СтрокаТабличнойЧасти, ПараметрыРасчета);
	// Расчет цены.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНСППриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.Всего - СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаНСП;	
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СчетРасходов.
//
&НаКлиенте
Процедура УслугиСчетРасходовПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСчета(
		ЭтотОбъект, ТекущиеДанные, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода УслугиСубконто1.
//
&НаКлиенте
Процедура УслугиСубконто1ПриИзменении(Элемент)
	ПриИзмененииСубконто(1);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода УслугиСубконто2.
//
&НаКлиенте
Процедура УслугиСубконто2ПриИзменении(Элемент)
	ПриИзмененииСубконто(2);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода УслугиСубконто3.
//
&НаКлиенте
Процедура УслугиСубконто3ПриИзменении(Элемент)
	ПриИзмененииСубконто(3);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	СтрокаТабличнойЧасти.ЗначениеСтавкиНСП = Объект.ЗначениеСтавкиНСП;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОС

// Процедура - обработчик события ПриНачалеРедактирования таблицы ОС.
//
&НаКлиенте
Процедура ОСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Копирование Тогда 
		ОбновитьПодвалФормы();
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПослеУдаления таблицы ОС.
//
&НаКлиенте
Процедура ОСПослеУдаления(Элемент)
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Всего.
//
&НаКлиенте
Процедура ОСВсегоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуИБазуНДССтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, ПараметрыРасчета);	
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, ПараметрыРасчета);

	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура ОССуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода БазаНДС.
//
&НаКлиенте
Процедура ОСБазаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СуммаНДС.
//
&НаКлиенте
Процедура ОССуммаНДСПриИзменении(Элемент)
	
	Если ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС") Тогда
		СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
		
		ПараметрыРасчета = ПодготовитьПараметрыРасчета();
		
		// Расчет суммы
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНСПСтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЕсли;
	
	ОбновитьПодвалФормы();	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ЗначениеСтавкиНСП.
//
&НаКлиенте
Процедура ОСЗначениеСтавкиНСППриИзменении(Элемент)
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуИБазуНДССтрокиТабличнойЧастиПоступление(СтрокаТабличнойЧасти, ПараметрыРасчета);
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(СтрокаТабличнойЧасти, ПараметрыРасчета);
		
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОССуммаНСППриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.Всего - СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаНСП;	
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОС.
//
&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	СтрокаТабличнойЧасти.ЗначениеСтавкиНСП = Объект.ЗначениеСтавкиНСПДляОС;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость и доступность элементов.
//
&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()
	
	ПризнакЗачетаНДСП = ДанныеУчетнойПолитики.УказыватьПризнакЗачетаНДСПриПоступлении;
	ЭтоКонтрагентСЭЗ = Объект.Контрагент.СЭЗ;
	
	Если ПризнакСтраны = Перечисления.ПризнакиСтраны.ЕАЭС Тогда
		// Ставки
		Элементы.ЗначениеСтавкиНДС.Видимость = Истина;	
		// Курс прихода
		Если Объект.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда 
			Элементы.Курс.Видимость = Ложь;
			Элементы.Кратность.Видимость = Ложь;
		Иначе
			Элементы.Курс.Видимость = Истина;
			Если Объект.Кратность > 1 Тогда
				Элементы.Кратность.Видимость = Истина;
			Иначе
				Элементы.Кратность.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;		
		// Сумма и Всего
		Элементы.ТоварыСумма.Видимость = Истина;
		Элементы.ТоварыВсего.Заголовок = "Всего";		
		// Зачет НДС
		Элементы.ТоварыЗачетНДС.Видимость = ПризнакЗачетаНДСП;
		Элементы.УслугиЗачетНДС.Видимость = ПризнакЗачетаНДСП;
		Элементы.ОСЗачетНДС.Видимость = ПризнакЗачетаНДСП;
		// База НДС
		Элементы.ТоварыБазаНДС.Видимость = Истина;
		Элементы.УслугиБазаНДС.Видимость = Истина;
		Элементы.ОСБазаНДС.Видимость = Истина;
		Элементы.ИтогБазаНДС.Видимость = Истина;
		
		Элементы.ПоступлениеОтНерезидента.Видимость = Истина;
		
	ИначеЕсли ПризнакСтраны = Перечисления.ПризнакиСтраны.ИмпортЭкспорт Тогда
		
		// Сумма и Всего
		Элементы.ТоварыСумма.Видимость = Ложь;
		Элементы.ТоварыВсего.Заголовок = "Сумма";
		// Ставки
		Элементы.ЗначениеСтавкиНДС.Видимость = Ложь;
		// Курс прихода
		Если Объект.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда 
			Элементы.Курс.Видимость = Ложь;
			Элементы.Кратность.Видимость = Ложь;
		Иначе
			Элементы.Курс.Видимость = Истина;
			Если Объект.Кратность > 1 Тогда
				Элементы.Кратность.Видимость = Истина;
			Иначе
				Элементы.Кратность.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
		// Зачет НДС
		Элементы.ТоварыЗачетНДС.Видимость = Ложь;
		Элементы.УслугиЗачетНДС.Видимость = Ложь;
		Элементы.ОСЗачетНДС.Видимость = Ложь;
		// База НДС
		Элементы.ТоварыБазаНДС.Видимость = Ложь;
		Элементы.УслугиБазаНДС.Видимость = Ложь;
		Элементы.ОСБазаНДС.Видимость = Ложь;
		Элементы.ИтогБазаНДС.Видимость = Ложь;
		
		Элементы.ПоступлениеОтНерезидента.Видимость = Истина;
		
	Иначе // КР или не заполнен Контрагент			
		// Ставки
		Элементы.ЗначениеСтавкиНДС.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС И НЕ ЭтоКонтрагентСЭЗ;	
		// Сумма
		Элементы.ТоварыСумма.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС И Объект.ЗначениеСтавкиНДС > 0;
		Если Элементы.ТоварыСумма.Видимость Тогда
			Элементы.ТоварыВсего.Заголовок = "Всего";
		Иначе
			Элементы.ТоварыВсего.Заголовок = "Сумма";
		КонецЕсли;			
		// Курс прихода
		Элементы.Курс.Видимость = Ложь;
		Элементы.Кратность.Видимость = Ложь;
		// Зачет НДС
		Элементы.ТоварыЗачетНДС.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС И Объект.ЗначениеСтавкиНДС > 0 И ПризнакЗачетаНДСП;
		Элементы.УслугиЗачетНДС.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС И Объект.ЗначениеСтавкиНДС > 0 И ПризнакЗачетаНДСП;
		Элементы.ОСЗачетНДС.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС И Объект.ЗначениеСтавкиНДС > 0 И ПризнакЗачетаНДСП;
		// База НДС
		Элементы.ТоварыБазаНДС.Видимость = Ложь;
		Элементы.УслугиБазаНДС.Видимость = Ложь;
		Элементы.ОСБазаНДС.Видимость = Ложь;
		Элементы.ИтогБазаНДС.Видимость = Ложь;
		
		Элементы.ПоступлениеОтНерезидента.Видимость = Ложь;
	КонецЕсли;	
	
	// ИСКЛЮЧЕНИЕ - если значение ставки НДС заполнено,
	// но видимость отлкючена, то видимость возвращается,
	// чтобы пользователь понял что это ошибка и решил проблему на свое усмотрение.
	Если НЕ Элементы.ЗначениеСтавкиНДС.Видимость
		И Объект.ЗначениеСтавкиНДС <> 0 Тогда
		Элементы.ЗначениеСтавкиНДС.Видимость = НЕ ЭтоКонтрагентСЭЗ;
	КонецЕсли;
	
	// Видимость сумм НДС зависит от значения НДС.
	Если Объект.ЗначениеСтавкиНДС = 0 Тогда 
		Элементы.ТоварыСуммаНДС.Видимость = Ложь;
		Элементы.УслугиСуммаНДС.Видимость = Ложь;
		Элементы.ОССуммаНДС.Видимость = Ложь;
		Элементы.ИтогСуммаНДС.Видимость = Ложь;
	Иначе 
		Элементы.ТоварыСуммаНДС.Видимость = Истина;
		Элементы.УслугиСуммаНДС.Видимость = Истина;
		Элементы.ОССуммаНДС.Видимость = Истина;
		Элементы.ИтогСуммаНДС.Видимость = Истина;
	КонецЕсли;	
	
 	// Видимость НСП
	Если Объект.БезналичныйРасчет
		Или НЕ ДанныеУчетнойПолитики.ПлательщикНСП Тогда
		
		Элементы.ТоварыЗначениеСтавкиНСП.Видимость 	= Ложь;
		Элементы.ТоварыСуммаНСП.Видимость 			= Ложь;
		Элементы.УслугиЗначениеСтавкиНСП.Видимость 	= Ложь;
		Элементы.УслугиСуммаНСП.Видимость 			= Ложь;
		Элементы.ОСЗначениеСтавкиНСП.Видимость 		= Ложь;
		Элементы.ОССуммаНСП.Видимость 				= Ложь;
		Элементы.ИтогСуммаНСП.Видимость 			= Ложь;
		Элементы.ЗначениеСтавкиНСП.Видимость 		= Ложь;
		Элементы.ЗначениеСтавкиНСПДляОС.Видимость 	= Ложь;
		
	Иначе 
		ВидимостьНСП = ПризнакСтраны = Перечисления.ПризнакиСтраны.КР ИЛИ Объект.ПоступлениеОтНерезидента;
		
		Элементы.ТоварыЗначениеСтавкиНСП.Видимость 	= ВидимостьНСП;
		Элементы.ТоварыСуммаНСП.Видимость 			= ВидимостьНСП;
		Элементы.УслугиЗначениеСтавкиНСП.Видимость 	= ВидимостьНСП;
		Элементы.УслугиСуммаНСП.Видимость 			= ВидимостьНСП;
		Элементы.ОСЗначениеСтавкиНСП.Видимость 		= ВидимостьНСП;
		Элементы.ОССуммаНСП.Видимость 				= ВидимостьНСП;
		Элементы.ИтогСуммаНСП.Видимость 			= ВидимостьНСП;
		Элементы.ЗначениеСтавкиНСП.Видимость 		= ВидимостьНСП;
		Элементы.ЗначениеСтавкиНСПДляОС.Видимость 	= ВидимостьНСП;
	КонецЕсли;		
	
	Если ПризнакСтраны = Перечисления.ПризнакиСтраны.ЕАЭС Тогда 
		Элементы.ПредставлениеЭСФ.Видимость = Ложь;
	Иначе 
		Элементы.ПредставлениеЭСФ.Видимость = Истина;
	КонецЕсли;	
КонецПроцедуры 

// Процедура настройки условного оформления форм и динамических списков .
//
&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// Таблица Услуги.
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("УслугиСубконто1");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Услуги.Субконто1Доступность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("УслугиСубконто2");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Услуги.Субконто2Доступность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("УслугиСубконто3");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Услуги.Субконто3Доступность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

// Процедура устанавливает текущую страницу при открытии формы.
//
&НаКлиенте
Процедура УстановитьТекущуюСтраницу()
	Если Объект.Товары.Количество() > 0 Тогда 
		Возврат;	
	ИначеЕсли Объект.Услуги.Количество() > 0 Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаУслуги;
	ИначеЕсли Объект.ОС.Количество() > 0 Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаОсновныеСредства;
	КонецЕсли;	
КонецПроцедуры

// Процедура устанавливает функциональные опции формы документа.
//
&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма, Объект.Организация, ДатаДокумента);
КонецПроцедуры

// Процедура - Установить параметры выбора
//
&НаСервере
Процедура УстановитьПараметрыВыбора()
	// Основные средства.
	СчетаУчетаОсновныхСредств = БухгалтерскийУчетСервер.СчетаУчетаОсновныхСредств();
	СчетаУчетаНематериальныхАктивов = БухгалтерскийУчетСервер.СчетаУчетаНематериальныхАктивов();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУчетаОсновныхСредств, СчетаУчетаНематериальныхАктивов); 
	ФиксированныйМассивСчетов = Новый ФиксированныйМассив(СчетаУчетаОсновныхСредств);
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", ФиксированныйМассивСчетов);
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.ОССчетУчета.ПараметрыВыбора = НовыеПараметры;
	
	// Товары.
	СчетаУчетаТоваров = БухгалтерскийУчетСервер.СчетаУчетаТоваров();
	СчетаУчетаМБП = БухгалтерскийУчетСервер.СчетаУчетаМБП();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУчетаТоваров, СчетаУчетаМБП); 
	ФиксированныйМассивСчетов = Новый ФиксированныйМассив(СчетаУчетаТоваров);
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", ФиксированныйМассивСчетов);
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.ТоварыСчетУчета.ПараметрыВыбора = НовыеПараметры;

КонецПроцедуры // УстановитьПараметрыВыбора()

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением, ВалютаДокумента)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением);
	ВалютаКурсКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДатаНовая);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат);
		
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		ВалютаКурсКратность);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура - Установить пиктограмму комментария.
//
&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

// Процедура устанавлнивает значение ставки НСП в табличной части
//
// Параметры:
//  ИмяТабличнойЧасти	 - Строка	- Имя табличной части, в которой нужно изменить значение ставки НСП
//  ЗначениеСтавкиНСП	 - Число	- Новое значение ставки НСП
//
&НаКлиенте
Процедура УстановитьЗначениеСтавкиНСП(ИмяТабличнойЧасти, ЗначениеСтавкиНСП = 0)
	Для Каждого СтрокаТабличнойЧасти Из Объект[ИмяТабличнойЧасти] Цикл 
		СтрокаТабличнойЧасти.ЗначениеСтавкиНСП = ЗначениеСтавкиНСП;	
	КонецЦикла;	
КонецПроцедуры // УстановитьЗначениеСтавкиНСП()

// Получает набор данных с сервера для процедуры КонтрагентПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Контрагент, Организация)
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Контрагент, Организация);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ДоговорКонтрагента",
		ДоговорПоУмолчанию);
	
	СтруктураДанные.Вставить(
		"ПризнакСтраны",
		Контрагент.ПризнакСтраны);
		
	СтруктураДанные.Вставить(
		"СЭЗ",
		Контрагент.СЭЗ);
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

// Получает договор по умолчанию
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация)
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ВидыДоговораДляДокумента(Документ);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(Период, Контрагент, ДоговорКонтрагента, ЗначенияТекущихСтавокНДСиНСП)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		ДоговорКонтрагента.ВалютаРасчетов);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаРасчетов, Период));
	
	СтруктураДанные.Вставить(
		"СуммаВключаетНалоги",
		ДоговорКонтрагента.СуммаВключаетНалоги);
	
	СчетаУчета = БухгалтерскийУчетСервер.ПолучитьСчетаРасчетовСКонтрагентом(ДоговорКонтрагента.Организация, ДоговорКонтрагента.Владелец, ДоговорКонтрагента);
	СтруктураДанные.Вставить(
		"СчетРасчетов",
		СчетаУчета.СчетРасчетовПоставщика);
		
	ЗначенияСтавокНДСиНСП = УчетНДС.ПолучитьЗначенияСтавокНДСиНСП(Период, ДоговорКонтрагента, ЗначенияТекущихСтавокНДСиНСП); 
	
	СтруктураДанные.Вставить(
		"ЗначениеСтавкиНДС",
		ЗначенияСтавокНДСиНСП.ЗначениеСтавкиНДС);
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

&НаКлиенте
Процедура ОбработатьИзменениеДоговора(МодифицированДоговор = Ложь)
	
	ЗначенияТекущихСтавокНДСиНСП = Новый Структура;
	ЗначенияТекущихСтавокНДСиНСП.Вставить("ЗначениеСтавкиНДС", Объект.ЗначениеСтавкиНДС);
	
	СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(ДатаДокумента, Объект.Контрагент, Объект.ДоговорКонтрагента, ЗначенияТекущихСтавокНДСиНСП);

	// Обработка изменения валюты
	Объект.ВалютаДокумента = СтруктураДанные.ВалютаРасчетов;
	Объект.Курс      = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
	Объект.Кратность = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
	
	КурсНБКР      = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
	КратностьНБКР = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
	
	// Обработка изменения налогообложения
	Если ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС") Тогда
		Объект.СуммаВключаетНалоги = Истина;
	Иначе	
		Объект.СуммаВключаетНалоги 	= Ложь;
	КонецЕсли;
	
	Если ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ИмпортЭкспорт") ИЛИ Объект.НДСНеПодтвержден Тогда		
		Объект.ЗначениеСтавкиНДС = 0;
	Иначе
		Объект.ЗначениеСтавкиНДС = ?(ДанныеУчетнойПолитики.ПлательщикНДС, СтруктураДанные.ЗначениеСтавкиНДС, 0);
	КонецЕсли;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	// Обработка изменения отражения в учете
	Объект.СчетРасчетов = СтруктураДанные.СчетРасчетов;
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект, "Товары", ПараметрыРасчета);
		
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект, "Услуги", ПараметрыРасчета);
		
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект, "ОС", ПараметрыРасчета);

	// Расчет цены.
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЦикла;
	
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеУчетнойПолитики()
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);	
	
	Если НЕ ДанныеУчетнойПолитики.ПлательщикНДС Тогда
		Объект.ЗначениеСтавкиНДС = 0;
	КонецЕсли;
	
	Если НЕ ДанныеУчетнойПолитики.ПлательщикНСП Тогда
		УстановитьЗначениеСтавкиНСП("Товары");
		УстановитьЗначениеСтавкиНСП("Услуги");
		УстановитьЗначениеСтавкиНСП("ОС");
	КонецЕсли;
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура рассчитывает итоги для подвала формы.
//
&НаКлиенте
Процедура ОбновитьПодвалФормы()
	
	ИтогВсего 	 = Объект.Товары.Итог("Всего") + Объект.Услуги.Итог("Всего") + Объект.ОС.Итог("Всего");
	ИтогБазаНДС  = Объект.Товары.Итог("БазаНДС") + Объект.Услуги.Итог("БазаНДС") + Объект.ОС.Итог("БазаНДС");
	ИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС") + Объект.ОС.Итог("СуммаНДС");
	ИтогСуммаНСП = Объект.Товары.Итог("СуммаНСП") + Объект.Услуги.Итог("СуммаНСП") + Объект.ОС.Итог("СуммаНСП");
	
КонецПроцедуры // ОбновитьПодвалФормы()

// Процедура заполняет список выбора Точность цены
//
&НаСервере
Процедура ЗаполнитьСписокВыбораТочностьЦены()

	Элементы.ТочностьЦены.СписокВыбора.Очистить();

	ЗначенияТочностиЦены = Ценообразование.ЗначенияТочностиЦены();
	Для Каждого ЗначениеТочностиЦены Из ЗначенияТочностиЦены Цикл 
		Элементы.ТочностьЦены.СписокВыбора.Добавить(ЗначениеТочностиЦены.Значение, ЗначениеТочностиЦены.Представление);
	КонецЦикла;	

КонецПроцедуры // ЗаполнитьСписокВыбораТочностьЦены()

// Процедура устанавливает формат и формат редактирования элементов "Цена" в ТЧ "Товары" и "Услуги"
//
&НаКлиенте
Процедура УстановитьФорматЦены()

	ФорматЦены = ЦенообразованиеКлиент.ФорматЦены(Объект.ТочностьЦены);
	
	Элементы.ТоварыЦена.ФорматРедактирования = ФорматЦены;
	Элементы.ТоварыЦена.Формат = ФорматЦены;

	Элементы.УслугиЦена.ФорматРедактирования = ФорматЦены;
	Элементы.УслугиЦена.Формат = ФорматЦены;

	Элементы.Товары.Обновить();
	Элементы.Услуги.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьПредставлениеЭСФ()
	СведенияОбЭСФ = ЭСФСервер.СведенияОбЭСФПоДокументуОснованию(Объект.Организация, Объект.Ссылка, НСтр("ru = 'Создать новый ЭСФ (полученный)'"));
	ПредставлениеЭСФ = СведенияОбЭСФ.ПредставлениеЭСФ;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммыИНалоги()

	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуИБазуНДССтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, ПараметрыРасчета);
			
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, ПараметрыРасчета);	
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуИБазуНДССтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, ПараметрыРасчета);
			
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЦикла;		
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуИБазуНДССтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, ПараметрыРасчета);	
			
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЦикла;
		
	ОбновитьПодвалФормы();	
КонецПроцедуры

// Подготовка параметров для расчетов
//
// Параметры:
//	ДляОС - Булево - признак того, что параметры формируются для расчета ОС
//
// Возвращаемое значение:
//	Структура - разделенные данные URI
//		*ПризнакСтраныЕАЭС - Булево - признак страны ЕАЭС или нет
//		*ПризнакСтраныИмпортЭкспорт - Булево - признак страны ИмпортЭкспорт или нет
//		*СуммаВключаетНалоги - Булево - сумма включает налоги или нет
//		*ЗначениеСтавкиНДС - Число - значение ставки НДС
//		*БезналичныйРасчет - Булево - признак безначличного расчета
//		*КурсДокумента - Число - курс валюты
//		*КратностьДокумента - Число - кратность валюты
//		*КурсНБКР - Число - курс валюты по нац банку
//		*КратностьНБКР - Число - кратность валюты по нац банку
//		*РассчитатьБазуНДС - Булево - признак необходимости рассчитать базу НДС
//		*РассчитатьОтБазыНДС - Булево - признак необходимости рассчитывать от базы НДС
//		*СчитатьОтДохода - Булево - признак необходимости рассчитывать от дохода (нужен для реализации)
//		*Точность - Число - точность цены (знаки после запятой, всегда 2)
//
&НаСервере
Функция ПодготовитьПараметрыРасчета()
	Документ = РеквизитФормыВЗначение("Объект");
	ПараметрыРасчета = Документ.ПодготовитьПараметрыРасчета();
	
	ПараметрыРасчета.КурсНБКР = КурсНБКР;
	ПараметрыРасчета.КратностьНБКР = КратностьНБКР;
	
	Возврат ПараметрыРасчета;
КонецФункции

&НаСервере
Процедура ЗаполнитьПоДокументуОснования()

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		ДокументОбъект.ЗаполнитьПоПоступлениюТоваровУслуг(Объект.ДокументОснование);		
	Иначе
		ДокументОбъект.ЗаполнитьПоПоступлениеИзПереработки(Объект.ДокументОснование);
	КонецЕсли;	
		
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииРаботаССубконто

&НаСервере
Процедура УстановитьНачальныеСвойстваСубконтоТаблицы()
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоТаблицы(
		Объект.Услуги,
		ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконто(Форма)

	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"УслугиСубконто", "Субконто", "СчетРасходов");
	
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	Результат.СкрыватьСубконто = Ложь;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ПриИзмененииСубконто(НомерСубконто)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСубконто(
		ЭтотОбъект, 
		СтрокаТаблицы,
		НомерСубконто, 
		ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры


// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
