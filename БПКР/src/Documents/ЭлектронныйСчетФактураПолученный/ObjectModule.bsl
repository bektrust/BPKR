#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ЗаполненияДокумента

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.ПоступлениеТоваровУслуг - Данные заполнения документа.
//	
Процедура ЗаполнитьПоПоступлениеТоваровУслуг(ДанныеЗаполнения) Экспорт
	
	Организация	= ДанныеЗаполнения.Организация;
	
	ДатаПоставки = ДанныеЗаполнения.Дата;

	Если ДанныеЗаполнения.Услуги.Количество() > 0 Тогда 
		ВидОперации = Перечисления.ВидыОперацийЭСФ.АктОбОказанииУслуг;
	Иначе 
		ВидОперации = Перечисления.ВидыОперацийЭСФ.ПоставкаТоваров;
	КонецЕсли;	
	
	// Сведения о контрагенте.
	Контрагент = ДанныеЗаполнения.Контрагент;	
	ДоговорКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента;
	ВалютаДокумента = ДанныеЗаполнения.ВалютаДокумента;
	БанковскийСчетКонтрагента = ДанныеЗаполнения.Контрагент.ОсновнойБанковскийСчет;
	
	// Форма оплаты.
	Если ДанныеЗаполнения.БезналичныйРасчет Тогда 
		ФормаОплаты = Перечисления.ФормыОплаты.Безналичная;
	Иначе 
		ФормаОплаты = Перечисления.ФормыОплаты.Наличная;
	КонецЕсли;	
	
	Курс = ?(ДанныеЗаполнения.Курс = 0, 1, ДанныеЗаполнения.Курс);
	
	ЗначениеСтавкиНДС = ДанныеЗаполнения.ЗначениеСтавкиНДС; 
	
	ТочностьЦены = ДанныеЗаполнения.ТочностьЦены;

	Товары.Очистить();
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Товары Цикл
		НоваяСтрокаТабличнойЧасти = Товары.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
		НоваяСтрокаТабличнойЧасти.ДокументОснование = ДанныеЗаполнения;
	КонецЦикла;		
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Услуги Цикл
		НоваяСтрокаТабличнойЧасти = Товары.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
		НоваяСтрокаТабличнойЧасти.ДокументОснование = ДанныеЗаполнения;
	КонецЦикла;	
		
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.ОС Цикл
		НоваяСтрокаТабличнойЧасти = Товары.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
		НоваяСтрокаТабличнойЧасти.ДокументОснование = ДанныеЗаполнения;
	КонецЦикла;	

	СуммаДокумента = Товары.Итог("Всего");	
	
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.ВозвратТоваровПоставщику - Данные заполнения документа.
//	
Процедура ЗаполнитьПоВозвратТоваровПоставщику(ДанныеЗаполнения) Экспорт
	
	Организация	= ДанныеЗаполнения.Организация;
	
	ДатаПоставки = ДанныеЗаполнения.Дата;

	Если ДанныеЗаполнения.Услуги.Количество() > 0 Тогда 
		ВидОперации = Перечисления.ВидыОперацийЭСФ.АктОбОказанииУслуг;
	Иначе 
		ВидОперации = Перечисления.ВидыОперацийЭСФ.ПоставкаТоваров;
	КонецЕсли;	
	
	// Сведения о контрагенте.
	Контрагент = ДанныеЗаполнения.Контрагент;	
	ДоговорКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента;
	ВалютаДокумента = ДанныеЗаполнения.ВалютаДокумента;
	БанковскийСчетКонтрагента = ДанныеЗаполнения.Контрагент.ОсновнойБанковскийСчет;
	
	// Форма оплаты.
	Если ДанныеЗаполнения.БезналичныйРасчет Тогда 
		ФормаОплаты = Перечисления.ФормыОплаты.Безналичная;
	Иначе 
		ФормаОплаты = Перечисления.ФормыОплаты.Наличная;
	КонецЕсли;	

	ЭтоКорректировочныйСФ = Истина;
	
	СведенияОбЭСФ = ЭСФСервер.СведенияОбЭСФПоДокументуОснованию(Организация, ДанныеЗаполнения.ДокументОснование);
	ДокументКорректировочныйЭСФ = СведенияОбЭСФ.Ссылка;
	НомерКорректируемогоЭСФ = ДокументКорректировочныйЭСФ.НомерЭСФ;
	ДатаКорректируемогоЭСФ = ДокументКорректировочныйЭСФ.ДатаПоставки;
	
	Курс = ?(ДанныеЗаполнения.Курс = 0, 1, ДанныеЗаполнения.Курс);
	
	ЗначениеСтавкиНДС = ДанныеЗаполнения.ЗначениеСтавкиНДС; 
	
	ТочностьЦены = ДанныеЗаполнения.ТочностьЦены;

	Товары.Очистить();
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Товары Цикл
		НоваяСтрокаТабличнойЧасти = Товары.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
		НоваяСтрокаТабличнойЧасти.ДокументОснование = ДанныеЗаполнения;
	КонецЦикла;		
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Услуги Цикл
		НоваяСтрокаТабличнойЧасти = Товары.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
		НоваяСтрокаТабличнойЧасти.ДокументОснование = ДанныеЗаполнения;
	КонецЦикла;	
		
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.ОС Цикл
		НоваяСтрокаТабличнойЧасти = Товары.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
		НоваяСтрокаТабличнойЧасти.ДокументОснование = ДанныеЗаполнения;
	КонецЦикла;	

	СуммаДокумента = Товары.Итог("Всего");	
	
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.ДополнительныеРасходы - Данные заполнения документа.
//	
Процедура ЗаполнитьПоДополнительныеРасходы(ДанныеЗаполнения) Экспорт
	
	Организация	= ДанныеЗаполнения.Организация;
	
	ДатаПоставки = ДанныеЗаполнения.Дата;

	ВидОперации = Перечисления.ВидыОперацийЭСФ.АктОбОказанииУслуг;
	
	// Сведения о контрагенте.
	Контрагент = ДанныеЗаполнения.Контрагент;	
	ДоговорКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента;
	ВалютаДокумента = ДанныеЗаполнения.ВалютаДокумента;
	БанковскийСчетКонтрагента = ДанныеЗаполнения.Контрагент.ОсновнойБанковскийСчет;
	
	// Форма оплаты.
	Если ДанныеЗаполнения.БезналичныйРасчет Тогда 
		ФормаОплаты = Перечисления.ФормыОплаты.Безналичная;
	Иначе 
		ФормаОплаты = Перечисления.ФормыОплаты.Наличная;
	КонецЕсли;	
	
	Курс = ?(ДанныеЗаполнения.Курс = 0, 1, ДанныеЗаполнения.Курс);
	
	ЗначениеСтавкиНДС = ДанныеЗаполнения.ЗначениеСтавкиНДС; 
	
	ТочностьЦены = ДанныеЗаполнения.ТочностьЦены;

	Товары.Очистить();
	
	НоваяСтрокаТабличнойЧасти = Товары.Добавить();
	НоваяСтрокаТабличнойЧасти.Номенклатура = ДанныеЗаполнения.НоменклатураРасходов;
	НоваяСтрокаТабличнойЧасти.Количество = 1;
	НоваяСтрокаТабличнойЧасти.Цена = ДанныеЗаполнения.СуммаДопРасходов;
	НоваяСтрокаТабличнойЧасти.СуммаНДС = ДанныеЗаполнения.СуммаНДС;
	НоваяСтрокаТабличнойЧасти.ЗначениеСтавкиНСП = ДанныеЗаполнения.ЗначениеСтавкиНСП;
	НоваяСтрокаТабличнойЧасти.СуммаНСП = ДанныеЗаполнения.СуммаНСП;
	НоваяСтрокаТабличнойЧасти.Всего = ДанныеЗаполнения.СуммаДопРасходов;
	НоваяСтрокаТабличнойЧасти.СуммаНДСВВалютеРеглУчета = ДанныеЗаполнения.СуммаНДС * Курс;
	НоваяСтрокаТабличнойЧасти.СуммаНСПВВалютеРеглУчета = ДанныеЗаполнения.СуммаНСП * Курс;
	НоваяСтрокаТабличнойЧасти.ВсегоВВалютеРеглУчета = ДанныеЗаполнения.СуммаДопРасходов * Курс;
	
	НоваяСтрокаТабличнойЧасти.ДокументОснование = ДанныеЗаполнения;

	СуммаДокумента = Товары.Итог("Всего");	
	
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.ПоступлениеТоваровУслуг - Данные заполнения документа.
//	
Процедура ЗаполнитьПоКорректировкиСтоимостиПоступления(ДанныеЗаполнения) Экспорт
	
	Организация	= ДанныеЗаполнения.Организация;
	
	ДатаПоставки = ДанныеЗаполнения.Дата;

	Если ДанныеЗаполнения.Услуги.Количество() > 0 Тогда 
		ВидОперации = Перечисления.ВидыОперацийЭСФ.АктОбОказанииУслуг;
	Иначе 
		ВидОперации = Перечисления.ВидыОперацийЭСФ.ПоставкаТоваров;
	КонецЕсли;	
	
	// Сведения о контрагенте.
	Контрагент = ДанныеЗаполнения.Контрагент;	
	ДоговорКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента;
	ВалютаДокумента = ДанныеЗаполнения.ВалютаДокумента;
	БанковскийСчетКонтрагента = ДанныеЗаполнения.Контрагент.ОсновнойБанковскийСчет;
	
	// Данные корректировки
	ЭтоКорректировочныйСФ = Истина;
	КодПричиныКорректировки = 30;
	
	СведенияОбЭСФ = ЭСФСервер.СведенияОбЭСФПоДокументуОснованию(Организация, ДанныеЗаполнения.ДокументОснование);
	ДокументКорректировочныйЭСФ = СведенияОбЭСФ.Ссылка;
	НомерКорректируемогоЭСФ = ДокументКорректировочныйЭСФ.НомерЭСФ;
	ДатаКорректируемогоЭСФ = ДокументКорректировочныйЭСФ.ДатаПоставки;
	
	// Форма оплаты.
	Если ДанныеЗаполнения.БезналичныйРасчет Тогда 
		ФормаОплаты = Перечисления.ФормыОплаты.Безналичная;
	Иначе 
		ФормаОплаты = Перечисления.ФормыОплаты.Наличная;
	КонецЕсли;	
	
	Курс = ?(ДанныеЗаполнения.Курс = 0, 1, ДанныеЗаполнения.Курс);
	
	ЗначениеСтавкиНДС = ДанныеЗаполнения.ЗначениеСтавкиНДС; 
	
	ТочностьЦены = ДанныеЗаполнения.ТочностьЦены;

	Товары.Очистить();
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Товары Цикл
		НоваяСтрокаТабличнойЧасти = Товары.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
		НоваяСтрокаТабличнойЧасти.ДокументОснование = ДанныеЗаполнения;
	КонецЦикла;		
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Услуги Цикл
		НоваяСтрокаТабличнойЧасти = Товары.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
		НоваяСтрокаТабличнойЧасти.ДокументОснование = ДанныеЗаполнения;
	КонецЦикла;	
		
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.ОС Цикл
		НоваяСтрокаТабличнойЧасти = Товары.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
		НоваяСтрокаТабличнойЧасти.ДокументОснование = ДанныеЗаполнения;
	КонецЦикла;	

	СуммаДокумента = Товары.Итог("Всего");	
	
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.ДополнительныеРасходы - Данные заполнения документа.
//	
Процедура ЗаполнитьПоКорректировкеСтоимостиДополнительныхРасходов(ДанныеЗаполнения) Экспорт
	
	Организация	= ДанныеЗаполнения.Организация;
	
	ДатаПоставки = ДанныеЗаполнения.Дата;

	ВидОперации = Перечисления.ВидыОперацийЭСФ.АктОбОказанииУслуг;
	
	// Сведения о контрагенте.
	Контрагент = ДанныеЗаполнения.Контрагент;	
	ДоговорКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента;
	ВалютаДокумента = ДанныеЗаполнения.ВалютаДокумента;
	БанковскийСчетКонтрагента = ДанныеЗаполнения.Контрагент.ОсновнойБанковскийСчет;
	
	// Данные корректировки
	ЭтоКорректировочныйСФ = Истина;
	КодПричиныКорректировки = 30;
	
	СведенияОбЭСФ = ЭСФСервер.СведенияОбЭСФПоДокументуОснованию(Организация, ДанныеЗаполнения.ДокументОснование);
	ДокументКорректировочныйЭСФ = СведенияОбЭСФ.Ссылка;
	НомерКорректируемогоЭСФ = ДокументКорректировочныйЭСФ.НомерЭСФ;
	ДатаКорректируемогоЭСФ = ДокументКорректировочныйЭСФ.ДатаПоставки;
	
	// Форма оплаты.
	Если ДанныеЗаполнения.БезналичныйРасчет Тогда 
		ФормаОплаты = Перечисления.ФормыОплаты.Безналичная;
	Иначе 
		ФормаОплаты = Перечисления.ФормыОплаты.Наличная;
	КонецЕсли;	
	
	Курс = ?(ДанныеЗаполнения.Курс = 0, 1, ДанныеЗаполнения.Курс);
	
	ЗначениеСтавкиНДС = ДанныеЗаполнения.ЗначениеСтавкиНДС; 
	
	ТочностьЦены = ДанныеЗаполнения.ТочностьЦены;

	Товары.Очистить();
	
	НоваяСтрокаТабличнойЧасти = Товары.Добавить();
	НоваяСтрокаТабличнойЧасти.Номенклатура = ДанныеЗаполнения.НоменклатураРасходов;
	НоваяСтрокаТабличнойЧасти.Количество = 1;
	НоваяСтрокаТабличнойЧасти.Цена = ДанныеЗаполнения.СуммаДопРасходов;
	НоваяСтрокаТабличнойЧасти.СуммаНДС = ДанныеЗаполнения.СуммаНДС;
	НоваяСтрокаТабличнойЧасти.ЗначениеСтавкиНСП = ДанныеЗаполнения.ЗначениеСтавкиНСП;
	НоваяСтрокаТабличнойЧасти.СуммаНСП = ДанныеЗаполнения.СуммаНСП;
	НоваяСтрокаТабличнойЧасти.Всего = ДанныеЗаполнения.СуммаДопРасходов;
	НоваяСтрокаТабличнойЧасти.СуммаНДСВВалютеРеглУчета = ДанныеЗаполнения.СуммаНДС * Курс;
	НоваяСтрокаТабличнойЧасти.СуммаНСПВВалютеРеглУчета = ДанныеЗаполнения.СуммаНСП * Курс;
	НоваяСтрокаТабличнойЧасти.ВсегоВВалютеРеглУчета = ДанныеЗаполнения.СуммаДопРасходов * Курс;
	
	НоваяСтрокаТабличнойЧасти.ДокументОснование = ДанныеЗаполнения;

	СуммаДокумента = Товары.Итог("Всего");	
	
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.ПоступлениеИзПереработки - Данные заполнения документа.
//	
Процедура ЗаполнитьПоПоступлениюИзПереработки(ДанныеЗаполнения) Экспорт
	
	Организация	= ДанныеЗаполнения.Организация;
	
	ДатаПоставки = ДанныеЗаполнения.Дата;

	ВидОперации = Перечисления.ВидыОперацийЭСФ.АктОбОказанииУслуг;	
	
	// Сведения о контрагенте.
	Контрагент = ДанныеЗаполнения.Контрагент;	
	ДоговорКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента;
	ВалютаДокумента = ДанныеЗаполнения.ВалютаДокумента;
	БанковскийСчетКонтрагента = ДанныеЗаполнения.Контрагент.ОсновнойБанковскийСчет;
	
	// Форма оплаты.
	Если ДанныеЗаполнения.БезналичныйРасчет Тогда 
		ФормаОплаты = Перечисления.ФормыОплаты.Безналичная;
	Иначе 
		ФормаОплаты = Перечисления.ФормыОплаты.Наличная;
	КонецЕсли;	
	
	Курс = ?(ДанныеЗаполнения.Курс = 0, 1, ДанныеЗаполнения.Курс);
	
	ЗначениеСтавкиНДС = ДанныеЗаполнения.ЗначениеСтавкиНДС; 
	
	ТочностьЦены = ДанныеЗаполнения.ТочностьЦены;

	Товары.Очистить();
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Услуги Цикл
		НоваяСтрокаТабличнойЧасти = Товары.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
		НоваяСтрокаТабличнойЧасти.ДокументОснование = ДанныеЗаполнения;
	КонецЦикла;		

	СуммаДокумента = Товары.Итог("Всего");	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) Экспорт 
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.ПоступлениеТоваровУслуг")] = "ЗаполнитьПоПоступлениеТоваровУслуг";
	СтратегияЗаполнения[Тип("ДокументСсылка.ВозвратТоваровПоставщику")] = "ЗаполнитьПоВозвратТоваровПоставщику";
	СтратегияЗаполнения[Тип("ДокументСсылка.ДополнительныеРасходы")] = "ЗаполнитьПоДополнительныеРасходы";
	СтратегияЗаполнения[Тип("ДокументСсылка.КорректировкаСтоимостиПоступления")] = "ЗаполнитьПоКорректировкиСтоимостиПоступления";
	СтратегияЗаполнения[Тип("ДокументСсылка.КорректировкаСтоимостиДополнительныхРасходов")] = "ЗаполнитьПоКорректировкеСтоимостиДополнительныхРасходов";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПоступлениеИзПереработки")] = "ЗаполнитьПоПоступлениюИзПереработки";
	
	ЗаполнениеОбъектовБП.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
	Если БанковскийСчет.Пустая() Тогда 
		БанковскийСчет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьОсновнойБанковскийСчетОрганизации(Организация);
	КонецЕсли;	
	
КонецПроцедуры

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ДокументКорректировочныйЭСФ) Тогда 
		СерияКорректируемогоСФ = "";
		НомерКорректируемогоЭСФ = ДокументКорректировочныйЭСФ.НомерЭСФ;
		ДатаКорректируемогоЭСФ = ДокументКорректировочныйЭСФ.ДатаПоставки;
	КонецЕсли;	
	
	СуммаДокумента = Товары.Итог("Всего");
		
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ИнициализироватьДанные(Отказ, РежимПроведения);
	
	ОтразитьДвижения(Отказ, РежимПроведения);
	
	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииОбработкаПроведения

// Процедура инициализирует данные документа
// и подготавливает таблицы для движения в регистры
//
Процедура ИнициализироватьДанные(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.ЭлектронныйСчетФактураПолученный.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
КонецПроцедуры
	
// Процедура заполняет регистры данными
//
Процедура ОтразитьДвижения(Отказ, РежимПроведения)

	БухгалтерскийУчетСервер.ОтразитьСведенияОбЭСФ(ДополнительныеСвойства, Движения, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли