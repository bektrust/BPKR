#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПроцедурыПроведенияДокумента	

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаХозрасчетный(ДокументСсылка, СтруктураДополнительныеСвойства, Отказ)
	
	// Подготовка данных	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Ссылка КАК Регистратор,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	&Содержание КАК Содержание,
		|	ВременнаяТаблицаШапка.Склад КАК Склад,
		|	Неопределено КАК Контрагент
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""Товары"" КАК ИмяСписка,
		|	&СинонимСписка КАК СинонимСписка,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаОС.НомерСтроки КАК НомерСтроки,
		|	ВременнаяТаблицаШапка.СчетУчета КАК СчетУчета,
		|	ВременнаяТаблицаШапка.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаШапка.Склад КАК Склад,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОприходования,
		|	0 КАК Себестоимость,
		|	1 КАК Количество,
		|	ВременнаяТаблицаОС.СчетУчета КАК КорСчетСписания,
		|	ВременнаяТаблицаОС.ОсновноеСредство КАК КорСубконто1,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ВременнаяТаблицаШапка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	Запрос.УстановитьПараметр("Содержание", НСтр("ru = 'Поступление основного средства'")); 
	Запрос.УстановитьПараметр("СинонимСписка", НСтр("ru = 'Товары'"));
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизиты = МассивРезультатов[0].Выгрузить();
	ТаблицаТовары = МассивРезультатов[1].Выгрузить();
	
	ТаблицаСписанныеТовары = УчетТоваров.ПодготовитьТаблицуСписанныеТовары(ТаблицаТовары, ТаблицаРеквизиты, Отказ);
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРеквизиты", ТаблицаРеквизиты);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСписанныеТовары", ТаблицаСписанныеТовары);

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	1 КАК Порядок,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	НЕОПРЕДЕЛЕНО КАК СчетДт,
		|	ТаблицаДокумента.СчетУчета.ПарныйСчет КАК СчетКт,
		|	НЕОПРЕДЕЛЕНО КАК ЗначениеСубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК ЗначениеСубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК ЗначениеСубконтоДт3,
		|	ТаблицаДокумента.ОсновноеСредство КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ТаблицаДокумента.НакопленнаяАмортизация КАК Сумма,
		|	&ВалютаРегламентированногоУчета КАК ВалютаДт,
		|	&ВалютаРегламентированногоУчета КАК ВалютаКт,
		|	ТаблицаДокумента.НакопленнаяАмортизация КАК ВалютнаяСуммаДт,
		|	ТаблицаДокумента.НакопленнаяАмортизация КАК ВалютнаяСуммаКт,
		|	0 КАК КоличествоКт,
		|	&СодержаниеНачислениеАмортизации КАК Содержание,
		|	ИСТИНА КАК РаспределятьПоКоэффициентам,
		|	ТаблицаДокумента.СпособОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизации
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ТаблицаДокумента
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ТаблицаДокумента.НакопленнаяАмортизация > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2,
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ТаблицаДокумента.СчетУчета,
		|	ВременнаяТаблицаШапка.СчетУчета,
		|	ТаблицаДокумента.ОсновноеСредство,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ТаблицаДокумента.ПервоначальнаяСтоимость,
		|	&ВалютаРегламентированногоУчета,
		|	&ВалютаРегламентированногоУчета,
		|	ТаблицаДокумента.ПервоначальнаяСтоимость,
		|	ТаблицаДокумента.ПервоначальнаяСтоимость,
		|	0,
		|	&СодержаниеПоступление,
		|	ЛОЖЬ,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ТаблицаДокумента
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ТаблицаДокумента.ПервоначальнаяСтоимость > 0
		|	И ВременнаяТаблицаШапка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПринятияКУчетуОсновныхСредств.ПоРезультатамИнвентаризации)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	3,
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ТаблицаДокумента.СчетУчета,
		|	ВременнаяТаблицаШапка.СчетУчета,
		|	ТаблицаДокумента.ОсновноеСредство,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаШапка.ОбъектСтроительства,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ТаблицаДокумента.ПервоначальнаяСтоимость,
		|	&ВалютаРегламентированногоУчета,
		|	&ВалютаРегламентированногоУчета,
		|	ТаблицаДокумента.ПервоначальнаяСтоимость,
		|	ТаблицаДокумента.ПервоначальнаяСтоимость,
		|	0,
		|	&СодержаниеПоступление,
		|	ЛОЖЬ,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ТаблицаДокумента
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ТаблицаДокумента.ПервоначальнаяСтоимость > 0
		|	И ВременнаяТаблицаШапка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства)";
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", СтруктураДополнительныеСвойства.ДляПроведения.ВалютаРегламентированногоУчета);	
	Запрос.УстановитьПараметр("СодержаниеНачислениеАмортизации", НСтр("ru = 'Начисление амортизации'")); 
	Запрос.УстановитьПараметр("СодержаниеПоступление", НСтр("ru = 'Поступление основного средства'")); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаДвижений = РезультатЗапроса.Выгрузить();
	
	// Добавление колонк в таблицу для записи в рег. бухг.
	ТаблицаДвижений.Колонки.Добавить("СубконтоДт1");
	ТаблицаДвижений.Колонки.Добавить("СубконтоДт2");
	ТаблицаДвижений.Колонки.Добавить("СубконтоДт3");
	
	ТаблицаХозрасчетный = УправлениеВнеоборотнымиАктивами.РаспределениеПоСпособуОтраженияРасходовПоАмортизации(ТаблицаДвижений);
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаХозрасчетный", ТаблицаХозрасчетный);
КонецПроцедуры // СформироватьТаблицаХозрасчетный()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаМестонахождениеОС(ДокументСсылка, СтруктураДополнительныеСвойства)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ТаблицаДокумента.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаДокумента.МОЛ КАК МОЛ,
		|	ТаблицаДокумента.Подразделение КАК Подразделение
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ТаблицаДокумента
		|		ПО (ИСТИНА)
		|ГДЕ
		|	(&УчетДвиженияОСПоПодразделениям
		|			ИЛИ &УчетДвиженияОСПоМОЛ)";
	Запрос.УстановитьПараметр("УчетДвиженияОСПоПодразделениям", ПолучитьФункциональнуюОпцию("УчетДвиженияОСПоПодразделениям"));
	Запрос.УстановитьПараметр("УчетДвиженияОСПоМОЛ", ПолучитьФункциональнуюОпцию("УчетДвиженияОСПоМОЛ"));
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаМестонахождениеОС", РезультатЗапроса.Выгрузить()); 
КонецПроцедуры // СформироватьТаблицаМестонахождениеОС()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПараметрыУчетаОС(ДокументСсылка, СтруктураДополнительныеСвойства)
	 	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Дата КАК ДатаВводаВЭксплуатацию,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ТаблицаДокумента.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаДокумента.ИнвентарныйНомер КАК ИнвентарныйНомер,
		|	ТаблицаДокумента.СчетУчета КАК СчетУчета,
		|	ТаблицаДокумента.ГруппаНУ КАК ГруппаНУ,
		|	ТаблицаДокумента.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
		|	ТаблицаДокумента.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость,
		|	ТаблицаДокумента.СрокСлужбы КАК СрокСлужбы,
		|	ТаблицаДокумента.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
		|	ТаблицаДокумента.СпособОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизации,
		|	ТаблицаДокумента.ПараметрВыработки КАК ПараметрВыработки,
		|	ТаблицаДокумента.ОбъемПродукции КАК ОбъемПродукции,
		|	ТаблицаДокумента.КоэффициентУскорения КАК КоэффициентУскорения,
		|	ТаблицаДокумента.ПервоначальнаяСтоимость - ТаблицаДокумента.ЛиквидационнаяСтоимость КАК СтоимостьДляРасчетаАмортизации,
		|	ТаблицаДокумента.ДатаНачисленияНалогаНаИмущество КАК ДатаНачисленияНалогаНаИмущество
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ТаблицаДокумента
		|		ПО (ИСТИНА)";
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПараметрыУчетаОС", РезультатЗапроса.Выгрузить()); 
КонецПроцедуры // СформироватьТаблицаПараметрыУчетаОС()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСобытияОС(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ТаблицаДокумента.ОсновноеСредство КАК ОсновноеСредство,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.ПринятиеКУчету) КАК Событие,
		|	ВременнаяТаблицаШапка.Номер КАК НомерДокумента,
		|	ВременнаяТаблицаШапка.Представление КАК НазваниеДокумента
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ТаблицаДокумента
		|		ПО (ИСТИНА)";
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСобытияОС", РезультатЗапроса.Выгрузить());
КонецПроцедуры // СформироватьТаблицаСобытияОС() 

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСостоянияОС(ДокументСсылка, СтруктураДополнительныеСвойства)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация,
		|	ТаблицаДокумента.ОсновноеСредство,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.ПринятоКУчету) КАК Состояние
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ТаблицаДокумента
		|		ПО (ИСТИНА)";
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСостоянияОС", РезультатЗапроса.Выгрузить()); 
КонецПроцедуры // СформироватьТаблицаСостоянияОС

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСведенияОбИмуществе(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация,
		|	ТаблицаДокумента.ОсновноеСредство,
		|	ТаблицаДокумента.ГруппаИмущества,
		|	ВременнаяТаблицаШапка.Дата КАК ДатаВводаВЭксплуатацию,
		|	ТаблицаДокумента.КодИмущества,
		|	ТаблицаДокумента.МатериалСтен,
		|	ТаблицаДокумента.ЖилаяПлощадь,
		|	ТаблицаДокумента.НежилаяПлощадь,
		|	ТаблицаДокумента.РегиональныйКоэффициент,
		|	ТаблицаДокумента.ЗональныйКоэффициент,
		|	ТаблицаДокумента.ОтраслевойКоэффициент,
		|	ТаблицаДокумента.КатегорияИмущества КАК КатегорияОбъектаИмущества,
		|	ТаблицаДокумента.ОтраслевойКоэффициент КАК КодНазначенияИмущества,
		|	ТаблицаДокумента.КодПользователяИмущества
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ТаблицаДокумента
		|		ПО (ИСТИНА)
		|ГДЕ
		|	(ТаблицаДокумента.ГруппаИмущества = ЗНАЧЕНИЕ(Справочник.ГруппыИмущества.ГИ2)
		|			ИЛИ ТаблицаДокумента.ГруппаИмущества = ЗНАЧЕНИЕ(Справочник.ГруппыИмущества.ГИ3))";
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСведенияОбИмуществе", РезультатЗапроса.Выгрузить());
КонецПроцедуры // СформироватьТаблицаСведенияОбИмуществе

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСведенияОТранспорте(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация,
		|	ТаблицаДокумента.ОсновноеСредство,
		|	ТаблицаДокумента.ГруппаИмущества КАК ГруппаИмущества,
		|	ВременнаяТаблицаШапка.Дата КАК ДатаВводаВЭксплуатацию,
		|	ТаблицаДокумента.ВидТранспорта,
		|	ТаблицаДокумента.ОбъемДвигателя,
		|	ТаблицаДокумента.ГосНомер,
		|	ТаблицаДокумента.КодПользователяИмущества,
		|	ТаблицаДокумента.КатегорияИмущества,
		|	ТаблицаДокумента.МаркаТранспортногоСредства
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ТаблицаДокумента
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ТаблицаДокумента.ГруппаИмущества = ЗНАЧЕНИЕ(Справочник.ГруппыИмущества.ГИ4с)
		|	ИЛИ ТаблицаДокумента.ГруппаИмущества = ЗНАЧЕНИЕ(Справочник.ГруппыИмущества.ГИ4нс)";
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСведенияОТранспорте", РезультатЗапроса.Выгрузить());
КонецПроцедуры // СформироватьТаблицаСведенияОТранспорте

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДвижениеОСНУ(ДокументСсылка, СтруктураДополнительныеСвойства) 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаОС.ГруппаНУ КАК ГруппаНУ,
		|	ВременнаяТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ВременнаяТаблицаОС.ПервоначальнаяСтоимость КАК Поступление,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаШапка.Дата >= ДАТАВРЕМЯ(2022, 1, 1)
		|			ТОГДА ВременнаяТаблицаОС.ПервоначальнаяСтоимость
		|		ИНАЧЕ ВременнаяТаблицаОС.ПервоначальнаяСтоимость * (12 - МЕСЯЦ(ВременнаяТаблицаШапка.Дата) + 0.5) / 12
		|	КОНЕЦ КАК ТекущееПоступление
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаОС.ГруппаНУ = ЗНАЧЕНИЕ(Справочник.ГруппыНалоговогоУчетаОС.ПустаяСсылка)";
	Запрос.УстановитьПараметр("Период", СтруктураДополнительныеСвойства.ДляПроведения.Дата);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДвижениеОСНУ", РезультатЗапроса.Выгрузить());
КонецПроцедуры 

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗемельныйНалог(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаШапка.Дата КАК Период,
		|	ТаблицаШапка.Организация КАК Организация,
		|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаОС.КатегорияЗемель КАК КатегорияЗемель,
		|	ТаблицаОС.ВидЗемельногоУчастка КАК ВидЗемельногоУчастка,
		|	ТаблицаОС.КоличествоЧеловек КАК КоличествоЧеловек,
		|	ТаблицаОС.КоэффициентКоммерческогоИспользования КАК КоэффициентКоммерческогоИспользования,
		|	ТаблицаОС.Площадь КАК Площадь,
		|	ТаблицаОС.Область КАК Область,
		|	ТаблицаОС.Район КАК Район,
		|	ТаблицаОС.ДатаНачисленияЗамельногоНалога КАК ДатаНачисленияЗамельногоНалога,
		|	ТаблицаОС.ЗональныйКоэффициент КАК ЗональныйКоэффициент,
		|	ТаблицаОС.СтавкаЗНВторойКатегории КАК СтавкаЗНВторойКатегории,
		|	ТаблицаОС.УчастокПодОбъектомИмущества КАК УчастокПодОбъектомИмущества,
		|	ТаблицаОС.ПлощадьПодОбъектомИмущества КАК ПлощадьПодОбъектомИмущества,
		|	ТаблицаОС.КатегорияИмущества КАК КатегорияОбъектаИмущества,
		|	ТаблицаОС.КодПользователяИмущества
		|ИЗ
		|	ВременнаяТаблицаОС КАК ТаблицаОС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ТаблицаШапка
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ТаблицаОС.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Земля)
		|	И &ПлательщикЗН";
	
	Запрос.УстановитьПараметр("ПлательщикЗН", СтруктураДополнительныеСвойства.УчетнаяПолитика.ПлательщикЗН);
	
	РезультатЗапроса = Запрос.Выполнить();
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПараметрыУчетаОСЗемельныйНалог", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗемельныйНалогПодОбъектомИмущества(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	//Если не заполнена колонка ДатаНачисленияНалогаНаИмущество, то записываем дату начисления Земельного налога с начала месяца, следующего за месяцем оформления дока

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаШапка.Дата КАК Период,
		|	ТаблицаШапка.Организация КАК Организация,
		|	ТаблицаОС.ОсновноеСредство КАК ОбъектИмущества,
		|	ТаблицаОС.УчастокПодОбъектомИмущества КАК ОсновноеСредство,
		|	ТаблицаОС.ПлощадьПодОбъектомИмущества КАК ПлощадьПодОбъектомИмущества,
		|	ВЫБОР
		|		КОГДА ТаблицаОС.ДатаНачисленияНалогаНаИмущество = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ТаблицаШапка.Дата, МЕСЯЦ, 1), МЕСЯЦ)
		|		ИНАЧЕ ТаблицаОС.ДатаНачисленияНалогаНаИмущество
		|	КОНЕЦ КАК ДатаНачисленияЗамельногоНалога
		|ИЗ
		|	ВременнаяТаблицаОС КАК ТаблицаОС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ТаблицаШапка
		|		ПО (ИСТИНА)
		|ГДЕ
		|	Не ТаблицаОС.УчастокПодОбъектомИмущества = ЗНАЧЕНИЕ(Справочник.ОсновныеСредства.ПустаяСсылка)
		|	И &ПлательщикЗН";
	
	Запрос.УстановитьПараметр("ПлательщикЗН", СтруктураДополнительныеСвойства.УчетнаяПолитика.ПлательщикЗН);
	
	РезультатЗапроса = Запрос.Выполнить();
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПараметрыУчетаОСЗемельныйНалогПодОбъектомИмущества", РезультатЗапроса.Выгрузить());

КонецПроцедуры

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства, Отказ) Экспорт
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка,
		|	ТаблицаДокумента.Дата,
		|	ТаблицаДокумента.Номер,
		|	ТаблицаДокумента.Представление,
		|	ТаблицаДокумента.Организация,
		|	ТаблицаДокумента.ВидОперации,
		|	ТаблицаДокумента.СчетУчета,
		|	ТаблицаДокумента.Номенклатура,
		|	ТаблицаДокумента.Склад,
		|	ТаблицаДокумента.ОбъектСтроительства
		|ПОМЕСТИТЬ ВременнаяТаблицаШапка
		|ИЗ
		|	Документ.ПринятиеКУчетуОС КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.НомерСтроки,
		|	ТаблицаДокумента.ОсновноеСредство,
		|	ТаблицаДокумента.ИнвентарныйНомер,
		|	ТаблицаДокумента.ПервоначальнаяСтоимость,
		|	ТаблицаДокумента.ЛиквидационнаяСтоимость,
		|	ТаблицаДокумента.НакопленнаяАмортизация,
		|	ТаблицаДокумента.СчетУчета,
		|	ТаблицаДокумента.СрокСлужбы,
		|	ТаблицаДокумента.СпособНачисленияАмортизации,
		|	ТаблицаДокумента.СпособОтраженияРасходовПоАмортизации,
		|	ТаблицаДокумента.ПараметрВыработки,
		|	ТаблицаДокумента.ОбъемПродукции,
		|	ТаблицаДокумента.КоэффициентУскорения,
		|	ТаблицаДокумента.МОЛ,
		|	ТаблицаДокумента.Подразделение,
		|	ТаблицаДокумента.ГруппаНУ,
		|	ТаблицаДокумента.ГруппаИмущества,
		|	ТаблицаДокумента.КодИмущества,
		|	ТаблицаДокумента.МатериалСтен,
		|	ТаблицаДокумента.ЖилаяПлощадь,
		|	ТаблицаДокумента.НежилаяПлощадь,
		|	ТаблицаДокумента.РегиональныйКоэффициент,
		|	ТаблицаДокумента.ЗональныйКоэффициент,
		|	ТаблицаДокумента.ОтраслевойКоэффициент,
		|	ТаблицаДокумента.КатегорияИмущества,
		|	ТаблицаДокумента.КодПользователяИмущества,
		|	ТаблицаДокумента.ВидТранспорта,
		|	ТаблицаДокумента.ОбъемДвигателя,
		|	ТаблицаДокумента.ГосНомер,
		|	ТаблицаДокумента.МаркаТранспортногоСредства,
		|	ТаблицаДокумента.ДатаНачисленияНалогаНаИмущество,
		|	ТаблицаДокумента.КатегорияЗемель,
		|	ТаблицаДокумента.ВидЗемельногоУчастка,
		|	ТаблицаДокумента.КоличествоЧеловек,
		|	ТаблицаДокумента.КоэффициентКоммерческогоИспользования,
		|	ТаблицаДокумента.Площадь,
		|	ТаблицаДокумента.Область,
		|	ТаблицаДокумента.Район,
		|	ТаблицаДокумента.ДатаНачисленияЗамельногоНалога,
		|	ТаблицаДокумента.СтавкаЗНВторойКатегории,
		|	ТаблицаДокумента.УчастокПодОбъектомИмущества КАК УчастокПодОбъектомИмущества,
		|	ТаблицаДокумента.ПлощадьПодОбъектомИмущества КАК ПлощадьПодОбъектомИмущества
		|ПОМЕСТИТЬ ВременнаяТаблицаОС
		|ИЗ
		|	Документ.ПринятиеКУчетуОС.ОС КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Выполнить(); 
	
	СформироватьТаблицаМестонахождениеОС(ДокументСсылка, СтруктураДополнительныеСвойства); 
	СформироватьТаблицаПараметрыУчетаОС(ДокументСсылка, СтруктураДополнительныеСвойства); 
	СформироватьТаблицаСобытияОС(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаСостоянияОС(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаСведенияОбИмуществе(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаСведенияОТранспорте(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаДвижениеОСНУ(ДокументСсылка, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаХозрасчетный(ДокументСсылка, СтруктураДополнительныеСвойства, Отказ);
	// Земельный налог
	СформироватьТаблицаЗемельныйНалог(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗемельныйНалогПодОбъектомИмущества(ДокументСсылка, СтруктураДополнительныеСвойства);
КонецПроцедуры // ИнициализироватьДанныеДокумента()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОтветственныеЛицаЗаСохранностьОС(ВременнаяТаблицаОС)
	Первый = Истина;
	Стр = "";	
	Для каждого СтрокаТаблицыЗначений Из ВременнаяТаблицаОС Цикл
		Стр = Стр + ?(Первый, "", Символы.ПС) + СтрокаТаблицыЗначений.РасшифровкаПодписи;
		Первый = Ложь;
	КонецЦикла; 	
	
	Возврат Стр;
	
КонецФункции // ()

Функция СформироватьНаименованиеОбъекта(ВременнаяТаблицаОС)
	Первый = Истина;
	Стр = "";	
	Для каждого СтрокаТаблицыЗначений Из ВременнаяТаблицаОС Цикл
		Стр = Стр + ?(Первый, "", ", ") + СтрокаТаблицыЗначений.ОсновноеСредствоНаименование;
		Первый = Ложь;
	КонецЦикла; 	
	
	Возврат Стр;
	
КонецФункции // ()

#КонецОбласти

#Область ВерсионированиеОбъектов

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//@skip-warning
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область ИнтерфейсПечати

// Формирует и возвращает текст запроса для выборки данных,
// необходимых для формирования печатной формы
//
Функция ПолучитьТекстЗапросаАктПриемкиПередачиОС()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ПринятиеКУчетуОС.Ссылка,
		|	ПринятиеКУчетуОС.ВерсияДанных,
		|	ПринятиеКУчетуОС.ПометкаУдаления,
		|	ПринятиеКУчетуОС.Номер КАК НомерДокумента,
		|	ПринятиеКУчетуОС.Дата КАК ДатаДокумента,
		|	ПринятиеКУчетуОС.Проведен,
		|	ПринятиеКУчетуОС.Автор,
		|	ПринятиеКУчетуОС.ВидОперации,
		|	ПринятиеКУчетуОС.ДокументОснование,
		|	ПринятиеКУчетуОС.ДокументОснованиеВид,
		|	ПринятиеКУчетуОС.ДокументОснованиеДата,
		|	ПринятиеКУчетуОС.ДокументОснованиеНомер,
		|	ПринятиеКУчетуОС.Комментарий,
		|	ПринятиеКУчетуОС.Номенклатура,
		|	ПринятиеКУчетуОС.ОбъектСтроительства,
		|	ПринятиеКУчетуОС.Организация,
		|	ПринятиеКУчетуОС.Склад,
		|	ПринятиеКУчетуОС.ОС.(
		|		Ссылка,
		|		НомерСтроки,
		|		ОсновноеСредство,
		|		ИнвентарныйНомер,
		|		МОЛ,
		|		Подразделение КАК Получатель,
		|		ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
		|		СпособНачисленияАмортизации,
		|		СпособОтраженияРасходовПоАмортизации,
		|		СрокСлужбы КАК СрокСлужбы,
		|		СчетУчета КАК СчетДт,
		|		ГруппаНУ,
		|		ГруппаИмущества,
		|		ЛиквидационнаяСтоимость,
		|		НакопленнаяАмортизация,
		|		КодПользователяИмущества,
		|		СчетУчета.Представление КАК СчетДтПредставление,
		|		СчетУчета.ПарныйСчет.Представление КАК ПарныйСчетПредставление,
		|		МОЛ.ФИО КАК РасшифровкаПодписи,
		|		ОсновноеСредство.Наименование,
		|		ОсновноеСредство.Код,
		|		ОсновноеСредство.ДатаВыпуска,
		|		МатериалСтен,
		|		ЖилаяПлощадь,
		|		НежилаяПлощадь,
		|		РегиональныйКоэффициент,
		|		ЗональныйКоэффициент,
		|		ОтраслевойКоэффициент,
		|		КодИмущества,
		|		КатегорияИмущества,
		|		ВидТранспорта,
		|		ОбъемДвигателя,
		|		ОсновноеСредство.ЗаводскойНомер КАК ЗаводскойНомер,
		|		ОсновноеСредство.НомерПаспорта КАК НомерПаспорта
		|	),
		|	ПринятиеКУчетуОС.Комиссия.(
		|		Ссылка,
		|		НомерСтроки,
		|		ФизЛицо,
		|		Председатель,
		|		ФизЛицо.ФИО КАК РасшифровкаПодписи
		|	),
		|	ПринятиеКУчетуОС.Организация.НаименованиеПолное,
		|	ПринятиеКУчетуОС.Организация.КодПоОКПО КАК КодПоОКПО
		|ИЗ
		|	Документ.ПринятиеКУчетуОС КАК ПринятиеКУчетуОС
		|ГДЕ
		|	ПринятиеКУчетуОС.Ссылка В(&МассивОбъектов)";
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция формирует табличный документ с печатной формой ПКО
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьАктаПриемкиПередачиОС(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати 	= "ПринятиеКУчетуОС_АктПриемкиПередачиОС";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПринятиеКУчетуОС.ПФ_MXL_АктПриемкиПередачи");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = ПолучитьТекстЗапросаАктПриемкиПередачиОС();
	
	Запрос.Параметры.Вставить("Дата", );
	РезультатЗапроса 	= Запрос.Выполнить();
	Шапка 				= РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий()  Цикл
		ВременнаяТаблицаОС 		= Шапка.ОС.Выгрузить();
		ТаблицаКомиссия = Шапка.Комиссия.Выгрузить();

		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		СтруктураРуководители = БухгалтерскийУчетСервер.ОтветственныеЛицаОрганизацийРуководители(Шапка.Организация, Шапка.ДатаДокумента);
			
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		Если НЕ СтруктураРуководители.Свойство("Руководитель") = Неопределено Тогда
			ОбластьМакета.Параметры.РуководительДолжность 	= СтруктураРуководители.РуководительДолжность;
			ОбластьМакета.Параметры.РуководительФИО 		= СтруктураРуководители.Руководитель;		
		КонецЕсли;		
		ОбластьМакета.Параметры.СписокМОЛ 		= ОтветственныеЛицаЗаСохранностьОС(ВременнаяТаблицаОС);
	    ОбластьМакета.Параметры.НомерДокумента 	= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.НомерДокумента);
		ОбластьМакета.Параметры.ДатаДокумента 	= Формат(Шапка.ДатаДокумента, "ДЛФ=DD");		
	    ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы1");
	    ТабличныйДокумент.Вывести(ОбластьМакета);
				
		Для каждого СтрокаТаблицыЗначений Из ВременнаяТаблицаОС Цикл
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы1");
			ОбластьМакета.Параметры.Заполнить(СтрокаТаблицыЗначений);
		    ТабличныйДокумент.Вывести(ОбластьМакета);		
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Приказ");
		ОбластьМакета.Параметры.НаименованиеОбъекта = СформироватьНаименованиеОбъекта(ВременнаяТаблицаОС);
	    ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы2");
	    ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Для каждого СтрокаТаблицыЗначений Из ВременнаяТаблицаОС Цикл
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы2");
			ОбластьМакета.Параметры.Заполнить(СтрокаТаблицыЗначений);
			ОбластьМакета.Параметры.ДатаВводаВЭксплуатацию = СтрЗаменить(Строка(Год(Шапка.ДатаДокумента)), Символы.НПП, "") + "-" + Формат(Месяц(Шапка.ДатаДокумента), "ЧЦ=2; ЧВН=");
		    ТабличныйДокумент.Вывести(ОбластьМакета);		
		КонецЦикла;

		
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.ОснованиеПеремещения = Шапка.ДокументОснованиеВид 
						+ ?(ЗначениеЗаполнено(Шапка.ДокументОснованиеНомер), ", № " + ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.ДокументОснованиеНомер), "") 
						+ ?(ЗначениеЗаполнено(Шапка.ДокументОснованиеДата), ", от " + Формат(Шапка.ДокументОснованиеДата, "ДЛФ=DD"), "");
	    ТабличныйДокумент.Вывести(ОбластьМакета);
				
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы3");
	    ТабличныйДокумент.Вывести(ОбластьМакета);		
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаОборотнойСтороны");
	    ТабличныйДокумент.Вывести(ОбластьМакета);
																		
		Для каждого СтрокаТаблицыЗначений Из ТаблицаКомиссия Цикл
			Если СтрокаТаблицыЗначений.Председатель Тогда
				ЗаголовокРазделаКомиссии = НСтр("ru = 'Председатель комиссии'");
				ОбластьМакета = Макет.ПолучитьОбласть("Комиссия");
				ОбластьМакета.Параметры.Заполнить(СтрокаТаблицыЗначений);
				
				СведенияОФизЛице = БухгалтерскийУчетСервер.ПолучитьСведенияОФизЛице(Шапка.Организация, СтрокаТаблицыЗначений.ФизЛицо, Шапка.ДатаДокумента); 
				ОбластьМакета.Параметры.ДолжностьНаименование = СведенияОФизЛице.Должность;											 
				ОбластьМакета.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии;
			    ТабличныйДокумент.Вывести(ОбластьМакета);
				Прервать;				
			КонецЕсли;
		КонецЦикла;				
		
		ПервыйРядовойЧленКомиссиии = Истина;																
		Для каждого СтрокаТаблицыЗначений Из ТаблицаКомиссия Цикл
			Если НЕ СтрокаТаблицыЗначений.Председатель Тогда
				Если ПервыйРядовойЧленКомиссиии Тогда
					ЗаголовокРазделаКомиссии = НСтр("ru = 'Члены комиссии'");
					ПервыйРядовойЧленКомиссиии = Ложь;				
				Иначе
					ЗаголовокРазделаКомиссии = "";
				КонецЕсли;
				ОбластьМакета = Макет.ПолучитьОбласть("Комиссия");
				ОбластьМакета.Параметры.Заполнить(СтрокаТаблицыЗначений);
				СведенияОФизЛице = БухгалтерскийУчетСервер.ПолучитьСведенияОФизЛице(Шапка.Организация, СтрокаТаблицыЗначений.ФизЛицо, Шапка.ДатаДокумента); 
				ОбластьМакета.Параметры.ДолжностьНаименование = СведенияОФизЛице.Должность;											 
				ОбластьМакета.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии;
			    ТабличныйДокумент.Вывести(ОбластьМакета);				
			КонецЕсли;
		КонецЦикла;			
		
		ОбластьМакета = Макет.ПолучитьОбласть("ОССдал");
	    ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Первый = Истина;
		Для каждого СтрокаТаблицыЗначений Из ВременнаяТаблицаОС Цикл
			ОбластьМакета = Макет.ПолучитьОбласть("МОЛ");
			Если Первый Тогда
				ОбластьМакета.Параметры.МП 		= "МП";
				ОбластьМакета.Параметры.Принял 	= "Принял";
				Первый 							= Ложь;
			Иначе
				ОбластьМакета.Параметры.МП 		= "";
				ОбластьМакета.Параметры.Принял 	= "";
			КонецЕсли;
			ОбластьМакета.Параметры.Заполнить(СтрокаТаблицыЗначений);
			СтруктураМОЛ = ПроведениеРасчетовПоЗарплатеСервер.СведенияОСотруднике(Шапка.ДатаДокумента, Шапка.Организация, СтрокаТаблицыЗначений.МОЛ);
			ОбластьМакета.Параметры.Должность = СтруктураМОЛ.Должность;
			ТабличныйДокумент.Вывести(ОбластьМакета);		
		КонецЦикла;

		
		ОбластьМакета = Макет.ПолучитьОбласть("ПодписьГлавногоБухгалтера");
		Если НЕ СтруктураРуководители.Свойство("ГлавныйБухгалтер") = Неопределено Тогда
			ОбластьМакета.Параметры.БухгалтерФИО = СтруктураРуководители.ГлавныйБухгалтер;		
		КонецЕсли;			
	    ТабличныйДокумент.Вывести(ОбластьМакета);		
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;

	Возврат ТабличныйДокумент;
	
КонецФункции

// Функция формирует табличный документ с печатной формой ПКО
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьКарточкаНМА(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати 	= "ПринятиеКУчетуОС_КарточкаНМА";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПринятиеКУчетуОС.ПФ_MXL_КарточкаНМА");
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПринятиеКУчетуОС.Ссылка КАК Ссылка,
		|	ПринятиеКУчетуОС.Дата КАК ДатаДокумента,
		|	ВЫБОР
		|		КОГДА ПринятиеКУчетуОС.Организация.НаименованиеПолное = """"
		|			ТОГДА ПринятиеКУчетуОС.Организация.Наименование
		|		ИНАЧЕ ПринятиеКУчетуОС.Организация.НаименованиеПолное
		|	КОНЕЦ КАК ОрганизацияНаименованиеПолное,
		|	ПринятиеКУчетуОС.ОС.(
		|		ОсновноеСредство КАК НематериальныйАктив,
		|		ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
		|		НакопленнаяАмортизация КАК НакопленнаяАмортизация,
		|		СрокСлужбы КАК СрокСлужбы,
		|		СчетУчета.ПарныйСчет КАК СчетАмортизации,
		|		СчетУчета КАК Счет,
		|		Подразделение.Наименование КАК ПодразделениеПредставление,
		|		Подразделение.Родитель.Наименование КАК ПодразделениеРодительПредставление
		|	) КАК ОС
		|ИЗ
		|	Документ.ПринятиеКУчетуОС КАК ПринятиеКУчетуОС
		|ГДЕ
		|	ПринятиеКУчетуОС.Ссылка В (&МассивОбъектов)";			
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Шапка = Запрос.Выполнить().Выбрать();
	
	Пока Шапка.Следующий() Цикл
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		ВыборкаОС = Шапка.ОС.Выбрать();
		КоличествоСтрок = ВыборкаОС.Количество();
		НомерСтроки = 1;
		
		Пока ВыборкаОС.Следующий() Цикл
			ОбластьМакета.Параметры.Заполнить(ВыборкаОС);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Если НомерСтроки < КоличествоСтрок Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;	
			
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;	
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, ТабличныйДокумент.ВысотаТаблицы + 1, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;

	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Устанавливаем признак доступности печати покомплектно.
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	// Проверяем, нужно ли для макета ПКО формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктПриемкиПередачиОС") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"АктПриемкиПередачиОС", НСтр("ru = 'Акт приемки-передачи ОС'"), ПечатьАктаПриемкиПередачиОС(МассивОбъектов, ОбъектыПечати),,
			"Документ.ПринятиеКУчетуОС.ПФ_MXL_АктПриемкиПередачи");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КарточкаНМА") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"КарточкаНМА", НСтр("ru = 'Карточка НМА'"), ПечатьКарточкаНМА(МассивОбъектов, ОбъектыПечати),,
			"Документ.ПринятиеКУчетуОС.ПФ_MXL_КарточкаНМА");
	КонецЕсли;
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктПриемкиПередачиОС";
	КомандаПечати.Представление = НСтр("ru = 'Акт приемки-передачи ОС'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 1;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "КарточкаНМА";
	КомандаПечати.Представление = НСтр("ru = 'Карточка НМА'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 2;
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "РеестрПринятиеКУчетуОС";
	КомандаПечати.Представление  = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Реестр документов ""Принятие к учету ОС""'");
	КомандаПечати.Обработчик     = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
КонецПроцедуры

#КонецОбласти

#КонецЕсли
