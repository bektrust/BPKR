#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ЗаполненияДокумента

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.ПоступлениеТоваровУслуг - Данные заполнения документа.
//	
Процедура ЗаполнитьПоПоступлениюТоваровУслуг(ДанныеЗаполнения) Экспорт
	
	ДокументОснование = ДанныеЗаполнения;

	Организация = ДанныеЗаполнения.Организация;
	Склад = ДанныеЗаполнения.Склад;
	СчетУчета = ДанныеЗаполнения.СчетРасчетов;
	
	НовыйИнвентарныйНомер = БухгалтерскийУчетСервер.НовыйИнвентарныйНомерОС();
	ПервыйИнвентарныйНомер = Истина;
	НомерСтрока = СокрЛП(НовыйИнвентарныйНомер);	
	
	Если ЗначениеЗаполнено(НомерСтрока) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(НомерСтрока) Тогда
		ДлинаСтроки = СтрДлина(НомерСтрока);
		НомерЧисло = Число(НомерСтрока);
	Иначе
		ДлинаСтроки = 20;
	    НомерЧисло = 0;
	КонецЕсли;
	
	ПрисваиватьИнвентарныеНомераДляНМА = Константы.ПрисваиватьИнвентарныеНомераДляНМА.Получить();
	СчетаУчетаНематериальныхАктивов = БухгалтерскийУчетСервер.СчетаУчетаНематериальныхАктивов();	
	
	// ОС.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаДокумента.Сумма + ТаблицаДокумента.СуммаНСП КАК ПервоначальнаяСтоимость,
		|	ТаблицаДокумента.СчетУчета КАК СчетУчета,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.Линейный) КАК СпособНачисленияАмортизации
		|ПОМЕСТИТЬ ВременнаяТаблицаПоступления
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.ОС КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство,
		|	СчетУчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.СуммаОстаток КАК Стоимость,
		|	ХозрасчетныйОстатки.Субконто1 КАК ОсновноеСредство
		|ПОМЕСТИТЬ ВременнаяТаблицаСтоимость
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&Период,
		|			Счет В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					ВременнаяТаблицаПоступления.СчетУчета
		|				ИЗ
		|					ВременнаяТаблицаПоступления),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
		|			Организация = &Организация
		|				И Субконто1 В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаПоступления.ОсновноеСредство
		|					ИЗ
		|						ВременнаяТаблицаПоступления)) КАК ХозрасчетныйОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПоступления.ОсновноеСредство КАК ОсновноеСредство,
		|	ВременнаяТаблицаСтоимость.Стоимость КАК ПервоначальнаяСтоимость,
		|	ТаблицаПоступления.СчетУчета КАК СчетУчета,
		|	ТаблицаПоступления.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации
		|ИЗ
		|	ВременнаяТаблицаПоступления КАК ТаблицаПоступления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСтоимость КАК ВременнаяТаблицаСтоимость
		|		ПО ТаблицаПоступления.ОсновноеСредство = ВременнаяТаблицаСтоимость.ОсновноеСредство";
	Запрос.УстановитьПараметр("Ссылка", 		ДокументОснование);
	Запрос.УстановитьПараметр("Период", 		ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Организация", 	Организация);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрокаТабличнойЧасти = ОС.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаДетальныеЗаписи);
		
		// Присвоение инвентарного номера
		ЭтоНМА = НЕ СчетаУчетаНематериальныхАктивов.Найти(СтрокаТабличнойЧасти.СчетУчета) = Неопределено;
		Если НЕ ЭтоНМА ИЛИ (ЭтоНМА И ПрисваиватьИнвентарныеНомераДляНМА) Тогда
			Если ПервыйИнвентарныйНомер Тогда
				СтрокаТабличнойЧасти.ИнвентарныйНомер = НовыйИнвентарныйНомер;
				ПервыйИнвентарныйНомер = Ложь;
			Иначе
				НовыйНомер = НомерЧисло + 1;
				СтрокаТабличнойЧасти.ИнвентарныйНомер = Формат(НовыйНомер, "ЧЦ=" + ДлинаСтроки + "; ЧВН=; ЧГ=0");			
			КонецЕсли;	
		Иначе
			СтрокаТабличнойЧасти.ИнвентарныйНомер = "";	
		КонецЕсли;

	КонецЦикла;
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.ИнвентаризацияОС - Данные заполнения документа.
//	
Процедура ЗаполнитьПоИнвентаризацииОС(ДанныеЗаполнения) Экспорт

	Организация = ДанныеЗаполнения.Организация;
	ДокументОснование = ДанныеЗаполнения;
	ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ПоРезультатамИнвентаризации;
	СчетУчета = ПланыСчетов.Хозрасчетный.ПрочиеДоходыОтНеоперационнойДеятельности;
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.ОС Цикл
		Если СтрокаТабличнойЧасти.ИзлишекСумма = 0 Тогда 
			Продолжить;
		КонецЕсли;	
		НоваяСтрокаТабличнойЧасти = ОС.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
		НоваяСтрокаТабличнойЧасти.Подразделение = ДанныеЗаполнения.Подразделение;
		НоваяСтрокаТабличнойЧасти.ПервоначальнаяСтоимость = СтрокаТабличнойЧасти.ИзлишекСумма;
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Комиссия Цикл
		НоваяСтрокаТабличнойЧасти = Комиссия.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
	КонецЦикла;

	УправлениеВнеоборотнымиАктивами.ЗаполнитьДанныеОсновныхСредствВТабличнойЧасти(Ссылка, ДанныеЗаполнения.Дата, ДанныеЗаполнения.Организация, ОС);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПрисваиватьИнвентарныеНомераДляНМА = Константы.ПрисваиватьИнвентарныеНомераДляНМА.Получить();
	СчетаУчетаНематериальныхАктивов = БухгалтерскийУчетСервер.СчетаУчетаНематериальныхАктивов();
	Если НЕ ПрисваиватьИнвентарныеНомераДляНМА Тогда 
		Для каждого СтрокаТабличнойЧасти Из ОС Цикл
			ЭтоНМА = НЕ СчетаУчетаНематериальныхАктивов.Найти(СтрокаТабличнойЧасти.СчетУчета) = Неопределено;
			Если ЭтоНМА И НЕ СтрокаТабличнойЧасти.ИнвентарныйНомер = "" Тогда
				СтрокаТабличнойЧасти.ИнвентарныйНомер = "";
			КонецЕсли;		
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
			
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.ПоступлениеТоваровУслуг")] = "ЗаполнитьПоПоступлениюТоваровУслуг";
	СтратегияЗаполнения[Тип("ДокументСсылка.ИнвентаризацияОС")] = "ЗаполнитьПоИнвентаризацииОС";

	ЗаполнениеОбъектовБП.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	ПроверяемыеРеквизиты.Добавить("ОС");
	
	Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОсновныеСредства Тогда
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "СчетУчета");
	КонецЕсли;	
		
	// Выполнение предварительного контроля.
	ВыполнитьПредварительныйКонтроль(Отказ);
	ВыполнитьКонтрольИнвентарныхНомеров(Отказ);
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ИнициализироватьДанные(Отказ, РежимПроведения);
	
	ОтразитьДвижения(Отказ, РежимПроведения);

	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
КонецПроцедуры // ОбработкаУдаленияПроведения()
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункцииОбработкаПроведения

// Процедура инициализирует данные документа
// и подготавливает таблицы для движения в регистры
//
Процедура ИнициализироватьДанные(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.ПринятиеКУчетуОС.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
КонецПроцедуры
	
// Процедура заполняет регистры данными
//
Процедура ОтразитьДвижения(Отказ, РежимПроведения)
	
	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьПараметрыУчетаОС(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьСостоянияОС(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьМестонахождениеОС(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьСобытияОС(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьСведенияОбИмуществе(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьСведенияОТранспорте(ДополнительныеСвойства, Движения, Отказ);	
	БухгалтерскийУчетСервер.ОтразитьДвижениеОСНУ(ДополнительныеСвойства, Движения, Отказ); 
	
	УчетТоваров.СформироватьДвиженияСписаниеТоваров(ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСписанныеТовары, 
		ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРеквизиты, Движения, Отказ, ДополнительныеСвойства);
	БухгалтерскийУчетСервер.ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Отказ);
	
	// Земельный налог
	БухгалтерскийУчетСервер.ОтразитьПараметрыУчетаОСЗемельныйНалог(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьПараметрыУчетаОСЗемельныйНалогПодОбъектомИмущества(ДополнительныеСвойства, Движения, Отказ);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет контроль противоречий.
//
Процедура ВыполнитьПредварительныйКонтроль(Отказ)
	
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(Дата, Организация);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДокумента.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаДокумента.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
		|	ТаблицаДокумента.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
		|	ТаблицаДокумента.СрокСлужбы КАК СрокСлужбы,
		|	ТаблицаДокумента.ОбъемПродукции КАК ОбъемПродукции,
		|	ТаблицаДокумента.ГруппаИмущества КАК ГруппаИмущества,
		|	ТаблицаДокумента.ДатаНачисленияНалогаНаИмущество КАК ДатаНачисленияНалогаНаИмущество
		|ПОМЕСТИТЬ ВременнаяТаблицаОС
		|ИЗ
		|	&ТаблицаДокумента КАК ТаблицаДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВременнаяТаблицаОС1.НомерСтроки) КАК НомерСтроки,
		|	ВременнаяТаблицаОС1.ОсновноеСредство КАК ОсновноеСредство
		|ИЗ
		|	ВременнаяТаблицаОС КАК ВременнаяТаблицаОС1
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ПО ВременнаяТаблицаОС1.НомерСтроки <> ВременнаяТаблицаОС.НомерСтроки
		|			И ВременнаяТаблицаОС1.ОсновноеСредство = ВременнаяТаблицаОС.ОсновноеСредство
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаОС1.ОсновноеСредство
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаОС.НомерСтроки КАК НомерСтроки,
		|	ВременнаяТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ЕСТЬNULL(СостоянияОССрезПоследних.Состояние, &ПустоеСостояние) КАК Состояние
		|ИЗ
		|	ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОС.СрезПоследних(
		|				&Период,
		|				Организация = &Организация
		|					И ОсновноеСредство В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							ВременнаяТаблицаОС.ОсновноеСредство
		|						ИЗ
		|							ВременнаяТаблицаОС КАК ВременнаяТаблицаОС)
		|					И НЕ Регистратор = &Ссылка) КАК СостоянияОССрезПоследних
		|		ПО ВременнаяТаблицаОС.ОсновноеСредство = СостоянияОССрезПоследних.ОсновноеСредство
		|ГДЕ
		|	&ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПринятияКУчетуОсновныхСредств.ОсновныеСредства)
		|	И (СостоянияОССрезПоследних.Состояние ЕСТЬ NULL
		|			ИЛИ НЕ СостоянияОССрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.Поступило))
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаОС.НомерСтроки КАК НомерСтроки,
		|	ВременнаяТаблицаОС.ОсновноеСредство КАК ОсновноеСредство
		|ИЗ
		|	ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|ГДЕ
		|	ВременнаяТаблицаОС.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.Линейный)
		|	И ВременнаяТаблицаОС.СрокСлужбы = 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаОС.НомерСтроки КАК НомерСтроки,
		|	ВременнаяТаблицаОС.ОсновноеСредство КАК ОсновноеСредство
		|ИЗ
		|	ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|ГДЕ
		|	ВременнаяТаблицаОС.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.Производственный)
		|	И ВременнаяТаблицаОС.ОбъемПродукции = 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаОС.НомерСтроки КАК НомерСтроки,
		|	ВременнаяТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ВременнаяТаблицаОС.ГруппаИмущества КАК ГруппаИмущества,
		|	ВременнаяТаблицаОС.ДатаНачисленияНалогаНаИмущество КАК ДатаНачисленияНалогаНаИмущество
		|ИЗ
		|	ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|ГДЕ
		|	НЕ ВременнаяТаблицаОС.ДатаНачисленияНалогаНаИмущество = ДАТАВРЕМЯ(1, 1, 1)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ТаблицаДокумента", ОС);
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидОперации", ВидОперации);
	Запрос.УстановитьПараметр("ПустоеСостояние", НСтр("ru = 'Без поступления'"));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Дубли строк ОС.
	ВыборкаИзРезультатаЗапроса = МассивРезультатов[1].Выбрать();
	Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Основное средство указывается повторно в строке %1 списка ""ОС"".'"), 
						ВыборкаИзРезультатаЗапроса.НомерСтроки);
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
			ЭтотОбъект,
			ТекстСообщения,
			"ОС",
			ВыборкаИзРезультатаЗапроса.НомерСтроки,
			"ОсновноеСредство",
			Отказ);
	КонецЦикла;
	
	// Проверка состояния ОС.
	ВыборкаИзРезультатаЗапроса = МассивРезультатов[2].Выбрать();
	Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Для основного средства ""%1"", указанного в строке %2 списка ""ОС"", текущее состояние ""%3"".'"), 
			ВыборкаИзРезультатаЗапроса.ОсновноеСредство,
			ВыборкаИзРезультатаЗапроса.НомерСтроки,
			ВыборкаИзРезультатаЗапроса.Состояние);
			
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
			ЭтотОбъект,
			ТекстСообщения,
			"ОС",
			ВыборкаИзРезультатаЗапроса.НомерСтроки,
			"ОсновноеСредство",
			Отказ);
	КонецЦикла;

	// Линейный. Должен быть указан срок службы.
	ВыборкаИзРезультатаЗапроса = МассивРезультатов[3].Выбрать();
	Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнена колонка ""Срок службы"" в строке %1 списка ""ОС"".'"), 
						ВыборкаИзРезультатаЗапроса.НомерСтроки);
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
			ЭтотОбъект,
			ТекстСообщения,
			"ОС",
			ВыборкаИзРезультатаЗапроса.НомерСтроки,
			"СрокСлужбы",
			Отказ);
	КонецЦикла;
	
	// Производственный. Должен быть указан объем продукции.
	ВыборкаИзРезультатаЗапроса = МассивРезультатов[4].Выбрать();
	Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнена колонка ""Объем продукции"" в строке %1 списка ""ОС"".'"), 
						ВыборкаИзРезультатаЗапроса.НомерСтроки);
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
			ЭтотОбъект,
			ТекстСообщения,
			"ОС",
			ВыборкаИзРезультатаЗапроса.НомерСтроки,
			"ОбъемПродукции",
			Отказ);
	КонецЦикла;	
		
	// Проверка заполнения "Начисления НИ с даты".
	ВыборкаИзРезультатаЗапроса = МассивРезультатов[5].Выбрать();
	Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
		Если (ВыборкаИзРезультатаЗапроса.ГруппаИмущества = Справочники.ГруппыИмущества.ГИ2 
			ИЛИ ВыборкаИзРезультатаЗапроса.ГруппаИмущества = Справочники.ГруппыИмущества.ГИ3) 
			И НЕ (ВыборкаИзРезультатаЗапроса.ДатаНачисленияНалогаНаИмущество = НачалоКвартала(ВыборкаИзРезультатаЗапроса.ДатаНачисленияНалогаНаИмущество)
			// Период может быть любой квартал текущего года
			И (Год(ВыборкаИзРезультатаЗапроса.ДатаНачисленияНалогаНаИмущество) = Год(Дата)		
			// либо период может быть любой квартал следующего года
			Или Год(ВыборкаИзРезультатаЗапроса.ДатаНачисленияНалогаНаИмущество) = (Год(Дата)+1))) Тогда			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'У основного средства ""%1"" с группой иумщества %2 значение ""Начисление НИ с даты"" должно быть пустым или началом квартала текущего года, или началом квартала следующего года.'"), 
													ВыборкаИзРезультатаЗапроса.ОсновноеСредство, ВыборкаИзРезультатаЗапроса.ГруппаИмущества);
			БухгалтерскийУчетСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения,,,, Отказ);
		ИначеЕсли (ВыборкаИзРезультатаЗапроса.ГруппаИмущества = Справочники.ГруппыИмущества.ГИ4с
			ИЛИ ВыборкаИзРезультатаЗапроса.ГруппаИмущества = Справочники.ГруппыИмущества.ГИ4нс)
			И НЕ ВыборкаИзРезультатаЗапроса.ДатаНачисленияНалогаНаИмущество = КонецГода(Дата) + 1 Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'У основного средства ""%1"" с группой имущества %2 значение ""Начисление НИ с даты"" должно быть пустым или началом следующего года.'"), 
													ВыборкаИзРезультатаЗапроса.ОсновноеСредство, ВыборкаИзРезультатаЗапроса.ГруппаИмущества);
			БухгалтерскийУчетСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения,,,, Отказ);
		КонецЕсли;			
	КонецЦикла;			
	
	// Проверка заполнения группы НУ, если первоначальная стоимость больше минимальной стоимости ОС для НУ.
	Для Каждого СтрокаТабличнойЧасти Из ОС Цикл
		
		Если СтрокаТабличнойЧасти.СчетУчета <> ПланыСчетов.Хозрасчетный.Земля 
			И ДанныеУчетнойПолитики.МинимумСтоимостиОСДляНУ <= СтрокаТабличнойЧасти.ПервоначальнаяСтоимость 
			И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ГруппаНУ) Тогда
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'У основного средства ""%1"" не заполнена группа НУ.'"), 
												СтрокаТабличнойЧасти.ОсновноеСредство);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);	
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры // ВыполнитьПредварительныйКонтроль()

Процедура ВыполнитьКонтрольИнвентарныхНомеров(Отказ)
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ПрисваиватьИнвентарныеНомераДляНМА = Константы.ПрисваиватьИнвентарныеНомераДляНМА.Получить();
	СчетаУчетаНематериальныхАктивов = БухгалтерскийУчетСервер.СчетаУчетаНематериальныхАктивов();	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДокумента.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаДокумента.СчетУчета КАК СчетУчета,
		|	ТаблицаДокумента.ИнвентарныйНомер КАК ИнвентарныйНомер
		|ПОМЕСТИТЬ ВременнаяТаблицаОС
		|ИЗ
		|	&ВременнаяТаблицаОС КАК ТаблицаДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаОС.НомерСтроки КАК НомерСтроки,
		|	ВременнаяТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ВременнаяТаблицаОС.СчетУчета КАК СчетУчета,
		|	ВременнаяТаблицаОС.ИнвентарныйНомер КАК ИнвентарныйНомер
		|ИЗ
		|	ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаОС.НомерСтроки КАК НомерСтроки,
		|	ВременнаяТаблицаОС.ИнвентарныйНомер КАК ИнвентарныйНомер
		|ИЗ
		|	ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыУчетаОС.СрезПоследних(
		|				,
		|				НЕ ОсновноеСредство В
		|						(ВЫБРАТЬ
		|							ВременнаяТаблицаОС.ОсновноеСредство КАК ОсновноеСредство
		|						ИЗ
		|							ВременнаяТаблицаОС КАК ВременнаяТаблицаОС)) КАК ПараметрыУчетаОССрезПоследних
		|		ПО ВременнаяТаблицаОС.ИнвентарныйНомер = ПараметрыУчетаОССрезПоследних.ИнвентарныйНомер
		|ГДЕ
		|	НЕ ПараметрыУчетаОССрезПоследних.ИнвентарныйНомер ЕСТЬ NULL
		|	И НЕ ВременнаяТаблицаОС.ИнвентарныйНомер = """"
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ТаблицаДокумента1.НомерСтроки) КАК НомерСтроки,
		|	ТаблицаДокумента1.ИнвентарныйНомер КАК ИнвентарныйНомер
		|ИЗ
		|	ВременнаяТаблицаОС КАК ТаблицаДокумента1
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ТаблицаДокумента2
		|		ПО ТаблицаДокумента1.НомерСтроки <> ТаблицаДокумента2.НомерСтроки
		|			И ТаблицаДокумента1.ИнвентарныйНомер = ТаблицаДокумента2.ИнвентарныйНомер
		|ГДЕ
		|	НЕ ТаблицаДокумента1.ИнвентарныйНомер = """"
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДокумента1.ИнвентарныйНомер
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	Запрос.УстановитьПараметр("ВременнаяТаблицаОС", ОС.Выгрузить());
	МассивРезультатов = Запрос.ВыполнитьПакет();
			
	// Заполнение инвентарных номеров.
	ВыборкаИзРезультатаЗапроса = МассивРезультатов[1].Выбрать();
	Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
		ЭтоНМА = НЕ СчетаУчетаНематериальныхАктивов.Найти(ВыборкаИзРезультатаЗапроса.СчетУчета) = Неопределено;
		Если (НЕ ЭтоНМА ИЛИ ЭтоНМА И ПрисваиватьИнвентарныеНомераДляНМА) 
			И НЕ ЗначениеЗаполнено(ВыборкаИзРезультатаЗапроса.ИнвентарныйНомер) Тогда
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Инвентарный номер не заполнен в строке %1 списка ""ОС"".'"), 
							ВыборкаИзРезультатаЗапроса.НомерСтроки);
			БухгалтерскийУчетСервер.СообщитьОбОшибке(
				ЭтотОбъект,
				ТекстСообщения,
				"ОС",
				ВыборкаИзРезультатаЗапроса.НомерСтроки,
				"ИнвентарныйНомер",
				Отказ);		
		КонецЕсли;

	КонецЦикла;		
		
	// Инвентарный номер уже используется.
	ВыборкаИзРезультатаЗапроса = МассивРезультатов[2].Выбрать();
	Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Инвентарный номер в строке %1 списка ""ОС"" уже используется.'"), 
						ВыборкаИзРезультатаЗапроса.НомерСтроки);
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
			ЭтотОбъект,
			ТекстСообщения,
			"ОС",
			ВыборкаИзРезультатаЗапроса.НомерСтроки,
			"ИнвентарныйНомер",
			Отказ);
	КонецЦикла;	

	// Дубли инвентарных номеров.
	ВыборкаИзРезультатаЗапроса = МассивРезультатов[3].Выбрать();
	Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Инвентарный номер указывается повторно в строке %1 списка ""ОС"".'"), 
						ВыборкаИзРезультатаЗапроса.НомерСтроки);
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
			ЭтотОбъект,
			ТекстСообщения,
			"ОС",
			ВыборкаИзРезультатаЗапроса.НомерСтроки,
			"ИнвентарныйНомер",
			Отказ);
		КонецЦикла;

КонецПроцедуры

#КонецОбласти
	
#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли