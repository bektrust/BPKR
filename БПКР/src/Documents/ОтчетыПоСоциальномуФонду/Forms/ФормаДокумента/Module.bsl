#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиПоПерсоналу(ДатаДокумента, Объект.Организация);
	УстановитьПараметрыДинамическихСписков();

	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	// РаботаСФормами
	РаботаСФормамиСервер.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом 
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	
	// РаботаСФормами
	РаботаСФормамиСервер.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
	
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиПоПерсоналу(ДатаДокумента, Объект.Организация);
	УстановитьПараметрыДинамическихСписков();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ДатаСдачиОтчета.
//
&НаКлиенте
Процедура ДатаСдачиОтчетаПриИзменении(Элемент)
	УстановитьПараметрыДинамическихСписков();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
	
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиПоПерсоналу(ДатаДокумента, Объект.Организация);
	УстановитьПараметрыДинамическихСписков();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЕжемесячныеПлатежиВСФ

&НаКлиенте
Процедура ЕжемесячныеПлатежиВСФВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	НаименованиеДинамическогоСписка = "ЕжемесячныеПлатежиВСФ";
	ДокументМенеджер = ДанныеДинамическогоСписка(ВыбраннаяСтрока, НаименованиеДинамическогоСписка);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Элемент.ТекущиеДанные.Ссылка);
	ОткрытьФорму(ДокументМенеджер + ".ФормаОбъекта", ПараметрыФормы, Элемент);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Объект.СведенияОЗанятостиИЗаработнойПлате.Количество() > 0 
		Или Объект.ФондОплатыТрудаПоКатегориям.Количество() > 0  Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросЗаполнить", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Табличные части документа будут очищены. Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	Иначе
		ЗаполнитьСоцфондНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЕжемесячныйСоцфонд_Excel(Команда)
	
	Если ТребуетсяНастройкаАвторизацияИнтернетПоддержки() Тогда
		ТекстВопроса = НСтр("ru='Для формирования отчета в электронной форме
			|необходимо подключиться к Интернет-поддержке пользователей.
			|Подключиться сейчас?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриПодключенииИнтернетПоддержки", ЭтотОбъект, Новый Структура("НаправлениеВыгрузки", "ЕжемесячныйСоцфонд_Excel"));
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Подключиться'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
	Иначе
		ПродолжитьВыгрузку("ЕжемесячныйСоцфонд_Excel");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЕжемесячныйСоцфонд_xml(Команда)
	
	Если ТребуетсяНастройкаАвторизацияИнтернетПоддержки() Тогда
		ТекстВопроса = НСтр("ru='Для формирования отчета в электронной форме
			|необходимо подключиться к Интернет-поддержке пользователей.
			|Подключиться сейчас?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриПодключенииИнтернетПоддержки", ЭтотОбъект, Новый Структура("НаправлениеВыгрузки", "ЕжемесячныйСоцфонд_xml"));
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Подключиться'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
	Иначе
		ПродолжитьВыгрузку("ЕжемесячныйСоцфонд_xml");
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ЕжемесячныйСоцФонд_Excel_Нов(Команда)
	
	Если ТребуетсяНастройкаАвторизацияИнтернетПоддержки() Тогда
		ТекстВопроса = НСтр("ru='Для формирования отчета в электронной форме
			|необходимо подключиться к Интернет-поддержке пользователей.
			|Подключиться сейчас?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриПодключенииИнтернетПоддержки", ЭтотОбъект, Новый Структура("НаправлениеВыгрузки", "ЕжемесячныйСоцфонд_Excel_Нов"));
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Подключиться'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
	Иначе
		ПродолжитьВыгрузку("ЕжемесячныйСоцфонд_Excel_Нов");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОтветНаВопросЗаполнить(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.СведенияОЗанятостиИЗаработнойПлате.Очистить();
		Объект.ФондОплатыТрудаПоКатегориям.Очистить();
		
		ЗаполнитьСоцфондНаСервере();
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОткрытьПроводник(ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ПолноеИмяФайла) Тогда 
		ФайловаяСистемаКлиент.ОткрытьПроводник(ДополнительныеПараметры.ПолноеИмяФайла);
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура для установления параметров динамических списков.
//
&НаСервере
Процедура УстановитьПараметрыДинамическихСписков()

	МассивСчетов = Новый Массив();
	МассивСчетов.Добавить(ДанныеУчетнойПолитики.СчетУчетаРасчетовПФФ);
	МассивСчетов.Добавить(ДанныеУчетнойПолитики.СчетУчетаРасчетовМСФ);
	МассивСчетов.Добавить(ДанныеУчетнойПолитики.СчетУчетаРасчетовФОТФ);
	МассивСчетов.Добавить(ДанныеУчетнойПолитики.СчетУчетаРасчетовГНПФР);
	
	Если Объект.ДатаСдачиОтчета = '00010101' Тогда
		КонецПериода = КонецМесяца(Объект.Дата);
	Иначе
		КонецПериода = Объект.ДатаСдачиОтчета;
	КонецЕсли;
	
	Если НЕ Объект.Дата = '00010101' Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ОтчетыПоСоциальномуФонду.Ссылка,
			|	ВЫБОР
			|		КОГДА ОтчетыПоСоциальномуФонду.ДатаСдачиОтчета = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА ОтчетыПоСоциальномуФонду.Дата
			|		ИНАЧЕ ОтчетыПоСоциальномуФонду.ДатаСдачиОтчета
			|	КОНЕЦ КАК ДатаНачалаЕжемесячныхПлатежей
			|ИЗ
			|	Документ.ОтчетыПоСоциальномуФонду КАК ОтчетыПоСоциальномуФонду
			|ГДЕ
			|	ОтчетыПоСоциальномуФонду.Дата <= &ДатаНачалаОтчета
			|	И НЕ ОтчетыПоСоциальномуФонду.ПометкаУдаления
			|
			|УПОРЯДОЧИТЬ ПО
			|	ОтчетыПоСоциальномуФонду.Дата УБЫВ";
		Запрос.УстановитьПараметр("ДатаНачалаОтчета", НачалоМесяца(Объект.Дата));
		
		Результат = Запрос.Выполнить().Выбрать();
		Результат.Следующий();

		ЕжемесячныеПлатежиВСФ.Параметры.УстановитьЗначениеПараметра("НачалоПериода", Результат.ДатаНачалаЕжемесячныхПлатежей);
	Иначе
		ЕжемесячныеПлатежиВСФ.Параметры.УстановитьЗначениеПараметра("НачалоПериода", НачалоМесяца(Объект.Дата));	
	КонецЕсли;
	
	ЕжемесячныеПлатежиВСФ.Параметры.УстановитьЗначениеПараметра("КонецПериода", КонецПериода);
	ЕжемесячныеПлатежиВСФ.Параметры.УстановитьЗначениеПараметра("СписокСчетов", МассивСчетов);
	ЕжемесячныеПлатежиВСФ.Параметры.УстановитьЗначениеПараметра("Организация", Объект.Организация);
	
КонецПроцедуры

// Функция считывает данные динамического списка.
//
// Параметры:
//  	ВыбраннаяСтрока - Число - номер выбираемой строки в динамичеком списке.
//  	НаименованиеДинамическогоСписка - Строка - название динамического списка.
//
// Возвращаемое значение:
//		ДокументМенеджер - Строка, название документа, для его открытия.
//
&НаСервере
Функция ДанныеДинамическогоСписка(ВыбраннаяСтрока, НаименованиеДинамическогоСписка)
	
	Схема = Элементы.ЕжемесячныеПлатежиВСФ.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = Элементы.ЕжемесячныеПлатежиВСФ.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
			
	ВыбраннаяСтрока = ВыбраннаяСтрока - 1;	
	Если ТипЗнч(Результат[ВыбраннаяСтрока].Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
		ДокументМенеджер = "Документ.ПлатежноеПоручениеИсходящее";
	Иначе
		ДокументМенеджер = "Документ.РасходныйКассовыйОрдер";
	КонецЕсли;
	
	Возврат ДокументМенеджер;
		
КонецФункции

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура - Установить пиктограмму комментария.
//
&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоцфондНаСервере()
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьСоцфонд(ДанныеУчетнойПолитики);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Функция ТребуетсяНастройкаАвторизацияИнтернетПоддержки()
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
		Возврат Не МодульИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура ПриПодключенииИнтернетПоддержки(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПодключенияИнтернетПоддержки", ЭтотОбъект, ДополнительныеПараметры);
		МодульИнтернетПоддержкаПользователейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтернетПоддержкаПользователейКлиент");
		МодульИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОписаниеОповещения, ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияИнтернетПоддержки(Результат, ДополнительныеПараметры) Экспорт
	Если Не (ТипЗнч(Результат) = Тип("Структура")
		И ЗначениеЗаполнено(Результат.Логин)) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.НаправлениеВыгрузки = "ЕжемесячныйСоцфонд_xml" Тогда
		ПродолжитьСохранение(ДополнительныеПараметры.НаправлениеВыгрузки);	
	Иначе
		ПродолжитьВыгрузку(ДополнительныеПараметры.НаправлениеВыгрузки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДиалогОткрытияФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ВидДиалога = "ЕжемесячныйСоцфонд_Excel"
		ИЛИ ДополнительныеПараметры.ВидДиалога = "ЕжемесячныйСоцфонд_Excel_Нов" Тогда 
		
		Если ВыбранныеФайлы <> Неопределено И ВыбранныеФайлы.Количество() > 0 Тогда
			ФормированиеФайла(ВыбранныеФайлы[0], ДополнительныеПараметры);
		КонецЕсли;
				
	Иначе	      		
		Если ВыбранныеФайлы <> Неопределено И ВыбранныеФайлы.Количество() > 0 Тогда
			Попытка
				Ошибки = Неопределено;
				СтруктураДанных = ФормированиеФайлаXML(ДополнительныеПараметры, Ошибки);
			Исключение
				ТекстСообщения = НСтр("ru='Не удалось завершить формирование файла.
					|Техническая информация об ошибке: %1'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
				
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
				Возврат;
			КонецПопытки;
			
			Если НЕ Ошибки = Неопределено Тогда 
				ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);	
				Возврат;
			КонецЕсли;		
			
			// Формирование имени файла.
			КаталогФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ВыбранныеФайлы[0]);
			ИмяФайла = СтруктураДанных.ИмяФайла;
			ПолноеИмяФайла = КаталогФайла + ИмяФайла;
			
			// Сохранение файла.
			Двоичное = ПолучитьИзВременногоХранилища(СтруктураДанных.АдресВременногоХранилища);
			Двоичное.Записать(ПолноеИмяФайла);	
			
			ТекстОповещения = НСтр("ru = 'Файл успешно сформирован'");
			ТекстПояснения = ИмяФайла;
			ПоказатьОповещениеПользователя(
				ТекстОповещения, 
				Новый ОписаниеОповещения("ОткрытьПроводник", ЭтотОбъект, Новый Структура("ПолноеИмяФайла", ПолноеИмяФайла)), 
				ТекстПояснения, 
				БиблиотекаКартинок.Информация32);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьСохранение(НаправлениеВыгрузки)
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Укажите путь для сохранения файла'");
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ВидДиалога", НаправлениеВыгрузки);
	
	Оповещение = Новый ОписаниеОповещения("ДиалогОткрытияФайлаЗавершение", ЭтотОбъект, СтруктураПараметров);
	ДиалогОткрытияФайла.Показать(Оповещение);

КонецПроцедуры // ПродолжитьСохранение()

&НаКлиенте
Процедура ПродолжитьВыгрузку(НаправлениеВыгрузки)
	
	Если Объект.Ссылка.Пустая() Или Модифицированность Тогда  
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Выполнение действия возможно только после записи данных.
			|Данные будут записаны.'");
		Обработчик = Новый ОписаниеОповещения("ПродолжитьВыполнениеКомандыПослеПодтвержденияЗаписи", ЭтотОбъект, Новый Структура("ВидДиалога", НаправлениеВыгрузки));
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;		
	
	ПродолжитьВыгрузкуЗавершение(НаправлениеВыгрузки);

КонецПроцедуры // ПродолжитьВыгрузку()

// Ветка процедуры, возникающая после диалога подтверждения записи.
&НаКлиенте
Процедура ПродолжитьВыполнениеКомандыПослеПодтвержденияЗаписи(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ОчиститьСообщения();
		Записать();
		Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
			Возврат; // Запись не удалась, сообщения о причинах выводит платформа.
		КонецЕсли;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	ПродолжитьВыгрузкуЗавершение(ДополнительныеПараметры.ВидДиалога)
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьВыгрузкуЗавершение(НаправлениеВыгрузки)
 
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВидДиалога", НаправлениеВыгрузки);
	
	Оповещение = Новый ОписаниеОповещения("НачатьПодключениеРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
КонецПроцедуры 

&НаКлиенте
Процедура НачатьПодключениеРасширенияРаботыСФайламиЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
	Если НЕ Подключено Тогда
		Оповещение = Новый ОписаниеОповещения("НачатьУстановкуРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстСообщения = НСтр("ru = 'Для продолжении работы необходимо установить расширение для веб-клиента ""1С:Предприятие"". Установить?'");
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет); 
	КонецЕсли;
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Укажите путь для сохранения файла'");
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ДиалогОткрытияФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ДиалогОткрытияФайла.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьУстановкуРасширенияРаботыСФайламиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		НачатьУстановкуРасширенияРаботыСФайлами();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеФайла(КаталогФайлаВыгрузки, ДополнительныеПараметры)
	
	#Если ТонкийКлиент Тогда
		КаталогФайлаВыгрузки = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогФайлаВыгрузки);
		
		// Открытие приложения Excel
		Попытка
			Excel = Новый COMОбъект("Excel.Application");
		Исключение
			ВызватьИсключение НСтр("ru = 'Не удалось подключить COM-объект Excel.
				|Вероятные причины:
				| - На компьютере не установлен Microsoft Office или установлена не полная версия;
				| - У пользователя недостаточно прав на создание COM-объектов;
				| - Включен контроль учетных записей Windows;
				| - Операционная система не из семейства Windows.
				|
				|Техническая информация:
				|'") + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
		Excel.Visible = 0;
		Excel.DisplayAlerts = 0;
		Excel.DefaultSaveFormat = 51;
		
		Расширение = "xlsx";
		ТипФайла = ТипФайлаТабличногоДокумента.XLSX;
		
		// Проверка версии
		ВерсияExcel = Лев(Excel.Version, Найти(Excel.Version,".") -1);
		Если ВерсияExcel < "16" Тогда
			ТекстСообщения = НСтр("ru = 'Используется устаревшая версия Excel. Возможны ошибки.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			// для сохранения в старом формате
			Excel.DefaultSaveFormat = 56;
			Расширение = "xls";  
			ТипФайла = ТипФайлаТабличногоДокумента.XLS;
		КонецЕсли;
		
		ПолноеИмяФайла = КаталогФайлаВыгрузки + "Ежемесячный соцфонд " 
							+ Формат(Объект.Дата,"ДФ=yyyyMMdd") + "." + Расширение;

		ТабличныйДокументПриложение = ОтчетЕжемесячныйСоцфонд(ДополнительныеПараметры.ВидДиалога);
		ТабличныйДокументПриложение.Записать(ПолноеИмяФайла, ТипФайла);
		
		Если ДополнительныеПараметры.ВидДиалога = "ЕжемесячныйСоцфонд_Excel_Нов" Тогда
			Книга = Excel.WorkBooks.Open(ПолноеИмяФайла);
			Лист = Книга.WorkSheets(1);
			
			Счетчик = 19;
			НомерПоследнейСтрокиТаблицы1 = Счетчик + Объект.СведенияОЗанятостиИЗаработнойПлате.Количество();
			ДатаФормат = "ДД.ММ.ГГГГ";
			
			Пока Счетчик <= НомерПоследнейСтрокиТаблицы1 Цикл 
				Лист.Cells(Счетчик, 3).NumberFormat = "@";
				Лист.Cells(Счетчик, 4).NumberFormat = "0";
				Лист.Cells(Счетчик, 5).NumberFormat = ДатаФормат;
				Лист.Cells(Счетчик, 6).NumberFormat = ДатаФормат;
				Счетчик = Счетчик + 1;
			КонецЦикла;	
			
			Книга.SaveAs(ПолноеИмяФайла);
			Книга.Close();
		КонецЕсли;
		
		// Закрытие приложения
		Excel.Quit();	
		Excel = Неопределено;
		
		ТекстОповещения = НСтр("ru = 'Файл сформирован'");
		ТекстПояснения = ПолноеИмяФайла;
		ПоказатьОповещениеПользователя(
			ТекстОповещения, 
			Новый ОписаниеОповещения("ОткрытьПроводник", ЭтотОбъект, Новый Структура("ПолноеИмяФайла", ПолноеИмяФайла)), 
			ТекстПояснения, 
			БиблиотекаКартинок.Информация32);
	#Иначе
	ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
	#КонецЕсли
КонецПроцедуры // ФормированиеФайла()

&НаСервере
Функция ОтчетЕжемесячныйСоцфонд(ВидДИалога)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если ВидДИалога = "ЕжемесячныйСоцфонд_Excel" Тогда
		Макет = Документы.ОтчетыПоСоциальномуФонду.ПолучитьМакет("ПФ_MXL_СФЕжемесячный_Excel");
	Иначе	
		Макет = Документы.ОтчетыПоСоциальномуФонду.ПолучитьМакет("ПФ_MXL_СФЕжемесячный_Excel_Новый");
	КонецЕсли;	
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		
	ДанныеОрганизации = ПолучитьДанныеОрганизации(Объект.Организация);
	ДанныеПечати = Новый Структура; 
	ДанныеПечати.Вставить("Плательщик",  Объект.Организация.НаименованиеПолное);
	ДанныеПечати.Вставить("Тариф", 		 Объект.Тариф);
	ДанныеПечати.Вставить("ИНН", 		 Объект.Организация.ИНН);
	ДанныеПечати.Вставить("РегНомер", 	 Объект.Организация.РегНомерСоцФонда);
	ДанныеПечати.Вставить("ОКПО", 		 Объект.Организация.КодПоОКПО);
	ДанныеПечати.Вставить("ОтделениеСФ", Объект.Контрагент);
	ДанныеПечати.Вставить("Дата", 		 Формат(Объект.Дата,"ДФ='ММММ гггг'"));
	ДанныеПечати.Вставить("ДатаДок", 	 Формат(ДобавитьМесяц(Объект.Дата, 1),"ДФ='ММММ гггг'"));														   
	ДанныеПечати.Вставить("Адрес", 		 ДанныеОрганизации.АдресОрганизации);
	ДанныеПечати.Вставить("Телефон", 	 ДанныеОрганизации.Телефон);
	
	// Месяц отчетного периода
	Если Месяц(Объект.Дата) = 1 Тогда
		Месяц = "Январь";
		
	ИначеЕсли Месяц(Объект.Дата) = 2 Тогда
		Месяц = "Февраль";
			
	ИначеЕсли Месяц(Объект.Дата) = 3 Тогда
		Месяц = "Март";
			
	ИначеЕсли Месяц(Объект.Дата) = 4 Тогда
		Месяц = "Апрель";
			
	ИначеЕсли Месяц(Объект.Дата) = 5 Тогда
		Месяц = "Май";
			
	ИначеЕсли Месяц(Объект.Дата) = 6 Тогда
		Месяц = "Июнь";
			
	ИначеЕсли Месяц(Объект.Дата) = 7 Тогда
		Месяц = "Июль";
			
	ИначеЕсли Месяц(Объект.Дата) = 8 Тогда
		Месяц = "Август";
			
	ИначеЕсли Месяц(Объект.Дата) = 9 Тогда
		Месяц = "Сентябрь";
			
	ИначеЕсли Месяц(Объект.Дата) = 10 Тогда
		Месяц = "Октябрь";
			
	ИначеЕсли Месяц(Объект.Дата) = 11 Тогда
		Месяц = "Ноябрь";
			
	ИначеЕсли Месяц(Объект.Дата) = 12 Тогда
		Месяц = "Декабрь";
	КонецЕсли;
	
	// Месяц даты предоставления отчета 
	Если Месяц(Объект.ДатаСдачиОтчета) = 1 Тогда
		МесяцПредоставленияОтчета = "Январь";
		
	ИначеЕсли Месяц(Объект.ДатаСдачиОтчета) = 2 Тогда
		МесяцПредоставленияОтчета = "Февраль";
			
	ИначеЕсли Месяц(Объект.ДатаСдачиОтчета) = 3 Тогда
		МесяцПредоставленияОтчета = "Март";
			
	ИначеЕсли Месяц(Объект.ДатаСдачиОтчета) = 4 Тогда
		МесяцПредоставленияОтчета = "Апрель";
			
	ИначеЕсли Месяц(Объект.ДатаСдачиОтчета) = 5 Тогда
		МесяцПредоставленияОтчета = "Май";
			
	ИначеЕсли Месяц(Объект.ДатаСдачиОтчета) = 6 Тогда
		МесяцПредоставленияОтчета = "Июнь";
			
	ИначеЕсли Месяц(Объект.ДатаСдачиОтчета) = 7 Тогда
		МесяцПредоставленияОтчета = "Июль";
			
	ИначеЕсли Месяц(Объект.ДатаСдачиОтчета) = 8 Тогда
		МесяцПредоставленияОтчета = "Август";
			
	ИначеЕсли Месяц(Объект.ДатаСдачиОтчета) = 9 Тогда
		МесяцПредоставленияОтчета = "Сентябрь";
			
	ИначеЕсли Месяц(Объект.ДатаСдачиОтчета) = 10 Тогда
		МесяцПредоставленияОтчета = "Октябрь";
			
	ИначеЕсли Месяц(Объект.ДатаСдачиОтчета) = 11 Тогда
		МесяцПредоставленияОтчета = "Ноябрь";
			
	ИначеЕсли Месяц(Объект.ДатаСдачиОтчета) = 12 Тогда
		МесяцПредоставленияОтчета = "Декабрь";
	КонецЕсли;
	                                                            
	ДанныеПечати.Вставить("Месяц", Месяц);
	ДанныеПечати.Вставить("Год", Формат(Год(Объект.Дата), "ЧГ=0"));
	
	ДанныеПечати.Вставить("ОтчетныйПериод", СтрШаблон(НСтр("ru = '%1 %2г.'"), Месяц, Формат(Год(Объект.Дата), "ЧГ=0")));
	ДанныеПечати.Вставить("ДатаПредоставленияОтчета", СтрШаблон(НСтр("ru = '""%1"" %2 %3г.'"), 
							День(Объект.ДатаСдачиОтчета), МесяцПредоставленияОтчета, Формат(Год(Объект.Дата), "ЧГ=0")));
	
	ДанныеПечати.Вставить("Банк", ДанныеОрганизации.НаименованиеБанка);
	ДанныеПечати.Вставить("НомерСчета", ДанныеОрганизации.НомерСчета);
	ДанныеПечати.Вставить("ВидДеятельности", ДанныеОрганизации.ВидДеятельности);
	
	ДанныеПечати.Вставить("СуммаКтПФ_МС_ФОТФ", Объект.ОбязательстваПоСтраховымВзносам);
	ДанныеПечати.Вставить("СуммаКтГНПФ", Объект.ОбязательстваПоПенсионномуФонду);
	ДанныеПечати.Вставить("ИтогоНалогиИШтрафы", Объект.ОбязательстваПоСтраховымВзносам + Объект.ОбязательстваПоПенсионномуФонду);
	ДанныеПечати.Вставить("СуммаДтПФ_МС_ФОТФ", Объект.ПереплатаПоСтраховымВзносам);
	ДанныеПечати.Вставить("СуммаДтГНПФ", Объект.ПереплатаПоПенсионномуФонду);
	ДанныеПечати.Вставить("ИтогоОбязательства", Объект.ОбязательстваПоСтраховымВзносам + Объект.ОбязательстваПоПенсионномуФонду);
	ДанныеПечати.Вставить("ИтогоПереплата", Объект.ПереплатаПоСтраховымВзносам + Объект.ПереплатаПоПенсионномуФонду);
	
	Руководители = БухгалтерскийУчетСервер.ОтветственныеЛицаОрганизацийРуководители(Объект.Организация, ДатаДокумента);
	ДанныеПечати.Вставить("Руководитель", Руководители.Руководитель);
	ДанныеПечати.Вставить("ГлавныйБухгалтер", Руководители.ГлавныйБухгалтер);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ДанныеПечатиИтоги = Новый Структура; 
	ДанныеПечатиИтоги.Вставить("ФОТ",0);
	ДанныеПечатиИтоги.Вставить("ДопФОТ",0);
	ДанныеПечатиИтоги.Вставить("СтраховыеВзносы",0);
	ДанныеПечатиИтоги.Вставить("ГНПФР",0);
	ДанныеПечатиИтоги.Вставить("Численность",0);
	ДанныеПечатиИтоги.Вставить("ФОТБольше40Процентов",0);
	ДанныеПечатиИтоги.Вставить("ФОТМеньше40Процентов",0);
	ДанныеПечатиИтоги.Вставить("Всего",0);

	Для Каждого СтрокаТабличнойЧасти Из Объект.СведенияОЗанятостиИЗаработнойПлате Цикл
		ОбластьМакета = Макет.ПолучитьОбласть("ДеталиСведенияОЗП");
		ОбластьМакета.Параметры.Заполнить(СтрокаТабличнойЧасти);
		
		ДанныеЗаполнения = Новый Структура();
		ДанныеЗаполнения.Вставить("ИНН", СтрокаТабличнойЧасти.ФизЛицо.ИНН);
		ДанныеЗаполнения.Вставить("Категория", Строка(СтрокаТабличнойЧасти.Категория));
		ОбластьМакета.Параметры.Заполнить(ДанныеЗаполнения);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ДанныеПечатиИтоги.ФОТ 				= ДанныеПечатиИтоги.ФОТ 			+ СтрокаТабличнойЧасти.ФондОплатыТруда;
		ДанныеПечатиИтоги.ДопФОТ 			= ДанныеПечатиИтоги.ДопФОТ 			+ СтрокаТабличнойЧасти.ДополнительныйФондОплатыТруда;
		ДанныеПечатиИтоги.СтраховыеВзносы 	= ДанныеПечатиИтоги.СтраховыеВзносы + СтрокаТабличнойЧасти.НачисленныеСтраховыеВзносы;
		ДанныеПечатиИтоги.ГНПФР 			= ДанныеПечатиИтоги.ГНПФР 			+ СтрокаТабличнойЧасти.НачсиленыеВзносыПоНПФ;
	КонецЦикла;
	
	ОбластьМакета = Макет.ПолучитьОбласть("ИтогоСведенияОЗП");
	ОбластьМакета.Параметры.Заполнить(ДанныеПечатиИтоги);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаФОТПоКатегориям");
	ТабличныйДокумент.Вывести(ОбластьМакета);
		
	// Обнуляется значение "ДопФОТ" для нового заполнения.
	ДанныеПечатиИтоги.ДопФОТ = 0;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.ФондОплатыТрудаПоКатегориям Цикл
		ОбластьМакета = Макет.ПолучитьОбласть("ДеталиФОТПоКатегориям");
		ОбластьМакета.Параметры.Заполнить(СтрокаТабличнойЧасти);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ДанныеПечатиИтоги.Численность 		 	= ДанныеПечатиИтоги.Численность 		 + СтрокаТабличнойЧасти.Численность;
		ДанныеПечатиИтоги.ФОТБольше40Процентов 	= ДанныеПечатиИтоги.ФОТБольше40Процентов + СтрокаТабличнойЧасти.ФОТБолее;
		ДанныеПечатиИтоги.ФОТМеньше40Процентов	= ДанныеПечатиИтоги.ФОТМеньше40Процентов + СтрокаТабличнойЧасти.ФОТМенее;
		ДанныеПечатиИтоги.ДопФОТ 				= ДанныеПечатиИтоги.ДопФОТ 				 + СтрокаТабличнойЧасти.ДопФОТ;
		ДанныеПечатиИтоги.Всего 				= ДанныеПечатиИтоги.Всего 				 + СтрокаТабличнойЧасти.Итого;
	КонецЦикла;
	
	ОбластьМакета = Макет.ПолучитьОбласть("ИтогоФОТПоКатегориям");
	ОбластьМакета.Параметры.Заполнить(ДанныеПечатиИтоги);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Коды");	
	ТабличныйДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Обязательства");	
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);		
	ТабличныйДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");	
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);		
	ТабличныйДокумент.Вывести(ОбластьМакета);	
		
	Возврат ТабличныйДокумент;	
КонецФункции // ОтчетНДСОсновнаяФорма()

// Функция -ПолучитьКонтактнуюИнформацию
//
// Параметры:
//  Организация  - Спр.Ссылка - Спр.Организации 
// Возвращаемое значение:
//  Структура   - структура данных контактной информации
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеОрганизации(Организация)
	
	СведенияОбОрганизации = БухгалтерскийУчетСервер.ПолучитьСведенияОбОрганизации(Организация);
	
	АдресОрганизации = ?(СведенияОбОрганизации.Улица    = "","",СведенияОбОрганизации.Улица + ",")
		+ ?(СведенияОбОрганизации.Дом      = "",""," " + СведенияОбОрганизации.Дом + ",")
		+ ?(СведенияОбОрганизации.Корпус   = "",""," " + СведенияОбОрганизации.Корпус + ",")
		+ ?(СведенияОбОрганизации.Квартира = "",""," " + СведенияОбОрганизации.Квартира);
	
	Структура = Новый Структура();
	Структура.Вставить("АдресОрганизации", АдресОрганизации);
	Структура.Вставить("Телефон", СведенияОбОрганизации.Тел);
	Структура.Вставить("ВидДеятельности", СведенияОбОрганизации.НаименованиеГКЭД);
	Структура.Вставить("НаименованиеПолное", СведенияОбОрганизации.НаименованиеПолное);
	Структура.Вставить("РегНомерСоцФонда", СведенияОбОрганизации.РегНомерСоцФонда);
	Структура.Вставить("ИНН", СведенияОбОрганизации.ИНН);
	Структура.Вставить("ОКПО", СведенияОбОрганизации.ОКПО);
	Структура.Вставить("АдрЮР", СведенияОбОрганизации.АдрЮР);
	Структура.Вставить("ГНСНаименование", СведенияОбОрганизации.ГНСНаименование);
	Структура.Вставить("ГНСКод", СведенияОбОрганизации.ГНСКод);
	Структура.Вставить("Банк", СведенияОбОрганизации.Банк);
	Структура.Вставить("НаименованиеБанка", СведенияОбОрганизации.Банк.Наименование);
	Структура.Вставить("НомерСчета", СведенияОбОрганизации.НомерСчета);
	
	Возврат Структура;
	
КонецФункции // ПолучитьАдресОрганизации()

&НаСервере
Функция ФормированиеФайлаXML(ДополнительныеПараметры, Ошибки, ВернутьВ_Base64 = Ложь)
		                           
	ШаблонИмениФайла = СтрШаблон("Monthly social fund %1", Формат(ДатаДокумента, "ДЛФ=D"));
	ИмяФайла = ШаблонИмениФайла + ".xml";
	
	ОбъектXDTO = СоздатьОбъектXDTO("PaySheet");
	
	// Создание PayerInfo.
	PayerInfo = СоздатьОбъектXDTO("PayerInfo");
	
	СведенийОбОрганизации = ПолучитьДанныеОрганизации(Объект.Организация);
	
	ArrearsOfWages = 0;
	AmountOfContributions = 0;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.СведенияОЗанятостиИЗаработнойПлате Цикл
		
		ArrearsOfWages = ArrearsOfWages + 
			?(Объект.Округление, Окр(СтрокаТабличнойЧасти.НачисленныеСтраховыеВзносы), СтрокаТабличнойЧасти.НачисленныеСтраховыеВзносы)
			+ СтрокаТабличнойЧасти.НачсиленыеВзносыПоНПФ;
			
		AmountOfContributions = AmountOfContributions +	СтрокаТабличнойЧасти.ФондОплатыТруда;
	КонецЦикла;	
	
	Тариф = "";
	Если Объект.Тариф = Перечисления.Тарифы.Основной Тогда
		Тариф = 1;
	ИначеЕсли Объект.Тариф = Перечисления.Тарифы.ГосИлиФинансируемый Тогда
		Тариф = 2;
	ИначеЕсли Объект.Тариф = Перечисления.Тарифы.Общественный Тогда
		Тариф = 3;
	ИначеЕсли Объект.Тариф = Перечисления.Тарифы.Некоммерческий Тогда
		Тариф = 4;
	ИначеЕсли Объект.Тариф = Перечисления.Тарифы.Индивидуальный Тогда
		Тариф = 5;
	ИначеЕсли Объект.Тариф = Перечисления.Тарифы.Международный Тогда
		Тариф = 6;
	ИначеЕсли Объект.Тариф = Перечисления.Тарифы.Индивидуальный Тогда
		Тариф = 7;
	ИначеЕсли Объект.Тариф = Перечисления.Тарифы.ПаркВысокихТехнологий Тогда
		Тариф = 8;
	ИначеЕсли Объект.Тариф = Перечисления.Тарифы.Сельскохозяйственный Тогда
		Тариф = 9;
	ИначеЕсли Объект.Тариф = Перечисления.Тарифы.ОбщиеКатегории Тогда
		Тариф = 10;
	ИначеЕсли Объект.Тариф = Перечисления.Тарифы.ЗаграничныеУчреждения Тогда
		Тариф = 11;
	КонецЕсли;
	
	PayerInfo.Year 					= Год(ДатаДокумента);
	PayerInfo.TaxPayer 				= СведенийОбОрганизации.НаименованиеПолное;
	PayerInfo.PIN 					= СведенийОбОрганизации.ИНН;
	PayerInfo.OKPO 					= СведенийОбОрганизации.ОКПО;
	PayerInfo.Month 				= "--" + СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Строка(Месяц(ДатаДокумента)), 2) + "--";
	PayerInfo.ArrearsOfWages 		= Формат(ArrearsOfWages, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");
	PayerInfo.AmountOfContributions = Формат(AmountOfContributions, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");	
	
//	PayerInfo.TariffType 		= Строка(Объект.Тариф);
	PayerInfo.TariffType 		= Тариф;
	PayerInfo.Working			= СведенийОбОрганизации.ВидДеятельности;
	PayerInfo.Telephone			= СведенийОбОрганизации.Телефон;
	PayerInfo.SocFund			= СведенийОбОрганизации.ГНСНаименование;
	PayerInfo.RegNumber			= СведенийОбОрганизации.РегНомерСоцФонда;
	PayerInfo.Rayon				= СведенийОбОрганизации.ГНСКод;
	PayerInfo.NullVedomost		= "0";
	PayerInfo.Bank				= Строка(СведенийОбОрганизации.Банк);
	PayerInfo.Account			= СведенийОбОрганизации.НомерСчета;
	PayerInfo.Address			= СведенийОбОрганизации.АдресОрганизации;	
	
	ОбъектXDTO.PayerInfo.Добавить(PayerInfo);
	
	ОбъектXDTO.SalaryInfoCollection.Добавить(SalaryInfoCollection());
	ОбъектXDTO.PayerBalanceOfArrearsCollection.Добавить(PayerBalanceOfArrearsCollection());		
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьXML = Новый ЗаписьXML;
	ПараметрыЗаписиXML = Новый ПараметрыЗаписиXML("UTF-8", "1.0", Ложь);	
	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, ПараметрыЗаписиXML);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
	ЗаписьXML.Закрыть();
	
	Если ДополнительныеПараметры.ВидДиалога = "ЕжемесячныйСоцфонд_xml" Тогда
		// Удаление лишнего текста из xml файла, для корректной загрузки на сайт sti.gov.kg
		ТекстДокумент = Новый ТекстовыйДокумент;
		ТекстДокумент.Прочитать(ИмяВременногоФайла);
		ТекстФайла = ТекстДокумент.ПолучитьТекст();
		ТекстФайла = СтрЗаменить(
			ТекстФайла, 
			" xmlns=""http://www.akforta.com/PaySheet"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""",
			"");
		ТекстДокумент.УстановитьТекст(ТекстФайла);	
		ТекстДокумент.Записать(ИмяВременногоФайла);
		
	Иначе
		// Изменение заголовков
		ТекстДокумент = Новый ТекстовыйДокумент;
		ТекстДокумент.Прочитать(ИмяВременногоФайла);
		ТекстФайла = ТекстДокумент.ПолучитьТекст();
		ТекстФайла = СтрЗаменить(
			ТекстФайла, 
			" xmlns=""http://www.akforta.com/PaySheet"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""",
			" xmlns=""http://www.akforta.com/PaySheet"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://www.akforta.com/PaySheet payList.xsd""");
		ТекстДокумент.УстановитьТекст(ТекстФайла);	
		ТекстДокумент.Записать(ИмяВременногоФайла);
	КонецЕсли;	
		
	Двоичное = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	Если ВернутьВ_Base64 Тогда
		Возврат Base64Строка(Двоичное);	
	Иначе	
		АдресВременногоХранилища = ПоместитьВоВременноеХранилище(Двоичное, УникальныйИдентификатор);
		
		// Удаление временного файла
		ФайловаяСистема.УдалитьВременныйФайл(ИмяВременногоФайла);
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("ИмяФайла", ИмяФайла);
		СтруктураДанных.Вставить("АдресВременногоХранилища", АдресВременногоХранилища);
	КонецЕсли;	
		
	Возврат СтруктураДанных;
КонецФункции

&НаСервере
Функция СоздатьОбъектXDTO(ТипОбъекта)
	УстановитьПривилегированныйРежим(Истина);
	Возврат ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.akforta.com/PaySheet", ТипОбъекта));
КонецФункции // СоздатьОбъектXDTO()

&НаСервере
Функция SalaryInfoCollection()
	
	ОбъектXDTO = СоздатьОбъектXDTO("SalaryInfoCollection");
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.СведенияОЗанятостиИЗаработнойПлате Цикл
		ОбъектXDTO.SalaryInfo.Добавить(SalaryInfo(СтрокаТабличнойЧасти));	
	КонецЦикла;
	
	Возврат ОбъектXDTO;
КонецФункции 

&НаСервере
Функция SalaryInfo(СтрокаТабличнойЧасти)
	// Создание объекта.
	ОбъектXDTO = СоздатьОбъектXDTO("SalaryInfo");
	
	ОбъектXDTO.PIN 						= СтрокаТабличнойЧасти.ФизЛицо.ИНН;
	ОбъектXDTO.ActivityCategoryCode 	= "";
	ОбъектXDTO.BeginDate 				= Формат(СтрокаТабличнойЧасти.ДатаНачалаРаботы, "ДФ=yyyy-MM-dd");
	ОбъектXDTO.Category 				= СокрЛП(Строка(СтрокаТабличнойЧасти.Категория));
	ОбъектXDTO.CoefficientOfHighland 	= "";
	ОбъектXDTO.Days 					= Строка(СтрокаТабличнойЧасти.Дней);
	ОбъектXDTO.DaysActually 			= Строка(СтрокаТабличнойЧасти.ФактическиДней);
	ОбъектXDTO.EndDate 					= Формат(СтрокаТабличнойЧасти.ДатаОкончанияРаботы, "ДФ=yyyy-MM-dd");
	ОбъектXDTO.Name 					= СтрокаТабличнойЧасти.ФизЛицо.Наименование;
	ОбъектXDTO.Sum 						= Формат(?(Объект.Округление, Окр(СтрокаТабличнойЧасти.НачисленныеСтраховыеВзносы), СтрокаТабличнойЧасти.НачисленныеСтраховыеВзносы), "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");
	ОбъектXDTO.SumNPF 					= Формат(СтрокаТабличнойЧасти.НачсиленыеВзносыПоНПФ, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");
	ОбъектXDTO.SumOfAdditionalEarnings 	= Формат(?(Объект.Округление, Окр(СтрокаТабличнойЧасти.ДополнительныйФондОплатыТруда), СтрокаТабличнойЧасти.ДополнительныйФондОплатыТруда), "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");
	ОбъектXDTO.SumOfEarnings 			= Формат(СтрокаТабличнойЧасти.ФондОплатыТруда, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");	
	ОбъектXDTO.HighlandRateCode 		= "001";
	ОбъектXDTO.FromListNo1OrNo2 		= "0";		
		
	Возврат ОбъектXDTO;
КонецФункции

&НаСервере
Функция PayerBalanceOfArrearsCollection()
	
	ОбъектXDTO = СоздатьОбъектXDTO("PayerBalanceOfArrearsCollection");
	
	ОбъектXDTO.PayerBalanceOfArrears.Добавить(PayerBalanceOfArrears(
		"ФОНД",  
		Объект.ОбязательстваПоСтраховымВзносам));
		
	ОбъектXDTO.PayerBalanceOfArrears.Добавить(PayerBalanceOfArrears(
		"НПФ",   
		Объект.ОбязательстваПоПенсионномуФонду));
	
	ОбъектXDTO.PayerBalanceOfArrears.Добавить(PayerBalanceOfArrears(
		"САНК",  
		0));
	
	ОбъектXDTO.PayerBalanceOfArrears.Добавить(PayerBalanceOfArrears(
		"ОТСФ",  
		0));
	
	ОбъектXDTO.PayerBalanceOfArrears.Добавить(PayerBalanceOfArrears(
		"ОНПФ",  
		0));
	
	ОбъектXDTO.PayerBalanceOfArrears.Добавить(PayerBalanceOfArrears(
		"ОСАНК", 
		0));
	
	ОбъектXDTO.PayerBalanceOfArrears.Добавить(PayerBalanceOfArrears(
		"ПРЕФ",  
		0));
	
	ОбъектXDTO.PayerBalanceOfArrears.Добавить(PayerBalanceOfArrears(
		"ПНПФ",  
		0));
	
	ОбъектXDTO.PayerBalanceOfArrears.Добавить(PayerBalanceOfArrears(
		"ПНПФ",  
		0));
	
	ОбъектXDTO.PayerBalanceOfArrears.Добавить(PayerBalanceOfArrears(
		"ПСАНК", 
		0));
	
	ОбъектXDTO.PayerBalanceOfArrears.Добавить(PayerBalanceOfArrears(
		"АВПФ",  
		Объект.ПереплатаПоСтраховымВзносам));
	
	ОбъектXDTO.PayerBalanceOfArrears.Добавить(PayerBalanceOfArrears(
		"ПРОЦ",  
		0));
	
	ОбъектXDTO.PayerBalanceOfArrears.Добавить(PayerBalanceOfArrears(
		"АВНПФ", 
		Объект.ПереплатаПоПенсионномуФонду));
	
	Возврат ОбъектXDTO;
КонецФункции 

&НаСервере
Функция PayerBalanceOfArrears(Наименование, Сумма)

	ОбъектXDTO = СоздатьОбъектXDTO("PayerBalanceOfArrears");
	
	ОбъектXDTO.Sum 				= Формат(Сумма, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");
	ОбъектXDTO.TypeOfObligation = Наименование;
	
	Возврат ОбъектXDTO;
КонецФункции

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
