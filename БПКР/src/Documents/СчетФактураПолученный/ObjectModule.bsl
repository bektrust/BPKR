#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ЗаполненияДокумента

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.ПоступлениеТоваровУслуг - Данные заполнения документа.
//	
Процедура ЗаполнитьПоПоступлениюТоваровУслуг(ДанныеЗаполнения) Экспорт
	
	Организация 		= ДанныеЗаполнения.Организация;
	Контрагент 			= ДанныеЗаполнения.Контрагент;
	ДоговорКонтрагента 	= ДанныеЗаполнения.ДоговорКонтрагента;
	СуммаДокумента 		= ДанныеЗаполнения.СуммаДокумента;
	ВалютаДокумента 	= ДанныеЗаполнения.ВалютаДокумента;
	НДСНеПодтвержден	= Истина;
	ДатаСФ              = ДанныеЗаполнения.Дата;
	
	Если ДанныеЗаполнения.БезналичныйРасчет Тогда
		ФормаОплаты = Перечисления.ФормыОплаты.Безналичная;
	Иначе
		ФормаОплаты = Перечисления.ФормыОплаты.Наличная;		
	КонецЕсли;	
	
	Для Каждого СтрокаТабличнойЧастиТовары Из ДанныеЗаполнения.Товары Цикл
		СтрокаТабличнойЧасти = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТабличнойЧастиТовары);
		СтрокаТабличнойЧасти.ДокументПоступления 	= ДанныеЗаполнения;
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧастиУслуги Из ДанныеЗаполнения.Услуги Цикл
		СтрокаТабличнойЧасти = Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТабличнойЧастиУслуги);
		СтрокаТабличнойЧасти.ДокументПоступления 	= ДанныеЗаполнения;
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧастиОС Из ДанныеЗаполнения.ОС Цикл
		СтрокаТабличнойЧасти = ОС.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТабличнойЧастиОС);
		СтрокаТабличнойЧасти.Цена					= СтрокаТабличнойЧастиОС.Сумма;
		СтрокаТабличнойЧасти.ДокументПоступления 	= ДанныеЗаполнения;
	КонецЦикла;
	
	СтрокаТабличнойЧастиДокументы = ДокументыПоступления.Добавить();
	СтрокаТабличнойЧастиДокументы.ДокументПоступления 	= ДанныеЗаполнения;
	СтрокаТабличнойЧастиДокументы.Сумма 				= ДанныеЗаполнения.Товары.Итог("Сумма") + ДанныеЗаполнения.Услуги.Итог("Сумма") + ДанныеЗаполнения.ОС.Итог("Сумма");
	СтрокаТабличнойЧастиДокументы.СуммаНДС 				= ДанныеЗаполнения.Товары.Итог("СуммаНДС") + ДанныеЗаполнения.Услуги.Итог("СуммаНДС") + ДанныеЗаполнения.ОС.Итог("СуммаНДС");
	СтрокаТабличнойЧастиДокументы.СуммаНСП 				= ДанныеЗаполнения.Товары.Итог("СуммаНСП") + ДанныеЗаполнения.Услуги.Итог("СуммаНСП") + ДанныеЗаполнения.ОС.Итог("СуммаНСП");
	СтрокаТабличнойЧастиДокументы.Всего 				= ДанныеЗаполнения.Товары.Итог("Всего") + ДанныеЗаполнения.Услуги.Итог("Всего") + ДанныеЗаполнения.ОС.Итог("Всего");
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.ДополнительныеРасходы - Данные заполнения документа.
//	
Процедура ЗаполнитьПоДополнительнымРасходам(ДанныеЗаполнения) Экспорт
	
	Организация 		= ДанныеЗаполнения.Организация;
	Контрагент 			= ДанныеЗаполнения.Контрагент;
	ДоговорКонтрагента 	= ДанныеЗаполнения.ДоговорКонтрагента;
	СуммаДокумента 		= ДанныеЗаполнения.СуммаДокумента;
	ВалютаДокумента 	= ДанныеЗаполнения.ВалютаДокумента;
	НДСНеПодтвержден	= Истина;
	ДатаСФ              = ДанныеЗаполнения.Дата;
	
	Если ДанныеЗаполнения.БезналичныйРасчет Тогда
		ФормаОплаты = Перечисления.ФормыОплаты.Безналичная;
	Иначе
		ФормаОплаты = Перечисления.ФормыОплаты.Наличная;		
	КонецЕсли;	
	
	СтрокаТабличнойЧасти = Услуги.Добавить();
	СтрокаТабличнойЧасти.Номенклатура = ДанныеЗаполнения.НоменклатураРасходов;
	СтрокаТабличнойЧасти.Цена = ДанныеЗаполнения.СуммаДопРасходов - ДанныеЗаполнения.СуммаНСП - ДанныеЗаполнения.СуммаНДС;
	СтрокаТабличнойЧасти.Количество = 1;
	СтрокаТабличнойЧасти.СуммаНДС = ДанныеЗаполнения.СуммаНДС;
	СтрокаТабличнойЧасти.СуммаНСП = ДанныеЗаполнения.СуммаНСП;
	СтрокаТабличнойЧасти.Сумма = ДанныеЗаполнения.СуммаДопРасходов;
	СтрокаТабличнойЧасти.Всего = ДанныеЗаполнения.СуммаДопРасходов;
	СтрокаТабличнойЧасти.ДокументПоступления 	= ДанныеЗаполнения;
	
	СтрокаТабличнойЧастиДокументы = ДокументыПоступления.Добавить();
	СтрокаТабличнойЧастиДокументы.ДокументПоступления = ДанныеЗаполнения;
	СтрокаТабличнойЧастиДокументы.Сумма = ДанныеЗаполнения.СуммаДопРасходов;
	СтрокаТабличнойЧастиДокументы.СуммаНДС = ДанныеЗаполнения.СуммаНДС;
	СтрокаТабличнойЧастиДокументы.СуммаНСП = ДанныеЗаполнения.СуммаНСП;
	СтрокаТабличнойЧастиДокументы.Всего = ДанныеЗаполнения.СуммаДопРасходов;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.ПоступлениеТоваровУслуг")] = "ЗаполнитьПоПоступлениюТоваровУслуг";
	СтратегияЗаполнения[Тип("ДокументСсылка.ДополнительныеРасходы")] = "ЗаполнитьПоДополнительнымРасходам";
	
	ЗаполнениеОбъектовБП.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
	Если НЕ ЗначениеЗаполнено(ДатаСФ) Тогда
		ДатаСФ = КонецМесяца(ТекущаяДатаСеанса());	
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ВыполнитьПредварительныйКонтроль(Отказ); 	
	
КонецПроцедуры

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СуммаДокумента = Товары.Итог("Всего") + Услуги.Итог("Всего") + ОС.Итог("Всего");
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ИнициализироватьДанные(Отказ, РежимПроведения);
	
	ОтразитьДвижения(Отказ, РежимПроведения);
	
	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
		
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	СерияБланкаСФ = "";
	НомерБланкаСФ = "";
	ДатаСФ = '00010101';
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииОбработкаПроведения

// Процедура инициализирует данные документа
// и подготовливает таблицы для движения в регистры
//
Процедура ИнициализироватьДанные(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.СчетФактураПолученный.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
КонецПроцедуры
	
// Процедура заполняет регистры данными
//
Процедура ОтразитьДвижения(Отказ, РежимПроведения)

	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьСчетаФактурыПолученные(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьРеестрПриобретенныхМатериальныхРесурсов(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьСведенияОПоступлении(ДополнительныеСвойства, Движения, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет контроль противоречий.
//
Процедура ВыполнитьПредварительныйКонтроль(Отказ)
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокументов.ДокументПоступления КАК Документ,
		|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВременнаяТаблицаДокументы
		|ИЗ
		|	&ТаблицаДокументов КАК ТаблицаДокументов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка,
		|	ПоступлениеТоваровУслуг.Дата КАК Дата,
		|	ПоступлениеТоваровУслуг.Контрагент КАК Контрагент,
		|	ПоступлениеТоваровУслуг.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ПоступлениеТоваровУслуг.ВалютаДокумента КАК ВалютаДокумента,
		|	ПоступлениеТоваровУслуг.ЗначениеСтавкиНДС КАК ЗначениеСтавкиНДС,
		|	ПоступлениеТоваровУслуг.ВидОперации КАК ВидОперации,
		|	ТаблицаДокументы.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВременнаяТаблицаДанныеДокументов
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаДокументы КАК ТаблицаДокументы
		|		ПО ПоступлениеТоваровУслуг.Ссылка = ТаблицаДокументы.Документ
		|ГДЕ
		|	ПоступлениеТоваровУслуг.Ссылка В
		|			(ВЫБРАТЬ
		|				ВременнаяТаблицаДокументы.Документ
		|			ИЗ
		|				ВременнаяТаблицаДокументы КАК ВременнаяТаблицаДокументы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаДанныеДокументов.Ссылка КАК Ссылка,
		|	ВременнаяТаблицаДанныеДокументов.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВременнаяТаблицаДанныеДокументов КАК ВременнаяТаблицаДанныеДокументов
		|ГДЕ
		|	НЕ(ВременнаяТаблицаДанныеДокументов.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|				ИЛИ ВременнаяТаблицаДанныеДокументов.Контрагент = &Контрагент
		|				ИЛИ ВременнаяТаблицаДанныеДокументов.ДоговорКонтрагента = &ДоговорКонтрагента
		|				ИЛИ ВременнаяТаблицаДанныеДокументов.ВалютаДокумента = &ВалютаДокумента)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВременнаяТаблицаДанныеДокументов.ЗначениеСтавкиНДС КАК ЗначениеСтавкиНДС
		|ИЗ
		|	ВременнаяТаблицаДанныеДокументов КАК ВременнаяТаблицаДанныеДокументов";		
	Запрос.УстановитьПараметр("ТаблицаДокументов", 	ДокументыПоступления.Выгрузить());
	Запрос.УстановитьПараметр("ДатаНачала", 		НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("ДатаОкончания", 		КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Контрагент", 		Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ВалютаДокумента", 	ВалютаДокумента);
	
	// Проверка документов с отличными данными от документа "СФ полученный".
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Выборка = МассивРезультатов[2].Выбрать();
	
	Пока Выборка.Следующий() Цикл		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Данные документа ""%1"" не соответствуют отбору реквизитам шапки документа ""Счет фактура полученный"".'"), 
						Выборка.Ссылка);
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
			ЭтотОбъект,
			ТекстСообщения,
			"ДокументыПоступления",
			Выборка.НомерСтроки,
			"ДокументПоступления",
			Отказ);		
	КонецЦикла;
	
	Выборка = МассивРезультатов[3].Выбрать();
	
	Если Выборка.Количество() > 1 Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'В подобранных документах разные значения ставок НДС.'"), 
						Выборка.Ссылка);
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
			ЭтотОбъект,
			ТекстСообщения,
			"ДокументыПоступления",
			,
			,
			Отказ)	
	КонецЕсли;	
	
	// Контроль сумм на закладке "Документы" и на остальных трех: "Товары", "Услуги" и "ОС".
	СуммаПоДокументам 	 = ДокументыПоступления.Итог("Сумма");
	СуммаНДСПоДокументам = ДокументыПоступления.Итог("СуммаНДС");
	СуммаНСППоДокументам = ДокументыПоступления.Итог("СуммаНСП");
	ВсегоПоДокументам 	 = ДокументыПоступления.Итог("Всего");
	
	СуммаПоТЧ 	 = Товары.Итог("Сумма") + Услуги.Итог("Сумма") + ОС.Итог("Сумма");
	СуммаНДСПоТЧ = Товары.Итог("СуммаНДС") + Услуги.Итог("СуммаНДС") + ОС.Итог("СуммаНДС");
	СуммаНСППоТЧ = Товары.Итог("СуммаНСП") + Услуги.Итог("СуммаНСП") + ОС.Итог("СуммаНСП");
	ВсегоПоТЧ 	 = Товары.Итог("Всего") + Услуги.Итог("Всего") + ОС.Итог("Всего");
	
	Если СуммаПоДокументам <> СуммаПоТЧ Тогда
		ТекстСообщения = НСтр("ru = 'Итоги по колонке ""Сумма"" закладки ""Документы"" и закладок ""Товары"", ""Услуги"" и ""ОС"" должны соответствовать.'");
		БухгалтерскийУчетСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения,,,,Отказ);	
	КонецЕсли;
	
	Если СуммаНДСПоДокументам <> СуммаНДСПоТЧ Тогда
		ТекстСообщения = НСтр("ru = 'Итоги по колонке ""Сумма НДС"" закладки ""Документы"" и колонок ""НДС"" закладок ""Товары"", ""Услуги"" и ""ОС"" должны соответствовать.'");
		БухгалтерскийУчетСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения,,,,Отказ);	
	КонецЕсли;
	
	Если СуммаНСППоДокументам <> СуммаНСППоТЧ Тогда
		ТекстСообщения = НСтр("ru = 'Итоги по колонке ""Сумма НСП"" закладки ""Документы"" и колонок ""НСП"" закладок ""Товары"", ""Услуги"" и ""ОС"" должны соответствовать.'");
		БухгалтерскийУчетСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения,,,,Отказ);	
	КонецЕсли;
	
	Если ВсегоПоДокументам <> ВсегоПоТЧ Тогда
		ТекстСообщения = НСтр("ru = 'Итоги по колонке ""Всего"" закладки ""Документы"" и закладок ""Товары"", ""Услуги"" и ""ОС"" должны соответствовать.'");
		БухгалтерскийУчетСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения,,,,Отказ);	
	КонецЕсли;
КонецПроцедуры // ВыполнитьПредварительныйКонтроль()

// Процедура заполнения табличных частей документа. 
//
Процедура ЗаполнитьДокумент() Экспорт

	ЗаполнитьДокументыПоступления();
	
	Если ДокументыПоступления.Количество() > 0 Тогда
		ЗаполнитьПоПодобраннымДокументам();	
	КонецЕсли;
КонецПроцедуры

// Процедура заполнения табличной части "ДокументыПоступления".
//
Процедура ЗаполнитьДокументыПоступления()

	Запрос = Новый Запрос;
	Запрос.Текст =
	    "ВЫБРАТЬ
	    |	СчетаФактурыПолученные.Документ КАК Документ
	    |ПОМЕСТИТЬ ВременнаяТаблицаДокументы
	    |ИЗ
	    |	РегистрСведений.СчетаФактурыПолученные КАК СчетаФактурыПолученные
	    |ГДЕ
	    |	СчетаФактурыПолученные.Документ ССЫЛКА Документ.ПоступлениеТоваровУслуг
	    |	И НЕ СчетаФактурыПолученные.Документ В (&МассивДокументов)
	    |
	    |ОБЪЕДИНИТЬ
	    |
	    |ВЫБРАТЬ
	    |	СведенияОПоступлении.ДокументСсылка
	    |ИЗ
	    |	РегистрСведений.СведенияОПоступлении КАК СведенияОПоступлении
	    |ГДЕ
	    |	СведенияОПоступлении.ДокументСсылка ССЫЛКА Документ.ПоступлениеТоваровУслуг
	    |;
	    |
	    |////////////////////////////////////////////////////////////////////////////////
	    |ВЫБРАТЬ
	    |	ПоступлениеТоваровОбороты.Регистратор КАК ДокументПоступления,
	    |	ПоступлениеТоваровОбороты.СуммаОборот КАК Сумма,
	    |	ПоступлениеТоваровОбороты.СуммаНДСОборот КАК СуммаНДС,
	    |	ПоступлениеТоваровОбороты.СуммаНСПОборот КАК СуммаНСП,
	    |	ПоступлениеТоваровОбороты.СуммаОборот + ПоступлениеТоваровОбороты.СуммаНДСОборот + ПоступлениеТоваровОбороты.СуммаНСПОборот КАК Всего
	    |ИЗ
	    |	РегистрНакопления.ПоступлениеТоваров.Обороты(
	    |			&ДатаНачала,
	    |			&ДатаОкончания,
	    |			Регистратор,
	    |			Организация = &Организация
	    |				И Контрагент = &Контрагент
	    |				И Договор = &Договор
	    |				И Договор.ВалютаРасчетов = &Валюта
	    |				И Контрагент.ПризнакСтраны = ЗНАЧЕНИЕ(Перечисление.ПризнакиСтраны.КР)
		|				И ВЫБОР
		|					КОГДА &ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная)
		|						ТОГДА БезналичныйРасчет = ЛОЖЬ
		|					КОГДА &ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная)
		|						ТОГДА БезналичныйРасчет = ИСТИНА
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ) КАК ПоступлениеТоваровОбороты
	    |ГДЕ
	    |	ПоступлениеТоваровОбороты.Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг
	    |	И НЕ ПоступлениеТоваровОбороты.Регистратор В
	    |				(ВЫБРАТЬ
	    |					ВременнаяТаблицаДокументы.Документ
	    |				ИЗ
	    |					ВременнаяТаблицаДокументы КАК ВременнаяТаблицаДокументы)
	    |	И ВЫРАЗИТЬ(ПоступлениеТоваровОбороты.Регистратор КАК Документ.ПоступлениеТоваровУслуг).ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Покупка)";
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Договор = &Договор", "");	
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ДатаНачала", 		НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("ДатаОкончания", 		КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("Контрагент", 		Контрагент);
	Запрос.УстановитьПараметр("Договор", 			ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Валюта", 			ВалютаДокумента);
	Запрос.УстановитьПараметр("МассивДокументов", 	ДокументыПоступления.ВыгрузитьКолонку("ДокументПоступления"));
	Запрос.УстановитьПараметр("ФормаОплаты",		ФормаОплаты);

	ДокументыПоступления.Загрузить(Запрос.Выполнить().Выгрузить());			
КонецПроцедуры

// Процедура заполняет табличную часть "Товары" по документам,
// подобранным в табличной части "ДокументыПоступления".
//
// Параметры:
//	ВозвратОтПокупателя - Булево - реквизит "Возврат" данного документа 
//
Процедура ЗаполнитьПоПодобраннымДокументам() Экспорт

	МассивДокументов = ДокументыПоступления.Выгрузить().ВыгрузитьКолонку("ДокументПоступления");
	
	Запрос = Новый Запрос;         
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПоступлениеТоваровУслугТовары.Ссылка КАК ДокументПоступления,
		|	ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
		|	ПоступлениеТоваровУслугТовары.Количество КАК Количество,
		|	ПоступлениеТоваровУслугТовары.Цена КАК Цена,
		|	ПоступлениеТоваровУслугТовары.Сумма КАК Сумма,
		|	ПоступлениеТоваровУслугТовары.Всего КАК Всего,
		|	ПоступлениеТоваровУслугТовары.СуммаНДС КАК СуммаНДС,
		|	ПоступлениеТоваровУслугТовары.СуммаНСП КАК СуммаНСП
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		|ГДЕ
		|	ПоступлениеТоваровУслугТовары.Ссылка В(&МассивДокументов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслугУслуги.Ссылка КАК ДокументПоступления,
		|	ПоступлениеТоваровУслугУслуги.Номенклатура КАК Номенклатура,
		|	ПоступлениеТоваровУслугУслуги.Количество КАК Количество,
		|	ПоступлениеТоваровУслугУслуги.Цена КАК Цена,
		|	ПоступлениеТоваровУслугУслуги.Сумма КАК Сумма,
		|	ПоступлениеТоваровУслугУслуги.Всего КАК Всего,
		|	ПоступлениеТоваровУслугУслуги.СуммаНДС КАК СуммаНДС,
		|	ПоступлениеТоваровУслугУслуги.СуммаНСП КАК СуммаНСП
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
		|ГДЕ
		|	ПоступлениеТоваровУслугУслуги.Ссылка В(&МассивДокументов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслугОС.Ссылка КАК ДокументПоступления,
		|	ПоступлениеТоваровУслугОС.ОсновноеСредство КАК ОсновноеСредство,
		|	1 КАК Количество,
		|	ПоступлениеТоваровУслугОС.Сумма КАК Цена,
		|	ПоступлениеТоваровУслугОС.Сумма КАК Сумма,
		|	ПоступлениеТоваровУслугОС.Всего КАК Всего,
		|	ПоступлениеТоваровУслугОС.СуммаНДС КАК СуммаНДС,
		|	ПоступлениеТоваровУслугОС.СуммаНСП КАК СуммаНСП
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.ОС КАК ПоступлениеТоваровУслугОС
		|ГДЕ
		|	ПоступлениеТоваровУслугОС.Ссылка В(&МассивДокументов)";		
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Товары.Загрузить(МассивРезультатов[0].Выгрузить());
	Услуги.Загрузить(МассивРезультатов[1].Выгрузить());
	ОС.Загрузить(МассивРезультатов[2].Выгрузить());
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли