#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	ЗаполнениеОбъектовБП.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения);
	
	Если НЕ ЗначениеЗаполнено(СтавкаНСП) Тогда
		ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(Дата, Организация);
		СтавкаНСП = ДанныеУчетнойПолитики.СтавкаНСПРеализацииУслуги;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	// Проверка заполнения табличных частей
	ПроверяемыеРеквизиты.Добавить("Услуги");
	
	Если НЕ Контрагент.ПризнакСтраны = Перечисления.ПризнакиСтраны.КР Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.СтавкаНСП");
	КонецЕсли;
	
	Если Курс = 0 Или Кратность = 0 Тогда 
		ТекстСообщения = НСтр("ru = 'Не заполнен курс валюты ""%1"". Откройте список валют (Банк и касса - Валюты) и проверьте,
			|что у валюты ""%1"" установлен курс на дату %2 или ранее.
			|Перевыберите договор и заново проведите документ.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ВалютаДокумента, Формат(Дата, "ДЛФ=D"));	
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;

	ОбщегоНазначенияБПСервер.ДобавитьНепроверяемыеРеквизитыПоПараметрамФункциональныхОпций(МассивНепроверяемыхРеквизитов, Организация, Дата);
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	ВыполнитьПредварительныйКонтроль(Отказ);
	
КонецПроцедуры

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	СуммаДокумента = Услуги.Итог("Всего");
		
	РассчитатьСуммыВРегламентированнойВалюте();	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ИнициализироватьДанные(Отказ, РежимПроведения);
	
	ОтразитьДвижения(Отказ, РежимПроведения);
		
	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииОбработкаПроведения

// Процедура инициализирует данные документа
// и подготавливает таблицы для движения в регистры
//
Процедура ИнициализироватьДанные(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.АктОбОказанииПроизводственныхУслуг.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
КонецПроцедуры
	
// Процедура заполняет регистры данными
//
Процедура ОтразитьДвижения(Отказ, РежимПроведения)

	// Отражение в разделах учета.
	УчетПроизводства.СформироватьДвиженияПлановаяСтоимостьВыпущенныхУслуг(ДополнительныеСвойства, Движения, Отказ);
	УчетПроизводства.СформироватьДвиженияВыпускУслуг(ДополнительныеСвойства, Движения, Отказ);
	
	БухгалтерскийУчетСервер.ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьПродажи(ДополнительныеСвойства, Движения, Отказ);
	
	// Переход на метод начисления.
	Если Дата >= Дата(2021, 01, 01) Тогда 
		БухгалтерскийУчетСервер.ОтразитьОборотыПоДаннымЕдиногоНалога(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура рассчитывает суммы табличных частей в валюте регламентированного учета
//
Процедура РассчитатьСуммыВРегламентированнойВалюте()

	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		
		МассивТабличныхЧастей = Новый Массив();
		МассивТабличныхЧастей.Добавить(Услуги);
		
		Для Каждого ТабличнаяЧасть Из МассивТабличныхЧастей Цикл
			Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл					
				СтрокаТабличнойЧасти.СуммаВВалютеРеглУчета 		 		= СтрокаТабличнойЧасти.Сумма;
				СтрокаТабличнойЧасти.СуммаНДСВВалютеРеглУчета 	 		= СтрокаТабличнойЧасти.СуммаНДС;
				СтрокаТабличнойЧасти.СуммаНСПВВалютеРеглУчета 	 		= СтрокаТабличнойЧасти.СуммаНСП;
				СтрокаТабличнойЧасти.СуммаДоходаВВалютеРеглУчета 		= СтрокаТабличнойЧасти.СуммаДохода;
				СтрокаТабличнойЧасти.ВсегоВВалютеРеглУчета 				= СтрокаТабличнойЧасти.Всего;
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(Дата, Организация);	
		МассивТабличныхЧастей = Новый Массив();
		МассивТабличныхЧастей.Добавить(Услуги);
		
		Для Каждого ТабличнаяЧасть Из МассивТабличныхЧастей Цикл
			
			ИмяТабличнойЧасти = "Услуги";	
			ПараметрыРасчета = ПодготовитьПараметрыРасчета(ИмяТабличнойЧасти, ДанныеУчетнойПолитики);
										
			Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		
				// Структура для пересчета и заполнения суммами в валюте регламетированного учета.
				ДанныеВВалютеРеглУчета = Новый Структура();	
				ДанныеВВалютеРеглУчета.Вставить("Всего", СтрокаТабличнойЧасти.Всего);
				ДанныеВВалютеРеглУчета.Вставить("СуммаНДС", СтрокаТабличнойЧасти.СуммаНДС);
				ДанныеВВалютеРеглУчета.Вставить("СуммаНСП", СтрокаТабличнойЧасти.СуммаНСП);
				ДанныеВВалютеРеглУчета.Вставить("СтавкаНДС", ПараметрыРасчета.СтавкаНДС);
				ДанныеВВалютеРеглУчета.Вставить("СтавкаНСП", СтрокаТабличнойЧасти.СтавкаНСП);
		
				Если СуммаВключаетНалоги Тогда
					ДанныеВВалютеРеглУчета.Вставить("Сумма", Окр(СтрокаТабличнойЧасти.Сумма * Курс / Кратность, 2));
					ДанныеВВалютеРеглУчета.Вставить("СуммаДохода", СтрокаТабличнойЧасти.СуммаДохода);	
				Иначе
					ДанныеВВалютеРеглУчета.Вставить("Сумма", СтрокаТабличнойЧасти.Сумма);
					ДанныеВВалютеРеглУчета.Вставить("СуммаДохода", Окр(СтрокаТабличнойЧасти.СуммаДохода * Курс / Кратность, 2));	
				КонецЕсли;
				
				ДанныеВВалютеРеглУчета.Вставить("Цена", Окр(СтрокаТабличнойЧасти.Цена * Курс / Кратность, 2));
				ДанныеВВалютеРеглУчета.Вставить("Количество", СтрокаТабличнойЧасти.Количество);	
				
				Если СуммаВключаетНалоги Тогда					
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(ДанныеВВалютеРеглУчета, ПараметрыРасчета);	
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(ДанныеВВалютеРеглУчета);
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(ДанныеВВалютеРеглУчета, Истина);
					
				Иначе
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(ДанныеВВалютеРеглУчета, ПараметрыРасчета);	
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(ДанныеВВалютеРеглУчета, ПараметрыРасчета);		
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(ДанныеВВалютеРеглУчета);
				КонецЕсли;
					
				СтрокаТабличнойЧасти.СуммаВВалютеРеглУчета = ДанныеВВалютеРеглУчета.Сумма;
				СтрокаТабличнойЧасти.СуммаНДСВВалютеРеглУчета = ДанныеВВалютеРеглУчета.СуммаНДС;
				СтрокаТабличнойЧасти.СуммаНСПВВалютеРеглУчета = ДанныеВВалютеРеглУчета.СуммаНСП;
				СтрокаТабличнойЧасти.СуммаДоходаВВалютеРеглУчета = ДанныеВВалютеРеглУчета.СуммаДохода;
				СтрокаТабличнойЧасти.ВсегоВВалютеРеглУчета = ДанныеВВалютеРеглУчета.Всего;
			КонецЦикла;	
		КонецЦикла;			
	КонецЕсли;	
КонецПроцедуры

Функция ПодготовитьПараметрыРасчета(ИмяТабличнойЧасти, ДанныеУчетнойПолитики, СчитатьОтДохода = Ложь) Экспорт

	ПараметрыРасчета = ОбработкаТабличныхЧастейКлиентСервер.ШаблонПараметровРасчета();
	
	ПараметрыРасчета.Период = Дата;
	ПараметрыРасчета.Организация = Организация;
	// СуммаВключаетНалоги - всегда ИСТИНА,
	// потому что расчет налогов идет от "Всего", а "Всего" всегда с налогами.
	ПараметрыРасчета.СуммаВключаетНалоги = Истина;
	ПараметрыРасчета.БезналичныйРасчет = БезналичныйРасчет;
	ПараметрыРасчета.СчитатьОтДохода = СчитатьОтДохода;
	ПараметрыРасчета.ИмяТабличнойЧасти = ИмяТабличнойЧасти;

	ПараметрыРасчета.СтавкаНДС = ?(ДанныеУчетнойПолитики.ПлательщикНДС, СтавкаНДС, Справочники.СтавкиНДС.ПустаяСсылка());
	
	ПараметрыРасчета.СтавкаНСП = ?(ДанныеУчетнойПолитики.ПлательщикНСП, СтавкаНСП, Справочники.СтавкиНСП.ПустаяСсылка());
	
	Возврат ПараметрыРасчета;
КонецФункции

// Процедура выполняет контроль противоречий.
//
Процедура ВыполнитьПредварительныйКонтроль(Отказ)
		
	// Проверка ставок НСП
	Если Дата >= Дата(2022,01,01) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Услуги.СтавкаНСП КАК СтавкаНСП
		|ПОМЕСТИТЬ ВременнаяТаблицаУслуги
		|ИЗ
		|	&Услуги КАК Услуги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВременнаяТаблицаУслуги.СтавкаНСП КАК СтавкаНСП
		|ИЗ
		|	ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги";
		
		Запрос.УстановитьПараметр("Услуги", Услуги);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		// Услуги
		Если НЕ РезультатЗапроса.Пустой() И РезультатЗапроса.Выбрать().Количество() >= 2 Тогда
			ТекстСообщения = НСтр("ru = 'На закладке ""Услуги"" значения ставок НСП должны быть одинаковыми.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,, "Объект.Услуги", Отказ);	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьПредварительныйКонтроль()

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли