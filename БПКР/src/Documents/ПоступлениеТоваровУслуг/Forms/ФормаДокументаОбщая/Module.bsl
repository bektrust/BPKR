
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка реквизитов формы.	
	ДатаДокумента = Объект.Дата;
	
	ПризнакСтраны = Объект.Контрагент.ПризнакСтраны;
	
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();	
	
	Если Параметры.Ключ.Пустая() Тогда
		УстановитьНачальныеСвойстваСубконтоТаблицы();
	КонецЕсли;	

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		СтруктураКурсКратность 	= РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ДоговорКонтрагента.ВалютаРасчетов, ДатаДокумента);	
		КурсНБКР      			= ?(СтруктураКурсКратность.Курс = 0, 1, СтруктураКурсКратность.Курс);
		КратностьНБКР 			= ?(СтруктураКурсКратность.Кратность = 0, 1, СтруктураКурсКратность.Кратность);
	КонецЕсли;
	
	ЗаполнитьСчетФактураПолученный();
	
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	УстановитьФункциональныеОпцииФормы();
	УстановитьПараметрыВыбора();
	УстановитьВидимостьДоступностьЭлементов();
	
	УстановитьУсловноеОформление();

	Если ПолучитьФункциональнуюОпцию("УказыватьТочностьЦены") Тогда 
		ЗаполнитьСписокВыбораТочностьЦены();	
	КонецЕсли;	

	Если БухгалтерскийУчетВызовСервераПовтИсп.ВедетсяУчетЭСФ() Тогда
		ПолучитьПредставлениеЭСФ();
	КонецЕсли;	

	// КопированиеСтрокТабличныхЧастей
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСервере(Элементы, "Товары");
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСервере(Элементы, "Услуги");
	// Конец КопированиеСтрокТабличныхЧастей
	
	// РаботаСФормами
	РаботаСФормамиСервер.УстановитьЗаголовокФормыПоступление(ЭтаФорма);
	РаботаСФормамиСервер.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = ПодключаемоеОборудованиеБППовтИсп.ИспользоватьПодключаемоеОборудование();
	// Конец ПодключаемоеОборудование
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УстановитьНачальныеСвойстваСубконтоТаблицы();

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом 
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьСвязиПараметровВыбора();
	УстановитьТекущуюСтраницу();
	ОбновитьПодвалФормы();
	
	УстановитьФорматЦены();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	Если ИспользоватьПодключаемоеОборудование Тогда 
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	КонецЕсли;	
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
КонецПроцедуры

// Процедура - обработчик события ПриЗакрытии.
//
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	// ПодключаемоеОборудование
	Если ИспользоватьПодключаемоеОборудование Тогда 
		МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	КонецЕсли;	
	// Конец ПодключаемоеОборудование
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	
	УстановитьНачальныеСвойстваСубконтоТаблицы();
	
	// РаботаСФормами
	РаботаСФормамиСервер.УстановитьЗаголовокФормыПоступление(ЭтаФорма);
	РаботаСФормамиСервер.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчета.ПослеЗаписиНаСервере(ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "МодифицированДоговораКонтрагента"
		И Параметр = Объект.ДоговорКонтрагента Тогда
		ОбработатьИзменениеДоговора(Истина);

	ИначеЕсли ИмяСобытия = "ПодборНоменклатурыПроизведен" 
		И ТипЗнч(Параметр) = Тип("Структура")
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор Тогда
		
		АдресЗапасовВХранилище = Параметр.АдресЗапасовВХранилище;
		ПолучитьТоварыИзХранилища(АдресЗапасовВХранилище);
		
		ОбновитьПодвалФормы();
		
	ИначеЕсли ИмяСобытия = "СчетФактураПолученныйПослеЗаписи"
		И НЕ Параметр.Найти(Объект.Ссылка) = Неопределено Тогда  
		
		ЗаполнитьСчетФактураПолученный();
		УстановитьВидимостьДоступностьЭлементов();
		
	ИначеЕсли ИмяСобытия = "ЭлектронныйСчетФактураПолученныйПослеЗаписи"
		И НЕ Параметр.Найти(Объект.Ссылка) = Неопределено Тогда  
		
		Если БухгалтерскийУчетВызовСервераПовтИсп.ВедетсяУчетЭСФ() Тогда
			ПолучитьПредставлениеЭСФ();
		КонецЕсли;	

	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);	
	КонецЕсли;
	
	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Товары");
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Услуги");
	КонецЕсли;
	// Конец КопированиеСтрокТабличныхЧастей
	      	  	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			// Преобразуем предварительно к ожидаемому формату.
			Если Параметр[1] = Неопределено Тогда
				ТекШтрихкод = Параметр[0]; // Достаем штрихкод из основных данных
			Иначе
				ТекШтрихкод = Параметр[1][1]; // Достаем штрихкод из дополнительных данных
			КонецЕсли;
			
			Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаТовары Тогда 
				ПоискПоШтрихкодуЗавершение(ТекШтрихкод, Новый Структура("ТекШтрихкод, ИмяТабличнойЧасти", ТекШтрихкод, "Товары"));
			ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУслуги Тогда
				ПоискПоШтрихкодуЗавершение(ТекШтрихкод, Новый Структура("ТекШтрихкод, ИмяТабличнойЧасти", ТекШтрихкод, "Услуги"));
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением, Объект.ВалютаДокумента);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
	ОбработатьИзменениеУчетнойПолитики();
	УстановитьФункциональныеОпцииФормы();
	ОбработатьИзменениеДоговора();
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Объект.Номер = "";

	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
	ОбработатьИзменениеУчетнойПолитики();
	УстановитьФункциональныеОпцииФормы();
	
	// Договор автоматически очистился- заполнение по умолчанию.
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент, Объект.Организация);
	Объект.ДоговорКонтрагента = СтруктураДанные.ДоговорКонтрагента;
	ОбработатьИзменениеДоговора();
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоТаблицыПриИзмененииОрганизации(
		Объект.Услуги,
		ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
		
	Если БухгалтерскийУчетВызовСервераПовтИсп.ВедетсяУчетЭСФ() Тогда
		ПолучитьПредставлениеЭСФ();
	КонецЕсли;	
		
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении флажка Безналичный расчет.
//
&НаКлиенте
Процедура БезналичныйРасчетПриИзменении(Элемент)
	
	Объект.ЗначениеСтавкиНСП = 0;
	Объект.ЗначениеСтавкиНСПДляОС = 0;
	
	Если Объект.БезналичныйРасчет Тогда
		УстановитьЗначениеСтавкиНСП("Товары");
		УстановитьЗначениеСтавкиНСП("Услуги");
		УстановитьЗначениеСтавкиНСП("ОС");
	КонецЕсли;	
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект, "Товары", ПараметрыРасчета);
		
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект, "ОС", ПараметрыРасчета);
		
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл	 
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЦикла;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета(Истина);	
		
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект, "Услуги", ПараметрыРасчета);
		
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);	
	КонецЦикла;	
		
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Контрагент.
//
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент, Объект.Организация);
	
	Объект.ДоговорКонтрагента = СтруктураДанные.ДоговорКонтрагента;
	ПризнакСтраны = СтруктураДанные.ПризнакСтраны;
	
	Если СтруктураДанные.СЭЗ Тогда
		Объект.ЗначениеСтавкиНДС = 0;
		Объект.ЗначениеСтавкиНСПДляОС = 0;
	КонецЕсли;	
	
	// Изменение признака страны
	Если ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС") Тогда
		Объект.БезналичныйРасчет = Истина;
		Объект.ЭтоПоступлениеПоЧеку = Ложь;
		// Ставки
		Объект.НДСНеПодтвержден = Ложь;
		УстановитьЗначениеСтавкиНСП("Товары");
		УстановитьЗначениеСтавкиНСП("Услуги");
		УстановитьЗначениеСтавкиНСП("ОС");
	ИначеЕсли ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ИмпортЭкспорт") Тогда	
		Объект.БезналичныйРасчет = Истина;
		Объект.ЭтоПоступлениеПоЧеку = Ложь;
		// Ставки
		Объект.НДСНеПодтвержден = Ложь;
		Объект.ЗначениеСтавкиНДС = 0;
		Объект.ЗначениеСтавкиНСПДляОС = 0;
		УстановитьЗначениеСтавкиНСП("Товары");
		УстановитьЗначениеСтавкиНСП("Услуги");
		УстановитьЗначениеСтавкиНСП("ОС");
		// Акциз
		Объект.СуммаАкциза = 0;
		Объект.СпособРаспределенияАкциза = "";
		РаспределитьАкцизНаСервере();
	Иначе // КР или не заполнен Контрагент
		Объект.БезналичныйРасчет = Ложь;
		Объект.ЭтоПоступлениеПоЧеку = Ложь;
		// Акциз
		Объект.СуммаАкциза = 0;
		Объект.СпособРаспределенияАкциза = "";
		РаспределитьАкцизНаСервере();
		
		Объект.ПоступлениеОтНерезидента = Ложь;
	КонецЕсли;	
	
	ОбработатьИзменениеДоговора();
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Договор контрагента.
//
&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	ОбработатьИзменениеДоговора();
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении флажка Это поступление без НДС.
//
&НаКлиенте
Процедура ЭтоПоступлениеБезНДСПриИзменении(Элемент)
	
	// Сброс признака ЭтоПоступлениеПоЧеку.
	Если Объект.ЭтоПоступлениеПоЧеку Тогда 
		Объект.ЭтоПоступлениеПоЧеку = Ложь;	
	КонецЕсли;	
	
	Объект.НомерБланкаСФ = "";
	Объект.ЗначениеСтавкиНДС = 0;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект, "Товары", ПараметрыРасчета);
		
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект, "ОС", ПараметрыРасчета);
		
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл	 
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЦикла;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета(Истина);
	
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект, "Услуги", ПараметрыРасчета);
		
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);	
	КонецЦикла;
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	ОбновитьПодвалФормы();	
КонецПроцедуры

&НаКлиенте
Процедура ЭтоПоступлениеПоЧекуПриИзменении(Элемент)
	
	Объект.НомерБланкаСФ = "";

	// Сброс признака ЭтоПоступлениеБезНДС.
	Если Объект.ЭтоПоступлениеБезНДС Тогда 
		
		Объект.ЭтоПоступлениеБезНДС = Ложь;
		
		Объект.ЗначениеСтавкиНДС = 0;
		
		ПараметрыРасчета = ПодготовитьПараметрыРасчета();
		
		// Расчет налогов
		ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
			Объект, "Товары", ПараметрыРасчета);
				
		ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
			Объект, "ОС", ПараметрыРасчета);
			
		Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл	 
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
		КонецЦикла;
		
		ПараметрыРасчета = ПодготовитьПараметрыРасчета(Истина);
		
		ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
			Объект, "Услуги", ПараметрыРасчета);
			
		Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл	
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);	
		КонецЦикла;
	КонецЕсли;
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	ОбновитьПодвалФормы();	
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма акциза.
//
&НаКлиенте
Процедура СуммаАкцизаПриИзменении(Элемент)
	Если Объект.СуммаАкциза = 0 Тогда 
		Объект.СпособРаспределенияАкциза = "";
	КонецЕсли;
	
	РаспределитьАкцизНаСервере();
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Документ основание.
//
&НаКлиенте
Процедура СпособРаспределенияАкцизаПриИзменении(Элемент)
	РаспределитьАкцизНаСервере();
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Серия бланка СФ.
//
&НаКлиенте
Процедура СерияБланкаСФПриИзменении(Элемент)
	// Заполнение даты СФ
	Если ЗначениеЗаполнено(Объект.СерияБланкаСФ) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ДатаСФ) Тогда
			Объект.ДатаСФ = ДатаДокумента;
		КонецЕсли;	
	КонецЕсли;
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Ставка НДС.
//
&НаКлиенте
Процедура ЗначениеСтавкиНДСПриИзменении(Элемент)
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект, "Товары", ПараметрыРасчета);
			
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект, "ОС", ПараметрыРасчета);
		
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл	 
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЦикла;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета(Истина);
	
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект, "Услуги", ПараметрыРасчета);
		
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);	
	КонецЦикла;
		
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Ставка НСП.
//
&НаКлиенте
Процедура ЗначениеСтавкиНСППриИзменении(Элемент)
	
	МассивТабличныхЧастей = Новый Массив();
	МассивТабличныхЧастей.Добавить("Товары");
	МассивТабличныхЧастей.Добавить("Услуги");
	
	Для Каждого ТабличнаяЧасть Из МассивТабличныхЧастей Цикл
		Для Каждого СтрокаТабличнойЧасти Из Объект[ТабличнаяЧасть] Цикл
			СтрокаТабличнойЧасти.ЗначениеСтавкиНСП = Объект.ЗначениеСтавкиНСП;
		КонецЦикла;
	КонецЦикла;	
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект, "Товары", ПараметрыРасчета);
		
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл	 
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(
			СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЦикла;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета(Истина);
	
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект, "Услуги", ПараметрыРасчета);
		
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(
			СтрокаТабличнойЧасти, ПараметрыРасчета);	
	КонецЦикла;	
		
	УстановитьВидимостьДоступностьЭлементов();
	ОбновитьПодвалФормы();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Ставка НСП для ОС.
//
&НаКлиенте
Процедура ЗначениеСтавкиНСПДляОСПриИзменении(Элемент)
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();	
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл
		СтрокаТабличнойЧасти.ЗначениеСтавкиНСП = Объект.ЗначениеСтавкиНСПДляОС;
	КонецЦикла;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект, "ОС", ПараметрыРасчета);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении флага НДС не подтвержден.
//
&НаКлиенте
Процедура НДСНеПодтвержденПриИзменении(Элемент)
	Объект.СерияБланкаСФ = "";
	Объект.НомерБланкаСФ = "";
	
	Если Объект.НДСНеПодтвержден Тогда
		// Акциз
		Объект.СуммаАкциза = 0;
		Объект.СпособРаспределенияАкциза = "";
		РаспределитьАкцизНаСервере();
	Иначе
		РассчитатьСуммыИНалоги();
	КонецЕсли;	
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении флага Расчет по емкости.
//
&НаКлиенте
Процедура ИспользоватьДопЕдиницыПриИзменении(Элемент)
	Если НЕ Объект.ИспользоватьДопЕдиницы Тогда
		Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
			СтрокаТабличнойЧасти.КоличествоДопЕдиницы = 0;
			СтрокаТабличнойЧасти.КоэффициентДопЕдиницы = 0;
		КонецЦикла;	
	КонецЕсли;
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ИмпортОсвобожденныйОтНДС.
//
&НаКлиенте
Процедура ИмпортОсвобожденныйОтНДСПриИзменении(Элемент)
	// Товары
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл 
		СтрокаТабличнойЧасти.ИмпортОсвобожденныйОтНДС = ПредопределенноеЗначение("Перечисление.ИмпортОсвобожденныйОтНДС.ПустаяСсылка");
	КонецЦикла;	
	// Услуги
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл 
		СтрокаТабличнойЧасти.ИмпортОсвобожденныйОтНДС = ПредопределенноеЗначение("Перечисление.ИмпортОсвобожденныйОтНДС.ПустаяСсылка");
	КонецЦикла;	
	// ОС
	Для Каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл 
		СтрокаТабличнойЧасти.ИмпортОсвобожденныйОтНДС = ПредопределенноеЗначение("Перечисление.ИмпортОсвобожденныйОтНДС.ПустаяСсылка");
	КонецЦикла;
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура НеВключатьВРеестрСФПриИзменении(Элемент)
	//Если Объект.НеВключатьВРеестрСФ Тогда
	//	Объект.СерияБланкаСФ = "";
	//	Объект.НомерБланкаСФ = "";
	//	Объект.ДатаСФ = Дата(1, 1, 1);
	//КонецЕсли;
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура КурсПриИзменении(Элемент)	
	РассчитатьСуммыИНалоги();
КонецПроцедуры

&НаКлиенте
Процедура КратностьПриИзменении(Элемент)
	РассчитатьСуммыИНалоги();	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля выбора Точность цены.
//
&НаКлиенте
Процедура ТочностьЦеныПриИзменении(Элемент)
	
	УстановитьФорматЦены();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеЭСФНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ТекстСообщения = НСтр("ru = 'Документ еще не записан.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	ЭСФКлиент.ПредставлениеЭСФНажатие(ПредставлениеЭСФ, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПоступлениеОтНерезидентаПриИзменении(Элемент)
	
	УстановитьВидимостьДоступностьЭлементов();	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Процедура - обработчик события ПередНачаломДобавления таблицы Товары.
//
&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда 
		ИтогВсего = Объект.Товары.Итог("Всего") + Объект.Услуги.Итог("Всего") + Объект.ОС.Итог("Всего") + Элемент.ТекущиеДанные.Всего;
		ИтогБазаНДС = Объект.Товары.Итог("БазаНДС") + Объект.Услуги.Итог("БазаНДС") + Объект.ОС.Итог("БазаНДС") + Элемент.ТекущиеДанные.БазаНДС;
		ИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС") + Объект.ОС.Итог("СуммаНДС") + Элемент.ТекущиеДанные.СуммаНДС;
		ИтогСуммаНСП = Объект.Товары.Итог("СуммаНСП") + Объект.Услуги.Итог("СуммаНСП") + Объект.ОС.Итог("СуммаНСП") + Элемент.ТекущиеДанные.СуммаНСП;	
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования таблицы Товары.
//
&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Копирование Тогда 
		ОбновитьПодвалФормы();
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПослеУдаления таблицы Товары.
//
&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ОбработатьИзменениеНоменклатуры(СтрокаТабличнойЧасти, "Товары");	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Количество.
//
&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуИБазуНДССтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, ПараметрыРасчета);
		
	// Расчет налогов	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, ПараметрыРасчета);		
			
	// Расчет цены.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);

	Если Объект.ИспользоватьДопЕдиницы Тогда
		РассчитатьКоличествоДопЕдиницСтроки(СтрокаТабличнойЧасти);
	КонецЕсли;
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода КоличествоДопЕдиницы.
//
&НаКлиенте
Процедура ТоварыКоличествоДопЕдиницыПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоДопЕдиницы * СтрокаТабличнойЧасти.КоэффициентДопЕдиницы;	
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуИБазуНДССтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, ПараметрыРасчета);
		
	// Расчет налогов	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, ПараметрыРасчета);		
			
	// Расчет цены.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Всего.
//
&НаКлиенте
Процедура ТоварыВсегоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;

	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуИБазуНДССтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, ПараметрыРасчета);	
		
	// Расчет налогов	      
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, ПараметрыРасчета);

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);	

	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода БазаНДС.
//
&НаКлиенте
Процедура ТоварыБазаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ОбновитьПодвалФормы();		
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СуммаНДС.
//
&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	Если ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС") Тогда
		
		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
		
		ПараметрыРасчета = ПодготовитьПараметрыРасчета();
		
		// Расчет суммы
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНСПСтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЕсли;
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ЗначениеСтавкиНСП.
//
&НаКлиенте
Процедура ТоварыЗначениеСтавкиНСППриИзменении(Элемент)
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуИБазуНДССтрокиТабличнойЧастиПоступление(СтрокаТабличнойЧасти, ПараметрыРасчета);
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(СтрокаТабличнойЧасти, ПараметрыРасчета);
	// Расчет цены.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СуммаНСП.
//
&НаКлиенте
Процедура ТоварыСуммаНСППриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.Всего - СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаНСП;	
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ИмпортОсвобожденныйОтНДС.
//
&НаКлиенте
Процедура ТоварыИмпортОсвобожденныйОтНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИмпортОсвобожденныйОтНДС) Тогда
		СтрокаТабличнойЧасти.СуммаНДС = 0;
		
	ИначеЕсли СтрокаТабличнойЧасти.СуммаНДС = 0 Тогда
		ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
		// Расчет налогов	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЕсли;
		
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода КоэффициентДопЕдиницы.
//
&НаКлиенте
Процедура ТоварыКоэффициентДопЕдиницыПриИзменении(Элемент)
	
	Если Объект.ИспользоватьДопЕдиницы Тогда
		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
		РассчитатьКоличествоДопЕдиницСтроки(СтрокаТабличнойЧасти);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

// Процедура - обработчик события ПередНачаломДобавления таблицы Услуги.
//
&НаКлиенте
Процедура УслугиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда 
		ИтогВсего = Объект.Товары.Итог("Всего") + Объект.Услуги.Итог("Всего") + Объект.ОС.Итог("Всего") + Элемент.ТекущиеДанные.Всего;
		ИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС") + Объект.ОС.Итог("СуммаНДС") + Элемент.ТекущиеДанные.СуммаНДС;
		ИтогСуммаНСП = Объект.Товары.Итог("СуммаНСП") + Объект.Услуги.Итог("СуммаНСП") + Объект.ОС.Итог("СуммаНСП") + Элемент.ТекущиеДанные.СуммаНСП;	
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПередНачаломИзменения таблицы Товары.
//
&НаКлиенте
Процедура УслугиПередНачаломИзменения(Элемент, Отказ)
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоСтроки(
		ЭтотОбъект, ТекущиеДанные, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования таблицы Услуги.
//
&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Копирование Тогда 
		ОбновитьПодвалФормы();
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПослеУдаления таблицы Услуги.
//
&НаКлиенте
Процедура УслугиПослеУдаления(Элемент)
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	ОбработатьИзменениеНоменклатуры(СтрокаТабличнойЧасти, "Услуги");	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Количество.
//
&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета(Истина);
	
	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуИБазуНДССтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, ПараметрыРасчета);
		
	// Расчет налогов	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, ПараметрыРасчета);
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);	
		
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Всего.
//
&НаКлиенте
Процедура УслугиВсегоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета(Истина);
	
	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуИБазуНДССтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, ПараметрыРасчета);	
		
	// Расчет налогов	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, ПараметрыРасчета);

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);	

	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета(Истина);
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, ПараметрыРасчета);

	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода БазаНДС.
//
&НаКлиенте
Процедура УслугиБазаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета(Истина);
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, ПараметрыРасчета);

	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СуммаНДС.
//
&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)
	
	Если ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС") Тогда
		СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
		
		ПараметрыРасчета = ПодготовитьПараметрыРасчета();
		
		// Расчет суммы
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНСПСтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЕсли;
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ЗначениеСтавкиНСП.
//
&НаКлиенте
Процедура УслугиЗначениеСтавкиНСППриИзменении(Элемент)
	ПараметрыРасчета = ПодготовитьПараметрыРасчета(Истина);
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуИБазуНДССтрокиТабличнойЧастиПоступление(СтрокаТабличнойЧасти, ПараметрыРасчета);
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(СтрокаТабличнойЧасти, ПараметрыРасчета);
	// Расчет цены.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНСППриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.Всего - СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаНСП;	
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СчетРасходов.
//
&НаКлиенте
Процедура УслугиСчетРасходовПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСчета(
		ЭтотОбъект, ТекущиеДанные, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода УслугиСубконто1.
//
&НаКлиенте
Процедура УслугиСубконто1ПриИзменении(Элемент)
	ПриИзмененииСубконто(1);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода УслугиСубконто2.
//
&НаКлиенте
Процедура УслугиСубконто2ПриИзменении(Элемент)
	ПриИзмененииСубконто(2);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода УслугиСубконто3.
//
&НаКлиенте
Процедура УслугиСубконто3ПриИзменении(Элемент)
	ПриИзмененииСубконто(3);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОС

// Процедура - обработчик события ПередНачаломДобавления таблицы ОС.
//
&НаКлиенте
Процедура ОСПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда 
		ИтогВсего = Объект.Товары.Итог("Всего") + Объект.Услуги.Итог("Всего") + Объект.ОС.Итог("Всего") + Элемент.ТекущиеДанные.Всего;
		ИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС") + Объект.ОС.Итог("СуммаНДС") + Элемент.ТекущиеДанные.СуммаНДС;
		ИтогСуммаНСП = Объект.Товары.Итог("СуммаНСП") + Объект.Услуги.Итог("СуммаНСП") + Объект.ОС.Итог("СуммаНСП") + Элемент.ТекущиеДанные.СуммаНСП;	
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования таблицы ОС.
//
&НаКлиенте
Процедура ОСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Копирование Тогда 
		ОбновитьПодвалФормы();
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПослеУдаления таблицы ОС.
//
&НаКлиенте
Процедура ОСПослеУдаления(Элемент)
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Всего.
//
&НаКлиенте
Процедура ОСВсегоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуИБазуНДССтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, ПараметрыРасчета);	
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, ПараметрыРасчета);

	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура ОССуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода БазаНДС.
//
&НаКлиенте
Процедура ОСБазаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СуммаНДС.
//
&НаКлиенте
Процедура ОССуммаНДСПриИзменении(Элемент)
	
	Если ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС") Тогда
		СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
		
		ПараметрыРасчета = ПодготовитьПараметрыРасчета();
		
		// Расчет суммы
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНСПСтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЕсли;
	
	ОбновитьПодвалФормы();	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ЗначениеСтавкиНСП.
//
&НаКлиенте
Процедура ОСЗначениеСтавкиНСППриИзменении(Элемент)
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуИБазуНДССтрокиТабличнойЧастиПоступление(СтрокаТабличнойЧасти, ПараметрыРасчета);
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(СтрокаТабличнойЧасти, ПараметрыРасчета);
		
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОССуммаНСППриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.Всего - СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаНСП;	
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ИмпортОсвобожденныйОтНДС.
//
&НаКлиенте
Процедура ОСИмпортОсвобожденныйОтНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИмпортОсвобожденныйОтНДС) Тогда
		СтрокаТабличнойЧасти.СуммаНДС = 0;
		
	ИначеЕсли СтрокаТабличнойЧасти.СуммаНДС = 0 Тогда
		ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
		// Расчет налогов	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОС.
//
&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	СтрокаТабличнойЧасти.ЗначениеСтавкиНСП = Объект.ЗначениеСтавкиНСПДляОС;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик события действия команды Подбор в табличную часть Товары.
// Открывает форму подбора.
//
&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	РаботаСПодборомНоменклатурыКлиент.ОткрытьПодбор(ЭтаФорма, "Товары", "Поступление");
КонецПроцедуры

&НаКлиенте
Асинх Процедура РаспределитьАкциз(Команда)
	
	Если Объект.Товары.Количество() > 0
		Или Объект.Услуги.Количество() > 0
		Или Объект.ОС.Количество() >0 Тогда 
        ТекстВопроса = НСтр("ru = 'Сумма акциза будет распределена и налоги будут расчитаны снова. Продолжить?'");
        Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
        
        Если Ответ = КодВозвратаДиалога.Нет Тогда
            Возврат;
        КонецЕсли;
	КонецЕсли;    
	
	РаспределитьАкцизНаСервере();	

КонецПроцедуры

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла
&НаКлиенте
Процедура ЗагрузитьТоварыИзФайла(Команда)
    ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
    ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "ПоступлениеТоваровУслуг.Товары";
    ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка списка товаров из файла'");
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьТоварыИзФайлаЗавершение", ЭтотОбъект);
    ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

// ПодключаемоеОборудование
&НаКлиенте
Процедура ПоискПоШтрихкодуТовары(Команда)
	
	ТекШтрихкод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", 
		ЭтотОбъект, Новый Структура("ТекШтрихкод, ИмяТабличнойЧасти", ТекШтрихкод, "Товары")), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
		
КонецПроцедуры
	
&НаКлиенте
Процедура ПоискПоШтрихкодуУслуги(Команда)
	
	ТекШтрихкод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", 
		ЭтотОбъект, Новый Структура("ТекШтрихкод, ИмяТабличнойЧасти", ТекШтрихкод, "Услуги")), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));

КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ТекШтрихкод = ?(Результат = Неопределено, ДополнительныеПараметры.ТекШтрихкод, Результат);
    
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
        ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1), ДополнительныеПараметры.ИмяТабличнойЧасти);
	КонецЕсли;	

КонецПроцедуры 
// Конец ПодключаемоеОборудование

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла
&НаКлиенте
Процедура ЗагрузитьТоварыИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
    Если АдресЗагруженныхДанных = Неопределено Тогда 
        Возврат;
    КонецЕсли;
    ЗагрузитьТоварыИзФайлаНаСервере(АдресЗагруженныхДанных);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость и доступность элементов.
//
&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()
	
	ПризнакЗачетаНДСП = ДанныеУчетнойПолитики.УказыватьПризнакЗачетаНДСПриПоступлении;
	ЭтоКонтрагентСЭЗ = Объект.Контрагент.СЭЗ;
	
	Если ПризнакСтраны = Перечисления.ПризнакиСтраны.ЕАЭС Тогда
		Элементы.СтраницаСопроводительнаяНакладная.Видимость = Истина;
		Элементы.БезналичныйРасчет.ТолькоПросмотр = НЕ ДанныеУчетнойПолитики.ПлательщикНСП ИЛИ НЕ Объект.ПоступлениеОтНерезидента;
		
		Элементы.ЭтоПоступлениеПоЧеку.Видимость = Ложь;
		Элементы.ДатаСФРучнойВВод.Видимость = Истина;
		
		// Ставки
		Элементы.НДСНеПодтвержден.Видимость = Ложь;
		Элементы.ЗначениеСтавкиНДС.Видимость = Истина;
		// Счет-фактура
		Элементы.СерияБланкаСФ.Видимость 		 = НЕ ЗначениеЗаполнено(СчетФактураПолученный);
		Элементы.НомерБланкаСФ.Видимость 		 = НЕ ЗначениеЗаполнено(СчетФактураПолученный);
		Элементы.ДатаСФ.Видимость 				 = НЕ ЗначениеЗаполнено(СчетФактураПолученный);
		Элементы.НеВключатьВРеестрСФ.Видимость 	 = НЕ ЗначениеЗаполнено(СчетФактураПолученный);
		Элементы.СчетФактураПолученный.Видимость = ЗначениеЗаполнено(СчетФактураПолученный);
		// Курс прихода
		Если Объект.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда 
			Элементы.Курс.Видимость = Ложь;
			Элементы.Кратность.Видимость = Ложь;
		Иначе
			Элементы.Курс.Видимость = Истина;
			Если Объект.Кратность > 1 Тогда
				Элементы.Кратность.Видимость = Истина;
			Иначе
				Элементы.Кратность.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
		// Сумма и Всего
		Элементы.ТоварыСумма.Видимость = Истина;
		Элементы.ТоварыВсего.Заголовок = "Всего";
		Элементы.УслугиСумма.Видимость = Истина;
		Элементы.УслугиВсего.Заголовок = "Всего";
		Элементы.ОССумма.Видимость = Истина;
		Элементы.ОСВсего.Заголовок = "Всего";
		// Акциз
		Элементы.СуммаАкциза.Видимость = Истина;
		Элементы.СпособРаспределенияАкциза.Видимость = Истина;
		Элементы.РаспределитьАкциз.Видимость = Истина;
		
		Если Объект.СуммаАкциза = 0 Тогда 
			Элементы.ТоварыСуммаАкциза.Видимость = Ложь;
			Элементы.УслугиСуммаАкциза.Видимость = Ложь;
		Иначе 
			Элементы.ТоварыСуммаАкциза.Видимость = Истина;
			Элементы.УслугиСуммаАкциза.Видимость = Истина;
		КонецЕсли;	
			
		Элементы.ТоварыВес.Видимость = Истина;
		Элементы.УслугиВес.Видимость = Истина;
		Элементы.ОСВес.Видимость = Истина;
		// Импорт
		Элементы.ИмпортОсвобожденныйОтНДС.Видимость = Истина;
		Элементы.ТоварыИмпортОсвобожденныйОтНДС.Видимость = Объект.ИмпортОсвобожденныйОтНДС.Пустая();
		Элементы.ОСИмпортОсвобожденныйОтНДС.Видимость = Объект.ИмпортОсвобожденныйОтНДС.Пустая();	
		// Зачет НДС
		Элементы.ТоварыЗачетНДС.Видимость = ПризнакЗачетаНДСП;
		Элементы.УслугиЗачетНДС.Видимость = ПризнакЗачетаНДСП;
		Элементы.ОСЗачетНДС.Видимость = ПризнакЗачетаНДСП;
		// База НДС
		Элементы.ТоварыБазаНДС.Видимость = Истина;
		Элементы.УслугиБазаНДС.Видимость = Истина;
		Элементы.ОСБазаНДС.Видимость = Истина;
		Элементы.ИтогБазаНДС.Видимость = Истина;
		// Сумма НДС
		Элементы.ТоварыСуммаНДС.Видимость = НЕ Объект.ЗначениеСтавкиНДС = 0;
		Элементы.УслугиСуммаНДС.Видимость = НЕ Объект.ЗначениеСтавкиНДС = 0;
		Элементы.ОССуммаНДС.Видимость = НЕ Объект.ЗначениеСтавкиНДС = 0;
		Элементы.ИтогСуммаНДС.Видимость = НЕ Объект.ЗначениеСтавкиНДС = 0;
		// Доп единицы
		Элементы.ТоварыКоличествоДопЕдиницы.Видимость = Объект.ИспользоватьДопЕдиницы;
		Элементы.ТоварыКоэффициентДопЕдиницы.Видимость = Объект.ИспользоватьДопЕдиницы;
		
		Элементы.ПоступлениеОтНерезидента.Видимость = Истина;
		Элементы.ТоварыНоменклатураКодТНВЭД.Видимость = Истина;

	ИначеЕсли ПризнакСтраны = Перечисления.ПризнакиСтраны.ИмпортЭкспорт Тогда
		Элементы.СтраницаСопроводительнаяНакладная.Видимость = Ложь;
		Элементы.БезналичныйРасчет.ТолькоПросмотр = НЕ ДанныеУчетнойПолитики.ПлательщикНСП ИЛИ НЕ Объект.ПоступлениеОтНерезидента;
		Элементы.ЭтоПоступлениеПоЧеку.Видимость = Ложь;
		Элементы.ДатаСФРучнойВВод.Видимость = Ложь;
		
		Элементы.ИмпортОсвобожденныйОтНДС.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС;
		
		// Сумма и Всего
		Если Объект.ПоступлениеОтНерезидента Тогда
			Элементы.УслугиСумма.Видимость = Истина;
			Элементы.УслугиВсего.Заголовок = "Всего";	
		Иначе	
			Элементы.УслугиСумма.Видимость = Ложь;
			Элементы.УслугиВсего.Заголовок = "Сумма";
		КонецЕсли;
		
		Элементы.ТоварыСумма.Видимость = Ложь;
		Элементы.ТоварыВсего.Заголовок = "Сумма";
		Элементы.ОССумма.Видимость = Ложь;
		Элементы.ОСВсего.Заголовок = "Сумма";
		// Ставки
		Элементы.НДСНеПодтвержден.Видимость = Ложь;
		//Элементы.ЗначениеСтавкиНДС.Видимость = Объект.ПоступлениеОтНерезидента;
		// Счет-фактура
		Элементы.СерияБланкаСФ.Видимость = Ложь;
		Элементы.НомерБланкаСФ.Видимость = Ложь;
		Элементы.ДатаСФ.Видимость = Ложь;
		Элементы.НеВключатьВРеестрСФ.Видимость = Ложь;
		Элементы.СчетФактураПолученный.Видимость = Ложь;
		// Курс прихода
		Если Объект.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда 
			Элементы.Курс.Видимость = Ложь;
			Элементы.Кратность.Видимость = Ложь;
		Иначе
			Элементы.Курс.Видимость = Истина;
			Если Объект.Кратность > 1 Тогда
				Элементы.Кратность.Видимость = Истина;
			Иначе
				Элементы.Кратность.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
		// Акциз
		Элементы.СуммаАкциза.Видимость = Ложь;
		Элементы.СпособРаспределенияАкциза.Видимость = Ложь;
		Элементы.РаспределитьАкциз.Видимость = Ложь;
		
		Элементы.ТоварыВес.Видимость = Ложь;
		Элементы.ТоварыИмпортОсвобожденныйОтНДС.Видимость = Ложь;
		Элементы.ТоварыСуммаАкциза.Видимость = Ложь;
		Элементы.УслугиСуммаАкциза.Видимость = Ложь;
		// Услуги
		Элементы.УслугиВес.Видимость = Ложь;
		
		// ОС
		Элементы.ОСВес.Видимость = Ложь;
		Элементы.ОСИмпортОсвобожденныйОтНДС.Видимость = Ложь;
		
		// Зачет НДС
		Элементы.ТоварыЗачетНДС.Видимость = Ложь;
		Элементы.УслугиЗачетНДС.Видимость = Объект.ПоступлениеОтНерезидента;
		Элементы.ОСЗачетНДС.Видимость = Ложь;
		// База НДС
		Элементы.ТоварыБазаНДС.Видимость = Ложь;
		Элементы.УслугиБазаНДС.Видимость = Объект.ПоступлениеОтНерезидента;
		Элементы.ОСБазаНДС.Видимость = Ложь;
		Элементы.ИтогБазаНДС.Видимость = Объект.ПоступлениеОтНерезидента;
		// Сумма НДС
		Элементы.ТоварыСуммаНДС.Видимость = Ложь;
		Элементы.УслугиСуммаНДС.Видимость = Объект.ПоступлениеОтНерезидента;
		Элементы.ОССуммаНДС.Видимость = Ложь;
		Элементы.ИтогСуммаНДС.Видимость = Объект.ПоступлениеОтНерезидента;
		// Доп единицы
		Элементы.ТоварыКоличествоДопЕдиницы.Видимость = Объект.ИспользоватьДопЕдиницы;
		Элементы.ТоварыКоэффициентДопЕдиницы.Видимость = Объект.ИспользоватьДопЕдиницы;
		
		Элементы.ПоступлениеОтНерезидента.Видимость = Истина;
		Элементы.ТоварыНоменклатураКодТНВЭД.Видимость = Ложь;

	Иначе // КР или не заполнен Контрагент	
		Элементы.СтраницаСопроводительнаяНакладная.Видимость = Ложь;
		Элементы.БезналичныйРасчет.ТолькоПросмотр = НЕ ДанныеУчетнойПолитики.ПлательщикНСП;
		
		Элементы.ЭтоПоступлениеПоЧеку.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС И НЕ ЭтоКонтрагентСЭЗ;
		Элементы.ДатаСФРучнойВВод.Видимость = Ложь;

		// Ставки
		Элементы.НДСНеПодтвержден.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС И НЕ ЭтоКонтрагентСЭЗ;	
		Элементы.ЗначениеСтавкиНДС.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС И НЕ ЭтоКонтрагентСЭЗ;
		
		Элементы.ИмпортОсвобожденныйОтНДС.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС;
		
		// Сумма
		Элементы.ТоварыСумма.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС И Объект.ЗначениеСтавкиНДС > 0;
		Элементы.УслугиСумма.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС И Объект.ЗначениеСтавкиНДС > 0;
		Элементы.ОССумма.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС И Объект.ЗначениеСтавкиНДС > 0;
		
		Если Элементы.ТоварыСумма.Видимость Тогда
			Элементы.ТоварыВсего.Заголовок = "Всего";
			Элементы.УслугиВсего.Заголовок = "Всего";
			Элементы.ОСВсего.Заголовок = "Всего";
		Иначе
			Элементы.ТоварыВсего.Заголовок = "Сумма";
			Элементы.УслугиВсего.Заголовок = "Сумма";
			Элементы.ОСВсего.Заголовок = "Сумма";
		КонецЕсли;	
		
		// Счет-фактура
		Элементы.СерияБланкаСФ.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС И НЕ Объект.НДСНеПодтвержден И НЕ ЗначениеЗаполнено(СчетФактураПолученный);
		Элементы.НомерБланкаСФ.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС И НЕ Объект.НДСНеПодтвержден И НЕ ЗначениеЗаполнено(СчетФактураПолученный);
		Элементы.ДатаСФ.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС И НЕ Объект.НДСНеПодтвержден И НЕ ЗначениеЗаполнено(СчетФактураПолученный);
		Элементы.НеВключатьВРеестрСФ.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС И НЕ Объект.НДСНеПодтвержден И НЕ ЗначениеЗаполнено(СчетФактураПолученный);
		Элементы.СчетФактураПолученный.Видимость = ЗначениеЗаполнено(СчетФактураПолученный);
		// Курс прихода
		Элементы.Курс.Видимость = Ложь;
		Элементы.Кратность.Видимость = Ложь;
		// Акциз
		Элементы.СуммаАкциза.Видимость = Ложь;
		Элементы.СпособРаспределенияАкциза.Видимость = Ложь;
		Элементы.РаспределитьАкциз.Видимость = Ложь;

		Элементы.РаспределитьАкциз.Видимость = Ложь;
		Элементы.ТоварыСуммаАкциза.Видимость = Ложь;
		Элементы.УслугиСуммаАкциза.Видимость = Ложь;
		//Элементы.ОССуммаАкциза.Видимость = Ложь;
		// Товары
		Элементы.ТоварыКоличествоДопЕдиницы.Видимость = Объект.ИспользоватьДопЕдиницы;
		Элементы.ТоварыКоэффициентДопЕдиницы.Видимость = Объект.ИспользоватьДопЕдиницы;
		Элементы.ТоварыВес.Видимость = Ложь;
		Элементы.ТоварыИмпортОсвобожденныйОтНДС.Видимость = Ложь;
		// Услуги
		Элементы.УслугиВес.Видимость = Ложь;
		// ОС
		Элементы.ОСВес.Видимость = Ложь;
		Элементы.ОСИмпортОсвобожденныйОтНДС.Видимость = Ложь;
		// Зачет НДС
		Элементы.ТоварыЗачетНДС.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС И Объект.ЗначениеСтавкиНДС > 0 И ПризнакЗачетаНДСП;
		Элементы.УслугиЗачетНДС.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС И Объект.ЗначениеСтавкиНДС > 0 И ПризнакЗачетаНДСП;
		Элементы.ОСЗачетНДС.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС И Объект.ЗначениеСтавкиНДС > 0 И ПризнакЗачетаНДСП;
		// База НДС
		Элементы.ТоварыБазаНДС.Видимость = Ложь;
		Элементы.УслугиБазаНДС.Видимость = Ложь;
		Элементы.ОСБазаНДС.Видимость = Ложь;
		Элементы.ИтогБазаНДС.Видимость = Ложь;
		// Сумма НДС
		Элементы.ТоварыСуммаНДС.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС И НЕ Объект.ЗначениеСтавкиНДС = 0;
		Элементы.УслугиСуммаНДС.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС И НЕ Объект.ЗначениеСтавкиНДС = 0;
		Элементы.ОССуммаНДС.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС И НЕ Объект.ЗначениеСтавкиНДС = 0;
		Элементы.ИтогСуммаНДС.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС И НЕ Объект.ЗначениеСтавкиНДС = 0;
		
		Элементы.ПоступлениеОтНерезидента.Видимость = Ложь;
		Элементы.ТоварыНоменклатураКодТНВЭД.Видимость = Ложь;

	КонецЕсли;	
	
	// ИСКЛЮЧЕНИЕ - если значение ставки НДС заполнено,
	// но видимость отлкючена, то видимость возвращается,
	// чтобы пользователь понял что это ошибка и решил проблему на свое усмотрение.
	Если НЕ Элементы.ЗначениеСтавкиНДС.Видимость
		И Объект.ЗначениеСтавкиНДС <> 0 Тогда
		Элементы.ЗначениеСтавкиНДС.Видимость = НЕ ЭтоКонтрагентСЭЗ;
	КонецЕсли;
	
 	// Видимость НСП
	Если Объект.БезналичныйРасчет
		Или НЕ ДанныеУчетнойПолитики.ПлательщикНСП Тогда
		
		Элементы.ТоварыЗначениеСтавкиНСП.Видимость 	= Ложь;
		Элементы.ТоварыСуммаНСП.Видимость 			= Ложь;
		Элементы.УслугиЗначениеСтавкиНСП.Видимость 	= Ложь;
		Элементы.УслугиСуммаНСП.Видимость 			= Ложь;
		Элементы.ОСЗначениеСтавкиНСП.Видимость 		= Ложь;
		Элементы.ОССуммаНСП.Видимость 				= Ложь;
		Элементы.ИтогСуммаНСП.Видимость 			= Ложь;
		Элементы.ЗначениеСтавкиНСП.Видимость 		= Ложь;
		Элементы.ЗначениеСтавкиНСПДляОС.Видимость 	= Ложь;
		
	Иначе 
		ВидимостьНСП = ПризнакСтраны = Перечисления.ПризнакиСтраны.КР ИЛИ Объект.ПоступлениеОтНерезидента;
		
		Элементы.ТоварыЗначениеСтавкиНСП.Видимость 	= ВидимостьНСП;
		Элементы.ТоварыСуммаНСП.Видимость 			= ВидимостьНСП;
		Элементы.УслугиЗначениеСтавкиНСП.Видимость 	= ВидимостьНСП;
		Элементы.УслугиСуммаНСП.Видимость 			= ВидимостьНСП;
		Элементы.ОСЗначениеСтавкиНСП.Видимость 		= ВидимостьНСП;
		Элементы.ОССуммаНСП.Видимость 				= ВидимостьНСП;
		Элементы.ИтогСуммаНСП.Видимость 			= ВидимостьНСП;
		Элементы.ЗначениеСтавкиНСП.Видимость 		= ВидимостьНСП;
		Элементы.ЗначениеСтавкиНСПДляОС.Видимость 	= ВидимостьНСП;
	КонецЕсли;		
	
	Если Объект.ЭтоПоступлениеБезНДС
		Или Объект.ЭтоПоступлениеПоЧеку
		Или ПризнакСтраны = Перечисления.ПризнакиСтраны.ЕАЭС Тогда 
		Элементы.НомерБланкаСФРучнойВвод.Видимость = Истина;
		Элементы.СерияБланкаСФРучнойВвод.Видимость = Истина;
	Иначе 
		Элементы.НомерБланкаСФРучнойВвод.Видимость = Ложь;
		Элементы.СерияБланкаСФРучнойВвод.Видимость = Ложь;
	КонецЕсли;	
	
	Если ПризнакСтраны = Перечисления.ПризнакиСтраны.КР
		И НЕ (Объект.ЭтоПоступлениеБезНДС
			ИЛИ Объект.ЭтоПоступлениеПоЧеку) Тогда
		Элементы.ПредставлениеЭСФ.Видимость = Истина;
	Иначе
		Элементы.ПредставлениеЭСФ.Видимость = Ложь;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(СчетФактураПолученный) Тогда
		Если Объект.НеВключатьВРеестрСФ Тогда
			Элементы.СерияБланкаСФ.Доступность 	= Ложь;
			Элементы.НомерБланкаСФ.Доступность 	= Ложь;
			Элементы.ДатаСФ.Доступность			= Ложь;
		Иначе
			Элементы.СерияБланкаСФ.Доступность 	= Истина;
			Элементы.НомерБланкаСФ.Доступность 	= Истина;
			Элементы.ДатаСФ.Доступность			= Истина;
		КонецЕсли;
	КонецЕсли;	
	
	// Переход на ЭСФ.
	Если ДатаДокумента >= Дата(2020, 07, 01) Тогда 
		Элементы.НеВключатьВРеестрСФ.Видимость = Ложь;
		Элементы.СерияБланкаСФ.Видимость = Ложь;
		Элементы.НомерБланкаСФ.Видимость = Ложь;
		Элементы.ДатаСФ.Видимость = Ложь;
		Элементы.СтраницаСФ.Видимость = Ложь;
		Элементы.НДСНеПодтвержден.Видимость = Ложь;
	КонецЕсли;	

КонецПроцедуры 

// Процедура настройки условного оформления форм и динамических списков .
//
&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// Таблица Услуги.
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("УслугиСубконто1");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Услуги.Субконто1Доступность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("УслугиСубконто2");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Услуги.Субконто2Доступность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("УслугиСубконто3");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Услуги.Субконто3Доступность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

// Процедура устанавливает текущую страницу при открытии формы.
//
&НаКлиенте
Процедура УстановитьТекущуюСтраницу()	
	Если Объект.Товары.Количество() > 0 Тогда 
		Возврат;
	ИначеЕсли Объект.Услуги.Количество() > 0 Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаУслуги;
	ИначеЕсли Объект.ОС.Количество() > 0 Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаОсновныеСредства;
	КонецЕсли;	
КонецПроцедуры

// Процедура устанавливает функциональные опции формы документа.
//
&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма, Объект.Организация, ДатаДокумента);
КонецПроцедуры

// Процедура - Установить параметры выбора
//
&НаСервере
Процедура УстановитьПараметрыВыбора()
	// Основные средства.
	СчетаУчетаОсновныхСредств = БухгалтерскийУчетСервер.СчетаУчетаОсновныхСредств();
	СчетаУчетаНематериальныхАктивов = БухгалтерскийУчетСервер.СчетаУчетаНематериальныхАктивов();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУчетаОсновныхСредств, СчетаУчетаНематериальныхАктивов); 
	ФиксированныйМассивСчетов = Новый ФиксированныйМассив(СчетаУчетаОсновныхСредств);
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", ФиксированныйМассивСчетов);
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.ОССчетУчета.ПараметрыВыбора = НовыеПараметры;
	
	// Товары.
	СчетаУчетаТоваров = БухгалтерскийУчетСервер.СчетаУчетаТоваров();
	СчетаУчетаМБП = БухгалтерскийУчетСервер.СчетаУчетаМБП();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУчетаТоваров, СчетаУчетаМБП); 
	ФиксированныйМассивСчетов = Новый ФиксированныйМассив(СчетаУчетаТоваров);
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", ФиксированныйМассивСчетов);
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.ТоварыСчетУчета.ПараметрыВыбора = НовыеПараметры;

КонецПроцедуры // УстановитьПараметрыВыбора()

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением, ВалютаДокумента)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением);
	ВалютаКурсКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДатаНовая);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат);
		
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		ВалютаКурсКратность);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура - Установить пиктограмму комментария.
//
&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

// Процедура устанавливает связи параметров выбора.
//
&НаКлиенте
Процедура УстановитьСвязиПараметровВыбора()
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.РасходыБудущихПериодов")
		Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ЗакупочныйАкт") Тогда
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.КР"));
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ПризнакСтраны", Новый ФиксированныйМассив(НовыйМассив));
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Контрагент.ПараметрыВыбора = НовыеПараметры;
	Иначе
		// Без отбора.
		НовыйМассив = Новый Массив();
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Контрагент.ПараметрыВыбора = НовыеПараметры;
	КонецЕсли;
	
КонецПроцедуры // УстановитьПараметрыВыбора()

// Процедура устанавлнивает значение ставки НСП в табличной части
//
// Параметры:
//  ИмяТабличнойЧасти	 - Строка	- Имя табличной части, в которой нужно изменить значение ставки НСП
//  ЗначениеСтавкиНСП	 - Число	- Новое значение ставки НСП
//
&НаКлиенте
Процедура УстановитьЗначениеСтавкиНСП(ИмяТабличнойЧасти, ЗначениеСтавкиНСП = 0)
	Для Каждого СтрокаТабличнойЧасти Из Объект[ИмяТабличнойЧасти] Цикл 
		СтрокаТабличнойЧасти.ЗначениеСтавкиНСП = ЗначениеСтавкиНСП;	
	КонецЦикла;	
КонецПроцедуры // УстановитьЗначениеСтавкиНСП()

// Получает набор данных с сервера для процедуры КонтрагентПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Контрагент, Организация)
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Контрагент, Организация, Объект.ВидОперации);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ДоговорКонтрагента",
		ДоговорПоУмолчанию);
	
	СтруктураДанные.Вставить(
		"ПризнакСтраны",
		Контрагент.ПризнакСтраны);
		
	СтруктураДанные.Вставить(
		"СЭЗ",
		Контрагент.СЭЗ);
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

// Получает договор по умолчанию
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация, ВидОперации)
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ВидыДоговораДляДокумента(Документ, ВидОперации);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(Период, Контрагент, ДоговорКонтрагента, ВидОперации, ЗначенияТекущихСтавокНДСиНСП)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		ДоговорКонтрагента.ВалютаРасчетов);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаРасчетов, Период));
	
	СтруктураДанные.Вставить(
		"СуммаВключаетНалоги",
		ДоговорКонтрагента.СуммаВключаетНалоги);
	
	СчетаУчета = БухгалтерскийУчетСервер.ПолучитьСчетаРасчетовСКонтрагентом(ДоговорКонтрагента.Организация, ДоговорКонтрагента.Владелец, ДоговорКонтрагента);
	СтруктураДанные.Вставить(
		"СчетРасчетов",
		СчетаУчета.СчетРасчетовПоставщика);
		
	ЗначенияСтавокНДСиНСП = УчетНДС.ПолучитьЗначенияСтавокНДСиНСП(Период, ДоговорКонтрагента, ЗначенияТекущихСтавокНДСиНСП); 
	
	СтруктураДанные.Вставить(
		"ЗначениеСтавкиНДС",
		ЗначенияСтавокНДСиНСП.ЗначениеСтавкиНДС);
		
	СтруктураДанные.Вставить(
		"НомерДоговора",
		ДоговорКонтрагента.НомерДоговора);
		
	СтруктураДанные.Вставить(
		"ДатаДоговора",
		ДоговорКонтрагента.ДатаДоговора);
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

&НаКлиенте
Процедура ОбработатьИзменениеДоговора(МодифицированДоговор = Ложь)
	
	ЗначенияТекущихСтавокНДСиНСП = Новый Структура;
	ЗначенияТекущихСтавокНДСиНСП.Вставить("ЗначениеСтавкиНДС", Объект.ЗначениеСтавкиНДС);
	
	СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(ДатаДокумента, Объект.Контрагент, Объект.ДоговорКонтрагента, Объект.ВидОперации, ЗначенияТекущихСтавокНДСиНСП);

	// Обработка изменения валюты
	Объект.ВалютаДокумента = СтруктураДанные.ВалютаРасчетов;
	Объект.Курс      = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
	Объект.Кратность = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
	
	КурсНБКР      = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
	КратностьНБКР = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
	
	// Обработка изменения налогообложения
	Если ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС") Тогда
		Объект.СуммаВключаетНалоги = Истина;
	Иначе	
		Объект.СуммаВключаетНалоги 	= Ложь;
	КонецЕсли;
	
	Если ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ИмпортЭкспорт") ИЛИ Объект.НДСНеПодтвержден Тогда		
		Объект.ЗначениеСтавкиНДС = 0;
	Иначе
		Объект.ЗначениеСтавкиНДС = ?(ДанныеУчетнойПолитики.ПлательщикНДС, СтруктураДанные.ЗначениеСтавкиНДС, 0);
	КонецЕсли;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	Объект.НомерКонтракта = СтруктураДанные.НомерДоговора;	
	Объект.ДатаКонтракта = СтруктураДанные.ДатаДоговора;	
	
	// Обработка изменения отражения в учете
	Объект.СчетРасчетов = СтруктураДанные.СчетРасчетов;
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект, "Товары", ПараметрыРасчета);
			
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект, "ОС", ПараметрыРасчета);

	// Расчет цены.
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЦикла;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета(Истина);
	
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект, "Услуги", ПараметрыРасчета);
		
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЦикла;
	
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеНоменклатуры(СтрокаТабличнойЧасти, ИмяТабличнойЧасти)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Дата", ДатаДокумента);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("ЗначениеСтавкиНДС", Объект.ЗначениеСтавкиНДС);
	СтруктураДанные.Вставить("ЗначениеСтавкиНСП", Объект.ЗначениеСтавкиНСП);
	СтруктураДанные.Вставить("СуммаВключаетНалоги", Объект.СуммаВключаетНалоги);
	СтруктураДанные.Вставить("БезналичныйРасчет", Объект.БезналичныйРасчет);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные, ДанныеУчетнойПолитики.ПлательщикНСП);

	// Заполнение по данным номенклатуры
	Если ИмяТабличнойЧасти = "Товары" Тогда 
		СтрокаТабличнойЧасти.СчетУчета = СтруктураДанные.СчетУчета;
	ИначеЕсли ИмяТабличнойЧасти = "Услуги" Тогда 
		СтрокаТабличнойЧасти.СчетРасходов = СтруктураДанные.СчетРасходов;
		
		БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСчета(
			ЭтотОбъект, СтрокаТабличнойЧасти, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЗначениеСтавкиНСП = СтруктураДанные.ЗначениеСтавкиНСП;

	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	
	Если СтрокаТабличнойЧасти.Количество = 0 Тогда  
		СтрокаТабличнойЧасти.Количество = 1;
	КонецЕсли;	
	
	Если ИмяТабличнойЧасти = "Услуги" Тогда
		ПараметрыРасчета = ПодготовитьПараметрыРасчета(Истина);
	Иначе	
		ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	КонецЕсли;	
		
	// Расчет налогов.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, ПараметрыРасчета);
		
	ОбновитьПодвалФормы();
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбработатьИзменениеУчетнойПолитики()
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);	
	
	Если НЕ ДанныеУчетнойПолитики.ПлательщикНДС Тогда
		Объект.СерияБланкаСФ = "";
		Объект.НомерБланкаСФ = "";
		Объект.ДатаСФ = Дата(0001,01,01);
		Объект.НеВключатьВРеестрСФ = Ложь;
		Объект.НДСНеПодтвержден = Ложь;
		Объект.ЗначениеСтавкиНДС = 0;
	КонецЕсли;
	
	Если НЕ ДанныеУчетнойПолитики.ПлательщикНСП Тогда
		УстановитьЗначениеСтавкиНСП("Товары");
		УстановитьЗначениеСтавкиНСП("Услуги");
		УстановитьЗначениеСтавкиНСП("ОС");
	КонецЕсли;
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные, ПлательщикНСП)
	
	// Счета учета
	СчетаУчетаНоменклатуры = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(СтруктураДанные.Организация, СтруктураДанные.Номенклатура);
	СтруктураДанные.Вставить("СчетУчета", СчетаУчетаНоменклатуры.СчетУчета);
	СтруктураДанные.Вставить("СчетРасходов", СчетаУчетаНоменклатуры.СчетРасходов);
	
	// Значение Ставки НСП.                       
	//СтруктураДанные.Вставить("ЗначениеСтавкиНСП", ?(ПлательщикНСП И НЕ СтруктураДанные.БезналичныйРасчет, 
	//	СтруктураДанные.Номенклатура.ЗначениеСтавкиНСП, 0));

	// Цены
	СтруктураДанные.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам);
	Цена = Ценообразование.ПолучитьЦенуПоДокументам(СтруктураДанные);
	СтруктураДанные.Вставить("Цена", Цена);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Процедура рассчитывает итоги для подвала формы.
//
&НаКлиенте
Процедура ОбновитьПодвалФормы()
	
	ИтогВсего = Объект.Товары.Итог("Всего") + Объект.Услуги.Итог("Всего") + Объект.ОС.Итог("Всего");
	ИтогБазаНДС = Объект.Товары.Итог("БазаНДС") + Объект.Услуги.Итог("БазаНДС") + Объект.ОС.Итог("БазаНДС");
	ИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС") + Объект.ОС.Итог("СуммаНДС");
	ИтогСуммаНСП = Объект.Товары.Итог("СуммаНСП") + Объект.Услуги.Итог("СуммаНСП") + Объект.ОС.Итог("СуммаНСП");
	
КонецПроцедуры // ОбновитьПодвалФормы()

// Процедура заполняет список выбора Точность цены
//
&НаСервере
Процедура ЗаполнитьСписокВыбораТочностьЦены()

	Элементы.ТочностьЦены.СписокВыбора.Очистить();

	ЗначенияТочностиЦены = Ценообразование.ЗначенияТочностиЦены();
	Для Каждого ЗначениеТочностиЦены Из ЗначенияТочностиЦены Цикл 
		Элементы.ТочностьЦены.СписокВыбора.Добавить(ЗначениеТочностиЦены.Значение, ЗначениеТочностиЦены.Представление);
	КонецЦикла;	

КонецПроцедуры // ЗаполнитьСписокВыбораТочностьЦены()

// Процедура устанавливает формат и формат редактирования элементов "Цена" в ТЧ "Товары" и "Услуги"
//
&НаКлиенте
Процедура УстановитьФорматЦены()

	ФорматЦены = ЦенообразованиеКлиент.ФорматЦены(Объект.ТочностьЦены);
	
	Элементы.ТоварыЦена.ФорматРедактирования = ФорматЦены;
	Элементы.ТоварыЦена.Формат = ФорматЦены;

	Элементы.УслугиЦена.ФорматРедактирования = ФорматЦены;
	Элементы.УслугиЦена.Формат = ФорматЦены;

	Элементы.Товары.Обновить();
	Элементы.Услуги.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьАкцизНаСервере()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.РаспределитьАкциз();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект, "Товары", ПараметрыРасчета);
		
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект, "ОС", ПараметрыРасчета);
		
	ПараметрыРасчета = ПодготовитьПараметрыРасчета(Истина);
	
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект, "Услуги", ПараметрыРасчета);	
КонецПроцедуры

// Процедура - обработчик подбора товаров.
//
&НаСервере
Процедура ПолучитьТоварыИзХранилища(АдресЗапасовВХранилище)
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	// Распределение акциза будем делать только для пустой табличной части.
	РаспределитьАкциз = Объект.Товары.Количество() = 0;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	Для Каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", СтрокаЗагрузки.Номенклатура));
		
		Если НайденныеСтроки.Количество() > 0 Тогда 
			Продолжить;
		КонецЕсли;	
		
		СтрокаТабличнойЧасти = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаЗагрузки);
		СтрокаТабличнойЧасти.Всего = СтрокаЗагрузки.Сумма;
		
		СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("Дата", ДатаДокумента);
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("ЗначениеСтавкиНДС", Объект.ЗначениеСтавкиНДС);
		СтруктураДанные.Вставить("ЗначениеСтавкиНСП", Объект.ЗначениеСтавкиНСП);
		СтруктураДанные.Вставить("СуммаВключаетНалоги", Объект.СуммаВключаетНалоги);
		СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанные.Вставить("БезналичныйРасчет", Объект.БезналичныйРасчет);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные, ДанныеУчетнойПолитики.ПлательщикНСП);

		// Заполнение по данным номенклатуры
		СтрокаТабличнойЧасти.СчетУчета 	 = СтруктураДанные.СчетУчета;
		СтрокаТабличнойЧасти.Количество  = СтрокаЗагрузки.Количество;
		//СтрокаТабличнойЧасти.Цена 	 	= СтруктураДанные.Цена;
		
		СтрокаТабличнойЧасти.ЗначениеСтавкиНСП = СтруктураДанные.ЗначениеСтавкиНСП;

		// Расчет суммы
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуИБазуНДССтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, ПараметрыРасчета);
			
		// Расчет налогов
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, ПараметрыРасчета);
			
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);	
	КонецЦикла;
	
	Если РаспределитьАкциз Тогда 
		РаспределитьАкцизНаСервере();
	КонецЕсли;	
КонецПроцедуры // ПолучитьТоварыИзХранилища()

&НаСервере
Процедура ПолучитьПредставлениеЭСФ()
	СведенияОбЭСФ = ЭСФСервер.СведенияОбЭСФПоДокументуОснованию(Объект.Организация, Объект.Ссылка, НСтр("ru = 'Создать новый ЭСФ (полученный)'"));
	ПредставлениеЭСФ = СведенияОбЭСФ.ПредставлениеЭСФ;
КонецПроцедуры

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла
&НаСервере
Процедура ЗагрузитьТоварыИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
    ТоварыДобавлены = Ложь;
	
	Для каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
        Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда 
            Продолжить;
        КонецЕсли;
        СтрокаТабличнойЧасти = Объект.Товары.Добавить();
        СтрокаТабличнойЧасти.Номенклатура = СтрокаТаблицы.Номенклатура;
        СтрокаТабличнойЧасти.Количество = СтрокаТаблицы.Количество;
		СтрокаТабличнойЧасти.Цена = СтрокаТаблицы.Цена;
		СтрокаТабличнойЧасти.Сумма = СтрокаТаблицы.Сумма;
		СтрокаТабличнойЧасти.Всего = СтрокаТаблицы.Всего;
		СтрокаТабличнойЧасти.СуммаНДС = СтрокаТаблицы.СуммаНДС;
		СтрокаТабличнойЧасти.СуммаНСП = СтрокаТаблицы.СуммаНСП;		
		
		СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("Дата", ДатаДокумента);
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("ЗначениеСтавкиНДС", Объект.ЗначениеСтавкиНДС);
		СтруктураДанные.Вставить("ЗначениеСтавкиНСП", Объект.ЗначениеСтавкиНСП);
		СтруктураДанные.Вставить("СуммаВключаетНалоги", Объект.СуммаВключаетНалоги);
		СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанные.Вставить("БезналичныйРасчет", Объект.БезналичныйРасчет);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные, ДанныеУчетнойПолитики.ПлательщикНСП);
		СтрокаТабличнойЧасти.СчетУчета = СтруктураДанные.СчетУчета;
		СтрокаТабличнойЧасти.ЗначениеСтавкиНСП = СтруктураДанные.ЗначениеСтавкиНСП;

		ТоварыДобавлены = Истина;
    КонецЦикла;
	
	Если ТоварыДобавлены Тогда
        Модифицированность = Истина;
		
		ПараметрыРасчета = ПодготовитьПараметрыРасчета();
		// Расчет налогов
		ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
			Объект, "Товары", ПараметрыРасчета);
    КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

// ПодключаемоеОборудование

// Процедура - Получены штрихкоды
//
// Параметры:
//  ДанныеШтрихкодов	 - Структура/Массив - В зависимости от точки вызова передается структура (обработка сканера) или массив (обработка ТСД)
//  ИмяТабличнойЧасти	 - Строка	 - Имя табличной части для загрузки
//
&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрихкодов, ИмяТабличнойЧасти) Экспорт
	
	Модифицированность = Истина;
	
	НеДобавленныеШтрихкоды = ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов, ИмяТабличнойЧасти);
	
	// Неизвестные штрихкоды.
	Если НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды.Количество() > 0 Тогда
		Для Каждого СтруктураДанные Из НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды Цикл 
			СтрокаСообщения = СтрШаблон(НСтр("ru = 'Данные по штрихкоду не найдены: %1'"), СтруктураДанные.Штрихкод);
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		КонецЦикла;	
	// Штрихкоды некорректного типа.
	ИначеЕсли НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа.Количество() > 0 Тогда 
		Для Каждого СтруктураДанные Из НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа Цикл 
			СтрокаСообщения = СтрШаблон(НСтр("ru = 'Найденная по штрихкоду %1 номенклатура: ""%2"", не подходит для этой табличной части'"),
				СтруктураДанные.ТекШтрихкод, СтруктураДанные.Номенклатура);
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаСервереБезКонтекста
Функция ПолучитьДанныеПоШтрихкоду(ТекШтрихкод)
	
	Номенклатура = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьНоменклатуруПоШтрихкоду(ТекШтрихкод);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", Номенклатура);
	СтруктураДанные.Вставить("ТипНоменклатурыУслуга", ?(ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура"), Номенклатура.Услуга, Ложь));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеПоШтрихкоду()

// Функция - Заполнить по данным штрихкодов
//
// Параметры:
//  ДанныеШтрихкодов		 - 	 - Структура/Массив	 - В зависимости от точки вызова передается структура (обработка сканера) или массив (обработка ТСД)
//  ИмяТабличнойЧасти	 - Строка	 - Имя табличной части для загрузки
// 
// Возвращаемое значение:
//  Структура - Массивы неизвестных штрих кодов
//
&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов, ИмяТабличнойЧасти) 
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	Для каждого ТекШтрихкод Из МассивШтрихкодов Цикл
		СтруктураДанные = ПолучитьДанныеПоШтрихкоду(ТекШтрихкод);
		
		Если НЕ ЗначениеЗаполнено(СтруктураДанные.Номенклатура) Тогда 
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли ИмяТабличнойЧасти = "Товары"
			И СтруктураДанные.ТипНоменклатурыУслуга Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("ТекШтрихкод, Номенклатура", ТекШтрихкод, СтруктураДанные.Номенклатура));
		ИначеЕсли ИмяТабличнойЧасти = "Услуги"
			И НЕ СтруктураДанные.ТипНоменклатурыУслуга Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("ТекШтрихкод, Номенклатура", ТекШтрихкод, СтруктураДанные.Номенклатура));
		Иначе 
			СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти].Добавить();
			СтрокаТабличнойЧасти.Номенклатура = СтруктураДанные.Номенклатура;
			СтрокаТабличнойЧасти.Количество = ТекШтрихкод.Количество;
			
			ОбработатьИзменениеНоменклатуры(СтрокаТабличнойЧасти, ИмяТабличнойЧасти);
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа",
		НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа);

КонецФункции // ЗаполнитьПоДаннымШтрихкодов()
// Конец ПодключаемоеОборудование

&НаКлиенте
Процедура РассчитатьКоличествоДопЕдиницСтроки(СтрокаТабличнойЧасти)

	СтрокаТабличнойЧасти.КоличествоДопЕдиницы = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.КоэффициентДопЕдиницы;	

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммыИНалоги()

	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуИБазуНДССтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, ПараметрыРасчета);
			
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, ПараметрыРасчета);	
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуИБазуНДССтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, ПараметрыРасчета);	
			
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЦикла;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета(Истина);
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуИБазуНДССтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, ПараметрыРасчета);
			
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, ПараметрыРасчета);
		КонецЦикла;
		
	ОбновитьПодвалФормы();	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетФактураПолученный()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СчетаФактурыПолученные.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.СчетаФактурыПолученные КАК СчетаФактурыПолученные
		|ГДЕ
		|	СчетаФактурыПолученные.Организация = &Организация
		|	И СчетаФактурыПолученные.Документ = &Документ";
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		СчетФактураПолученный = Выборка.Регистратор;
		Если ЗначениеЗаполнено(Объект.СерияБланкаСФ)
			Или ЗначениеЗаполнено(Объект.НомерБланкаСФ) Тогда 
			Объект.СерияБланкаСФ = "";
			Объект.НомерБланкаСФ = "";
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры // ЗаполнитьСчетФактураПолученный()

// Подготовка параметров для расчетов
//
// Параметры:
//	ДляОС - Булево - признак того, что параметры формируются для расчета ОС
//
// Возвращаемое значение:
//	Структура - разделенные данные URI
//		*ПризнакСтраныЕАЭС - Булево - признак страны ЕАЭС или нет
//		*ПризнакСтраныИмпортЭкспорт - Булево - признак страны ИмпортЭкспорт или нет
//		*СуммаВключаетНалоги - Булево - сумма включает налоги или нет
//		*ЗначениеСтавкиНДС - Число - значение ставки НДС
//		*БезналичныйРасчет - Булево - признак безначличного расчета
//		*КурсДокумента - Число - курс валюты
//		*КратностьДокумента - Число - кратность валюты
//		*КурсНБКР - Число - курс валюты по нац банку
//		*КратностьНБКР - Число - кратность валюты по нац банку
//		*РассчитатьБазуНДС - Булево - признак необходимости рассчитать базу НДС
//		*РассчитатьОтБазыНДС - Булево - признак необходимости рассчитывать от базы НДС
//		*СчитатьОтДохода - Булево - признак необходимости рассчитывать от дохода (нужен для реализации)
//		*Точность - Число - точность цены (знаки после запятой, всегда 2)
//
&НаСервере
Функция ПодготовитьПараметрыРасчета(ПараметрыДляУслуг = Ложь)
	Документ = РеквизитФормыВЗначение("Объект");
	ПараметрыРасчета = Документ.ПодготовитьПараметрыРасчета(ПараметрыДляУслуг);
	
	ПараметрыРасчета.КурсНБКР = КурсНБКР;
	ПараметрыРасчета.КратностьНБКР = КратностьНБКР;
	
	Возврат ПараметрыРасчета;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииРаботаССубконто

&НаСервере
Процедура УстановитьНачальныеСвойстваСубконтоТаблицы()
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоТаблицы(
		Объект.Услуги,
		ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконто(Форма)

	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"УслугиСубконто", "Субконто", "СчетРасходов");
	
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	Результат.СкрыватьСубконто = Ложь;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ПриИзмененииСубконто(НомерСубконто)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСубконто(
		ЭтотОбъект, 
		СтрокаТаблицы,
		НомерСубконто, 
		ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
КонецПроцедуры

#КонецОбласти

#Область КопированиеСтрокТабличныхЧастей

&НаКлиенте
Процедура ТоварыКопироватьСтроки(Команда)
	
	КопироватьСтроки("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВставитьСтроки(Команда)
	
	ВставитьСтроки("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКопироватьСтроки(Команда)
	
	КопироватьСтроки("Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиВставитьСтроки(Команда)
	
	ВставитьСтроки("Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСтроки(ИмяТЧ)
	
	Если КопированиеТабличнойЧастиКлиент.МожноКопироватьСтроки(Объект[ИмяТЧ], Элементы[ИмяТЧ].ТекущиеДанные) Тогда
		КоличествоСкопированных = 0;
		КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных);
		КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСкопированных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(ИмяТЧ)
	
	КоличествоСкопированных = 0;
	КоличествоВставленных = 0;
	ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных);
	КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных)
	
	КопированиеТабличнойЧастиСервер.Копировать(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки, КоличествоСкопированных);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных)
	
	КопированиеТабличнойЧастиСервер.Вставить(Объект, ИмяТЧ, Элементы, КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.РаботаСФайлами

//@skip-warning
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)

	РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);

КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
    РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
    РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент,
		ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
    РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент,
		ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры

// Конец СтандартныеПодсистемы.РаботаСФайлами

#КонецОбласти
