#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыПроведенияДокумента

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаБланкиСчетовФактур(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.СерияБланкаСФ,
		|	ВременнаяТаблицаШапка.НомерБланкаСФ,
		|	1 КАК Количество,		
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|ГДЕ
		|	НЕ ВременнаяТаблицаШапка.СерияБланкаСФ = """"
		|			И НЕ ВременнаяТаблицаШапка.НомерБланкаСФ = """"";		
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаБланкиСчетовФактур", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры 

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСчетаФактурыВыписанные(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		//|	ВременнаяТаблицаШапка.Дата КАК Дата,
		|	ВременнаяТаблицаШапка.Дата КАК ДатаСФ,
		|	ВременнаяТаблицаШапка.ДатаПоставки КАК ДатаПоставки,
		|	ВременнаяТаблицаДокументыОснования.ДокументРеализации КАК Документ,
		|	ВременнаяТаблицаШапка.СерияБланкаСФ КАК СерияБланкаСФ,
		|	ВременнаяТаблицаШапка.НомерБланкаСФ КАК НомерБланкаСФ,
		//|	ВременнаяТаблицаШапка.ВозвратТоваров КАК ВозвратТоваров,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаДокументыОснования.СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.СтраныМира.Киргизия)
		|				ИЛИ ВременнаяТаблицаДокументыОснования.СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПризнакиСтраны.КР)
		|		КОГДА ВременнаяТаблицаДокументыОснования.ЕАЭС
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПризнакиСтраны.ЕАЭС)
		|		КОГДА ВременнаяТаблицаШапка.ЭкспортнаяПоставка
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПризнакиСтраны.ИмпортЭкспорт)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПризнакиСтраны.ПустаяСсылка)
		|	КОНЕЦ КАК ПризнакСтраны,
		|	ВременнаяТаблицаДокументыОснования.Контрагент КАК Контрагент,
		|	ВременнаяТаблицаДокументыОснования.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ВременнаяТаблицаДокументыОснования.СтавкаНДС КАК СтавкаНДС,
		|	ВременнаяТаблицаШапка.КодПоставкиНДС КАК КодПоставкиНДС,
		|	ВременнаяТаблицаДокументыОснования.СуммаДохода КАК Сумма,
		|	ВременнаяТаблицаДокументыОснования.СуммаНДС КАК СуммаНДС,
		|	ВременнаяТаблицаДокументыОснования.СуммаНСП КАК СуммаНеоблагаемая,
		|	ВременнаяТаблицаШапка.КорректировочнаяСерияБланка КАК КорСерияБланкаСФ,
		|	ВременнаяТаблицаШапка.КорректировочныйНомерБланка КАК КорНомерБланкаСФ
		|ПОМЕСТИТЬ ВременнаяТаблицаОбщая
		|ИЗ
		|	ВременнаяТаблицаДокументыОснования КАК ВременнаяТаблицаДокументыОснования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСтавкиНДС КАК ВременнаяТаблицаСтавкиНДС
		|		ПО (ВременнаяТаблицаДокументыОснования.СтавкаНДС = ВременнаяТаблицаСтавкиНДС.СтавкаНДС)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСтавкиНСП КАК ВременнаяТаблицаСтавкиНСП
		|		ПО (ВременнаяТаблицаДокументыОснования.СтавкаНСП = ВременнаяТаблицаСтавкиНСП.СтавкаНСП)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаОбщая.Организация КАК Организация,
		//|	ВременнаяТаблицаОбщая.Дата КАК Дата,
		|	ВременнаяТаблицаОбщая.Документ КАК Документ,
		|	ВременнаяТаблицаОбщая.СерияБланкаСФ КАК СерияБланкаСФ,
		|	ВременнаяТаблицаОбщая.НомерБланкаСФ КАК НомерБланкаСФ,
		//|	ВременнаяТаблицаОбщая.ВозвратТоваров КАК ВозвратТоваров,
		|	ВременнаяТаблицаОбщая.ПризнакСтраны КАК ПризнакСтраны,
		|	ВременнаяТаблицаОбщая.Контрагент КАК Контрагент,
		|	ВременнаяТаблицаОбщая.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ВременнаяТаблицаОбщая.СтавкаНДС КАК СтавкаНДС,
		|	ВременнаяТаблицаОбщая.ДатаСФ КАК ДатаСФ,
		|	ВременнаяТаблицаОбщая.ДатаПоставки КАК ДатаПоставки,
		|	СУММА(ВременнаяТаблицаОбщая.Сумма) КАК Сумма,
		|	СУММА(ВременнаяТаблицаОбщая.СуммаНДС) КАК СуммаНДС,
		|	СУММА(ВременнаяТаблицаОбщая.СуммаНеоблагаемая) КАК СуммаНеоблагаемая,
		|	ВременнаяТаблицаОбщая.КодПоставкиНДС КАК КодПоставкиНДС,
		|	ВременнаяТаблицаОбщая.КорСерияБланкаСФ КАК КорСерияБланкаСФ,
		|	ВременнаяТаблицаОбщая.КорНомерБланкаСФ КАК КорНомерБланкаСФ
		|ИЗ
		|	ВременнаяТаблицаОбщая КАК ВременнаяТаблицаОбщая
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаОбщая.СтавкаНДС,
		|	ВременнаяТаблицаОбщая.ДоговорКонтрагента,
		|	ВременнаяТаблицаОбщая.Контрагент,
		|	ВременнаяТаблицаОбщая.ДатаСФ,
		|	ВременнаяТаблицаОбщая.ДатаПоставки,
		//|	ВременнаяТаблицаОбщая.ВозвратТоваров,
		|	ВременнаяТаблицаОбщая.НомерБланкаСФ,
		|	ВременнаяТаблицаОбщая.Документ,
		|	ВременнаяТаблицаОбщая.СерияБланкаСФ,
		|	ВременнаяТаблицаОбщая.ПризнакСтраны,
		|	ВременнаяТаблицаОбщая.Организация,
		//|	ВременнаяТаблицаОбщая.Дата,
		|	ВременнаяТаблицаОбщая.КодПоставкиНДС,
		|	ВременнаяТаблицаОбщая.КорСерияБланкаСФ,
		|	ВременнаяТаблицаОбщая.КорНомерБланкаСФ";
	Запрос.УстановитьПараметр("ОтдельнаяПроводкаПоСкидке", 	Константы.ОтдельнаяПроводкаПоСкидке.Получить());
	РезультатЗапроса = Запрос.Выполнить();
	           
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСчетаФактурыВыписанные", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК Ссылка,
		|	ТаблицаДокумента.Дата КАК Дата,
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ТаблицаДокумента.СерияБланкаСФ КАК СерияБланкаСФ,
		|	ТаблицаДокумента.НомерБланкаСФ КАК НомерБланкаСФ,
		|	ТаблицаДокумента.Дата КАК ДатаСФ,
		|	ТаблицаДокумента.ДатаПоставки КАК ДатаПоставки,
		|	ТаблицаДокумента.Контрагент КАК Контрагент,
		|	ТаблицаДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаДокумента.КодПоставкиНДС КАК КодПоставкиНДС,
		|	ТаблицаДокумента.ЭкспортнаяПоставка КАК ЭкспортнаяПоставка,
		|	ТаблицаДокумента.ВозвратТоваров КАК ВозвратТоваров,
		|	ТаблицаДокумента.КорректировочнаяСерияБланка КАК КорректировочнаяСерияБланка,
		|	ТаблицаДокумента.КорректировочныйНомерБланка КАК КорректировочныйНомерБланка
		|ПОМЕСТИТЬ ВременнаяТаблицаШапка
		|ИЗ
		|	Документ.СчетФактураВыписанный КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.ДокументОснование КАК ДокументРеализации,
		|	СУММА(ТаблицаДокумента.СуммаВВалютеРеглУчета) КАК Сумма,		
		|	СУММА(ТаблицаДокумента.СуммаНДСВВалютеРеглУчета) КАК СуммаНДС,
		|	СУММА(ТаблицаДокумента.СуммаНСПВВалютеРеглУчета) КАК СуммаНСП,
		|	СУММА(ТаблицаДокумента.СуммаДоходаВВалютеРеглУчета) КАК СуммаДохода,
		|	СУММА(ТаблицаДокумента.ВсегоВВалютеРеглУчета) КАК Всего,
		|	СУММА(ТаблицаДокумента.СуммаСкидкиВВалютеРеглУчета) КАК СуммаСкидкиВВалютеРеглУчета,
		|	СУММА(ТаблицаДокумента.СуммаДоходаВВалютеРеглУчета) КАК СуммаДоходаВВалютеРеглУчета,
		|	СУММА(ТаблицаДокумента.СуммаСкидки) КАК СуммаСкидки,
		|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаДокумента.СтавкаНСП КАК СтавкаНСП,
		|	ТаблицаДокумента.ДокументОснование.Контрагент КАК Контрагент,
		|	ТаблицаДокумента.ДокументОснование.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ВЫРАЗИТЬ(ТаблицаДокумента.ДокументОснование.Контрагент КАК Справочник.Контрагенты).СтранаРезидентства КАК СтранаРезидентства,
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(ТаблицаДокумента.ДокументОснование.Контрагент КАК Справочник.Контрагенты).ПризнакСтраны = ЗНАЧЕНИЕ(Перечисление.ПризнакиСтраны.ЕАЭС)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕАЭС
		|ПОМЕСТИТЬ ВременнаяТаблицаДокументыОснования
		|ИЗ
		|	Документ.СчетФактураВыписанный.Товары КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДокумента.ДокументОснование,
		|	ТаблицаДокумента.СтавкаНДС,
		|	ТаблицаДокумента.СтавкаНСП,
		|	ТаблицаДокумента.ДокументОснование.Контрагент,
		|	ТаблицаДокумента.ДокументОснование.ДоговорКонтрагента,
		|	ВЫРАЗИТЬ(ТаблицаДокумента.ДокументОснование.Контрагент КАК Справочник.Контрагенты).СтранаРезидентства,
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(ТаблицаДокумента.ДокументОснование.Контрагент КАК Справочник.Контрагенты).ПризнакСтраны = ЗНАЧЕНИЕ(Перечисление.ПризнакиСтраны.ЕАЭС)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтавкиНДССрезПоследних.СтавкаНДС КАК СтавкаНДС,
		|	СтавкиНДССрезПоследних.Ставка КАК ЗначениеСтавки
		|ПОМЕСТИТЬ ВременнаяТаблицаСтавкиНДС
		|ИЗ
		|	РегистрСведений.СтавкиНДС.СрезПоследних(
		|			&Период,
		|			СтавкаНДС В
		|				(ВЫБРАТЬ
		|					ВременнаяТаблицаДокументыОснования.СтавкаНДС
		|				ИЗ
		|					ВременнаяТаблицаДокументыОснования)) КАК СтавкиНДССрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтавкиНСПСрезПоследних.СтавкаНСП КАК СтавкаНСП,
		|	СтавкиНСПСрезПоследних.Ставка КАК ЗначениеСтавки
		|ПОМЕСТИТЬ ВременнаяТаблицаСтавкиНСП
		|ИЗ
		|	РегистрСведений.СтавкиНСП.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И СтавкаНСП В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаДокументыОснования.СтавкаНСП
		|					ИЗ
		|						ВременнаяТаблицаДокументыОснования)) КАК СтавкиНСПСрезПоследних";
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Период", СтруктураДополнительныеСвойства.ДляПроведения.Дата);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);

	Запрос.Выполнить();
	
	СформироватьТаблицаБланкиСчетовФактур(ДокументСсылка, СтруктураДополнительныеСвойства);
	
	// Переход на ЭСФ.
	Если СтруктураДополнительныеСвойства.ДляПроведения.Дата < Дата(2020, 07, 01) Тогда 
		СформироватьТаблицаСчетаФактурыВыписанные(ДокументСсылка, СтруктураДополнительныеСвойства);
	КонецЕсли;
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

#КонецОбласти

#Область ВерсионированиеОбъектов

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//@skip-warning
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область ИнтерфейсПечати

// Функция формирует табличный документ с печатной формой Счет-фактура
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьСчетФактура(МассивОбъектов, ОбъектыПечати, КоличествоСтрокСчетаФактуры, СчетФактураВВалюте = Ложь)

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "СчетФактураВыписанный_СчетФактура";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьСчетФактура.ПФ_MXL_СчетФактура");

	ТекстЗапроса = ПолучитьТекстЗапросаДокументовОснования();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокДокументов", МассивОбъектов);
	Запрос.УстановитьПараметр("СчетФактураВВалюте", СчетФактураВВалюте);
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	// Таблицы
	ТаблицаИсходныхСумм = МассивРезультатовЗапроса[8].Выгрузить();                                      
	ТаблицаПересчитанныхСумм = МассивРезультатовЗапроса[9].Выгрузить();   
	ТаблицаИсходныхСумм.Индексы.Добавить("ДокументСФ");
	ТаблицаПересчитанныхСумм.Индексы.Добавить("ДокументСФ");
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка,
		|	ТаблицаДокумента.Номер,
		|	ТаблицаДокумента.Дата КАК ДатаСФ,
		|	ТаблицаДокумента.Организация,
		|	ТаблицаДокумента.ВалютаДокумента,
		|	ТаблицаДокумента.ФормаОплаты,
		// Сведения об организации
		|	ТаблицаДокумента.Организация.НаименованиеПолное КАК ОрганизацияПредставление,
		|	ТаблицаДокумента.Организация.ИНН КАК ИННОрганизации,
		|	ТаблицаДокумента.Организация.ГНС КАК ГНСОрганизации,
		|	ТаблицаДокумента.Организация.ГНС.Код КАК КодГНСОрганизации,
		|	ТаблицаДокумента.Организация.ФайлЛоготип КАК ФайлЛоготип,
		// Сведения о банковском счете организации
		|	ТаблицаДокумента.ЭкспортнаяПоставка КАК ЭкспортнаяПоставка,
		|	ТаблицаДокумента.БанковскийСчет.НомерСчета КАК НомерБанковскогоСчетаОрганизации,
		|	ТаблицаДокумента.БанковскийСчет.Банк.Код КАК БикБанкаОрганизации,
		|	ТаблицаДокумента.БанковскийСчет.Банк.Наименование КАК НаименованиеБанкаОрганизации,
		// Сведения о контрегенте
		|	ВЫБОР
		|		КОГДА &ПечататьСчетаФактурыСГоловнымКонтрагентом
		|				И НЕ ТаблицаДокумента.Контрагент.ГоловнойКонтрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА ТаблицаДокумента.Контрагент.ГоловнойКонтрагент
		|		ИНАЧЕ ТаблицаДокумента.Контрагент
		|	КОНЕЦ КАК Контрагент,
		// Сведения о счете-фактуре
		|	ТаблицаДокумента.НомерБланкаСФ,
		|	ТаблицаДокумента.СерияБланкаСФ,
		|	ТаблицаДокумента.ДатаПоставки КАК ДатаПоставки,
		|	ТаблицаДокумента.КодПоставкиНДС.Код КАК КодПоставкиНДС,
		|	ТаблицаДокумента.КорректировочнаяСерияБланка КАК КорректировочнаяСерияБланка,
		|	ТаблицаДокумента.КорректировочныйНомерБланка КАК КорректировочныйНомерБланка,
		|	ТаблицаДокумента.ПричиныКорректировки КАК ПричиныКорректировки,
		|	ТаблицаДокумента.КорректировочнаяДатаСФ КАК КорректировочнаяДатаСФ,
		// Настройки печати
		|	ТаблицаДокумента.ПечатьВРегламентированнойВалюте,
		|	ТаблицаДокумента.ПечататьКурсИСуммуВРегламентированнойВалюте,
		|	ТаблицаДокумента.ГруппироватьПоНоменклатуре
		|ИЗ
		|	Документ.СчетФактураВыписанный КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В(&СписокДокументов)";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПечататьСчетаФактурыСГоловнымКонтрагентом", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьЗначениеКонстанты("ПечататьСчетаФактурыСГоловнымКонтрагентом"));
	Запрос.УстановитьПараметр("СписокДокументов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	Пока Шапка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Подготовка данных
		ДанныеПечати = Новый Структура;
		ДанныеПечати.Вставить("НомерОтчета", ?(КоличествоСтрокСчетаФактуры = 20,"001","002"));
		ДанныеПечати.Вставить("НомерПриложения", ?(КоличествоСтрокСчетаФактуры = 20,"2","3"));
		ДанныеПечати.Вставить("НомерБланкаСФ", Шапка.НомерБланкаСФ);
		ДанныеПечати.Вставить("СерияБланкаСФ", Шапка.СерияБланкаСФ);
		ДанныеПечати.Вставить("ВидПоставки", Шапка.КодПоставкиНДС);
		ДанныеПечати.Вставить("ТипПоставки", ?(Шапка.ЭкспортнаяПоставка, "Экспорт", "Внутренняя"));
		ДанныеПечати.Вставить("ВидПлатежа", Шапка.ФормаОплаты);
		
		ДанныеПечати.Вставить("ТекстЗаголовка", НСтр("ru = 'СЧЕТ-ФАКТУРА НДС'"));

		ДанныеПечати.Вставить("ДатаПоставки", Формат(Шапка.ДатаПоставки,"ДЛФ=DD"));
		ДанныеПечати.Вставить("БанкПоставщика", Шапка.НаименованиеБанкаОрганизации);		
		
		ДанныеПечати.Вставить("ФайлЛоготип", Шапка.ФайлЛоготип);
		
		ДанныеПечати.Вставить("СтавкаНДС", "");
		ДанныеПечати.Вставить("СтавкаНСП", "");
		
		ПредставлениеПоставщика = "";
		Организация = Шапка.Организация;
		ИНН = Шапка.ИННОрганизации;
	    ГНС = Шапка.ГНСОрганизации;
	    КодГНС = Шапка.КодГНСОрганизации;
		
		ПредставлениеПоставщика = Шапка.ОрганизацияПредставление;
		
		ДатаСФ = Формат(Шапка.ДатаСФ, "ДЛФ=D");
		ДанныеПечати.Вставить("Дата1", Сред(ДатаСФ,1,1));
		ДанныеПечати.Вставить("Дата2", Сред(ДатаСФ,2,1));
		ДанныеПечати.Вставить("Дата3", Сред(ДатаСФ,4,1));
		ДанныеПечати.Вставить("Дата4", Сред(ДатаСФ,5,1));
		ДанныеПечати.Вставить("Дата5", Сред(ДатаСФ,7,1));
		ДанныеПечати.Вставить("Дата6", Сред(ДатаСФ,8,1));
		ДанныеПечати.Вставить("Дата7", Сред(ДатаСФ,9,1));
		ДанныеПечати.Вставить("Дата8", Сред(ДатаСФ,10,1));
		
		ДанныеПечати.Вставить("ИННПост1", Сред(ИНН,1,1));
		ДанныеПечати.Вставить("ИННПост2", Сред(ИНН,2,1));
		ДанныеПечати.Вставить("ИННПост3", Сред(ИНН,3,1));
		ДанныеПечати.Вставить("ИННПост4", Сред(ИНН,4,1));
		ДанныеПечати.Вставить("ИННПост5", Сред(ИНН,5,1));
		ДанныеПечати.Вставить("ИННПост6", Сред(ИНН,6,1));
		ДанныеПечати.Вставить("ИННПост7", Сред(ИНН,7,1));
		ДанныеПечати.Вставить("ИННПост8", Сред(ИНН,8,1));
		ДанныеПечати.Вставить("ИННПост9", Сред(ИНН,9,1));
		ДанныеПечати.Вставить("ИННПост10", Сред(ИНН,10,1));
		ДанныеПечати.Вставить("ИННПост11", Сред(ИНН,11,1));
		ДанныеПечати.Вставить("ИННПост12", Сред(ИНН,12,1));
		ДанныеПечати.Вставить("ИННПост13", Сред(ИНН,13,1));
		ДанныеПечати.Вставить("ИННПост14", Сред(ИНН,14,1));

        БИК = Шапка.БикБанкаОрганизации;
		ДанныеПечати.Вставить("КодБанкаПоставщика1", Сред(БИК,1,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика2", Сред(БИК,2,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика3", Сред(БИК,3,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика4", Сред(БИК,4,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика5", Сред(БИК,5,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика6", Сред(БИК,6,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика7", Сред(БИК,7,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика8", Сред(БИК,8,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика9", Сред(БИК,9,1));		
		
		НомерСчета = Шапка.НомерБанковскогоСчетаОрганизации;
		ДанныеПечати.Вставить("СчетПоставщика1", Сред(НомерСчета,1,1));		
		ДанныеПечати.Вставить("СчетПоставщика2", Сред(НомерСчета,2,1));		
		ДанныеПечати.Вставить("СчетПоставщика3", Сред(НомерСчета,3,1));		
		ДанныеПечати.Вставить("СчетПоставщика4", Сред(НомерСчета,4,1));		
		ДанныеПечати.Вставить("СчетПоставщика5", Сред(НомерСчета,5,1));		
		ДанныеПечати.Вставить("СчетПоставщика6", Сред(НомерСчета,6,1));		
		ДанныеПечати.Вставить("СчетПоставщика7", Сред(НомерСчета,7,1));		
		ДанныеПечати.Вставить("СчетПоставщика8", Сред(НомерСчета,8,1));		
		ДанныеПечати.Вставить("СчетПоставщика9", Сред(НомерСчета,9,1));		
		ДанныеПечати.Вставить("СчетПоставщика10", Сред(НомерСчета,10,1));		
		ДанныеПечати.Вставить("СчетПоставщика11", Сред(НомерСчета,11,1));		
		ДанныеПечати.Вставить("СчетПоставщика12", Сред(НомерСчета,12,1));		
		ДанныеПечати.Вставить("СчетПоставщика13", Сред(НомерСчета,13,1));		
		ДанныеПечати.Вставить("СчетПоставщика14", Сред(НомерСчета,14,1));		
		ДанныеПечати.Вставить("СчетПоставщика15", Сред(НомерСчета,15,1));		
		ДанныеПечати.Вставить("СчетПоставщика16", Сред(НомерСчета,16,1));		
		
		ДанныеПечати.Вставить("ГНСПоставщика1", Сред(КодГНС,1,1));		
		ДанныеПечати.Вставить("ГНСПоставщика2", Сред(КодГНС,2,1));		
		ДанныеПечати.Вставить("ГНСПоставщика3", Сред(КодГНС,3,1));		

		ДанныеПечати.Вставить("НаименованиеГНСПоставщика", ГНС);		
		ДанныеПечати.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);		
		 
		КонтактныеДанные = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСведенияОбОрганизации(Организация, Шапка.ДатаСФ);
		ДанныеПечати.Вставить("АдресПоставщика", КонтактныеДанные.АдрЮР);

		// Данные по контрагенту
		СведенияОКонтрагенте = БухгалтерскийУчетСервер.ПолучитьСведенияОКонтрагенте(Шапка.Контрагент);
		
		ВыводДопИнформацииПоКонтрагенту = БухгалтерскийУчетСервер.ПолучитьПризнакПатентаПоКонтрагенту(Шапка.Контрагент) 
			ИЛИ (Шапка.Контрагент.СтранаРезидентства = Справочники.СтраныМира.Киргизия 
			ИЛИ Шапка.Контрагент.СтранаРезидентства.УчастникЕАЭС);
		
		Если ВыводДопИнформацииПоКонтрагенту Тогда
			Если Шапка.Контрагент.ПризнакСтраны = Перечисления.ПризнакиСтраны.ЕАЭС Тогда
				ДанныеПечати.Вставить("НаименованиеГНСПокупателя", Шапка.Контрагент.СтранаРезидентства.Наименование);
				КодГНСКонтрагента = Шапка.Контрагент.СтранаРезидентства.Код;
				ДанныеПечати.Вставить("ГНСПокупателя1", Сред(КодГНСКонтрагента,1,1));		
				ДанныеПечати.Вставить("ГНСПокупателя2", Сред(КодГНСКонтрагента,2,1));		
				ДанныеПечати.Вставить("ГНСПокупателя3", Сред(КодГНСКонтрагента,3,1));	
			Иначе
				ДанныеПечати.Вставить("НаименованиеГНСПокупателя", СведенияОКонтрагенте.ГНСНаименование);
				КодГНСКонтрагента = СведенияОКонтрагенте.ГНСКод;
				ДанныеПечати.Вставить("ГНСПокупателя1", Сред(КодГНСКонтрагента,1,1));		
				ДанныеПечати.Вставить("ГНСПокупателя2", Сред(КодГНСКонтрагента,2,1));		
				ДанныеПечати.Вставить("ГНСПокупателя3", Сред(КодГНСКонтрагента,3,1));	
			КонецЕсли;
		Иначе
			ДанныеПечати.Вставить("НаименованиеГНСПокупателя", "отсутствует");
		КонецЕсли;
		
		ДанныеПечати.Вставить("ПредставлениеПокупателя", СведенияОКонтрагенте.НаименованиеПолное);
		ДанныеПечати.Вставить("АдресПокупателя", СведенияОКонтрагенте.АдрЮР);		
		
		ИННКонтрагента = СведенияОКонтрагенте.ИНН;
		ДанныеПечати.Вставить("ИННПокупателя1", Сред(ИННКонтрагента,1,1));		
		ДанныеПечати.Вставить("ИННПокупателя2", Сред(ИННКонтрагента,2,1));		
		ДанныеПечати.Вставить("ИННПокупателя3", Сред(ИННКонтрагента,3,1));		
		ДанныеПечати.Вставить("ИННПокупателя4", Сред(ИННКонтрагента,4,1));		
		ДанныеПечати.Вставить("ИННПокупателя5", Сред(ИННКонтрагента,5,1));		
		ДанныеПечати.Вставить("ИННПокупателя6", Сред(ИННКонтрагента,6,1));		
		ДанныеПечати.Вставить("ИННПокупателя7", Сред(ИННКонтрагента,7,1));		
		ДанныеПечати.Вставить("ИННПокупателя8", Сред(ИННКонтрагента,8,1));		
		ДанныеПечати.Вставить("ИННПокупателя9", Сред(ИННКонтрагента,9,1));		
		ДанныеПечати.Вставить("ИННПокупателя10", Сред(ИННКонтрагента,10,1));		
		ДанныеПечати.Вставить("ИННПокупателя11", Сред(ИННКонтрагента,11,1));		
		ДанныеПечати.Вставить("ИННПокупателя12", Сред(ИННКонтрагента,12,1));		
		ДанныеПечати.Вставить("ИННПокупателя13", Сред(ИННКонтрагента,13,1));		
		ДанныеПечати.Вставить("ИННПокупателя14", Сред(ИННКонтрагента,14,1));		
				
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.НомерСчета) И ВыводДопИнформацииПоКонтрагенту Тогда 
			НомерСчетаКонтрагента = СведенияОКонтрагенте.НомерСчета;
			ДанныеПечати.Вставить("СчетПокупателя1", Сред(НомерСчетаКонтрагента,1,1));		
			ДанныеПечати.Вставить("СчетПокупателя2", Сред(НомерСчетаКонтрагента,2,1));		
			ДанныеПечати.Вставить("СчетПокупателя3", Сред(НомерСчетаКонтрагента,3,1));		
			ДанныеПечати.Вставить("СчетПокупателя4", Сред(НомерСчетаКонтрагента,4,1));		
			ДанныеПечати.Вставить("СчетПокупателя5", Сред(НомерСчетаКонтрагента,5,1));		
			ДанныеПечати.Вставить("СчетПокупателя6", Сред(НомерСчетаКонтрагента,6,1));		
			ДанныеПечати.Вставить("СчетПокупателя7", Сред(НомерСчетаКонтрагента,7,1));		
			ДанныеПечати.Вставить("СчетПокупателя8", Сред(НомерСчетаКонтрагента,8,1));		
			ДанныеПечати.Вставить("СчетПокупателя9", Сред(НомерСчетаКонтрагента,9,1));		
			ДанныеПечати.Вставить("СчетПокупателя10", Сред(НомерСчетаКонтрагента,10,1));		
			ДанныеПечати.Вставить("СчетПокупателя11", Сред(НомерСчетаКонтрагента,11,1));		
			ДанныеПечати.Вставить("СчетПокупателя12", Сред(НомерСчетаКонтрагента,12,1));		
			ДанныеПечати.Вставить("СчетПокупателя13", Сред(НомерСчетаКонтрагента,13,1));		
			ДанныеПечати.Вставить("СчетПокупателя14", Сред(НомерСчетаКонтрагента,14,1));
			ДанныеПечати.Вставить("СчетПокупателя15", Сред(НомерСчетаКонтрагента,15,1));		
			ДанныеПечати.Вставить("СчетПокупателя16", Сред(НомерСчетаКонтрагента,16,1));
			
			БикБанкаКонтрагента = СведенияОКонтрагенте.БИКБанка;
			ДанныеПечати.Вставить("КодБанкаПокупателя1", Сред(БикБанкаКонтрагента,1,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя2", Сред(БикБанкаКонтрагента,2,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя3", Сред(БикБанкаКонтрагента,3,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя4", Сред(БикБанкаКонтрагента,4,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя5", Сред(БикБанкаКонтрагента,5,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя6", Сред(БикБанкаКонтрагента,6,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя7", Сред(БикБанкаКонтрагента,7,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя8", Сред(БикБанкаКонтрагента,8,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя9", Сред(БикБанкаКонтрагента,9,1));		
			
			ДанныеПечати.Вставить("БанкПокупателя", СведенияОКонтрагенте.Банк);
		Иначе 	
			// Отсутствует
			ДанныеПечати.Вставить("СчетПокупателя1","о");
			ДанныеПечати.Вставить("СчетПокупателя2","т");
			ДанныеПечати.Вставить("СчетПокупателя3","с");
			ДанныеПечати.Вставить("СчетПокупателя4","у");
			ДанныеПечати.Вставить("СчетПокупателя5","т");
			ДанныеПечати.Вставить("СчетПокупателя6","с");
			ДанныеПечати.Вставить("СчетПокупателя7","т");
			ДанныеПечати.Вставить("СчетПокупателя8","в");
			ДанныеПечати.Вставить("СчетПокупателя9","у");
			ДанныеПечати.Вставить("СчетПокупателя10","е");
			ДанныеПечати.Вставить("СчетПокупателя11","т");	

			ДанныеПечати.Вставить("БанкПокупателя", "отсутствует");
		КонецЕсли;	
		
		Если НЕ СчетФактураВВалюте Тогда
			ДанныеПечати.Вставить("СерияБланкаСФКор", Шапка.КорректировочнаяСерияБланка);
			ДанныеПечати.Вставить("НомерБланкаСФКор", Шапка.КорректировочныйНомерБланка);
			ДанныеПечати.Вставить("ПричинаКорректировки", Шапка.ПричиныКорректировки);
			
			ДатаСФКор = Формат(Шапка.КорректировочнаяДатаСФ, "ДЛФ=D");
			ДанныеПечати.Вставить("ДатаСФКор1", Сред(ДатаСФКор,1,1));
			ДанныеПечати.Вставить("ДатаСФКор2", Сред(ДатаСФКор,2,1));
			ДанныеПечати.Вставить("ДатаСФКор3", Сред(ДатаСФКор,4,1));
			ДанныеПечати.Вставить("ДатаСФКор4", Сред(ДатаСФКор,5,1));
			ДанныеПечати.Вставить("ДатаСФКор5", Сред(ДатаСФКор,7,1));
			ДанныеПечати.Вставить("ДатаСФКор6", Сред(ДатаСФКор,8,1));
			ДанныеПечати.Вставить("ДатаСФКор7", Сред(ДатаСФКор,9,1));
			ДанныеПечати.Вставить("ДатаСФКор8", Сред(ДатаСФКор,10,1));
		КонецЕсли;	
		
		// Таблицы
		ПараметрыОтбора = Новый Структура("ДокументСФ", Шапка.Ссылка);
		
		ПересчитаннаяТаблица = Неопределено;
		ИсходнаяТаблица = Неопределено;
		
		Если Шапка.ПечатьВРегламентированнойВалюте ИЛИ Шапка.ПечататьКурсИСуммуВРегламентированнойВалюте ИЛИ СчетФактураВВалюте Тогда
			ПересчитаннаяТаблица = ТаблицаПересчитанныхСумм.Скопировать(ПараметрыОтбора);
			ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		КонецЕсли;	
		
		Если НЕ Шапка.ПечатьВРегламентированнойВалюте Тогда
			ИсходнаяТаблица = ТаблицаИсходныхСумм.Скопировать(ПараметрыОтбора);	
		КонецЕсли;	   
		
		КоличествоСтрок = 0;
		ВсегоСуммаСкидкиИсходная = 0;
		ВсегоСуммаСкидкиПересчитанная = 0;
		
		// Итоги по исходным суммам
		Если ИсходнаяТаблица <> Неопределено Тогда
			ВсегоСтоимостьИсходная = ИсходнаяТаблица.Итог("Стоимость");
			ВсегоИсходная = ИсходнаяТаблица.Итог("Всего");
			ВсегоНДСИсходная = ИсходнаяТаблица.Итог("СуммаНДС");
			ВсегоНСПИсходная = ИсходнаяТаблица.Итог("СуммаНСП");
			ВсегоСуммаСкидкиИсходная = ИсходнаяТаблица.Итог("СуммаСкидки");
			КоличествоСтрок = КоличествоСтрок + ИсходнаяТаблица.Количество();
			
			// Если пересчитанных сумм нет, то итоговая строка будет одна,
			// поэтому используется строка итогов, которая находится в области "Подвал" и 
			// названия параметров задаются соответственно этой области. 
			// Если пересчитанные суммы есть, то итоговых строки будет две 
			// (с исходными суммами и с пересчитанными), поэтому будет задействована область
			// "ИсходныйИтог" и параметры соответственно именуем как они указаны в данной области.
			Если ПересчитаннаяТаблица = Неопределено Тогда
				ДанныеПечати.Вставить("ВсегоСтоимость", ?(СчетФактураВВалюте, ВсегоСтоимостьИсходная, 0));
				ДанныеПечати.Вставить("Всего", 			?(СчетФактураВВалюте, ВсегоИсходная, 0));
				ДанныеПечати.Вставить("ВсегоНДС", 		?(СчетФактураВВалюте, ВсегоНДСИсходная, 0));
				ДанныеПечати.Вставить("ВсегоНСП", 		?(СчетФактураВВалюте, ВсегоНСПИсходная, 0));
				
				Если Шапка.ПечатьВРегламентированнойВалюте Тогда 
					ДанныеПечати.Вставить("Валюта", " (" + ВалютаРегламентированногоУчета + ")");
				Иначе
					ДанныеПечати.Вставить("Валюта", " (" + Шапка.ВалютаДокумента + ")");
				КонецЕсли;
				
				Если ВсегоСуммаСкидкиИсходная <> 0 Тогда
					ДанныеПечати.Вставить("СуммаСкидкиБезНалогов", 	0);
					ДанныеПечати.Вставить("СуммаСкидки", 			0);
					ДанныеПечати.Вставить("НДССкидки",				0);
					ДанныеПечати.Вставить("НСПСкидки", 				0);	
				КонецЕсли;
				
			Иначе
				ДанныеПечати.Вставить("ВсегоСтоимостьИсходная", ?(СчетФактураВВалюте, ВсегоСтоимостьИсходная, 0));
				ДанныеПечати.Вставить("ВсегоИсходная", 			?(СчетФактураВВалюте, ВсегоИсходная, 0));
				ДанныеПечати.Вставить("ВсегоНДСИсходная", 		?(СчетФактураВВалюте, ВсегоНДСИсходная, 0));
				ДанныеПечати.Вставить("ВсегоНСПИсходная", 		?(СчетФактураВВалюте, ВсегоНСПИсходная, 0));
				
				ДанныеПечати.Вставить("ВалютаИсходная", " (" + Шапка.ВалютаДокумента + ")");
				
				Если ВсегоСуммаСкидкиИсходная <> 0 Тогда
					ДанныеПечати.Вставить("СуммаСкидкиБезНалоговИсходная", 	0);
					ДанныеПечати.Вставить("СуммаСкидкиИсходная", 			0);
					ДанныеПечати.Вставить("НДССкидкиИсходная",				0);
					ДанныеПечати.Вставить("НСПСкидкиИсходная", 				0);	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Итоги по пересчитанным суммам
		Если ПересчитаннаяТаблица <> Неопределено Тогда
			ВсегоСтоимостьПересчитанная = ПересчитаннаяТаблица.Итог("Стоимость");
			ВсегоПересчитанная = ПересчитаннаяТаблица.Итог("Всего");
			ВсегоНДСПересчитанная = ПересчитаннаяТаблица.Итог("СуммаНДС");
			ВсегоНСППересчитанная = ПересчитаннаяТаблица.Итог("СуммаНСП");
			ВсегоСуммаСкидкиПересчитанная = ПересчитаннаяТаблица.Итог("СуммаСкидки");
			КоличествоСтрок = КоличествоСтрок + ПересчитаннаяТаблица.Количество();
			
			ДанныеПечати.Вставить("ВсегоСтоимость", ?(СчетФактураВВалюте, ВсегоСтоимостьПересчитанная, 0));
			ДанныеПечати.Вставить("Всего", 			?(СчетФактураВВалюте, ВсегоПересчитанная, 0));
			ДанныеПечати.Вставить("ВсегоНДС", 		?(СчетФактураВВалюте, ВсегоНДСПересчитанная, 0));
			ДанныеПечати.Вставить("ВсегоНСП", 		?(СчетФактураВВалюте, ВсегоНСППересчитанная, 0));
			
			ДанныеПечати.Вставить("Валюта", " (" + ВалютаРегламентированногоУчета + ")");
			
			Если ВсегоСуммаСкидкиПересчитанная <> 0 Тогда
				ДанныеПечати.Вставить("СуммаСкидкиБезНалогов", 	0);
				ДанныеПечати.Вставить("СуммаСкидки", 			0);
				ДанныеПечати.Вставить("НДССкидки",				0);
				ДанныеПечати.Вставить("НСПСкидки", 				0);	
			КонецЕсли;
		КонецЕсли;
		
		Если ВсегоСуммаСкидкиИсходная = 0 И ВсегоСуммаСкидкиПересчитанная = 0 Тогда
			ЕстьСкидка = Ложь;
		Иначе	
			ЕстьСкидка = Истина;
		КонецЕсли;
		
		// Информация подвала
		ТекстОКоличестве = СтрШаблон("%1 (%2)", КоличествоСтрокСчетаФактуры, ?(КоличествоСтрокСчетаФактуры = 20,"(двадцати)","(семи)"));
		ДанныеПечати.Вставить("КоличествоСтрокСчетаФактуры", ТекстОКоличестве);
		ДанныеПечати.Вставить("НомерОтчета", ?(КоличествоСтрокСчетаФактуры = 20,"001","002"));
		
		// Области
		МассивОбластейМакета = Новый Массив;
		
		Если СчетФактураВВалюте Тогда
			МассивОбластейМакета.Добавить("ЗаголовокСФВВалюте");
		Иначе
			МассивОбластейМакета.Добавить("Заголовок");
		КонецЕсли;
		
		МассивОбластейМакета.Добавить("Шапка");
		
		Если СчетФактураВВалюте Тогда
			МассивОбластейМакета.Добавить("ШапкаТаблицыВВалюте");
			МассивОбластейМакета.Добавить("СтрокаСФВВалюте");
		Иначе
			МассивОбластейМакета.Добавить("ШапкаТаблицы");
			МассивОбластейМакета.Добавить("Строка");
		КонецЕсли;	
		
		Если ДанныеПечати.Свойство("ВалютаИсходная") Тогда
			
			Если НЕ СчетФактураВВалюте И ЕстьСкидка Тогда
				МассивОбластейМакета.Добавить("СтрокаСкидкиИсходная");
				МассивОбластейМакета.Добавить("СтрокаСкидкиПересчитанная");
			КонецЕсли;
			
			МассивОбластейМакета.Добавить("ИсходныйИтог");
			
		Иначе
			Если НЕ СчетФактураВВалюте И ЕстьСкидка Тогда
				МассивОбластейМакета.Добавить("СтрокаСкидкиПересчитанная");
			КонецЕсли;	
		КонецЕсли;	
		
		МассивОбластейМакета.Добавить("ПодвалСФаксимиле");
	
		ДанныеПечатиСтроки = Новый Структура();
		ДанныеПечатиСтроки.Вставить("КодТовара1", "");
		ДанныеПечатиСтроки.Вставить("КодТовара2", "");
		ДанныеПечатиСтроки.Вставить("КодТовара3", "");
		ДанныеПечатиСтроки.Вставить("КодТовара4", "");

		ДанныеПечатиПустаяСтрока = Новый Структура();
		ДанныеПечатиПустаяСтрока.Вставить("КодТовара1", 				"");
		ДанныеПечатиПустаяСтрока.Вставить("КодТовара2", 				"");
		ДанныеПечатиПустаяСтрока.Вставить("КодТовара3", 				"");
		ДанныеПечатиПустаяСтрока.Вставить("КодТовара4", 				"");
		ДанныеПечатиПустаяСтрока.Вставить("Количество", 				"Х");
		ДанныеПечатиПустаяСтрока.Вставить("СтавкаНДС", 					"Х");
		ДанныеПечатиПустаяСтрока.Вставить("СтавкаНСП", 					"Х");
		ДанныеПечатиПустаяСтрока.Вставить("Стоимость", 					"Х");	
		ДанныеПечатиПустаяСтрока.Вставить("СуммаНДС", 					"Х");
		ДанныеПечатиПустаяСтрока.Вставить("СуммаНСП", 					"Х");
		ДанныеПечатиПустаяСтрока.Вставить("НоменклатураПредставление", 	"Х");   
		ДанныеПечатиПустаяСтрока.Вставить("ЕдиницаИзмерения",			"Х");
		ДанныеПечатиПустаяСтрока.Вставить("Цена", 						"Х");
		ДанныеПечатиПустаяСтрока.Вставить("Всего", 						"Х");
		
		Если СчетФактураВВалюте Тогда
			ДанныеПечатиПустаяСтрока.Вставить("НоменклатураПредставление", 	"Х");
			ДанныеПечатиПустаяСтрока.Вставить("ЦенаВРеглВалюте", 			"Х");
			ДанныеПечатиПустаяСтрока.Вставить("СтоимостьВРеглВалюте", 		"Х");
			ДанныеПечатиПустаяСтрока.Вставить("СуммаНДСВРеглВалюте", 		"Х");
			ДанныеПечатиПустаяСтрока.Вставить("СуммаНСПВРеглВалюте", 		"Х");
			ДанныеПечатиПустаяСтрока.Вставить("ВсегоВРеглВалюте", 			"Х");
		КонецЕсли;
		
		ДанныеДокумента = Новый Структура();
		ДанныеДокумента.Вставить("СуммаВключаетНалоги", Неопределено);
		ДанныеДокумента.Вставить("Дата", 				Неопределено);
		ДанныеДокумента.Вставить("Организация", 		Шапка.Организация);
		ДанныеДокумента.Вставить("СтавкаНДС", 			Неопределено);
		ДанныеДокумента.Вставить("СтавкаНСП", 			Неопределено);
		ДанныеДокумента.Вставить("БезналичныйРасчет", 	Неопределено);
		
		ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(Шапка.ДатаСФ, Шапка.Организация);
		
		Для Каждого ИмяОбласти Из МассивОбластейМакета Цикл
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
			
			Если ИмяОбласти <> "Строка" И ИмяОбласти <> "СтрокаСФВВалюте" Тогда
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			Иначе	
				Если (ИсходнаяТаблица <> Неопределено И ПересчитаннаяТаблица <> Неопределено)
					ИЛИ ИсходнаяТаблица <> Неопределено Тогда
					
					ОбластьМакетаДопСтрока = Неопределено;
					
					// Заготовка необходимых структур
					Если ПересчитаннаяТаблица <> Неопределено Тогда
						ОбластьМакетаДопСтрока = Макет.ПолучитьОбласть("ПересчитаннаяСтрока");
						СтруктураОтбора = Новый Структура();
						СтруктураОтбора.Вставить("ДокументСФ", );
						СтруктураОтбора.Вставить("Ссылка", );
						СтруктураОтбора.Вставить("Номенклатура", );
						
						СтруктураНоменклатура = Новый Структура();
						СтруктураНоменклатура.Вставить("НоменклатураПредставление", "");	
					КонецЕсли;
						
					Для Каждого СтрокаТаблицы Из ИсходнаяТаблица Цикл
						КодТНВЭД = ?(ЗначениеЗаполнено(СтрокаТаблицы.КодТНВЭД), СтрокаТаблицы.КодТНВЭД, "0000");
						ДанныеПечатиСтроки.КодТовара1 = Сред(КодТНВЭД,1,1);
						ДанныеПечатиСтроки.КодТовара2 = Сред(КодТНВЭД,2,1);
						ДанныеПечатиСтроки.КодТовара3 = Сред(КодТНВЭД,3,1);
						ДанныеПечатиСтроки.КодТовара4 = Сред(КодТНВЭД,4,1);
						
						Если ОбластьМакетаДопСтрока = Неопределено Тогда
							// Ставки
							Если СтрокаТаблицы.БезналичныйРасчет Тогда
								ДанныеПечати.СтавкаНСП = "0%";	
							Иначе
								ЗначениеСтавкиНСП = ?(ДанныеУчетнойПолитики.ПлательщикНСП, 
													УчетНДС.ПолучитьСтавкуНСП(Шапка.ДатаСФ, Шапка.Организация, СтрокаТаблицы.СтавкаНСП), 
													ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка"));
								ДанныеПечати.СтавкаНСП = ?(ЗначениеЗаполнено(ЗначениеСтавкиНСП), Строка(ЗначениеСтавкиНСП) + "%","");
							КонецЕсли;
							
							ЗначениеСтавкиНДС = ?(ДанныеУчетнойПолитики.ПлательщикНДС, 
												УчетНДС.ПолучитьСтавкуНДС(Шапка.ДатаСФ, СтрокаТаблицы.СтавкаНДС), 
												ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка"));	
							
							ДанныеПечати.СтавкаНДС = ?(ЗначениеЗаполнено(ЗначениеСтавкиНДС), Строка(ЗначениеСтавкиНДС) + "%","");
							
							
							ДанныеДокумента.СуммаВключаетНалоги = СтрокаТаблицы.СуммаВключаетНалоги;
							ДанныеДокумента.Дата 				= СтрокаТаблицы.Дата;
							ДанныеДокумента.БезналичныйРасчет 	= СтрокаТаблицы.БезналичныйРасчет;
							ДанныеДокумента.СтавкаНДС 			= СтрокаТаблицы.СтавкаНДС;
							ДанныеДокумента.СтавкаНСП 			= СтрокаТаблицы.СтавкаНСП;
							РассчитатьСуммыСчетФактуры(СтрокаТаблицы, ДанныеДокумента, ДанныеПечати, ДанныеУчетнойПолитики,, НЕ ЕстьСкидка);
							ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
							
							СтруктураСтавок = Новый Структура();
							СтруктураСтавок.Вставить("СтавкаНДС", ?(ЗначениеЗаполнено(ЗначениеСтавкиНДС), Строка(ЗначениеСтавкиНДС) + "%",""));
							
							Если СтрокаТаблицы.БезналичныйРасчет Тогда
								СтруктураСтавок.Вставить("СтавкаНСП", "0%");	
							Иначе
								СтруктураСтавок.Вставить("СтавкаНСП", ?(ЗначениеЗаполнено(ЗначениеСтавкиНСП), Строка(ЗначениеСтавкиНСП) + "%",""));
							КонецЕсли;
							
							ОбластьМакета.Параметры.Заполнить(СтруктураСтавок);
							ОбластьМакета.Параметры.Заполнить(ДанныеПечатиСтроки);
							
							ТабличныйДокумент.Вывести(ОбластьМакета);
								
						// Вывод основной строки с исходной суммой (к номенклатуре добавляется курс),
						// а затем вывод дополнительной строки с пересчитанными суммами.
						Иначе
							Если СчетФактураВВалюте Тогда
								СтруктураНоменклатура.НоменклатураПредставление = СтрокаТаблицы.НоменклатураПредставление;
							Иначе	
								СтруктураНоменклатура.НоменклатураПредставление = СтрШаблон(НСтр("ru = '%1, курс %2'"),
									СтрокаТаблицы.НоменклатураПредставление,
									СтрокаТаблицы.Курс);
							КонецЕсли; 
							
							// Ставки
							Если СтрокаТаблицы.БезналичныйРасчет Тогда
								ДанныеПечати.СтавкаНСП = "0%";	
							Иначе
								ЗначениеСтавкиНСП = ?(ДанныеУчетнойПолитики.ПлательщикНСП, 
													УчетНДС.ПолучитьСтавкуНСП(Шапка.ДатаСФ, Шапка.Организация, СтрокаТаблицы.СтавкаНСП), 
													ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка"));
								ДанныеПечати.СтавкаНСП = ?(ЗначениеЗаполнено(ЗначениеСтавкиНСП), Строка(ЗначениеСтавкиНСП) + "%","");
							КонецЕсли;
							
							ЗначениеСтавкиНДС = ?(ДанныеУчетнойПолитики.ПлательщикНДС, 
												УчетНДС.ПолучитьСтавкуНДС(Шапка.ДатаСФ, СтрокаТаблицы.СтавкаНДС), 
												ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка"));
							
							ДанныеПечати.СтавкаНДС = ?(ЗначениеЗаполнено(ЗначениеСтавкиНДС), Строка(ЗначениеСтавкиНДС) + "%","");
														
							ДанныеДокумента.СуммаВключаетНалоги = СтрокаТаблицы.СуммаВключаетНалоги;
							ДанныеДокумента.Дата 				= СтрокаТаблицы.Дата;
							ДанныеДокумента.БезналичныйРасчет 	= СтрокаТаблицы.БезналичныйРасчет;
							ДанныеДокумента.СтавкаНДС 			= СтрокаТаблицы.СтавкаНДС;
							ДанныеДокумента.СтавкаНСП 			= СтрокаТаблицы.СтавкаНСП;
							РассчитатьСуммыСчетФактуры(СтрокаТаблицы, ДанныеДокумента, ДанныеПечати, ДанныеУчетнойПолитики, Истина, НЕ ЕстьСкидка);
							ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
							
							СтруктураСтавок = Новый Структура();
							СтруктураСтавок.Вставить("СтавкаНДС", ?(ЗначениеЗаполнено(ЗначениеСтавкиНДС), Строка(ЗначениеСтавкиНДС) + "%",""));
							
							Если СтрокаТаблицы.БезналичныйРасчет Тогда
								СтруктураСтавок.Вставить("СтавкаНСП", "0%");	
							Иначе
								СтруктураСтавок.Вставить("СтавкаНСП", ?(ЗначениеЗаполнено(ЗначениеСтавкиНСП), Строка(ЗначениеСтавкиНСП) + "%",""));
							КонецЕсли;
							
							ОбластьМакета.Параметры.Заполнить(СтруктураСтавок);
							ОбластьМакета.Параметры.Заполнить(ДанныеПечатиСтроки);
							ОбластьМакета.Параметры.Заполнить(СтруктураНоменклатура);
							
							Если СчетФактураВВалюте Тогда
								Цены = Новый Структура();
								Цены.Вставить("Цена", Строка(Формат(СтрокаТаблицы.Цена, "ЧДЦ=2; ЧВН=")) + " (" + Шапка.ВалютаДокумента + ")");
								ОбластьМакета.Параметры.Заполнить(Цены);
							КонецЕсли;
							
							Если НЕ СчетФактураВВалюте Тогда
								ТабличныйДокумент.Вывести(ОбластьМакета);
							КонецЕсли;
								
							ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТаблицы);
							
							Строки = ПересчитаннаяТаблица.НайтиСтроки(СтруктураОтбора);
							Если Строки.Количество() > 0 Тогда
								Данные = Строки[0];
								
								Если СчетФактураВВалюте Тогда
									СуммыВРеглВалюте = Новый Структура();
									СуммыВРеглВалюте.Вставить("ЦенаВРеглВалюте", 		Строка(Формат(Данные.Цена, "ЧДЦ=2; ЧВН=")) + " (" + ВалютаРегламентированногоУчета + ")");
									СуммыВРеглВалюте.Вставить("СтоимостьВРеглВалюте", 	Данные.Стоимость);
									СуммыВРеглВалюте.Вставить("СуммаНДСВРеглВалюте", 	Данные.СуммаНДС);
									СуммыВРеглВалюте.Вставить("СуммаНСПВРеглВалюте", 	Данные.СуммаНСП);
									СуммыВРеглВалюте.Вставить("ВсегоВРеглВалюте", 		Данные.Всего);
									ОбластьМакета.Параметры.Заполнить(СуммыВРеглВалюте);
									
								Иначе	
									КодТНВЭД = ?(ЗначениеЗаполнено(Данные.КодТНВЭД), Данные.КодТНВЭД, "0000");
									ДанныеПечатиСтроки.КодТовара1 = Сред(КодТНВЭД,1,1);
									ДанныеПечатиСтроки.КодТовара2 = Сред(КодТНВЭД,2,1);
									ДанныеПечатиСтроки.КодТовара3 = Сред(КодТНВЭД,3,1);
									ДанныеПечатиСтроки.КодТовара4 = Сред(КодТНВЭД,4,1);
									
									// Ставки
									Если Данные.БезналичныйРасчет Тогда
										ДанныеПечати.СтавкаНСП = "0%";	
									Иначе
										ЗначениеСтавкиНСП = ?(ДанныеУчетнойПолитики.ПлательщикНСП, 
															УчетНДС.ПолучитьСтавкуНСП(Шапка.ДатаСФ, Шапка.Организация, Данные.СтавкаНСП), 
															ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка"));
										ДанныеПечати.СтавкаНСП = ?(ЗначениеЗаполнено(ЗначениеСтавкиНСП), Строка(ЗначениеСтавкиНСП) + "%","");
									КонецЕсли;	
									
									ЗначениеСтавкиНДС = ?(ДанныеУчетнойПолитики.ПлательщикНДС, 
														УчетНДС.ПолучитьСтавкуНДС(Шапка.ДатаСФ, Данные.СтавкаНДС), 
														ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка"));
									
									ДанныеПечати.СтавкаНДС = ?(ЗначениеЗаполнено(ЗначениеСтавкиНДС), Строка(ЗначениеСтавкиНДС) + "%","");
																		
									ДанныеДокумента.СуммаВключаетНалоги = Данные.СуммаВключаетНалоги;
									ДанныеДокумента.Дата 				= Данные.Дата;
									ДанныеДокумента.БезналичныйРасчет 	= Данные.БезналичныйРасчет;
									ДанныеДокумента.СтавкаНДС 			= Данные.СтавкаНДС;
									ДанныеДокумента.СтавкаНСП 			= Данные.СтавкаНСП;
									РассчитатьСуммыСчетФактуры(Данные, ДанныеДокумента, ДанныеПечати, ДанныеУчетнойПолитики,, НЕ ЕстьСкидка);
									ОбластьМакета.Параметры.Заполнить(Данные);
									
									СтруктураСтавок = Новый Структура();
									СтруктураСтавок.Вставить("СтавкаНДС", ?(ЗначениеЗаполнено(ЗначениеСтавкиНДС), Строка(ЗначениеСтавкиНДС) + "%",""));
									
									Если Данные.БезналичныйРасчет Тогда
										СтруктураСтавок.Вставить("СтавкаНСП", "0%");	
									Иначе
										СтруктураСтавок.Вставить("СтавкаНСП", ?(ЗначениеЗаполнено(ЗначениеСтавкиНСП), Строка(ЗначениеСтавкиНСП) + "%",""));
									КонецЕсли;
									
									ОбластьМакета.Параметры.Заполнить(СтруктураСтавок);
									ОбластьМакета.Параметры.Заполнить(ДанныеПечатиСтроки);
								КонецЕсли;	
								
								// Заполнение курса с 4 знаками после запятой обязательно.
								ОбластьМакета.Параметры.Заполнить(Новый Структура("Курс", Формат(СтрокаТаблицы.Курс, "ЧЦ=10; ЧДЦ=4")));
								
								ТабличныйДокумент.Вывести(ОбластьМакета);
							КонецЕсли;
						КонецЕсли;	
					КонецЦикла;
					
				Иначе
					Для Каждого СтрокаТаблицы Из ПересчитаннаяТаблица Цикл 
						КодТНВЭД = ?(ЗначениеЗаполнено(СтрокаТаблицы.КодТНВЭД), СтрокаТаблицы.КодТНВЭД, "0000");
						ДанныеПечатиСтроки.КодТовара1 = Сред(КодТНВЭД,1,1);
						ДанныеПечатиСтроки.КодТовара2 = Сред(КодТНВЭД,2,1);
						ДанныеПечатиСтроки.КодТовара3 = Сред(КодТНВЭД,3,1);
						ДанныеПечатиСтроки.КодТовара4 = Сред(КодТНВЭД,4,1);
						
						// Ставки
						Если СтрокаТаблицы.БезналичныйРасчет Тогда
							ДанныеПечати.СтавкаНСП = "0%";	
						Иначе
							ЗначениеСтавкиНСП = ?(ДанныеУчетнойПолитики.ПлательщикНСП, 
												УчетНДС.ПолучитьСтавкуНСП(Шапка.ДатаСФ, Шапка.Организация, СтрокаТаблицы.СтавкаНСП), 
												ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка"));
							ДанныеПечати.СтавкаНСП = ?(ЗначениеЗаполнено(ЗначениеСтавкиНСП), Строка(ЗначениеСтавкиНСП) + "%","");
						КонецЕсли;	
						
						ЗначениеСтавкиНДС = ?(ДанныеУчетнойПолитики.ПлательщикНДС, 
											УчетНДС.ПолучитьСтавкуНДС(Шапка.ДатаСФ, СтрокаТаблицы.СтавкаНДС), 
											ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка"));
						
						ДанныеПечати.СтавкаНДС = ?(ЗначениеЗаполнено(ЗначениеСтавкиНДС), Строка(ЗначениеСтавкиНДС) + "%","");
												
						ДанныеДокумента.СуммаВключаетНалоги = СтрокаТаблицы.СуммаВключаетНалоги;
						ДанныеДокумента.Дата 				= СтрокаТаблицы.Дата;
						ДанныеДокумента.БезналичныйРасчет 	= СтрокаТаблицы.БезналичныйРасчет;
						ДанныеДокумента.СтавкаНДС 			= СтрокаТаблицы.СтавкаНДС;
						ДанныеДокумента.СтавкаНСП 			= СтрокаТаблицы.СтавкаНСП;
						РассчитатьСуммыСчетФактуры(СтрокаТаблицы, ДанныеДокумента, ДанныеПечати, ДанныеУчетнойПолитики,, НЕ ЕстьСкидка);
						ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
						
						Ставки = Новый Структура();
						Ставки.Вставить("СтавкаНДС", ?(ЗначениеЗаполнено(ЗначениеСтавкиНДС), Строка(ЗначениеСтавкиНДС) + "%",""));
						
						Если СтрокаТаблицы.БезналичныйРасчет Тогда
							Ставки.Вставить("СтавкаНСП", "0%");	
						Иначе
							Ставки.Вставить("СтавкаНСП", ?(ЗначениеЗаполнено(ЗначениеСтавкиНСП), Строка(ЗначениеСтавкиНСП) + "%",""));
						КонецЕсли;
						
						ОбластьМакета.Параметры.Заполнить(Ставки);
						ОбластьМакета.Параметры.Заполнить(ДанныеПечатиСтроки);
						ТабличныйДокумент.Вывести(ОбластьМакета);
					КонецЦикла;
				КонецЕсли;
						
				// Добавление пустых строк
				Если КоличествоСтрокСчетаФактуры > КоличествоСтрок Тогда 
					Для Счетчик = 1 По КоличествоСтрокСчетаФактуры - КоличествоСтрок Цикл
						ОбластьМакета.Параметры.Заполнить(ДанныеПечатиПустаяСтрока);
						ТабличныйДокумент.Вывести(ОбластьМакета);		
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Функция формирует табличный документ с печатной формой Счет-фактура
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьСчетФактураБезНДС(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	Ошибки = Неопределено;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;	
	ТабличныйДокумент.КлючПараметровПечати = "СчетФактураВыписанный_СчетФактураБезНДС";

	Если НЕ ПараметрыПечати.ПлательщикНДС Тогда
		ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьСчетФактура.ПФ_MXL_СчетФактураБезНДС");
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	СчетФактураВыписанный.Ссылка КАК Ссылка,
			|	СчетФактураВыписанный.Номер КАК Номер,
			|	СчетФактураВыписанный.Дата КАК Дата,
			|	СчетФактураВыписанный.ВалютаДокумента КАК ВалютаДокумента,
			|	СчетФактураВыписанный.Организация КАК Организация,
			|	СчетФактураВыписанный.Организация.НаименованиеПолное КАК ОрганизацияПредставление,
			|	СчетФактураВыписанный.Организация.ФайлЛоготип КАК ФайлЛоготип,
			|	СчетФактураВыписанный.Контрагент.НаименованиеПолное КАК КонтрагентПредставление,
			|	СчетФактураВыписанный.Организация.ИНН КАК ИНН,
			|	ЕСТЬNULL(СчетФактураВыписанный.Организация.ОсновнойБанковскийСчет.НомерСчета, """") КАК НомерСчета,
			|	ЕСТЬNULL(СчетФактураВыписанный.Организация.ОсновнойБанковскийСчет.Банк.Наименование, """") КАК БанкПредставление,
			|	ЕСТЬNULL(СчетФактураВыписанный.Организация.ОсновнойБанковскийСчет.Банк.Код, """") КАК БИКБанка,
			|	СчетФактураВыписанный.ЭкспортнаяПоставка КАК ЭкспортнаяПоставка,
			|	СчетФактураВыписанный.ПечатьВРегламентированнойВалюте КАК ПечатьВРегламентированнойВалюте,
			|	СчетФактураВыписанный.ГруппироватьПоНоменклатуре КАК ГруппироватьПоНоменклатуре
			|ИЗ
			|	Документ.СчетФактураВыписанный КАК СчетФактураВыписанный
			|ГДЕ
			|	СчетФактураВыписанный.Ссылка В(&СписокДокументов)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СчетФактураВыписанныйТовары.Ссылка КАК Ссылка,
			|	СчетФактураВыписанныйТовары.НомерСтроки КАК НомерСтроки,
			|	СчетФактураВыписанныйТовары.Номенклатура КАК Номенклатура,
			|	СчетФактураВыписанныйТовары.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
			|	СчетФактураВыписанныйТовары.Количество КАК Количество,
			|	СчетФактураВыписанныйТовары.ДокументОснование.Курс КАК Курс,
			|	СчетФактураВыписанныйТовары.ДокументОснование.Кратность КАК Кратность,
			|	СчетФактураВыписанныйТовары.Цена КАК Цена,
			|	СчетФактураВыписанныйТовары.СуммаДохода КАК Сумма,
			|	СчетФактураВыписанныйТовары.СуммаНДС КАК СуммаНДС,
			|	СчетФактураВыписанныйТовары.СуммаНСП КАК СуммаНСП,
			|	СчетФактураВыписанныйТовары.Всего - СчетФактураВыписанныйТовары.СуммаСкидки КАК Всего,
			|	СчетФактураВыписанныйТовары.СуммаДоходаВВалютеРеглУчета КАК СуммаВВалютеРеглУчета,
			|	СчетФактураВыписанныйТовары.СуммаНДСВВалютеРеглУчета КАК СуммаНДСВВалютеРеглУчета,
			|	СчетФактураВыписанныйТовары.СуммаНСПВВалютеРеглУчета КАК СуммаНСПВВалютеРеглУчета,
			|	СчетФактураВыписанныйТовары.ВсегоВВалютеРеглУчета - СчетФактураВыписанныйТовары.СуммаСкидкиВВалютеРеглУчета КАК ВсегоВВалютеРеглУчета,
			|	СчетФактураВыписанныйТовары.СуммаСкидкиВВалютеРеглУчета КАК СуммаСкидкиВВалютеРеглУчета,
			|	СчетФактураВыписанныйТовары.СуммаСкидки КАК СуммаСкидки,
			|	СчетФактураВыписанныйТовары.СтавкаНДС КАК СтавкаНДС,
			|	СчетФактураВыписанныйТовары.СтавкаНСП КАК СтавкаНСП
			|ИЗ
			|	Документ.СчетФактураВыписанный.Товары КАК СчетФактураВыписанныйТовары
			|ГДЕ
			|	СчетФактураВыписанныйТовары.Ссылка В(&СписокДокументов)
			|
			|УПОРЯДОЧИТЬ ПО
			|	НоменклатураПредставление
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СчетФактураВыписанныйТовары.Ссылка КАК Ссылка,
			|	СУММА(СчетФактураВыписанныйТовары.НомерСтроки) КАК НомерСтроки,
			|	СчетФактураВыписанныйТовары.Номенклатура КАК Номенклатура,
			|	СчетФактураВыписанныйТовары.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
			|   СРЕДНЕЕ(СчетФактураВыписанныйТовары.ДокументОснование.Курс) КАК Курс,
			|   СРЕДНЕЕ(СчетФактураВыписанныйТовары.ДокументОснование.Кратность) КАК Кратность,
			|	СУММА(СчетФактураВыписанныйТовары.Количество) КАК Количество,
			|	СРЕДНЕЕ(СчетФактураВыписанныйТовары.Цена) КАК Цена,
			|	СУММА(СчетФактураВыписанныйТовары.СуммаДохода) КАК Сумма,
			|	СУММА(СчетФактураВыписанныйТовары.СуммаНДС) КАК СуммаНДС,
			|	СУММА(СчетФактураВыписанныйТовары.СуммаНСП) КАК СуммаНСП,
			|	СУММА(СчетФактураВыписанныйТовары.Всего - СчетФактураВыписанныйТовары.СуммаСкидки) КАК Всего,
			|	СУММА(СчетФактураВыписанныйТовары.СуммаДоходаВВалютеРеглУчета) КАК СуммаВВалютеРеглУчета,
			|	СУММА(СчетФактураВыписанныйТовары.СуммаНДСВВалютеРеглУчета) КАК СуммаНДСВВалютеРеглУчета,
			|	СУММА(СчетФактураВыписанныйТовары.СуммаНСПВВалютеРеглУчета) КАК СуммаНСПВВалютеРеглУчета,
			|	СУММА(СчетФактураВыписанныйТовары.ВсегоВВалютеРеглУчета - СчетФактураВыписанныйТовары.СуммаСкидкиВВалютеРеглУчета) КАК ВсегоВВалютеРеглУчета,
			|	СУММА(СчетФактураВыписанныйТовары.СуммаСкидкиВВалютеРеглУчета) КАК СуммаСкидкиВВалютеРеглУчета,
			|	СУММА(СчетФактураВыписанныйТовары.СуммаСкидки) КАК СуммаСкидки,
			|	МАКСИМУМ(СчетФактураВыписанныйТовары.СтавкаНДС) КАК СтавкаНДС,
			|	СчетФактураВыписанныйТовары.СтавкаНСП КАК СтавкаНСП
			|ИЗ
			|	Документ.СчетФактураВыписанный.Товары КАК СчетФактураВыписанныйТовары
			|ГДЕ
			|	СчетФактураВыписанныйТовары.Ссылка В(&СписокДокументов)
			|
			|СГРУППИРОВАТЬ ПО
			|	СчетФактураВыписанныйТовары.Ссылка,
			|	СчетФактураВыписанныйТовары.Номенклатура,
			|	СчетФактураВыписанныйТовары.Номенклатура.НаименованиеПолное,
			|	СчетФактураВыписанныйТовары.СтавкаНСП
			|
			|УПОРЯДОЧИТЬ ПО
			|	НоменклатураПредставление";
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("СписокДокументов", МассивОбъектов);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		Шапка = МассивРезультатов[0].Выбрать();
		
		Пока Шапка.Следующий() Цикл
			Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			ДанныеПечати = Новый Структура;
			
			ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, НСтр("ru = 'Счет-фактура'"));
			ДанныеПечати.Вставить("ТекстЗаголовка", ТекстЗаголовка);
			ДанныеПечати.Вставить("Дата", Шапка.Дата);
			ДанныеПечати.Вставить("ОрганизацияПредставление", Шапка.ОрганизацияПредставление);
			ДанныеПечати.Вставить("ФайлЛоготип", Шапка.ФайлЛоготип);
			ДанныеПечати.Вставить("ПолучательПредставление", Шапка.КонтрагентПредставление);
			ДанныеПечати.Вставить("Адрес", УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
				Шапка.Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Шапка.Дата));
				
			ДанныеПечати.Вставить("ИНН", Шапка.ИНН);
			ДанныеПечати.Вставить("БанкПредставление", Шапка.БанкПредставление);
			ДанныеПечати.Вставить("РасчетныйСчетПредставление", Шапка.НомерСчета + " " + Шапка.БанкПредставление);
			ДанныеПечати.Вставить("БИКБанка", Шапка.БИКБанка);
			
			ДанныеПечати.Вставить("ТипПоставки", ?(Шапка.ЭкспортнаяПоставка, НСтр("ru = 'Экспорт'"), НСтр("ru = 'Внутренняя'")));
			
			// Подписи.
			РасшифровкаПодписиРуководителя = "";
			РасшифровкаПодписиГлавногоБухгалтера = "";
			ОтветственныеЛица = БухгалтерскийУчетСервер.ОтветственныеЛицаОрганизацийРуководители(Шапка.Организация, Шапка.Дата);
			БухгалтерскийУчетСервер.ФамилияИнициалыПоНаименованию(РасшифровкаПодписиРуководителя, ОтветственныеЛица.Руководитель);
			БухгалтерскийУчетСервер.ФамилияИнициалыПоНаименованию(РасшифровкаПодписиГлавногоБухгалтера, ОтветственныеЛица.ГлавныйБухгалтер);
			
			ДанныеПечати.Вставить("РасшифровкаПодписиРуководителя", РасшифровкаПодписиРуководителя);
			ДанныеПечати.Вставить("РасшифровкаПодписиГлавногоБухгалтера", РасшифровкаПодписиГлавногоБухгалтера);
			
			// Области.
			МассивОбластейМакета = Новый Массив;
			МассивОбластейМакета.Добавить("Заголовок");
			МассивОбластейМакета.Добавить("ШапкаТаблицы");
			МассивОбластейМакета.Добавить("СтрокаТаблицы");
			МассивОбластейМакета.Добавить("Подвал");
			МассивОбластейМакета.Добавить("СуммаПрописью");
			МассивОбластейМакета.Добавить("ПодписиСФаксимиле");
			
			// Подготовка перед заполнением.
			Если Шапка.ГруппироватьПоНоменклатуре Тогда
				ТаблицаТовары = МассивРезультатов[2].Выгрузить();
			Иначе
				ТаблицаТовары = МассивРезультатов[1].Выгрузить();
			КонецЕсли;	
			
			ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(Шапка.Дата, Шапка.Организация);
			МассивСтрок = ТаблицаТовары.НайтиСтроки(Новый Структура("Ссылка", Шапка.Ссылка));
			
			Всего = 0;
			Сумма = 0;
			ВсегоНДС = 0;
			ВсегоНСП = 0;
			КоличествоНаименований = 0;
			
			Для Каждого ИмяОбласти Из МассивОбластейМакета Цикл
				ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
				
				Если ИмяОбласти = "ЗаголовокСЛоготипом" Тогда
					Логотип = Новый Соответствие; // Ключ - имя картинки в области, Значение - имя реквизита
					Логотип.Вставить("Логотип", "ФайлЛоготип");
					ЗаполнитьЛоготипФаксимилеВОбластиМакета(ОбластьМакета, ДанныеПечати, Логотип, Ошибки);
				КонецЕсли;	

				Если ИмяОбласти <> "СтрокаТаблицы" Тогда
					ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);
					ТабличныйДокумент.Вывести(ОбластьМакета);
					
				ИначеЕсли ИмяОбласти = "СтрокаТаблицы" Тогда 
					
					КэшЗначенийСтавок = Новый Соответствие();
					
					СтруктураЗначенийСтавок = Новый Структура();
					СтруктураЗначенийСтавок.Вставить("ЗначениеСтавкиНДС", 0);
					СтруктураЗначенийСтавок.Вставить("ЗначениеСтавкиНСП", 0);
					
					СтруктураНомераСтроки = Новый Структура("НомерСтроки", 1);
					
					Для Каждого СтрокаМассива Из МассивСтрок Цикл
						СтруктураСтроки = Новый Структура();
						
						Если Шапка.ПечатьВРегламентированнойВалюте Тогда
							СтруктураСтроки.Вставить("Цена", 	 СтрокаМассива.Цена * СтрокаМассива.Курс / СтрокаМассива.Кратность);
							СтруктураСтроки.Вставить("Сумма", 	 СтрокаМассива.СуммаВВалютеРеглУчета);
							СтруктураСтроки.Вставить("СуммаНДС", СтрокаМассива.СуммаНДСВВалютеРеглУчета);
							СтруктураСтроки.Вставить("СуммаНСП", СтрокаМассива.СуммаНСПВВалютеРеглУчета);
							СтруктураСтроки.Вставить("Всего", 	 СтрокаМассива.ВсегоВВалютеРеглУчета);
							
							Всего = Всего + СтруктураСтроки.Всего;
							Сумма = Сумма + СтруктураСтроки.Сумма;
							ВсегоНДС = ВсегоНДС + СтруктураСтроки.СуммаНДС;
							ВсегоНСП = ВсегоНСП + СтруктураСтроки.СуммаНСП;
							КоличествоНаименований = КоличествоНаименований + 1;
							
						Иначе
							Всего = Всего + СтрокаМассива.Всего;
							Сумма = Сумма + СтрокаМассива.Сумма;
							ВсегоНДС = ВсегоНДС + СтрокаМассива.СуммаНДС;
							ВсегоНСП = ВсегоНСП + СтрокаМассива.СуммаНСП;
							КоличествоНаименований = КоличествоНаименований + 1;
						КонецЕсли;
						
						ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
						ОбластьМакета.Параметры.Заполнить(СтрокаМассива);
						ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
						ОбластьМакета.Параметры.Заполнить(СтруктураНомераСтроки);
						
						ЗначениеСтавкиНДС = КэшЗначенийСтавок.Получить(СтрокаМассива.СтавкаНДС);
						
						Если ЗначениеСтавкиНДС = Неопределено Тогда
							ЗначениеСтавкиНДС = УчетНДС.ПолучитьСтавкуНДС(Шапка.Дата, СтрокаМассива.СтавкаНДС);	
							КэшЗначенийСтавок.Вставить(СтрокаМассива.СтавкаНДС, ЗначениеСтавкиНДС);
						КонецЕсли;	
						
						СтруктураЗначенийСтавок.ЗначениеСтавкиНДС = ЗначениеСтавкиНДС;
						
						ЗначениеСтавкиНСП = ?(ДанныеУчетнойПолитики.ПлательщикНСП, 
												КэшЗначенийСтавок.Получить(СтрокаМассива.СтавкаНСП), 0);
						
						Если ЗначениеСтавкиНСП = Неопределено Тогда
							ЗначениеСтавкиНСП = ?(ДанныеУчетнойПолитики.ПлательщикНСП,
										УчетНДС.ПолучитьСтавкуНСП(Шапка.Дата, Шапка.Организация, СтрокаМассива.СтавкаНСП), 0);
							КэшЗначенийСтавок.Вставить(СтрокаМассива.СтавкаНСП, ЗначениеСтавкиНСП);
						КонецЕсли;	
						
						СтруктураЗначенийСтавок.ЗначениеСтавкиНСП = ЗначениеСтавкиНСП;
						
						ОбластьМакета.Параметры.Заполнить(СтруктураЗначенийСтавок);		
						
						ТабличныйДокумент.Вывести(ОбластьМакета);
						
						СтруктураНомераСтроки.НомерСтроки = СтруктураНомераСтроки.НомерСтроки + 1;
					КонецЦикла;
					
					// Подвал.
					ДанныеПечати.Вставить("Всего", Всего);
					ДанныеПечати.Вставить("Сумма", Сумма);
					ДанныеПечати.Вставить("ВсегоНДС", ВсегоНДС);
					ДанныеПечати.Вставить("ВсегоНСП", ВсегоНСП);
					ДанныеПечати.Вставить("ИтоговаяСтрока", 
						СтрШаблон(НСтр("ru = 'Всего наименований %1, на сумму %2'"), 
						Формат(КоличествоНаименований, "ЧН=0; ЧГ=0"), Формат(Всего, "ЧЦ=15; ЧДЦ=2")));
						
					Если Шапка.ПечатьВРегламентированнойВалюте Тогда
						ДанныеПечати.Вставить("СуммаПрописью", БухгалтерскийУчетСервер.СформироватьСуммуПрописью(Всего, ВалютаРегламентированногоУчета));
					Иначе
						ДанныеПечати.Вставить("СуммаПрописью", БухгалтерскийУчетСервер.СформироватьСуммуПрописью(Всего, Шапка.ВалютаДокумента));
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;
	 			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		КонецЦикла;
	КонецЕсли;	
		
	Возврат ТабличныйДокумент;
	
КонецФункции
	
// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактура001") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"СчетФактура001", НСтр("ru = 'Счет-фактура (001)'"), ПечатьСчетФактура(МассивОбъектов, ОбъектыПечати, 20));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактура002") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"СчетФактура002", НСтр("ru = 'Счет-фактура (002)'"), ПечатьСчетФактура(МассивОбъектов, ОбъектыПечати, 7));
	КонецЕсли;	
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактураВВалюте") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"СчетФактураВВалюте", НСтр("ru = 'Счет-фактура в валюте'"), ПечатьСчетФактура(МассивОбъектов, ОбъектыПечати, 1, Истина));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактураБезНДС") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"СчетФактураБезНДС", НСтр("ru = 'Счет-фактура без бланка НДС'"), ПечатьСчетФактураБезНДС(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	КонецЕсли;
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
		
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактура001";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура (001)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 1;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактура002";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура (002)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 2;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактураВВалюте";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура в валюте'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 3;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактураБезНДС";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура без бланка НДС'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ДополнительныеПараметры.Вставить("ПлательщикНДС",  Ложь);
	КомандаПечати.Порядок = 3;
		
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "РеестрСчетФактураВыписанный";
	КомандаПечати.Представление  = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Реестр документов ""Счет фактура выписанный""'");
	КомандаПечати.Обработчик     = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция для формирования текста запроса
//
// Возвращаемое значение:
//	Строка - текст запроса
//
Функция ПолучитьТекстЗапросаДокументовОснования()
	
	// 1. Данные из выделенных документов "Счет-фактура выписанный"
	// 2. Документы "Счет-фактура выписанный", в которых необходимо пересчитать суммы
	// 3. Документы "Счет-фактура выписанный" с исходными суммы
	// 4. Документы "Счет-фактура выписанный" в которых не нужно группировать номенклатуру
	// 5. Документы из ТЧ "ДокументыОснования"
	// 6. Данные из документов основания по ТЧ "Товары" и "Услуги"
	// 7. Данные по 6 пункту с отбором по документам 3 пункта
	// 8. Данные по 6 пункту с отбором по документам 2 пункта с пересчитанными суммами по курсу
	// 9. Готовые данные по документам с исходными суммами (объединение данных без группировки
	//		по номенклатуре и данных с группировкой).
	// 10. Готовые данные по документам с пересчитанными суммами (объединение данных без группировки
	//		по номенклатуре и данных с группировкой).
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК Ссылка,
		|	ТаблицаДокумента.ПечатьВРегламентированнойВалюте КАК ПечатьВРегламентированнойВалюте,
		|	ТаблицаДокумента.ПечататьКурсИСуммуВРегламентированнойВалюте КАК ПечататьКурсИСуммуВРегламентированнойВалюте,
		|	ТаблицаДокумента.ГруппироватьПоНоменклатуре КАК ГруппироватьПоНоменклатуре
		|ПОМЕСТИТЬ ВременнаяТаблицаНастройкиПечати
		|ИЗ
		|	Документ.СчетФактураВыписанный КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В(&СписокДокументов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаНастройкиПечати.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВременнаяТаблицаДокументыДляПересчета
		|ИЗ
		|	ВременнаяТаблицаНастройкиПечати КАК ВременнаяТаблицаНастройкиПечати
		|ГДЕ
		|	ВременнаяТаблицаНастройкиПечати.ПечатьВРегламентированнойВалюте
		|	ИЛИ ВременнаяТаблицаНастройкиПечати.ПечататьКурсИСуммуВРегламентированнойВалюте
		|	ИЛИ &СчетФактураВВалюте
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаНастройкиПечати.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВременнаяТаблицаДокументыСИсходнымиСуммами
		|ИЗ
		|	ВременнаяТаблицаНастройкиПечати КАК ВременнаяТаблицаНастройкиПечати
		|ГДЕ
		|	НЕ ВременнаяТаблицаНастройкиПечати.ПечатьВРегламентированнойВалюте
		|	ИЛИ &СчетФактураВВалюте
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаНастройкиПечати.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВременнаяТаблицаДокументыБезГруппировки
		|ИЗ
		|	ВременнаяТаблицаНастройкиПечати КАК ВременнаяТаблицаНастройкиПечати
		|ГДЕ
		|	НЕ ВременнаяТаблицаНастройкиПечати.ГруппироватьПоНоменклатуре
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК ДокументСФ,
		|	ТаблицаДокумента.ДокументОснование КАК ДокументОснование
		|ПОМЕСТИТЬ ВременнаяТаблицаДокументыОснования
		|ИЗ
		|	Документ.СчетФактураВыписанный.ДокументыОснования КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В(&СписокДокументов)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК ДокументСФ,
		|	ТаблицаДокумента.ДокументОснование КАК Ссылка,
		|	ТаблицаДокумента.ДокументОснование.Курс КАК Курс,
		|	ТаблицаДокумента.ДокументОснование.Кратность КАК Кратность,
		|	ТаблицаДокумента.ДокументОснование.СуммаВключаетНалоги КАК СуммаВключаетНалоги,
		|	ТаблицаДокумента.ДокументОснование.Дата КАК Дата,
		|	ТаблицаДокумента.ДокументОснование.БезналичныйРасчет КАК БезналичныйРасчет,
		|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
		|	ТаблицаДокумента.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
		|	ТаблицаДокумента.Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
		|	ТаблицаДокумента.Количество КАК Количество,
		|	ТаблицаДокумента.Цена КАК Цена,
		|	ТаблицаДокумента.Всего КАК Всего,
		|	ТаблицаДокумента.Сумма КАК Сумма,
		|	ТаблицаДокумента.СуммаСкидки КАК СуммаСкидки,
		|	ТаблицаДокумента.СуммаНДС КАК СуммаНДС,
		|	ТаблицаДокумента.СуммаНСП КАК СуммаНСП,
		|	ТаблицаДокумента.СуммаДохода КАК Стоимость,
		|	ТаблицаДокумента.ВсегоВВалютеРеглУчета КАК ВсегоВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаВВалютеРеглУчета КАК СуммаВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаСкидкиВВалютеРеглУчета КАК СуммаСкидкиВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаНДСВВалютеРеглУчета КАК СуммаНДСВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаНСПВВалютеРеглУчета КАК СуммаНСПВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаДоходаВВалютеРеглУчета КАК СтоимостьВВалютеРеглУчета,
		|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаДокумента.СтавкаНСП КАК СтавкаНСП,
		|	ТаблицаДокумента.Номенклатура.КодТНВЭД КАК КодТНВЭД
		|ПОМЕСТИТЬ ВременнаяТаблицаТоварыУслуги
		|ИЗ
		|	Документ.СчетФактураВыписанный.Товары КАК ТаблицаДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТоварыУслуги.ДокументСФ КАК ДокументСФ,
		|	ВременнаяТаблицаТоварыУслуги.Ссылка КАК Ссылка,
		|	ВременнаяТаблицаТоварыУслуги.Курс КАК Курс,
		|	ВременнаяТаблицаТоварыУслуги.СуммаВключаетНалоги КАК СуммаВключаетНалоги,
		|	ВременнаяТаблицаТоварыУслуги.Дата КАК Дата,
		|	ВременнаяТаблицаТоварыУслуги.БезналичныйРасчет КАК БезналичныйРасчет,
		|	ВременнаяТаблицаТоварыУслуги.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаТоварыУслуги.НоменклатураПредставление КАК НоменклатураПредставление,
		|	ВременнаяТаблицаТоварыУслуги.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВременнаяТаблицаТоварыУслуги.Количество КАК Количество,
		|	ВременнаяТаблицаТоварыУслуги.Цена КАК Цена,
		|	ВременнаяТаблицаТоварыУслуги.Всего КАК Всего,
		|	ВременнаяТаблицаТоварыУслуги.Сумма КАК Сумма,
		|	ВременнаяТаблицаТоварыУслуги.СуммаСкидки КАК СуммаСкидки,
		|	ВременнаяТаблицаТоварыУслуги.Стоимость КАК Стоимость,
		|	ВременнаяТаблицаТоварыУслуги.СуммаНДС КАК СуммаНДС,
		|	ВременнаяТаблицаТоварыУслуги.СуммаНСП КАК СуммаНСП,
		|	ВременнаяТаблицаТоварыУслуги.СтавкаНДС КАК СтавкаНДС,
		|	ВременнаяТаблицаТоварыУслуги.СтавкаНСП КАК СтавкаНСП,
		|	ВременнаяТаблицаТоварыУслуги.КодТНВЭД КАК КодТНВЭД
		|ПОМЕСТИТЬ ВременнаяТаблицаТоварыУслугиИсходныеСуммы
		|ИЗ
		|	ВременнаяТаблицаТоварыУслуги КАК ВременнаяТаблицаТоварыУслуги
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаДокументыСИсходнымиСуммами КАК ВременнаяТаблицаДокументыСИсходнымиСуммами
		|		ПО ВременнаяТаблицаТоварыУслуги.ДокументСФ = ВременнаяТаблицаДокументыСИсходнымиСуммами.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТоварыУслуги.ДокументСФ КАК ДокументСФ,
		|	ВременнаяТаблицаТоварыУслуги.Ссылка КАК Ссылка,
		|	ВременнаяТаблицаТоварыУслуги.Курс КАК Курс,
		|	ВременнаяТаблицаТоварыУслуги.СуммаВключаетНалоги КАК СуммаВключаетНалоги,
		|	ВременнаяТаблицаТоварыУслуги.Дата КАК Дата,
		|	ВременнаяТаблицаТоварыУслуги.БезналичныйРасчет КАК БезналичныйРасчет,
		|	ВременнаяТаблицаТоварыУслуги.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаТоварыУслуги.НоменклатураПредставление КАК НоменклатураПредставление,
		|	ВременнаяТаблицаТоварыУслуги.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВременнаяТаблицаТоварыУслуги.Количество КАК Количество,
		|	ВЫРАЗИТЬ(ВременнаяТаблицаТоварыУслуги.Цена * ВременнаяТаблицаТоварыУслуги.Курс / ВременнаяТаблицаТоварыУслуги.Кратность КАК ЧИСЛО(15, 2)) КАК Цена,
		|	ВременнаяТаблицаТоварыУслуги.ВсегоВВалютеРеглУчета КАК Всего,
		|	ВременнаяТаблицаТоварыУслуги.СуммаВВалютеРеглУчета КАК Сумма,
		|	ВременнаяТаблицаТоварыУслуги.СуммаСкидкиВВалютеРеглУчета КАК СуммаСкидки,
		|	ВременнаяТаблицаТоварыУслуги.СтоимостьВВалютеРеглУчета КАК Стоимость,
		|	ВременнаяТаблицаТоварыУслуги.СуммаНДСВВалютеРеглУчета КАК СуммаНДС,
		|	ВременнаяТаблицаТоварыУслуги.СуммаНСПВВалютеРеглУчета КАК СуммаНСП,
		|	ВременнаяТаблицаТоварыУслуги.СтавкаНДС КАК СтавкаНДС,
		|	ВременнаяТаблицаТоварыУслуги.СтавкаНСП КАК СтавкаНСП,
		|	ВременнаяТаблицаТоварыУслуги.КодТНВЭД КАК КодТНВЭД
		|ПОМЕСТИТЬ ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы
		|ИЗ
		|	ВременнаяТаблицаТоварыУслуги КАК ВременнаяТаблицаТоварыУслуги
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаДокументыДляПересчета КАК ВременнаяТаблицаДокументыДляПересчета
		|		ПО ВременнаяТаблицаТоварыУслуги.ДокументСФ = ВременнаяТаблицаДокументыДляПересчета.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.ДокументСФ КАК ДокументСФ,
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.Ссылка КАК Ссылка,
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.Курс КАК Курс,
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.СуммаВключаетНалоги КАК СуммаВключаетНалоги,
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.Дата КАК Дата,
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.БезналичныйРасчет КАК БезналичныйРасчет,
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.НоменклатураПредставление КАК НоменклатураПредставление,
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.Количество КАК Количество,
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.Цена КАК Цена,
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.Всего КАК Всего,
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.Сумма КАК Сумма,
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.СуммаСкидки КАК СуммаСкидки,
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.Стоимость КАК Стоимость,
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.СуммаНДС КАК СуммаНДС,
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.СуммаНСП КАК СуммаНСП,
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.СтавкаНДС КАК СтавкаНДС,
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.СтавкаНСП КАК СтавкаНСП,
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.КодТНВЭД КАК КодТНВЭД
		|ИЗ
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы КАК ВременнаяТаблицаТоварыУслугиИсходныеСуммы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаДокументыБезГруппировки КАК ВременнаяТаблицаДокументыБезГруппировки
		|		ПО ВременнаяТаблицаТоварыУслугиИсходныеСуммы.ДокументСФ = ВременнаяТаблицаДокументыБезГруппировки.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.ДокументСФ,
		|	МАКСИМУМ(ВременнаяТаблицаТоварыУслугиИсходныеСуммы.Ссылка),
		|	СРЕДНЕЕ(ВременнаяТаблицаТоварыУслугиИсходныеСуммы.Курс),
		|	МАКСИМУМ(ВременнаяТаблицаТоварыУслугиИсходныеСуммы.СуммаВключаетНалоги) КАК СуммаВключаетНалоги,
		|	МАКСИМУМ(ВременнаяТаблицаТоварыУслугиИсходныеСуммы.Дата) КАК Дата,
		|	МАКСИМУМ(ВременнаяТаблицаТоварыУслугиИсходныеСуммы.БезналичныйРасчет) КАК БезналичныйРасчет,
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.Номенклатура,
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.Номенклатура.НаименованиеПолное,
		|	МАКСИМУМ(ВременнаяТаблицаТоварыУслугиИсходныеСуммы.ЕдиницаИзмерения),
		|	СУММА(ВременнаяТаблицаТоварыУслугиИсходныеСуммы.Количество),
		|	СРЕДНЕЕ(ВременнаяТаблицаТоварыУслугиИсходныеСуммы.Цена),
		|	СУММА(ВременнаяТаблицаТоварыУслугиИсходныеСуммы.Всего),
		|	СУММА(ВременнаяТаблицаТоварыУслугиИсходныеСуммы.Сумма),
		|	СУММА(ВременнаяТаблицаТоварыУслугиИсходныеСуммы.СуммаСкидки),
		|	СУММА(ВременнаяТаблицаТоварыУслугиИсходныеСуммы.Стоимость),
		|	СУММА(ВременнаяТаблицаТоварыУслугиИсходныеСуммы.СуммаНДС),
		|	СУММА(ВременнаяТаблицаТоварыУслугиИсходныеСуммы.СуммаНСП),
		|	МАКСИМУМ(ВременнаяТаблицаТоварыУслугиИсходныеСуммы.СтавкаНДС) КАК СтавкаНДС,
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.СтавкаНСП КАК СтавкаНСП,
		|	МАКСИМУМ(ВременнаяТаблицаТоварыУслугиИсходныеСуммы.КодТНВЭД)
		|ИЗ
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы КАК ВременнаяТаблицаТоварыУслугиИсходныеСуммы
		|ГДЕ
		|	НЕ ВременнаяТаблицаТоварыУслугиИсходныеСуммы.ДокументСФ В
		|				(ВЫБРАТЬ
		|					ВременнаяТаблицаДокументыБезГруппировки.Ссылка
		|				ИЗ
		|					ВременнаяТаблицаДокументыБезГруппировки)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.ДокументСФ,
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.Номенклатура,
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.Номенклатура.НаименованиеПолное,
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.СтавкаНСП
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.ДокументСФ КАК ДокументСФ,
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.Ссылка КАК Ссылка,
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.Курс КАК Курс,
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.СуммаВключаетНалоги КАК СуммаВключаетНалоги,
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.Дата КАК Дата,
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.БезналичныйРасчет КАК БезналичныйРасчет,
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.НоменклатураПредставление КАК НоменклатураПредставление,
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.Количество КАК Количество,
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.Цена КАК Цена,
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.Всего КАК Всего,
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.Сумма КАК Сумма,
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.СуммаСкидки КАК СуммаСкидки,
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.Стоимость КАК Стоимость,
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.СуммаНДС КАК СуммаНДС,
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.СуммаНСП КАК СуммаНСП,
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.СтавкаНДС КАК СтавкаНДС,
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.СтавкаНСП КАК СтавкаНСП,
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.КодТНВЭД КАК КодТНВЭД
		|ИЗ
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы КАК ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаДокументыБезГруппировки КАК ВременнаяТаблицаДокументыБезГруппировки
		|		ПО ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.ДокументСФ = ВременнаяТаблицаДокументыБезГруппировки.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.ДокументСФ,
		|	МАКСИМУМ(ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.Ссылка),
		|	СРЕДНЕЕ(ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.Курс),
		|	МАКСИМУМ(ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.СуммаВключаетНалоги) КАК СуммаВключаетНалоги,
		|	МАКСИМУМ(ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.Дата) КАК Дата,
		|	МАКСИМУМ(ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.БезналичныйРасчет) КАК БезналичныйРасчет,
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.Номенклатура,
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.Номенклатура.НаименованиеПолное,
		|	МАКСИМУМ(ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.ЕдиницаИзмерения),
		|	СУММА(ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.Количество),
		|	СРЕДНЕЕ(ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.Цена),
		|	СУММА(ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.Всего),
		|	СУММА(ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.Сумма),
		|	СУММА(ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.СуммаСкидки),
		|	СУММА(ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.Стоимость),
		|	СУММА(ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.СуммаНДС),
		|	СУММА(ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.СуммаНСП),
		|	МАКСИМУМ(ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.СтавкаНДС) КАК СтавкаНДС,
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.СтавкаНСП КАК СтавкаНСП,
		|	МАКСИМУМ(ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.КодТНВЭД)
		|ИЗ
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы КАК ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы
		|ГДЕ
		|	НЕ ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.ДокументСФ В
		|				(ВЫБРАТЬ
		|					ВременнаяТаблицаДокументыБезГруппировки.Ссылка
		|				ИЗ
		|					ВременнаяТаблицаДокументыБезГруппировки)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.ДокументСФ,
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.Номенклатура,
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.Номенклатура.НаименованиеПолное,
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.СтавкаНСП";	
		
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаДокументовОснования()

Процедура РассчитатьСуммыСчетФактуры(СтрокаТаблицы, ДанныеДокумента, ДанныеПечати, ДанныеУчетнойПолитики, ИсходныеСуммы = Ложь, ТолькоРасчетИтогов = Ложь)

	СтавкаНДС = ?(ДанныеУчетнойПолитики.ПлательщикНДС, 
					ДанныеДокумента.СтавкаНДС, 
					Справочники.СтавкиНДС.ПустаяСсылка());
					
	СтавкаНСП = ?(ДанныеУчетнойПолитики.ПлательщикНСП, 
					ДанныеДокумента.СтавкаНСП, 
					Справочники.СтавкиНСП.ПустаяСсылка());
	
	Если ТолькоРасчетИтогов Тогда
		
		Если ИсходныеСуммы Тогда
			ДанныеПечати.ВсегоИсходная 			= ДанныеПечати.ВсегоИсходная + СтрокаТаблицы.Всего;
			ДанныеПечати.ВсегоНДСИсходная 		= ДанныеПечати.ВсегоНДСИсходная + СтрокаТаблицы.СуммаНДС;
			ДанныеПечати.ВсегоНСПИсходная 		= ДанныеПечати.ВсегоНСПИсходная + СтрокаТаблицы.СуммаНСП;
			ДанныеПечати.ВсегоСтоимостьИсходная = ДанныеПечати.ВсегоСтоимостьИсходная + СтрокаТаблицы.Стоимость;
			
		Иначе	
		    ДанныеПечати.Всего 			= ДанныеПечати.Всего + СтрокаТаблицы.Всего;
			ДанныеПечати.ВсегоНДС 		= ДанныеПечати.ВсегоНДС + СтрокаТаблицы.СуммаНДС;
			ДанныеПечати.ВсегоНСП 		= ДанныеПечати.ВсегоНСП + СтрокаТаблицы.СуммаНСП;
			ДанныеПечати.ВсегоСтоимость = ДанныеПечати.ВсегоСтоимость + СтрокаТаблицы.Стоимость;
		КонецЕсли;	
			
	Иначе	
		СтруктураНачальныхСумм = Новый Структура();
		СтруктураНачальныхСумм.Вставить("Всего", 	СтрокаТаблицы.Всего);
		СтруктураНачальныхСумм.Вставить("Доход", 	СтрокаТаблицы.Стоимость);
		СтруктураНачальныхСумм.Вставить("Скидка", 	СтрокаТаблицы.СуммаСкидки);
		СтруктураНачальныхСумм.Вставить("НДС", 		СтрокаТаблицы.СуммаНДС);
		СтруктураНачальныхСумм.Вставить("НСП", 		СтрокаТаблицы.СуммаНСП);
		
		СтруктураСтроки = Новый Структура();
		СтруктураСтроки.Вставить("Цена", 		СтрокаТаблицы.Цена);
		СтруктураСтроки.Вставить("Количество", 	СтрокаТаблицы.Количество);
		СтруктураСтроки.Вставить("Сумма", 		СтрокаТаблицы.Сумма);
		СтруктураСтроки.Вставить("СуммаНДС", 	СтрокаТаблицы.СуммаНДС);
		СтруктураСтроки.Вставить("СуммаНСП", 	СтрокаТаблицы.СуммаНСП);
		СтруктураСтроки.Вставить("Всего", 		СтрокаТаблицы.Всего + СтрокаТаблицы.СуммаСкидки);
		СтруктураСтроки.Вставить("СуммаДохода", СтрокаТаблицы.Стоимость);
		СтруктураСтроки.Вставить("СуммаСкидки", 0);
		СтруктураСтроки.Вставить("СтавкаНДС", 	СтавкаНДС);
		СтруктураСтроки.Вставить("СтавкаНСП", 	СтавкаНСП);
		
		ПараметрыРасчета = Новый Структура;
		ПараметрыРасчета.Вставить("Период", 					ДанныеДокумента.Дата);
		ПараметрыРасчета.Вставить("Организация", 				ДанныеДокумента.Организация);
		ПараметрыРасчета.Вставить("ПризнакСтраныЕАЭС", 			Ложь);
		ПараметрыРасчета.Вставить("ПризнакСтраныИмпортЭкспорт", Ложь);
		ПараметрыРасчета.Вставить("СуммаВключаетНалоги", 		Истина);
		ПараметрыРасчета.Вставить("БезналичныйРасчет", 			ДанныеДокумента.БезналичныйРасчет);
		ПараметрыРасчета.Вставить("ЭкспортУслугПокупателюКР", 	Ложь);
		ПараметрыРасчета.Вставить("СчитатьОтДохода", 			Истина);
		ПараметрыРасчета.Вставить("Точность", 					2);
		ПараметрыРасчета.Вставить("СтавкаНДС", 					СтавкаНДС);
		ПараметрыРасчета.Вставить("СтавкаНСП", 					СтавкаНСП);	
		ПараметрыРасчета.Вставить("СчитатьСкидкуОтдельно",		Ложь);
		
		Если ДанныеДокумента.СуммаВключаетНалоги Тогда
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтруктураСтроки, ПараметрыРасчета);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтруктураСтроки);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтруктураСтроки, Истина);
			
		Иначе
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтруктураСтроки, Ложь);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтруктураСтроки, ПараметрыРасчета);
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтруктураСтроки, ПараметрыРасчета);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтруктураСтроки, ПараметрыРасчета);
				
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтруктураСтроки);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтруктураСтроки);
		СтрокаТаблицы.Стоимость = СтруктураСтроки.СуммаДохода;
		
		Если ИсходныеСуммы Тогда	
			ДанныеПечати.СуммаСкидкиИсходная 			= ДанныеПечати.СуммаСкидкиИсходная + СтруктураНачальныхСумм.Скидка;	
			ДанныеПечати.НДССкидкиИсходная 		 		= ДанныеПечати.НДССкидкиИсходная + (СтрокаТаблицы.СуммаНДС - СтруктураНачальныхСумм.НДС);
			ДанныеПечати.НСПСкидкиИсходная 		 		= ДанныеПечати.НСПСкидкиИсходная + (СтрокаТаблицы.СуммаНСП - СтруктураНачальныхСумм.НСП);
			ДанныеПечати.СуммаСкидкиБезНалоговИсходная 	= ДанныеПечати.СуммаСкидкиИсходная - ДанныеПечати.НДССкидкиИсходная - ДанныеПечати.НСПСкидкиИсходная;
			
			ДанныеПечати.ВсегоИсходная 			= ДанныеПечати.ВсегоИсходная + (СтрокаТаблицы.Всего - СтруктураНачальныхСумм.Скидка);
			ДанныеПечати.ВсегоНДСИсходная 		= ДанныеПечати.ВсегоНДСИсходная + СтруктураНачальныхСумм.НДС;
			ДанныеПечати.ВсегоНСПИсходная 		= ДанныеПечати.ВсегоНСПИсходная + СтруктураНачальныхСумм.НСП;
			ДанныеПечати.ВсегоСтоимостьИсходная = ДанныеПечати.ВсегоИсходная - ДанныеПечати.ВсегоНДСИсходная - ДанныеПечати.ВсегоНСПИсходная;
			
		Иначе	
			ДанныеПечати.СуммаСкидки 			= ДанныеПечати.СуммаСкидки + СтруктураНачальныхСумм.Скидка;	
			ДанныеПечати.НДССкидки 		 		= ДанныеПечати.НДССкидки + (СтрокаТаблицы.СуммаНДС - СтруктураНачальныхСумм.НДС);
			ДанныеПечати.НСПСкидки 		 		= ДанныеПечати.НСПСкидки + (СтрокаТаблицы.СуммаНСП - СтруктураНачальныхСумм.НСП);
			ДанныеПечати.СуммаСкидкиБезНалогов 	= ДанныеПечати.СуммаСкидки - ДанныеПечати.НДССкидки - ДанныеПечати.НСПСкидки;
			
			ДанныеПечати.Всего 			= ДанныеПечати.Всего + (СтрокаТаблицы.Всего - СтруктураНачальныхСумм.Скидка);
			ДанныеПечати.ВсегоНДС 		= ДанныеПечати.ВсегоНДС + СтруктураНачальныхСумм.НДС;
			ДанныеПечати.ВсегоНСП 		= ДанныеПечати.ВсегоНСП + СтруктураНачальныхСумм.НСП;
			ДанныеПечати.ВсегоСтоимость = ДанныеПечати.Всего - ДанныеПечати.ВсегоНДС - ДанныеПечати.ВсегоНСП;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Возвращает заголовок документа для печатной формы.
//
// Параметры:
//  Шапка - любая структура с полями:
//           Номер         - Строка или Число - номер документа;
//           Дата          - Дата - дата документа;
//           Представление - Строка - (необязательный) платформенное представление ссылки на документ.
//                                    Если параметр НазваниеДокумента не задан, то название документа будет вычисляться
//                                    из этого параметра.
//  НазваниеДокумента - Строка - название документа (например, "Счет на оплату").
//
// Возвращаемое значение:
//  Строка - заголовок документа.
//
Функция СформироватьЗаголовокДокумента(Шапка, Знач НазваниеДокумента = "")
	
	ДанныеДокумента = Новый Структура("Номер,Дата,Представление");
	ЗаполнитьЗначенияСвойств(ДанныеДокумента, Шапка);
	
	// Если название документа не передано, получим название по представлению документа.
	Если ПустаяСтрока(НазваниеДокумента) И ЗначениеЗаполнено(ДанныеДокумента.Представление) Тогда
		ПоложениеНомера = СтрНайти(ДанныеДокумента.Представление, ДанныеДокумента.Номер);
		Если ПоложениеНомера > 0 Тогда
			НазваниеДокумента = СокрЛП(Лев(ДанныеДокумента.Представление, ПоложениеНомера - 1));
		КонецЕсли;
	КонецЕсли;

	НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеДокумента.Номер);
	Возврат СтрШаблон(НСтр("ru = '%1 № %2 от %3'"),
		НазваниеДокумента, НомерНаПечать, Формат(ДанныеДокумента.Дата, "ДЛФ=DD"));
	
КонецФункции

Процедура ЗаполнитьЛоготипФаксимилеВОбластиМакета(ОбластьМакета, ДанныеОбъекта, ПодписиИФаксимиле, Ошибки)
	
	Для каждого ЭлементСоответствия Из ПодписиИФаксимиле Цикл
		
		ПлашкаПодписи = ПолучитьПлашкуПодписиБезопасно(ОбластьМакета, ЭлементСоответствия.Ключ, , Ошибки);
		Если ПлашкаПодписи = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеОбъекта[ЭлементСоответствия.Значение]) Тогда
			
			ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(ДанныеОбъекта[ЭлементСоответствия.Значение]);
			Если ЗначениеЗаполнено(ДвоичныеДанные) Тогда
				
				ПлашкаПодписи.Картинка = Новый Картинка(ДвоичныеДанные);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПлашкуПодписиБезопасно(ОбластьМакета, ИмяПлашки, ПредставлениеПодписи, Ошибки)
	
	ПлашкаПодписи = ОбластьМакета.Области.Найти(ИмяПлашки);
	Если ПлашкаПодписи = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru ='ВНИМАНИЕ! Нет места для картинки %1. Возможно используется пользовательский макет.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ?(ПустаяСтрока(ПредставлениеПодписи), ИмяПлашки, ПредставлениеПодписи));
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстСообщения, Неопределено);
		
	КонецЕсли;
	
	ПлашкаПодписи.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
	
	Возврат ПлашкаПодписи;
	
КонецФункции

#КонецОбласти

#КонецЕсли