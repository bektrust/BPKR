#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ЗаполненияДокумента

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.РеализацияТоваровУслуг - Данные заполнения документа.
//	
Процедура ЗаполнитьПоРеализацияТоваровУслуг(ДанныеЗаполнения) Экспорт
	
	Организация	= ДанныеЗаполнения.Организация;
	
	ДатаПоставки = ДанныеЗаполнения.Дата;
	ДатаОтчета = ДанныеЗаполнения.Дата;
	ДополнительнаяИнформация = ДанныеЗаполнения.Комментарий;

	Если ДанныеЗаполнения.Услуги.Количество() > 0 Тогда 
		ВидОперации = Перечисления.ВидыОперацийЭСФ.АктОбОказанииУслуг;
	Иначе 
		ВидОперации = Перечисления.ВидыОперацийЭСФ.ПоставкаТоваров;
	КонецЕсли;	
	
	// Сведения о контрагенте
	Контрагент = ДанныеЗаполнения.Контрагент;	
	ДоговорКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента;
	ВалютаДокумента = ДанныеЗаполнения.ВалютаДокумента;
	БанковскийСчетКонтрагента = ДанныеЗаполнения.Контрагент.ОсновнойБанковскийСчет;
	КодПоставкиНДС = ДанныеЗаполнения.КодПоставкиНДС;
	РеализацияСДоначислениемНДС = ДанныеЗаполнения.РеализацияСДоначислениемНДС;

	// Форма оплаты.
	Если ДанныеЗаполнения.БезналичныйРасчет Тогда 
		ФормаОплаты = Перечисления.ФормыОплаты.Безналичная;
	ИначеЕсли ДанныеЗаполнения.БезвозмезднаяПоставка Тогда	
		ФормаОплаты = Перечисления.ФормыОплаты.БезвозмезднаяПоставка;
	Иначе 
		ФормаОплаты = Перечисления.ФормыОплаты.Наличная;
	КонецЕсли;	
	
	Курс = ?(ДанныеЗаполнения.Курс = 0, 1, ДанныеЗаполнения.Курс);
	
	СтавкаНДС = ДанныеЗаполнения.СтавкаНДС; 
	
	ТочностьЦены = ДанныеЗаполнения.ТочностьЦены;

	Товары.Очистить();

	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Товары Цикл
		НоваяСтрокаТабличнойЧасти = Товары.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
		НоваяСтрокаТабличнойЧасти.ДокументОснование = ДанныеЗаполнения;
	КонецЦикла;		
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Услуги Цикл
		НоваяСтрокаТабличнойЧасти = Товары.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
		НоваяСтрокаТабличнойЧасти.ДокументОснование = ДанныеЗаполнения;
	КонецЦикла;	
		
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.ОС Цикл
		НоваяСтрокаТабличнойЧасти = Товары.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
		НоваяСтрокаТабличнойЧасти.Номенклатура = СтрокаТабличнойЧасти.ОсновноеСредство; 
		НоваяСтрокаТабличнойЧасти.ДокументОснование = ДанныеЗаполнения;
		НоваяСтрокаТабличнойЧасти.Количество = 1;
		НоваяСтрокаТабличнойЧасти.Цена = НоваяСтрокаТабличнойЧасти.Всего - НоваяСтрокаТабличнойЧасти.СуммаСкидки;
	КонецЦикла;	

	СуммаДокумента = Товары.Итог("Всего");	
	
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.РеализацияУслугПоПереработке - Данные заполнения документа.
//	
Процедура ЗаполнитьПоРеализацияУслугПоПереработке(ДанныеЗаполнения) Экспорт
	
	Организация	= ДанныеЗаполнения.Организация;
	
	ДатаПоставки = ДанныеЗаполнения.Дата;
	ДатаОтчета = ДанныеЗаполнения.Дата;

	ВидОперации = Перечисления.ВидыОперацийЭСФ.АктОбОказанииУслуг;
	
	// Сведения о контрагенте
	Контрагент = ДанныеЗаполнения.Контрагент;	
	ДоговорКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента;
	ВалютаДокумента = ДанныеЗаполнения.ВалютаДокумента;
	БанковскийСчетКонтрагента = ДанныеЗаполнения.Контрагент.ОсновнойБанковскийСчет;
	КодПоставкиНДС = ДанныеЗаполнения.КодПоставкиНДС;
	
	// Форма оплаты.
	Если ДанныеЗаполнения.БезналичныйРасчет Тогда 
		ФормаОплаты = Перечисления.ФормыОплаты.Безналичная;
	Иначе 
		ФормаОплаты = Перечисления.ФормыОплаты.Наличная;
	КонецЕсли;	
	
	Курс = ?(ДанныеЗаполнения.Курс = 0, 1, ДанныеЗаполнения.Курс);
	
	СтавкаНДС = ДанныеЗаполнения.СтавкаНДС; 
	
	ТочностьЦены = ДанныеЗаполнения.ТочностьЦены;

	Товары.Очистить();

	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Услуги Цикл
		НоваяСтрокаТабличнойЧасти = Товары.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
		НоваяСтрокаТабличнойЧасти.ДокументОснование = ДанныеЗаполнения;
	КонецЦикла;	

	СуммаДокумента = Товары.Итог("Всего");	
	
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.АктОбОказанииПроизводственныхУслуг - Данные заполнения документа.
//	
Процедура ЗаполнитьПоАктОбОказанииПроизводственныхУслуг(ДанныеЗаполнения) Экспорт
	
	Организация	= ДанныеЗаполнения.Организация;
	
	ДатаПоставки = ДанныеЗаполнения.Дата;
	ДатаОтчета = ДанныеЗаполнения.Дата;

	ВидОперации = Перечисления.ВидыОперацийЭСФ.АктОбОказанииУслуг;
	
	// Сведения о контрагенте
	Контрагент = ДанныеЗаполнения.Контрагент;	
	ДоговорКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента;
	ВалютаДокумента = ДанныеЗаполнения.ВалютаДокумента;
	БанковскийСчетКонтрагента = ДанныеЗаполнения.Контрагент.ОсновнойБанковскийСчет;
	КодПоставкиНДС = ДанныеЗаполнения.КодПоставкиНДС;
	
	// Форма оплаты.
	Если ДанныеЗаполнения.БезналичныйРасчет Тогда 
		ФормаОплаты = Перечисления.ФормыОплаты.Безналичная;
	Иначе 
		ФормаОплаты = Перечисления.ФормыОплаты.Наличная;
	КонецЕсли;	
	
	Курс = ?(ДанныеЗаполнения.Курс = 0, 1, ДанныеЗаполнения.Курс);
	
	СтавкаНДС = ДанныеЗаполнения.СтавкаНДС; 
	
	ТочностьЦены = ДанныеЗаполнения.ТочностьЦены;

	Товары.Очистить();

	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Услуги Цикл
		НоваяСтрокаТабличнойЧасти = Товары.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
		НоваяСтрокаТабличнойЧасти.ДокументОснование = ДанныеЗаполнения;
	КонецЦикла;	

	СуммаДокумента = Товары.Итог("Всего");	
	
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.ВозвратТоваровОтПокупателя - Данные заполнения документа.
//	
Процедура ЗаполнитьПоВозвратТоваровОтПокупателя(ДанныеЗаполнения) Экспорт
	Организация	= ДанныеЗаполнения.Организация;
	
	ДатаПоставки = ДанныеЗаполнения.Дата;
	ДатаОтчета = ДанныеЗаполнения.Дата;
	ДополнительнаяИнформация = ДанныеЗаполнения.Комментарий;
	
	Если ДанныеЗаполнения.Услуги.Количество() > 0 Тогда 
		ВидОперации = Перечисления.ВидыОперацийЭСФ.АктОбОказанииУслуг;
	Иначе 
		ВидОперации = Перечисления.ВидыОперацийЭСФ.ПоставкаТоваров;
	КонецЕсли;	
	
	// Сведения о контрагенте
	Контрагент = ДанныеЗаполнения.Контрагент;	
	ДоговорКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента;
	ВалютаДокумента = ДанныеЗаполнения.ВалютаДокумента;
	БанковскийСчетКонтрагента = ДанныеЗаполнения.Контрагент.ОсновнойБанковскийСчет;
	КодПоставкиНДС = ДанныеЗаполнения.КодПоставкиНДС;
	РеализацияСДоначислениемНДС = ДанныеЗаполнения.РеализацияСДоначислениемНДС;

	// Форма оплаты.
	Если ДанныеЗаполнения.БезналичныйРасчет Тогда 
		ФормаОплаты = Перечисления.ФормыОплаты.Безналичная;
	ИначеЕсли ДанныеЗаполнения.БезвозмезднаяПоставка Тогда	
		ФормаОплаты = Перечисления.ФормыОплаты.БезвозмезднаяПоставка;
	Иначе 
		ФормаОплаты = Перечисления.ФормыОплаты.Наличная;
	КонецЕсли;	
	
	// Только для возврата.
	// Все СФ выписанные до 1 июля 2020 оформляются с указанием серии.
	// Все СФ после заполняются по данным ЭСФ.
	ЭтоКорректировочныйСФ = Истина;
	Если ЗначениеЗаполнено(ДанныеЗаполнения.КорректировкаДатаСФ)
		И ДанныеЗаполнения.КорректировкаДатаСФ < Дата(2020, 7, 1) Тогда 
		СерияКорректируемогоСФ = ДанныеЗаполнения.КорректировкаСерияБланкаСФ;
		НомерКорректируемогоЭСФ = ДанныеЗаполнения.КорректировкаНомерБланкаСФ;
		ДатаКорректируемогоЭСФ = ДанныеЗаполнения.КорректировкаДатаСФ;
	ИначеЕсли ЗначениеЗаполнено(ДанныеЗаполнения.ДокументОснование) Тогда 	
		СведенияОбЭСФ = ЭСФСервер.СведенияОбЭСФПоДокументуОснованию(Организация, ДанныеЗаполнения.ДокументОснование);
		ДокументКорректировочныйЭСФ = СведенияОбЭСФ.Ссылка;
		НомерКорректируемогоЭСФ = СведенияОбЭСФ.НомерЭСФ;
		ДатаКорректируемогоЭСФ = СведенияОбЭСФ.Дата;
	КонецЕсли;	
	
	// Корректировка по статье 266 НК КР (полный возврат)(10), Корректировка по статье 266 НК КР (частичный возврат)(30)
	КодПричиныКорректировки = 10;
	
	Курс = ?(ДанныеЗаполнения.Курс = 0, 1, ДанныеЗаполнения.Курс);
	
	СтавкаНДС = ДанныеЗаполнения.СтавкаНДС; 
	
	ТочностьЦены = ДанныеЗаполнения.ТочностьЦены;

	Товары.Очистить();
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Товары Цикл
		НоваяСтрокаТабличнойЧасти = Товары.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
		НоваяСтрокаТабличнойЧасти.ДокументОснование = ДанныеЗаполнения;
	КонецЦикла;	
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Услуги Цикл
		НоваяСтрокаТабличнойЧасти = Товары.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
		НоваяСтрокаТабличнойЧасти.ДокументОснование = ДанныеЗаполнения;
	КонецЦикла;	
		
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.ОС Цикл
		НоваяСтрокаТабличнойЧасти = Товары.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
		НоваяСтрокаТабличнойЧасти.Номенклатура = СтрокаТабличнойЧасти.ОсновноеСредство;
		НоваяСтрокаТабличнойЧасти.ДокументОснование = ДанныеЗаполнения;
	КонецЦикла;	

	СуммаДокумента = Товары.Итог("Всего");	
	
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.РеализацияТоваровУслуг - Данные заполнения документа.
//	
Процедура ЗаполнитьПоКорректировкеСтоимостиРеализации(ДанныеЗаполнения) Экспорт
	
	Организация	= ДанныеЗаполнения.Организация;
	
	ДатаПоставки = ДанныеЗаполнения.Дата;
	ДатаОтчета = ДанныеЗаполнения.Дата;
	ДополнительнаяИнформация = ДанныеЗаполнения.Комментарий;

	Если ДанныеЗаполнения.Услуги.Количество() > 0 Тогда 
		ВидОперации = Перечисления.ВидыОперацийЭСФ.АктОбОказанииУслуг;
	Иначе 
		ВидОперации = Перечисления.ВидыОперацийЭСФ.ПоставкаТоваров;
	КонецЕсли;	
	
	// Сведения о контрагенте
	Контрагент = ДанныеЗаполнения.Контрагент;	
	ДоговорКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента;
	ВалютаДокумента = ДанныеЗаполнения.ВалютаДокумента;
	БанковскийСчетКонтрагента = ДанныеЗаполнения.Контрагент.ОсновнойБанковскийСчет;
	КодПоставкиНДС = ДанныеЗаполнения.КодПоставкиНДС;
	
	// Форма оплаты.
	Если ДанныеЗаполнения.БезналичныйРасчет Тогда 
		ФормаОплаты = Перечисления.ФормыОплаты.Безналичная;
	Иначе 
		ФормаОплаты = Перечисления.ФормыОплаты.Наличная;
	КонецЕсли;	
	
	Курс = ?(ДанныеЗаполнения.Курс = 0, 1, ДанныеЗаполнения.Курс);	
	СтавкаНДС = ДанныеЗаполнения.СтавкаНДС; 	
	ТочностьЦены = ДанныеЗаполнения.ТочностьЦены;

	ЭтоКорректировочныйСФ = Истина;
	КодПричиныКорректировки = 30;
	
	СведенияОбЭСФ = ЭСФСервер.СведенияОбЭСФПоДокументуОснованию(Организация, ДанныеЗаполнения.ДокументОснование);
	ДокументКорректировочныйЭСФ = СведенияОбЭСФ.Ссылка;
	НомерКорректируемогоЭСФ = ДокументКорректировочныйЭСФ.НомерЭСФ;
	ДатаКорректируемогоЭСФ = ДокументКорректировочныйЭСФ.ДатаПоставки;
	
	Товары.Очистить();

	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Товары Цикл
		НоваяСтрокаТабличнойЧасти = Товары.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
		НоваяСтрокаТабличнойЧасти.ДокументОснование = ДанныеЗаполнения;
	КонецЦикла;		
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Услуги Цикл
		НоваяСтрокаТабличнойЧасти = Товары.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
		НоваяСтрокаТабличнойЧасти.ДокументОснование = ДанныеЗаполнения;
	КонецЦикла;	
		
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.ОС Цикл
		НоваяСтрокаТабличнойЧасти = Товары.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
		НоваяСтрокаТабличнойЧасти.Номенклатура = СтрокаТабличнойЧасти.ОсновноеСредство; 
		НоваяСтрокаТабличнойЧасти.ДокументОснование = ДанныеЗаполнения;
		НоваяСтрокаТабличнойЧасти.Количество = 1;
		НоваяСтрокаТабличнойЧасти.Цена = НоваяСтрокаТабличнойЧасти.Всего - НоваяСтрокаТабличнойЧасти.СуммаСкидки;
	КонецЦикла;	

	СуммаДокумента = Товары.Итог("Всего");	
	
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.РеализацияТоваровУслуг - Данные заполнения документа.
//	
Процедура ЗаполнитьПоПоступлениюТоваровУслуг(ДанныеЗаполнения) Экспорт
	
	Организация	= ДанныеЗаполнения.Организация;
	
	ДатаПоставки = ДанныеЗаполнения.Дата;
	ДатаОтчета = ДанныеЗаполнения.Дата;
	ДополнительнаяИнформация = ДанныеЗаполнения.Комментарий;
	ВидОперации = Перечисления.ВидыОперацийЭСФ.АктОбОказанииУслуг;	
	
	// Сведения о контрагенте
	Контрагент = ДанныеЗаполнения.Контрагент;	
	ДоговорКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента;
	ВалютаДокумента = ДанныеЗаполнения.ВалютаДокумента;
	БанковскийСчетКонтрагента = ДанныеЗаполнения.Контрагент.ОсновнойБанковскийСчет;
	КодПоставкиНДС = ДанныеЗаполнения.ДоговорКонтрагента.КодПоставкиНДС;
	ПоступлениеОтНерезидента = Истина;

	// Форма оплаты.
	Если ДанныеЗаполнения.БезналичныйРасчет Тогда 
		ФормаОплаты = Перечисления.ФормыОплаты.Безналичная;
	Иначе 
		ФормаОплаты = Перечисления.ФормыОплаты.Наличная;
	КонецЕсли;	
	
	Курс = ?(ДанныеЗаполнения.Курс = 0, 1, ДанныеЗаполнения.Курс);
	
	ТочностьЦены = ДанныеЗаполнения.ТочностьЦены;

	Товары.Очистить();

	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Услуги Цикл
		НоваяСтрокаТабличнойЧасти = Товары.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
		НоваяСтрокаТабличнойЧасти.ДокументОснование = ДанныеЗаполнения;
		НоваяСтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.СуммаНДС / Курс * ДанныеЗаполнения.Кратность;
		НоваяСтрокаТабличнойЧасти.СуммаНСП = СтрокаТабличнойЧасти.СуммаНСП / Курс * ДанныеЗаполнения.Кратность;
		НоваяСтрокаТабличнойЧасти.СуммаНДСВВалютеРеглУчета = СтрокаТабличнойЧасти.СуммаНДС;
		НоваяСтрокаТабличнойЧасти.СуммаНСПВВалютеРеглУчета = СтрокаТабличнойЧасти.СуммаНСП;
		НоваяСтрокаТабличнойЧасти.ВсегоВВалютеРеглУчета = СтрокаТабличнойЧасти.БазаНДС;
	КонецЦикла;	
		
	СуммаДокумента = Товары.Итог("Всего");	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) Экспорт 
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.РеализацияТоваровУслуг")] = "ЗаполнитьПоРеализацияТоваровУслуг";
	СтратегияЗаполнения[Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг")] = "ЗаполнитьПоАктОбОказанииПроизводственныхУслуг";
	СтратегияЗаполнения[Тип("ДокументСсылка.РеализацияУслугПоПереработке")] = "ЗаполнитьПоРеализацияУслугПоПереработке";
	СтратегияЗаполнения[Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")] = "ЗаполнитьПоВозвратТоваровОтПокупателя";
	СтратегияЗаполнения[Тип("ДокументСсылка.КорректировкаСтоимостиРеализации")] = "ЗаполнитьПоКорректировкеСтоимостиРеализации";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПоступлениеТоваровУслуг")] = "ЗаполнитьПоПоступлениюТоваровУслуг";
	
	ЗаполнениеОбъектовБП.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
	Если БанковскийСчет.Пустая() Тогда 
		БанковскийСчет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьОсновнойБанковскийСчетОрганизации(Организация);
	КонецЕсли;	
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить("Товары");
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если НЕ ЭтоКорректировочныйСФ Тогда
		МассивНепроверяемыхРеквизитов.Добавить("КодПричиныКорректировки");
		МассивНепроверяемыхРеквизитов.Добавить("ДокументКорректировочныйЭСФ");
		МассивНепроверяемыхРеквизитов.Добавить("НомерКорректируемогоЭСФ");
		МассивНепроверяемыхРеквизитов.Добавить("ДатаКорректируемогоЭСФ");
	Иначе 
		Если ВидКорректировки = 1 
			ИЛИ ВидКорректировки = 2 Тогда 
			МассивНепроверяемыхРеквизитов.Добавить("ДокументКорректировочныйЭСФ");
		КонецЕсли;	
	КонецЕсли;	
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
КонецПроцедуры

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ДокументКорректировочныйЭСФ) Тогда 
		СерияКорректируемогоСФ = "";
		НомерКорректируемогоЭСФ = ДокументКорректировочныйЭСФ.НомерЭСФ;
		ДатаКорректируемогоЭСФ = ДокументКорректировочныйЭСФ.ДатаПоставки;
	КонецЕсли;	
	
	СуммаДокумента = Товары.Итог("Всего");
		
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ИнициализироватьДанные(Отказ, РежимПроведения);
	
	ОтразитьДвижения(Отказ, РежимПроведения);
	
	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииОбработкаПроведения

// Процедура инициализирует данные документа
// и подготавливает таблицы для движения в регистры
//
Процедура ИнициализироватьДанные(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.ЭлектронныйСчетФактураВыписанный.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
КонецПроцедуры
	
// Процедура заполняет регистры данными
//
Процедура ОтразитьДвижения(Отказ, РежимПроведения)

	БухгалтерскийУчетСервер.ОтразитьСведенияОбЭСФ(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьСчетаФактурыВыписанные(ДополнительныеСвойства, Движения, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли