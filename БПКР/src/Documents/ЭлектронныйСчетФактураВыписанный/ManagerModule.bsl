#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Возвращает данные о файле xml.
// Параметры:
//	Параметры - Структура - данные для заполнения. 
//		* МассивСсылок - Массив - массив ссылок документов "ЭлектронныйСчетФактураВыписанный"
//		* УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор.
//
// Возвращаемое значение:
//	Структура - реквизиты юридического лица.
//		* ИмяФайла - Строка - наименование сформированного файла.
//		* АдресВременногоХранилища - Строка - адерс в хранилище.
//
Функция ФормированиеФайлаXML(Параметры) Экспорт
	
	Реквизиты = РаботаСКонтрагентамиБП.РеквизитыЭлектроннойСФ();
	
	Если ЗначениеЗаполнено(Реквизиты.ОписаниеОшибки) Тогда 
		ВызватьИсключение Реквизиты.ОписаниеОшибки;
	КонецЕсли;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ИмяФайла", "");
	СтруктураДанных.Вставить("АдресВременногоХранилища", "");
			
	Дата = Формат(ТекущаяДатаСеанса(), "ДФ=yyyy-MM-dd-hh-mm-ss");	
	ШаблонИмениФайла = СтрШаблон("invoices %1", Дата);
	ИмяФайла = ШаблонИмениФайла + ".xml";
	
	ОбъектXDTO = СоздатьОбъектXDTO(Реквизиты, "receipts");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектронныйСчетФактураВыписанный.Ссылка КАК Ссылка,
		|	ЭлектронныйСчетФактураВыписанный.Организация КАК Организация,
		|	ЭлектронныйСчетФактураВыписанный.Организация.ИНН КАК ОрганизацияИНН,
		|	ЭлектронныйСчетФактураВыписанный.Организация.ЭтоФилиал КАК ОрганизацияЭтоФилиал,
		|	ЭлектронныйСчетФактураВыписанный.ДоговорКонтрагента.ДатаДоговора КАК ДатаДоговора,
		|	ЭлектронныйСчетФактураВыписанный.ДоговорКонтрагента.Наименование КАК Договор,
		|	ЭлектронныйСчетФактураВыписанный.Контрагент.Наименование КАК КонтрагентНаименование,
		|	ЭлектронныйСчетФактураВыписанный.Контрагент.НаименованиеПолное КАК КонтрагентНаименованиеПолное,
		|	ЭлектронныйСчетФактураВыписанный.Контрагент.ПризнакСтраны КАК ПризнакСтраны,
		|	ЭлектронныйСчетФактураВыписанный.ДатаПоставки КАК ДатаПоставки,
		|	ЕСТЬNULL(ЭлектронныйСчетФактураВыписанный.КодПоставкиНДС.ВидПоставки.Код, НЕОПРЕДЕЛЕНО) КАК ВидПоставкиНДСКод,
		|	ЕСТЬNULL(ЭлектронныйСчетФактураВыписанный.КодПоставкиНДС.Код, НЕОПРЕДЕЛЕНО) КАК КодПоставкиНДСКод,
		|	ЭлектронныйСчетФактураВыписанный.ДоговорКонтрагента.СуммаВключаетНалоги КАК СуммаВключаетНалоги,
		|	ЕСТЬNULL(ЭлектронныйСчетФактураВыписанный.Контрагент.ИНН, НЕОПРЕДЕЛЕНО) КАК КонтрагентИНН,
		|	ЭлектронныйСчетФактураВыписанный.ВалютаДокумента.Код КАК ВалютаКод,
		|	ВЫБОР
		|		КОГДА ЭлектронныйСчетФактураВыписанный.ВалютаДокумента = &ВалютаРегламентированногоУчета
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЭтоВалютныйСФ,
		|	ЭлектронныйСчетФактураВыписанный.Контрагент.СтранаРезидентства.Код КАК КонтрагентСтранаРезидентстваКод,
		|	ЭлектронныйСчетФактураВыписанный.Курс КАК Курс,
		|	ЕСТЬNULL(ЭлектронныйСчетФактураВыписанный.БанковскийСчет.НомерСчета, """") КАК БанковскийСчетПоставщикаНомерСчета,
		|	ЕСТЬNULL(ЭлектронныйСчетФактураВыписанный.БанковскийСчетКонтрагента.НомерСчета, """") КАК БанковскийСчетКонтрагентаНомерСчета,
		|	ЭлектронныйСчетФактураВыписанный.ФормаОплаты КАК ФормаОплаты,
		|	ЭлектронныйСчетФактураВыписанный.ВидОперации КАК ВидОперации,
		|	ЭлектронныйСчетФактураВыписанный.Номер КАК Номер,
		|	ЭлектронныйСчетФактураВыписанный.ЭтоКорректировочныйСФ КАК ЭтоКорректировочныйСФ,
		|	ЭлектронныйСчетФактураВыписанный.НомерКорректируемогоЭСФ КАК НомерКорректируемогоЭСФ,
		|	ЭлектронныйСчетФактураВыписанный.ДатаКорректируемогоЭСФ КАК ДатаКорректируемогоЭСФ,
		|	ЭлектронныйСчетФактураВыписанный.СерияКорректируемогоСФ КАК СерияКорректируемогоСФ,
		|	ЭлектронныйСчетФактураВыписанный.КодПричиныКорректировки КАК КодПричиныКорректировки,
		|	ЕСТЬNULL(ЭлектронныйСчетФактураВыписанный.ДоговорКонтрагента.НомерДоговора, НЕОПРЕДЕЛЕНО) КАК НомерДоговора,
		|	ЭлектронныйСчетФактураВыписанный.СтавкаНДС КАК СтавкаНДС,
		|	ЭлектронныйСчетФактураВыписанный.Комментарий КАК Комментарий,
		|	ЭлектронныйСчетФактураВыписанный.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
		|	ЭлектронныйСчетФактураВыписанный.ПоступлениеОтНерезидента КАК ПоступлениеОтНерезидента,
		|	ЭлектронныйСчетФактураВыписанный.Товары.(
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура КАК Номенклатура,
		|		ВЫРАЗИТЬ(ЭлектронныйСчетФактураВыписанный.Товары.Номенклатура.НаименованиеПолное КАК СТРОКА(150)) КАК НоменклатураНаименованиеПолное,
		|		Количество КАК Количество,
		|		Цена КАК Цена,
		|		СуммаНДС КАК СуммаНДС,
		|		СтавкаНСП КАК СтавкаНСП,
		|		СуммаНСП КАК СуммаНСП,
		|		СуммаСкидки КАК СуммаСкидки,
		|		Всего КАК Всего,
		|		СуммаНДСВВалютеРеглУчета КАК СуммаНДСВВалютеРеглУчета,
		|		СуммаНСПВВалютеРеглУчета КАК СуммаНСПВВалютеРеглУчета,
		|		ВсегоВВалютеРеглУчета КАК ВсегоВВалютеРеглУчета
		|	) КАК Товары
		|ИЗ
		|	Документ.ЭлектронныйСчетФактураВыписанный КАК ЭлектронныйСчетФактураВыписанный
		|ГДЕ
		|	ЭлектронныйСчетФактураВыписанный.Ссылка В(&МассивСсылок)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";	
	Запрос.УстановитьПараметр("МассивСсылок", Параметры.МассивСсылок);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Отказ = Ложь;
	
	ВыборкаДокументы = РезультатЗапроса.Выбрать();
	Пока ВыборкаДокументы.Следующий() Цикл	
		
		// Проверка
		Если НЕ ЗначениеЗаполнено(ВыборкаДокументы.ВидПоставкиНДСКод) 
			Или НЕ ЗначениеЗаполнено(ВыборкаДокументы.КодПоставкиНДСКод) Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'В коде поставки ндс не заполнены обязательные поля.'"),,,, Отказ);
		КонецЕсли;	
			
		Если НЕ ЗначениеЗаполнено(ВыборкаДокументы.КонтрагентИНН) Тогда
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'У контрагента %1 не заполнен ИНН.'"), ВыборкаДокументы.КонтрагентНаименование),,,, Отказ);
		КонецЕсли;
		
		Если Отказ Тогда 
			Продолжить;
		КонецЕсли;	
		
		Если ВыборкаДокументы.ФормаОплаты = Перечисления.ФормыОплаты.БезвозмезднаяПоставка Тогда
			КодФормыОплаты = 30;	
		ИначеЕсли ВыборкаДокументы.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда
			КодФормыОплаты = 20;
		Иначе // Наличная
			КодФормыОплаты = 10;
		КонецЕсли;	
		
		ОбъектXDTOreceipt = СоздатьОбъектXDTO(Реквизиты, "receipt");
		
		ОбъектXDTOreceipt.exchangeCode 			= Строка(ВыборкаДокументы.Ссылка.УникальныйИдентификатор()); // Уникальный идентификатор счет-фактуры
		ОбъектXDTOreceipt.receiptTypeCode 		= ?(ВыборкаДокументы.ВидОперации = Перечисления.ВидыОперацийЭСФ.АктОбОказанииУслуг, 20, 10); // Признак услуги или товара
		ОбъектXDTOreceipt.createdDate 			= ВыборкаДокументы.ДатаПоставки;// Дата создания
		ОбъектXDTOreceipt.ownedCrmReceiptCode 	= ВыборкаДокументы.Номер; // Номер документа
		
		Если ВыборкаДокументы.ОрганизацияЭтоФилиал Тогда 
			ОбъектXDTOreceipt.sellerBranchPin = ВыборкаДокументы.ОрганизацияИНН;
		КонецЕсли;	
		
		Если ВыборкаДокументы.ЭтоКорректировочныйСФ Тогда
			ОбъектXDTOreceipt.correctedReceiptCode 			= ВыборкаДокументы.НомерКорректируемогоЭСФ; // Номер корректируемой ЭСФ
			ОбъектXDTOreceipt.correctionSeries 				= ВыборкаДокументы.СерияКорректируемогоСФ; // Серия корректируемой СФ
			ОбъектXDTOreceipt.correctedReceiptCreationDate 	= ВыборкаДокументы.ДатаКорректируемогоЭСФ; // Дата оформления корректируемого ЭСФ
			ОбъектXDTOreceipt.correctionReasonCode 			= ВыборкаДокументы.КодПричиныКорректировки; // Код причины корректировочной ЭСФ
		КонецЕсли;
		
		ОбъектXDTOreceipt.bankAccount 				= ВыборкаДокументы.БанковскийСчетПоставщикаНомерСчета; // Банковский счет организации
		ОбъектXDTOreceipt.contractorPin 			= ВыборкаДокументы.КонтрагентИНН; // ИНН контрагента
		
		ОбъектXDTOreceipt.contractorDepartmentName 	= ""; // Подразделение контрагента
		
		ОбъектXDTOreceipt.contractorBankAccount 	= ВыборкаДокументы.БанковскийСчетКонтрагентаНомерСчета; // Банковский счет контрагента
		ОбъектXDTOreceipt.deliveryContractNumber 	= ВыборкаДокументы.НомерДоговора; // Номер договора
		ОбъектXDTOreceipt.deliveryContractDate 		= ?(ЗначениеЗаполнено(ВыборкаДокументы.ДатаДоговора), ВыборкаДокументы.ДатаДоговора, ""); // Дата договора (пустое значение "")
		ОбъектXDTOreceipt.paymentTypeCode 			= КодФормыОплаты; // Код формы оплаты
		ОбъектXDTOreceipt.invoiceDeliveryTypeCode 	= ВыборкаДокументы.КодПоставкиНДСКод; // Код кода поставки НДС
		ОбъектXDTOreceipt.vatDeliveryTypeCode 		= ВыборкаДокументы.ВидПоставкиНДСКод; // Код вида поставки НДС
		ОбъектXDTOreceipt.currencyCode 				= ВыборкаДокументы.ВалютаКод; // Код валюты
		ОбъектXDTOreceipt.exchangeRate 				= ВыборкаДокументы.Курс; // Курс
		ОбъектXDTOreceipt.contractorCitizenshipCode = ВыборкаДокументы.КонтрагентСтранаРезидентстваКод; // Код страны
		ОбъектXDTOreceipt.isPriceWithoutTaxes		= НЕ ВыборкаДокументы.СуммаВключаетНалоги; // Цена без налогов
		ОбъектXDTOreceipt.isResident				= ВыборкаДокументы.ПризнакСтраны = Перечисления.ПризнакиСтраны.КР; // Резидент или нет
		// Доп.поля для не резидента.
		Если НЕ ВыборкаДокументы.ПризнакСтраны = Перечисления.ПризнакиСтраны.КР Тогда 
			ОбъектXDTOreceipt.foreignName 			= ВыборкаДокументы.КонтрагентНаименованиеПолное; // Код страны
		КонецЕсли;	
		ОбъектXDTOreceipt.note 						= ВыборкаДокументы.ДополнительнаяИнформация; // Комментарий
		
		//Код	Наименование	Ставка (%)
		//10	Стандартная 12%	12
		//20	Нулевая 0%		0
		//90	Освобожденная	0
		//100	Необлагаемая	0
		КодСтавкиНДС = "";
		Если ВыборкаДокументы.СтавкаНДС = Справочники.СтавкиНДС.Стандарт Тогда
			КодСтавкиНДС = 10;
		ИначеЕсли ВыборкаДокументы.СтавкаНДС = Справочники.СтавкиНДС.Нулевая Тогда
			КодСтавкиНДС = 20;
		ИначеЕсли ВыборкаДокументы.СтавкаНДС = Справочники.СтавкиНДС.Освобожденная Тогда 
			КодСтавкиНДС = 90;
		ИначеЕсли ВыборкаДокументы.СтавкаНДС = Справочники.СтавкиНДС.Необлагаемая Тогда	
			КодСтавкиНДС = 100;
		КонецЕсли;	
		ОбъектXDTOreceipt.vatCode = КодСтавкиНДС;
		ОбъектXDTOreceipt.isIndustry = Ложь; // Признак: Отраслевой
		ОбъектXDTOreceipt.markGoods = Ложь; // Признак: Товар, подлежащий прослеживаемости
		
		// 10 - реализация, 20 - приобретение, 30 - корректировка ЭСФ, 40 - корректировка бумажного сф
		Если ЗначениеЗаполнено(ВыборкаДокументы.СерияКорректируемогоСФ) Тогда 
			ОбъектXDTOreceipt.type = 40;
		Иначе 	
			ОбъектXDTOreceipt.type = ?(ВыборкаДокументы.ЭтоКорректировочныйСФ, 30, 10);
		КонецЕсли;	
		
		ТаблицаНомеклатура = ВыборкаДокументы.Товары.Выгрузить();
		
		// Валютные суммы.
		Если ВыборкаДокументы.ЭтоВалютныйСФ Тогда
			ИтогоСуммаНДС = ТаблицаНомеклатура.Итог("СуммаНДС");
			ИтогоСуммаНСП = ТаблицаНомеклатура.Итог("СуммаНСП");
			ИтогоВсего = ТаблицаНомеклатура.Итог("Всего");
			
			Если ВыборкаДокументы.ПоступлениеОтНерезидента Тогда
				ОбъектXDTOreceipt.costWithoutTaxes = ИтогоВсего; // Стоимость товаров/услуг без НДС и НсП в иностранной валюте
				ОбъектXDTOreceipt.totalCost = ИтогоВсего + ИтогоСуммаНДС + ИтогоСуммаНСП; // Общая стоимость товаров/услуг в иностранной валюте	
			Иначе	
				ОбъектXDTOreceipt.costWithoutTaxes = ИтогоВсего - ИтогоСуммаНДС - ИтогоСуммаНСП; // Стоимость товаров/услуг без НДС и НсП в иностранной валюте
				ОбъектXDTOreceipt.totalCost = ИтогоВсего; // Общая стоимость товаров/услуг в иностранной валюте
			КонецЕсли;	
		КонецЕсли;	
		
		// Заполнение по табличной части.
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Организация", ВыборкаДокументы.Организация); 
		ДополнительныеПараметры.Вставить("ФормаОплаты", ВыборкаДокументы.ФормаОплаты); 
		ДополнительныеПараметры.Вставить("ЭтоКорректировочныйСФ", ВыборкаДокументы.ЭтоКорректировочныйСФ); 
		ДополнительныеПараметры.Вставить("ЭтоВалютныйСФ", ВыборкаДокументы.ЭтоВалютныйСФ); 
		ДополнительныеПараметры.Вставить("СуммаВключаетНалоги", ВыборкаДокументы.СуммаВключаетНалоги);
		ДополнительныеПараметры.Вставить("Курс", ВыборкаДокументы.Курс);
		ДополнительныеПараметры.Вставить("Корректировка_ИзменениеЦены", ВыборкаДокументы.КодПричиныКорректировки = 30);
		ОбъектXDTOgoods = goods(Реквизиты, ТаблицаНомеклатура, ДополнительныеПараметры);	
		ОбъектXDTOreceipt.goods.Добавить(ОбъектXDTOgoods); // Запись данных о товарах
		
		ОбъектXDTO.receipt.Добавить(ОбъектXDTOreceipt);	
	КонецЦикла;	
	
	Если Отказ Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	// Создание файла.
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьXML = Новый ЗаписьXML;
	ПараметрыЗаписиXML = Новый ПараметрыЗаписиXML("UTF-8", "1.0", Ложь);	
	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, ПараметрыЗаписиXML);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	Реквизиты.Прокси.ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
	ЗаписьXML.Закрыть();
	
	// Удаление лишнего текста из xml файла
	ТекстДокумент = Новый ТекстовыйДокумент;
	ТекстДокумент.Прочитать(ИмяВременногоФайла);
	ТекстФайла = ТекстДокумент.ПолучитьТекст();
	ТекстФайла = СтрЗаменить(
		ТекстФайла,
		" xmlns=""http://ws.electronicinvoice.company1c.com"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""",
		"");
	ТекстДокумент.УстановитьТекст(ТекстФайла);	
	ТекстДокумент.Записать(ИмяВременногоФайла);	
	
	Двоичное = Новый ДвоичныеДанные(ИмяВременногоФайла);
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(Двоичное, Параметры.УникальныйИдентификатор);
	
	// Удаление временного файла
	ФайловаяСистема.УдалитьВременныйФайл(ИмяВременногоФайла);
	
	СтруктураДанных.ИмяФайла = ИмяФайла;
	СтруктураДанных.АдресВременногоХранилища = АдресВременногоХранилища;
	
	Возврат СтруктураДанных;
КонецФункции // ФормированиеФайла()

#КонецОбласти

#Область ПроцедурыПроведенияДокумента

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСведенияОбЭСФ(ДокументСсылка, СтруктураДополнительныеСвойства) 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВременнаяТаблицаШапка.Дата КАК Дата,
		|	ВременнаяТаблицаШапка.ДатаПоставки КАК ДатаПоставки,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.НомерЭСФ КАК НомерЭСФ,
		|	ВременнаяТаблицаШапка.НомерКорректируемогоЭСФ КАК НомерКорректируемогоЭСФ,
		|	ВременнаяТаблицаШапка.СерияКорректируемогоСФ КАК СерияКорректируемогоСФ,
		|	ВременнаяТаблицаШапка.ДатаКорректируемогоЭСФ КАК ДатаКорректируемогоЭСФ,
		//|	ВременнаяТаблицаШапка.Ссылка КАК ДокументСсылка,
		|	ВременнаяТаблицаТовары.ДокументОснование КАК ДокументОснование
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ПО (ИСТИНА)";
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСведенияОбЭСФ", РезультатЗапроса.Выгрузить());
КонецПроцедуры     

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСчетаФактурыВыписанные(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаШапка.Дата КАК ДатаСФ,
	|	ВременнаяТаблицаШапка.ДатаПоставки КАК ДатаПоставки,
	|	ВременнаяТаблицаШапка.ДатаОтчета КАК ДатаОтчета,
	|	ВременнаяТаблицаШапка.Организация КАК Организация,
	|	ВременнаяТаблицаШапка.Ссылка КАК Документ,
	|	ВременнаяТаблицаШапка.НомерЭСФ КАК НомерБланкаСФ,
	|	ВременнаяТаблицаШапка.СерияКорректируемогоСФ КАК КорСерияБланкаСФ,
	|	ВременнаяТаблицаШапка.НомерКорректируемогоЭСФ КАК КорНомерБланкаСФ,
	|	ВременнаяТаблицаШапка.Контрагент.ПризнакСтраны КАК ПризнакСтраны,
	|	ВременнаяТаблицаШапка.Контрагент КАК Контрагент,
	|	ВременнаяТаблицаШапка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВременнаяТаблицаШапка.КодПоставкиНДС КАК КодПоставкиНДС,
	|	ВременнаяТаблицаШапка.СтавкаНДС КАК СтавкаНДС,
	|	ВременнаяТаблицаШапка.ПоступлениеОтНерезидента КАК ПоступлениеОтНерезидента,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ПоступлениеОтНерезидента
	|			ТОГДА СУММА((ВременнаяТаблицаТовары.ВсегоВВалютеРеглУчета - ВременнаяТаблицаТовары.СуммаСкидки * ВременнаяТаблицаШапка.Курс) * ВЫБОР
	|					КОГДА ВременнаяТаблицаШапка.ЭтоКорректировочныйСФ
	|						И НЕ ВременнаяТаблицаШапка.КодПричиныКорректировки = 30
	|						ТОГДА -1
	|					ИНАЧЕ 1
	|				КОНЕЦ)
	|		ИНАЧЕ СУММА((ВременнаяТаблицаТовары.ВсегоВВалютеРеглУчета - ВременнаяТаблицаТовары.СуммаСкидки * ВременнаяТаблицаШапка.Курс - ВременнаяТаблицаТовары.СуммаНДСВВалютеРеглУчета - ВременнаяТаблицаТовары.СуммаНСПВВалютеРеглУчета) * ВЫБОР
	|					КОГДА ВременнаяТаблицаШапка.ЭтоКорректировочныйСФ
	|						И НЕ ВременнаяТаблицаШапка.КодПричиныКорректировки = 30
	|						ТОГДА -1
	|					ИНАЧЕ 1
	|				КОНЕЦ)
	|	КОНЕЦ КАК Сумма,
	|	СУММА(ВременнаяТаблицаТовары.СуммаНДСВВалютеРеглУчета * ВЫБОР
	|			КОГДА ВременнаяТаблицаШапка.ЭтоКорректировочныйСФ
	|				И НЕ ВременнаяТаблицаШапка.КодПричиныКорректировки = 30
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаНДС,
	|	СУММА(ВременнаяТаблицаТовары.СуммаНСПВВалютеРеглУчета * ВЫБОР
	|			КОГДА ВременнаяТаблицаШапка.ЭтоКорректировочныйСФ
	|				И НЕ ВременнаяТаблицаШапка.КодПричиныКорректировки = 30
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаНеоблагаемая,
	|	СУММА(ВременнаяТаблицаТовары.СуммаДоначисленияВВалютеРеглУчета * ВЫБОР
	|			КОГДА ВременнаяТаблицаШапка.ЭтоКорректировочныйСФ
	|				И НЕ ВременнаяТаблицаШапка.КодПричиныКорректировки = 30
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаДоначисления,
	|	СУММА(ВременнаяТаблицаТовары.СуммаДоначисленияНДСВВалютеРеглУчета * ВЫБОР
	|			КОГДА ВременнаяТаблицаШапка.ЭтоКорректировочныйСФ
	|				И НЕ ВременнаяТаблицаШапка.КодПричиныКорректировки = 30
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаДоначисленияНДС
	|ИЗ
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ПО (ИСТИНА)
	|ГДЕ
	|	(НЕ ВременнаяТаблицаТовары.ВсегоВВалютеРеглУчета = 0
	|			ИЛИ НЕ ВременнаяТаблицаТовары.СуммаДоначисленияВВалютеРеглУчета = 0)
	|	И НЕ ВременнаяТаблицаШапка.НомерЭСФ = """"
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаШапка.ДатаПоставки,
	|	ВременнаяТаблицаШапка.ДатаОтчета,
	|	ВременнаяТаблицаШапка.Организация,
	|	ВременнаяТаблицаШапка.Ссылка,
	|	ВременнаяТаблицаШапка.НомерЭСФ,
	|	ВременнаяТаблицаШапка.СерияКорректируемогоСФ,
	|	ВременнаяТаблицаШапка.НомерКорректируемогоЭСФ,
	|	ВременнаяТаблицаШапка.Контрагент.ПризнакСтраны,
	|	ВременнаяТаблицаШапка.Контрагент,
	|	ВременнаяТаблицаШапка.ДоговорКонтрагента,
	|	ВременнаяТаблицаШапка.КодПоставкиНДС,
	|	ВременнаяТаблицаШапка.СтавкаНДС,
	|	ВременнаяТаблицаШапка.Дата,
	|	ВременнаяТаблицаШапка.ПоступлениеОтНерезидента";

	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСчетаФактурыВыписанные", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства, Отказ) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭлектронныйСчетФактураВыписанный.Ссылка КАК Ссылка,
		|	ЭлектронныйСчетФактураВыписанный.Организация КАК Организация,
		|	ЭлектронныйСчетФактураВыписанный.Дата КАК Дата,
		|	ЭлектронныйСчетФактураВыписанный.ДатаПоставки КАК ДатаПоставки,
		|	ЭлектронныйСчетФактураВыписанный.ДатаОтчета КАК ДатаОтчета,
		|	ЭлектронныйСчетФактураВыписанный.НомерЭСФ КАК НомерЭСФ,
		|	ЭлектронныйСчетФактураВыписанный.СерияКорректируемогоСФ КАК СерияКорректируемогоСФ,
		|	ЭлектронныйСчетФактураВыписанный.НомерКорректируемогоЭСФ КАК НомерКорректируемогоЭСФ,
		|	ЭлектронныйСчетФактураВыписанный.ДатаКорректируемогоЭСФ КАК ДатаКорректируемогоЭСФ,
		|	ЭлектронныйСчетФактураВыписанный.Контрагент КАК Контрагент,
		|	ЭлектронныйСчетФактураВыписанный.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ЭлектронныйСчетФактураВыписанный.КодПоставкиНДС КАК КодПоставкиНДС,
		|	ЭлектронныйСчетФактураВыписанный.СтавкаНДС КАК СтавкаНДС,
		|	ЭлектронныйСчетФактураВыписанный.ЭтоКорректировочныйСФ КАК ЭтоКорректировочныйСФ,
		|	ЭлектронныйСчетФактураВыписанный.КодПричиныКорректировки КАК КодПричиныКорректировки,
		|	ЭлектронныйСчетФактураВыписанный.Курс КАК Курс,
		|	ЭлектронныйСчетФактураВыписанный.ПоступлениеОтНерезидента КАК ПоступлениеОтНерезидента
		|ПОМЕСТИТЬ ВременнаяТаблицаШапка
		|ИЗ
		|	Документ.ЭлектронныйСчетФактураВыписанный КАК ЭлектронныйСчетФактураВыписанный
		|ГДЕ
		|	ЭлектронныйСчетФактураВыписанный.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭлектронныйСчетФактураВыписанныйТовары.ДокументОснование КАК ДокументОснование,
		|	СУММА(ЭлектронныйСчетФактураВыписанныйТовары.СуммаНДСВВалютеРеглУчета) КАК СуммаНДСВВалютеРеглУчета,
		|	СУММА(ЭлектронныйСчетФактураВыписанныйТовары.СуммаНСПВВалютеРеглУчета) КАК СуммаНСПВВалютеРеглУчета,
		|	СУММА(ЭлектронныйСчетФактураВыписанныйТовары.ВсегоВВалютеРеглУчета) КАК ВсегоВВалютеРеглУчета,
		|	СУММА(ЭлектронныйСчетФактураВыписанныйТовары.СуммаСкидки) КАК СуммаСкидки,
		|	СУММА(ЭлектронныйСчетФактураВыписанныйТовары.СуммаДоначисленияВВалютеРеглУчета) КАК СуммаДоначисленияВВалютеРеглУчета,
		|	СУММА(ЭлектронныйСчетФактураВыписанныйТовары.СуммаДоначисленияНДСВВалютеРеглУчета) КАК СуммаДоначисленияНДСВВалютеРеглУчета
		|ПОМЕСТИТЬ ВременнаяТаблицаТовары
		|ИЗ
		|	Документ.ЭлектронныйСчетФактураВыписанный.Товары КАК ЭлектронныйСчетФактураВыписанныйТовары
		|ГДЕ
		|	ЭлектронныйСчетФактураВыписанныйТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЭлектронныйСчетФактураВыписанныйТовары.ДокументОснование";
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Выполнить();
	
	СформироватьТаблицаСведенияОбЭСФ(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаСчетаФактурыВыписанные(ДокументСсылка, СтруктураДополнительныеСвойства);
	
КонецПроцедуры

#КонецОбласти

#Область ВерсионированиеОбъектов

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//@skip-warning
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область ИнтерфейсПечати

// Функция формирует табличный документ с печатной формой Счет-фактура
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьСчетФактура007_008_009_010(МассивОбъектов, ОбъектыПечати, НомерСФ)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;		
	ТабличныйДокумент.КлючПараметровПечати = "ЭлектронныйСчетФактураВыписанный_СчетФактура";
	
	Если НомерСФ = "007" Тогда	
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;	
		Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьСчетФактура.ПФ_MXL_СчетФактура007");
		
	ИначеЕсли НомерСФ = "008" Тогда
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьСчетФактура.ПФ_MXL_СчетФактура008");
		
	ИначеЕсли НомерСФ = "009" Тогда
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьСчетФактура.ПФ_MXL_СчетФактура009");
		
	Иначе
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьСчетФактура.ПФ_MXL_СчетФактура010");
	КонецЕсли;	
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЭлектронныйСчетФактураВыписанный.Ссылка КАК Ссылка,
		|	ЭлектронныйСчетФактураВыписанный.Номер КАК Номер,
		|	ЭлектронныйСчетФактураВыписанный.Дата КАК Дата,
		|	ЭлектронныйСчетФактураВыписанный.ВидОперации КАК ВидОперации,
		|	ЭлектронныйСчетФактураВыписанный.ДоговорКонтрагента.ВалютаРасчетов.Код КАК КодВалюты,
		|	ЭлектронныйСчетФактураВыписанный.Курс КАК Курс,
		|	ЭлектронныйСчетФактураВыписанный.ФормаОплаты КАК ФормаОплаты,
		|	ЭлектронныйСчетФактураВыписанный.КодПоставкиНДС.Код КАК КодПоставкиНДС,
		|	ЭлектронныйСчетФактураВыписанный.Организация КАК Организация,
		|	ЭлектронныйСчетФактураВыписанный.БанковскийСчет.НомерСчета КАК НомерБанковскогоСчетаОрганизации,
		|	ЭлектронныйСчетФактураВыписанный.БанковскийСчет.Банк.Код КАК БикБанкаОрганизации,
		|	ЭлектронныйСчетФактураВыписанный.БанковскийСчет.Банк.Наименование КАК НаименованиеБанкаОрганизации,
		|	ЭлектронныйСчетФактураВыписанный.Контрагент КАК Контрагент,
		|	ЭлектронныйСчетФактураВыписанный.БанковскийСчетКонтрагента.НомерСчета КАК БанковскийСчетКонтрагентаНомерСчета,
		|	ЭлектронныйСчетФактураВыписанный.БанковскийСчетКонтрагента.Банк.Наименование КАК БанковскийСчетКонтрагентаБанк,
		|	ЭлектронныйСчетФактураВыписанный.БанковскийСчетКонтрагента.Банк.Код КАК БанковскийСчетКонтрагентаБИКБанка,
		|	ЭлектронныйСчетФактураВыписанный.Контрагент.СтранаРезидентства.Код КАК КодСтраны,
		|	ЭлектронныйСчетФактураВыписанный.Контрагент.СтранаРезидентства.НаименованиеПолное КАК НаименованиеСтраны,
		|	ЭлектронныйСчетФактураВыписанный.НомерЭСФ КАК НомерБланкаСФ,
		|	ЭлектронныйСчетФактураВыписанный.НомерКорректируемогоЭСФ КАК НомерБланкаСФКор,
		|	ЭлектронныйСчетФактураВыписанный.ДатаКорректируемогоЭСФ КАК ДатаКорректируемогоЭСФ,
		|	ЭлектронныйСчетФактураВыписанный.ДатаПоставки КАК ДатаПоставки,
		|	40 КАК КодСпособаОтправки,
		|	ЭлектронныйСчетФактураВыписанный.ДоговорКонтрагента.НомерДоговора КАК НомерДоговора,
		|	ЭлектронныйСчетФактураВыписанный.ДоговорКонтрагента.ДатаДоговора КАК ДатаДоговора,
		|	ЭлектронныйСчетФактураВыписанный.Товары.(
		|		ВЫБОР
		|			КОГДА ЭлектронныйСчетФактураВыписанный.Товары.Номенклатура.Услуга
		|				ТОГДА ЭлектронныйСчетФактураВыписанный.Товары.Номенклатура.КодГКЭД
		|			ИНАЧЕ ЭлектронныйСчетФактураВыписанный.Товары.Номенклатура.КодТНВЭД
		|		КОНЕЦ КАК КодТовара,
		|		Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
		|		Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		Цена КАК Цена,
		|		Количество КАК Количество,
		|		ЭлектронныйСчетФактураВыписанный.Товары.Всего - ЭлектронныйСчетФактураВыписанный.Товары.СуммаНДС - ЭлектронныйСчетФактураВыписанный.Товары.СуммаНСП КАК Стоимость,
		|		СуммаНДС КАК СуммаНДС,
		|		СуммаНСП КАК СуммаНСП,
		|		Всего КАК Всего,
		|		удалитьСтавкаНДС КАК СтавкаНДС,
		|		удалитьСтавкаНСП КАК СтавкаНСП
		|	) КАК Товары
		|ИЗ
		|	Документ.ЭлектронныйСчетФактураВыписанный КАК ЭлектронныйСчетФактураВыписанный
		|ГДЕ
		|	ЭлектронныйСчетФактураВыписанный.Ссылка В(&СписокДокументов)";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокДокументов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	Пока Шапка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
	
		ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(Шапка.Дата, Шапка.Организация);
		ПлательщикНДС = ДанныеУчетнойПолитики.ПлательщикНДС;
		ПлательщикНСП = ДанныеУчетнойПолитики.ПлательщикНСП;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		КоличествоЛистов = КоличествоЛистовСчетФатуры(Макет, Шапка, НомерСФ);		
		КоличествоЛистовСтрокой = Формат(КоличествоЛистов, "ЧГ=0");
		
		// Подготовка данных
		ДанныеПечати = Новый Структура;
		
		Если КоличествоЛистов < 10 Тогда
			ДанныеПечати.Вставить("Лист1", "");
			ДанныеПечати.Вставить("Лист2", "");
			ДанныеПечати.Вставить("Лист3", КоличествоЛистовСтрокой);
		ИначеЕсли КоличествоЛистов < 100 Тогда
			ДанныеПечати.Вставить("Лист1", "");
			ДанныеПечати.Вставить("Лист2", Сред(КоличествоЛистовСтрокой, 1, 1));
			ДанныеПечати.Вставить("Лист3", Сред(КоличествоЛистовСтрокой, 2, 1));
		Иначе
			ДанныеПечати.Вставить("Лист1", Сред(КоличествоЛистовСтрокой, 1, 1));
			ДанныеПечати.Вставить("Лист2", Сред(КоличествоЛистовСтрокой, 2, 1));
			ДанныеПечати.Вставить("Лист3", Сред(КоличествоЛистовСтрокой, 3, 1));
		КонецЕсли;	
		
		ДанныеПечати.Вставить("НомерБланкаСФ", ?(ПлательщикНДС ИЛИ ЗначениеЗаполнено(Шапка.НомерБланкаСФ), Шапка.НомерБланкаСФ, ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер)));
		ДанныеПечати.Вставить("НомерБланкаСФКор", Шапка.НомерБланкаСФКор);
		ДанныеПечати.Вставить("ВидПоставки", Шапка.КодПоставкиНДС);
		//ДанныеПечати.Вставить("ТипПоставки", ?(Шапка.ЭкспортнаяПоставка, "Экспорт", "Внутренняя"));
		
		Если Шапка.ФормаОплаты = Перечисления.ФормыОплаты.БезвозмезднаяПоставка Тогда
			ДанныеПечати.Вставить("ВидПлатежа", НСтр("ru = 'Безвозмездная поставка'"));
			
		ИначеЕсли Шапка.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда	
			ДанныеПечати.Вставить("ВидПлатежа", "Безналичная");
			
		ИначеЕсли Шапка.ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда	
			ДанныеПечати.Вставить("ВидПлатежа", "Наличная");
		КонецЕсли;	
		
		ДанныеПечати.Вставить("КодВалюты", Шапка.КодВалюты);
		ДанныеПечати.Вставить("КурсВалюты", Формат(Шапка.Курс, "ЧЦ=15; ЧДЦ=4"));
		
		Если ЗначениеЗаполнено(Шапка.ДатаПоставки) Тогда
			ДанныеПечати.Вставить("ДатаПоставки1", Сред(Шапка.ДатаПоставки,1,1));
			ДанныеПечати.Вставить("ДатаПоставки2", Сред(Шапка.ДатаПоставки,2,1));
			ДанныеПечати.Вставить("ДатаПоставки3", Сред(Шапка.ДатаПоставки,4,1));
			ДанныеПечати.Вставить("ДатаПоставки4", Сред(Шапка.ДатаПоставки,5,1));
			ДанныеПечати.Вставить("ДатаПоставки5", Сред(Шапка.ДатаПоставки,7,1));
			ДанныеПечати.Вставить("ДатаПоставки6", Сред(Шапка.ДатаПоставки,8,1));
			ДанныеПечати.Вставить("ДатаПоставки7", Сред(Шапка.ДатаПоставки,9,1));
			ДанныеПечати.Вставить("ДатаПоставки8", Сред(Шапка.ДатаПоставки,10,1));
		КонецЕсли;
		
		ДанныеПечати.Вставить("НомерДоговора", Шапка.НомерДоговора);
		
		Если ЗначениеЗаполнено(Шапка.ДатаДоговора) Тогда
			ДанныеПечати.Вставить("ДатаДоговора1", Сред(Шапка.ДатаДоговора,1,1));
			ДанныеПечати.Вставить("ДатаДоговора2", Сред(Шапка.ДатаДоговора,2,1));
			ДанныеПечати.Вставить("ДатаДоговора3", Сред(Шапка.ДатаДоговора,4,1));
			ДанныеПечати.Вставить("ДатаДоговора4", Сред(Шапка.ДатаДоговора,5,1));
			ДанныеПечати.Вставить("ДатаДоговора5", Сред(Шапка.ДатаДоговора,7,1));
			ДанныеПечати.Вставить("ДатаДоговора6", Сред(Шапка.ДатаДоговора,8,1));
			ДанныеПечати.Вставить("ДатаДоговора7", Сред(Шапка.ДатаДоговора,9,1));
			ДанныеПечати.Вставить("ДатаДоговора8", Сред(Шапка.ДатаДоговора,10,1));
		КонецЕсли;	
			
		ДанныеПечати.Вставить("БанкПоставщика", Шапка.НаименованиеБанкаОрганизации);		

		Если ЗначениеЗаполнено(Шапка.ДатаКорректируемогоЭСФ) Тогда
			ДанныеПечати.Вставить("ДатаСФКор1", Сред(Шапка.ДатаКорректируемогоЭСФ,1,1));
			ДанныеПечати.Вставить("ДатаСФКор2", Сред(Шапка.ДатаКорректируемогоЭСФ,2,1));
			ДанныеПечати.Вставить("ДатаСФКор3", Сред(Шапка.ДатаКорректируемогоЭСФ,4,1));
			ДанныеПечати.Вставить("ДатаСФКор4", Сред(Шапка.ДатаКорректируемогоЭСФ,5,1));
			ДанныеПечати.Вставить("ДатаСФКор5", Сред(Шапка.ДатаКорректируемогоЭСФ,7,1));
			ДанныеПечати.Вставить("ДатаСФКор6", Сред(Шапка.ДатаКорректируемогоЭСФ,8,1));
			ДанныеПечати.Вставить("ДатаСФКор7", Сред(Шапка.ДатаКорректируемогоЭСФ,9,1));
			ДанныеПечати.Вставить("ДатаСФКор8", Сред(Шапка.ДатаКорректируемогоЭСФ,10,1));
		КонецЕсли;
		
		СведенияОбОрганизации = БухгалтерскийУчетСервер.ПолучитьСведенияОбОрганизации(Шапка.Организация, Шапка.Дата);
		
		ИНН 					= СведенияОбОрганизации.ИНН;
	    ГНС 					= СведенияОбОрганизации.ГНС;
	    КодГНС 					= СведенияОбОрганизации.ГНСКод;		
		ПредставлениеПоставщика = СведенияОбОрганизации.НаименованиеПолное;
		            
		ДанныеПечати.Вставить("Дата1", Сред(Шапка.Дата,1,1));
		ДанныеПечати.Вставить("Дата2", Сред(Шапка.Дата,2,1));
		ДанныеПечати.Вставить("Дата3", Сред(Шапка.Дата,4,1));
		ДанныеПечати.Вставить("Дата4", Сред(Шапка.Дата,5,1));
		ДанныеПечати.Вставить("Дата5", Сред(Шапка.Дата,7,1));
		ДанныеПечати.Вставить("Дата6", Сред(Шапка.Дата,8,1));
		ДанныеПечати.Вставить("Дата7", Сред(Шапка.Дата,9,1));
		ДанныеПечати.Вставить("Дата8", Сред(Шапка.Дата,10,1));
		
		ДанныеПечати.Вставить("ИННПост1", Сред(ИНН,1,1));
		ДанныеПечати.Вставить("ИННПост2", Сред(ИНН,2,1));
		ДанныеПечати.Вставить("ИННПост3", Сред(ИНН,3,1));
		ДанныеПечати.Вставить("ИННПост4", Сред(ИНН,4,1));
		ДанныеПечати.Вставить("ИННПост5", Сред(ИНН,5,1));
		ДанныеПечати.Вставить("ИННПост6", Сред(ИНН,6,1));
		ДанныеПечати.Вставить("ИННПост7", Сред(ИНН,7,1));
		ДанныеПечати.Вставить("ИННПост8", Сред(ИНН,8,1));
		ДанныеПечати.Вставить("ИННПост9", Сред(ИНН,9,1));
		ДанныеПечати.Вставить("ИННПост10", Сред(ИНН,10,1));
		ДанныеПечати.Вставить("ИННПост11", Сред(ИНН,11,1));
		ДанныеПечати.Вставить("ИННПост12", Сред(ИНН,12,1));
		ДанныеПечати.Вставить("ИННПост13", Сред(ИНН,13,1));
		ДанныеПечати.Вставить("ИННПост14", Сред(ИНН,14,1));

        БИК = Шапка.БикБанкаОрганизации;
		ДанныеПечати.Вставить("КодБанкаПоставщика1", Сред(БИК,1,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика2", Сред(БИК,2,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика3", Сред(БИК,3,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика4", Сред(БИК,4,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика5", Сред(БИК,5,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика6", Сред(БИК,6,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика7", Сред(БИК,7,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика8", Сред(БИК,8,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика9", Сред(БИК,9,1));		
		
		НомерСчета = Шапка.НомерБанковскогоСчетаОрганизации;
		ДанныеПечати.Вставить("СчетПоставщика1", Сред(НомерСчета,1,1));		
		ДанныеПечати.Вставить("СчетПоставщика2", Сред(НомерСчета,2,1));		
		ДанныеПечати.Вставить("СчетПоставщика3", Сред(НомерСчета,3,1));		
		ДанныеПечати.Вставить("СчетПоставщика4", Сред(НомерСчета,4,1));		
		ДанныеПечати.Вставить("СчетПоставщика5", Сред(НомерСчета,5,1));		
		ДанныеПечати.Вставить("СчетПоставщика6", Сред(НомерСчета,6,1));		
		ДанныеПечати.Вставить("СчетПоставщика7", Сред(НомерСчета,7,1));		
		ДанныеПечати.Вставить("СчетПоставщика8", Сред(НомерСчета,8,1));		
		ДанныеПечати.Вставить("СчетПоставщика9", Сред(НомерСчета,9,1));		
		ДанныеПечати.Вставить("СчетПоставщика10", Сред(НомерСчета,10,1));		
		ДанныеПечати.Вставить("СчетПоставщика11", Сред(НомерСчета,11,1));		
		ДанныеПечати.Вставить("СчетПоставщика12", Сред(НомерСчета,12,1));		
		ДанныеПечати.Вставить("СчетПоставщика13", Сред(НомерСчета,13,1));		
		ДанныеПечати.Вставить("СчетПоставщика14", Сред(НомерСчета,14,1));		
		ДанныеПечати.Вставить("СчетПоставщика15", Сред(НомерСчета,15,1));		
		ДанныеПечати.Вставить("СчетПоставщика16", Сред(НомерСчета,16,1));		
		
		ДанныеПечати.Вставить("ГНСПоставщика1", Сред(КодГНС,1,1));		
		ДанныеПечати.Вставить("ГНСПоставщика2", Сред(КодГНС,2,1));		
		ДанныеПечати.Вставить("ГНСПоставщика3", Сред(КодГНС,3,1));		

		ДанныеПечати.Вставить("НаименованиеГНСПоставщика", ГНС);		
		ДанныеПечати.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);		
		
		АдресПоставщика = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ШАпка.Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Шапка.Дата); 
		ДанныеПечати.Вставить("АдресПоставщика", АдресПоставщика);		

		// Данные по контрагенту
		ДанныеПечати.Вставить("КодСтраны1", 		Сред(Шапка.КодСтраны,1,1));		
		ДанныеПечати.Вставить("КодСтраны2", 		Сред(Шапка.КодСтраны,2,1));		
		ДанныеПечати.Вставить("КодСтраны3", 		Сред(Шапка.КодСтраны,3,1));
		ДанныеПечати.Вставить("НаименованиеСтраны", Шапка.НаименованиеСтраны);
		
		СведенияОКонтрагенте = БухгалтерскийУчетСервер.ПолучитьСведенияОКонтрагенте(Шапка.Контрагент);
		
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.ГоловнойКонтрагент) Тогда 
			
			ДанныеПечати.Вставить("ПредставлениеПокупателя", СведенияОКонтрагенте.ГоловнойКонтрагентНаименованиеПолное);
			
			ИННКонтрагента = СведенияОКонтрагенте.ГоловнойКонтрагентИНН;
			ДанныеПечати.Вставить("ИННПокупателя1", Сред(ИННКонтрагента,1,1));		
			ДанныеПечати.Вставить("ИННПокупателя2", Сред(ИННКонтрагента,2,1));		
			ДанныеПечати.Вставить("ИННПокупателя3", Сред(ИННКонтрагента,3,1));		
			ДанныеПечати.Вставить("ИННПокупателя4", Сред(ИННКонтрагента,4,1));		
			ДанныеПечати.Вставить("ИННПокупателя5", Сред(ИННКонтрагента,5,1));		
			ДанныеПечати.Вставить("ИННПокупателя6", Сред(ИННКонтрагента,6,1));		
			ДанныеПечати.Вставить("ИННПокупателя7", Сред(ИННКонтрагента,7,1));		
			ДанныеПечати.Вставить("ИННПокупателя8", Сред(ИННКонтрагента,8,1));		
			ДанныеПечати.Вставить("ИННПокупателя9", Сред(ИННКонтрагента,9,1));		
			ДанныеПечати.Вставить("ИННПокупателя10", Сред(ИННКонтрагента,10,1));		
			ДанныеПечати.Вставить("ИННПокупателя11", Сред(ИННКонтрагента,11,1));		
			ДанныеПечати.Вставить("ИННПокупателя12", Сред(ИННКонтрагента,12,1));		
			ДанныеПечати.Вставить("ИННПокупателя13", Сред(ИННКонтрагента,13,1));		
			ДанныеПечати.Вставить("ИННПокупателя14", Сред(ИННКонтрагента,14,1));
			
			ДанныеПечати.Вставить("ПредставлениеФилиалаПокупателя", СведенияОКонтрагенте.НаименованиеПолное);
			
			ИННКонтрагента = СведенияОКонтрагенте.ИНН;
			ДанныеПечати.Вставить("ИННФилиалПокупателя1", Сред(ИННКонтрагента,1,1));		
			ДанныеПечати.Вставить("ИННФилиалПокупателя2", Сред(ИННКонтрагента,2,1));		
			ДанныеПечати.Вставить("ИННФилиалПокупателя3", Сред(ИННКонтрагента,3,1));		
			ДанныеПечати.Вставить("ИННФилиалПокупателя4", Сред(ИННКонтрагента,4,1));		
			ДанныеПечати.Вставить("ИННФилиалПокупателя5", Сред(ИННКонтрагента,5,1));		
			ДанныеПечати.Вставить("ИННФилиалПокупателя6", Сред(ИННКонтрагента,6,1));		
			ДанныеПечати.Вставить("ИННФилиалПокупателя7", Сред(ИННКонтрагента,7,1));		
			ДанныеПечати.Вставить("ИННФилиалПокупателя8", Сред(ИННКонтрагента,8,1));		
			ДанныеПечати.Вставить("ИННФилиалПокупателя9", Сред(ИННКонтрагента,9,1));		
			ДанныеПечати.Вставить("ИННФилиалПокупателя10", Сред(ИННКонтрагента,10,1));		
			ДанныеПечати.Вставить("ИННФилиалПокупателя11", Сред(ИННКонтрагента,11,1));		
			ДанныеПечати.Вставить("ИННФилиалПокупателя12", Сред(ИННКонтрагента,12,1));		
			ДанныеПечати.Вставить("ИННФилиалПокупателя13", Сред(ИННКонтрагента,13,1));		
			ДанныеПечати.Вставить("ИННФилиалПокупателя14", Сред(ИННКонтрагента,14,1));
			
		Иначе 
			
			ДанныеПечати.Вставить("ПредставлениеПокупателя", СведенияОКонтрагенте.НаименованиеПолное);
			
			ИННКонтрагента = СведенияОКонтрагенте.ИНН;
			ДанныеПечати.Вставить("ИННПокупателя1", Сред(ИННКонтрагента,1,1));		
			ДанныеПечати.Вставить("ИННПокупателя2", Сред(ИННКонтрагента,2,1));		
			ДанныеПечати.Вставить("ИННПокупателя3", Сред(ИННКонтрагента,3,1));		
			ДанныеПечати.Вставить("ИННПокупателя4", Сред(ИННКонтрагента,4,1));		
			ДанныеПечати.Вставить("ИННПокупателя5", Сред(ИННКонтрагента,5,1));		
			ДанныеПечати.Вставить("ИННПокупателя6", Сред(ИННКонтрагента,6,1));		
			ДанныеПечати.Вставить("ИННПокупателя7", Сред(ИННКонтрагента,7,1));		
			ДанныеПечати.Вставить("ИННПокупателя8", Сред(ИННКонтрагента,8,1));		
			ДанныеПечати.Вставить("ИННПокупателя9", Сред(ИННКонтрагента,9,1));		
			ДанныеПечати.Вставить("ИННПокупателя10", Сред(ИННКонтрагента,10,1));		
			ДанныеПечати.Вставить("ИННПокупателя11", Сред(ИННКонтрагента,11,1));		
			ДанныеПечати.Вставить("ИННПокупателя12", Сред(ИННКонтрагента,12,1));		
			ДанныеПечати.Вставить("ИННПокупателя13", Сред(ИННКонтрагента,13,1));		
			ДанныеПечати.Вставить("ИННПокупателя14", Сред(ИННКонтрагента,14,1));		
		КонецЕсли;	
		
		ВыводДопИнформацииПоКонтрагенту = БухгалтерскийУчетСервер.ПолучитьПризнакПатентаПоКонтрагенту(Шапка.Контрагент) ИЛИ
			(Шапка.Контрагент.СтранаРезидентства = Справочники.СтраныМира.Киргизия ИЛИ Шапка.Контрагент.СтранаРезидентства.УчастникЕАЭС);
		
		Если ВыводДопИнформацииПоКонтрагенту Тогда
			Если Шапка.Контрагент.ПризнакСтраны = Перечисления.ПризнакиСтраны.ЕАЭС Тогда
				ДанныеПечати.Вставить("НаименованиеГНСПокупателя", Шапка.Контрагент.СтранаРезидентства.Наименование);
				КодГНСКонтрагента = Шапка.Контрагент.СтранаРезидентства.Код;
				ДанныеПечати.Вставить("ГНСПокупателя1", Сред(КодГНСКонтрагента,1,1));		
				ДанныеПечати.Вставить("ГНСПокупателя2", Сред(КодГНСКонтрагента,2,1));		
				ДанныеПечати.Вставить("ГНСПокупателя3", Сред(КодГНСКонтрагента,3,1));	
			Иначе
				ДанныеПечати.Вставить("НаименованиеГНСПокупателя", СведенияОКонтрагенте.ГНСНаименование);
				КодГНСКонтрагента = СведенияОКонтрагенте.ГНСКод;
				ДанныеПечати.Вставить("ГНСПокупателя1", Сред(КодГНСКонтрагента,1,1));		
				ДанныеПечати.Вставить("ГНСПокупателя2", Сред(КодГНСКонтрагента,2,1));		
				ДанныеПечати.Вставить("ГНСПокупателя3", Сред(КодГНСКонтрагента,3,1));	
			КонецЕсли;	
		Иначе
			ДанныеПечати.Вставить("НаименованиеГНСПокупателя", "отсутствует");
		КонецЕсли;
		
		ДанныеПечати.Вставить("АдресПокупателя", СведенияОКонтрагенте.АдрЮР);		
				
		Если ЗначениеЗаполнено(Шапка.БанковскийСчетКонтрагентаНомерСчета) И ВыводДопИнформацииПоКонтрагенту Тогда 
			НомерСчетаКонтрагента = Шапка.БанковскийСчетКонтрагентаНомерСчета;
			ДанныеПечати.Вставить("СчетПокупателя1", Сред(НомерСчетаКонтрагента,1,1));		
			ДанныеПечати.Вставить("СчетПокупателя2", Сред(НомерСчетаКонтрагента,2,1));		
			ДанныеПечати.Вставить("СчетПокупателя3", Сред(НомерСчетаКонтрагента,3,1));		
			ДанныеПечати.Вставить("СчетПокупателя4", Сред(НомерСчетаКонтрагента,4,1));		
			ДанныеПечати.Вставить("СчетПокупателя5", Сред(НомерСчетаКонтрагента,5,1));		
			ДанныеПечати.Вставить("СчетПокупателя6", Сред(НомерСчетаКонтрагента,6,1));		
			ДанныеПечати.Вставить("СчетПокупателя7", Сред(НомерСчетаКонтрагента,7,1));		
			ДанныеПечати.Вставить("СчетПокупателя8", Сред(НомерСчетаКонтрагента,8,1));		
			ДанныеПечати.Вставить("СчетПокупателя9", Сред(НомерСчетаКонтрагента,9,1));		
			ДанныеПечати.Вставить("СчетПокупателя10", Сред(НомерСчетаКонтрагента,10,1));		
			ДанныеПечати.Вставить("СчетПокупателя11", Сред(НомерСчетаКонтрагента,11,1));		
			ДанныеПечати.Вставить("СчетПокупателя12", Сред(НомерСчетаКонтрагента,12,1));		
			ДанныеПечати.Вставить("СчетПокупателя13", Сред(НомерСчетаКонтрагента,13,1));		
			ДанныеПечати.Вставить("СчетПокупателя14", Сред(НомерСчетаКонтрагента,14,1));
			ДанныеПечати.Вставить("СчетПокупателя15", Сред(НомерСчетаКонтрагента,15,1));		
			ДанныеПечати.Вставить("СчетПокупателя16", Сред(НомерСчетаКонтрагента,16,1));
			
			БикБанкаКонтрагента = Шапка.БанковскийСчетКонтрагентаБИКБанка;
			ДанныеПечати.Вставить("КодБанкаПокупателя1", Сред(БикБанкаКонтрагента,1,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя2", Сред(БикБанкаКонтрагента,2,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя3", Сред(БикБанкаКонтрагента,3,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя4", Сред(БикБанкаКонтрагента,4,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя5", Сред(БикБанкаКонтрагента,5,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя6", Сред(БикБанкаКонтрагента,6,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя7", Сред(БикБанкаКонтрагента,7,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя8", Сред(БикБанкаКонтрагента,8,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя9", Сред(БикБанкаКонтрагента,9,1));		
			
			ДанныеПечати.Вставить("БанкПокупателя", Шапка.БанковскийСчетКонтрагентаБанк);
		КонецЕсли;	
		
		ДанныеПечати.Вставить("СтавкаНДС", "0");
		ДанныеПечати.Вставить("СтавкаНСП", "0");
		ДанныеПечати.Вставить("НомерСтроки", 1);
		
		ДанныеПечати.Вставить("СтоимостьПоЛисту", 		 0);
		ДанныеПечати.Вставить("СуммаНДСПоЛисту", 		 0);
		ДанныеПечати.Вставить("СуммаНСППоЛисту", 		 0);
		ДанныеПечати.Вставить("ВсегоПоЛисту", 			 0);
		ДанныеПечати.Вставить("СтоимостьПоСчетуФактуре", 0);
		ДанныеПечати.Вставить("СуммаНДСПоСчетуФактуре",  0);
		ДанныеПечати.Вставить("СуммаНСППоСчетуФактуре",  0);
		ДанныеПечати.Вставить("ВсегоПоСчетуФактуре", 	 0);
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьШапка.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		ОбластьЗаголовокТекущегоЛиста 			= Макет.ПолучитьОбласть("ЗаголовокТекущегоЛиста");
		ОбластьЗаголовокЗаключительногоЛиста 	= Макет.ПолучитьОбласть("ЗаголовокЗаключительногоЛиста");
		ОбластьШапкаТаблицы 					= Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтрокаТаблицы 					= Макет.ПолучитьОбласть("СтрокаТаблицы");
		ОбластьИтогиПервогоЛиста 				= Макет.ПолучитьОбласть("ИтогиПервогоЛиста");
		ОбластьИтогиТекущегоЛиста 				= Макет.ПолучитьОбласть("ИтогиТекущегоЛиста");
		ОбластьИтогиПоСчетуФактуре 				= Макет.ПолучитьОбласть("ИтогиПоСчетуФактуре");
		ОбластьПодвал 							= Макет.ПолучитьОбласть("Подвал");
		
		Если НомерСФ = "009" ИЛИ НомерСФ = "010" Тогда
			ОбластьПодвалПервыйЛист = Макет.ПолучитьОбласть("ПодвалПервыйЛист");
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		ДанныеКодТовара = Новый Структура();
		ДанныеКодТовара.Вставить("КодТовара1", "");
		ДанныеКодТовара.Вставить("КодТовара2", "");
		ДанныеКодТовара.Вставить("КодТовара3", "");
		ДанныеКодТовара.Вставить("КодТовара4", "");
		ДанныеКодТовара.Вставить("КодТовара5", "");
		ДанныеКодТовара.Вставить("КодТовара6", "");
		ДанныеКодТовара.Вставить("КодТовара7", "");
		ДанныеКодТовара.Вставить("КодТовара8", "");
		ДанныеКодТовара.Вставить("КодТовара9", "");
		ДанныеКодТовара.Вставить("КодТовара10", "");
		
		// Номер листа 2, потому что на первом листе печатается титульная страница и указывается общее число листов.
		НомерЛиста = 2;
		
		МассивОбластей = Новый Массив();
		МассивОбластей.Добавить(ОбластьИтогиПервогоЛиста);
		
		Если НомерСФ = "009" ИЛИ НомерСФ = "010" Тогда
			МассивОбластей.Добавить(ОбластьПодвалПервыйЛист);
		Иначе	
			МассивОбластей.Добавить(ОбластьПодвал);	
		КонецЕсли;
		
		ВыборкаТовары = Шапка.Товары.Выбрать();
			
		Пока ВыборкаТовары.Следующий() Цикл
			
			ДанныеПечати.СтавкаНДС = УчетНДС.ПолучитьСтавкуНДС(Шапка.Дата, ВыборкаТовары.СтавкаНДС);
		
			Если Шапка.ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда 
				ДанныеПечати.СтавкаНСП = ?(ПлательщикНСП, 
										УчетНДС.ПолучитьСтавкуНСП(Шапка.Дата, Шапка.Организация, ВыборкаТовары.СтавкаНСП), 
										Справочники.СтавкиНСП.ПустаяСсылка());
			Иначе
				ДанныеПечати.СтавкаНСП = "0";
			КонецЕсли;
			
			ОбластьСтрокаТаблицы.Параметры.Заполнить(ВыборкаТовары);
			ОбластьСтрокаТаблицы.Параметры.Заполнить(ДанныеПечати);
			
			Если ЗначениеЗаполнено(ВыборкаТовары.КодТовара) Тогда
				
				Если Шапка.ВидОперации = Перечисления.ВидыОперацийЭСФ.ПоставкаТоваров Тогда
					ДанныеКодТовара.КодТовара1 	= Сред(ВыборкаТовары.КодТовара,1,1);
					ДанныеКодТовара.КодТовара2 	= Сред(ВыборкаТовары.КодТовара,2,1);
					ДанныеКодТовара.КодТовара3 	= Сред(ВыборкаТовары.КодТовара,3,1);
					ДанныеКодТовара.КодТовара4 	= Сред(ВыборкаТовары.КодТовара,4,1);
					ДанныеКодТовара.КодТовара5 	= Сред(ВыборкаТовары.КодТовара,5,1);
					ДанныеКодТовара.КодТовара6 	= Сред(ВыборкаТовары.КодТовара,6,1);
					ДанныеКодТовара.КодТовара7 	= Сред(ВыборкаТовары.КодТовара,7,1);
					ДанныеКодТовара.КодТовара8 	= Сред(ВыборкаТовары.КодТовара,8,1);
					ДанныеКодТовара.КодТовара9 	= Сред(ВыборкаТовары.КодТовара,9,1);
					ДанныеКодТовара.КодТовара10 = Сред(ВыборкаТовары.КодТовара,10,1);
				Иначе
					ДанныеКодТовара.КодТовара1 	= Сред(ВыборкаТовары.КодТовара,1,1);
					ДанныеКодТовара.КодТовара2 	= Сред(ВыборкаТовары.КодТовара,2,1);
					ДанныеКодТовара.КодТовара3 	= Сред(ВыборкаТовары.КодТовара,4,1);
					ДанныеКодТовара.КодТовара4 	= Сред(ВыборкаТовары.КодТовара,5,1);
				КонецЕсли;					
			Иначе
				ДанныеКодТовара.КодТовара1 	= "";
				ДанныеКодТовара.КодТовара2 	= "";
				ДанныеКодТовара.КодТовара3 	= "";
				ДанныеКодТовара.КодТовара4 	= "";
				ДанныеКодТовара.КодТовара5 	= "";
				ДанныеКодТовара.КодТовара6 	= "";
				ДанныеКодТовара.КодТовара7 	= "";
				ДанныеКодТовара.КодТовара8 	= "";
				ДанныеКодТовара.КодТовара9 	= "";
				ДанныеКодТовара.КодТовара10 = "";	
			КонецЕсли;
			
			ОбластьСтрокаТаблицы.Параметры.Заполнить(ДанныеКодТовара);
			
			МассивОбластей.Добавить(ОбластьСтрокаТаблицы);
			
			Если ТабличныйДокумент.ПроверитьВывод(МассивОбластей) Тогда			
				ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
				
				ДанныеПечати.СтоимостьПоЛисту 			= ДанныеПечати.СтоимостьПоЛисту + ВыборкаТовары.Стоимость;
				ДанныеПечати.СуммаНДСПоЛисту 			= ДанныеПечати.СуммаНДСПоЛисту + ВыборкаТовары.СуммаНДС;
				ДанныеПечати.СуммаНСППоЛисту 			= ДанныеПечати.СуммаНСППоЛисту + ВыборкаТовары.СуммаНСП;
				ДанныеПечати.ВсегоПоЛисту 				= ДанныеПечати.ВсегоПоЛисту + ВыборкаТовары.Всего;
				ДанныеПечати.СтоимостьПоСчетуФактуре 	= ДанныеПечати.СтоимостьПоСчетуФактуре + ВыборкаТовары.Стоимость;
				ДанныеПечати.СуммаНДСПоСчетуФактуре 	= ДанныеПечати.СуммаНДСПоСчетуФактуре + ВыборкаТовары.СуммаНДС;
				ДанныеПечати.СуммаНСППоСчетуФактуре 	= ДанныеПечати.СуммаНСППоСчетуФактуре + ВыборкаТовары.СуммаНСП;
				ДанныеПечати.ВсегоПоСчетуФактуре 		= ДанныеПечати.ВсегоПоСчетуФактуре + ВыборкаТовары.Всего;
				
				МассивОбластей.Удалить(МассивОбластей.Количество() - 1);
				
			Иначе	
				// Заканчивается лист	
				// Нумерация листов начинается с 2, поэтому 2 лист это первый лист после титульного
				Если НомерЛиста = 2 Тогда
					ОбластьИтогиПервогоЛиста.Параметры.Заполнить(ДанныеПечати);
					ТабличныйДокумент.Вывести(ОбластьИтогиПервогоЛиста);
					
					Если НомерСФ = "009" ИЛИ НомерСФ = "010" Тогда
						ОбластьПодвалПервыйЛист.Параметры.Заполнить(ДанныеПечати);
						ТабличныйДокумент.Вывести(ОбластьПодвалПервыйЛист);
					Иначе
						ОбластьПодвал.Параметры.Заполнить(ДанныеПечати);
						ТабличныйДокумент.Вывести(ОбластьПодвал);
					КонецЕсли;
				Иначе
					ОбластьИтогиТекущегоЛиста.Параметры.Заполнить(ДанныеПечати);
					ТабличныйДокумент.Вывести(ОбластьИтогиТекущегоЛиста);
					
					ОбластьПодвал.Параметры.Заполнить(ДанныеПечати);
					ТабличныйДокумент.Вывести(ОбластьПодвал);
				КонецЕсли;	
				
				ДанныеПечати.СтоимостьПоЛисту 			= 0;
				ДанныеПечати.СуммаНДСПоЛисту 			= 0;
				ДанныеПечати.СуммаНСППоЛисту 			= 0;
				ДанныеПечати.ВсегоПоЛисту 				= 0;
				ДанныеПечати.СтоимостьПоСчетуФактуре 	= ДанныеПечати.СтоимостьПоСчетуФактуре + ВыборкаТовары.Стоимость;
				ДанныеПечати.СуммаНДСПоСчетуФактуре 	= ДанныеПечати.СуммаНДСПоСчетуФактуре + ВыборкаТовары.СуммаНДС;
				ДанныеПечати.СуммаНСППоСчетуФактуре 	= ДанныеПечати.СуммаНСППоСчетуФактуре + ВыборкаТовары.СуммаНСП;
				ДанныеПечати.ВсегоПоСчетуФактуре 		= ДанныеПечати.ВсегоПоСчетуФактуре + ВыборкаТовары.Всего;				
				
				// Начинается новый лист
				НомерЛистаСтрокой = Формат(НомерЛиста, "ЧГ=0");
				
				Если НомерЛиста < 10 Тогда
					ДанныеПечати.Лист1 = "";
					ДанныеПечати.Лист2 = "";
					ДанныеПечати.Лист3 = НомерЛистаСтрокой;
				ИначеЕсли НомерЛиста < 100 Тогда
					ДанныеПечати.Лист1 = "";
					ДанныеПечати.Лист2 = Сред(НомерЛистаСтрокой, 1, 1);
					ДанныеПечати.Лист3 = Сред(НомерЛистаСтрокой, 2, 1);
				Иначе
					ДанныеПечати.Лист1 = Сред(НомерЛистаСтрокой, 1, 1);
					ДанныеПечати.Лист2 = Сред(НомерЛистаСтрокой, 2, 1);
					ДанныеПечати.Лист3 = Сред(НомерЛистаСтрокой, 3, 1);
				КонецЕсли;
				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				Если НомерЛиста = КоличествоЛистов Тогда
					ОбластьЗаголовокЗаключительногоЛиста.Параметры.Заполнить(ДанныеПечати);
					ТабличныйДокумент.Вывести(ОбластьЗаголовокЗаключительногоЛиста);
				Иначе	
					ОбластьЗаголовокТекущегоЛиста.Параметры.Заполнить(ДанныеПечати);
					ТабличныйДокумент.Вывести(ОбластьЗаголовокТекущегоЛиста);
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
				ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
				
				МассивОбластей.Удалить(МассивОбластей.Количество() - 1);
				
				Если НомерСФ = "009" ИЛИ НомерСФ = "010" Тогда
					МассивОбластей.Удалить(МассивОбластей.Количество() - 1);	
					МассивОбластей.Добавить(ОбластьПодвал);	
				КонецЕсли;
				
				НомерЛиста = НомерЛиста + 1;
			КонецЕсли;
			
			ДанныеПечати.НомерСтроки = ДанныеПечати.НомерСтроки + 1;
		КонецЦикла;
				
		ОбластьИтогиПоСчетуФактуре.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Вывести(ОбластьИтогиПоСчетуФактуре);
		
		Если (НомерСФ = "009" ИЛИ НомерСФ = "010") И НомерЛиста = 2 Тогда
			ОбластьПодвалПервыйЛист.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластьПодвалПервыйЛист);
		Иначе	
			ОбластьПодвал.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластьПодвал);
		КонецЕсли;
			
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;	
КонецФункции

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактура007") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"СчетФактура007", НСтр("ru = 'Счет-фактура (007)'"), ПечатьСчетФактура007_008_009_010(МассивОбъектов, ОбъектыПечати, "007"));
	КонецЕсли;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактура008") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"СчетФактура008", НСтр("ru = 'Счет-фактура (008)'"), ПечатьСчетФактура007_008_009_010(МассивОбъектов, ОбъектыПечати, "008"));
	КонецЕсли;	
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактура009") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"СчетФактура009", НСтр("ru = 'Счет-фактура (009)'"), ПечатьСчетФактура007_008_009_010(МассивОбъектов, ОбъектыПечати, "009"));
	КонецЕсли;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактура010") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"СчетФактура010", НСтр("ru = 'Счет-фактура (010)'"), ПечатьСчетФактура007_008_009_010(МассивОбъектов, ОбъектыПечати, "010"));
	КонецЕсли;
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактура007";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура (007)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 1;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактура008";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура (008)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 2;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактура009";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура (009)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 3;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактура010";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура (010)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 4;
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "РеестрПоступлениеИзПереработки";     
	КомандаПечати.Представление  = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Реестр документов ""Электронный счет-фактура (выписанный)""'");
	КомандаПечати.Обработчик     = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает данные о файле xml.
// Параметры:
//	Реквизиты - Структура - данные для фабрики XDTO. 
//		* ИмяПакета - Строка - URI пространства имен.
//		* ОписаниеОшибки - Строка - описание ошибки.
//		* Прокси - WSПрокси - прокси для выбора сервиса.
//	ИмяТипаОбъекта - Строка - имя создаваемого типа объекта
//
// Возвращаемое значение:
//	ОбъектXDTO - созданный объект XDTO.
//
Функция СоздатьОбъектXDTO(Реквизиты, ИмяТипаОбъекта)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Реквизиты.Прокси.ФабрикаXDTO.Создать(Реквизиты.Прокси.ФабрикаXDTO.Тип(Реквизиты.ИмяПакета, ИмяТипаОбъекта));
	
КонецФункции

// Возвращает данные о файле xml.
// Параметры:
//	Реквизиты - Структура - данные для фабрики XDTO. 
//		* ИмяПакета - Строка - URI пространства имен.
//		* ОписаниеОшибки - Строка - описание ошибки.
//		* Прокси - WSПрокси - прокси для выбора сервиса.
//	ДанныеНоменклатуры - Массив - данные строк табличной части "Товары" документа ЭСФ.
//
// Возвращаемое значение:
//	ОбъектXDTO - созданный объект XDTO.
//
Функция goods(Реквизиты, ТаблицаНомеклатура, ДополнительныеПараметры)

	ОбъектXDTOgoods = СоздатьОбъектXDTO(Реквизиты, "goods");
	
	Период = ТекущаяДатаСеанса();
	
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаНомеклатура Цикл
		
		ЗначениеСтавки = УчетНДС.ПолучитьСтавкуНСП(Период, ДополнительныеПараметры.Организация, СтрокаТабличнойЧасти.СтавкаНСП);
		
		//Наименование	Ставка (%)	Код
		//0				0			50
		//1%			1			40
		//2%			2			30
		//3%			3			60
		//5%			5			80
		КодСтавкиНСП = "";
		Если ЗначениеСтавки = 0 
			Или ДополнительныеПараметры.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда 
			КодСтавкиНСП = 50;
		ИначеЕсли ЗначениеСтавки = 1 Тогда
			КодСтавкиНСП = 40;
		ИначеЕсли ЗначениеСтавки = 2 Тогда
			КодСтавкиНСП = 30;
		ИначеЕсли ЗначениеСтавки = 3 Тогда
			КодСтавкиНСП = 60;
		ИначеЕсли ЗначениеСтавки = 5 Тогда
			КодСтавкиНСП = 80;
		КонецЕсли;
				
		ОбъектXDTOgood = СоздатьОбъектXDTO(Реквизиты, "good");
		
		//ОбъектXDTOgood.vatCode = КодСтавкиНДС; // Код ставки НДС
		ОбъектXDTOgood.stCode = КодСтавкиНСП; // Код ставки НСП
		
		ОбъектXDTOgood.vatAmount = ?(ДополнительныеПараметры.ЭтоКорректировочныйСФ И НЕ ДополнительныеПараметры.Корректировка_ИзменениеЦены, 
			СтрокаТабличнойЧасти.СуммаНДСВВалютеРеглУчета * -1, СтрокаТабличнойЧасти.СуммаНДСВВалютеРеглУчета); // Сумма НДС (при возврате отрицательное)
			
		ОбъектXDTOgood.stAmount = ?(ДополнительныеПараметры.ЭтоКорректировочныйСФ И НЕ ДополнительныеПараметры.Корректировка_ИзменениеЦены, 
			СтрокаТабличнойЧасти.СуммаНСПВВалютеРеглУчета * -1, СтрокаТабличнойЧасти.СуммаНСПВВалютеРеглУчета); // Сумма НСП (при возврате отрицательное)
			
		ОбъектXDTOgood.goodsName = СтрокаТабличнойЧасти.НоменклатураНаименованиеПолное; // Наименование товара/услуги
		
		ОбъектXDTOgood.baseCount = ?(ДополнительныеПараметры.ЭтоКорректировочныйСФ И НЕ ДополнительныеПараметры.Корректировка_ИзменениеЦены, 
			СтрокаТабличнойЧасти.Количество * -1, СтрокаТабличнойЧасти.Количество); // Количество (при возврате отрицательное)
			
		// Если есть Скидка, то нужно пересчитать Цену.
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаСкидки) Тогда 
			СуммаСкидкиВВалютеРеглУчета = СтрокаТабличнойЧасти.СуммаСкидки * ДополнительныеПараметры.Курс;
			Если ДополнительныеПараметры.СуммаВключаетНалоги Тогда 
				Цена = ?(СтрокаТабличнойЧасти.Количество = 0, 
					0, 
					(СтрокаТабличнойЧасти.ВсегоВВалютеРеглУчета - СуммаСкидкиВВалютеРеглУчета) / СтрокаТабличнойЧасти.Количество); // Цена
			Иначе 
				Цена = ?(СтрокаТабличнойЧасти.Количество = 0, 
					0, 
					(СтрокаТабличнойЧасти.ВсегоВВалютеРеглУчета - СуммаСкидкиВВалютеРеглУчета - СтрокаТабличнойЧасти.СуммаНДСВВалютеРеглУчета - СтрокаТабличнойЧасти.СуммаНСПВВалютеРеглУчета) / СтрокаТабличнойЧасти.Количество); // Цена
			КонецЕсли;
		Иначе 
			Цена = СтрокаТабличнойЧасти.Цена * ДополнительныеПараметры.Курс;
		КонецЕсли;
		
		ОбъектXDTOgood.price = Окр(Цена, 5);
		
		ОбъектXDTOgoods.good.Добавить(ОбъектXDTOgood);
	КонецЦикла;	
	
	Возврат ОбъектXDTOgoods;	
КонецФункции // goods()

Функция КоличествоЛистовСчетФатуры(Макет, Шапка, НомерСФ)

	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если НомерСФ = "007" ИЛИ НомерСФ = "009" Тогда
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;	
	Иначе
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	КонецЕсли;
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	ОбластьЗаголовокТекущегоЛиста 	= Макет.ПолучитьОбласть("ЗаголовокТекущегоЛиста");
	ОбластьШапкаТаблицы 			= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьСтрокаТаблицы 			= Макет.ПолучитьОбласть("СтрокаТаблицы");
	ОбластьИтогиТекущегоЛиста 		= Макет.ПолучитьОбласть("ИтогиТекущегоЛиста");
	ОбластьПодвал 					= Макет.ПолучитьОбласть("Подвал");

	Если НомерСФ = "009" ИЛИ НомерСФ = "010" Тогда
		ОбластьПодвалПервыйЛист = Макет.ПолучитьОбласть("ПодвалПервыйЛист");
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
	
	МассивОбластей = Новый Массив();
	МассивОбластей.Добавить(ОбластьИтогиТекущегоЛиста);
	
	Если НомерСФ = "009" ИЛИ НомерСФ = "010" Тогда
		МассивОбластей.Добавить(ОбластьПодвалПервыйЛист);
	Иначе
		МассивОбластей.Добавить(ОбластьПодвал);	
	КонецЕсли;
	
	ДанныеПечати = Новый Структура();
	ДанныеПечати.Вставить("СтавкаНДС", 0);
	ДанныеПечати.Вставить("СтавкаНСП", 0);
	
	КоличествоЛистов = 1;
	
	Выборка = Шапка.Товары.Выбрать();	
	
	Пока Выборка.Следующий() Цикл
		ОбластьСтрокаТаблицы.Параметры.Заполнить(Выборка);
		ОбластьСтрокаТаблицы.Параметры.Заполнить(ДанныеПечати);
		
		МассивОбластей.Добавить(ОбластьСтрокаТаблицы);
		
		Если ТабличныйДокумент.ПроверитьВывод(МассивОбластей) Тогда			
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
			МассивОбластей.Удалить(МассивОбластей.Количество() - 1);
		Иначе	
			// Заканчивается лист
			ТабличныйДокумент.Вывести(ОбластьИтогиТекущегоЛиста);
			ТабличныйДокумент.Вывести(ОбластьПодвал);
			
			// Начинается новый лист
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();	
			ТабличныйДокумент.Вывести(ОбластьЗаголовокТекущегоЛиста);
			ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
			
			МассивОбластей.Удалить(МассивОбластей.Количество() - 1);
			
			Если (НомерСФ = "009" ИЛИ НомерСФ = "010") И КоличествоЛистов = 1 Тогда
				МассивОбластей.Удалить(МассивОбластей.Количество() - 1);
				МассивОбластей.Добавить(ОбластьПодвал);				
			КонецЕсли;
			
			КоличествоЛистов = КоличествоЛистов + 1;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат КоличествоЛистов;
КонецФункции

#КонецОбласти

#КонецЕсли