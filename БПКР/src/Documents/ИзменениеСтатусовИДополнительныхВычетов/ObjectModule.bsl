#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	ЗаполнениеОбъектовБП.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения);
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ИнициализироватьДанные(Отказ, РежимПроведения);
	
	ОтразитьДвижения(Отказ, РежимПроведения);
	
	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
		
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	ПроверяемыеРеквизиты.Добавить("Сотрудники");
	
	// Предварительный контроль
	ВыполнитьПредварительныйКонтроль(Отказ);	
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииОбработкаПроведения

// Процедура инициализирует данные документа
// и подготавливает таблицы для движения в регистры
//
Процедура ИнициализироватьДанные(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.ИзменениеСтатусовИДополнительныхВычетов.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
КонецПроцедуры
	
// Процедура заполняет регистры данными
//
Процедура ОтразитьДвижения(Отказ, РежимПроведения)

	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьСтатусыСотрудников(ДополнительныеСвойства, Движения, Отказ); 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура заполняет табличную часть
//
Процедура ЗаполнитьТабличнуюЧасть() Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиСрезПоследних.ФизЛицо КАК ФизЛицо
		|ПОМЕСТИТЬ ВременнаяТаблицаСотрудники
		|ИЗ
		|	РегистрСведений.Сотрудники.СрезПоследних(&НачалоПериода, Организация = &Организация) КАК СотрудникиСрезПоследних
		|ГДЕ
		|	СотрудникиСрезПоследних.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Сотрудники.ФизЛицо
		|ИЗ
		|	РегистрСведений.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Период > &НачалоПериода
		|	И Сотрудники.Период <= &КонецПериода
		|	И Сотрудники.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаСотрудники.ФизЛицо КАК ФизЛицо,
		|	СтатусыСотрудниковСрезПоследних.Статус КАК Статус,
		|	СтатусыСотрудниковСрезПоследних.ДопВычет КАК ДопВычет,
		|	СтатусыСотрудниковСрезПоследних.ПризнакРезидентства КАК ПризнакРезидентства
		|ИЗ
		|	ВременнаяТаблицаСотрудники КАК ВременнаяТаблицаСотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыСотрудников.СрезПоследних(
		|				&КонецПериода,
		|				Организация = &Организация
		|					И ФизЛицо В
		|						(ВЫБРАТЬ
		|							ВременнаяТаблицаСотрудники.ФизЛицо
		|						ИЗ
		|							ВременнаяТаблицаСотрудники КАК ВременнаяТаблицаСотрудники)) КАК СтатусыСотрудниковСрезПоследних
		|		ПО ВременнаяТаблицаСотрудники.ФизЛицо = СтатусыСотрудниковСрезПоследних.ФизЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВременнаяТаблицаСотрудники.ФизЛицо.Наименование";
	Запрос.УстановитьПараметр("Организация", Организация);	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Дата));
	
	Сотрудники.Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры // ЗаполнитьТабличнуюЧасть()

// Процедура выполняет контроль противоречий.
//
Процедура ВыполнитьПредварительныйКонтроль(Отказ)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВременнаяТаблицаСотрудники.НомерСтроки КАК НомерСтроки,
		|	ВременнаяТаблицаСотрудники.ФизЛицо КАК ФизЛицо
		|ПОМЕСТИТЬ ВременнаяТаблицаСотрудники
		|ИЗ
		|	&ВременнаяТаблицаСотрудники КАК ВременнаяТаблицаСотрудники
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтатусыСотрудниковСрезПоследних.Регистратор КАК Регистратор,
		|	СтатусыСотрудниковСрезПоследних.ФизЛицо КАК ФизЛицо,
		|	МИНИМУМ(ВременнаяТаблицаСотрудники.НомерСтроки) КАК НомерСтроки
		|ИЗ
		|	ВременнаяТаблицаСотрудники КАК ВременнаяТаблицаСотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыСотрудников.СрезПоследних(
		|				&Период,
		|				НЕ Регистратор = &Ссылка
		|					И Организация = &Организация
		|					И ФизЛицо В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							ВременнаяТаблицаСотрудники.ФизЛицо
		|						ИЗ
		|							ВременнаяТаблицаСотрудники КАК ВременнаяТаблицаСотрудники)) КАК СтатусыСотрудниковСрезПоследних
		|		ПО ВременнаяТаблицаСотрудники.ФизЛицо = СтатусыСотрудниковСрезПоследних.ФизЛицо
		|ГДЕ
		|	СтатусыСотрудниковСрезПоследних.Период = &Период
		|
		|СГРУППИРОВАТЬ ПО
		|	СтатусыСотрудниковСрезПоследних.Регистратор,
		|	СтатусыСотрудниковСрезПоследних.ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ТаблицаСотрудникиДублиСтрок.НомерСтроки) КАК НомерСтроки,
		|	ТаблицаСотрудникиДублиСтрок.ФизЛицо КАК ФизЛицо
		|ИЗ
		|	ВременнаяТаблицаСотрудники КАК ВременнаяТаблицаСотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСотрудники КАК ТаблицаСотрудникиДублиСтрок
		|		ПО ВременнаяТаблицаСотрудники.НомерСтроки <> ТаблицаСотрудникиДублиСтрок.НомерСтроки
		|			И ВременнаяТаблицаСотрудники.ФизЛицо = ТаблицаСотрудникиДублиСтрок.ФизЛицо
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаСотрудникиДублиСтрок.ФизЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки");                          	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Параметры.Вставить("Период", Дата);
	Запрос.Параметры.Вставить("Организация", Организация);
	Запрос.Параметры.Вставить("ВременнаяТаблицаСотрудники", Сотрудники.Выгрузить());
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Регистр "СтатусыСотрудников"
	Если НЕ МассивРезультатов[2].Пустой() Тогда
		ВыборкаИзРезультатаЗапроса = МассивРезультатов[2].Выбрать();
		Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Период действия документа противоречит документу ""%1"" по сотруднику ""%2"" в строке %3 списка ""Сотрудники"".'"), 
							ВыборкаИзРезультатаЗапроса.Регистратор, ВыборкаИзРезультатаЗапроса.ФизЛицо, ВыборкаИзРезультатаЗапроса.НомерСтроки);
			БухгалтерскийУчетСервер.СообщитьОбОшибке(
				ЭтотОбъект,
				ТекстСообщения,
				"Сотрудники",
				ВыборкаИзРезультатаЗапроса.НомерСтроки,
				"ФизЛицо",
				Отказ);
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли