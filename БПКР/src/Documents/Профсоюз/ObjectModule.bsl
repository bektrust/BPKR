#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	ЗаполнениеОбъектовБП.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения);
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ИнициализироватьДанные(Отказ, РежимПроведения);
	
	ОтразитьДвижения(Отказ, РежимПроведения);
	
	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
		
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	ПроверяемыеРеквизиты.Добавить("Сотрудники");
	
	// Предварительный контроль
	ВыполнитьПредварительныйКонтроль(Отказ);	
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииОбработкаПроведения

// Процедура инициализирует данные документа
// и подготавливает таблицы для движения в регистры
//
Процедура ИнициализироватьДанные(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.Профсоюз.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
КонецПроцедуры
	
// Процедура заполняет регистры данными
//
Процедура ОтразитьДвижения(Отказ, РежимПроведения)

	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьПрофсоюз(ДополнительныеСвойства, Движения, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет контроль противоречий.
//
Процедура ВыполнитьПредварительныйКонтроль(Отказ)
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВременнаяТаблицаСотрудники.ФизЛицо,
		|	ВременнаяТаблицаСотрудники.НомерСтроки,
		|	ВременнаяТаблицаСотрудники.ВидДвижения
		|ПОМЕСТИТЬ ВременнаяТаблицаСотрудники
		|ИЗ
		|	&ВременнаяТаблицаСотрудники КАК ВременнаяТаблицаСотрудники
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаСотрудники.ФизЛицо,
		|	ВременнаяТаблицаСотрудники.НомерСтроки КАК НомерСтроки,
		|	ЕСТЬNULL(ПрофсоюзСрезПоследних.Регистратор, ЗНАЧЕНИЕ(Документ.Профсоюз.ПустаяСсылка)) КАК Регистратор,
		|	ПрофсоюзСрезПоследних.ВидДвижения
		|ИЗ
		|	ВременнаяТаблицаСотрудники КАК ВременнаяТаблицаСотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Профсоюз.СрезПоследних(
		|				&Период,
		|				Организация = &Организация
		|					И (ФизЛицо) В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							ВременнаяТаблицаСотрудники.ФизЛицо
		|						ИЗ
		|							ВременнаяТаблицаСотрудники КАК ВременнаяТаблицаСотрудники)
		|					И НЕ Регистратор = &Ссылка) КАК ПрофсоюзСрезПоследних
		|		ПО ВременнаяТаблицаСотрудники.ФизЛицо = ПрофсоюзСрезПоследних.ФизЛицо
		|ГДЕ
		|	ВременнаяТаблицаСотрудники.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПоПрофсоюзам.Выход)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаСотрудники.ФизЛицо,
		|	ВременнаяТаблицаСотрудники.НомерСтроки КАК НомерСтроки,
		|	ЕСТЬNULL(ПрофсоюзСрезПоследних.Регистратор, ЗНАЧЕНИЕ(Документ.Профсоюз.ПустаяСсылка)) КАК Регистратор,
		|	ПрофсоюзСрезПоследних.ВидДвижения
		|ИЗ
		|	ВременнаяТаблицаСотрудники КАК ВременнаяТаблицаСотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Профсоюз.СрезПоследних(
		|				&Период,
		|				Организация = &Организация
		|					И (ФизЛицо) В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							ВременнаяТаблицаСотрудники.ФизЛицо
		|						ИЗ
		|							ВременнаяТаблицаСотрудники КАК ВременнаяТаблицаСотрудники)
		|					И НЕ Регистратор = &Ссылка) КАК ПрофсоюзСрезПоследних
		|		ПО ВременнаяТаблицаСотрудники.ФизЛицо = ПрофсоюзСрезПоследних.ФизЛицо
		|ГДЕ
		|	ВременнаяТаблицаСотрудники.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПоПрофсоюзам.Вступление)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ТаблицаСотрудникиДублиСтрок.НомерСтроки) КАК НомерСтроки,
		|	ТаблицаСотрудникиДублиСтрок.ФизЛицо
		|ИЗ
		|	ВременнаяТаблицаСотрудники КАК ВременнаяТаблицаСотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСотрудники КАК ТаблицаСотрудникиДублиСтрок
		|		ПО ВременнаяТаблицаСотрудники.НомерСтроки <> ТаблицаСотрудникиДублиСтрок.НомерСтроки
		|			И ВременнаяТаблицаСотрудники.ФизЛицо = ТаблицаСотрудникиДублиСтрок.ФизЛицо
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаСотрудникиДублиСтрок.ФизЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки");
	Запрос.УстановитьПараметр("ВременнаяТаблицаСотрудники", Сотрудники.Выгрузить());
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Контроль выхода.
	Если НЕ МассивРезультатов[1].Пустой() Тогда
		ВыборкаИзРезультатаЗапроса = МассивРезультатов[1].Выбрать();
		Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаИзРезультатаЗапроса.Регистратор) Тогда 
				ТекстСообщения = СтрШаблон(НСтр("ru = 'На сотрудника ""%1"" не найдено документа о вхождении.'"), 
								ВыборкаИзРезультатаЗапроса.ФизЛицо);
			ИначеЕсли ВыборкаИзРезультатаЗапроса.ВидДвижения = Перечисления.ВидыДвиженийПоПрофсоюзам.Выход Тогда 
				ТекстСообщения = СтрШаблон(НСтр("ru = 'На сотрудника ""%1"" уже оформлен документ о выходе: ""%2"".'"), 
								ВыборкаИзРезультатаЗапроса.ФизЛицо, ВыборкаИзРезультатаЗапроса.Регистратор);
			Иначе 
				Продолжить;
			КонецЕсли;	
							
			БухгалтерскийУчетСервер.СообщитьОбОшибке(
				ЭтотОбъект,
				ТекстСообщения,
				"Сотрудники",
				ВыборкаИзРезультатаЗапроса.НомерСтроки,
				"ФизЛицо",
				Отказ);
		КонецЦикла;	
	КонецЕсли;		
	
	// Контроль выхода.
	Если НЕ МассивРезультатов[2].Пустой() Тогда
		ВыборкаИзРезультатаЗапроса = МассивРезультатов[2].Выбрать();
		Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
			Если ВыборкаИзРезультатаЗапроса.ВидДвижения = Перечисления.ВидыДвиженийПоПрофсоюзам.Вступление Тогда 
				ТекстСообщения = СтрШаблон(НСтр("ru = 'На сотрудника ""%1"" уже оформлен документ о вступлении: ""%2"".'"), 
								ВыборкаИзРезультатаЗапроса.ФизЛицо, ВыборкаИзРезультатаЗапроса.Регистратор);
			Иначе 
				Продолжить;
			КонецЕсли;	
							
			БухгалтерскийУчетСервер.СообщитьОбОшибке(
				ЭтотОбъект,
				ТекстСообщения,
				"Сотрудники",
				ВыборкаИзРезультатаЗапроса.НомерСтроки,
				"ФизЛицо",
				Отказ);
		КонецЦикла;	
	КонецЕсли;
	
	// Дубли строк.
	Если НЕ МассивРезультатов[3].Пустой() Тогда
		ВыборкаИзРезультатаЗапроса = МассивРезультатов[3].Выбрать();
		Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Сотрудник указывается повторно в строке %1 списка ""Сотрудники"".'"), 
							ВыборкаИзРезультатаЗапроса.НомерСтроки);
			БухгалтерскийУчетСервер.СообщитьОбОшибке(
				ЭтотОбъект,
				ТекстСообщения,
				"Соответствия",
				ВыборкаИзРезультатаЗапроса.НомерСтроки,
				"СчетУчета",
				Отказ);
		КонецЦикла;
	КонецЕсли;		
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли