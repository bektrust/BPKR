#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	ЗаполнениеОбъектовБП.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения);
КонецПроцедуры

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если МетодРасчета.ВидОтпуска = Перечисления.ВидыОтпусков.БезСодержания
		И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда 
		СреднийЗаработок.Очистить();
		Начисления.Очистить();		
		РассчитатьТабличнуюЧасть(0);
	КонецЕсли;
	
	СуммаНачислений = Начисления.Итог("Результат");
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ИнициализироватьДанные(Отказ, РежимПроведения);
	
	ОтразитьДвижения(Отказ, РежимПроведения);

	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
		
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;

	Если НЕ МетодРасчета.ВидОтпуска = Перечисления.ВидыОтпусков.БезСодержания Тогда 
		ПроверяемыеРеквизиты.Добавить("Начисления");
	Иначе 
		МассивНепроверяемыхРеквизитов.Добавить("Начисления.СпособОтражения");	
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(МетодРасчета.ВидРасчета) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "КОРРЕКТНОСТЬ", НСтр("ru = 'Метод расчета'"),,,
			НСтр("ru = 'В указанном методе необходимо заполнить ""Вид начисления отпуска"".'"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "Объект.МетодРасчета",,Отказ);		
	КонецЕсли;	
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры // ОбработкаПроверкиЗаполнения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииОбработкаПроведения

// Процедура инициализирует данные документа
// и подготавливает таблицы для движения в регистры
//
Процедура ИнициализироватьДанные(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.Отпуск.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
КонецПроцедуры
	
// Процедура заполняет регистры данными
//
Процедура ОтразитьДвижения(Отказ, РежимПроведения)

	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьНачисления(ДополнительныеСвойства, Движения, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура заполняет табличную часть
//
Процедура ЗаполнитьТабличнуюЧасть() Экспорт 
	// Определение количества месяцев.
	КоличествоМесяцев = МетодРасчета.ВидРасчета.ПериодРасчетаСреднегоЗаработка;
	Если КоличествоМесяцев = 0 Тогда 
		КоличествоМесяцев = 3;
	КонецЕсли;	
	
	НеполныеМесяцы = МетодРасчета.НеполныеМесяцы;
	
	// Корректировка скрытого периода.
	Если МетодРасчета.ВидОтпуска = Перечисления.ВидыОтпусков.Компенсация Тогда 
		ДатаНачала = Дата;
		ДатаОкончания = Дата;
	КонецЕсли;
	
	Если НеполныеМесяцы = ПредопределенноеЗначение("Перечисление.НеполныеМесяцы.Отбрасывать") Тогда 
		БазовыйПериодНачало = ДобавитьМесяц(НачалоМесяца(ДатаНачала), - 12);
		БазовыйПериодКонец = НачалоМесяца(ДатаНачала) - 1;
	Иначе 
		БазовыйПериодНачало = ДобавитьМесяц(НачалоМесяца(ДатаНачала), -КоличествоМесяцев);
		БазовыйПериодКонец = НачалоМесяца(ДатаНачала) - 1;
	КонецЕсли;	
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.Дата, МЕСЯЦ) КАК ПериодРегистрации,
		|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.Дата, МЕСЯЦ) КАК ПериодДействияНачало,
		|	КОНЕЦПЕРИОДА(ТаблицаДокумента.Дата, МЕСЯЦ) КАК ПериодДействияКонец,
		|	&БазовыйПериодНачало,
		|	&БазовыйПериодКонец,
		|	ТаблицаДокумента.МетодРасчета.ВидРасчета КАК ВидРасчета,
		|	ТаблицаДокумента.ФизЛицо,
		|	ТаблицаДокумента.Организация,
		|	ТаблицаДокумента.ГрафикРаботы,
		|	ТаблицаДокумента.Подразделение,
		|	ТаблицаДокумента.Должность
		|ИЗ
		|	Документ.Отпуск КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);	
	Запрос.УстановитьПараметр("БазовыйПериодНачало", БазовыйПериодНачало);	
	Запрос.УстановитьПараметр("БазовыйПериодКонец", БазовыйПериодКонец);	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаНачисления", РезультатЗапроса.Выгрузить());
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьНачисления(ДополнительныеСвойства, Движения, Ложь);

	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
	Ошибки = Неопределено;
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("РасчетПоРабочимДням", МетодРасчета.РасчетПоРабочимДням);
	ДополнительныеПараметры.Вставить("КоэффициентРасчета", 	МетодРасчета.КоэффициентРасчета);
	
	ПроведениеРасчетовПоЗарплатеСервер.ЗаполнитьТабличнуюЧастьСреднийЗаработок(КоличествоМесяцев, БазовыйПериодНачало, БазовыйПериодКонец, 
							ГрафикРаботы, Ссылка, НеполныеМесяцы, СреднийЗаработок, Ошибки, ДополнительныеПараметры);
															
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	СреднийЗаработок.Сортировать("ПериодРегистрации");
	
КонецПроцедуры // ЗаполнитьТабличнуюЧасть()

// Процедура рассчитывает табличную часть
//
Процедура РассчитатьТабличнуюЧасть(РазмерСреднийЗаработок) Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.ГрафикРаботы КАК ГрафикРаботы,
		|	&ВидРасчета КАК ВидРасчета,
		|	&Размер КАК Размер,
		|	ВЫБОР
		|		КОГДА &ЭтоКомпенсация
		|			ТОГДА &Дней * &Размер
		|		ИНАЧЕ ВложенныйЗапрос.ОтработаноДней * &Размер
		|	КОНЕЦ КАК Результат,
		|	ВложенныйЗапрос.ПериодРегистрации КАК ПериодРегистрации,
		|	ВЫБОР
		|		КОГДА &ЭтоКомпенсация
		|			ТОГДА &Дней
		|		ИНАЧЕ ВложенныйЗапрос.ОтработаноДней
		|	КОНЕЦ КАК ОтработаноДней,
		|	ВложенныйЗапрос.ДатаНачала КАК ДатаНачала,
		|	ВложенныйЗапрос.ДатаОкончания КАК ДатаОкончания
		|ИЗ
		|	(ВЫБРАТЬ
		|		КалендариГрафиковРабот.ГрафикРаботы КАК ГрафикРаботы,
		|		НАЧАЛОПЕРИОДА(КалендариГрафиковРабот.Дата, МЕСЯЦ) КАК ПериодРегистрации,
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КалендариГрафиковРабот.Дата) КАК ОтработаноДней,
		|		ВЫБОР
		|			КОГДА НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ) = НАЧАЛОПЕРИОДА(КалендариГрафиковРабот.Дата, МЕСЯЦ)
		|				ТОГДА &НачалоПериода
		|			ИНАЧЕ НАЧАЛОПЕРИОДА(КалендариГрафиковРабот.Дата, МЕСЯЦ)
		|		КОНЕЦ КАК ДатаНачала,
		|		ВЫБОР
		|			КОГДА КОНЕЦПЕРИОДА(&КонецПериода, МЕСЯЦ) = КОНЕЦПЕРИОДА(КалендариГрафиковРабот.Дата, МЕСЯЦ)
		|				ТОГДА &КонецПериода
		|			ИНАЧЕ КОНЕЦПЕРИОДА(КалендариГрафиковРабот.Дата, МЕСЯЦ)
		|		КОНЕЦ КАК ДатаОкончания
		|	ИЗ
		|		РегистрСведений.КалендариГрафиковРабот КАК КалендариГрафиковРабот
		|	ГДЕ
		|		КалендариГрафиковРабот.ГрафикРаботы = &ГрафикРаботы
		|		И (КалендариГрафиковРабот.Год = &ГодНачалоПериода
		|				ИЛИ КалендариГрафиковРабот.Год = &ГодКонецПериода)
		|		И КалендариГрафиковРабот.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|		И &РасчетПоРабочимДням
		|	
		|	СГРУППИРОВАТЬ ПО
		|		КалендариГрафиковРабот.ГрафикРаботы,
		|		НАЧАЛОПЕРИОДА(КалендариГрафиковРабот.Дата, МЕСЯЦ),
		|		ВЫБОР
		|			КОГДА НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ) = НАЧАЛОПЕРИОДА(КалендариГрафиковРабот.Дата, МЕСЯЦ)
		|				ТОГДА &НачалоПериода
		|			ИНАЧЕ НАЧАЛОПЕРИОДА(КалендариГрафиковРабот.Дата, МЕСЯЦ)
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА КОНЕЦПЕРИОДА(&КонецПериода, МЕСЯЦ) = КОНЕЦПЕРИОДА(КалендариГрафиковРабот.Дата, МЕСЯЦ)
		|				ТОГДА &КонецПериода
		|			ИНАЧЕ КОНЕЦПЕРИОДА(КалендариГрафиковРабот.Дата, МЕСЯЦ)
		|		КОНЕЦ) КАК ВложенныйЗапрос
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПериодРегистрации";
	Если МетодРасчета.РасчетПоРабочимДням Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&РасчетПоРабочимДням",
			"(КалендариГрафиковРабот.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
			|ИЛИ КалендариГрафиковРабот.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный))");
	Иначе 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&РасчетПоРабочимДням", 
			"НЕ КалендариГрафиковРабот.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	ЭтоКомпенсация = МетодРасчета.ВидОтпуска = Перечисления.ВидыОтпусков.Компенсация;
	
	Запрос.УстановитьПараметр("ГодНачалоПериода", Год(ДатаНачала));
	Запрос.УстановитьПараметр("ГодКонецПериода", Год(ДатаОкончания));
	Запрос.УстановитьПараметр("НачалоПериода", ?(ЭтоКомпенсация, Дата, ДатаНачала));
	Запрос.УстановитьПараметр("КонецПериода", ?(ЭтоКомпенсация, Дата, ДатаОкончания));
	Запрос.УстановитьПараметр("ВидРасчета", МетодРасчета.ВидРасчета);
	Запрос.УстановитьПараметр("ГрафикРаботы", ?(МетодРасчета.РасчетПоРабочимДням, МетодРасчета.ГрафикРаботы, ГрафикРаботы));
	Запрос.УстановитьПараметр("Размер", РазмерСреднийЗаработок);
	Запрос.УстановитьПараметр("ЭтоКомпенсация", ЭтоКомпенсация);
	Запрос.УстановитьПараметр("Дней", Дней);
	
	Начисления.Загрузить(Запрос.Выполнить().Выгрузить());
	
	СтруктураОтбора = ПроведениеРасчетовПоЗарплатеСервер.СтруктураОтбораСпособыОтраженияЗаработнойПлаты();
	
	// Определение способа отражения.
	Для Каждого СтрокаТабличнойЧасти Из Начисления Цикл 
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТабличнойЧасти);
		СтруктураОтбора.Подразделение = Подразделение;
		СтрокаТабличнойЧасти.СпособОтражения = ПроведениеРасчетовПоЗарплатеСервер.СпособОтраженияЗаработнойПлаты(СтруктураОтбора);		
	КонецЦикла;	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли