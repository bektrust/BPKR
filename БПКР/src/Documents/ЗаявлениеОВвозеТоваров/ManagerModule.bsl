#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

// Устанавливает параметры загрузки.
//
//@skip-warning
Процедура УстановитьПараметрыЗагрузкиИзФайлаВТЧ(Параметры) Экспорт
	
КонецПроцедуры

// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
//
// Параметры:
//   АдресЗагружаемыхДанных    - Строка - Адрес временного хранилища с таблицей значений, в которой
//                                        находятся загруженные данные из файла. Состав колонок:
//     * Идентификатор - Число - Порядковый номер строки;
//     * остальные колонки соответствуют колонкам макета ЗагрузкаИзФайла.
//   АдресТаблицыСопоставления - Строка - Адрес временного хранилища с пустой таблицей значений,
//                                        являющейся копией табличной части документа, 
//                                        которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
//   СписокНеоднозначностей - ТаблицаЗначений - Список неоднозначных значений, для которых в ИБ имеется несколько
//                                              подходящих вариантов.
//     * Колонка       - Строка - Имя колонки, в которой была обнаружена неоднозначность;
//     * Идентификатор - Число  - Идентификатор строки, в которой была обнаружена неоднозначность.
//   ПолноеИмяТабличнойЧасти   - Строка - Полное имя табличной части, в которую загружаются данные.
//   ДополнительныеПараметры   - ЛюбойТип - Любые дополнительные сведения.
//
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ПолноеИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт
		
	Товары = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления);
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
	
	ТаблицаНоменклатура = ЗагрузкаДанныхИзФайлаПереопределяемыйБП.СопоставитьНоменклатуруДоПервогоСовпадения(ЗагружаемыеДанные); 
	
	Для Каждого СтрокаТаблицы Из ЗагружаемыеДанные Цикл
		СтрокаТабличнойЧасти = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТаблицы); 
		
		СтрокаТабличнойЧасти.Идентификатор = СтрокаТаблицы.Идентификатор;
		//СтрокаТабличнойЧасти.Количество = СтрокаТаблицы.Количество;
		//СтрокаТабличнойЧасти.Стоимость = СтрокаТаблицы.Стоимость;
		//СтрокаТабличнойЧасти.СерияНомерСопроводительной = СтрокаТаблицы.СерияНомерСопроводительной;
		//СтрокаТабличнойЧасти.ДатаСопроводительной = СтрокаТаблицы.ДатаСопроводительной;
		//СтрокаТабличнойЧасти.СерияНомерСФ = СтрокаТаблицы.СерияНомерСФ;
		//СтрокаТабличнойЧасти.ДатаСФ = СтрокаТаблицы.ДатаСФ;
		//СтрокаТабличнойЧасти.ДатаПринятияНаУчет = СтрокаТаблицы.ДатаПринятияНаУчет;
		//СтрокаТабличнойЧасти.НалоговаяБазаАкциз = СтрокаТаблицы.НалоговаяБазаАкциз;
		//СтрокаТабличнойЧасти.НалоговаяБазаНДС = СтрокаТаблицы.НалоговаяБазаНДС;
		//СтрокаТабличнойЧасти.СтавкаАкцизТверд = СтрокаТаблицы.СтавкаАкцизТверд;
		//СтрокаТабличнойЧасти.СтавкаАкцизАдвалор = СтрокаТаблицы.СтавкаАкцизАдвалор;
		//СтрокаТабличнойЧасти.ЗначениеСтавкиНДС = СтрокаТаблицы.ЗначениеСтавкиНДС;
		//СтрокаТабличнойЧасти.СуммаАкциза = СтрокаТаблицы.СуммаАкциза;
		//СтрокаТабличнойЧасти.СуммаНДС = СтрокаТаблицы.СуммаНДС;
					
		СтрокаНоменклатура = ТаблицаНоменклатура.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
		Если СтрокаНоменклатура <> Неопределено Тогда 
			Если СтрокаНоменклатура.Количество = 1 Тогда 
				СтрокаТабличнойЧасти.Номенклатура = СтрокаНоменклатура.Ссылка;
			ИначеЕсли СтрокаНоменклатура.Количество > 1 Тогда
				ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
				ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор; 
				ЗаписьОНеоднозначности.Колонка = "Номенклатура";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Товары, АдресТаблицыСопоставления);
		
КонецПроцедуры

// Возвращает список подходящих объектов ИБ для неоднозначного значения ячейки.
// 
// Параметры:
//   ПолноеИмяТабличнойЧасти  - Строка - Полное имя табличной части, в которую загружаются данные.
//  ИмяКолонки                - Строка - Имя колонки, в который возникла неоднозначность.
//  СписокНеоднозначностей    - Массив - Массив для заполнения с неоднозначными данными.
//  ЗагружаемыеЗначенияСтрока - Строка - Загружаемые данные на основании которых возникла неоднозначность.
//  ДополнительныеПараметры   - ЛюбойТип - Любые дополнительные сведения.
//
Процедура ЗаполнитьСписокНеоднозначностей(ПолноеИмяТабличнойЧасти, СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока, ДополнительныеПараметры) Экспорт
	
	Если ИмяКолонки = "Номенклатура" Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Номенклатура.Ссылка
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.Номенклатура);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СписокНеоднозначностей.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

#КонецОбласти

#Область ПроцедурыПроведенияДокумента

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСведенияОВвозимыхТоварах(СтруктураДополнительныеСвойства) 
	                   
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.ДокументПоступления КАК ДокументСсылка,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.Дата КАК Дата,
		|	ВременнаяТаблицаШапка.Номер КАК НомерДокумента,
		|	ВременнаяТаблицаШапка.КодСтраны КАК КодСтраны,
		|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаТовары.КодТНВЭД КАК КодТНВЭД,
		|	СУММА(ВременнаяТаблицаТовары.Стоимость) КАК Стоимость,
		|	СУММА(ВременнаяТаблицаТовары.Количество) КАК Количество,
		|	ВременнаяТаблицаТовары.Цена КАК Цена,
		|	СУММА(ВременнаяТаблицаТовары.СуммаАкциза) КАК СуммаАкциза,
		|	СУММА(ВременнаяТаблицаТовары.СуммаНДС) КАК СуммаНДС,
		|	МИНИМУМ(ВременнаяТаблицаТовары.НомерСтроки) КАК НомерСтрокиВДокументе,
		|	ВременнаяТаблицаТовары.ДокументПоступления.Дата КАК ДатаПоступления,
		|	СУММА(ВЫБОР
		|			КОГДА ВременнаяТаблицаТовары.ЗачетНДС = ЗНАЧЕНИЕ(Перечисление.ВидыЗачетаНДС.Зачет)
		|					ИЛИ ВременнаяТаблицаТовары.ЗачетНДС = ЗНАЧЕНИЕ(Перечисление.ВидыЗачетаНДС.ПустаяСсылка)
		|				ТОГДА ВременнаяТаблицаТовары.СуммаНДС
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаНДСЗачет
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ПО (ИСТИНА)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаТовары.ДокументПоступления,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Номер,
		|	ВременнаяТаблицаШапка.КодСтраны,
		|	ВременнаяТаблицаТовары.Номенклатура,
		|	ВременнаяТаблицаТовары.ДокументПоступления.Дата,
		|	ВременнаяТаблицаТовары.КодТНВЭД,
		|	ВременнаяТаблицаТовары.Цена";		
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСведенияОВвозимыхТоварах", Запрос.Выполнить().Выгрузить());		
КонецПроцедуры 

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаявлениеОВвозеТоваров.Ссылка КАК Ссылка,
		|	ЗаявлениеОВвозеТоваров.Организация КАК Организация,
		|	ЗаявлениеОВвозеТоваров.Дата КАК Дата,
		|	ЗаявлениеОВвозеТоваров.Номер КАК Номер,
		|	ЗаявлениеОВвозеТоваров.Контрагент.СтранаРезидентства.Код КАК КодСтраны
		|ПОМЕСТИТЬ ВременнаяТаблицаШапка
		|ИЗ
		|	Документ.ЗаявлениеОВвозеТоваров КАК ЗаявлениеОВвозеТоваров
		|ГДЕ
		|	ЗаявлениеОВвозеТоваров.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаявлениеОВвозеТоваровТовары.ДокументПоступления КАК ДокументПоступления,
		|	ЗаявлениеОВвозеТоваровТовары.Номенклатура КАК Номенклатура,
		|	ЗаявлениеОВвозеТоваровТовары.КодТНВЭД КАК КодТНВЭД,
		|	ЗаявлениеОВвозеТоваровТовары.Стоимость * ЗаявлениеОВвозеТоваровТовары.Курс / ЗаявлениеОВвозеТоваровТовары.Кратность КАК Стоимость,
		|	ЗаявлениеОВвозеТоваровТовары.Количество КАК Количество,
		|	ВЫБОР
		|		КОГДА ЗаявлениеОВвозеТоваровТовары.Количество = 0
		|			ТОГДА 0
		|		ИНАЧЕ ЗаявлениеОВвозеТоваровТовары.Цена * ЗаявлениеОВвозеТоваровТовары.Курс / ЗаявлениеОВвозеТоваровТовары.Кратность
		|	КОНЕЦ КАК Цена,
		|	ЗаявлениеОВвозеТоваровТовары.СуммаАкциза КАК СуммаАкциза,
		|	ЗаявлениеОВвозеТоваровТовары.СуммаНДС КАК СуммаНДС,
		|	ЗаявлениеОВвозеТоваровТовары.ЗачетНДС КАК ЗачетНДС,
		|	ЗаявлениеОВвозеТоваровТовары.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВременнаяТаблицаТовары
		|ИЗ
		|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваровТовары
		|ГДЕ
		|	ЗаявлениеОВвозеТоваровТовары.Ссылка = &Ссылка";	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);	
	Запрос.Выполнить();    		
	
	СформироватьТаблицаСведенияОВвозимыхТоварах(СтруктураДополнительныеСвойства);
КонецПроцедуры // ИнициализироватьДанныеДокумента()

#КонецОбласти

#Область ВерсионированиеОбъектов

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//@skip-warning
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область ИнтерфейсПечати

Функция ПечатьЗаявленияОВвозе(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ЗаявлениеОВвозеТоваров_ЗаявлениеОВвозеТоваров";
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗаявлениеОВвозеТоваров.Ссылка КАК Ссылка,
		|	ЗаявлениеОВвозеТоваров.Дата КАК Дата,
		|	ЗаявлениеОВвозеТоваров.Номер КАК Номер,
		|	ЗаявлениеОВвозеТоваров.Организация КАК Организация,
		|	ЗаявлениеОВвозеТоваров.Организация.ИНН КАК ОрганизацияИНН,
		|	ЗаявлениеОВвозеТоваров.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
		|	ЗаявлениеОВвозеТоваров.Контрагент КАК Контрагент,
		|	ЗаявлениеОВвозеТоваров.Контрагент.ИНН КАК КонтрагентИНН,
		|	ЗаявлениеОВвозеТоваров.Контрагент.НаименованиеПолное КАК КонтрагентНаименованиеПолное,
		|	ЗаявлениеОВвозеТоваров.Контрагент.СтранаРезидентства.Код КАК КонтрагентСтрана,
		|	ЗаявлениеОВвозеТоваров.ДоговорКонтрагента.НомерДоговора КАК НомерДоговора,
		|	ЗаявлениеОВвозеТоваров.ДоговорКонтрагента.ДатаДоговора КАК ДатаДоговора,
		|	ЗаявлениеОВвозеТоваров.НомерСпецификации КАК НомерСпецификации,
		|	ЗаявлениеОВвозеТоваров.ДатаСпецификации КАК ДатаСпецификации,
		|	ЗаявлениеОВвозеТоваров.ВалютаДокумента.Код КАК ВалютаКод,
		|	ЗаявлениеОВвозеТоваров.НомерЗаявленияУточнения КАК НомерЗаявленияУточнения,
		|	ЗаявлениеОВвозеТоваров.ДатаЗаявленияУточнения КАК ДатаЗаявленияУточнения,
		|	ЗаявлениеОВвозеТоваров.СтатусДокумента КАК СтатусДокумента,
		|	ЗаявлениеОВвозеТоваров.Товары.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура.Наименование КАК НоменклатураНаименование,
		|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		Номенклатура.КодТНВЭД КАК КодТНВЭД,
		|		Количество КАК Количество,
		|		Стоимость КАК Стоимость,
		|		СерияНомерСопроводительной КАК СерияНомерСопроводительной,
		|		ДатаСопроводительной КАК ДатаСопроводительной,
		|		СерияНомерСФ КАК СерияНомерСФ,
		|		ДатаСФ КАК ДатаСФ,
		|		ДатаПринятияНаУчет КАК ДатаПринятияНаУчет,
		|		НалоговаяБазаАкциз КАК НалоговаяБазаАкциз,
		|		НалоговаяБазаНДС КАК НалоговаяБазаНДС,
		|		СтавкаАкцизТверд КАК СтавкаАкцизТверд,
		|		СтавкаАкцизАдвалор КАК СтавкаАкцизАдвалор,
		|		СуммаАкциза КАК СуммаАкциза,
		|		СуммаНДС КАК СуммаНДС,
		|		ЗначениеСтавкиНДС КАК СтавкаНДС,
		|		Курс КАК Курс,
		|		ВЫБОР
		|			КОГДА ДокументПоступления ССЫЛКА Документ.ПоступлениеТоваровУслуг
		|				ТОГДА ДокументПоступления.НомерКонтракта
		|			ИНАЧЕ НЕОПРЕДЕЛЕНО
		|		КОНЕЦ КАК НомерДоговора,
		|		ВЫБОР
		|			КОГДА ДокументПоступления ССЫЛКА Документ.ПоступлениеТоваровУслуг
		|				ТОГДА ДокументПоступления.ДатаКонтракта
		|			ИНАЧЕ НЕОПРЕДЕЛЕНО
		|		КОНЕЦ КАК ДатаДоговора
		|	) КАК Товары
		|ИЗ
		|	Документ.ЗаявлениеОВвозеТоваров КАК ЗаявлениеОВвозеТоваров
		|ГДЕ
		|	ЗаявлениеОВвозеТоваров.Ссылка В(&СписокДокументов)";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокДокументов", МассивОбъектов);
	
	РезультатЗапроса 	= Запрос.Выполнить();
	ВыборкаДок 			= РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДок.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Подготовка данных
		ДанныеПечати = Новый Структура;
		
		Руководители = БухгалтерскийУчетСервер.ОтветственныеЛицаОрганизацийРуководители(ВыборкаДок.Организация,ВыборкаДок.Дата);
		ДанныеПечати.Вставить("ФИОРуководителя", 		Руководители.Руководитель);
		
		ДанныеПечати.Вставить("КонтрагентСтрана", 		ВыборкаДок.КонтрагентСтрана + ", " + БухгалтерскийУчетСервер.ПолучитьСведенияОКонтрагенте(ВыборкаДок.Контрагент).АдрЮР);
		ДанныеПечати.Вставить("ОрганизацияСтрана", 		"417, " + БухгалтерскийУчетСервер.ПолучитьСведенияОбОрганизации(ВыборкаДок.Организация, ВыборкаДок.Дата).АдрЮР);
		ДанныеПечати.Вставить("Д1Д2",					Сред(ВыборкаДок.Дата, 1, 2));
		ДанныеПечати.Вставить("Д3Д4",					Сред(ВыборкаДок.Дата, 4, 2));
		ДанныеПечати.Вставить("Д5Д6",					Сред(ВыборкаДок.Дата, 7, 4));
		ДанныеПечати.Вставить("Номер",					ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаДок.Номер));
		
		Товары = ВыборкаДок.Товары.Выгрузить();
		ДанныеПечати.Вставить("Количество", 		Товары.Итог("Количество"));
		ДанныеПечати.Вставить("Стоимость",  		Товары.Итог("Стоимость"));
		ДанныеПечати.Вставить("НалоговаяБазаАкциз", Товары.Итог("НалоговаяБазаАкциз"));
		ДанныеПечати.Вставить("НалоговаяБазаНДС",   Товары.Итог("НалоговаяБазаНДС"));
		ДанныеПечати.Вставить("СтавкаАкцизТверд",  	Товары.Итог("СтавкаАкцизТверд"));
		ДанныеПечати.Вставить("СтавкаАкцизАдвалор", Товары.Итог("СтавкаАкцизАдвалор"));
		ДанныеПечати.Вставить("СуммаАкциза",        Товары.Итог("СуммаАкциза"));
		ДанныеПечати.Вставить("СуммаНДС",        	Товары.Итог("СуммаНДС"));		
		
		Если Товары.Количество() > 0 Тогда
			ДанныеПечати.Вставить("НомерДоговора",	?(ЗначениеЗаполнено(Товары[0].НомерДоговора), Товары[0].НомерДоговора, ВыборкаДок.НомерДоговора));
			ДанныеПечати.Вставить("ДатаДоговора",	?(ЗначениеЗаполнено(Товары[0].ДатаДоговора), Товары[0].ДатаДоговора, ВыборкаДок.ДатаДоговора));	
		КонецЕсли;	
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаявлениеОВвозеТоваров.ПФ_MXL_Заявление");
		
		КоличествоСтраниц = ПолучитьКоличествоСтраниц(Макет, ВыборкаДок);
		ДанныеПечати.Вставить("КоличествоСтраниц", КоличествоСтраниц);
		ДанныеПечати.Вставить("НомерСтраницы", 1);
		
		Если ВыборкаДок.СтатусДокумента = "1" Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокУточненный");
		Иначе 
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокПервоначальный");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ВыборкаДок);
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ВыборкаДок);
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Вывод таблицы
		ОбластьШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьИтоги 		 = Макет.ПолучитьОбласть("Итоги");
		ОбластьПодписи 		 = Макет.ПолучитьОбласть("Подписи");

		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);

		ВыборкаСтрокТовары 	= ВыборкаДок.Товары.Выбрать();
		КоличествоСтрок = ВыборкаСтрокТовары.Количество();
		НомерСтроки = 1;
		НомерСтраницы = 1;

		МассивОбластей = Новый Массив();
		МассивОбластей.Добавить(ОбластьИтоги);
		МассивОбластей.Добавить(ОбластьПодписи);

		Пока ВыборкаСтрокТовары.Следующий() Цикл
			ДанныеПечатиСтроки = Новый Структура;
			ДанныеПечатиСтроки.Вставить("ВалютаКод",  	ВыборкаДок.ВалютаКод);
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
			ОбластьСтрока.Параметры.Заполнить(ДанныеПечатиСтроки);
			ОбластьСтрока.Параметры.Заполнить(ВыборкаСтрокТовары);
			
			Если НЕ ТабличныйДокумент.ПроверитьВывод(ОбластьСтрока) Тогда
				ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
				НомерСтраницы = НомерСтраницы + 1;
			КонецЕсли;	
			
			Если КоличествоСтрок = НомерСтроки Тогда
				МассивОбластей.Добавить(ОбластьСтрока);	
				
				Если НЕ ТабличныйДокумент.ПроверитьВывод(МассивОбластей) Тогда
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					НомерСтраницы = НомерСтраницы + 1;	
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьСтрока);
				
				ОбластьИтоги.Параметры.Заполнить(ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьИтоги);
				
				ОбластьПодписи.Параметры.Заполнить(ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьПодписи);
				
			Иначе
				ТабличныйДокумент.Вывести(ОбластьСтрока);
			КонецЕсли;	
			
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
		ДанныеПечати.НомерСтраницы = НомерСтраницы + 1;	
		
		МассивОбластейМакета = Новый Массив();
		МассивОбластейМакета.Добавить("Страница2");
		МассивОбластейМакета.Добавить("Страница3");
		МассивОбластейМакета.Добавить("Страница4");
		
		Для Каждого СтрокаМассива Из МассивОбластейМакета Цикл	
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			ОбластьМакета = Макет.ПолучитьОбласть(СтрокаМассива);
			
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ВыборкаДок);
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ДанныеПечати.НомерСтраницы = ДанныеПечати.НомерСтраницы + 1;
		КонецЦикла;	
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаДок.Ссылка);		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Заявление") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"Заявление", 
			НСтр("ru = 'Заявление'"), 
			ПечатьЗаявленияОВвозе(МассивОбъектов, ОбъектыПечати)
			,
			,
			"Документ.ЗаявлениеОВвозеТоваров.ПФ_MXL_Заявление");
	КонецЕсли;	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Заявление";
	КомандаПечати.Представление = НСтр("ru = 'Заявление'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 1;
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "РеестрЗаявлениеОВвозеТоваров";
	КомандаПечати.Представление  = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Реестр документов ""Заявление о ввозе товаров""'");
	КомандаПечати.Обработчик     = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьКоличествоСтраниц(Макет, ВыборкаДок)

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ОбластьШапка 		 = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьИтоги 		 = Макет.ПолучитьОбласть("Итоги");
	ОбластьПодписи 		 = Макет.ПолучитьОбласть("Подписи");

	ТабличныйДокумент.Вывести(ОбластьШапка);
	ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
	
	ВыборкаСтрокТовары 	= ВыборкаДок.Товары.Выбрать();
	КоличествоСтрок = ВыборкаСтрокТовары.Количество();
	НомерСтроки = 1;
	КоличествоЛистов = 1;
	
	МассивОбластей = Новый Массив();
	МассивОбластей.Добавить(ОбластьИтоги);
	МассивОбластей.Добавить(ОбластьПодписи);
	
	Пока ВыборкаСтрокТовары.Следующий() Цикл	
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		ОбластьСтрока.Параметры.Заполнить(ВыборкаСтрокТовары);
		
		Если НЕ ТабличныйДокумент.ПроверитьВывод(ОбластьСтрока) Тогда
			ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
			КоличествоЛистов = КоличествоЛистов + 1;
		КонецЕсли;	
		
		Если КоличествоСтрок = НомерСтроки Тогда
			МассивОбластей.Добавить(ОбластьСтрока);	
			
			Если НЕ ТабличныйДокумент.ПроверитьВывод(МассивОбластей) Тогда	
				КоличествоЛистов = КоличествоЛистов + 1;	
			КонецЕсли;
			
		Иначе
			ТабличныйДокумент.Вывести(ОбластьСтрока);
		КонецЕсли;	
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;	
	
	Возврат КоличествоЛистов + 3;
КонецФункции

#КонецОбласти

#КонецЕсли