#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнениеОбъектовБП.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Выполнение предварительного контроля.
	ВыполнитьПредварительныйКонтроль(Отказ);	
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ИнициализироватьДанные(Отказ, РежимПроведения);
	
	ОтразитьДвижения(Отказ, РежимПроведения);
	
	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииОбработкаПроведения

// Процедура инициализирует данные документа
// и подготавливает таблицы для движения в регистры
//
Процедура ИнициализироватьДанные(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.ЗаявлениеОВвозеТоваров.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
КонецПроцедуры
	
// Процедура заполняет регистры данными
//
Процедура ОтразитьДвижения(Отказ, РежимПроведения)

	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьСведенияОВвозимыхТоварах(ДополнительныеСвойства, Движения, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет контроль противоречий.
//
Процедура ВыполнитьПредварительныйКонтроль(Отказ)
	
	//Если Отказ Тогда 
	//	Возврат;
	//КонецЕсли;
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	//	|	ТаблицаДокумента.Номенклатура,
	//	|	ТаблицаДокумента.Цена,
	//	|	ТаблицаДокумента.ДокументПоступления
	//	|ПОМЕСТИТЬ ТаблицаДокумента
	//	|ИЗ
	//	|	&ТаблицаДокумента КАК ТаблицаДокумента
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	МАКСИМУМ(ТаблицаДокумента1.НомерСтроки) КАК НомерСтроки,
	//	|	ТаблицаДокумента1.Цена,
	//	|	ТаблицаДокумента1.Номенклатура
	//	|ИЗ
	//	|	ТаблицаДокумента КАК ТаблицаДокумента1
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокумента КАК ТаблицаДокумента2
	//	|		ПО ТаблицаДокумента1.НомерСтроки <> ТаблицаДокумента2.НомерСтроки
	//	|			И ТаблицаДокумента1.Номенклатура = ТаблицаДокумента2.Номенклатура
	//	|			И ТаблицаДокумента1.Цена = ТаблицаДокумента2.Цена
	//	|			И ТаблицаДокумента1.ДокументПоступления = ТаблицаДокумента2.ДокументПоступления
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	ТаблицаДокумента1.Номенклатура,
	//	|	ТаблицаДокумента1.Цена
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	НомерСтроки";
	//Запрос.УстановитьПараметр("ТаблицаДокумента", Товары);
	//
	//МассивРезультатов = Запрос.ВыполнитьПакет();
	//
	//// Дубли строк.
	//Если НЕ МассивРезультатов[1].Пустой() Тогда
	//	ВыборкаИзРезультатаЗапроса = МассивРезультатов[1].Выбрать();
	//	Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
	//		ТекстСообщения = СтрШаблон(НСтр("ru = 'Номенклатура с ценой %1 указывается повторно в строке %2 списка ""Товары"".'"), 
	//						ВыборкаИзРезультатаЗапроса.Цена, ВыборкаИзРезультатаЗапроса.НомерСтроки);
	//		БухгалтерскийУчетСервер.СообщитьОбОшибке(
	//			ЭтотОбъект,
	//			ТекстСообщения,
	//			"Товары",
	//			ВыборкаИзРезультатаЗапроса.НомерСтроки,
	//			"Номенклатура",
	//			Отказ);
	//	КонецЦикла;
	//КонецЕсли;		

КонецПроцедуры // ВыполнитьПредварительныйКонтроль()

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли