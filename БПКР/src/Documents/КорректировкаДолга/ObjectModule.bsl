#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	ЗаполнениеОбъектовБП.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения);
	
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда		
		ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности;		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	// При групповом перепроведении реквизиты документов не меняются,
	// поэтому обновление связанных данных выполнять не требуется.
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьВалютуДокумента();

КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ИнициализироватьДанные(Отказ, РежимПроведения);
	
	ОтразитьДвижения(Отказ, РежимПроведения);
	
	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
		
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	МассивНепроверяемыхРеквизитов = Новый Массив();

	// Проверяем реквизиты шапки:
	Если НЕ ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("СчетКт");
		МассивНепроверяемыхРеквизитов.Добавить("СчетДт");
		
	Иначе
		
		Если ДебиторскаяЗадолженность.Количество() > 0 Тогда
			МассивНепроверяемыхРеквизитов.Добавить("СчетКт");
		Иначе
			МассивНепроверяемыхРеквизитов.Добавить("СчетДт");
		КонецЕсли;	
		
		МассивНепроверяемыхРеквизитов.Добавить("КонтрагентКредитор");
		
	КонецЕсли;	
		
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДебиторскаяЗадолженность.КорДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("ДебиторскаяЗадолженность.КорСчетУчетаРасчетов");
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("ДебиторскаяЗадолженность.КорДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("ДебиторскаяЗадолженность.КорСчетУчетаРасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("КредиторскаяЗадолженность.КорДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("КредиторскаяЗадолженность.КорСчетУчетаРасчетов");
	КонецЕсли;
	
	РезультатыПроверки = ПолучитРезультатыПроверки();
	
	ВыборкаОшибок = РезультатыПроверки.СтрокиДокументаСОшибками;
	Пока ВыборкаОшибок.Следующий() Цикл	
		ТекстСообщения = ВыборкаОшибок.ОписаниеОшибки;
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность",
			НСтр("ru = 'Счет учета'"), ВыборкаОшибок.НомерСтроки, ВыборкаОшибок.СинонимТабЧасти, ТекстСообщения);
		ОбщегоНазначения.СообщитьПользователю(
			ТекстСообщения, ЭтотОбъект, 
			ВыборкаОшибок.ИмяТабЧасти + "[" + Формат(ВыборкаОшибок.НомерСтроки - 1, "ЧДЦ=0; ЧГ=") + "].СчетУчетаРасчетов",
			"Объект", Отказ);		
	КонецЦикла;
		
	ВыборкаОшибок = РезультатыПроверки.СтрокиДокументаСРазнымиВалютами;
	Пока ВыборкаОшибок.Следующий() Цикл	
		ТекстСообщения = ВыборкаОшибок.ОписаниеОшибки;
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность",
			НСтр("ru = 'Новый договор'"), ВыборкаОшибок.НомерСтроки, ВыборкаОшибок.СинонимТабЧасти, ТекстСообщения);
		ОбщегоНазначения.СообщитьПользователю(
			ТекстСообщения, ЭтотОбъект, 
			ВыборкаОшибок.ИмяТабЧасти + "[" + Формат(ВыборкаОшибок.НомерСтроки - 1, "ЧДЦ=0; ЧГ=") + "].КорДоговорКонтрагента",
			"Объект", Отказ);		
	КонецЦикла;
	
	// Удаляем из проверяемых реквизитов все, по которым автоматическая проверка не нужна:
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииОбработкаПроведения

// Процедура инициализирует данные документа
// и подготавливает таблицы для движения в регистры
//
Процедура ИнициализироватьДанные(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.КорректировкаДолга.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
КонецПроцедуры
	
// Процедура заполняет регистры данными
//
Процедура ОтразитьДвижения(Отказ, РежимПроведения)

	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитРезультатыПроверки()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДебиторскаяЗадолженность", ДебиторскаяЗадолженность.Выгрузить(, 
		"НомерСтроки, ДоговорКонтрагента, КорДоговорКонтрагента, СчетУчетаРасчетов"));
	Запрос.УстановитьПараметр("КредиторскаяЗадолженность", КредиторскаяЗадолженность.Выгрузить(, 
		"НомерСтроки, ДоговорКонтрагента, КорДоговорКонтрагента, СчетУчетаРасчетов"));
	Запрос.УстановитьПараметр("ИмяДебиторскойЗадолженности",  НСтр("ru = 'Дебиторская задолженность'") );
	Запрос.УстановитьПараметр("ИмяКредиторскойЗадолженности", НСтр("ru = 'Кредиторская задолженность'") );
	Запрос.УстановитьПараметр("ВалютаРеглУчета",              Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ПереносЗадолженности", ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности);	
	Запрос.УстановитьПараметр("ТекстОшибки1", НСтр("ru = 'Для валютного договора указан счет без валютного учета.'") );
	Запрос.УстановитьПараметр("ТекстОшибки2", НСтр("ru = 'Валюты договоров, в строке табличной части, должны быть одинаковые.'") );
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	""ДебиторскаяЗадолженность"" КАК ИмяТабЧасти,
		|	&ИмяДебиторскойЗадолженности КАК СинонимТабЧасти,
		|	ТабЧасть.НомерСтроки КАК НомерСтроки,
		|	ТабЧасть.ДоговорКонтрагента КАК Договор,
		|	ТабЧасть.СчетУчетаРасчетов КАК СчетУчета,
		|	ТабЧасть.КорДоговорКонтрагента КАК КорДоговор
		|ПОМЕСТИТЬ СтрокиДебиторскойЗадолженности
		|ИЗ
		|	&ДебиторскаяЗадолженность КАК ТабЧасть
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""КредиторскаяЗадолженность"" КАК ИмяТабЧасти,
		|	&ИмяКредиторскойЗадолженности КАК СинонимТабЧасти,
		|	ТабЧасть.НомерСтроки КАК НомерСтроки,
		|	ТабЧасть.ДоговорКонтрагента КАК Договор,
		|	ТабЧасть.СчетУчетаРасчетов КАК СчетУчета,
		|	ТабЧасть.КорДоговорКонтрагента КАК КорДоговор
		|ПОМЕСТИТЬ СтрокиКредиторскойЗадолженности
		|ИЗ
		|	&КредиторскаяЗадолженность КАК ТабЧасть
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтрокиДебиторскойЗадолженности.ИмяТабЧасти КАК ИмяТабЧасти,
		|	СтрокиДебиторскойЗадолженности.СинонимТабЧасти КАК СинонимТабЧасти,      
		|	СтрокиДебиторскойЗадолженности.НомерСтроки КАК НомерСтроки,
		|	СтрокиДебиторскойЗадолженности.Договор КАК Договор,
		|	СтрокиДебиторскойЗадолженности.СчетУчета КАК СчетУчета,
		|	ВЫРАЗИТЬ(СтрокиДебиторскойЗадолженности.Договор КАК Справочник.ДоговорыКонтрагентов).ВалютаРасчетов КАК ВалютаДоговора,
		|	ВЫРАЗИТЬ(СтрокиДебиторскойЗадолженности.КорДоговор КАК Справочник.ДоговорыКонтрагентов).ВалютаРасчетов КАК КорВалютаДоговора
		|ПОМЕСТИТЬ СтрокиДокументов
		|ИЗ
		|	СтрокиДебиторскойЗадолженности КАК СтрокиДебиторскойЗадолженности
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СтрокиКредиторскойЗадолженности.ИмяТабЧасти,
		|	СтрокиКредиторскойЗадолженности.СинонимТабЧасти,
		|	СтрокиКредиторскойЗадолженности.НомерСтроки,
		|	СтрокиКредиторскойЗадолженности.Договор,
		|	СтрокиКредиторскойЗадолженности.СчетУчета,
		|	ВЫРАЗИТЬ(СтрокиКредиторскойЗадолженности.Договор КАК Справочник.ДоговорыКонтрагентов).ВалютаРасчетов,
		|	ВЫРАЗИТЬ(СтрокиКредиторскойЗадолженности.КорДоговор КАК Справочник.ДоговорыКонтрагентов).ВалютаРасчетов
		|ИЗ
		|	СтрокиКредиторскойЗадолженности КАК СтрокиКредиторскойЗадолженности
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ПОМЕСТИТЬ ВТ_СчетаУчетаРасчетовСПоставщиками
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АвансыВыданные), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СчетаКОплате))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ПОМЕСТИТЬ ВТ_СчетаУчетаРасчетовСПокупателями
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СчетаКПолучению), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АвансыПолученные))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтрокиДокумента.ИмяТабЧасти КАК ИмяТабЧасти,
		|	СтрокиДокумента.СинонимТабЧасти КАК СинонимТабЧасти,
		|	СтрокиДокумента.НомерСтроки КАК НомерСтроки,
		|	&ТекстОшибки1 КАК ОписаниеОшибки,
		|	Договоры.Ссылка КАК Договор,
		|	Счета.Ссылка КАК СчетУчета
		|ИЗ
		|	СтрокиДокументов КАК СтрокиДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
		|		ПО СтрокиДокумента.Договор = Договоры.Ссылка
		|			И (Договоры.ВалютаРасчетов <> &ВалютаРеглУчета)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Счета
		|		ПО СтрокиДокумента.СчетУчета = Счета.Ссылка
		|			И (НЕ Счета.Валютный)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИмяТабЧасти,
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтрокиДокумента.ИмяТабЧасти КАК ИмяТабЧасти,
		|	СтрокиДокумента.СинонимТабЧасти КАК СинонимТабЧасти,
		|	СтрокиДокумента.НомерСтроки КАК НомерСтроки,
		|	&ТекстОшибки2 КАК ОписаниеОшибки
		|ИЗ
		|	СтрокиДокументов КАК СтрокиДокумента
		|ГДЕ
		|	СтрокиДокумента.ВалютаДоговора <> СтрокиДокумента.КорВалютаДоговора";
	
	Результат = Запрос.ВыполнитьПакет();
	
	РезультатыПроверки = Новый Структура;
	РезультатыПроверки.Вставить("СтрокиДокументаСОшибками", Результат[5].Выбрать());
	РезультатыПроверки.Вставить("СтрокиДокументаСРазнымиВалютами", Результат[6].Выбрать());
	
	Возврат РезультатыПроверки;

КонецФункции

Процедура УстановитьВалютуДокумента()
	СтрокиДебиторскаяЗадолженность = ДебиторскаяЗадолженность.Выгрузить(, "ВалютаДоговораКонтрагента");
	СтрокиКредиторскаяЗадолженность = КредиторскаяЗадолженность.Выгрузить(, "ВалютаДоговораКонтрагента");
	СтрокиДебиторскаяЗадолженность.Свернуть("ВалютаДоговораКонтрагента");
	СтрокиКредиторскаяЗадолженность.Свернуть("ВалютаДоговораКонтрагента");
		
	Если СтрокиДебиторскаяЗадолженность.Количество() > 1 ИЛИ СтрокиКредиторскаяЗадолженность.Количество() > 1 Тогда
		НоваяВалюта = Справочники.Валюты.ПустаяСсылка();
	ИначеЕсли СтрокиДебиторскаяЗадолженность.Количество() = 1 Тогда
		НоваяВалюта = СтрокиДебиторскаяЗадолженность[0].ВалютаДоговораКонтрагента;
	ИначеЕсли СтрокиКредиторскаяЗадолженность.Количество() = 1 Тогда
		НоваяВалюта = СтрокиКредиторскаяЗадолженность[0].ВалютаДоговораКонтрагента;
	КонецЕсли;
	
	Если НЕ ВалютаДокумента = НоваяВалюта Тогда
		ВалютаДокумента = НоваяВалюта;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли