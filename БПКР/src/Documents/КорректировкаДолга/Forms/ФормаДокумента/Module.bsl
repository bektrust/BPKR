#Область ОписаниеПеременных

&НаКлиенте
Перем СтарыйВидОперации;

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоШапки(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконтоДт(ЭтотОбъект));
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоШапки(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконтоКт(ЭтотОбъект));

	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	УстановитьУсловноеОформление();

	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	// РаботаСФормами
	РаботаСФормамиСервер.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом 
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	
	УстановитьПараметрыВыбора();

	// РаботаСФормами
	РаботаСФормамиСервер.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчета.ПослеЗаписиНаСервере(ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)

	УстановитьВидимостьДоступностьЭлементов();
	
	Если НЕ Объект.ВидОперации = СтарыйВидОперации Тогда
		
		Объект.ДебиторскаяЗадолженность.Очистить();
		Объект.КредиторскаяЗадолженность.Очистить();
		
		Объект.СчетДт = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка");
		Объект.СчетКт = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка");
		
		Объект.СубконтоДт1 = Неопределено;
		Объект.СубконтоДт2 = Неопределено;
		Объект.СубконтоДт3 = Неопределено;
		Объект.СубконтоКт1 = Неопределено;
		Объект.СубконтоКт2 = Неопределено;
		Объект.СубконтоКт3 = Неопределено;
		
	КонецЕсли;
	
	УстановитьФлагОтметкиНезаполненногоДебитора(ЭтотОбъект);
	УстановитьФлагОтметкиНезаполненногоКредитора(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтарыйвидОперации = Объект.ВидОперации;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Объект.Номер = "";
	
	Объект.ДебиторскаяЗадолженность.Очистить();
	Объект.КредиторскаяЗадолженность.Очистить();

	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииОрганизации(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконтоДт(ЭтотОбъект));
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииОрганизации(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконтоКт(ЭтотОбъект));
		
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентДебиторПриИзменении(Элемент)
	
	Если Элемент = Элементы.Дебитор Тогда

		Объект.ДебиторскаяЗадолженность.Очистить();
		Объект.КредиторскаяЗадолженность.Очистить();
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ПереносЗадолженности")
			ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности") Тогда
			
			Объект.КредиторскаяЗадолженность.Очистить();
			Объект.ДебиторскаяЗадолженность.Очистить();
			
		Иначе
			Объект.ДебиторскаяЗадолженность.Очистить();
		КонецЕсли;
		
	Иначе
		Объект.ДебиторскаяЗадолженность.Очистить();
	КонецЕсли;
	
	УстановитьДоступностьДоговоров(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентКредиторПриИзменении(Элемент)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ПереносЗадолженности")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности") Тогда
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ПереносЗадолженности") Тогда
			КонтрагентКредиторПриИзмененииСервер();
		КонецЕсли;
		
	Иначе
		Объект.КредиторскаяЗадолженность.Очистить();
	КонецЕсли;
	
	УстановитьДоступностьДоговоров(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЗадолженностиДляПереносаПриИзменении(Элемент)
		
	УстановитьВидимостьДоступностьЭлементов();
	
	Объект.ДебиторскаяЗадолженность.Очистить();
	Объект.КредиторскаяЗадолженность.Очистить();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

// Закладка "СчетаУчета"

&НаКлиенте
Процедура СчетДтПриИзменении(Элемент)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
		ЭтотОбъект,
		Объект,
		ПараметрыУстановкиСвойствСубконтоДт(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СчетКтПриИзменении(Элемент)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
		ЭтотОбъект,
		Объект,
		ПараметрыУстановкиСвойствСубконтоКт(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт1ПриИзменении(Элемент)
	
	ПриИзмененииСубконтоДт(1);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт2ПриИзменении(Элемент)
	
	ПриИзмененииСубконтоДт(2);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт3ПриИзменении(Элемент)
	
	ПриИзмененииСубконтоДт(3);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКт1ПриИзменении(Элемент)
	
	ПриИзмененииСубконтоКт(1);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКт2ПриИзменении(Элемент)
	
	ПриИзмененииСубконтоКт(2);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКт3ПриИзменении(Элемент)
	
	ПриИзмененииСубконтоКт(3);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДебиторскаяЗадолженность

&НаКлиенте
Процедура ТаблицаДебиторскаяЗадолженностьДоговорКонтрагентаПриИзменении(Элемент)

	ДанныеСтрокаТаблицы = ПолучитьСтруктуруРеквизитовСтроки();
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, Элемент.Родитель.Родитель.ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка,  
		|КонтрагентДебитор, КонтрагентКредитор");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	ПараметрыОбъекта.Ссылка = Объект.Ссылка;
	
	ПриИзмененииДоговораВСтроке(ДанныеСтрокаТаблицы, ПараметрыОбъекта, "ДебиторскаяЗадолженность", ВалютаРегламентированногоУчета);
	
	ЗаполнитьОстаткиПоДоговору(ДанныеСтрокаТаблицы, ПараметрыОбъекта, "ДебиторскаяЗадолженность", ВалютаРегламентированногоУчета);
	
	ЗаполнитьЗначенияСвойств(Элемент.Родитель.Родитель.ТекущиеДанные, ДанныеСтрокаТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДебиторскаяЗадолженностьКорДоговорКонтрагентаПриИзменении(Элемент)
	
	ДанныеСтрокаТаблицы = ПолучитьСтруктуруРеквизитовСтроки();
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, Элемент.Родитель.Родитель.ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка,  
		|КонтрагентДебитор, КонтрагентКредитор");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	ПараметрыОбъекта.Ссылка = Объект.Ссылка;
	
	ПриИзмененииКорДоговораВСтроке(ДанныеСтрокаТаблицы, ПараметрыОбъекта, "ДебиторскаяЗадолженность");
	
	ЗаполнитьЗначенияСвойств(Элемент.Родитель.Родитель.ТекущиеДанные, ДанныеСтрокаТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДебиторскаяЗадолженностьСуммаПриИзменении(Элемент)

	ДанныеСтрокаТаблицы = ПолучитьСтруктуруРеквизитовСтроки();
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, Элемент.Родитель.ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	ПараметрыОбъекта.Ссылка = Объект.Ссылка;

	ЗаполнитьЗначенияСвойств(Элемент.Родитель.ТекущиеДанные, ДанныеСтрокаТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДебиторскаяЗадолженностьСчетУчетаРасчетовПриИзменении(Элемент)
	
	ДанныеСтрокаТаблицы = ПолучитьСтруктуруРеквизитовСтроки();
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, Элемент.Родитель.Родитель.ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	ПараметрыОбъекта.Ссылка = Объект.Ссылка;
	
	ЗаполнитьЗначенияСвойств(Элемент.Родитель.Родитель.ТекущиеДанные, ДанныеСтрокаТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДебиторскаяЗадолженностьПослеУдаления(Элемент)
	
	УстановитьФлагОтметкиНезаполненногоСчетов(ЭтотОбъект);
	
	УстановитьФлагОтметкиНезаполненногоДебитора(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДебиторскаяЗадолженностьПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда
		
		УстановитьФлагОтметкиНезаполненногоСчетов(ЭтотОбъект);
		
		УстановитьФлагОтметкиНезаполненногоДебитора(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКредиторскаяЗадолженность

&НаКлиенте
Процедура ТаблицаКредиторскаяЗадолженностьДоговорКонтрагентаПриИзменении(Элемент)

	ДанныеСтрокаТаблицы = ПолучитьСтруктуруРеквизитовСтроки();
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, Элемент.Родитель.Родитель.ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка,  
		|КонтрагентДебитор, КонтрагентКредитор");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	ПараметрыОбъекта.Ссылка = Объект.Ссылка;
	
	ПриИзмененииДоговораВСтроке(ДанныеСтрокаТаблицы, ПараметрыОбъекта, "КредиторскаяЗадолженность", ВалютаРегламентированногоУчета);
	
	ЗаполнитьОстаткиПоДоговору(ДанныеСтрокаТаблицы, ПараметрыОбъекта, "КредиторскаяЗадолженность", ВалютаРегламентированногоУчета);
	
	ЗаполнитьЗначенияСвойств(Элемент.Родитель.Родитель.ТекущиеДанные, ДанныеСтрокаТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКредиторскаяЗадолженностьКорДоговорКонтрагентаПриИзменении(Элемент)
	
	ДанныеСтрокаТаблицы = ПолучитьСтруктуруРеквизитовСтроки();
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, Элемент.Родитель.Родитель.ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка,  
		|КонтрагентДебитор, КонтрагентКредитор");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	ПараметрыОбъекта.Ссылка = Объект.Ссылка;
	
	ПриИзмененииКорДоговораВСтроке(ДанныеСтрокаТаблицы, ПараметрыОбъекта, "КредиторскаяЗадолженность");
	
	ЗаполнитьЗначенияСвойств(Элемент.Родитель.Родитель.ТекущиеДанные, ДанныеСтрокаТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКредиторскаяЗадолженностьСуммаПриИзменении(Элемент)

	ДанныеСтрокаТаблицы = ПолучитьСтруктуруРеквизитовСтроки();
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, Элемент.Родитель.ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	ПараметрыОбъекта.Ссылка = Объект.Ссылка;

	ЗаполнитьЗначенияСвойств(Элемент.Родитель.ТекущиеДанные, ДанныеСтрокаТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКредиторскаяЗадолженностьСчетУчетаРасчетовПриИзменении(Элемент)
	
	ДанныеСтрокаТаблицы = ПолучитьСтруктуруРеквизитовСтроки();
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, Элемент.Родитель.Родитель.ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	ПараметрыОбъекта.Ссылка = Объект.Ссылка;
	
	ЗаполнитьЗначенияСвойств(Элемент.Родитель.Родитель.ТекущиеДанные, ДанныеСтрокаТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКредиторскаяЗадолженностьПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда
		
		УстановитьФлагОтметкиНезаполненногоСчетов(ЭтотОбъект);
		
		УстановитьФлагОтметкиНезаполненногоКредитора(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКредиторскаяЗадолженностьПослеУдаления(Элемент)
	
	УстановитьФлагОтметкиНезаполненногоСчетов(ЭтотОбъект);
	
	УстановитьФлагОтметкиНезаполненногоКредитора(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьВзаиморасчеты(Команда)

	ВыполнитьКомандуЗаполнения(Команда.Имя);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		
		Элементы.СчетаУчета.Видимость = Ложь;
		Элементы.ВидЗадолженностиДляПереноса.Заголовок = НСтр("ru = 'Перенести'");
		Элементы.Кредитор.Видимость = Истина;
		
		Элементы.ТаблицаДебиторскаяЗадолженностьКорДоговорКонтрагента.Видимость = Истина;
		Элементы.ТаблицаДебиторскаяЗадолженностьКорСчетУчетаРасчетов.Видимость = Истина;
		
		Элементы.ТаблицаДебиторскаяЗадолженностьКорДоговорКонтрагента.АвтоОтметкаНезаполненного = Истина;
		Элементы.ТаблицаДебиторскаяЗадолженностьКорСчетУчетаРасчетов.АвтоОтметкаНезаполненного = Истина;
		
		Элементы.ТаблицаКредиторскаяЗадолженностьКорДоговорКонтрагента.Видимость = Истина;
		Элементы.ТаблицаКредиторскаяЗадолженностьКорСчетУчетаРасчетов.Видимость = Истина;
		
		Элементы.ТаблицаКредиторскаяЗадолженностьКорДоговорКонтрагента.АвтоОтметкаНезаполненного = Истина;
		Элементы.ТаблицаКредиторскаяЗадолженностьКорСчетУчетаРасчетов.АвтоОтметкаНезаполненного = Истина;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
		
		Элементы.СчетаУчета.Заголовок = НСтр("ru = 'Счета списания'");
		Элементы.СчетаУчета.Видимость = Истина;
			
		Элементы.ВидЗадолженностиДляПереноса.Заголовок = НСтр("ru = 'Списать'");
		
		Элементы.Дебитор.Видимость 	= Истина;
		Элементы.Кредитор.Видимость = Ложь;
		Элементы.ТаблицаДебиторскаяЗадолженностьКорДоговорКонтрагента.Видимость                	= Ложь;
		Элементы.ТаблицаДебиторскаяЗадолженностьКорДоговорКонтрагента.АвтоОтметкаНезаполненного = Ложь;
		
		Элементы.ТаблицаКредиторскаяЗадолженностьКорДоговорКонтрагента.Видимость               	 = Ложь;
		Элементы.ТаблицаКредиторскаяЗадолженностьКорДоговорКонтрагента.АвтоОтметкаНезаполненного = Ложь;
		
		Элементы.ТаблицаКредиторскаяЗадолженностьКорСчетУчетаРасчетов.Видимость               = Ложь;
		Элементы.ТаблицаДебиторскаяЗадолженностьКорСчетУчетаРасчетов.Видимость                = Ложь;
		
		Элементы.ТаблицаКредиторскаяЗадолженностьКорСчетУчетаРасчетов.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ТаблицаДебиторскаяЗадолженностьКорСчетУчетаРасчетов.АвтоОтметкаНезаполненного  = Ложь;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		
		Элементы.ТаблицаКредиторскаяЗадолженностьКорДоговорКонтрагента.Видимость               = Ложь;
		Элементы.ТаблицаДебиторскаяЗадолженностьКорДоговорКонтрагента.Видимость                = Ложь;
		
		Элементы.ТаблицаКредиторскаяЗадолженностьКорСчетУчетаРасчетов.Видимость               = Ложь;
		Элементы.ТаблицаДебиторскаяЗадолженностьКорСчетУчетаРасчетов.Видимость                = Ложь;
		
		Элементы.ТаблицаКредиторскаяЗадолженностьКорДоговорКонтрагента.АвтоОтметкаНезаполненного               = Ложь;
		Элементы.ТаблицаДебиторскаяЗадолженностьКорДоговорКонтрагента.АвтоОтметкаНезаполненного                = Ложь;
		
		Элементы.ТаблицаКредиторскаяЗадолженностьКорСчетУчетаРасчетов.АвтоОтметкаНезаполненного               = Ложь;
		Элементы.ТаблицаДебиторскаяЗадолженностьКорСчетУчетаРасчетов.АвтоОтметкаНезаполненного                = Ложь;
		
		Элементы.ВидЗадолженностиДляПереноса.Видимость = Ложь;
		
		Элементы.Дебитор.Видимость                = Истина;
		Элементы.Кредитор.Видимость               = Истина;
		
		Элементы.ДебиторскаяЗадолженность.Заголовок  = НСтр("ru = 'Дебиторская задолженность'");
		Элементы.КредиторскаяЗадолженность.Заголовок = НСтр("ru = 'Кредиторская задолженность'");
		
		Элементы.ДебиторскаяЗадолженность.Видимость  = Истина;
		Элементы.КредиторскаяЗадолженность.Видимость = Истина;
		
		Элементы.СчетаУчета.Заголовок = НСтр("ru = 'Счета учета'");
		Элементы.СчетаУчета.Видимость = Истина;
		
		Элементы.ГруппаСчетДт.Видимость = Истина;
		Элементы.ГруппаСчетКт.Видимость = Истина;
		
	КонецЕсли;
	
	УстановитьФлагОтметкиНезаполненногоСчетов(ЭтотОбъект);
	УстановитьФлагОтметкиНезаполненногоДебитора(ЭтотОбъект);
	УстановитьФлагОтметкиНезаполненногоКредитора(ЭтотОбъект);
	
	УстановитьПараметрыВыбора();
	УстановитьДоступностьДоговоров(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	// СчетДт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетДт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтметкаНезаполненногоСчетДт", ВидСравненияКомпоновкиДанных.НеРавно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// СчетКт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетКт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтметкаНезаполненногоСчетКт", ВидСравненияКомпоновкиДанных.НеРавно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// Кредитор

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Кредитор");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтметкаНезаполненногоКредитор", ВидСравненияКомпоновкиДанных.НеРавно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбора()
		
	СвязиДоговораНовогоКонтрагента = Новый Массив;
	СвязиДоговораНовогоКонтрагента.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация", РежимИзмененияСвязанногоЗначения.Очищать));
	
	СвязиКорДоговораНовогоКонтрагента = Новый Массив;
	СвязиКорДоговораНовогоКонтрагента.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация", РежимИзмененияСвязанногоЗначения.Очищать));
	СвязиКорДоговораНовогоКонтрагента.Добавить(Новый СвязьПараметраВыбора("Отбор.ВалютаРасчетов", "Элементы.ТаблицаКредиторскаяЗадолженность.ТекущиеДанные.ВалютаДоговораКонтрагента", РежимИзмененияСвязанногоЗначения.Очищать));

	СвязиДоговораКонтрагента = Новый Массив;
	СвязиДоговораКонтрагента.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация", РежимИзмененияСвязанногоЗначения.Очищать));

	СвязиКорДоговораКонтрагента = Новый Массив;
	СвязиКорДоговораКонтрагента.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация", РежимИзмененияСвязанногоЗначения.Очищать));
	СвязиКорДоговораКонтрагента.Добавить(Новый СвязьПараметраВыбора("Отбор.ВалютаРасчетов", "Элементы.ТаблицаДебиторскаяЗадолженность.ТекущиеДанные.ВалютаДоговораКонтрагента", РежимИзмененияСвязанногоЗначения.Очищать));

	СвязиДокументаНовогоКонтрагента = Новый Массив;
	СвязиДокументаНовогоКонтрагента.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация", РежимИзмененияСвязанногоЗначения.Очищать));
	
	СвязиДокументаКонтрагента = Новый Массив;
	СвязиДокументаКонтрагента.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация", РежимИзмененияСвязанногоЗначения.Очищать));
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда

		СвязиДоговораНовогоКонтрагента.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.КонтрагентКредитор", РежимИзмененияСвязанногоЗначения.Очищать));
		
		СвязиДоговораКонтрагента.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.КонтрагентДебитор", РежимИзмененияСвязанногоЗначения.Очищать));
		СвязиДокументаКонтрагента.Добавить(Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.КонтрагентДебитор", РежимИзмененияСвязанногоЗначения.Очищать));
		
		СвязиКорДоговораНовогоКонтрагента.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.КонтрагентКредитор", РежимИзмененияСвязанногоЗначения.Очищать));
		СвязиКорДоговораКонтрагента.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.КонтрагентКредитор", РежимИзмененияСвязанногоЗначения.Очищать));
		
		Элементы.ТаблицаКредиторскаяЗадолженностьДоговорКонтрагента.СвязиПараметровВыбора    = Новый ФиксированныйМассив(СвязиДоговораКонтрагента);
		Элементы.ТаблицаКредиторскаяЗадолженностьКорДоговорКонтрагента.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиКорДоговораНовогоКонтрагента);
		Элементы.ТаблицаДебиторскаяЗадолженностьДоговорКонтрагента.СвязиПараметровВыбора    = Новый ФиксированныйМассив(СвязиДоговораКонтрагента);
		Элементы.ТаблицаДебиторскаяЗадолженностьКорДоговорКонтрагента.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиКорДоговораКонтрагента);

	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда

		СвязиДоговораНовогоКонтрагента.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.КонтрагентДебитор", РежимИзмененияСвязанногоЗначения.Очищать));
		СвязиДокументаНовогоКонтрагента.Добавить(Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.КонтрагентДебитор", РежимИзмененияСвязанногоЗначения.Очищать));
		
		Элементы.ТаблицаКредиторскаяЗадолженностьДоговорКонтрагента.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиДоговораНовогоКонтрагента);
		Элементы.ТаблицаДебиторскаяЗадолженностьДоговорКонтрагента.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиДоговораНовогоКонтрагента);

	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьДоговоров(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	// Доступность по умолчанию
	Элементы.ТаблицаКредиторскаяЗадолженностьДоговорКонтрагента.Доступность               = Истина;
	Элементы.ТаблицаКредиторскаяЗадолженностьКорДоговорКонтрагента.Доступность            = Истина;
	Элементы.ТаблицаДебиторскаяЗадолженностьДоговорКонтрагента.Доступность                = Истина;
	Элементы.ТаблицаДебиторскаяЗадолженностьКорДоговорКонтрагента.Доступность             = Истина;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ПереносЗадолженности") Тогда

		Элементы.ТаблицаКредиторскаяЗадолженностьДоговорКонтрагента.Доступность    = ЗначениеЗаполнено(Объект.КонтрагентДебитор);
		Элементы.ТаблицаКредиторскаяЗадолженностьКорДоговорКонтрагента.Доступность = ЗначениеЗаполнено(Объект.КонтрагентКредитор);
		Элементы.ТаблицаДебиторскаяЗадолженностьДоговорКонтрагента.Доступность     = ЗначениеЗаполнено(Объект.КонтрагентДебитор);
		Элементы.ТаблицаДебиторскаяЗадолженностьКорДоговорКонтрагента.Доступность  = ЗначениеЗаполнено(Объект.КонтрагентКредитор);

	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности") Тогда

		Элементы.ТаблицаКредиторскаяЗадолженностьДоговорКонтрагента.Доступность = ЗначениеЗаполнено(Объект.КонтрагентДебитор);
		Элементы.ТаблицаДебиторскаяЗадолженностьДоговорКонтрагента.Доступность  = ЗначениеЗаполнено(Объект.КонтрагентДебитор);
		
	КонецЕсли;
	
	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФлагОтметкиНезаполненногоСчетов(Форма)
	
	// Проверяем реквизиты шапки:
	Если Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности") Тогда
		Форма.ОтметкаНезаполненногоСчетКт = Истина;
		Форма.ОтметкаНезаполненногоСчетДт = Истина;
	Иначе
		Форма.ОтметкаНезаполненногоСчетДт = Ложь;
		Форма.ОтметкаНезаполненногоСчетКт = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФлагОтметкиНезаполненногоДебитора(Форма)
	
	Форма.ОтметкаНезаполненногоДебитор = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФлагОтметкиНезаполненногоКредитора(Форма)
	
	Форма.ОтметкаНезаполненногоКредитор = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ОбщегоНазначенияБПВызовСервера.ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруРеквизитовСтроки()

	Возврат Новый Структура("ДоговорКонтрагента, КорДоговорКонтрагента, Сумма, СуммаВзаиморасчетов, 
		|СчетУчетаРасчетов, КорСчетУчетаРасчетов,
		|ВалютаДоговораКонтрагента"); 

КонецФункции

// Заполнение табличных частей

&НаКлиенте
Процедура ВыполнитьКомандуЗаполнения(ИмяКнопки)

	Если Объект.Проведен Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'Заполнение возможно только в не проведенном документе.'"));
		Возврат;
	КонецЕсли;

	ОчиститьСообщения();

	СтрокаСообщения = НСтр("ru = 'Заполнение невозможно.'") ;
	Продолжать = Истина;
	
	Если НЕ ЗначениеЗаполнено(Объект.КонтрагентДебитор) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение",
		НСтр("ru = 'Контрагент'"),,, СтрокаСообщения);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка,
		"КонтрагентДебитор", "Объект");
		Продолжать = Ложь;
		
	КонецЕсли;
	
	Если НЕ Продолжать Тогда
		Возврат;
	КонецЕсли;

	ТекстВопроса = "";

	Если ИмяКнопки = "ЗаполнитьВзаиморасчеты" И (Объект.ДебиторскаяЗадолженность.Количество() > 0 ИЛИ Объект.КредиторскаяЗадолженность.Количество() > 0) Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением табличные части будут очищены. Заполнить?'");
	КонецЕсли;

	Если ТекстВопроса <> "" Тогда
		ДополнительныеПараметры = Новый Структура("ИмяКнопки", ИмяКнопки);
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениемТабличнойЧастиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да );
	Иначе
		ЗаполнитьТаблицыРасчетовНаКлиенте(ИмяКнопки);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗаполнениемТабличнойЧастиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьТаблицыРасчетовНаКлиенте(ДополнительныеПараметры.ИмяКнопки)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицыРасчетовНаКлиенте(ИмяКомандыЗаполнения)
	
	Результат = ЗаполнитьТаблицыРасчетовНаСервере(ИмяКомандыЗаполнения);
	
	Если НЕ Результат.ЗаданиеВыполнено Тогда
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьТаблицыРасчетовНаСервере(ИмяКомандыЗаполнения)

	Если ЭтоАдресВременногоХранилища(АдресХранилищаСОшибками) Тогда
		УдалитьИзВременногоХранилища(АдресХранилищаСОшибками);
		АдресХранилищаСОшибками = "";
	КонецЕсли;
		
	ПараметрыЗаполнения = СформироватьПараметрыЗаполнения(ИмяКомандыЗаполнения);
	
	АдресХранилищаСОшибками = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ПараметрыЗаполнения.Вставить("АдресХранилищаСОшибками", АдресХранилищаСОшибками);
	
	Для каждого ЗаполняемаяТаблица Из ПараметрыЗаполнения.ЗаполняемыеТаблицы Цикл
		Если ЗаполняемаяТаблица.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская Тогда
			Объект.ДебиторскаяЗадолженность.Очистить();
		Иначе
			Объект.КредиторскаяЗадолженность.Очистить();
		КонецЕсли;
	КонецЦикла;
		
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор, 
		"Документы.КорректировкаДолга.ЗаполнитьОстаткамиВзаиморасчетов", 
		ПараметрыЗаполнения, 
		НСтр("ru = 'Заполнить корректировку долга остатками по взаиморасчетам'"));
		
	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	АдресХранилища       = Результат.АдресХранилища;
	
	Если Результат.ЗаданиеВыполнено Тогда
		Результат = ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаСервере
Функция СформироватьПараметрыЗаполнения(ИмяКомандыЗаполнения)
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Дата",               Объект.Дата);
	ПараметрыЗаполнения.Вставить("Ссылка",             Объект.Ссылка);
	ПараметрыЗаполнения.Вставить("ЭтоНовый",           НЕ ЗначениеЗаполнено(Объект.Ссылка));
	ПараметрыЗаполнения.Вставить("Организация",        Объект.Организация);
	ПараметрыЗаполнения.Вставить("ВидОперации",        Объект.ВидОперации);
	
	СписокВидовДоговоровДебиторскойЗадолженности = Новый Массив;
	
	СписокВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	СписокВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	
	СписокВидовДоговоровКредиторскойЗадолженности = Новый Массив;
	
	СписокВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	СписокВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		
	ЗаполняемыеТаблицы = Новый ТаблицаЗначений;
	ЗаполняемыеТаблицы.Колонки.Добавить("ПоКонтрагенту",        Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ЗаполняемыеТаблицы.Колонки.Добавить("ВидЗадолженности",     Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЗадолженности"));
	ЗаполняемыеТаблицы.Колонки.Добавить("МассивВидовДоговоров", Новый ОписаниеТипов("Массив"));
	
	Если ИмяКомандыЗаполнения = "ЗаполнитьВзаиморасчеты" Тогда
		
		ЗаполняемаяТаблица = ЗаполняемыеТаблицы.Добавить();
		ЗаполняемаяТаблица.ПоКонтрагенту = Объект.КонтрагентДебитор;
		ЗаполняемаяТаблица.ВидЗадолженности     = Перечисления.ВидыЗадолженности.Кредиторская;
		ЗаполняемаяТаблица.МассивВидовДоговоров = СписокВидовДоговоровКредиторскойЗадолженности;
		
		ЗаполняемаяТаблица = ЗаполняемыеТаблицы.Добавить();
		ЗаполняемаяТаблица.ПоКонтрагенту        = Объект.КонтрагентДебитор;
		ЗаполняемаяТаблица.ВидЗадолженности     = Перечисления.ВидыЗадолженности.Дебиторская;
		ЗаполняемаяТаблица.МассивВидовДоговоров = СписокВидовДоговоровДебиторскойЗадолженности;
		
	КонецЕсли;
		
	
	ПараметрыЗаполнения.Вставить("ЗаполняемыеТаблицы", ЗаполняемыеТаблицы);
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

&НаСервере
Функция ЗагрузитьПодготовленныеДанные()

	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	РезультатВыполнения = Новый Структура();
	РезультатВыполнения.Вставить("ЗаданиеВыполнено",   Истина);
	РезультатВыполнения.Вставить("Успешно",            Ложь);
	РезультатВыполнения.Вставить("ЗаполненныеТаблицы", Новый Массив);
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура")
		Или Не СтруктураДанных.Успешно Тогда
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	РезультатВыполнения.Успешно = Истина;
	
	Для каждого ЗаполняемаяТаблица Из СтруктураДанных.ЗаполненныеТаблицы Цикл
		
		Если ЗаполняемаяТаблица.Ключ = Перечисления.ВидыЗадолженности.Дебиторская Тогда
			Объект.ДебиторскаяЗадолженность.Загрузить(ЗаполняемаяТаблица.Значение);
		Иначе
			Объект.КредиторскаяЗадолженность.Загрузить(ЗаполняемаяТаблица.Значение);
		КонецЕсли;
		РезультатВыполнения.ЗаполненныеТаблицы.Добавить(ЗаполняемаяТаблица.Ключ);
		
	КонецЦикла;

	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Процедура КонтрагентКредиторПриИзмененииСервер()
	
	КоличествоСтрокКоллекции = Объект.ДебиторскаяЗадолженность.Количество();
	
	Для Сч = 0 По (КоличествоСтрокКоллекции - 1) Цикл
		Объект.ДебиторскаяЗадолженность.Получить(Сч).КорДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЦикла;
	
	КоличествоСтрокКоллекции = Объект.КредиторскаяЗадолженность.Количество();
	
	Для Сч = 0 По (КоличествоСтрокКоллекции - 1) Цикл
		Объект.КредиторскаяЗадолженность.Получить(Сч).КорДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЦикла;
	
	
КонецПроцедуры

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура - Установить пиктограмму комментария.
//
&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриИзмененииДоговораВСтроке(ДанныеСтроки, ДанныеОбъекта, ИмяТабЧасти, ВалютаРегламентированногоУчета)

	Если ЗначениеЗаполнено(ДанныеСтроки.ДоговорКонтрагента) Тогда
		
		ДанныеСтроки.ВалютаДоговораКонтрагента = ДанныеСтроки.ДоговорКонтрагента.ВалютаРасчетов;
		
		Если ИмяТабЧасти = "ДебиторскаяЗадолженность" Тогда
			Контрагент = ДанныеОбъекта.КонтрагентДебитор;
		Иначе
			Контрагент = ДанныеОбъекта.КонтрагентКредитор;
		КонецЕсли;
		
		СчетаУчета = БухгалтерскийУчетВызовСервера.ПолучитьСчетаРасчетовСКонтрагентом(ДанныеОбъекта.Организация, Контрагент, ДанныеСтроки.ДоговорКонтрагента);
		
		Если ДанныеСтроки.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			
			Если ИмяТабЧасти = "ДебиторскаяЗадолженность" Тогда
				ДанныеСтроки.СчетУчетаРасчетов = СчетаУчета.СчетАвансовПоставщика;
			Иначе
				ДанныеСтроки.СчетУчетаРасчетов = СчетаУчета.СчетРасчетовПоставщика;
			КонецЕсли;
					
		ИначеЕсли ДанныеСтроки.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			
			Если ИмяТабЧасти = "ДебиторскаяЗадолженность" Тогда
				ДанныеСтроки.СчетУчетаРасчетов = СчетаУчета.СчетРасчетовПокупателя;
			Иначе
				ДанныеСтроки.СчетУчетаРасчетов = СчетаУчета.СчетАвансовПокупателя;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриИзмененииКорДоговораВСтроке(ДанныеСтроки, ДанныеОбъекта, ИмяТабЧасти)
	
	Если ЗначениеЗаполнено(ДанныеСтроки.ДоговорКонтрагента) Тогда
		
		Если ИмяТабЧасти = "ДебиторскаяЗадолженность" Тогда
			Контрагент = ДанныеОбъекта.КонтрагентДебитор;
		Иначе
			Контрагент = ДанныеОбъекта.КонтрагентКредитор;
		КонецЕсли;
		
		СчетаУчета = БухгалтерскийУчетСервер.ПолучитьСчетаРасчетовСКонтрагентом(ДанныеОбъекта.Организация, Контрагент, ДанныеСтроки.КорДоговорКонтрагента);

		Если ДанныеСтроки.КорДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			
			Если ИмяТабЧасти = "ДебиторскаяЗадолженность" Тогда
				ДанныеСтроки.КорСчетУчетаРасчетов = СчетаУчета.СчетАвансовПоставщика;
			Иначе
				ДанныеСтроки.КорСчетУчетаРасчетов = СчетаУчета.СчетРасчетовПоставщика;
			КонецЕсли;
					
		ИначеЕсли ДанныеСтроки.КорДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			
			Если ИмяТабЧасти = "ДебиторскаяЗадолженность" Тогда
				ДанныеСтроки.КорСчетУчетаРасчетов = СчетаУчета.СчетРасчетовПокупателя;
			Иначе
				ДанныеСтроки.КорСчетУчетаРасчетов = СчетаУчета.СчетАвансовПокупателя;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьОстаткиПоДоговору(ДанныеСтроки, ДанныеОбъекта, ИмяТабЧасти, ВалютаРегламентированногоУчета)

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.СуммаОстаток КАК Сумма,
		|	ХозрасчетныйОстатки.ВалютнаяСуммаОстаток КАК СуммаВзаиморасчетов
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&Период,
		|			Счет В ИЕРАРХИИ (&СчетаРасчетов),
		|			&ВидыСубконто,
		|			Организация = &Организация
		|				И Субконто1 = &Контрагент) КАК ХозрасчетныйОстатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ПО ХозрасчетныйОстатки.Субконто2 = ДоговорыКонтрагентов.Ссылка
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ДоговорыКонтрагентов.ВалютаРасчетов В (&ВалютаРегУчета)
		|				ТОГДА ВЫБОР
		|						КОГДА &ВидЗадолженности = &ВидЗадолженностиДебиторская
		|							ТОГДА ХозрасчетныйОстатки.СуммаОстаток > 0
		|						ИНАЧЕ ХозрасчетныйОстатки.СуммаОстаток < 0
		|					КОНЕЦ
		|			ИНАЧЕ ВЫБОР
		|					КОГДА &ВидЗадолженности = &ВидЗадолженностиДебиторская
		|						ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток > 0
		|					ИНАЧЕ ХозрасчетныйОстатки.ВалютнаяСуммаОстаток < 0
		|				КОНЕЦ
		|		КОНЕЦ
		|	И ДоговорыКонтрагентов.Ссылка = &ДоговорКонтрагента";
	Запрос.УстановитьПараметр("Период",  					  	ДанныеОбъекта.Дата);
	Запрос.УстановитьПараметр("Организация",				  	ДанныеОбъекта.Организация);
	Запрос.УстановитьПараметр("Контрагент", 				  	ДанныеОбъекта.КонтрагентДебитор);
	Запрос.УстановитьПараметр("ВидЗадолженности", 			  	ИмяТабЧасти);
	Запрос.УстановитьПараметр("ВидЗадолженностиДебиторская",  	"ДебиторскаяЗадолженность");
	Запрос.УстановитьПараметр("ДоговорКонтрагента",           	ДанныеСтроки.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ВалютаРегУчета",  				ВалютаРегламентированногоУчета);
	ВидыСубконто = Новый Массив();
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	СчетаРасчетов = Новый Массив();
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.СчетаКПолучению); // 1400
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.АвансыВыданные); // 1800
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.СчетаКОплате); // 3100
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.АвансыПолученные); // 3200
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.КраткосрочныеДолговыеОбязательства); // 3300
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.ДолгосрочныеОбязательства); // 4100
	Запрос.УстановитьПараметр("СчетаРасчетов", СчетаРасчетов);
	
	Выборка = ЗАпрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ДанныеСтроки.Сумма = ?(Выборка.Сумма < 0, -Выборка.Сумма, Выборка.Сумма); 
		ДанныеСтроки.СуммаВзаиморасчетов = ?(Выборка.СуммаВзаиморасчетов < 0, -Выборка.СуммаВзаиморасчетов, Выборка.СуммаВзаиморасчетов);
	КонецЕсли;	

КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииРаботаССубконто

&НаКлиенте
Процедура ПриИзмененииСубконтоДт(НомерСубконто)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСубконто(
		ЭтотОбъект,
		Объект,
		НомерСубконто,
		ПараметрыУстановкиСвойствСубконтоДт(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСубконтоКт(НомерСубконто)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСубконто(
		ЭтотОбъект,
		Объект,
		НомерСубконто,
		ПараметрыУстановкиСвойствСубконтоКт(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконтоДт(Форма)
	
	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"СубконтоДт", "СубконтоДт", "СчетДт");
	
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконтоКт(Форма)
	
	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"СубконтоКт", "СубконтоКт", "СчетКт");
	
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
