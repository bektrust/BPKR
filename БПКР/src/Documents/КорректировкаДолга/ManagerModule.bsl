#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает курс аванса, рассчитанный как частное от деления
// рублевого остатка по договору на валютный.
//
// Параметры:
//  Договор - СправочникСсылка.ДоговорыКонтрагентов - договор для отбора данных из РБХ.
//  Организация - СправочникСсылка.Организации - организация для отбора данных из РБХ.
//  ДатаКурса - Дата - дата для отбора данных из РБХ.
//  КурсДокумента - Число - курс, который возвращает функция, если запрос выдал пустой результат.
//
// Возвращаемое значение:
//  Число - курс.
//
Функция ПолучитьКурсВалютыАванса(Договор, Организация, ДатаКурса, КурсДокумента = 1) Экспорт
	
	ПорядокСубконто = Новый Массив;
	ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаКурса", ДатаКурса);
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("Контрагент", Договор.Владелец);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПорядокСубконто", ПорядокСубконто);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ПОМЕСТИТЬ ВТ_СчетаУчетаРасчетов
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АвансыПолученные), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АвансыВыданные), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СчетаКПолучению), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СчетаКОплате))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток,
		|	ХозрасчетныйОстатки.ВалютнаяСуммаОстаток КАК ВалютнаяСуммаОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ДатаКурса,
		|			Счет В
		|				(ВЫБРАТЬ
		|					ВТ_СчетаУчетаРасчетов.Счет
		|				ИЗ
		|					ВТ_СчетаУчетаРасчетов),
		|			&ПорядокСубконто,
		|			Субконто1 = &Контрагент
		|				И Субконто2 = &Договор
		|				И Организация = &Организация) КАК ХозрасчетныйОстатки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат КурсДокумента;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Возврат ?(Выборка.ВалютнаяСуммаОстаток = 0, КурсДокумента, Окр(Выборка.СуммаОстаток / Выборка.ВалютнаяСуммаОстаток, 4));
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти
	
#Область ПроцедурыПроведенияДокумента

// Формирует таблицу значений, содержащую данные для проведения по регистру бухгалтерии Хозрасчетный.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаХозрасчетный(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаДебиторскаяЗадолженность.КорСчетУчетаРасчетов  КАК СчетДт,
		|	ВременнаяТаблицаДебиторскаяЗадолженность.СчетУчетаРасчетов КАК СчетКт,
		|	ВременнаяТаблицаШапка.КонтрагентКредитор КАК СубконтоДт1,
		|	ВременнаяТаблицаДебиторскаяЗадолженность.КорДоговорКонтрагента КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ВременнаяТаблицаШапка.КонтрагентДебитор КАК СубконтоКт1,
		|	ВременнаяТаблицаДебиторскаяЗадолженность.ДоговорКонтрагента КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ВременнаяТаблицаДебиторскаяЗадолженность.Сумма КАК Сумма,
		|	ВременнаяТаблицаДебиторскаяЗадолженность.ВалютаРасчетовКорКонтрагент КАК ВалютаДт,
		|	ВременнаяТаблицаДебиторскаяЗадолженность.ВалютаРасчетовКонтрагент КАК ВалютаКт,
		|	ВременнаяТаблицаДебиторскаяЗадолженность.СуммаВзаиморасчетов КАК ВалютнаяСуммаДт,
		|	ВременнаяТаблицаДебиторскаяЗадолженность.СуммаВзаиморасчетов КАК ВалютнаяСуммаКт,
		|	""Перенос задолженности"" КАК Содержание
		|ИЗ
		|	ВременнаяТаблицаДебиторскаяЗадолженность КАК ВременнаяТаблицаДебиторскаяЗадолженность
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ПО ИСТИНА ГДЕ ВременнаяТаблицаШапка.ВидОперации = Значение(Перечисление.ВидыОперацийКорректировкаДолга.ПереносЗадолженности)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаКредиторскаяЗадолженность.СчетУчетаРасчетов,
		|	ВременнаяТаблицаКредиторскаяЗадолженность.КорСчетУчетаРасчетов,
		|	ВременнаяТаблицаШапка.КонтрагентДебитор,
		|	ВременнаяТаблицаКредиторскаяЗадолженность.ДоговорКонтрагента,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаШапка.КонтрагентКредитор,
		|	ВременнаяТаблицаКредиторскаяЗадолженность.КорДоговорКонтрагента,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаКредиторскаяЗадолженность.Сумма,
		|	ВременнаяТаблицаКредиторскаяЗадолженность.ВалютаРасчетовКонтрагент,
		|	ВременнаяТаблицаКредиторскаяЗадолженность.ВалютаРасчетовКорКонтрагент,
		|	ВременнаяТаблицаКредиторскаяЗадолженность.СуммаВзаиморасчетов,
		|	ВременнаяТаблицаКредиторскаяЗадолженность.СуммаВзаиморасчетов,
		|	""Перенос задолженности""
		|ИЗ
		|	ВременнаяТаблицаКредиторскаяЗадолженность КАК ВременнаяТаблицаКредиторскаяЗадолженность
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ПО ИСТИНА ГДЕ ВременнаяТаблицаШапка.ВидОперации = Значение(Перечисление.ВидыОперацийКорректировкаДолга.ПереносЗадолженности)";
	
	ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|";
	
	ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.СчетДт КАК СчетДт,
		|	ВременнаяТаблицаДебиторскаяЗадолженность.СчетУчетаРасчетов КАК СчетКт,
		|	ВременнаяТаблицаШапка.СубконтоДт1 КАК СубконтоДт1,
		|	ВременнаяТаблицаШапка.СубконтоДт2 КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ВременнаяТаблицаШапка.КонтрагентДебитор КАК СубконтоКт1,
		|	ВременнаяТаблицаДебиторскаяЗадолженность.ДоговорКонтрагента КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ВременнаяТаблицаДебиторскаяЗадолженность.Сумма КАК Сумма,
		|	ВременнаяТаблицаДебиторскаяЗадолженность.ВалютаРасчетовКонтрагент КАК ВалютаДт,
		|	ВременнаяТаблицаДебиторскаяЗадолженность.ВалютаРасчетовКонтрагент КАК ВалютаКт,
		|	ВременнаяТаблицаДебиторскаяЗадолженность.СуммаВзаиморасчетов КАК ВалютнаяСуммаДт,
		|	ВременнаяТаблицаДебиторскаяЗадолженность.СуммаВзаиморасчетов КАК ВалютнаяСуммаКт,
		|	""Списание задолженности"" КАК Содержание
		|ИЗ
		|	ВременнаяТаблицаДебиторскаяЗадолженность КАК ВременнаяТаблицаДебиторскаяЗадолженность
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ПО ИСТИНА ГДЕ ВременнаяТаблицаШапка.ВидОперации = Значение(Перечисление.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаКредиторскаяЗадолженность.СчетУчетаРасчетов,
		|	ВременнаяТаблицаШапка.СчетКт,
		|	ВременнаяТаблицаШапка.КонтрагентДебитор,
		|	ВременнаяТаблицаКредиторскаяЗадолженность.ДоговорКонтрагента,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаШапка.СубконтоКт1,
		|	ВременнаяТаблицаШапка.СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаКредиторскаяЗадолженность.Сумма,
		|	ВременнаяТаблицаКредиторскаяЗадолженность.ВалютаРасчетовКонтрагент,
		|	ВременнаяТаблицаКредиторскаяЗадолженность.ВалютаРасчетовКонтрагент,
		|	ВременнаяТаблицаКредиторскаяЗадолженность.СуммаВзаиморасчетов,
		|	ВременнаяТаблицаКредиторскаяЗадолженность.СуммаВзаиморасчетов,
		|	""Списание задолженности""
		|ИЗ
		|	ВременнаяТаблицаКредиторскаяЗадолженность КАК ВременнаяТаблицаКредиторскаяЗадолженность
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ПО ИСТИНА ГДЕ ВременнаяТаблицаШапка.ВидОперации = Значение(Перечисление.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности)";
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();		
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаХозрасчетный", РезультатЗапроса.Выгрузить());
	
	
КонецПроцедуры // СформироватьТаблицаДенежныеСредства()

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Дата КАК Дата,
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ТаблицаДокумента.ВидОперации КАК ВидОперации,
		|	ТаблицаДокумента.ВидАвансаЗадолженности КАК ВидАвансаЗадолженности,
		|	ТаблицаДокумента.ТипАвансаЗадолженности КАК ТипАвансаЗадолженности,
		|	ТаблицаДокумента.КонтрагентДебитор КАК КонтрагентДебитор,
		|	ТаблицаДокумента.КонтрагентКредитор КАК КонтрагентКредитор,
		|	ТаблицаДокумента.ИспользоватьВспомогательныйСчет КАК ИспользоватьВспомогательныйСчет,
		|	&ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
		|	ТаблицаДокумента.СчетДт КАК СчетДт,
		|	ТаблицаДокумента.СубконтоДт1 КАК СубконтоДт1,
		|	ТаблицаДокумента.СубконтоДт2 КАК СубконтоДт2,
		|	ТаблицаДокумента.СчетКт КАК СчетКт,
		|	ТаблицаДокумента.СубконтоКт1 КАК СубконтоКт1,
		|	ТаблицаДокумента.СубконтоКт2 КАК СубконтоКт2
		|ПОМЕСТИТЬ ВременнаяТаблицаШапка
		|ИЗ
		|	Документ.КорректировкаДолга КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаДокумента.Сумма КАК Сумма,
		|	ТаблицаДокумента.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаДокумента.СчетУчетаРасчетов КАК СчетУчетаРасчетов,
		|	ТаблицаДокумента.КорДоговорКонтрагента КАК КорДоговорКонтрагента,
		|	ТаблицаДокумента.КорСчетУчетаРасчетов КАК КорСчетУчетаРасчетов,
		|	ТаблицаДокумента.ДоговорКонтрагента.ВалютаРасчетов КАК ВалютаРасчетовКонтрагент,
		|	ТаблицаДокумента.КорДоговорКонтрагента.ВалютаРасчетов КАК ВалютаРасчетовКорКонтрагент
		|ПОМЕСТИТЬ ВременнаяТаблицаДебиторскаяЗадолженность
		|ИЗ
		|	Документ.КорректировкаДолга.ДебиторскаяЗадолженность КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаДокумента.Сумма КАК Сумма,
		|	ТаблицаДокумента.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаДокумента.СчетУчетаРасчетов КАК СчетУчетаРасчетов,
		|	ТаблицаДокумента.КорДоговорКонтрагента КАК КорДоговорКонтрагента,
		|	ТаблицаДокумента.КорСчетУчетаРасчетов КАК КорСчетУчетаРасчетов,
		|	ТаблицаДокумента.ДоговорКонтрагента.ВалютаРасчетов КАК ВалютаРасчетовКонтрагент,
		|	ТаблицаДокумента.КорДоговорКонтрагента.ВалютаРасчетов КАК ВалютаРасчетовКорКонтрагент
		|ПОМЕСТИТЬ ВременнаяТаблицаКредиторскаяЗадолженность
		|ИЗ
		|	Документ.КорректировкаДолга.КредиторскаяЗадолженность КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка";				
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);	
	Запрос.УстановитьПараметр("Период", СтруктураДополнительныеСвойства.ДляПроведения.Дата);	
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", СтруктураДополнительныеСвойства.ДляПроведения.ВалютаРегламентированногоУчета);	
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Выполнить();
	
	СформироватьТаблицаХозрасчетный(ДокументСсылка, СтруктураДополнительныеСвойства);
КонецПроцедуры // ИнициализироватьДанныеДокумента()

#КонецОбласти

#Область ВерсионированиеОбъектов

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//@skip-warning
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область ИнтерфейсПечати

// Функция формирует табличный документ с печатной формой АктСверки
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьАктаВзаимозачета(МассивОбъектов, ОбъектыПечати)
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КорректировкаДолга.Ссылка КАК Ссылка,
		|	КорректировкаДолга.ВидОперации КАК ВидОперации,
		|	КорректировкаДолга.Организация КАК Организация,
		|	КорректировкаДолга.Дата КАК Дата,
		|	КорректировкаДолга.Номер КАК Номер,
		|	КорректировкаДолга.Автор КАК Автор,
		|	КорректировкаДолга.Организация.ИНН КАК ИНН,
		|	КорректировкаДолга.Организация.КодПоОКПО КАК ОКПО,
		|	КорректировкаДолга.Организация.РегНомерСоцФонда КАК Рег,
		|	КорректировкаДолга.ВалютаДокумента.Наименование КАК ВалютаНаименование,
		|	КорректировкаДолга.КонтрагентДебитор КАК КонтрагентДебитор,
		|	КорректировкаДолга.КонтрагентКредитор КАК КонтрагентКредитор,
		|	КорректировкаДолга.ДебиторскаяЗадолженность.(
		|		НомерСтроки КАК НомерСтроки,
		|		ДоговорКонтрагента.Наименование КАК ДоговорНаименование,
		|		КорДоговорКонтрагента.Наименование КАК КорДоговорНаименование,
		//|		ВЫБОР
		//|			КОГДА КорректировкаДолга.ДебиторскаяЗадолженность.ВалютаДоговораКонтрагента = &ВалютаРегламентированногоУчета
		//|				ТОГДА КорректировкаДолга.ДебиторскаяЗадолженность.Сумма
		//|			ИНАЧЕ КорректировкаДолга.ДебиторскаяЗадолженность.СуммаВзаиморасчетов
		//|		КОНЕЦ КАК Сумма,
		|		КорректировкаДолга.ДебиторскаяЗадолженность.СуммаВзаиморасчетов КАК Сумма,
		|		СчетУчетаРасчетов.Код КАК СчетУчета,
		|		КорСчетУчетаРасчетов.Код КАК КорСчетУчета,
		|		ВалютаДоговораКонтрагента КАК ВалютаДоговораКонтрагента,
		|		ВалютаДоговораКонтрагента.Наименование КАК ВалютаДоговораКонтрагентаНаименование
		|	) КАК ДебиторскаяЗадолженность,
		|	КорректировкаДолга.КредиторскаяЗадолженность.(
		|		НомерСтроки КАК НомерСтроки,
		|		ДоговорКонтрагента.Наименование КАК ДоговорНаименование,
		|		КорДоговорКонтрагента.Наименование КАК КорДоговорНаименование,
		//|		ВЫБОР
		//|			КОГДА КорректировкаДолга.КредиторскаяЗадолженность.ВалютаДоговораКонтрагента = &ВалютаРегламентированногоУчета
		//|				ТОГДА КорректировкаДолга.КредиторскаяЗадолженность.Сумма
		//|			ИНАЧЕ КорректировкаДолга.КредиторскаяЗадолженность.СуммаВзаиморасчетов
		//|		КОНЕЦ КАК Сумма,
		|		КорректировкаДолга.КредиторскаяЗадолженность.СуммаВзаиморасчетов КАК Сумма,
		|		СчетУчетаРасчетов.Код КАК СчетУчета,
		|		КорСчетУчетаРасчетов.Код КАК КорСчетУчета,
		|		ВалютаДоговораКонтрагента КАК ВалютаДоговораКонтрагента,
		|		ВалютаДоговораКонтрагента.Наименование КАК ВалютаДоговораКонтрагентаНаименование
		|	) КАК КредиторскаяЗадолженность
		|ИЗ
		|	Документ.КорректировкаДолга КАК КорректировкаДолга
		|ГДЕ
		|	КорректировкаДолга.Ссылка В(&МассивОбъектов)";
	
	Запрос.Параметры.Вставить("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	РезультатПакет =  Запрос.ВыполнитьПакет();	
		
	Шапка = РезультатПакет[0].Выбрать();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "КорректировкаДолга_АктВзаимозачета";
	
	Пока Шапка.Следующий() Цикл
		
		Если Шапка.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.КорректировкаДолга.ПФ_MXL_АктВзаимозачетаОдинКонтрагент");
		Иначе
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.КорректировкаДолга.ПФ_MXL_АктВзаимозачета");
		КонецЕсли;
		
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ОрганизацияПолноеНаименование = Шапка.Организация.НаименованиеПолное;
		
		ДанныеПечати = Новый Структура;
		ДанныеПечати.Вставить("ОрганизацияПолноеНаименование", ОрганизацияПолноеНаименование);
		ДанныеПечати.Вставить("ДатаДокумента", Формат(Шапка.Дата, "ДЛФ=DD"));
		ДанныеПечати.Вставить("НомерДокумента", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер));
		
		ИсточникСсылка = Шапка.КонтрагентДебитор;
		ПриемникСсылка = Шапка.Организация;
		ИсточникНаименование = Шапка.КонтрагентДебитор.НаименованиеПолное;
		ПриемникНаименование = ОрганизацияПолноеНаименование;
		
		СведенияИсточник = БухгалтерскийУчетСервер.ПолучитьСведенияОКонтрагенте(Шапка.КонтрагентДебитор);
		СведенияПриемник = БухгалтерскийУчетСервер.ПолучитьСведенияОбОрганизации(Шапка.Организация, Шапка.Дата);
		
		ДанныеПечати.Вставить("ИсточникНаименование", ИсточникНаименование);
		ДанныеПечати.Вставить("ИННИсточник", СведенияИсточник.ИНН);
		ДанныеПечати.Вставить("АдресИсточник", СведенияИсточник.АдрЮр);
		ДанныеПечати.Вставить("РасчетныйСчетИсточник", СведенияИсточник.НомерСчета);
		ДанныеПечати.Вставить("БИКИсточник", СведенияИсточник.БИКБанка);
		
		ДанныеПечати.Вставить("ПриемникНаименование", ПриемникНаименование);
		ДанныеПечати.Вставить("ИННПриемник", СведенияПриемник.ИНН);
		ДанныеПечати.Вставить("АдресПриемник", СведенияПриемник.АдрЮр);
		ДанныеПечати.Вставить("РасчетныйСчетПриемник", СведенияПриемник.НомерСчета);
		ДанныеПечати.Вставить("БИКПриемник", СведенияПриемник.БИКБанка);
	
		ТаблицаДебиторскаяЗадолженность = Шапка.ДебиторскаяЗадолженность.Выгрузить();
		ТаблицаКредиторскаяЗадолженность = Шапка.КредиторскаяЗадолженность.Выгрузить();
		
		ТаблицаДебиторскаяЗадолженность.Сортировать("НомерСтроки");
		ТаблицаКредиторскаяЗадолженность.Сортировать("НомерСтроки");
		
		ТиповойЗаголовокТаблицы = НСтр("ru = 'Задолженность %1 перед %2 составляет %3 %4 по следующим договорам'");
		
		//Если ТаблицаДебиторскаяЗадолженность.Количество() > 0 Тогда
		//	СуммаВзаимозачетаИтого = ТаблицаДебиторскаяЗадолженность.Итог("Сумма");
		//Иначе	
		//	СуммаВзаимозачетаИтого = ТаблицаКредиторскаяЗадолженность.Итог("Сумма");
		//КонецЕсли;
		СуммаВзаимозачетаИтого = ТаблицаДебиторскаяЗадолженность.Итог("Сумма") + ТаблицаКредиторскаяЗадолженность.Итог("Сумма");
		
		СуммаВзаимозачетаИтогоСтрокой = Формат(СуммаВзаимозачетаИтого, "ЧЦ=15; ЧДЦ=2");
		
		ДанныеПечати.Вставить("СуммаВзаимозачетаИтого",СуммаВзаимозачетаИтогоСтрокой);
		ДанныеПечати.Вставить("ВалютаВзаимозачета", Шапка.ВалютаНаименование);
		
		ТекстЗаголовка1 = СтрШаблон(ТиповойЗаголовокТаблицы, 
								СокрЛП(ИсточникНаименование), 
								СокрЛП(ПриемникНаименование),
								СуммаВзаимозачетаИтогоСтрокой,
								Шапка.ВалютаНаименование);
								
		ТекстЗаголовка2 = СтрШаблон(ТиповойЗаголовокТаблицы, 
								СокрЛП(ПриемникНаименование), 
								СокрЛП(ИсточникНаименование),
								СуммаВзаимозачетаИтогоСтрокой,
								Шапка.ВалютаНаименование);								
								
		ПараметрыВыводаНаПечать = Новый Структура;
		ПараметрыВыводаНаПечать.Вставить("Ссылка", Шапка.Ссылка);
		ПараметрыВыводаНаПечать.Вставить("Макет", Макет);
		ПараметрыВыводаНаПечать.Вставить("ТабличныйДокумент", ТабличныйДокумент);
		ПараметрыВыводаНаПечать.Вставить("ДанныеПечати", ДанныеПечати);
		ПараметрыВыводаНаПечать.Вставить("ТекстЗаголовка1", ТекстЗаголовка1);
		ПараметрыВыводаНаПечать.Вставить("ТекстЗаголовка2", ТекстЗаголовка2);
		ПараметрыВыводаНаПечать.Вставить("ТаблицаДебиторскаяЗадолженность", ТаблицаДебиторскаяЗадолженность);
		ПараметрыВыводаНаПечать.Вставить("ТаблицаКредиторскаяЗадолженность", ТаблицаКредиторскаяЗадолженность);
		
		Если Шапка.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
			ВыводОдинКонтрагент(ПараметрыВыводаНаПечать);
		Иначе
			ВыводРазныеКонтрагенты(ПараметрыВыводаНаПечать);
		КонецЕсли;
			
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
		
	Возврат ТабличныйДокумент;		
	
КонецФункции

Процедура ВыводРазныеКонтрагенты(ПараметрыВыводаНаПечать)
	Макет 								= ПараметрыВыводаНаПечать.Макет;
	ТабличныйДокумент 					= ПараметрыВыводаНаПечать.ТабличныйДокумент;
	ДанныеПечати 						= ПараметрыВыводаНаПечать.ДанныеПечати;
	ТекстЗаголовка1 					= ПараметрыВыводаНаПечать.ТекстЗаголовка1;
	ТекстЗаголовка2 					= ПараметрыВыводаНаПечать.ТекстЗаголовка2;
	ТаблицаДебиторскаяЗадолженность 	= ПараметрыВыводаНаПечать.ТаблицаДебиторскаяЗадолженность;
	ТаблицаКредиторскаяЗадолженность 	= ПараметрыВыводаНаПечать.ТаблицаКредиторскаяЗадолженность;

	// Инициализация массива областей макета
	МассивОбластейМакета = Новый Массив;
	МассивОбластейМакета.Добавить("Шапка");
	МассивОбластейМакета.Добавить("Таблицы");
	МассивОбластейМакета.Добавить("Подвал");
	
	Для Каждого ИмяОбласти Из МассивОбластейМакета Цикл
		Если ИмяОбласти = "Таблицы" Тогда 
			ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
			ОбластьМакетаСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
			
			// ТаблицаДебиторскаяЗадолженность
			ОбластьМакетаЗаголовокТаблицы.Параметры.ЗаголовокЗадолженность = ТекстЗаголовка1;
			ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
			
			Для каждого СтрокаТаблицы Из ТаблицаДебиторскаяЗадолженность Цикл
				ОбластьМакетаСтрокаТаблицы.Параметры.Заполнить(СтрокаТаблицы);
				ТабличныйДокумент.Вывести(ОбластьМакетаСтрокаТаблицы);
			КонецЦикла;
			
			// ТаблицаКредиторскаяЗадолженность
			ОбластьМакетаЗаголовокТаблицы.Параметры.ЗаголовокЗадолженность = ТекстЗаголовка2;
			ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
			
			Для каждого СтрокаТаблицы Из ТаблицаКредиторскаяЗадолженность Цикл
				ОбластьМакетаСтрокаТаблицы.Параметры.Заполнить(СтрокаТаблицы);
				ТабличныйДокумент.Вывести(ОбластьМакетаСтрокаТаблицы);
			КонецЦикла;
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

Процедура ВыводОдинКонтрагент(ПараметрыВыводаНаПечать)
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Ссылка                              = ПараметрыВыводаНаПечать.Ссылка;
	Макет 								= ПараметрыВыводаНаПечать.Макет;
	ТабличныйДокумент 					= ПараметрыВыводаНаПечать.ТабличныйДокумент;
	ДанныеПечати 						= ПараметрыВыводаНаПечать.ДанныеПечати;
	ТаблицаДебиторскаяЗадолженность 	= ПараметрыВыводаНаПечать.ТаблицаДебиторскаяЗадолженность;
	ТаблицаКредиторскаяЗадолженность 	= ПараметрыВыводаНаПечать.ТаблицаКредиторскаяЗадолженность;
	ТекстЗаголовка = "Взаимозачет";

	ВалютаДоговоров = ВалютаРегламентированногоУчета;
	Если ТаблицаДебиторскаяЗадолженность.Количество() > 0 Тогда
		ВалютаДоговоров = ТаблицаДебиторскаяЗадолженность[0].ВалютаДоговораКонтрагента;
	ИначеЕсли ТаблицаКредиторскаяЗадолженность.Количество() > 0 Тогда
		ВалютаДоговоров = ТаблицаКредиторскаяЗадолженность[0].ВалютаДоговораКонтрагента;		
	КонецЕсли;
	
	// Инициализация массива областей макета
	МассивОбластейМакета = Новый Массив;
	МассивОбластейМакета.Добавить("Шапка");
	МассивОбластейМакета.Добавить("ТаблицаДоВзаимозачета");
	МассивОбластейМакета.Добавить("ТаблицаВзаимозачет");
	МассивОбластейМакета.Добавить("СтрокаТаблицыИтого");
	МассивОбластейМакета.Добавить("ТаблицаПослеВзаимозачета");
	МассивОбластейМакета.Добавить("Подвал");
	
	Для Каждого ИмяОбласти Из МассивОбластейМакета Цикл
		
		Если ИмяОбласти = "ТаблицаДоВзаимозачета" Тогда
			ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицыДоПосле");
			ОбластьМакетаЗаголовокТаблицы.Параметры.ЗаголовокЗадолженностьДоПосле = "До взаимозачета";
			ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
			
			ОбластьМакетаСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицыДоПосле");
			
			СуммаИтого = 0;
			
			СтруктураПараметров = СформироватьПараметрыДляПолученияОстатков(Ссылка, ВидГраницы.Исключая); 
			Для каждого ЗаполняемаяТаблица Из СтруктураПараметров.ЗаполняемыеТаблицы Цикл		
				ТаблицаЗадолженности = ПолучитьОстаткиВзаиморасчетовПоВидуЗадолженности(СтруктураПараметров, ЗаполняемаяТаблица);
				
				Для каждого СтрокаТаблицы Из ТаблицаЗадолженности Цикл
					Если НЕ СтрокаТаблицы.ВалютаДоговораКонтрагента = ВалютаДоговоров Тогда
						Продолжить;
					КонецЕсли;
					
					ОбластьМакетаСтрокаТаблицы.Параметры.Заполнить(СтрокаТаблицы);
										
					Если СтрокаТаблицы.ВалютаДоговораКонтрагента = ВалютаРегламентированногоУчета Тогда
						СуммаИтого = СуммаИтого + СтрокаТаблицы.СуммаОстатокДт - СтрокаТаблицы.СуммаОстатокКт;
					Иначе
						ОбластьМакетаСтрокаТаблицы.Параметры.СуммаОстатокДт = СтрокаТаблицы.ВалютнаяСуммаОстатокДт;
						ОбластьМакетаСтрокаТаблицы.Параметры.СуммаОстатокКт = СтрокаТаблицы.ВалютнаяСуммаОстатокКт;
						СуммаИтого = СуммаИтого + СтрокаТаблицы.ВалютнаяСуммаОстатокДт - СтрокаТаблицы.ВалютнаяСуммаОстатокКт;
					КонецЕсли;
					
					ТабличныйДокумент.Вывести(ОбластьМакетаСтрокаТаблицы);
				КонецЦикла;				
			КонецЦикла;
			
			ОбластьМакетаИтогоТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицыДоПослеИтого");
			ОбластьМакетаИтогоТаблицы.Параметры.ИтогоСодержание = "Итого до взаимозачета:";
			Если СуммаИтого < 0 Тогда
				ОбластьМакетаИтогоТаблицы.Параметры.СуммаОстатокКт = -СуммаИтого;
			Иначе
			    ОбластьМакетаИтогоТаблицы.Параметры.СуммаОстатокДт = СуммаИтого;
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьМакетаИтогоТаблицы);
			
		ИначеЕсли ИмяОбласти = "ТаблицаПослеВзаимозачета" Тогда
			ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицыДоПосле");
			ОбластьМакетаЗаголовокТаблицы.Параметры.ЗаголовокЗадолженностьДоПосле = "После взаимозачета";
			ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
			
			ОбластьМакетаСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицыДоПосле");
			
			СуммаИтого = 0;
			
			СтруктураПараметров = СформироватьПараметрыДляПолученияОстатков(Ссылка, ВидГраницы.Включая); 
			Для каждого ЗаполняемаяТаблица Из СтруктураПараметров.ЗаполняемыеТаблицы Цикл		
				ТаблицаЗадолженности = ПолучитьОстаткиВзаиморасчетовПоВидуЗадолженности(СтруктураПараметров, ЗаполняемаяТаблица);
				
				Для каждого СтрокаТаблицы Из ТаблицаЗадолженности Цикл
					Если НЕ СтрокаТаблицы.ВалютаДоговораКонтрагента = ВалютаДоговоров Тогда
						Продолжить;
					КонецЕсли;
					
					ОбластьМакетаСтрокаТаблицы.Параметры.Заполнить(СтрокаТаблицы);
					
					Если СтрокаТаблицы.ВалютаДоговораКонтрагента = ВалютаРегламентированногоУчета Тогда
						СуммаИтого = СуммаИтого + СтрокаТаблицы.СуммаОстатокДт - СтрокаТаблицы.СуммаОстатокКт;
					Иначе
						ОбластьМакетаСтрокаТаблицы.Параметры.СуммаОстатокДт = СтрокаТаблицы.ВалютнаяСуммаОстатокДт;
						ОбластьМакетаСтрокаТаблицы.Параметры.СуммаОстатокКт = СтрокаТаблицы.ВалютнаяСуммаОстатокКт;
						СуммаИтого = СуммаИтого + СтрокаТаблицы.ВалютнаяСуммаОстатокДт - СтрокаТаблицы.ВалютнаяСуммаОстатокКт;
					КонецЕсли;
					ТабличныйДокумент.Вывести(ОбластьМакетаСтрокаТаблицы);
				КонецЦикла;				
			КонецЦикла;
			
			ОбластьМакетаИтогоТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицыДоПослеИтого");
			ОбластьМакетаИтогоТаблицы.Параметры.ИтогоСодержание = "Итого после взаимозачета:";
			Если СуммаИтого < 0 Тогда
				ОбластьМакетаИтогоТаблицы.Параметры.СуммаОстатокКт = -СуммаИтого;
			Иначе
			    ОбластьМакетаИтогоТаблицы.Параметры.СуммаОстатокДт = СуммаИтого;
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьМакетаИтогоТаблицы);
			
		ИначеЕсли ИмяОбласти = "ТаблицаВзаимозачет" Тогда 
			ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
			ОбластьМакетаСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
			
			ШапкаВзаимозачетУжеВыведена = Ложь;
			
			// ТаблицаДебиторскаяЗадолженность
			Если ТаблицаДебиторскаяЗадолженность.Количество() > 0 Тогда
				ОбластьМакетаЗаголовокТаблицы.Параметры.ЗаголовокЗадолженность = ТекстЗаголовка;
				ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
				
				ШапкаВзаимозачетУжеВыведена = Истина;
				
				Для каждого СтрокаТаблицы Из ТаблицаДебиторскаяЗадолженность Цикл
					ОбластьМакетаСтрокаТаблицы.Параметры.Заполнить(СтрокаТаблицы);
					ОбластьМакетаСтрокаТаблицы.Параметры.ДоговорСчетДт = СтрокаТаблицы.КорСчетУчета 
																+ Символы.ПС + СтрокаТаблицы.КорДоговорНаименование;
					ОбластьМакетаСтрокаТаблицы.Параметры.ДоговорСчетКт = СтрокаТаблицы.СчетУчета 
																+ Символы.ПС + СтрокаТаблицы.ДоговорНаименование;
					ТабличныйДокумент.Вывести(ОбластьМакетаСтрокаТаблицы);
				КонецЦикла;
			КонецЕсли;
						
			// ТаблицаКредиторскаяЗадолженность
			Если ТаблицаКредиторскаяЗадолженность.Количество() > 0 Тогда
				Если НЕ ШапкаВзаимозачетУжеВыведена Тогда
					ОбластьМакетаЗаголовокТаблицы.Параметры.ЗаголовокЗадолженность = ТекстЗаголовка;
					ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);									
				КонецЕсли;
								
				Для каждого СтрокаТаблицы Из ТаблицаКредиторскаяЗадолженность Цикл
					ОбластьМакетаСтрокаТаблицы.Параметры.Заполнить(СтрокаТаблицы);
					ОбластьМакетаСтрокаТаблицы.Параметры.ДоговорСчетКт = СтрокаТаблицы.КорСчетУчета 
																+ Символы.ПС + СтрокаТаблицы.КорДоговорНаименование;
					ОбластьМакетаСтрокаТаблицы.Параметры.ДоговорСчетДт = СтрокаТаблицы.СчетУчета 
																+ Символы.ПС + СтрокаТаблицы.ДоговорНаименование;
					ТабличныйДокумент.Вывести(ОбластьМакетаСтрокаТаблицы);
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктВзаимозачета") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, 
		"АктВзаимозачета", НСтр("ru = 'Акт взаимозачета'"), ПечатьАктаВзаимозачета(МассивОбъектов, ОбъектыПечати),,
		"Документ.КорректировкаДолга.ПФ_MXL_АктВзаимозачета");
	КонецЕсли;
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	 	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктВзаимозачета";
	КомандаПечати.Представление = НСтр("ru = 'Акт взаимозачета'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 1;
	ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, "ВалютаДокумента", Справочники.Валюты.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.НеРавно);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает остатки взаиморасчетов по контрагенту. Выполняется в фоновом задании.
//
Процедура ЗаполнитьОстаткамиВзаиморасчетов(СтруктураПараметров, АдресХранилища) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	СтруктураДанныхЗаполнения = Новый Структура();
	СтруктураДанныхЗаполнения.Вставить("Успешно",            Истина);
	СтруктураДанныхЗаполнения.Вставить("ЗаполненныеТаблицы", Новый Соответствие);
	
	Для каждого ЗаполняемаяТаблица Из СтруктураПараметров.ЗаполняемыеТаблицы Цикл
		
		ТаблицаЗадолженности = ПолучитьОстаткиВзаиморасчетовПоВидуЗадолженности(СтруктураПараметров, ЗаполняемаяТаблица);
		СтруктураДанныхЗаполнения.ЗаполненныеТаблицы.Вставить(ЗаполняемаяТаблица.ВидЗадолженности, ТаблицаЗадолженности);
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(СтруктураДанныхЗаполнения, АдресХранилища);
	
КонецПроцедуры

// Получает остатки взаиморасчетов по контрагенту для одного из видов задолженности.
//
Функция ПолучитьОстаткиВзаиморасчетовПоВидуЗадолженности(СтруктураПараметров, ЗаполняемаяТаблица)

	СчетаРасчетов = Новый Массив();
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.СчетаКПолучению); // 1400
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.АвансыВыданные); // 1800
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.СчетаКОплате); // 3100
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.АвансыПолученные); // 3200
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.КраткосрочныеДолговыеОбязательства); // 3300
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.ДолгосрочныеОбязательства); // 4100

	СчетаИсключаемые = Новый Массив();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйВидыСубконто.Ссылка КАК Ссылка,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ЕстьКонтрагенты,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ЕстьДоговоры
		|ПОМЕСТИТЬ НаличиеНужныхСубконто
		|ИЗ
		|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйВидыСубконто.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК СчетаРасчетов
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НаличиеНужныхСубконто КАК НаличиеНужныхСубконто
		|		ПО Хозрасчетный.Ссылка = НаличиеНужныхСубконто.Ссылка
		|ГДЕ
		|	НаличиеНужныхСубконто.ЕстьКонтрагенты
		|	И НаличиеНужныхСубконто.ЕстьДоговоры
		|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
		|	И Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаРасчетов)
		|	И НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (&СчетаИсключаемые)";

	Запрос.УстановитьПараметр("СчетаРасчетов", СчетаРасчетов);
	Запрос.УстановитьПараметр("СчетаИсключаемые", СчетаИсключаемые);
	СчетаУчетаРасчетов = Запрос.Выполнить().Выгрузить();

	СчетаРасчетов = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(СчетаУчетаРасчетов.ВыгрузитьКолонку("СчетаРасчетов"), Истина);

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК Счет,
		|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
		|	ХозрасчетныйОстатки.Субконто2 КАК Договор,
		|	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).Наименование КАК ДоговорНаименование,
		|	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Счет КАК ПланСчетов.Хозрасчетный).Код КАК СчетУчетаКод,
		|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток,
		|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаОстатокДт,
		|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаОстатокКт,
		|	ХозрасчетныйОстатки.ВалютнаяСуммаОстаток КАК ВалютнаяСуммаОстаток,
		|	ДоговорыКонтрагентов.ВидДоговора КАК ВидДоговора,
		|	ДоговорыКонтрагентов.ВалютаРасчетов КАК ВалютаРасчетов,
		|	ДоговорыКонтрагентов.ВалютаРасчетов.Наименование КАК ВалютаРасчетовНаименование,
		|	ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт КАК ВалютнаяСуммаОстатокДт,
		|	ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт КАК ВалютнаяСуммаОстатокКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&Период,
		|			Счет В (&СчетаРасчетов),
		|			&ВидыСубконто,
		|			Организация = &Организация
		|				И Субконто1 = &Контрагент) КАК ХозрасчетныйОстатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ПО ХозрасчетныйОстатки.Субконто2 = ДоговорыКонтрагентов.Ссылка
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ДоговорыКонтрагентов.ВалютаРасчетов В (&ВалютаРегУчета)
		|				ТОГДА ВЫБОР
		|						КОГДА &ВидЗадолженности = &ВидЗадолженностиДебиторская
		|							ТОГДА ХозрасчетныйОстатки.СуммаОстаток > 0
		|						ИНАЧЕ ХозрасчетныйОстатки.СуммаОстаток < 0
		|					КОНЕЦ
		|			ИНАЧЕ ВЫБОР
		|					КОГДА &ВидЗадолженности = &ВидЗадолженностиДебиторская
		|						ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток > 0
		|					ИНАЧЕ ХозрасчетныйОстатки.ВалютнаяСуммаОстаток < 0
		|				КОНЕЦ
		|		КОНЕЦ";
	Если НЕ ЗаполняемаяТаблица.МассивВидовДоговоров = Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ДоговорыКонтрагентов.ВидДоговора В (&МассивВидовДоговоров)";
	КонецЕсли;
	
	ВидЗадолженности = ЗаполняемаяТаблица.ВидЗадолженности;
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если СтруктураПараметров.ЭтоНовый Тогда
		Запрос.УстановитьПараметр("Период", Новый МоментВремени(КонецДня(СтруктураПараметров.Дата), СтруктураПараметров.Ссылка));
	Иначе
		//Запрос.УстановитьПараметр("Период", Новый МоментВремени(СтруктураПараметров.Дата, СтруктураПараметров.Ссылка));
		ВидГраницыМомента = ВидГраницы.Включая;
		Если СтруктураПараметров.Свойство("ВидГраницы") Тогда
			ВидГраницыМомента = СтруктураПараметров.ВидГраницы;
		КонецЕсли;
		Запрос.УстановитьПараметр("Период", Новый Граница(Новый МоментВремени(СтруктураПараметров.Дата, СтруктураПараметров.Ссылка), ВидГраницыМомента));
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация",				  СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("Контрагент", 				  ЗаполняемаяТаблица.ПоКонтрагенту);
	Запрос.УстановитьПараметр("ВидЗадолженности", 			  ВидЗадолженности);
	Запрос.УстановитьПараметр("ВидЗадолженностиДебиторская",  Перечисления.ВидыЗадолженности.Дебиторская);
	Запрос.УстановитьПараметр("МассивВидовДоговоров",         ЗаполняемаяТаблица.МассивВидовДоговоров);
	
	СписокВалютыРеглУчета = Новый СписокЗначений;
	СписокВалютыРеглУчета.Добавить(ВалютаРеглУчета);
	Запрос.УстановитьПараметр("ВалютаРегУчета",  СписокВалютыРеглУчета);
	Запрос.УстановитьПараметр("СчетаРасчетов", СчетаРасчетов);

	ВидыСубконто = Новый Массив();
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	Если ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская Тогда
		Множитель = 1;
		ИмяТаблицыЗадолженности = "ДебиторскаяЗадолженность";
	Иначе		
		Множитель = -1;
		ИмяТаблицыЗадолженности = "КредиторскаяЗадолженность";
	КонецЕсли;
	ТаблицаЗадолженности = Документы.КорректировкаДолга.ПустаяСсылка()[ИмяТаблицыЗадолженности].ВыгрузитьКолонки();
	
	КЧ = Новый КвалификаторыЧисла(15,2);
	КС20 = Новый КвалификаторыСтроки(20);
	КС100 = Новый КвалификаторыСтроки(100);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС20 = Новый ОписаниеТипов(Массив, , КС20);
	
	Массив.Очистить();
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС100 = Новый ОписаниеТипов(Массив, , ,КС100);
	
	Массив.Очистить();
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,КЧ);

	ТаблицаЗадолженности.Колонки.Добавить("СуммаОстатокДт", ОписаниеТиповЧ);
	ТаблицаЗадолженности.Колонки.Добавить("СуммаОстатокКт", ОписаниеТиповЧ);
	ТаблицаЗадолженности.Колонки.Добавить("ВалютнаяСуммаОстатокДт", ОписаниеТиповЧ);
	ТаблицаЗадолженности.Колонки.Добавить("ВалютнаяСуммаОстатокКт", ОписаниеТиповЧ);
	ТаблицаЗадолженности.Колонки.Добавить("ДоговорНаименование", ОписаниеТиповС100);
	ТаблицаЗадолженности.Колонки.Добавить("СчетУчетаКод", ОписаниеТиповС20);
	ТаблицаЗадолженности.Колонки.Добавить("ВалютаДоговораКонтрагентаНаименование", ОписаниеТиповС20);
	
	ВыборкаОстатков = Запрос.Выполнить().Выбрать();
	Пока ВыборкаОстатков.Следующий() Цикл
		
		НоваяСтрока = ТаблицаЗадолженности.Добавить();
		НоваяСтрока.ДоговорКонтрагента = ВыборкаОстатков.Договор;
		НоваяСтрока.ВалютаДоговораКонтрагента = ВыборкаОстатков.ВалютаРасчетов;
		НоваяСтрока.ВалютаДоговораКонтрагентаНаименование = ВыборкаОстатков.ВалютаРасчетовНаименование;
		НоваяСтрока.СчетУчетаРасчетов  = ВыборкаОстатков.Счет;
		
		НоваяСтрока.СуммаВзаиморасчетов = Множитель * ВыборкаОстатков.ВалютнаяСуммаОстаток;
		НоваяСтрока.Сумма = Множитель * ВыборкаОстатков.СуммаОстаток;
		НоваяСтрока.СуммаОстатокДт = ВыборкаОстатков.СуммаОстатокДт;
		НоваяСтрока.СуммаОстатокКт = ВыборкаОстатков.СуммаОстатокКт;		
		НоваяСтрока.ВалютнаяСуммаОстатокДт = ВыборкаОстатков.ВалютнаяСуммаОстатокДт;
		НоваяСтрока.ВалютнаяСуммаОстатокКт = ВыборкаОстатков.ВалютнаяСуммаОстатокКт;
		НоваяСтрока.СчетУчетаКод = ВыборкаОстатков.СчетУчетаКод;
		НоваяСтрока.ДоговорНаименование = ВыборкаОстатков.ДоговорНаименование;
			
	КонецЦикла;
	
	Возврат ТаблицаЗадолженности;

КонецФункции

Функция СформироватьПараметрыДляПолученияОстатков(Ссылка, ВидГраницы)
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Дата",               Ссылка.Дата);
	ПараметрыЗаполнения.Вставить("Ссылка",             Ссылка);
	ПараметрыЗаполнения.Вставить("ЭтоНовый",           НЕ ЗначениеЗаполнено(Ссылка));
	ПараметрыЗаполнения.Вставить("Организация",        Ссылка.Организация);
	ПараметрыЗаполнения.Вставить("ВидОперации",        Ссылка.ВидОперации);
	ПараметрыЗаполнения.Вставить("ВидГраницы",         ВидГраницы);

	СписокВидовДоговоровДебиторскойЗадолженности = Новый Массив;
	
	СписокВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	СписокВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	
	СписокВидовДоговоровКредиторскойЗадолженности = Новый Массив;
	
	СписокВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	СписокВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		
	ЗаполняемыеТаблицы = Новый ТаблицаЗначений;
	ЗаполняемыеТаблицы.Колонки.Добавить("ПоКонтрагенту",        Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ЗаполняемыеТаблицы.Колонки.Добавить("ВидЗадолженности",     Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЗадолженности"));
	ЗаполняемыеТаблицы.Колонки.Добавить("МассивВидовДоговоров", Новый ОписаниеТипов("Массив"));
	
		
	ЗаполняемаяТаблица = ЗаполняемыеТаблицы.Добавить();
	ЗаполняемаяТаблица.ПоКонтрагенту = Ссылка.КонтрагентДебитор;
	ЗаполняемаяТаблица.ВидЗадолженности     = Перечисления.ВидыЗадолженности.Кредиторская;
	ЗаполняемаяТаблица.МассивВидовДоговоров = СписокВидовДоговоровКредиторскойЗадолженности;
	
	ЗаполняемаяТаблица = ЗаполняемыеТаблицы.Добавить();
	ЗаполняемаяТаблица.ПоКонтрагенту        = Ссылка.КонтрагентДебитор;
	ЗаполняемаяТаблица.ВидЗадолженности     = Перечисления.ВидыЗадолженности.Дебиторская;
	ЗаполняемаяТаблица.МассивВидовДоговоров = СписокВидовДоговоровДебиторскойЗадолженности;
		
	
	ПараметрыЗаполнения.Вставить("ЗаполняемыеТаблицы", ЗаполняемыеТаблицы);
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

#КонецОбласти

#КонецЕсли
