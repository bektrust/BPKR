#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыПроведенияДокумента

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаНачисления(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ВременнаяТаблицаШапка.Дата, МЕСЯЦ) КАК ПериодРегистрации,
		|	ТаблицаДокумента.ДатаНачала КАК ПериодДействияНачало,
		|	КОНЕЦПЕРИОДА(ТаблицаДокумента.ДатаОкончания, ДЕНЬ) КАК ПериодДействияКонец,
		|	ТаблицаДокумента.ВидРасчета КАК ВидРасчета,
		|	ТаблицаДокумента.СпособОтражения КАК СпособОтражения,
		|	ВременнаяТаблицаШапка.ФизЛицо КАК ФизЛицо,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.Подразделение КАК Подразделение,
		|	ТаблицаДокумента.Размер КАК Размер,
		|	ТаблицаДокумента.Результат КАК Результат,
		|	ТаблицаДокумента.ОтработаноДней КАК ОтработаноДней,
		|	ВременнаяТаблицаШапка.ГрафикРаботы КАК ГрафикРаботы
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаНачисления КАК ТаблицаДокумента
		|		ПО (ИСТИНА)";
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаНачисления", РезультатЗапроса.Выгрузить());
КонецПроцедуры // СформироватьТаблицаСотрудники()

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Дата,
		|	ТаблицаДокумента.Организация,
		|	ТаблицаДокумента.ФизЛицо,
		|	ТаблицаДокумента.Подразделение,
		|	ТаблицаДокумента.ГрафикРаботы,
		|	ТаблицаДокумента.Дней
		|ПОМЕСТИТЬ ВременнаяТаблицаШапка
		|ИЗ
		|	Документ.БольничныйЛист КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.ВидРасчета,
		|	ТаблицаДокумента.СпособОтражения,
		|	ТаблицаДокумента.ДатаНачала,
		|	ТаблицаДокумента.ДатаОкончания,
		|	ТаблицаДокумента.ОтработаноДней,
		|	ТаблицаДокумента.Размер,
		|	ТаблицаДокумента.Результат
		|ПОМЕСТИТЬ ВременнаяТаблицаНачисления
		|ИЗ
		|	Документ.БольничныйЛист.Начисления КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Выполнить();
	
	СформироватьТаблицаНачисления(ДокументСсылка, СтруктураДополнительныеСвойства);
КонецПроцедуры // ИнициализироватьДанныеДокумента()

#КонецОбласти

#Область ВерсионированиеОбъектов

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//@skip-warning
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область ИнтерфейсПечати

// Формирует запрос по документу.
//
Функция СформироватьЗапросДляПечати(МассивОбъектов)
	
	Запрос = Новый Запрос;	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БольничныйЛист.Ссылка КАК Ссылка,
		|	БольничныйЛист.Дата КАК ДатаДокумента,
		|	БольничныйЛист.Номер КАК НомерДокумента,
		|	БольничныйЛист.Организация КАК Организация,
		|	БольничныйЛист.Организация.НаименованиеПолное КАК ОрганизацияПредставление,
		|	БольничныйЛист.Организация.КодПоОКПО КАК КодПоОКПО,
		|	БольничныйЛист.ФизЛицо КАК ФизЛицо,
		|	БольничныйЛист.ФизЛицо.Наименование КАК ФизЛицоПредставление,
		|	БольничныйЛист.ФизЛицо.Код КАК ТабельныйНомер,
		|	БольничныйЛист.Должность.Наименование КАК ДолжностьПредставление,
		|	БольничныйЛист.Подразделение.Наименование КАК ПодразделениеПредставление,
		|	БольничныйЛист.МетодРасчета.Наименование КАК МетодРасчетаПредставление,
		|	БольничныйЛист.Дней КАК Дней,
		|	БольничныйЛист.ДатаНачала КАК ДатаНачала,
		|	БольничныйЛист.ДатаОкончания КАК ДатаОкончания,
		|	БольничныйЛист.МетодРасчета.ВидРасчетаОрганизация КАК ВидРасчета,
		|	БольничныйЛист.СреднийЗаработок.(
		|		ПериодРегистрации КАК ПериодРегистрации,
		|		НормаДней КАК НормаДней,
		|		ОтработаноДней КАК ОтработаноДней,
		|		ОтработаноЧасов КАК ОтработаноЧасов,
		|		Результат КАК СуммаСреднийЗаработок
		|	) КАК СреднийЗаработок,
		|	БольничныйЛист.Начисления.(
		|		ВидРасчета КАК ВидРасчета,
		|		СпособОтражения КАК СпособОтражения,
		|		ДатаНачала КАК ДатаНачала,
		|		Результат КАК СуммаНачислено,
		|		ОтработаноДней КАК ОтработаноДней,
		|		Размер КАК Размер,
		|		ДатаОкончания КАК ДатаОкончания
		|	) КАК Начисления
		|ИЗ
		|	Документ.БольничныйЛист КАК БольничныйЛист
		|ГДЕ
		|	БольничныйЛист.Ссылка В(&МассивОбъектов)";
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ПечатьСправкаПоРасчетуБольничного(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "БольничныйЛист_СправкаПоРасчетуБольничного";

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.БольничныйЛист.ПФ_MXL_СправкаПоРасчетуБольничного");		
	
	Шапка = СформироватьЗапросДляПечати(МассивОбъектов).Выбрать();
	Пока Шапка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ВсегоНачислено = 0;
		РазмерСреднийЗаработок = 0;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Подготовка данных
		ДанныеПечати = Новый Структура;
		ДанныеПечати.Вставить("ДатаНачала", Формат(Шапка.ДатаНачала, "ДЛФ=D"));
		ДанныеПечати.Вставить("ДатаОкончания", Формат(Шапка.ДатаОкончания, "ДЛФ=D"));
		
		ДанныеПечати.Вставить("ФизЛицо", Шапка.ФизЛицоПредставление);
		ДанныеПечати.Вставить("ТабельныйНомер", Шапка.ТабельныйНомер);
		ДанныеПечати.Вставить("Должность", Шапка.ДолжностьПредставление);
		ДанныеПечати.Вставить("Подразделение", Шапка.ПодразделениеПредставление);
		СтатусСотрудника = ПроведениеРасчетовПоЗарплатеСервер.СтатусСотрудникаКакНалогоплательщика(Шапка.ДатаДокумента, Шапка.Организация, Шапка.ФизЛицо);
		ДанныеПечати.Вставить("Статус", СтатусСотрудника.Статус);
		
		ДанныеПечати.Вставить("ДниБольничного", "" + Шапка.Дней);
		
		СреднийЗаработок = Шапка.СреднийЗаработок.Выгрузить();
		Начисления = Шапка.Начисления.Выгрузить();
		
		ДанныеПечатиСреднийЗаработок = Новый Структура;
		ДанныеПечатиБольничные = Новый Структура;
		ДанныеПечатиПодвал = Новый Структура;
			
		// Области
		МассивОбластейМакета = Новый Массив;
		МассивОбластейМакета.Добавить("Заголовок");
		МассивОбластейМакета.Добавить("ШапкаСреднийЗаработок");
		МассивОбластейМакета.Добавить("СтрокаСреднийЗаработок");
		МассивОбластейМакета.Добавить("ШапкаБольничные");
		МассивОбластейМакета.Добавить("СтрокаБольничные");
		МассивОбластейМакета.Добавить("Подвал");
		
		Для Каждого ИмяОбласти Из МассивОбластейМакета Цикл
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
			
			Если ИмяОбласти = "СтрокаСреднийЗаработок" Тогда
				Для каждого СтрокаТаблицы Из СреднийЗаработок Цикл
					ДанныеПечатиСреднийЗаработок.Вставить("ПериодРегистрации", Формат(СтрокаТаблицы.ПериодРегистрации, "ДЛФ=D"));
					ДанныеПечатиСреднийЗаработок.Вставить("НормаДней", СтрокаТаблицы.НормаДней);
					ДанныеПечатиСреднийЗаработок.Вставить("ОтработаноДней", СтрокаТаблицы.ОтработаноДней);
					ДанныеПечатиСреднийЗаработок.Вставить("СуммаСреднийЗаработок", СтрокаТаблицы.СуммаСреднийЗаработок);
					
					ОбластьМакета.Параметры.Заполнить(ДанныеПечатиСреднийЗаработок);
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
				// База начислений 
				РезультатСреднийЗаработок = СреднийЗаработок.Итог("СуммаСреднийЗаработок"); 
				ОтработаноДнейСреднийЗаработок = СреднийЗаработок.Итог("ОтработаноДней");
				Если ОтработаноДнейСреднийЗаработок = 0 Тогда
					РазмерСреднийЗаработок = 0;
				Иначе
					РазмерСреднийЗаработок = РезультатСреднийЗаработок / ОтработаноДнейСреднийЗаработок;
				КонецЕсли;	
				ОбластьИтогоСрденийЗаработок = Макет.ПолучитьОбласть("ИтогоСреднийЗаработок");
				ОбластьИтогоСрденийЗаработок.Параметры.ВсегоСреднийЗаработок = РазмерСреднийЗаработок;
				ОбластьИтогоСрденийЗаработок.Параметры.ИтогоСумма = РезультатСреднийЗаработок;
				ТабличныйДокумент.Вывести(ОбластьИтогоСрденийЗаработок);
			ИначеЕсли ИмяОбласти = "СтрокаБольничные" Тогда                  
				Для каждого СтрокаТаблицы Из Начисления Цикл
					ДанныеПечатиБольничные.Вставить("ДатаНачала", 			Формат(СтрокаТаблицы.ДатаНачала, "ДЛФ=D"));
					ДанныеПечатиБольничные.Вставить("ДатаОкончания", 		Формат(СтрокаТаблицы.ДатаОкончания, "ДЛФ=D"));
					ДанныеПечатиБольничные.Вставить("ОтработаноДней", 		СтрокаТаблицы.ОтработаноДней);
					ДанныеПечатиБольничные.Вставить("УчетПоЗП", 			СтрокаТаблицы.СпособОтражения);
					ДанныеПечатиБольничные.Вставить("СуммаНачислено", 		СтрокаТаблицы.СуммаНачислено);
					
					ОбластьМакета.Параметры.Заполнить(ДанныеПечатиБольничные);
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
				ВсегоНачислено = Начисления.Итог("СуммаНачислено");
			ИначеЕсли ИмяОбласти = "Подвал" Тогда
				ПенсионныйФонд = 0;
				ПодоходныйНалог = 0;
				 
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				               |	СтатусыСотрудниковСрезПоследних.ФизЛицо КАК ФизЛицо,
				               |	СтатусыСотрудниковСрезПоследних.Статус КАК Статус,
				               |	ЕСТЬNULL(СтавкиНалоговЗаработнойПлатыСрезПоследних.СтавкаПФР, 0) КАК СтавкаПФР,
				               |	ЕСТЬNULL(СтавкиНалоговЗаработнойПлатыСрезПоследних.СтавкаГНПФР, 0) КАК СтавкаГНПФР,
				               |	ЕСТЬNULL(СтавкиНалоговЗаработнойПлатыСрезПоследних.СтавкаПН, 0) КАК СтавкаПН,
				               |	ЕСТЬNULL(СтавкиНалоговЗаработнойПлатыСрезПоследних.Вычеты, 0) КАК Вычеты
				               |ИЗ
				               |	РегистрСведений.СтатусыСотрудников.СрезПоследних(
				               |			&КонецПериода,
				               |			Организация = &Организация
				               |				И ФизЛицо = &ФизЛицо) КАК СтатусыСотрудниковСрезПоследних
				               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНалоговЗаработнойПлаты.СрезПоследних(&КонецПериода, ) КАК СтавкиНалоговЗаработнойПлатыСрезПоследних
				               |		ПО СтатусыСотрудниковСрезПоследних.Статус = СтавкиНалоговЗаработнойПлатыСрезПоследних.Статус";
				Запрос.УстановитьПараметр("КонецПериода",  Шапка.ДатаДокумента);
				Запрос.УстановитьПараметр("Организация",  Шапка.Организация);
				Запрос.УстановитьПараметр("ФизЛицо",  Шапка.ФизЛицо);
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Если Шапка.ВидРасчета.ОблагаетсяСФ Тогда
						ПенсионныйФонд = ВсегоНачислено * (Выборка.СтавкаПФР / 100 + Выборка.СтавкаГНПФР / 100);
					КонецЕсли;
					Если Шапка.ВидРасчета.ОблагаетсяПН Тогда
						ПодоходныйНалог = (ВсегоНачислено - ПенсионныйФонд - Выборка.Вычеты * 100) * Выборка.СтавкаПН / 100;
					КонецЕсли;	
				КонецЕсли;	
				ДанныеПечатиПодвал.Вставить("ВсегоНачислено", 	ВсегоНачислено);
				ДанныеПечатиПодвал.Вставить("ПенсионныйФонд", 	ПенсионныйФонд);
				ДанныеПечатиПодвал.Вставить("ПодоходныйНалог", 	ПодоходныйНалог);
				ДанныеПечатиПодвал.Вставить("КВыдаче", 			ВсегоНачислено - ПенсионныйФонд - ПодоходныйНалог);
				
				ОбластьМакета.Параметры.Заполнить(ДанныеПечатиПодвал);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			ИначеЕсли ИмяОбласти <> "СтрокаСреднийЗаработок" И ИмяОбласти <> "СтрокаБольничные" Тогда
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЕсли;	
		КонецЦикла;

		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СправкаПоРасчетуБольничного") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, 
		"СправкаПоРасчетуБольничного", 
		НСтр("ru = 'Справка по расчету больничного'"), 
		ПечатьСправкаПоРасчетуБольничного(МассивОбъектов, ОбъектыПечати),
		,
		"Документ.БольничныйЛист.ПФ_MXL_СправкаПоРасчетуБольничного");
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СправкаПоРасчетуБольничного";
	КомандаПечати.Представление = НСтр("ru = 'Справка по расчету больничного'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 1;
		
КонецПроцедуры

#КонецОбласти

#КонецЕсли
