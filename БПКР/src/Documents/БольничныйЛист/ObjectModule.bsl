#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	ЗаполнениеОбъектовБП.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения);
КонецПроцедуры

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СуммаНачислений = Начисления.Итог("Результат");
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ИнициализироватьДанные(Отказ, РежимПроведения);
	
	ОтразитьДвижения(Отказ, РежимПроведения);
	
	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
		
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	ПроверяемыеРеквизиты.Добавить("Начисления");
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииОбработкаПроведения

// Процедура инициализирует данные документа
// и подготавливает таблицы для движения в регистры
//
Процедура ИнициализироватьДанные(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.БольничныйЛист.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

КонецПроцедуры
	
// Процедура заполняет регистры данными
//
Процедура ОтразитьДвижения(Отказ, РежимПроведения)

	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьНачисления(ДополнительныеСвойства, Движения, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура заполняет табличную часть
//
Процедура ЗаполнитьТабличнуюЧасть() Экспорт 
	// Определение количества месяцев
	ВидРасчета = МетодРасчета.ВидРасчетаСФ; 
	КоличествоМесяцев = ВидРасчета.ПериодРасчетаСреднегоЗаработка;
	Если КоличествоМесяцев = 0 Тогда 
		КоличествоМесяцев = 3;
	КонецЕсли;	
	
	НеполныеМесяцы = МетодРасчета.НеполныеМесяцы;
	
	Если НеполныеМесяцы = ПредопределенноеЗначение("Перечисление.НеполныеМесяцы.Отбрасывать") Тогда 
		БазовыйПериодНачало = ДобавитьМесяц(НачалоМесяца(ДатаНачала), - 12);
		БазовыйПериодКонец = НачалоМесяца(ДатаНачала) - 1;
	Иначе 
		БазовыйПериодНачало = ДобавитьМесяц(НачалоМесяца(ДатаНачала), -КоличествоМесяцев);
		БазовыйПериодКонец = НачалоМесяца(ДатаНачала) - 1;
	КонецЕсли;	
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.Дата, МЕСЯЦ) КАК ПериодРегистрации,
		|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.ДатаНачала, МЕСЯЦ) КАК ПериодДействияНачало,
		|	КОНЕЦПЕРИОДА(ТаблицаДокумента.ДатаНачала, МЕСЯЦ) КАК ПериодДействияКонец,
		|	&БазовыйПериодНачало,
		|	&БазовыйПериодКонец,
		|	&ВидРасчета,
		|	ТаблицаДокумента.ФизЛицо,
		|	ТаблицаДокумента.Организация,
		|	ТаблицаДокумента.ГрафикРаботы,
		|	ТаблицаДокумента.Подразделение
		|ИЗ
		|	Документ.БольничныйЛист КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Период", ДатаОкончания);	
	Запрос.УстановитьПараметр("Организация", Организация);	
	Запрос.УстановитьПараметр("ВидРасчета", ВидРасчета);	
	Запрос.УстановитьПараметр("БазовыйПериодНачало", БазовыйПериодНачало);	
	Запрос.УстановитьПараметр("БазовыйПериодКонец", БазовыйПериодКонец);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	ДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаНачисления", РезультатЗапроса.Выгрузить());
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьНачисления(ДополнительныеСвойства, Движения, Ложь);

	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
	Ошибки = Неопределено;
	ПроведениеРасчетовПоЗарплатеСервер.ЗаполнитьТабличнуюЧастьСреднийЗаработок(КоличествоМесяцев, БазовыйПериодНачало, БазовыйПериодКонец, 
							ГрафикРаботы, Ссылка, НеполныеМесяцы, СреднийЗаработок, Ошибки);
															
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);

	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	СреднийЗаработок.Сортировать("ПериодРегистрации");
	
КонецПроцедуры // ЗаполнитьТабличнуюЧасть()

// Процедура рассчитывает табличную часть
//
Процедура РассчитатьТабличнуюЧасть(РазмерСреднийЗаработок) Экспорт

	// Получение размеров для расчета БЛ
	НормыБольничныхЛистов = ПроведениеРасчетовПоЗарплатеСервер.НормыБольничныхЛистов(КоличествоЛетСтажа);
	
	Если НормыБольничныхЛистов.ДнейОрганизации = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнены размеры для расчета больничных листов. Откройте список размеров (Зарплата и кадры - Размеры больничных листов) и проверьте,
			|что для стажа ""%1"" или меньше установлены размеры.
			|Снова нажмите на кнопку ""Рассчитать"" в документе.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, КоличествоЛетСтажа);	
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат
	КонецЕсли;	
	
	ТекстыЗапроса = Новый Массив;

	// Выбираются дни с начала месяц начала периода
	// по окончание месяца конца периода
	// для определения нормы дней в месяце.
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	КалендариГрафиковРабот.ГрафикРаботы КАК ГрафикРаботы,
		|	КалендариГрафиковРабот.Дата КАК Дата,
		|	КалендариГрафиковРабот.ЗначениеДней КАК ЗначениеДней
		|ПОМЕСТИТЬ ВременнаяТаблицаКалендариГрафиковРабот
		|ИЗ
		|	РегистрСведений.КалендариГрафиковРабот КАК КалендариГрафиковРабот
		|ГДЕ
		|	КалендариГрафиковРабот.ГрафикРаботы = &ГрафикРаботы
		|	И (КалендариГрафиковРабот.Год = &ГодНачалоПериода
		|			ИЛИ КалендариГрафиковРабот.Год = &ГодКонецПериода)
		|	И КалендариГрафиковРабот.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ) И КОНЕЦПЕРИОДА(&КонецПериода, МЕСЯЦ)";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Выбираются первые 10 рабочих дней за счет организации.
	ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 10
		|	ВременнаяТаблицаКалендариГрафиковРабот.Дата КАК Дата,
		|	НАЧАЛОПЕРИОДА(ВременнаяТаблицаКалендариГрафиковРабот.Дата, МЕСЯЦ) КАК ПериодРегистрации
		|ПОМЕСТИТЬ ВременнаяТаблицаДниОрганизации
		|ИЗ
		|	ВременнаяТаблицаКалендариГрафиковРабот КАК ВременнаяТаблицаКалендариГрафиковРабот
		|ГДЕ
		|	ВременнаяТаблицаКалендариГрафиковРабот.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ВременнаяТаблицаКалендариГрафиковРабот.ЗначениеДней > 0";
	// Переопределение количества дней.
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ ПЕРВЫЕ 10", "ВЫБРАТЬ ПЕРВЫЕ " + ДнейОрганизации);
	ТекстыЗапроса.Добавить(ТекстЗапроса);

	// Определение календарных дней,
	// для определения границ периода дней за счет организации.
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВременнаяТаблицаКалендариГрафиковРабот.Дата КАК Дата
		|ПОМЕСТИТЬ ВременнаяТаблицаДниОрганизацииКалендарные
		|ИЗ
		|	ВременнаяТаблицаКалендариГрафиковРабот КАК ВременнаяТаблицаКалендариГрафиковРабот
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаДниОрганизации КАК ВременнаяТаблицаДниОрганизации
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ВременнаяТаблицаКалендариГрафиковРабот.Дата <= ВременнаяТаблицаДниОрганизации.Дата";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Выбираются оставшиеся дни за счет сф, 
	// исключением выбранных за счет организации.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаКалендариГрафиковРабот.Дата КАК Дата,
		|	НАЧАЛОПЕРИОДА(ВременнаяТаблицаКалендариГрафиковРабот.Дата, МЕСЯЦ) КАК ПериодРегистрации
		|ПОМЕСТИТЬ ВременнаяТаблицаДниСФ
		|ИЗ
		|	ВременнаяТаблицаКалендариГрафиковРабот КАК ВременнаяТаблицаКалендариГрафиковРабот
		|ГДЕ
		|	ВременнаяТаблицаКалендариГрафиковРабот.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И НЕ ВременнаяТаблицаКалендариГрафиковРабот.Дата В
		|				(ВЫБРАТЬ
		|					ВременнаяТаблицаДниОрганизации.Дата
		|				ИЗ
		|					ВременнаяТаблицаДниОрганизации КАК ВременнаяТаблицаДниОрганизации)
		|	И ВременнаяТаблицаКалендариГрафиковРабот.ЗначениеДней > 0
		|	И ВременнаяТаблицаКалендариГрафиковРабот.Дата <= &КонецПериода";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Определение календарных дней,
	// для определения границ периода дней за счет сф.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаКалендариГрафиковРабот.Дата КАК Дата,
		|	НАЧАЛОПЕРИОДА(ВременнаяТаблицаКалендариГрафиковРабот.Дата, МЕСЯЦ) КАК ПериодРегистрации
		|ПОМЕСТИТЬ ВременнаяТаблицаДниСФКалендарные
		|ИЗ
		|	ВременнаяТаблицаКалендариГрафиковРабот КАК ВременнаяТаблицаКалендариГрафиковРабот
		|ГДЕ
		|	НЕ ВременнаяТаблицаКалендариГрафиковРабот.Дата В
		|				(ВЫБРАТЬ
		|					ВременнаяТаблицаДниОрганизацииКалендарные.Дата
		|				ИЗ
		|					ВременнаяТаблицаДниОрганизацииКалендарные КАК ВременнаяТаблицаДниОрганизацииКалендарные)
		|	И ВременнаяТаблицаКалендариГрафиковРабот.Дата <= &КонецПериода";	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Определение границ периода за счет организации.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	МИНИМУМ(ВременнаяТаблицаДниОрганизации.Дата) КАК ДатаНачала,
		|	МАКСИМУМ(ВременнаяТаблицаДниОрганизации.Дата) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВременнаяТаблицаПериодыОрганизации
		|ИЗ
		|	ВременнаяТаблицаДниОрганизации КАК ВременнаяТаблицаДниОрганизации";
	ТекстыЗапроса.Добавить(ТекстЗапроса);

	// Определение границ периода за счет сф.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	МИНИМУМ(ВременнаяТаблицаДниСФКалендарные.Дата) КАК ДатаНачала,
		|	МАКСИМУМ(ВременнаяТаблицаДниСФКалендарные.Дата) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВременнаяТаблицаПериодыСФ
		|ИЗ
		|	ВременнаяТаблицаДниСФКалендарные КАК ВременнаяТаблицаДниСФКалендарные";
	ТекстыЗапроса.Добавить(ТекстЗапроса);

	// Норма дней в месяцах БЛ,
	// для расчет размера начисления за 1 день за счет сф.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ВременнаяТаблицаКалендариГрафиковРабот.Дата, МЕСЯЦ) КАК ПериодРегистрации,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВременнаяТаблицаКалендариГрафиковРабот.Дата) КАК НормаДней
		|ПОМЕСТИТЬ ВременнаяТаблицаНормаДней
		|ИЗ
		|	ВременнаяТаблицаКалендариГрафиковРабот КАК ВременнаяТаблицаКалендариГрафиковРабот
		|ГДЕ
		|	ВременнаяТаблицаКалендариГрафиковРабот.ЗначениеДней > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ВременнаяТаблицаКалендариГрафиковРабот.Дата, МЕСЯЦ)";
	ТекстыЗапроса.Добавить(ТекстЗапроса);

	// Расчет начислений БЛ.
	// * за счет организации
	// * за счет сф.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	&ПояснениеЗаСчетОрганизации КАК Пояснение,
		|	ВременнаяТаблицаДни.ПериодРегистрации КАК ПериодРегистрации,
		|	&ВидРасчетаОрганизация КАК ВидРасчета,
		|	&РазмерЗаСчетОрганизации КАК Размер,
		|	ВЫБОР
		|		КОГДА &ПособиеПоБеременности
		|			ТОГДА &РазмерЗаСчетОрганизации * КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВременнаяТаблицаДни.Дата) * &ПроцентБеременность / 100
		|		ИНАЧЕ &РазмерЗаСчетОрганизации * КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВременнаяТаблицаДни.Дата) * &Процент / 100
		|	КОНЕЦ КАК Результат,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВременнаяТаблицаДни.Дата) КАК ОтработаноДней,
		|	ВЫБОР
		|		КОГДА НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ВременнаяТаблицаДни.Дата, МЕСЯЦ)
		|				И &НачалоПериода <= ТаблицаПериоды.ДатаНачала
		|			ТОГДА &НачалоПериода
		|		КОГДА НАЧАЛОПЕРИОДА(ТаблицаПериоды.ДатаНачала, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ВременнаяТаблицаДни.Дата, МЕСЯЦ)
		|			ТОГДА ТаблицаПериоды.ДатаНачала
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(ВременнаяТаблицаДни.Дата, МЕСЯЦ)
		|	КОНЕЦ КАК ДатаНачала,
		|	ВЫБОР
		|		КОГДА НАЧАЛОПЕРИОДА(&КонецПериода, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ВременнаяТаблицаДни.Дата, МЕСЯЦ)
		|				И &КонецПериода <= ТаблицаПериоды.ДатаОкончания
		|			ТОГДА &КонецПериода
		|		КОГДА НАЧАЛОПЕРИОДА(ТаблицаПериоды.ДатаОкончания, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ВременнаяТаблицаДни.Дата, МЕСЯЦ)
		|			ТОГДА ТаблицаПериоды.ДатаОкончания
		|		ИНАЧЕ КОНЕЦПЕРИОДА(ВременнаяТаблицаДни.Дата, МЕСЯЦ)
		|	КОНЕЦ КАК ДатаОкончания
		|ИЗ
		|	ВременнаяТаблицаПериодыОрганизации КАК ТаблицаПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаДниОрганизации КАК ВременнаяТаблицаДни
		|		ПО (ИСТИНА)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаДни.ПериодРегистрации,
		|	ВЫБОР
		|		КОГДА НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ВременнаяТаблицаДни.Дата, МЕСЯЦ)
		|				И &НачалоПериода <= ТаблицаПериоды.ДатаНачала
		|			ТОГДА &НачалоПериода
		|		КОГДА НАЧАЛОПЕРИОДА(ТаблицаПериоды.ДатаНачала, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ВременнаяТаблицаДни.Дата, МЕСЯЦ)
		|			ТОГДА ТаблицаПериоды.ДатаНачала
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(ВременнаяТаблицаДни.Дата, МЕСЯЦ)
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА НАЧАЛОПЕРИОДА(&КонецПериода, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ВременнаяТаблицаДни.Дата, МЕСЯЦ)
		|				И &КонецПериода <= ТаблицаПериоды.ДатаОкончания
		|			ТОГДА &КонецПериода
		|		КОГДА НАЧАЛОПЕРИОДА(ТаблицаПериоды.ДатаОкончания, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ВременнаяТаблицаДни.Дата, МЕСЯЦ)
		|			ТОГДА ТаблицаПериоды.ДатаОкончания
		|		ИНАЧЕ КОНЕЦПЕРИОДА(ВременнаяТаблицаДни.Дата, МЕСЯЦ)
		|	КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&ПояснениеЗаСчетСФ,
		|	ВременнаяТаблицаДни.ПериодРегистрации,
		|	&ВидРасчетаСФ,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаНормаДней.НормаДней = 0
		|			ТОГДА 0
		|		ИНАЧЕ &РазмерЗаСчетСФ / ВременнаяТаблицаНормаДней.НормаДней
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА &ПособиеПоБеременности
		|			ТОГДА ВЫБОР
		|					КОГДА ВременнаяТаблицаНормаДней.НормаДней = 0
		|						ТОГДА 0
		|					ИНАЧЕ &РазмерБеременностьЗаСчетСФ / ВременнаяТаблицаНормаДней.НормаДней * КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВременнаяТаблицаДни.Дата)
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ВременнаяТаблицаНормаДней.НормаДней = 0
		|					ТОГДА 0
		|				ИНАЧЕ &РазмерЗаСчетСФ / ВременнаяТаблицаНормаДней.НормаДней * КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВременнаяТаблицаДни.Дата)
		|			КОНЕЦ
		|	КОНЕЦ,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВременнаяТаблицаДни.Дата),
		|	ВЫБОР
		|		КОГДА НАЧАЛОПЕРИОДА(ТаблицаПериоды.ДатаНачала, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ВременнаяТаблицаДни.Дата, МЕСЯЦ)
		|			ТОГДА ТаблицаПериоды.ДатаНачала
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(ВременнаяТаблицаДни.Дата, МЕСЯЦ)
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА НАЧАЛОПЕРИОДА(&КонецПериода, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ВременнаяТаблицаДни.Дата, МЕСЯЦ)
		|				И &КонецПериода <= ТаблицаПериоды.ДатаОкончания
		|			ТОГДА &КонецПериода
		|		КОГДА НАЧАЛОПЕРИОДА(ТаблицаПериоды.ДатаОкончания, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ВременнаяТаблицаДни.Дата, МЕСЯЦ)
		|			ТОГДА ТаблицаПериоды.ДатаОкончания
		|		ИНАЧЕ КОНЕЦПЕРИОДА(ВременнаяТаблицаДни.Дата, МЕСЯЦ)
		|	КОНЕЦ
		|ИЗ
		|	ВременнаяТаблицаПериодыСФ КАК ТаблицаПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаДниСФ КАК ВременнаяТаблицаДни
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаНормаДней КАК ВременнаяТаблицаНормаДней
		|			ПО ВременнаяТаблицаДни.ПериодРегистрации = ВременнаяТаблицаНормаДней.ПериодРегистрации
		|		ПО (ИСТИНА)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаДни.ПериодРегистрации,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаНормаДней.НормаДней = 0
		|			ТОГДА 0
		|		ИНАЧЕ &РазмерЗаСчетСФ / ВременнаяТаблицаНормаДней.НормаДней
		|	КОНЕЦ,
		|	ВременнаяТаблицаНормаДней.НормаДней,
		|	ВЫБОР
		|		КОГДА НАЧАЛОПЕРИОДА(ТаблицаПериоды.ДатаНачала, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ВременнаяТаблицаДни.Дата, МЕСЯЦ)
		|			ТОГДА ТаблицаПериоды.ДатаНачала
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(ВременнаяТаблицаДни.Дата, МЕСЯЦ)
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА НАЧАЛОПЕРИОДА(&КонецПериода, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ВременнаяТаблицаДни.Дата, МЕСЯЦ)
		|				И &КонецПериода <= ТаблицаПериоды.ДатаОкончания
		|			ТОГДА &КонецПериода
		|		КОГДА НАЧАЛОПЕРИОДА(ТаблицаПериоды.ДатаОкончания, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ВременнаяТаблицаДни.Дата, МЕСЯЦ)
		|			ТОГДА ТаблицаПериоды.ДатаОкончания
		|		ИНАЧЕ КОНЕЦПЕРИОДА(ВременнаяТаблицаДни.Дата, МЕСЯЦ)
		|	КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаНачала,
		|	ДатаОкончания";
	ТекстыЗапроса.Добавить(ТекстЗапроса);

	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос.УстановитьПараметр("ГодНачалоПериода", Год(ДатаНачала));
	Запрос.УстановитьПараметр("ГодКонецПериода", Год(ДатаОкончания));
	Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", ДатаОкончания);
	Запрос.УстановитьПараметр("РазмерЗаСчетОрганизации", РазмерСреднийЗаработок);
	Запрос.УстановитьПараметр("ВидРасчетаОрганизация", МетодРасчета.ВидРасчетаОрганизация);
	Запрос.УстановитьПараметр("ВидРасчетаСФ", МетодРасчета.ВидРасчетаСФ);
	Запрос.УстановитьПараметр("ГрафикРаботы", ГрафикРаботы);
	Запрос.УстановитьПараметр("ПособиеПоБеременности", МетодРасчета = Справочники.МетодыРасчетаБольничногоЛиста.ПособиеПоБеременности);
	
	Запрос.УстановитьПараметр("ПроцентБеременность", НормыБольничныхЛистов.ПроцентБеременность);
	Запрос.УстановитьПараметр("Процент", НормыБольничныхЛистов.Процент); // Процент оплаты организацией
	Запрос.УстановитьПараметр("РазмерЗаСчетСФ",НормыБольничныхЛистов.РазмерЗаСчетСФ);
	Запрос.УстановитьПараметр("РазмерБеременностьЗаСчетСФ", НормыБольничныхЛистов.РазмерБеременностьЗаСчетСФ);
	
	Запрос.УстановитьПараметр("ПояснениеЗаСчетОрганизации", НСтр("ru = 'За счет организации'"));
	Запрос.УстановитьПараметр("ПояснениеЗаСчетСФ", НСтр("ru = 'За счет Соц.фонда'"));

	Начисления.Загрузить(Запрос.Выполнить().Выгрузить());

	СтруктураОтбора = ПроведениеРасчетовПоЗарплатеСервер.СтруктураОтбораСпособыОтраженияЗаработнойПлаты();
	
	// Определение способа отражения.
	Для Каждого СтрокаТабличнойЧасти Из Начисления Цикл 
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТабличнойЧасти);
		СтруктураОтбора.Подразделение = Подразделение;
		СтрокаТабличнойЧасти.СпособОтражения = ПроведениеРасчетовПоЗарплатеСервер.СпособОтраженияЗаработнойПлаты(СтруктураОтбора);		
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли