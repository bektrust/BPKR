#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

Функция ТекстЗапросаДанныеДляОбновленияЦенДокументов() Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
		|	ТаблицаДокумента.Цена КАК Цена,
		|	&Валюта КАК Валюта,
		|	&СпособЗаполненияЦены КАК СпособЗаполненияЦены,
		|	&ЦенаВключаетНалоги КАК ЦенаВключаетНалоги
		|ПОМЕСТИТЬ ТаблицаНоменклатуры
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДокумента.Номенклатура,
		|	ТаблицаДокумента.Цена,
		|	&Валюта,
		|	&СпособЗаполненияЦены,
		|	&ЦенаВключаетНалоги
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции
 
// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла 
 
// Устанавливает параметры загрузки.
//
//@skip-warning
Процедура УстановитьПараметрыЗагрузкиИзФайлаВТЧ(Параметры) Экспорт
	
КонецПроцедуры

// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
//
// Параметры:
//   АдресЗагружаемыхДанных    - Строка - Адрес временного хранилища с таблицей значений, в которой
//                                        находятся загруженные данные из файла. Состав колонок:
//     * Идентификатор - Число - Порядковый номер строки;
//     * остальные колонки соответствуют колонкам макета ЗагрузкаИзФайла.
//   АдресТаблицыСопоставления - Строка - Адрес временного хранилища с пустой таблицей значений,
//                                        являющейся копией табличной части документа, 
//                                        которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
//   СписокНеоднозначностей - ТаблицаЗначений - Список неоднозначных значений, для которых в ИБ имеется несколько
//                                              подходящих вариантов.
//     * Колонка       - Строка - Имя колонки, в которой была обнаружена неоднозначность;
//     * Идентификатор - Число  - Идентификатор строки, в которой была обнаружена неоднозначность.
//   ПолноеИмяТабличнойЧасти   - Строка - Полное имя табличной части, в которую загружаются данные.
//   ДополнительныеПараметры   - ЛюбойТип - Любые дополнительные сведения.
//
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ПолноеИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт
	
	Товары = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления);
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
	
	ТаблицаНоменклатура = ЗагрузкаДанныхИзФайлаПереопределяемыйБП.СопоставитьНоменклатуруДоПервогоСовпадения(ЗагружаемыеДанные); 
	
	ЕстьПолеСуммаНДС = НЕ ЗагружаемыеДанные.Колонки.Найти("СуммаНДС") = Неопределено;
	ЕстьПолеСуммаНСП = НЕ ЗагружаемыеДанные.Колонки.Найти("СуммаНСП") = Неопределено;
	
	Для Каждого СтрокаТаблицы Из ЗагружаемыеДанные Цикл
		
		СтрокаТабличнойЧасти = Товары.Добавить();
		СтрокаТабличнойЧасти.Идентификатор = СтрокаТаблицы.Идентификатор;
		СтрокаТабличнойЧасти.Количество = СтрокаТаблицы.Количество;
		СтрокаТабличнойЧасти.Цена = СтрокаТаблицы.Цена;
		СтрокаТабличнойЧасти.Сумма = СтрокаТаблицы.Сумма;
		Если ЕстьПолеСуммаНДС Тогда 
			СтрокаТабличнойЧасти.СуммаНДС = СтрокаТаблицы.СуммаНДС;
		КонецЕсли;
		Если ЕстьПолеСуммаНСП Тогда 
			СтрокаТабличнойЧасти.СуммаНСП = СтрокаТаблицы.СуммаНСП;
		КонецЕсли;	
				
		СтрокаНоменклатура = ТаблицаНоменклатура.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
		Если СтрокаНоменклатура <> Неопределено Тогда 
			Если СтрокаНоменклатура.Количество = 1 Тогда 
				СтрокаТабличнойЧасти.Номенклатура = СтрокаНоменклатура.Ссылка;
			ИначеЕсли СтрокаНоменклатура.Количество > 1 Тогда
				ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
				ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор; 
				ЗаписьОНеоднозначности.Колонка = "Номенклатура";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Товары, АдресТаблицыСопоставления);
	
КонецПроцедуры

// Возвращает список подходящих объектов ИБ для неоднозначного значения ячейки.
// 
// Параметры:
//   ПолноеИмяТабличнойЧасти  - Строка - Полное имя табличной части, в которую загружаются данные.
//  ИмяКолонки                - Строка - Имя колонки, в который возникла неоднозначность.
//  СписокНеоднозначностей    - Массив - Массив для заполнения с неоднозначными данными.
//  ЗагружаемыеЗначенияСтрока - Строка - Загружаемые данные на основании которых возникла неоднозначность.
//  ДополнительныеПараметры   - ЛюбойТип - Любые дополнительные сведения.
//
Процедура ЗаполнитьСписокНеоднозначностей(ПолноеИмяТабличнойЧасти, СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока, ДополнительныеПараметры) Экспорт
	
	Если ИмяКолонки = "Номенклатура" Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Номенклатура.Ссылка
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.Номенклатура);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СписокНеоднозначностей.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла
 
#КонецОбласти

#Область ПроцедурыПроведенияДокумента

// Формирует таблицу значений, содержащую данные для проведения по регистру бухгалтерии Хозрасчетный.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаХозрасчетный(ДокументСсылка,СтруктураДополнительныеСвойства, Отказ)
	
	// Подготовка данных	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Ссылка КАК Регистратор,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	&Содержание КАК Содержание,
		|	ВременнаяТаблицаШапка.Склад КАК Склад,
		|	ВременнаяТаблицаШапка.Контрагент КАК Контрагент
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""Товары"" КАК ИмяСписка,
		|	&СинонимСписка КАК СинонимСписка,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ВременнаяТаблицаТовары.СчетУчета КАК СчетУчета,
		|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаШапка.Склад КАК Склад,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОприходования,
		|	0 КАК Себестоимость,
		|	ВременнаяТаблицаТовары.Количество КАК Количество,
		|	ВременнаяТаблицаТовары.СчетСебестоимости КАК КорСчетСписания,
		|	ВременнаяТаблицаТовары.СтатьяРасходов КАК КорСубконто1,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаТовары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.МБП)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""Товары"" КАК ИмяСписка,
		|	&СинонимСписка КАК СинонимСписка,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ВременнаяТаблицаТовары.СчетУчета КАК СчетУчета,
		|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаШапка.Склад КАК Склад,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОприходования,
		|	0 КАК Себестоимость,
		|	ВременнаяТаблицаТовары.Количество КАК Количество,
		|	ВременнаяТаблицаТовары.СчетСебестоимости КАК КорСчетСписания,
		|	ВременнаяТаблицаТовары.СтатьяРасходов КАК КорСубконто1,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ВременнаяТаблицаТовары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.МБП)
		|	И &ДокументОснование_ДвижениеМБП
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	Запрос.УстановитьПараметр("Содержание", НСтр("ru = 'Списание товаров'")); 
	Запрос.УстановитьПараметр("СинонимСписка", НСтр("ru = 'Товары'"));
	
	Если Тип("ДокументСсылка.ДвижениеМБП") = ТипЗнч(СтруктураДополнительныеСвойства.ДляПроведения.Ссылка.ДокументОснование) Тогда
		Запрос.УстановитьПараметр("ДокументОснование_ДвижениеМБП", Ложь);
	Иначе
		Запрос.УстановитьПараметр("ДокументОснование_ДвижениеМБП", Истина);		
	КонецЕсли;	
		
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизиты = МассивРезультатов[0].Выгрузить();
	ТаблицаТовары = МассивРезультатов[1].Выгрузить();
	ТаблицаМБП = МассивРезультатов[2].Выгрузить();
	
	ТаблицаСписанныеТовары = УчетТоваров.ПодготовитьТаблицуСписанныеТовары(ТаблицаТовары, ТаблицаРеквизиты, Отказ);
	ТаблицаСписанныеМБП = УчетМБП.ПодготовитьТаблицуСписанныеМБП(ТаблицаМБП, ТаблицаРеквизиты, Отказ);
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРеквизиты", ТаблицаРеквизиты);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСписанныеТовары", ТаблицаСписанныеТовары);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСписанныеМБП", ТаблицаСписанныеМБП);

	// Подготовка данных для ОС.	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ВременнаяТаблицаОС.СчетЗатрат КАК СчетЗатрат,
		|	ВременнаяТаблицаОС.СтатьяЗатрат КАК СтатьяЗатрат
		|ИЗ
		|	ВременнаяТаблицаОС КАК ВременнаяТаблицаОС";
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаОС = МассивРезультатов[0].Выгрузить();
	
	ТаблицаСписанныеОС = УправлениеВнеоборотнымиАктивами.ПодготовитьТаблицуСписанныеОС(ТаблицаОС, СтруктураДополнительныеСвойства);
	ТаблицаРаспределениеПоСпособуОтражения = УправлениеВнеоборотнымиАктивами.ПодготовитьТаблицуРаспределениеПоСпособуОтраженияРасходовПоАмортизации(ТаблицаОС, СтруктураДополнительныеСвойства, Неопределено);
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРеквизиты", ТаблицаРеквизиты);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСписанныеОС", ТаблицаСписанныеОС);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРаспределениеПоСпособуОтражения", ТаблицаРаспределениеПоСпособуОтражения);
	
	// 1. Доход от реализации товаров
	// 2. НДС товары
	// 3. НСП товары
	// 4. Скидки товары
	
	// 5. Доход от реализации услуг
	// 6. НДС услуги
	// 7. НСП услуги
	// 8. Скидки услуги
	
	// 9. Доход от реализации ОС
	// 10. НДС ОС
	// 11. НСП ОС
	// 12. Скидки ОС
	
	// 13. Доначисление НДС
	
	ТекстыЗапроса = Новый Массив;

	// Доход от реализации товаров.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	1 КАК Порядок,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.СчетРасчетов КАК СчетДт,
		|	ВременнаяТаблицаТовары.СчетДоходов КАК СчетКт,
		|	ВременнаяТаблицаШапка.Контрагент КАК СубконтоДт1,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ВременнаяТаблицаТовары.СтатьяДоходов КАК СубконтоКт1,
		|	ВременнаяТаблицаТовары.НоменклатурнаяГруппа КАК СубконтоКт2,
		|	ВременнаяТаблицаТовары.Номенклатура КАК СубконтоКт3,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаТовары.СуммаСкидки <> 0
		|			ТОГДА
		|				ВЫБОР
		|					КОГДА &ОтдельнаяПроводкаПоСкидке И ВременнаяТаблицаШапка.СуммаВключаетНалоги
		|						ТОГДА ВременнаяТаблицаТовары.СуммаДоходаВВалютеРеглУчета + ВременнаяТаблицаТовары.СуммаДоходаСкидкиВВалютеРеглУчета
		|					КОГДА НЕ &ОтдельнаяПроводкаПоСкидке И НЕ ВременнаяТаблицаШапка.СуммаВключаетНалоги
		|						ТОГДА ВременнаяТаблицаТовары.СуммаДоходаВВалютеРеглУчета - ВременнаяТаблицаТовары.СуммаДоходаСкидкиВВалютеРеглУчета
		|					ИНАЧЕ ВременнаяТаблицаТовары.СуммаДоходаВВалютеРеглУчета
		|				КОНЕЦ
		|		ИНАЧЕ ВременнаяТаблицаТовары.СуммаДоходаВВалютеРеглУчета
		|	КОНЕЦ КАК Сумма,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаДт,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаКт,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаТовары.СуммаСкидки <> 0
		|			ТОГДА 
		|				ВЫБОР
		|					КОГДА &ОтдельнаяПроводкаПоСкидке И ВременнаяТаблицаШапка.СуммаВключаетНалоги
		|						ТОГДА ВременнаяТаблицаТовары.СуммаДохода + ВременнаяТаблицаТовары.СуммаДоходаСкидки
		|					КОГДА НЕ &ОтдельнаяПроводкаПоСкидке И НЕ ВременнаяТаблицаШапка.СуммаВключаетНалоги
		|						ТОГДА ВременнаяТаблицаТовары.СуммаДохода - ВременнаяТаблицаТовары.СуммаДоходаСкидки
		|					ИНАЧЕ ВременнаяТаблицаТовары.СуммаДохода
		|				КОНЕЦ
		|		ИНАЧЕ ВременнаяТаблицаТовары.СуммаДохода
		|	КОНЕЦ КАК ВалютнаяСуммаДт,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаТовары.СуммаСкидки <> 0
		|			ТОГДА 
		|				ВЫБОР
		|					КОГДА &ОтдельнаяПроводкаПоСкидке И ВременнаяТаблицаШапка.СуммаВключаетНалоги
		|						ТОГДА ВременнаяТаблицаТовары.СуммаДохода + ВременнаяТаблицаТовары.СуммаДоходаСкидки
		|					КОГДА НЕ &ОтдельнаяПроводкаПоСкидке И НЕ ВременнаяТаблицаШапка.СуммаВключаетНалоги
		|						ТОГДА ВременнаяТаблицаТовары.СуммаДохода - ВременнаяТаблицаТовары.СуммаДоходаСкидки
		|					ИНАЧЕ ВременнаяТаблицаТовары.СуммаДохода
		|				КОНЕЦ
		|		ИНАЧЕ ВременнаяТаблицаТовары.СуммаДохода
		|	КОНЕЦ КАК ВалютнаяСуммаКт,
		|	ВЫРАЗИТЬ(&СодержаниеТоварыДоход КАК СТРОКА(150)) КАК Содержание,
		|	0 КАК КоличествоДт,
		|	0 КАК КоличествоКт,
		|	ЛОЖЬ КАК КорректироватьНУ
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ВременнаяТаблицаТовары.ВсегоВВалютеРеглУчета <> 0
		|	ИЛИ ВременнаяТаблицаТовары.Всего <> ВременнаяТаблицаТовары.СуммаСкидки";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// НДС товары.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	2 КАК Порядок,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.СчетРасчетов КАК СчетДт,
		|	ВременнаяТаблицаШапка.СчетУчетаНДС КАК СчетКт,
		|	ВременнаяТаблицаШапка.Контрагент КАК СубконтоДт1,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ВременнаяТаблицаТовары.СуммаНДСВВалютеРеглУчета КАК Сумма,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаДт,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаКт,
		|	ВременнаяТаблицаТовары.СуммаНДС КАК ВалютнаяСуммаДт,
		|	ВременнаяТаблицаТовары.СуммаНДС КАК ВалютнаяСуммаКт,
		|	&СодержаниеТоварыНДС КАК Содержание,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоДт,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоКт,
		|	ЛОЖЬ КАК КорректироватьНУ
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ПО (ИСТИНА)
		|ГДЕ
		|	&ПлательщикНДС
		|	И НЕ ВременнаяТаблицаТовары.СуммаНДСВВалютеРеглУчета = 0";
	ТекстыЗапроса.Добавить(ТекстЗапроса);

	// НСП товары.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	3 КАК Порядок,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.СчетРасчетов КАК СчетДт,
		|	ВременнаяТаблицаШапка.СчетУчетаНСП КАК СчетКт,
		|	ВременнаяТаблицаШапка.Контрагент КАК СубконтоДт1,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ВременнаяТаблицаТовары.СуммаНСПВВалютеРеглУчета КАК Сумма,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаДт,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаКт,
		|	ВременнаяТаблицаТовары.СуммаНСП КАК ВалютнаяСуммаДт,
		|	ВременнаяТаблицаТовары.СуммаНСП КАК ВалютнаяСуммаКт,
		|	&СодержаниеТоварыНСП КАК Содержание,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоДт,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоКт,
		|	ЛОЖЬ КАК КорректироватьНУ
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаТовары.СуммаНСПВВалютеРеглУчета = 0";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Скидки товары.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	4 КАК Порядок,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.СчетУчетаСкидок КАК СчетДт,
		|	ВременнаяТаблицаШапка.СчетРасчетов КАК СчетКт,
		|	ВременнаяТаблицаТовары.Номенклатура КАК СубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ВременнаяТаблицаШапка.Контрагент КАК СубконтоКт1,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаТовары.ВсегоВВалютеРеглУчета = ВременнаяТаблицаТовары.СуммаСкидкиВВалютеРеглУчета
		|			ТОГДА ВременнаяТаблицаТовары.СуммаСкидкиВВалютеРеглУчета
		|		ИНАЧЕ ВременнаяТаблицаТовары.СуммаДоходаСкидкиВВалютеРеглУчета
		|	КОНЕЦ КАК Сумма,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаДт,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаКт,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаТовары.Всего = ВременнаяТаблицаТовары.СуммаСкидки
		|			ТОГДА ВременнаяТаблицаТовары.СуммаСкидки
		|		ИНАЧЕ ВременнаяТаблицаТовары.СуммаДоходаСкидки
		|	КОНЕЦ КАК ВалютнаяСуммаДт,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаТовары.Всего = ВременнаяТаблицаТовары.СуммаСкидки
		|			ТОГДА ВременнаяТаблицаТовары.СуммаСкидки
		|		ИНАЧЕ ВременнаяТаблицаТовары.СуммаДоходаСкидки
		|	КОНЕЦ КАК ВалютнаяСуммаКт,
		|	&СодержаниеТоварыСкидка КАК Содержание,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоДт,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоКт,
		|	ЛОЖЬ КАК КорректироватьНУ
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаТовары.СуммаСкидкиВВалютеРеглУчета = 0
		|	И &ОтдельнаяПроводкаПоСкидке";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Доход от реализации услуг.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	5 КАК Порядок,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.СчетРасчетов КАК СчетДт,
		|	ВременнаяТаблицаУслуги.СчетДоходов КАК СчетКт,
		|	ВременнаяТаблицаШапка.Контрагент КАК СубконтоДт1,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ВременнаяТаблицаУслуги.СтатьяДоходов КАК СубконтоКт1,
		|	ВременнаяТаблицаУслуги.НоменклатурнаяГруппа КАК СубконтоКт2,
		|	ВременнаяТаблицаУслуги.Номенклатура КАК СубконтоКт3,	
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаУслуги.СуммаСкидки <> 0
		|			ТОГДА
		|				ВЫБОР
		|					КОГДА &ОтдельнаяПроводкаПоСкидке И ВременнаяТаблицаШапка.СуммаВключаетНалоги
		|						ТОГДА ВременнаяТаблицаУслуги.СуммаДоходаВВалютеРеглУчета + ВременнаяТаблицаУслуги.СуммаДоходаСкидкиВВалютеРеглУчета
		|					КОГДА НЕ &ОтдельнаяПроводкаПоСкидке И НЕ ВременнаяТаблицаШапка.СуммаВключаетНалоги
		|						ТОГДА ВременнаяТаблицаУслуги.СуммаДоходаВВалютеРеглУчета - ВременнаяТаблицаУслуги.СуммаДоходаСкидкиВВалютеРеглУчета
		|					ИНАЧЕ ВременнаяТаблицаУслуги.СуммаДоходаВВалютеРеглУчета
		|				КОНЕЦ
		|		ИНАЧЕ ВременнаяТаблицаУслуги.СуммаДоходаВВалютеРеглУчета
		|	КОНЕЦ КАК Сумма,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаДт,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаКт,	
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаУслуги.СуммаСкидки <> 0
		|			ТОГДА
		|				ВЫБОР
		|					КОГДА &ОтдельнаяПроводкаПоСкидке И ВременнаяТаблицаШапка.СуммаВключаетНалоги
		|						ТОГДА ВременнаяТаблицаУслуги.СуммаДохода + ВременнаяТаблицаУслуги.СуммаДоходаСкидки
		|					КОГДА НЕ &ОтдельнаяПроводкаПоСкидке И НЕ ВременнаяТаблицаШапка.СуммаВключаетНалоги
		|						ТОГДА ВременнаяТаблицаУслуги.СуммаДохода - ВременнаяТаблицаУслуги.СуммаДоходаСкидки
		|					ИНАЧЕ ВременнаяТаблицаУслуги.СуммаДохода
		|				КОНЕЦ
		|		ИНАЧЕ ВременнаяТаблицаУслуги.СуммаДохода
		|	КОНЕЦ КАК ВалютнаяСуммаДт,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаУслуги.СуммаСкидки <> 0
		|			ТОГДА
		|				ВЫБОР
		|					КОГДА &ОтдельнаяПроводкаПоСкидке И ВременнаяТаблицаШапка.СуммаВключаетНалоги
		|						ТОГДА ВременнаяТаблицаУслуги.СуммаДохода + ВременнаяТаблицаУслуги.СуммаДоходаСкидки
		|					КОГДА НЕ &ОтдельнаяПроводкаПоСкидке И НЕ ВременнаяТаблицаШапка.СуммаВключаетНалоги
		|						ТОГДА ВременнаяТаблицаУслуги.СуммаДохода - ВременнаяТаблицаУслуги.СуммаДоходаСкидки
		|					ИНАЧЕ ВременнаяТаблицаУслуги.СуммаДохода
		|				КОНЕЦ
		|		ИНАЧЕ ВременнаяТаблицаУслуги.СуммаДохода
		|	КОНЕЦ КАК ВалютнаяСуммаКт,	
		|	&СодержаниеУслугиДоход КАК Содержание,
		|	0 КАК КоличествоДт,
		|	0 КАК КоличествоКт,
		|	ЛОЖЬ КАК КорректироватьНУ
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги
		|		ПО (ИСТИНА)
		|ГДЕ
		|	(ВременнаяТаблицаУслуги.ВсегоВВалютеРеглУчета <> 0
		|			ИЛИ ВременнаяТаблицаУслуги.Всего <> ВременнаяТаблицаУслуги.СуммаСкидки)";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// НДС услуги.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	6 КАК Порядок,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.СчетРасчетов КАК СчетДт,
		|	ВременнаяТаблицаШапка.СчетУчетаНДС КАК СчетКт,
		|	ВременнаяТаблицаШапка.Контрагент КАК СубконтоДт1,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ВременнаяТаблицаУслуги.СуммаНДСВВалютеРеглУчета КАК Сумма,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаДт,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаКт,
		|	ВременнаяТаблицаУслуги.СуммаНДС КАК ВалютнаяСуммаДт,
		|	ВременнаяТаблицаУслуги.СуммаНДС КАК ВалютнаяСуммаКт,
		|	&СодержаниеУслугиНДС КАК Содержание,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоДт,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоКт,
		|	ЛОЖЬ КАК КорректироватьНУ
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги
		|		ПО (ИСТИНА)
		|ГДЕ
		|	&ПлательщикНДС
		|	И НЕ ВременнаяТаблицаУслуги.СуммаНДСВВалютеРеглУчета = 0";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// НСП услуги.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	7 КАК Порядок,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.СчетРасчетов КАК СчетДт,
		|	ВременнаяТаблицаШапка.СчетУчетаНСП КАК СчетКт,
		|	ВременнаяТаблицаШапка.Контрагент КАК СубконтоДт1,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ВременнаяТаблицаУслуги.СуммаНСПВВалютеРеглУчета КАК Сумма,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаДт,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаКт,
		|	ВременнаяТаблицаУслуги.СуммаНСП КАК ВалютнаяСуммаДт,
		|	ВременнаяТаблицаУслуги.СуммаНСП КАК ВалютнаяСуммаКт,
		|	&СодержаниеУслугиНСП КАК Содержание,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоДт,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоКт,
		|	ЛОЖЬ КАК КорректироватьНУ
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаУслуги.СуммаНСПВВалютеРеглУчета = 0";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Скидки услуги.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	8 КАК Порядок,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.СчетУчетаСкидок КАК СчетДт,
		|	ВременнаяТаблицаШапка.СчетРасчетов КАК СчетКт,
		|	ВременнаяТаблицаУслуги.Номенклатура КАК СубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ВременнаяТаблицаШапка.Контрагент КАК СубконтоКт1,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаУслуги.ВсегоВВалютеРеглУчета = ВременнаяТаблицаУслуги.СуммаСкидкиВВалютеРеглУчета
		|			ТОГДА ВременнаяТаблицаУслуги.СуммаСкидкиВВалютеРеглУчета
		|		ИНАЧЕ ВременнаяТаблицаУслуги.СуммаДоходаСкидкиВВалютеРеглУчета
		|	КОНЕЦ КАК Сумма,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаДт,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаКт,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаУслуги.Всего = ВременнаяТаблицаУслуги.СуммаСкидки
		|			ТОГДА ВременнаяТаблицаУслуги.СуммаСкидки
		|		ИНАЧЕ ВременнаяТаблицаУслуги.СуммаДоходаСкидки
		|	КОНЕЦ КАК ВалютнаяСуммаДт,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаУслуги.Всего = ВременнаяТаблицаУслуги.СуммаСкидки
		|			ТОГДА ВременнаяТаблицаУслуги.СуммаСкидки
		|		ИНАЧЕ ВременнаяТаблицаУслуги.СуммаДоходаСкидки
		|	КОНЕЦ КАК ВалютнаяСуммаКт,
		|	&СодержаниеУслугиСкидка КАК Содержание,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоДт,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоКт,
		|	ЛОЖЬ КАК КорректироватьНУ
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаУслуги.СуммаСкидкиВВалютеРеглУчета = 0
		|	И &ОтдельнаяПроводкаПоСкидке";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Доход от реализации ОС.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	9 КАК Порядок,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.СчетРасчетов КАК СчетДт,
		|	ВременнаяТаблицаОС.СчетДоходов КАК СчетКт,
		|	ВременнаяТаблицаШапка.Контрагент КАК СубконтоДт1,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ВременнаяТаблицаОС.СтатьяДоходов КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаОС.СуммаСкидки <> 0
		|			ТОГДА
		|				ВЫБОР
		|					КОГДА &ОтдельнаяПроводкаПоСкидке И ВременнаяТаблицаШапка.СуммаВключаетНалоги
		|						ТОГДА ВременнаяТаблицаОС.СуммаДоходаВВалютеРеглУчета + ВременнаяТаблицаОС.СуммаДоходаСкидкиВВалютеРеглУчета
		|					КОГДА НЕ &ОтдельнаяПроводкаПоСкидке И НЕ ВременнаяТаблицаШапка.СуммаВключаетНалоги
		|						ТОГДА ВременнаяТаблицаОС.СуммаДоходаВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаДоходаСкидкиВВалютеРеглУчета
		|					ИНАЧЕ ВременнаяТаблицаОС.СуммаДоходаВВалютеРеглУчета
		|				КОНЕЦ
		|		ИНАЧЕ ВременнаяТаблицаОС.СуммаДоходаВВалютеРеглУчета
		|	КОНЕЦ КАК Сумма,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаДт,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаКт,	
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаОС.СуммаСкидки <> 0
		|			ТОГДА
		|				ВЫБОР
		|					КОГДА &ОтдельнаяПроводкаПоСкидке И ВременнаяТаблицаШапка.СуммаВключаетНалоги
		|						ТОГДА ВременнаяТаблицаОС.СуммаДохода + ВременнаяТаблицаОС.СуммаДоходаСкидки
		|					КОГДА НЕ &ОтдельнаяПроводкаПоСкидке И НЕ ВременнаяТаблицаШапка.СуммаВключаетНалоги
		|						ТОГДА ВременнаяТаблицаОС.СуммаДохода - ВременнаяТаблицаОС.СуммаДоходаСкидки
		|					ИНАЧЕ ВременнаяТаблицаОС.СуммаДохода
		|				КОНЕЦ
		|		ИНАЧЕ ВременнаяТаблицаОС.СуммаДохода
		|	КОНЕЦ КАК ВалютнаяСуммаДт,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаОС.СуммаСкидки <> 0
		|			ТОГДА
		|				ВЫБОР
		|					КОГДА &ОтдельнаяПроводкаПоСкидке И ВременнаяТаблицаШапка.СуммаВключаетНалоги
		|						ТОГДА ВременнаяТаблицаОС.СуммаДохода + ВременнаяТаблицаОС.СуммаДоходаСкидки
		|					КОГДА НЕ &ОтдельнаяПроводкаПоСкидке И НЕ ВременнаяТаблицаШапка.СуммаВключаетНалоги
		|						ТОГДА ВременнаяТаблицаОС.СуммаДохода - ВременнаяТаблицаОС.СуммаДоходаСкидки
		|					ИНАЧЕ ВременнаяТаблицаОС.СуммаДохода
		|				КОНЕЦ
		|		ИНАЧЕ ВременнаяТаблицаОС.СуммаДохода
		|	КОНЕЦ КАК ВалютнаяСуммаКт,
		|	&СодержаниеОСДоход КАК Содержание,
		|	0 КАК КоличествоДт,
		|	0 КАК КоличествоКт,
		|	НЕ ЕСТЬNULL(ВременнаяТаблицаКонсервацияОС.Консервация, ЛОЖЬ) КАК КорректироватьНУ
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКонсервацияОС КАК ВременнаяТаблицаКонсервацияОС
		|		ПО (ВременнаяТаблицаОС.ОсновноеСредство = ВременнаяТаблицаКонсервацияОС.ОсновноеСредство)
		|ГДЕ
		|	(ВременнаяТаблицаОС.ВсегоВВалютеРеглУчета <> 0
		|			ИЛИ ВременнаяТаблицаОС.Всего <> ВременнаяТаблицаОС.СуммаСкидки)";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// НДС ОС.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	10 КАК Порядок,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.СчетРасчетов КАК СчетДт,
		|	ВременнаяТаблицаШапка.СчетУчетаНДС КАК СчетКт,
		|	ВременнаяТаблицаШапка.Контрагент КАК СубконтоДт1,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ВременнаяТаблицаОС.СуммаНДСВВалютеРеглУчета КАК Сумма,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаДт,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаКт,
		|	ВременнаяТаблицаОС.СуммаНДС КАК ВалютнаяСуммаДт,
		|	ВременнаяТаблицаОС.СуммаНДС КАК ВалютнаяСуммаКт,
		|	&СодержаниеОСНДС КАК Содержание,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоДт,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоКт,
		|	НЕ ЕСТЬNULL(ВременнаяТаблицаКонсервацияОС.Консервация, ЛОЖЬ) КАК КорректироватьНУ
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКонсервацияОС КАК ВременнаяТаблицаКонсервацияОС
		|		ПО (ВременнаяТаблицаОС.ОсновноеСредство = ВременнаяТаблицаКонсервацияОС.ОсновноеСредство)
		|ГДЕ
		|	&ПлательщикНДС
		|	И НЕ ВременнаяТаблицаОС.СуммаНДСВВалютеРеглУчета = 0";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// НСП ОС.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	11 КАК Порядок,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.СчетРасчетов КАК СчетДт,
		|	ВременнаяТаблицаШапка.СчетУчетаНСП КАК СчетКт,
		|	ВременнаяТаблицаШапка.Контрагент КАК СубконтоДт1,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ВременнаяТаблицаОС.СуммаНСПВВалютеРеглУчета КАК Сумма,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаДт,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаКт,
		|	ВременнаяТаблицаОС.СуммаНСП КАК ВалютнаяСуммаДт,
		|	ВременнаяТаблицаОС.СуммаНСП КАК ВалютнаяСуммаКт,
		|	&СодержаниеОСНСП КАК Содержание,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоДт,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоКт,
		|	НЕ ЕСТЬNULL(ВременнаяТаблицаКонсервацияОС.Консервация, ЛОЖЬ) КАК КорректироватьНУ
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКонсервацияОС КАК ВременнаяТаблицаКонсервацияОС
		|		ПО (ВременнаяТаблицаОС.ОсновноеСредство = ВременнаяТаблицаКонсервацияОС.ОсновноеСредство)
		|ГДЕ
		|	НЕ ВременнаяТаблицаОС.СуммаНСПВВалютеРеглУчета = 0";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Скидки ОС.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	12 КАК Порядок,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.СчетУчетаСкидок КАК СчетДт,
		|	ВременнаяТаблицаШапка.СчетРасчетов КАК СчетКт,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ВременнаяТаблицаШапка.Контрагент КАК СубконтоКт1,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаОС.ВсегоВВалютеРеглУчета = ВременнаяТаблицаОС.СуммаСкидкиВВалютеРеглУчета
		|			ТОГДА ВременнаяТаблицаОС.СуммаСкидкиВВалютеРеглУчета
		|		ИНАЧЕ ВременнаяТаблицаОС.СуммаДоходаСкидкиВВалютеРеглУчета
		|	КОНЕЦ КАК Сумма,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаДт,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаКт,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаОС.Всего = ВременнаяТаблицаОС.СуммаСкидки
		|			ТОГДА ВременнаяТаблицаОС.СуммаСкидки
		|		ИНАЧЕ ВременнаяТаблицаОС.СуммаДоходаСкидки
		|	КОНЕЦ КАК ВалютнаяСуммаДт,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаОС.Всего = ВременнаяТаблицаОС.СуммаСкидки
		|			ТОГДА ВременнаяТаблицаОС.СуммаСкидки
		|		ИНАЧЕ ВременнаяТаблицаОС.СуммаДоходаСкидки
		|	КОНЕЦ КАК ВалютнаяСуммаКт,
		|	&СодержаниеОССкидка КАК Содержание,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоДт,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоКт,
		|	НЕ ЕСТЬNULL(ВременнаяТаблицаКонсервацияОС.Консервация, ЛОЖЬ) КАК КорректироватьНУ
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКонсервацияОС КАК ВременнаяТаблицаКонсервацияОС
		|		ПО (ВременнаяТаблицаОС.ОсновноеСредство = ВременнаяТаблицаКонсервацияОС.ОсновноеСредство)
		|ГДЕ
		|	НЕ ВременнаяТаблицаОС.СуммаСкидкиВВалютеРеглУчета = 0
		|	И &ОтдельнаяПроводкаПоСкидке";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// ДоначислениеНДС товары.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	13 КАК Порядок,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаТовары.СчетРасходовНДС КАК СчетДт,
		|	ВременнаяТаблицаШапка.СчетУчетаНДС КАК СчетКт,
		|	ВременнаяТаблицаШапка.Контрагент КАК СубконтоДт1,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ВременнаяТаблицаТовары.СуммаДоначисленияНДСВВалютеРеглУчета КАК Сумма,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаДт,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаКт,
		|	ВременнаяТаблицаТовары.СуммаДоначисленияНДС КАК ВалютнаяСуммаДт,
		|	ВременнаяТаблицаТовары.СуммаДоначисленияНДС КАК ВалютнаяСуммаКт,
		|	&СодержаниеТоварыНДС КАК Содержание,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоДт,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоКт,
		|	ЛОЖЬ КАК КорректироватьНУ
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ПО (ИСТИНА)
		|ГДЕ
		|	&ПлательщикНДС
		|	И ВременнаяТаблицаШапка.РеализацияСДоначислениемНДС
		|	И НЕ ВременнаяТаблицаТовары.СуммаДоначисленияНДСВВалютеРеглУчета = 0";
	ТекстыЗапроса.Добавить(ТекстЗапроса);


	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, Символы.ПС + " ОБЪЕДИНИТЬ ВСЕ " + Символы.ПС);
	Запрос.УстановитьПараметр("СодержаниеТоварыДоход", 	НСтр("ru = 'Доход от реализации товаров'")); 
	Запрос.УстановитьПараметр("СодержаниеТоварыНДС", 	НСтр("ru = 'НДС (товары)'")); 
	Запрос.УстановитьПараметр("СодержаниеТоварыНСП", 	НСтр("ru = 'НСП (товары)'")); 
	Запрос.УстановитьПараметр("СодержаниеТоварыСкидка", НСтр("ru = 'Скидка на товары'")); 
	
	Запрос.УстановитьПараметр("СодержаниеУслугиДоход", 	НСтр("ru = 'Доход от реализации услуг'")); 
	Запрос.УстановитьПараметр("СодержаниеУслугиНДС", 	НСтр("ru = 'НДС (услуги)'")); 
	Запрос.УстановитьПараметр("СодержаниеУслугиНСП", 	НСтр("ru = 'НСП (услуги)'")); 
	Запрос.УстановитьПараметр("СодержаниеУслугиСкидка", НСтр("ru = 'Скидка на услуги'")); 
	
	Запрос.УстановитьПараметр("СодержаниеОСДоход", 		НСтр("ru = 'Доход от реализации ОС'")); 
	Запрос.УстановитьПараметр("СодержаниеОСНДС", 		НСтр("ru = 'НДС (ОС)'")); 
	Запрос.УстановитьПараметр("СодержаниеОСНСП", 		НСтр("ru = 'НСП (ОС)'")); 
	Запрос.УстановитьПараметр("СодержаниеОССкидка", 	НСтр("ru = 'Скидка на ОС'")); 

	Запрос.УстановитьПараметр("ПлательщикНДС", 				СтруктураДополнительныеСвойства.УчетнаяПолитика.ПлательщикНДС);
	Запрос.УстановитьПараметр("ОтдельнаяПроводкаПоСкидке", 	Константы.ОтдельнаяПроводкаПоСкидке.Получить());
	
	РезультатЗапроса = Запрос.Выполнить();	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаХозрасчетный", РезультатЗапроса.Выгрузить());	
		
КонецПроцедуры // СформироватьТаблицаХозрасчетный()

// Формирует таблицу значений, содержащую данные для проведения по регистру бухгалтерии Хозрасчетный.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПродажи(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	// 1. Товары
	// 2. Усуги
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	1 КАК Порядок,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.Ссылка КАК ДокументРеализации,
		|	ВременнаяТаблицаШапка.Склад КАК Склад,
		|	ВременнаяТаблицаШапка.Контрагент КАК Контрагент,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента КАК Договор,
		|	ВременнаяТаблицаШапка.СтавкаНДС КАК СтавкаНДС,
		|	ВременнаяТаблицаТовары.СтавкаНСП КАК СтавкаНСП,
		|	ВременнаяТаблицаШапка.БезналичныйРасчет КАК БезналичныйРасчет,
		|	ЛОЖЬ КАК ЭкспортУслугПокупателюКР,
		|	ВременнаяТаблицаШапка.БезвозмезднаяПоставка КАК БезвозмезднаяПоставка,
		|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
		|	СУММА(ВременнаяТаблицаТовары.Количество) КАК Количество,
		|	СУММА(ВременнаяТаблицаТовары.ВсегоВВалютеРеглУчета - ВременнаяТаблицаТовары.СуммаСкидкиВВалютеРеглУчета - ВременнаяТаблицаТовары.СуммаНДСВВалютеРеглУчета - ВременнаяТаблицаТовары.СуммаНСПВВалютеРеглУчета) КАК Сумма,
		|	СУММА(ВременнаяТаблицаТовары.СуммаНДСВВалютеРеглУчета) КАК СуммаНДС,
		|	СУММА(ВременнаяТаблицаТовары.СуммаНСПВВалютеРеглУчета) КАК СуммаНСП,
		|	СУММА(ВЫБОР
		|			КОГДА ВременнаяТаблицаТовары.ВсегоВВалютеРеглУчета = ВременнаяТаблицаТовары.СуммаСкидкиВВалютеРеглУчета
		|				ТОГДА ВременнаяТаблицаТовары.СуммаСкидкиВВалютеРеглУчета
		|			ИНАЧЕ ВременнаяТаблицаТовары.СуммаДоходаСкидкиВВалютеРеглУчета
		|		КОНЕЦ) КАК СуммаСкидки,
		|	СУММА(ВременнаяТаблицаТовары.СуммаСкидки) КАК СуммаСкидкиСНалогами,
		|	СУММА(ВЫБОР
		|			КОГДА ВременнаяТаблицаТовары.ВсегоВВалютеРеглУчета = ВременнаяТаблицаТовары.СуммаСкидкиВВалютеРеглУчета
		|				ТОГДА 0
		|			КОГДА ВременнаяТаблицаТовары.СуммаСкидкиВВалютеРеглУчета <> 0
		|				ТОГДА ВременнаяТаблицаТовары.ВсегоВВалютеРеглУчета - ВременнаяТаблицаТовары.СуммаСкидкиВВалютеРеглУчета - ВременнаяТаблицаТовары.СуммаНДСВВалютеРеглУчета - ВременнаяТаблицаТовары.СуммаНСПВВалютеРеглУчета
		|			ИНАЧЕ ВременнаяТаблицаТовары.СуммаДоходаВВалютеРеглУчета
		|		КОНЕЦ) КАК СуммаДохода,
		|	СУММА(ВременнаяТаблицаТовары.ВсегоВВалютеРеглУчета) КАК СуммаВсего,
		|	СУММА(0) КАК Себестоимость
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаТовары.ВсегоВВалютеРеглУчета = 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.Ссылка,
		|	ВременнаяТаблицаШапка.Склад,
		|	ВременнаяТаблицаШапка.Контрагент,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента,
		|	ВременнаяТаблицаШапка.СтавкаНДС,
		|	ВременнаяТаблицаТовары.СтавкаНСП,
		|	ВременнаяТаблицаШапка.БезналичныйРасчет,
		|	ВременнаяТаблицаШапка.БезвозмезднаяПоставка,
		|	ВременнаяТаблицаТовары.Номенклатура
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2,
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.Ссылка,
		|	ВременнаяТаблицаШапка.Склад,
		|	ВременнаяТаблицаШапка.Контрагент,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента,
		|	ВременнаяТаблицаШапка.СтавкаНДС,
		|	ВременнаяТаблицаУслуги.СтавкаНСП,
		|	ВременнаяТаблицаШапка.БезналичныйРасчет,
		|	ВременнаяТаблицаШапка.ЭкспортУслугПокупателюКР,
		|	ВременнаяТаблицаШапка.БезвозмезднаяПоставка,
		|	ВременнаяТаблицаУслуги.Номенклатура,
		|	СУММА(ВременнаяТаблицаУслуги.Количество),
		|	СУММА(ВременнаяТаблицаУслуги.ВсегоВВалютеРеглУчета - ВременнаяТаблицаУслуги.СуммаСкидкиВВалютеРеглУчета - ВременнаяТаблицаУслуги.СуммаНДСВВалютеРеглУчета - ВременнаяТаблицаУслуги.СуммаНСПВВалютеРеглУчета),
		|	СУММА(ВременнаяТаблицаУслуги.СуммаНДСВВалютеРеглУчета),
		|	СУММА(ВременнаяТаблицаУслуги.СуммаНСПВВалютеРеглУчета),
		|	СУММА(ВЫБОР
		|			КОГДА ВременнаяТаблицаУслуги.ВсегоВВалютеРеглУчета = ВременнаяТаблицаУслуги.СуммаСкидкиВВалютеРеглУчета
		|				ТОГДА ВременнаяТаблицаУслуги.СуммаСкидкиВВалютеРеглУчета
		|			ИНАЧЕ ВременнаяТаблицаУслуги.СуммаДоходаСкидкиВВалютеРеглУчета
		|		КОНЕЦ),
		|	СУММА(ВременнаяТаблицаУслуги.СуммаСкидки),
		|	СУММА(ВЫБОР
		|			КОГДА ВременнаяТаблицаУслуги.ВсегоВВалютеРеглУчета = ВременнаяТаблицаУслуги.СуммаСкидкиВВалютеРеглУчета
		|				ТОГДА 0
		|			КОГДА ВременнаяТаблицаУслуги.СуммаСкидкиВВалютеРеглУчета <> 0
		|				ТОГДА ВременнаяТаблицаУслуги.ВсегоВВалютеРеглУчета - ВременнаяТаблицаУслуги.СуммаСкидкиВВалютеРеглУчета - ВременнаяТаблицаУслуги.СуммаНДСВВалютеРеглУчета - ВременнаяТаблицаУслуги.СуммаНСПВВалютеРеглУчета
		|			ИНАЧЕ ВременнаяТаблицаУслуги.СуммаДоходаВВалютеРеглУчета
		|		КОНЕЦ),
		|	СУММА(ВременнаяТаблицаУслуги.ВсегоВВалютеРеглУчета),
		|	СУММА(0)
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаУслуги.ВсегоВВалютеРеглУчета = 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.Ссылка,
		|	ВременнаяТаблицаШапка.Склад,
		|	ВременнаяТаблицаШапка.Контрагент,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента,
		|	ВременнаяТаблицаШапка.СтавкаНДС,
		|	ВременнаяТаблицаУслуги.СтавкаНСП,
		|	ВременнаяТаблицаШапка.БезналичныйРасчет,
		|	ВременнаяТаблицаШапка.ЭкспортУслугПокупателюКР,
		|	ВременнаяТаблицаШапка.БезвозмезднаяПоставка,
		|	ВременнаяТаблицаУслуги.Номенклатура";
	РезультатЗапроса = Запрос.Выполнить();	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажи", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаРеализацияТоваров(ДокументСсылка, СтруктураДополнительныеСвойства) 

// Формирует таблицу значений, содержащую данные для проведения по регистру бухгалтерии Хозрасчетный.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПродажиОсновныхСредств(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.Ссылка КАК ДокументРеализации,
		|	ВременнаяТаблицаШапка.Склад КАК Склад,
		|	ВременнаяТаблицаШапка.Контрагент КАК Контрагент,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента КАК Договор,
		|	ВременнаяТаблицаШапка.СтавкаНДС КАК СтавкаНДС,
		|	ВременнаяТаблицаОС.СтавкаНСП КАК СтавкаНСП,
		|	ВременнаяТаблицаШапка.БезналичныйРасчет КАК БезналичныйРасчет,
		|	ВременнаяТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ВременнаяТаблицаОС.ВсегоВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаСкидкиВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаНДСВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаНСП КАК Сумма,
		|	ВременнаяТаблицаОС.СуммаНДСВВалютеРеглУчета КАК СуммаНДС,
		|	ВременнаяТаблицаОС.СуммаНСПВВалютеРеглУчета КАК СуммаНСП,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаОС.ВсегоВВалютеРеглУчета = ВременнаяТаблицаОС.СуммаСкидкиВВалютеРеглУчета
		|			ТОГДА ВременнаяТаблицаОС.СуммаСкидкиВВалютеРеглУчета
		|		ИНАЧЕ ВременнаяТаблицаОС.СуммаДоходаСкидкиВВалютеРеглУчета
		|	КОНЕЦ КАК СуммаСкидки,
		|	ВременнаяТаблицаОС.СуммаСкидки КАК СуммаСкидкиСНалогами,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаОС.ВсегоВВалютеРеглУчета = ВременнаяТаблицаОС.СуммаСкидкиВВалютеРеглУчета
		|			ТОГДА 0
		|		КОГДА ВременнаяТаблицаОС.СуммаСкидкиВВалютеРеглУчета <> 0
		|			ТОГДА ВременнаяТаблицаОС.ВсегоВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаСкидкиВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаНДСВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаНСП
		|		ИНАЧЕ ВременнаяТаблицаОС.СуммаДоходаВВалютеРеглУчета
		|	КОНЕЦ КАК СуммаДохода,
		|	ВременнаяТаблицаОС.ВсегоВВалютеРеглУчета КАК СуммаВсего,
		|	0 КАК Себестоимость
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаОС.ВсегоВВалютеРеглУчета = 0";
	РезультатЗапроса = Запрос.Выполнить();	
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажиОсновныхСредств", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаРеализацияТоваров(ДокументСсылка, СтруктураДополнительныеСвойства) 

// Формирует таблицу значений, содержащую данные для проведения по регистру накопления ОборотыПоДаннымЕдиногоНалога.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаОборотыПоДаннымЕдиногоНалога(СтруктураДополнительныеСвойства)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаТовары.ВидДеятельности КАК ВидДеятельности,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаШапка.БезналичныйРасчет
		|			ТОГДА 0
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ВременнаяТаблицаТовары.ВсегоВВалютеРеглУчета = ВременнаяТаблицаТовары.СуммаСкидкиВВалютеРеглУчета
		|					ТОГДА 0
		|				КОГДА ВременнаяТаблицаТовары.СуммаСкидкиВВалютеРеглУчета <> 0
		|					ТОГДА ВременнаяТаблицаТовары.ВсегоВВалютеРеглУчета - ВременнаяТаблицаТовары.СуммаСкидкиВВалютеРеглУчета - ВременнаяТаблицаТовары.СуммаНДСВВалютеРеглУчета
		|				ИНАЧЕ ВременнаяТаблицаТовары.СуммаДоходаВВалютеРеглУчета
		|			КОНЕЦ
		|	КОНЕЦ КАК СуммаНаличная,
		|	ВЫБОР
		|		КОГДА Не ВременнаяТаблицаШапка.БезналичныйРасчет
		|			ТОГДА 0
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ВременнаяТаблицаТовары.ВсегоВВалютеРеглУчета = ВременнаяТаблицаТовары.СуммаСкидкиВВалютеРеглУчета
		|					ТОГДА 0
		|				КОГДА ВременнаяТаблицаТовары.СуммаСкидкиВВалютеРеглУчета <> 0
		|					ТОГДА ВременнаяТаблицаТовары.ВсегоВВалютеРеглУчета - ВременнаяТаблицаТовары.СуммаСкидкиВВалютеРеглУчета - ВременнаяТаблицаТовары.СуммаНДСВВалютеРеглУчета
		|				ИНАЧЕ ВременнаяТаблицаТовары.СуммаДоходаВВалютеРеглУчета
		|			КОНЕЦ
		|	КОНЕЦ КАК СуммаБезналичная
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ПО (ИСТИНА)
		|ГДЕ
		|	&ПлательщикЕН
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаУслуги.ВидДеятельности,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаШапка.БезналичныйРасчет
		|			ТОГДА 0
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ВременнаяТаблицаУслуги.ВсегоВВалютеРеглУчета = ВременнаяТаблицаУслуги.СуммаСкидкиВВалютеРеглУчета
		|					ТОГДА 0
		|				КОГДА ВременнаяТаблицаУслуги.СуммаСкидкиВВалютеРеглУчета <> 0
		|					ТОГДА ВременнаяТаблицаУслуги.ВсегоВВалютеРеглУчета - ВременнаяТаблицаУслуги.СуммаСкидкиВВалютеРеглУчета - ВременнаяТаблицаУслуги.СуммаНДСВВалютеРеглУчета
		|				ИНАЧЕ ВременнаяТаблицаУслуги.СуммаДоходаВВалютеРеглУчета
		|			КОНЕЦ
		|	КОНЕЦ КАК СуммаНаличная,
		|	ВЫБОР
		|		КОГДА Не ВременнаяТаблицаШапка.БезналичныйРасчет
		|			ТОГДА 0
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ВременнаяТаблицаУслуги.ВсегоВВалютеРеглУчета = ВременнаяТаблицаУслуги.СуммаСкидкиВВалютеРеглУчета
		|					ТОГДА 0
		|				КОГДА ВременнаяТаблицаУслуги.СуммаСкидкиВВалютеРеглУчета <> 0
		|					ТОГДА ВременнаяТаблицаУслуги.ВсегоВВалютеРеглУчета - ВременнаяТаблицаУслуги.СуммаСкидкиВВалютеРеглУчета - ВременнаяТаблицаУслуги.СуммаНДСВВалютеРеглУчета
		|				ИНАЧЕ ВременнаяТаблицаУслуги.СуммаДоходаВВалютеРеглУчета
		|			КОНЕЦ
		|	КОНЕЦ КАК СуммаБезналичная

		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги
		|		ПО (ИСТИНА)
		|ГДЕ
		|	&ПлательщикЕН
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаОС.ВидДеятельности,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаШапка.БезналичныйРасчет
		|			ТОГДА 0
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ВременнаяТаблицаОС.ВсегоВВалютеРеглУчета = ВременнаяТаблицаОС.СуммаСкидкиВВалютеРеглУчета
		|					ТОГДА 0
		|				КОГДА ВременнаяТаблицаОС.СуммаСкидкиВВалютеРеглУчета <> 0
		|					ТОГДА ВременнаяТаблицаОС.ВсегоВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаСкидкиВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаНДСВВалютеРеглУчета
		|				ИНАЧЕ ВременнаяТаблицаОС.СуммаДоходаВВалютеРеглУчета
		|			КОНЕЦ
		|	КОНЕЦ КАК СуммаНаличная,
		|	ВЫБОР
		|		КОГДА Не ВременнаяТаблицаШапка.БезналичныйРасчет
		|			ТОГДА 0
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ВременнаяТаблицаОС.ВсегоВВалютеРеглУчета = ВременнаяТаблицаОС.СуммаСкидкиВВалютеРеглУчета
		|					ТОГДА 0
		|				КОГДА ВременнаяТаблицаОС.СуммаСкидкиВВалютеРеглУчета <> 0
		|					ТОГДА ВременнаяТаблицаОС.ВсегоВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаСкидкиВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаНДСВВалютеРеглУчета
		|				ИНАЧЕ ВременнаяТаблицаОС.СуммаДоходаВВалютеРеглУчета
		|			КОНЕЦ
		|	КОНЕЦ КАК СуммаБезналичная
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ПО (ИСТИНА)
		|ГДЕ
		|	&ПлательщикЕН";
	Запрос.УстановитьПараметр("ПлательщикЕН", СтруктураДополнительныеСвойства.УчетнаяПолитика.ПлательщикЕНМетодНачисления);
	РезультатЗапроса = Запрос.Выполнить();	
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ОборотыПоДаннымЕдиногоНалога", РезультатЗапроса.Выгрузить());
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру бухгалтерии Хозрасчетный.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаБланкиСчетовФактур(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.ДатаСФ КАК Период,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.СерияБланкаСФ,
		|	ВременнаяТаблицаШапка.НомерБланкаСФ,
		|	1 КАК Количество,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|ГДЕ
		|	НЕ ВременнаяТаблицаШапка.СерияБланкаСФ = """"
		|	И НЕ ВременнаяТаблицаШапка.НомерБланкаСФ = """"";		
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаБланкиСчетовФактур", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаСотрудники()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСостоянияОС(ДокументСсылка, СтруктураДополнительныеСвойства)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация,
		|	ТаблицаДокумента.ОсновноеСредство,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.Передано) КАК Состояние
		|ИЗ
		|	ВременнаяТаблицаОСВключаяОСКомплектов КАК ТаблицаДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ПО (ИСТИНА)";
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСостоянияОС", РезультатЗапроса.Выгрузить()); 
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСобытияОС(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ТаблицаДокумента.ОсновноеСредство КАК ОсновноеСредство,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Реализация) КАК Событие,
		|	ВременнаяТаблицаШапка.Номер КАК НомерДокумента,
		|	""Реализация ОС"" КАК НазваниеДокумента
		|ИЗ
		|	ВременнаяТаблицаОС КАК ТаблицаДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ПО (ИСТИНА)";
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСобытияОС", РезультатЗапроса.Выгрузить());
КонецПроцедуры     

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДвижениеОСНУ(ДокументСсылка, СтруктураДополнительныеСвойства) 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ПараметрыУчетаОССрезПоследних.ГруппаНУ КАК ГруппаНУ,
		|	ВременнаяТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ВременнаяТаблицаОС.ВсегоВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаНДСВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаНСПВВалютеРеглУчета КАК Выбытие,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаШапка.Дата >= ДАТАВРЕМЯ(2022, 1, 1)
		|			ТОГДА ВременнаяТаблицаОС.ВсегоВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаНДСВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаНСПВВалютеРеглУчета
		|		ИНАЧЕ ВЫРАЗИТЬ((ВременнаяТаблицаОС.ВсегоВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаНДСВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаНСПВВалютеРеглУчета) * (12 - МЕСЯЦ(ВременнаяТаблицаШапка.Дата) + 0.5) / 12 КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК ТекущееВыбытие
		|ИЗ
		|	ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ПО (ИСТИНА)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыУчетаОС.СрезПоследних(
		|				&Период,
		|				Организация = &Организация
		|					И ОсновноеСредство В
		|						(ВЫБРАТЬ
		|							ВременнаяТаблицаОС.ОсновноеСредство
		|						ИЗ
		|							ВременнаяТаблицаОС КАК ВременнаяТаблицаОС)) КАК ПараметрыУчетаОССрезПоследних
		|		ПО ВременнаяТаблицаОС.ОсновноеСредство = ПараметрыУчетаОССрезПоследних.ОсновноеСредство
		|ГДЕ
		|	НЕ ПараметрыУчетаОССрезПоследних.ГруппаНУ = ЗНАЧЕНИЕ(Справочник.ГруппыНалоговогоУчетаОС.ПустаяСсылка)";		
	Запрос.УстановитьПараметр("Период", СтруктураДополнительныеСвойства.ДляПроведения.Дата);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДвижениеОСНУ", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры 

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСчетаФактурыВыписанные(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;	
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ВременнаяТаблицаШапка.Дата КАК ДатаПоставки,
	|	ВременнаяТаблицаШапка.Организация КАК Организация,
	|	ВременнаяТаблицаШапка.Ссылка КАК Документ,
	|	ВременнаяТаблицаШапка.СерияБланкаСФ КАК СерияБланкаСФ,
	|	ВременнаяТаблицаШапка.НомерБланкаСФ КАК НомерБланкаСФ,
	|	ВременнаяТаблицаШапка.ПризнакСтраны КАК ПризнакСтраны,
	|	ВременнаяТаблицаШапка.КодПоставкиНДС КАК КодПоставкиНДС,
	|	ВременнаяТаблицаШапка.ДатаСФ КАК ДатаСФ,
	|	ВременнаяТаблицаШапка.Контрагент КАК Контрагент,
	|	ВременнаяТаблицаШапка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВременнаяТаблицаШапка.СтавкаНДС КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаТовары.ВсегоВВалютеРеглУчета = ВременнаяТаблицаТовары.СуммаСкидкиВВалютеРеглУчета
	|			ТОГДА 0
	|		КОГДА ВременнаяТаблицаТовары.СуммаСкидкиВВалютеРеглУчета <> 0
	|			ТОГДА ВременнаяТаблицаТовары.ВсегоВВалютеРеглУчета - ВременнаяТаблицаТовары.СуммаСкидкиВВалютеРеглУчета - ВременнаяТаблицаТовары.СуммаНДСВВалютеРеглУчета - ВременнаяТаблицаТовары.СуммаНСПВВалютеРеглУчета
	|		ИНАЧЕ ВременнаяТаблицаТовары.СуммаДоходаВВалютеРеглУчета
	|	КОНЕЦ КАК Сумма,
	|	ВременнаяТаблицаТовары.СуммаНДСВВалютеРеглУчета КАК СуммаНДС,
	|	ВременнаяТаблицаТовары.СуммаНСПВВалютеРеглУчета КАК СуммаНеоблагаемая,
	|	ВременнаяТаблицаТовары.СуммаДоначисленияВВалютеРеглУчета КАК СуммаДоначисления,
	|	ВременнаяТаблицаТовары.СуммаДоначисленияНДСВВалютеРеглУчета КАК СуммаДоначисленияНДС
	|ПОМЕСТИТЬ ВременнаяТаблицаДокумента
	|ИЗ
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ПО (ИСТИНА)
	|ГДЕ
	|	(НЕ ВременнаяТаблицаТовары.ВсегоВВалютеРеглУчета = 0
	|			ИЛИ НЕ ВременнаяТаблицаТовары.СуммаДоначисленияВВалютеРеглУчета = 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ВременнаяТаблицаШапка.Дата,
	|	ВременнаяТаблицаШапка.Организация,
	|	ВременнаяТаблицаШапка.Ссылка,
	|	ВременнаяТаблицаШапка.СерияБланкаСФ,
	|	ВременнаяТаблицаШапка.НомерБланкаСФ,
	|	ВременнаяТаблицаШапка.ПризнакСтраны,
	|	ВременнаяТаблицаШапка.КодПоставкиНДС,
	|	ВременнаяТаблицаШапка.ДатаСФ,
	|	ВременнаяТаблицаШапка.Контрагент,
	|	ВременнаяТаблицаШапка.ДоговорКонтрагента,
	|	ВременнаяТаблицаШапка.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаУслуги.ВсегоВВалютеРеглУчета = ВременнаяТаблицаУслуги.СуммаСкидкиВВалютеРеглУчета
	|			ТОГДА 0
	|		КОГДА ВременнаяТаблицаУслуги.СуммаСкидкиВВалютеРеглУчета <> 0
	|			ТОГДА ВременнаяТаблицаУслуги.ВсегоВВалютеРеглУчета - ВременнаяТаблицаУслуги.СуммаСкидкиВВалютеРеглУчета - ВременнаяТаблицаУслуги.СуммаНДСВВалютеРеглУчета - ВременнаяТаблицаУслуги.СуммаНСПВВалютеРеглУчета
	|		ИНАЧЕ ВременнаяТаблицаУслуги.СуммаДоходаВВалютеРеглУчета
	|	КОНЕЦ,
	|	ВременнаяТаблицаУслуги.СуммаНДСВВалютеРеглУчета,
	|	ВременнаяТаблицаУслуги.СуммаНСПВВалютеРеглУчета,
	|	0,
	|	0
	|ИЗ
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги
	|		ПО (ИСТИНА)
	|ГДЕ
	|	НЕ ВременнаяТаблицаУслуги.ВсегоВВалютеРеглУчета = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	ВременнаяТаблицаШапка.Дата,
	|	ВременнаяТаблицаШапка.Организация,
	|	ВременнаяТаблицаШапка.Ссылка,
	|	ВременнаяТаблицаШапка.СерияБланкаСФ,
	|	ВременнаяТаблицаШапка.НомерБланкаСФ,
	|	ВременнаяТаблицаШапка.ПризнакСтраны,
	|	ВременнаяТаблицаШапка.КодПоставкиНДС,
	|	ВременнаяТаблицаШапка.ДатаСФ,
	|	ВременнаяТаблицаШапка.Контрагент,
	|	ВременнаяТаблицаШапка.ДоговорКонтрагента,
	|	ВременнаяТаблицаШапка.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаОС.ВсегоВВалютеРеглУчета = ВременнаяТаблицаОС.СуммаСкидкиВВалютеРеглУчета
	|			ТОГДА 0
	|		КОГДА ВременнаяТаблицаОС.СуммаСкидкиВВалютеРеглУчета <> 0
	|			ТОГДА ВременнаяТаблицаОС.ВсегоВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаСкидкиВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаНДСВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаНСПВВалютеРеглУчета
	|		ИНАЧЕ ВременнаяТаблицаОС.СуммаДоходаВВалютеРеглУчета
	|	КОНЕЦ,
	|	ВременнаяТаблицаОС.СуммаНДСВВалютеРеглУчета,
	|	ВременнаяТаблицаОС.СуммаНСПВВалютеРеглУчета,
	|	0,
	|	0
	|ИЗ
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
	|		ПО (ИСТИНА)
	|ГДЕ
	|	НЕ ВременнаяТаблицаОС.ВсегоВВалютеРеглУчета = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаДокумента.ДатаПоставки КАК ДатаПоставки,
	|	ВременнаяТаблицаДокумента.Организация КАК Организация,
	|	ВременнаяТаблицаДокумента.Документ КАК Документ,
	|	ВременнаяТаблицаДокумента.СерияБланкаСФ КАК СерияБланкаСФ,
	|	ВременнаяТаблицаДокумента.НомерБланкаСФ КАК НомерБланкаСФ,
	|	ВременнаяТаблицаДокумента.ПризнакСтраны КАК ПризнакСтраны,
	|	ВременнаяТаблицаДокумента.КодПоставкиНДС КАК КодПоставкиНДС,
	|	ВременнаяТаблицаДокумента.ДатаСФ КАК ДатаСФ,
	|	ВременнаяТаблицаДокумента.Контрагент КАК Контрагент,
	|	ВременнаяТаблицаДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВременнаяТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ВременнаяТаблицаДокумента.Сумма) КАК Сумма,
	|	СУММА(ВременнаяТаблицаДокумента.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ВременнаяТаблицаДокумента.СуммаНеоблагаемая) КАК СуммаНеоблагаемая,
	|	СУММА(ВременнаяТаблицаДокумента.СуммаДоначисления) КАК СуммаДоначисления,
	|	СУММА(ВременнаяТаблицаДокумента.СуммаДоначисленияНДС) КАК СуммаДоначисленияНДС
	|ИЗ
	|	ВременнаяТаблицаДокумента КАК ВременнаяТаблицаДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаДокумента.ДатаПоставки,
	|	ВременнаяТаблицаДокумента.Организация,
	|	ВременнаяТаблицаДокумента.ДоговорКонтрагента,
	|	ВременнаяТаблицаДокумента.ДатаСФ,
	|	ВременнаяТаблицаДокумента.Документ,
	|	ВременнаяТаблицаДокумента.Контрагент,
	|	ВременнаяТаблицаДокумента.ПризнакСтраны,
	|	ВременнаяТаблицаДокумента.СерияБланкаСФ,
	|	ВременнаяТаблицаДокумента.КодПоставкиНДС,
	|	ВременнаяТаблицаДокумента.НомерБланкаСФ,
	|	ВременнаяТаблицаДокумента.СтавкаНДС";

	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСчетаФактурыВыписанные", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСоставОС(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ВременнаяТаблицаОС.СостояниеВСоставеОС КАК СостояниеВСоставеОС
		|ПОМЕСТИТЬ ВременнаяТаблицаОСВсе
		|ИЗ
		|	ВременнаяТаблицаОСВключаяОСКомплектов КАК ВременнаяТаблицаОС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	СоставОССрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
		|	СоставОССрезПоследних.ОсновноеСредствоВСоставеКомплекта КАК ОсновноеСредствоВСоставеКомплекта,
		|	ВременнаяТаблицаОСВсе.СостояниеВСоставеОС КАК СостояниеВСоставеОС
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставОС.СрезПоследних(
		|				&Период,
		|				ОсновноеСредствоВСоставеКомплекта В
		|						(ВЫБРАТЬ
		|							ВременнаяТаблицаОСВсе.ОсновноеСредство КАК ОсновноеСредство
		|						ИЗ
		|							ВременнаяТаблицаОСВсе КАК ВременнаяТаблицаОСВсе)
		|					И НЕ Регистратор = &ДокументСсылка) КАК СоставОССрезПоследних
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОСВсе КАК ВременнаяТаблицаОСВсе
		|			ПО СоставОССрезПоследних.ОсновноеСредствоВСоставеКомплекта = ВременнаяТаблицаОСВсе.ОсновноеСредство
		|		ПО (ИСТИНА)
		|ГДЕ
		|	(СоставОССрезПоследних.СостояниеВСоставеОС = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКомплектацияОС.Комплектация)
		|			ИЛИ СоставОССрезПоследних.СостояниеВСоставеОС = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКомплектацияОС.Добавление))";
	
	Запрос.Параметры.Вставить("Период", СтруктураДополнительныеСвойства.ДляПроведения.Дата);
	Запрос.Параметры.Вставить("ДокументСсылка", ДокументСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСоставОС", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьСведенияПоПоказателямИмпорта(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Дата,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.Ссылка КАК ДокументСсылка,
		|	ВременнаяТаблицаШапка.Контрагент КАК Контрагент,
		|	ВременнаяТаблицаШапка.ХарактерСделки КАК ХарактерСделки,
		|	ВременнаяТаблицаШапка.КоммерческийДокумент КАК КоммерческиеДокументы,
		|	ВременнаяТаблицаШапка.Транспортировка КАК Транспортировка,
		|	ВременнаяТаблицаШапка.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
		|	ВременнаяТаблицаШапка.КодОсобенностиПеремещенияТоваров КАК КодОсобенностиПеремещенияТоваров,
		|	ВременнаяТаблицаШапка.КодУсловийПоставки КАК КодУсловийПоставки,
		|	ВременнаяТаблицаШапка.ВидТранспорта КАК ВидТранспорта,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента.НомерДоговора КАК НомерКонтракта,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента.ДатаДоговора КАК ДатаКонтракта,
		|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
		|	СУММА(ВременнаяТаблицаТовары.Количество) КАК Количество,
		|	СУММА(ВЫРАЗИТЬ(ВременнаяТаблицаТовары.СуммаДохода * КурсыВалютПоДокументуСрезПоследних.Курс / КурсыВалютПоДокументуСрезПоследних.Кратность КАК ЧИСЛО(15, 2))) КАК Сумма,
		|	СУММА(ВЫРАЗИТЬ(ВЫРАЗИТЬ(ВременнаяТаблицаТовары.СуммаДохода * КурсыВалютПоДокументуСрезПоследних.Курс / КурсыВалютПоДокументуСрезПоследних.Кратность КАК ЧИСЛО(15, 2)) 
		|		/ КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность КАК ЧИСЛО(15, 2))) КАК СуммаВДолларах
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ПО (ИСТИНА)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта.Код = ""840"") КАК КурсыВалютСрезПоследних
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсыВалютПоДокументуСрезПоследних
		|		ПО ВременнаяТаблицаШапка.ВалютаДокумента = КурсыВалютПоДокументуСрезПоследних.Валюта
		|ГДЕ
		|	ВременнаяТаблицаШапка.ПризнакСтраны = ЗНАЧЕНИЕ(Перечисление.ПризнакиСтраны.ЕАЭС)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.Ссылка,
		|	ВременнаяТаблицаШапка.Контрагент,
		|	ВременнаяТаблицаШапка.ХарактерСделки,
		|	ВременнаяТаблицаШапка.КоммерческийДокумент,
		|	ВременнаяТаблицаШапка.Транспортировка,
		|	ВременнаяТаблицаШапка.ДополнительнаяИнформация,
		|	ВременнаяТаблицаШапка.КодОсобенностиПеремещенияТоваров,
		|	ВременнаяТаблицаШапка.КодУсловийПоставки,
		|	ВременнаяТаблицаШапка.ВидТранспорта,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента.НомерДоговора,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента.ДатаДоговора,
		|	ВременнаяТаблицаТовары.Номенклатура";
	Запрос.УстановитьПараметр("Период", СтруктураДополнительныеСвойства.ДляПроведения.Дата);
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСведенияПоПоказателямИмпорта", РезультатЗапроса.Выгрузить());
		
КонецПроцедуры 

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства, Отказ) Экспорт
	
	ТаблицаОСВходящихВКомплекты = ТаблицаОСВходящихВКомплекты(ДокументСсылка, СтруктураДополнительныеСвойства);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК Ссылка,
		|	ТаблицаДокумента.Дата КАК Дата,
		|	ТаблицаДокумента.Номер КАК Номер,
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ТаблицаДокумента.БезналичныйРасчет КАК БезналичныйРасчет,
		|	ТаблицаДокумента.ЭкспортУслугПокупателюКР КАК ЭкспортУслугПокупателюКР,
		|	ТаблицаДокумента.Склад КАК Склад,
		|	ТаблицаДокумента.Контрагент КАК Контрагент,
		|	ТаблицаДокумента.Контрагент.ПризнакСтраны КАК ПризнакСтраны,
		|	ТаблицаДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаДокумента.СчетРасчетов КАК СчетРасчетов,
		|	ТаблицаДокумента.ВалютаДокумента КАК ВалютаДокумента,
		|	ТаблицаДокумента.Курс КАК Курс,
		|	ТаблицаДокумента.Кратность КАК Кратность,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСКОплате) КАК СчетУчетаНДС,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НалогСПродаж) КАК СчетУчетаНСП,
		|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаДокумента.СуммаВключаетНалоги КАК СуммаВключаетНалоги,
		|	ТаблицаДокумента.КодПоставкиНДС КАК КодПоставкиНДС,
		|	ТаблицаДокумента.СерияБланкаСФ КАК СерияБланкаСФ,
		|	ТаблицаДокумента.НомерБланкаСФ КАК НомерБланкаСФ,
		|	ТаблицаДокумента.ДатаСФ КАК ДатаСФ,
		|	ТаблицаДокумента.СчетУчетаСкидок КАК СчетУчетаСкидок,
		|	ТаблицаДокумента.БезвозмезднаяПоставка КАК БезвозмезднаяПоставка,
		|	ТаблицаДокумента.ХарактерСделки КАК ХарактерСделки,
		|	ТаблицаДокумента.КоммерческийДокумент КАК КоммерческийДокумент,
		|	ТаблицаДокумента.Транспортировка КАК Транспортировка,
		|	ТаблицаДокумента.ВидТранспорта КАК ВидТранспорта,
		|	ТаблицаДокумента.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
		|	ТаблицаДокумента.КодОсобенностиПеремещенияТоваров КАК КодОсобенностиПеремещенияТоваров,
		|	ТаблицаДокумента.КодУсловийПоставки КАК КодУсловийПоставки,
		|	ТаблицаДокумента.РеализацияСДоначислениемНДС КАК РеализацияСДоначислениемНДС
		|ПОМЕСТИТЬ ВременнаяТаблицаШапка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
		|	ТаблицаДокумента.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	ТаблицаДокумента.Количество КАК Количество,
		|	ТаблицаДокумента.Всего КАК Всего,
		|	ТаблицаДокумента.Сумма КАК Сумма,
		|	ТаблицаДокумента.СуммаДохода КАК СуммаДохода,
		|	ТаблицаДокумента.СуммаНДС КАК СуммаНДС,
		|	ТаблицаДокумента.СтавкаНСП КАК СтавкаНСП,
		|	ТаблицаДокумента.СуммаНСП КАК СуммаНСП,
		|	ТаблицаДокумента.СуммаСкидки КАК СуммаСкидки,
		|	ТаблицаДокумента.СуммаДоходаСкидки КАК СуммаДоходаСкидки,
		|	ТаблицаДокумента.ВсегоВВалютеРеглУчета КАК ВсегоВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаВВалютеРеглУчета КАК СуммаВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаДоходаВВалютеРеглУчета КАК СуммаДоходаВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаНДСВВалютеРеглУчета КАК СуммаНДСВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаНСПВВалютеРеглУчета КАК СуммаНСПВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаСкидкиВВалютеРеглУчета КАК СуммаСкидкиВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаДоходаСкидкиВВалютеРеглУчета КАК СуммаДоходаСкидкиВВалютеРеглУчета,
		|	ТаблицаДокумента.СчетУчета КАК СчетУчета,
		|	ТаблицаДокумента.СчетДоходов КАК СчетДоходов,
		|	ТаблицаДокумента.СтатьяДоходов КАК СтатьяДоходов,
		|	ТаблицаДокумента.СчетСебестоимости КАК СчетСебестоимости,
		|	ТаблицаДокумента.СтатьяРасходов КАК СтатьяРасходов,
		|	ТаблицаДокумента.ВидДеятельности КАК ВидДеятельности,
		|	ТаблицаДокумента.СчетРасходовНДС КАК СчетРасходовНДС,
		|	ТаблицаДокумента.СуммаДоначисления КАК СуммаДоначисления,
		|	ТаблицаДокумента.СуммаДоначисленияНДС КАК СуммаДоначисленияНДС,
		|	ТаблицаДокумента.СуммаДоначисленияВВалютеРеглУчета КАК СуммаДоначисленияВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаДоначисленияНДСВВалютеРеглУчета КАК СуммаДоначисленияНДСВВалютеРеглУчета
		|ПОМЕСТИТЬ ВременнаяТаблицаТовары
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
		|	ТаблицаДокумента.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	ТаблицаДокумента.Количество КАК Количество,
		|	ТаблицаДокумента.Всего КАК Всего,
		|	ТаблицаДокумента.Сумма КАК Сумма,
		|	ТаблицаДокумента.СуммаДохода КАК СуммаДохода,
		|	ТаблицаДокумента.СуммаНДС КАК СуммаНДС,
		|	ТаблицаДокумента.СтавкаНСП КАК СтавкаНСП,
		|	ТаблицаДокумента.СуммаНСП КАК СуммаНСП,
		|	ТаблицаДокумента.СуммаСкидки КАК СуммаСкидки,
		|	ТаблицаДокумента.СуммаДоходаСкидки КАК СуммаДоходаСкидки,
		|	ТаблицаДокумента.ВсегоВВалютеРеглУчета КАК ВсегоВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаВВалютеРеглУчета КАК СуммаВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаДоходаВВалютеРеглУчета КАК СуммаДоходаВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаНДСВВалютеРеглУчета КАК СуммаНДСВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаНСПВВалютеРеглУчета КАК СуммаНСПВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаСкидкиВВалютеРеглУчета КАК СуммаСкидкиВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаДоходаСкидкиВВалютеРеглУчета КАК СуммаДоходаСкидкиВВалютеРеглУчета,
		|	ТаблицаДокумента.СчетДоходов КАК СчетДоходов,
		|	ТаблицаДокумента.СтатьяДоходов КАК СтатьяДоходов,
		|	ТаблицаДокумента.ВидДеятельности КАК ВидДеятельности
		|ПОМЕСТИТЬ ВременнаяТаблицаУслуги
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК Ссылка,
		|	ТаблицаДокумента.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаДокумента.ОсновноеСредство.ЭтоКомплект КАК ЭтоКомплект,
		|	ТаблицаДокумента.Всего КАК Всего,
		|	ТаблицаДокумента.Сумма КАК Сумма,
		|	ТаблицаДокумента.СуммаДохода КАК СуммаДохода,
		|	ТаблицаДокумента.СуммаНДС КАК СуммаНДС,
		|	ТаблицаДокумента.СтавкаНСП КАК СтавкаНСП,
		|	ТаблицаДокумента.СуммаНСП КАК СуммаНСП,
		|	ТаблицаДокумента.СуммаСкидки КАК СуммаСкидки,
		|	ТаблицаДокумента.СуммаДоходаСкидки КАК СуммаДоходаСкидки,
		|	ТаблицаДокумента.ВсегоВВалютеРеглУчета КАК ВсегоВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаВВалютеРеглУчета КАК СуммаВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаДоходаВВалютеРеглУчета КАК СуммаДоходаВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаНДСВВалютеРеглУчета КАК СуммаНДСВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаНСПВВалютеРеглУчета КАК СуммаНСПВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаСкидкиВВалютеРеглУчета КАК СуммаСкидкиВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаДоходаСкидкиВВалютеРеглУчета КАК СуммаДоходаСкидкиВВалютеРеглУчета,
		|	ТаблицаДокумента.СчетЗатрат КАК СчетЗатрат,
		|	ТаблицаДокумента.СчетДоходов КАК СчетДоходов,
		|	ТаблицаДокумента.СтатьяЗатрат КАК СтатьяЗатрат,
		|	ТаблицаДокумента.СтатьяДоходов КАК СтатьяДоходов,
		|	ТаблицаДокумента.ВидДеятельности КАК ВидДеятельности
		|ПОМЕСТИТЬ ВременнаяТаблицаОС
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.ОС КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаДокумента.СчетЗатрат КАК СчетЗатрат,
		|	ТаблицаДокумента.СтатьяЗатрат КАК СтатьяЗатрат
		|ПОМЕСТИТЬ ВременнаяТаблицаОСКомплектов
		|ИЗ
		|	&ТаблицаОСВходящихВКомплекты КАК ТаблицаДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКомплектацияОС.ВыводИзКомплекта) КАК СостояниеВСоставеОС
		|ПОМЕСТИТЬ ВременнаяТаблицаОСВключаяОСКомплектов
		|ИЗ
		|	ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|ГДЕ
		|	НЕ ВременнаяТаблицаОС.ЭтоКомплект
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаОСКомплектов.ОсновноеСредство,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКомплектацияОС.Ликвидация)
		|ИЗ
		|	ВременнаяТаблицаОСКомплектов КАК ВременнаяТаблицаОСКомплектов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПараметрыУчетаОССрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
		|	ПараметрыУчетаОССрезПоследних.Консервация КАК Консервация
		|ПОМЕСТИТЬ ВременнаяТаблицаКонсервацияОС
		|ИЗ
		|	РегистрСведений.ПараметрыУчетаОС.СрезПоследних(&Период, Организация = &Организация) КАК ПараметрыУчетаОССрезПоследних";		
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ТаблицаОСВходящихВКомплекты", ТаблицаОСВходящихВКомплекты);
	Запрос.УстановитьПараметр("Период", СтруктураДополнительныеСвойства.ДляПроведения.Дата);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ПлательщикНСП", СтруктураДополнительныеСвойства.УчетнаяПолитика.ПлательщикНСП);
	Запрос.Выполнить();
	
	СформироватьТаблицаХозрасчетный(ДокументСсылка, СтруктураДополнительныеСвойства, Отказ);
	СформироватьТаблицаПродажи(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаПродажиОсновныхСредств(ДокументСсылка, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаСостоянияОС(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаСобытияОС(ДокументСсылка, СтруктураДополнительныеСвойства); 	
	СформироватьТаблицаДвижениеОСНУ(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаСоставОС(ДокументСсылка, СтруктураДополнительныеСвойства);
	
	СформироватьСведенияПоПоказателямИмпорта(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаОборотыПоДаннымЕдиногоНалога(СтруктураДополнительныеСвойства);
	
	// Переход на ЭСФ.
	Если СтруктураДополнительныеСвойства.ДляПроведения.Дата < Дата(2020, 07, 01) Тогда 
		СформироватьТаблицаБланкиСчетовФактур(ДокументСсылка, СтруктураДополнительныеСвойства);
		СформироватьТаблицаСчетаФактурыВыписанные(ДокументСсылка, СтруктураДополнительныеСвойства);
	КонецЕсли;		
КонецПроцедуры

#КонецОбласти	

#Область ВерсионированиеОбъектов

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//@skip-warning
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область ИнтерфейсПечати

// Функция формирует табличный документ с печатной формой ПечатьНакладной
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьНакладной(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "РеализацияТоваровУслуг_Накладная";

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РеализацияТоваровУслуг.ПФ_MXL_Накладная");
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК Ссылка,
		|	ТаблицаДокумента.Номер КАК Номер,
		|	ТаблицаДокумента.Дата КАК Дата,
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ТаблицаДокумента.Организация.НаименованиеПолное КАК ОрганизацияПредставление,
		|	ТаблицаДокумента.ВалютаДокумента КАК ВалютаДокумента,
		|	ТаблицаДокумента.Склад КАК Склад,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокумента.Склад) КАК СкладПредставление,
		|	ТаблицаДокумента.Контрагент КАК Контрагент,
		|	ТаблицаДокумента.Контрагент.НаименованиеПолное КАК КонтрагентПредставление,
		|	ТаблицаДокумента.ВыводитьКомментарийВНаименование КАК ВыводитьКомментарийВНаименование,
		|	ТаблицаДокумента.Комментарий КАК Комментарий,
		|	ТаблицаДокумента.ТочностьЦены КАК ТочностьЦены,
		|	ТаблицаДокумента.Организация.ФайлЛоготип КАК ФайлЛоготип,
		|	ТаблицаДокумента.ПодписьИПечатьВНакладной КАК ПодписьИПечатьВНакладной,
		|	ТаблицаДокумента.Товары.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура КАК Номенклатура,
		|		Количество КАК Количество,
		|		ВЫБОР
		|			КОГДА ТаблицаДокумента.ВыводитьЦенуСНалогами
		|				ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Товары.Всего / ТаблицаДокумента.Товары.Количество КАК ЧИСЛО(15, 2))
		|			ИНАЧЕ ТаблицаДокумента.Товары.Цена
		|		КОНЕЦ КАК Цена,
		|		СуммаНДС КАК СуммаНДС,
		|		СуммаНСП КАК СуммаНСП,
		|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
		|		СуммаСкидки КАК СуммаСкидки,
		|		СуммаДохода КАК СуммаДохода,
		|		ТаблицаДокумента.Товары.Всего КАК Всего,
		|		СчетУчета КАК СчетУчета,
		|		СчетДоходов КАК СчетДоходов,
		|		СчетСебестоимости КАК СчетСебестоимости,
		|		СтатьяРасходов КАК СтатьяРасходов,
		|		СтатьяДоходов КАК СтатьяДоходов,
		|		Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
		|		ПРЕДСТАВЛЕНИЕ(ТаблицаДокумента.Товары.Номенклатура.КодТНВЭД) КАК КодПоКлассификатору,
		|		ПРЕДСТАВЛЕНИЕ(ТаблицаДокумента.Товары.Номенклатура.ЕдиницаИзмерения) КАК ЕИ
		|	) КАК Товары,
		|	ТаблицаДокумента.Услуги.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура КАК Номенклатура,
		|		Количество КАК Количество,
		|		ВЫБОР
		|			КОГДА ТаблицаДокумента.ВыводитьЦенуСНалогами
		|				ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Услуги.Всего / ТаблицаДокумента.Услуги.Количество КАК ЧИСЛО(15, 2))
		|			ИНАЧЕ ТаблицаДокумента.Услуги.Цена
		|		КОНЕЦ КАК Цена,
		|		СуммаНДС КАК СуммаНДС,
		|		СуммаНСП КАК СуммаНСП,
		|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
		|		СуммаСкидки КАК СуммаСкидки,
		|		СуммаДохода КАК СуммаДохода,
		|		ТаблицаДокумента.Услуги.Всего КАК Всего,
		|		СчетДоходов КАК СчетДоходов,
		|		СтатьяДоходов КАК СтатьяДоходов,
		|		ДополнительныеСведения КАК ДополнительныеСведения,
		|		Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
		|		ПРЕДСТАВЛЕНИЕ(ТаблицаДокумента.Услуги.Номенклатура.КодГКЭД) КАК КодПоКлассификатору,
		|		ПРЕДСТАВЛЕНИЕ(ТаблицаДокумента.Услуги.Номенклатура.ЕдиницаИзмерения) КАК ЕИ
		|	) КАК Услуги,
		|	ТаблицаДокумента.ОС.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		ОсновноеСредство КАК ОсновноеСредство,
		|		ИнвентарныйНомер КАК ИнвентарныйНомер,
		|		1 КАК Количество,
		|		""ед."" КАК ЕИ,
		|		Сумма КАК Цена,
		|		СуммаНДС КАК СуммаНДС,
		|		СуммаНСП КАК СуммаНСП,
		|		СуммаДохода КАК СуммаДохода,
		|		ТаблицаДокумента.ОС.Всего КАК Всего,
		|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
		|		СуммаСкидки КАК СуммаСкидки,
		|		СчетДоходов КАК СчетДоходов,
		|		СчетЗатрат КАК СчетЗатрат,
		|		СтатьяЗатрат КАК СтатьяЗатрат,
		|		ОсновноеСредство.НаименованиеПолное КАК НоменклатураПредставление,
		|		ПРЕДСТАВЛЕНИЕ(ТаблицаДокумента.ОС.ОсновноеСредство.КодТНВЭД) КАК КодПоКлассификатору
		|	) КАК ОС
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В(&СписокДокументов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки,
		|	НомерСтроки,
		|	НомерСтроки";		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокДокументов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	Пока Шапка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Подготовка данных
		ДанныеПечати = Новый Структура;
		
		ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, НСтр("ru = 'Накладная на реализацию'"));
		ДанныеПечати.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		ДанныеПечати.Вставить("ОрганизацияПредставление", Шапка.ОрганизацияПредставление);
		ДанныеПечати.Вставить("СкладПредставление", Шапка.СкладПредставление);
		ДанныеПечати.Вставить("ПолучательПредставление", Шапка.КонтрагентПредставление);
		ДанныеПечати.Вставить("Комментарий", Шапка.Комментарий);
		
		ТаблицаТовары = Шапка.Товары.Выгрузить();
		ТаблицаУслуги = Шапка.Услуги.Выгрузить();
		ТаблицаОС = Шапка.ОС.Выгрузить();
		
		Если ТаблицаТовары.Количество() > 0
			Или ТаблицаОС.Количество() > 0 Тогда 
			ДанныеПечати.Вставить("НаименованиеКлассификатора", НСтр("ru = 'Код ТНВЭД'"));
		ИначеЕсли ТаблицаУслуги.Количество() > 0 Тогда  
			ДанныеПечати.Вставить("НаименованиеКлассификатора", НСтр("ru = 'Код ГКЭД'"));	
		КонецЕсли;	
		
		Всего = ТаблицаТовары.Итог("Всего") + ТаблицаУслуги.Итог("Всего") + ТаблицаОС.Итог("Всего");
		ВсегоНДС = ТаблицаТовары.Итог("СуммаНДС") + ТаблицаУслуги.Итог("СуммаНДС") + ТаблицаОС.Итог("СуммаНДС");
		ВсегоНСП = ТаблицаТовары.Итог("СуммаНСП") + ТаблицаУслуги.Итог("СуммаНСП") + ТаблицаОС.Итог("СуммаНСП");
		КоличествоНаименований = ТаблицаТовары.Количество() + ТаблицаУслуги.Количество() + ТаблицаОС.Количество();		
		
		ВсегоСкидка = ТаблицаТовары.Итог("СуммаСкидки") + ТаблицаУслуги.Итог("СуммаСкидки") + ТаблицаОС.Итог("СуммаСкидки");
		ЕстьСкидка = ВсегоСкидка <> 0;
		ИтогоКОплате = Всего - ВсегоСкидка;
		
		ДанныеПечати.Вставить("ИтогоКОплате", ИтогоКОплате);
		
		ДанныеПечати.Вставить("Всего", Всего);
		ДанныеПечати.Вставить("ВсегоНДС", ВсегоНДС);
		ДанныеПечати.Вставить("ВсегоНСП", ВсегоНСП);
		ДанныеПечати.Вставить("ВсегоСкидка", ВсегоСкидка);
		ДанныеПечати.Вставить("ИтоговаяСтрока", 
			СтрШаблон(НСтр("ru = 'Всего наименований %1, на сумму %2'"), 
			Формат(КоличествоНаименований, "ЧН=0; ЧГ=0"), Формат(ДанныеПечати.ИтогоКОплате, "ЧЦ=15; ЧДЦ=2")));
		ДанныеПечати.Вставить("СуммаПрописью", БухгалтерскийУчетСервер.СформироватьСуммуПрописью(ДанныеПечати.ИтогоКОплате, Шапка.ВалютаДокумента));

		ДанныеЦены = Новый Структура();
		ДанныеЦены.Вставить("Цена", 0);
		
		// Области
		МассивОбластейМакета = Новый Массив;
		МассивОбластейМакета.Добавить("Заголовок");
		Если Шапка.ВыводитьКомментарийВНаименование Тогда
			МассивОбластейМакета.Добавить("Комментарий");
		КонецЕсли;
		Если ЕстьСкидка Тогда 
			МассивОбластейМакета.Добавить("ШапкаТаблицыСоСкидкой");
			МассивОбластейМакета.Добавить("СтрокаСоСкидкой");
		Иначе 
			МассивОбластейМакета.Добавить("ШапкаТаблицы");
			МассивОбластейМакета.Добавить("Строка");
		КонецЕсли;	
		МассивОбластейМакета.Добавить("Подвал");
		МассивОбластейМакета.Добавить("Итоги");
		Если ЕстьСкидка Тогда 
			МассивОбластейМакета.Добавить("ИтогиСкидка");
		КонецЕсли;
		МассивОбластейМакета.Добавить("ИтогоКОплате");
		МассивОбластейМакета.Добавить("ИтогиНДС");
		МассивОбластейМакета.Добавить("ИтогиНСП");
		МассивОбластейМакета.Добавить("СуммаПрописью");
		Если Шапка.ПодписьИПечатьВНакладной Тогда
			ДанныеПечати.Вставить("ФайлЛоготип", Шапка.ФайлЛоготип);
			МассивОбластейМакета.Добавить("ПодписиСФаксимиле");
		Иначе
			МассивОбластейМакета.Добавить("Подписи");			
		КонецЕсли;
	
		Для Каждого ИмяОбласти Из МассивОбластейМакета Цикл
			
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
			
			Если ИмяОбласти = "Строка" ИЛИ ИмяОбласти = "СтрокаСоСкидкой" Тогда 
				Для Каждого СтрокаТаблицы Из ТаблицаТовары Цикл
					ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
										
					ДанныеЦены.Цена = Формат(СтрокаТаблицы.Цена, "ЧЦ=23; ЧДЦ=" + Шапка.ТочностьЦены +" ; ЧГ=3,0");
					ОбластьМакета.Параметры.Заполнить(ДанныеЦены);
					
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
				Для Каждого СтрокаТаблицы Из ТаблицаУслуги Цикл
					ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
										
					ДанныеЦены.Цена = Формат(СтрокаТаблицы.Цена, "ЧЦ=23; ЧДЦ=" + Шапка.ТочностьЦены +" ; ЧГ=3,0");
					ОбластьМакета.Параметры.Заполнить(ДанныеЦены);
					
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
				Для Каждого СтрокаТаблицы Из ТаблицаОС Цикл
					ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
										
					ДанныеЦены.Цена = Формат(СтрокаТаблицы.Цена, "ЧЦ=23; ЧДЦ=" + Шапка.ТочностьЦены +" ; ЧГ=3,0");
					ОбластьМакета.Параметры.Заполнить(ДанныеЦены);
					
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
			Иначе 
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьМакета);	
			КонецЕсли;	
		КонецЦикла;
		
		БухгалтерскиеОтчеты.ВыводПодписиРуководителей(ТабличныйДокумент, Шапка);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Функция формирует табличный документ с печатной формой Счет-фактура
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьСчетФактура(МассивОбъектов, ОбъектыПечати, КоличествоСтрокСчетаФактуры, СчетФактураВВалюте = Ложь)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;		
	ТабличныйДокумент.КлючПараметровПечати = "РеализацияТоваровУслуг_СчетФактура";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьСчетФактура.ПФ_MXL_СчетФактура");
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
		|	РеализацияТоваровУслуг.Номер КАК Номер,
		|	РеализацияТоваровУслуг.Дата КАК Дата,
		|	РеализацияТоваровУслуг.ВалютаДокумента КАК ВалютаДокумента,
		|	РеализацияТоваровУслуг.Курс КАК Курс,
		|	РеализацияТоваровУслуг.Кратность КАК Кратность,
		|	РеализацияТоваровУслуг.БезвозмезднаяПоставка КАК БезвозмезднаяПоставка,
		|	РеализацияТоваровУслуг.ЭкспортнаяПоставка КАК ЭкспортнаяПоставка,
		|	РеализацияТоваровУслуг.СуммаВключаетНалоги КАК СуммаВключаетНалоги,
		|	РеализацияТоваровУслуг.ПечатьВРегламентированнойВалюте КАК ПечатьВРегламентированнойВалюте,
		|	РеализацияТоваровУслуг.ПечататьКурсИСуммуВРегламентированнойВалюте КАК ПечататьКурсИСуммуВРегламентированнойВалюте,
		|	РеализацияТоваровУслуг.ВыводитьКомментарийВНаименование КАК ВыводитьКомментарийВНаименование,
		|	РеализацияТоваровУслуг.КодПоставкиНДС.Код КАК КодПоставкиНДС,
		|	РеализацияТоваровУслуг.Организация КАК Организация,
		|	РеализацияТоваровУслуг.Организация.НаименованиеПолное КАК ОрганизацияПредставление,
		|	РеализацияТоваровУслуг.Организация.ИНН КАК ИННОрганизации,
		|	РеализацияТоваровУслуг.Организация.ГНС КАК ГНСОрганизации,
		|	РеализацияТоваровУслуг.Организация.ГНС.Код КАК КодГНСОрганизации,
		|	РеализацияТоваровУслуг.Организация.ФайлЛоготип КАК ФайлЛоготип,
		|	РеализацияТоваровУслуг.БанковскийСчет.НомерСчета КАК НомерБанковскогоСчетаОрганизации,
		|	РеализацияТоваровУслуг.БанковскийСчет.Банк.Код КАК БикБанкаОрганизации,
		|	РеализацияТоваровУслуг.БанковскийСчет.Банк.Наименование КАК НаименованиеБанкаОрганизации,
		|	ВЫБОР
		|		КОГДА &ПечататьСчетаФактурыСГоловнымКонтрагентом
		|				И НЕ РеализацияТоваровУслуг.Контрагент.ГоловнойКонтрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА РеализацияТоваровУслуг.Контрагент.ГоловнойКонтрагент
		|		ИНАЧЕ РеализацияТоваровУслуг.Контрагент
		|	КОНЕЦ КАК Контрагент,
		|	РеализацияТоваровУслуг.НомерБланкаСФ КАК НомерБланкаСФ,
		|	РеализацияТоваровУслуг.СерияБланкаСФ КАК СерияБланкаСФ,
		|	РеализацияТоваровУслуг.ДатаСФ КАК ДатаСФ,
		|	РеализацияТоваровУслуг.ЭкспортУслугПокупателюКР КАК ЭкспортУслугПокупателюКР,
		|	РеализацияТоваровУслуг.БезналичныйРасчет КАК БезналичныйРасчет,
		|	РеализацияТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
		|	РеализацияТоваровУслуг.Комментарий КАК Комментарий
		|ПОМЕСТИТЬ ВременнаяТаблицаШапка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка В(&СписокДокументов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Ссылка КАК Ссылка,
		|	ВременнаяТаблицаШапка.СуммаВключаетНалоги КАК СуммаВключаетНалоги,
		|	ВременнаяТаблицаШапка.Курс КАК Курс,
		|	ВременнаяТаблицаШапка.Кратность КАК Кратность
		|ПОМЕСТИТЬ ВременнаяТаблицаДокументыДляПересчета
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|ГДЕ
		|	(ВременнаяТаблицаШапка.ПечатьВРегламентированнойВалюте
		|			ИЛИ ВременнаяТаблицаШапка.ПечататьКурсИСуммуВРегламентированнойВалюте
		|			ИЛИ &СчетФактураВВалюте)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Ссылка КАК Ссылка,
		|	ВременнаяТаблицаШапка.СуммаВключаетНалоги КАК СуммаВключаетНалоги
		|ПОМЕСТИТЬ ВременнаяТаблицаДокументыСИсходнымиСуммами
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|ГДЕ
		|	(НЕ ВременнаяТаблицаШапка.ПечатьВРегламентированнойВалюте
		|			ИЛИ &СчетФактураВВалюте)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка КАК Ссылка,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
		|	МАКСИМУМ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения.Наименование) КАК ЕдиницаИзмерения,
		|	СУММА(ТаблицаТовары.Количество) КАК Количество,
		|	СУММА(ТаблицаТовары.Сумма) КАК Сумма,
		|	СУММА(ТаблицаТовары.СуммаНДС) КАК СуммаНДС,
		|	СУММА(ТаблицаТовары.СуммаНСП) КАК СуммаНСП,
		|	ТаблицаТовары.СтавкаНСП КАК СТавкаНСП,
		|	СУММА(ТаблицаТовары.Всего) КАК Всего,
		|	СУММА(ТаблицаТовары.СуммаДохода) КАК СуммаДохода,
		|	СУММА(ТаблицаТовары.СуммаВВалютеРеглУчета) КАК СуммаВВалютеРеглУчета,
		|	СУММА(ТаблицаТовары.СуммаНДСВВалютеРеглУчета) КАК СуммаНДСВВалютеРеглУчета,
		|	СУММА(ТаблицаТовары.СуммаНСПВВалютеРеглУчета) КАК СуммаНСПВВалютеРеглУчета,
		|	СУММА(ТаблицаТовары.ВсегоВВалютеРеглУчета) КАК ВсегоВВалютеРеглУчета,
		|	СУММА(ТаблицаТовары.СуммаДоходаВВалютеРеглУчета) КАК СуммаДоходаВВалютеРеглУчета,
		|	МАКСИМУМ(ТаблицаТовары.Номенклатура.КодТНВЭД) КАК КодТНВЭД,
		|	""Товар"" КАК ТипТовара,
		|	"""" КАК ДополнительныеСведения,
		|	СУММА(ТаблицаТовары.СуммаСкидки) КАК СуммаСкидки,
		|	СУММА(ТаблицаТовары.СуммаСкидкиВВалютеРеглУчета) КАК СуммаСкидкиВВалютеРеглУчета
		|ПОМЕСТИТЬ ВременнаяТаблицаСгруппированныеСтроки
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка В(&СписокДокументов)
		|	И ТаблицаТовары.Ссылка.ГруппироватьПоНоменклатуре
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Ссылка,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Номенклатура.НаименованиеПолное,
		|	ТаблицаТовары.СтавкаНСП
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаУслуги.Ссылка,
		|	ТаблицаУслуги.Номенклатура,
		|	ТаблицаУслуги.Номенклатура.НаименованиеПолное,
		|	МАКСИМУМ(ТаблицаУслуги.Номенклатура.ЕдиницаИзмерения.Наименование),
		|	СУММА(ТаблицаУслуги.Количество),
		|	СУММА(ТаблицаУслуги.Сумма),
		|	СУММА(ТаблицаУслуги.СуммаНДС),
		|	СУММА(ТаблицаУслуги.СуммаНСП),
		|	ТаблицаУслуги.СтавкаНСП,
		|	СУММА(ТаблицаУслуги.Всего),
		|	СУММА(ТаблицаУслуги.СуммаДохода),
		|	СУММА(ТаблицаУслуги.СуммаВВалютеРеглУчета),
		|	СУММА(ТаблицаУслуги.СуммаНДСВВалютеРеглУчета),
		|	СУММА(ТаблицаУслуги.СуммаНСПВВалютеРеглУчета),
		|	СУММА(ТаблицаУслуги.ВсегоВВалютеРеглУчета),
		|	СУММА(ТаблицаУслуги.СуммаДоходаВВалютеРеглУчета),
		|	МАКСИМУМ(ТаблицаУслуги.Номенклатура.КодТНВЭД),
		|	""Услуга"",
		|	ТаблицаУслуги.ДополнительныеСведения,
		|	СУММА(ТаблицаУслуги.СуммаСкидки),
		|	СУММА(ТаблицаУслуги.СуммаСкидкиВВалютеРеглУчета)
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК ТаблицаУслуги
		|ГДЕ
		|	ТаблицаУслуги.Ссылка В(&СписокДокументов)
		|	И ТаблицаУслуги.Ссылка.ГруппироватьПоНоменклатуре
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаУслуги.Ссылка,
		|	ТаблицаУслуги.Номенклатура,
		|	ТаблицаУслуги.Номенклатура.НаименованиеПолное,
		|	ТаблицаУслуги.ДополнительныеСведения,
		|	ТаблицаУслуги.СтавкаНСП
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаОС.Ссылка,
		|	ТаблицаОС.ОсновноеСредство,
		|	ТаблицаОС.ОсновноеСредство.НаименованиеПолное,
		|	НЕОПРЕДЕЛЕНО,
		|	СУММА(1),
		|	СУММА(ТаблицаОС.Сумма),
		|	СУММА(ТаблицаОС.СуммаНДС),
		|	СУММА(ТаблицаОС.СуммаНСП),
		|	ТаблицаОС.СтавкаНСП,
		|	СУММА(ТаблицаОС.Всего),
		|	СУММА(ТаблицаОС.СуммаДохода),
		|	СУММА(ТаблицаОС.СуммаВВалютеРеглУчета),
		|	СУММА(ТаблицаОС.СуммаНДСВВалютеРеглУчета),
		|	СУММА(ТаблицаОС.СуммаНСПВВалютеРеглУчета),
		|	СУММА(ТаблицаОС.ВсегоВВалютеРеглУчета),
		|	СУММА(ТаблицаОС.СуммаДоходаВВалютеРеглУчета),
		|	НЕОПРЕДЕЛЕНО,
		|	""ОС"",
		|	"""",
		|	СУММА(ТаблицаОС.СуммаСкидки),
		|	СУММА(ТаблицаОС.СуммаСкидкиВВалютеРеглУчета)
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.ОС КАК ТаблицаОС
		|ГДЕ
		|	ТаблицаОС.Ссылка В(&СписокДокументов)
		|	И ТаблицаОС.Ссылка.ГруппироватьПоНоменклатуре
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОС.Ссылка,
		|	ТаблицаОС.ОсновноеСредство,
		|	ТаблицаОС.ОсновноеСредство.НаименованиеПолное,
		|	ТаблицаОС.СтавкаНСП
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка КАК Ссылка,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
		|	ТаблицаТовары.Количество КАК Количество,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.Ссылка.ВыводитьЦенуСНалогами
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаТовары.Всего / ТаблицаТовары.Количество КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ТаблицаТовары.Цена
		|	КОНЕЦ КАК Цена,
		|	ТаблицаТовары.Сумма КАК Сумма,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
		|	ТаблицаТовары.СуммаНСП КАК СуммаНСП,
		|	ТаблицаТовары.СтавкаНСП КАК СтавкаНСП,
		|	ТаблицаТовары.Всего КАК Всего,
		|	ТаблицаТовары.СуммаДохода КАК СуммаДохода,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.Ссылка.ВыводитьЦенуСНалогами
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаТовары.ВсегоВВалютеРеглУчета / ТаблицаТовары.Количество КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаТовары.СуммаДоходаВВалютеРеглУчета / ТаблицаТовары.Количество КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК ЦенаВВалютеРеглУчета,
		|	ТаблицаТовары.СуммаВВалютеРеглУчета КАК СуммаВВалютеРеглУчета,
		|	ТаблицаТовары.СуммаНДСВВалютеРеглУчета КАК СуммаНДСВВалютеРеглУчета,
		|	ТаблицаТовары.СуммаНСПВВалютеРеглУчета КАК СуммаНСПВВалютеРеглУчета,
		|	ТаблицаТовары.ВсегоВВалютеРеглУчета КАК ВсегоВВалютеРеглУчета,
		|	ТаблицаТовары.СуммаДоходаВВалютеРеглУчета КАК СуммаДоходаВВалютеРеглУчета,
		|	ТаблицаТовары.Номенклатура.КодТНВЭД КАК КодТНВЭД,
		|	""Товар"" КАК ТипТовара,
		|	"""" КАК ДополнительныеСведения,
		|	ТаблицаТовары.СуммаСкидки КАК СуммаСкидки,
		|	ТаблицаТовары.СуммаСкидкиВВалютеРеглУчета КАК СуммаСкидкиВВалютеРеглУчета
		|ПОМЕСТИТЬ ВременнаяТаблицаСтроки
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка В(&СписокДокументов)
		|	И НЕ ТаблицаТовары.Ссылка.ГруппироватьПоНоменклатуре
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаУслуги.Ссылка,
		|	ТаблицаУслуги.Номенклатура,
		|	ТаблицаУслуги.Номенклатура.ЕдиницаИзмерения.Наименование,
		|	ТаблицаУслуги.Количество,
		|	ВЫБОР
		|		КОГДА ТаблицаУслуги.Ссылка.ВыводитьЦенуСНалогами
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаУслуги.Всего / ТаблицаУслуги.Количество КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ТаблицаУслуги.Цена
		|	КОНЕЦ,
		|	ТаблицаУслуги.Сумма,
		|	ТаблицаУслуги.СуммаНДС,
		|	ТаблицаУслуги.СуммаНСП,
		|	ТаблицаУслуги.СтавкаНСП,
		|	ТаблицаУслуги.Всего,
		|	ТаблицаУслуги.СуммаДохода,
		|	ВЫБОР
		|		КОГДА ТаблицаУслуги.Ссылка.ВыводитьЦенуСНалогами
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаУслуги.ВсегоВВалютеРеглУчета / ТаблицаУслуги.Количество КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаУслуги.СуммаДоходаВВалютеРеглУчета / ТаблицаУслуги.Количество КАК ЧИСЛО(15, 2))
		|	КОНЕЦ,
		|	ТаблицаУслуги.СуммаВВалютеРеглУчета,
		|	ТаблицаУслуги.СуммаНДСВВалютеРеглУчета,
		|	ТаблицаУслуги.СуммаНСПВВалютеРеглУчета,
		|	ТаблицаУслуги.ВсегоВВалютеРеглУчета,
		|	ТаблицаУслуги.СуммаДоходаВВалютеРеглУчета,
		|	ТаблицаУслуги.Номенклатура.КодТНВЭД,
		|	""Услуга"",
		|	ТаблицаУслуги.ДополнительныеСведения,
		|	ТаблицаУслуги.СуммаСкидки,
		|	ТаблицаУслуги.СуммаСкидкиВВалютеРеглУчета
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК ТаблицаУслуги
		|ГДЕ
		|	ТаблицаУслуги.Ссылка В(&СписокДокументов)
		|	И НЕ ТаблицаУслуги.Ссылка.ГруппироватьПоНоменклатуре
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаОС.Ссылка,
		|	ТаблицаОС.ОсновноеСредство,
		|	НЕОПРЕДЕЛЕНО,
		|	1,
		|	ВЫБОР
		|		КОГДА ТаблицаОС.Ссылка.ВыводитьЦенуСНалогами
		|			ТОГДА ТаблицаОС.Всего
		|		ИНАЧЕ ТаблицаОС.СуммаДохода
		|	КОНЕЦ,
		|	ТаблицаОС.Сумма,
		|	ТаблицаОС.СуммаНДС,
		|	ТаблицаОС.СуммаНСП,
		|	ТаблицаОС.СтавкаНСП,
		|	ТаблицаОС.Всего,
		|	ТаблицаОС.СуммаДохода,
		|	ВЫБОР
		|		КОГДА ТаблицаОС.Ссылка.ВыводитьЦенуСНалогами
		|			ТОГДА ТаблицаОС.ВсегоВВалютеРеглУчета
		|		ИНАЧЕ ТаблицаОС.СуммаДоходаВВалютеРеглУчета
		|	КОНЕЦ,
		|	ТаблицаОС.СуммаВВалютеРеглУчета,
		|	ТаблицаОС.СуммаНДСВВалютеРеглУчета,
		|	ТаблицаОС.СуммаНСПВВалютеРеглУчета,
		|	ТаблицаОС.ВсегоВВалютеРеглУчета,
		|	ТаблицаОС.СуммаДоходаВВалютеРеглУчета,
		|	НЕОПРЕДЕЛЕНО,
		|	""ОС"",
		|	"""",
		|	ТаблицаОС.СуммаСкидки,
		|	ТаблицаОС.СуммаСкидкиВВалютеРеглУчета
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.ОС КАК ТаблицаОС
		|ГДЕ
		|	ТаблицаОС.Ссылка В(&СписокДокументов)
		|	И НЕ ТаблицаОС.Ссылка.ГруппироватьПоНоменклатуре
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаСгруппированныеСтроки.Ссылка,
		|	ТаблицаСгруппированныеСтроки.Номенклатура,
		|	ТаблицаСгруппированныеСтроки.ЕдиницаИзмерения,
		|	ТаблицаСгруппированныеСтроки.Количество,
		|	ВЫБОР
		|		КОГДА ТаблицаСгруппированныеСтроки.Ссылка.ВыводитьЦенуСНалогами
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаСгруппированныеСтроки.Всего / ТаблицаСгруппированныеСтроки.Количество КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаСгруппированныеСтроки.СуммаДохода / ТаблицаСгруппированныеСтроки.Количество КАК ЧИСЛО(15, 2))
		|	КОНЕЦ,
		|	ТаблицаСгруппированныеСтроки.Сумма,
		|	ТаблицаСгруппированныеСтроки.СуммаНДС,
		|	ТаблицаСгруппированныеСтроки.СуммаНСП,
		|	ТаблицаСгруппированныеСтроки.СТавкаНСП,
		|	ТаблицаСгруппированныеСтроки.Всего,
		|	ТаблицаСгруппированныеСтроки.СуммаДохода,
		|	ВЫБОР
		|		КОГДА ТаблицаСгруппированныеСтроки.Ссылка.ВыводитьЦенуСНалогами
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаСгруппированныеСтроки.ВсегоВВалютеРеглУчета / ТаблицаСгруппированныеСтроки.Количество КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаСгруппированныеСтроки.СуммаДоходаВВалютеРеглУчета / ТаблицаСгруппированныеСтроки.Количество КАК ЧИСЛО(15, 2))
		|	КОНЕЦ,
		|	ТаблицаСгруппированныеСтроки.СуммаВВалютеРеглУчета,
		|	ТаблицаСгруппированныеСтроки.СуммаНДСВВалютеРеглУчета,
		|	ТаблицаСгруппированныеСтроки.СуммаНСПВВалютеРеглУчета,
		|	ТаблицаСгруппированныеСтроки.ВсегоВВалютеРеглУчета,
		|	ТаблицаСгруппированныеСтроки.СуммаДоходаВВалютеРеглУчета,
		|	ТаблицаСгруппированныеСтроки.Номенклатура.КодТНВЭД,
		|	ТаблицаСгруппированныеСтроки.ТипТовара,
		|	ТаблицаСгруппированныеСтроки.ДополнительныеСведения,
		|	ТаблицаСгруппированныеСтроки.СуммаСкидки,
		|	ТаблицаСгруппированныеСтроки.СуммаСкидкиВВалютеРеглУчета
		|ИЗ
		|	ВременнаяТаблицаСгруппированныеСтроки КАК ТаблицаСгруппированныеСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаСтроки.Ссылка КАК Ссылка,
		|	ВременнаяТаблицаСтроки.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаСтроки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВременнаяТаблицаСтроки.Количество КАК Количество,
		|	ВременнаяТаблицаСтроки.Цена КАК Цена,
		|	ВременнаяТаблицаСтроки.СуммаНДС КАК СуммаНДС,
		|	ВременнаяТаблицаСтроки.СуммаНСП КАК СуммаНСП,
		|	ВременнаяТаблицаСтроки.СтавкаНСП КАК СтавкаНСП,
		|	ВременнаяТаблицаСтроки.Сумма КАК Сумма,
		|	ВременнаяТаблицаСтроки.Всего - ВременнаяТаблицаСтроки.СуммаСкидки КАК Всего,
		|	ВременнаяТаблицаСтроки.СуммаДохода КАК Стоимость,
		|	ВременнаяТаблицаСтроки.КодТНВЭД КАК КодТНВЭД,
		|	ВременнаяТаблицаСтроки.ТипТовара КАК ТипТовара,
		|	ВременнаяТаблицаСтроки.ДополнительныеСведения КАК ДополнительныеСведения,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаСтроки.ДополнительныеСведения = """"
		|			ТОГДА ВременнаяТаблицаСтроки.Номенклатура.НаименованиеПолное
		|		ИНАЧЕ ВременнаяТаблицаСтроки.ДополнительныеСведения
		|	КОНЕЦ КАК НоменклатураПредставление,
		|	ВременнаяТаблицаСтроки.СуммаСкидки КАК СуммаСкидки
		|ИЗ
		|	ВременнаяТаблицаСтроки КАК ВременнаяТаблицаСтроки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаДокументыСИсходнымиСуммами КАК ВременнаяТаблицаДокументыСИсходнымиСуммами
		|		ПО ВременнаяТаблицаСтроки.Ссылка = ВременнаяТаблицаДокументыСИсходнымиСуммами.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаСтроки.Ссылка КАК Ссылка,
		|	ВременнаяТаблицаДокументыДляПересчета.Курс КАК Курс,
		|	ВременнаяТаблицаДокументыДляПересчета.Кратность КАК Кратность,
		|	ВременнаяТаблицаСтроки.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаСтроки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВременнаяТаблицаСтроки.Количество КАК Количество,
		|	ВременнаяТаблицаСтроки.ЦенаВВалютеРеглУчета КАК Цена,
		|	ВременнаяТаблицаСтроки.СуммаНДСВВалютеРеглУчета КАК СуммаНДС,
		|	ВременнаяТаблицаСтроки.СуммаНСПВВалютеРеглУчета КАК СуммаНСП,
		|	ВременнаяТаблицаСтроки.СтавкаНСП КАК СтавкаНСП,
		|	ВременнаяТаблицаСтроки.СуммаВВалютеРеглУчета КАК Сумма,
		|	ВременнаяТаблицаСтроки.ВсегоВВалютеРеглУчета - ВременнаяТаблицаСтроки.СуммаСкидкиВВалютеРеглУчета КАК Всего,
		|	ВременнаяТаблицаСтроки.СуммаДоходаВВалютеРеглУчета КАК Стоимость,
		|	ВременнаяТаблицаСтроки.КодТНВЭД КАК КодТНВЭД,
		|	ВременнаяТаблицаСтроки.ТипТовара КАК ТипТовара,
		|	ВременнаяТаблицаСтроки.ДополнительныеСведения КАК ДополнительныеСведения,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаСтроки.ДополнительныеСведения = """"
		|			ТОГДА ВременнаяТаблицаСтроки.Номенклатура.НаименованиеПолное
		|		ИНАЧЕ ВременнаяТаблицаСтроки.ДополнительныеСведения
		|	КОНЕЦ КАК НоменклатураПредставление,
		|	ВременнаяТаблицаСтроки.СуммаСкидкиВВалютеРеглУчета КАК СуммаСкидки
		|ИЗ
		|	ВременнаяТаблицаСтроки КАК ВременнаяТаблицаСтроки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаДокументыДляПересчета КАК ВременнаяТаблицаДокументыДляПересчета
		|		ПО ВременнаяТаблицаСтроки.Ссылка = ВременнаяТаблицаДокументыДляПересчета.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Ссылка КАК Ссылка,
		|	ВременнаяТаблицаШапка.Номер КАК Номер,
		|	ВременнаяТаблицаШапка.Дата КАК Дата,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаДокумента,
		|	ВременнаяТаблицаШапка.Курс КАК Курс,
		|	ВременнаяТаблицаШапка.Кратность КАК Кратность,
		|	ВременнаяТаблицаШапка.ЭкспортнаяПоставка КАК ЭкспортнаяПоставка,
		|	ВременнаяТаблицаШапка.СуммаВключаетНалоги КАК СуммаВключаетНалоги,
		|	ВременнаяТаблицаШапка.ПечатьВРегламентированнойВалюте КАК ПечатьВРегламентированнойВалюте,
		|	ВременнаяТаблицаШапка.ПечататьКурсИСуммуВРегламентированнойВалюте КАК ПечататьКурсИСуммуВРегламентированнойВалюте,
		|	ВременнаяТаблицаШапка.ВыводитьКомментарийВНаименование КАК ВыводитьКомментарийВНаименование,
		|	ВременнаяТаблицаШапка.Комментарий КАК Комментарий,
		|	ВременнаяТаблицаШапка.КодПоставкиНДС КАК КодПоставкиНДС,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.ОрганизацияПредставление КАК ОрганизацияПредставление,
		|	ВременнаяТаблицаШапка.ИННОрганизации КАК ИННОрганизации,
		|	ВременнаяТаблицаШапка.ГНСОрганизации КАК ГНСОрганизации,
		|	ВременнаяТаблицаШапка.КодГНСОрганизации КАК КодГНСОрганизации,
		|	ВременнаяТаблицаШапка.ФайлЛоготип КАК ФайлЛоготип,
		|	ВременнаяТаблицаШапка.НомерБанковскогоСчетаОрганизации КАК НомерБанковскогоСчетаОрганизации,
		|	ВременнаяТаблицаШапка.БикБанкаОрганизации КАК БикБанкаОрганизации,
		|	ВременнаяТаблицаШапка.НаименованиеБанкаОрганизации КАК НаименованиеБанкаОрганизации,
		|	ВременнаяТаблицаШапка.Контрагент КАК Контрагент,
		|	ВременнаяТаблицаШапка.НомерБланкаСФ КАК НомерБланкаСФ,
		|	ВременнаяТаблицаШапка.СерияБланкаСФ КАК СерияБланкаСФ,
		|	ВременнаяТаблицаШапка.ДатаСФ КАК ДатаСФ,
		|	ВременнаяТаблицаШапка.ЭкспортУслугПокупателюКР КАК ЭкспортУслугПокупателюКР,
		|	ВременнаяТаблицаШапка.БезналичныйРасчет КАК БезналичныйРасчет,
		|	ВременнаяТаблицаШапка.БезвозмезднаяПоставка КАК БезвозмезднаяПоставка,
		|	ВременнаяТаблицаШапка.СтавкаНДС КАК СтавкаНДС
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПечататьСчетаФактурыСГоловнымКонтрагентом", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьЗначениеКонстанты("ПечататьСчетаФактурыСГоловнымКонтрагентом"));
	Запрос.УстановитьПараметр("СписокДокументов", МассивОбъектов);
	Запрос.УстановитьПараметр("СчетФактураВВалюте", СчетФактураВВалюте);
	 
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Шапка = РезультатЗапроса[7].Выбрать();
	
	Пока Шапка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
	
		ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(Шапка.Дата, Шапка.Организация);
		ПлательщикНДС = ДанныеУчетнойПолитики.ПлательщикНДС;
		ПлательщикНСП = ДанныеУчетнойПолитики.ПлательщикНСП;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Подготовка данных
		ДанныеПечати = Новый Структура;
		ДанныеПечати.Вставить("НомерОтчета", ?(КоличествоСтрокСчетаФактуры = 20,"001","002"));
		ДанныеПечати.Вставить("НомерПриложения", ?(КоличествоСтрокСчетаФактуры = 20,"2","3"));
		ДанныеПечати.Вставить("НомерБланкаСФ", ?(ПлательщикНДС ИЛИ ЗначениеЗаполнено(Шапка.НомерБланкаСФ), Шапка.НомерБланкаСФ, ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер)));
		ДанныеПечати.Вставить("СерияБланкаСФ", Шапка.СерияБланкаСФ);
		ДанныеПечати.Вставить("ТипПоставки", ?(Шапка.ЭкспортнаяПоставка, "Экспорт", "Внутренняя"));
		
		Если Шапка.БезвозмезднаяПоставка Тогда
			ДанныеПечати.Вставить("ВидПлатежа", НСтр("ru = 'Безвозмездная поставка'"));
		Иначе	
			ДанныеПечати.Вставить("ВидПлатежа", ?(Шапка.БезналичныйРасчет, "Безналичная", "Наличная"));
		КонецЕсли;	
			
		ДанныеПечати.Вставить("ВидПоставки", Шапка.КодПоставкиНДС);
		ДанныеПечати.Вставить("Курс", Формат(Шапка.Курс, "ЧЦ=15; ЧДЦ=4"));
		
		ДанныеПечати.Вставить("ТекстЗаголовка", НСтр("ru = 'СЧЕТ-ФАКТУРА НДС'"));
		ДанныеПечати.Вставить("ДатаПоставки", Формат(Шапка.Дата,"ДЛФ=DD"));
		ДанныеПечати.Вставить("БанкПоставщика", Шапка.НаименованиеБанкаОрганизации);		
		
		ДанныеПечати.Вставить("ФайлЛоготип", Шапка.ФайлЛоготип);

		ПредставлениеПоставщика = "";
		Организация = Шапка.Организация;
		ИНН = Шапка.ИННОрганизации;
	    ГНС = Шапка.ГНСОрганизации;
	    КодГНС = Шапка.КодГНСОрганизации;
		
		ПредставлениеПоставщика = Шапка.ОрганизацияПредставление;
		
		ДатаСФ = Формат(?(ПлательщикНДС ИЛИ ЗначениеЗаполнено(Шапка.ДатаСФ), Шапка.ДатаСФ, Шапка.Дата), "ДЛФ=D");              
		ДанныеПечати.Вставить("Дата1", Сред(ДатаСФ,1,1));
		ДанныеПечати.Вставить("Дата2", Сред(ДатаСФ,2,1));
		ДанныеПечати.Вставить("Дата3", Сред(ДатаСФ,4,1));
		ДанныеПечати.Вставить("Дата4", Сред(ДатаСФ,5,1));
		ДанныеПечати.Вставить("Дата5", Сред(ДатаСФ,7,1));
		ДанныеПечати.Вставить("Дата6", Сред(ДатаСФ,8,1));
		ДанныеПечати.Вставить("Дата7", Сред(ДатаСФ,9,1));
		ДанныеПечати.Вставить("Дата8", Сред(ДатаСФ,10,1));
		
		ДанныеПечати.Вставить("ИННПост1", Сред(ИНН,1,1));
		ДанныеПечати.Вставить("ИННПост2", Сред(ИНН,2,1));
		ДанныеПечати.Вставить("ИННПост3", Сред(ИНН,3,1));
		ДанныеПечати.Вставить("ИННПост4", Сред(ИНН,4,1));
		ДанныеПечати.Вставить("ИННПост5", Сред(ИНН,5,1));
		ДанныеПечати.Вставить("ИННПост6", Сред(ИНН,6,1));
		ДанныеПечати.Вставить("ИННПост7", Сред(ИНН,7,1));
		ДанныеПечати.Вставить("ИННПост8", Сред(ИНН,8,1));
		ДанныеПечати.Вставить("ИННПост9", Сред(ИНН,9,1));
		ДанныеПечати.Вставить("ИННПост10", Сред(ИНН,10,1));
		ДанныеПечати.Вставить("ИННПост11", Сред(ИНН,11,1));
		ДанныеПечати.Вставить("ИННПост12", Сред(ИНН,12,1));
		ДанныеПечати.Вставить("ИННПост13", Сред(ИНН,13,1));
		ДанныеПечати.Вставить("ИННПост14", Сред(ИНН,14,1));

        БИК = Шапка.БикБанкаОрганизации;
		ДанныеПечати.Вставить("КодБанкаПоставщика1", Сред(БИК,1,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика2", Сред(БИК,2,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика3", Сред(БИК,3,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика4", Сред(БИК,4,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика5", Сред(БИК,5,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика6", Сред(БИК,6,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика7", Сред(БИК,7,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика8", Сред(БИК,8,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика9", Сред(БИК,9,1));		
		
		НомерСчета = Шапка.НомерБанковскогоСчетаОрганизации;
		ДанныеПечати.Вставить("СчетПоставщика1", Сред(НомерСчета,1,1));		
		ДанныеПечати.Вставить("СчетПоставщика2", Сред(НомерСчета,2,1));		
		ДанныеПечати.Вставить("СчетПоставщика3", Сред(НомерСчета,3,1));		
		ДанныеПечати.Вставить("СчетПоставщика4", Сред(НомерСчета,4,1));		
		ДанныеПечати.Вставить("СчетПоставщика5", Сред(НомерСчета,5,1));		
		ДанныеПечати.Вставить("СчетПоставщика6", Сред(НомерСчета,6,1));		
		ДанныеПечати.Вставить("СчетПоставщика7", Сред(НомерСчета,7,1));		
		ДанныеПечати.Вставить("СчетПоставщика8", Сред(НомерСчета,8,1));		
		ДанныеПечати.Вставить("СчетПоставщика9", Сред(НомерСчета,9,1));		
		ДанныеПечати.Вставить("СчетПоставщика10", Сред(НомерСчета,10,1));		
		ДанныеПечати.Вставить("СчетПоставщика11", Сред(НомерСчета,11,1));		
		ДанныеПечати.Вставить("СчетПоставщика12", Сред(НомерСчета,12,1));		
		ДанныеПечати.Вставить("СчетПоставщика13", Сред(НомерСчета,13,1));		
		ДанныеПечати.Вставить("СчетПоставщика14", Сред(НомерСчета,14,1));		
		ДанныеПечати.Вставить("СчетПоставщика15", Сред(НомерСчета,15,1));		
		ДанныеПечати.Вставить("СчетПоставщика16", Сред(НомерСчета,16,1));		
		
		ДанныеПечати.Вставить("ГНСПоставщика1", Сред(КодГНС,1,1));		
		ДанныеПечати.Вставить("ГНСПоставщика2", Сред(КодГНС,2,1));		
		ДанныеПечати.Вставить("ГНСПоставщика3", Сред(КодГНС,3,1));		

		ДанныеПечати.Вставить("НаименованиеГНСПоставщика", ГНС);		
		ДанныеПечати.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);		
		
		АдресПоставщика = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Шапка.Дата); 
		ДанныеПечати.Вставить("АдресПоставщика", АдресПоставщика);		

		// Данные по контрагенту
		СведенияОКонтрагенте = БухгалтерскийУчетСервер.ПолучитьСведенияОКонтрагенте(Шапка.Контрагент);
		
		ДанныеПечати.Вставить("ПредставлениеПокупателя", СведенияОКонтрагенте.НаименованиеПолное);
		
		ВыводДопИнформацииПоКонтрагенту = БухгалтерскийУчетСервер.ПолучитьПризнакПатентаПоКонтрагенту(Шапка.Контрагент) ИЛИ
			(Шапка.Контрагент.СтранаРезидентства = Справочники.СтраныМира.Киргизия ИЛИ Шапка.Контрагент.СтранаРезидентства.УчастникЕАЭС);
		
		Если ВыводДопИнформацииПоКонтрагенту Тогда
			Если Шапка.Контрагент.ПризнакСтраны = Перечисления.ПризнакиСтраны.ЕАЭС Тогда
				ДанныеПечати.Вставить("НаименованиеГНСПокупателя", Шапка.Контрагент.СтранаРезидентства.Наименование);
				КодГНСКонтрагента = Шапка.Контрагент.СтранаРезидентства.Код;
				ДанныеПечати.Вставить("ГНСПокупателя1", Сред(КодГНСКонтрагента,1,1));		
				ДанныеПечати.Вставить("ГНСПокупателя2", Сред(КодГНСКонтрагента,2,1));		
				ДанныеПечати.Вставить("ГНСПокупателя3", Сред(КодГНСКонтрагента,3,1));	
			Иначе
				ДанныеПечати.Вставить("НаименованиеГНСПокупателя", СведенияОКонтрагенте.ГНСНаименование);
				КодГНСКонтрагента = СведенияОКонтрагенте.ГНСКод;
				ДанныеПечати.Вставить("ГНСПокупателя1", Сред(КодГНСКонтрагента,1,1));		
				ДанныеПечати.Вставить("ГНСПокупателя2", Сред(КодГНСКонтрагента,2,1));		
				ДанныеПечати.Вставить("ГНСПокупателя3", Сред(КодГНСКонтрагента,3,1));	
			КонецЕсли;	
		Иначе
			ДанныеПечати.Вставить("НаименованиеГНСПокупателя", "отсутствует");
		КонецЕсли;
		
		ДанныеПечати.Вставить("АдресПокупателя", СведенияОКонтрагенте.АдрЮР);		
		
		ИННКонтрагента = СведенияОКонтрагенте.ИНН;
		ДанныеПечати.Вставить("ИННПокупателя1", Сред(ИННКонтрагента,1,1));		
		ДанныеПечати.Вставить("ИННПокупателя2", Сред(ИННКонтрагента,2,1));		
		ДанныеПечати.Вставить("ИННПокупателя3", Сред(ИННКонтрагента,3,1));		
		ДанныеПечати.Вставить("ИННПокупателя4", Сред(ИННКонтрагента,4,1));		
		ДанныеПечати.Вставить("ИННПокупателя5", Сред(ИННКонтрагента,5,1));		
		ДанныеПечати.Вставить("ИННПокупателя6", Сред(ИННКонтрагента,6,1));		
		ДанныеПечати.Вставить("ИННПокупателя7", Сред(ИННКонтрагента,7,1));		
		ДанныеПечати.Вставить("ИННПокупателя8", Сред(ИННКонтрагента,8,1));		
		ДанныеПечати.Вставить("ИННПокупателя9", Сред(ИННКонтрагента,9,1));		
		ДанныеПечати.Вставить("ИННПокупателя10", Сред(ИННКонтрагента,10,1));		
		ДанныеПечати.Вставить("ИННПокупателя11", Сред(ИННКонтрагента,11,1));		
		ДанныеПечати.Вставить("ИННПокупателя12", Сред(ИННКонтрагента,12,1));		
		ДанныеПечати.Вставить("ИННПокупателя13", Сред(ИННКонтрагента,13,1));		
		ДанныеПечати.Вставить("ИННПокупателя14", Сред(ИННКонтрагента,14,1));		
		
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.НомерСчета) И ВыводДопИнформацииПоКонтрагенту Тогда 
			НомерСчетаКонтрагента = СведенияОКонтрагенте.НомерСчета;
			ДанныеПечати.Вставить("СчетПокупателя1", Сред(НомерСчетаКонтрагента,1,1));		
			ДанныеПечати.Вставить("СчетПокупателя2", Сред(НомерСчетаКонтрагента,2,1));		
			ДанныеПечати.Вставить("СчетПокупателя3", Сред(НомерСчетаКонтрагента,3,1));		
			ДанныеПечати.Вставить("СчетПокупателя4", Сред(НомерСчетаКонтрагента,4,1));		
			ДанныеПечати.Вставить("СчетПокупателя5", Сред(НомерСчетаКонтрагента,5,1));		
			ДанныеПечати.Вставить("СчетПокупателя6", Сред(НомерСчетаКонтрагента,6,1));		
			ДанныеПечати.Вставить("СчетПокупателя7", Сред(НомерСчетаКонтрагента,7,1));		
			ДанныеПечати.Вставить("СчетПокупателя8", Сред(НомерСчетаКонтрагента,8,1));		
			ДанныеПечати.Вставить("СчетПокупателя9", Сред(НомерСчетаКонтрагента,9,1));		
			ДанныеПечати.Вставить("СчетПокупателя10", Сред(НомерСчетаКонтрагента,10,1));		
			ДанныеПечати.Вставить("СчетПокупателя11", Сред(НомерСчетаКонтрагента,11,1));		
			ДанныеПечати.Вставить("СчетПокупателя12", Сред(НомерСчетаКонтрагента,12,1));		
			ДанныеПечати.Вставить("СчетПокупателя13", Сред(НомерСчетаКонтрагента,13,1));		
			ДанныеПечати.Вставить("СчетПокупателя14", Сред(НомерСчетаКонтрагента,14,1));
			ДанныеПечати.Вставить("СчетПокупателя15", Сред(НомерСчетаКонтрагента,15,1));		
			ДанныеПечати.Вставить("СчетПокупателя16", Сред(НомерСчетаКонтрагента,16,1));
			
			БикБанкаКонтрагента = СведенияОКонтрагенте.БИКБанка;
			ДанныеПечати.Вставить("КодБанкаПокупателя1", Сред(БикБанкаКонтрагента,1,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя2", Сред(БикБанкаКонтрагента,2,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя3", Сред(БикБанкаКонтрагента,3,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя4", Сред(БикБанкаКонтрагента,4,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя5", Сред(БикБанкаКонтрагента,5,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя6", Сред(БикБанкаКонтрагента,6,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя7", Сред(БикБанкаКонтрагента,7,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя8", Сред(БикБанкаКонтрагента,8,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя9", Сред(БикБанкаКонтрагента,9,1));		
			
			ДанныеПечати.Вставить("БанкПокупателя", СведенияОКонтрагенте.Банк);
		КонецЕсли;	
		
		// Таблицы
		ПараметрыОтбора = Новый Структура("Ссылка", Шапка.Ссылка);
		
		ТаблицаИсходныеДанные 		= РезультатЗапроса[5].Выгрузить();
		ТаблицаПересчитанныеДанные 	= РезультатЗапроса[6].Выгрузить();
		ТаблицаИсходныеДанные.Индексы.Добавить("Ссылка");
		ТаблицаПересчитанныеДанные.Индексы.Добавить("Ссылка");
		
		ПересчитаннаяТаблица = Неопределено;
		ИсходнаяТаблица = Неопределено;
		
		Если Шапка.ПечатьВРегламентированнойВалюте ИЛИ Шапка.ПечататьКурсИСуммуВРегламентированнойВалюте ИЛИ СчетФактураВВалюте Тогда
			ПересчитаннаяТаблица = ТаблицаПересчитанныеДанные.Скопировать(ПараметрыОтбора);
			ПересчитаннаяТаблица.Индексы.Добавить("Ссылка");
			ПересчитаннаяТаблица.Индексы.Добавить("Номенклатура");
			ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		КонецЕсли;	
		
		Если НЕ Шапка.ПечатьВРегламентированнойВалюте Тогда
			ИсходнаяТаблица = ТаблицаИсходныеДанные.Скопировать(ПараметрыОтбора);
			ИсходнаяТаблица.Индексы.Добавить("Ссылка");
			ИсходнаяТаблица.Индексы.Добавить("Номенклатура");
		КонецЕсли;
		
		КоличествоСтрок = 0;
		
		ВсегоСуммаСкидкиИсходная = 0;
		ВсегоСуммаСкидкиПересчитанная = 0;
		
		// Итоги по исходным суммам
		Если ИсходнаяТаблица <> Неопределено Тогда		
			ВсегоСтоимостьИсходная = ИсходнаяТаблица.Итог("Стоимость");
			ВсегоИсходная = ИсходнаяТаблица.Итог("Всего");
			ВсегоНДСИсходная = ИсходнаяТаблица.Итог("СуммаНДС");
			ВсегоНСПИсходная = ИсходнаяТаблица.Итог("СуммаНСП");
			ВсегоСуммаСкидкиИсходная = ИсходнаяТаблица.Итог("СуммаСкидки");
			КоличествоСтрок = ИсходнаяТаблица.Количество();
			
			// Если пересчитанных сумм нет, то итоговая строка будет одна,
			// поэтому используется строка итогов, которая находится в области "Подвал" и 
			// названия параметров задаются соответственно этой области. 
			// Если пересчитанные суммы есть, то итоговых строки будет две 
			// (с исходными суммами и с пересчитанными), поэтому будет задействована область
			// "ИсходныйИтог" и параметры соответственно именуем как они указаны в данной области.
			Если ПересчитаннаяТаблица = Неопределено Тогда
				ДанныеПечати.Вставить("ВсегоСтоимость", ?(СчетФактураВВалюте, ВсегоСтоимостьИсходная, 0));
				ДанныеПечати.Вставить("Всего", 			?(СчетФактураВВалюте, ВсегоИсходная, 0));
				ДанныеПечати.Вставить("ВсегоНДС", 		?(СчетФактураВВалюте, ВсегоНДСИсходная, 0));
				ДанныеПечати.Вставить("ВсегоНСП", 		?(СчетФактураВВалюте, ВсегоНСПИсходная, 0));
				
				Если Шапка.ПечатьВРегламентированнойВалюте Тогда 
					ДанныеПечати.Вставить("Валюта", " (" + ВалютаРегламентированногоУчета + ")");
				Иначе
					ДанныеПечати.Вставить("Валюта", " (" + Шапка.ВалютаДокумента + ")");
				КонецЕсли;
				
				Если ВсегоСуммаСкидкиИсходная <> 0 Тогда
					ДанныеПечати.Вставить("СуммаСкидкиБезНалогов", 	0);
					ДанныеПечати.Вставить("СуммаСкидки", 			0);
					ДанныеПечати.Вставить("НДССкидки",				0);
					ДанныеПечати.Вставить("НСПСкидки", 				0);	
				КонецЕсли;	
				
			Иначе
				ДанныеПечати.Вставить("ВсегоСтоимостьИсходная", ?(СчетФактураВВалюте, ВсегоСтоимостьИсходная, 0));
				ДанныеПечати.Вставить("ВсегоИсходная", 			?(СчетФактураВВалюте, ВсегоИсходная, 0));
				ДанныеПечати.Вставить("ВсегоНДСИсходная", 		?(СчетФактураВВалюте, ВсегоНДСИсходная, 0));
				ДанныеПечати.Вставить("ВсегоНСПИсходная", 		?(СчетФактураВВалюте, ВсегоНСПИсходная, 0));
				
				ДанныеПечати.Вставить("ВалютаИсходная", " (" + Шапка.ВалютаДокумента + ")");
				
				Если ВсегоСуммаСкидкиИсходная <> 0 Тогда
					ДанныеПечати.Вставить("СуммаСкидкиБезНалоговИсходная", 	0);
					ДанныеПечати.Вставить("СуммаСкидкиИсходная", 			0);
					ДанныеПечати.Вставить("НДССкидкиИсходная",				0);
					ДанныеПечати.Вставить("НСПСкидкиИсходная", 				0);	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Итоги по пересчитанным суммам
		Если ПересчитаннаяТаблица <> Неопределено Тогда
			ВсегоСтоимостьПересчитанная = ПересчитаннаяТаблица.Итог("Стоимость");
			ВсегоПересчитанная = ПересчитаннаяТаблица.Итог("Всего");
			ВсегоНДСПересчитанная = ПересчитаннаяТаблица.Итог("СуммаНДС");
			ВсегоНСППересчитанная = ПересчитаннаяТаблица.Итог("СуммаНСП");
			ВсегоСуммаСкидкиПересчитанная = ПересчитаннаяТаблица.Итог("СуммаСкидки");
			КоличествоСтрок = КоличествоСтрок + ПересчитаннаяТаблица.Количество();
			
			ДанныеПечати.Вставить("ВсегоСтоимость", ?(СчетФактураВВалюте, ВсегоСтоимостьПересчитанная, 0));
			ДанныеПечати.Вставить("Всего", 			?(СчетФактураВВалюте, ВсегоПересчитанная, 0));
			ДанныеПечати.Вставить("ВсегоНДС", 		?(СчетФактураВВалюте, ВсегоНДСПересчитанная, 0));
			ДанныеПечати.Вставить("ВсегоНСП", 		?(СчетФактураВВалюте, ВсегоНСППересчитанная, 0));
			
			ДанныеПечати.Вставить("Валюта", " (" + ВалютаРегламентированногоУчета + ")");
			
			Если ВсегоСуммаСкидкиПересчитанная <> 0 Тогда
				ДанныеПечати.Вставить("СуммаСкидкиБезНалогов", 	0);
				ДанныеПечати.Вставить("СуммаСкидки", 			0);
				ДанныеПечати.Вставить("НДССкидки",				0);
				ДанныеПечати.Вставить("НСПСкидки", 				0);	
			КонецЕсли;
		КонецЕсли;
		
		Если ВсегоСуммаСкидкиИсходная = 0 И ВсегоСуммаСкидкиПересчитанная = 0 Тогда
			ЕстьСкидка = Ложь;
		Иначе	
			ЕстьСкидка = Истина;
		КонецЕсли;	
		
		// Ставки
		ЗначениеСтавкиНДС = УчетНДС.ПолучитьСтавкуНДС(Шапка.Дата, Шапка.СтавкаНДС);
		ДанныеПечати.Вставить("СтавкаНДС", Строка(ЗначениеСтавкиНДС) + "%");
		
		// Информация подвала
		ТекстОКоличестве = СтрШаблон("%1 %2", КоличествоСтрокСчетаФактуры, ?(КоличествоСтрокСчетаФактуры = 20,"(двадцати)","(семи)"));
		ДанныеПечати.Вставить("РазрешенноеКоличествоСтрок", ТекстОКоличестве);
		ДанныеПечати.Вставить("НомерОтчета", ?(КоличествоСтрокСчетаФактуры = 20,"001","002"));
		
		// Области
		МассивОбластейМакета = Новый Массив;
		
		Если СчетФактураВВалюте Тогда
			МассивОбластейМакета.Добавить("ЗаголовокСФВВалюте");
		Иначе
			МассивОбластейМакета.Добавить("Заголовок");
		КонецЕсли;
		
		МассивОбластейМакета.Добавить("Шапка");
		
		Если СчетФактураВВалюте Тогда
			МассивОбластейМакета.Добавить("ШапкаТаблицыВВалюте");
			МассивОбластейМакета.Добавить("СтрокаСФВВалюте");
		Иначе
			МассивОбластейМакета.Добавить("ШапкаТаблицы");
			МассивОбластейМакета.Добавить("Строка");
		КонецЕсли;
		
		Если ДанныеПечати.Свойство("ВалютаИсходная") Тогда
			
			Если НЕ СчетФактураВВалюте И ЕстьСкидка Тогда
				МассивОбластейМакета.Добавить("СтрокаСкидкиИсходная");
				МассивОбластейМакета.Добавить("СтрокаСкидкиПересчитанная");
			КонецЕсли;
			
			МассивОбластейМакета.Добавить("ИсходныйИтог");
			
		Иначе
			Если НЕ СчетФактураВВалюте И ЕстьСкидка Тогда
				МассивОбластейМакета.Добавить("СтрокаСкидкиПересчитанная");
			КонецЕсли;	
		КонецЕсли;
		
		МассивОбластейМакета.Добавить("ПодвалСФаксимиле");
		
		ДанныеПечатиСтроки = Новый Структура();
		ДанныеПечатиСтроки.Вставить("КодТовара1", "");
		ДанныеПечатиСтроки.Вставить("КодТовара2", "");
		ДанныеПечатиСтроки.Вставить("КодТовара3", "");
		ДанныеПечатиСтроки.Вставить("КодТовара4", "");
		
		ДанныеПечатиПустаяСтрока = Новый Структура();
		ДанныеПечатиПустаяСтрока.Вставить("КодТовара1", 				"");
		ДанныеПечатиПустаяСтрока.Вставить("КодТовара2", 				"");
		ДанныеПечатиПустаяСтрока.Вставить("КодТовара3", 				"");
		ДанныеПечатиПустаяСтрока.Вставить("КодТовара4", 				"");
		ДанныеПечатиПустаяСтрока.Вставить("Количество", 				"Х");
		ДанныеПечатиПустаяСтрока.Вставить("СтавкаНДС", 					"Х");
		ДанныеПечатиПустаяСтрока.Вставить("СтавкаНСП", 					"Х");
		ДанныеПечатиПустаяСтрока.Вставить("Стоимость", 					"Х");	
		ДанныеПечатиПустаяСтрока.Вставить("СуммаНДС", 					"Х");
		ДанныеПечатиПустаяСтрока.Вставить("СуммаНСП", 					"Х");
		ДанныеПечатиПустаяСтрока.Вставить("НоменклатураПредставление", 	"Х");   
		ДанныеПечатиПустаяСтрока.Вставить("ЕдиницаИзмерения",			"Х");
		ДанныеПечатиПустаяСтрока.Вставить("Цена", 						"Х");
		ДанныеПечатиПустаяСтрока.Вставить("Всего", 						"Х");
		
		Если СчетФактураВВалюте Тогда
			ДанныеПечатиПустаяСтрока.Вставить("НоменклатураПредставление", 	"Х");
			ДанныеПечатиПустаяСтрока.Вставить("ЦенаВРеглВалюте", 			"Х");
			ДанныеПечатиПустаяСтрока.Вставить("СтоимостьВРеглВалюте", 		"Х");
			ДанныеПечатиПустаяСтрока.Вставить("СуммаНДСВРеглВалюте", 		"Х");
			ДанныеПечатиПустаяСтрока.Вставить("СуммаНСПВРеглВалюте", 		"Х");
			ДанныеПечатиПустаяСтрока.Вставить("ВсегоВРеглВалюте", 			"Х");
		КонецЕсли;	
		
		ДанныеДокумента = Новый Структура();
		ДанныеДокумента.Вставить("СуммаВключаетНалоги", 		Шапка.СуммаВключаетНалоги);
		ДанныеДокумента.Вставить("Дата", 						Шапка.Дата);
		ДанныеДокумента.Вставить("Организация", 				Шапка.Организация);
		ДанныеДокумента.Вставить("СтавкаНДС", 					Шапка.СтавкаНДС);
		ДанныеДокумента.Вставить("СтавкаНСП", 					Неопределено);
		ДанныеДокумента.Вставить("БезналичныйРасчет", 			Шапка.БезналичныйРасчет);
		ДанныеДокумента.Вставить("ЭкспортУслугПокупателюКР", 	Шапка.ЭкспортУслугПокупателюКР);
		
		Для Каждого ИмяОбласти Из МассивОбластейМакета Цикл
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
			
			Если ИмяОбласти <> "Строка" И ИмяОбласти <> "СтрокаСФВВалюте" Тогда
				ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			Иначе
				СтруктураНоменклатура = Новый Структура();
				СтруктураНоменклатура.Вставить("НоменклатураПредставление", "");		
				
				Если (ИсходнаяТаблица <> Неопределено И ПересчитаннаяТаблица <> Неопределено)
					ИЛИ ИсходнаяТаблица <> Неопределено Тогда
					
					ОбластьМакетаДопСтрока = Неопределено;
					
					// Заготовка необходимых структур
					Если ПересчитаннаяТаблица <> Неопределено Тогда
						ОбластьМакетаДопСтрока = Макет.ПолучитьОбласть("ПересчитаннаяСтрока");
						СтруктураОтбора = Новый Структура();
						СтруктураОтбора.Вставить("Ссылка", );
						СтруктураОтбора.Вставить("Номенклатура", );
						СтруктураОтбора.Вставить("Количество", );
					КонецЕсли;
						
					Для Каждого СтрокаТаблицы Из ИсходнаяТаблица Цикл
						КодТНВЭД = ?(ЗначениеЗаполнено(СтрокаТаблицы.КодТНВЭД), СтрокаТаблицы.КодТНВЭД, "0000");
						ДанныеПечатиСтроки.КодТовара1 = Сред(КодТНВЭД,1,1);
						ДанныеПечатиСтроки.КодТовара2 = Сред(КодТНВЭД,2,1);
						ДанныеПечатиСтроки.КодТовара3 = Сред(КодТНВЭД,3,1);
						ДанныеПечатиСтроки.КодТовара4 = Сред(КодТНВЭД,4,1);
						
						Если ОбластьМакетаДопСтрока = Неопределено Тогда
							ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
							ОбластьМакета.Параметры.Заполнить(ДанныеПечатиСтроки);
							
							ЗначениеСтавкиНСП = ?(ПлательщикНСП, 
								УчетНДС.ПолучитьСтавкуНСП(Шапка.Дата, Шапка.Организация, СтрокаТаблицы.СтавкаНСП), 
								Справочники.СтавкиНСП.ПустаяСсылка());
			
							ДанныеДокумента.СтавкаНСП = ЗначениеСтавкиНСП;
							
							РассчитатьСуммыСчетФактуры(СтрокаТаблицы, ДанныеДокумента, ДанныеПечати, ДанныеУчетнойПолитики,, НЕ ЕстьСкидка);
							
							ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
							
							Если Шапка.ВыводитьКомментарийВНаименование Тогда
								СтруктураНоменклатура.НоменклатураПредставление = СтрШаблон(НСтр("ru = '%1, %2'"),
									СтрокаТаблицы.НоменклатураПредставление,
									Шапка.Комментарий);
									
								ОбластьМакета.Параметры.Заполнить(СтруктураНоменклатура);
							КонецЕсли;
							
							ОбластьМакета.Параметры.Заполнить(Новый Структура("СтавкаНСП", ?(ЗначениеЗаполнено(ЗначениеСтавкиНСП), Строка(ЗначениеСтавкиНСП) + "%","")));
							ТабличныйДокумент.Вывести(ОбластьМакета);
							
						// Вывод основной строки с исходной суммой (к номенклатуре добавляется курс),
						// а затем вывод дополнительной строки с пересчитанными суммами.
						Иначе
							Если Шапка.ВыводитьКомментарийВНаименование Тогда
								Если СчетФактураВВалюте Тогда
									СтруктураНоменклатура.НоменклатураПредставление = СтрШаблон(НСтр("ru = '%1, %2'"),
										СтрокаТаблицы.НоменклатураПредставление,
										Шапка.Комментарий);
								Иначе	
									СтруктураНоменклатура.НоменклатураПредставление = СтрШаблон(НСтр("ru = '%1, %2, курс %3'"),
										СтрокаТаблицы.НоменклатураПредставление,
										Шапка.Комментарий,
										Шапка.Курс);
								КонецЕсли;
							Иначе
								Если СчетФактураВВалюте Тогда
									СтруктураНоменклатура.НоменклатураПредставление = СтрокаТаблицы.НоменклатураПредставление;
								Иначе	
									СтруктураНоменклатура.НоменклатураПредставление = СтрШаблон(НСтр("ru = '%1, курс %2'"),
										СтрокаТаблицы.НоменклатураПредставление,
										Шапка.Курс);
								КонецЕсли;
							КонецЕсли;	
														
							ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
							ОбластьМакета.Параметры.Заполнить(ДанныеПечатиСтроки);
							
							ЗначениеСтавкиНСП = ?(ПлательщикНСП, 
								УчетНДС.ПолучитьСтавкуНСП(Шапка.Дата, Шапка.Организация, СтрокаТаблицы.СтавкаНСП), 
								Справочники.СтавкиНСП.ПустаяСсылка());
			
							ДанныеДокумента.СтавкаНСП = ЗначениеСтавкиНСП;
							
							Если НЕ СчетФактураВВалюте Тогда 
								РассчитатьСуммыСчетФактуры(СтрокаТаблицы, ДанныеДокумента, ДанныеПечати, ДанныеУчетнойПолитики, Истина, НЕ ЕстьСкидка);
							КонецЕсли;	
								
							ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
							ОбластьМакета.Параметры.Заполнить(СтруктураНоменклатура);
							
							Если СчетФактураВВалюте Тогда
								Цены = Новый Структура();
								Цены.Вставить("Цена", Строка(Формат(СтрокаТаблицы.Цена, "ЧДЦ=2; ЧВН=")) + " (" + Шапка.ВалютаДокумента + ")");
								ОбластьМакета.Параметры.Заполнить(Цены);
							КонецЕсли;
							
							ОбластьМакета.Параметры.Заполнить(Новый Структура("СтавкаНСП", ?(ЗначениеЗаполнено(ЗначениеСтавкиНСП), Строка(ЗначениеСтавкиНСП) + "%","")));
							
							Если НЕ СчетФактураВВалюте Тогда
								ТабличныйДокумент.Вывести(ОбластьМакета);
							КонецЕсли;
							
							ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТаблицы);
							
							Строки = ПересчитаннаяТаблица.НайтиСтроки(СтруктураОтбора);
							Если Строки.Количество() > 0 Тогда
								Данные = Строки[0];
								
								ЗначениеСтавкиНСП = ?(ПлательщикНСП, 
									УчетНДС.ПолучитьСтавкуНСП(Шапка.Дата, Шапка.Организация, СтрокаТаблицы.СтавкаНСП), 
									Справочники.СтавкиНСП.ПустаяСсылка());
			
								ДанныеДокумента.СтавкаНСП = ЗначениеСтавкиНСП;
							                                                                       
								Если СчетФактураВВалюте Тогда
									СуммыВРеглВалюте = Новый Структура();
									СуммыВРеглВалюте.Вставить("ЦенаВРеглВалюте", Строка(Формат(Данные.Цена, "ЧДЦ=2; ЧВН=")) + " (" + ВалютаРегламентированногоУчета + ")");
									СуммыВРеглВалюте.Вставить("СтоимостьВРеглВалюте", Данные.Стоимость);
									СуммыВРеглВалюте.Вставить("СуммаНДСВРеглВалюте", Данные.СуммаНДС);
									СуммыВРеглВалюте.Вставить("СуммаНСПВРеглВалюте", Данные.СуммаНСП);
									СуммыВРеглВалюте.Вставить("ВсегоВРеглВалюте", Данные.Всего);
									ОбластьМакета.Параметры.Заполнить(СуммыВРеглВалюте);
								Иначе
									КодТНВЭД = ?(ЗначениеЗаполнено(Данные.КодТНВЭД), Данные.КодТНВЭД, "0000");
									ДанныеПечатиСтроки.КодТовара1 = Сред(КодТНВЭД,1,1);
									ДанныеПечатиСтроки.КодТовара2 = Сред(КодТНВЭД,2,1);
									ДанныеПечатиСтроки.КодТовара3 = Сред(КодТНВЭД,3,1);
									ДанныеПечатиСтроки.КодТовара4 = Сред(КодТНВЭД,4,1);
									
									РассчитатьСуммыСчетФактуры(Данные, ДанныеДокумента, ДанныеПечати, ДанныеУчетнойПолитики,, НЕ ЕстьСкидка);	
										
									ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
									ОбластьМакета.Параметры.Заполнить(Данные);
									ОбластьМакета.Параметры.Заполнить(ДанныеПечатиСтроки);
									
									Если Шапка.ВыводитьКомментарийВНаименование Тогда
										СтруктураНоменклатура.НоменклатураПредставление = СтрШаблон(НСтр("ru = '%1, %2'"),
											Данные.НоменклатураПредставление,
											Шапка.Комментарий);
											
										ОбластьМакета.Параметры.Заполнить(СтруктураНоменклатура);
									КонецЕсли;
									
									// Заполнение ставки НСП
									ОбластьМакета.Параметры.Заполнить(Новый Структура("СтавкаНСП", ?(ЗначениеЗаполнено(ЗначениеСтавкиНСП), Строка(ЗначениеСтавкиНСП) + "%","")));
								КонецЕсли;	
									
								ТабличныйДокумент.Вывести(ОбластьМакета);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
				Иначе
					Для Каждого СтрокаТаблицы Из ПересчитаннаяТаблица Цикл 
						КодТНВЭД = ?(ЗначениеЗаполнено(СтрокаТаблицы.КодТНВЭД), СтрокаТаблицы.КодТНВЭД, "0000");
						ДанныеПечатиСтроки.КодТовара1 = Сред(КодТНВЭД,1,1);
						ДанныеПечатиСтроки.КодТовара2 = Сред(КодТНВЭД,2,1);
						ДанныеПечатиСтроки.КодТовара3 = Сред(КодТНВЭД,3,1);
						ДанныеПечатиСтроки.КодТовара4 = Сред(КодТНВЭД,4,1);
						
						ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
						ОбластьМакета.Параметры.Заполнить(ДанныеПечатиСтроки);
						
						ЗначениеСтавкиНСП = ?(ПлательщикНСП, 
								УчетНДС.ПолучитьСтавкуНСП(Шапка.Дата, Шапка.Организация, СтрокаТаблицы.СтавкаНСП), 
								Справочники.СтавкиНСП.ПустаяСсылка());
			
						ДанныеДокумента.СтавкаНСП = ЗначениеСтавкиНСП;
							
						РассчитатьСуммыСчетФактуры(СтрокаТаблицы, ДанныеДокумента, ДанныеПечати, ДанныеУчетнойПолитики,, НЕ ЕстьСкидка);
							
						ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
						
						Если Шапка.ВыводитьКомментарийВНаименование Тогда
							СтруктураНоменклатура.НоменклатураПредставление = СтрШаблон(НСтр("ru = '%1, %2'"),
								СтрокаТаблицы.НоменклатураПредставление,
								Шапка.Комментарий);
								
							ОбластьМакета.Параметры.Заполнить(СтруктураНоменклатура);
						КонецЕсли;
						
						ОбластьМакета.Параметры.Заполнить(Новый Структура("СтавкаНСП", ?(ЗначениеЗаполнено(ЗначениеСтавкиНСП), Строка(ЗначениеСтавкиНСП) + "%","")));
						
						ТабличныйДокумент.Вывести(ОбластьМакета);
					КонецЦикла;
				КонецЕсли;
						
				// Добавление пустых строк
				Если КоличествоСтрокСчетаФактуры > КоличествоСтрок Тогда 
					Для Счетчик = 1 По КоличествоСтрокСчетаФактуры - КоличествоСтрок Цикл
						ОбластьМакета.Параметры.Заполнить(ДанныеПечатиПустаяСтрока);
						ТабличныйДокумент.Вывести(ОбластьМакета);		
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;	
КонецФункции

// Функция формирует табличный документ с печатной формой Счет-фактура
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьСчетФактура007_008_009_010(МассивОбъектов, ОбъектыПечати, НомерСФ)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;		
	ТабличныйДокумент.КлючПараметровПечати = "РеализацияТоваровУслуг_СчетФактура";
	
	Если НомерСФ = "007" Тогда	
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;	
		Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьСчетФактура.ПФ_MXL_СчетФактура007");
		
	ИначеЕсли НомерСФ = "008" Тогда
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьСчетФактура.ПФ_MXL_СчетФактура008");
		
	ИначеЕсли НомерСФ = "009" Тогда
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьСчетФактура.ПФ_MXL_СчетФактура009");
		
	Иначе
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьСчетФактура.ПФ_MXL_СчетФактура010");
	КонецЕсли;	
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	СведенияОбЭСФ.Дата КАК Дата,
		|	СведенияОбЭСФ.ДатаПоставки КАК ДатаПоставки,
		|	СведенияОбЭСФ.НомерЭСФ КАК НомерЭСФ,
		|	СведенияОбЭСФ.НомерКорректируемогоЭСФ КАК НомерКорректируемогоЭСФ,
		|	СведенияОбЭСФ.КодСпособаОтправки КАК КодСпособаОтправки,
		|	СведенияОбЭСФ.ДокументОснование КАК ДокументОснование
		|ПОМЕСТИТЬ ВременнаяТаблицаСведенияОбЭСФ
		|ИЗ
		|	РегистрСведений.СведенияОбЭСФ КАК СведенияОбЭСФ
		|ГДЕ
		|	СведенияОбЭСФ.ДокументОснование В(&СписокДокументов)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
		|	РеализацияТоваровУслуг.Номер КАК Номер,
		|	РеализацияТоваровУслуг.Дата КАК Дата,
		|	РеализацияТоваровУслуг.ВалютаДокумента.Код КАК КодВалюты,
		|	РеализацияТоваровУслуг.Курс КАК Курс,
		|	РеализацияТоваровУслуг.БезвозмезднаяПоставка КАК БезвозмезднаяПоставка,
		|	РеализацияТоваровУслуг.ЭкспортнаяПоставка КАК ЭкспортнаяПоставка,
		|	РеализацияТоваровУслуг.КодПоставкиНДС.Код КАК КодПоставкиНДС,
		|	РеализацияТоваровУслуг.Организация КАК Организация,
		|	РеализацияТоваровУслуг.БанковскийСчет.НомерСчета КАК НомерБанковскогоСчетаОрганизации,
		|	РеализацияТоваровУслуг.БанковскийСчет.Банк.Код КАК БикБанкаОрганизации,
		|	РеализацияТоваровУслуг.БанковскийСчет.Банк.Наименование КАК НаименованиеБанкаОрганизации,
		|	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
		|	РеализацияТоваровУслуг.БезналичныйРасчет КАК БезналичныйРасчет,
		|	РеализацияТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
		|	РеализацияТоваровУслуг.ДоговорКонтрагента.НомерДоговора КАК НомерДоговора,
		|	РеализацияТоваровУслуг.ДоговорКонтрагента.ДатаДоговора КАК ДатаДоговора,
		|	ЕСТЬNULL(ВременнаяТаблицаСведенияОбЭСФ.НомерЭСФ, НЕОПРЕДЕЛЕНО) КАК НомерБланкаСФ,
		|	ЕСТЬNULL(ВременнаяТаблицаСведенияОбЭСФ.НомерКорректируемогоЭСФ, НЕОПРЕДЕЛЕНО) КАК НомерБланкаСФКор,
		|	ЕСТЬNULL(ВременнаяТаблицаСведенияОбЭСФ.КодСпособаОтправки, НЕОПРЕДЕЛЕНО) КАК КодСпособаОтправки,
		//|	ЕСТЬNULL(ВременнаяТаблицаСведенияОбЭСФ.Дата, ДАТАВРЕМЯ(1,1,1)) КАК Дата,
		|	ЕСТЬNULL(ВременнаяТаблицаСведенияОбЭСФ.ДатаПоставки, ДАТАВРЕМЯ(1,1,1)) КАК ДатаПоставки,
		|	РеализацияТоваровУслуг.Товары.(
		|		Номенклатура.КодТНВЭД КАК КодТовара,
		|		Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
		|		Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		Цена КАК Цена,
		|		Количество КАК Количество,
		|		Всего - СуммаНДС - СуммаНСП КАК Стоимость,
		|		СуммаНДС КАК СуммаНДС,
		|		СуммаНСП КАК СуммаНСП,
		|		СтавкаНСП КАК СтавкаНСП,
		|		Всего КАК Всего
		|	) КАК Товары,
		|	РеализацияТоваровУслуг.Услуги.(
		|		Номенклатура.КодГКЭД КАК КодТовара,
		|		Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
		|		Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		Цена КАК Цена,
		|		Количество КАК Количество,
		//|		Всего - СуммаНДС - СуммаНСП КАК Стоимость,
		//|		СуммаНДС КАК СуммаНДС,
		//|		СуммаНСП КАК СуммаНСП,
		//|		Всего КАК Всего
		|		ВсегоВВалютеРеглУчета - СуммаНДСВВалютеРеглУчета - СуммаНСПВВалютеРеглУчета КАК Стоимость,
		|		СуммаНДСВВалютеРеглУчета КАК СуммаНДС,
		|		СуммаНСПВВалютеРеглУчета КАК СуммаНСП,
		|		СтавкаНСП КАК СтавкаНСП,
		|		ВсегоВВалютеРеглУчета КАК Всего
		|	) КАК Услуги,
		|	РеализацияТоваровУслуг.ОС.(
		|		НЕОПРЕДЕЛЕНО КАК КодТовара,
		|		ОсновноеСредство.НаименованиеПолное КАК НоменклатураПредставление,
		|		НЕОПРЕДЕЛЕНО КАК ЕдиницаИзмерения,
		|		Всего КАК Цена,
		|		1 КАК Количество,
		|		Всего - СуммаНДС - СуммаНСП КАК Стоимость,
		|		СуммаНДС КАК СуммаНДС,
		|		СуммаНСП КАК СуммаНСП,
		|		СтавкаНСП КАК СтавкаНСП,
		|		Всего КАК Всего
		|	) КАК ОС
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСведенияОбЭСФ КАК ВременнаяТаблицаСведенияОбЭСФ
		|		ПО РеализацияТоваровУслуг.Ссылка = ВременнаяТаблицаСведенияОбЭСФ.ДокументОснование
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка В(&СписокДокументов)";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокДокументов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	Пока Шапка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
	
		ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(Шапка.Дата, Шапка.Организация);
		ПлательщикНДС = ДанныеУчетнойПолитики.ПлательщикНДС;
		ПлательщикНСП = ДанныеУчетнойПолитики.ПлательщикНСП;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		КоличествоЛистов = КоличествоЛистовСчетФатуры(Макет, Шапка, НомерСФ);		
		КоличествоЛистовСтрокой = Формат(КоличествоЛистов, "ЧГ=0");
		
		// Подготовка данных
		ДанныеПечати = Новый Структура;
		
		Если КоличествоЛистов < 10 Тогда
			ДанныеПечати.Вставить("Лист1", "");
			ДанныеПечати.Вставить("Лист2", "");
			ДанныеПечати.Вставить("Лист3", КоличествоЛистовСтрокой);
		ИначеЕсли КоличествоЛистов < 100 Тогда
			ДанныеПечати.Вставить("Лист1", "");
			ДанныеПечати.Вставить("Лист2", Сред(КоличествоЛистовСтрокой, 1, 1));
			ДанныеПечати.Вставить("Лист3", Сред(КоличествоЛистовСтрокой, 2, 1));
		Иначе
			ДанныеПечати.Вставить("Лист1", Сред(КоличествоЛистовСтрокой, 1, 1));
			ДанныеПечати.Вставить("Лист2", Сред(КоличествоЛистовСтрокой, 2, 1));
			ДанныеПечати.Вставить("Лист3", Сред(КоличествоЛистовСтрокой, 3, 1));
		КонецЕсли;	
		
		ДанныеПечати.Вставить("НомерБланкаСФ", ?(ПлательщикНДС ИЛИ ЗначениеЗаполнено(Шапка.НомерБланкаСФ), Шапка.НомерБланкаСФ, ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер)));
		ДанныеПечати.Вставить("ВидПоставки", Шапка.КодПоставкиНДС);
		ДанныеПечати.Вставить("ТипПоставки", ?(Шапка.ЭкспортнаяПоставка, "Экспорт", "Внутренняя"));
		
		Если Шапка.БезвозмезднаяПоставка Тогда
			ДанныеПечати.Вставить("ВидПлатежа", НСтр("ru = 'Безвозмездная поставка'"));
		Иначе	
			ДанныеПечати.Вставить("ВидПлатежа", ?(Шапка.БезналичныйРасчет, "Безналичная", "Наличная"));
		КонецЕсли;	
		
		ДанныеПечати.Вставить("КодВалюты", Шапка.КодВалюты);
		ДанныеПечати.Вставить("КурсВалюты", Формат(Шапка.Курс, "ЧЦ=15; ЧДЦ=4"));
		
		Если ЗначениеЗаполнено(Шапка.ДатаПоставки) Тогда
			ДанныеПечати.Вставить("ДатаПоставки1", Сред(Шапка.ДатаПоставки,1,1));
			ДанныеПечати.Вставить("ДатаПоставки2", Сред(Шапка.ДатаПоставки,2,1));
			ДанныеПечати.Вставить("ДатаПоставки3", Сред(Шапка.ДатаПоставки,4,1));
			ДанныеПечати.Вставить("ДатаПоставки4", Сред(Шапка.ДатаПоставки,5,1));
			ДанныеПечати.Вставить("ДатаПоставки5", Сред(Шапка.ДатаПоставки,7,1));
			ДанныеПечати.Вставить("ДатаПоставки6", Сред(Шапка.ДатаПоставки,8,1));
			ДанныеПечати.Вставить("ДатаПоставки7", Сред(Шапка.ДатаПоставки,9,1));
			ДанныеПечати.Вставить("ДатаПоставки8", Сред(Шапка.ДатаПоставки,10,1));
		КонецЕсли;
		
		ДанныеПечати.Вставить("НомерДоговора", Шапка.НомерДоговора);
		
		Если ЗначениеЗаполнено(Шапка.ДатаДоговора) Тогда
			ДанныеПечати.Вставить("ДатаДоговора1", Сред(Шапка.ДатаДоговора,1,1));
			ДанныеПечати.Вставить("ДатаДоговора2", Сред(Шапка.ДатаДоговора,2,1));
			ДанныеПечати.Вставить("ДатаДоговора3", Сред(Шапка.ДатаДоговора,4,1));
			ДанныеПечати.Вставить("ДатаДоговора4", Сред(Шапка.ДатаДоговора,5,1));
			ДанныеПечати.Вставить("ДатаДоговора5", Сред(Шапка.ДатаДоговора,7,1));
			ДанныеПечати.Вставить("ДатаДоговора6", Сред(Шапка.ДатаДоговора,8,1));
			ДанныеПечати.Вставить("ДатаДоговора7", Сред(Шапка.ДатаДоговора,9,1));
			ДанныеПечати.Вставить("ДатаДоговора8", Сред(Шапка.ДатаДоговора,10,1));
		КонецЕсли;
		
		ДанныеПечати.Вставить("БанкПоставщика", Шапка.НаименованиеБанкаОрганизации);		

		СведенияОбОрганизации = БухгалтерскийУчетСервер.ПолучитьСведенияОбОрганизации(Шапка.Организация, Шапка.Дата);
		
		ИНН 					= СведенияОбОрганизации.ИНН;
	    ГНС 					= СведенияОбОрганизации.ГНС;
	    КодГНС 					= СведенияОбОрганизации.ГНСКод;		
		ПредставлениеПоставщика = СведенияОбОрганизации.НаименованиеПолное;
		            
		Если ЗначениеЗаполнено(Шапка.Дата) Тогда
			ДанныеПечати.Вставить("Дата1", Сред(Шапка.Дата,1,1));
			ДанныеПечати.Вставить("Дата2", Сред(Шапка.Дата,2,1));
			ДанныеПечати.Вставить("Дата3", Сред(Шапка.Дата,4,1));
			ДанныеПечати.Вставить("Дата4", Сред(Шапка.Дата,5,1));
			ДанныеПечати.Вставить("Дата5", Сред(Шапка.Дата,7,1));
			ДанныеПечати.Вставить("Дата6", Сред(Шапка.Дата,8,1));
			ДанныеПечати.Вставить("Дата7", Сред(Шапка.Дата,9,1));
			ДанныеПечати.Вставить("Дата8", Сред(Шапка.Дата,10,1));
		КонецЕсли;
		
		ДанныеПечати.Вставить("ИННПост1", Сред(ИНН,1,1));
		ДанныеПечати.Вставить("ИННПост2", Сред(ИНН,2,1));
		ДанныеПечати.Вставить("ИННПост3", Сред(ИНН,3,1));
		ДанныеПечати.Вставить("ИННПост4", Сред(ИНН,4,1));
		ДанныеПечати.Вставить("ИННПост5", Сред(ИНН,5,1));
		ДанныеПечати.Вставить("ИННПост6", Сред(ИНН,6,1));
		ДанныеПечати.Вставить("ИННПост7", Сред(ИНН,7,1));
		ДанныеПечати.Вставить("ИННПост8", Сред(ИНН,8,1));
		ДанныеПечати.Вставить("ИННПост9", Сред(ИНН,9,1));
		ДанныеПечати.Вставить("ИННПост10", Сред(ИНН,10,1));
		ДанныеПечати.Вставить("ИННПост11", Сред(ИНН,11,1));
		ДанныеПечати.Вставить("ИННПост12", Сред(ИНН,12,1));
		ДанныеПечати.Вставить("ИННПост13", Сред(ИНН,13,1));
		ДанныеПечати.Вставить("ИННПост14", Сред(ИНН,14,1));

        БИК = Шапка.БикБанкаОрганизации;
		ДанныеПечати.Вставить("КодБанкаПоставщика1", Сред(БИК,1,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика2", Сред(БИК,2,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика3", Сред(БИК,3,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика4", Сред(БИК,4,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика5", Сред(БИК,5,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика6", Сред(БИК,6,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика7", Сред(БИК,7,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика8", Сред(БИК,8,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика9", Сред(БИК,9,1));		
		
		НомерСчета = Шапка.НомерБанковскогоСчетаОрганизации;
		ДанныеПечати.Вставить("СчетПоставщика1", Сред(НомерСчета,1,1));		
		ДанныеПечати.Вставить("СчетПоставщика2", Сред(НомерСчета,2,1));		
		ДанныеПечати.Вставить("СчетПоставщика3", Сред(НомерСчета,3,1));		
		ДанныеПечати.Вставить("СчетПоставщика4", Сред(НомерСчета,4,1));		
		ДанныеПечати.Вставить("СчетПоставщика5", Сред(НомерСчета,5,1));		
		ДанныеПечати.Вставить("СчетПоставщика6", Сред(НомерСчета,6,1));		
		ДанныеПечати.Вставить("СчетПоставщика7", Сред(НомерСчета,7,1));		
		ДанныеПечати.Вставить("СчетПоставщика8", Сред(НомерСчета,8,1));		
		ДанныеПечати.Вставить("СчетПоставщика9", Сред(НомерСчета,9,1));		
		ДанныеПечати.Вставить("СчетПоставщика10", Сред(НомерСчета,10,1));		
		ДанныеПечати.Вставить("СчетПоставщика11", Сред(НомерСчета,11,1));		
		ДанныеПечати.Вставить("СчетПоставщика12", Сред(НомерСчета,12,1));		
		ДанныеПечати.Вставить("СчетПоставщика13", Сред(НомерСчета,13,1));		
		ДанныеПечати.Вставить("СчетПоставщика14", Сред(НомерСчета,14,1));		
		ДанныеПечати.Вставить("СчетПоставщика15", Сред(НомерСчета,15,1));		
		ДанныеПечати.Вставить("СчетПоставщика16", Сред(НомерСчета,16,1));		
		
		ДанныеПечати.Вставить("ГНСПоставщика1", Сред(КодГНС,1,1));		
		ДанныеПечати.Вставить("ГНСПоставщика2", Сред(КодГНС,2,1));		
		ДанныеПечати.Вставить("ГНСПоставщика3", Сред(КодГНС,3,1));		

		ДанныеПечати.Вставить("НаименованиеГНСПоставщика", ГНС);		
		ДанныеПечати.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);		
		
		АдресПоставщика = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ШАпка.Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Шапка.Дата); 
		ДанныеПечати.Вставить("АдресПоставщика", АдресПоставщика);		

		// Данные по контрагенту
		СведенияОКонтрагенте = БухгалтерскийУчетСервер.ПолучитьСведенияОКонтрагенте(Шапка.Контрагент);
		
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.ГоловнойКонтрагент) Тогда 
			
			ДанныеПечати.Вставить("ПредставлениеПокупателя", СведенияОКонтрагенте.ГоловнойКонтрагентНаименованиеПолное);
			
			ИННКонтрагента = СведенияОКонтрагенте.ГоловнойКонтрагентИНН;
			ДанныеПечати.Вставить("ИННПокупателя1", Сред(ИННКонтрагента,1,1));		
			ДанныеПечати.Вставить("ИННПокупателя2", Сред(ИННКонтрагента,2,1));		
			ДанныеПечати.Вставить("ИННПокупателя3", Сред(ИННКонтрагента,3,1));		
			ДанныеПечати.Вставить("ИННПокупателя4", Сред(ИННКонтрагента,4,1));		
			ДанныеПечати.Вставить("ИННПокупателя5", Сред(ИННКонтрагента,5,1));		
			ДанныеПечати.Вставить("ИННПокупателя6", Сред(ИННКонтрагента,6,1));		
			ДанныеПечати.Вставить("ИННПокупателя7", Сред(ИННКонтрагента,7,1));		
			ДанныеПечати.Вставить("ИННПокупателя8", Сред(ИННКонтрагента,8,1));		
			ДанныеПечати.Вставить("ИННПокупателя9", Сред(ИННКонтрагента,9,1));		
			ДанныеПечати.Вставить("ИННПокупателя10", Сред(ИННКонтрагента,10,1));		
			ДанныеПечати.Вставить("ИННПокупателя11", Сред(ИННКонтрагента,11,1));		
			ДанныеПечати.Вставить("ИННПокупателя12", Сред(ИННКонтрагента,12,1));		
			ДанныеПечати.Вставить("ИННПокупателя13", Сред(ИННКонтрагента,13,1));		
			ДанныеПечати.Вставить("ИННПокупателя14", Сред(ИННКонтрагента,14,1));
			
			ДанныеПечати.Вставить("ПредставлениеФилиалаПокупателя", СведенияОКонтрагенте.НаименованиеПолное);
			
			ИННКонтрагента = СведенияОКонтрагенте.ИНН;
			ДанныеПечати.Вставить("ИННФилиалПокупателя1", Сред(ИННКонтрагента,1,1));		
			ДанныеПечати.Вставить("ИННФилиалПокупателя2", Сред(ИННКонтрагента,2,1));		
			ДанныеПечати.Вставить("ИННФилиалПокупателя3", Сред(ИННКонтрагента,3,1));		
			ДанныеПечати.Вставить("ИННФилиалПокупателя4", Сред(ИННКонтрагента,4,1));		
			ДанныеПечати.Вставить("ИННФилиалПокупателя5", Сред(ИННКонтрагента,5,1));		
			ДанныеПечати.Вставить("ИННФилиалПокупателя6", Сред(ИННКонтрагента,6,1));		
			ДанныеПечати.Вставить("ИННФилиалПокупателя7", Сред(ИННКонтрагента,7,1));		
			ДанныеПечати.Вставить("ИННФилиалПокупателя8", Сред(ИННКонтрагента,8,1));		
			ДанныеПечати.Вставить("ИННФилиалПокупателя9", Сред(ИННКонтрагента,9,1));		
			ДанныеПечати.Вставить("ИННФилиалПокупателя10", Сред(ИННКонтрагента,10,1));		
			ДанныеПечати.Вставить("ИННФилиалПокупателя11", Сред(ИННКонтрагента,11,1));		
			ДанныеПечати.Вставить("ИННФилиалПокупателя12", Сред(ИННКонтрагента,12,1));		
			ДанныеПечати.Вставить("ИННФилиалПокупателя13", Сред(ИННКонтрагента,13,1));		
			ДанныеПечати.Вставить("ИННФилиалПокупателя14", Сред(ИННКонтрагента,14,1));
			
		Иначе 
			
			ДанныеПечати.Вставить("ПредставлениеПокупателя", СведенияОКонтрагенте.НаименованиеПолное);
			
			ИННКонтрагента = СведенияОКонтрагенте.ИНН;
			ДанныеПечати.Вставить("ИННПокупателя1", Сред(ИННКонтрагента,1,1));		
			ДанныеПечати.Вставить("ИННПокупателя2", Сред(ИННКонтрагента,2,1));		
			ДанныеПечати.Вставить("ИННПокупателя3", Сред(ИННКонтрагента,3,1));		
			ДанныеПечати.Вставить("ИННПокупателя4", Сред(ИННКонтрагента,4,1));		
			ДанныеПечати.Вставить("ИННПокупателя5", Сред(ИННКонтрагента,5,1));		
			ДанныеПечати.Вставить("ИННПокупателя6", Сред(ИННКонтрагента,6,1));		
			ДанныеПечати.Вставить("ИННПокупателя7", Сред(ИННКонтрагента,7,1));		
			ДанныеПечати.Вставить("ИННПокупателя8", Сред(ИННКонтрагента,8,1));		
			ДанныеПечати.Вставить("ИННПокупателя9", Сред(ИННКонтрагента,9,1));		
			ДанныеПечати.Вставить("ИННПокупателя10", Сред(ИННКонтрагента,10,1));		
			ДанныеПечати.Вставить("ИННПокупателя11", Сред(ИННКонтрагента,11,1));		
			ДанныеПечати.Вставить("ИННПокупателя12", Сред(ИННКонтрагента,12,1));		
			ДанныеПечати.Вставить("ИННПокупателя13", Сред(ИННКонтрагента,13,1));		
			ДанныеПечати.Вставить("ИННПокупателя14", Сред(ИННКонтрагента,14,1));		
		КонецЕсли;		
		
		ВыводДопИнформацииПоКонтрагенту = БухгалтерскийУчетСервер.ПолучитьПризнакПатентаПоКонтрагенту(Шапка.Контрагент) ИЛИ
			(Шапка.Контрагент.СтранаРезидентства = Справочники.СтраныМира.Киргизия ИЛИ Шапка.Контрагент.СтранаРезидентства.УчастникЕАЭС);
		
		Если ВыводДопИнформацииПоКонтрагенту Тогда
			Если Шапка.Контрагент.ПризнакСтраны = Перечисления.ПризнакиСтраны.ЕАЭС Тогда
				ДанныеПечати.Вставить("НаименованиеГНСПокупателя", Шапка.Контрагент.СтранаРезидентства.Наименование);
				КодГНСКонтрагента = Шапка.Контрагент.СтранаРезидентства.Код;
				ДанныеПечати.Вставить("ГНСПокупателя1", Сред(КодГНСКонтрагента,1,1));		
				ДанныеПечати.Вставить("ГНСПокупателя2", Сред(КодГНСКонтрагента,2,1));		
				ДанныеПечати.Вставить("ГНСПокупателя3", Сред(КодГНСКонтрагента,3,1));	
			Иначе
				ДанныеПечати.Вставить("НаименованиеГНСПокупателя", СведенияОКонтрагенте.ГНСНаименование);
				КодГНСКонтрагента = СведенияОКонтрагенте.ГНСКод;
				ДанныеПечати.Вставить("ГНСПокупателя1", Сред(КодГНСКонтрагента,1,1));		
				ДанныеПечати.Вставить("ГНСПокупателя2", Сред(КодГНСКонтрагента,2,1));		
				ДанныеПечати.Вставить("ГНСПокупателя3", Сред(КодГНСКонтрагента,3,1));	
			КонецЕсли;	
		Иначе
			ДанныеПечати.Вставить("НаименованиеГНСПокупателя", "отсутствует");
		КонецЕсли;
		
		ДанныеПечати.Вставить("АдресПокупателя", СведенияОКонтрагенте.АдрЮР);		
		
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.НомерСчета) И ВыводДопИнформацииПоКонтрагенту Тогда 
			НомерСчетаКонтрагента = СведенияОКонтрагенте.НомерСчета;
			ДанныеПечати.Вставить("СчетПокупателя1", Сред(НомерСчетаКонтрагента,1,1));		
			ДанныеПечати.Вставить("СчетПокупателя2", Сред(НомерСчетаКонтрагента,2,1));		
			ДанныеПечати.Вставить("СчетПокупателя3", Сред(НомерСчетаКонтрагента,3,1));		
			ДанныеПечати.Вставить("СчетПокупателя4", Сред(НомерСчетаКонтрагента,4,1));		
			ДанныеПечати.Вставить("СчетПокупателя5", Сред(НомерСчетаКонтрагента,5,1));		
			ДанныеПечати.Вставить("СчетПокупателя6", Сред(НомерСчетаКонтрагента,6,1));		
			ДанныеПечати.Вставить("СчетПокупателя7", Сред(НомерСчетаКонтрагента,7,1));		
			ДанныеПечати.Вставить("СчетПокупателя8", Сред(НомерСчетаКонтрагента,8,1));		
			ДанныеПечати.Вставить("СчетПокупателя9", Сред(НомерСчетаКонтрагента,9,1));		
			ДанныеПечати.Вставить("СчетПокупателя10", Сред(НомерСчетаКонтрагента,10,1));		
			ДанныеПечати.Вставить("СчетПокупателя11", Сред(НомерСчетаКонтрагента,11,1));		
			ДанныеПечати.Вставить("СчетПокупателя12", Сред(НомерСчетаКонтрагента,12,1));		
			ДанныеПечати.Вставить("СчетПокупателя13", Сред(НомерСчетаКонтрагента,13,1));		
			ДанныеПечати.Вставить("СчетПокупателя14", Сред(НомерСчетаКонтрагента,14,1));
			ДанныеПечати.Вставить("СчетПокупателя15", Сред(НомерСчетаКонтрагента,15,1));		
			ДанныеПечати.Вставить("СчетПокупателя16", Сред(НомерСчетаКонтрагента,16,1));
			
			БикБанкаКонтрагента = СведенияОКонтрагенте.БИКБанка;
			ДанныеПечати.Вставить("КодБанкаПокупателя1", Сред(БикБанкаКонтрагента,1,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя2", Сред(БикБанкаКонтрагента,2,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя3", Сред(БикБанкаКонтрагента,3,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя4", Сред(БикБанкаКонтрагента,4,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя5", Сред(БикБанкаКонтрагента,5,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя6", Сред(БикБанкаКонтрагента,6,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя7", Сред(БикБанкаКонтрагента,7,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя8", Сред(БикБанкаКонтрагента,8,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя9", Сред(БикБанкаКонтрагента,9,1));		
			
			ДанныеПечати.Вставить("БанкПокупателя", СведенияОКонтрагенте.Банк);
		КонецЕсли;	
				
		Руководители = БухгалтерскийУчетСервер.ОтветственныеЛицаОрганизацийРуководители(Шапка.Организация, Шапка.Дата);
		ДанныеПечати.Вставить("Руководитель", Руководители.Руководитель);
		ДанныеПечати.Вставить("ГлавныйБухгалтер", Руководители.ГлавныйБухгалтер);
		
		// Ставки
		ЗначениеСтавкиНДС = УчетНДС.ПолучитьСтавкуНДС(Шапка.Дата, Шапка.СтавкаНДС);
		
		ДанныеПечати.Вставить("СтавкаНДС", ЗначениеСтавкиНДС);
		ДанныеПечати.Вставить("СтавкаНСП", 0);
		ДанныеПечати.Вставить("НомерСтроки", 1);
		
		ДанныеПечати.Вставить("СтоимостьПоЛисту", 		 0);
		ДанныеПечати.Вставить("СуммаНДСПоЛисту", 		 0);
		ДанныеПечати.Вставить("СуммаНСППоЛисту", 		 0);
		ДанныеПечати.Вставить("ВсегоПоЛисту", 			 0);
		ДанныеПечати.Вставить("СтоимостьПоСчетуФактуре", 0);
		ДанныеПечати.Вставить("СуммаНДСПоСчетуФактуре",  0);
		ДанныеПечати.Вставить("СуммаНСППоСчетуФактуре",  0);
		ДанныеПечати.Вставить("ВсегоПоСчетуФактуре", 	 0);
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьШапка.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Вывести(ОбластьШапка);	
		
		ОбластьЗаголовокТекущегоЛиста 			= Макет.ПолучитьОбласть("ЗаголовокТекущегоЛиста");
		ОбластьЗаголовокЗаключительногоЛиста 	= Макет.ПолучитьОбласть("ЗаголовокЗаключительногоЛиста");
		ОбластьШапкаТаблицы 					= Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтрокаТаблицы 					= Макет.ПолучитьОбласть("СтрокаТаблицы");
		ОбластьИтогиПервогоЛиста 				= Макет.ПолучитьОбласть("ИтогиПервогоЛиста");
		ОбластьИтогиТекущегоЛиста 				= Макет.ПолучитьОбласть("ИтогиТекущегоЛиста");
		ОбластьИтогиПоСчетуФактуре 				= Макет.ПолучитьОбласть("ИтогиПоСчетуФактуре");
		ОбластьПодвал 							= Макет.ПолучитьОбласть("Подвал");
		
		Если НомерСФ = "009" ИЛИ НомерСФ = "010" Тогда
			ОбластьПодвалПервыйЛист = Макет.ПолучитьОбласть("ПодвалПервыйЛист");
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		ДанныеКодТовара = Новый Структура();
		ДанныеКодТовара.Вставить("КодТовара1", "");
		ДанныеКодТовара.Вставить("КодТовара2", "");
		ДанныеКодТовара.Вставить("КодТовара3", "");
		ДанныеКодТовара.Вставить("КодТовара4", "");
		ДанныеКодТовара.Вставить("КодТовара5", "");
		ДанныеКодТовара.Вставить("КодТовара6", "");
		ДанныеКодТовара.Вставить("КодТовара7", "");
		ДанныеКодТовара.Вставить("КодТовара8", "");
		ДанныеКодТовара.Вставить("КодТовара9", "");
		ДанныеКодТовара.Вставить("КодТовара10", "");
		
		// Номер листа 2, потому что на первом листе печатается титульная страница и указывается общее число листов.
		НомерЛиста = 2;
		
		МассивОбластей = Новый Массив();
		МассивОбластей.Добавить(ОбластьИтогиПервогоЛиста);
		
		Если НомерСФ = "009" ИЛИ НомерСФ = "010" Тогда
			МассивОбластей.Добавить(ОбластьПодвалПервыйЛист);
		Иначе	
			МассивОбластей.Добавить(ОбластьПодвал);	
		КонецЕсли;
		
		Если НомерСФ = "007" ИЛИ НомерСФ = "009" Тогда
			ИменаТабличныхЧастей = Новый Массив();
			ИменаТабличныхЧастей.Добавить("Товары");
			ИменаТабличныхЧастей.Добавить("ОС");
			
			Для Каждого ИмяТабличнойЧасти Из ИменаТабличныхЧастей Цикл
				
				Выборка = Шапка[ИмяТабличнойЧасти].Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					ЗначениеСтавкиНСП = ?(ПлательщикНСП И Не Шапка.БезналичныйРасчет, 
						УчетНДС.ПолучитьСтавкуНСП(Шапка.Дата, Шапка.Организация, Выборка.СтавкаНСП), 
						Справочники.СтавкиНСП.ПустаяСсылка());
					
					ДанныеПечати.СтавкаНСП = ЗначениеСтавкиНСП;

					ОбластьСтрокаТаблицы.Параметры.Заполнить(Выборка);
					ОбластьСтрокаТаблицы.Параметры.Заполнить(ДанныеПечати);
					
					Если ЗначениеЗаполнено(Выборка.КодТовара) Тогда
						ДанныеКодТовара.КодТовара1 	= Сред(Выборка.КодТовара,1,1);
						ДанныеКодТовара.КодТовара2 	= Сред(Выборка.КодТовара,2,1);
						ДанныеКодТовара.КодТовара3 	= Сред(Выборка.КодТовара,3,1);
						ДанныеКодТовара.КодТовара4 	= Сред(Выборка.КодТовара,4,1);
						ДанныеКодТовара.КодТовара5 	= Сред(Выборка.КодТовара,5,1);
						ДанныеКодТовара.КодТовара6 	= Сред(Выборка.КодТовара,6,1);
						ДанныеКодТовара.КодТовара7 	= Сред(Выборка.КодТовара,7,1);
						ДанныеКодТовара.КодТовара8 	= Сред(Выборка.КодТовара,8,1);
						ДанныеКодТовара.КодТовара9 	= Сред(Выборка.КодТовара,9,1);
						ДанныеКодТовара.КодТовара10 = Сред(Выборка.КодТовара,10,1);
					Иначе	
						ДанныеКодТовара.КодТовара1 	= "";
						ДанныеКодТовара.КодТовара2 	= "";
						ДанныеКодТовара.КодТовара3 	= "";
						ДанныеКодТовара.КодТовара4 	= "";
						ДанныеКодТовара.КодТовара5 	= "";
						ДанныеКодТовара.КодТовара6 	= "";
						ДанныеКодТовара.КодТовара7 	= "";
						ДанныеКодТовара.КодТовара8 	= "";
						ДанныеКодТовара.КодТовара9 	= "";
						ДанныеКодТовара.КодТовара10 = "";
					КонецЕсли;
					
					ОбластьСтрокаТаблицы.Параметры.Заполнить(ДанныеКодТовара);
					
					МассивОбластей.Добавить(ОбластьСтрокаТаблицы);
					
					Если ТабличныйДокумент.ПроверитьВывод(МассивОбластей) Тогда			
						ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
						
						ДанныеПечати.СтоимостьПоЛисту 			= ДанныеПечати.СтоимостьПоЛисту + Выборка.Стоимость;
						ДанныеПечати.СуммаНДСПоЛисту 			= ДанныеПечати.СуммаНДСПоЛисту + Выборка.СуммаНДС;
						ДанныеПечати.СуммаНСППоЛисту 			= ДанныеПечати.СуммаНСППоЛисту + Выборка.СуммаНСП;
						ДанныеПечати.ВсегоПоЛисту 				= ДанныеПечати.ВсегоПоЛисту + Выборка.Всего;
						ДанныеПечати.СтоимостьПоСчетуФактуре 	= ДанныеПечати.СтоимостьПоСчетуФактуре + Выборка.Стоимость;
						ДанныеПечати.СуммаНДСПоСчетуФактуре 	= ДанныеПечати.СуммаНДСПоСчетуФактуре + Выборка.СуммаНДС;
						ДанныеПечати.СуммаНСППоСчетуФактуре 	= ДанныеПечати.СуммаНСППоСчетуФактуре + Выборка.СуммаНСП;
						ДанныеПечати.ВсегоПоСчетуФактуре 		= ДанныеПечати.ВсегоПоСчетуФактуре + Выборка.Всего;
						
						МассивОбластей.Удалить(МассивОбластей.Количество() - 1);
						
					Иначе	
						// Заканчивается лист
						// Нумерация листов начинается с 2, поэтому 2 лист это первый лист после титульного
						Если НомерЛиста = 2 Тогда
							ОбластьИтогиПервогоЛиста.Параметры.Заполнить(ДанныеПечати);
							ТабличныйДокумент.Вывести(ОбластьИтогиПервогоЛиста);
							
							Если НомерСФ = "009" Тогда
								ОбластьПодвалПервыйЛист.Параметры.Заполнить(ДанныеПечати);
								ТабличныйДокумент.Вывести(ОбластьПодвалПервыйЛист);
							Иначе
								ОбластьПодвал.Параметры.Заполнить(ДанныеПечати);
								ТабличныйДокумент.Вывести(ОбластьПодвал);
							КонецЕсли;
						Иначе
							ОбластьИтогиТекущегоЛиста.Параметры.Заполнить(ДанныеПечати);
							ТабличныйДокумент.Вывести(ОбластьИтогиТекущегоЛиста);
							
							ОбластьПодвал.Параметры.Заполнить(ДанныеПечати);
							ТабличныйДокумент.Вывести(ОбластьПодвал);
						КонецЕсли;	
						
						ДанныеПечати.СтоимостьПоЛисту 			= 0;
						ДанныеПечати.СуммаНДСПоЛисту 			= 0;
						ДанныеПечати.СуммаНСППоЛисту 			= 0;
						ДанныеПечати.ВсегоПоЛисту 				= 0;
						ДанныеПечати.СтоимостьПоСчетуФактуре 	= ДанныеПечати.СтоимостьПоСчетуФактуре + Выборка.Стоимость;
						ДанныеПечати.СуммаНДСПоСчетуФактуре 	= ДанныеПечати.СуммаНДСПоСчетуФактуре + Выборка.СуммаНДС;
						ДанныеПечати.СуммаНСППоСчетуФактуре 	= ДанныеПечати.СуммаНСППоСчетуФактуре + Выборка.СуммаНСП;
						ДанныеПечати.ВсегоПоСчетуФактуре 		= ДанныеПечати.ВсегоПоСчетуФактуре + Выборка.Всего;
						
						// Начинается новый лист
						НомерЛистаСтрокой = Формат(НомерЛиста, "ЧГ=0");
						
						Если НомерЛиста < 10 Тогда
							ДанныеПечати.Лист1 = "";
							ДанныеПечати.Лист2 = "";
							ДанныеПечати.Лист3 = НомерЛистаСтрокой;
						ИначеЕсли НомерЛиста < 100 Тогда
							ДанныеПечати.Лист1 = "";
							ДанныеПечати.Лист2 = Сред(НомерЛистаСтрокой, 1, 1);
							ДанныеПечати.Лист3 = Сред(НомерЛистаСтрокой, 2, 1);
						Иначе
							ДанныеПечати.Лист1 = Сред(НомерЛистаСтрокой, 1, 1);
							ДанныеПечати.Лист2 = Сред(НомерЛистаСтрокой, 2, 1);
							ДанныеПечати.Лист3 = Сред(НомерЛистаСтрокой, 3, 1);
						КонецЕсли;
						
						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						
						Если НомерЛиста = КоличествоЛистов Тогда
							ОбластьЗаголовокЗаключительногоЛиста.Параметры.Заполнить(ДанныеПечати);
							ТабличныйДокумент.Вывести(ОбластьЗаголовокЗаключительногоЛиста);
						Иначе	
							ОбластьЗаголовокТекущегоЛиста.Параметры.Заполнить(ДанныеПечати);
							ТабличныйДокумент.Вывести(ОбластьЗаголовокТекущегоЛиста);
						КонецЕсли;
						
						ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
						ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
						
						МассивОбластей.Удалить(МассивОбластей.Количество() - 1);
						
						Если НомерСФ = "009" Тогда
							МассивОбластей.Удалить(МассивОбластей.Количество() - 1);	
							МассивОбластей.Добавить(ОбластьПодвал);	
						КонецЕсли;
						
						НомерЛиста = НомерЛиста + 1;
					КонецЕсли;
					
					ДанныеПечати.НомерСтроки = ДанныеПечати.НомерСтроки + 1;
				КонецЦикла;
			КонецЦикла;
			
		Иначе	
			ВыборкаУслуги = Шапка.Услуги.Выбрать();
			
			Пока ВыборкаУслуги.Следующий() Цикл
				
				ЗначениеСтавкиНСП = ?(ПлательщикНСП И Не Шапка.БезналичныйРасчет, 
					УчетНДС.ПолучитьСтавкуНСП(Шапка.Дата, Шапка.Организация, ВыборкаУслуги.СтавкаНСП), 
					Справочники.СтавкиНСП.ПустаяСсылка());
					
				ДанныеПечати.СтавкаНСП = ЗначениеСтавкиНСП;

				ОбластьСтрокаТаблицы.Параметры.Заполнить(ВыборкаУслуги);
				ОбластьСтрокаТаблицы.Параметры.Заполнить(ДанныеПечати);
				
				Если ЗначениеЗаполнено(ВыборкаУслуги.КодТовара) Тогда
					ДанныеКодТовара.КодТовара1 	= Сред(ВыборкаУслуги.КодТовара,1,1);
					ДанныеКодТовара.КодТовара2 	= Сред(ВыборкаУслуги.КодТовара,2,1);
					ДанныеКодТовара.КодТовара3 	= Сред(ВыборкаУслуги.КодТовара,4,1);
					ДанныеКодТовара.КодТовара4 	= Сред(ВыборкаУслуги.КодТовара,5,1);
				Иначе
					ДанныеКодТовара.КодТовара1 	= "";
					ДанныеКодТовара.КодТовара2 	= "";
					ДанныеКодТовара.КодТовара3 	= "";
					ДанныеКодТовара.КодТовара4 	= "";
				КонецЕсли;
				
				ОбластьСтрокаТаблицы.Параметры.Заполнить(ДанныеКодТовара);
				
				МассивОбластей.Добавить(ОбластьСтрокаТаблицы);
				
				Если ТабличныйДокумент.ПроверитьВывод(МассивОбластей) Тогда			
					ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
					
					ДанныеПечати.СтоимостьПоЛисту 			= ДанныеПечати.СтоимостьПоЛисту + ВыборкаУслуги.Стоимость;
					ДанныеПечати.СуммаНДСПоЛисту 			= ДанныеПечати.СуммаНДСПоЛисту + ВыборкаУслуги.СуммаНДС;
					ДанныеПечати.СуммаНСППоЛисту 			= ДанныеПечати.СуммаНСППоЛисту + ВыборкаУслуги.СуммаНСП;
					ДанныеПечати.ВсегоПоЛисту 				= ДанныеПечати.ВсегоПоЛисту + ВыборкаУслуги.Всего;
					ДанныеПечати.СтоимостьПоСчетуФактуре 	= ДанныеПечати.СтоимостьПоСчетуФактуре + ВыборкаУслуги.Стоимость;
					ДанныеПечати.СуммаНДСПоСчетуФактуре 	= ДанныеПечати.СуммаНДСПоСчетуФактуре + ВыборкаУслуги.СуммаНДС;
					ДанныеПечати.СуммаНСППоСчетуФактуре 	= ДанныеПечати.СуммаНСППоСчетуФактуре + ВыборкаУслуги.СуммаНСП;
					ДанныеПечати.ВсегоПоСчетуФактуре 		= ДанныеПечати.ВсегоПоСчетуФактуре + ВыборкаУслуги.Всего;
					
					МассивОбластей.Удалить(МассивОбластей.Количество() - 1);
					
				Иначе	
					// Заканчивается лист
					// Нумерация листов начинается с 2, поэтому 2 лист это первый лист после титульного
					Если НомерЛиста = 2 Тогда
						ОбластьИтогиПервогоЛиста.Параметры.Заполнить(ДанныеПечати);
						ТабличныйДокумент.Вывести(ОбластьИтогиПервогоЛиста);
						
						Если НомерСФ = "010" Тогда
							ОбластьПодвалПервыйЛист.Параметры.Заполнить(ДанныеПечати);
							ТабличныйДокумент.Вывести(ОбластьПодвалПервыйЛист);
						Иначе
							ОбластьПодвал.Параметры.Заполнить(ДанныеПечати);
							ТабличныйДокумент.Вывести(ОбластьПодвал);
						КонецЕсли;
					Иначе
						ОбластьИтогиТекущегоЛиста.Параметры.Заполнить(ДанныеПечати);
						ТабличныйДокумент.Вывести(ОбластьИтогиТекущегоЛиста);
						
						ОбластьПодвал.Параметры.Заполнить(ДанныеПечати);
						ТабличныйДокумент.Вывести(ОбластьПодвал);
					КонецЕсли;
					
					ДанныеПечати.СтоимостьПоЛисту 			= 0;
					ДанныеПечати.СуммаНДСПоЛисту 			= 0;
					ДанныеПечати.СуммаНСППоЛисту 			= 0;
					ДанныеПечати.ВсегоПоЛисту 				= 0;
					ДанныеПечати.СтоимостьПоСчетуФактуре 	= ДанныеПечати.СтоимостьПоСчетуФактуре + ВыборкаУслуги.Стоимость;
					ДанныеПечати.СуммаНДСПоСчетуФактуре 	= ДанныеПечати.СуммаНДСПоСчетуФактуре + ВыборкаУслуги.СуммаНДС;
					ДанныеПечати.СуммаНСППоСчетуФактуре 	= ДанныеПечати.СуммаНСППоСчетуФактуре + ВыборкаУслуги.СуммаНСП;
					ДанныеПечати.ВсегоПоСчетуФактуре 		= ДанныеПечати.ВсегоПоСчетуФактуре + ВыборкаУслуги.Всего;
					
					// Начинается новый лист
					НомерЛистаСтрокой = Формат(НомерЛиста, "ЧГ=0");
					
					Если НомерЛиста < 10 Тогда
						ДанныеПечати.Лист1 = "";
						ДанныеПечати.Лист2 = "";
						ДанныеПечати.Лист3 = НомерЛистаСтрокой;
					ИначеЕсли НомерЛиста < 100 Тогда
						ДанныеПечати.Лист1 = "";
						ДанныеПечати.Лист2 = Сред(НомерЛистаСтрокой, 1, 1);
						ДанныеПечати.Лист3 = Сред(НомерЛистаСтрокой, 2, 1);
					Иначе
						ДанныеПечати.Лист1 = Сред(НомерЛистаСтрокой, 1, 1);
						ДанныеПечати.Лист2 = Сред(НомерЛистаСтрокой, 2, 1);
						ДанныеПечати.Лист3 = Сред(НомерЛистаСтрокой, 3, 1);
					КонецЕсли;
					
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					
					Если НомерЛиста = КоличествоЛистов Тогда
						ОбластьЗаголовокЗаключительногоЛиста.Параметры.Заполнить(ДанныеПечати);
						ТабличныйДокумент.Вывести(ОбластьЗаголовокЗаключительногоЛиста);
					Иначе	
						ОбластьЗаголовокТекущегоЛиста.Параметры.Заполнить(ДанныеПечати);
						ТабличныйДокумент.Вывести(ОбластьЗаголовокТекущегоЛиста);
					КонецЕсли;
					
					ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
					ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
					
					МассивОбластей.Удалить(МассивОбластей.Количество() - 1);
					
					Если НомерСФ = "010" Тогда
						МассивОбластей.Удалить(МассивОбластей.Количество() - 1);	
						МассивОбластей.Добавить(ОбластьПодвал);	
					КонецЕсли;
					
					НомерЛиста = НомерЛиста + 1;
				КонецЕсли;
				
				ДанныеПечати.НомерСтроки = ДанныеПечати.НомерСтроки + 1;
			КонецЦикла;
		КонецЕсли;	
				
		ОбластьИтогиПоСчетуФактуре.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Вывести(ОбластьИтогиПоСчетуФактуре);
		
		Если (НомерСФ = "009" ИЛИ НомерСФ = "010") И НомерЛиста = 2 Тогда
			ОбластьПодвалПервыйЛист.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластьПодвалПервыйЛист);
		Иначе	
			ОбластьПодвал.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластьПодвал);
		КонецЕсли;	
			
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;	
КонецФункции

// Функция формирует табличный документ с печатной формой Счет-фактура
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьСчетФактураБезНДС(МассивОбъектов, ОбъектыПечати)

	Ошибки = Неопределено;

	ТабличныйДокумент = Новый ТабличныйДокумент;	
	ТабличныйДокумент.КлючПараметровПечати = "РеализацияТоваровУслуг_СчетФактураБезНДС";

	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьСчетФактура.ПФ_MXL_СчетФактураБезНДС");
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
		|	РеализацияТоваровУслуг.Номер КАК Номер,
		|	РеализацияТоваровУслуг.Дата КАК Дата,
		|	РеализацияТоваровУслуг.ВалютаДокумента КАК ВалютаДокумента,
		|	РеализацияТоваровУслуг.Курс КАК Курс,
		|	РеализацияТоваровУслуг.Кратность КАК Кратность,
		|	РеализацияТоваровУслуг.ПечатьВРегламентированнойВалюте КАК ПечатьВРегламентированнойВалюте,
		|	РеализацияТоваровУслуг.Организация КАК Организация,
		|	РеализацияТоваровУслуг.Организация.НаименованиеПолное КАК ОрганизацияПредставление,
		|	РеализацияТоваровУслуг.Организация.ФайлЛоготип КАК ФайлЛоготип,
		|	ВЫБОР
		|		КОГДА &ПечататьСчетаФактурыСГоловнымКонтрагентом
		|				И НЕ РеализацияТоваровУслуг.Контрагент.ГоловнойКонтрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА РеализацияТоваровУслуг.Контрагент.ГоловнойКонтрагент.НаименованиеПолное
		|		ИНАЧЕ РеализацияТоваровУслуг.Контрагент.НаименованиеПолное
		|	КОНЕЦ КАК КонтрагентПредставление,
		|	РеализацияТоваровУслуг.Организация.ИНН КАК ИНН,
		|	ЕСТЬNULL(РеализацияТоваровУслуг.Организация.ОсновнойБанковскийСчет.НомерСчета, """") КАК НомерСчета,
		|	ЕСТЬNULL(РеализацияТоваровУслуг.Организация.ОсновнойБанковскийСчет.Банк.Наименование, """") КАК БанкПредставление,
		|	ЕСТЬNULL(РеализацияТоваровУслуг.Организация.ОсновнойБанковскийСчет.Банк.Код, """") КАК БИКБанка,
		|	РеализацияТоваровУслуг.СтавкаНДС КАК СтавкаНДС, 
		|	РеализацияТоваровУслуг.ЭкспортнаяПоставка КАК ЭкспортнаяПоставка,
		|	РеализацияТоваровУслуг.БезналичныйРасчет КАК БезналичныйРасчет,
		|	РеализацияТоваровУслуг.Товары.(
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура КАК Номенклатура,
		|		Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
		|		Количество КАК Количество,
		|		Цена КАК Цена,
		|		СуммаДохода КАК Сумма,
		|		СуммаНДС КАК СуммаНДС,
		|		СуммаНСП КАК СуммаНСП,
		|		СтавкаНСП КАК СтавкаНСП,
		|		Всего - СуммаСкидки КАК Всего,
		|		СуммаДоходаВВалютеРеглУчета КАК СуммаВВалютеРеглУчета,
		|		СуммаНДСВВалютеРеглУчета КАК СуммаНДСВВалютеРеглУчета,
		|		СуммаНСПВВалютеРеглУчета КАК СуммаНСПВВалютеРеглУчета,
		|		ВсегоВВалютеРеглУчета - СуммаСкидкиВВалютеРеглУчета КАК ВсегоВВалютеРеглУчета,
		|		СуммаСкидкиВВалютеРеглУчета КАК СуммаСкидкиВВалютеРеглУчета,
		|		СуммаСкидки КАК СуммаСкидки
		|	) КАК Товары,
		|	РеализацияТоваровУслуг.Услуги.(
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура КАК Номенклатура,
		|		ВЫБОР
		|			КОГДА (ВЫРАЗИТЬ(РеализацияТоваровУслуг.Услуги.ДополнительныеСведения КАК СТРОКА(100))) = """"
		|				ТОГДА РеализацияТоваровУслуг.Услуги.Номенклатура.НаименованиеПолное
		|			ИНАЧЕ РеализацияТоваровУслуг.Услуги.ДополнительныеСведения
		|		КОНЕЦ КАК НоменклатураПредставление,
		|		Количество КАК Количество,
		|		Цена КАК Цена,
		|		СуммаДохода КАК Сумма,
		|		СуммаНДС КАК СуммаНДС,
		|		СуммаНСП КАК СуммаНСП,
		|		СтавкаНСП КАК СтавкаНСП,
		|		Всего - СуммаСкидки КАК Всего,
		|		СуммаДоходаВВалютеРеглУчета КАК СуммаВВалютеРеглУчета,
		|		СуммаНДСВВалютеРеглУчета КАК СуммаНДСВВалютеРеглУчета,
		|		СуммаНСПВВалютеРеглУчета - СуммаСкидкиВВалютеРеглУчета КАК СуммаНСПВВалютеРеглУчета,
		|		ВсегоВВалютеРеглУчета КАК ВсегоВВалютеРеглУчета,
		|		СуммаСкидки КАК СуммаСкидки,
		|		СуммаСкидкиВВалютеРеглУчета КАК СуммаСкидкиВВалютеРеглУчета
		|	) КАК Услуги,
		|	РеализацияТоваровУслуг.ОС.(
		|		НомерСтроки КАК НомерСтроки,
		|		ОсновноеСредство КАК Номенклатура,
		|		ОсновноеСредство.НаименованиеПолное КАК НоменклатураПредставление,
		|		1 КАК Количество,
		|		Всего КАК Цена,
		|		СуммаДохода КАК Сумма,
		|		СуммаНДС КАК СуммаНДС,
		|		СуммаНСП КАК СуммаНСП,
		|		СтавкаНСП КАК СтавкаНСП,
		|		Всего - СуммаСкидки КАК Всего,
		|		СуммаДоходаВВалютеРеглУчета КАК СуммаВВалютеРеглУчета,
		|		СуммаНДСВВалютеРеглУчета КАК СуммаНДСВВалютеРеглУчета,
		|		СуммаНСПВВалютеРеглУчета КАК СуммаНСПВВалютеРеглУчета,
		|		ВсегоВВалютеРеглУчета - СуммаСкидкиВВалютеРеглУчета КАК ВсегоВВалютеРеглУчета,
		|		СуммаСкидки КАК СуммаСкидки,
		|		СуммаСкидкиВВалютеРеглУчета КАК СуммаСкидкиВВалютеРеглУчета
		|	) КАК ОС
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка В(&СписокДокументов)";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПечататьСчетаФактурыСГоловнымКонтрагентом", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьЗначениеКонстанты("ПечататьСчетаФактурыСГоловнымКонтрагентом"));
	Запрос.УстановитьПараметр("СписокДокументов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	Пока Шапка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ДанныеПечати = Новый Структура;
		
		ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, НСтр("ru = 'Счет-фактура'"));
		ДанныеПечати.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		ДанныеПечати.Вставить("Дата", Шапка.Дата);
		ДанныеПечати.Вставить("ОрганизацияПредставление", Шапка.ОрганизацияПредставление);
		ДанныеПечати.Вставить("ФайлЛоготип", Шапка.ФайлЛоготип);
		ДанныеПечати.Вставить("ПолучательПредставление", Шапка.КонтрагентПредставление);
		ДанныеПечати.Вставить("Адрес", УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			Шапка.Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Шапка.Дата));
			
		ДанныеПечати.Вставить("ИНН", Шапка.ИНН);
		ДанныеПечати.Вставить("БанкПредставление", Шапка.БанкПредставление);
		ДанныеПечати.Вставить("РасчетныйСчетПредставление", Шапка.НомерСчета + " " + Шапка.БанкПредставление);
		ДанныеПечати.Вставить("БИКБанка", Шапка.БИКБанка);
		
		ДанныеПечати.Вставить("ТипПоставки", ?(Шапка.ЭкспортнаяПоставка, НСтр("ru = 'Экспорт'"), НСтр("ru = 'Внутренняя'")));
		
		ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(Шапка.Дата, Шапка.Организация);
		ПлательщикНСП = ДанныеУчетнойПолитики.ПлательщикНСП;
		
		ДанныеПечати.Вставить("ЗначениеСтавкиНДС", УчетНДС.ПолучитьСтавкуНДС(Шапка.Дата, Шапка.СтавкаНДС));
		ДанныеПечати.Вставить("ЗначениеСтавкиНСП", 0);
		
		// Подписи.
		РасшифровкаПодписиРуководителя = "";
		РасшифровкаПодписиГлавногоБухгалтера = "";
		ОтветственныеЛица = БухгалтерскийУчетСервер.ОтветственныеЛицаОрганизацийРуководители(Шапка.Организация, Шапка.Дата);
		БухгалтерскийУчетСервер.ФамилияИнициалыПоНаименованию(РасшифровкаПодписиРуководителя, ОтветственныеЛица.Руководитель);
		БухгалтерскийУчетСервер.ФамилияИнициалыПоНаименованию(РасшифровкаПодписиГлавногоБухгалтера, ОтветственныеЛица.ГлавныйБухгалтер);
		
		ДанныеПечати.Вставить("РасшифровкаПодписиРуководителя", РасшифровкаПодписиРуководителя);
		ДанныеПечати.Вставить("РасшифровкаПодписиГлавногоБухгалтера", РасшифровкаПодписиГлавногоБухгалтера);
		
		// Области.
		МассивОбластейМакета = Новый Массив;
		МассивОбластейМакета.Добавить("Заголовок");
		МассивОбластейМакета.Добавить("ШапкаТаблицы");
		МассивОбластейМакета.Добавить("СтрокаТаблицы");
		МассивОбластейМакета.Добавить("Подвал");
		МассивОбластейМакета.Добавить("СуммаПрописью");
		МассивОбластейМакета.Добавить("ПодписиСФаксимиле");
		
		// Подготовка перед заполнением.
		// Порядок выборок в массиве важен! 
		// 1. Товары
		// 2. Услуги
		// 3. ОС
		МассивВыборок = Новый Массив();
		МассивВыборок.Добавить(Шапка.Товары.Выбрать());
		МассивВыборок.Добавить(Шапка.Услуги.Выбрать());
		МассивВыборок.Добавить(Шапка.ОС.Выбрать());
		
		Всего = 0;
		Сумма = 0;
		ВсегоНДС = 0;
		ВсегоНСП = 0;
		КоличествоНаименований = 0;
		
		Для Каждого ИмяОбласти Из МассивОбластейМакета Цикл
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
			
			Если ИмяОбласти = "ЗаголовокСЛоготипом" Тогда
				Логотип = Новый Соответствие; // Ключ - имя картинки в области, Значение - имя реквизита
				Логотип.Вставить("Логотип", "ФайлЛоготип");
				ЗаполнитьЛоготипФаксимилеВОбластиМакета(ОбластьМакета, ДанныеПечати, Логотип, Ошибки);
			КонецЕсли;	

			Если ИмяОбласти <> "СтрокаТаблицы" Тогда
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			ИначеЕсли ИмяОбласти = "СтрокаТаблицы" Тогда 
				
				Индекс = 0;
				
				Для Каждого Выборка Из МассивВыборок Цикл
					
					Пока Выборка.Следующий() Цикл
						СтруктураСтроки = Новый Структура();
						
						Если Шапка.ПечатьВРегламентированнойВалюте Тогда
							СтруктураСтроки.Вставить("Цена", 	 Выборка.Цена * Шапка.Курс / Шапка.Кратность);
							СтруктураСтроки.Вставить("Сумма", 	 Выборка.СуммаВВалютеРеглУчета);
							СтруктураСтроки.Вставить("СуммаНДС", Выборка.СуммаНДСВВалютеРеглУчета);
							СтруктураСтроки.Вставить("СуммаНСП", Выборка.СуммаНСПВВалютеРеглУчета);
							СтруктураСтроки.Вставить("Всего", 	 Выборка.ВсегоВВалютеРеглУчета);
							
							Всего = Всего + СтруктураСтроки.Всего;
							Сумма = Сумма + СтруктураСтроки.Сумма;
							ВсегоНДС = ВсегоНДС + СтруктураСтроки.СуммаНДС;
							ВсегоНСП = ВсегоНСП + СтруктураСтроки.СуммаНСП;
							КоличествоНаименований = КоличествоНаименований + 1;
							
						Иначе
							Всего = Всего + Выборка.Всего;
							Сумма = Сумма + Выборка.Сумма;
							ВсегоНДС = ВсегоНДС + Выборка.СуммаНДС;
							ВсегоНСП = ВсегоНСП + Выборка.СуммаНСП;
							КоличествоНаименований = КоличествоНаименований + 1;
						КонецЕсли;
						
						ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
						ОбластьМакета.Параметры.Заполнить(Выборка);
						ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
						
						ЗначениеСтавкиНСП = ?(ПлательщикНСП И Не Шапка.БезналичныйРасчет, 
							УчетНДС.ПолучитьСтавкуНСП(Шапка.Дата, Шапка.Организация, Выборка.СтавкаНСП), 
							Справочники.СтавкиНСП.ПустаяСсылка());
						
						СтавкиНСПУслуги = Новый Структура("ЗначениеСтавкиНСП", ЗначениеСтавкиНСП);
				 		ОбластьМакета.Параметры.Заполнить(СтавкиНСПУслуги);	
						
						ТабличныйДокумент.Вывести(ОбластьМакета);
					КонецЦикла;
					
					Индекс = Индекс + 1;
				КонецЦикла;
				
				// Подвал.
				ДанныеПечати.Вставить("Всего", Всего);
				ДанныеПечати.Вставить("Сумма", Сумма);
				ДанныеПечати.Вставить("ВсегоНДС", ВсегоНДС);
				ДанныеПечати.Вставить("ВсегоНСП", ВсегоНСП);
				ДанныеПечати.Вставить("ИтоговаяСтрока", 
					СтрШаблон(НСтр("ru = 'Всего наименований %1, на сумму %2'"), 
					Формат(КоличествоНаименований, "ЧН=0; ЧГ=0"), Формат(Всего, "ЧЦ=15; ЧДЦ=2")));
					
				Если Шапка.ПечатьВРегламентированнойВалюте Тогда
					ДанныеПечати.Вставить("СуммаПрописью", БухгалтерскийУчетСервер.СформироватьСуммуПрописью(Всего, ВалютаРегламентированногоУчета));
				Иначе
					ДанныеПечати.Вставить("СуммаПрописью", БухгалтерскийУчетСервер.СформироватьСуммуПрописью(Всего, Шапка.ВалютаДокумента));
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
 			
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
		
КонецФункции

// Функция формирует табличный документ с печатной формой Акт об оказании услуг
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьАктОбОказанииУслуг(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "РеализацияТоваровУслуг_Акт";

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РеализацияТоваровУслуг.ПФ_MXL_Акт");
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК Ссылка,
		|	ТаблицаДокумента.Номер КАК Номер,
		|	ТаблицаДокумента.Дата КАК Дата,
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ТаблицаДокумента.Организация.НаименованиеПолное КАК ОрганизацияПредставление,
		|	ТаблицаДокумента.Организация.ИНН КАК ИННОрганизации,
		|	ТаблицаДокумента.Организация.ОсновнойБанковскийСчет.Наименование КАК РасчетныйСчетОрганизации,
		|	ТаблицаДокумента.Организация.ОсновнойБанковскийСчет.Банк.Код КАК БИКОрганизации,
		|	ТаблицаДокумента.Контрагент КАК Контрагент,
		|	ТаблицаДокумента.Контрагент.ИНН КАК ИННКонтрагента,
		|	ТаблицаДокумента.Контрагент.НаименованиеПолное КАК КонтрагентПредставление,
		|	ТаблицаДокумента.Контрагент.ОсновнойБанковскийСчет.Наименование КАК РасчетныйСчетКонтрагента,
		|	ТаблицаДокумента.Контрагент.ОсновнойБанковскийСчет.Банк.Код КАК БИККонтрагента,
		|	ТаблицаДокумента.ВалютаДокумента КАК ВалютаДокумента,
		|	ТаблицаДокумента.БезналичныйРасчет КАК БезналичныйРасчет,
		|	ТаблицаДокумента.Услуги.(
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура КАК Номенклатура,
		|		ВЫБОР
		|			КОГДА (ВЫРАЗИТЬ(ТаблицаДокумента.Услуги.ДополнительныеСведения КАК СТРОКА(100))) = """"
		|				ТОГДА ТаблицаДокумента.Услуги.Номенклатура.НаименованиеПолное
		|			ИНАЧЕ ТаблицаДокумента.Услуги.ДополнительныеСведения
		|		КОНЕЦ КАК НоменклатураПредставление,
		|		ПРЕДСТАВЛЕНИЕ(ТаблицаДокумента.Услуги.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
		|		Количество КАК Количество,
		|		Цена КАК Цена,
		|		Сумма КАК Сумма,
		|		СуммаНДС КАК СуммаНДС,
		|		СуммаНСП КАК СуммаНСП,
		|		СуммаСкидки КАК СуммаСкидки,
		|		Всего КАК СуммаБезСкидки,
		|		ТаблицаДокумента.Услуги.Всего - ТаблицаДокумента.Услуги.СуммаСкидки КАК Всего
		|	) КАК Услуги
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В(&СписокДокументов)";		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокДокументов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	Пока Шапка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Подготовка данных
		ДанныеПечати = Новый Структура;
		ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, НСтр("ru = 'Акт об оказании услуг'"));
		ДанныеПечати.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		
		// Сведения об организации
		СведенияОбОрганизации = БухгалтерскийУчетСервер.ПолучитьСведенияОбОрганизации(Шапка.Организация);
		АдресОрганизации = ?(СведенияОбОрганизации.Индекс = "","", СведенияОбОрганизации.Индекс + ",")
		+ ?(СведенияОбОрганизации.Город    = "",""," " + СведенияОбОрганизации.Город + ",")
		+ ?(СведенияОбОрганизации.Улица    = "",""," " + СведенияОбОрганизации.Улица + ",")
		+ ?(СведенияОбОрганизации.Дом      = "",""," дом " + СведенияОбОрганизации.Дом + ",")
		+ ?(СведенияОбОрганизации.Корпус   = "",""," корпус " + СведенияОбОрганизации.Корпус + ",")
		+ ?(СведенияОбОрганизации.Квартира = "",""," квартира " + СведенияОбОрганизации.Квартира);
		ДанныеПечати.Вставить("АдресОрганизации", АдресОрганизации);

		// Сведения о контрагенте
		АдресКонтрагента = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Шапка.Контрагент, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента); 
		ДанныеПечати.Вставить("АдресКонтрагента", АдресКонтрагента);
		
		ТаблицаУслуги = Шапка.Услуги.Выгрузить();
		
		Всего = ТаблицаУслуги.Итог("Всего");
		ВсегоНДС = ТаблицаУслуги.Итог("СуммаНДС");
		ВсегоНСП = ТаблицаУслуги.Итог("СуммаНСП");
		КоличествоНаименований = ТаблицаУслуги.Количество();		
		
		ВсегоСкидка = ТаблицаУслуги.Итог("СуммаСкидки");
		ЕстьСкидка = ВсегоСкидка <> 0;
		
		ДанныеПечати.Вставить("Всего", Всего);
		ДанныеПечати.Вставить("ВсегоНДС", ВсегоНДС);
		ДанныеПечати.Вставить("ВсегоНСП", ВсегоНСП);
		ДанныеПечати.Вставить("ИтоговаяСтрока", 
			СтрШаблон(НСтр("ru = 'Всего оказано услуг %1, на сумму %2 %3'"), 
			Формат(КоличествоНаименований, "ЧН=0; ЧГ=0"), Формат(ДанныеПечати.Всего, "ЧЦ=15; ЧДЦ=2"), Шапка.ВалютаДокумента));
		ДанныеПечати.Вставить("СуммаПрописью", БухгалтерскийУчетСервер.СформироватьСуммуПрописью(ДанныеПечати.Всего, Шапка.ВалютаДокумента));
		
		// Области
		МассивОбластейМакета = Новый Массив;
		МассивОбластейМакета.Добавить("Заголовок");
		Если ЕстьСкидка Тогда 
			МассивОбластейМакета.Добавить("ШапкаТаблицыСоСкидкой");
			МассивОбластейМакета.Добавить("СтрокаСоСкидкой");
		Иначе 
			МассивОбластейМакета.Добавить("ШапкаТаблицы");
			МассивОбластейМакета.Добавить("Строка");
		КонецЕсли;
		МассивОбластейМакета.Добавить("Подвал");
		МассивОбластейМакета.Добавить("Итоги");
		МассивОбластейМакета.Добавить("ИтогиНДС");
		Если Не Шапка.БезналичныйРасчет Тогда  
			МассивОбластейМакета.Добавить("ИтогиНСП");
		КонецЕсли;
		
		МассивОбластейМакета.Добавить("СуммаПрописью");
		МассивОбластейМакета.Добавить("Подписи");
	
		Для Каждого ИмяОбласти Из МассивОбластейМакета Цикл
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
			Если ИмяОбласти <> "Строка" И ИмяОбласти <> "СтрокаСоСкидкой" Тогда
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, Шапка);
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			ИначеЕсли ИмяОбласти = "Строка" ИЛИ ИмяОбласти = "СтрокаСоСкидкой" Тогда 
				Для Каждого СтрокаТаблицы Из ТаблицаУслуги Цикл
					ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
			КонецЕсли;	
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Функция формирует табличный документ с печатной формой Товарный чек
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьТоварныйЧек(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "РеализацияТоваровУслуг_ТоварныйЧек";

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РеализацияТоваровУслуг.ПФ_MXL_ТоварныйЧек");
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК Ссылка,
		|	ТаблицаДокумента.Номер КАК Номер,
		|	ТаблицаДокумента.Дата КАК Дата,
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ТаблицаДокумента.Организация.НаименованиеПолное КАК ОрганизацияПредставление,
		|	ТаблицаДокумента.Организация.ИНН КАК ОрганизацияИНН,
		|	ТаблицаДокумента.Склад КАК Склад,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокумента.Склад) КАК СкладПредставление,
		|	ТаблицаДокумента.Контрагент КАК Контрагент,
		|	ТаблицаДокумента.Контрагент.НаименованиеПолное КАК КонтрагентПредставление,
		|	ТаблицаДокумента.ВалютаДокумента КАК ВалютаДокумента,
		|	ТаблицаДокумента.Товары.(
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура КАК Номенклатура,
		|		Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
		|		Номенклатура.Код КАК НоменклатураКод,
		|		ПРЕДСТАВЛЕНИЕ(ТаблицаДокумента.Товары.Номенклатура.ЕдиницаИзмерения) КАК ЕИ,
		|		Количество КАК Количество,
		|		Цена КАК Цена,
		|		Сумма КАК Сумма,
		|		СуммаНДС КАК СуммаНДС,
		|		СуммаНСП КАК СуммаНСП,
		|		СуммаСкидки КАК СуммаСкидки,
		|		Всего КАК Всего
		|	) КАК Товары,
		|	ТаблицаДокумента.Услуги.(
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура КАК Номенклатура,
		|		Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
		|		Номенклатура.Код КАК НоменклатураКод,
		|		ПРЕДСТАВЛЕНИЕ(ТаблицаДокумента.Услуги.Номенклатура.ЕдиницаИзмерения) КАК ЕИ,
		|		Количество КАК Количество,
		|		Цена КАК Цена,
		|		Сумма КАК Сумма,
		|		СуммаНДС КАК СуммаНДС,
		|		СуммаНСП КАК СуммаНСП,
		|		СуммаСкидки КАК СуммаСкидки,
		|		Всего КАК Всего
		|	) КАК Услуги,
		|	ТаблицаДокумента.ОС.(
		|		НомерСтроки КАК НомерСтроки,
		|		ОсновноеСредство КАК Номенклатура,
		|		ОсновноеСредство.НаименованиеПолное КАК НоменклатураПредставление,
		|		ОсновноеСредство.Код КАК НоменклатураКод,
		|		НЕОПРЕДЕЛЕНО КАК ЕИ,
		|		1 КАК Количество,
		|		Сумма КАК Цена,
		|		Сумма КАК Сумма,
		|		СуммаНДС КАК СуммаНДС,
		|		СуммаНСП КАК СуммаНСП,
		|		СуммаСкидки КАК СуммаСкидки,
		|		Всего КАК Всего
		|	) КАК ОС
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В(&СписокДокументов)";		

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокДокументов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	Пока Шапка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Подготовка данных
		ДанныеПечати = Новый Структура;
		
		ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, НСтр("ru = 'Товарный чек'"));
		ДанныеПечати.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		ДанныеПечати.Вставить("ОрганизацияПредставление", Шапка.ОрганизацияПредставление);
		ДанныеПечати.Вставить("ПолучательПредставление", Шапка.КонтрагентПредставление);

		ТаблицаТовары = Шапка.Товары.Выгрузить();
		ТаблицаУслуги = Шапка.Услуги.Выгрузить();
		ТаблицаОС = Шапка.ОС.Выгрузить();
		
		Всего = ТаблицаТовары.Итог("Всего") + ТаблицаУслуги.Итог("Всего") + ТаблицаОС.Итог("Всего");
		ВсегоНДС = ТаблицаТовары.Итог("СуммаНДС") + ТаблицаУслуги.Итог("СуммаНДС") + ТаблицаОС.Итог("СуммаНДС");
		ВсегоНСП = ТаблицаТовары.Итог("СуммаНСП") + ТаблицаУслуги.Итог("СуммаНСП") + ТаблицаОС.Итог("СуммаНСП");
		КоличествоНаименований = ТаблицаТовары.Количество() + ТаблицаУслуги.Количество() + ТаблицаОС.Количество();		
				
		ДанныеПечати.Вставить("Всего", Всего);
		ДанныеПечати.Вставить("ВсегоНДС", ВсегоНДС);
		ДанныеПечати.Вставить("ВсегоНСП", ВсегоНСП);
		ДанныеПечати.Вставить("ИтоговаяСтрока", 
			СтрШаблон(НСтр("ru = 'Всего наименований %1, на сумму %2'"), 
			Формат(КоличествоНаименований, "ЧН=0; ЧГ=0"), Формат(ДанныеПечати.Всего, "ЧЦ=15; ЧДЦ=2")));
		ДанныеПечати.Вставить("СуммаПрописью", БухгалтерскийУчетСервер.СформироватьСуммуПрописью(ДанныеПечати.Всего, Шапка.ВалютаДокумента));		
		
		// Области
		МассивОбластейМакета = Новый Массив;
		МассивОбластейМакета.Добавить("Заголовок");
		МассивОбластейМакета.Добавить("ШапкаТаблицы");
		МассивОбластейМакета.Добавить("Строка");	
		МассивОбластейМакета.Добавить("Итоги");
		МассивОбластейМакета.Добавить("ИтогиНДС");
		МассивОбластейМакета.Добавить("ИтогиНСП");	
		МассивОбластейМакета.Добавить("СуммаПрописью");
		МассивОбластейМакета.Добавить("Подписи");
	
		Для Каждого ИмяОбласти Из МассивОбластейМакета Цикл
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
			Если ИмяОбласти <> "Строка" Тогда
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, Шапка);
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			ИначеЕсли ИмяОбласти = "Строка" Тогда 
				Для Каждого СтрокаТаблицы Из ТаблицаТовары Цикл
					ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
				Для Каждого СтрокаТаблицы Из ТаблицаУслуги Цикл
					ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
				Для Каждого СтрокаТаблицы Из ТаблицаОС Цикл
					ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
			КонецЕсли;	
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Накладная") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"Накладная", НСтр("ru = 'Накладная на сторону'"), ПечатьНакладной(МассивОбъектов, ОбъектыПечати),,
		"Документ.РеализацияТоваровУслуг.ПФ_MXL_Накладная");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактура001") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"СчетФактура001", НСтр("ru = 'Счет-фактура (001)'"), ПечатьСчетФактура(МассивОбъектов, ОбъектыПечати, 20));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактура002") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"СчетФактура002", НСтр("ru = 'Счет-фактура (002)'"), ПечатьСчетФактура(МассивОбъектов, ОбъектыПечати, 7));
	КонецЕсли;
	    		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактура007") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"СчетФактура007", НСтр("ru = 'Счет-фактура (007)'"), ПечатьСчетФактура007_008_009_010(МассивОбъектов, ОбъектыПечати, "007"));
	КонецЕсли;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактура008") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"СчетФактура008", НСтр("ru = 'Счет-фактура (008)'"), ПечатьСчетФактура007_008_009_010(МассивОбъектов, ОбъектыПечати, "008"));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактура009") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"СчетФактура009", НСтр("ru = 'Счет-фактура (009)'"), ПечатьСчетФактура007_008_009_010(МассивОбъектов, ОбъектыПечати, "009"));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактура010") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"СчетФактура010", НСтр("ru = 'Счет-фактура (010)'"), ПечатьСчетФактура007_008_009_010(МассивОбъектов, ОбъектыПечати, "010"));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактураВВалюте") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"СчетФактураВВалюте", НСтр("ru = 'Счет-фактура в валюте'"), ПечатьСчетФактура(МассивОбъектов, ОбъектыПечати, 1, Истина));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактураБезНДС") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"СчетФактураБезНДС", НСтр("ru = 'Счет-фактура без бланка НДС'"), ПечатьСчетФактураБезНДС(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Акт") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"Акт", НСтр("ru = 'Акт об оказании услуг'"), ПечатьАктОбОказанииУслуг(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТоварныйЧек") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"ТоварныйЧек", НСтр("ru = 'Товарный чек'"), ПечатьТоварныйЧек(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТТН") Тогда
		МассивДокументовТТН = ПодготовитьМассивДокументовТТН(МассивОбъектов);
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		Документы.ЭТТНИсходящая.Печать(МассивДокументовТТН, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Накладная";
	КомандаПечати.Представление = НСтр("ru = 'Накладная'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 1;

	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактура001";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура (001)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 2;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактура002";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура (002)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 3;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактура007";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура (007)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 4;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактура008";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура (008)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 5;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактура009";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура (009)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 6;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактура010";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура (010)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 7;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактураВВалюте";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура в валюте'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 8;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактураБезНДС";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура без бланка НДС'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 9;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Акт";
	КомандаПечати.Представление = НСтр("ru = 'Акт об оказании услуг'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 10;
	
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.Идентификатор = "ТТН";
	//КомандаПечати.Представление = НСтр("ru = 'ТТН'");
	//КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	//КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	//КомандаПечати.Порядок = 11;

	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТТН";
	КомандаПечати.Представление = НСтр("ru = 'ТТН'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 12;	
	
	Если НЕ Пользователи.ЭтоСеансВнешнегоПользователя() Тогда
		// Настраиваемый комплект документов.
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "Накладная,СчетФактура001,СчетФактура002,СчетФактураБезНДС,Акт,ТТН";
		КомандаПечати.Представление = НСтр("ru = 'Комплект'");
		КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
		КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
		КомандаПечати.Порядок = 75;
	КонецЕсли;
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "РеестрРеализацияТоваровУслуг";
	КомандаПечати.Представление  = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Реестр документов ""Реализация товаров и услуг""'");
	КомандаПечати.Обработчик     = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 99;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает заголовок документа для печатной формы.
//
// Параметры:
//  Шапка - любая структура с полями:
//           Номер         - Строка или Число - номер документа;
//           Дата          - Дата - дата документа;
//           Представление - Строка - (необязательный) платформенное представление ссылки на документ.
//                                    Если параметр НазваниеДокумента не задан, то название документа будет вычисляться
//                                    из этого параметра.
//  НазваниеДокумента - Строка - название документа (например, "Счет на оплату").
//
// Возвращаемое значение:
//  Строка - заголовок документа.
//
Функция СформироватьЗаголовокДокумента(Шапка, Знач НазваниеДокумента = "")
	
	ДанныеДокумента = Новый Структура("Номер,Дата,Представление");
	ЗаполнитьЗначенияСвойств(ДанныеДокумента, Шапка);
	
	// Если название документа не передано, получим название по представлению документа.
	Если ПустаяСтрока(НазваниеДокумента) И ЗначениеЗаполнено(ДанныеДокумента.Представление) Тогда
		ПоложениеНомера = СтрНайти(ДанныеДокумента.Представление, ДанныеДокумента.Номер);
		Если ПоложениеНомера > 0 Тогда
			НазваниеДокумента = СокрЛП(Лев(ДанныеДокумента.Представление, ПоложениеНомера - 1));
		КонецЕсли;
	КонецЕсли;

	НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеДокумента.Номер);
	Возврат СтрШаблон(НСтр("ru = '%1 № %2 от %3'"),
		НазваниеДокумента, НомерНаПечать, Формат(ДанныеДокумента.Дата, "ДЛФ=DD"));
	
КонецФункции

Процедура ЗаполнитьЛоготипФаксимилеВОбластиМакета(ОбластьМакета, ДанныеОбъекта, ПодписиИФаксимиле, Ошибки)
	
	Для каждого ЭлементСоответствия Из ПодписиИФаксимиле Цикл
		
		ПлашкаПодписи = ПолучитьПлашкуПодписиБезопасно(ОбластьМакета, ЭлементСоответствия.Ключ, , Ошибки);
		Если ПлашкаПодписи = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеОбъекта[ЭлементСоответствия.Значение]) Тогда
			
			ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(ДанныеОбъекта[ЭлементСоответствия.Значение]);
			Если ЗначениеЗаполнено(ДвоичныеДанные) Тогда
				
				ПлашкаПодписи.Картинка = Новый Картинка(ДвоичныеДанные);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПлашкуПодписиБезопасно(ОбластьМакета, ИмяПлашки, ПредставлениеПодписи, Ошибки)
	
	ПлашкаПодписи = ОбластьМакета.Области.Найти(ИмяПлашки);
	Если ПлашкаПодписи = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru ='ВНИМАНИЕ! Нет места для картинки %1. Возможно используется пользовательский макет.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ?(ПустаяСтрока(ПредставлениеПодписи), ИмяПлашки, ПредставлениеПодписи));
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстСообщения, Неопределено);
		
	КонецЕсли;
	
	ПлашкаПодписи.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
	
	Возврат ПлашкаПодписи;
	
КонецФункции

Функция ТаблицаОСВходящихВКомплекты(ДокументСсылка, СтруктураДополнительныеСвойства)
	ДатаДокумента = СтруктураДополнительныеСвойства.ДляПроведения.Дата;
	Организация = СтруктураДополнительныеСвойства.ДляПроведения.Организация;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаДокумента.СчетЗатрат КАК СчетЗатрат,
		|	ТаблицаДокумента.СтатьяЗатрат КАК СтатьяЗатрат
		|ПОМЕСТИТЬ ВременнаяТаблицаКомплекты
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.ОС КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|	И ТаблицаДокумента.ОсновноеСредство.ЭтоКомплект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоставОССрезПоследних.ОсновноеСредствоВСоставеКомплекта КАК ОсновноеСредство,
		|	ВременнаяТаблицаКомплекты.СчетЗатрат КАК СчетЗатрат,
		|	ВременнаяТаблицаКомплекты.СтатьяЗатрат КАК СтатьяЗатрат
		|ИЗ
		|	ВременнаяТаблицаКомплекты КАК ВременнаяТаблицаКомплекты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставОС.СрезПоследних(
		|				&МомВрем,
		|				ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаКомплекты.ОсновноеСредство КАК ОсновноеСредство
		|					ИЗ
		|						ВременнаяТаблицаКомплекты КАК ВременнаяТаблицаКомплекты)) КАК СоставОССрезПоследних
		|		ПО ВременнаяТаблицаКомплекты.ОсновноеСредство = СоставОССрезПоследних.ОсновноеСредство
		|			И (СоставОССрезПоследних.СостояниеВСоставеОС = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКомплектацияОС.Комплектация)
		|					ИЛИ СоставОССрезПоследних.СостояниеВСоставеОС = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКомплектацияОС.Добавление))";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Параметры.Вставить("МомВрем", Новый Граница(ДокументСсылка.МоментВремени(), ВидГраницы.Исключая));
	ТаблицаОС = Запрос.Выполнить().Выгрузить();
	
	МассивОсновныхСредств = ТаблицаОС.ВыгрузитьКолонку("ОсновноеСредство");
	УправлениеВнеоборотнымиАктивами.ЗаполнитьДанныеОсновныхСредствВТабличнойЧасти(ДокументСсылка, ДатаДокумента, Организация, ТаблицаОС, МассивОсновныхСредств);
	
	Возврат ТаблицаОС;

КонецФункции

Процедура РассчитатьСуммыСчетФактуры(СтрокаТаблицы, ДанныеДокумента, ДанныеПечати, ДанныеУчетнойПолитики, ИсходныеСуммы = Ложь, ТолькоРасчетИтогов = Ложь)

	СтавкаНДС = ?(ДанныеУчетнойПолитики.ПлательщикНДС, 
					ДанныеДокумента.СтавкаНДС, 
					Справочники.СтавкиНДС.ПустаяСсылка());
					
	СтавкаНСП = ?(ДанныеУчетнойПолитики.ПлательщикНСП, 
					ДанныеДокумента.СтавкаНСП, 
					Справочники.СтавкиНСП.ПустаяСсылка());
	
	Если ТолькоРасчетИтогов Тогда
		
		Если ИсходныеСуммы Тогда
			ДанныеПечати.ВсегоИсходная 			= ДанныеПечати.ВсегоИсходная + СтрокаТаблицы.Всего;
			ДанныеПечати.ВсегоНДСИсходная 		= ДанныеПечати.ВсегоНДСИсходная + СтрокаТаблицы.СуммаНДС;
			ДанныеПечати.ВсегоНСПИсходная 		= ДанныеПечати.ВсегоНСПИсходная + СтрокаТаблицы.СуммаНСП;
			ДанныеПечати.ВсегоСтоимостьИсходная = ДанныеПечати.ВсегоСтоимостьИсходная + СтрокаТаблицы.Стоимость;
			
		Иначе	
		    ДанныеПечати.Всего 			= ДанныеПечати.Всего + СтрокаТаблицы.Всего;
			ДанныеПечати.ВсегоНДС 		= ДанныеПечати.ВсегоНДС + СтрокаТаблицы.СуммаНДС;
			ДанныеПечати.ВсегоНСП 		= ДанныеПечати.ВсегоНСП + СтрокаТаблицы.СуммаНСП;
			ДанныеПечати.ВсегоСтоимость = ДанныеПечати.ВсегоСтоимость + СтрокаТаблицы.Стоимость;
		КонецЕсли;	
			
	Иначе	
		СтруктураНачальныхСумм = Новый Структура();
		СтруктураНачальныхСумм.Вставить("Всего", 	СтрокаТаблицы.Всего);
		СтруктураНачальныхСумм.Вставить("Доход", 	СтрокаТаблицы.Стоимость);
		СтруктураНачальныхСумм.Вставить("Скидка", 	СтрокаТаблицы.СуммаСкидки);
		СтруктураНачальныхСумм.Вставить("НДС", 		СтрокаТаблицы.СуммаНДС);
		СтруктураНачальныхСумм.Вставить("НСП", 		СтрокаТаблицы.СуммаНСП);
		
		СтруктураСтроки = Новый Структура();
		СтруктураСтроки.Вставить("Цена", 				СтрокаТаблицы.Цена);
		СтруктураСтроки.Вставить("Количество", 			СтрокаТаблицы.Количество);
		СтруктураСтроки.Вставить("Сумма", 				СтрокаТаблицы.Сумма);
		СтруктураСтроки.Вставить("СуммаНДС", 			СтрокаТаблицы.СуммаНДС);
		СтруктураСтроки.Вставить("СуммаНСП", 			СтрокаТаблицы.СуммаНСП);
		СтруктураСтроки.Вставить("Всего", 				СтрокаТаблицы.Всего + СтрокаТаблицы.СуммаСкидки);
		СтруктураСтроки.Вставить("СуммаДохода", 		СтрокаТаблицы.Стоимость);
		СтруктураСтроки.Вставить("СуммаСкидки", 		0);
		СтруктураСтроки.Вставить("СуммаНДССкидки", 		0);
		СтруктураСтроки.Вставить("СуммаНСПСкидки", 		0);
		СтруктураСтроки.Вставить("СуммаДоходаСкидки", 	0);
		СтруктураСтроки.Вставить("СтавкаНДС", 			СтавкаНДС);
		СтруктураСтроки.Вставить("СтавкаНСП", 			СтавкаНСП);
	
		ПараметрыРасчета = Новый Структура;
		ПараметрыРасчета.Вставить("Период", 					ДанныеДокумента.Дата);
		ПараметрыРасчета.Вставить("Организация", 				ДанныеДокумента.Организация);
		ПараметрыРасчета.Вставить("ПризнакСтраныЕАЭС", 			Ложь);
		ПараметрыРасчета.Вставить("ПризнакСтраныИмпортЭкспорт", Ложь);
		ПараметрыРасчета.Вставить("ЭкспортУслугПокупателюКР",   ДанныеДокумента.ЭкспортУслугПокупателюКР);
		ПараметрыРасчета.Вставить("СуммаВключаетНалоги", 		Истина);
		ПараметрыРасчета.Вставить("БезналичныйРасчет", 			ДанныеДокумента.БезналичныйРасчет);
		ПараметрыРасчета.Вставить("СчитатьОтДохода", 			Истина);
		ПараметрыРасчета.Вставить("Точность", 					2);
		ПараметрыРасчета.Вставить("СтавкаНДС", 					СтавкаНДС);
		ПараметрыРасчета.Вставить("СтавкаНСП", 					СтавкаНСП);	
		ПараметрыРасчета.Вставить("СчитатьСкидкуОтдельно",		Истина);
		
		Если ДанныеДокумента.СуммаВключаетНалоги Тогда
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтруктураСтроки, ПараметрыРасчета);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтруктураСтроки);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтруктураСтроки, Истина);
			
		Иначе
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтруктураСтроки, Ложь);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтруктураСтроки, ПараметрыРасчета);
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтруктураСтроки, ПараметрыРасчета);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтруктураСтроки, ПараметрыРасчета);
				
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтруктураСтроки);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтруктураСтроки);
		СтрокаТаблицы.Стоимость = СтруктураСтроки.СуммаДохода;
		
		Если ИсходныеСуммы Тогда	
			ДанныеПечати.СуммаСкидкиИсходная 			= ДанныеПечати.СуммаСкидкиИсходная + СтруктураНачальныхСумм.Скидка;	
			ДанныеПечати.НДССкидкиИсходная 		 		= ДанныеПечати.НДССкидкиИсходная + (СтрокаТаблицы.СуммаНДС - СтруктураНачальныхСумм.НДС);
			ДанныеПечати.НСПСкидкиИсходная 		 		= ДанныеПечати.НСПСкидкиИсходная + (СтрокаТаблицы.СуммаНСП - СтруктураНачальныхСумм.НСП);
			ДанныеПечати.СуммаСкидкиБезНалоговИсходная 	= ДанныеПечати.СуммаСкидкиИсходная - ДанныеПечати.НДССкидкиИсходная - ДанныеПечати.НСПСкидкиИсходная;
			
			ДанныеПечати.ВсегоИсходная 			= ДанныеПечати.ВсегоИсходная + (СтрокаТаблицы.Всего - СтруктураНачальныхСумм.Скидка);
			ДанныеПечати.ВсегоНДСИсходная 		= ДанныеПечати.ВсегоНДСИсходная + СтруктураНачальныхСумм.НДС;
			ДанныеПечати.ВсегоНСПИсходная 		= ДанныеПечати.ВсегоНСПИсходная + СтруктураНачальныхСумм.НСП;
			ДанныеПечати.ВсегоСтоимостьИсходная = ДанныеПечати.ВсегоИсходная - ДанныеПечати.ВсегоНДСИсходная - ДанныеПечати.ВсегоНСПИсходная;
			
		Иначе	
			ДанныеПечати.СуммаСкидки 			= ДанныеПечати.СуммаСкидки + СтруктураНачальныхСумм.Скидка;	
			ДанныеПечати.НДССкидки 		 		= ДанныеПечати.НДССкидки + (СтрокаТаблицы.СуммаНДС - СтруктураНачальныхСумм.НДС);
			ДанныеПечати.НСПСкидки 		 		= ДанныеПечати.НСПСкидки + (СтрокаТаблицы.СуммаНСП - СтруктураНачальныхСумм.НСП);
			ДанныеПечати.СуммаСкидкиБезНалогов 	= ДанныеПечати.СуммаСкидки - ДанныеПечати.НДССкидки - ДанныеПечати.НСПСкидки;
			
			ДанныеПечати.Всего 			= ДанныеПечати.Всего + (СтрокаТаблицы.Всего - СтруктураНачальныхСумм.Скидка);
			ДанныеПечати.ВсегоНДС 		= ДанныеПечати.ВсегоНДС + СтруктураНачальныхСумм.НДС;
			ДанныеПечати.ВсегоНСП 		= ДанныеПечати.ВсегоНСП + СтруктураНачальныхСумм.НСП;
			ДанныеПечати.ВсегоСтоимость = ДанныеПечати.Всего - ДанныеПечати.ВсегоНДС - ДанныеПечати.ВсегоНСП;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция КоличествоЛистовСчетФатуры(Макет, Шапка, НомерСФ)

	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если НомерСФ = "007" ИЛИ НомерСФ = "009" Тогда
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;	
	Иначе
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	КонецЕсли;
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	ОбластьЗаголовокТекущегоЛиста 	= Макет.ПолучитьОбласть("ЗаголовокТекущегоЛиста");
	ОбластьШапкаТаблицы 			= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьСтрокаТаблицы 			= Макет.ПолучитьОбласть("СтрокаТаблицы");
	ОбластьИтогиТекущегоЛиста 		= Макет.ПолучитьОбласть("ИтогиТекущегоЛиста");
	ОбластьПодвал 					= Макет.ПолучитьОбласть("Подвал");

	Если НомерСФ = "009" ИЛИ НомерСФ = "010" Тогда
		ОбластьПодвалПервыйЛист = Макет.ПолучитьОбласть("ПодвалПервыйЛист");
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
	
	МассивОбластей = Новый Массив();
	МассивОбластей.Добавить(ОбластьИтогиТекущегоЛиста);
	
	Если НомерСФ = "009" ИЛИ НомерСФ = "010" Тогда
		МассивОбластей.Добавить(ОбластьПодвалПервыйЛист);
	Иначе
		МассивОбластей.Добавить(ОбластьПодвал);	
	КонецЕсли;
	
	КоличествоЛистов = 1;
	
	ИменаТабличныхЧастей = Новый Массив();
	
	Если НомерСФ = "007" ИЛИ НомерСФ = "009" Тогда	
		ИменаТабличныхЧастей.Добавить("Товары");
		ИменаТабличныхЧастей.Добавить("ОС");
	Иначе
		ИменаТабличныхЧастей.Добавить("Услуги");
	КонецЕсли;	
	
	Для Каждого ИмяТабличнойЧасти Из ИменаТабличныхЧастей Цикл
		Выборка = Шапка[ИмяТабличнойЧасти].Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ОбластьСтрокаТаблицы.Параметры.Заполнить(Выборка);
			
			МассивОбластей.Добавить(ОбластьСтрокаТаблицы);
			
			Если ТабличныйДокумент.ПроверитьВывод(МассивОбластей) Тогда			
				ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
				МассивОбластей.Удалить(МассивОбластей.Количество() - 1);
			Иначе	
				// Заканчивается лист
				ТабличныйДокумент.Вывести(ОбластьИтогиТекущегоЛиста);
				ТабличныйДокумент.Вывести(ОбластьПодвал);
				
				// Начинается новый лист
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();	
				ТабличныйДокумент.Вывести(ОбластьЗаголовокТекущегоЛиста);
				ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
				ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
				
				МассивОбластей.Удалить(МассивОбластей.Количество() - 1);
		
				Если (НомерСФ = "009" ИЛИ НомерСФ = "010") И КоличествоЛистов = 1 Тогда
					МассивОбластей.Удалить(МассивОбластей.Количество() - 1);
					МассивОбластей.Добавить(ОбластьПодвал);				
				КонецЕсли;	
				
				КоличествоЛистов = КоличествоЛистов + 1;
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;	
		
	Возврат КоличествоЛистов;
КонецФункции

Функция ПодготовитьМассивДокументовТТН(МассивОбъектов)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭТТНИсходящая.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЭТТНИсходящая КАК ЭТТНИсходящая
		|ГДЕ
		|	ЭТТНИсходящая.ДокументОснование В(&МассивОбъектов)";
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

КонецФункции // ПодготовитьМассивДокументовТТН()

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаДокумента"
		И ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;

	ВидОперации = Неопределено; 

	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "ВидОперации");
	КонецЕсли;

	// Если документ копируется, то вид формы получаем из копируемого документа.
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначениеКопирования")
			И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Параметры.ЗначениеКопирования, "ВидОперации");
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначенияЗаполнения") 
			И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") Тогда
			Если Параметры.ЗначенияЗаполнения.Свойство("ВидОперации") Тогда
				ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("Основание")
			И ЗначениеЗаполнено(Параметры.Основание) Тогда
			ВидОперации = ОпределитьВидОперацииПоДокументуОснованию(Параметры.Основание);
		КонецЕсли;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;
	ФормыРеализацииТоваровУслуг = ПолучитьСоответствиеВидовОперацийФормам();
	ВыбраннаяФорма = ФормыРеализацииТоваровУслуг[ВидОперации];
	Если ВыбраннаяФорма = Неопределено Тогда
		ВыбраннаяФорма = "ФормаДокумента";
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ОпределитьВидОперацииПоДокументуОснованию(Основание) Экспорт

	Результат = Перечисления.ВидыОперацийРеализацияТоваров.ТоварыУслуги;

	Если ЗначениеЗаполнено(Основание)
		И ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Основание);
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СУММА(Таблицы.ЕстьТовары) КАК ЕстьТовары,
			|	СУММА(Таблицы.ЕстьУслуги) КАК ЕстьУслуги,
			|	СУММА(Таблицы.ЕстьОС) КАК ЕстьОС
			|ИЗ
			|	(ВЫБРАТЬ ПЕРВЫЕ 1
			|		1 КАК ЕстьТовары,
			|		0 КАК ЕстьУслуги,
			|		0 КАК ЕстьОС
			|	ИЗ
			|		Документ.СчетНаОплатуПокупателю.Товары КАК ДокОснование
			|	ГДЕ
			|		ДокОснование.Ссылка = &Ссылка
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ ПЕРВЫЕ 1
			|		0,
			|		1,
			|		0
			|	ИЗ
			|		Документ.СчетНаОплатуПокупателю.Услуги КАК ДокОснование
			|	ГДЕ
			|		ДокОснование.Ссылка = &Ссылка
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ ПЕРВЫЕ 1
			|		0,
			|		0,
			|		1
			|	ИЗ
			|		Документ.СчетНаОплатуПокупателю.ОС КАК ДокОснование
			|	ГДЕ
			|		ДокОснование.Ссылка = &Ссылка) КАК Таблицы";
		
		Выборка = Запрос.Выполнить().Выбрать();
		ЕстьТовары 	= Ложь;
		ЕстьУслуги	= Ложь;
		ЕстьОС	= Ложь;
		Если Выборка.Следующий() Тогда
			ЕстьТовары 	= ЗначениеЗаполнено(Выборка.ЕстьТовары) И Выборка.ЕстьТовары > 0;
			ЕстьУслуги	= ЗначениеЗаполнено(Выборка.ЕстьУслуги) И Выборка.ЕстьУслуги > 0;
			ЕстьОС		= ЗначениеЗаполнено(Выборка.ЕстьОС) И Выборка.ЕстьОС > 0;
		КонецЕсли;
		
		КоличествоТабЧастей = 0;
		Если ЕстьТовары Тогда 
			КоличествоТабЧастей = КоличествоТабЧастей + 1;
		КонецЕсли;
		Если ЕстьУслуги Тогда
			КоличествоТабЧастей = КоличествоТабЧастей + 1;
		КонецЕсли;
		Если ЕстьОС Тогда
			КоличествоТабЧастей = КоличествоТабЧастей + 1;
		КонецЕсли; 
		
		Если КоличествоТабЧастей > 1 Тогда 
			// Одновременное поступление товаров и услуг и ОС выполняется через основную форму	
			Результат = Перечисления.ВидыОперацийРеализацияТоваров.ТоварыУслуги;
		ИначеЕсли ЕстьОС Тогда
			Результат = Перечисления.ВидыОперацийРеализацияТоваров.ОсновныеСредства;
		ИначеЕсли ЕстьТовары Тогда
			Результат = Перечисления.ВидыОперацийРеализацияТоваров.Товары;
		ИначеЕсли ЕстьУслуги Тогда
			Результат = Перечисления.ВидыОперацийРеализацияТоваров.Услуги;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Основание)
		И ТипЗнч(Основание) = Тип("ДокументСсылка.ДвижениеМБП") Тогда
		Результат = Перечисления.ВидыОперацийРеализацияТоваров.Товары;	
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ПолучитьСоответствиеВидовОперацийФормам() Экспорт

	ФормыРеализацияТоваровУслуг= Новый Соответствие;
	ФормыРеализацияТоваровУслуг.Вставить(Перечисления.ВидыОперацийРеализацияТоваров.Товары, "ФормаДокументаТовары");
	ФормыРеализацияТоваровУслуг.Вставить(Перечисления.ВидыОперацийРеализацияТоваров.Услуги, "ФормаДокументаУслуги");
	ФормыРеализацияТоваровУслуг.Вставить(Перечисления.ВидыОперацийРеализацияТоваров.ОсновныеСредства, "ФормаДокументаОсновныеСредства");
	ФормыРеализацияТоваровУслуг.Вставить(Перечисления.ВидыОперацийРеализацияТоваров.ТоварыУслуги, "ФормаДокументаОбщая");
	
	Возврат ФормыРеализацияТоваровУслуг;

КонецФункции 

#КонецОбласти

#КонецЕсли