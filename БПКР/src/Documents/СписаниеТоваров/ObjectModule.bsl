#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ЗаполненияДокумента

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.ИнвентаризацияТоваров - Данные заполнения документа.
//	
Процедура ЗаполнитьПоИнвентаризацииТМЗ(ДанныеЗаполнения) Экспорт

	ДокументОснование = ДанныеЗаполнения;
	
	Организация	= ДанныеЗаполнения.Организация;
	Склад = ДанныеЗаполнения.Склад;

	Комиссия.Загрузить(ДанныеЗаполнения.Комиссия.Выгрузить());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнвентаризацияТоваровТовары.Номенклатура КАК Номенклатура,
		|	ИнвентаризацияТоваровТовары.Отклонение * -1 КАК Количество,
		|	ИнвентаризацияТоваровТовары.СчетУчета КАК СчетУчета
		|ИЗ
		|	Документ.ИнвентаризацияТоваров.Товары КАК ИнвентаризацияТоваровТовары
		|ГДЕ
		|	ИнвентаризацияТоваровТовары.Отклонение < 0
		|	И ИнвентаризацияТоваровТовары.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИнвентаризацияТоваровМБП.Номенклатура,
		|	ИнвентаризацияТоваровМБП.Отклонение * -1,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.МБП)
		|ИЗ
		|	Документ.ИнвентаризацияТоваров.МБП КАК ИнвентаризацияТоваровМБП
		|ГДЕ
		|	ИнвентаризацияТоваровМБП.Отклонение < 0
		|	И ИнвентаризацияТоваровМБП.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрокаТабличнойЧасти = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаДетальныеЗаписи); 
		
		СчетаУчетаНоменклатуры = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(Организация, ВыборкаДетальныеЗаписи.Номенклатура);
		СтрокаТабличнойЧасти.СчетЗатрат = СчетаУчетаНоменклатуры.СчетРасходов;
	КонецЦикла;
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.ИнвентаризацияМБП - Данные заполнения документа.
//	
Процедура ЗаполнитьПоИнвентаризацииМБП(ДанныеЗаполнения) Экспорт

	ДокументОснование = ДанныеЗаполнения;
	
	Организация	= ДанныеЗаполнения.Организация;

	Комиссия.Загрузить(ДанныеЗаполнения.Комиссия.Выгрузить());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнвентаризацияТоваровМБП.Номенклатура КАК Номенклатура,
		|	ИнвентаризацияТоваровМБП.Отклонение * -1 КАК Количество,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.МБП) КАК СчетУчета
		|ИЗ
		|	Документ.ИнвентаризацияМБП.МБП КАК ИнвентаризацияТоваровМБП
		|ГДЕ
		|	ИнвентаризацияТоваровМБП.Отклонение < 0
		|	И ИнвентаризацияТоваровМБП.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрокаТабличнойЧасти = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаДетальныеЗаписи); 
		
		СчетаУчетаНоменклатуры = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(Организация, ВыборкаДетальныеЗаписи.Номенклатура);
		СтрокаТабличнойЧасти.СчетЗатрат = СчетаУчетаНоменклатуры.СчетРасходов;
	КонецЦикла;
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.ПоступлениеТоваровУслуг - Данные заполнения документа.
//	
Процедура ЗаполнитьПоПоступлениюТоваровУслуг(ДанныеЗаполнения) Экспорт
	
	ДокументОснование 		= ДанныеЗаполнения;	
	Организация				= ДанныеЗаполнения.Организация;
	Склад					= ДанныеЗаполнения.Склад;
	
	МассивТаблиц = ПолучитьДанныеПоПоступлению(Ложь);
	
	Товары.Очистить();
	
	Если МассивТаблиц.Количество() <> 0 Тогда 
		Для Каждого СтрокаТаблицы Из МассивТаблиц[0] Цикл
			СтрокаТабличнойЧасти = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТаблицы);
			СчетаУчетаНоменклатуры = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТабличнойЧасти.Номенклатура);
			СтрокаТабличнойЧасти.СчетЗатрат = СчетаУчетаНоменклатуры.СчетРасходов;
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.ПеремещениеТоваров - Данные заполнения документа.
//	
Процедура ЗаполнитьПоПеремещениюТоваров(ДанныеЗаполнения) Экспорт
	
	ДокументОснование 		= ДанныеЗаполнения;	
	Организация				= ДанныеЗаполнения.Организация;
	Склад					= ДанныеЗаполнения.СкладПолучатель;
		
	Товары.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПеремещениеТоваровТовары.Ссылка КАК Ссылка,
		|	ПеремещениеТоваровТовары.НомерСтроки КАК НомерСтроки,
		|	ПеремещениеТоваровТовары.Номенклатура КАК Номенклатура,
		|	ПеремещениеТоваровТовары.Количество КАК Количество,
		|	ПеремещениеТоваровТовары.СчетУчета КАК СчетУчета,
		|	ПеремещениеТоваровТовары.НовыйСчетУчета КАК НовыйСчетУчета
		|ИЗ
		|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		|ГДЕ
		|	ПеремещениеТоваровТовары.Ссылка = &ДокументОснование";
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	ТаблицаТовары 	= Запрос.Выполнить().Выгрузить();
	Если ТаблицаТовары.Количество() <> 0 Тогда 
		Для Каждого СтрокаТаблицы Из ТаблицаТовары Цикл
			СтрокаТабличнойЧасти = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТаблицы);
			СчетаУчетаНоменклатуры = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТабличнойЧасти.Номенклатура);
			СтрокаТабличнойЧасти.СчетЗатрат = СчетаУчетаНоменклатуры.СчетРасходов;
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.ИнвентаризацияТоваров")] = "ЗаполнитьПоИнвентаризацииТМЗ";
	СтратегияЗаполнения[Тип("ДокументСсылка.ИнвентаризацияМБП")] = "ЗаполнитьПоИнвентаризацииМБП";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПоступлениеТоваровУслуг")] = "ЗаполнитьПоПоступлениюТоваровУслуг";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПеремещениеТоваров")] = "ЗаполнитьПоПеремещениюТоваров";
	
	ЗаполнениеОбъектовБП.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ИнициализироватьДанные(Отказ, РежимПроведения);
	
	ОтразитьДвижения(Отказ, РежимПроведения);
	
	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)

	// Инициализация дополнительных свойств для проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииОбработкаПроведения

// Процедура инициализирует данные документа
// и подготавливает таблицы для движения в регистры
//
Процедура ИнициализироватьДанные(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	 	
	// Инициализация данных документа.
	Документы.СписаниеТоваров.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
КонецПроцедуры
	
// Процедура заполняет регистры данными
//
Процедура ОтразитьДвижения(Отказ, РежимПроведения)

	// Отражение в разделах учета.
	// ТМЗ.
	УчетТоваров.СформироватьДвиженияСписаниеТоваров(ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСписанныеТовары, 
		ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРеквизиты, Движения, Отказ, ДополнительныеСвойства);
	УчетМБП.СформироватьДвиженияСписаниеМБП(ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСписанныеМБП, 
		ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРеквизиты, Движения, Отказ, ДополнительныеСвойства);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция возвращает выборку данных ТЧ "Товары" и "Услуги" из запроса 
// по документу поступления одновременно проверяя не было ли ранее
// возвратов по этому поступлению и если были, вычитает то что уже возвращено.
//
Функция ПолучитьДанныеПоПоступлению(ПоказатьСообщение) Экспорт

	МассивСписания = Новый Массив();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеТоваровУслугТовары.Ссылка КАК Ссылка,
		|	ПоступлениеТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
		|	ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
		|	ПоступлениеТоваровУслугТовары.КоличествоДопЕдиницы КАК КоличествоДопЕдиницы,
		|	ПоступлениеТоваровУслугТовары.КоэффициентДопЕдиницы КАК КоэффициентДопЕдиницы,
		|	ПоступлениеТоваровУслугТовары.Количество КАК Количество,
		|	ПоступлениеТоваровУслугТовары.Цена КАК Цена,
		|	ПоступлениеТоваровУслугТовары.Сумма КАК Сумма,
		|	ПоступлениеТоваровУслугТовары.СуммаНДС КАК СуммаНДС,
		|	ПоступлениеТоваровУслугТовары.СуммаНСП КАК СуммаНСП,
		|	ПоступлениеТоваровУслугТовары.Всего КАК Всего,
		|	ПоступлениеТоваровУслугТовары.ЗачетНДС КАК ЗачетНДС,
		|	ПоступлениеТоваровУслугТовары.СчетУчета КАК СчетУчета,
		|	ПоступлениеТоваровУслугТовары.Вес КАК Вес,
		|	ПоступлениеТоваровУслугТовары.СуммаАкциза КАК СуммаАкциза,
		|	ПоступлениеТоваровУслугТовары.ИмпортОсвобожденныйОтНДС КАК ИмпортОсвобожденныйОтНДС
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		|ГДЕ
		|	ПоступлениеТоваровУслугТовары.Ссылка = &ДокументПоступления";
	Запрос.УстановитьПараметр("ДокументПоступления", ДокументОснование);
	
	ТаблицаТовары 	= Запрос.Выполнить().Выгрузить();
	
	МассивСписания.Добавить(ТаблицаТовары);

	Возврат МассивСписания;
	
КонецФункции // ПолучитьДанныеПоПоступлению()

#КонецОбласти
	
#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли