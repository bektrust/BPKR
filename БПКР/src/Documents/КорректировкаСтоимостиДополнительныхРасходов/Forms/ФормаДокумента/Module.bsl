#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка реквизитов формы.	
	ДатаДокумента = Объект.Дата;
	
	ПризнакСтраны = Объект.Контрагент.ПризнакСтраны;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();	
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	
	УстановитьФункциональныеОпцииФормы();
	
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	
	Если ПолучитьФункциональнуюОпцию("УказыватьТочностьЦены") Тогда 
		ЗаполнитьСписокВыбораТочностьЦены();	
	КонецЕсли;
	
	Если БухгалтерскийУчетВызовСервераПовтИсп.ВедетсяУчетЭСФ() Тогда
		ПолучитьПредставлениеЭСФ();
	КонецЕсли;
	
	// КопированиеСтрокТабличныхЧастей
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСервере(Элементы, "Товары");
	// Конец КопированиеСтрокТабличныхЧастей
	
	// РаботаСФормами
	РаботаСФормамиСервер.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом 
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьТекущуюСтраницу();
	УстановитьФорматЦены();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "МодифицированДоговораКонтрагента"
		И Параметр = Объект.ДоговорКонтрагента Тогда
		ОбработатьИзменениеДоговора(Истина);
		
	ИначеЕсли ИмяСобытия = "ЭлектронныйСчетФактураПолученныйПослеЗаписи"
		И НЕ Параметр.Найти(Объект.Ссылка) = Неопределено Тогда  
		
		Если БухгалтерскийУчетВызовСервераПовтИсп.ВедетсяУчетЭСФ() Тогда
			ПолучитьПредставлениеЭСФ();
		КонецЕсли;

	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);	
	КонецЕсли;
	
	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Товары");
	КонецЕсли;
	// Конец КопированиеСтрокТабличныхЧастей
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	
	// РаботаСФормами
	РаботаСФормамиСервер.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчета.ПослеЗаписиНаСервере(ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением, Объект.ВалютаДокумента);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);	
	УстановитьФункциональныеОпцииФормы();
	ОбработатьИзменениеУчетнойПолитики();
	ОбработатьИзменениеДоговора();  
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Объект.Номер = "";

	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
	УстановитьФункциональныеОпцииФормы();	
	ОбработатьИзменениеУчетнойПолитики();
	
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент, Объект.Организация);
	Объект.ДоговорКонтрагента = СтруктураДанные.ДоговорКонтрагента;
	ОбработатьИзменениеДоговора();
	
	Если БухгалтерскийУчетВызовСервераПовтИсп.ВедетсяУчетЭСФ() Тогда
		ПолучитьПредставлениеЭСФ();
	КонецЕсли;
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Контрагент.
//
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент, Объект.Организация);
	
	Объект.ЭтоПоступлениеПоЧеку = Ложь;
	
	Объект.ДоговорКонтрагента = СтруктураДанные.ДоговорКонтрагента;
	ПризнакСтраны = СтруктураДанные.ПризнакСтраны;
	
	// Изменение признака страны
	Если ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС")
		ИЛИ ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ИмпортЭкспорт") Тогда
		
		Объект.БезналичныйРасчет = Ложь;
		Объект.ЗначениеСтавкиНДС = 0;
		Объект.ЗначениеСтавкиНСП = 0;
		Объект.СуммаНДС = 0;
		Объект.СуммаНСП = 0;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
			СтрокаТабличнойЧасти.СуммаРасходов = 0;
			СтрокаТабличнойЧасти.СуммаРасходовНДС = 0;
			СтрокаТабличнойЧасти.СуммаРасходовНСП = 0;
			СтрокаТабличнойЧасти.ЗачетНДС = Неопределено;
		КонецЦикла;
		Для каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл
			СтрокаТабличнойЧасти.СуммаРасходов = 0;
			СтрокаТабличнойЧасти.СуммаРасходовНДС = 0;
			СтрокаТабличнойЧасти.СуммаРасходовНСП = 0;
			СтрокаТабличнойЧасти.ЗачетНДС = Неопределено;
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьВидимостьДоступностьЭлементов();
	ОбработатьИзменениеДоговора();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Договор контрагента.
//
&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	ОбработатьИзменениеДоговора();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Основание.
//
&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Объект.Товары.Очистить();
		Объект.ОС.Очистить();
		
		ЗаполнитьПоДокументуОснования();
	КонецЕсли;	
	
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент, Объект.Организация);
	ПризнакСтраны = СтруктураДанные.ПризнакСтраны;
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура СуммаДопРасходовПриИзменении(Элемент)
	
	РассчитатьСуммыНалогов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеСтавкиНДСПриИзменении(Элемент)
	
	РассчитатьСуммыНалогов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеСтавкиНСППриИзменении(Элемент)
	
	РассчитатьСуммыНалогов();
	УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура БезналичныйРасчетПриИзменении(Элемент)
	
	Если Объект.БезналичныйРасчет Тогда
		Объект.ЗначениеСтавкиНСП = 0;
		РассчитатьСуммыНалогов();
	КонецЕсли;
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура СпособРаспределенияПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураРасходовПриИзменении(Элемент)
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Номенклатура", Объект.НоменклатураРасходов);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);

	Объект.ЗначениеСтавкиНСП = СтруктураДанные.ЗначениеСтавкиНСП;
	
	РассчитатьСуммыНалогов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля выбора Точность цены.
//
&НаКлиенте
Процедура ТочностьЦеныПриИзменении(Элемент)
	
	УстановитьФорматЦены();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеЭСФНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ТекстСообщения = НСтр("ru = 'Документ еще не записан.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	ЭСФКлиент.ПредставлениеЭСФНажатие(ПредставлениеЭСФ, ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик команды командной панели табличной части.
//
&НаКлиенте
Процедура РаспределитьРасходы(Команда)
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.СпособРаспределения) Тогда 
		ТекстСообщения = НСтр("ru = 'Не заполнен способ распределения. Распределение отменено.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.СпособРаспределения",, Отказ);
	КонецЕсли;	
	
	Если Объект.Товары.Количество() = 0 
		И Объект.ОС.Количество() = 0 Тогда  
		ТекстСообщения = НСтр("ru = 'В табличной части ""Товары"" и ""Основные средства"" нет записей. Распределение отменено.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.Товары",, Отказ);
	КонецЕсли;
	
	Если Объект.СуммаДопРасходов = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Сумма дополнительных расходов к распределению равна 0. Распределение отменено.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.СуммаДопРасходов",, Отказ);
	КонецЕсли;
	
	// Проверка заполнения колонок Количество, КоличествоДопЕдиницы и Сумма
	Если Объект.СпособРаспределения = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияДопРасходов.ПоКоличеству") Тогда 
		Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл 
			Если СтрокаТабличнойЧасти.Количество = 0 Тогда 
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнено количество в строке №%1.'"), СтрокаТабличнойЧасти.НомерСтроки);
				ПолеСообщения = СтрШаблон("Объект.Товары[%1].Количество", СтрокаТабличнойЧасти.НомерСтроки-1);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,ПолеСообщения,,Отказ);		
			КонецЕсли;	
		КонецЦикла;
		
	ИначеЕсли Объект.СпособРаспределения = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияДопРасходов.ПоДопЕдиницам") Тогда 
		Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл 
			Если СтрокаТабличнойЧасти.КоличествоДопЕдиницы = 0 Тогда 
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнено количество ДЕ в строке №%1.'"), СтрокаТабличнойЧасти.НомерСтроки);
				ПолеСообщения = СтрШаблон("Объект.Товары[%1].КоличествоДопЕдиницы", СтрокаТабличнойЧасти.НомерСтроки-1);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,ПолеСообщения,,Отказ);		
			КонецЕсли;	
		КонецЦикла;	
		
	ИначеЕсли Объект.СпособРаспределения = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияДопРасходов.ПоСумме") Тогда
		Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл 
			Если СтрокаТабличнойЧасти.Сумма = 0 Тогда 
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнена сумма в строке №%1.'"), СтрокаТабличнойЧасти.НомерСтроки);
				ПолеСообщения = СтрШаблон("Объект.Товары[%1].Сумма", СтрокаТабличнойЧасти.НомерСтроки-1);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,ПолеСообщения,,Отказ);		
			КонецЕсли;	
		КонецЦикла;	
		Для Каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл 
			Если СтрокаТабличнойЧасти.Сумма = 0 Тогда 
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнена сумма в строке №%1.'"), СтрокаТабличнойЧасти.НомерСтроки);
				ПолеСообщения = СтрШаблон("Объект.ОС[%1].Сумма", СтрокаТабличнойЧасти.НомерСтроки-1);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,ПолеСообщения,,Отказ);		
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
		
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросРаспределитьРасходы", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Сумма расходов будет распределена. Продолжить выполнение операции?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);	
КонецПроцедуры // РаспределитьРасходы()

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОтветНаВопросРаспределитьРасходы(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		РаспределитьРасходыНаСервере();
	КонецЕсли; 
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость и доступность элементов.
//
&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()
	
	ЭтоКонтрагентСЭЗ = Объект.Контрагент.СЭЗ;
	
	Элементы.ТоварыЗачетНДС.Видимость 	= ДанныеУчетнойПолитики.УказыватьПризнакЗачетаНДСПриПоступлении;
	Элементы.ОСЗачетНДС.Видимость 		= ДанныеУчетнойПолитики.УказыватьПризнакЗачетаНДСПриПоступлении;
	
	Если ПризнакСтраны = Перечисления.ПризнакиСтраны.ЕАЭС Тогда
		Элементы.БезналичныйРасчет.Видимость = Ложь;
		
		Элементы.ЗначениеСтавкиНДС.Видимость = Истина;
		Элементы.ЗначениеСтавкиНСП.Видимость = Ложь;
		Элементы.СуммаНДС.Видимость = Истина;
		Элементы.СуммаНСП.Видимость = Ложь;
		//Элементы.ЗачетНДС.Видимость = Ложь;
		
		Элементы.ТоварыСуммаРасходовНДС.Видимость 	= Истина;
		Элементы.ТоварыСуммаРасходовНСП.Видимость 	= Ложь;
		Элементы.ОССуммаРасходовНДС.Видимость 		= Истина;
		Элементы.ОССуммаРасходовНСП.Видимость 		= Ложь;
		
	ИначеЕсли ПризнакСтраны = Перечисления.ПризнакиСтраны.ИмпортЭкспорт Тогда
		Элементы.БезналичныйРасчет.Видимость = Ложь;
		
		Элементы.ЗначениеСтавкиНДС.Видимость = Ложь;
		Элементы.ЗначениеСтавкиНСП.Видимость = Ложь;
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.СуммаНСП.Видимость = Ложь;
		//Элементы.ЗачетНДС.Видимость = Ложь;
		
		Элементы.ТоварыСуммаРасходовНДС.Видимость 	= Ложь;
		Элементы.ТоварыСуммаРасходовНСП.Видимость 	= Ложь;
		Элементы.ОССуммаРасходовНДС.Видимость 		= Ложь;
		Элементы.ОССуммаРасходовНСП.Видимость 		= Ложь;
		
	Иначе // КР или не заполнен Контрагент	
		Элементы.БезналичныйРасчет.Видимость = ДанныеУчетнойПолитики.ПлательщикНСП;
		
		Элементы.ЗначениеСтавкиНДС.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС;
		Элементы.ЗначениеСтавкиНСП.Видимость = НЕ Объект.БезналичныйРасчет И ДанныеУчетнойПолитики.ПлательщикНСП;
		Элементы.СуммаНДС.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС;
		Элементы.СуммаНСП.Видимость = НЕ Объект.БезналичныйРасчет И ДанныеУчетнойПолитики.ПлательщикНСП;
		//Элементы.ЗачетНДС.Видимость = ДанныеУчетнойПолитики.УказыватьПризнакЗачетаНДСПриПоступлении И ДанныеУчетнойПолитики.ПлательщикНДС;
		
		Элементы.ТоварыСуммаРасходовНДС.Видимость 	= ДанныеУчетнойПолитики.ПлательщикНДС;
		Элементы.ТоварыСуммаРасходовНСП.Видимость 	= НЕ Объект.БезналичныйРасчет И ДанныеУчетнойПолитики.ПлательщикНСП И Объект.ЗначениеСтавкиНСП > 0;
		Элементы.ОССуммаРасходовНДС.Видимость 		= ДанныеУчетнойПолитики.ПлательщикНДС;
		Элементы.ОССуммаРасходовНСП.Видимость 		= НЕ Объект.БезналичныйРасчет И ДанныеУчетнойПолитики.ПлательщикНСП И Объект.ЗначениеСтавкиНСП > 0;
	КонецЕсли;	
		
	Если Объект.ЭтоПоступлениеБезНДС
		Или Объект.ЭтоПоступлениеПоЧеку
		Или ПризнакСтраны = Перечисления.ПризнакиСтраны.ЕАЭС Тогда 
		Элементы.ПредставлениеЭСФ.Видимость = Ложь;
	Иначе 
		Элементы.ПредставлениеЭСФ.Видимость = Истина;
	КонецЕсли;	
	
	Если Объект.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоДопЕдиницам Тогда
		Элементы.ТоварыКоличествоДопЕдиницы.Видимость = Истина;
		Элементы.ТоварыКоличество.Видимость = Ложь;
	Иначе
		Элементы.ТоварыКоличествоДопЕдиницы.Видимость = Ложь;
		Элементы.ТоварыКоличество.Видимость = Истина;
	КонецЕсли;	

КонецПроцедуры 

// Процедура устанавливает текущую страницу при открытии формы.
//
&НаКлиенте
Процедура УстановитьТекущуюСтраницу()	
	Если Объект.Товары.Количество() > 0 Тогда 
		Возврат;
	ИначеЕсли Объект.ОС.Количество() > 0 Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаОС;
	КонецЕсли;	
КонецПроцедуры

// Процедура устанавливает функциональные опции формы документа.
//
&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма, Объект.Организация, ДатаДокумента);
КонецПроцедуры

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением, ВалютаДокумента)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением);
	ВалютаКурсКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДатаНовая);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат);
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		ВалютаКурсКратность);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура - Установить пиктограмму комментария.
//
&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

// Получает набор данных с сервера для процедуры КонтрагентПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Контрагент, Организация)
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Контрагент, Организация);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ДоговорКонтрагента",
		ДоговорПоУмолчанию);
		
	СтруктураДанные.Вставить(
		"ПризнакСтраны",
		Контрагент.ПризнакСтраны);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

// Получает набор данных с сервера для процедуры ДоговорКонтрагентаПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(Период, ВалютаДокумента, ДоговорКонтрагента)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		ДоговорКонтрагента.ВалютаРасчетов);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаРасчетов, Период));
	
	СтруктураДанные.Вставить(
		"СуммаВключаетНалоги",
		ДоговорКонтрагента.СуммаВключаетНалоги);
	
	СчетаУчета = БухгалтерскийУчетСервер.ПолучитьСчетаРасчетовСКонтрагентом(ДоговорКонтрагента.Организация, ДоговорКонтрагента.Владелец, ДоговорКонтрагента);
	СтруктураДанные.Вставить(
		"СчетРасчетов",
		СчетаУчета.СчетРасчетовПоставщика);
		
	ЗначенияСтавокНДСиНСП = УчетНДС.ПолучитьЗначенияСтавокНДСиНСП(Период, ДоговорКонтрагента); 
	
	СтруктураДанные.Вставить(
		"ЗначениеСтавкиНДС",
		ЗначенияСтавокНДСиНСП.ЗначениеСтавкиНДС);
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорКонтрагентаПриИзменении()

// Получает ДоговорКонтрагента по умолчанить в зависимости от способа ведения расчетов.
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация)
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ВидыДоговораДляДокумента(Документ);
	ДоговорКонтрагентаПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорКонтрагентаПоУмолчанию;
	
КонецФункции

// Выполняет действия при изменении договора контрагента.
//
&НаКлиенте
Процедура ОбработатьИзменениеДоговора(МодифицированДоговор = Ложь)
	
	СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(ДатаДокумента, Объект.ВалютаДокумента, Объект.ДоговорКонтрагента);

	// Обработка изменения валюты
	Объект.ВалютаДокумента = СтруктураДанные.ВалютаРасчетов;
	Объект.Курс      = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
	Объект.Кратность = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
	
	// Обработка изменения налогообложения
	Объект.СуммаВключаетНалоги = СтруктураДанные.СуммаВключаетНалоги;
	
	ИмпортЭкспорт = ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ИмпортЭкспорт")
					ИЛИ ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	Если ДанныеУчетнойПолитики.ПлательщикНДС И НЕ ИмпортЭкспорт Тогда
		Объект.ЗначениеСтавкиНДС = СтруктураДанные.ЗначениеСтавкиНДС;
	Иначе
		Объект.ЗначениеСтавкиНДС = 0;		
	КонецЕсли;
	
	// Обработка изменения отражения в учете
	Объект.СчетРасчетов = СтруктураДанные.СчетРасчетов;
	
	РассчитатьСуммыНалогов();
КонецПроцедуры

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	// Значение Ставки НСП.
	СтруктураДанные.Вставить("ЗначениеСтавкиНСП", СтруктураДанные.Номенклатура.ЗначениеСтавкиНСП);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаСервере
Процедура ЗаполнитьПоДокументуОснования()

	ДокументОбъект = РеквизитФормыВЗначение("Объект");	
	ДокументОбъект.ЗаполнитьПоДополнительнымРасходам(Объект.ДокументОснование);		
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");	

КонецПроцедуры

// Процедура - Распределить расходы
//
&НаСервере
Процедура РаспределитьРасходыНаСервере()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.РаспределитьРасходы();
	ЗначениеВРеквизитФормы(Документ, "Объект");	
	Модифицированность = Истина;
	
КонецПроцедуры // РаспределитьТабЧастьРасходыПоКоличеству()

&НаКлиенте
Процедура РассчитатьСуммыНалогов()

	Если ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС") Тогда
		Объект.СуммаНДС = Объект.СуммаДопРасходов * Объект.ЗначениеСтавкиНДС / 100;
	Иначе			
		Объект.СуммаНДС = Объект.СуммаДопРасходов * Объект.ЗначениеСтавкиНДС / (100 + Объект.ЗначениеСтавкиНДС + Объект.ЗначениеСтавкиНСП);
		Объект.СуммаНСП = Объект.СуммаДопРасходов * Объект.ЗначениеСтавкиНСП / (100 + Объект.ЗначениеСтавкиНДС + Объект.ЗначениеСтавкиНСП);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеУчетнойПолитики()
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры 

// Процедура заполняет список выбора Точность цены
//
&НаСервере
Процедура ЗаполнитьСписокВыбораТочностьЦены()

	Элементы.ТочностьЦены.СписокВыбора.Очистить();

	ЗначенияТочностиЦены = Ценообразование.ЗначенияТочностиЦены();
	Для Каждого ЗначениеТочностиЦены Из ЗначенияТочностиЦены Цикл 
		Элементы.ТочностьЦены.СписокВыбора.Добавить(ЗначениеТочностиЦены.Значение, ЗначениеТочностиЦены.Представление);
	КонецЦикла;	

КонецПроцедуры // ЗаполнитьСписокВыбораТочностьЦены()

// Процедура устанавливает формат и формат редактирования элементов "Цена" в ТЧ "Товары" и "Услуги"
//
&НаКлиенте
Процедура УстановитьФорматЦены()

	ФорматЦены = ЦенообразованиеКлиент.ФорматЦены(Объект.ТочностьЦены);
	
	Элементы.ТоварыЦена.ФорматРедактирования = ФорматЦены;
	Элементы.ТоварыЦена.Формат = ФорматЦены;

	Элементы.Товары.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьПредставлениеЭСФ()
	СведенияОбЭСФ = ЭСФСервер.СведенияОбЭСФПоДокументуОснованию(Объект.Организация, Объект.Ссылка, НСтр("ru = 'Создать новый ЭСФ (полученный)'"));
	ПредставлениеЭСФ = СведенияОбЭСФ.ПредставлениеЭСФ;
КонецПроцедуры

#КонецОбласти

#Область КопированиеСтрокТабличныхЧастей

&НаКлиенте
Процедура ТоварыКопироватьСтроки(Команда)
	
	КопироватьСтроки("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВставитьСтроки(Команда)
	
	ВставитьСтроки("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСтроки(ИмяТЧ)
	
	Если КопированиеТабличнойЧастиКлиент.МожноКопироватьСтроки(Объект[ИмяТЧ], Элементы[ИмяТЧ].ТекущиеДанные) Тогда
		КоличествоСкопированных = 0;
		КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных);
		КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСкопированных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(ИмяТЧ)
	
	КоличествоСкопированных = 0;
	КоличествоВставленных = 0;
	ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных);
	КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных)
	
	КопированиеТабличнойЧастиСервер.Копировать(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки, КоличествоСкопированных);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных)
	
	КопированиеТабличнойЧастиСервер.Вставить(Объект, ИмяТЧ, Элементы, КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
