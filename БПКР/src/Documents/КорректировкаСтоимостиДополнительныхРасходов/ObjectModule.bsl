#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ЗаполненияДокумента

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.ПоступлениеТоваровУслуг - Данные заполнения документа.
//	
Процедура ЗаполнитьПоДополнительнымРасходам(ДанныеЗаполнения) Экспорт
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	
	ДокументОснование = ДанныеЗаполнения;
	Дата = ТекущаяДатаСеанса();
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Товары Цикл
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.ОС Цикл
		НоваяСтрока = ОС.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.ДополнительныеРасходы")] = "ЗаполнитьПоДополнительнымРасходам";
	
	ЗаполнениеОбъектовБП.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);

КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	МассивНепроверяемыхРеквизитов = Новый Массив;

	СуммаРезультатРаспределения = Товары.Итог("СуммаРасходов") + ОС.Итог("СуммаРасходов");
	
	СуммаРезультатРаспределенияССуммойНДС = СуммаРезультатРаспределения + СуммаНДС + СуммаНСП;
	
	Если НЕ СуммаРезультатРаспределенияССуммойНДС = СуммаДопРасходов Тогда
		ТекстСообщения = НСтр("ru = 'Сумма расходов не равна распределенной сумме по товарам и основным средствам.
			|Сумма расходов к распределению: %1.
			|Сумма результат распределения: %2.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, СуммаДопРасходов, СуммаДопРасходов);	
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЕсли;

	Если Курс = 0 Или Кратность = 0 Тогда 
		ТекстСообщения = НСтр("ru = 'Не заполнен курс валюты ""%1"". Откройте список валют (Банк и касса - Валюты) и проверьте,
			|что у валюты ""%1"" установлен курс на дату %2 или ранее.
			|Перевыберите договор и заново проведите документ.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ВалютаДокумента, Формат(Дата, "ДЛФ=D"));	
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЕсли;

	Если СуммаНДС = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СуммаРасходовНДС");
		МассивНепроверяемыхРеквизитов.Добавить("ОС.СуммаРасходовНДС");
	КонецЕсли;
	
	Если СуммаНСП = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СуммаРасходовНСП");
		МассивНепроверяемыхРеквизитов.Добавить("ОС.СуммаРасходовНСП");
	КонецЕсли;	

	ОбщегоНазначенияБПСервер.ДобавитьНепроверяемыеРеквизитыПоПараметрамФункциональныхОпций(МассивНепроверяемыхРеквизитов, Организация, Дата);
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	ВыполнитьПредварительныйКонтроль(Отказ);
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СуммаДокумента = СуммаДопРасходов;
	
	// Заполнение документа основания для возможности изменения настройки.
	Если ПолучитьФункциональнуюОпцию("ДопРасходыНаОдноПоступление") Тогда 
		Для Каждого СтрокаТабличнойЧасти Из Товары Цикл 
			СтрокаТабличнойЧасти.ДокументПоступления = ДокументОснование;	
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ИнициализироватьДанные(Отказ, РежимПроведения);
	
	ОтразитьДвижения(Отказ, РежимПроведения);
	
	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииОбработкаПроведения

// Процедура инициализирует данные документа
// и подготавливает таблицы для движения в регистры
//
Процедура ИнициализироватьДанные(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.КорректировкаСтоимостиДополнительныхРасходов.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
КонецПроцедуры
	
// Процедура заполняет регистры данными
//
Процедура ОтразитьДвижения(Отказ, РежимПроведения)

	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьПоступлениеТоваров(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьСведенияОПоступлении(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьРеестрПриобретенныхМатериальныхРесурсов(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьРеестрЗакупок(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьПараметрыУчетаОС(ДополнительныеСвойства, Движения, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет распределение затрат по количеству.
//
Процедура РаспределитьРасходы() Экспорт	
	
	Если СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоКоличеству Тогда 
		
		КоэффициентыРаспределенияВКолонкеТовары = Товары.ВыгрузитьКолонку("Количество");
		КоэффициентыРаспределенияВКолонкеОС = ОС.ВыгрузитьКолонку("Количество");
		
		ТоварыИтог = Товары.Итог("Количество");
		ОСИтог = ОС.Итог("Количество");
		
	ИначеЕсли СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоСумме Тогда	
		
		КоэффициентыРаспределенияВКолонкеТовары = Товары.ВыгрузитьКолонку("Сумма");
		КоэффициентыРаспределенияВКолонкеОС = ОС.ВыгрузитьКолонку("Сумма");
		
		ТоварыИтог = Товары.Итог("Сумма");
		ОСИтог = ОС.Итог("Сумма");
		
	ИначеЕсли СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоДопЕдиницам Тогда	
		
		КоэффициентыРаспределенияВКолонкеТовары = Товары.ВыгрузитьКолонку("КоличествоДопЕдиницы");
		КоэффициентыРаспределенияВКолонкеОС = ОС.ВыгрузитьКолонку("КоличествоДопЕдиницы");
		
		ТоварыИтог = Товары.Итог("КоличествоДопЕдиницы");
		ОСИтог = ОС.Итог("КоличествоДопЕдиницы");
	КонецЕсли;
	
	МассивОбщихСумм = Новый Массив;
	МассивОбщихСумм.Добавить(ТоварыИтог);
	МассивОбщихСумм.Добавить(ОСИтог);
	
	// Сумма
	Если НЕ СуммаДопРасходов = 0 Тогда 
		МассивРаспределениеМеждуТабличнымиЧастями = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаДопРасходов - СуммаНДС - СуммаНСП, МассивОбщихСумм, 2);
		СуммаРасходовТовары 				= МассивРаспределениеМеждуТабличнымиЧастями[0];
		СуммаРасходовОС 					= МассивРаспределениеМеждуТабличнымиЧастями[1];
		МассивСуммРаспределенияТовары		= ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаРасходовТовары, КоэффициентыРаспределенияВКолонкеТовары, 2);
		МассивСуммРаспределенияОС			= ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаРасходовОС, КоэффициентыРаспределенияВКолонкеОС, 2);
	КонецЕсли;	
	
	// НДС
	Если НЕ СуммаНДС = 0 Тогда 
		МассивРаспределениеМеждуТабличнымиЧастями = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаНДС, МассивОбщихСумм, 2);
		СуммаРасходовНДСТовары 				= МассивРаспределениеМеждуТабличнымиЧастями[0];
		СуммаРасходовНДСОС 					= МассивРаспределениеМеждуТабличнымиЧастями[1];
		МассивСуммРаспределенияНДСТовары	= ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаРасходовНДСТовары, КоэффициентыРаспределенияВКолонкеТовары, 2);
		МассивСуммРаспределенияНДСОС		= ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаРасходовНДСОС, КоэффициентыРаспределенияВКолонкеОС, 2);
	КонецЕсли;
	
	// НСП
	Если НЕ СуммаНСП = 0 Тогда 
		МассивРаспределениеМеждуТабличнымиЧастями = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаНСП, МассивОбщихСумм, 2);
		СуммаРасходовНСПТовары 				= МассивРаспределениеМеждуТабличнымиЧастями[0];
		СуммаРасходовНСПОС 					= МассивРаспределениеМеждуТабличнымиЧастями[1];
		МассивСуммРаспределенияНСПТовары	= ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаРасходовНСПТовары, КоэффициентыРаспределенияВКолонкеТовары, 2);
		МассивСуммРаспределенияНСПОС		= ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаРасходовНСПОС, КоэффициентыРаспределенияВКолонкеОС, 2);
	КонецЕсли;
	
	// Заполнение разультатов
	Если НЕ МассивСуммРаспределенияТовары = Неопределено Тогда
		Товары.ЗагрузитьКолонку(МассивСуммРаспределенияТовары, "СуммаРасходов");	
	КонецЕсли;
	
	Если НЕ МассивСуммРаспределенияНДСТовары = Неопределено Тогда 
		Товары.ЗагрузитьКолонку(МассивСуммРаспределенияНДСТовары, "СуммаРасходовНДС");
	КонецЕсли;
	
	Если НЕ МассивСуммРаспределенияНСПТовары = Неопределено Тогда 
		Товары.ЗагрузитьКолонку(МассивСуммРаспределенияНСПТовары, "СуммаРасходовНСП");
	КонецЕсли;

	Если НЕ МассивСуммРаспределенияОС = Неопределено Тогда	
		ОС.ЗагрузитьКолонку(МассивСуммРаспределенияОС, "СуммаРасходов");
	КонецЕсли;	
	
	Если НЕ МассивСуммРаспределенияНДСОС = Неопределено Тогда 
		ОС.ЗагрузитьКолонку(МассивСуммРаспределенияНДСОС, "СуммаРасходовНДС");
	КонецЕсли;
	
	Если НЕ МассивСуммРаспределенияНСПОС = Неопределено Тогда 
		ОС.ЗагрузитьКолонку(МассивСуммРаспределенияНСПОС, "СуммаРасходовНСП");
	КонецЕсли;	
КонецПроцедуры // РаспределитьРасходы()

Процедура ВыполнитьПредварительныйКонтроль(Отказ)

	Если НЕ Контрагент = ДокументОснование.Контрагент Тогда
		ТекстСообщения = НСтр("ru = 'Контрагент в текущем документе отличается от контрагента в документе основания.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "Объект.Контрагент",, Отказ);	
	КонецЕсли;
		
	Если НЕ ДоговорКонтрагента = ДокументОснование.ДоговорКонтрагента Тогда
		ТекстСообщения = НСтр("ru = 'Договор в текущем документе отличается от договора в документе основания.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "Объект.ДоговорКонтрагента",, Отказ);	
	КонецЕсли;
	
	Если НЕ БезналичныйРасчет = ДокументОснование.БезналичныйРасчет Тогда
		ТекстСообщения = НСтр("ru = 'Безналичный расчет в текущем документе отличается от безналичного расчета в документе основания.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "Объект.БезналичныйРасчет",, Отказ);	
	КонецЕсли;
	
	Если НЕ ЗначениеСтавкиНДС = ДокументОснование.ЗначениеСтавкиНДС Тогда
		ТекстСообщения = НСтр("ru = 'Значение ставки НДС в текущем документе отличается от значения ставки НДС в документе основания.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "Объект.ЗначениеСтавкиНДС",, Отказ);	
	КонецЕсли;
	
	Если НЕ ЗначениеСтавкиНСП = ДокументОснование.ЗначениеСтавкиНСП Тогда
		ТекстСообщения = НСтр("ru = 'Значение ставки НСП в текущем документе отличается от значения ставки НСП в документе основания.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "Объект.ЗначениеСтавкиНСП",, Отказ);	
	КонецЕсли;
	
	Если СуммаДопРасходов < 0 Тогда		
		КонтрольТабличныхЧастей(Отказ);
	КонецЕсли;	
КонецПроцедуры

Процедура КонтрольТабличныхЧастей(Отказ)

	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.СчетУчета КАК СчетУчета,
		|	Товары.СуммаРасходов КАК СуммаРасходов,
		|	Товары.СуммаРасходовНДС КАК СуммаРасходовНДС,
		|	Товары.СуммаРасходовНСП КАК СуммаРасходовНСП
		|ПОМЕСТИТЬ ВременнаяТаблицаТовары
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ДополнительныеРасходыТовары.Номенклатура, НЕОПРЕДЕЛЕНО) КАК НоменклатураДопРасхода,
		|	ЕСТЬNULL(ВременнаяТаблицаТовары.Номенклатура, НЕОПРЕДЕЛЕНО) КАК Номенклатура,
		|	ЕСТЬNULL(ВременнаяТаблицаТовары.СчетУчета, НЕОПРЕДЕЛЕНО) КАК СчетУчета
		|ИЗ
		|	Документ.ДополнительныеРасходы.Товары КАК ДополнительныеРасходыТовары
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ПО ДополнительныеРасходыТовары.Номенклатура = ВременнаяТаблицаТовары.Номенклатура
		|		И ДополнительныеРасходыТовары.СчетУчета = ВременнаяТаблицаТовары.СчетУчета
		|ГДЕ
		|	ДополнительныеРасходыТовары.Ссылка = &ДокументОснование
		|	И (ДополнительныеРасходыТовары.Номенклатура ЕСТЬ NULL
		|		ИЛИ ЕСТЬNULL(ДополнительныеРасходыТовары.СуммаРасходов, 0) < ЕСТЬNULL(-ВременнаяТаблицаТовары.СуммаРасходов, 0)
		|		ИЛИ ЕСТЬNULL(ДополнительныеРасходыТовары.СуммаРасходовНДС, 0) < ЕСТЬNULL(-ВременнаяТаблицаТовары.СуммаРасходовНДС, 0)
		|		ИЛИ ЕСТЬNULL(ДополнительныеРасходыТовары.СуммаРасходовНСП, 0) < ЕСТЬNULL(-ВременнаяТаблицаТовары.СуммаРасходовНСП, 0))";
	Запрос.УстановитьПараметр("Товары", 			Товары);
	Запрос.УстановитьПараметр("ДокументОснование", 	ДокументОснование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.НоменклатураДопРасхода = Неопределено Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе основания нет товара %1 и счетом учета %2.'"),
								Выборка.Номенклатура, Выборка.СчетУчета);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		Иначе
			ТекстСообщения = СтрШаблон(НСтр("ru = 'На закладке ""Товары"" у номенклатуры %1 с счетом учета %2 корректировка по суммам превышает суммы из основания.'"),
								Выборка.Номенклатура, Выборка.СчетУчета);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;	
	КонецЦикла;		

	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ОС.СуммаРасходов КАК СуммаРасходов,
		|	ОС.СуммаРасходовНДС КАК СуммаРасходовНДС,
		|	ОС.СуммаРасходовНСП КАК СуммаРасходовНСП
		|ПОМЕСТИТЬ ВременнаяТаблицаОС
		|ИЗ
		|	&ОС КАК ОС
		|;
		|
		|////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ДополнительныеРасходыОС.ОсновноеСредство, НЕОПРЕДЕЛЕНО) КАК ОсновноеСредствоДопРасхода,
		|	ЕСТЬNULL(ВременнаяТаблицаОС.ОсновноеСредство, НЕОПРЕДЕЛЕНО) КАК ОсновноеСредство
		|ИЗ
		|	Документ.ДополнительныеРасходы.ОС КАК ДополнительныеРасходыОС
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ПО ДополнительныеРасходыОС.ОсновноеСредство = ВременнаяТаблицаОС.ОсновноеСредство
		|ГДЕ
		|	ДополнительныеРасходыОС.Ссылка = &ДокументОснование
		|	И (ДополнительныеРасходыОС.ОсновноеСредство ЕСТЬ NULL
		|		ИЛИ ЕСТЬNULL(ДополнительныеРасходыОС.СуммаРасходов, 0) < ЕСТЬNULL(-ВременнаяТаблицаОС.СуммаРасходов, 0)
		|		ИЛИ ЕСТЬNULL(ДополнительныеРасходыОС.СуммаРасходовНДС, 0) < ЕСТЬNULL(-ВременнаяТаблицаОС.СуммаРасходовНДС, 0)
		|		ИЛИ ЕСТЬNULL(ДополнительныеРасходыОС.СуммаРасходовНСП, 0) < ЕСТЬNULL(-ВременнаяТаблицаОС.СуммаРасходовНСП, 0))";
	Запрос.УстановитьПараметр("ОС", 				ОС);
	Запрос.УстановитьПараметр("ДокументОснование", 	ДокументОснование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ОсновноеСредствоДопРасхода = Неопределено Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе основания нет ОС %1.'"), Выборка.ОсновноеСредство);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		Иначе
			ТекстСообщения = СтрШаблон(НСтр("ru = 'На закладке ""Основные средства"" у ОС %1 корректировка по суммам превышает суммы из основания.'"),
								Выборка.ОсновноеСредство);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли