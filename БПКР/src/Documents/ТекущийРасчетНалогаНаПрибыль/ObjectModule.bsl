#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнениеОбъектовБП.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения);
	Дата = ?(ЗначениеЗаполнено(Дата), КонецКвартала(Дата), КонецКвартала(ТекущаяДатаСеанса()));
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ИнициализироватьДанные(Отказ, РежимПроведения);
	
	ОтразитьДвижения(Отказ, РежимПроведения);
	
	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	// Предварительный контроль
	ВыполнитьПредварительныйКонтроль(Отказ);	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииОбработкаПроведения

// Процедура инициализирует данные документа
// и подготавливает таблицы для движения в регистры
//
Процедура ИнициализироватьДанные(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.ТекущийРасчетНалогаНаПрибыль.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
КонецПроцедуры
	
// Процедура заполняет регистры данными
//
Процедура ОтразитьДвижения(Отказ, РежимПроведения)

	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьПлатежиПоНалогуНаПрибыль(ДополнительныеСвойства, Движения, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет контроль противоречий.
//
Процедура ВыполнитьПредварительныйКонтроль(Отказ) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПлатежиПоНалогуНаПрибыль.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.ПлатежиПоНалогуНаПрибыль КАК ПлатежиПоНалогуНаПрибыль
		|ГДЕ
		|	ПлатежиПоНалогуНаПрибыль.Организация = &Организация
		|	И ПлатежиПоНалогуНаПрибыль.Период = &Период
		|	И НЕ ПлатежиПоНалогуНаПрибыль.Регистратор = &Ссылка";
	Запрос.УстановитьПараметр("Организация", Организация);		
	Запрос.УстановитьПараметр("Период", КонецКвартала(Дата));		
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Дублирование документа.
	Если НЕ МассивРезультатов[0].Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'Для указанного периода существует проведенный документ ""Текущий расчет налога на прибыль"".'");
		БухгалтерскийУчетСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения,,,, Отказ);	    
	КонецЕсли;
	
КонецПроцедуры

// Процедура производит расчет суммы начисления налога на прибыль
//
Процедура Рассчитать() Экспорт 
	
	// Список временных счетов, за исключением СводДоходовИРасходов (5999).
	// Обороты Дт
	// Обороты Кт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет,
		|	Хозрасчетный.Вид КАК Вид
		|ПОМЕСТИТЬ ВременнаяТаблицаСписокСчетов
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Временный
		|	И НЕ Хозрасчетный.Ссылка = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СводДоходовИРасходов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОборотыДтКт.СчетДт КАК Счет,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаСписокСчетов.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
		|			ТОГДА ВЫБОР
		|					КОГДА ХозрасчетныйОборотыДтКт.СуммаОборот < 0
		|						ТОГДА -ХозрасчетныйОборотыДтКт.СуммаОборот
		|					ИНАЧЕ ХозрасчетныйОборотыДтКт.СуммаОборот
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаДоходов,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаСписокСчетов.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
		|			ТОГДА ВЫБОР
		|					КОГДА ХозрасчетныйОборотыДтКт.СуммаОборот < 0
		|						ТОГДА -ХозрасчетныйОборотыДтКт.СуммаОборот
		|					ИНАЧЕ ХозрасчетныйОборотыДтКт.СуммаОборот
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаРасходов
		|ПОМЕСТИТЬ ВременнаяТаблицаОбороты
		|ИЗ
		|	ВременнаяТаблицаСписокСчетов КАК ВременнаяТаблицаСписокСчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		|				&НачалоПериода,
		|				&КонецПериода,
		|				,
		|				СчетДт В
		|						(ВЫБРАТЬ
		|							ВременнаяТаблицаСписокСчетов.Счет КАК Ссылка
		|						ИЗ
		|							ВременнаяТаблицаСписокСчетов КАК ВременнаяТаблицаСписокСчетов)
		|					И СчетДт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СводДоходовИРасходов),
		|				,
		|				СчетКт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СводДоходовИРасходов),
		|				,
		|				Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		|		ПО ВременнаяТаблицаСписокСчетов.Счет = ХозрасчетныйОборотыДтКт.СчетДт
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОборотыДтКт.СчетКт,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаСписокСчетов.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
		|			ТОГДА ВЫБОР
		|					КОГДА ХозрасчетныйОборотыДтКт.СуммаОборот < 0
		|						ТОГДА -ХозрасчетныйОборотыДтКт.СуммаОборот
		|					ИНАЧЕ ХозрасчетныйОборотыДтКт.СуммаОборот
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаСписокСчетов.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
		|			ТОГДА ВЫБОР
		|					КОГДА ХозрасчетныйОборотыДтКт.СуммаОборот < 0
		|						ТОГДА -ХозрасчетныйОборотыДтКт.СуммаОборот
		|					ИНАЧЕ ХозрасчетныйОборотыДтКт.СуммаОборот
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ
		|ИЗ
		|	ВременнаяТаблицаСписокСчетов КАК ВременнаяТаблицаСписокСчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		|				&НачалоПериода,
		|				&КонецПериода,
		|				,
		|				СчетДт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СводДоходовИРасходов),
		|				,
		|				СчетКт В
		|						(ВЫБРАТЬ
		|							ВременнаяТаблицаСписокСчетов.Счет КАК Ссылка
		|						ИЗ
		|							ВременнаяТаблицаСписокСчетов КАК ВременнаяТаблицаСписокСчетов)
		|					И СчетКт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СводДоходовИРасходов),
		|				,
		|				Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		|		ПО ВременнаяТаблицаСписокСчетов.Счет = ХозрасчетныйОборотыДтКт.СчетКт
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ЕСТЬNULL(ВременнаяТаблицаОбороты.СуммаДоходов, 0)) КАК СуммаДоходов,
		|	СУММА(ЕСТЬNULL(ВременнаяТаблицаОбороты.СуммаРасходов, 0)) КАК СуммаРасходов
		|ИЗ
		|	ВременнаяТаблицаОбороты КАК ВременнаяТаблицаОбороты";
	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(Дата));
	Запрос.УстановитьПараметр("КонецПериода", КонецКвартала(Дата));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	СуммаДоходов = ВыборкаДетальныеЗаписи.СуммаДоходов;
	СуммаРасходов = ВыборкаДетальныеЗаписи.СуммаРасходов;
	База = СуммаДоходов - СуммаРасходов;
	База = ?(База < 0, 0, База);

	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(Дата, Организация);
	СтавкаНалогаНаПрибыль = ДанныеУчетнойПолитики.СтавкаНалогаНаПрибыль;
	
	СуммаНП = ?(База = 0, 0, База * СтавкаНалогаНаПрибыль / 100);
	
	СуммаНППредыдущийКвартал = 0;
	
	// Если это не первый квартал, то нужно получить расчет за предыдущий.
	// Выбираются записи только текущего года.
	Если НЕ НачалоГода(Дата) = НачалоКвартала(Дата) Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПлатежиПоНалогуНаПрибыльСрезПоследних.Сумма КАК Сумма,
			|	ПлатежиПоНалогуНаПрибыльСрезПоследних.Регистратор.Дата КАК ДатаДокумента
			|ИЗ
			|	РегистрСведений.ПлатежиПоНалогуНаПрибыль.СрезПоследних(
			|			&Период,
			|			Организация = &Организация
			|				И НАЧАЛОПЕРИОДА(Период, ГОД) = НАЧАЛОПЕРИОДА(&Период, ГОД)
			|				И НЕ Регистратор = &Ссылка) КАК ПлатежиПоНалогуНаПрибыльСрезПоследних";
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Период", КонецКвартала(Дата));
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ПериодПредКвартала = НачалоКвартала(Дата)-1;
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
			СуммаНППредыдущийКвартал = ВыборкаДетальныеЗаписи.Сумма;
			
			// Проверка корректности суммы, если документа за предыдущий квартал не было
			Если Не КонецМесяца(ВыборкаДетальныеЗаписи.ДатаДокумента) = КонецМесяца(ПериодПредКвартала) Тогда
				ТекстСообщения = НСтр("ru = 'Нет документа за предыдущий квартал, сумма в ячейке "" текущий НП (пред/кв)"" не корректна"".'");
				БухгалтерскийУчетСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения,,,, );	    
			КонецЕсли; 
		Иначе // Проверка корректности суммы, если вообще нет записей в РС
			ТекстСообщения = НСтр("ru = 'Нет документа за предыдущий квартал, сумма в ячейке "" текущий НП (пред/кв)"" не корректна"".'");
			БухгалтерскийУчетСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения,,,, );	
		КонецЕсли;
	КонецЕсли;	
	
	СуммаНачислено = СуммаНП - СуммаНППредыдущийКвартал;	
КонецПроцедуры 

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли