
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка реквизитов формы.	
	ДатаДокумента = Объект.Дата;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();	
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	
	ПризнакСтраны = Объект.Контрагент.ПризнакСтраны;
	
	УстановитьФункциональныеОпцииФормы();

	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	
	ПолучитьПредставлениеЭСФ();
	
	Если ПолучитьФункциональнуюОпцию("УказыватьТочностьЦены") Тогда 
		ЗаполнитьСписокВыбораТочностьЦены();	
	КонецЕсли;	

	// ГрупповоеИзменениеСтрок
	ЗаполнитьСписокДействий("Товары");
	ГрупповоеИзменениеСтрокСервер.ПриСозданииНаСервере(НаборЭлементовГрупповогоИзмененияСтрокСервер("Товары"), ЭтотОбъект.ИзменениеСтрокТоварыДействие);
	ИзменениеСтрокТоварыДействиеПриОткрытии = ИзменениеСтрокТоварыДействие;
	УстановитьПометку("Товары", Истина);
	
	ЗаполнитьСписокДействий("Услуги");
	ГрупповоеИзменениеСтрокСервер.ПриСозданииНаСервере(НаборЭлементовГрупповогоИзмененияСтрокСервер("Услуги"), ЭтотОбъект.ИзменениеСтрокУслугиДействие);
	ИзменениеСтрокУслугиДействиеПриОткрытии = ИзменениеСтрокУслугиДействие;
	УстановитьПометку("Услуги", Истина);

	ЗаполнитьСписокДействий("ОС");
	ГрупповоеИзменениеСтрокСервер.ПриСозданииНаСервере(НаборЭлементовГрупповогоИзмененияСтрокСервер("ОС"), ЭтотОбъект.ИзменениеСтрокОСДействие);
	ИзменениеСтрокОСДействиеПриОткрытии = ИзменениеСтрокОСДействие;
	УстановитьПометку("ОС", Истина);
	// Конец ГрупповоеИзменениеСтрок
	
	// КопированиеСтрокТабличныхЧастей
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСервере(Элементы, "Товары");
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСервере(Элементы, "Услуги");
	// Конец КопированиеСтрокТабличныхЧастей
	
	// РаботаСФормами
	РаботаСФормамиСервер.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды	
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом 
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьТекущуюСтраницу();
	ОбновитьПодвалФормы();	         
	УстановитьФорматЦены();
	
	// ГрупповоеИзменениеСтрок
	ОпределитьОбъектИзменений("Товары");
	ОпределитьОбъектИзменений("Услуги");
	ОпределитьОбъектИзменений("ОС");
	// Конец ГрупповоеИзменениеСтрок

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
КонецПроцедуры

// Процедура - обработчик события ПриЗакрытии.
//
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		// ГрупповоеИзменениеСтрок
		СохранитьТекущееДействиеИзмененияСтрок();
		// Конец ГрупповоеИзменениеСтрок
	КонецЕсли;
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "МодифицированДоговораКонтрагента"
		И Параметр = Объект.ДоговорКонтрагента Тогда
		ОбработатьИзменениеДоговора(Истина);
		
	ИначеЕсли ИмяСобытия = "ЭлектронныйСчетФактураВыписанныйПослеЗаписи"
		И НЕ Параметр.Найти(Объект.Ссылка) = Неопределено Тогда  
		
		ПолучитьПредставлениеЭСФ();

	Иначе 
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Товары");
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Услуги");
	КонецЕсли;
	// Конец КопированиеСтрокТабличныхЧастей
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			// Преобразуем предварительно к ожидаемому формату.
			Если Параметр[1] = Неопределено Тогда
				ТекШтрихкод = Параметр[0]; // Достаем штрихкод из основных данных
			Иначе
				ТекШтрихкод = Параметр[1][1]; // Достаем штрихкод из дополнительных данных
			КонецЕсли;
			
			Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаТовары Тогда 
				ПоискПоШтрихкодуЗавершение(ТекШтрихкод, Новый Структура("ТекШтрихкод, ИмяТабличнойЧасти", ТекШтрихкод, "Товары"));
			ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУслуги Тогда
				ПоискПоШтрихкодуЗавершение(ТекШтрихкод, Новый Структура("ТекШтрихкод, ИмяТабличнойЧасти", ТекШтрихкод, "Услуги"));
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если НЕ ВладелецФормы = Неопределено Тогда		
		Если ТипЗнч(ВладелецФормы) = Тип("ФормаКлиентскогоПриложения") Тогда
		
			ЗакрыватьПриВыборе = Ложь;
			
			СтруктураОповещения = Новый Структура();
			СтруктураОповещения.Вставить("Ссылка", Объект.Ссылка);   
			СтруктураОповещения.Вставить("Представление", Строка(Объект.Ссылка));
			
			Если СтрНайти(ВладелецФормы.ИмяФормы, "ФормаДокумента") <> 0    
				И ВладелецФормы.Объект.Ссылка = Объект.ДокументОснование Тогда
				
				ОповеститьОВыборе(СтруктураОповещения);			
			Иначе			
				Оповестить("СозданаРеализацияДляДвиженияМБП", СтруктураОповещения);
			КонецЕсли; 
		КонецЕсли;	
	Иначе
		Оповестить("СозданаРеализацияДляДвиженияМБП", СтруктураОповещения);		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	
	// ГрупповоеИзменениеСтрок
	Если Элементы.ГруппаИзменениеСтрокТовары.Видимость Тогда
		УстановитьПометку("Товары", Истина);
	КонецЕсли;
	
	Если Элементы.ГруппаИзменениеСтрокУслуги.Видимость Тогда
		УстановитьПометку("Услуги", Истина);
	КонецЕсли;
	
	Если Элементы.ГруппаИзменениеСтрокОС.Видимость Тогда
		УстановитьПометку("ОС", Истина);
	КонецЕсли;
	// Конец ГрупповоеИзменениеСтрок
	
	// РаботаСФормами
	РаботаСФормамиСервер.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчета.ПослеЗаписиНаСервере(ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением, Объект.ВалютаДокумента);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
		
		ОбработатьИзменениеУчетнойПолитики();
	КонецЕсли;
	
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);	
	УстановитьФункциональныеОпцииФормы();
	
	ОбработатьИзменениеДоговора();
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Объект.Номер = "";
	Объект.БанковскийСчет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьОсновнойБанковскийСчетОрганизации(Объект.Организация);

	ОбработатьИзменениеУчетнойПолитики();

	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСтавкиНСППоУмолчанию();
	
	ПриИзмененииСтавкиНСП();
	ПриИзмененииСтавкиНСПУслуги();
	
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент, Объект.Организация);	
	Объект.ДоговорКонтрагента = СтруктураДанные.ДоговорКонтрагента;
	ОбработатьИзменениеДоговора();
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Объект.Товары.Очистить();
		Объект.Услуги.Очистить();
		Объект.ОС.Очистить();
		
		ЗаполнитьПоДокументуОснования();
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Контрагент.
//
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент, Объект.Организация);
	
	Объект.ДоговорКонтрагента = СтруктураДанные.ДоговорКонтрагента;
	ПризнакСтраны = СтруктураДанные.ПризнакСтраны;

	Если НЕ ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.КР") Тогда
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл 
			СтрокаТабличнойЧасти.СтавкаНСП = ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка");
		КонецЦикла;	
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл 
			СтрокаТабличнойЧасти.СтавкаНСП = ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка");
		КонецЦикла;	
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл 
			СтрокаТабличнойЧасти.СтавкаНСП = ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка");
		КонецЦикла;	
	КонецЕсли;

	ОбработатьИзменениеДоговора();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Договор контрагента.
//
&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	ОбработатьИзменениеДоговора();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении флага Безналичный расчет.
//
&НаКлиенте
Процедура БезналичныйРасчетПриИзменении(Элемент)
	
	// Товары
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Товары");	
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(Объект,ПараметрыРасчета);
	
	// Услуги
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Услуги");
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(Объект,ПараметрыРасчета);
	
	// ОС
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("ОС");		
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(Объект,ПараметрыРасчета);	
		
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	ОбновитьПодвалФормы();	
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля выбора Точность цены.
//
&НаКлиенте
Процедура ТочностьЦеныПриИзменении(Элемент)
	
	УстановитьФорматЦены();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Ставка НДС.
//
&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	МассивТабличныхЧастей = Новый Массив();
	МассивТабличныхЧастей.Добавить("Товары");
	МассивТабличныхЧастей.Добавить("Услуги");
	МассивТабличныхЧастей.Добавить("ОС");
	
	Для Каждого ТабличнаяЧасть Из МассивТабличныхЧастей Цикл
		
		ПараметрыРасчета = ПодготовитьПараметрыРасчета(ТабличнаяЧасть);
		
		Для Каждого СтрокаТабличнойЧасти Из Объект[ТабличнаяЧасть] Цикл
			
			Если Объект.СуммаВключаетНалоги Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
			Иначе
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);	
			КонецЕсли;	
				
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
			
			Если ТабличнаяЧасть <> "ОС" Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Ставка НСП.
//
&НаКлиенте
Процедура СтавкаНСППриИзменении(Элемент)
	
	ПриИзмененииСтавкиНСП();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Ставка НСП Услуги.
//
&НаКлиенте
Процедура СтавкаНСПУслугиПриИзменении(Элемент)
	
	ПриИзмененииСтавкиНСПУслуги();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеЭСФНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ТекстСообщения = НСтр("ru = 'Документ еще не записан.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	ЭСФКлиент.ПредставлениеЭСФНажатие(ПредставлениеЭСФ, ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Процедура - обработчик события ПередНачаломДобавления таблицы Товары.
//
&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда 
		ИтогВсего = Объект.Товары.Итог("Всего") + Объект.Услуги.Итог("Всего") + Объект.ОС.Итог("Сумма") + Элемент.ТекущиеДанные.Всего;
		ИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС") + Объект.ОС.Итог("СуммаНДС") + Элемент.ТекущиеДанные.СуммаНДС;
		ИтогСуммаНСП = Объект.Товары.Итог("СуммаНСП") + Объект.Услуги.Итог("СуммаНСП") + Объект.ОС.Итог("СуммаНСП") + Элемент.ТекущиеДанные.СуммаНСП;
		ИтогСуммаКОплате = ИтогВсего;
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования таблицы Товары.
//
&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// ГрупповоеИзменениеСтрок
	Элемент.ТекущиеДанные.Пометка = Истина;
	// Конец ГрупповоеИзменениеСтрок
	
КонецПроцедуры

// Процедура - обработчик события ПослеУдаления таблицы Товары.
//
&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ОбработатьИзменениеНоменклатуры(СтрокаТабличнойЧасти, "Товары");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Количество.
//
&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
					
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Товары");					
					
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	Иначе	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЕсли;	
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
	КонецЕсли;	
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ТоварыЦена.
//
&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
					
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Товары");					
					
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	Иначе		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЕсли;
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
	КонецЕсли;	
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Товары");
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаДохода1ПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Товары", Истина);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);	
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	
	// После расчета Всего и налогов переСчет доходов, чтобы исключить разницу в копейки.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
	
	ОбновитьПодвалФормы();	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНСППриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Товары");
	
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	Иначе
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);	
	КонецЕсли;	
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

// Процедура - обработчик события ПередНачаломДобавления таблицы Услуги.
//
&НаКлиенте
Процедура УслугиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда 
		ИтогВсего = Объект.Товары.Итог("Всего") + Объект.Услуги.Итог("Всего") + Объект.ОС.Итог("Сумма") + Элемент.ТекущиеДанные.Всего;
		ИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС") + Объект.ОС.Итог("СуммаНДС") + Элемент.ТекущиеДанные.СуммаНДС;
		ИтогСуммаНСП = Объект.Товары.Итог("СуммаНСП") + Объект.Услуги.Итог("СуммаНСП") + Объект.ОС.Итог("СуммаНСП") + Элемент.ТекущиеДанные.СуммаНСП;
		ИтогСуммаКОплате = ИтогВсего;
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования таблицы Услуги.
//
&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// ГрупповоеИзменениеСтрок
	Элемент.ТекущиеДанные.Пометка = Истина;
	// Конец ГрупповоеИзменениеСтрок

КонецПроцедуры

// Процедура - обработчик события ПослеУдаления таблицы Услуги.
//
&НаКлиенте
Процедура УслугиПослеУдаления(Элемент)
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	ОбработатьИзменениеНоменклатуры(СтрокаТабличнойЧасти, "Услуги");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Количество.
//
&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
					
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Услуги");					
					
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	Иначе		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЕсли;
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
	КонецЕсли;	
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода УслугиЦена.
//
&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
					
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Услуги");					
					
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	Иначе	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЕсли;
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
	КонецЕсли;	
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Услуги");
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);	
	
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаДохода1ПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Услуги", Истина);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);	
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	
	// После расчета Всего и налогов переСчет доходов, чтобы исключить разницу в копейки.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
	
	ОбновитьПодвалФормы();		
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНСППриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Услуги");
	
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	Иначе
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);	
	КонецЕсли;	
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОС

// Процедура - обработчик события ПередНачаломДобавления таблицы ОС.
//
&НаКлиенте
Процедура ОСПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда 
		ИтогВсего = Объект.Товары.Итог("Всего") + Объект.Услуги.Итог("Всего") + Объект.ОС.Итог("Сумма") + Элемент.ТекущиеДанные.Сумма;
		ИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС") + Объект.ОС.Итог("СуммаНДС") + Элемент.ТекущиеДанные.СуммаНДС;
		ИтогСуммаНСП = Объект.Товары.Итог("СуммаНСП") + Объект.Услуги.Итог("СуммаНСП") + Объект.ОС.Итог("СуммаНСП") + Элемент.ТекущиеДанные.СуммаНСП;
		ИтогСуммаКОплате = ИтогВсего;
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования таблицы ОС.
//
&НаКлиенте
Процедура ОСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// ГрупповоеИзменениеСтрок
	Элемент.ТекущиеДанные.Пометка = Истина;
	// Конец ГрупповоеИзменениеСтрок
	
КонецПроцедуры

// Процедура - обработчик события ПослеУдаления таблицы ОС.
//
&НаКлиенте
Процедура ОСПослеУдаления(Элемент)
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОсновноеСредство.
//
&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ОсновноеСредство) Тогда
		
		Если ДанныеУчетнойПолитики.ПлательщикНСП И ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.КР") Тогда
			СтрокаТабличнойЧасти.СтавкаНСП = Объект.СтавкаНСП;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.СчетЗатрат = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.РасходыПоВыбытиюАктивов"); // 9540
		СтрокаТабличнойЧасти.СчетДоходов = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПрочиеДоходыОтНеоперационнойДеятельности"); // 9190
		
		МассивОсновныхСредств = Новый Массив();
		МассивОсновныхСредств.Добавить(СтрокаТабличнойЧасти.ОсновноеСредство);
		
		ДополнитьСтрокиНаСервере(МассивОсновныхСредств);
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("ОсновноеСредство", СтрокаТабличнойЧасти.ОсновноеСредство);
		
		СтруктураДанные = ПолучитьДанныеОСПриИзменении(СтруктураДанные);
		СтрокаТабличнойЧасти.ИнвентарныйНомер = СтруктураДанные.ИнвентарныйНомер;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура ОССуммаПриИзменении(Элемент)
		
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("ОС");
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);	
	
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОССуммаДохода1ПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
					
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("ОС");					
					
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);	
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	
	ОбновитьПодвалФормы();		
КонецПроцедуры

&НаКлиенте
Процедура ОССтавкаНСППриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("ОС");
	
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	Иначе
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);	
	КонецЕсли;	
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// ПодключаемоеОборудование
&НаКлиенте
Процедура ПоискПоШтрихкодуТовары(Команда)
	
	ТекШтрихкод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", 
		ЭтотОбъект, Новый Структура("ТекШтрихкод, ИмяТабличнойЧасти", ТекШтрихкод, "Товары")), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
		
КонецПроцедуры
	
&НаКлиенте
Процедура ПоискПоШтрихкодуУслуги(Команда)
	
	ТекШтрихкод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", 
		ЭтотОбъект, Новый Структура("ТекШтрихкод, ИмяТабличнойЧасти", ТекШтрихкод, "Услуги")), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));

КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ТекШтрихкод = ?(Результат = Неопределено, ДополнительныеПараметры.ТекШтрихкод, Результат);
    
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
        ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1), ДополнительныеПараметры.ИмяТабличнойЧасти);
	КонецЕсли;	

КонецПроцедуры 
// Конец ПодключаемоеОборудование

#КонецОбласти

#Область ИзменениеСтрок

#Область ИзменениеСтрокТовары

&НаКлиенте
Процедура ИзменениеСтрокТоварыИзменитьСтроки(Команда)
	ПоказатьСкрытьПанельРедактирования("Товары", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокТоварыСнятьФлажки(Команда)
	УстановитьПометку("Товары", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокТоварыУстановитьФлажки(Команда)
	УстановитьПометку("Товары", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокТоварыДействиеПриИзменении(Элемент)
	ОпределитьОбъектИзменений("Товары");
	НастроитьОформлениеПанелиРедактирования("Товары", 2);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокТоварыЗначениеПриИзменении(Элемент)
	НастроитьОформлениеПанелиРедактирования("Товары", 3);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокТоварыВыполнитьДействие(Команда)
	ОбработатьТаблицу("Товары");
	НастроитьОформлениеПанелиРедактирования("Товары", 4);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокТоварыОтменитьИзменения(Команда)
	ПоказатьСкрытьПанельРедактирования("Товары");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПометкаПриИзменении(Элемент)
	ГрупповоеИзменениеСтрокКлиент.СтрокаПометкаПриИзменении(Объект.Товары, Элементы.ИзменениеСтрокТоварыУстановитьФлажки, Элементы.ИзменениеСтрокТоварыСнятьФлажки);
КонецПроцедуры

#КонецОбласти

#Область ИзменениеСтрокУслуги

&НаКлиенте
Процедура ИзменениеСтрокУслугиИзменитьСтроки(Команда)
	ПоказатьСкрытьПанельРедактирования("Услуги", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокУслугиСнятьФлажки(Команда)
	УстановитьПометку("Услуги", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокУслугиУстановитьФлажки(Команда)
	УстановитьПометку("Услуги", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокУслугиДействиеПриИзменении(Элемент)
	ОпределитьОбъектИзменений("Услуги");
	НастроитьОформлениеПанелиРедактирования("Услуги", 2);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокУслугиЗначениеПриИзменении(Элемент)
	НастроитьОформлениеПанелиРедактирования("Услуги", 3);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокУслугиВыполнитьДействие(Команда)
	ОбработатьТаблицу("Услуги");
	НастроитьОформлениеПанелиРедактирования("Услуги", 4);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокУслугиОтменитьИзменения(Команда)
	ПоказатьСкрытьПанельРедактирования("Услуги");
КонецПроцедуры

&НаКлиенте
Процедура УслугиПометкаПриИзменении(Элемент)
	ГрупповоеИзменениеСтрокКлиент.СтрокаПометкаПриИзменении(Объект.Услуги, Элементы.ИзменениеСтрокУслугиУстановитьФлажки, Элементы.ИзменениеСтрокУслугиСнятьФлажки);
КонецПроцедуры

#КонецОбласти

#Область ИзменениеСтрокОС

&НаКлиенте
Процедура ИзменениеСтрокОСИзменитьСтроки(Команда)
	ПоказатьСкрытьПанельРедактирования("ОС", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокОССнятьФлажки(Команда)
	УстановитьПометку("ОС", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокОСУстановитьФлажки(Команда)
	УстановитьПометку("ОС", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокОСДействиеПриИзменении(Элемент)
	ОпределитьОбъектИзменений("ОС");
	НастроитьОформлениеПанелиРедактирования("ОС", 2);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокОСЗначениеПриИзменении(Элемент)
	НастроитьОформлениеПанелиРедактирования("ОС", 3);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокОСВыполнитьДействие(Команда)
	ОбработатьТаблицу("ОС");
	НастроитьОформлениеПанелиРедактирования("ОС", 4);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокОСОтменитьИзменения(Команда)
	ПоказатьСкрытьПанельРедактирования("ОС");
КонецПроцедуры

&НаКлиенте
Процедура ОСПометкаПриИзменении(Элемент)
	ГрупповоеИзменениеСтрокКлиент.СтрокаПометкаПриИзменении(Объект.ОС, Элементы.ИзменениеСтрокОСУстановитьФлажки, Элементы.ИзменениеСтрокОССнятьФлажки);
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьСписокДействий(ИмяТЧ)
	
	Если ИмяТЧ = "Товары" Тогда
		
		Действия = Новый Массив;
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки);
		
		Элементы.ИзменениеСтрокТоварыДействие.СписокВыбора.Очистить();
		Для каждого Действие Из Действия Цикл
			ДействиеОписание = ГрупповоеИзменениеСтрокСервер.ПредставлениеДействия(Действие);
			Элементы.ИзменениеСтрокТоварыДействие.СписокВыбора.Добавить(Действие, ДействиеОписание);
		КонецЦикла;
		
	ИначеЕсли ИмяТЧ = "Услуги" Тогда
		
		Действия = Новый Массив;
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки);
		
		Элементы.ИзменениеСтрокУслугиДействие.СписокВыбора.Очистить();
		Для каждого Действие Из Действия Цикл
			ДействиеОписание = ГрупповоеИзменениеСтрокСервер.ПредставлениеДействия(Действие);
			Элементы.ИзменениеСтрокУслугиДействие.СписокВыбора.Добавить(Действие, ДействиеОписание);
		КонецЦикла;

	ИначеЕсли ИмяТЧ = "ОС" Тогда
		
		Действия = Новый Массив;
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки);
		
		Элементы.ИзменениеСтрокОСДействие.СписокВыбора.Очистить();
		Для каждого Действие Из Действия Цикл
			ДействиеОписание = ГрупповоеИзменениеСтрокСервер.ПредставлениеДействия(Действие);
			Элементы.ИзменениеСтрокОСДействие.СписокВыбора.Добавить(Действие, ДействиеОписание);
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСкрытьПанельРедактирования(ИмяТЧ, ИзменяетДанные = Неопределено)
	
	Перем СостояниеПерехода;
	ГрупповоеИзменениеСтрокСервер.ПоказатьСкрытьПанельРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ),
		СостояниеПерехода,
		ИзменяетДанные);
	
	УправлениеРезервнымиКопиямиТаблицы(ИмяТЧ, СостояниеПерехода, ИзменяетДанные);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеРезервнымиКопиямиТаблицы(ИмяТЧ, СостояниеПерехода, ИзменяетДанные)
	
	Если ИмяТЧ = "Товары" Тогда
		РеквизитРезервнаяКопияТаблицыАдрес = "ИзменениеСтрокТоварыРезервнаяКопияТаблицыАдрес";
	ИначеЕсли ИмяТЧ = "Услуги" Тогда
		РеквизитРезервнаяКопияТаблицыАдрес = "ИзменениеСтрокУслугиРезервнаяКопияТаблицыАдрес";
	ИначеЕсли ИмяТЧ = "ОС" Тогда
		РеквизитРезервнаяКопияТаблицыАдрес = "ИзменениеСтрокОСРезервнаяКопияТаблицыАдрес";
	КонецЕсли;
	
	ГрупповоеИзменениеСтрокСервер.УправлениеРезервнымиКопиями(
		ЭтотОбъект,
		Объект[ИмяТЧ],
		ЭтотОбъект[РеквизитРезервнаяКопияТаблицыАдрес],
		СостояниеПерехода,
		ИзменяетДанные);
	
КонецПроцедуры

&НаКлиенте
Функция НаборЭлементовГрупповогоИзмененияСтрокКлиент(ИмяТЧ)
	
	Если ИмяТЧ = "Товары" Тогда
		
		НаборЭлементов = Новый Структура();
		НаборЭлементов.Вставить("ИмяТЧ", "Товары");
		НаборЭлементов.Вставить("ДокументСсылка",          Объект.Ссылка);
		НаборЭлементов.Вставить("ПанельРедактирования",    Элементы.ГруппаИзменениеСтрокТовары);
		НаборЭлементов.Вставить("КнопкаУстановитьФлажки",  Элементы.ИзменениеСтрокТоварыУстановитьФлажки);
		НаборЭлементов.Вставить("КнопкаСнятьФлажки",       Элементы.ИзменениеСтрокТоварыСнятьФлажки);
		НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ИзменениеСтрокТоварыВыполнитьДействие);
		НаборЭлементов.Вставить("КолонкаПометка",          Элементы.ТоварыПометка);
		НаборЭлементов.Вставить("КолонкаНомерСтроки",      Элементы.ТоварыНомерСтроки);
		НаборЭлементов.Вставить("Действие",                ЭтотОбъект.ИзменениеСтрокТоварыДействие);
		НаборЭлементов.Вставить("ДействиеЭлемент",         Элементы.ИзменениеСтрокТоварыДействие);
		НаборЭлементов.Вставить("Значение",                ЭтотОбъект.ИзменениеСтрокТоварыЗначение);
		НаборЭлементов.Вставить("ЗначениеЭлемент",         Элементы.ИзменениеСтрокТоварыЗначение);
		НаборЭлементов.Вставить("ОбъектИзменений",         ИзменениеСтрокТоварыОбъектИзмененийЭлемент);
		НаборЭлементов.Вставить("КолонкаОбъектИзменений",  ?(ЗначениеЗаполнено(ИзменениеСтрокТоварыОбъектИзмененийЭлемент), 
		                                                     Элементы[ИзменениеСтрокТоварыОбъектИзмененийЭлемент], Неопределено));
	ИначеЕсли ИмяТЧ = "Услуги" Тогда
		
		НаборЭлементов = Новый Структура();
		НаборЭлементов.Вставить("ИмяТЧ", "Услуги");
		НаборЭлементов.Вставить("ДокументСсылка",          Объект.Ссылка);
		НаборЭлементов.Вставить("ПанельРедактирования",    Элементы.ГруппаИзменениеСтрокУслуги);
		НаборЭлементов.Вставить("КнопкаУстановитьФлажки",  Элементы.ИзменениеСтрокУслугиУстановитьФлажки);
		НаборЭлементов.Вставить("КнопкаСнятьФлажки",       Элементы.ИзменениеСтрокУслугиСнятьФлажки);
		НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ИзменениеСтрокУслугиВыполнитьДействие);
		НаборЭлементов.Вставить("КолонкаПометка",          Элементы.УслугиПометка);
		НаборЭлементов.Вставить("КолонкаНомерСтроки",      Элементы.УслугиНомерСтроки);
		НаборЭлементов.Вставить("Действие",                ЭтотОбъект.ИзменениеСтрокУслугиДействие);
		НаборЭлементов.Вставить("ДействиеЭлемент",         Элементы.ИзменениеСтрокУслугиДействие);
		НаборЭлементов.Вставить("Значение",                ЭтотОбъект.ИзменениеСтрокУслугиЗначение);
		НаборЭлементов.Вставить("ЗначениеЭлемент",         Элементы.ИзменениеСтрокУслугиЗначение);
		НаборЭлементов.Вставить("ОбъектИзменений",         ИзменениеСтрокУслугиОбъектИзмененийЭлемент);
		НаборЭлементов.Вставить("КолонкаОбъектИзменений",  ?(ЗначениеЗаполнено(ИзменениеСтрокУслугиОбъектИзмененийЭлемент), 
		                                                     Элементы[ИзменениеСтрокУслугиОбъектИзмененийЭлемент], Неопределено));
	ИначеЕсли ИмяТЧ = "ОС" Тогда
		
		НаборЭлементов = Новый Структура();
		НаборЭлементов.Вставить("ИмяТЧ", "ОС");
		НаборЭлементов.Вставить("ДокументСсылка",          Объект.Ссылка);
		НаборЭлементов.Вставить("ПанельРедактирования",    Элементы.ГруппаИзменениеСтрокОС);
		НаборЭлементов.Вставить("КнопкаУстановитьФлажки",  Элементы.ИзменениеСтрокОСУстановитьФлажки);
		НаборЭлементов.Вставить("КнопкаСнятьФлажки",       Элементы.ИзменениеСтрокОССнятьФлажки);
		НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ИзменениеСтрокОСВыполнитьДействие);
		НаборЭлементов.Вставить("КолонкаПометка",          Элементы.ОСПометка);
		НаборЭлементов.Вставить("КолонкаНомерСтроки",      Элементы.ОСНомерСтроки);
		НаборЭлементов.Вставить("Действие",                ЭтотОбъект.ИзменениеСтрокОСДействие);
		НаборЭлементов.Вставить("ДействиеЭлемент",         Элементы.ИзменениеСтрокОСДействие);
		НаборЭлементов.Вставить("Значение",                ЭтотОбъект.ИзменениеСтрокОСЗначение);
		НаборЭлементов.Вставить("ЗначениеЭлемент",         Элементы.ИзменениеСтрокОСЗначение);
		НаборЭлементов.Вставить("ОбъектИзменений",         ИзменениеСтрокОСОбъектИзмененийЭлемент);
		НаборЭлементов.Вставить("КолонкаОбъектИзменений",  ?(ЗначениеЗаполнено(ИзменениеСтрокОСОбъектИзмененийЭлемент), 
		                                                     Элементы[ИзменениеСтрокОСОбъектИзмененийЭлемент], Неопределено));
	КонецЕсли;
	
	Возврат НаборЭлементов;
	
КонецФункции

&НаСервере
Функция НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ)
	
	Если ИмяТЧ = "Товары" Тогда
		
		НаборЭлементов = Новый Структура();
		НаборЭлементов.Вставить("ИмяТЧ", "Товары");
		НаборЭлементов.Вставить("ДокументСсылка",          Объект.Ссылка);
		НаборЭлементов.Вставить("ПанельРедактирования",    Элементы.ГруппаИзменениеСтрокТовары);
		НаборЭлементов.Вставить("КнопкаУстановитьФлажки",  Элементы.ИзменениеСтрокТоварыУстановитьФлажки);
		НаборЭлементов.Вставить("КнопкаСнятьФлажки",       Элементы.ИзменениеСтрокТоварыСнятьФлажки);
		НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ИзменениеСтрокТоварыВыполнитьДействие);
		НаборЭлементов.Вставить("КолонкаПометка",          Элементы.ТоварыПометка);
		НаборЭлементов.Вставить("КолонкаНомерСтроки",      Элементы.ТоварыНомерСтроки);
		НаборЭлементов.Вставить("Действие",                ЭтотОбъект.ИзменениеСтрокТоварыДействие);
		НаборЭлементов.Вставить("ДействиеЭлемент",         Элементы.ИзменениеСтрокТоварыДействие);
		НаборЭлементов.Вставить("Значение",                ЭтотОбъект.ИзменениеСтрокТоварыЗначение);
		НаборЭлементов.Вставить("ЗначениеЭлемент",         Элементы.ИзменениеСтрокТоварыЗначение);
		НаборЭлементов.Вставить("ОбъектИзменений",         ИзменениеСтрокТоварыОбъектИзмененийЭлемент);
		НаборЭлементов.Вставить("КолонкаОбъектИзменений",  ?(ЗначениеЗаполнено(ИзменениеСтрокТоварыОбъектИзмененийЭлемент), 
		                                                     Элементы[ИзменениеСтрокТоварыОбъектИзмененийЭлемент], Неопределено));
	ИначеЕсли ИмяТЧ = "Услуги" Тогда
		
		НаборЭлементов = Новый Структура();
		НаборЭлементов.Вставить("ИмяТЧ", "Услуги");
		НаборЭлементов.Вставить("ДокументСсылка",          Объект.Ссылка);
		НаборЭлементов.Вставить("ПанельРедактирования",    Элементы.ГруппаИзменениеСтрокУслуги);
		НаборЭлементов.Вставить("КнопкаУстановитьФлажки",  Элементы.ИзменениеСтрокУслугиУстановитьФлажки);
		НаборЭлементов.Вставить("КнопкаСнятьФлажки",       Элементы.ИзменениеСтрокУслугиСнятьФлажки);
		НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ИзменениеСтрокУслугиВыполнитьДействие);
		НаборЭлементов.Вставить("КолонкаПометка",          Элементы.УслугиПометка);
		НаборЭлементов.Вставить("КолонкаНомерСтроки",      Элементы.УслугиНомерСтроки);
		НаборЭлементов.Вставить("Действие",                ЭтотОбъект.ИзменениеСтрокУслугиДействие);
		НаборЭлементов.Вставить("ДействиеЭлемент",         Элементы.ИзменениеСтрокУслугиДействие);
		НаборЭлементов.Вставить("Значение",                ЭтотОбъект.ИзменениеСтрокУслугиЗначение);
		НаборЭлементов.Вставить("ЗначениеЭлемент",         Элементы.ИзменениеСтрокУслугиЗначение);
		НаборЭлементов.Вставить("ОбъектИзменений",         ИзменениеСтрокУслугиОбъектИзмененийЭлемент);
		НаборЭлементов.Вставить("КолонкаОбъектИзменений",  ?(ЗначениеЗаполнено(ИзменениеСтрокУслугиОбъектИзмененийЭлемент), 
		                                                     Элементы[ИзменениеСтрокУслугиОбъектИзмененийЭлемент], Неопределено));
	ИначеЕсли ИмяТЧ = "ОС" Тогда
		
		НаборЭлементов = Новый Структура();
		НаборЭлементов.Вставить("ИмяТЧ", "ОС");
		НаборЭлементов.Вставить("ДокументСсылка",          Объект.Ссылка);
		НаборЭлементов.Вставить("ПанельРедактирования",    Элементы.ГруппаИзменениеСтрокОС);
		НаборЭлементов.Вставить("КнопкаУстановитьФлажки",  Элементы.ИзменениеСтрокОСУстановитьФлажки);
		НаборЭлементов.Вставить("КнопкаСнятьФлажки",       Элементы.ИзменениеСтрокОССнятьФлажки);
		НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ИзменениеСтрокОСВыполнитьДействие);
		НаборЭлементов.Вставить("КолонкаПометка",          Элементы.ОСПометка);
		НаборЭлементов.Вставить("КолонкаНомерСтроки",      Элементы.ОСНомерСтроки);
		НаборЭлементов.Вставить("Действие",                ЭтотОбъект.ИзменениеСтрокОСДействие);
		НаборЭлементов.Вставить("ДействиеЭлемент",         Элементы.ИзменениеСтрокОСДействие);
		НаборЭлементов.Вставить("Значение",                ЭтотОбъект.ИзменениеСтрокОСЗначение);
		НаборЭлементов.Вставить("ЗначениеЭлемент",         Элементы.ИзменениеСтрокОСЗначение);
		НаборЭлементов.Вставить("ОбъектИзменений",         ИзменениеСтрокОСОбъектИзмененийЭлемент);
		НаборЭлементов.Вставить("КолонкаОбъектИзменений",  ?(ЗначениеЗаполнено(ИзменениеСтрокОСОбъектИзмененийЭлемент), 
		                                                     Элементы[ИзменениеСтрокОСОбъектИзмененийЭлемент], Неопределено));
	КонецЕсли;
	
	Возврат НаборЭлементов;
	
КонецФункции

&НаСервере
Процедура УстановитьПометку(ИмяТЧ, Пометка)
	
	НаборЭлементов = НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ);
	НаборЭлементов.КнопкаСнятьФлажки.Видимость = НЕ НаборЭлементов.КнопкаСнятьФлажки.Видимость;
	НаборЭлементов.КнопкаУстановитьФлажки.Видимость = НЕ НаборЭлементов.КнопкаУстановитьФлажки.Видимость;
	
	Для каждого Строка Из Объект[НаборЭлементов.ИмяТЧ] Цикл
		Строка.Пометка = Пометка;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьОбъектИзменений(ИмяТЧ)
	
	Если ИмяТЧ = "Товары" Тогда
		
		Если ИзменениеСтрокТоварыДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству") Тогда
			
			ИзменениеСтрокТоварыОбъектИзмененийРеквизит = "Сумма";
			ИзменениеСтрокТоварыОбъектИзмененийЭлемент = "ТоварыСумма";
			
		ИначеЕсли ИзменениеСтрокТоварыДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
			
			ИзменениеСтрокТоварыОбъектИзмененийРеквизит = "Сумма";
			ИзменениеСтрокТоварыОбъектИзмененийЭлемент = "ТоварыСумма";
			
		ИначеЕсли ИзменениеСтрокТоварыДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки") Тогда
			
			ИзменениеСтрокТоварыОбъектИзмененийРеквизит = "";
			ИзменениеСтрокТоварыОбъектИзмененийЭлемент = "";
			
		КонецЕсли;
		
	ИначеЕсли ИмяТЧ = "Услуги" Тогда
		
		Если ИзменениеСтрокУслугиДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству") Тогда
			
			ИзменениеСтрокУслугиОбъектИзмененийРеквизит = "Сумма";
			ИзменениеСтрокУслугиОбъектИзмененийЭлемент = "УслугиСумма";
			
		ИначеЕсли ИзменениеСтрокУслугиДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
			
			ИзменениеСтрокУслугиОбъектИзмененийРеквизит = "Сумма";
			ИзменениеСтрокУслугиОбъектИзмененийЭлемент = "УслугиСумма";
			
		ИначеЕсли ИзменениеСтрокУслугиДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки") Тогда
			
			ИзменениеСтрокУслугиОбъектИзмененийРеквизит = "";
			ИзменениеСтрокУслугиОбъектИзмененийЭлемент = "";
			
		КонецЕсли;
		
	ИначеЕсли ИмяТЧ = "ОС" Тогда
		
		Если ИзменениеСтрокОСДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
			
			ИзменениеСтрокОСОбъектИзмененийРеквизит = "Сумма";
			ИзменениеСтрокОСОбъектИзмененийЭлемент = "ОССумма";
			
		ИначеЕсли ИзменениеСтрокОСДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки") Тогда
			
			ИзменениеСтрокОСОбъектИзмененийРеквизит = "";
			ИзменениеСтрокОСОбъектИзмененийЭлемент = "";
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОформлениеПанелиРедактирования(ИмяТЧ, Состояние, СохранитьИзменения = Неопределено)
	
	Если ИмяТЧ = "Товары" Тогда
		РеквизитЗначение = "ИзменениеСтрокТоварыЗначение";
	ИначеЕсли ИмяТЧ = "Услуги" Тогда
		РеквизитЗначение = "ИзменениеСтрокУслугиЗначение";
	ИначеЕсли ИмяТЧ = "ОС" Тогда
		РеквизитЗначение = "ИзменениеСтрокОСЗначение";
	КонецЕсли;
	
	Результат = ГрупповоеИзменениеСтрокКлиент.НастроитьОформлениеПанелиРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокКлиент(ИмяТЧ),
		Состояние,
		ЭтотОбъект[РеквизитЗначение]);
	
	Если Результат.Свойство("УстановитьСвязиПараметровВыбора") И Результат.УстановитьСвязиПараметровВыбора Тогда
		УстановитьСвязиПараметровВыбораДляЗначения(ИмяТЧ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвязиПараметровВыбораДляЗначения(ИмяТЧ)
	
	ГрупповоеИзменениеСтрокСервер.УстановитьСвязиПараметровВыбора(
		НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьТаблицу(ИмяТЧ)
	
	ОбработатьТаблицуНаСервере(ИмяТЧ);
	
	Если ИмяТЧ = "Товары" Тогда

		ИзменяемыеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Пометка", Истина));

		ПараметрыРасчета = ПодготовитьПараметрыРасчета(ИмяТЧ);
		
		Для каждого СтрокаТабличнойЧасти Из ИзменяемыеСтроки Цикл

			Если ИзменениеСтрокТоварыДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству")
				ИЛИ ИзменениеСтрокТоварыДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
					
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
				
				Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
				КонецЕсли;	
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСкидкиСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
				
				ОбновитьПодвалФормы();		
			КонецЕсли;
		КонецЦикла;
	
	ИначеЕсли ИмяТЧ = "Услуги" Тогда

		ИзменяемыеСтроки = Объект.Услуги.НайтиСтроки(Новый Структура("Пометка", Истина));

		ПараметрыРасчета = ПодготовитьПараметрыРасчета(ИмяТЧ);
		
		Для каждого СтрокаТабличнойЧасти Из ИзменяемыеСтроки Цикл

			Если ИзменениеСтрокУслугиДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству")
				ИЛИ ИзменениеСтрокУслугиДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
					
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
				
				Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
				КонецЕсли;	
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСкидкиСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
				
				ОбновитьПодвалФормы();			
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ИмяТЧ = "ОС" Тогда

		ИзменяемыеСтроки = Объект.ОС.НайтиСтроки(Новый Структура("Пометка", Истина));

		ПараметрыРасчета = ПодготовитьПараметрыРасчета(ИмяТЧ);
		
		Для каждого СтрокаТабличнойЧасти Из ИзменяемыеСтроки Цикл

			Если ИзменениеСтрокОСДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
					
				Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
				КонецЕсли;
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
				
				Если Объект.СуммаВключаетНалоги Тогда
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
				КонецЕсли;	
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСкидкиСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
				
				ОбновитьПодвалФормы();				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьТаблицуНаСервере(ИмяТЧ)
	
	Если ИмяТЧ = "Товары" Тогда
		
		ГрупповоеИзменениеСтрокСервер.ОбработатьТаблицу(
			ЭтотОбъект,
			Объект.Товары,
			ИзменениеСтрокТоварыДействие,
			ИзменениеСтрокТоварыОбъектИзмененийРеквизит,
			ИзменениеСтрокТоварыЗначение,
			"ТоварыНоменклатура");
			
	ИначеЕсли ИмяТЧ = "Услуги" Тогда
		
		ГрупповоеИзменениеСтрокСервер.ОбработатьТаблицу(
			ЭтотОбъект,
			Объект.Услуги,
			ИзменениеСтрокУслугиДействие,
			ИзменениеСтрокУслугиОбъектИзмененийРеквизит,
			ИзменениеСтрокУслугиЗначение,
			"УслугиНоменклатура");
			
	ИначеЕсли ИмяТЧ = "ОС" Тогда
		
		ГрупповоеИзменениеСтрокСервер.ОбработатьТаблицу(
			ЭтотОбъект,
			Объект.ОС,
			ИзменениеСтрокОСДействие,
			ИзменениеСтрокОСОбъектИзмененийРеквизит,
			ИзменениеСтрокОСЗначение,
			"ОСНоменклатура");
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТекущееДействиеИзмененияСтрок()
	
	// Товары.
	СохраняемыеНастройки = "";
	
	Если ИзменениеСтрокТоварыДействие <> ИзменениеСтрокТоварыДействиеПриОткрытии Тогда
		СохраняемыеНастройки = "Товары";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СохраняемыеНастройки) Тогда
		СохранитьТекущееДействиеИзмененияСтрокСервер(СохраняемыеНастройки);
	КонецЕсли;
	
	// Услуги.
	СохраняемыеНастройки = "";
	
	Если ИзменениеСтрокУслугиДействие <> ИзменениеСтрокУслугиДействиеПриОткрытии Тогда
		СохраняемыеНастройки = "Услуги";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СохраняемыеНастройки) Тогда
		СохранитьТекущееДействиеИзмененияСтрокСервер(СохраняемыеНастройки);
	КонецЕсли;
	
	// ОС.
	СохраняемыеНастройки = "";
	
	Если ИзменениеСтрокОСДействие <> ИзменениеСтрокОСДействиеПриОткрытии Тогда
		СохраняемыеНастройки = "ОС";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СохраняемыеНастройки) Тогда
		СохранитьТекущееДействиеИзмененияСтрокСервер(СохраняемыеНастройки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьТекущееДействиеИзмененияСтрокСервер(СохраняемыеНастройки)
	
	ИменаТЧ = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СохраняемыеНастройки);
	Для каждого ИмяТЧ Из ИменаТЧ Цикл
		ГрупповоеИзменениеСтрокСервер.СохранитьНастройки(НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ));
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость и доступность элементов.
//
&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()	
	
	// НДС.
	Если Объект.СтавкаНДС = Справочники.СтавкиНДС.Нулевая
		ИЛИ Объект.СтавкаНДС = Справочники.СтавкиНДС.Освобожденная
		ИЛИ Объект.СтавкаНДС = Справочники.СтавкиНДС.Необлагаемая Тогда
		Элементы.ТоварыСуммаНДС.Видимость 	= Ложь;
		Элементы.УслугиСуммаНДС.Видимость 	= Ложь;
		Элементы.ОССуммаНДС.Видимость 		= Ложь;
	Иначе
		Элементы.ТоварыСуммаНДС.Видимость 	= Истина;
		Элементы.УслугиСуммаНДС.Видимость 	= Истина;
		Элементы.ОССуммаНДС.Видимость 		= Истина;
	КонецЕсли;
	
	// Суммы.
	Если Объект.СуммаВключаетНалоги Тогда
		Элементы.ТоварыСумма.Видимость 	= Истина;
		Элементы.УслугиСумма.Видимость 	= Истина;
		Элементы.ОССумма.Видимость 		= Истина;
		
		Элементы.ТоварыСуммаДохода1.Видимость = Ложь;
		Элементы.УслугиСуммаДохода1.Видимость = Ложь;
		Элементы.ОССуммаДохода1.Видимость 	= Ложь;
		
		Элементы.ТоварыВсего.Видимость 	= Ложь;
		Элементы.УслугиВсего.Видимость 	= Ложь;
		Элементы.ОСВсего.Видимость 		= Ложь;
		
		Элементы.ТоварыСуммаДохода2.Видимость = Истина;
		Элементы.УслугиСуммаДохода2.Видимость = Истина;
		Элементы.ОССуммаДохода2.Видимость 	= Истина;
	Иначе
		Элементы.ТоварыСумма.Видимость 	= Ложь;
		Элементы.УслугиСумма.Видимость 	= Ложь;
		Элементы.ОССумма.Видимость 		= Ложь;
		
		Элементы.ТоварыСуммаДохода1.Видимость = Истина;
		Элементы.УслугиСуммаДохода1.Видимость = Истина;
		Элементы.ОССуммаДохода1.Видимость 	= Истина;
		
		Элементы.ТоварыВсего.Видимость 	= Истина;
		Элементы.УслугиВсего.Видимость 	= Истина;
		Элементы.ОСВсего.Видимость 		= Истина;
		
		Элементы.ТоварыСуммаДохода2.Видимость = Ложь;
		Элементы.УслугиСуммаДохода2.Видимость = Ложь;
		Элементы.ОССуммаДохода2.Видимость 	= Ложь;
	КонецЕсли;	
	
	Если Объект.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		Элементы.Курс.Видимость 	 = Ложь;
		Элементы.Кратность.Видимость = Ложь;
	Иначе
		Элементы.Курс.Видимость 	 = Истина;
		Элементы.Кратность.Видимость = Истина;	
	КонецЕсли;	
	
	// Ставка НСП.
	Если ПризнакСтраны = Перечисления.ПризнакиСтраны.КР Тогда 
		Элементы.ТоварыСтавкаНСП.Видимость = Истина;
		Элементы.УслугиСтавкаНСП.Видимость = Истина;
		Элементы.ОССтавкаНСП.Видимость = Истина;
	Иначе 
		Элементы.ТоварыСтавкаНСП.Видимость = Ложь;
		Элементы.УслугиСтавкаНСП.Видимость = Ложь;
		Элементы.ОССтавкаНСП.Видимость = Ложь;
	КонецЕсли;	
	
	// Сумма НСП.
	Если Объект.БезналичныйРасчет 
		Или НЕ ПризнакСтраны = Перечисления.ПризнакиСтраны.КР Тогда
		Элементы.ТоварыСуммаНСП.Видимость = Ложь;
		Элементы.УслугиСуммаНСП.Видимость = Ложь;
		Элементы.ОССуммаНСП.Видимость = Ложь;
		Элементы.ИтогСуммаНСП.Видимость = Ложь;
		
		Если Объект.СтавкаНСП = Справочники.СтавкиНСП.ЗастройщикиЖилья Тогда
			Элементы.ТоварыСуммаНСП.Видимость = Истина;
			Элементы.ОССуммаНСП.Видимость = Истина;
			Элементы.ИтогСуммаНСП.Видимость = Истина;
		КонецЕсли;
		
		Если Объект.СтавкаНСПУслуги = Справочники.СтавкиНСП.ЗастройщикиЖилья Тогда
			Элементы.УслугиСуммаНСП.Видимость = Истина;
			Элементы.ИтогСуммаНСП.Видимость = Истина;
		КонецЕсли;
		
	Иначе
		Элементы.ТоварыСуммаНСП.Видимость = Истина;
		Элементы.УслугиСуммаНСП.Видимость = Истина;
		Элементы.ОССуммаНСП.Видимость = Истина;
		Элементы.ИтогСуммаНСП.Видимость = Истина;
	КонецЕсли;	
	
	Если Объект.ЭкспортУслугПокупателюКР Тогда 
		Элементы.УслугиСтавкаНСП.Видимость = Ложь;
		Элементы.УслугиСуммаНСП.Видимость = Ложь;
	КонецЕсли;	
	
	СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(ДатаДокумента, Объект.ВалютаДокумента, Объект.ДоговорКонтрагента);
	
	// Сформируем надпись цены и валюты.
	СтруктураНадписи = Новый Структура();
	СтруктураНадписи.Вставить("УчетВалютныхОпераций", Истина);
	СтруктураНадписи.Вставить("ВалютаДокумента", 	  Объект.ВалютаДокумента);
	СтруктураНадписи.Вставить("ТипЦен", 			  СтруктураДанные.ТипЦен);
	СтруктураНадписи.Вставить("СтавкаНДС", 			  Объект.СтавкаНДС);
	СтруктураНадписи.Вставить("СуммаВключаетНалоги",  Объект.СуммаВключаетНалоги);
		
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи, ДанныеУчетнойПолитики.ПлательщикНДС);

КонецПроцедуры 

// Процедура устанавливает текущую страницу при открытии формы.
//
&НаКлиенте
Процедура УстановитьТекущуюСтраницу()	
	Если Объект.Товары.Количество() > 0 Тогда 
		Возврат;
	ИначеЕсли Объект.Услуги.Количество() > 0 Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаУслуги;
	ИначеЕсли Объект.ОС.Количество() > 0 Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаОС;
	КонецЕсли;	
КонецПроцедуры

// Процедура устанавливает функциональные опции формы документа.
//
&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма, Объект.Организация, ДатаДокумента);
КонецПроцедуры

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением, ВалютаДокумента)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением);
	ВалютаКурсКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДатаНовая);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат);
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		ВалютаКурсКратность);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Получает набор данных с сервера для процедуры КонтрагентПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Контрагент, Организация)
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Контрагент, Организация);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ДоговорКонтрагента",
		ДоговорПоУмолчанию);
		
	СтруктураДанные.Вставить(
		"ПризнакСтраны",
		Контрагент.ПризнакСтраны);	
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

// Получает договор по умолчанию
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация)
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ВидыДоговораДляДокумента(Документ);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(Период, ВалютаДокумента, ДоговорКонтрагента)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		ДоговорКонтрагента.ВалютаРасчетов);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаРасчетов, Период));
	
	СтруктураДанные.Вставить(
		"ТипЦен",
		ДоговорКонтрагента.ТипЦен);
	
	СтруктураДанные.Вставить(
		"СуммаВключаетНалоги",
		ДоговорКонтрагента.СуммаВключаетНалоги);
	
	СтруктураДанные.Вставить(
		"СтавкаНДС",
		ДоговорКонтрагента.СтавкаНДС);
		
	СтруктураДанные.Вставить(
		"КодПоставкиНДС",
		ДоговорКонтрагента.КодПоставкиНДС);
	
	СчетаУчета = БухгалтерскийУчетВызовСервера.ПолучитьСчетаРасчетовСКонтрагентом(ДоговорКонтрагента.Организация, ДоговорКонтрагента.Владелец, ДоговорКонтрагента);

	СтруктураДанные.Вставить(
		"СчетРасчетов",
		СчетаУчета.СчетРасчетовПокупателя);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

&НаКлиенте
Процедура ОбработатьИзменениеДоговора(МодифицированДоговор = Ложь)
	
	СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(ДатаДокумента, Объект.ВалютаДокумента, Объект.ДоговорКонтрагента);

	// Обработка изменения валюты
	СтруктураКурсыПред = Новый Структура("Валюта, Курс, Кратность", Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность);
	
	Объект.ВалютаДокумента = СтруктураДанные.ВалютаРасчетов;
	Объект.Курс      = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
	Объект.Кратность = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
	
	СтруктураКурсы = Новый Структура("Валюта, Курс, Кратность", Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность);
	
	// Обработка изменения налогообложения
	Объект.СуммаВключаетНалоги = СтруктураДанные.СуммаВключаетНалоги;
	Объект.СтавкаНДС = ?(ДанныеУчетнойПолитики.ПлательщикНДС, СтруктураДанные.СтавкаНДС, 
							ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка"));
	Объект.КодПоставкиНДС = СтруктураДанные.КодПоставкиНДС;

	// Обработка изменения отражения в учете
	Объект.СчетРасчетов = СтруктураДанные.СчетРасчетов;
	
	// Пересчет табличной части
	// Цена, Сумма
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(Объект, ДатаДокумента, СтруктураКурсыПред, СтруктураКурсы, "Товары", Объект.ТочностьЦены);
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(Объект, ДатаДокумента, СтруктураКурсыПред, СтруктураКурсы, "Услуги", Объект.ТочностьЦены);
	// Налоги
	МассивТабличныхЧастей = Новый Массив();
	МассивТабличныхЧастей.Добавить("Товары");
	МассивТабличныхЧастей.Добавить("Услуги");
	МассивТабличныхЧастей.Добавить("ОС");
						
	Для Каждого ТабличнаяЧасть Из МассивТабличныхЧастей Цикл
				
		ПараметрыРасчета = ПодготовитьПараметрыРасчета(ТабличнаяЧасть);
		
		Для Каждого СтрокаТабличнойЧасти Из Объект[ТабличнаяЧасть] Цикл
			
			Если Объект.СуммаВключаетНалоги Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
			Иначе	
				Если ТабличнаяЧасть <> "ОС" Тогда
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
				КонецЕсли;	
					
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
			КонецЕсли;	
				
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
			
			Если ТабличнаяЧасть <> "ОС" ИЛИ Объект.СуммаВключаетНалоги Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	
		
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеДоговораФрагментЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СтруктураКурсыПред = ДополнительныеПараметры.СтруктураКурсыПред;
		СтруктураКурсы = ДополнительныеПараметры.СтруктураКурсы;
		
		// Цена, Сумма
		ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(Объект, ДатаДокумента, СтруктураКурсыПред, СтруктураКурсы, "Товары", Объект.ТочностьЦены);
		ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(Объект, ДатаДокумента, СтруктураКурсыПред, СтруктураКурсы, "Услуги", Объект.ТочностьЦены);
	КонецЕсли;	
	
	// Налоги
	МассивТабличныхЧастей = Новый Массив();
	МассивТабличныхЧастей.Добавить("Товары");
	МассивТабличныхЧастей.Добавить("Услуги");
	МассивТабличныхЧастей.Добавить("ОС");
						
	Для Каждого ТабличнаяЧасть Из МассивТабличныхЧастей Цикл
				
		ПараметрыРасчета = ПодготовитьПараметрыРасчета(ТабличнаяЧасть);
		
		Для Каждого СтрокаТабличнойЧасти Из Объект[ТабличнаяЧасть] Цикл
			
			Если Объект.СуммаВключаетНалоги Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
			Иначе	
				Если ТабличнаяЧасть <> "ОС" Тогда
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
				КонецЕсли;	
					
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
			КонецЕсли;
				
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
			
			Если ТабличнаяЧасть <> "ОС" ИЛИ Объект.СуммаВключаетНалоги Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ВалютаРасчетовПередИзменением, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ТекстПредупреждения = "")
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",		  	Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",				  	Объект.Курс);
	СтруктураПараметров.Вставить("Кратность",			  	Объект.Кратность);
	СтруктураПараметров.Вставить("СтавкаНДС",	  			Объект.СтавкаНДС);
	СтруктураПараметров.Вставить("СуммаВключаетНалоги",	  	Объект.СуммаВключаетНалоги);
	СтруктураПараметров.Вставить("Контрагент",			  	Объект.Контрагент);
	СтруктураПараметров.Вставить("ДоговорКонтрагента",		Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация",			  	Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",		  	ДатаДокумента);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",	  	ПерезаполнитьЦены);
	СтруктураПараметров.Вставить("ПересчитатьЦены",		  	ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения",  	Ложь);
	СтруктураПараметров.Вставить("ТекстПредупреждения",   	ТекстПредупреждения);

	// Открытие формы "Цены и Валюта".
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуЦеныИВалютаЗавершение", ЭтотОбъект, Новый Структура("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением));
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаКлиенте
Процедура ОткрытьФормуЦеныИВалютаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(ДатаДокумента, Объект.ВалютаДокумента, Объект.ДоговорКонтрагента);
	
	// Сформируем надпись цены и валюты.
	СтруктураНадписи = Новый Структура();
	СтруктураНадписи.Вставить("УчетВалютныхОпераций", Истина);
	СтруктураНадписи.Вставить("ВалютаДокумента", 	  Объект.ВалютаДокумента);
	СтруктураНадписи.Вставить("ТипЦен", 			  СтруктураДанные.ТипЦен);
	СтруктураНадписи.Вставить("СтавкаНДС", 			  Объект.СтавкаНДС);
	СтруктураНадписи.Вставить("СуммаВключаетНалоги",  Объект.СуммаВключаетНалоги);
		
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи, ДанныеУчетнойПолитики.ПлательщикНДС);
	
КонецПроцедуры // ОткрытьФормуЦеныИВалютаЗавершение()

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьНадписьЦеныИВалюта(СтруктураНадписи, ПлательщикНДС)
	
	ТекстНадписи = "";
	
	// Валюта
	Если СтруктураНадписи.УчетВалютныхОпераций Тогда
		Если ЗначениеЗаполнено(СтруктураНадписи.ВалютаДокумента) Тогда
			ТекстНадписи = НСтр("ru = '%Валюта%'");
			ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Валюта%", СокрЛП(Строка(СтруктураНадписи.ВалютаДокумента)));
		КонецЕсли;
	КонецЕсли;
	
	// Тип цен
	Если ЗначениеЗаполнено(СтруктураНадписи.ТипЦен) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%ТипЦен%'");
		Иначе	
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %ТипЦен%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ТипЦен%", СокрЛП(Строка(СтруктураНадписи.ТипЦен)));
	КонецЕсли;
	
	// Ставка НДС
	Если ЗначениеЗаполнено(СтруктураНадписи.СтавкаНДС) И ПлательщикНДС Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%СтавкаНДС%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %СтавкаНДС%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%СтавкаНДС%", СокрЛП(Строка(СтруктураНадписи.СтавкаНДС)));
	КонецЕсли;
	
	// Флаг сумма включает налоги
	Если СтруктураНадписи.СуммаВключаетНалоги Тогда
		ТекстНадписиСуммаВключаетНалоги = НСтр("ru = 'Сумма включает налоги'");
	Иначе
		ТекстНадписиСуммаВключаетНалоги = НСтр("ru = 'Сумма не включает налоги'");
	КонецЕсли;

	Если ПустаяСтрока(ТекстНадписи) Тогда
		ТекстНадписи = ТекстНадписи + НСтр("ru = '%СуммаВключаетНалоги%'");
	Иначе
		ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %СуммаВключаетНалоги%'");
	КонецЕсли;
	ТекстНадписи = СтрЗаменить(ТекстНадписи, "%СуммаВключаетНалоги%", ТекстНадписиСуммаВключаетНалоги);
	
	Возврат ТекстНадписи;
	
КонецФункции // СформироватьНадписьЦеныИВалюта()

&НаКлиенте
Процедура ОбработатьИзменениеУчетнойПолитики()	
	
	НовыеДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	
	Если НЕ ДанныеУчетнойПолитики = НовыеДанныеУчетнойПолитики Тогда 
		ДанныеУчетнойПолитики = НовыеДанныеУчетнойПолитики;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеНоменклатуры(СтрокаТабличнойЧасти, ИмяТабличнойЧасти)
	
	СтавкаНДС = ?(ДанныеУчетнойПолитики.ПлательщикНДС, 
		Объект.СтавкаНДС, 
		ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка"));
		
	СтавкаНСП = ?(ДанныеУчетнойПолитики.ПлательщикНСП И ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.КР"), 
		?(ИмяТабличнойЧасти = "Товары", Объект.СтавкаНСП,Объект.СтавкаНСПУслуги),//?(ИмяТабличнойЧасти = "Товары", ДанныеУчетнойПолитики.СтавкаНСПРеализацииТовары, ДанныеУчетнойПолитики.СтавкаНСПРеализацииУслуги), 
		ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка"));
		
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Дата", ДатаДокумента);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Контрагент", Объект.Контрагент);
	СтруктураДанные.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("СуммаВключаетНалоги", Объект.СуммаВключаетНалоги);
	СтруктураДанные.Вставить("СтавкаНДС", СтавкаНДС);
	СтруктураДанные.Вставить("СтавкаНСП", СтавкаНСП);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("ТочностьЦены", Объект.ТочностьЦены);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);

	// Заполнение по данным номенклатуры
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.СчетДоходов = СтруктураДанные.СчетДоходов;
	СтрокаТабличнойЧасти.СтатьяДоходов = СтруктураДанные.СтатьяДоходов;
	
	Если ИмяТабличнойЧасти = "Товары" Тогда 
		СтрокаТабличнойЧасти.СчетУчета = СтруктураДанные.СчетУчета;
		СтрокаТабличнойЧасти.СтатьяРасходов = СтруктураДанные.СтатьяРасходов;
	ИначеЕсли ИмяТабличнойЧасти = "Услуги" Тогда
		СтрокаТабличнойЧасти.ДополнительныеСведения = НаименованиеУслуги(СтрокаТабличнойЧасти.Номенклатура);
	КонецЕсли;	
	
	Если ИмяТабличнойЧасти = "Услуги"
		И Объект.ЭкспортУслугПокупателюКР Тогда 
		СтрокаТабличнойЧасти.СтавкаНСП = ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка");
	Иначе 	
		СтрокаТабличнойЧасти.СтавкаНСП = СтруктураДанные.СтавкаНСП;
	КонецЕсли;	

	ПараметрыРасчета = ПодготовитьПараметрыРасчета(ИмяТабличнойЧасти);
	
	// Расчет суммы
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	Иначе		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЕсли;
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
	КонецЕсли;	
	
	ОбновитьПодвалФормы();
КонецПроцедуры	

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	// Счета учета
	СчетаУчетаНоменклатуры = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(СтруктураДанные.Организация, СтруктураДанные.Номенклатура);
	СтруктураДанные.Вставить("СчетУчета", СчетаУчетаНоменклатуры.СчетУчета);
	СтруктураДанные.Вставить("СчетДоходов", СчетаУчетаНоменклатуры.СчетДоходов);
	СтруктураДанные.Вставить("СчетРасходов", СчетаУчетаНоменклатуры.СчетРасходов);
	СтруктураДанные.Вставить("СтатьяДоходов", СчетаУчетаНоменклатуры.СтатьяДоходов);
	СтруктураДанные.Вставить("СтатьяРасходов", СчетаУчетаНоменклатуры.СтатьяРасходов);
	
	// Ставка НСП.
	Если СтруктураДанные.Свойство("СтавкаНСП")
		И ЗначениеЗаполнено(СтруктураДанные.Номенклатура.СтавкаНСП) Тогда 
		СтруктураДанные.СтавкаНСП = СтруктураДанные.Номенклатура.СтавкаНСП;
	КонецЕсли;	

	// Цены 
	СтруктураДанные.Вставить("ТипЦен", СтруктураДанные.ДоговорКонтрагента.ТипЦен);
	Цена = Ценообразование.ПолучитьЦенуНоменклатуры(СтруктураДанные);
	// Цены документов
	Если Цена = 0 Тогда
		СтруктураДанные.Вставить("ЗначениеСтавкиНДС", УчетНДС.ПолучитьСтавкуНДС(СтруктураДанные.Дата, СтруктураДанные.СтавкаНДС));
		СтруктураДанные.Вставить("ЗначениеСтавкиНСП", УчетНДС.ПолучитьСтавкуНСП(СтруктураДанные.Дата, СтруктураДанные.Организация, СтруктураДанные.СтавкаНСП));
		СтруктураДанные.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
		Цена = Ценообразование.ПолучитьЦенуПоДокументам(СтруктураДанные);
	КонецЕсли;	
	СтруктураДанные.Вставить("Цена", Цена);
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Получает наименование Услуги
//
&НаСервереБезКонтекста
Функция НаименованиеУслуги(Номенклатура)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "НаименованиеПолное");
КонецФункции 

// Процедура рассчитывает итоги для подвала формы.
//
&НаКлиенте
Процедура ОбновитьПодвалФормы()
	
	ИтогВсего = Объект.Товары.Итог("Всего") + Объект.Услуги.Итог("Всего") + Объект.ОС.Итог("Сумма");
	ИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС") + Объект.ОС.Итог("СуммаНДС");
	ИтогСуммаНСП = Объект.Товары.Итог("СуммаНСП") + Объект.Услуги.Итог("СуммаНСП") + Объект.ОС.Итог("СуммаНСП");
	ИтогСуммаКОплате = ИтогВсего;
	
КонецПроцедуры // ОбновитьПодвалФормы()

// Процедура заполняет список выбора Точность цены
//
&НаСервере
Процедура ЗаполнитьСписокВыбораТочностьЦены()

	Элементы.ТочностьЦены.СписокВыбора.Очистить();

	ЗначенияТочностиЦены = Ценообразование.ЗначенияТочностиЦены();
	Для Каждого ЗначениеТочностиЦены Из ЗначенияТочностиЦены Цикл 
		Элементы.ТочностьЦены.СписокВыбора.Добавить(ЗначениеТочностиЦены.Значение, ЗначениеТочностиЦены.Представление);
	КонецЦикла;	

КонецПроцедуры // ЗаполнитьСписокВыбораТочностьЦены()

// Процедура устанавливает формат и формат редактирования элементов "Цена" в ТЧ "Товары" и "Услуги"
//
&НаКлиенте
Процедура УстановитьФорматЦены()

	ФорматЦены = ЦенообразованиеКлиент.ФорматЦены(Объект.ТочностьЦены);
	
	Элементы.ТоварыЦена.ФорматРедактирования = ФорматЦены;
	Элементы.ТоварыЦена.Формат = ФорматЦены;

	Элементы.УслугиЦена.ФорматРедактирования = ФорматЦены;
	Элементы.УслугиЦена.Формат = ФорматЦены;

	Элементы.Товары.Обновить();
	Элементы.Услуги.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДокументуОснования()

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ДокументОбъект.ЗаполнитьПоРеализацииТоваровУслуг(Объект.ДокументОснование);
		
	ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
		ДокументОбъект.ЗаполнитьПоАктуОбОказанииПроизводственныхУслуг(Объект.ДокументОснование);	
	Иначе
		ДокументОбъект.ЗаполнитьПоРеализацииУслугПоПереработке(Объект.ДокументОснование);
	КонецЕсли;	
		
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ПризнакСтраны = Объект.Контрагент.ПризнакСтраны;
	УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры

// Процедура заполняет строки
//
// Параметры:
//  МассивОсновныхСредств  - Массив - массив ОС, по которым нужно заполнить строки, если не указано- заполняются все строки
//
&НаСервере
Процедура ДополнитьСтрокиНаСервере(МассивОсновныхСредств = Неопределено)
	Если МассивОсновныхСредств = Неопределено Тогда 
		МассивОсновныхСредств = Объект.ОС.Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");
	КонецЕсли;		
	
	Если МассивОсновныхСредств.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;	
	
	УправлениеВнеоборотнымиАктивами.ЗаполнитьДанныеОсновныхСредствВТабличнойЧасти(Объект.Ссылка, ДатаДокумента, Объект.Организация, Объект.ОС, МассивОсновныхСредств);
КонецПроцедуры // ДополнитьСтрокиНаСервере()

// Получает набор данных с сервера для процедуры ОСПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеОСПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить(
		"ИнвентарныйНомер",
		СтруктураДанные.ОсновноеСредство.Код);
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОСПриИзменении()

// Подготовка параметров для расчетов
//
// Параметры:
//	ИмяТабличнойЧасти - Строка - наименование табличной части
//	СчитатьОтДохода - Булево - признак того, что расчет необходимо делать от реквизита "Доход"
//
// Возвращаемое значение:
//	Структура - разделенные данные URI
//		*Период - Дата - дата документа
//		*Организация - СправочникСсылка.Организации - организация документа
//		*ПризнакСтраныЕАЭС - Булево - признак страны ЕАЭС или нет
//		*ПризнакСтраныИмпортЭкспорт - Булево - признак страны ИмпортЭкспорт или нет
//		*СуммаВключаетНалоги - Булево - сумма включает налоги или нет
//		*БезналичныйРасчет - Булево - признак безначличного расчета
//		*СчитатьОтДохода - Булево - признак того, что расчет необходимо делать от реквизита "Доход"
//		*ИмяТабличнойЧасти - Строка - наименование табличной части
//		*Точность - Булево - точность цены (количество знаков цены после запятой)
//		*СтавкаНДС - СправочникСсылка.СтавкиНДС - ставка НДС
//
&НаСервере
Функция ПодготовитьПараметрыРасчета(ИмяТабличнойЧасти, СчитатьОтДохода = Ложь)

	Документ = РеквизитФормыВЗначение("Объект");
	ПараметрыРасчета = Документ.ПодготовитьПараметрыРасчета(ИмяТабличнойЧасти, ДанныеУчетнойПолитики, СчитатьОтДохода);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	Возврат ПараметрыРасчета;
КонецФункции

// Процедура - Установить пиктограмму комментария.
//
&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

&НаСервере
Процедура ПолучитьПредставлениеЭСФ()
	Если БухгалтерскийУчетВызовСервераПовтИсп.ВедетсяУчетЭСФ() Тогда 
		СведенияОбЭСФ = ЭСФСервер.СведенияОбЭСФПоДокументуОснованию(Объект.Организация, Объект.Ссылка, НСтр("ru = 'Создать новый ЭСФ (выписанный)'"));
		ПредставлениеЭСФ = СведенияОбЭСФ.ПредставлениеЭСФ;
	КонецЕсли;	
КонецПроцедуры

// Процедура - Получены штрихкоды
//
// Параметры:
//  ДанныеШтрихкодов	 - Структура/Массив - В зависимости от точки вызова передается структура (обработка сканера) или массив (обработка ТСД)
//  ИмяТабличнойЧасти	 - Строка	 - Имя табличной части для загрузки
//
&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрихкодов, ИмяТабличнойЧасти) Экспорт
	
	Модифицированность = Истина;
	
	НеДобавленныеШтрихкоды = ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов, ИмяТабличнойЧасти);
	
	// Неизвестные штрихкоды.
	Если НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды.Количество() > 0 Тогда
		Для Каждого СтруктураДанные Из НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды Цикл 
			СтрокаСообщения = СтрШаблон(НСтр("ru = 'Данные по штрихкоду не найдены: %1'"), СтруктураДанные.Штрихкод);
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		КонецЦикла;	
	// Штрихкоды некорректного типа.
	ИначеЕсли НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа.Количество() > 0 Тогда 
		Для Каждого СтруктураДанные Из НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа Цикл 
			СтрокаСообщения = СтрШаблон(НСтр("ru = 'Найденная по штрихкоду %1 номенклатура: ""%2"", не подходит для этой табличной части'"),
				СтруктураДанные.ТекШтрихкод, СтруктураДанные.Номенклатура);
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаСервереБезКонтекста
Функция ПолучитьДанныеПоШтрихкоду(ТекШтрихкод)
	
	Номенклатура = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьНоменклатуруПоШтрихкоду(ТекШтрихкод);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", Номенклатура);
	СтруктураДанные.Вставить("ТипНоменклатурыУслуга", ?(ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура"), Номенклатура.Услуга, Ложь));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеПоШтрихкоду()

// Функция - Заполнить по данным штрихкодов
//
// Параметры:
//  ДанныеШтрихкодов		 - 	 - Структура/Массив	 - В зависимости от точки вызова передается структура (обработка сканера) или массив (обработка ТСД)
//  ИмяТабличнойЧасти	 - Строка	 - Имя табличной части для загрузки
// 
// Возвращаемое значение:
//  Структура - Массивы неизвестных штрих кодов
//
&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов, ИмяТабличнойЧасти) 
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	Для каждого ТекШтрихкод Из МассивШтрихкодов Цикл
		СтруктураДанные = ПолучитьДанныеПоШтрихкоду(ТекШтрихкод);
		
		Если НЕ ЗначениеЗаполнено(СтруктураДанные.Номенклатура) Тогда 
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли ИмяТабличнойЧасти = "Товары"
			И СтруктураДанные.ТипНоменклатурыУслуга Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("ТекШтрихкод, Номенклатура", ТекШтрихкод, СтруктураДанные.Номенклатура));
		ИначеЕсли ИмяТабличнойЧасти = "Услуги"
			И НЕ СтруктураДанные.ТипНоменклатурыУслуга Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("ТекШтрихкод, Номенклатура", ТекШтрихкод, СтруктураДанные.Номенклатура));
		Иначе 
			СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти].Добавить();
			СтрокаТабличнойЧасти.Номенклатура = СтруктураДанные.Номенклатура;
			СтрокаТабличнойЧасти.Количество = ТекШтрихкод.Количество;
			
			ОбработатьИзменениеНоменклатуры(СтрокаТабличнойЧасти, ИмяТабличнойЧасти);

		КонецЕсли;
	КонецЦикла;	
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа",
		НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа);

КонецФункции // ЗаполнитьПоДаннымШтрихкодов()
// Конец ПодключаемоеОборудование

// Процедура устанавливает Ставку НСП и Ставку НСП Услуги в значения по умолчанию.
//
&НаСервере
Процедура УстановитьСтавкиНСППоУмолчанию()
	Объект.СтавкаНСП = ДанныеУчетнойПолитики.СтавкаНСПРеализацииТовары;
	Объект.СтавкаНСПУслуги = ДанныеУчетнойПолитики.СтавкаНСПРеализацииУслуги;
КонецПроцедуры	

// Процедура - При изменении поля "Ставка НСП"
//
&НаКлиенте
Процедура ПриИзмененииСтавкиНСП()
	
	МассивТабличныхЧастей = Новый Массив();
	МассивТабличныхЧастей.Добавить("Товары");
	МассивТабличныхЧастей.Добавить("ОС");
	
	Для Каждого ТабличнаяЧасть Из МассивТабличныхЧастей Цикл
		
		ПараметрыРасчета = ПодготовитьПараметрыРасчета(ТабличнаяЧасть);
		
		Для Каждого СтрокаТабличнойЧасти Из Объект[ТабличнаяЧасть] Цикл
			
			СтрокаТабличнойЧасти.СтавкаНСП = Объект.СтавкаНСП;
			
			Если Объект.СуммаВключаетНалоги Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
			Иначе
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);	
			КонецЕсли;	
				
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
			
			Если ТабличнаяЧасть <> "ОС" Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	ОбновитьПодвалФормы();
	
КонецПроцедуры	

// Процедура - При изменении поля "Ставка НСП услуги"
//
&НаКлиенте
Процедура ПриИзмененииСтавкиНСПУслуги()
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Услуги");
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
		
		СтрокаТабличнойЧасти.СтавкаНСП = Объект.СтавкаНСПУслуги;
		
		Если Объект.СуммаВключаетНалоги Тогда
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		Иначе
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);	
		КонецЕсли;	
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
	КонецЦикла;
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	ОбновитьПодвалФормы();
	
КонецПроцедуры	

#КонецОбласти

#Область КопированиеСтрокТабличныхЧастей

&НаКлиенте
Процедура ТоварыКопироватьСтроки(Команда)
	
	КопироватьСтроки("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВставитьСтроки(Команда)
	
	ВставитьСтроки("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКопироватьСтроки(Команда)
	
	КопироватьСтроки("Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиВставитьСтроки(Команда)
	
	ВставитьСтроки("Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСтроки(ИмяТЧ)
	
	Если КопированиеТабличнойЧастиКлиент.МожноКопироватьСтроки(Объект[ИмяТЧ], Элементы[ИмяТЧ].ТекущиеДанные) Тогда
		КоличествоСкопированных = 0;
		КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных);
		КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСкопированных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(ИмяТЧ)
	
	КоличествоСкопированных = 0;
	КоличествоВставленных = 0;
	ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных);
	КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных)
	
	КопированиеТабличнойЧастиСервер.Копировать(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки, КоличествоСкопированных);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных)
	
	КопированиеТабличнойЧастиСервер.Вставить(Объект, ИмяТЧ, Элементы, КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
