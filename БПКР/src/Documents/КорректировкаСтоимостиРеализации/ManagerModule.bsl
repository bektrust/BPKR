#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

Функция ТекстЗапросаДанныеДляОбновленияЦенДокументов() Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
		|	ТаблицаДокумента.Цена КАК Цена,
		|	&Валюта КАК Валюта,
		|	&СпособЗаполненияЦены КАК СпособЗаполненияЦены,
		|	&ЦенаВключаетНалоги КАК ЦенаВключаетНалоги
		|ПОМЕСТИТЬ ТаблицаНоменклатуры
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДокумента.Номенклатура,
		|	ТаблицаДокумента.Цена,
		|	&Валюта,
		|	&СпособЗаполненияЦены,
		|	&ЦенаВключаетНалоги
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции
 
// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла 
 
// Устанавливает параметры загрузки.
//
//@skip-warning
Процедура УстановитьПараметрыЗагрузкиИзФайлаВТЧ(Параметры) Экспорт
	
КонецПроцедуры

// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
//
// Параметры:
//   АдресЗагружаемыхДанных    - Строка - Адрес временного хранилища с таблицей значений, в которой
//                                        находятся загруженные данные из файла. Состав колонок:
//     * Идентификатор - Число - Порядковый номер строки;
//     * остальные колонки соответствуют колонкам макета ЗагрузкаИзФайла.
//   АдресТаблицыСопоставления - Строка - Адрес временного хранилища с пустой таблицей значений,
//                                        являющейся копией табличной части документа, 
//                                        которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
//   СписокНеоднозначностей - ТаблицаЗначений - Список неоднозначных значений, для которых в ИБ имеется несколько
//                                              подходящих вариантов.
//     * Колонка       - Строка - Имя колонки, в которой была обнаружена неоднозначность;
//     * Идентификатор - Число  - Идентификатор строки, в которой была обнаружена неоднозначность.
//   ПолноеИмяТабличнойЧасти   - Строка - Полное имя табличной части, в которую загружаются данные.
//   ДополнительныеПараметры   - ЛюбойТип - Любые дополнительные сведения.
//
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ПолноеИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт
	
	Товары = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления);
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДляСопоставления.Номенклатура,
		|	ДанныеДляСопоставления.Идентификатор
		|ПОМЕСТИТЬ ДанныеДляСопоставления
		|ИЗ
		|	&ДанныеДляСопоставления КАК ДанныеДляСопоставления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		// Сопоставление по номенклатуре
		|ВЫБРАТЬ
		|	МАКСИМУМ(СправочникНоменклатура.Ссылка) КАК Ссылка,
		|	ДанныеДляСопоставления.Идентификатор,
		|	КОЛИЧЕСТВО(ДанныеДляСопоставления.Идентификатор) КАК Количество
		|ИЗ
		|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО (СправочникНоменклатура.Наименование ПОДОБНО ДанныеДляСопоставления.Номенклатура)
		|ГДЕ
		|	НЕ СправочникНоменклатура.Ссылка ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеДляСопоставления.Идентификатор";
	Запрос.УстановитьПараметр("ДанныеДляСопоставления", ЗагружаемыеДанные);
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	ТаблицаНоменклатура = РезультатыЗапросов[1].Выгрузить();
	ТаблицаНоменклатура.Индексы.Добавить("Идентификатор");
	
	ЕстьПолеСуммаНДС = НЕ ЗагружаемыеДанные.Колонки.Найти("СуммаНДС") = Неопределено;
	ЕстьПолеСуммаНСП = НЕ ЗагружаемыеДанные.Колонки.Найти("СуммаНСП") = Неопределено;
	
	Для Каждого СтрокаТаблицы Из ЗагружаемыеДанные Цикл
		
		СтрокаТабличнойЧасти = Товары.Добавить();
		СтрокаТабличнойЧасти.Идентификатор = СтрокаТаблицы.Идентификатор;
		СтрокаТабличнойЧасти.Количество = СтрокаТаблицы.Количество;
		СтрокаТабличнойЧасти.Цена = СтрокаТаблицы.Цена;
		СтрокаТабличнойЧасти.Сумма = СтрокаТаблицы.Сумма;
		Если ЕстьПолеСуммаНДС Тогда 
			СтрокаТабличнойЧасти.СуммаНДС = СтрокаТаблицы.СуммаНДС;
		КонецЕсли;
		Если ЕстьПолеСуммаНСП Тогда 
			СтрокаТабличнойЧасти.СуммаНСП = СтрокаТаблицы.СуммаНСП;
		КонецЕсли;	
				
		СтрокаНоменклатура = ТаблицаНоменклатура.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
		Если СтрокаНоменклатура <> Неопределено Тогда 
			Если СтрокаНоменклатура.Количество = 1 Тогда 
				СтрокаТабличнойЧасти.Номенклатура = СтрокаНоменклатура.Ссылка;
			ИначеЕсли СтрокаНоменклатура.Количество > 1 Тогда
				ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
				ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор; 
				ЗаписьОНеоднозначности.Колонка = "Номенклатура";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Товары, АдресТаблицыСопоставления);
	
КонецПроцедуры

// Возвращает список подходящих объектов ИБ для неоднозначного значения ячейки.
// 
// Параметры:
//   ПолноеИмяТабличнойЧасти  - Строка - Полное имя табличной части, в которую загружаются данные.
//  ИмяКолонки                - Строка - Имя колонки, в который возникла неоднозначность.
//  СписокНеоднозначностей    - Массив - Массив для заполнения с неоднозначными данными.
//  ЗагружаемыеЗначенияСтрока - Строка - Загружаемые данные на основании которых возникла неоднозначность.
//  ДополнительныеПараметры   - ЛюбойТип - Любые дополнительные сведения.
//
Процедура ЗаполнитьСписокНеоднозначностей(ПолноеИмяТабличнойЧасти, СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока, ДополнительныеПараметры) Экспорт
	
	Если ИмяКолонки = "Номенклатура" Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Номенклатура.Ссылка
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.Номенклатура);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СписокНеоднозначностей.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла
 
#КонецОбласти

#Область ПроцедурыПроведенияДокумента

// Формирует таблицу значений, содержащую данные для проведения по регистру бухгалтерии Хозрасчетный.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаХозрасчетный(ДокументСсылка,СтруктураДополнительныеСвойства, Отказ)
	
	// 1. Доход от реализации товаров
	// 2. НДС товары
	// 3. НСП товары
	
	// 4. Доход от реализации услуг
	// 5. НДС услуги
	// 6. НСП услуги
	
	// 7. Доход от реализации ОС
	// 8. НДС ОС
	// 9. НСП ОС
	
	ТекстыЗапроса = Новый Массив;

	// Доход от реализации товаров.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	1 КАК Порядок,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.СчетРасчетов КАК СчетДт,
		|	ВременнаяТаблицаТовары.СчетДоходов КАК СчетКт,
		|	ВременнаяТаблицаШапка.Контрагент КАК СубконтоДт1,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ВременнаяТаблицаТовары.СтатьяДоходов КАК СубконтоКт1,
		|	ВременнаяТаблицаТовары.НоменклатурнаяГруппа КАК СубконтоКт2,
		|	ВременнаяТаблицаТовары.Номенклатура КАК СубконтоКт3,
		|	ВременнаяТаблицаТовары.СуммаДоходаВВалютеРеглУчета КАК Сумма,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаДт,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаКт,
		|	ВременнаяТаблицаТовары.СуммаДохода КАК ВалютнаяСуммаДт,
		|	ВременнаяТаблицаТовары.СуммаДохода КАК ВалютнаяСуммаКт,
		|	ВЫРАЗИТЬ(&СодержаниеТоварыДоход КАК СТРОКА(150)) КАК Содержание,
		|	0 КАК КоличествоДт,
		|	0 КАК КоличествоКт,
		|	ЛОЖЬ КАК КорректироватьНУ
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ВременнаяТаблицаТовары.ВсегоВВалютеРеглУчета <> 0
		|	И &Основание_РеализацияТоваровУслуг";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// НДС товары.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	2 КАК Порядок,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.СчетРасчетов КАК СчетДт,
		|	ВременнаяТаблицаШапка.СчетУчетаНДС КАК СчетКт,
		|	ВременнаяТаблицаШапка.Контрагент КАК СубконтоДт1,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ВременнаяТаблицаТовары.СуммаНДСВВалютеРеглУчета КАК Сумма,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаДт,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаКт,
		|	ВременнаяТаблицаТовары.СуммаНДС КАК ВалютнаяСуммаДт,
		|	ВременнаяТаблицаТовары.СуммаНДС КАК ВалютнаяСуммаКт,
		|	&СодержаниеТоварыНДС КАК Содержание,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоДт,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоКт,
		|	ЛОЖЬ КАК КорректироватьНУ
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ПО (ИСТИНА)
		|ГДЕ
		|	&ПлательщикНДС
		|	И НЕ ВременнаяТаблицаТовары.СуммаНДСВВалютеРеглУчета = 0
		|	И &Основание_РеализацияТоваровУслуг";
	ТекстыЗапроса.Добавить(ТекстЗапроса);

	// НСП товары.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	3 КАК Порядок,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.СчетРасчетов КАК СчетДт,
		|	ВременнаяТаблицаШапка.СчетУчетаНСП КАК СчетКт,
		|	ВременнаяТаблицаШапка.Контрагент КАК СубконтоДт1,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ВременнаяТаблицаТовары.СуммаНСПВВалютеРеглУчета КАК Сумма,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаДт,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаКт,
		|	ВременнаяТаблицаТовары.СуммаНСП КАК ВалютнаяСуммаДт,
		|	ВременнаяТаблицаТовары.СуммаНСП КАК ВалютнаяСуммаКт,
		|	&СодержаниеТоварыНСП КАК Содержание,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоДт,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоКт,
		|	ЛОЖЬ КАК КорректироватьНУ
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаТовары.СуммаНСПВВалютеРеглУчета = 0
		|	И &Основание_РеализацияТоваровУслуг";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
		
	// Доход от реализации услуг.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	4 КАК Порядок,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.СчетРасчетов КАК СчетДт,
		|	ВременнаяТаблицаУслуги.СчетДоходов КАК СчетКт,
		|	ВременнаяТаблицаШапка.Контрагент КАК СубконтоДт1,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ВременнаяТаблицаУслуги.СтатьяДоходов КАК СубконтоКт1,
		|	ВременнаяТаблицаУслуги.НоменклатурнаяГруппа КАК СубконтоКт2,
		|	ВременнаяТаблицаУслуги.Номенклатура КАК СубконтоКт3,	
		|	ВременнаяТаблицаУслуги.СуммаДоходаВВалютеРеглУчета КАК Сумма,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаДт,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаКт,	
		|	ВременнаяТаблицаУслуги.СуммаДохода КАК ВалютнаяСуммаДт,
		|	ВременнаяТаблицаУслуги.СуммаДохода КАК ВалютнаяСуммаКт,	
		|	&СодержаниеУслугиДоход КАК Содержание,
		|	0 КАК КоличествоДт,
		|	0 КАК КоличествоКт,
		|	ЛОЖЬ КАК КорректироватьНУ
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ВременнаяТаблицаУслуги.ВсегоВВалютеРеглУчета <> 0  
		|	И (&Основание_РеализацияТоваровУслуг
		|		ИЛИ &Основание_РеализацияПоПереработке
		|		ИЛИ &Основание_АктОбОказанииПроизводственныхУслуг)";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// НДС услуги.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	5 КАК Порядок,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.СчетРасчетов КАК СчетДт,
		|	ВременнаяТаблицаШапка.СчетУчетаНДС КАК СчетКт,
		|	ВременнаяТаблицаШапка.Контрагент КАК СубконтоДт1,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ВременнаяТаблицаУслуги.СуммаНДСВВалютеРеглУчета КАК Сумма,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаДт,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаКт,
		|	ВременнаяТаблицаУслуги.СуммаНДС КАК ВалютнаяСуммаДт,
		|	ВременнаяТаблицаУслуги.СуммаНДС КАК ВалютнаяСуммаКт,
		|	&СодержаниеУслугиНДС КАК Содержание,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоДт,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоКт,
		|	ЛОЖЬ КАК КорректироватьНУ
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги
		|		ПО (ИСТИНА)
		|ГДЕ
		|	&ПлательщикНДС
		|	И НЕ ВременнаяТаблицаУслуги.СуммаНДСВВалютеРеглУчета = 0
		|	И (&Основание_РеализацияТоваровУслуг
		|		ИЛИ &Основание_РеализацияПоПереработке
		|		ИЛИ &Основание_АктОбОказанииПроизводственныхУслуг)";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// НСП услуги.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	6 КАК Порядок,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.СчетРасчетов КАК СчетДт,
		|	ВременнаяТаблицаШапка.СчетУчетаНСП КАК СчетКт,
		|	ВременнаяТаблицаШапка.Контрагент КАК СубконтоДт1,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ВременнаяТаблицаУслуги.СуммаНСПВВалютеРеглУчета КАК Сумма,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаДт,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаКт,
		|	ВременнаяТаблицаУслуги.СуммаНСП КАК ВалютнаяСуммаДт,
		|	ВременнаяТаблицаУслуги.СуммаНСП КАК ВалютнаяСуммаКт,
		|	&СодержаниеУслугиНСП КАК Содержание,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоДт,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоКт,
		|	ЛОЖЬ КАК КорректироватьНУ
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаУслуги.СуммаНСПВВалютеРеглУчета = 0
		|	И (&Основание_РеализацияТоваровУслуг
		|		ИЛИ &Основание_РеализацияПоПереработке
		|		ИЛИ &Основание_АктОбОказанииПроизводственныхУслуг)";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Доход от реализации ОС.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	7 КАК Порядок,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.СчетРасчетов КАК СчетДт,
		|	ВременнаяТаблицаОС.СчетДоходов КАК СчетКт,
		|	ВременнаяТаблицаШапка.Контрагент КАК СубконтоДт1,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ВременнаяТаблицаОС.СтатьяДоходов КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ВременнаяТаблицаОС.СуммаДоходаВВалютеРеглУчета КАК Сумма,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаДт,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаКт,	
		|	ВременнаяТаблицаОС.СуммаДохода КАК ВалютнаяСуммаДт,
		|	ВременнаяТаблицаОС.СуммаДохода КАК ВалютнаяСуммаКт,
		|	&СодержаниеОСДоход КАК Содержание,
		|	0 КАК КоличествоДт,
		|	0 КАК КоличествоКт,
		|	НЕ ЕСТЬNULL(ВременнаяТаблицаКонсервацияОС.Консервация, ЛОЖЬ) КАК КорректироватьНУ
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКонсервацияОС КАК ВременнаяТаблицаКонсервацияОС
		|		ПО (ВременнаяТаблицаОС.ОсновноеСредство = ВременнаяТаблицаКонсервацияОС.ОсновноеСредство)
		|ГДЕ
		|	ВременнаяТаблицаОС.ВсегоВВалютеРеглУчета <> 0
		|	И &Основание_РеализацияТоваровУслуг";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// НДС ОС.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	8 КАК Порядок,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.СчетРасчетов КАК СчетДт,
		|	ВременнаяТаблицаШапка.СчетУчетаНДС КАК СчетКт,
		|	ВременнаяТаблицаШапка.Контрагент КАК СубконтоДт1,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ВременнаяТаблицаОС.СуммаНДСВВалютеРеглУчета КАК Сумма,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаДт,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаКт,
		|	ВременнаяТаблицаОС.СуммаНДС КАК ВалютнаяСуммаДт,
		|	ВременнаяТаблицаОС.СуммаНДС КАК ВалютнаяСуммаКт,
		|	&СодержаниеОСНДС КАК Содержание,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоДт,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоКт,
		|	НЕ ЕСТЬNULL(ВременнаяТаблицаКонсервацияОС.Консервация, ЛОЖЬ) КАК КорректироватьНУ
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКонсервацияОС КАК ВременнаяТаблицаКонсервацияОС
		|		ПО (ВременнаяТаблицаОС.ОсновноеСредство = ВременнаяТаблицаКонсервацияОС.ОсновноеСредство)
		|ГДЕ
		|	&ПлательщикНДС
		|	И НЕ ВременнаяТаблицаОС.СуммаНДСВВалютеРеглУчета = 0
		|	И &Основание_РеализацияТоваровУслуг";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// НСП ОС.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	9 КАК Порядок,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.СчетРасчетов КАК СчетДт,
		|	ВременнаяТаблицаШапка.СчетУчетаНСП КАК СчетКт,
		|	ВременнаяТаблицаШапка.Контрагент КАК СубконтоДт1,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ВременнаяТаблицаОС.СуммаНСПВВалютеРеглУчета КАК Сумма,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаДт,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаКт,
		|	ВременнаяТаблицаОС.СуммаНСП КАК ВалютнаяСуммаДт,
		|	ВременнаяТаблицаОС.СуммаНСП КАК ВалютнаяСуммаКт,
		|	&СодержаниеОСНСП КАК Содержание,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоДт,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоКт,
		|	НЕ ЕСТЬNULL(ВременнаяТаблицаКонсервацияОС.Консервация, ЛОЖЬ) КАК КорректироватьНУ
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКонсервацияОС КАК ВременнаяТаблицаКонсервацияОС
		|		ПО (ВременнаяТаблицаОС.ОсновноеСредство = ВременнаяТаблицаКонсервацияОС.ОсновноеСредство)
		|ГДЕ
		|	НЕ ВременнаяТаблицаОС.СуммаНСПВВалютеРеглУчета = 0
		|	И &Основание_РеализацияТоваровУслуг";
	ТекстыЗапроса.Добавить(ТекстЗапроса);

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, Символы.ПС + " ОБЪЕДИНИТЬ ВСЕ " + Символы.ПС);
	Запрос.УстановитьПараметр("СодержаниеТоварыДоход", 	НСтр("ru = 'Доход от реализации товаров'")); 
	Запрос.УстановитьПараметр("СодержаниеТоварыНДС", 	НСтр("ru = 'НДС (товары)'")); 
	Запрос.УстановитьПараметр("СодержаниеТоварыНСП", 	НСтр("ru = 'НСП (товары)'")); 
	
	Запрос.УстановитьПараметр("СодержаниеУслугиДоход", 	НСтр("ru = 'Доход от реализации услуг'")); 
	Запрос.УстановитьПараметр("СодержаниеУслугиНДС", 	НСтр("ru = 'НДС (услуги)'")); 
	Запрос.УстановитьПараметр("СодержаниеУслугиНСП", 	НСтр("ru = 'НСП (услуги)'")); 
	
	Запрос.УстановитьПараметр("СодержаниеОСДоход", 		НСтр("ru = 'Доход от реализации ОС'")); 
	Запрос.УстановитьПараметр("СодержаниеОСНДС", 		НСтр("ru = 'НДС (ОС)'")); 
	Запрос.УстановитьПараметр("СодержаниеОСНСП", 		НСтр("ru = 'НСП (ОС)'")); 

	Запрос.УстановитьПараметр("ПлательщикНДС", СтруктураДополнительныеСвойства.УчетнаяПолитика.ПлательщикНДС);
	
	ДокументОснование = СтруктураДополнительныеСвойства.ДляПроведения.Ссылка.ДокументОснование;
	
	Запрос.УстановитьПараметр("Основание_РеализацияТоваровУслуг",				ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	Запрос.УстановитьПараметр("Основание_РеализацияПоПереработке", 				ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияУслугПоПереработке"));
	Запрос.УстановитьПараметр("Основание_АктОбОказанииПроизводственныхУслуг", 	ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг"));
	
	РезультатЗапроса = Запрос.Выполнить();	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаХозрасчетный", РезультатЗапроса.Выгрузить());	
		
КонецПроцедуры // СформироватьТаблицаХозрасчетный()

// Формирует таблицу значений, содержащую данные для проведения по регистру бухгалтерии Хозрасчетный.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПродажи(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	// 1. Товары
	// 2. Усуги
	// 3. Усуги (реализация по переработке)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	1 КАК Порядок,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.Ссылка КАК ДокументРеализации,
		|	ВременнаяТаблицаШапка.Склад КАК Склад,
		|	ВременнаяТаблицаШапка.Контрагент КАК Контрагент,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента КАК Договор,
		|	ВременнаяТаблицаШапка.СтавкаНДС КАК СтавкаНДС,
		|	ВременнаяТаблицаТовары.СтавкаНСП КАК СтавкаНСП,
		|	ВременнаяТаблицаШапка.БезналичныйРасчет КАК БезналичныйРасчет,
		|	ЛОЖЬ КАК ЭкспортУслугПокупателюКР,
		|	ВременнаяТаблицаШапка.БезвозмезднаяПоставка КАК БезвозмезднаяПоставка,
		|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
		|	0 КАК Количество,
		|	СУММА(ВременнаяТаблицаТовары.ВсегоВВалютеРеглУчета - ВременнаяТаблицаТовары.СуммаНДСВВалютеРеглУчета - ВременнаяТаблицаТовары.СуммаНСПВВалютеРеглУчета) КАК Сумма,
		|	СУММА(ВременнаяТаблицаТовары.СуммаНДСВВалютеРеглУчета) КАК СуммаНДС,
		|	СУММА(ВременнаяТаблицаТовары.СуммаНСПВВалютеРеглУчета) КАК СуммаНСП,
		|	0 КАК СуммаСкидки,
		|	0 КАК СуммаСкидкиСНалогами,
		|	СУММА(ВременнаяТаблицаТовары.СуммаДоходаВВалютеРеглУчета) КАК СуммаДохода,
		|	СУММА(ВременнаяТаблицаТовары.ВсегоВВалютеРеглУчета) КАК СуммаВсего,
		|	СУММА(0) КАК Себестоимость
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаТовары.ВсегоВВалютеРеглУчета = 0
		|	И &Основание_РеализацияТоваровУслуг
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.Ссылка,
		|	ВременнаяТаблицаШапка.Склад,
		|	ВременнаяТаблицаШапка.Контрагент,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента,
		|	ВременнаяТаблицаШапка.СтавкаНДС,
		|	ВременнаяТаблицаТовары.СтавкаНСП,
		|	ВременнаяТаблицаШапка.БезналичныйРасчет,
		|	ВременнаяТаблицаШапка.БезвозмезднаяПоставка,
		|	ВременнаяТаблицаТовары.Номенклатура
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2,
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.Ссылка,
		|	ВременнаяТаблицаШапка.Склад,
		|	ВременнаяТаблицаШапка.Контрагент,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента,
		|	ВременнаяТаблицаШапка.СтавкаНДС,
		|	ВременнаяТаблицаУслуги.СтавкаНСП,
		|	ВременнаяТаблицаШапка.БезналичныйРасчет,
		|	ВременнаяТаблицаШапка.ЭкспортУслугПокупателюКР,
		|	ВременнаяТаблицаШапка.БезвозмезднаяПоставка,
		|	ВременнаяТаблицаУслуги.Номенклатура,
		|	0,
		|	СУММА(ВременнаяТаблицаУслуги.ВсегоВВалютеРеглУчета - ВременнаяТаблицаУслуги.СуммаНДСВВалютеРеглУчета - ВременнаяТаблицаУслуги.СуммаНСПВВалютеРеглУчета),
		|	СУММА(ВременнаяТаблицаУслуги.СуммаНДСВВалютеРеглУчета),
		|	СУММА(ВременнаяТаблицаУслуги.СуммаНСПВВалютеРеглУчета),
		|	0,
		|	0,
		|	СУММА(ВременнаяТаблицаУслуги.СуммаДоходаВВалютеРеглУчета),
		|	СУММА(ВременнаяТаблицаУслуги.ВсегоВВалютеРеглУчета),
		|	СУММА(0)
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаУслуги.ВсегоВВалютеРеглУчета = 0
		|	И (&Основание_РеализацияТоваровУслуг
		|		ИЛИ &Основание_АктОбОказанииПроизводственныхУслуг)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.Ссылка,
		|	ВременнаяТаблицаШапка.Склад,
		|	ВременнаяТаблицаШапка.Контрагент,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента,
		|	ВременнаяТаблицаШапка.СтавкаНДС,
		|	ВременнаяТаблицаУслуги.СтавкаНСП,
		|	ВременнаяТаблицаШапка.БезналичныйРасчет,
		|	ВременнаяТаблицаШапка.ЭкспортУслугПокупателюКР,
		|	ВременнаяТаблицаШапка.БезвозмезднаяПоставка,
		|	ВременнаяТаблицаУслуги.Номенклатура
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	3,
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.Ссылка,
		|	ВременнаяТаблицаШапка.Склад,
		|	ВременнаяТаблицаШапка.Контрагент,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента,
		|	ВременнаяТаблицаШапка.СтавкаНДС,
		|	ВременнаяТаблицаУслуги.СтавкаНСП,
		|	ВременнаяТаблицаШапка.БезналичныйРасчет,
		|	ЛОЖЬ,
		|	ЛОЖЬ,
		|	ВременнаяТаблицаУслуги.Номенклатура,
		|	0,
		|	ВременнаяТаблицаУслуги.ВсегоВВалютеРеглУчета - ВременнаяТаблицаУслуги.СуммаНДСВВалютеРеглУчета - ВременнаяТаблицаУслуги.СуммаНСПВВалютеРеглУчета,
		|	ВременнаяТаблицаУслуги.СуммаНДСВВалютеРеглУчета,
		|	ВременнаяТаблицаУслуги.СуммаНСПВВалютеРеглУчета,
		|	0,
		|	0,
		|	ВременнаяТаблицаУслуги.СуммаДоходаВВалютеРеглУчета,
		|	ВременнаяТаблицаУслуги.ВсегоВВалютеРеглУчета,
		|	0
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаУслуги.ВсегоВВалютеРеглУчета = 0
		|	И &Основание_РеализацияПоПереработке";
	ДокументОснование = СтруктураДополнительныеСвойства.ДляПроведения.Ссылка.ДокументОснование;
	
	Запрос.УстановитьПараметр("Основание_РеализацияТоваровУслуг",				ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	Запрос.УстановитьПараметр("Основание_РеализацияПоПереработке", 				ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияУслугПоПереработке"));
	Запрос.УстановитьПараметр("Основание_АктОбОказанииПроизводственныхУслуг", 	ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг"));
	
	РезультатЗапроса = Запрос.Выполнить();	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажи", РезультатЗапроса.Выгрузить());	
КонецПроцедуры // СформироватьТаблицаРеализацияТоваров(ДокументСсылка, СтруктураДополнительныеСвойства) 

// Формирует таблицу значений, содержащую данные для проведения по регистру бухгалтерии Хозрасчетный.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПродажиОсновныхСредств(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.Ссылка КАК ДокументРеализации,
		|	ВременнаяТаблицаШапка.Склад КАК Склад,
		|	ВременнаяТаблицаШапка.Контрагент КАК Контрагент,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента КАК Договор,
		|	ВременнаяТаблицаШапка.СтавкаНДС КАК СтавкаНДС,
		|	ВременнаяТаблицаОС.СтавкаНСП КАК СтавкаНСП,
		|	ВременнаяТаблицаШапка.БезналичныйРасчет КАК БезналичныйРасчет,
		|	ВременнаяТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ВременнаяТаблицаОС.ВсегоВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаНДСВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаНСП КАК Сумма,
		|	ВременнаяТаблицаОС.СуммаНДСВВалютеРеглУчета КАК СуммаНДС,
		|	ВременнаяТаблицаОС.СуммаНСПВВалютеРеглУчета КАК СуммаНСП,
		|	0 КАК СуммаСкидки,
		|	0 КАК СуммаСкидкиСНалогами,
		|	ВременнаяТаблицаОС.СуммаДоходаВВалютеРеглУчета КАК СуммаДохода,
		|	ВременнаяТаблицаОС.ВсегоВВалютеРеглУчета КАК СуммаВсего,
		|	0 КАК Себестоимость
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаОС.ВсегоВВалютеРеглУчета = 0
		|	И &Основание_РеализацияТоваровУслуг";
	ДокументОснование = СтруктураДополнительныеСвойства.ДляПроведения.Ссылка.ДокументОснование;
	
	Запрос.УстановитьПараметр("Основание_РеализацияТоваровУслуг",	ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	Запрос.УстановитьПараметр("Основание_РеализацияПоПереработке", 	ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияУслугПоПереработке"));
	
	РезультатЗапроса = Запрос.Выполнить();	
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажиОсновныхСредств", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаРеализацияТоваров(ДокументСсылка, СтруктураДополнительныеСвойства) 

// Формирует таблицу значений, содержащую данные для проведения по регистру накопления ОборотыПоДаннымЕдиногоНалога.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаОборотыПоДаннымЕдиногоНалога(СтруктураДополнительныеСвойства)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаТовары.ВидДеятельности КАК ВидДеятельности,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаШапка.БезналичныйРасчет
		|			ТОГДА 0
		|		ИНАЧЕ ВременнаяТаблицаТовары.ВсегоВВалютеРеглУчета - ВременнаяТаблицаТовары.СуммаНДСВВалютеРеглУчета
		|	КОНЕЦ КАК СуммаНаличная,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаШапка.БезналичныйРасчет
		|			ТОГДА ВременнаяТаблицаТовары.ВсегоВВалютеРеглУчета - ВременнаяТаблицаТовары.СуммаНДСВВалютеРеглУчета
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаБезналичная
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ПО (ИСТИНА)
		|ГДЕ
		|	&ПлательщикЕН
		|	И &Основание_РеализацияТоваровУслуг
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаУслуги.ВидДеятельности,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаШапка.БезналичныйРасчет
		|			ТОГДА 0
		|		ИНАЧЕ ВременнаяТаблицаУслуги.ВсегоВВалютеРеглУчета - ВременнаяТаблицаУслуги.СуммаНДСВВалютеРеглУчета
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаШапка.БезналичныйРасчет
		|			ТОГДА ВременнаяТаблицаУслуги.ВсегоВВалютеРеглУчета - ВременнаяТаблицаУслуги.СуммаНДСВВалютеРеглУчета
		|		ИНАЧЕ 0
		|	КОНЕЦ
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги
		|		ПО (ИСТИНА)
		|ГДЕ
		|	&ПлательщикЕН
		|	И (&Основание_РеализацияТоваровУслуг
		|		ИЛИ &Основание_РеализацияПоПереработке
		|		ИЛИ &Основание_АктОбОказанииПроизводственныхУслуг)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаОС.ВидДеятельности,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаШапка.БезналичныйРасчет
		|			ТОГДА 0
		|		ИНАЧЕ ВременнаяТаблицаОС.ВсегоВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаНДСВВалютеРеглУчета
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаШапка.БезналичныйРасчет
		|			ТОГДА ВременнаяТаблицаОС.ВсегоВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаНДСВВалютеРеглУчета
		|		ИНАЧЕ 0
		|	КОНЕЦ
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ПО (ИСТИНА)
		|ГДЕ
		|	&ПлательщикЕН
		|	И &Основание_РеализацияТоваровУслуг";
	Запрос.УстановитьПараметр("ПлательщикЕН", СтруктураДополнительныеСвойства.УчетнаяПолитика.ПлательщикЕНМетодНачисления);
	
	ДокументОснование = СтруктураДополнительныеСвойства.ДляПроведения.Ссылка.ДокументОснование;
	
	Запрос.УстановитьПараметр("Основание_РеализацияТоваровУслуг",				ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	Запрос.УстановитьПараметр("Основание_РеализацияПоПереработке", 				ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияУслугПоПереработке"));
	Запрос.УстановитьПараметр("Основание_АктОбОказанииПроизводственныхУслуг", 	ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг"));
	
	РезультатЗапроса = Запрос.Выполнить();	
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ОборотыПоДаннымЕдиногоНалога", РезультатЗапроса.Выгрузить());
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДвижениеОСНУ(ДокументСсылка, СтруктураДополнительныеСвойства) 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ПараметрыУчетаОССрезПоследних.ГруппаНУ КАК ГруппаНУ,
		|	ВременнаяТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ВременнаяТаблицаОС.ВсегоВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаНДСВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаНСПВВалютеРеглУчета КАК Выбытие,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаШапка.Дата >= ДАТАВРЕМЯ(2022, 1, 1)
		|			ТОГДА ВременнаяТаблицаОС.ВсегоВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаНДСВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаНСПВВалютеРеглУчета
		|		ИНАЧЕ ВЫРАЗИТЬ((ВременнаяТаблицаОС.ВсегоВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаНДСВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаНСПВВалютеРеглУчета) * (12 - МЕСЯЦ(ВременнаяТаблицаШапка.Дата) + 0.5) / 12 КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК ТекущееВыбытие
		|ИЗ
		|	ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ПО (ИСТИНА)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыУчетаОС.СрезПоследних(
		|				&Период,
		|				Организация = &Организация
		|					И ОсновноеСредство В
		|						(ВЫБРАТЬ
		|							ВременнаяТаблицаОС.ОсновноеСредство
		|						ИЗ
		|							ВременнаяТаблицаОС КАК ВременнаяТаблицаОС)) КАК ПараметрыУчетаОССрезПоследних
		|		ПО ВременнаяТаблицаОС.ОсновноеСредство = ПараметрыУчетаОССрезПоследних.ОсновноеСредство
		|ГДЕ
		|	НЕ ПараметрыУчетаОССрезПоследних.ГруппаНУ = ЗНАЧЕНИЕ(Справочник.ГруппыНалоговогоУчетаОС.ПустаяСсылка)
		|	И &Основание_РеализацияТоваровУслуг";		
	Запрос.УстановитьПараметр("Период", СтруктураДополнительныеСвойства.ДляПроведения.Дата);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	
	ДокументОснование = СтруктураДополнительныеСвойства.ДляПроведения.Ссылка.ДокументОснование;
	
	Запрос.УстановитьПараметр("Основание_РеализацияТоваровУслуг",	ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	Запрос.УстановитьПараметр("Основание_РеализацияПоПереработке", 	ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияУслугПоПереработке"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДвижениеОСНУ", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры 

//// Формирует таблицу значений, содержащую данные для проведения по регистру.
//// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
////
//Процедура СформироватьСведенияПоПоказателямИмпорта(ДокументСсылка, СтруктураДополнительныеСвойства) 
//	
//	Запрос = Новый Запрос;
//	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
//	Запрос.Текст =
//		"ВЫБРАТЬ
//		|	ВременнаяТаблицаШапка.Дата КАК Дата,
//		|	ВременнаяТаблицаШапка.Организация КАК Организация,
//		|	ВременнаяТаблицаШапка.Ссылка КАК ДокументСсылка,
//		|	ВременнаяТаблицаШапка.Контрагент КАК Контрагент,
//		|	ВременнаяТаблицаШапка.ХарактерСделки КАК ХарактерСделки,
//		|	ВременнаяТаблицаШапка.КоммерческийДокумент КАК КоммерческиеДокументы,
//		|	ВременнаяТаблицаШапка.Транспортировка КАК Транспортировка,
//		|	ВременнаяТаблицаШапка.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
//		|	ВременнаяТаблицаШапка.КодОсобенностиПеремещенияТоваров КАК КодОсобенностиПеремещенияТоваров,
//		|	ВременнаяТаблицаШапка.КодУсловийПоставки КАК КодУсловийПоставки,
//		|	ВременнаяТаблицаШапка.ВидТранспорта КАК ВидТранспорта,
//		|	ВременнаяТаблицаШапка.ДоговорКонтрагента.НомерДоговора КАК НомерКонтракта,
//		|	ВременнаяТаблицаШапка.ДоговорКонтрагента.ДатаДоговора КАК ДатаКонтракта,
//		|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
//		|	0 КАК Количество,
//		|	СУММА(ВременнаяТаблицаТовары.Сумма) КАК Сумма,
//		|	СУММА(ВЫРАЗИТЬ(ВременнаяТаблицаТовары.Сумма / КурсыВалютСрезПоследних.Курс * КурсыВалютСрезПоследних.Кратность КАК ЧИСЛО(15, 2))) КАК СуммаВДолларах
//		|ИЗ
//		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
//		|		ПО (ИСТИНА)
//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта.Код = ""840"") КАК КурсыВалютСрезПоследних
//		|		ПО (ИСТИНА)
//		|ГДЕ
//		|	ВременнаяТаблицаШапка.ПризнакСтраны = ЗНАЧЕНИЕ(Перечисление.ПризнакиСтраны.ЕАЭС)
//		|	И &Основание_РеализацияТоваровУслуг
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	ВременнаяТаблицаШапка.Дата,
//		|	ВременнаяТаблицаШапка.Организация,
//		|	ВременнаяТаблицаШапка.Ссылка,
//		|	ВременнаяТаблицаШапка.Контрагент,
//		|	ВременнаяТаблицаШапка.ХарактерСделки,
//		|	ВременнаяТаблицаШапка.КоммерческийДокумент,
//		|	ВременнаяТаблицаШапка.Транспортировка,
//		|	ВременнаяТаблицаШапка.ДополнительнаяИнформация,
//		|	ВременнаяТаблицаШапка.КодОсобенностиПеремещенияТоваров,
//		|	ВременнаяТаблицаШапка.КодУсловийПоставки,
//		|	ВременнаяТаблицаШапка.ВидТранспорта,
//		|	ВременнаяТаблицаШапка.ДоговорКонтрагента.НомерДоговора,
//		|	ВременнаяТаблицаШапка.ДоговорКонтрагента.ДатаДоговора,
//		|	ВременнаяТаблицаТовары.Номенклатура";
//	Запрос.УстановитьПараметр("Период", СтруктураДополнительныеСвойства.ДляПроведения.Дата);
//	
//	ДокументОснование = СтруктураДополнительныеСвойства.ДляПроведения.Ссылка.ДокументОснование;
//	
//	Запрос.УстановитьПараметр("Основание_РеализацияТоваровУслуг",	ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг"));
//	Запрос.УстановитьПараметр("Основание_РеализацияПоПереработке", 	ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияУслугПоПереработке"));
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСведенияПоПоказателямИмпорта", РезультатЗапроса.Выгрузить());
//		
//КонецПроцедуры 

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства, Отказ) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК Ссылка,
		|	ТаблицаДокумента.Дата КАК Дата,
		|	ТаблицаДокумента.Номер КАК Номер,
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ТаблицаДокумента.БезналичныйРасчет КАК БезналичныйРасчет,
		|	ТаблицаДокумента.ЭкспортУслугПокупателюКР КАК ЭкспортУслугПокупателюКР,
		|	ТаблицаДокумента.Склад КАК Склад,
		|	ТаблицаДокумента.Контрагент КАК Контрагент,
		|	ТаблицаДокумента.Контрагент.ПризнакСтраны КАК ПризнакСтраны,
		|	ТаблицаДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаДокумента.СчетРасчетов КАК СчетРасчетов,
		|	ТаблицаДокумента.ВалютаДокумента КАК ВалютаДокумента,
		|	ТаблицаДокумента.Курс КАК Курс,
		|	ТаблицаДокумента.Кратность КАК Кратность,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСКОплате) КАК СчетУчетаНДС,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НалогСПродаж) КАК СчетУчетаНСП,
		|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаДокумента.СуммаВключаетНалоги КАК СуммаВключаетНалоги,
		|	ТаблицаДокумента.КодПоставкиНДС КАК КодПоставкиНДС,
		|	ТаблицаДокументаОснования.БезвозмезднаяПоставка КАК БезвозмезднаяПоставка,
		|	ТаблицаДокументаОснования.ХарактерСделки КАК ХарактерСделки,
		|	ТаблицаДокументаОснования.КоммерческийДокумент КАК КоммерческийДокумент,
		|	ТаблицаДокументаОснования.Транспортировка КАК Транспортировка,
		|	ТаблицаДокументаОснования.ВидТранспорта КАК ВидТранспорта,
		|	ТаблицаДокументаОснования.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
		|	ТаблицаДокументаОснования.КодОсобенностиПеремещенияТоваров КАК КодОсобенностиПеремещенияТоваров,
		|	ТаблицаДокументаОснования.КодУсловийПоставки КАК КодУсловийПоставки
		|ПОМЕСТИТЬ ВременнаяТаблицаШапка
		|ИЗ
		|	Документ.КорректировкаСтоимостиРеализации КАК ТаблицаДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК ТаблицаДокументаОснования
		|		ПО ТаблицаДокумента.ДокументОснование = ТаблицаДокументаОснования.Ссылка
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
		|	ТаблицаДокумента.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	ТаблицаДокумента.Количество КАК Количество,
		|	ТаблицаДокумента.Всего КАК Всего,
		|	ТаблицаДокумента.Сумма КАК Сумма,
		|	ТаблицаДокумента.СуммаДохода КАК СуммаДохода,
		|	ТаблицаДокумента.СуммаНДС КАК СуммаНДС,
		|	ТаблицаДокумента.СтавкаНСП КАК СтавкаНСП,
		|	ТаблицаДокумента.СуммаНСП КАК СуммаНСП,
		|	ТаблицаДокумента.ВсегоВВалютеРеглУчета КАК ВсегоВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаВВалютеРеглУчета КАК СуммаВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаДоходаВВалютеРеглУчета КАК СуммаДоходаВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаНДСВВалютеРеглУчета КАК СуммаНДСВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаНСПВВалютеРеглУчета КАК СуммаНСПВВалютеРеглУчета,
		|	ТаблицаДокумента.СчетУчета КАК СчетУчета,
		|	ТаблицаДокумента.СчетДоходов КАК СчетДоходов,
		|	ТаблицаДокумента.СтатьяДоходов КАК СтатьяДоходов,
		|	ТаблицаДокумента.СтатьяРасходов КАК СтатьяРасходов,
		|	ТаблицаДокумента.ВидДеятельности КАК ВидДеятельности
		|ПОМЕСТИТЬ ВременнаяТаблицаТовары
		|ИЗ
		|	Документ.КорректировкаСтоимостиРеализации.Товары КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
		|	ТаблицаДокумента.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	ТаблицаДокумента.Количество КАК Количество,
		|	ТаблицаДокумента.Всего КАК Всего,
		|	ТаблицаДокумента.Сумма КАК Сумма,
		|	ТаблицаДокумента.СуммаДохода КАК СуммаДохода,
		|	ТаблицаДокумента.СуммаНДС КАК СуммаНДС,
		|	ТаблицаДокумента.СтавкаНСП КАК СтавкаНСП,
		|	ТаблицаДокумента.СуммаНСП КАК СуммаНСП,
		|	ТаблицаДокумента.ВсегоВВалютеРеглУчета КАК ВсегоВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаВВалютеРеглУчета КАК СуммаВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаДоходаВВалютеРеглУчета КАК СуммаДоходаВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаНДСВВалютеРеглУчета КАК СуммаНДСВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаНСПВВалютеРеглУчета КАК СуммаНСПВВалютеРеглУчета,
		|	ТаблицаДокумента.СчетДоходов КАК СчетДоходов,
		|	ТаблицаДокумента.СтатьяДоходов КАК СтатьяДоходов,
		|	ТаблицаДокумента.ВидДеятельности КАК ВидДеятельности
		|ПОМЕСТИТЬ ВременнаяТаблицаУслуги
		|ИЗ
		|	Документ.КорректировкаСтоимостиРеализации.Услуги КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК Ссылка,
		|	ТаблицаДокумента.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаДокумента.ОсновноеСредство.ЭтоКомплект КАК ЭтоКомплект,
		|	ТаблицаДокумента.Всего КАК Всего,
		|	ТаблицаДокумента.Сумма КАК Сумма,
		|	ТаблицаДокумента.СуммаДохода КАК СуммаДохода,
		|	ТаблицаДокумента.СуммаНДС КАК СуммаНДС,
		|	ТаблицаДокумента.СтавкаНСП КАК СтавкаНСП,
		|	ТаблицаДокумента.СуммаНСП КАК СуммаНСП,
		|	ТаблицаДокумента.ВсегоВВалютеРеглУчета КАК ВсегоВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаВВалютеРеглУчета КАК СуммаВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаДоходаВВалютеРеглУчета КАК СуммаДоходаВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаНДСВВалютеРеглУчета КАК СуммаНДСВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаНСПВВалютеРеглУчета КАК СуммаНСПВВалютеРеглУчета,
		|	ТаблицаДокумента.СчетЗатрат КАК СчетЗатрат,
		|	ТаблицаДокумента.СчетДоходов КАК СчетДоходов,
		|	ТаблицаДокумента.СтатьяЗатрат КАК СтатьяЗатрат,
		|	ТаблицаДокумента.СтатьяДоходов КАК СтатьяДоходов,
		|	ТаблицаДокумента.ВидДеятельности КАК ВидДеятельности
		|ПОМЕСТИТЬ ВременнаяТаблицаОС
		|ИЗ
		|	Документ.КорректировкаСтоимостиРеализации.ОС КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПараметрыУчетаОССрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
		|	ПараметрыУчетаОССрезПоследних.Консервация КАК Консервация
		|ПОМЕСТИТЬ ВременнаяТаблицаКонсервацияОС
		|ИЗ
		|	РегистрСведений.ПараметрыУчетаОС.СрезПоследних(&Период, Организация = &Организация) КАК ПараметрыУчетаОССрезПоследних";		
	Запрос.УстановитьПараметр("Ссылка", 		ДокументСсылка);
	Запрос.УстановитьПараметр("Период", 		СтруктураДополнительныеСвойства.ДляПроведения.Дата);
	Запрос.УстановитьПараметр("Организация", 	СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.Выполнить();
	
	СформироватьТаблицаХозрасчетный(ДокументСсылка, СтруктураДополнительныеСвойства, Отказ);
	СформироватьТаблицаПродажи(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаПродажиОсновныхСредств(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаДвижениеОСНУ(ДокументСсылка, СтруктураДополнительныеСвойства);	
	СформироватьТаблицаОборотыПоДаннымЕдиногоНалога(СтруктураДополнительныеСвойства);
	
	// Под вопросом
	//СформироватьСведенияПоПоказателямИмпорта(ДокументСсылка, СтруктураДополнительныеСвойства);	
КонецПроцедуры

#КонецОбласти	

#Область ВерсионированиеОбъектов

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//@skip-warning
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область ИнтерфейсПечати

// Функция формирует табличный документ с печатной формой ПечатьНакладной
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьНакладной(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "КорректировкаСтоимостиРеализации_Накладная";

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.КорректировкаСтоимостиРеализации.ПФ_MXL_Накладная");
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК Ссылка,
		|	ТаблицаДокумента.Номер КАК Номер,
		|	ТаблицаДокумента.Дата КАК Дата,
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ТаблицаДокумента.Организация.НаименованиеПолное КАК ОрганизацияПредставление,
		|	ТаблицаДокумента.ВалютаДокумента КАК ВалютаДокумента,
		|	ТаблицаДокумента.Склад КАК Склад,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокумента.Склад) КАК СкладПредставление,
		|	ТаблицаДокумента.Контрагент КАК Контрагент,
		|	ТаблицаДокумента.Контрагент.НаименованиеПолное КАК КонтрагентПредставление,
		|	ТаблицаДокумента.Комментарий КАК Комментарий,
		|	ТаблицаДокумента.ТочностьЦены КАК ТочностьЦены,
		|	ТаблицаДокумента.Организация.ФайлЛоготип КАК ФайлЛоготип,
		|	ТаблицаДокумента.Товары.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура КАК Номенклатура,
		|		Количество КАК Количество,
		|		Цена КАК Цена,
		|		СуммаНДС КАК СуммаНДС,
		|		СуммаНСП КАК СуммаНСП,
		|		СуммаДохода КАК СуммаДохода,
		|		ТаблицаДокумента.Товары.Всего КАК Всего,
		|		СчетУчета КАК СчетУчета,
		|		СчетДоходов КАК СчетДоходов,
		|		0 КАК СчетСебестоимости,
		|		СтатьяРасходов КАК СтатьяРасходов,
		|		СтатьяДоходов КАК СтатьяДоходов,
		|		Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
		|		ПРЕДСТАВЛЕНИЕ(ТаблицаДокумента.Товары.Номенклатура.КодТНВЭД) КАК КодПоКлассификатору,
		|		ПРЕДСТАВЛЕНИЕ(ТаблицаДокумента.Товары.Номенклатура.ЕдиницаИзмерения) КАК ЕИ
		|	) КАК Товары,
		|	ТаблицаДокумента.Услуги.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура КАК Номенклатура,
		|		Количество КАК Количество,
		|		Цена КАК Цена,
		|		СуммаНДС КАК СуммаНДС,
		|		СуммаНСП КАК СуммаНСП,
		|		СуммаДохода КАК СуммаДохода,
		|		ТаблицаДокумента.Услуги.Всего КАК Всего,
		|		СчетДоходов КАК СчетДоходов,
		|		СтатьяДоходов КАК СтатьяДоходов,
		|		ДополнительныеСведения КАК ДополнительныеСведения,
		|		Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
		|		ПРЕДСТАВЛЕНИЕ(ТаблицаДокумента.Услуги.Номенклатура.КодГКЭД) КАК КодПоКлассификатору,
		|		ПРЕДСТАВЛЕНИЕ(ТаблицаДокумента.Услуги.Номенклатура.ЕдиницаИзмерения) КАК ЕИ
		|	) КАК Услуги,
		|	ТаблицаДокумента.ОС.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		ОсновноеСредство КАК ОсновноеСредство,
		|		ИнвентарныйНомер КАК ИнвентарныйНомер,
		|		1 КАК Количество,
		|		""ед."" КАК ЕИ,
		|		Сумма КАК Цена,
		|		СуммаНДС КАК СуммаНДС,
		|		СуммаНСП КАК СуммаНСП,
		|		СуммаДохода КАК СуммаДохода,
		|		ТаблицаДокумента.ОС.Всего КАК Всего,
		|		СчетДоходов КАК СчетДоходов,
		|		СчетЗатрат КАК СчетЗатрат,
		|		СтатьяЗатрат КАК СтатьяЗатрат,
		|		ОсновноеСредство.НаименованиеПолное КАК НоменклатураПредставление,
		|		ПРЕДСТАВЛЕНИЕ(ТаблицаДокумента.ОС.ОсновноеСредство.КодТНВЭД) КАК КодПоКлассификатору
		|	) КАК ОС
		|ИЗ
		|	Документ.КорректировкаСтоимостиРеализации КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В(&СписокДокументов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки,
		|	НомерСтроки,
		|	НомерСтроки";		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокДокументов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	Пока Шапка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Подготовка данных
		ДанныеПечати = Новый Структура;
		
		ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, НСтр("ru = 'Накладная на реализацию'"));
		ДанныеПечати.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		ДанныеПечати.Вставить("ОрганизацияПредставление", Шапка.ОрганизацияПредставление);
		ДанныеПечати.Вставить("СкладПредставление", Шапка.СкладПредставление);
		ДанныеПечати.Вставить("ПолучательПредставление", Шапка.КонтрагентПредставление);
		ДанныеПечати.Вставить("Комментарий", Шапка.Комментарий);
		
		ТаблицаТовары = Шапка.Товары.Выгрузить();
		ТаблицаУслуги = Шапка.Услуги.Выгрузить();
		ТаблицаОС = Шапка.ОС.Выгрузить();
		
		Если ТаблицаТовары.Количество() > 0
			Или ТаблицаОС.Количество() > 0 Тогда 
			ДанныеПечати.Вставить("НаименованиеКлассификатора", НСтр("ru = 'Код ТНВЭД'"));
		ИначеЕсли ТаблицаУслуги.Количество() > 0 Тогда  
			ДанныеПечати.Вставить("НаименованиеКлассификатора", НСтр("ru = 'Код ГКЭД'"));	
		КонецЕсли;	
		
		Всего = ТаблицаТовары.Итог("Всего") + ТаблицаУслуги.Итог("Всего") + ТаблицаОС.Итог("Всего");
		ВсегоНДС = ТаблицаТовары.Итог("СуммаНДС") + ТаблицаУслуги.Итог("СуммаНДС") + ТаблицаОС.Итог("СуммаНДС");
		ВсегоНСП = ТаблицаТовары.Итог("СуммаНСП") + ТаблицаУслуги.Итог("СуммаНСП") + ТаблицаОС.Итог("СуммаНСП");
		КоличествоНаименований = ТаблицаТовары.Количество() + ТаблицаУслуги.Количество() + ТаблицаОС.Количество();		
		
		ИтогоКОплате = Всего;		
		ДанныеПечати.Вставить("ИтогоКОплате", ИтогоКОплате);
		
		ДанныеПечати.Вставить("Всего", Всего);
		ДанныеПечати.Вставить("ВсегоНДС", ВсегоНДС);
		ДанныеПечати.Вставить("ВсегоНСП", ВсегоНСП);
		ДанныеПечати.Вставить("ВсегоСкидка", 0);
		ДанныеПечати.Вставить("ИтоговаяСтрока", 
			СтрШаблон(НСтр("ru = 'Всего наименований %1, на сумму %2'"), 
			Формат(КоличествоНаименований, "ЧН=0; ЧГ=0"), Формат(ДанныеПечати.ИтогоКОплате, "ЧЦ=15; ЧДЦ=2")));
		ДанныеПечати.Вставить("СуммаПрописью", БухгалтерскийУчетСервер.СформироватьСуммуПрописью(ДанныеПечати.ИтогоКОплате, Шапка.ВалютаДокумента));

		ДанныеЦены = Новый Структура();
		ДанныеЦены.Вставить("Цена", 0);
		
		// Области
		МассивОбластейМакета = Новый Массив;
		МассивОбластейМакета.Добавить("Заголовок");

		МассивОбластейМакета.Добавить("ШапкаТаблицы");
		МассивОбластейМакета.Добавить("Строка");	
		МассивОбластейМакета.Добавить("Подвал");
		МассивОбластейМакета.Добавить("Итоги");
		МассивОбластейМакета.Добавить("ИтогоКОплате");
		МассивОбластейМакета.Добавить("ИтогиНДС");
		МассивОбластейМакета.Добавить("ИтогиНСП");
		МассивОбластейМакета.Добавить("СуммаПрописью");
		МассивОбластейМакета.Добавить("Подписи");			
	
		Для Каждого ИмяОбласти Из МассивОбластейМакета Цикл
			
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
			
			Если ИмяОбласти = "Строка" ИЛИ ИмяОбласти = "СтрокаСоСкидкой" Тогда 
				Для Каждого СтрокаТаблицы Из ТаблицаТовары Цикл
					ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
										
					ДанныеЦены.Цена = Формат(СтрокаТаблицы.Цена, "ЧЦ=23; ЧДЦ=" + Шапка.ТочностьЦены +" ; ЧГ=3,0");
					ОбластьМакета.Параметры.Заполнить(ДанныеЦены);
					
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
				Для Каждого СтрокаТаблицы Из ТаблицаУслуги Цикл
					ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
										
					ДанныеЦены.Цена = Формат(СтрокаТаблицы.Цена, "ЧЦ=23; ЧДЦ=" + Шапка.ТочностьЦены +" ; ЧГ=3,0");
					ОбластьМакета.Параметры.Заполнить(ДанныеЦены);
					
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
				Для Каждого СтрокаТаблицы Из ТаблицаОС Цикл
					ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
										
					ДанныеЦены.Цена = Формат(СтрокаТаблицы.Цена, "ЧЦ=23; ЧДЦ=" + Шапка.ТочностьЦены +" ; ЧГ=3,0");
					ОбластьМакета.Параметры.Заполнить(ДанныеЦены);
					
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
			Иначе 
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьМакета);	
			КонецЕсли;	
		КонецЦикла;
		
		БухгалтерскиеОтчеты.ВыводПодписиРуководителей(ТабличныйДокумент, Шапка);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Функция формирует табличный документ с печатной формой Счет-фактура
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьСчетФактура(МассивОбъектов, ОбъектыПечати, КоличествоСтрокСчетаФактуры, СчетФактураВВалюте = Ложь)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;		
	ТабличныйДокумент.КлючПараметровПечати = "КорректировкаСтоимостиРеализации_СчетФактура";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьСчетФактура.ПФ_MXL_СчетФактура");
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	КорректировкаСтоимостиРеализации.Ссылка КАК Ссылка,
		|	КорректировкаСтоимостиРеализации.Номер КАК Номер,
		|	КорректировкаСтоимостиРеализации.Дата КАК Дата,
		|	КорректировкаСтоимостиРеализации.ВалютаДокумента КАК ВалютаДокумента,
		|	КорректировкаСтоимостиРеализации.Курс КАК Курс,
		|	КорректировкаСтоимостиРеализации.Кратность КАК Кратность,
		|	ЛОЖЬ КАК БезвозмезднаяПоставка,
		|	КорректировкаСтоимостиРеализации.ЭкспортнаяПоставка КАК ЭкспортнаяПоставка,
		|	КорректировкаСтоимостиРеализации.СуммаВключаетНалоги КАК СуммаВключаетНалоги,
		|	ЛОЖЬ КАК ПечатьВРегламентированнойВалюте,
		|	ЛОЖЬ КАК ПечататьКурсИСуммуВРегламентированнойВалюте,
		|	ЛОЖЬ КАК ВыводитьКомментарийВНаименование,
		|	КорректировкаСтоимостиРеализации.КодПоставкиНДС.Код КАК КодПоставкиНДС,
		|	КорректировкаСтоимостиРеализации.Организация КАК Организация,
		|	КорректировкаСтоимостиРеализации.Организация.НаименованиеПолное КАК ОрганизацияПредставление,
		|	КорректировкаСтоимостиРеализации.Организация.ИНН КАК ИННОрганизации,
		|	КорректировкаСтоимостиРеализации.Организация.ГНС КАК ГНСОрганизации,
		|	КорректировкаСтоимостиРеализации.Организация.ГНС.Код КАК КодГНСОрганизации,
		|	КорректировкаСтоимостиРеализации.Организация.ФайлЛоготип КАК ФайлЛоготип,
		|	КорректировкаСтоимостиРеализации.БанковскийСчет.НомерСчета КАК НомерБанковскогоСчетаОрганизации,
		|	КорректировкаСтоимостиРеализации.БанковскийСчет.Банк.Код КАК БикБанкаОрганизации,
		|	КорректировкаСтоимостиРеализации.БанковскийСчет.Банк.Наименование КАК НаименованиеБанкаОрганизации,
		|	ВЫБОР
		|		КОГДА &ПечататьСчетаФактурыСГоловнымКонтрагентом
		|				И НЕ КорректировкаСтоимостиРеализации.Контрагент.ГоловнойКонтрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА КорректировкаСтоимостиРеализации.Контрагент.ГоловнойКонтрагент
		|		ИНАЧЕ КорректировкаСтоимостиРеализации.Контрагент
		|	КОНЕЦ КАК Контрагент,
		|	НЕОПРЕДЕЛЕНО КАК НомерБланкаСФ,
		|	НЕОПРЕДЕЛЕНО КАК СерияБланкаСФ,
		|	НЕОПРЕДЕЛЕНО КАК ДатаСФ,
		|	КорректировкаСтоимостиРеализации.ЭкспортУслугПокупателюКР КАК ЭкспортУслугПокупателюКР,
		|	КорректировкаСтоимостиРеализации.БезналичныйРасчет КАК БезналичныйРасчет,
		|	КорректировкаСтоимостиРеализации.СтавкаНДС КАК СтавкаНДС,
		|	КорректировкаСтоимостиРеализации.Комментарий КАК Комментарий
		|ИЗ
		|	Документ.КорректировкаСтоимостиРеализации КАК КорректировкаСтоимостиРеализации
		|ГДЕ
		|	КорректировкаСтоимостиРеализации.Ссылка В(&СписокДокументов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка КАК Ссылка,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
		|	ТаблицаТовары.Количество КАК Количество,
		|	ТаблицаТовары.Цена КАК Цена,
		|	ТаблицаТовары.Сумма КАК Сумма,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
		|	ТаблицаТовары.СуммаНСП КАК СуммаНСП,
		|	ТаблицаТовары.СтавкаНСП КАК СтавкаНСП,
		|	ТаблицаТовары.Всего КАК Всего,
		|	ТаблицаТовары.СуммаДохода КАК Стоимость,
		|	ТаблицаТовары.Номенклатура.КодТНВЭД КАК КодТНВЭД,
		|	""Товар"" КАК ТипТовара,
		|	"""" КАК ДополнительныеСведения,
		|	0 КАК СуммаСкидки,
		|	0 КАК СуммаСкидкиВВалютеРеглУчета
		|ИЗ
		|	Документ.КорректировкаСтоимостиРеализации.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка В(&СписокДокументов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаУслуги.Ссылка,
		|	ТаблицаУслуги.Номенклатура,
		|	ТаблицаУслуги.Номенклатура.ЕдиницаИзмерения.Наименование,
		|	ТаблицаУслуги.Количество,
		|	ТаблицаУслуги.Цена,
		|	ТаблицаУслуги.Сумма,
		|	ТаблицаУслуги.СуммаНДС,
		|	ТаблицаУслуги.СуммаНСП,
		|	ТаблицаУслуги.СтавкаНСП,
		|	ТаблицаУслуги.Всего,
		|	ТаблицаУслуги.СуммаДохода,
		|	ТаблицаУслуги.Номенклатура.КодТНВЭД,
		|	""Услуга"",
		|	ТаблицаУслуги.ДополнительныеСведения,
		|	0,
		|	0
		|ИЗ
		|	Документ.КорректировкаСтоимостиРеализации.Услуги КАК ТаблицаУслуги
		|ГДЕ
		|	ТаблицаУслуги.Ссылка В(&СписокДокументов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаОС.Ссылка,
		|	ТаблицаОС.ОсновноеСредство,
		|	НЕОПРЕДЕЛЕНО,
		|	1,
		|	ТаблицаОС.СуммаДохода,
		|	ТаблицаОС.Сумма,
		|	ТаблицаОС.СуммаНДС,
		|	ТаблицаОС.СуммаНСП,
		|	ТаблицаОС.СтавкаНСП,
		|	ТаблицаОС.Всего,
		|	ТаблицаОС.СуммаДохода,
		|	НЕОПРЕДЕЛЕНО,
		|	""ОС"",
		|	"""",
		|	0,
		|	0
		|ИЗ
		|	Документ.КорректировкаСтоимостиРеализации.ОС КАК ТаблицаОС
		|ГДЕ
		|	ТаблицаОС.Ссылка В(&СписокДокументов)";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПечататьСчетаФактурыСГоловнымКонтрагентом", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьЗначениеКонстанты("ПечататьСчетаФактурыСГоловнымКонтрагентом"));
	Запрос.УстановитьПараметр("СписокДокументов", МассивОбъектов);
	Запрос.УстановитьПараметр("СчетФактураВВалюте", СчетФактураВВалюте);
	 
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Шапка = РезультатЗапроса[0].Выбрать();
	
	Пока Шапка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
	
		ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(Шапка.Дата, Шапка.Организация);
		ПлательщикНДС = ДанныеУчетнойПолитики.ПлательщикНДС;
		ПлательщикНСП = ДанныеУчетнойПолитики.ПлательщикНСП;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Подготовка данных
		ДанныеПечати = Новый Структура;
		ДанныеПечати.Вставить("НомерОтчета", ?(КоличествоСтрокСчетаФактуры = 20,"001","002"));
		ДанныеПечати.Вставить("НомерПриложения", ?(КоличествоСтрокСчетаФактуры = 20,"2","3"));
		ДанныеПечати.Вставить("НомерБланкаСФ", ?(ПлательщикНДС ИЛИ ЗначениеЗаполнено(Шапка.НомерБланкаСФ), Шапка.НомерБланкаСФ, ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер)));
		ДанныеПечати.Вставить("СерияБланкаСФ", Шапка.СерияБланкаСФ);
		ДанныеПечати.Вставить("ТипПоставки", ?(Шапка.ЭкспортнаяПоставка, "Экспорт", "Внутренняя"));
		
		Если Шапка.БезвозмезднаяПоставка Тогда
			ДанныеПечати.Вставить("ВидПлатежа", НСтр("ru = 'Безвозмездная поставка'"));
		Иначе	
			ДанныеПечати.Вставить("ВидПлатежа", ?(Шапка.БезналичныйРасчет, "Безналичная", "Наличная"));
		КонецЕсли;	
			
		ДанныеПечати.Вставить("ВидПоставки", Шапка.КодПоставкиНДС);
		ДанныеПечати.Вставить("Курс", Формат(Шапка.Курс, "ЧЦ=15; ЧДЦ=4"));
		
		ДанныеПечати.Вставить("ТекстЗаголовка", НСтр("ru = 'СЧЕТ-ФАКТУРА НДС'"));
		ДанныеПечати.Вставить("ДатаПоставки", Формат(Шапка.Дата,"ДЛФ=DD"));
		ДанныеПечати.Вставить("БанкПоставщика", Шапка.НаименованиеБанкаОрганизации);		
		
		ДанныеПечати.Вставить("ФайлЛоготип", Шапка.ФайлЛоготип);

		ПредставлениеПоставщика = "";
		Организация = Шапка.Организация;
		ИНН = Шапка.ИННОрганизации;
	    ГНС = Шапка.ГНСОрганизации;
	    КодГНС = Шапка.КодГНСОрганизации;
		
		ПредставлениеПоставщика = Шапка.ОрганизацияПредставление;
		
		ДатаСФ = Формат(?(ПлательщикНДС ИЛИ ЗначениеЗаполнено(Шапка.ДатаСФ), Шапка.ДатаСФ, Шапка.Дата), "ДЛФ=D");              
		ДанныеПечати.Вставить("Дата1", Сред(ДатаСФ,1,1));
		ДанныеПечати.Вставить("Дата2", Сред(ДатаСФ,2,1));
		ДанныеПечати.Вставить("Дата3", Сред(ДатаСФ,4,1));
		ДанныеПечати.Вставить("Дата4", Сред(ДатаСФ,5,1));
		ДанныеПечати.Вставить("Дата5", Сред(ДатаСФ,7,1));
		ДанныеПечати.Вставить("Дата6", Сред(ДатаСФ,8,1));
		ДанныеПечати.Вставить("Дата7", Сред(ДатаСФ,9,1));
		ДанныеПечати.Вставить("Дата8", Сред(ДатаСФ,10,1));
		
		ДанныеПечати.Вставить("ИННПост1", Сред(ИНН,1,1));
		ДанныеПечати.Вставить("ИННПост2", Сред(ИНН,2,1));
		ДанныеПечати.Вставить("ИННПост3", Сред(ИНН,3,1));
		ДанныеПечати.Вставить("ИННПост4", Сред(ИНН,4,1));
		ДанныеПечати.Вставить("ИННПост5", Сред(ИНН,5,1));
		ДанныеПечати.Вставить("ИННПост6", Сред(ИНН,6,1));
		ДанныеПечати.Вставить("ИННПост7", Сред(ИНН,7,1));
		ДанныеПечати.Вставить("ИННПост8", Сред(ИНН,8,1));
		ДанныеПечати.Вставить("ИННПост9", Сред(ИНН,9,1));
		ДанныеПечати.Вставить("ИННПост10", Сред(ИНН,10,1));
		ДанныеПечати.Вставить("ИННПост11", Сред(ИНН,11,1));
		ДанныеПечати.Вставить("ИННПост12", Сред(ИНН,12,1));
		ДанныеПечати.Вставить("ИННПост13", Сред(ИНН,13,1));
		ДанныеПечати.Вставить("ИННПост14", Сред(ИНН,14,1));

        БИК = Шапка.БикБанкаОрганизации;
		ДанныеПечати.Вставить("КодБанкаПоставщика1", Сред(БИК,1,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика2", Сред(БИК,2,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика3", Сред(БИК,3,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика4", Сред(БИК,4,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика5", Сред(БИК,5,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика6", Сред(БИК,6,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика7", Сред(БИК,7,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика8", Сред(БИК,8,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика9", Сред(БИК,9,1));		
		
		НомерСчета = Шапка.НомерБанковскогоСчетаОрганизации;
		ДанныеПечати.Вставить("СчетПоставщика1", Сред(НомерСчета,1,1));		
		ДанныеПечати.Вставить("СчетПоставщика2", Сред(НомерСчета,2,1));		
		ДанныеПечати.Вставить("СчетПоставщика3", Сред(НомерСчета,3,1));		
		ДанныеПечати.Вставить("СчетПоставщика4", Сред(НомерСчета,4,1));		
		ДанныеПечати.Вставить("СчетПоставщика5", Сред(НомерСчета,5,1));		
		ДанныеПечати.Вставить("СчетПоставщика6", Сред(НомерСчета,6,1));		
		ДанныеПечати.Вставить("СчетПоставщика7", Сред(НомерСчета,7,1));		
		ДанныеПечати.Вставить("СчетПоставщика8", Сред(НомерСчета,8,1));		
		ДанныеПечати.Вставить("СчетПоставщика9", Сред(НомерСчета,9,1));		
		ДанныеПечати.Вставить("СчетПоставщика10", Сред(НомерСчета,10,1));		
		ДанныеПечати.Вставить("СчетПоставщика11", Сред(НомерСчета,11,1));		
		ДанныеПечати.Вставить("СчетПоставщика12", Сред(НомерСчета,12,1));		
		ДанныеПечати.Вставить("СчетПоставщика13", Сред(НомерСчета,13,1));		
		ДанныеПечати.Вставить("СчетПоставщика14", Сред(НомерСчета,14,1));		
		ДанныеПечати.Вставить("СчетПоставщика15", Сред(НомерСчета,15,1));		
		ДанныеПечати.Вставить("СчетПоставщика16", Сред(НомерСчета,16,1));		
		
		ДанныеПечати.Вставить("ГНСПоставщика1", Сред(КодГНС,1,1));		
		ДанныеПечати.Вставить("ГНСПоставщика2", Сред(КодГНС,2,1));		
		ДанныеПечати.Вставить("ГНСПоставщика3", Сред(КодГНС,3,1));		

		ДанныеПечати.Вставить("НаименованиеГНСПоставщика", ГНС);		
		ДанныеПечати.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);		
		
		АдресПоставщика = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Шапка.Дата); 
		ДанныеПечати.Вставить("АдресПоставщика", АдресПоставщика);		

		// Данные по контрагенту
		СведенияОКонтрагенте = БухгалтерскийУчетСервер.ПолучитьСведенияОКонтрагенте(Шапка.Контрагент);
		
		ДанныеПечати.Вставить("ПредставлениеПокупателя", СведенияОКонтрагенте.НаименованиеПолное);
		
		ВыводДопИнформацииПоКонтрагенту = БухгалтерскийУчетСервер.ПолучитьПризнакПатентаПоКонтрагенту(Шапка.Контрагент) ИЛИ
			(Шапка.Контрагент.СтранаРезидентства = Справочники.СтраныМира.Киргизия ИЛИ Шапка.Контрагент.СтранаРезидентства.УчастникЕАЭС);
		
		Если ВыводДопИнформацииПоКонтрагенту Тогда
			Если Шапка.Контрагент.ПризнакСтраны = Перечисления.ПризнакиСтраны.ЕАЭС Тогда
				ДанныеПечати.Вставить("НаименованиеГНСПокупателя", Шапка.Контрагент.СтранаРезидентства.Наименование);
				КодГНСКонтрагента = Шапка.Контрагент.СтранаРезидентства.Код;
				ДанныеПечати.Вставить("ГНСПокупателя1", Сред(КодГНСКонтрагента,1,1));		
				ДанныеПечати.Вставить("ГНСПокупателя2", Сред(КодГНСКонтрагента,2,1));		
				ДанныеПечати.Вставить("ГНСПокупателя3", Сред(КодГНСКонтрагента,3,1));	
			Иначе
				ДанныеПечати.Вставить("НаименованиеГНСПокупателя", СведенияОКонтрагенте.ГНСНаименование);
				КодГНСКонтрагента = СведенияОКонтрагенте.ГНСКод;
				ДанныеПечати.Вставить("ГНСПокупателя1", Сред(КодГНСКонтрагента,1,1));		
				ДанныеПечати.Вставить("ГНСПокупателя2", Сред(КодГНСКонтрагента,2,1));		
				ДанныеПечати.Вставить("ГНСПокупателя3", Сред(КодГНСКонтрагента,3,1));	
			КонецЕсли;	
		Иначе
			ДанныеПечати.Вставить("НаименованиеГНСПокупателя", "отсутствует");
		КонецЕсли;
		
		ДанныеПечати.Вставить("АдресПокупателя", СведенияОКонтрагенте.АдрЮР);		
		
		ИННКонтрагента = СведенияОКонтрагенте.ИНН;
		ДанныеПечати.Вставить("ИННПокупателя1", Сред(ИННКонтрагента,1,1));		
		ДанныеПечати.Вставить("ИННПокупателя2", Сред(ИННКонтрагента,2,1));		
		ДанныеПечати.Вставить("ИННПокупателя3", Сред(ИННКонтрагента,3,1));		
		ДанныеПечати.Вставить("ИННПокупателя4", Сред(ИННКонтрагента,4,1));		
		ДанныеПечати.Вставить("ИННПокупателя5", Сред(ИННКонтрагента,5,1));		
		ДанныеПечати.Вставить("ИННПокупателя6", Сред(ИННКонтрагента,6,1));		
		ДанныеПечати.Вставить("ИННПокупателя7", Сред(ИННКонтрагента,7,1));		
		ДанныеПечати.Вставить("ИННПокупателя8", Сред(ИННКонтрагента,8,1));		
		ДанныеПечати.Вставить("ИННПокупателя9", Сред(ИННКонтрагента,9,1));		
		ДанныеПечати.Вставить("ИННПокупателя10", Сред(ИННКонтрагента,10,1));		
		ДанныеПечати.Вставить("ИННПокупателя11", Сред(ИННКонтрагента,11,1));		
		ДанныеПечати.Вставить("ИННПокупателя12", Сред(ИННКонтрагента,12,1));		
		ДанныеПечати.Вставить("ИННПокупателя13", Сред(ИННКонтрагента,13,1));		
		ДанныеПечати.Вставить("ИННПокупателя14", Сред(ИННКонтрагента,14,1));		
		
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.НомерСчета) И ВыводДопИнформацииПоКонтрагенту Тогда 
			НомерСчетаКонтрагента = СведенияОКонтрагенте.НомерСчета;
			ДанныеПечати.Вставить("СчетПокупателя1", Сред(НомерСчетаКонтрагента,1,1));		
			ДанныеПечати.Вставить("СчетПокупателя2", Сред(НомерСчетаКонтрагента,2,1));		
			ДанныеПечати.Вставить("СчетПокупателя3", Сред(НомерСчетаКонтрагента,3,1));		
			ДанныеПечати.Вставить("СчетПокупателя4", Сред(НомерСчетаКонтрагента,4,1));		
			ДанныеПечати.Вставить("СчетПокупателя5", Сред(НомерСчетаКонтрагента,5,1));		
			ДанныеПечати.Вставить("СчетПокупателя6", Сред(НомерСчетаКонтрагента,6,1));		
			ДанныеПечати.Вставить("СчетПокупателя7", Сред(НомерСчетаКонтрагента,7,1));		
			ДанныеПечати.Вставить("СчетПокупателя8", Сред(НомерСчетаКонтрагента,8,1));		
			ДанныеПечати.Вставить("СчетПокупателя9", Сред(НомерСчетаКонтрагента,9,1));		
			ДанныеПечати.Вставить("СчетПокупателя10", Сред(НомерСчетаКонтрагента,10,1));		
			ДанныеПечати.Вставить("СчетПокупателя11", Сред(НомерСчетаКонтрагента,11,1));		
			ДанныеПечати.Вставить("СчетПокупателя12", Сред(НомерСчетаКонтрагента,12,1));		
			ДанныеПечати.Вставить("СчетПокупателя13", Сред(НомерСчетаКонтрагента,13,1));		
			ДанныеПечати.Вставить("СчетПокупателя14", Сред(НомерСчетаКонтрагента,14,1));
			ДанныеПечати.Вставить("СчетПокупателя15", Сред(НомерСчетаКонтрагента,15,1));		
			ДанныеПечати.Вставить("СчетПокупателя16", Сред(НомерСчетаКонтрагента,16,1));
			
			БикБанкаКонтрагента = СведенияОКонтрагенте.БИКБанка;
			ДанныеПечати.Вставить("КодБанкаПокупателя1", Сред(БикБанкаКонтрагента,1,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя2", Сред(БикБанкаКонтрагента,2,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя3", Сред(БикБанкаКонтрагента,3,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя4", Сред(БикБанкаКонтрагента,4,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя5", Сред(БикБанкаКонтрагента,5,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя6", Сред(БикБанкаКонтрагента,6,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя7", Сред(БикБанкаКонтрагента,7,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя8", Сред(БикБанкаКонтрагента,8,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя9", Сред(БикБанкаКонтрагента,9,1));		
			
			ДанныеПечати.Вставить("БанкПокупателя", СведенияОКонтрагенте.Банк);
		КонецЕсли;	
		
		// Таблицы
		ПараметрыОтбора = Новый Структура("Ссылка", Шапка.Ссылка);
		
		ТаблицаИсходныеДанные 		= РезультатЗапроса[1].Выгрузить();
		
		//ТаблицаИсходныеДанные 		= РезультатЗапроса[5].Выгрузить();
		//ТаблицаПересчитанныеДанные 	= РезультатЗапроса[6].Выгрузить();
		ТаблицаИсходныеДанные.Индексы.Добавить("Ссылка");
		//ТаблицаПересчитанныеДанные.Индексы.Добавить("Ссылка");
		
		ПересчитаннаяТаблица = Неопределено;
		ИсходнаяТаблица = Неопределено;
		
		//Если Шапка.ПечатьВРегламентированнойВалюте ИЛИ Шапка.ПечататьКурсИСуммуВРегламентированнойВалюте ИЛИ СчетФактураВВалюте Тогда
		//	ПересчитаннаяТаблица = ТаблицаПересчитанныеДанные.Скопировать(ПараметрыОтбора);
		//	ПересчитаннаяТаблица.Индексы.Добавить("Ссылка");
		//	ПересчитаннаяТаблица.Индексы.Добавить("Номенклатура");
			ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		//КонецЕсли;	
		
		Если НЕ Шапка.ПечатьВРегламентированнойВалюте Тогда
			ИсходнаяТаблица = ТаблицаИсходныеДанные.Скопировать(ПараметрыОтбора);
			ИсходнаяТаблица.Индексы.Добавить("Ссылка");
			ИсходнаяТаблица.Индексы.Добавить("Номенклатура");
		КонецЕсли;
		
		КоличествоСтрок = 0;
		
		// Итоги по исходным суммам
		Если ИсходнаяТаблица <> Неопределено Тогда		
			ВсегоСтоимостьИсходная = ИсходнаяТаблица.Итог("Стоимость");
			ВсегоИсходная = ИсходнаяТаблица.Итог("Всего");
			ВсегоНДСИсходная = ИсходнаяТаблица.Итог("СуммаНДС");
			ВсегоНСПИсходная = ИсходнаяТаблица.Итог("СуммаНСП");
			КоличествоСтрок = ИсходнаяТаблица.Количество();
			
			// Если пересчитанных сумм нет, то итоговая строка будет одна,
			// поэтому используется строка итогов, которая находится в области "Подвал" и 
			// названия параметров задаются соответственно этой области. 
			// Если пересчитанные суммы есть, то итоговых строки будет две 
			// (с исходными суммами и с пересчитанными), поэтому будет задействована область
			// "ИсходныйИтог" и параметры соответственно именуем как они указаны в данной области.
			Если ПересчитаннаяТаблица = Неопределено Тогда
				ДанныеПечати.Вставить("ВсегоСтоимость", ?(СчетФактураВВалюте, ВсегоСтоимостьИсходная, 0));
				ДанныеПечати.Вставить("Всего", 			?(СчетФактураВВалюте, ВсегоИсходная, 0));
				ДанныеПечати.Вставить("ВсегоНДС", 		?(СчетФактураВВалюте, ВсегоНДСИсходная, 0));
				ДанныеПечати.Вставить("ВсегоНСП", 		?(СчетФактураВВалюте, ВсегоНСПИсходная, 0));
				
				Если Шапка.ПечатьВРегламентированнойВалюте Тогда 
					ДанныеПечати.Вставить("Валюта", " (" + ВалютаРегламентированногоУчета + ")");
				Иначе
					ДанныеПечати.Вставить("Валюта", " (" + Шапка.ВалютаДокумента + ")");
				КонецЕсли;
				
			Иначе
				ДанныеПечати.Вставить("ВсегоСтоимостьИсходная", ?(СчетФактураВВалюте, ВсегоСтоимостьИсходная, 0));
				ДанныеПечати.Вставить("ВсегоИсходная", 			?(СчетФактураВВалюте, ВсегоИсходная, 0));
				ДанныеПечати.Вставить("ВсегоНДСИсходная", 		?(СчетФактураВВалюте, ВсегоНДСИсходная, 0));
				ДанныеПечати.Вставить("ВсегоНСПИсходная", 		?(СчетФактураВВалюте, ВсегоНСПИсходная, 0));
				
				ДанныеПечати.Вставить("ВалютаИсходная", " (" + Шапка.ВалютаДокумента + ")");
			КонецЕсли;
		КонецЕсли;
		
		// Итоги по пересчитанным суммам
		Если ПересчитаннаяТаблица <> Неопределено Тогда
			ВсегоСтоимостьПересчитанная = ПересчитаннаяТаблица.Итог("Стоимость");
			ВсегоПересчитанная = ПересчитаннаяТаблица.Итог("Всего");
			ВсегоНДСПересчитанная = ПересчитаннаяТаблица.Итог("СуммаНДС");
			ВсегоНСППересчитанная = ПересчитаннаяТаблица.Итог("СуммаНСП");
			КоличествоСтрок = КоличествоСтрок + ПересчитаннаяТаблица.Количество();
			
			ДанныеПечати.Вставить("ВсегоСтоимость", ?(СчетФактураВВалюте, ВсегоСтоимостьПересчитанная, 0));
			ДанныеПечати.Вставить("Всего", 			?(СчетФактураВВалюте, ВсегоПересчитанная, 0));
			ДанныеПечати.Вставить("ВсегоНДС", 		?(СчетФактураВВалюте, ВсегоНДСПересчитанная, 0));
			ДанныеПечати.Вставить("ВсегоНСП", 		?(СчетФактураВВалюте, ВсегоНСППересчитанная, 0));
			
			ДанныеПечати.Вставить("Валюта", " (" + ВалютаРегламентированногоУчета + ")");
		КонецЕсли;
		
		// Ставки
		ЗначениеСтавкиНДС = УчетНДС.ПолучитьСтавкуНДС(Шапка.Дата, Шапка.СтавкаНДС);
		ДанныеПечати.Вставить("СтавкаНДС", Строка(ЗначениеСтавкиНДС) + "%");
		
		// Информация подвала
		ТекстОКоличестве = СтрШаблон("%1 %2", КоличествоСтрокСчетаФактуры, ?(КоличествоСтрокСчетаФактуры = 20,"(двадцати)","(семи)"));
		ДанныеПечати.Вставить("РазрешенноеКоличествоСтрок", ТекстОКоличестве);
		ДанныеПечати.Вставить("НомерОтчета", ?(КоличествоСтрокСчетаФактуры = 20,"001","002"));
		
		// Области
		МассивОбластейМакета = Новый Массив;
		
		Если СчетФактураВВалюте Тогда
			МассивОбластейМакета.Добавить("ЗаголовокСФВВалюте");
		Иначе
			МассивОбластейМакета.Добавить("Заголовок");
		КонецЕсли;
		
		МассивОбластейМакета.Добавить("Шапка");
		
		Если СчетФактураВВалюте Тогда
			МассивОбластейМакета.Добавить("ШапкаТаблицыВВалюте");
			МассивОбластейМакета.Добавить("СтрокаСФВВалюте");
		Иначе
			МассивОбластейМакета.Добавить("ШапкаТаблицы");
			МассивОбластейМакета.Добавить("Строка");
		КонецЕсли;
		
		Если ДанныеПечати.Свойство("ВалютаИсходная") Тогда		
			МассивОбластейМакета.Добавить("ИсходныйИтог");	
		КонецЕсли;
		
		МассивОбластейМакета.Добавить("ПодвалСФаксимиле");
		
		ДанныеПечатиСтроки = Новый Структура();
		ДанныеПечатиСтроки.Вставить("КодТовара1", "");
		ДанныеПечатиСтроки.Вставить("КодТовара2", "");
		ДанныеПечатиСтроки.Вставить("КодТовара3", "");
		ДанныеПечатиСтроки.Вставить("КодТовара4", "");
		
		ДанныеПечатиПустаяСтрока = Новый Структура();
		ДанныеПечатиПустаяСтрока.Вставить("КодТовара1", 				"");
		ДанныеПечатиПустаяСтрока.Вставить("КодТовара2", 				"");
		ДанныеПечатиПустаяСтрока.Вставить("КодТовара3", 				"");
		ДанныеПечатиПустаяСтрока.Вставить("КодТовара4", 				"");
		ДанныеПечатиПустаяСтрока.Вставить("Количество", 				"Х");
		ДанныеПечатиПустаяСтрока.Вставить("СтавкаНДС", 					"Х");
		ДанныеПечатиПустаяСтрока.Вставить("СтавкаНСП", 					"Х");
		ДанныеПечатиПустаяСтрока.Вставить("Стоимость", 					"Х");	
		ДанныеПечатиПустаяСтрока.Вставить("СуммаНДС", 					"Х");
		ДанныеПечатиПустаяСтрока.Вставить("СуммаНСП", 					"Х");
		ДанныеПечатиПустаяСтрока.Вставить("НоменклатураПредставление", 	"Х");   
		ДанныеПечатиПустаяСтрока.Вставить("ЕдиницаИзмерения",			"Х");
		ДанныеПечатиПустаяСтрока.Вставить("Цена", 						"Х");
		ДанныеПечатиПустаяСтрока.Вставить("Всего", 						"Х");
		
		Если СчетФактураВВалюте Тогда
			ДанныеПечатиПустаяСтрока.Вставить("НоменклатураПредставление", 	"Х");
			ДанныеПечатиПустаяСтрока.Вставить("ЦенаВРеглВалюте", 			"Х");
			ДанныеПечатиПустаяСтрока.Вставить("СтоимостьВРеглВалюте", 		"Х");
			ДанныеПечатиПустаяСтрока.Вставить("СуммаНДСВРеглВалюте", 		"Х");
			ДанныеПечатиПустаяСтрока.Вставить("СуммаНСПВРеглВалюте", 		"Х");
			ДанныеПечатиПустаяСтрока.Вставить("ВсегоВРеглВалюте", 			"Х");
		КонецЕсли;	
		
		ДанныеДокумента = Новый Структура();
		ДанныеДокумента.Вставить("СуммаВключаетНалоги", 		Шапка.СуммаВключаетНалоги);
		ДанныеДокумента.Вставить("Дата", 						Шапка.Дата);
		ДанныеДокумента.Вставить("Организация", 				Шапка.Организация);
		ДанныеДокумента.Вставить("СтавкаНДС", 					Шапка.СтавкаНДС);
		ДанныеДокумента.Вставить("СтавкаНСП", 					Неопределено);
		ДанныеДокумента.Вставить("БезналичныйРасчет", 			Шапка.БезналичныйРасчет);
		ДанныеДокумента.Вставить("ЭкспортУслугПокупателюКР", 	Шапка.ЭкспортУслугПокупателюКР);
		
		Для Каждого ИмяОбласти Из МассивОбластейМакета Цикл
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
			
			Если ИмяОбласти <> "Строка" И ИмяОбласти <> "СтрокаСФВВалюте" Тогда
				ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			Иначе
				СтруктураНоменклатура = Новый Структура();
				СтруктураНоменклатура.Вставить("НоменклатураПредставление", "");		
				
				Если (ИсходнаяТаблица <> Неопределено И ПересчитаннаяТаблица <> Неопределено)
					ИЛИ ИсходнаяТаблица <> Неопределено Тогда
					
					ОбластьМакетаДопСтрока = Неопределено;
					
					// Заготовка необходимых структур
					Если ПересчитаннаяТаблица <> Неопределено Тогда
						ОбластьМакетаДопСтрока = Макет.ПолучитьОбласть("ПересчитаннаяСтрока");
						СтруктураОтбора = Новый Структура();
						СтруктураОтбора.Вставить("Ссылка", );
						СтруктураОтбора.Вставить("Номенклатура", );
					КонецЕсли;
						
					Для Каждого СтрокаТаблицы Из ИсходнаяТаблица Цикл
						КодТНВЭД = ?(ЗначениеЗаполнено(СтрокаТаблицы.КодТНВЭД), СтрокаТаблицы.КодТНВЭД, "0000");
						ДанныеПечатиСтроки.КодТовара1 = Сред(КодТНВЭД,1,1);
						ДанныеПечатиСтроки.КодТовара2 = Сред(КодТНВЭД,2,1);
						ДанныеПечатиСтроки.КодТовара3 = Сред(КодТНВЭД,3,1);
						ДанныеПечатиСтроки.КодТовара4 = Сред(КодТНВЭД,4,1);
						
						Если ОбластьМакетаДопСтрока = Неопределено Тогда
							ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
							ОбластьМакета.Параметры.Заполнить(ДанныеПечатиСтроки);
							
							ЗначениеСтавкиНСП = ?(ПлательщикНСП, 
								УчетНДС.ПолучитьСтавкуНСП(Шапка.Дата, Шапка.Организация, СтрокаТаблицы.СтавкаНСП), 
								Справочники.СтавкиНСП.ПустаяСсылка());
			
							ДанныеДокумента.СтавкаНСП = ЗначениеСтавкиНСП;
							
							РассчитатьСуммыСчетФактуры(СтрокаТаблицы, ДанныеДокумента, ДанныеПечати, ДанныеУчетнойПолитики,, Истина);
							
							ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
							
							Если Шапка.ВыводитьКомментарийВНаименование Тогда
								СтруктураНоменклатура.НоменклатураПредставление = СтрШаблон(НСтр("ru = '%1, %2'"),
									СтрокаТаблицы.НоменклатураПредставление,
									Шапка.Комментарий);
									
								ОбластьМакета.Параметры.Заполнить(СтруктураНоменклатура);
							КонецЕсли;
							
							ОбластьМакета.Параметры.Заполнить(Новый Структура("СтавкаНСП", ?(ЗначениеЗаполнено(ЗначениеСтавкиНСП), Строка(ЗначениеСтавкиНСП) + "%","")));
							ТабличныйДокумент.Вывести(ОбластьМакета);
							
						// Вывод основной строки с исходной суммой (к номенклатуре добавляется курс),
						// а затем вывод дополнительной строки с пересчитанными суммами.
						Иначе
							Если Шапка.ВыводитьКомментарийВНаименование Тогда
								Если СчетФактураВВалюте Тогда
									СтруктураНоменклатура.НоменклатураПредставление = СтрШаблон(НСтр("ru = '%1, %2'"),
										СтрокаТаблицы.НоменклатураПредставление,
										Шапка.Комментарий);
								Иначе	
									СтруктураНоменклатура.НоменклатураПредставление = СтрШаблон(НСтр("ru = '%1, %2, курс %3'"),
										СтрокаТаблицы.НоменклатураПредставление,
										Шапка.Комментарий,
										Шапка.Курс);
								КонецЕсли;
							Иначе
								Если СчетФактураВВалюте Тогда
									СтруктураНоменклатура.НоменклатураПредставление = СтрокаТаблицы.НоменклатураПредставление;
								Иначе	
									СтруктураНоменклатура.НоменклатураПредставление = СтрШаблон(НСтр("ru = '%1, курс %2'"),
										СтрокаТаблицы.НоменклатураПредставление,
										Шапка.Курс);
								КонецЕсли;
							КонецЕсли;	
														
							ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
							ОбластьМакета.Параметры.Заполнить(ДанныеПечатиСтроки);
							
							ЗначениеСтавкиНСП = ?(ПлательщикНСП, 
								УчетНДС.ПолучитьСтавкуНСП(Шапка.Дата, Шапка.Организация, СтрокаТаблицы.СтавкаНСП), 
								Справочники.СтавкиНСП.ПустаяСсылка());
			
							ДанныеДокумента.СтавкаНСП = ЗначениеСтавкиНСП;
							
							Если НЕ СчетФактураВВалюте Тогда 
								РассчитатьСуммыСчетФактуры(СтрокаТаблицы, ДанныеДокумента, ДанныеПечати, ДанныеУчетнойПолитики, Истина, Истина);
							КонецЕсли;	
								
							ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
							ОбластьМакета.Параметры.Заполнить(СтруктураНоменклатура);
							
							Если СчетФактураВВалюте Тогда
								Цены = Новый Структура();
								Цены.Вставить("Цена", Строка(Формат(СтрокаТаблицы.Цена, "ЧДЦ=2; ЧВН=")) + " (" + Шапка.ВалютаДокумента + ")");
								ОбластьМакета.Параметры.Заполнить(Цены);
							КонецЕсли;
							
							ОбластьМакета.Параметры.Заполнить(Новый Структура("СтавкаНСП", ?(ЗначениеЗаполнено(ЗначениеСтавкиНСП), Строка(ЗначениеСтавкиНСП) + "%","")));
							
							Если НЕ СчетФактураВВалюте Тогда
								ТабличныйДокумент.Вывести(ОбластьМакета);
							КонецЕсли;
							
							ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТаблицы);
							
							Строки = ПересчитаннаяТаблица.НайтиСтроки(СтруктураОтбора);
							Если Строки.Количество() > 0 Тогда
								Данные = Строки[0];
								
								ЗначениеСтавкиНСП = ?(ПлательщикНСП, 
									УчетНДС.ПолучитьСтавкуНСП(Шапка.Дата, Шапка.Организация, СтрокаТаблицы.СтавкаНСП), 
									Справочники.СтавкиНСП.ПустаяСсылка());
			
								ДанныеДокумента.СтавкаНСП = ЗначениеСтавкиНСП;
							                                                                       
								Если СчетФактураВВалюте Тогда
									СуммыВРеглВалюте = Новый Структура();
									СуммыВРеглВалюте.Вставить("ЦенаВРеглВалюте", Строка(Формат(Данные.Цена, "ЧДЦ=2; ЧВН=")) + " (" + ВалютаРегламентированногоУчета + ")");
									СуммыВРеглВалюте.Вставить("СтоимостьВРеглВалюте", Данные.Стоимость);
									СуммыВРеглВалюте.Вставить("СуммаНДСВРеглВалюте", Данные.СуммаНДС);
									СуммыВРеглВалюте.Вставить("СуммаНСПВРеглВалюте", Данные.СуммаНСП);
									СуммыВРеглВалюте.Вставить("ВсегоВРеглВалюте", Данные.Всего);
									ОбластьМакета.Параметры.Заполнить(СуммыВРеглВалюте);
								Иначе
									КодТНВЭД = ?(ЗначениеЗаполнено(Данные.КодТНВЭД), Данные.КодТНВЭД, "0000");
									ДанныеПечатиСтроки.КодТовара1 = Сред(КодТНВЭД,1,1);
									ДанныеПечатиСтроки.КодТовара2 = Сред(КодТНВЭД,2,1);
									ДанныеПечатиСтроки.КодТовара3 = Сред(КодТНВЭД,3,1);
									ДанныеПечатиСтроки.КодТовара4 = Сред(КодТНВЭД,4,1);
									
									РассчитатьСуммыСчетФактуры(Данные, ДанныеДокумента, ДанныеПечати, ДанныеУчетнойПолитики,, Истина);	
										
									ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
									ОбластьМакета.Параметры.Заполнить(Данные);
									ОбластьМакета.Параметры.Заполнить(ДанныеПечатиСтроки);
									
									Если Шапка.ВыводитьКомментарийВНаименование Тогда
										СтруктураНоменклатура.НоменклатураПредставление = СтрШаблон(НСтр("ru = '%1, %2'"),
											Данные.НоменклатураПредставление,
											Шапка.Комментарий);
											
										ОбластьМакета.Параметры.Заполнить(СтруктураНоменклатура);
									КонецЕсли;
									
									// Заполнение ставки НСП
									ОбластьМакета.Параметры.Заполнить(Новый Структура("СтавкаНСП", ?(ЗначениеЗаполнено(ЗначениеСтавкиНСП), Строка(ЗначениеСтавкиНСП) + "%","")));
								КонецЕсли;	
									
								ТабличныйДокумент.Вывести(ОбластьМакета);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
				Иначе
					Для Каждого СтрокаТаблицы Из ПересчитаннаяТаблица Цикл 
						КодТНВЭД = ?(ЗначениеЗаполнено(СтрокаТаблицы.КодТНВЭД), СтрокаТаблицы.КодТНВЭД, "0000");
						ДанныеПечатиСтроки.КодТовара1 = Сред(КодТНВЭД,1,1);
						ДанныеПечатиСтроки.КодТовара2 = Сред(КодТНВЭД,2,1);
						ДанныеПечатиСтроки.КодТовара3 = Сред(КодТНВЭД,3,1);
						ДанныеПечатиСтроки.КодТовара4 = Сред(КодТНВЭД,4,1);
						
						ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
						ОбластьМакета.Параметры.Заполнить(ДанныеПечатиСтроки);
						
						ЗначениеСтавкиНСП = ?(ПлательщикНСП, 
								УчетНДС.ПолучитьСтавкуНСП(Шапка.Дата, Шапка.Организация, СтрокаТаблицы.СтавкаНСП), 
								Справочники.СтавкиНСП.ПустаяСсылка());
			
						ДанныеДокумента.СтавкаНСП = ЗначениеСтавкиНСП;
							
						РассчитатьСуммыСчетФактуры(СтрокаТаблицы, ДанныеДокумента, ДанныеПечати, ДанныеУчетнойПолитики,, Истина);
							
						ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
						
						Если Шапка.ВыводитьКомментарийВНаименование Тогда
							СтруктураНоменклатура.НоменклатураПредставление = СтрШаблон(НСтр("ru = '%1, %2'"),
								СтрокаТаблицы.НоменклатураПредставление,
								Шапка.Комментарий);
								
							ОбластьМакета.Параметры.Заполнить(СтруктураНоменклатура);
						КонецЕсли;
						
						ОбластьМакета.Параметры.Заполнить(Новый Структура("СтавкаНСП", ?(ЗначениеЗаполнено(ЗначениеСтавкиНСП), Строка(ЗначениеСтавкиНСП) + "%","")));
						
						ТабличныйДокумент.Вывести(ОбластьМакета);
					КонецЦикла;
				КонецЕсли;
						
				// Добавление пустых строк
				Если КоличествоСтрокСчетаФактуры > КоличествоСтрок Тогда 
					Для Счетчик = 1 По КоличествоСтрокСчетаФактуры - КоличествоСтрок Цикл
						ОбластьМакета.Параметры.Заполнить(ДанныеПечатиПустаяСтрока);
						ТабличныйДокумент.Вывести(ОбластьМакета);		
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;	
КонецФункции

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Накладная") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"Накладная", НСтр("ru = 'Накладная на сторону'"), ПечатьНакладной(МассивОбъектов, ОбъектыПечати),,
		"Документ.РеализацияТоваровУслуг.ПФ_MXL_Накладная");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактура001") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"СчетФактура001", НСтр("ru = 'Счет-фактура (001)'"), ПечатьСчетФактура(МассивОбъектов, ОбъектыПечати, 20));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактура002") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"СчетФактура002", НСтр("ru = 'Счет-фактура (002)'"), ПечатьСчетФактура(МассивОбъектов, ОбъектыПечати, 7));
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Накладная";
	КомандаПечати.Представление = НСтр("ru = 'Накладная'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 1;

	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактура001";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура (001)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 2;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактура002";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура (002)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 3;
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает заголовок документа для печатной формы.
//
// Параметры:
//  Шапка - любая структура с полями:
//           Номер         - Строка или Число - номер документа;
//           Дата          - Дата - дата документа;
//           Представление - Строка - (необязательный) платформенное представление ссылки на документ.
//                                    Если параметр НазваниеДокумента не задан, то название документа будет вычисляться
//                                    из этого параметра.
//  НазваниеДокумента - Строка - название документа (например, "Счет на оплату").
//
// Возвращаемое значение:
//  Строка - заголовок документа.
//
Функция СформироватьЗаголовокДокумента(Шапка, Знач НазваниеДокумента = "")
	
	ДанныеДокумента = Новый Структура("Номер,Дата,Представление");
	ЗаполнитьЗначенияСвойств(ДанныеДокумента, Шапка);
	
	// Если название документа не передано, получим название по представлению документа.
	Если ПустаяСтрока(НазваниеДокумента) И ЗначениеЗаполнено(ДанныеДокумента.Представление) Тогда
		ПоложениеНомера = СтрНайти(ДанныеДокумента.Представление, ДанныеДокумента.Номер);
		Если ПоложениеНомера > 0 Тогда
			НазваниеДокумента = СокрЛП(Лев(ДанныеДокумента.Представление, ПоложениеНомера - 1));
		КонецЕсли;
	КонецЕсли;

	НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеДокумента.Номер);
	Возврат СтрШаблон(НСтр("ru = '%1 № %2 от %3'"),
		НазваниеДокумента, НомерНаПечать, Формат(ДанныеДокумента.Дата, "ДЛФ=DD"));
	
КонецФункции

Процедура РассчитатьСуммыСчетФактуры(СтрокаТаблицы, ДанныеДокумента, ДанныеПечати, ДанныеУчетнойПолитики, ИсходныеСуммы = Ложь, ТолькоРасчетИтогов = Ложь)

	СтавкаНДС = ?(ДанныеУчетнойПолитики.ПлательщикНДС, 
					ДанныеДокумента.СтавкаНДС, 
					Справочники.СтавкиНДС.ПустаяСсылка());
					
	СтавкаНСП = ?(ДанныеУчетнойПолитики.ПлательщикНСП, 
					ДанныеДокумента.СтавкаНСП, 
					Справочники.СтавкиНСП.ПустаяСсылка());
	
	Если ТолькоРасчетИтогов Тогда
		
		Если ИсходныеСуммы Тогда
			ДанныеПечати.ВсегоИсходная 			= ДанныеПечати.ВсегоИсходная + СтрокаТаблицы.Всего;
			ДанныеПечати.ВсегоНДСИсходная 		= ДанныеПечати.ВсегоНДСИсходная + СтрокаТаблицы.СуммаНДС;
			ДанныеПечати.ВсегоНСПИсходная 		= ДанныеПечати.ВсегоНСПИсходная + СтрокаТаблицы.СуммаНСП;
			ДанныеПечати.ВсегоСтоимостьИсходная = ДанныеПечати.ВсегоСтоимостьИсходная + СтрокаТаблицы.Стоимость;
			
		Иначе	
		    ДанныеПечати.Всего 			= ДанныеПечати.Всего + СтрокаТаблицы.Всего;
			ДанныеПечати.ВсегоНДС 		= ДанныеПечати.ВсегоНДС + СтрокаТаблицы.СуммаНДС;
			ДанныеПечати.ВсегоНСП 		= ДанныеПечати.ВсегоНСП + СтрокаТаблицы.СуммаНСП;
			ДанныеПечати.ВсегоСтоимость = ДанныеПечати.ВсегоСтоимость + СтрокаТаблицы.Стоимость;
		КонецЕсли;	
			
	Иначе	
		СтруктураНачальныхСумм = Новый Структура();
		СтруктураНачальныхСумм.Вставить("Всего", 	СтрокаТаблицы.Всего);
		СтруктураНачальныхСумм.Вставить("Доход", 	СтрокаТаблицы.Стоимость);
		СтруктураНачальныхСумм.Вставить("Скидка", 	СтрокаТаблицы.СуммаСкидки);
		СтруктураНачальныхСумм.Вставить("НДС", 		СтрокаТаблицы.СуммаНДС);
		СтруктураНачальныхСумм.Вставить("НСП", 		СтрокаТаблицы.СуммаНСП);
		
		СтруктураСтроки = Новый Структура();
		СтруктураСтроки.Вставить("Цена", 				СтрокаТаблицы.Цена);
		СтруктураСтроки.Вставить("Количество", 			СтрокаТаблицы.Количество);
		СтруктураСтроки.Вставить("Сумма", 				СтрокаТаблицы.Сумма);
		СтруктураСтроки.Вставить("СуммаНДС", 			СтрокаТаблицы.СуммаНДС);
		СтруктураСтроки.Вставить("СуммаНСП", 			СтрокаТаблицы.СуммаНСП);
		СтруктураСтроки.Вставить("Всего", 				СтрокаТаблицы.Всего + СтрокаТаблицы.СуммаСкидки);
		СтруктураСтроки.Вставить("СуммаДохода", 		СтрокаТаблицы.Стоимость);
		СтруктураСтроки.Вставить("СуммаСкидки", 		0);
		СтруктураСтроки.Вставить("СуммаНДССкидки", 		0);
		СтруктураСтроки.Вставить("СуммаНСПСкидки", 		0);
		СтруктураСтроки.Вставить("СуммаДоходаСкидки", 	0);
		СтруктураСтроки.Вставить("СтавкаНДС", 			СтавкаНДС);
		СтруктураСтроки.Вставить("СтавкаНСП", 			СтавкаНСП);
	
		ПараметрыРасчета = Новый Структура;
		ПараметрыРасчета.Вставить("Период", 					ДанныеДокумента.Дата);
		ПараметрыРасчета.Вставить("Организация", 				ДанныеДокумента.Организация);
		ПараметрыРасчета.Вставить("ПризнакСтраныЕАЭС", 			Ложь);
		ПараметрыРасчета.Вставить("ПризнакСтраныИмпортЭкспорт", Ложь);
		ПараметрыРасчета.Вставить("ЭкспортУслугПокупателюКР",   ДанныеДокумента.ЭкспортУслугПокупателюКР);
		ПараметрыРасчета.Вставить("СуммаВключаетНалоги", 		Истина);
		ПараметрыРасчета.Вставить("БезналичныйРасчет", 			ДанныеДокумента.БезналичныйРасчет);
		ПараметрыРасчета.Вставить("СчитатьОтДохода", 			Истина);
		ПараметрыРасчета.Вставить("Точность", 					2);
		ПараметрыРасчета.Вставить("СтавкаНДС", 					СтавкаНДС);
		ПараметрыРасчета.Вставить("СтавкаНСП", 					СтавкаНСП);	
		ПараметрыРасчета.Вставить("СчитатьСкидкуОтдельно",		Истина);
		
		Если ДанныеДокумента.СуммаВключаетНалоги Тогда
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтруктураСтроки, ПараметрыРасчета);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтруктураСтроки);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтруктураСтроки, Истина);
			
		Иначе
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтруктураСтроки, Ложь);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтруктураСтроки, ПараметрыРасчета);
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтруктураСтроки, ПараметрыРасчета);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтруктураСтроки, ПараметрыРасчета);
				
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтруктураСтроки);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтруктураСтроки);
		СтрокаТаблицы.Стоимость = СтруктураСтроки.СуммаДохода;
		
		Если ИсходныеСуммы Тогда	
			ДанныеПечати.СуммаСкидкиИсходная 			= ДанныеПечати.СуммаСкидкиИсходная + СтруктураНачальныхСумм.Скидка;	
			ДанныеПечати.НДССкидкиИсходная 		 		= ДанныеПечати.НДССкидкиИсходная + (СтрокаТаблицы.СуммаНДС - СтруктураНачальныхСумм.НДС);
			ДанныеПечати.НСПСкидкиИсходная 		 		= ДанныеПечати.НСПСкидкиИсходная + (СтрокаТаблицы.СуммаНСП - СтруктураНачальныхСумм.НСП);
			ДанныеПечати.СуммаСкидкиБезНалоговИсходная 	= ДанныеПечати.СуммаСкидкиИсходная - ДанныеПечати.НДССкидкиИсходная - ДанныеПечати.НСПСкидкиИсходная;
			
			ДанныеПечати.ВсегоИсходная 			= ДанныеПечати.ВсегоИсходная + (СтрокаТаблицы.Всего - СтруктураНачальныхСумм.Скидка);
			ДанныеПечати.ВсегоНДСИсходная 		= ДанныеПечати.ВсегоНДСИсходная + СтруктураНачальныхСумм.НДС;
			ДанныеПечати.ВсегоНСПИсходная 		= ДанныеПечати.ВсегоНСПИсходная + СтруктураНачальныхСумм.НСП;
			ДанныеПечати.ВсегоСтоимостьИсходная = ДанныеПечати.ВсегоИсходная - ДанныеПечати.ВсегоНДСИсходная - ДанныеПечати.ВсегоНСПИсходная;
			
		Иначе	
			ДанныеПечати.СуммаСкидки 			= ДанныеПечати.СуммаСкидки + СтруктураНачальныхСумм.Скидка;	
			ДанныеПечати.НДССкидки 		 		= ДанныеПечати.НДССкидки + (СтрокаТаблицы.СуммаНДС - СтруктураНачальныхСумм.НДС);
			ДанныеПечати.НСПСкидки 		 		= ДанныеПечати.НСПСкидки + (СтрокаТаблицы.СуммаНСП - СтруктураНачальныхСумм.НСП);
			ДанныеПечати.СуммаСкидкиБезНалогов 	= ДанныеПечати.СуммаСкидки - ДанныеПечати.НДССкидки - ДанныеПечати.НСПСкидки;
			
			ДанныеПечати.Всего 			= ДанныеПечати.Всего + (СтрокаТаблицы.Всего - СтруктураНачальныхСумм.Скидка);
			ДанныеПечати.ВсегоНДС 		= ДанныеПечати.ВсегоНДС + СтруктураНачальныхСумм.НДС;
			ДанныеПечати.ВсегоНСП 		= ДанныеПечати.ВсегоНСП + СтруктураНачальныхСумм.НСП;
			ДанныеПечати.ВсегоСтоимость = ДанныеПечати.Всего - ДанныеПечати.ВсегоНДС - ДанныеПечати.ВсегоНСП;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецЕсли