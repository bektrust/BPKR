#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ЗаполненияДокумента

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.РеализацияТоваровУслуг - Данные заполнения документа.
//	
Процедура ЗаполнитьПоРеализацииТоваровУслуг(ДанныеЗаполнения) Экспорт
	
	ДокументОснование = ДанныеЗаполнения;
	
	Организация						 = ДанныеЗаполнения.Организация;
	Склад							 = ДанныеЗаполнения.Склад;
	БезналичныйРасчет				 = ДанныеЗаполнения.БезналичныйРасчет;
	Контрагент          			 = ДанныеЗаполнения.Контрагент;
	ДоговорКонтрагента  			 = ДанныеЗаполнения.ДоговорКонтрагента;
	СчетРасчетов 					 = ДанныеЗаполнения.СчетРасчетов;
	ВалютаДокумента     			 = ДанныеЗаполнения.ВалютаДокумента;
	Курс							 = ДанныеЗаполнения.Курс;
	Кратность						 = ДанныеЗаполнения.Кратность;
	СтавкаНДС						 = ДанныеЗаполнения.СтавкаНДС;
	СтавкаНСП						 = ДанныеЗаполнения.СтавкаНСП;
	СтавкаНСПУслуги					 = ДанныеЗаполнения.СтавкаНСПУслуги;
	СуммаВключаетНалоги				 = ДанныеЗаполнения.СуммаВключаетНалоги;
	КодПоставкиНДС					 = ДанныеЗаполнения.КодПоставкиНДС;
	ЭкспортнаяПоставка               = ДанныеЗаполнения.ЭкспортнаяПоставка;
	БанковскийСчет                   = ДанныеЗаполнения.БанковскийСчет;
	МОЛ                              = ДанныеЗаполнения.МОЛ;
	Подразделение                    = ДанныеЗаполнения.Подразделение;
	ТочностьЦены                     = ДанныеЗаполнения.ТочностьЦены;
	ЭкспортУслугПокупателюКР         = ДанныеЗаполнения.ЭкспортУслугПокупателюКР;
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Товары Цикл
		НоваяСтрокаТабличнойЧасти = Товары.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Услуги Цикл
		НоваяСтрокаТабличнойЧасти = Услуги.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
	КонецЦикла;

	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.ОС Цикл
		НоваяСтрокаТабличнойЧасти = ОС.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
	КонецЦикла;
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.РеализацияУслугПоПереработке - Данные заполнения документа.
//	
Процедура ЗаполнитьПоРеализацииУслугПоПереработке(ДанныеЗаполнения) Экспорт
	
	ДокументОснование = ДанныеЗаполнения;
	
	Организация						 = ДанныеЗаполнения.Организация;
	Склад							 = ДанныеЗаполнения.Склад;
	БезналичныйРасчет				 = ДанныеЗаполнения.БезналичныйРасчет;
	Контрагент          			 = ДанныеЗаполнения.Контрагент;
	ДоговорКонтрагента  			 = ДанныеЗаполнения.ДоговорКонтрагента;
	СчетРасчетов 					 = ДанныеЗаполнения.СчетРасчетов;
	ВалютаДокумента     			 = ДанныеЗаполнения.ВалютаДокумента;
	Курс							 = ДанныеЗаполнения.Курс;
	Кратность						 = ДанныеЗаполнения.Кратность;
	СтавкаНДС						 = ДанныеЗаполнения.СтавкаНДС;
	СуммаВключаетНалоги				 = ДанныеЗаполнения.СуммаВключаетНалоги;
	КодПоставкиНДС					 = ДанныеЗаполнения.КодПоставкиНДС;
	ТочностьЦены                     = ДанныеЗаполнения.ТочностьЦены;
	СтавкаНСПУслуги					 = ДанныеЗаполнения.СтавкаНСП;
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Услуги Цикл
		НоваяСтрокаТабличнойЧасти = Услуги.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
	КонецЦикла;
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.АктОбОказанииПроизводственныхУслуг - Данные заполнения документа.
//	
Процедура ЗаполнитьПоАктуОбОказанииПроизводственныхУслуг(ДанныеЗаполнения) Экспорт
	
	ДокументОснование = ДанныеЗаполнения;
	
	Организация						 = ДанныеЗаполнения.Организация;
	БезналичныйРасчет				 = ДанныеЗаполнения.БезналичныйРасчет;
	Контрагент          			 = ДанныеЗаполнения.Контрагент;
	ДоговорКонтрагента  			 = ДанныеЗаполнения.ДоговорКонтрагента;
	СчетРасчетов 					 = ДанныеЗаполнения.СчетРасчетов;
	ВалютаДокумента     			 = ДанныеЗаполнения.ВалютаДокумента;
	Курс							 = ДанныеЗаполнения.Курс;
	Кратность						 = ДанныеЗаполнения.Кратность;
	СтавкаНДС						 = ДанныеЗаполнения.СтавкаНДС;
	СуммаВключаетНалоги				 = ДанныеЗаполнения.СуммаВключаетНалоги;
	КодПоставкиНДС					 = ДанныеЗаполнения.КодПоставкиНДС;
	ТочностьЦены                     = ДанныеЗаполнения.ТочностьЦены;
	СтавкаНСПУслуги					 = ДанныеЗаполнения.СтавкаНСП;
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Услуги Цикл
		НоваяСтрокаТабличнойЧасти = Услуги.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
		НоваяСтрокаТабличнойЧасти.ДополнительныеСведения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			СтрокаТабличнойЧасти.Номенклатура, "НаименованиеПолное")
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.РеализацияТоваровУслуг")] = "ЗаполнитьПоРеализацииТоваровУслуг";
	СтратегияЗаполнения[Тип("ДокументСсылка.РеализацияУслугПоПереработке")] = "ЗаполнитьПоРеализацииУслугПоПереработке";
	СтратегияЗаполнения[Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг")] = "ЗаполнитьПоАктуОбОказанииПроизводственныхУслуг";
	
	ЗаполнениеОбъектовБП.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
	Если НЕ ЗначениеЗаполнено(БанковскийСчет) Тогда		
		БанковскийСчет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьОсновнойБанковскийСчетОрганизации(Организация);		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтавкаНСП) Тогда
		ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(Дата, Организация);
		СтавкаНСП = ДанныеУчетнойПолитики.СтавкаНСПРеализацииТовары;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(СтавкаНСПУслуги) Тогда
		ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(Дата, Организация);
		СтавкаНСПУслуги = ДанныеУчетнойПолитики.СтавкаНСПРеализацииУслуги;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	// Проверка заполнения табличных частей
	Если Товары.Количество() = 0
		И Услуги.Количество() = 0
		И ОС.Количество() = 0 Тогда	
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не заполнен ни один список.'"),,,,Отказ);
	КонецЕсли;			
			
	Если НЕ Контрагент.ПризнакСтраны = Перечисления.ПризнакиСтраны.КР Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНСП");
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.СтавкаНСП");
		МассивНепроверяемыхРеквизитов.Добавить("ОС.СтавкаНСП");
	КонецЕсли;
	
	Если ЭкспортУслугПокупателюКР Тогда 
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.СтавкаНСП");
	КонецЕсли;		
	
	Если Курс = 0 Или Кратность = 0 Тогда 
		ТекстСообщения = НСтр("ru = 'Не заполнен курс валюты ""%1"". Откройте список валют (Банк и касса - Валюты) и проверьте,
			|что у валюты ""%1"" установлен курс на дату %2 или ранее.
			|Перевыберите договор и заново проведите документ.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ВалютаДокумента, Формат(Дата, "ДЛФ=D"));	
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;
		
	ОбщегоНазначенияБПСервер.ДобавитьНепроверяемыеРеквизитыПоПараметрамФункциональныхОпций(МассивНепроверяемыхРеквизитов, Организация, Дата);
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	ВыполнитьПредварительныйКонтроль(Отказ);	
КонецПроцедуры

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	СуммаДокумента = Товары.Итог("Всего") + Услуги.Итог("Всего") + ОС.Итог("Всего");

	РассчитатьСуммыВРегламентированнойВалюте();	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ИнициализироватьДанные(Отказ, РежимПроведения);
	
	ОтразитьДвижения(Отказ, РежимПроведения);
		
	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	СтруктураДанные = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаРасчетов, Дата);
	Курс      = ?(СтруктураДанные.Курс = 0, 1, СтруктураДанные.Курс);
	Кратность = ?(СтруктураДанные.Кратность = 0, 1, СтруктураДанные.Кратность);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииОбработкаПроведения

// Процедура инициализирует данные документа
// и подготавливает таблицы для движения в регистры
//
Процедура ИнициализироватьДанные(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.КорректировкаСтоимостиРеализации.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
КонецПроцедуры
	
// Процедура заполняет регистры данными
//
Процедура ОтразитьДвижения(Отказ, РежимПроведения)

	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Отказ);
	
	БухгалтерскийУчетСервер.ОтразитьПродажи(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьПродажиОсновныхСредств(ДополнительныеСвойства, Движения, Отказ);
	
	БухгалтерскийУчетСервер.ОтразитьДвижениеОСНУ(ДополнительныеСвойства, Движения, Отказ);
	
	// Переход на метод начисления.
	Если Дата >= Дата(2021, 01, 01) Тогда 
		БухгалтерскийУчетСервер.ОтразитьОборотыПоДаннымЕдиногоНалога(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;	
	
	//БухгалтерскийУчетСервер.ОтразитьСведенияПоПоказателямИмпорта(ДополнительныеСвойства, Движения, Отказ);
	
	//НалоговыйУчет.СформироватьДвиженияКорректировкаНУ(ДополнительныеСвойства, Движения, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет контроль противоречий.
//
Процедура ВыполнитьПредварительныйКонтроль(Отказ)
	
	Если НЕ Контрагент = ДокументОснование.Контрагент Тогда
		ТекстСообщения = НСтр("ru = 'Контрагент в текущем документе отличается от контрагента в документе основания.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "Объект.Контрагент",, Отказ);	
	КонецЕсли;
		
	Если НЕ ДоговорКонтрагента = ДокументОснование.ДоговорКонтрагента Тогда
		ТекстСообщения = НСтр("ru = 'Договор в текущем документе отличается от договора в документе основания.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "Объект.ДоговорКонтрагента",, Отказ);	
	КонецЕсли;
	
	Если НЕ БезналичныйРасчет = ДокументОснование.БезналичныйРасчет Тогда
		ТекстСообщения = НСтр("ru = 'Безналичный расчет в текущем документе отличается от безналичного расчета в документе основания.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "Объект.БезналичныйРасчет",, Отказ);	
	КонецЕсли;
	
	Если НЕ Склад = ДокументОснование.Склад Тогда
		ТекстСообщения = НСтр("ru = 'Склад в текущем документе отличается от склада в документе основания.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "Объект.Склад",, Отказ);	
	КонецЕсли;
	
	// Проверка товаров
	ПроверитьТовары = Ложь;
	
	Для Каждого СтрокаТабличнойЧасти Из Товары Цикл
		
		Если СтрокаТабличнойЧасти.Сумма < 0
			ИЛИ СтрокаТабличнойЧасти.СуммаНДС < 0
			ИЛИ СтрокаТабличнойЧасти.СуммаНСП < 0
			ИЛИ СтрокаТабличнойЧасти.СуммаДохода < 0
			ИЛИ СтрокаТабличнойЧасти.Всего < 0 Тогда
			ПроверитьТовары = Истина;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	// Проверка услуг
	ПроверитьУслуги = Ложь;
	
	Для Каждого СтрокаТабличнойЧасти Из Услуги Цикл
		
		Если СтрокаТабличнойЧасти.Сумма < 0
			ИЛИ СтрокаТабличнойЧасти.СуммаНДС < 0
			ИЛИ СтрокаТабличнойЧасти.СуммаНСП < 0
			ИЛИ СтрокаТабличнойЧасти.СуммаДохода < 0
			ИЛИ СтрокаТабличнойЧасти.Всего < 0 Тогда
			ПроверитьУслуги = Истина;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	// Проверка ОС
	ПроверитьОС = Ложь;
	
	Для Каждого СтрокаТабличнойЧасти Из ОС Цикл
		
		Если СтрокаТабличнойЧасти.Сумма < 0
			ИЛИ СтрокаТабличнойЧасти.СуммаНДС < 0
			ИЛИ СтрокаТабличнойЧасти.СуммаНСП < 0
			ИЛИ СтрокаТабличнойЧасти.СуммаДохода < 0
			ИЛИ СтрокаТабличнойЧасти.Всего < 0 Тогда
			ПроверитьОС = Истина;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	Если ПроверитьТовары ИЛИ ПроверитьУслуги ИЛИ ПроверитьОС Тогда
		
		// Проверка табличных частей док. "Поступление товаров и услуг"	
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			
			Если НЕ МОЛ = ДокументОснование.МОЛ Тогда
				ТекстСообщения = НСтр("ru = 'МОЛ в текущем документе отличается от МОЛ в документе основания.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "Объект.МОЛ",, Отказ);	
			КонецЕсли;
			
			Если НЕ Подразделение = ДокументОснование.Подразделение Тогда
				ТекстСообщения = НСтр("ru = 'Подразделение в текущем документе отличается от подразделения в документе основания.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "Объект.Подразделение",, Отказ);	
			КонецЕсли;
			
			КонтрольТабличныхЧастейРеализацияТоваровУслуг(ПроверитьТовары, ПроверитьУслуги, ПроверитьОС, Отказ);
						
		// Проверка табличных частей док. "Поступление из переработки"	
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
			
			Если ПроверитьУслуги Тогда
				КонтрольТабличныхЧастейРеализацияУслугПоПереработке(Отказ);
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	// Проверка ставок НСП
	Если Дата >= Дата(2022,01,01) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Товары.СтавкаНСП КАК СтавкаНСП
		|ПОМЕСТИТЬ ВременнаяТаблицаТовары
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Услуги.СтавкаНСП КАК СтавкаНСП
		|ПОМЕСТИТЬ ВременнаяТаблицаУслуги
		|ИЗ
		|	&Услуги КАК Услуги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОС.СтавкаНСП КАК СтавкаНСП
		|ПОМЕСТИТЬ ВременнаяТаблицаОС
		|ИЗ
		|	&ОС КАК ОС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВременнаяТаблицаТовары.СтавкаНСП КАК СтавкаНСП
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВременнаяТаблицаУслуги.СтавкаНСП КАК СтавкаНСП
		|ИЗ
		|	ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВременнаяТаблицаОС.СтавкаНСП КАК СтавкаНСП
		|ИЗ
		|	ВременнаяТаблицаОС КАК ВременнаяТаблицаОС";
		
		Запрос.УстановитьПараметр("Товары", Товары);
		Запрос.УстановитьПараметр("Услуги", Услуги);
		Запрос.УстановитьПараметр("ОС", 	ОС);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		// Товары
		Если НЕ МассивРезультатов[3].Пустой() И МассивРезультатов[3].Выбрать().Количество() >= 2 Тогда
			ТекстСообщения = НСтр("ru = 'На закладке ""Товары"" значения ставок НСП должны быть одинаковыми.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,, "Объект.Товары", Отказ);	
		КонецЕсли;
		
		// Услуги
		Если НЕ МассивРезультатов[4].Пустой() И МассивРезультатов[4].Выбрать().Количество() >= 2 Тогда
			ТекстСообщения = НСтр("ru = 'На закладке ""Услуги"" значения ставок НСП должны быть одинаковыми.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,, "Объект.Услуги", Отказ);	
		КонецЕсли;
		
		// ОС
		Если НЕ МассивРезультатов[5].Пустой() И МассивРезультатов[5].Выбрать().Количество() >= 2 Тогда
			ТекстСообщения = НСтр("ru = 'На закладке ""ОС"" значения ставок НСП должны быть одинаковыми.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,, "Объект.ОС", Отказ);	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьПредварительныйКонтроль()

Процедура КонтрольТабличныхЧастейРеализацияТоваровУслуг(ПроверитьТовары, ПроверитьУслуги, ПроверитьОС, Отказ)

	Если ПроверитьТовары Тогда
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Товары.Номенклатура КАК Номенклатура,
			|	Товары.СчетУчета КАК СчетУчета,
			|	Товары.Сумма КАК Сумма,
			|	Товары.СуммаДохода КАК СуммаДохода,
			|	Товары.СуммаНДС КАК СуммаНДС,
			|	Товары.СуммаНСП КАК СуммаНСП,
			|	Товары.Всего КАК Всего
			|ПОМЕСТИТЬ ВременнаяТаблицаТовары
			|ИЗ
			|	&Товары КАК Товары
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
			|	РеализацияТоваровУслугТовары.СчетУчета КАК СчетУчета,
			|	РеализацияТоваровУслугТовары.Сумма КАК Сумма,
			|	РеализацияТоваровУслугТовары.СуммаДохода КАК СуммаДохода,
			|	РеализацияТоваровУслугТовары.СуммаНДС КАК СуммаНДС,
			|	РеализацияТоваровУслугТовары.СуммаНСП КАК СуммаНСП,
			|	РеализацияТоваровУслугТовары.Всего КАК Всего
			|ПОМЕСТИТЬ ВременнаяТаблицаСуммы
			|ИЗ
			|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
			|ГДЕ
			|	РеализацияТоваровУслугТовары.Ссылка = &ДокументОснование
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	КорректировкаСтоимостиРеализацииТовары.Номенклатура,
			|	КорректировкаСтоимостиРеализацииТовары.СчетУчета,
			|	КорректировкаСтоимостиРеализацииТовары.Сумма,
			|	КорректировкаСтоимостиРеализацииТовары.СуммаДохода,
			|	КорректировкаСтоимостиРеализацииТовары.СуммаНДС,
			|	КорректировкаСтоимостиРеализацииТовары.СуммаНСП,
			|	КорректировкаСтоимостиРеализацииТовары.Всего
			|ИЗ
			|	Документ.КорректировкаСтоимостиРеализации.Товары КАК КорректировкаСтоимостиРеализацииТовары
			|ГДЕ
			|	КорректировкаСтоимостиРеализацииТовары.Ссылка.ДокументОснование = &ДокументОснование
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВременнаяТаблицаСуммы.Номенклатура КАК Номенклатура,
			|	ВременнаяТаблицаСуммы.СчетУчета КАК СчетУчета,
			|	СУММА(ВременнаяТаблицаСуммы.Сумма) КАК Сумма,
			|	СУММА(ВременнаяТаблицаСуммы.СуммаДохода) КАК СуммаДохода,
			|	СУММА(ВременнаяТаблицаСуммы.СуммаНДС) КАК СуммаНДС,
			|	СУММА(ВременнаяТаблицаСуммы.СуммаНСП) КАК СуммаНСП,
			|	СУММА(ВременнаяТаблицаСуммы.Всего) КАК Всего
			|ПОМЕСТИТЬ ВременнаяТаблицаИтоговая
			|ИЗ
			|	ВременнаяТаблицаСуммы КАК ВременнаяТаблицаСуммы
			|
			|СГРУППИРОВАТЬ ПО
			|	ВременнаяТаблицаСуммы.Номенклатура,
			|	ВременнаяТаблицаСуммы.СчетУчета
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЕСТЬNULL(ВременнаяТаблицаИтоговая.Номенклатура, НЕОПРЕДЕЛЕНО) КАК НоменклатураПоступления,
			|	ЕСТЬNULL(ВременнаяТаблицаТовары.Номенклатура, НЕОПРЕДЕЛЕНО) КАК Номенклатура,
			|	ЕСТЬNULL(ВременнаяТаблицаТовары.СчетУчета, НЕОПРЕДЕЛЕНО) КАК СчетУчета
			|ИЗ
			|	ВременнаяТаблицаИтоговая КАК ВременнаяТаблицаИтоговая
			|		ПОЛНОЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
			|		ПО ВременнаяТаблицаИтоговая.Номенклатура = ВременнаяТаблицаТовары.Номенклатура
			|			И ВременнаяТаблицаИтоговая.СчетУчета = ВременнаяТаблицаТовары.СчетУчета
			|ГДЕ
			|	(ВременнаяТаблицаИтоговая.Номенклатура ЕСТЬ NULL
			|			ИЛИ ЕСТЬNULL(ВременнаяТаблицаИтоговая.Сумма, 0) < ЕСТЬNULL(-ВременнаяТаблицаТовары.Сумма, 0)
			|			ИЛИ ЕСТЬNULL(ВременнаяТаблицаИтоговая.СуммаДохода, 0) < ЕСТЬNULL(-ВременнаяТаблицаТовары.СуммаДохода, 0)
			|			ИЛИ ЕСТЬNULL(ВременнаяТаблицаИтоговая.СуммаНДС, 0) < ЕСТЬNULL(-ВременнаяТаблицаТовары.СуммаНДС, 0)
			|			ИЛИ ЕСТЬNULL(ВременнаяТаблицаИтоговая.СуммаНСП, 0) < ЕСТЬNULL(-ВременнаяТаблицаТовары.СуммаНСП, 0)
			|			ИЛИ ЕСТЬNULL(ВременнаяТаблицаИтоговая.Всего, 0) < ЕСТЬNULL(-ВременнаяТаблицаТовары.Всего, 0))";
		Запрос.УстановитьПараметр("Товары", 			Товары);
		Запрос.УстановитьПараметр("ДокументОснование", 	ДокументОснование);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.НоменклатураПоступления = Неопределено Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе основания нет товара %1 и счетом учета %2.'"),
									Выборка.Номенклатура, Выборка.СчетУчета);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			Иначе
				ТекстСообщения = СтрШаблон(НСтр("ru = 'На закладке ""Товары"" у номенклатуры %1 с счетом учета %2 корректировка по суммам превышает суммы из основания.'"),
									Выборка.Номенклатура, Выборка.СчетУчета);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	

	Если ПроверитьУслуги Тогда
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Услуги.Номенклатура КАК Номенклатура,
			|	Услуги.Сумма КАК Сумма,
			|	Услуги.СуммаДохода КАК СуммаДохода,
			|	Услуги.СуммаНДС КАК СуммаНДС,
			|	Услуги.СуммаНСП КАК СуммаНСП,
			|	Услуги.Всего КАК Всего
			|ПОМЕСТИТЬ ВременнаяТаблицаУслуги
			|ИЗ
			|	&Услуги КАК Услуги
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	РеализацияТоваровУслугУслуги.Номенклатура КАК Номенклатура,
			|	РеализацияТоваровУслугУслуги.Сумма КАК Сумма,
			|	РеализацияТоваровУслугУслуги.СуммаДохода КАК СуммаДохода,
			|	РеализацияТоваровУслугУслуги.СуммаНДС КАК СуммаНДС,
			|	РеализацияТоваровУслугУслуги.СуммаНСП КАК СуммаНСП,
			|	РеализацияТоваровУслугУслуги.Всего КАК Всего
			|ПОМЕСТИТЬ ВременнаяТаблицаСуммы
			|ИЗ
			|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
			|ГДЕ
			|	РеализацияТоваровУслугУслуги.Ссылка = &ДокументОснование
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	КорректировкаСтоимостиРеализацииУслуги.Номенклатура,
			|	КорректировкаСтоимостиРеализацииУслуги.Сумма,
			|	КорректировкаСтоимостиРеализацииУслуги.СуммаДохода,
			|	КорректировкаСтоимостиРеализацииУслуги.СуммаНДС,
			|	КорректировкаСтоимостиРеализацииУслуги.СуммаНСП,
			|	КорректировкаСтоимостиРеализацииУслуги.Всего
			|ИЗ
			|	Документ.КорректировкаСтоимостиРеализации.Услуги КАК КорректировкаСтоимостиРеализацииУслуги
			|ГДЕ
			|	КорректировкаСтоимостиРеализацииУслуги.Ссылка.ДокументОснование = &ДокументОснование
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВременнаяТаблицаСуммы.Номенклатура КАК Номенклатура,
			|	СУММА(ВременнаяТаблицаСуммы.Сумма) КАК Сумма,
			|	СУММА(ВременнаяТаблицаСуммы.СуммаДохода) КАК СуммаДохода,
			|	СУММА(ВременнаяТаблицаСуммы.СуммаНДС) КАК СуммаНДС,
			|	СУММА(ВременнаяТаблицаСуммы.СуммаНСП) КАК СуммаНСП,
			|	СУММА(ВременнаяТаблицаСуммы.Всего) КАК Всего
			|ПОМЕСТИТЬ ВременнаяТаблицаИтоговая
			|ИЗ
			|	ВременнаяТаблицаСуммы КАК ВременнаяТаблицаСуммы
			|
			|СГРУППИРОВАТЬ ПО
			|	ВременнаяТаблицаСуммы.Номенклатура
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЕСТЬNULL(ВременнаяТаблицаИтоговая.Номенклатура, НЕОПРЕДЕЛЕНО) КАК НоменклатураПоступления,
			|	ЕСТЬNULL(ВременнаяТаблицаУслуги.Номенклатура, НЕОПРЕДЕЛЕНО) КАК Номенклатура
			|ИЗ
			|	ВременнаяТаблицаИтоговая КАК ВременнаяТаблицаИтоговая
			|		ПОЛНОЕ СОЕДИНЕНИЕ ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги
			|		ПО ВременнаяТаблицаИтоговая.Номенклатура = ВременнаяТаблицаУслуги.Номенклатура
			|ГДЕ
			|	(ВременнаяТаблицаИтоговая.Номенклатура ЕСТЬ NULL
			|			ИЛИ ЕСТЬNULL(ВременнаяТаблицаИтоговая.Сумма, 0) < ЕСТЬNULL(-ВременнаяТаблицаУслуги.Сумма, 0)
			|			ИЛИ ЕСТЬNULL(ВременнаяТаблицаИтоговая.СуммаДохода, 0) < ЕСТЬNULL(-ВременнаяТаблицаУслуги.СуммаДохода, 0)
			|			ИЛИ ЕСТЬNULL(ВременнаяТаблицаИтоговая.СуммаНДС, 0) < ЕСТЬNULL(-ВременнаяТаблицаУслуги.СуммаНДС, 0)
			|			ИЛИ ЕСТЬNULL(ВременнаяТаблицаИтоговая.СуммаНСП, 0) < ЕСТЬNULL(-ВременнаяТаблицаУслуги.СуммаНСП, 0)
			|			ИЛИ ЕСТЬNULL(ВременнаяТаблицаИтоговая.Всего, 0) < ЕСТЬNULL(-ВременнаяТаблицаУслуги.Всего, 0))";
		Запрос.УстановитьПараметр("Услуги", 			Услуги);
		Запрос.УстановитьПараметр("ДокументОснование", 	ДокументОснование);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.НоменклатураПоступления = Неопределено Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе основания нет услуги %1.'"), Выборка.Номенклатура);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			Иначе
				ТекстСообщения = СтрШаблон(НСтр("ru = 'На закладке ""Услуги"" у номенклатуры %1 корректировка по суммам превышает суммы из основания.'"),
									Выборка.Номенклатура);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
	Если ПроверитьОС Тогда
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ОС.ОсновноеСредство КАК ОсновноеСредство,
			|	ОС.Сумма КАК Сумма,
			|	ОС.СуммаДохода КАК СуммаДохода,
			|	ОС.СуммаНДС КАК СуммаНДС,
			|	ОС.СуммаНСП КАК СуммаНСП,
			|	ОС.Всего КАК Всего
			|ПОМЕСТИТЬ ВременнаяТаблицаОС
			|ИЗ
			|	&ОС КАК ОС
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	РеализацияТоваровУслугОС.ОсновноеСредство КАК ОсновноеСредство,
			|	РеализацияТоваровУслугОС.Сумма КАК Сумма,
			|	РеализацияТоваровУслугОС.СуммаДохода КАК СуммаДохода,
			|	РеализацияТоваровУслугОС.СуммаНДС КАК СуммаНДС,
			|	РеализацияТоваровУслугОС.СуммаНСП КАК СуммаНСП,
			|	РеализацияТоваровУслугОС.Всего КАК Всего
			|ПОМЕСТИТЬ ВременнаяТаблицаСуммы
			|ИЗ
			|	Документ.РеализацияТоваровУслуг.ОС КАК РеализацияТоваровУслугОС
			|ГДЕ
			|	РеализацияТоваровУслугОС.Ссылка = &ДокументОснование
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	КорректировкаСтоимостиРеализацииОС.ОсновноеСредство,
			|	КорректировкаСтоимостиРеализацииОС.Сумма,
			|	КорректировкаСтоимостиРеализацииОС.СуммаДохода,
			|	КорректировкаСтоимостиРеализацииОС.СуммаНДС,
			|	КорректировкаСтоимостиРеализацииОС.СуммаНСП,
			|	КорректировкаСтоимостиРеализацииОС.Всего
			|ИЗ
			|	Документ.КорректировкаСтоимостиРеализации.ОС КАК КорректировкаСтоимостиРеализацииОС
			|ГДЕ
			|	КорректировкаСтоимостиРеализацииОС.Ссылка.ДокументОснование = &ДокументОснование
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВременнаяТаблицаСуммы.ОсновноеСредство КАК ОсновноеСредство,
			|	СУММА(ВременнаяТаблицаСуммы.Сумма) КАК Сумма,
			|	СУММА(ВременнаяТаблицаСуммы.СуммаДохода) КАК СуммаДохода,
			|	СУММА(ВременнаяТаблицаСуммы.СуммаНДС) КАК СуммаНДС,
			|	СУММА(ВременнаяТаблицаСуммы.СуммаНСП) КАК СуммаНСП,
			|	СУММА(ВременнаяТаблицаСуммы.Всего) КАК Всего
			|ПОМЕСТИТЬ ВременнаяТаблицаИтоговая
			|ИЗ
			|	ВременнаяТаблицаСуммы КАК ВременнаяТаблицаСуммы
			|
			|СГРУППИРОВАТЬ ПО
			|	ВременнаяТаблицаСуммы.ОсновноеСредство
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЕСТЬNULL(ВременнаяТаблицаИтоговая.ОсновноеСредство, НЕОПРЕДЕЛЕНО) КАК ОсновноеСредствоПоступления,
			|	ЕСТЬNULL(ВременнаяТаблицаОС.ОсновноеСредство, НЕОПРЕДЕЛЕНО) КАК ОсновноеСредство
			|ИЗ
			|	ВременнаяТаблицаИтоговая КАК ВременнаяТаблицаИтоговая
			|		ПОЛНОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
			|		ПО ВременнаяТаблицаИтоговая.ОсновноеСредство = ВременнаяТаблицаОС.ОсновноеСредство
			|ГДЕ
			|	(ВременнаяТаблицаИтоговая.ОсновноеСредство ЕСТЬ NULL
			|			ИЛИ ЕСТЬNULL(ВременнаяТаблицаИтоговая.Сумма, 0) < ЕСТЬNULL(-ВременнаяТаблицаОС.Сумма, 0)
			|			ИЛИ ЕСТЬNULL(ВременнаяТаблицаИтоговая.СуммаДохода, 0) < ЕСТЬNULL(-ВременнаяТаблицаОС.СуммаДохода, 0)
			|			ИЛИ ЕСТЬNULL(ВременнаяТаблицаИтоговая.СуммаНДС, 0) < ЕСТЬNULL(-ВременнаяТаблицаОС.СуммаНДС, 0)
			|			ИЛИ ЕСТЬNULL(ВременнаяТаблицаИтоговая.СуммаНСП, 0) < ЕСТЬNULL(-ВременнаяТаблицаОС.СуммаНСП, 0)
			|			ИЛИ ЕСТЬNULL(ВременнаяТаблицаИтоговая.Всего, 0) < ЕСТЬNULL(-ВременнаяТаблицаОС.Всего, 0))";
		Запрос.УстановитьПараметр("ОС", 				ОС);
		Запрос.УстановитьПараметр("ДокументОснование", 	ДокументОснование);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ОсновноеСредствоПоступления = Неопределено Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе основания нет ОС %1.'"), Выборка.ОсновноеСредство);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			Иначе
				ТекстСообщения = СтрШаблон(НСтр("ru = 'На закладке ""Основные средства"" у ОС %1 корректировка по суммам превышает суммы из основания.'"),
									Выборка.ОсновноеСредство);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры

Процедура КонтрольТабличныхЧастейРеализацияУслугПоПереработке(Отказ)

	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Услуги.Номенклатура КАК Номенклатура,
		|	Услуги.Сумма КАК Сумма,
		|	Услуги.СуммаДохода КАК СуммаДохода,
		|	Услуги.СуммаНДС КАК СуммаНДС,
		|	Услуги.СуммаНСП КАК СуммаНСП,
		|	Услуги.Всего КАК Всего
		|ПОМЕСТИТЬ ВременнаяТаблицаУслуги
		|ИЗ
		|	&Услуги КАК Услуги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РеализацияУслугПоПереработкеУслуги.Номенклатура КАК Номенклатура,
		|	РеализацияУслугПоПереработкеУслуги.Сумма КАК Сумма,
		|	РеализацияУслугПоПереработкеУслуги.СуммаДохода КАК СуммаДохода,
		|	РеализацияУслугПоПереработкеУслуги.СуммаНДС КАК СуммаНДС,
		|	РеализацияУслугПоПереработкеУслуги.СуммаНСП КАК СуммаНСП,
		|	РеализацияУслугПоПереработкеУслуги.Всего КАК Всего
		|ПОМЕСТИТЬ ВременнаяТаблицаСуммы
		|ИЗ
		|	Документ.РеализацияУслугПоПереработке.Услуги КАК РеализацияУслугПоПереработкеУслуги
		|ГДЕ
		|	РеализацияУслугПоПереработкеУслуги.Ссылка = &ДокументОснование
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КорректировкаСтоимостиРеализацииУслуги.Номенклатура,
		|	КорректировкаСтоимостиРеализацииУслуги.Сумма,
		|	КорректировкаСтоимостиРеализацииУслуги.СуммаДохода,
		|	КорректировкаСтоимостиРеализацииУслуги.СуммаНДС,
		|	КорректировкаСтоимостиРеализацииУслуги.СуммаНСП,
		|	КорректировкаСтоимостиРеализацииУслуги.Всего
		|ИЗ
		|	Документ.КорректировкаСтоимостиРеализации.Услуги КАК КорректировкаСтоимостиРеализацииУслуги
		|ГДЕ
		|	КорректировкаСтоимостиРеализацииУслуги.Ссылка.ДокументОснование = &ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаСуммы.Номенклатура КАК Номенклатура,
		|	СУММА(ВременнаяТаблицаСуммы.Сумма) КАК Сумма,
		|	СУММА(ВременнаяТаблицаСуммы.СуммаДохода) КАК СуммаДохода,
		|	СУММА(ВременнаяТаблицаСуммы.СуммаНДС) КАК СуммаНДС,
		|	СУММА(ВременнаяТаблицаСуммы.СуммаНСП) КАК СуммаНСП,
		|	СУММА(ВременнаяТаблицаСуммы.Всего) КАК Всего
		|ПОМЕСТИТЬ ВременнаяТаблицаИтоговая
		|ИЗ
		|	ВременнаяТаблицаСуммы КАК ВременнаяТаблицаСуммы
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаСуммы.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВременнаяТаблицаИтоговая.Номенклатура, НЕОПРЕДЕЛЕНО) КАК НоменклатураПоступления,
		|	ЕСТЬNULL(ВременнаяТаблицаУслуги.Номенклатура, НЕОПРЕДЕЛЕНО) КАК Номенклатура
		|ИЗ
		|	ВременнаяТаблицаИтоговая КАК ВременнаяТаблицаИтоговая
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги
		|		ПО ВременнаяТаблицаИтоговая.Номенклатура = ВременнаяТаблицаУслуги.Номенклатура
		|ГДЕ
		|	(ВременнаяТаблицаИтоговая.Номенклатура ЕСТЬ NULL
		|			ИЛИ ЕСТЬNULL(ВременнаяТаблицаИтоговая.Сумма, 0) < ЕСТЬNULL(-ВременнаяТаблицаУслуги.Сумма, 0)
		|			ИЛИ ЕСТЬNULL(ВременнаяТаблицаИтоговая.СуммаДохода, 0) < ЕСТЬNULL(-ВременнаяТаблицаУслуги.СуммаДохода, 0)
		|			ИЛИ ЕСТЬNULL(ВременнаяТаблицаИтоговая.СуммаНДС, 0) < ЕСТЬNULL(-ВременнаяТаблицаУслуги.СуммаНДС, 0)
		|			ИЛИ ЕСТЬNULL(ВременнаяТаблицаИтоговая.СуммаНСП, 0) < ЕСТЬNULL(-ВременнаяТаблицаУслуги.СуммаНСП, 0)
		|			ИЛИ ЕСТЬNULL(ВременнаяТаблицаИтоговая.Всего, 0) < ЕСТЬNULL(-ВременнаяТаблицаУслуги.Всего, 0))";
	Запрос.УстановитьПараметр("Услуги", 			Услуги);
	Запрос.УстановитьПараметр("ДокументОснование", 	ДокументОснование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.НоменклатураПоступления = Неопределено Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе основания нет услуги %1.'"), Выборка.Номенклатура);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		Иначе
			ТекстСообщения = СтрШаблон(НСтр("ru = 'На закладке ""Услуги"" у номенклатуры %1 корректировка по суммам превышает суммы из основания.'"),
								Выборка.Номенклатура);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

// Процедура рассчитывает суммы табличных частей в валюте регламентированного учета
//
Процедура РассчитатьСуммыВРегламентированнойВалюте()

	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		
		МассивТабличныхЧастей = Новый Массив();
		МассивТабличныхЧастей.Добавить(Товары);
		МассивТабличныхЧастей.Добавить(Услуги);
		МассивТабличныхЧастей.Добавить(ОС);
		
		Для Каждого ТабличнаяЧасть Из МассивТабличныхЧастей Цикл
			Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл					
				СтрокаТабличнойЧасти.СуммаВВалютеРеглУчета 		 		= СтрокаТабличнойЧасти.Сумма;
				СтрокаТабличнойЧасти.СуммаНДСВВалютеРеглУчета 	 		= СтрокаТабличнойЧасти.СуммаНДС;
				СтрокаТабличнойЧасти.СуммаНСПВВалютеРеглУчета 	 		= СтрокаТабличнойЧасти.СуммаНСП;
				СтрокаТабличнойЧасти.СуммаДоходаВВалютеРеглУчета 		= СтрокаТабличнойЧасти.СуммаДохода;
				СтрокаТабличнойЧасти.ВсегоВВалютеРеглУчета 				= СтрокаТабличнойЧасти.Всего;
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(Дата, Организация);	
		МассивТабличныхЧастей = Новый Массив();
		МассивТабличныхЧастей.Добавить(Товары);
		МассивТабличныхЧастей.Добавить(Услуги);
		МассивТабличныхЧастей.Добавить(ОС);
								
		Для Каждого ТабличнаяЧасть Из МассивТабличныхЧастей Цикл
			
			Если ТабличнаяЧасть = Товары Тогда
				ИмяТабличнойЧасти = "Товары"; 
			ИначеЕсли ТабличнаяЧасть = Услуги Тогда
				ИмяТабличнойЧасти = "Услуги";	
			Иначе
				ИмяТабличнойЧасти = "ОС";	
			КонецЕсли;	
			
			ПараметрыРасчета = ПодготовитьПараметрыРасчета(ИмяТабличнойЧасти, ДанныеУчетнойПолитики);
										
			Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		
				// Структура для пересчета и заполнения суммами в валюте регламетированного учета.
				ДанныеВВалютеРеглУчета = Новый Структура();	
				ДанныеВВалютеРеглУчета.Вставить("Всего", СтрокаТабличнойЧасти.Всего);
				ДанныеВВалютеРеглУчета.Вставить("СуммаНДС", СтрокаТабличнойЧасти.СуммаНДС);
				ДанныеВВалютеРеглУчета.Вставить("СуммаНСП", СтрокаТабличнойЧасти.СуммаНСП);
				ДанныеВВалютеРеглУчета.Вставить("СтавкаНДС", ПараметрыРасчета.СтавкаНДС);
				ДанныеВВалютеРеглУчета.Вставить("СтавкаНСП", СтрокаТабличнойЧасти.СтавкаНСП);
				
				Если СуммаВключаетНалоги Тогда
					ДанныеВВалютеРеглУчета.Вставить("Сумма", Окр(СтрокаТабличнойЧасти.Сумма * Курс / Кратность, 2));
					ДанныеВВалютеРеглУчета.Вставить("СуммаДохода", СтрокаТабличнойЧасти.СуммаДохода);	
				Иначе
					ДанныеВВалютеРеглУчета.Вставить("Сумма", СтрокаТабличнойЧасти.Сумма);
					ДанныеВВалютеРеглУчета.Вставить("СуммаДохода", Окр(СтрокаТабличнойЧасти.СуммаДохода * Курс / Кратность, 2));	
				КонецЕсли;
				
				Если ТабличнаяЧасть <> ОС Тогда
					ДанныеВВалютеРеглУчета.Вставить("Цена", Окр(СтрокаТабличнойЧасти.Цена * Курс / Кратность, 2));
					ДанныеВВалютеРеглУчета.Вставить("Количество", СтрокаТабличнойЧасти.Количество);	
				КонецЕсли;	
				
				Если СуммаВключаетНалоги Тогда					
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(ДанныеВВалютеРеглУчета, ПараметрыРасчета);	
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(ДанныеВВалютеРеглУчета);
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(ДанныеВВалютеРеглУчета, Истина);
				Иначе
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(ДанныеВВалютеРеглУчета, ПараметрыРасчета);	
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(ДанныеВВалютеРеглУчета, ПараметрыРасчета);		
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(ДанныеВВалютеРеглУчета);
				КонецЕсли;
					
				СтрокаТабличнойЧасти.СуммаВВалютеРеглУчета = ДанныеВВалютеРеглУчета.Сумма;
				СтрокаТабличнойЧасти.СуммаНДСВВалютеРеглУчета = ДанныеВВалютеРеглУчета.СуммаНДС;
				СтрокаТабличнойЧасти.СуммаНСПВВалютеРеглУчета = ДанныеВВалютеРеглУчета.СуммаНСП;
				СтрокаТабличнойЧасти.СуммаДоходаВВалютеРеглУчета = ДанныеВВалютеРеглУчета.СуммаДохода;
				СтрокаТабличнойЧасти.ВсегоВВалютеРеглУчета = ДанныеВВалютеРеглУчета.Всего;
			КонецЦикла;	
		КонецЦикла;			
	КонецЕсли;	
КонецПроцедуры

Функция ПодготовитьПараметрыРасчета(ИмяТабличнойЧасти, ДанныеУчетнойПолитики, СчитатьОтДохода = Ложь) Экспорт

	ПараметрыРасчета = ОбработкаТабличныхЧастейКлиентСервер.ШаблонПараметровРасчета();
	
	ПараметрыРасчета.Период = Дата;
	ПараметрыРасчета.Организация = Организация;
	// СуммаВключаетНалоги - всегда ИСТИНА,
	// потому что расчет налогов идет от "Всего", а "Всего" всегда с налогами.
	ПараметрыРасчета.СуммаВключаетНалоги = Истина;
	ПараметрыРасчета.БезналичныйРасчет = БезналичныйРасчет;
	ПараметрыРасчета.ЭкспортУслугПокупателюКР = ЭкспортУслугПокупателюКР;
	ПараметрыРасчета.СчитатьОтДохода = СчитатьОтДохода;
	ПараметрыРасчета.ИмяТабличнойЧасти = ИмяТабличнойЧасти;
	ПараметрыРасчета.СчитатьСкидкуОтдельно = Истина;

	ПараметрыРасчета.СтавкаНДС = ?(ДанныеУчетнойПолитики.ПлательщикНДС, СтавкаНДС, Справочники.СтавкиНДС.ПустаяСсылка());
	
	ПараметрыРасчета.СтавкаНСП = ?(ДанныеУчетнойПолитики.ПлательщикНСП, ?(ИмяТабличнойЧасти = "Услуги",СтавкаНСПУслуги,СтавкаНСП), Справочники.СтавкиНСП.ПустаяСсылка());
	
	ПараметрыРасчета.ПризнакСтраныЕАЭС = ?(Контрагент.ПризнакСтраны = Перечисления.ПризнакиСтраны.ЕАЭС, Истина, Ложь);
	ПараметрыРасчета.ПризнакСтраныИмпортЭкспорт = ?(Контрагент.ПризнакСтраны = Перечисления.ПризнакиСтраны.ИмпортЭкспорт, Истина, Ложь);
	
	Возврат ПараметрыРасчета;
КонецФункции

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли