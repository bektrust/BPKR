
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка реквизитов формы.	
	ДатаДокумента = Объект.Дата;
	
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	
	ПараметрыРозничнойПродажи = КассовыеСменыВызовСервераБП.ПараметрыРозничныхПродаж(Объект.Организация, Объект.Касса);
	СтавкаНДС = ?(ДанныеУчетнойПолитики.ПлательщикНДС, ПараметрыРозничнойПродажи.ДоговорКонтрагента.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка"));
	
	ИспользоватьОплатуПоПлатежнымКартам = ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПоПлатежнымКартам");
	Элементы.БезналичныйРасчет.Видимость = ИспользоватьОплатуПоПлатежнымКартам;
	
	УстановитьФункциональныеОпцииФормы();

	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	УказыватьТочностьЦены = ПолучитьФункциональнуюОпцию("УказыватьТочностьЦены");
	Если УказыватьТочностьЦены Тогда 
		ЗаполнитьСписокВыбораТочностьЦены();	
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		РозничнаяПродажаСсылка = Документы.РозничнаяПродажа.ПолучитьСсылку();
	Иначе
		РозничнаяПродажаСсылка = Объект.Ссылка;
	КонецЕсли; 
	
	// Маркировка
	ВестиУчетМаркировкиПродукции = ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукции");
	Если ВестиУчетМаркировкиПродукции Тогда
		Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
			ЗаполнитьИндексМарки(СтрокаТабличнойЧасти);
		КонецЦикла;
	КонецЕсли;
	// Конец Маркировка
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = ПодключаемоеОборудованиеБППовтИсп.ИспользоватьПодключаемоеОборудование();
	Если ИспользоватьПодключаемоеОборудование Тогда
		ИспользуетсяФискальныйРегистратор = ПодключаемоеОборудованиеБППовтИсп.ИспользоватьФискальныйРегистратор();
		УправлениеКассовойСменойДоступно = КассовыеСменыВызовСервераБП.ДоступноУправлениеКассовойСменой();
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	
	// ГрупповоеИзменениеСтрок
	ЗаполнитьСписокДействий("Товары");
	ГрупповоеИзменениеСтрокСервер.ПриСозданииНаСервере(НаборЭлементовГрупповогоИзмененияСтрокСервер("Товары"), ЭтотОбъект.ИзменениеСтрокТоварыДействие);
	ИзменениеСтрокТоварыДействиеПриОткрытии = ИзменениеСтрокТоварыДействие;
	УстановитьПометку("Товары", Истина);
	
	ЗаполнитьСписокДействий("Услуги");
	ГрупповоеИзменениеСтрокСервер.ПриСозданииНаСервере(НаборЭлементовГрупповогоИзмененияСтрокСервер("Услуги"), ЭтотОбъект.ИзменениеСтрокУслугиДействие);
	ИзменениеСтрокУслугиДействиеПриОткрытии = ИзменениеСтрокУслугиДействие;
	УстановитьПометку("Услуги", Истина);
	// Конец ГрупповоеИзменениеСтрок
	
	// КопированиеСтрокТабличныхЧастей
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСервере(Элементы, "Товары");
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСервере(Элементы, "Услуги");
	// Конец КопированиеСтрокТабличныхЧастей
	
	// РаботаСФормами
	РаботаСФормамиСервер.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом 
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьТекущуюСтраницу();
	ОбновитьПодвалФормы();
	         
	УстановитьФорматЦены();
	
	// ГрупповоеИзменениеСтрок
	ОпределитьОбъектИзменений("Товары");
	ОпределитьОбъектИзменений("Услуги");
	// Конец ГрупповоеИзменениеСтрок

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	Если ИспользоватьПодключаемоеОборудование Тогда 
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	КонецЕсли;	
	// Конец ПодключаемоеОборудование
КонецПроцедуры

// Процедура - обработчик события ПриЗакрытии.
//
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		// ГрупповоеИзменениеСтрок
		СохранитьТекущееДействиеИзмененияСтрок();
		// Конец ГрупповоеИзменениеСтрок
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если ИспользоватьПодключаемоеОборудование Тогда 
		МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	КонецЕсли;	
	// Конец ПодключаемоеОборудование
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ПодборНоменклатурыПроизведен" 
		И ТипЗнч(Параметр) = Тип("Структура")
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор Тогда
		
		АдресЗапасовВХранилище = Параметр.АдресЗапасовВХранилище;
		ПолучитьТоварыИзХранилища(АдресЗапасовВХранилище, "Товары");
		
		ОбновитьПодвалФормы();
	Иначе 
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Товары");
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Услуги");
	КонецЕсли;
	// Конец КопированиеСтрокТабличныхЧастей

	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			// Преобразуем предварительно к ожидаемому формату.
			Если Параметр[1] = Неопределено Тогда
				ТекШтрихкод = Параметр[0]; // Достаем штрихкод из основных данных
			Иначе
				ТекШтрихкод = Параметр[1][1]; // Достаем штрихкод из дополнительных данных
			КонецЕсли;
			
			Если НЕ Элементы.Товары.ТекущиеДанные = Неопределено
				И Элементы.Товары.ТекущийЭлемент.Имя = "ТоварыКодМаркировки" Тогда
				
				ТекШтрихкод = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ТекШтрихкод, "");
					
				Если Объект.Товары.НайтиСтроки(Новый Структура("КодМаркировки", ТекШтрихкод)).Количество() > 0 Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Код маркировки %1 уже считан.'"), ТекШтрихкод);
					ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
					Возврат;	
				КонецЕсли;
				
				Элементы.Товары.ТекущиеДанные.КодМаркировки = ТекШтрихкод;	
			Иначе	
				Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаТовары Тогда
					ПоискПоШтрихкодуЗавершение(ТекШтрихкод, Новый Структура("ТекШтрихкод, ИмяТабличнойЧасти", ТекШтрихкод, "Товары"));
				ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУслуги Тогда
					ПоискПоШтрихкодуЗавершение(ТекШтрихкод, Новый Структура("ТекШтрихкод, ИмяТабличнойЧасти", ТекШтрихкод, "Услуги"));
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = КассовыеСменыКлиентБП.СобытиеВыполняетсяОперацияКассовойСмены() Тогда
		Доступность = Ложь;
	ИначеЕсли ИмяСобытия = КассовыеСменыКлиентБП.СобытиеЗавершиласьОперацияКассовойСмены() Тогда
		Доступность = Истина;
	ИначеЕсли ИмяСобытия = "ОбновитьБаннеры_РозничнаяТорговля" Тогда
		Элементы.ГруппаБаннерОткрытьСмену.Видимость = ОтображатьБаннерОткрытияСмены(Объект.Ссылка, ИспользуетсяФискальныйРегистратор);
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	// ГрупповоеИзменениеСтрок
	Если Элементы.ГруппаИзменениеСтрокТовары.Видимость Тогда
		УстановитьПометку("Товары", Истина);
	КонецЕсли;
	Если Элементы.ГруппаИзменениеСтрокУслуги.Видимость Тогда
		УстановитьПометку("Услуги", Истина);
	КонецЕсли;
	// Конец ГрупповоеИзменениеСтрок
	
	// РаботаСФормами
	РаботаСФормамиСервер.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчета.ПослеЗаписиНаСервере(ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьЧек" Тогда
		СтандартнаяОбработка =Ложь;
		
		КлючЗаписи = ДанныеФискальнойОперации(Объект.Ссылка);
		Если КлючЗаписи <> Неопределено Тогда
		
			ПараметрыОткрытия = Новый Структура("Ключ", КлючЗаписи);
			
			ОткрытьФорму("РегистрСведений.ФискальныеОперации.ФормаЗаписи", ПараметрыОткрытия, ЭтотОбъект);
		
		КонецЕсли; 
	
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением, Объект.ВалютаДокумента);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
		
		ОбработатьИзменениеУчетнойПолитики();
	КонецЕсли;
	
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);	
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Объект.Номер = "";

	ОбработатьИзменениеУчетнойПолитики();
	ЗаполнитьПараметрыРозничнойПродажи();

	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении флага Безналичный расчет.
//
&НаКлиенте
Процедура БезналичныйРасчетПриИзменении()
	
	Если НЕ Объект.БезналичныйРасчет Тогда 
		Объект.ВидОплаты = ПредопределенноеЗначение("Справочник.ВидыОплатОрганизаций.ПустаяСсылка");
	КонецЕсли;	
	
	// Товары
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Товары");	
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(Объект, ПараметрыРасчета);
	
	// Услуги
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Услуги");
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(Объект, ПараметрыРасчета);
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();

	ОбновитьПодвалФормы();	
	
КонецПроцедуры

&НаКлиенте
Процедура КассаПриИзменении(Элемент)
	ЗаполнитьПараметрыРозничнойПродажи();
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля выбора Точность цены.
//
&НаКлиенте
Процедура ТочностьЦеныПриИзменении(Элемент)
	УстановитьФорматЦены();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Процедура - обработчик события ПередНачаломДобавления таблицы Товары.
//
&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда 
		ИтогВсего = Объект.Товары.Итог("Всего") + Объект.Услуги.Итог("Всего") + Элемент.ТекущиеДанные.Всего;
		ИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС") + Элемент.ТекущиеДанные.СуммаНДС;
		ИтогСуммаНСП = Объект.Товары.Итог("СуммаНСП") + Объект.Услуги.Итог("СуммаНСП") + Элемент.ТекущиеДанные.СуммаНСП;
		
		ИтогСуммаКОплате = ИтогВсего;
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования таблицы Товары.
//
&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	// ГрупповоеИзменениеСтрок
	Элемент.ТекущиеДанные.Пометка = Истина;
	// Конец ГрупповоеИзменениеСтрок
КонецПроцедуры

// Процедура - обработчик события ПередОкончаниемРедактирования таблицы Товары.
//
&НаКлиенте
Процедура ТоварыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	// Маркировка
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВестиУчетМаркировкиПродукции Тогда 
		ЗаполнитьИндексМарки(СтрокаТабличнойЧасти);
	КонецЕсли;	
	// Конец Маркировка
КонецПроцедуры

// Процедура - обработчик события ПослеУдаления таблицы Товары.
//
&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ОбработатьИзменениеНоменклатуры(СтрокаТабличнойЧасти, "Товары");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Количество.
//
&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
					
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Товары");					
					
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	Иначе	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЕсли;	
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
	КонецЕсли;	
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ТоварыЦена.
//
&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
					
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Товары");					
					
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	Иначе		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЕсли;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
	КонецЕсли;	

	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Товары");
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета,
		?(УказыватьТочностьЦены, Объект.ТочностьЦены, 2));
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаДохода1ПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Товары", Истина);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);	
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета,
		?(УказыватьТочностьЦены, Объект.ТочностьЦены, 2));
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	
	// После расчета Всего и налогов переСчет доходов, чтобы исключить разницу в копейки.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
	
	ОбновитьПодвалФормы();	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Товары");
	
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	Иначе
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);	
	КонецЕсли;	
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНСППриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Товары");
	
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	Иначе
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);	
	КонецЕсли;	
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

// Процедура - обработчик события ПередНачаломДобавления таблицы Услуги.
//
&НаКлиенте
Процедура УслугиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда 
		ИтогВсего = Объект.Товары.Итог("Всего") + Объект.Услуги.Итог("Всего") + Элемент.ТекущиеДанные.Всего;
		ИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС") + Элемент.ТекущиеДанные.СуммаНДС;
		ИтогСуммаНСП = Объект.Товары.Итог("СуммаНСП") + Объект.Услуги.Итог("СуммаНСП") + Элемент.ТекущиеДанные.СуммаНСП;
		
		ИтогСуммаКОплате = ИтогВсего;
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования таблицы Услуги.
//
&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	// ГрупповоеИзменениеСтрок
	Элемент.ТекущиеДанные.Пометка = Истина;
	// Конец ГрупповоеИзменениеСтрок
КонецПроцедуры

// Процедура - обработчик события ПослеУдаления таблицы Услуги.
//
&НаКлиенте
Процедура УслугиПослеУдаления(Элемент)
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	ОбработатьИзменениеНоменклатуры(СтрокаТабличнойЧасти, "Услуги");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Количество.
//
&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
					
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Услуги");					
					
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	Иначе		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЕсли;
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
	КонецЕсли;	
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода УслугиЦена.
//
&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
					
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Услуги");					
					
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	Иначе	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЕсли;
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
	КонецЕсли;	
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Услуги");
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета,
		?(УказыватьТочностьЦены, Объект.ТочностьЦены, 2));
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);	
	
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаДохода1ПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Услуги", Истина);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);	
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета,
		?(УказыватьТочностьЦены, Объект.ТочностьЦены, 2));
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	
	// После расчета Всего и налогов переСчет доходов, чтобы исключить разницу в копейки.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
	
	ОбновитьПодвалФормы();		
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНСППриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Услуги");
	
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	Иначе
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);	
	КонецЕсли;	
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьКассовуюСмену(Команда)
	
	Если Не УправлениеКассовойСменойДоступно Тогда
		ПоказатьПредупреждение( , НСтр("ru='Недостаточно прав для выполнения операции'"));
	Иначе
		ОчиститьСообщения();
		КассовыеСменыКлиентБП.ВыполнитьОперацию(УникальныйИдентификатор, "ОткрытьСмену");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьОплату(Команда)
	
	Если ЗначениеЗаполнено(Объект.НомерЧекаККМ) Тогда
		ТекстПредупреждения = НСтр("ru = 'Чек уже фискализирован на фискальном устройстве'");
		ПоказатьПредупреждение(, ТекстПредупреждения, 10);
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Записать();

	ПараметрыФормыОплаты = Новый Структура;
	ПараметрыФормыОплаты.Вставить("БезналичныйРасчет", Объект.БезналичныйРасчет);
	ПараметрыФормыОплаты.Вставить("ЭтоВозврат", (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРозничнаяПродажа.Возврат")));
	ПараметрыФормыОплаты.Вставить("СуммаДокумента", ИтогСуммаКОплате);
	
	ПараметрыКоманды = Неопределено;
	Обработчик = Новый ОписаниеОповещения("ПринятьОплатуЗавершение", ЭтотОбъект, ПараметрыКоманды);
	ОткрытьФорму("Документ.РозничнаяПродажа.Форма.ФормированиеЧека", ПараметрыФормыОплаты, ПараметрыКоманды,,,, Обработчик, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// Процедура - обработчик события действия команды Подбор в табличную часть Товары.
// Открывает форму подбора.
//
&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	РаботаСПодборомНоменклатурыКлиент.ОткрытьПодбор(ЭтаФорма, "Товары", "РозничнаяПродажа");
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Товарный чек (принтер чеков)".
//
&НаКлиенте
Процедура ПечатьТоварногоЧекаВыполнить(Команда)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект.НомерЧекаККМ) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПечатьТоварногоЧекаВыполнить_ПолучениеШириныСтроки", ЭтотОбъект);  
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПолучениеШириныСтрокиПечатающегоУстройства(ОписаниеОповещения, УникальныйИдентификатор); 
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Перед печатью товарного чека необходимо пробить чек.'");
		ПоказатьПредупреждение(, ТекстПредупреждения, 10);
	КонецЕсли;
	
КонецПроцедуры

// ПодключаемоеОборудование
&НаКлиенте
Процедура ПоискПоШтрихкодуТовары(Команда)
	
	ТекШтрихкод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", 
		ЭтотОбъект, Новый Структура("ТекШтрихкод, ИмяТабличнойЧасти", ТекШтрихкод, "Товары")), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
		
КонецПроцедуры
	
&НаКлиенте
Процедура ПоискПоШтрихкодуУслуги(Команда)
	
	ТекШтрихкод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", 
		ЭтотОбъект, Новый Структура("ТекШтрихкод, ИмяТабличнойЧасти", ТекШтрихкод, "Услуги")), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));

КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ТекШтрихкод = ?(Результат = Неопределено, ДополнительныеПараметры.ТекШтрихкод, Результат);
    
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
        ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1), ДополнительныеПараметры.ИмяТабличнойЧасти);
	КонецЕсли;	

КонецПроцедуры 
// Конец ПодключаемоеОборудование

#КонецОбласти

#Область ИзменениеСтрок

#Область ИзменениеСтрокТовары

&НаКлиенте
Процедура ИзменениеСтрокТоварыИзменитьСтроки(Команда)
	ПоказатьСкрытьПанельРедактирования("Товары", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокТоварыСнятьФлажки(Команда)
	УстановитьПометку("Товары", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокТоварыУстановитьФлажки(Команда)
	УстановитьПометку("Товары", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокТоварыДействиеПриИзменении(Элемент)
	ОпределитьОбъектИзменений("Товары");
	НастроитьОформлениеПанелиРедактирования("Товары", 2);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокТоварыЗначениеПриИзменении(Элемент)
	НастроитьОформлениеПанелиРедактирования("Товары", 3);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокТоварыВыполнитьДействие(Команда)
	ОбработатьТаблицу("Товары");
	НастроитьОформлениеПанелиРедактирования("Товары", 4);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокТоварыОтменитьИзменения(Команда)
	ПоказатьСкрытьПанельРедактирования("Товары");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПометкаПриИзменении(Элемент)
	ГрупповоеИзменениеСтрокКлиент.СтрокаПометкаПриИзменении(Объект.Товары, Элементы.ИзменениеСтрокТоварыУстановитьФлажки, Элементы.ИзменениеСтрокТоварыСнятьФлажки);
КонецПроцедуры

#КонецОбласти

#Область ИзменениеСтрокУслуги

&НаКлиенте
Процедура ИзменениеСтрокУслугиИзменитьСтроки(Команда)
	ПоказатьСкрытьПанельРедактирования("Услуги", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокУслугиСнятьФлажки(Команда)
	УстановитьПометку("Услуги", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокУслугиУстановитьФлажки(Команда)
	УстановитьПометку("Услуги", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокУслугиДействиеПриИзменении(Элемент)
	ОпределитьОбъектИзменений("Услуги");
	НастроитьОформлениеПанелиРедактирования("Услуги", 2);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокУслугиЗначениеПриИзменении(Элемент)
	НастроитьОформлениеПанелиРедактирования("Услуги", 3);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокУслугиВыполнитьДействие(Команда)
	ОбработатьТаблицу("Услуги");
	НастроитьОформлениеПанелиРедактирования("Услуги", 4);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокУслугиОтменитьИзменения(Команда)
	ПоказатьСкрытьПанельРедактирования("Услуги");
КонецПроцедуры

&НаКлиенте
Процедура УслугиПометкаПриИзменении(Элемент)
	ГрупповоеИзменениеСтрокКлиент.СтрокаПометкаПриИзменении(Объект.Услуги, Элементы.ИзменениеСтрокУслугиУстановитьФлажки, Элементы.ИзменениеСтрокУслугиСнятьФлажки);
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьСписокДействий(ИмяТЧ)
	
	Если ИмяТЧ = "Товары" Тогда
		
		Действия = Новый Массив;
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки);
		
		Элементы.ИзменениеСтрокТоварыДействие.СписокВыбора.Очистить();
		Для каждого Действие Из Действия Цикл
			ДействиеОписание = ГрупповоеИзменениеСтрокСервер.ПредставлениеДействия(Действие);
			Элементы.ИзменениеСтрокТоварыДействие.СписокВыбора.Добавить(Действие, ДействиеОписание);
		КонецЦикла;
		
	ИначеЕсли ИмяТЧ = "Услуги" Тогда
		
		Действия = Новый Массив;
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки);
		
		Элементы.ИзменениеСтрокУслугиДействие.СписокВыбора.Очистить();
		Для каждого Действие Из Действия Цикл
			ДействиеОписание = ГрупповоеИзменениеСтрокСервер.ПредставлениеДействия(Действие);
			Элементы.ИзменениеСтрокУслугиДействие.СписокВыбора.Добавить(Действие, ДействиеОписание);
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСкрытьПанельРедактирования(ИмяТЧ, ИзменяетДанные = Неопределено)
	
	Перем СостояниеПерехода;
	ГрупповоеИзменениеСтрокСервер.ПоказатьСкрытьПанельРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ),
		СостояниеПерехода,
		ИзменяетДанные);
	
	УправлениеРезервнымиКопиямиТаблицы(ИмяТЧ, СостояниеПерехода, ИзменяетДанные);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеРезервнымиКопиямиТаблицы(ИмяТЧ, СостояниеПерехода, ИзменяетДанные)
	
	Если ИмяТЧ = "Товары" Тогда
		РеквизитРезервнаяКопияТаблицыАдрес = "ИзменениеСтрокТоварыРезервнаяКопияТаблицыАдрес";
	ИначеЕсли ИмяТЧ = "Услуги" Тогда
		РеквизитРезервнаяКопияТаблицыАдрес = "ИзменениеСтрокУслугиРезервнаяКопияТаблицыАдрес";
	КонецЕсли;
	
	ГрупповоеИзменениеСтрокСервер.УправлениеРезервнымиКопиями(
		ЭтотОбъект,
		Объект[ИмяТЧ],
		ЭтотОбъект[РеквизитРезервнаяКопияТаблицыАдрес],
		СостояниеПерехода,
		ИзменяетДанные);
	
КонецПроцедуры

&НаКлиенте
Функция НаборЭлементовГрупповогоИзмененияСтрокКлиент(ИмяТЧ)
	
	Если ИмяТЧ = "Товары" Тогда
		
		НаборЭлементов = Новый Структура();
		НаборЭлементов.Вставить("ИмяТЧ", "Товары");
		НаборЭлементов.Вставить("ДокументСсылка",          Объект.Ссылка);
		НаборЭлементов.Вставить("ПанельРедактирования",    Элементы.ГруппаИзменениеСтрокТовары);
		НаборЭлементов.Вставить("КнопкаУстановитьФлажки",  Элементы.ИзменениеСтрокТоварыУстановитьФлажки);
		НаборЭлементов.Вставить("КнопкаСнятьФлажки",       Элементы.ИзменениеСтрокТоварыСнятьФлажки);
		НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ИзменениеСтрокТоварыВыполнитьДействие);
		НаборЭлементов.Вставить("КолонкаПометка",          Элементы.ТоварыПометка);
		НаборЭлементов.Вставить("КолонкаНомерСтроки",      Элементы.ТоварыНомерСтроки);
		НаборЭлементов.Вставить("Действие",                ЭтотОбъект.ИзменениеСтрокТоварыДействие);
		НаборЭлементов.Вставить("ДействиеЭлемент",         Элементы.ИзменениеСтрокТоварыДействие);
		НаборЭлементов.Вставить("Значение",                ЭтотОбъект.ИзменениеСтрокТоварыЗначение);
		НаборЭлементов.Вставить("ЗначениеЭлемент",         Элементы.ИзменениеСтрокТоварыЗначение);
		НаборЭлементов.Вставить("ОбъектИзменений",         ИзменениеСтрокТоварыОбъектИзмененийЭлемент);
		НаборЭлементов.Вставить("КолонкаОбъектИзменений",  ?(ЗначениеЗаполнено(ИзменениеСтрокТоварыОбъектИзмененийЭлемент), 
		                                                     Элементы[ИзменениеСтрокТоварыОбъектИзмененийЭлемент], Неопределено));
	ИначеЕсли ИмяТЧ = "Услуги" Тогда
		
		НаборЭлементов = Новый Структура();
		НаборЭлементов.Вставить("ИмяТЧ", "Услуги");
		НаборЭлементов.Вставить("ДокументСсылка",          Объект.Ссылка);
		НаборЭлементов.Вставить("ПанельРедактирования",    Элементы.ГруппаИзменениеСтрокУслуги);
		НаборЭлементов.Вставить("КнопкаУстановитьФлажки",  Элементы.ИзменениеСтрокУслугиУстановитьФлажки);
		НаборЭлементов.Вставить("КнопкаСнятьФлажки",       Элементы.ИзменениеСтрокУслугиСнятьФлажки);
		НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ИзменениеСтрокУслугиВыполнитьДействие);
		НаборЭлементов.Вставить("КолонкаПометка",          Элементы.УслугиПометка);
		НаборЭлементов.Вставить("КолонкаНомерСтроки",      Элементы.УслугиНомерСтроки);
		НаборЭлементов.Вставить("Действие",                ЭтотОбъект.ИзменениеСтрокУслугиДействие);
		НаборЭлементов.Вставить("ДействиеЭлемент",         Элементы.ИзменениеСтрокУслугиДействие);
		НаборЭлементов.Вставить("Значение",                ЭтотОбъект.ИзменениеСтрокУслугиЗначение);
		НаборЭлементов.Вставить("ЗначениеЭлемент",         Элементы.ИзменениеСтрокУслугиЗначение);
		НаборЭлементов.Вставить("ОбъектИзменений",         ИзменениеСтрокУслугиОбъектИзмененийЭлемент);
		НаборЭлементов.Вставить("КолонкаОбъектИзменений",  ?(ЗначениеЗаполнено(ИзменениеСтрокУслугиОбъектИзмененийЭлемент), 
		                                                     Элементы[ИзменениеСтрокУслугиОбъектИзмененийЭлемент], Неопределено));
	КонецЕсли;
	
	Возврат НаборЭлементов;
	
КонецФункции

&НаСервере
Функция НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ)
	
	Если ИмяТЧ = "Товары" Тогда
		
		НаборЭлементов = Новый Структура();
		НаборЭлементов.Вставить("ИмяТЧ", "Товары");
		НаборЭлементов.Вставить("ДокументСсылка",          Объект.Ссылка);
		НаборЭлементов.Вставить("ПанельРедактирования",    Элементы.ГруппаИзменениеСтрокТовары);
		НаборЭлементов.Вставить("КнопкаУстановитьФлажки",  Элементы.ИзменениеСтрокТоварыУстановитьФлажки);
		НаборЭлементов.Вставить("КнопкаСнятьФлажки",       Элементы.ИзменениеСтрокТоварыСнятьФлажки);
		НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ИзменениеСтрокТоварыВыполнитьДействие);
		НаборЭлементов.Вставить("КолонкаПометка",          Элементы.ТоварыПометка);
		НаборЭлементов.Вставить("КолонкаНомерСтроки",      Элементы.ТоварыНомерСтроки);
		НаборЭлементов.Вставить("Действие",                ЭтотОбъект.ИзменениеСтрокТоварыДействие);
		НаборЭлементов.Вставить("ДействиеЭлемент",         Элементы.ИзменениеСтрокТоварыДействие);
		НаборЭлементов.Вставить("Значение",                ЭтотОбъект.ИзменениеСтрокТоварыЗначение);
		НаборЭлементов.Вставить("ЗначениеЭлемент",         Элементы.ИзменениеСтрокТоварыЗначение);
		НаборЭлементов.Вставить("ОбъектИзменений",         ИзменениеСтрокТоварыОбъектИзмененийЭлемент);
		НаборЭлементов.Вставить("КолонкаОбъектИзменений",  ?(ЗначениеЗаполнено(ИзменениеСтрокТоварыОбъектИзмененийЭлемент), 
		                                                     Элементы[ИзменениеСтрокТоварыОбъектИзмененийЭлемент], Неопределено));
	ИначеЕсли ИмяТЧ = "Услуги" Тогда
		
		НаборЭлементов = Новый Структура();
		НаборЭлементов.Вставить("ИмяТЧ", "Услуги");
		НаборЭлементов.Вставить("ДокументСсылка",          Объект.Ссылка);
		НаборЭлементов.Вставить("ПанельРедактирования",    Элементы.ГруппаИзменениеСтрокУслуги);
		НаборЭлементов.Вставить("КнопкаУстановитьФлажки",  Элементы.ИзменениеСтрокУслугиУстановитьФлажки);
		НаборЭлементов.Вставить("КнопкаСнятьФлажки",       Элементы.ИзменениеСтрокУслугиСнятьФлажки);
		НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ИзменениеСтрокУслугиВыполнитьДействие);
		НаборЭлементов.Вставить("КолонкаПометка",          Элементы.УслугиПометка);
		НаборЭлементов.Вставить("КолонкаНомерСтроки",      Элементы.УслугиНомерСтроки);
		НаборЭлементов.Вставить("Действие",                ЭтотОбъект.ИзменениеСтрокУслугиДействие);
		НаборЭлементов.Вставить("ДействиеЭлемент",         Элементы.ИзменениеСтрокУслугиДействие);
		НаборЭлементов.Вставить("Значение",                ЭтотОбъект.ИзменениеСтрокУслугиЗначение);
		НаборЭлементов.Вставить("ЗначениеЭлемент",         Элементы.ИзменениеСтрокУслугиЗначение);
		НаборЭлементов.Вставить("ОбъектИзменений",         ИзменениеСтрокУслугиОбъектИзмененийЭлемент);
		НаборЭлементов.Вставить("КолонкаОбъектИзменений",  ?(ЗначениеЗаполнено(ИзменениеСтрокУслугиОбъектИзмененийЭлемент), 
		                                                     Элементы[ИзменениеСтрокУслугиОбъектИзмененийЭлемент], Неопределено));
	КонецЕсли;
	
	Возврат НаборЭлементов;
	
КонецФункции

&НаСервере
Процедура УстановитьПометку(ИмяТЧ, Пометка)
	
	НаборЭлементов = НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ);
	НаборЭлементов.КнопкаСнятьФлажки.Видимость = НЕ НаборЭлементов.КнопкаСнятьФлажки.Видимость;
	НаборЭлементов.КнопкаУстановитьФлажки.Видимость = НЕ НаборЭлементов.КнопкаУстановитьФлажки.Видимость;
	
	Для каждого Строка Из Объект[НаборЭлементов.ИмяТЧ] Цикл
		Строка.Пометка = Пометка;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьОбъектИзменений(ИмяТЧ)
	
	Если ИмяТЧ = "Товары" Тогда
		
		Если ИзменениеСтрокТоварыДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству") Тогда
			
			ИзменениеСтрокТоварыОбъектИзмененийРеквизит = "Сумма";
			ИзменениеСтрокТоварыОбъектИзмененийЭлемент = "ТоварыСумма";
			
		ИначеЕсли ИзменениеСтрокТоварыДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
			
			ИзменениеСтрокТоварыОбъектИзмененийРеквизит = "Сумма";
			ИзменениеСтрокТоварыОбъектИзмененийЭлемент = "ТоварыСумма";
			
		ИначеЕсли ИзменениеСтрокТоварыДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки") Тогда
			
			ИзменениеСтрокТоварыОбъектИзмененийРеквизит = "";
			ИзменениеСтрокТоварыОбъектИзмененийЭлемент = "";
			
		КонецЕсли;
		
	ИначеЕсли ИмяТЧ = "Услуги" Тогда
		
		Если ИзменениеСтрокУслугиДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству") Тогда
			
			ИзменениеСтрокУслугиОбъектИзмененийРеквизит = "Сумма";
			ИзменениеСтрокУслугиОбъектИзмененийЭлемент = "УслугиСумма";
			
		ИначеЕсли ИзменениеСтрокУслугиДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
			
			ИзменениеСтрокУслугиОбъектИзмененийРеквизит = "Сумма";
			ИзменениеСтрокУслугиОбъектИзмененийЭлемент = "УслугиСумма";
			
		ИначеЕсли ИзменениеСтрокУслугиДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки") Тогда
			
			ИзменениеСтрокУслугиОбъектИзмененийРеквизит = "";
			ИзменениеСтрокУслугиОбъектИзмененийЭлемент = "";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОформлениеПанелиРедактирования(ИмяТЧ, Состояние, СохранитьИзменения = Неопределено)
	
	Если ИмяТЧ = "Товары" Тогда
		РеквизитЗначение = "ИзменениеСтрокТоварыЗначение";
	ИначеЕсли ИмяТЧ = "Услуги" Тогда
		РеквизитЗначение = "ИзменениеСтрокУслугиЗначение";
	КонецЕсли;
	
	Результат = ГрупповоеИзменениеСтрокКлиент.НастроитьОформлениеПанелиРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокКлиент(ИмяТЧ),
		Состояние,
		ЭтотОбъект[РеквизитЗначение]);
	
	Если Результат.Свойство("УстановитьСвязиПараметровВыбора") И Результат.УстановитьСвязиПараметровВыбора Тогда
		УстановитьСвязиПараметровВыбораДляЗначения(ИмяТЧ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвязиПараметровВыбораДляЗначения(ИмяТЧ)
	
	ГрупповоеИзменениеСтрокСервер.УстановитьСвязиПараметровВыбора(
		НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьТаблицу(ИмяТЧ)
	
	ОбработатьТаблицуНаСервере(ИмяТЧ);
	
	Если ИмяТЧ = "Товары" Тогда

		ИзменяемыеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Пометка", Истина));

		ПараметрыРасчета = ПодготовитьПараметрыРасчета(ИмяТЧ);
		
		Для каждого СтрокаТабличнойЧасти Из ИзменяемыеСтроки Цикл

			Если ИзменениеСтрокТоварыДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству")
				ИЛИ ИзменениеСтрокТоварыДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
					
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета,
					?(УказыватьТочностьЦены, Объект.ТочностьЦены, 2));
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
				
				ОбновитьПодвалФормы();		
			КонецЕсли;
		КонецЦикла;
	
	ИначеЕсли ИмяТЧ = "Услуги" Тогда

		ИзменяемыеСтроки = Объект.Услуги.НайтиСтроки(Новый Структура("Пометка", Истина));

		ПараметрыРасчета = ПодготовитьПараметрыРасчета(ИмяТЧ);
		
		Для каждого СтрокаТабличнойЧасти Из ИзменяемыеСтроки Цикл

			Если ИзменениеСтрокУслугиДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству")
				ИЛИ ИзменениеСтрокУслугиДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
					
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета,
					?(УказыватьТочностьЦены, Объект.ТочностьЦены, 2));
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
				
				ОбновитьПодвалФормы();			
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьТаблицуНаСервере(ИмяТЧ)
	
	Если ИмяТЧ = "Товары" Тогда
		
		ГрупповоеИзменениеСтрокСервер.ОбработатьТаблицу(
			ЭтотОбъект,
			Объект.Товары,
			ИзменениеСтрокТоварыДействие,
			ИзменениеСтрокТоварыОбъектИзмененийРеквизит,
			ИзменениеСтрокТоварыЗначение,
			"ТоварыНоменклатура");
			
	ИначеЕсли ИмяТЧ = "Услуги" Тогда
		
		ГрупповоеИзменениеСтрокСервер.ОбработатьТаблицу(
			ЭтотОбъект,
			Объект.Услуги,
			ИзменениеСтрокУслугиДействие,
			ИзменениеСтрокУслугиОбъектИзмененийРеквизит,
			ИзменениеСтрокУслугиЗначение,
			"УслугиНоменклатура");
			
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТекущееДействиеИзмененияСтрок()
	
	// Товары.
	СохраняемыеНастройки = "";
	
	Если ИзменениеСтрокТоварыДействие <> ИзменениеСтрокТоварыДействиеПриОткрытии Тогда
		СохраняемыеНастройки = "Товары";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СохраняемыеНастройки) Тогда
		СохранитьТекущееДействиеИзмененияСтрокСервер(СохраняемыеНастройки);
	КонецЕсли;
	
	// Услуги.
	СохраняемыеНастройки = "";
	
	Если ИзменениеСтрокУслугиДействие <> ИзменениеСтрокУслугиДействиеПриОткрытии Тогда
		СохраняемыеНастройки = "Услуги";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СохраняемыеНастройки) Тогда
		СохранитьТекущееДействиеИзмененияСтрокСервер(СохраняемыеНастройки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьТекущееДействиеИзмененияСтрокСервер(СохраняемыеНастройки)
	
	ИменаТЧ = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СохраняемыеНастройки);
	Для каждого ИмяТЧ Из ИменаТЧ Цикл
		ГрупповоеИзменениеСтрокСервер.СохранитьНастройки(НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ));
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость и доступность элементов.
//
&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()	
	
	// Чек фискализирован.
	Если ЗначениеЗаполнено(Объект.НомерЧекаККМ) Тогда 
		ЭтаФорма.ТолькоПросмотр = Истина;
		Элементы.ФормаПринятьОплату.Доступность = Ложь;
		Элементы.ТоварыПодборНоменклатуры.Доступность = Ложь;
		Элементы.ГруппаБаннерПробитЧек.Видимость = Истина;
	КонецЕсли;	          	
	
	// НДС.
	Если СтавкаНДС = Справочники.СтавкиНДС.Нулевая
		ИЛИ СтавкаНДС = Справочники.СтавкиНДС.Освобожденная
		ИЛИ СтавкаНДС = Справочники.СтавкиНДС.Необлагаемая Тогда
		Элементы.ТоварыСуммаНДС.Видимость 	= Ложь;
		Элементы.УслугиСуммаНДС.Видимость 	= Ложь;
	Иначе
		Элементы.ТоварыСуммаНДС.Видимость 	= Истина;
		Элементы.УслугиСуммаНДС.Видимость 	= Истина;
	КонецЕсли;
	
	// Суммы.
	Если Объект.СуммаВключаетНалоги Тогда
		Элементы.ТоварыСумма.Видимость 	= Истина;
		Элементы.УслугиСумма.Видимость 	= Истина;
		
		Элементы.ТоварыСуммаДохода1.Видимость = Ложь;
		Элементы.УслугиСуммаДохода1.Видимость = Ложь;
		
		Элементы.ТоварыВсего.Видимость 	= Ложь;
		Элементы.УслугиВсего.Видимость 	= Ложь;
		
		Элементы.ТоварыСуммаДохода2.Видимость = Истина;
		Элементы.УслугиСуммаДохода2.Видимость = Истина;
	Иначе
		Элементы.ТоварыСумма.Видимость 	= Ложь;
		Элементы.УслугиСумма.Видимость 	= Ложь;
		
		Элементы.ТоварыСуммаДохода1.Видимость = Истина;
		Элементы.УслугиСуммаДохода1.Видимость = Истина;
		
		Элементы.ТоварыВсего.Видимость 	= Истина;
		Элементы.УслугиВсего.Видимость 	= Истина;
		
		Элементы.ТоварыСуммаДохода2.Видимость = Ложь;
		Элементы.УслугиСуммаДохода2.Видимость = Ложь;
	КонецЕсли;	
	
	Если Объект.БезналичныйРасчет Тогда
		Элементы.ВидОплаты.Видимость = Истина;
		// Сумма НСП.
		Элементы.ТоварыСуммаНСП.Видимость = Ложь;
		Элементы.УслугиСуммаНСП.Видимость = Ложь;
		Элементы.ИтогСуммаНСП.Видимость = Ложь;
	Иначе
		Элементы.ВидОплаты.Видимость = Ложь;
		// Сумма НСП.
		Элементы.ТоварыСуммаНСП.Видимость = Истина;
		Элементы.УслугиСуммаНСП.Видимость = Истина;
		Элементы.ИтогСуммаНСП.Видимость = Истина;
	КонецЕсли;	
         
    Элементы.ГруппаБаннерОткрытьСмену.Видимость = ОтображатьБаннерОткрытияСмены(Объект.Ссылка, ИспользуетсяФискальныйРегистратор);

	Элементы.ДокументОснование.Видимость = Объект.ВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа.Возврат;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ОтображатьБаннерОткрытияСмены(Ссылка, ИспользуетсяФискальныйРегистратор)
	
	Если Не ИспользуетсяФискальныйРегистратор Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		ТипыОборудования = МенеджерОборудованияКлиентСерверБП.ТипыКонтрольноКассовойТехники();
		СписокДоступныхУстройств = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам(ТипыОборудования);
		Если СписокДоступныхУстройств.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		Для Каждого Устройство Из СписокДоступныхУстройств Цикл
			ОписаниеПоследнейСмены = КассовыеСменыВызовСервера.ОписаниеПоследнейКассовойСмены(Устройство.Ссылка);
			Если ОписаниеПоследнейСмены <> Неопределено
				И ОписаниеПоследнейСмены.Статус = Перечисления.СтатусыКассовойСмены.Открыта Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Процедура устанавливает текущую страницу при открытии формы.
//
&НаКлиенте
Процедура УстановитьТекущуюСтраницу()	
	Если Объект.Товары.Количество() > 0 Тогда 
		Возврат;
	ИначеЕсли Объект.Услуги.Количество() > 0 Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаУслуги;
	КонецЕсли;	
КонецПроцедуры

// Процедура устанавливает функциональные опции формы документа.
//
&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма, Объект.Организация, ДатаДокумента);
КонецПроцедуры

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением, ВалютаДокумента)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаКлиенте
Процедура ОбработатьИзменениеУчетнойПолитики()	
	
	НовыеДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	
	Если НЕ ДанныеУчетнойПолитики = НовыеДанныеУчетнойПолитики Тогда 
		ДанныеУчетнойПолитики = НовыеДанныеУчетнойПолитики;
	КонецЕсли;	
	
КонецПроцедуры

// Процедура - обработчик подбора товаров.
//
&НаСервере
Процедура ПолучитьТоварыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти)
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	СтавкаНСП = ?(ИмяТабличнойЧасти = "Товары", ДанныеУчетнойПолитики.СтавкаНСПРеализацииТовары, ДанныеУчетнойПолитики.СтавкаНСПРеализацииУслуги);
					
	ПараметрыРасчета = ПодготовитьПараметрыРасчета(ИмяТабличнойЧасти);					
					
	Для Каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура, СчетУчета", СтрокаЗагрузки.Номенклатура, СтрокаЗагрузки.СчетУчета));
		
		Если НайденныеСтроки.Количество() > 0 Тогда 
			Продолжить;
		КонецЕсли;	
		
		СтрокаТабличнойЧасти = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаЗагрузки);
		
		СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("Дата", ДатаДокумента);
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("Склад", Объект.Склад);
		СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНалоги", Объект.СуммаВключаетНалоги);
		СтруктураДанные.Вставить("СтавкаНДС", СтавкаНДС);
		СтруктураДанные.Вставить("СтавкаНСП", СтавкаНСП);
		СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанные.Вставить("ТочностьЦены", Объект.ТочностьЦены);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные, ДанныеУчетнойПолитики.ПлательщикНСП);

		// Заполнение по данным номенклатуры
		// Цена переносится из подбора.
		СтрокаТабличнойЧасти.СчетДоходов = СтруктураДанные.СчетДоходов;
		СтрокаТабличнойЧасти.СчетСебестоимости = СтруктураДанные.СчетРасходов;
		СтрокаТабличнойЧасти.СтатьяДоходов = СтруктураДанные.СтатьяДоходов;
		СтрокаТабличнойЧасти.СтатьяРасходов = СтруктураДанные.СтатьяРасходов;
		
		СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		СтрокаТабличнойЧасти.СтавкаНСП = СтруктураДанные.СтавкаНСП;

		// Маркировка
		Если ВестиУчетМаркировкиПродукции Тогда 
			ЗаполнитьИндексМарки(СтрокаТабличнойЧасти);
		КонецЕсли;	
		// Конец Маркировка
		
		// Расчет суммы
		Если Объект.СуммаВключаетНалоги Тогда
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		Иначе		
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
		КонецЕсли;
			
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		
		Если Объект.СуммаВключаетНалоги Тогда
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры // ПолучитьТоварыИзХранилища()

&НаКлиенте
Процедура ОбработатьИзменениеНоменклатуры(СтрокаТабличнойЧасти, ИмяТабличнойЧасти)
	
	СтавкаНСП = ?(ИмяТабличнойЧасти = "Товары", ДанныеУчетнойПолитики.СтавкаНСПРеализацииТовары, ДанныеУчетнойПолитики.СтавкаНСПРеализацииУслуги);
		
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Дата", ДатаДокумента);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Склад", Объект.Склад);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("СуммаВключаетНалоги", Объект.СуммаВключаетНалоги);
	СтруктураДанные.Вставить("СтавкаНДС", СтавкаНДС);
	СтруктураДанные.Вставить("СтавкаНСП", СтавкаНСП);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("ТочностьЦены", Объект.ТочностьЦены);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные, ДанныеУчетнойПолитики.ПлательщикНСП);

	// Заполнение по данным номенклатуры
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.СчетДоходов = СтруктураДанные.СчетДоходов;
	СтрокаТабличнойЧасти.СтатьяДоходов = СтруктураДанные.СтатьяДоходов;
	
	Если ИмяТабличнойЧасти = "Товары" Тогда 
		СтрокаТабличнойЧасти.СчетУчета = СтруктураДанные.СчетУчета;
		СтрокаТабличнойЧасти.СчетСебестоимости = СтруктураДанные.СчетРасходов;
		СтрокаТабличнойЧасти.СтатьяРасходов = СтруктураДанные.СтатьяРасходов;
		
		// Маркировка
		Если ВестиУчетМаркировкиПродукции Тогда 
			ЗаполнитьИндексМарки(СтрокаТабличнойЧасти);
		КонецЕсли;	
		// Конец Маркировка
		
	ИначеЕсли ИмяТабличнойЧасти = "Услуги" Тогда
		СтрокаТабличнойЧасти.ДополнительныеСведения = НаименованиеУслуги(СтрокаТабличнойЧасти.Номенклатура);
	КонецЕсли;	
	
	СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
	СтрокаТабличнойЧасти.СтавкаНСП = СтруктураДанные.СтавкаНСП;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета(ИмяТабличнойЧасти);
	
	// Расчет суммы
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	Иначе		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЕсли;
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
	КонецЕсли;	
	
	ОбновитьПодвалФормы();
КонецПроцедуры	

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные, ПлательщикНСП)
	
	// Счета учета
	СчетаУчетаНоменклатуры = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(СтруктураДанные.Организация, СтруктураДанные.Номенклатура);
	СтруктураДанные.Вставить("СчетУчета", СчетаУчетаНоменклатуры.СчетУчета);
	СтруктураДанные.Вставить("СчетДоходов", СчетаУчетаНоменклатуры.СчетДоходов);
	СтруктураДанные.Вставить("СчетРасходов", СчетаУчетаНоменклатуры.СчетРасходов);
	СтруктураДанные.Вставить("СтатьяДоходов", СчетаУчетаНоменклатуры.СтатьяДоходов);
	СтруктураДанные.Вставить("СтатьяРасходов", СчетаУчетаНоменклатуры.СтатьяРасходов);
	
	// Ставка НСП.
	Если СтруктураДанные.Свойство("СтавкаНСП")
		И ЗначениеЗаполнено(СтруктураДанные.Номенклатура.СтавкаНСП) 
		И ПлательщикНСП Тогда 
		СтруктураДанные.СтавкаНСП = СтруктураДанные.Номенклатура.СтавкаНСП;
	КонецЕсли;	

	// Цены 
	СтруктураДанные.Вставить("ТипЦен", СтруктураДанные.Склад.ТипЦенРозничнойТорговли);
	Цена = Ценообразование.ПолучитьЦенуНоменклатуры(СтруктураДанные);
	// Цены документов
	Если Цена = 0 Тогда
		СтруктураДанные.Вставить("ЗначениеСтавкиНДС", УчетНДС.ПолучитьСтавкуНДС(СтруктураДанные.Дата, СтруктураДанные.СтавкаНДС));
		СтруктураДанные.Вставить("ЗначениеСтавкиНСП", УчетНДС.ПолучитьСтавкуНСП(СтруктураДанные.Дата, СтруктураДанные.Организация, СтруктураДанные.СтавкаНСП));
		СтруктураДанные.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
		Цена = Ценообразование.ПолучитьЦенуПоДокументам(СтруктураДанные);
	КонецЕсли;	
	СтруктураДанные.Вставить("Цена", Цена);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Получает наименование Услуги
//
&НаСервереБезКонтекста
Функция НаименованиеУслуги(Номенклатура)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "НаименованиеПолное");
КонецФункции 

// Процедура рассчитывает итоги для подвала формы.
//
&НаКлиенте
Процедура ОбновитьПодвалФормы()
	
	ИтогВсего = Объект.Товары.Итог("Всего") + Объект.Услуги.Итог("Всего");
	ИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС");
	ИтогСуммаНСП = Объект.Товары.Итог("СуммаНСП") + Объект.Услуги.Итог("СуммаНСП");
	
	ИтогСуммаКОплате = ИтогВсего;
	
КонецПроцедуры // ОбновитьПодвалФормы()

// Процедура заполняет список выбора Точность цены
//
&НаСервере
Процедура ЗаполнитьСписокВыбораТочностьЦены()

	Элементы.ТочностьЦены.СписокВыбора.Очистить();

	ЗначенияТочностиЦены = Ценообразование.ЗначенияТочностиЦены();
	Для Каждого ЗначениеТочностиЦены Из ЗначенияТочностиЦены Цикл 
		Элементы.ТочностьЦены.СписокВыбора.Добавить(ЗначениеТочностиЦены.Значение, ЗначениеТочностиЦены.Представление);
	КонецЦикла;	

КонецПроцедуры // ЗаполнитьСписокВыбораТочностьЦены()

// Процедура устанавливает формат и формат редактирования элементов "Цена" в ТЧ "Товары" и "Услуги"
//
&НаКлиенте
Процедура УстановитьФорматЦены()

	ФорматЦены = ЦенообразованиеКлиент.ФорматЦены(Объект.ТочностьЦены);
	
	Элементы.ТоварыЦена.ФорматРедактирования = ФорматЦены;
	Элементы.ТоварыЦена.Формат = ФорматЦены;
	Элементы.Товары.Обновить();

	Элементы.УслугиЦена.ФорматРедактирования = ФорматЦены;
	Элементы.УслугиЦена.Формат = ФорматЦены;
	Элементы.Услуги.Обновить();
	
КонецПроцедуры

// Подготовка параметров для расчетов
//
// Параметры:
//	ИмяТабличнойЧасти - Строка - наименование табличной части
//	СчитатьОтДохода - Булево - признак того, что расчет необходимо делать от реквизита "Доход"
//
// Возвращаемое значение:
//	Структура - разделенные данные URI
//		*Период - Дата - дата документа
//		*Организация - СправочникСсылка.Организации - организация документа
//		*ПризнакСтраныЕАЭС - Булево - признак страны ЕАЭС или нет
//		*ПризнакСтраныИмпортЭкспорт - Булево - признак страны ИмпортЭкспорт или нет
//		*СуммаВключаетНалоги - Булево - сумма включает налоги или нет
//		*БезналичныйРасчет - Булево - признак безначличного расчета
//		*СчитатьОтДохода - Булево - признак того, что расчет необходимо делать от реквизита "Доход"
//		*ИмяТабличнойЧасти - Строка - наименование табличной части
//		*Точность - Булево - точность цены (количество знаков цены после запятой)
//		*СтавкаНДС - СправочникСсылка.СтавкиНДС - ставка НДС
//
&НаСервере
Функция ПодготовитьПараметрыРасчета(ИмяТабличнойЧасти, СчитатьОтДохода = Ложь)

	Документ = РеквизитФормыВЗначение("Объект");
	ПараметрыРасчета = Документ.ПодготовитьПараметрыРасчета(ИмяТабличнойЧасти, ДанныеУчетнойПолитики, 
						СчитатьОтДохода, УказыватьТочностьЦены);
	
	Возврат ПараметрыРасчета;
КонецФункции

&НаСервере
Процедура ЗаполнитьПараметрыРозничнойПродажи()
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьПоПараметрамРозничнойПродажи(Объект.Организация, Объект.Касса);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	ПараметрыРозничнойПродажи = КассовыеСменыВызовСервераБП.ПараметрыРозничныхПродаж(Объект.Организация, Объект.Касса);
	СтавкаНДС = ?(ДанныеУчетнойПолитики.ПлательщикНДС, ПараметрыРозничнойПродажи.ДоговорКонтрагента.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка"));
	
	Модифицированность = Истина;
КонецПроцедуры // ЗаполнитьПараметрыРозничнойПродажи()

&НаСервереБезКонтекста
Процедура ОбновитьПараметрыРозничнойПродажи(Организация, ПараметрыРозничнойПродажи)
	РегистрыСведений.ПараметрыРозничныхПродаж.ОбновитьПараметры(Организация, ПараметрыРозничнойПродажи);
КонецПроцедуры // ОбновитьПараметрыРозничнойПродажи()

// Процедура - Установить пиктограмму комментария.
//
&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

&НаСервере
Функция СписокОборудованияПечатьЧека(РабочееМесто)
	МассивТиповОборудования = Новый Массив;
	МассивТиповОборудования.Добавить(ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ФискальныйРегистратор"));
	МассивТиповОборудования.Добавить(ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ПринтерЧеков"));
	Возврат СписокОборудованияПоТипу(МассивТиповОборудования, РабочееМесто);
КонецФункции

&НаСервере
Функция СписокОборудованияПлатежнаяКарта(РабочееМесто)
	МассивТиповОборудования = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал"));
	Возврат СписокОборудованияПоТипу(МассивТиповОборудования, РабочееМесто);
КонецФункции

&НаСервере
Функция СписокОборудованияПоТипу(МассивТиповОборудования, РабочееМесто)
	
	Если НЕ ИспользуетсяФискальныйРегистратор ИЛИ РабочееМесто = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодключаемоеОборудование.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
		|ГДЕ
		|	ПодключаемоеОборудование.Организация = &Организация
		|	И ПодключаемоеОборудование.ТипОборудования В(&ТипОборудования)
		|	И ПодключаемоеОборудование.РабочееМесто = &РабочееМесто
		|	И НЕ ПодключаемоеОборудование.ПометкаУдаления
		|	И ПодключаемоеОборудование.УстройствоИспользуется";
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ТипОборудования", МассивТиповОборудования);
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

&НаКлиенте
Процедура ПринятьОплатуЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения <> Неопределено И ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		Объект.СуммаОплаты = РезультатВыполнения.СуммаОплаты;
		НапечататьЧек(РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧек(Параметры)
	
	ПоддерживаемыеТипыВО = МенеджерОборудованияКлиентСерверБП.ТипыКонтрольноКассовойТехники();
	
	ПослеВыбратьУстройство = Новый ОписаниеОповещения("ВыбратьУстройствоЗавершение", ЭтотОбъект, Параметры);
	МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(ПослеВыбратьУстройство, ПоддерживаемыеТипыВО,
			НСтр("ru='Выберите фискальное устройство'"),
			НСтр("ru='Фискальное устройство не подключено.'"), 
			НСтр("ru='Фискальное устройство не выбрано.'"));

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьУстройствоЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатВыполнения.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметры = ПолучитьДанныеЧека(Параметры, РезультатВыполнения.ИдентификаторУстройства);
	
	ФорматноЛогическийКонтрольКлиентСервер.ПровестиФорматноЛогическийКонтроль(ОбщиеПараметры, РезультатВыполнения.ИдентификаторУстройства);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НапечататьЧекЗавершение", ЭтотОбъект, Параметры);
	
	ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(ОписаниеОповещения,
		УникальныйИдентификатор, РезультатВыполнения.ИдентификаторУстройства, ОбщиеПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеЧека(ПараметрыОперации = Неопределено, ИдентификаторУстройства = Неопределено);
	
	// Общие параметры чека
	ОбщиеПараметры = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииФискализацииЧека();

	ОбщиеПараметры.ДокументОснование = Объект.Ссылка;
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ОбщиеПараметры.НомерЧекаОснования = Объект.ДокументОснование.НомерЧекаККМ;
	КонецЕсли;

	//ФискальнаяОперации = МенеджерОборудованияВызовСервера.ДанныеФискальнойОперации(ОбщиеПараметры.ДокументОснование, XMLСтрока(ОбщиеПараметры.ДокументОснование));
	//Если ФискальнаяОперации <> Неопределено Тогда
	//	ПараметрыQRКода = МенеджерОборудованияКлиентСервер.ПараметрыQRКодаЧекаККТ();
	//	ПараметрыQRКода.ДатаВремяРасчета = ФискальнаяОперации.Дата;
	//	ПараметрыQRКода.СуммаРасчета = ФискальнаяОперации.Сумма;
	//	ПараметрыQRКода.НомерФискальногоНакопителя = ФискальнаяОперации.ЗаводскойНомерФН;
	//	ПараметрыQRКода.НомерФискальногоДокумента = ФискальнаяОперации.НомерЧекаККМ;
	//	ПараметрыQRКода.ФискальныйПризнак = ФискальнаяОперации.ФискальныйПризнак;
	//	ПараметрыQRКода.ПризнакРасчета = Объект.ТипОперации;
	//	QRКод = МенеджерОборудованияКлиентСервер.СформироватьQRКодЧекаККТ(ПараметрыQRКода);
	//	ОбщиеПараметры.Вставить("QRКод", QRКод);
	//КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.КодМаркировки КАК КодМаркировки,
		|	ТаблицаТовары.Количество КАК Количество,
		|	ТаблицаТовары.Цена КАК Цена,
		|	ТаблицаТовары.Сумма КАК Сумма,
		|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
		|	ТаблицаТовары.СтавкаНСП КАК СтавкаНСП,
		|	ТаблицаТовары.СуммаНСП КАК СуммаНСП,
		|	ТаблицаТовары.Всего КАК Всего
		|ПОМЕСТИТЬ ВременнаяТаблицаТовары
		|ИЗ
		|	&ТаблицаТовары КАК ТаблицаТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаУслуги.Номенклатура КАК Номенклатура,
		|	ТаблицаУслуги.Количество КАК Количество,
		|	ТаблицаУслуги.Цена КАК Цена,
		|	ТаблицаУслуги.Сумма КАК Сумма,
		|	ТаблицаУслуги.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаУслуги.СуммаНДС КАК СуммаНДС,
		|	ТаблицаУслуги.СтавкаНСП КАК СтавкаНСП,
		|	ТаблицаУслуги.СуммаНСП КАК СуммаНСП,
		|	ТаблицаУслуги.Всего КАК Всего
		|ПОМЕСТИТЬ ВременнаяТаблицаУслуги
		|ИЗ
		|	&ТаблицаУслуги КАК ТаблицаУслуги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ВременнаяТаблицаТовары.Номенклатура КАК Справочник.Номенклатура).НаименованиеПолное КАК НоменклатураНаименованиеПолное,
		|	ВЫРАЗИТЬ(ВременнаяТаблицаТовары.Номенклатура КАК Справочник.Номенклатура).Код КАК НоменклатураКод,
		|	ЛОЖЬ КАК НоменклатураЭтоУслуга,
		|	ВЫРАЗИТЬ(ВременнаяТаблицаТовары.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения.Наименование КАК НоменклатураЕдиницаИзмерения,
		|	ВЫРАЗИТЬ(ВременнаяТаблицаТовары.Номенклатура КАК Справочник.Номенклатура).КодТНВЭД.Код КАК НоменклатураКодТНВЭД,
		|	"""" КАК НоменклатураКодГКЭД,
		|	ВременнаяТаблицаТовары.КодМаркировки КАК КодМаркировки,
		|	ВременнаяТаблицаТовары.Количество КАК Количество,
		|	ВременнаяТаблицаТовары.Цена КАК Цена,
		|	ВременнаяТаблицаТовары.Сумма КАК Сумма,
		|	ВременнаяТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
		|	ВременнаяТаблицаТовары.СтавкаНСП КАК СтавкаНСП,
		|	ВременнаяТаблицаТовары.СуммаНДС КАК СуммаНДС,
		|	ВременнаяТаблицаТовары.СуммаНСП КАК СуммаНСП,
		|	ВременнаяТаблицаТовары.Всего КАК Всего
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ВременнаяТаблицаУслуги.Номенклатура КАК Справочник.Номенклатура).НаименованиеПолное,
		|	ВЫРАЗИТЬ(ВременнаяТаблицаУслуги.Номенклатура КАК Справочник.Номенклатура).Код,
		|	ИСТИНА,
		|	ВЫРАЗИТЬ(ВременнаяТаблицаУслуги.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения.Наименование,
		|	"""",
		|	ВЫРАЗИТЬ(ВременнаяТаблицаУслуги.Номенклатура КАК Справочник.Номенклатура).КодГКЭД.Код,
		|	"""",
		|	ВременнаяТаблицаУслуги.Количество,
		|	ВременнаяТаблицаУслуги.Цена,
		|	ВременнаяТаблицаУслуги.Сумма,
		|	ВременнаяТаблицаУслуги.СтавкаНДС,
		|	ВременнаяТаблицаУслуги.СтавкаНСП,
		|	ВременнаяТаблицаУслуги.СуммаНДС,
		|	ВременнаяТаблицаУслуги.СуммаНСП,
		|	ВременнаяТаблицаУслуги.Всего
		|ИЗ
		|	ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги";
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТаблицаТовары", Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаУслуги", Объект.Услуги.Выгрузить());
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Период", ДатаДокумента);
	РезультатЗапроса = Запрос.Выполнить();
	
	НомерСтроки = 0;

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрокаПозицииЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыФискальнойСтрокиЧека();
		
		НомерСтроки = НомерСтроки + 1;
		СтрокаПозицииЧека.НомерСтрокиТовара = НомерСтроки;			
		СтрокаПозицииЧека.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
		СтрокаПозицииЧека.ПризнакПредметаРасчета = ?(ВыборкаДетальныеЗаписи.НоменклатураЭтоУслуга, Перечисления.ПризнакиПредметаРасчета.Услуга, Перечисления.ПризнакиПредметаРасчета.Товар);
		
		СтрокаПозицииЧека.Наименование = ВыборкаДетальныеЗаписи.НоменклатураНаименованиеПолное;
		СтрокаПозицииЧека.Код = ВыборкаДетальныеЗаписи.НоменклатураКод; 

		СтрокаПозицииЧека.Количество   = ВыборкаДетальныеЗаписи.Количество;
		СтрокаПозицииЧека.Цена = ВыборкаДетальныеЗаписи.Цена;
		СтрокаПозицииЧека.Сумма = ВыборкаДетальныеЗаписи.Всего;
		СтрокаПозицииЧека.СтавкаНДС = СтавкаНДСККТ(ВыборкаДетальныеЗаписи.СтавкаНДС);
		СтрокаПозицииЧека.СтавкаНСП = СтавкаНСПККТ(ВыборкаДетальныеЗаписи.СтавкаНСП);
		СтрокаПозицииЧека.СуммаНДС = ВыборкаДетальныеЗаписи.СуммаНДС;      
		СтрокаПозицииЧека.СуммаНСП = ВыборкаДетальныеЗаписи.СуммаНСП;
		
		СтрокаПозицииЧека.ЕдиницаИзмерения = ВыборкаДетальныеЗаписи.НоменклатураЕдиницаИзмерения;

		СтрокаПозицииЧека.КодТНВЭД = ВыборкаДетальныеЗаписи.НоменклатураКодТНВЭД;
		СтрокаПозицииЧека.КодГКЭД = ВыборкаДетальныеЗаписи.НоменклатураКодГКЭД;
		
		// Маркировка
		СтрокаПозицииЧека.КонтрольнаяМарка = ВыборкаДетальныеЗаписи.КодМаркировки;
		// Конец Маркировка
		
		ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
	КонецЦикла;
	
	// Подготовка таблицы оплат
	СтрокаОплаты  = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыСтрокиОплаты();
	Если Объект.БезналичныйРасчет Тогда 
		СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно;
	Иначе
		СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные;
	КонецЕсли;	
	СтрокаОплаты.Сумма = Объект.СуммаОплаты;
	ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	
	// Общие реквизиты для всех типов оборудования.
	ОбщиеПараметры.ТипРасчета = ?(
		Объект.ВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа.Продажа, 
		Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств, 
		Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств);
		
	ОбщиеПараметры.Кассир = КассовыеСменыВызовСервераБП.ПредставлениеКассира(Объект.Организация);
	ОбщиеПараметры.КассирИНН = КассовыеСменыВызовСервераБП.ИННКассира(Объект.Организация);
	
	ОбщиеПараметры.ОрганизацияНазвание = Объект.Организация.НаименованиеПолное;
	ОбщиеПараметры.ОрганизацияИНН      = Объект.Организация.ИНН;
	
	Если Объект.БезналичныйРасчет Тогда
		СведенияОКонтрагенте = БухгалтерскийУчетСервер.ПолучитьСведенияОКонтрагенте(Объект.ВидОплаты.Контрагент);
		ОбщиеПараметры.СведенияОПокупателе.Покупатель = СведенияОКонтрагенте.НаименованиеПолное;		
		ОбщиеПараметры.СведенияОПокупателе.ПокупательИНН = СведенияОКонтрагенте.ИНН;
	Иначе 
		ОбщиеПараметры.СведенияОПокупателе.Покупатель = "Розничный покупатель";		
		ОбщиеПараметры.СведенияОПокупателе.ПокупательИНН = "99999999999999";
	КонецЕсли;	
	
	ОбщиеПараметры.ОтправительEmail  = "info@1c.ru";
	Если ПараметрыОперации <> Неопределено И ПараметрыОперации.Свойство("Печать") Тогда
		ОбщиеПараметры.Электронно = НЕ ПараметрыОперации.Печать;
		Если ПараметрыОперации.Свойство("ПокупательEmail") И Не ПустаяСтрока(ПараметрыОперации.Свойство("ПокупательEmail")) Тогда
			ОбщиеПараметры.ПокупательEmail   = ПараметрыОперации.ПокупательEmail;
			ОбщиеПараметры.Отправляет1СEmail = ПараметрыОперации.ОтправлятьEmailСредствами1С;
		КонецЕсли;
		Если ПараметрыОперации.Свойство("ПокупательНомер") И Не ПустаяСтрока(ПараметрыОперации.Свойство("ПокупательНомер")) Тогда
			ОбщиеПараметры.ПокупательНомер = ПараметрыОперации.ПокупательНомер;
			ОбщиеПараметры.Отправляет1СSMS = ПараметрыОперации.ОтправлятьSMSСредствами1С;
		КонецЕсли;
	Иначе
		ОбщиеПараметры.Электронно = Ложь;
	КонецЕсли;
	
	Если ИдентификаторУстройства <> Неопределено Тогда
		РеквизитыОборудования  = ФорматноЛогическийКонтрольВызовСервера.СтруктураДанныхФорматноЛогическогоКонтроля(ИдентификаторУстройства);
		ОбщиеПараметры.СпособФорматноЛогическогоКонтроля = РеквизитыОборудования.СпособФорматноЛогическогоКонтроля;
		ОбщиеПараметры.ДопустимоеРасхождениеФорматноЛогическогоКонтроля = РеквизитыОборудования.ДопустимоеРасхождениеФорматноЛогическогоКонтроля;
	Иначе
		ОбщиеПараметры.СпособФорматноЛогическогоКонтроля = Перечисления.СпособыФорматноЛогическогоКонтроля.РазделятьСтроки;
	КонецЕсли;
	
	Возврат ОбщиеПараметры;
	
КонецФункции
    
&НаСервереБезКонтекста
Функция СтавкаНДСККТ(СтавкаНДС)

	Если СтавкаНДС = Справочники.СтавкиНДС.Стандарт Тогда 
		Возврат Перечисления.СтавкиНДС.НДС12;
	ИначеЕсли СтавкаНДС = Справочники.СтавкиНДС.Освобожденная Тогда
		Возврат Перечисления.СтавкиНДС.НДСОсв;
	ИначеЕсли СтавкаНДС = Справочники.СтавкиНДС.Нулевая Тогда
		Возврат Перечисления.СтавкиНДС.НДС0;
	ИначеЕсли СтавкаНДС = Справочники.СтавкиНДС.Необлагаемая Тогда
		Возврат Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
	
КонецФункции // СтавкаНДСККТ()

&НаСервереБезКонтекста
Функция СтавкаНСПККТ(СтавкаНСП)

	Если СтавкаНСП = Справочники.СтавкиНСП.Торговля Тогда 
		Возврат Перечисления.СтавкиНСП.НСП1;
	ИначеЕсли СтавкаНСП = Справочники.СтавкиНСП.Прочее Тогда
		Возврат Перечисления.СтавкиНСП.НСП2;
	Иначе
		Возврат Перечисления.СтавкиНСП.БезНСП;
	КонецЕсли;
	
КонецФункции // СтавкаНСПККТ()

&НаКлиенте
Процедура НапечататьЧекЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтаФорма.Доступность = Истина; // Разблокировка интерфейса пользователя.
	
	Если РезультатВыполнения.Результат Тогда
		
		Объект.ИдентификаторУстройства = ?(РезультатВыполнения.Свойство("ИдентификаторУстройства"), РезультатВыполнения.ИдентификаторУстройства, Неопределено);

		// Установить полученное значение номера чека реквизиту документа.
		Объект.НомерСменыККМ = РезультатВыполнения.НомерСменыККТ;
		Объект.НомерЧекаККМ = РезультатВыполнения.НомерЧекаККТ;
		
		//// Если ФискальныеОперации не был записан - произошла ошибка при записи.
		//Если РезультатВыполнения.ВыходныеПараметры.Количество() > 8 Тогда
		//	ПараметрыФискализации = РезультатВыполнения.ВыходныеПараметры[8];
		//	Если НЕ ПараметрыФискализации.ОперацияЗаписана Тогда
		//		МенеджерОборудованияВызовСервера.ЗаписатьФискальнуюОперацию(ПараметрыФискализации);
		//	КонецЕсли;
		//	Если НЕ ПустаяСтрока(ПараметрыФискализации.ЧекКоррекцииСторно)
		//		И НЕ ПараметрыФискализации.ЧекКоррекцииСторно.ОперацияЗаписана Тогда
		//			МенеджерОборудованияВызовСервера.ЗаписатьФискальнуюОперацию(ПараметрыФискализации.ЧекКоррекцииСторно);
		//	КонецЕсли;
		//КонецЕсли;
	
		Объект.Дата = МенеджерОборудованияВызовСервера.ДатаСеанса();
		Если Не ЗначениеЗаполнено(Объект.НомерЧекаККМ) Тогда
			Объект.НомерЧекаККМ = НомерЧекаККМ(Объект.Организация, Объект.Склад, Объект.ИдентификаторУстройства, Объект.Дата);
		КонецЕсли;
			
		ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
		Попытка
			Записать(ПараметрыЗаписи);
		Исключение
			ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка:""%ОписаниеОшибки%"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);
			Возврат;
		КонецПопытки;
		
		Если Параметры.ПечататьТоварныйЧек Тогда
			ОбъектыПечати = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка);
			
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер("Документ.РозничнаяПродажа", "ТоварныйЧек", 
				ОбъектыПечати, ОбщегоНазначенияБПКлиент.ПолучитьЗаголовокПечатнойФормы(ОбъектыПечати));
		КонецЕсли;
			
		Если Параметры.ПечататьТоварныйЧекПринтерЧеков Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ПечатьТоварногоЧекаВыполнить_ПолучениеШириныСтроки", ЭтотОбъект);  
			ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПолучениеШириныСтрокиПечатающегоУстройства(ОписаниеОповещения, УникальныйИдентификатор); 
		КонецЕсли;
			
		ТекстСообщения = НСтр("ru = 'Операция выполнена успешно.'");
		ПоказатьОповещениеПользователя(ТекстСообщения);
		
		Закрыть();
			
	Иначе
		ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);
	КонецЕсли;
	
	Доступность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьТоварногоЧекаВыполнить_ПолучениеШириныСтроки(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ОбщиеПараметры = ПолучитьДанныеЧека();
		Текст = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.СформироватьТекстНефискальногоЧека(ОбщиеПараметры, РезультатВыполнения.ШиринаСтроки);
		ПараметрыОперации = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыПечатиТеста(Текст);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПечатьТоварногоЧекаВыполнить_ВыполнениеКомандыЗавершение", ЭтотОбъект, Параметры);
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПечатьТекста(ОписаниеОповещения, УникальныйИдентификатор, РезультатВыполнения.ИдентификаторУстройства, ПараметрыОперации); 
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатВыполнения.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьТоварногоЧекаВыполнить_ВыполнениеКомандыЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'При печати возникла ошибка: ""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ОписаниеОшибки%",  РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НомерЧекаККМ(Организация, Склад, ИдентификаторУстройства, ДатаДокумента)
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",             Организация);
	Запрос.УстановитьПараметр("Склад",                   Склад);
	Запрос.УстановитьПараметр("ИдентификаторУстройства", 
		?(ЗначениеЗаполнено(ИдентификаторУстройства), ИдентификаторУстройства, Справочники.ПодключаемоеОборудование.ПустаяСсылка()));
		
	Запрос.УстановитьПараметр("НачалоГода",             НачалоГода(ДатаДокумента));
	Запрос.УстановитьПараметр("КонецГода",              КонецГода(ДатаДокумента));
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РозничнаяПродажа.НомерЧекаККМ КАК НомерЧекаККМ
	|ИЗ
	|	Документ.РозничнаяПродажа КАК РозничнаяПродажа
	|ГДЕ
	|	РозничнаяПродажа.Организация = &Организация
	|	И РозничнаяПродажа.ИдентификаторУстройства = &ИдентификаторУстройства
	|	И РозничнаяПродажа.Склад = &Склад
	|	И РозничнаяПродажа.Дата МЕЖДУ &НачалоГода И &КонецГода
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЧекаККМ УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Возврат ?(РезультатЗапроса.Следующий(), РезультатЗапроса.НомерЧекаККМ + 1, 1);
КонецФункции 

&НаСервереБезКонтекста
Функция ДанныеФискальнойОперации(Ссылка)

	ДанныеФискальнойОперации = ОборудованиеЧекопечатающиеУстройстваВызовСервера.ДанныеФискальнойОперации(Ссылка);
	Если ДанныеФискальнойОперации <> Неопределено Тогда
		ЗначенияКлюча = Новый Структура("ДокументОснование, ИдентификаторЗаписи");
		ЗаполнитьЗначенияСвойств(ЗначенияКлюча, ДанныеФискальнойОперации);
		
		Возврат РегистрыСведений.ФискальныеОперации.СоздатьКлючЗаписи(ЗначенияКлюча);
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
КонецФункции 
      
// Маркировка
&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьИндексМарки(ТекущаяСтрока)
	Если ЭтоМаркированнаяПродукция(ТекущаяСтрока.Номенклатура) Тогда
		Если ЗначениеЗаполнено(ТекущаяСтрока.КодМаркировки) Тогда
			ТекущаяСтрока.ИндексМарки = 1;
		Иначе
			ТекущаяСтрока.ИндексМарки = 2;
		КонецЕсли;
	Иначе
		ТекущаяСтрока.ИндексМарки = 0;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоМаркированнаяПродукция(Номенклатура)
	Возврат Номенклатура.ЭтоМаркированнаяПродукция;
КонецФункции // ЭтоМаркированнаяПродукция()
// Конец Маркировка

// ПодключаемоеОборудование

// Процедура - Получены штрихкоды
//
// Параметры:
//  ДанныеШтрихкодов	 - Структура/Массив - В зависимости от точки вызова передается структура (обработка сканера) или массив (обработка ТСД)
//  ИмяТабличнойЧасти	 - Строка	 - Имя табличной части для загрузки
//
&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрихкодов, ИмяТабличнойЧасти) Экспорт
	
	Модифицированность = Истина;
	
	НеДобавленныеШтрихкоды = ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов, ИмяТабличнойЧасти);
	
	// Неизвестные штрихкоды.
	Если НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды.Количество() > 0 Тогда
		Для Каждого СтруктураДанные Из НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды Цикл 
			СтрокаСообщения = СтрШаблон(НСтр("ru = 'Данные по штрихкоду не найдены: %1'"), СтруктураДанные.Штрихкод);
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		КонецЦикла;	
	// Штрихкоды некорректного типа.
	ИначеЕсли НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа.Количество() > 0 Тогда 
		Для Каждого СтруктураДанные Из НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа Цикл 
			СтрокаСообщения = СтрШаблон(НСтр("ru = 'Найденная по штрихкоду %1 номенклатура: ""%2"", не подходит для этой табличной части'"),
				СтруктураДанные.ТекШтрихкод, СтруктураДанные.Номенклатура);
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаСервереБезКонтекста
Функция ПолучитьДанныеПоШтрихкоду(ТекШтрихкод)
	
	Номенклатура = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьНоменклатуруПоШтрихкоду(ТекШтрихкод);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", Номенклатура);
	СтруктураДанные.Вставить("ТипНоменклатурыУслуга", ?(ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура"), Номенклатура.Услуга, Ложь));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеПоШтрихкоду()

// Функция - Заполнить по данным штрихкодов
//
// Параметры:
//  ДанныеШтрихкодов		 - 	 - Структура/Массив	 - В зависимости от точки вызова передается структура (обработка сканера) или массив (обработка ТСД)
//  ИмяТабличнойЧасти	 - Строка	 - Имя табличной части для загрузки
// 
// Возвращаемое значение:
//  Структура - Массивы неизвестных штрих кодов
//
&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов, ИмяТабличнойЧасти) 
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	Для каждого ТекШтрихкод Из МассивШтрихкодов Цикл
		СтруктураДанные = ПолучитьДанныеПоШтрихкоду(ТекШтрихкод);
		
		Если НЕ ЗначениеЗаполнено(СтруктураДанные.Номенклатура) Тогда 
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли ИмяТабличнойЧасти = "Товары"
			И СтруктураДанные.ТипНоменклатурыУслуга Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("ТекШтрихкод, Номенклатура", ТекШтрихкод, СтруктураДанные.Номенклатура));
		ИначеЕсли ИмяТабличнойЧасти = "Услуги"
			И НЕ СтруктураДанные.ТипНоменклатурыУслуга Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("ТекШтрихкод, Номенклатура", ТекШтрихкод, СтруктураДанные.Номенклатура));
		Иначе 
			СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти].Добавить();
			СтрокаТабличнойЧасти.Номенклатура = СтруктураДанные.Номенклатура;
			СтрокаТабличнойЧасти.Количество = ТекШтрихкод.Количество;
			Если ИмяТабличнойЧасти = "Товары" Тогда 				
				// Маркировка
				Если ВестиУчетМаркировкиПродукции Тогда 
					ЗаполнитьИндексМарки(СтрокаТабличнойЧасти);
				КонецЕсли;	
				// Конец Маркировка
			КонецЕсли;	
			
			ОбработатьИзменениеНоменклатуры(СтрокаТабличнойЧасти, ИмяТабличнойЧасти);
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа",
		НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа);

КонецФункции // ЗаполнитьПоДаннымШтрихкодов()
// Конец ПодключаемоеОборудование

#КонецОбласти

#Область КопированиеСтрокТабличныхЧастей

&НаКлиенте
Процедура ТоварыКопироватьСтроки(Команда)
	КопироватьСтроки("Товары");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВставитьСтроки(Команда)
	ВставитьСтроки("Товары");
КонецПроцедуры

&НаКлиенте
Процедура УслугиКопироватьСтроки(Команда)
	КопироватьСтроки("Услуги");
КонецПроцедуры

&НаКлиенте
Процедура УслугиВставитьСтроки(Команда)
	ВставитьСтроки("Услуги");
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСтроки(ИмяТЧ)
	
	Если КопированиеТабличнойЧастиКлиент.МожноКопироватьСтроки(Объект[ИмяТЧ], Элементы[ИмяТЧ].ТекущиеДанные) Тогда
		КоличествоСкопированных = 0;
		КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных);
		КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСкопированных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(ИмяТЧ)
	
	КоличествоСкопированных = 0;
	КоличествоВставленных = 0;
	ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных);
	КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных)
	КопированиеТабличнойЧастиСервер.Копировать(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки, КоличествоСкопированных);
КонецПроцедуры

&НаСервере
Процедура ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных)
	КопированиеТабличнойЧастиСервер.Вставить(Объект, ИмяТЧ, Элементы, КоличествоСкопированных, КоличествоВставленных);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
