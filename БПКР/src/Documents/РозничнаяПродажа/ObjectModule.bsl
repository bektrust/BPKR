#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗаполнитьПоПараметрамРозничнойПродажи(Организация, Касса) Экспорт 

	ПараметрыРозничнойПродажи = КассовыеСменыВызовСервераБП.ПараметрыРозничныхПродаж(Организация, Касса);
	
	Склад = ПараметрыРозничнойПродажи.Склад;
	ВалютаДокумента = Касса.ВалютаДенежныхСредств;
	СуммаВключаетНалоги = ПараметрыРозничнойПродажи.ДоговорКонтрагента.СуммаВключаетНалоги;
	
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - ДокументСсылка.ПеремещениеТоваров - Данные заполнения документа.
//	
Процедура ЗаполнитьПоРозничнаяПродажа(ДанныеЗаполнения) Экспорт
	
	ДокументОснование = ДанныеЗаполнения;
	
	ВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа.Возврат;
	Организация = ДанныеЗаполнения.Организация;
	Склад = ДанныеЗаполнения.Склад;
	Касса = ДанныеЗаполнения.Касса;
	ВалютаДокумента = Касса.ВалютаДенежныхСредств;
	БезналичныйРасчет = ДанныеЗаполнения.БезналичныйРасчет;			
	ВидОплаты = ДанныеЗаполнения.ВидОплаты;
	СуммаВключаетНалоги = ДанныеЗаполнения.СуммаВключаетНалоги;
	
	Товары.Загрузить(ДанныеЗаполнения.Товары.Выгрузить());
	Услуги.Загрузить(ДанныеЗаполнения.Услуги.Выгрузить());
	ПодарочныеСертификаты.Загрузить(ДанныеЗаполнения.ПодарочныеСертификаты.Выгрузить());
	
	СуммаДокумента = ДанныеЗаполнения.СуммаДокумента

КонецПроцедуры

#КонецОбласти
	
#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) 
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.РозничнаяПродажа")] = "ЗаполнитьПоРозничнаяПродажа";
	
	ЗаполнениеОбъектовБП.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда 
		ЗаполнитьПоПараметрамРозничнойПродажи(Организация, Касса);
	КонецЕсли;	
	
КонецПроцедуры

// Процедура - обработчик события ПриКопировании объекта.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	НомерЧекаККМ = "";
	ОтчетОРозничныхПродажах = Документы.ОтчетОРозничныхПродажах.ПустаяСсылка();
	ИдентификаторУстройства = Справочники.ПодключаемоеОборудование.ПустаяСсылка();
	ВидОплаты = Справочники.ВидыОплатОрганизаций.ПустаяСсылка();
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	// Проверка заполнения табличных частей
	Если Товары.Количество() = 0
		И Услуги.Количество() = 0 Тогда	
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не заполнен ни один список.'"),,,,Отказ);
	КонецЕсли;			
	
	Если ВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа.Продажа Тогда	
		МассивНепроверяемыхРеквизитов.Добавить("ДокументОснование");
	КонецЕсли;

	Если НЕ БезналичныйРасчет Тогда 
		МассивНепроверяемыхРеквизитов.Добавить("ВидОплаты");
	КонецЕсли;
	
	ОбщегоНазначенияБПСервер.ДобавитьНепроверяемыеРеквизитыПоПараметрамФункциональныхОпций(МассивНепроверяемыхРеквизитов, Организация, Дата);
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	ВыполнитьПредварительныйКонтроль(Отказ);
	
КонецПроцедуры

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	СуммаДокумента = Товары.Итог("Всего") + Услуги.Итог("Всего");

КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	//Если ЗначениеЗаполнено(ОтчетОРозничныхПродажах) Тогда 
	//	// Инициализация дополнительных свойств для удаления проведения документа
	//	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	//	// Подготовка наборов записей.
	//	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	//	// Запись наборов записей.
	//	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	//Иначе 
	//	ИнициализироватьДанные(Отказ, РежимПроведения);
	//	
	//	ОтразитьДвижения(Отказ, РежимПроведения);
	//		
	//	// Запись наборов записей.
	//	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);		
	//КонецЕсли;	
	//
	//ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	//// Инициализация дополнительных свойств для удаления проведения документа
	//БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	//
	//// Подготовка наборов записей
	//БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	//
	//// Запись наборов записей
	//БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	//
	//ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииОбработкаПроведения

// Процедура инициализирует данные документа
// и подготавливает таблицы для движения в регистры
//
Процедура ИнициализироватьДанные(Отказ, РежимПроведения)
	
	//// Инициализация дополнительных свойств для проведения документа.
	//БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	//
	//// Инициализация данных документа.
	//Документы.РозничнаяПродажа.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	//
	//// Подготовка наборов записей.
	//БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
КонецПроцедуры
	
// Процедура заполняет регистры данными
//
Процедура ОтразитьДвижения(Отказ, РежимПроведения)

	//// Отражение в разделах учета.
	//УчетТоваров.СформироватьДвиженияСписаниеТоваров(ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСписанныеТовары, 
	//	ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРеквизиты, Движения, Отказ, ДополнительныеСвойства);
	//УчетМБП.СформироватьДвиженияСписаниеМБП(ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСписанныеМБП, 
	//	ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРеквизиты, Движения, Отказ, ДополнительныеСвойства);
	//	
	////БухгалтерскийУчетСервер.ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Отказ);
	////
	////БухгалтерскийУчетСервер.ОтразитьПродажи(ДополнительныеСвойства, Движения, Отказ);
	////
	////БухгалтерскийУчетСервер.ОтразитьОборотыПоДаннымЕдиногоНалога(ДополнительныеСвойства, Движения, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет контроль противоречий.
//
Процедура ВыполнитьПредварительныйКонтроль(Отказ)
	
	// Маркировка
	ВестиУчетМаркировкиПродукции = ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукции");
	Если ВестиУчетМаркировкиПродукции Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
			|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
			|	ТаблицаДокумента.КодМаркировки КАК КодМаркировки
			|ПОМЕСТИТЬ ТаблицаДокумента
			|ИЗ
			|	&ТаблицаДокумента КАК ТаблицаДокумента
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаДокумента1.НомерСтроки КАК НомерСтроки,
			|	ТаблицаДокумента1.Номенклатура КАК Номенклатура
			|ИЗ
			|	ТаблицаДокумента КАК ТаблицаДокумента1
			|ГДЕ
			|	ТаблицаДокумента1.Номенклатура.ЭтоМаркированнаяПродукция
			|	И ТаблицаДокумента1.КодМаркировки = """"
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
		Запрос.УстановитьПараметр("ТаблицаДокумента", Товары);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		// Пустой код маркировки.
		Если НЕ МассивРезультатов[1].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[1].Выбрать();
			Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнен код маркировки ""%1"" в строке %2 списка ""Товары"".'"), 
					ВыборкаИзРезультатаЗапроса.Номенклатура, 
					ВыборкаИзРезультатаЗапроса.НомерСтроки);
				БухгалтерскийУчетСервер.СообщитьОбОшибке(
					ЭтотОбъект,
					ТекстСообщения,
					"Товары",
					ВыборкаИзРезультатаЗапроса.НомерСтроки,
					"Номенклатура",
					Отказ);
			КонецЦикла;
		КонецЕсли;		
	КонецЕсли;
	// Конец Маркировка
	
КонецПроцедуры

Функция ПодготовитьПараметрыРасчета(ИмяТабличнойЧасти, ДанныеУчетнойПолитики, СчитатьОтДохода = Ложь, УказыватьТочностьЦены = Ложь) Экспорт

	ПараметрыРасчета = ОбработкаТабличныхЧастейКлиентСервер.ШаблонПараметровРасчета();
	
	ПараметрыРасчета.Период = Дата;
	ПараметрыРасчета.Организация = Организация;
	ПараметрыРасчета.СуммаВключаетНалоги = СуммаВключаетНалоги;
	ПараметрыРасчета.БезналичныйРасчет = БезналичныйРасчет;
	ПараметрыРасчета.СчитатьОтДохода = СчитатьОтДохода;
	ПараметрыРасчета.ИмяТабличнойЧасти = ИмяТабличнойЧасти;
	ПараметрыРасчета.Точность = ?(УказыватьТочностьЦены, ТочностьЦены, ПараметрыРасчета.Точность);
	
	Возврат ПараметрыРасчета;
КонецФункции

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли