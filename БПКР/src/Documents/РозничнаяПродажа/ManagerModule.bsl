#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

Функция ТекстЗапросаДанныеДляОбновленияЦенДокументов() Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
		|	ТаблицаДокумента.Цена КАК Цена,
		|	&Валюта КАК Валюта,
		|	&СпособЗаполненияЦены КАК СпособЗаполненияЦены,
		|	&ЦенаВключаетНалоги КАК ЦенаВключаетНалоги
		|ПОМЕСТИТЬ ТаблицаНоменклатуры
		|ИЗ
		|	Документ.РозничнаяПродажа.Товары КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДокумента.Номенклатура,
		|	ТаблицаДокумента.Цена,
		|	&Валюта,
		|	&СпособЗаполненияЦены,
		|	&ЦенаВключаетНалоги
		|ИЗ
		|	Документ.РозничнаяПродажа.Услуги КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции
 
#КонецОбласти

#Область ПроцедурыПроведенияДокумента

// Формирует таблицу значений, содержащую данные для проведения по регистру бухгалтерии Хозрасчетный.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаХозрасчетный(ДокументСсылка, СтруктураДополнительныеСвойства, Отказ)
	
	// Формируются проводки только количественные, 
	// для контроля отрицательных остатков.
	
	// Все суммовые проводки будут сформированы документом ОРП.
	
	// Подготовка данных
	Если ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа.Продажа Тогда 
		// Продажа.
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ВременнаяТаблицаШапка.Ссылка КАК Регистратор,
			|	ВременнаяТаблицаШапка.Дата КАК Период,
			|	ВременнаяТаблицаШапка.Организация КАК Организация,
			|	&Содержание КАК Содержание,
			|	ВременнаяТаблицаШапка.Склад КАК Склад,
			|	НЕОПРЕДЕЛЕНО КАК Контрагент
			|ИЗ
			|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	""Товары"" КАК ИмяСписка,
			|	&СинонимСписка КАК СинонимСписка,
			|	ВременнаяТаблицаШапка.Дата КАК Период,
			|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
			|	ВременнаяТаблицаТовары.СчетУчета КАК СчетУчета,
			|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
			|	ВременнаяТаблицаШапка.Склад КАК Склад,
			|	НЕОПРЕДЕЛЕНО КАК ДокументОприходования,
			|	0 КАК Себестоимость,
			|	ВременнаяТаблицаТовары.Количество КАК Количество,
			|	ВременнаяТаблицаТовары.СчетСебестоимости КАК КорСчетСписания,
			|	ВременнаяТаблицаТовары.СтатьяРасходов КАК КорСубконто1,
			|	НЕОПРЕДЕЛЕНО КАК КорСубконто2,
			|	НЕОПРЕДЕЛЕНО КАК КорСубконто3
			|ИЗ
			|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
			|		ПО (ИСТИНА)
			|ГДЕ
			|	НЕ ВременнаяТаблицаТовары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.МБП)
			|	И ВременнаяТаблицаШапка.ОтчетОРозничныхПродажах = ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяССылка)
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	""Товары"" КАК ИмяСписка,
			|	&СинонимСписка КАК СинонимСписка,
			|	ВременнаяТаблицаШапка.Дата КАК Период,
			|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
			|	ВременнаяТаблицаТовары.СчетУчета КАК СчетУчета,
			|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
			|	ВременнаяТаблицаШапка.Склад КАК Склад,
			|	НЕОПРЕДЕЛЕНО КАК ДокументОприходования,
			|	0 КАК Себестоимость,
			|	ВременнаяТаблицаТовары.Количество КАК Количество,
			|	ВременнаяТаблицаТовары.СчетСебестоимости КАК КорСчетСписания,
			|	ВременнаяТаблицаТовары.СтатьяРасходов КАК КорСубконто1,
			|	НЕОПРЕДЕЛЕНО КАК КорСубконто2,
			|	НЕОПРЕДЕЛЕНО КАК КорСубконто3
			|ИЗ
			|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
			|		ПО (ИСТИНА)
			|ГДЕ
			|	ВременнаяТаблицаТовары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.МБП)
			|	И ВременнаяТаблицаШапка.ОтчетОРозничныхПродажах = ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяССылка)
			|	И &ДокументОснование_ДвижениеМБП
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
		Запрос.УстановитьПараметр("Содержание", НСтр("ru = 'Списание товаров'")); 
		Запрос.УстановитьПараметр("СинонимСписка", НСтр("ru = 'Товары'"));
		
		Если Тип("ДокументСсылка.ДвижениеМБП") = ТипЗнч(СтруктураДополнительныеСвойства.ДляПроведения.Ссылка.ДокументОснование) Тогда
			Запрос.УстановитьПараметр("ДокументОснование_ДвижениеМБП", Ложь);
		Иначе
			Запрос.УстановитьПараметр("ДокументОснование_ДвижениеМБП", Истина);		
		КонецЕсли;	
			
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		ТаблицаРеквизиты = МассивРезультатов[0].Выгрузить();
		ТаблицаТовары = МассивРезультатов[1].Выгрузить();
		ТаблицаМБП = МассивРезультатов[2].Выгрузить();
		
		ТаблицаСписанныеТовары = УчетТоваров.ПодготовитьТаблицуСписанныеТовары(ТаблицаТовары, ТаблицаРеквизиты, Отказ);
		ТаблицаСписанныеМБП = УчетМБП.ПодготовитьТаблицуСписанныеМБП(ТаблицаМБП, ТаблицаРеквизиты, Отказ);	
	Иначе 
		// Возврат.
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ВременнаяТаблицаШапка.Ссылка КАК Регистратор,
			|	ВременнаяТаблицаШапка.Дата КАК Период,
			|	ВременнаяТаблицаШапка.Организация КАК Организация,
			|	ВременнаяТаблицаШапка.Склад КАК Склад,
			|	ИСТИНА КАК УказанДокументОтгрузки,
			|	ВременнаяТаблицаШапка.ДатаДокументаРеализации КАК ДатаДокументаРеализации,
			|	ВременнаяТаблицаШапка.ДокументОснование КАК Сделка,
			|	НЕОПРЕДЕЛЕНО КАК Контрагент,
			|	&Содержание КАК Содержание
			|ИЗ
			|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВременнаяТаблицаТовары.СчетУчета КАК СчетУчета
			|ИЗ
			|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
			|ГДЕ
			|	НЕ ВременнаяТаблицаТовары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.МБП)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура
			|ИЗ
			|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
			|ГДЕ
			|	НЕ ВременнаяТаблицаТовары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.МБП)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	""Товары"" КАК ИмяСписка,
			|	&СинонимСписка КАК СинонимСписка,
			|	ВременнаяТаблицаШапка.Дата КАК Период,
			|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
			|	ВременнаяТаблицаТовары.СчетУчета КАК СчетУчета,
			|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
			|	ВременнаяТаблицаШапка.Склад КАК Склад,
			|	ВременнаяТаблицаШапка.Ссылка КАК Партия,
			|	0 КАК Себестоимость,
			|	ВременнаяТаблицаТовары.Количество КАК Количество,
			|	ВременнаяТаблицаТовары.СчетСебестоимости КАК КорСчетСписания,
			|	ВременнаяТаблицаТовары.СтатьяРасходов КАК КорСубконто1,
			|	НЕОПРЕДЕЛЕНО КАК КорСубконто2,
			|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
			|	0 КАК СуммаСписания
			|ИЗ
			|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
			|		ПО (ИСТИНА)
			|ГДЕ
			|	НЕ ВременнаяТаблицаТовары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.МБП)
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВременнаяТаблицаТовары.СчетУчета КАК СчетУчета
			|ИЗ
			|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
			|ГДЕ
			|	ВременнаяТаблицаТовары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.МБП)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура
			|ИЗ
			|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
			|ГДЕ
			|	ВременнаяТаблицаТовары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.МБП)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	""Товары"" КАК ИмяСписка,
			|	&СинонимСписка КАК СинонимСписка,
			|	ВременнаяТаблицаШапка.Дата КАК Период,
			|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
			|	ВременнаяТаблицаТовары.СчетУчета КАК СчетУчета,
			|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
			|	ВременнаяТаблицаШапка.Склад КАК Склад,
			|	ВременнаяТаблицаШапка.Ссылка КАК Партия,
			|	0 КАК Себестоимость,
			|	ВременнаяТаблицаТовары.Количество КАК Количество,
			|	ВременнаяТаблицаТовары.СчетСебестоимости КАК КорСчетСписания,
			|	ВременнаяТаблицаТовары.СтатьяРасходов КАК КорСубконто1,
			|	НЕОПРЕДЕЛЕНО КАК КорСубконто2,
			|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
			|	0 КАК СуммаСписания
			|ИЗ
			|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
			|		ПО (ИСТИНА)
			|ГДЕ
			|	ВременнаяТаблицаТовары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.МБП)
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
		Запрос.УстановитьПараметр("Содержание", НСтр("ru = 'Возврат товаров'")); 
		Запрос.УстановитьПараметр("СинонимСписка", НСтр("ru = 'Товары'"));
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		ТаблицаРеквизиты = МассивРезультатов[0].Выгрузить();
		
		ТаблицаСчетаУчетаТоваров = МассивРезультатов[1].Выгрузить();
		ТаблицаСписокНоменклатуры = МассивРезультатов[2].Выгрузить();
		ТаблицаТовары = МассивРезультатов[3].Выгрузить();
		
		ТаблицаСчетаУчетаМБП = МассивРезультатов[4].Выгрузить();
		ТаблицаСписокНоменклатурыМБП = МассивРезультатов[5].Выгрузить();
		ТаблицаМБП = МассивРезультатов[6].Выгрузить();
		
		ТаблицаСписанныеТовары = УчетТоваров.ПодготовитьТаблицуВозвращенныеСписанныеТовары(ТаблицаТовары, ТаблицаСчетаУчетаТоваров, ТаблицаСписокНоменклатуры, ТаблицаРеквизиты, Отказ);
		ТаблицаСписанныеМБП = УчетМБП.ПодготовитьТаблицуВозвращенныеСписанныеМБП(ТаблицаМБП, ТаблицаСчетаУчетаМБП, ТаблицаСписокНоменклатурыМБП, ТаблицаРеквизиты, Отказ);
		
		// СТОРНО
		СтруктураПолейДляСторно = Новый Структура("Количество, Себестоимость, СуммаСписания");
		УчетТоваров.ПроставитьСторноТаблицы(ТаблицаСписанныеТовары, СтруктураПолейДляСторно, -1);
	КонецЕсли;	
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРеквизиты", ТаблицаРеквизиты);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСписанныеТовары", ТаблицаСписанныеТовары);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСписанныеМБП", ТаблицаСписанныеМБП);
		
КонецПроцедуры // СформироватьТаблицаХозрасчетный()

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства, Отказ) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК Ссылка,
		|	ТаблицаДокумента.Дата КАК Дата,
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ТаблицаДокумента.Склад КАК Склад,
		|	ТаблицаДокумента.СуммаДокумента КАК СуммаДокумента,
		|	ТаблицаДокумента.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах,
		|	ТаблицаДокумента.ДокументОснование КАК ДокументОснование,
		|	ДанныеПервичныхДокументов.Дата КАК ДатаДокументаРеализации
		|ПОМЕСТИТЬ ВременнаяТаблицаШапка
		|ИЗ
		|	Документ.РозничнаяПродажа КАК ТаблицаДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
		|		ПО ТаблицаДокумента.ДокументОснование = ДанныеПервичныхДокументов.Документ
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
		|	ТаблицаДокумента.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	ТаблицаДокумента.Количество КАК Количество,
		|	ТаблицаДокумента.Всего КАК Всего,
		|	ТаблицаДокумента.Сумма КАК Сумма,
		|	ТаблицаДокумента.СуммаДохода КАК СуммаДохода,
		|	ТаблицаДокумента.СуммаНДС КАК СуммаНДС,
		|	ТаблицаДокумента.СтавкаНСП КАК СтавкаНСП,
		|	ТаблицаДокумента.СуммаНСП КАК СуммаНСП,
		|	ТаблицаДокумента.СчетУчета КАК СчетУчета,
		|	ТаблицаДокумента.СчетДоходов КАК СчетДоходов,
		|	ТаблицаДокумента.СтатьяДоходов КАК СтатьяДоходов,
		|	ТаблицаДокумента.СчетСебестоимости КАК СчетСебестоимости,
		|	ТаблицаДокумента.СтатьяРасходов КАК СтатьяРасходов,
		|	ТаблицаДокумента.ВидДеятельности КАК ВидДеятельности
		|ПОМЕСТИТЬ ВременнаяТаблицаТовары
		|ИЗ
		|	Документ.РозничнаяПродажа.Товары КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
		|	ТаблицаДокумента.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	ТаблицаДокумента.Количество КАК Количество,
		|	ТаблицаДокумента.Всего КАК Всего,
		|	ТаблицаДокумента.Сумма КАК Сумма,
		|	ТаблицаДокумента.СуммаДохода КАК СуммаДохода,
		|	ТаблицаДокумента.СуммаНДС КАК СуммаНДС,
		|	ТаблицаДокумента.СтавкаНСП КАК СтавкаНСП,
		|	ТаблицаДокумента.СуммаНСП КАК СуммаНСП,
		|	ТаблицаДокумента.СчетДоходов КАК СчетДоходов,
		|	ТаблицаДокумента.СтатьяДоходов КАК СтатьяДоходов,
		|	ТаблицаДокумента.ВидДеятельности КАК ВидДеятельности
		|ПОМЕСТИТЬ ВременнаяТаблицаУслуги
		|ИЗ
		|	Документ.РозничнаяПродажа.Услуги КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка";		
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Выполнить();
	
	СформироватьТаблицаХозрасчетный(ДокументСсылка, СтруктураДополнительныеСвойства, Отказ);

КонецПроцедуры

#КонецОбласти	

#Область ВерсионированиеОбъектов

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//@skip-warning
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область ИнтерфейсПечати

// Функция формирует табличный документ с печатной формой товарного чека
//
// Возвращаемое значение:
//  Табличный документ - печатная форма акта
//
Функция ПечатьТоварногоЧека(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "РозничнаяПродажа_ТоварныйЧек";

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РозничнаяПродажа.ПФ_MXL_ТоварныйЧек");
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК Ссылка,
		|	ТаблицаДокумента.Номер КАК Номер,
		|	ТаблицаДокумента.Дата КАК Дата,
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ТаблицаДокумента.Организация.НаименованиеПолное КАК ОрганизацияПредставление,
		|	ТаблицаДокумента.ВалютаДокумента КАК ВалютаДокумента,
		|	ТаблицаДокумента.Склад КАК Склад,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокумента.Склад) КАК СкладПредставление,
		|	ТаблицаДокумента.Товары.(
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
		|		ПРЕДСТАВЛЕНИЕ(ТаблицаДокумента.Товары.Номенклатура.ЕдиницаИзмерения) КАК ЕИ,
		|		Количество КАК Количество,
		|		Цена КАК Цена,
		|		СуммаНДС КАК СуммаНДС,
		|		СуммаНСП КАК СуммаНСП,
		|		Всего КАК Всего
		|	) КАК Товары,
		|	ТаблицаДокумента.Услуги.(
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
		|		ПРЕДСТАВЛЕНИЕ(ТаблицаДокумента.Услуги.Номенклатура.ЕдиницаИзмерения) КАК ЕИ,
		|		Количество КАК Количество,
		|		Цена КАК Цена,
		|		СуммаНДС КАК СуммаНДС,
		|		СуммаНСП КАК СуммаНСП,
		|		Всего КАК Всего
		|	) КАК Услуги
		|ИЗ
		|	Документ.РозничнаяПродажа КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В(&СписокДокументов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаДокумента.Дата,
		|	ТаблицаДокумента.Ссылка";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокДокументов", МассивОбъектов);

	Шапка = Запрос.Выполнить().Выбрать();
	Пока Шапка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Подготовка данных
		ДанныеПечати = Новый Структура;

		ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, НСтр("ru = 'Товарный чек'"));
		ДанныеПечати.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		ДанныеПечати.Вставить("ОрганизацияПредставление", Шапка.ОрганизацияПредставление);
		ДанныеПечати.Вставить("СкладПредставление", Шапка.СкладПредставление);
		ДанныеПечати.Вставить("ПолучательПредставление", "Розничный покупатель");
		
		ТаблицаТовары = Шапка.Товары.Выгрузить();
		ТаблицаУслуги = Шапка.Услуги.Выгрузить();

		Всего = ТаблицаТовары.Итог("Всего") + ТаблицаУслуги.Итог("Всего");
		ВсегоНДС = ТаблицаТовары.Итог("СуммаНДС") + ТаблицаУслуги.Итог("СуммаНДС");
		ВсегоНСП = ТаблицаТовары.Итог("СуммаНСП") + ТаблицаУслуги.Итог("СуммаНСП");
		КоличествоНаименований = ТаблицаТовары.Количество() + ТаблицаУслуги.Количество();		
		
		ДанныеПечати.Вставить("Всего", Всего);
		ДанныеПечати.Вставить("ВсегоНДС", ВсегоНДС);
		ДанныеПечати.Вставить("ВсегоНСП", ВсегоНСП);
		ДанныеПечати.Вставить("ИтоговаяСтрока", 
			СтрШаблон(НСтр("ru = 'Всего наименований %1, на сумму %2'"), 
			Формат(КоличествоНаименований, "ЧН=0; ЧГ=0"), Формат(ДанныеПечати.Всего, "ЧЦ=15; ЧДЦ=2")));
		ДанныеПечати.Вставить("СуммаПрописью", БухгалтерскийУчетСервер.СформироватьСуммуПрописью(ДанныеПечати.Всего, Шапка.ВалютаДокумента));
		
		// Области
		МассивОбластейМакета = Новый Массив;
		МассивОбластейМакета.Добавить("Заголовок");
		МассивОбластейМакета.Добавить("ШапкаТаблицы");
		МассивОбластейМакета.Добавить("Строка");
		МассивОбластейМакета.Добавить("Подвал");
		МассивОбластейМакета.Добавить("Итоги");
		МассивОбластейМакета.Добавить("ИтогиНДС");
		МассивОбластейМакета.Добавить("ИтогиНСП");
		МассивОбластейМакета.Добавить("СуммаПрописью");
		МассивОбластейМакета.Добавить("Подписи");
		
		Для Каждого ИмяОбласти Из МассивОбластейМакета Цикл
			
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
			
			Если ИмяОбласти = "Строка" Тогда 
				Для Каждого СтрокаТаблицы Из ТаблицаТовары Цикл
					ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
				Для Каждого СтрокаТаблицы Из ТаблицаУслуги Цикл
					ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
			Иначе 
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьМакета);	
			КонецЕсли;	
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;

	Возврат ТабличныйДокумент;

КонецФункции

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТоварныйЧек") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТоварныйЧек", НСтр("ru = 'Товарный чек'"),
			ПечатьТоварногоЧека(МассивОбъектов, ОбъектыПечати, ПараметрыПечати), , "Документ.РозничнаяПродажа.ПФ_MXL_ТоварныйЧек");
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Товарный чек
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТоварныйЧек";
	КомандаПечати.Представление = НСтр("ru = 'Товарный чек'");
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 1;

	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "РеестрРозничнаяПродажа";
	КомандаПечати.Представление  = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Реестр документов ""Реализация товаров и услуг""'");
	КомандаПечати.Обработчик     = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 99;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеОРП

Функция ЕстьПравоПриемРозничнойВыручки(Организация)
	
	Если НЕ ПравоДоступа("Добавление", Метаданные.Документы.ПриходныйКассовыйОрдер) Тогда
		ЕстьПравоПриемРозничнойВыручки = Ложь;
	ИначеЕсли Пользователи.ЭтоПолноправныйПользователь() ИЛИ НЕ УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() Тогда
		ЕстьПравоПриемРозничнойВыручки = Истина;
	Иначе
		НачатьТранзакцию();
		Попытка
			ДокументОбъект = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
			ДокументОбъект.Заполнить(Новый Структура("Организация, ВидОперации", Организация, Перечисления.ВидыОперацийПКО.РозничнаяВыручка));
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			ЕстьПравоПриемРозничнойВыручки = Истина;
		Исключение
			ЕстьПравоПриемРозничнойВыручки = Ложь;
		КонецПопытки;
		ОтменитьТранзакцию();
	КонецЕсли;
	
	Возврат ЕстьПравоПриемРозничнойВыручки;
КонецФункции

Функция ЕстьПравоВозвратРозничнойВыручки(Организация)
	
	Если НЕ ПравоДоступа("Добавление", Метаданные.Документы.ПриходныйКассовыйОрдер) Тогда
		ЕстьПравоПриемРозничнойВыручки = Ложь;
	ИначеЕсли Пользователи.ЭтоПолноправныйПользователь() ИЛИ НЕ УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() Тогда
		ЕстьПравоПриемРозничнойВыручки = Истина;
	Иначе
		НачатьТранзакцию();
		Попытка
			ДокументОбъект = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
			ДокументОбъект.Заполнить(Новый Структура("Организация, ВидОперации", Организация, Перечисления.ВидыОперацийРКО.ВозвратРозничномуПокупателю));
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			ЕстьПравоПриемРозничнойВыручки = Истина;
		Исключение
			ЕстьПравоПриемРозничнойВыручки = Ложь;
		КонецПопытки;
		ОтменитьТранзакцию();
	КонецЕсли;
	
	Возврат ЕстьПравоПриемРозничнойВыручки;
КонецФункции

Функция ТекстЗапросаНезакрытыеЧеки(СписокТаблиц)
	
	СписокТаблиц.Вставить("ВТ_РозничныеЧекиКПогашению",		СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ВТ_Продажи",						СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ВТ_Возвраты",					СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ТаблицаЧеки",					СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ТаблицаДокументы",				СписокТаблиц.Количество());
	
	СписокТаблиц.Вставить("ТаблицаТовары",					СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ТаблицаВозвраты",				СписокТаблиц.Количество());
	
	СписокТаблиц.Вставить("ТаблицаУслуги",					СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ТаблицаВозвратУслуг",			СписокТаблиц.Количество());
	
	СписокТаблиц.Вставить("ТаблицаПодарочныеСертификаты",	СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ТаблицаОплаты",					СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ТаблицаВозвратОплаты",			СписокТаблиц.Количество());

	ТекстыЗапроса = Новый Массив;
	
	// ВременнаяТаблица РозничныеЧекиКПогашению
	// Выбираются все проведенные Чеки по подключенному устройству
	// и ранее не закрытые в ОРП.
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РозничнаяПродажа.Ссылка КАК Ссылка,
		|	РозничнаяПродажа.Организация КАК Организация,
		|	РозничнаяПродажа.Склад КАК Склад,
		|	РозничнаяПродажа.Касса КАК Касса,
		|	РозничнаяПродажа.БезналичныйРасчет КАК БезналичныйРасчет,
		|	РозничнаяПродажа.ВидОплаты КАК ВидОплаты,
		|	РозничнаяПродажа.СуммаОплаты КАК СуммаОплаты,
		|	РозничнаяПродажа.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРозничнаяПродажа.Возврат) КАК ЭтоВозврат,
		|	ЕСТЬNULL(РозничнаяПродажа.ДокументОснование.ОтчетОРозничныхПродажах, ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка) КАК ЭтоВозвратЗакрытогоПериода
		|ПОМЕСТИТЬ ВТ_РозничныеЧекиКПогашению
		|ИЗ
		|	Документ.РозничнаяПродажа КАК РозничнаяПродажа
		|ГДЕ
		|	РозничнаяПродажа.ОтчетОРозничныхПродажах = ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка)
		|	И РозничнаяПродажа.ИдентификаторУстройства = &ИдентификаторУстройства
		|	И РозничнаяПродажа.Проведен
		|	И РозничнаяПродажа.Организация = &Организация
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка,
		|	ЭтоВозврат";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// ВременнаяТаблица Продажи
	// Отсекаются возвраты.
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РозничныеЧекиКПогашению.Ссылка КАК Ссылка,
		|	РозничныеЧекиКПогашению.Организация КАК Организация,
		|	РозничныеЧекиКПогашению.Склад КАК Склад,
		|	РозничныеЧекиКПогашению.Касса КАК Касса,
		|	РозничныеЧекиКПогашению.БезналичныйРасчет КАК БезналичныйРасчет,
		|	РозничныеЧекиКПогашению.ВидОплаты КАК ВидОплаты,
		|	РозничныеЧекиКПогашению.СуммаОплаты КАК СуммаОплаты
		|ПОМЕСТИТЬ ВТ_Продажи
		|ИЗ
		|	ВТ_РозничныеЧекиКПогашению КАК РозничныеЧекиКПогашению
		|ГДЕ
		|	НЕ РозничныеЧекиКПогашению.ЭтоВозврат";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// ВременнаяТаблица Возвраты
	// Отсекаются продажи.
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РозничныеЧекиКПогашению.Ссылка КАК Ссылка,
		|	РозничнаяПродажа.ДокументОснование КАК ДокументОснование,
		|	РозничныеЧекиКПогашению.Организация КАК Организация,
		|	РозничныеЧекиКПогашению.Склад КАК Склад,
		|	РозничныеЧекиКПогашению.Касса КАК Касса,
		|	РозничныеЧекиКПогашению.БезналичныйРасчет КАК БезналичныйРасчет,
		|	РозничныеЧекиКПогашению.ВидОплаты КАК ВидОплаты,
		|	РозничныеЧекиКПогашению.СуммаОплаты КАК СуммаОплаты,
		|	РозничнаяПродажа.СуммаДокумента КАК СуммаДокумента
		|ПОМЕСТИТЬ ВТ_Возвраты
		|ИЗ
		|	ВТ_РозничныеЧекиКПогашению КАК РозничныеЧекиКПогашению
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа КАК РозничнаяПродажа
		|		ПО РозничныеЧекиКПогашению.Ссылка = РозничнаяПродажа.Ссылка
		|ГДЕ
		|	РозничныеЧекиКПогашению.ЭтоВозврат";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Таблица чеки.
	// По этой таблице производим обход чеков для заполнения реквизита ОтчетОРозничныхПродажах.
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РозничныеЧекиКПогашению.Ссылка КАК РозничнаяПродажа,
		|	РозничныеЧекиКПогашению.Организация КАК Организация,
		|	РозничныеЧекиКПогашению.Склад КАК Склад,
		|	РозничныеЧекиКПогашению.Касса КАК Касса
		|ИЗ
		|	ВТ_РозничныеЧекиКПогашению КАК РозничныеЧекиКПогашению
		|
		|СГРУППИРОВАТЬ ПО
		|	РозничныеЧекиКПогашению.Ссылка,
		|	РозничныеЧекиКПогашению.Склад,
		|	РозничныеЧекиКПогашению.Организация,
		|	РозничныеЧекиКПогашению.Касса";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Таблица Документы.
	// Группируем все чеки в разрезе Организация, Склад, Касса
	// для формирования ОРП.
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РозничныеЧекиКПогашению.Организация КАК Организация,
		|	РозничныеЧекиКПогашению.Склад КАК Склад,
		|	РозничныеЧекиКПогашению.Касса КАК Касса,
		|	НЕОПРЕДЕЛЕНО КАК ОтчетОРозничныхПродажах
		|ИЗ
		|	ВТ_РозничныеЧекиКПогашению КАК РозничныеЧекиКПогашению
		|
		|СГРУППИРОВАТЬ ПО
		|	РозничныеЧекиКПогашению.Организация,
		|	РозничныеЧекиКПогашению.Склад,
		|	РозничныеЧекиКПогашению.Касса";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Таблица Товары
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВременнаяТаблицаПродажи.Организация КАК Организация,
		|	ВременнаяТаблицаПродажи.Склад КАК Склад,
		|	ВременнаяТаблицаПродажи.Касса КАК Касса,
		|	ВременнаяТаблицаПродажи.БезналичныйРасчет КАК БезналичныйРасчет,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Цена КАК Цена,
		|	СУММА(ТаблицаТовары.Количество) КАК Количество,
		|	СУММА(ТаблицаТовары.Сумма) КАК Сумма,
		|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаТовары.СтавкаНСП КАК СтавкаНСП,
		|	СУММА(ТаблицаТовары.СуммаНДС) КАК СуммаНДС,
		|	СУММА(ТаблицаТовары.СуммаНСП) КАК СуммаНСП,
		|	СУММА(ТаблицаТовары.Всего) КАК Всего,
		|	ТаблицаТовары.СчетУчета КАК СчетУчета,
		|	ТаблицаТовары.СчетДоходов КАК СчетДоходов,
		|	ТаблицаТовары.СчетСебестоимости КАК СчетСебестоимости,
		|	ТаблицаТовары.СтатьяРасходов КАК СтатьяРасходов,
		|	ТаблицаТовары.СтатьяДоходов КАК СтатьяДоходов,
		|	ТаблицаТовары.ВидДеятельности КАК ВидДеятельности
		|ИЗ
		|	ВТ_Продажи КАК ВременнаяТаблицаПродажи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа.Товары КАК ТаблицаТовары
		|		ПО ВременнаяТаблицаПродажи.Ссылка = ТаблицаТовары.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.СтатьяРасходов,
		|	ТаблицаТовары.СтавкаНДС,
		|	ТаблицаТовары.СтатьяДоходов,
		|	ТаблицаТовары.СчетСебестоимости,
		|	ТаблицаТовары.СтавкаНСП,
		|	ВременнаяТаблицаПродажи.Склад,
		|	ТаблицаТовары.СчетУчета,
		|	ТаблицаТовары.ВидДеятельности,
		|	ВременнаяТаблицаПродажи.Касса,
		|	ВременнаяТаблицаПродажи.БезналичныйРасчет,
		|	ТаблицаТовары.СчетДоходов,
		|	ВременнаяТаблицаПродажи.Организация,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Цена
		|
		|ИМЕЮЩИЕ
		|	(СУММА(ТаблицаТовары.Количество) <> 0
		|		ИЛИ СУММА(ТаблицаТовары.Сумма) <> 0
		|		ИЛИ СУММА(ТаблицаТовары.СуммаНДС) <> 0
		|		ИЛИ СУММА(ТаблицаТовары.СуммаНСП) <> 0
		|		ИЛИ СУММА(ТаблицаТовары.Всего) <> 0)";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Таблица Возвраты (Товары)
	// Определяем Дату реализации 
	// (далее по этой дате будет определена Сделка и произведен контроль перерасхода возврата).
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка.НомерЧекаККМ КАК НомерФискальногоЧека,
		|	ВЫБОР
		|		КОГДА НЕ ПродажиТекущейСмены.Ссылка ЕСТЬ NULL
		|			ТОГДА &ДатаДокумента
		|		ИНАЧЕ ЕСТЬNULL(ОснованиеВозврата.ОтчетОРозничныхПродажах.Дата, НЕОПРЕДЕЛЕНО)
		|	КОНЕЦ КАК ДатаРеализации,
		|	РозничныеЧекиКПогашению.Организация КАК Организация,
		|	РозничныеЧекиКПогашению.Склад КАК Склад,
		|	РозничныеЧекиКПогашению.Касса КАК Касса,
		|	РозничныеЧекиКПогашению.БезналичныйРасчет КАК БезналичныйРасчет,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Цена КАК Цена,
		|	СУММА(ТаблицаТовары.Количество) КАК Количество,
		|	СУММА(ТаблицаТовары.Сумма) КАК Сумма,
		|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаТовары.СтавкаНСП КАК СтавкаНСП,
		|	СУММА(ТаблицаТовары.СуммаНДС) КАК СуммаНДС,
		|	СУММА(ТаблицаТовары.СуммаНСП) КАК СуммаНСП,
		|	СУММА(ТаблицаТовары.Всего) КАК Всего,
		|	ТаблицаТовары.СчетУчета КАК СчетУчета,
		|	ТаблицаТовары.СчетДоходов КАК СчетДоходов,
		|	ТаблицаТовары.СчетСебестоимости КАК СчетСебестоимости,
		|	ТаблицаТовары.СтатьяРасходов КАК СтатьяРасходов,
		|	ТаблицаТовары.СтатьяДоходов КАК СтатьяДоходов,
		|	ТаблицаТовары.ВидДеятельности КАК ВидДеятельности
		|ИЗ
		|	ВТ_Возвраты КАК РозничныеЧекиКПогашению
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа.Товары КАК ТаблицаТовары
		|		ПО РозничныеЧекиКПогашению.Ссылка = ТаблицаТовары.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа КАК ОснованиеВозврата
		|		ПО РозничныеЧекиКПогашению.ДокументОснование = ОснованиеВозврата.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Продажи КАК ПродажиТекущейСмены
		|		ПО РозничныеЧекиКПогашению.ДокументОснование = ПродажиТекущейСмены.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА НЕ ПродажиТекущейСмены.Ссылка ЕСТЬ NULL
		|			ТОГДА &ДатаДокумента
		|		ИНАЧЕ ЕСТЬNULL(ОснованиеВозврата.ОтчетОРозничныхПродажах.Дата, НЕОПРЕДЕЛЕНО)
		|	КОНЕЦ,
		|	ТаблицаТовары.СчетСебестоимости,
		|	РозничныеЧекиКПогашению.Склад,
		|	РозничныеЧекиКПогашению.Организация,
		|	ТаблицаТовары.ВидДеятельности,
		|	ТаблицаТовары.СчетУчета,
		|	ТаблицаТовары.СчетДоходов,
		|	ТаблицаТовары.СтатьяРасходов,
		|	ТаблицаТовары.СтавкаНСП,
		|	РозничныеЧекиКПогашению.Касса,
		|	РозничныеЧекиКПогашению.БезналичныйРасчет,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.СтатьяДоходов,
		|	ТаблицаТовары.СтавкаНДС,
		|	ТаблицаТовары.Ссылка.НомерЧекаККМ,
		|	ТаблицаТовары.Цена
		|
		|ИМЕЮЩИЕ
		|	(СУММА(ТаблицаТовары.Количество) <> 0
		|		ИЛИ СУММА(ТаблицаТовары.Сумма) <> 0
		|		ИЛИ СУММА(ТаблицаТовары.СуммаНДС) <> 0
		|		ИЛИ СУММА(ТаблицаТовары.СуммаНСП) <> 0
		|		ИЛИ СУММА(ТаблицаТовары.Всего) <> 0)";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Таблица Услуги
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВременнаяТаблицаПродажи.Организация КАК Организация,
		|	ВременнаяТаблицаПродажи.Склад КАК Склад,
		|	ВременнаяТаблицаПродажи.Касса КАК Касса,
		|	ВременнаяТаблицаПродажи.БезналичныйРасчет КАК БезналичныйРасчет,
		|	ТаблицаУслуги.Номенклатура КАК Номенклатура,
		|	ТаблицаУслуги.Цена КАК Цена,
		|	СУММА(ТаблицаУслуги.Количество) КАК Количество,
		|	СУММА(ТаблицаУслуги.Сумма) КАК Сумма,
		|	ТаблицаУслуги.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаУслуги.СтавкаНСП КАК СтавкаНСП,
		|	СУММА(ТаблицаУслуги.СуммаНДС) КАК СуммаНДС,
		|	СУММА(ТаблицаУслуги.СуммаНСП) КАК СуммаНСП,
		|	СУММА(ТаблицаУслуги.Всего) КАК Всего,
		|	ТаблицаУслуги.СчетДоходов КАК СчетДоходов,
		|	ТаблицаУслуги.СтатьяДоходов КАК СтатьяДоходов,
		|	ТаблицаУслуги.ВидДеятельности КАК ВидДеятельности
		|ИЗ
		|	ВТ_Продажи КАК ВременнаяТаблицаПродажи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа.Услуги КАК ТаблицаУслуги
		|		ПО ВременнаяТаблицаПродажи.Ссылка = ТаблицаУслуги.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаУслуги.СтавкаНДС,
		|	ВременнаяТаблицаПродажи.Организация,
		|	ТаблицаУслуги.Номенклатура,
		|	ВременнаяТаблицаПродажи.Склад,
		|	ВременнаяТаблицаПродажи.Касса,
		|	ВременнаяТаблицаПродажи.БезналичныйРасчет,
		|	ТаблицаУслуги.СтавкаНСП,
		|	ТаблицаУслуги.СтатьяДоходов,
		|	ТаблицаУслуги.ВидДеятельности,
		|	ТаблицаУслуги.СчетДоходов,
		|	ТаблицаУслуги.Цена
		|
		|ИМЕЮЩИЕ
		|	(СУММА(ТаблицаУслуги.Количество) <> 0
		|		ИЛИ СУММА(ТаблицаУслуги.Сумма) <> 0
		|		ИЛИ СУММА(ТаблицаУслуги.СуммаНДС) <> 0
		|		ИЛИ СУММА(ТаблицаУслуги.СуммаНСП) <> 0
		|		ИЛИ СУММА(ТаблицаУслуги.Всего) <> 0)";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Таблица Возврат услуг
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РозничныеЧекиКПогашению.Организация КАК Организация,
		|	РозничныеЧекиКПогашению.Склад КАК Склад,
		|	РозничныеЧекиКПогашению.Касса КАК Касса,
		|	РозничныеЧекиКПогашению.БезналичныйРасчет КАК БезналичныйРасчет,
		|	ТаблицаУслуги.Номенклатура КАК Номенклатура,
		|	ТаблицаУслуги.Цена КАК Цена,
		|	СУММА(ТаблицаУслуги.Количество) КАК Количество,
		|	СУММА(ТаблицаУслуги.Сумма) КАК Сумма,
		|	ТаблицаУслуги.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаУслуги.СтавкаНСП КАК СтавкаНСП,
		|	СУММА(ТаблицаУслуги.СуммаНДС) КАК СуммаНДС,
		|	СУММА(ТаблицаУслуги.СуммаНСП) КАК СуммаНСП,
		|	СУММА(ТаблицаУслуги.Всего) КАК Всего,
		|	ТаблицаУслуги.СчетДоходов КАК СчетДоходов,
		|	ТаблицаУслуги.СтатьяДоходов КАК СтатьяДоходов,
		|	ТаблицаУслуги.ВидДеятельности КАК ВидДеятельности
		|ИЗ
		|	ВТ_Возвраты КАК РозничныеЧекиКПогашению
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа.Услуги КАК ТаблицаУслуги
		|		ПО РозничныеЧекиКПогашению.Ссылка = ТаблицаУслуги.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	РозничныеЧекиКПогашению.Склад,
		|	РозничныеЧекиКПогашению.Организация,
		|	ТаблицаУслуги.ВидДеятельности,
		|	ТаблицаУслуги.СчетДоходов,
		|	ТаблицаУслуги.СтавкаНСП,
		|	РозничныеЧекиКПогашению.Касса,
		|	РозничныеЧекиКПогашению.БезналичныйРасчет,
		|	ТаблицаУслуги.Номенклатура,
		|	ТаблицаУслуги.СтатьяДоходов,
		|	ТаблицаУслуги.СтавкаНДС,
		|	ТаблицаУслуги.Цена
		|
		|ИМЕЮЩИЕ
		|	(СУММА(ТаблицаУслуги.Количество) <> 0
		|		ИЛИ СУММА(ТаблицаУслуги.Сумма) <> 0
		|		ИЛИ СУММА(ТаблицаУслуги.СуммаНДС) <> 0
		|		ИЛИ СУММА(ТаблицаУслуги.СуммаНСП) <> 0
		|		ИЛИ СУММА(ТаблицаУслуги.Всего) <> 0)";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Таблица ПодарочныеСертификаты
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РозничныеЧекиКПогашению.Организация КАК Организация,
		|	РозничныеЧекиКПогашению.Склад КАК Склад,
		|	РозничныеЧекиКПогашению.Касса КАК Касса,
		|	ТаблицаПодарочныеСертификаты.ВидОплаты КАК ВидОплаты,
		|	СУММА(ТаблицаПодарочныеСертификаты.Сумма * ВЫБОР
		|			КОГДА РозничныеЧекиКПогашению.ЭтоВозврат
		|				ТОГДА -1
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК Сумма
		|ИЗ
		|	ВТ_РозничныеЧекиКПогашению КАК РозничныеЧекиКПогашению
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа.ПодарочныеСертификаты КАК ТаблицаПодарочныеСертификаты
		|		ПО РозничныеЧекиКПогашению.Ссылка = ТаблицаПодарочныеСертификаты.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаПодарочныеСертификаты.ВидОплаты,
		|	РозничныеЧекиКПогашению.Организация,
		|	РозничныеЧекиКПогашению.Склад,
		|	РозничныеЧекиКПогашению.Касса
		|
		|ИМЕЮЩИЕ
		|	СУММА(ТаблицаПодарочныеСертификаты.Сумма) <> 0";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Таблица Оплаты (безнал)
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РозничныеЧекиКПогашению.Ссылка КАК Ссылка,
		|	РозничныеЧекиКПогашению.Организация КАК Организация,
		|	РозничныеЧекиКПогашению.Склад КАК Склад,
		|	РозничныеЧекиКПогашению.Касса КАК Касса,
		|	РозничныеЧекиКПогашению.ВидОплаты КАК ВидОплаты,
		|	РозничныеЧекиКПогашению.СуммаОплаты КАК СуммаОплаты
		|ИЗ
		|	ВТ_Продажи КАК РозничныеЧекиКПогашению
		|ГДЕ
		|	РозничныеЧекиКПогашению.БезналичныйРасчет
		|	И РозничныеЧекиКПогашению.СуммаОплаты <> 0";
	ТекстыЗапроса.Добавить(ТекстЗапроса);

	// Таблица Возврат оплат (безнал).
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РозничныеЧекиКПогашению.Ссылка КАК Ссылка,
		|	РозничныеЧекиКПогашению.Организация КАК Организация,
		|	РозничныеЧекиКПогашению.Склад КАК Склад,
		|	РозничныеЧекиКПогашению.Касса КАК Касса,
		|	РозничныеЧекиКПогашению.ВидОплаты КАК ВидОплаты,
		|	РозничныеЧекиКПогашению.СуммаОплаты КАК СуммаОплаты
		|ИЗ
		|	ВТ_Возвраты КАК РозничныеЧекиКПогашению
		|ГДЕ
		|	РозничныеЧекиКПогашению.БезналичныйРасчет
		|	И РозничныеЧекиКПогашению.СуммаОплаты <> 0";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	Возврат ТекстЗапроса;
КонецФункции 

Функция СформироватьОтчетыОРозничныхПродажах(Организация, ИдентификаторУстройства) Экспорт
	
	Запрос = Новый Запрос;
	
	ДанныеРозничныхПродаж = Новый Структура;
	
	//ДатаДокумента = ОбщегоНазначения.ТекущаяДатаПользователя();
	ДатаДокумента = ТекущаяДатаСеанса();
	
	Запрос.Текст = ТекстЗапросаНезакрытыеЧеки(ДанныеРозничныхПродаж);
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
	Запрос.УстановитьПараметр("ИдентификаторУстройства", ИдентификаторУстройства);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ПараметрыЗаполнения = Новый Структура;
	Для Каждого КлючИЗначение Из ДанныеРозничныхПродаж Цикл
		ПараметрыЗаполнения.Вставить(КлючИЗначение.Ключ, РезультатЗапроса[КлючИЗначение.Значение].Выгрузить());
	КонецЦикла; 
	
	ДанныеЗаполнения = Новый Структура("Организация, Склад, Касса");
	
	ЕстьПравоПриемРозничнойВыручки = ЕстьПравоПриемРозничнойВыручки(Организация);
	ЕстьПравоВозвратРозничнойВыручки = ЕстьПравоВозвратРозничнойВыручки(Организация);
	
	ТаблицаВозвратОплаты = ПараметрыЗаполнения.ТаблицаВозвратОплаты;
	ТаблицаОплаты        = ПараметрыЗаполнения.ТаблицаОплаты;
	
	ТаблицаВозвратОплаты.Свернуть("Организация, Склад, ВидОплаты, Касса", "СуммаОплаты");
	ТаблицаОплаты.Свернуть("Организация, Склад, ВидОплаты, Касса", "СуммаОплаты");
	
	ДокументыКПроведению = Новый Массив;	
	
	НачатьТранзакцию();	
	
	Для Каждого СтрокаДокументы Из ПараметрыЗаполнения.ТаблицаДокументы Цикл
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, СтрокаДокументы);
		
		ПараметрыРозничнойПродажи = КассовыеСменыВызовСервераБП.ПараметрыРозничныхПродаж(Организация, ДанныеЗаполнения.Касса);
		СчетаУчета = БухгалтерскийУчетВызовСервера.ПолучитьСчетаРасчетовСКонтрагентом(Организация, ПараметрыРозничнойПродажи.Контрагент, ПараметрыРозничнойПродажи.ДоговорКонтрагента);
		СчетаУчета.Вставить("СчетРасчетовДт", СчетаУчета.СчетРасчетовПокупателя);
		СчетаУчета.Вставить("СчетРасчетовКт", СчетаУчета.СчетРасчетовПокупателя.ПарныйСчет);
		
		ТоварыПоДокументу = ПараметрыЗаполнения.ТаблицаТовары.Скопировать(ДанныеЗаполнения);
		ВозвратыПоДокументу = ПараметрыЗаполнения.ТаблицаВозвраты.Скопировать(ДанныеЗаполнения);
		
		УслугиПоДокументу = ПараметрыЗаполнения.ТаблицаУслуги.Скопировать(ДанныеЗаполнения);
		ВозвратУслугПоДокументу = ПараметрыЗаполнения.ТаблицаВозвратУслуг.Скопировать(ДанныеЗаполнения);
		
		ПодарочныеСертификатыПоДокументу = ПараметрыЗаполнения.ТаблицаПодарочныеСертификаты.Скопировать(ДанныеЗаполнения);
		ОплатаПоДокументу = ТаблицаОплаты.Скопировать(ДанныеЗаполнения);
		ВозвратыОплат = ТаблицаВозвратОплаты.Скопировать(ДанныеЗаполнения);
		
		// Не создаем документ, если все его табличные части будут пустыми.
		Если ТоварыПоДокументу.Количество() = 0
			И ВозвратыПоДокументу.Количество() = 0
			
			И УслугиПоДокументу.Количество() = 0
			И ВозвратУслугПоДокументу.Количество() = 0
			
			И ПодарочныеСертификатыПоДокументу.Количество() = 0 
			И ОплатаПоДокументу.Количество() = 0 Тогда
			
			Продолжить;
		КонецЕсли;
		
		//Для Каждого СтрокаТовары Из ТоварыПоДокументу Цикл
		//	Если Не СтрокаТовары.СуммаВключаетНалоги Тогда
		//		СтрокаТовары.Сумма = СтрокаТовары.Сумма + СтрокаТовары.СуммаНДС + СтрокаТовары.СуммаНСП;
		//		СтрокаТовары.Цена  = ?(СтрокаТовары.Количество <> 0, СтрокаТовары.Сумма/СтрокаТовары.Количество, 0);
		//	КонецЕсли; 
		//КонецЦикла;
		//
		//Для Каждого СтрокаТовары Из ВозвратыПоДокументу Цикл
		//	Если Не СтрокаТовары.СуммаВключаетНалоги Тогда
		//		СтрокаТовары.Сумма = СтрокаТовары.Сумма + СтрокаТовары.СуммаНДС + СтрокаТовары.СуммаНСП;
		//		СтрокаТовары.Цена  = ?(СтрокаТовары.Количество <> 0, СтрокаТовары.Сумма/СтрокаТовары.Количество, 0);
		//	КонецЕсли; 
		//КонецЦикла;
		
		ОтчетОРозничныхПродажах = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
		ОтчетОРозничныхПродажах.Дата = ДатаДокумента;
		//ОтчетОРозничныхПродажах.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах;
		ДанныеЗаполненияДокумента = Новый Структура;
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДанныеЗаполненияДокумента, ДанныеЗаполнения);
		ОтчетОРозничныхПродажах.Заполнить(ДанныеЗаполненияДокумента);
		
		ОтчетОРозничныхПродажах.Контрагент = ПараметрыРозничнойПродажи.Контрагент;
		ОтчетОРозничныхПродажах.ДоговорКонтрагента = ПараметрыРозничнойПродажи.ДоговорКонтрагента;
		ОтчетОРозничныхПродажах.СтатьяДвиженияДенежныхСредств = ПараметрыРозничнойПродажи.СтатьяДвиженияДенежныхСредств;
		
		ОтчетОРозничныхПродажах.СчетРасчетовДт = СчетаУчета.СчетРасчетовДт;
		ОтчетОРозничныхПродажах.СчетРасчетовКт = СчетаУчета.СчетРасчетовКт;

		// Заполнение табличных частей.		
		ОтчетОРозничныхПродажах.Товары.Загрузить(ТоварыПоДокументу);
		ОтчетОРозничныхПродажах.Возвраты.Загрузить(ВозвратыПоДокументу);
		
		ОтчетОРозничныхПродажах.Услуги.Загрузить(УслугиПоДокументу);
		ОтчетОРозничныхПродажах.ВозвратУслуг.Загрузить(ВозвратУслугПоДокументу);
		
		ОтчетОРозничныхПродажах.ПодарочныеСертификаты.Загрузить(ПодарочныеСертификатыПоДокументу);
		ОтчетОРозничныхПродажах.Оплата.Загрузить(ОплатаПоДокументу);
		ОтчетОРозничныхПродажах.ВозвратОплаты.Загрузить(ВозвратыОплат);
		
		ОтчетОРозничныхПродажах.Комментарий = НСтр("ru = 'Создан автоматически закрытием кассовой смены'");
		
		ОтчетОРозничныхПродажах.ДополнительныеСвойства.Вставить("ЗаполнитьСчетаУчетаПередЗаписью", Истина);
		
		ОтчетОРозничныхПродажах.Записать(РежимЗаписиДокумента.Запись);
		ДокументыКПроведению.Добавить(ОтчетОРозничныхПродажах.Ссылка);
		
		СуммаПродаж = ОтчетОРозничныхПродажах.Товары.Итог("Всего") 
			+ ОтчетОРозничныхПродажах.Услуги.Итог("Всего") 
			+ ОтчетОРозничныхПродажах.ПодарочныеСертификаты.Итог("Сумма");
			
		// Если есть продажи оплаченные наличными
		Если ОтчетОРозничныхПродажах.Оплата.Итог("СуммаОплаты") < СуммаПродаж
			И ЕстьПравоПриемРозничнойВыручки Тогда
			ПриходныйОрдер = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
			ПриходныйОрдер.Дата = ДатаДокумента;
			ПриходныйОрдер.Заполнить(ОтчетОРозничныхПродажах.Ссылка);
			Если ПриходныйОрдер.СуммаДокумента > 0 Тогда 
				ПриходныйОрдер.Записать(РежимЗаписиДокумента.Запись);
				ДокументыКПроведению.Добавить(ПриходныйОрдер.Ссылка);
			КонецЕсли;	
		КонецЕсли;
		
		// Если есть возвраты оплаченные наличными
		Если ОтчетОРозничныхПродажах.ВозвратОплаты.Итог("СуммаОплаты") < ОтчетОРозничныхПродажах.Возвраты.Итог("Всего") + ОтчетОРозничныхПродажах.ВозвратУслуг.Итог("Всего")
			И ЕстьПравоВозвратРозничнойВыручки Тогда
			РасходныйОрдер = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
			РасходныйОрдер.Дата = ДатаДокумента;
			РасходныйОрдер.Заполнить(ОтчетОРозничныхПродажах.Ссылка);
			Если РасходныйОрдер.СуммаДокумента > 0  Тогда 
				РасходныйОрдер.Записать(РежимЗаписиДокумента.Запись);
				ДокументыКПроведению.Добавить(РасходныйОрдер.Ссылка);
			КонецЕсли;	
		КонецЕсли;
		
		СтрокаДокументы.ОтчетОРозничныхПродажах = ОтчетОРозничныхПродажах.Ссылка;
		
	КонецЦикла;
	
	Для Каждого СтрокаПоЧеку Из ПараметрыЗаполнения.ТаблицаЧеки Цикл
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, СтрокаПоЧеку);
		
		НайденныеСтроки = ПараметрыЗаполнения.ТаблицаДокументы.НайтиСтроки(ДанныеЗаполнения);
		
		Если НайденныеСтроки.Количество() = 1 Тогда
			ДокументОбъект = СтрокаПоЧеку.РозничнаяПродажа.ПолучитьОбъект();
			ДокументОбъект.ОтчетОРозничныхПродажах = НайденныеСтроки[0].ОтчетОРозничныхПродажах;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	ПровестиДокументы(ДокументыКПроведению);
	
	Возврат ПараметрыЗаполнения.ТаблицаДокументы.ВыгрузитьКолонку("ОтчетОРозничныхПродажах");
	
КонецФункции

// Выполняет попытку проведения документов.
//
// Параметры:
//  ДокументыКПроведению - Массив - документы, которые необходимо провести.
//
Процедура ПровестиДокументы(ДокументыКПроведению)
	
	НепроведенныеДокументы = ОбщегоНазначения.ПровестиДокументы(ДокументыКПроведению);
	Для Каждого РезультатПроведения Из НепроведенныеДокументы Цикл
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Не проведен документ %1: %2'"),
			Строка(РезультатПроведения.Ссылка), РезультатПроведения.ОписаниеОшибки),
			РезультатПроведения.Ссылка, "Объект");
	КонецЦикла;
	
КонецПроцедуры
	
#КонецОбласти 

// Возвращает заголовок документа для печатной формы.
//
// Параметры:
//  Шапка - любая структура с полями:
//           Номер         - Строка или Число - номер документа;
//           Дата          - Дата - дата документа;
//           Представление - Строка - (необязательный) платформенное представление ссылки на документ.
//                                    Если параметр НазваниеДокумента не задан, то название документа будет вычисляться
//                                    из этого параметра.
//  НазваниеДокумента - Строка - название документа (например, "Счет на оплату").
//
// Возвращаемое значение:
//  Строка - заголовок документа.
//
Функция СформироватьЗаголовокДокумента(Шапка, Знач НазваниеДокумента = "")
	
	ДанныеДокумента = Новый Структура("Номер,Дата,Представление");
	ЗаполнитьЗначенияСвойств(ДанныеДокумента, Шапка);
	
	// Если название документа не передано, получим название по представлению документа.
	Если ПустаяСтрока(НазваниеДокумента) И ЗначениеЗаполнено(ДанныеДокумента.Представление) Тогда
		ПоложениеНомера = СтрНайти(ДанныеДокумента.Представление, ДанныеДокумента.Номер);
		Если ПоложениеНомера > 0 Тогда
			НазваниеДокумента = СокрЛП(Лев(ДанныеДокумента.Представление, ПоложениеНомера - 1));
		КонецЕсли;
	КонецЕсли;

	НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеДокумента.Номер);
	Возврат СтрШаблон(НСтр("ru = '%1 № %2 от %3'"),
		НазваниеДокумента, НомерНаПечать, Формат(ДанныеДокумента.Дата, "ДЛФ=DD"));
	
КонецФункции

#КонецОбласти

#КонецЕсли