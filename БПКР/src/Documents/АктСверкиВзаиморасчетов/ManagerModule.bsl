#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПредставленияДокументовДляОрганизации()
	
	ВидыДокументовОрганизации = Новый Структура;
	
	ВидыДокументовОрганизации.Вставить("АвансовыйОтчет",				НСтр("ru = 'Авансовый отчет'"));
	ВидыДокументовОрганизации.Вставить("КорректировкаРегистров",		НСтр("ru = 'Корректировка задолженности'"));
	ВидыДокументовОрганизации.Вставить("ПлатежноеПоручениеВходящее",	НСтр("ru = 'Платежное поручение входящее'"));
	ВидыДокументовОрганизации.Вставить("ОплатаПлатежнойКартой",			НСтр("ru = 'Оплата платежной картой'"));
	ВидыДокументовОрганизации.Вставить("ПриходныйКассовыйОрдер",		НСтр("ru = 'Приходный кассовый ордер'"));
	ВидыДокументовОрганизации.Вставить("ПлатежноеПоручениеИсходящее",	НСтр("ru = 'Платежное поручение исходящее'"));
	ВидыДокументовОрганизации.Вставить("РасходИзКассы",					НСтр("ru = 'Расход из кассы'"));
	ВидыДокументовОрганизации.Вставить("РасходныйКассовыйОрдер",		НСтр("ru = 'Расходный кассовый ордер'"));
	ВидыДокументовОрганизации.Вставить("РеализацияТоваровУслуг", 		НСтр("ru = 'Реализация (товаров, услуг)'"));
	ВидыДокументовОрганизации.Вставить("РеализацияУслугПоПереработке", 	НСтр("ru = 'Реализация услуг по переработке'"));
	ВидыДокументовОрганизации.Вставить("РозничнаяПродажа", 				НСтр("ru = 'Розничная продажа (чек)'"));
	ВидыДокументовОрганизации.Вставить("АктОбОказанииПроизводственныхУслуг", 	НСтр("ru = 'Оказание услуг'"));
	ВидыДокументовОрганизации.Вставить("ПоступлениеТоваровУслуг", 		НСтр("ru = 'Поступление (товаров, услуг)'"));	
	ВидыДокументовОрганизации.Вставить("СчетНаОплатуПокупателю", 		НСтр("ru = 'Счет на оплату'"));
	ВидыДокументовОрганизации.Вставить("СчетФактураВыписанный", 		НСтр("ru = 'Счет-фактура (выданный)'"));
	ВидыДокументовОрганизации.Вставить("СчетФактураПолученный", 		НСтр("ru = 'Счет-фактура (полученный)'"));	
	ВидыДокументовОрганизации.Вставить("ВозвратТоваровОтПокупателя",	НСтр("ru = 'Возврат товаров и услуг от покупателя'"));
	ВидыДокументовОрганизации.Вставить("ВозвратТоваровПоставщику",		НСтр("ru = 'Возврат товаров и услуг поставщику'"));
	ВидыДокументовОрганизации.Вставить("ДополнительныеРасходы",			НСтр("ru = 'Дополнительные расходы'"));
	
	Возврат ВидыДокументовОрганизации;
	
КонецФункции // ПолучитьПредставленияДокументов()

Функция ОписаниеРасчетногоДокументаКонтрагента(ДокументСсылка, Знач НомерДокумента, Знач ДатаДокумента)
	
	// Номер и дату обработаем сразу, так как понадобиться и для пустой ссылки
	НомерДокумента	= ?(ПустаяСтрока(НомерДокумента), НСтр("ru = '_______'"), ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НомерДокумента, Ложь, Истина));
	ДатаДокумента	= ?(ЗначениеЗаполнено(ДатаДокумента), Формат(ДатаДокумента, "ДЛФ=D"), НСтр("ru = '___.___._______'"));
	
	Если ДокументСсылка = Неопределено Тогда
		СтрокаОписания = НСтр("ru = 'Расчетный документ № %1 от %2 г.'");
		СтрокаОписания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаОписания, НомерДокумента, ДатаДокумента);
		
		Возврат СтрокаОписания;
	КонецЕсли;
	
	// Описание документа
	ОписаниеДокумента = "";
	ПредставленияДокументовОрганизации = ПолучитьПредставленияДокументовДляОрганизации();
	ПредставленияДокументовОрганизации.Свойство(ДокументСсылка.Метаданные().Имя, ОписаниеДокумента);
	
	Если ПустаяСтрока(ОписаниеДокумента) Тогда
		ОписаниеДокумента = НСтр("ru = 'Расчетный документ'");
	КонецЕсли;
	
	// Добавка к описанию
	ДобавитьКОписанию = "";
	
	Возврат СтрШаблон(НСтр("ru = '%1 %2 № %3 от %4 г.'"), ОписаниеДокумента, ДобавитьКОписанию, НомерДокумента, ДатаДокумента);
	
КонецФункции // ОписаниеРасчетногоДокументаКонтрагента()

#КонецОбласти

#Область ВерсионированиеОбъектов

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//@skip-warning
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область ИнтерфейсПечати

// Функция формирует табличный документ с печатной формой АктСверки
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьАктаСверки(МассивОбъектов, ОбъектыПечати)
	СписокДокументовСФ = Новый СписокЗначений;
	СписокДокументовСФ.Добавить("СчетФактураВыписанный");	
	СписокДокументовСФ.Добавить("СчетФактураПолученный");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АктСверкиВзаиморасчетов.ДатаНачала КАК ДатаНачала,
		|	АктСверкиВзаиморасчетов.ДатаОкончания КАК ДатаОкончания,
		|	АктСверкиВзаиморасчетов.ДоговорКонтрагента.ВалютаРасчетов КАК Валюта,
		|	АктСверкиВзаиморасчетов.Контрагент КАК Контрагент,
		|	АктСверкиВзаиморасчетов.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	АктСверкиВзаиморасчетов.Организация КАК Организация,
		|	АктСверкиВзаиморасчетов.ОстатокНаНачало КАК ОстатокНаНачало,
		|	АктСверкиВзаиморасчетов.ОстатокНаКонец КАК ОстатокНаКонец,
		|	АктСверкиВзаиморасчетов.СверкаСогласована КАК СверкаСогласована,
		|	АктСверкиВзаиморасчетов.СверкаПоСоцФонду КАК СверкаПоСоцФонду,
		|	АктСверкиВзаиморасчетов.ИсключитьИзПредставленияДокумента КАК ИсключитьИзПредставленияДокумента,
		|	АктСверкиВзаиморасчетов.СШапкойУтверждаю КАК СШапкойУтверждаю,
		|	АктСверкиВзаиморасчетов.ПечатьСчетФактурВместоДокументовРеализации КАК ПечатьСчетФактурВместоДокументовРеализации,
		|	АктСверкиВзаиморасчетов.УчитыватьВзаимозачеты КАК УчитыватьВзаимозачеты,
		|	АктСверкиВзаиморасчетов.Дата КАК Дата,
		|	АктСверкиВзаиморасчетов.ВалютаСверки КАК ВалютаСверки,
		|	АктСверкиВзаиморасчетов.Автор КАК Автор,
		|	АктСверкиВзаиморасчетов.Разногласие КАК Разногласие,
		|	АктСверкиВзаиморасчетов.Организация.ИНН КАК ИНН,
		|	АктСверкиВзаиморасчетов.Организация.КодПоОКПО КАК ОКПО,
		|	АктСверкиВзаиморасчетов.Организация.РегНомерСоцФонда КАК Рег,
		|	АктСверкиВзаиморасчетов.ВыводитьНомерЭСФ КАК ВыводитьНомерЭСФ,
		|	АктСверкиВзаиморасчетов.ПоДаннымОрганизации.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		ДокументСверки КАК ДокументСверки,
		|		ДокументСверки.Номер КАК ДокументСверкиНомер,
		|		ДокументСверки.Дата КАК ДокументСверкиДата,
		|		ДокументСверки.Комментарий КАК ДокументСверкиКомментарий,
		|		ДокументСверки.СерияБланкаСФ КАК ДокументСверкиСерияБланкаСФ,
		|		ДокументСверки.НомерБланкаСФ КАК ДокументСверкиНомерБланкаСФ,
		|		ДокументСверки.ДатаСФ КАК ДокументСверкиДатаСФ,
		|		СуммаДт КАК СуммаДт,
		|		СуммаКт КАК СуммаКт,
		|		0 КАК СуммаДтКонтрагент,
		|		0 КАК СуммаКтКонтрагент,
		|		НомерЭСФ КАК НомерЭСФ
		|	) КАК ПоДаннымОрганизации,
		|	АктСверкиВзаиморасчетов.ПоДаннымКонтрагента.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		ДокументСверки КАК ДокументСверки,
		|		ДокументСверки.Номер КАК ДокументСверкиНомер,
		|		ДокументСверки.Дата КАК ДокументСверкиДата,
		|		ДокументСверки.Комментарий КАК ДокументСверкиКомментарий,
		|		ДокументСверки.СерияБланкаСФ КАК ДокументСверкиСерияБланкаСФ,
		|		ДокументСверки.НомерБланкаСФ КАК ДокументСверкиНомерБланкаСФ,
		|		ДокументСверки.ДатаСФ КАК ДокументСверкиДатаСФ,
		|		СуммаДт КАК СуммаДтКонтрагент,
		|		СуммаКт КАК СуммаКтКонтрагент,
		|		НомерЭСФ КАК НомерЭСФ
		|	) КАК ПоДаннымКонтрагента,
		|	АктСверкиВзаиморасчетов.СписокСчетов.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		СчетУчета КАК СчетУчета
		|	) КАК СписокСчетов
		|ИЗ
		|	Документ.АктСверкиВзаиморасчетов КАК АктСверкиВзаиморасчетов
		|ГДЕ
		|	АктСверкиВзаиморасчетов.Ссылка В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	РезультатПакет =  Запрос.ВыполнитьПакет();	
		
	Шапка = РезультатПакет[0].Выбрать();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "АктСверкиВзаиморасчетов_АктСверки";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.АктСверкиВзаиморасчетов.ПФ_MXL_АктСверки");
	
	Пока Шапка.Следующий() Цикл
		
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НазваниеОрганизации = Шапка.Организация.НаименованиеПолное;
		Если ПустаяСтрока(НазваниеОрганизации) Тогда
			НазваниеОрганизации = Шапка.Организация;
		КонецЕсли;
		
		НаименованиеКонтрагента = Шапка.Контрагент.НаименованиеПолное;
		Если ПустаяСтрока(НаименованиеКонтрагента) Тогда
			НаименованиеКонтрагента = Шапка.Контрагент;
		КонецЕсли;
		
		ДанныеПечати = Новый Структура;
		ДанныеПечати.Вставить("ДатаДокумента", Шапка.Дата);
		
		ТаблицаПоДаннымКонтрагента = Шапка.ПоДаннымКонтрагента.Выгрузить();
		ТаблицаПоДаннымОрганизации = Шапка.ПоДаннымОрганизации.Выгрузить();
		
		СуммаДт = ТаблицаПоДаннымОрганизации.Итог("СуммаДт");
		ДанныеПечати.Вставить("СуммаДт", ?(СуммаДт = 0, "", СуммаДт));
		
		СуммаКт = ТаблицаПоДаннымОрганизации.Итог("СуммаКт");
		ДанныеПечати.Вставить("СуммаКт", ?(СуммаКт = 0, "", СуммаКт));
		
		СуммаДтКонтр = ?(Шапка.Разногласие = "", Формат(?(СуммаКт = 0, "", СуммаКт), "ЧЦ=15; ЧДЦ=2; ЧН=0,00"), Формат(ТаблицаПоДаннымКонтрагента.Итог("СуммаДтКонтрагент"), "ЧЦ=15; ЧДЦ=2; ЧН=' '"));
		ДанныеПечати.Вставить("СуммаДтКонтр", ?(СуммаДтКонтр = 0, "", СуммаДтКонтр));
		
		СуммаКтКонтр = ?(Шапка.Разногласие = "", Формат(?(СуммаДт = 0, "", СуммаДт), "ЧЦ=15; ЧДЦ=2; ЧН=0,00"), Формат(ТаблицаПоДаннымКонтрагента.Итог("СуммаКтКонтрагент"), "ЧЦ=15; ЧДЦ=2; ЧН=' '"));
		ДанныеПечати.Вставить("СуммаКтКонтр", ?(СуммаКтКонтр = 0, "", СуммаКтКонтр));
		
		
		ДанныеПечати.Вставить("НазваниеОрганизации", СокрЛП(НазваниеОрганизации));
		ДанныеПечати.Вставить("НаименованиеКонтрагента", СокрЛП(НаименованиеКонтрагента));
		
		ТекстЗаголовка = СтрШаблон(НСтр("ru = 'сверки взаиморасчетов между %1 %2 и %3 с %4 по %5'"), 
								СокрЛП(НазваниеОрганизации), 
								Символы.ПС,
								СокрЛП(НаименованиеКонтрагента),
								Формат(Шапка.ДатаНачала, "ДЛФ=D"),
								Формат(Шапка.ДатаОкончания, "ДЛФ=D"));

		Если ЗначениеЗаполнено(Шапка.ДоговорКонтрагента) Тогда
			ТекстЗаголовка = ТекстЗаголовка + СтрШаблон(НСтр("ru = '%1 по договору %2'"),
													Символы.ПС,
													СокрЛП(Шапка.ДоговорКонтрагента.Наименование));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Шапка.ВалютаСверки) Тогда
			ТекстЗаголовка = ТекстЗаголовка + СтрШаблон(НСтр("ru = '%1 валюта сверки %2'"),
													Символы.ПС,
													СокрЛП(Шапка.ВалютаСверки));
		КонецЕсли;	
		
		ДанныеПечати.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		
		НачОстДебет  = ?(Шапка.ОстатокНаНачало > 0, Шапка.ОстатокНаНачало, 0);
		НачОстКредит = ?(Шапка.ОстатокНаНачало < 0, -Шапка.ОстатокНаНачало, 0);
		
		ОстатокНаКонец = Шапка.ОстатокНаНачало + ТаблицаПоДаннымОрганизации.Итог("СуммаДт") -  ТаблицаПоДаннымОрганизации.Итог("СуммаКт");
		
		КонОстДебет  = ?(ОстатокНаКонец > 0, ОстатокНаКонец, 0);
		КонОстКредит = ?(ОстатокНаКонец < 0, -ОстатокНаКонец, 0);
		
		Если Шапка.Разногласие = "" Тогда
			КонОстДебетК  = КонОстКредит;
			КонОстКредитК = КонОстДебет;
		ИначеЕсли  Шапка.Разногласие <> "" И ТаблицаПоДаннымКонтрагента.Количество() = 0 Тогда
			КонОстДебетК = 0;
			КонОстКредитК = 0;
		Иначе	
			ОстатокНаКонецК = -Шапка.ОстатокНаНачало + ТаблицаПоДаннымКонтрагента.Итог("СуммаДтКонтрагент") -  ТаблицаПоДаннымКонтрагента.Итог("СуммаКтКонтрагент");
			
			КонОстДебетК  = ?(ОстатокНаКонецК > 0, ОстатокНаКонецК, 0);
			КонОстКредитК = ?(ОстатокНаКонецК < 0, -ОстатокНаКонецК, 0);
		КонецЕсли;
		
		ДанныеПечати.Вставить("СуммаНачальныйОстатокДт", ?(Шапка.Разногласие = "", Формат(НачОстДебет, "ЧЦ=15; ЧДЦ=2; ЧН=0,00"), Формат(НачОстДебет, "ЧЦ=15; ЧДЦ=2; ЧН=' '")));
		ДанныеПечати.Вставить("СуммаНачальныйОстатокКт", ?(Шапка.Разногласие = "", Формат(НачОстКредит, "ЧЦ=15; ЧДЦ=2; ЧН=0,00"), Формат(НачОстКредит, "ЧЦ=15; ЧДЦ=2; ЧН=' '")));
		
		Если КонОстДебет <> 0 Тогда 
			ДанныеПечати.Вставить("СуммаКонечныйОстатокДт", КонОстДебет);
		Иначе
			ДанныеПечати.Вставить("СуммаКонечныйОстатокДт", "");
		КонецЕсли;	
		Если КонОстКредит <> 0 Тогда 
			ДанныеПечати.Вставить("СуммаКонечныйОстатокКт", КонОстКредит);
		Иначе
			ДанныеПечати.Вставить("СуммаКонечныйОстатокКт", "");
		КонецЕсли;	
		
		Если КонОстДебетК <> 0 Тогда 
			ДанныеПечати.Вставить("СуммаКонечныйОстатокДтКонтр", ?(Шапка.Разногласие = "", Формат(КонОстДебетК, "ЧЦ=15; ЧДЦ=2; ЧН=0,00"), Формат(КонОстДебетК, "ЧЦ=15; ЧДЦ=2; ЧН=' '")));
		Иначе
			ДанныеПечати.Вставить("СуммаКонечныйОстатокДтКонтр", "");
		КонецЕсли;	
		Если КонОстКредитК <> 0 Тогда 
			ДанныеПечати.Вставить("СуммаКонечныйОстатокКтКонтр", ?(Шапка.Разногласие = "", Формат(КонОстКредитК, "ЧЦ=15; ЧДЦ=2; ЧН=0,00"), Формат(КонОстКредитК, "ЧЦ=15; ЧДЦ=2; ЧН=' '")));
		Иначе
			ДанныеПечати.Вставить("СуммаКонечныйОстатокКтКонтр", "");
		КонецЕсли;	
		
		// Результаты сверки
		Если Не ЗначениеЗаполнено(Шапка.ВалютаСверки) Тогда
			ВалютаРезультата = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		Иначе
			ВалютаРезультата = Шапка.ВалютаСверки;
		КонецЕсли;
		                                                                                                                                                                                     
		Если ОстатокНаКонец > 0  Тогда
			РезультатыСверки = СтрШаблон(НСтр("ru = 'Задолженность %1 перед %2 на %3 составляет %4 %5'"), 
								СокрЛП(НаименованиеКонтрагента),
								СокрЛП(НазваниеОрганизации),
								Формат(Шапка.ДатаОкончания + 24*60*60,"ДЛФ=D"),
								Формат(ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2"),
								Строка(ВалютаРезультата));
			
			Сумма = БухгалтерскийУчетСервер.СформироватьСуммуПрописью(ОстатокНаКонец, ВалютаРезультата);
			СуммаПрописью = "("+Сумма+")";
			
		ИначеЕсли ОстатокНаКонец < 0   Тогда
			РезультатыСверки = СтрШаблон(НСтр("ru = 'Задолженность %1 перед %2 на %3 составляет %4 %5'"), 
								СокрЛП(НазваниеОрганизации),
								НаименованиеКонтрагента,
								Формат(Шапка.ДатаОкончания + 24*60*60,"ДЛФ=D"),
								Формат(-ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2"),
								Строка(ВалютаРезультата));
								
			Сумма = БухгалтерскийУчетСервер.СформироватьСуммуПрописью(-ОстатокНаКонец, ВалютаРезультата);
			СуммаПрописью = "("+Сумма+")";
			
		Иначе
			РезультатыСверки = СтрШаблон(НСтр("ru = 'Задолженность %1 перед %2 на %3 составляет 0,00 %4'"), 
								СокрЛП(НазваниеОрганизации),
								НаименованиеКонтрагента,
								Формат(Шапка.ДатаОкончания + 24*60*60,"ДЛФ=D"),
								Строка(ВалютаРезультата));
								
			Сумма = БухгалтерскийУчетСервер.СформироватьСуммуПрописью(ОстатокНаКонец, ВалютаРезультата);
			СуммаПрописью = "("+Сумма+")";
		КонецЕсли;
		
		ДанныеПечати.Вставить("РезультатыСверки", ?(Шапка.Разногласие <> "", Шапка.Разногласие, РезультатыСверки));
		ДанныеПечати.Вставить("СуммаПрописью", ?(Шапка.Разногласие <> "", "", СуммаПрописью)); 				

		// Инициализация массива областей макета
		МассивОбластейМакета = Новый Массив;
		МассивОбластейМакета.Добавить("ШапкаУтверждаю");
		МассивОбластейМакета.Добавить("Заголовок");
		МассивОбластейМакета.Добавить("НачальноеСальдо");
		МассивОбластейМакета.Добавить("Обороты");
		МассивОбластейМакета.Добавить("СФ");
		МассивОбластейМакета.Добавить("ПустаяСтрока");
		МассивОбластейМакета.Добавить("ОборотыИтог");
		МассивОбластейМакета.Добавить("КонОстатки");
		МассивОбластейМакета.Добавить("Подвал");
		
		Для Каждого ИмяОбласти Из МассивОбластейМакета Цикл
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
			Если ИмяОбласти = "ШапкаУтверждаю" И Шапка.СШапкойУтверждаю Тогда 
				ОтветственныеЛица = БухгалтерскийУчетСервер.ОтветственныеЛицаОрганизацийРуководители(Шапка.Организация, Шапка.Дата);
				ДанныеПечати.Вставить("Должность", ОтветственныеЛица.РуководительДолжностьСсылка);
				ДанныеПечати.Вставить("ДиректорПредприятия", ОтветственныеЛица.Руководитель);
				ТабличныйДокумент.Вывести(ОбластьМакета);	
			ИначеЕсли ИмяОбласти <> "Обороты" И ИмяОбласти <> "СФ" И ИмяОбласти <> "ПустаяСтрока" 
				И ИмяОбласти <> "ШапкаУтверждаю" Тогда
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			ИначеЕсли ИмяОбласти = "ПустаяСтрока" И Не Шапка.СверкаСогласована Тогда
				НачальныйНомер = 1;
				Для Итерация = 1 По 5 Цикл
					ТабличныйДокумент.Вывести(ОбластьМакета);
					НачальныйНомер = НачальныйНомер + 1;
				КонецЦикла;
			ИначеЕсли ИмяОбласти = "Обороты" Тогда
				
				// Объединение двух таблиц
				ОтборОдинаковых = Новый Структура;
				ОтборОдинаковых.Вставить("ДокументСверки", "");
				ТаблицаПоДаннымОрганизации.Колонки.Добавить("ДокументСверкиКонтрагент");
				
				Для каждого ПрисоединяемаяЗапись Из ТаблицаПоДаннымКонтрагента Цикл
					ЗаполнитьЗначенияСвойств(ОтборОдинаковых, ПрисоединяемаяЗапись);
					
					НайденыеСтроки = ТаблицаПоДаннымОрганизации.НайтиСтроки(ОтборОдинаковых);
					Если НайденыеСтроки.Количество() > 0 тогда
						Для каждого НайденнаяСтрока из НайденыеСтроки цикл
							ЗаполнитьЗначенияСвойств(НайденнаяСтрока, ПрисоединяемаяЗапись);
						КонецЦикла;
					Иначе
						НовСтрокаОсновном = ТаблицаПоДаннымОрганизации.Добавить();
						ЗаполнитьЗначенияСвойств(НовСтрокаОсновном, ПрисоединяемаяЗапись);
						НовСтрокаОсновном.ДокументСверкиКонтрагент = ПрисоединяемаяЗапись.ДокументСверки;
						НовСтрокаОсновном.СуммаДт = 0;
						НовСтрокаОсновном.СуммаКт = 0;
					КонецЕсли;
				КонецЦикла;
				
				сч = 0;
				Для Каждого СтрокаТабличнойЧасти Из ТаблицаПоДаннымОрганизации Цикл
					
					ДанныеЗаполнения = Новый Структура;
					ДанныеЗаполнения.Вставить("СуммаОборотДт", СтрокаТабличнойЧасти.СуммаДт);
					ДанныеЗаполнения.Вставить("СуммаОборотКт", СтрокаТабличнойЧасти.СуммаКт);
					
					Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДокументСверкиКонтрагент) И Не Шапка.ИсключитьИзПредставленияДокумента Тогда
						ДанныеЗаполнения.Вставить("РегистраторПредставление", СтрокаТабличнойЧасти.ДокументСверкиКонтрагент);
					ИначеЕсли ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДокументСверки) И Не Шапка.ИсключитьИзПредставленияДокумента Тогда	
						НомерДокумента = ОписаниеРасчетногоДокументаКонтрагента(СтрокаТабличнойЧасти.ДокументСверки, СтрокаТабличнойЧасти.ДокументСверкиНомер, СтрокаТабличнойЧасти.ДокументСверкиДата);
						ДанныеЗаполнения.Вставить("РегистраторПредставление", НомерДокумента + ?(СтрокаТабличнойЧасти.ДокументСверкиКомментарий = "", "", "
						|" + СтрокаТабличнойЧасти.ДокументСверкиКомментарий));
					КонецЕсли;
					
					Если Шапка.Разногласие <> "" Тогда
						ДанныеЗаполнения.Вставить("СуммаОборотКтКонтр", Формат(СтрокаТабличнойЧасти.СуммаКтКонтрагент, "ЧЦ=15; ЧДЦ=2; ЧН=' '"));
						ДанныеЗаполнения.Вставить("СуммаОборотДтКонтр", Формат(СтрокаТабличнойЧасти.СуммаДтКонтрагент, "ЧЦ=15; ЧДЦ=2; ЧН=' '"));
					Иначе
						ДанныеЗаполнения.Вставить("СуммаОборотКтКонтр", Формат(СтрокаТабличнойЧасти.СуммаДт, "ЧЦ=15; ЧДЦ=2; ЧН=0,00"));
						ДанныеЗаполнения.Вставить("СуммаОборотДтКонтр", Формат(СтрокаТабличнойЧасти.СуммаКт, "ЧЦ=15; ЧДЦ=2; ЧН=0,00"));
					КонецЕсли;	
					
					// Печать доков для авансового отчета
					//Если Не СтрокаТабличнойЧасти = Неопределено Тогда 
					//	Если ТипЗнч(СтрокаТабличнойЧасти.ДокументСверки) = ТипЗнч(Документы.АвансовыйОтчет.ПустаяСсылка()) Тогда 
					//		РеквизитыАО = "";
					//		Для каждого СТЧ Из СтрокаТабличнойЧасти.ДокументСверки.ОплатаПоставщикам Цикл
					//			Если СТЧ.Контрагент <> Шапка.Контрагент Тогда 
					//				Продолжить;
					//			КонецЕсли;						
					//			РеквизитыАОТекущие  = "" + ?(ЗначениеЗаполнено(СТЧ.ВидДокВходящий), СТЧ.ВидДокВходящий, "")
					//			+ ?(ЗначениеЗаполнено(СТЧ.НомерВходящегоДокумента), " №" + СТЧ.НомерВходящегоДокумента,"")
					//			+ ?(ЗначениеЗаполнено(СТЧ.ДатаВходящегоДокумента), " от " + Формат(СТЧ.ДатаВходящегоДокумента,"ДФ=dd.MM.yy"),"");
					//			
					//			РеквизитыАО = РеквизитыАО + ?(ЗначениеЗаполнено(РеквизитыАОТекущие), ". " + РеквизитыАОТекущие, "");
					//		КонецЦикла;
					//		
					//		ДанныеЗаполнения.Вставить("РегистраторПредставление", ОбластьМакета.Параметры.РегистраторПредставление + РеквизитыАО);
					//	КонецЕсли;
					//КонецЕсли;
					
					
					// Печать реквизитов счетов-фактур
					Если Не СтрокаТабличнойЧасти = Неопределено Тогда 
						Если НЕ Шапка.СверкаПоСоцФонду И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДокументСверки)
							И БухгалтерскийУчетСервер.ЕстьРеквизитДокумента("СерияБланкаСФ", СтрокаТабличнойЧасти.ДокументСверки.Метаданные()) 
							И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДокументСверкиСерияБланкаСФ) Тогда 
							
							РеквизитыСФ = "Счет-фактура " + СтрокаТабличнойЧасти.ДокументСверкиСерияБланкаСФ + " № " + СтрокаТабличнойЧасти.ДокументСверкиНомерБланкаСФ
							+ " от " + Формат(СтрокаТабличнойЧасти.ДокументСверкиДатаСФ, "ДЛФ=D"); 
						Иначе
							РеквизитыСФ = "";
						КонецЕсли;				
					КонецЕсли;
					
					Если Шапка.ВыводитьНомерЭСФ 
						И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерЭСФ)
						И НЕ СтрокаТабличнойЧасти.НомерЭСФ = "0" Тогда
						РеквизитыСФ = РеквизитыСФ + ?(ЗначениеЗаполнено(РеквизитыСФ), ", ", "") + "ЭСФ №" + СтрокаТабличнойЧасти.НомерЭСФ;
					КонецЕсли;

					Если Шапка.ПечатьСчетФактурВместоДокументовРеализации И ЗначениеЗаполнено(РеквизитыСФ) Тогда 
						ДанныеЗаполнения.Вставить("РегистраторПредставление", РеквизитыСФ);
						
					ИначеЕсли ДанныеЗаполнения.Свойство("РегистраторПредставление") Тогда 
						ДанныеЗаполнения.Вставить("РегистраторПредставление", " " + ДанныеЗаполнения.РегистраторПредставление + " " + РеквизитыСФ);
						
					Иначе
						ДанныеЗаполнения.Вставить("РегистраторПредставление", "");
						
					КонецЕсли;				
					
					сч = сч + 1;
					ДанныеЗаполнения.Вставить("НомерСтроки", сч);
					ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеЗаполнения);
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;	
			ИначеЕсли ИмяОбласти = "СФ" Тогда   	

			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;		
	Возврат ТабличныйДокумент;		
	
КонецФункции

// Функция формирует табличный документ с печатной формой АктСверкиСФ
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьАктаСверкиСФ(МассивОбъектов, ОбъектыПечати)
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка,
		|	ТаблицаДокумента.Номер,
		|	ТаблицаДокумента.Дата,
		|	ТаблицаДокумента.ДатаНачала,
		|	ТаблицаДокумента.ДатаОкончания,
		|	ТаблицаДокумента.Организация,
		|	ТаблицаДокумента.Контрагент,
		|	ТаблицаДокумента.ДоговорКонтрагента,
		|	ТаблицаДокумента.ДоговорКонтрагента.ВалютаРасчетов КАК Валюта,
		|	ТаблицаДокумента.ОстатокНаНачало,
		|	ТаблицаДокумента.ОстатокНаКонец,
		|	ТаблицаДокумента.СверкаСогласована,
		|	ТаблицаДокумента.СверкаПоСоцФонду,
		|	ТаблицаДокумента.ИсключитьИзПредставленияДокумента,
		|	ТаблицаДокумента.СШапкойУтверждаю,
		|	ТаблицаДокумента.ПечатьСчетФактурВместоДокументовРеализации,
		|	ТаблицаДокумента.УчитыватьВзаимозачеты,
		|	ТаблицаДокумента.ПоДаннымОрганизации.(
		|		Ссылка,
		|		НомерСтроки,
		|		ДокументСверки,
		|		СуммаДт,
		|		СуммаКт
		|	),
		|	ТаблицаДокумента.ПоДаннымКонтрагента.(
		|		Ссылка,
		|		НомерСтроки,
		|		ДокументСверки,
		|		СуммаДт,
		|		СуммаКт
		|	),
		|	ТаблицаДокумента.СписокСчетов.(
		|		Ссылка,
		|		НомерСтроки,
		|		СчетУчета
		|	),
		|	ТаблицаДокумента.Организация.ИНН КАК ИНН,
		|	ТаблицаДокумента.Организация.КодПоОКПО КАК ОКПО,
		|	ТаблицаДокумента.Организация.РегНомерСоцФонда КАК Рег
		|ИЗ
		|	Документ.АктСверкиВзаиморасчетов КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В(&МассивОбъектов)";	
	Запрос = Новый Запрос(ТекстЗапроса);	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "АктСверкиВзаиморасчетов_АктСверкиСФ";

	ТабличныйДокумент.Очистить();
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.АктСверкиВзаиморасчетов.ПФ_MXL_АктСверкиСФ");
	
	Пока Шапка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Подготовка данных
		ДанныеПечати = Новый Структура;
		ДанныеПечати.Вставить("ДатаДокумента", Шапка.Дата);
		ДанныеПечати.Вставить("Организация", Шапка.Организация.НаименованиеПолное);
		ДанныеПечати.Вставить("Рег", Шапка.Рег);
		ДанныеПечати.Вставить("ИНН", Шапка.ИНН);
		ДанныеПечати.Вставить("ОКПО", Шапка.ОКПО);
		
		ДанныеПечати.Вставить("НачалоПериода", Формат(Шапка.ДатаНачала, "ДФ=dd.MM.yyyy"));
		ДанныеПечати.Вставить("КонецПериода", Формат(Шапка.ДатаОкончания, "ДФ=dd.MM.yyyy"));
		ДанныеПечати.Вставить("ДатаОтчета", Формат(Шапка.Дата, "ДФ=dd.MM.yyyy"));

		// Инициализация массива областей макета
		МассивОбластейМакета = Новый Массив;
		МассивОбластейМакета.Добавить("Заголовок");
		//МассивОбластейМакета.Добавить("ШапкаТаблицы");
		//МассивОбластейМакета.Добавить("ДеталиТаблицы");
		//МассивОбластейМакета.Добавить("Подвал");
		//МассивОбластейМакета.Добавить("Подписи");
		
		СписокСчетовСоцФонда = Шапка.СписокСчетов.Выгрузить();
		СписокСчетовСоцФонда.Свернуть("СчетУчета");

		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТиповойОстаткиИОбороты.Счет,
		|	ТиповойОстаткиИОбороты.СуммаНачальныйОстатокДт - ТиповойОстаткиИОбороты.СуммаНачальныйОстатокКт КАК ОстН,
		|	ТиповойОстаткиИОбороты.СуммаКонечныйОстатокДт - ТиповойОстаткиИОбороты.СуммаКонечныйОстатокКт КАК ОстК
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, , , Счет = &СчетФС, , Организация = &Организация) КАК ТиповойОстаткиИОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОбороты.Счет,
		|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт - ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт КАК ОстН,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт - ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК ОстК
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, Период, ДвиженияИГраницыПериода, Счет В (&СчетаСоцФонда), , Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОбороты.Счет,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК НСтраховыеВзносы,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК УСтраховыеВзносы
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, Период, ДвиженияИГраницыПериода, Счет В (&СчетаСоцФонда), , Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОбороты.Счет,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК ФинС
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, , , Счет = &СчетФС, , Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОбороты.Счет,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК НСтраховыеВзносы,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК УСтраховыеВзносы
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, Период, ДвиженияИГраницыПериода, Счет В (&СчетаСоцФонда), , Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОбороты.Счет,
		|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт - ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт КАК ОстН,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт - ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК ФСК
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, , , Счет = &СчетФС, , Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОбороты.Счет,
		|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт - ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт КАК ОстН,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт - ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК ОстК
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, Период, ДвиженияИГраницыПериода, Счет В (&СчетаСоцФонда), , Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты";

		Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(Шапка.ДатаНачала));
		Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(Шапка.ДатаОкончания));	
		Запрос.УстановитьПараметр("СчетФС", ПланыСчетов.Хозрасчетный.Финсанкции);
		Запрос.УстановитьПараметр("Организация", Шапка.Организация);
		Запрос.УстановитьПараметр("СчетаСоцФонда", СписокСчетовСоцФонда);
		
		Результат = Запрос.ВыполнитьПакет();
		ТаблицаФинансовыеСанкции = Результат[0].Выгрузить();

		// Финансовые санкции 1.
		ОстН = ТаблицаФинансовыеСанкции.Итог("ОстН");
		Если ОстН > 0 Тогда 
			ОстНДт 	= ОстН;
			ОстККт 	= 0;
		Иначе
			ОстНДт 	= 0;
			ОстНКт 	= -ОстН;
		КонецЕсли;		
		
		ДанныеПечати.Вставить("ФинансовыеСанкцииНДтПлательщик", ОстНДт);
		ДанныеПечати.Вставить("ФинансовыеСанкцииНКтПлательщик", ОстНКт);	
		ДанныеПечати.Вставить("ФинансовыеСанкцииНДтСФ", ОстНКт);
		ДанныеПечати.Вставить("ФинансовыеСанкцииНКтСФ", ОстНДт);

		//  Остатки СФ на начало.
		ТаблицаОстатки = Результат[1].Выгрузить();  
		ОстН = ТаблицаОстатки.Итог("ОстН") + ТаблицаФинансовыеСанкции.Итог("ОстН");
			
		Если ОстН >0 Тогда 
			ОстНДт 	= ОстН ;
			ОстНКт 	= 0;
		Иначе
			ОстНДт 	= 0;
			ОстНКт 	= -ОстН;
		КонецЕсли;		
	    ДанныеПечати.Вставить("ОстНДтПлательщик", ОстНДт);
		ДанныеПечати.Вставить("ОстНКтПлательщик", ОстНКт);	
		ДанныеПечати.Вставить("ОстНДтСФ", ОстНКт);
		ДанныеПечати.Вставить("ОстНКтСФ", ОстНДт);

		ТаблицаСтраховыеВзносы = Результат[2].Выгрузить();
		НСтраховыеВзносы = ТаблицаСтраховыеВзносы.Итог("НСтраховыеВзносы");

	    ДанныеПечати.Вставить("ВзносыКтПлательщик", НСтраховыеВзносы);	
		ДанныеПечати.Вставить("ВзносыДтСФ", НСтраховыеВзносы);

	    // Начислено Финансовые санкции.	
		ТаблицаОстатки = Результат[3].Выгрузить();
		ФинС = ТаблицаОстатки.Итог("ФинС");
		Если ФинС >0 Тогда 
			ОстНКт 	= ФинС;
			ОстНДт 	= 0;
		Иначе
			ОстНКт 	= 0;
			ОстНДт 	= -ФинС;
		КонецЕсли;		
	    
		ДанныеПечати.Вставить("СанкцииКтПлательщик", ОстНКт);
		ДанныеПечати.Вставить("СанкцииДтПлательщик", ОстНДт);
		ДанныеПечати.Вставить("СанкцииДтСФ", ОстНКт);
		ДанныеПечати.Вставить("СанкцииКтСФ", ОстНДт);
		
	    //  Начислено всего
		НВсего = ТаблицаСтраховыеВзносы.Итог("НСтраховыеВзносы") + ФинС;
		
		Если НВсего >0 Тогда 
			НВсегоКт 	= НВсего;
			НВсегоДт 	= 0;
		Иначе
			НВсегоДт 	= 0;
			НВсегоКт 	= -НВсего;
		КонецЕсли;		
	    ДанныеПечати.Вставить("НВсегоДтПлательщик", НВсегоДт);
		ДанныеПечати.Вставить("НВсегоКтПлательщик", НВсегоКт);	
		ДанныеПечати.Вставить("НВсегоДтСФ", НВсегоКт);
		ДанныеПечати.Вставить("НВсегоКтСФ", НВсегоДт);
		
		// Уплачено всего
		ТаблицаСтраховыеВзносы = Результат[4].Выгрузить();
		УСтраховыеВзносы = ТаблицаСтраховыеВзносы.Итог("УСтраховыеВзносы");
		Если УСтраховыеВзносы >0 Тогда 
			 УСтраховыеВзносыДт 	= УСтраховыеВзносы;
			 УСтраховыеВзносыКт 	= 0;
		Иначе
			 УСтраховыеВзносыДт 	= 0;
			 УСтраховыеВзносыКт 	= -УСтраховыеВзносы;
		КонецЕсли;		

	    ДанныеПечати.Вставить("УВсегоДтПлательщик", УСтраховыеВзносыДт);	
		ДанныеПечати.Вставить("УВсегоКтПлательщик", УСтраховыеВзносыКт);
		ДанныеПечати.Вставить("УВсегоКтСФ", УСтраховыеВзносыДт);
		ДанныеПечати.Вставить("УВсегоДтСФ", УСтраховыеВзносыКт);
		
		ДанныеПечати.Вставить("ДСДтПлательщик", УСтраховыеВзносыДт);
		ДанныеПечати.Вставить("ДСКтПлательщик", УСтраховыеВзносыКт);
		ДанныеПечати.Вставить("ДСКтСФ", УСтраховыеВзносыДт);
		ДанныеПечати.Вставить("ДСДтСФ", УСтраховыеВзносыКт);

		//  Финансовые санкции на конец.
		ТаблицаИтого = Результат[5].Выгрузить();
		ФСК = ТаблицаИтого.Итог("ФСК");
		Если ФСК > 0 Тогда 
			ФСККт 	= ФСК;
			ФСКДт 	= 0;
		Иначе
			ФСКДт 	= 0;
			ФСККт 	= -ФСК;
		КонецЕсли;		
	    ДанныеПечати.Вставить("ФинансовыеСанкцииККтПлательщик", ?(ФСККт = 0, "", ФСККт));
		ДанныеПечати.Вставить("ФинансовыеСанкцииКДтПлательщик", ?(ФСКДт = 0, "", ФСКДт));
		ДанныеПечати.Вставить("ФинансовыеСанкцииКДтСФ", ?(ФСККт = 0, "", ФСККт));	
		ДанныеПечати.Вставить("ФинансовыеСанкцииККтСФ", ?(ФСКДт = 0, "", ФСКДт));	   
		
		ТаблицаОстатки = Результат[6].Выгрузить();
		ОстК = ТаблицаОстатки.Итог("ОстК") + ТаблицаИтого.Итог("ФСК");
		Если ОстК > 0 Тогда 
			ОстКДт 	= ОстК;
			ОстККт 	= 0;
		Иначе
			ОстКДт 	= 0;
			ОстККт 	= -ОстК;
		КонецЕсли;		
	    ДанныеПечати.Вставить("ОстКДтПлательщик", ?(ОстКДт = 0, "", ОстКДт));
		ДанныеПечати.Вставить("ОстККтПлательщик", ?(ОстККт = 0, "", ОстККт));	
		ДанныеПечати.Вставить("ОстКДтСФ", ?(ОстККт = 0, "", ОстККт));
		ДанныеПечати.Вставить("ОстККтСФ", ?(ОстКДт = 0, "", ОстКДт));
		
		ВПользу = ОстКДт;
		Если ВПользу > 0 Тогда 
			ВПользу 	= "Плательщика";
			СуммаДляВывода = ОстКДт
		Иначе
			ВПользу 	   = НСтр("ru = 'Социального Фонда'");
			СуммаДляВывода = ОстККт
		КонецЕсли;		
	   	ДанныеПечати.Вставить("Кого", ВПользу);
		
		ДанныеПечати.Вставить("Число", Формат(Шапка.Дата, "ДФ=dd.MM.yy"));

	    ПрописьЧисла = БухгалтерскийУчетСервер.СформироватьСуммуПрописью(СуммаДляВывода, , Ложь);
	    ДанныеПечати.Вставить("Сумма", ПрописьЧисла);

		Для Каждого ИмяОбласти Из МассивОбластейМакета Цикл
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
			Если ИмяОбласти = "ДеталиТаблицы" Или ИмяОбласти = "Подвал" Или ИмяОбласти = "Заголовок" Тогда 
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			Иначе
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЕсли;	
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

//// Функция формирует табличный документ с печатной формой АктСверкиСФ
////
//// Возвращаемое значение:
////  Табличный документ - печатная форма
////
//Функция ПечатьАктаСверкиСФ(МассивОбъектов, ОбъектыПечати)
//	ТекстЗапроса = 
//		"ВЫБРАТЬ
//		|	ТаблицаДокумента.Ссылка,
//		|	ТаблицаДокумента.Номер,
//		|	ТаблицаДокумента.Дата,
//		|	ТаблицаДокумента.ДатаНачала,
//		|	ТаблицаДокумента.ДатаОкончания,
//		|	ТаблицаДокумента.Организация,
//		|	ТаблицаДокумента.Контрагент,
//		|	ТаблицаДокумента.ДоговорКонтрагента,
//		|	ТаблицаДокумента.ДоговорКонтрагента.ВалютаРасчетов КАК Валюта,
//		|	ТаблицаДокумента.ОстатокНаНачало,
//		|	ТаблицаДокумента.ОстатокНаКонец,
//		|	ТаблицаДокумента.СверкаСогласована,
//		|	ТаблицаДокумента.СверкаПоСоцФонду,
//		|	ТаблицаДокумента.ИсключитьИзПредставленияДокумента,
//		|	ТаблицаДокумента.СШапкойУтверждаю,
//		|	ТаблицаДокумента.ПечатьСчетФактурВместоДокументовРеализации,
//		|	ТаблицаДокумента.УчитыватьВзаимозачеты,
//		|	ТаблицаДокумента.ПоДаннымОрганизации.(
//		|		Ссылка,
//		|		НомерСтроки,
//		|		ДокументСверки,
//		|		СуммаДт,
//		|		СуммаКт
//		|	),
//		|	ТаблицаДокумента.ПоДаннымКонтрагента.(
//		|		Ссылка,
//		|		НомерСтроки,
//		|		ДокументСверки,
//		|		СуммаДт,
//		|		СуммаКт
//		|	),
//		|	ТаблицаДокумента.СписокСчетов.(
//		|		Ссылка,
//		|		НомерСтроки,
//		|		СчетУчета
//		|	),
//		|	ТаблицаДокумента.Организация.ИНН КАК ИНН,
//		|	ТаблицаДокумента.Организация.КодПоОКПО КАК ОКПО,
//		|	ТаблицаДокумента.Организация.РегНомерСоцФонда КАК Рег
//		|ИЗ
//		|	Документ.АктСверкиВзаиморасчетов КАК ТаблицаДокумента
//		|ГДЕ
//		|	ТаблицаДокумента.Ссылка В(&МассивОбъектов)";	
//	Запрос = Новый Запрос(ТекстЗапроса);	
//	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
//	
//	Шапка = Запрос.Выполнить().Выбрать();
//	
//	ТабличныйДокумент = Новый ТабличныйДокумент;
//	ТабличныйДокумент.КлючПараметровПечати = "АктСверкиВзаиморасчетов_АктСверкиСФ";

//	ТабличныйДокумент.Очистить();
//	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.АктСверкиВзаиморасчетов.ПФ_MXL_АктСверкиСФ");
//	
//	Пока Шапка.Следующий() Цикл
//		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
//			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
//		КонецЕсли;
//		
//		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
//		
//		// Подготовка данных
//		ДанныеПечати = Новый Структура;
//		ДанныеПечати.Вставить("ДатаДокумента", Шапка.Дата);
//		ДанныеПечати.Вставить("Организация", Шапка.Организация.НаименованиеПолное);
//		ДанныеПечати.Вставить("Рег", Шапка.Рег);
//		ДанныеПечати.Вставить("ИНН", Шапка.ИНН);
//		ДанныеПечати.Вставить("ОКПО", Шапка.ОКПО);

//		// Инициализация массива областей макета
//		МассивОбластейМакета = Новый Массив;
//		МассивОбластейМакета.Добавить("Заголовок");
//		МассивОбластейМакета.Добавить("ШапкаТаблицы");
//		МассивОбластейМакета.Добавить("ДеталиТаблицы");
//		МассивОбластейМакета.Добавить("Подвал");
//		МассивОбластейМакета.Добавить("Подписи");
//		
//		СписокСчетовСоцФонда = Шапка.СписокСчетов.Выгрузить();
//		СписокСчетовСоцФонда.Свернуть("СчетУчета");

//		Запрос = Новый Запрос;
//		Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	ТиповойОстаткиИОбороты.Счет,
//		|	ТиповойОстаткиИОбороты.СуммаНачальныйОстатокДт - ТиповойОстаткиИОбороты.СуммаНачальныйОстатокКт КАК ОстН,
//		|	ТиповойОстаткиИОбороты.СуммаКонечныйОстатокДт - ТиповойОстаткиИОбороты.СуммаКонечныйОстатокКт КАК ОстК
//		|ИЗ
//		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, , , Счет = &СчетФС, , Организация = &Организация) КАК ТиповойОстаткиИОбороты
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ХозрасчетныйОстаткиИОбороты.Счет,
//		|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт - ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт КАК ОстН,
//		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт - ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК ОстК
//		|ИЗ
//		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, Период, ДвиженияИГраницыПериода, Счет В (&СчетаСоцФонда), , Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ХозрасчетныйОстаткиИОбороты.Счет,
//		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК НСтраховыеВзносы,
//		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК УСтраховыеВзносы
//		|ИЗ
//		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, Период, ДвиженияИГраницыПериода, Счет В (&СчетаСоцФонда), , Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ХозрасчетныйОстаткиИОбороты.Счет,
//		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК ФинС
//		|ИЗ
//		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, , , Счет = &СчетФС, , Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ХозрасчетныйОстаткиИОбороты.Счет,
//		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК НСтраховыеВзносы,
//		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК УСтраховыеВзносы
//		|ИЗ
//		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, Период, ДвиженияИГраницыПериода, Счет В (&СчетаСоцФонда), , Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ХозрасчетныйОстаткиИОбороты.Счет,
//		|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт - ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт КАК ОстН,
//		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт - ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК ФСК
//		|ИЗ
//		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, , , Счет = &СчетФС, , Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ХозрасчетныйОстаткиИОбороты.Счет,
//		|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт - ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт КАК ОстН,
//		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт - ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК ОстК
//		|ИЗ
//		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, Период, ДвиженияИГраницыПериода, Счет В (&СчетаСоцФонда), , Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты";

//		Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(Шапка.ДатаНачала));
//		Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(Шапка.ДатаОкончания));	
//		Запрос.УстановитьПараметр("СчетФС", ПланыСчетов.Хозрасчетный.Финсанкции);
//		Запрос.УстановитьПараметр("Организация", Шапка.Организация);
//		Запрос.УстановитьПараметр("СчетаСоцФонда", СписокСчетовСоцФонда);
//		
//		Результат = Запрос.ВыполнитьПакет();
//		ТаблицаФинансовыеСанкции = Результат[0].Выгрузить();

//		// Финансовые санкции 1.
//		ОстН = ТаблицаФинансовыеСанкции.Итог("ОстН");
//		Если ОстН > 0 Тогда 
//			ОстНДт 	= ОстН;
//			ОстККт 	= 0;
//		Иначе
//			ОстНДт 	= 0;
//			ОстНКт 	= -ОстН;
//		КонецЕсли;		
//		
//		ДанныеПечати.Вставить("ФинансовыеСанкцииНДтПлательщик", ОстНДт);
//		ДанныеПечати.Вставить("ФинансовыеСанкцииНКтПлательщик", ОстНКт);	
//		ДанныеПечати.Вставить("ФинансовыеСанкцииНДтСФ", ОстНКт);
//		ДанныеПечати.Вставить("ФинансовыеСанкцииНКтСФ", ОстНДт);

//		//  Остатки СФ на начало.
//		ТаблицаОстатки = Результат[1].Выгрузить();  
//		ОстН = ТаблицаОстатки.Итог("ОстН") + ТаблицаФинансовыеСанкции.Итог("ОстН");
//			
//		Если ОстН >0 Тогда 
//			ОстНДт 	= ОстН ;
//			ОстНКт 	= 0;
//		Иначе
//			ОстНДт 	= 0;
//			ОстНКт 	= -ОстН;
//		КонецЕсли;		
//	    ДанныеПечати.Вставить("ОстНДтПлательщик", ОстНДт);
//		ДанныеПечати.Вставить("ОстНКтПлательщик", ОстНКт);	
//		ДанныеПечати.Вставить("ОстНДтСФ", ОстНКт);
//		ДанныеПечати.Вставить("ОстНКтСФ", ОстНДт);

//		ТаблицаСтраховыеВзносы = Результат[2].Выгрузить();
//		НСтраховыеВзносы = ТаблицаСтраховыеВзносы.Итог("НСтраховыеВзносы");

//	    ДанныеПечати.Вставить("ВзносыКтПлательщик", НСтраховыеВзносы);	
//		ДанныеПечати.Вставить("ВзносыДтСФ", НСтраховыеВзносы);

//	    // Начислено Финансовые санкции.	
//		ТаблицаОстатки = Результат[3].Выгрузить();
//		ФинС = ТаблицаОстатки.Итог("ФинС");
//		Если ФинС >0 Тогда 
//			ОстНКт 	= ФинС;
//			ОстНДт 	= 0;
//		Иначе
//			ОстНКт 	= 0;
//			ОстНДт 	= -ФинС;
//		КонецЕсли;		
//	    
//		ДанныеПечати.Вставить("СанкцииКтПлательщик", ОстНКт);
//		ДанныеПечати.Вставить("СанкцииДтПлательщик", ОстНДт);
//		ДанныеПечати.Вставить("СанкцииДтСФ", ОстНКт);
//		ДанныеПечати.Вставить("СанкцииКтСФ", ОстНДт);
//		
//	    //  Начислено всего
//		НВсего = ТаблицаСтраховыеВзносы.Итог("НСтраховыеВзносы") + ФинС;
//		
//		Если НВсего >0 Тогда 
//			НВсегоКт 	= НВсего;
//			НВсегоДт 	= 0;
//		Иначе
//			НВсегоДт 	= 0;
//			НВсегоКт 	= -НВсего;
//		КонецЕсли;		
//	    ДанныеПечати.Вставить("НВсегоДтПлательщик", НВсегоДт);
//		ДанныеПечати.Вставить("НВсегоКтПлательщик", НВсегоКт);	
//		ДанныеПечати.Вставить("НВсегоДтСФ", НВсегоКт);
//		ДанныеПечати.Вставить("НВсегоКтСФ", НВсегоДт);
//		
//		// Уплачено всего
//		ТаблицаСтраховыеВзносы = Результат[4].Выгрузить();
//		УСтраховыеВзносы = ТаблицаСтраховыеВзносы.Итог("УСтраховыеВзносы");
//		Если УСтраховыеВзносы >0 Тогда 
//			 УСтраховыеВзносыДт 	= УСтраховыеВзносы;
//			 УСтраховыеВзносыКт 	= 0;
//		Иначе
//			 УСтраховыеВзносыДт 	= 0;
//			 УСтраховыеВзносыКт 	= -УСтраховыеВзносы;
//		КонецЕсли;		

//	    ДанныеПечати.Вставить("УВсегоДтПлательщик", УСтраховыеВзносыДт);	
//		ДанныеПечати.Вставить("УВсегоКтПлательщик", УСтраховыеВзносыКт);
//		ДанныеПечати.Вставить("УВсегоКтСФ", УСтраховыеВзносыДт);
//		ДанныеПечати.Вставить("УВсегоДтСФ", УСтраховыеВзносыКт);
//		
//		ДанныеПечати.Вставить("ДСДтПлательщик", УСтраховыеВзносыДт);
//		ДанныеПечати.Вставить("ДСКтПлательщик", УСтраховыеВзносыКт);
//		ДанныеПечати.Вставить("ДСКтСФ", УСтраховыеВзносыДт);
//		ДанныеПечати.Вставить("ДСДтСФ", УСтраховыеВзносыКт);

//		//  Финансовые санкции на конец.
//		ТаблицаИтого = Результат[5].Выгрузить();
//		ФСК = ТаблицаИтого.Итог("ФСК");
//		Если ФСК > 0 Тогда 
//			ФСККт 	= ФСК;
//			ФСКДт 	= 0;
//		Иначе
//			ФСКДт 	= 0;
//			ФСККт 	= -ФСК;
//		КонецЕсли;		
//	    ДанныеПечати.Вставить("ФинансовыеСанкцииККтПлательщик", ?(ФСККт = 0, "", ФСККт));
//		ДанныеПечати.Вставить("ФинансовыеСанкцииКДтПлательщик", ?(ФСКДт = 0, "", ФСКДт));
//		ДанныеПечати.Вставить("ФинансовыеСанкцииКДтСФ", ?(ФСККт = 0, "", ФСККт));	
//		ДанныеПечати.Вставить("ФинансовыеСанкцииККтСФ", ?(ФСКДт = 0, "", ФСКДт));	   
//		
//		ТаблицаОстатки = Результат[6].Выгрузить();
//		ОстК = ТаблицаОстатки.Итог("ОстК") + ТаблицаИтого.Итог("ФСК");
//		Если ОстК > 0 Тогда 
//			ОстКДт 	= ОстК;
//			ОстККт 	= 0;
//		Иначе
//			ОстКДт 	= 0;
//			ОстККт 	= -ОстК;
//		КонецЕсли;		
//	    ДанныеПечати.Вставить("ОстКДтПлательщик", ?(ОстКДт = 0, "", ОстКДт));
//		ДанныеПечати.Вставить("ОстККтПлательщик", ?(ОстККт = 0, "", ОстККт));	
//		ДанныеПечати.Вставить("ОстКДтСФ", ?(ОстККт = 0, "", ОстККт));
//		ДанныеПечати.Вставить("ОстККтСФ", ?(ОстКДт = 0, "", ОстКДт));
//		
//		ВПользу = ОстКДт;
//		Если ВПользу > 0 Тогда 
//			ВПользу 	= "Плательщика";
//			СуммаДляВывода = ОстКДт
//		Иначе
//			ВПользу 	   = НСтр("ru = 'Социального Фонда'");
//			СуммаДляВывода = ОстККт
//		КонецЕсли;		
//	   	ДанныеПечати.Вставить("Кого", ВПользу);
//		
//		ДанныеПечати.Вставить("Число", Формат(Шапка.Дата, "ДФ=dd.MM.yy"));

//	    ПрописьЧисла = БухгалтерскийУчетСервер.СформироватьСуммуПрописью(СуммаДляВывода, , Ложь);
//	    ДанныеПечати.Вставить("Сумма", ПрописьЧисла);

//		Для Каждого ИмяОбласти Из МассивОбластейМакета Цикл
//			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
//			Если ИмяОбласти = "ДеталиТаблицы" Или ИмяОбласти = "Подвал" Или ИмяОбласти = "Заголовок" Тогда 
//				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);
//				ТабличныйДокумент.Вывести(ОбластьМакета);
//			Иначе
//				ТабличныйДокумент.Вывести(ОбластьМакета);
//			КонецЕсли;	
//		КонецЦикла;
//		
//		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
//	КонецЦикла;
//	
//	Возврат ТабличныйДокумент;
//	
//КонецФункции

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктСверки") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, 
		"АктСверки", НСтр("ru = 'Акт сверки'"), ПечатьАктаСверки(МассивОбъектов, ОбъектыПечати),,
		"Документ.АктСверкиВзаиморасчетов.ПФ_MXL_АктСверки");
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктСверкиСФ") Тогда	
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, 
		"АктСверкиСФ", НСтр("ru = 'Акт сверки соцФонда'"), ПечатьАктаСверкиСФ(МассивОбъектов, ОбъектыПечати),,
		"Документ.АктСверкиВзаиморасчетов.ПФ_MXL_АктСверкиСФ");
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	 	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктСверки";
	КомандаПечати.Представление = НСтр("ru = 'Акт сверки'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 1;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктСверкиСФ";
	КомандаПечати.Представление = НСтр("ru = 'Акт сверки соцФонда'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 1;
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "РеестрАктСверкиВзаиморасчетов";
	КомандаПечати.Представление  = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Реестр документов ""Акт сверки взаиморасчетов""'");
	КомандаПечати.Обработчик     = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
КонецПроцедуры

#КонецОбласти

#КонецЕсли