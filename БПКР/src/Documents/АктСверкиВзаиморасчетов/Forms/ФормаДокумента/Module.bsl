#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	
	// РаботаСФормами
	РаботаСФормамиСервер.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом 
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьПодвал();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	
	// РаботаСФормами
	РаботаСФормамиСервер.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Контрагент.
//
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент, Объект.Организация);
	Объект.ДоговорКонтрагента = СтруктураДанные.ДоговорКонтрагента;
	
	УстановитьВидимостьДоступностьЭлементов();
	ОбработатьИзменениеДоговора();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Договор контрагента.
//
&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
	ОбработатьИзменениеДоговора();
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
			Объект.ДатаОкончания = КонецМесяца(Объект.ДатаНачала);		
		КонецЕсли;	
		
		ПроверитьКорректностьУказанныхДат("ДатаНачала");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	ПроверитьКорректностьУказанныхДат("ДатаОкончания");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СверкаПоСоцФонду.
//
&НаКлиенте
Процедура СверкаПоСоцФондуПриИзменении(Элемент)
	Объект.ВключаяФилиалы = Ложь;
	
	Если Объект.СверкаПоСоцФонду Тогда
		Объект.ВалютаСверки = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка");
		Объект.Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		Объект.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	КонецЕсли;	
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СверткаСогласована.
//
&НаКлиенте
Процедура СверткаСогласованаПриИзменении(Элемент)
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ВключаяФилиалыПриИзменении(Элемент)
	Если Объект.ВключаяФилиалы Тогда 
		Объект.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	КонецЕсли;
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура РазногласиеПриИзменении(Элемент)
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	Если Объект.Разногласие = "" Тогда
		Объект.ПоДаннымКонтрагента.Очистить();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура НомерЭСФВОтдельнойКолонкеПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоДаннымОрганизации

&НаКлиенте
Процедура ПоДаннымОрганизацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.ДокументСверки);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоДаннымОрганизации

&НаКлиенте
Процедура ПоДаннымКонтрагентаДебетПриИзменении(Элемент)
	ОбновитьПодвал("ПоКонтрагенту");
КонецПроцедуры

&НаКлиенте
Процедура ПоДаннымКонтрагентаКредитПриИзменении(Элемент)
	ОбновитьПодвал("ПоКонтрагенту");
КонецПроцедуры

&НаКлиенте
Процедура ПоДаннымКонтрагентаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти = Элементы.ПоДаннымКонтрагента.ТекущиеДанные;
		// Чтобы выполнялось редактирование значения конкретного типа, сделано присвоение реквизиту значение требуемого типа
		// При этом у пользователя останется возможность выбрать значение другого типа
		СтрокаТабличнойЧасти.ДокументСверки = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Асинх Процедура ЗаполнитьПоДаннымОрганизации(Команда)
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'Организация'"));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.Организация",, Отказ);
	КонецЕсли;
	
	Если НЕ Объект.СверкаПоСоцФонду 
		И НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'Контрагент'"));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.Контрагент",, Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаНачала)
		Или Не ЗначениеЗаполнено(Объект.ДатаОкончания)
		Или Объект.ДатаНачала > Объект.ДатаОкончания Тогда
		ТекстСообщения = НСтр("ru = 'Не верно задан период сверки взаиморасчетов. Заполнение документа отменено.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.ДатаНачала", , Отказ);
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат
	КонецЕсли;	
	
	Если Объект.ПоДаннымОрганизации.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Табличная часть документа будет предварительно очищена. Продолжить выполнение операции?'");
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;	
		
		Объект.ПоДаннымОрганизации.Очистить();
	КонецЕсли;
	
	Объект.СписокСчетов.Очистить();
	ЗаполнитьПоДаннымОрганизацииНаСервере();
	ОбновитьПодвал("ПоОрганизации");	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗаполнитьПоДаннымКонтрагента(Команда)
	Отказ = Ложь;

	Если Отказ Тогда 
		Возврат
	КонецЕсли;	
	
	Если Объект.ПоДаннымКонтрагента.Количество() > 0 Тогда   
		ТекстВопроса = НСтр("ru = 'Табличная часть документа будет перезаполнена. Продолжить выполнение операции?'");
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
		Объект.ПоДаннымКонтрагента.Очистить();
	КонецЕсли;  
		
		ЗаполнитьПоДаннымКонтрагентаНаКлиенте();
		ОбновитьПодвал("ПоКонтрагенту");
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура - Установить пиктограмму комментария.
//
&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

// Процедура устанавливает видимость и доступность элементов.
//
&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()
	
	Если Объект.СверкаСогласована Тогда
		Элементы.Организация.ТолькоПросмотр = Истина;
		Элементы.СтраницаПоДаннымОрганизации.ТолькоПросмотр = Истина;
		Элементы.СтраницаПоДаннымКонтрагента.ТолькоПросмотр = Истина;
		Элементы.Контрагент.ТолькоПросмотр = Истина;
		Элементы.ДоговорКонтрагента.ТолькоПросмотр = Истина;
		Элементы.СтраницаСписокСчетов.ТолькоПросмотр = Истина;
		Элементы.ДатаНачала.ТолькоПросмотр = Истина;
		Элементы.ДатаОкончания.ТолькоПросмотр = Истина;
	Иначе 
		Элементы.Организация.ТолькоПросмотр = Ложь;
		Элементы.СтраницаПоДаннымОрганизации.ТолькоПросмотр = Ложь;
		Элементы.СтраницаПоДаннымКонтрагента.ТолькоПросмотр = Ложь;
		Элементы.Контрагент.ТолькоПросмотр = Ложь;
		Элементы.ДоговорКонтрагента.ТолькоПросмотр = Ложь;
		Элементы.СтраницаСписокСчетов.ТолькоПросмотр = Ложь;
		Элементы.ДатаНачала.ТолькоПросмотр = Ложь;
		Элементы.ДатаОкончания.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Элементы.ВалютаСверки.ТолькоПросмотр = Истина;	
	Иначе
		Элементы.ВалютаСверки.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Если Объект.ВключаяФилиалы 
		Или Объект.СверкаПоСоцФонду Тогда 
		Элементы.ДоговорКонтрагента.Видимость = Ложь;
	Иначе 
		Элементы.ДоговорКонтрагента.Видимость = Истина;
	КонецЕсли;	
	
	Если Объект.СверкаПоСоцФонду Тогда  
		Элементы.Контрагент.Видимость = Ложь;
		Элементы.ВалютаСверки.Видимость = Ложь;
		Элементы.ВключаяФилиалы.Видимость = Ложь;
		Элементы.СписокСчетовДоговорКонтрагента.Видимость = Ложь;
	Иначе 
		Элементы.Контрагент.Видимость = Истина;
		Элементы.ВалютаСверки.Видимость = Истина;
		Элементы.ВключаяФилиалы.Видимость = Истина;
		Элементы.СписокСчетовДоговорКонтрагента.Видимость = ?(ЗначениеЗаполнено(Объект.ДоговорКонтрагента), Ложь, Истина);
	КонецЕсли;
	
	Если Объект.Разногласие = "" Тогда
		Элементы.СтраницаПоДаннымКонтрагента.Видимость = Ложь;
	Иначе	
		Элементы.СтраницаПоДаннымКонтрагента.Видимость = Истина;
	КонецЕсли;	
	
	Если Объект.ВыводитьНомерЭСФ Тогда
	 	Элементы.ПоДаннымОрганизацииНомерЭСФ.Видимость = Истина;
		Элементы.ПоДаннымКонтрагентаНомерЭСФ.Видимость = Истина;
	Иначе
	    Элементы.ПоДаннымОрганизацииНомерЭСФ.Видимость = Ложь;
		Элементы.ПоДаннымКонтрагентаНомерЭСФ.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры 

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаСервере
Процедура ЗаполнитьПоДаннымОрганизацииНаСервере()
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьПоДаннымБухгалтерскогоУчета();	
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДаннымКонтрагентаНаКлиенте()
	ТаблицаПоДаннымОрганизации = Объект.ПоДаннымОрганизации.Выгрузить();
	ТаблицаПоДаннымОрганизации.Колонки.СуммаДт.Имя = "КредитК";
	ТаблицаПоДаннымОрганизации.Колонки.СуммаКт.Имя = "СуммаДт";
	ТаблицаПоДаннымОрганизации.Колонки.КредитК.Имя = "СуммаКт";
	
	Объект.ПоДаннымКонтрагента.Загрузить(ТаблицаПоДаннымОрганизации);
КонецПроцедуры

// Получает набор данных с сервера для процедуры КонтрагентПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Контрагент, Организация)
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Контрагент, Организация);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ДоговорКонтрагента",
		ДоговорПоУмолчанию);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

// Получает договор по умолчанию
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация)
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ВидыДоговораДляДокумента(Документ);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

&НаСервере
Процедура ОбработатьИзменениеДоговора()

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Объект.ВалютаСверки = Объект.ДоговорКонтрагента.ВалютаРасчетов;
	Иначе
		Объект.ВалютаСверки = ВалютаРегламентированногоУчета;
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПодвал(ВидОбновления = Неопределено)

	Если ВидОбновления = "ПоОрганизации" ИЛИ ВидОбновления = Неопределено Тогда
		ДебетПоОрганизации = Объект.ПоДаннымОрганизации.Итог("СуммаДт");
		КредитПоОрганизации = Объект.ПоДаннымОрганизации.Итог("СуммаКт");
		
		Если Объект.ОстатокНаНачало > 0 Тогда
			Элементы.СальдоНачальноеПоОрганизации.Заголовок = НСтр("ru = 'Долг за контрагентом'");
			СальдоНачальноеПоОрганизации = Объект.ОстатокНаНачало;
			
			СальдоКонечное = СальдоНачальноеПоОрганизации + ДебетПоОрганизации - КредитПоОрганизации;
			
			Если СальдоКонечное > 0 Тогда
				Элементы.СальдоКонечноеПоОрганизации.Заголовок = НСтр("ru = 'Долг за контрагентом'");
				СальдоКонечноеПоОрганизации = СальдоКонечное;
			ИначеЕсли СальдоКонечное < 0 Тогда
				Элементы.СальдоКонечноеПоОрганизации.Заголовок = НСтр("ru = 'Долг за организацией'");
				СальдоКонечноеПоОрганизации = -СальдоКонечное;
			Иначе
				Элементы.СальдоКонечноеПоОрганизации.Заголовок = НСтр("ru = 'Сальдо'");
				СальдоКонечноеПоОрганизации = 0;
			КонецЕсли;
			
		ИначеЕсли Объект.ОстатокНаНачало < 0 Тогда
			Элементы.СальдоНачальноеПоОрганизации.Заголовок = НСтр("ru = 'Долг за организацией'");
			СальдоНачальноеПоОрганизации = -Объект.ОстатокНаНачало;
			
			СальдоКонечное = СальдоНачальноеПоОрганизации + КредитПоОрганизации - ДебетПоОрганизации;
			
			Если СальдоКонечное > 0 Тогда
				Элементы.СальдоКонечноеПоОрганизации.Заголовок = НСтр("ru = 'Долг за организацией'");
				СальдоКонечноеПоОрганизации = СальдоКонечное;
			ИначеЕсли СальдоКонечное < 0 Тогда
				Элементы.СальдоКонечноеПоОрганизации.Заголовок = НСтр("ru = 'Долг за контрагентом'");
				СальдоКонечноеПоОрганизации = -СальдоКонечное;
			Иначе
				Элементы.СальдоКонечноеПоОрганизации.Заголовок = НСтр("ru = 'Сальдо'");
				СальдоКонечноеПоОрганизации = 0;
			КонецЕсли;
			
		Иначе
			Элементы.СальдоНачальноеПоОрганизации.Заголовок = НСтр("ru = 'Сальдо'");
			СальдоНачальноеПоОрганизации = 0;
			
			СальдоКонечное = ДебетПоОрганизации - КредитПоОрганизации;
			
			Если СальдоКонечное > 0 Тогда
				Элементы.СальдоКонечноеПоОрганизации.Заголовок = НСтр("ru = 'Долг за контрагентом'");
				СальдоКонечноеПоОрганизации = СальдоКонечное;
			ИначеЕсли СальдоКонечное < 0 Тогда
				Элементы.СальдоКонечноеПоОрганизации.Заголовок = НСтр("ru = 'Долг за организацией'");
				СальдоКонечноеПоОрганизации = -СальдоКонечное;
			Иначе
				Элементы.СальдоКонечноеПоОрганизации.Заголовок = НСтр("ru = 'Сальдо'");
				СальдоКонечноеПоОрганизации = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидОбновления = "ПоКонтрагенту" ИЛИ ВидОбновления = Неопределено Тогда
		ДебетПоКонтрагенту = Объект.ПоДаннымКонтрагента.Итог("СуммаДт");
		КредитПоКонтрагенту = Объект.ПоДаннымКонтрагента.Итог("СуммаКт");
		
		Если Объект.ОстатокНаНачало > 0 Тогда
			Элементы.СальдоНачальноеПоКонтрагенту.Заголовок = НСтр("ru = 'Сальдо Кт'");
			СальдоНачальноеПоКонтрагенту = Объект.ОстатокНаНачало;
			
			СальдоКонечное = СальдоНачальноеПоКонтрагенту + КредитПоКонтрагенту - ДебетПоКонтрагенту;
			
			Если СальдоКонечное > 0 Тогда
				Элементы.СальдоКонечноеПоКонтрагенту.Заголовок = НСтр("ru = 'Сальдо Кт'");
				СальдоКонечноеПоКонтрагенту = СальдоКонечное;
			ИначеЕсли СальдоКонечное < 0 Тогда
				Элементы.СальдоКонечноеПоКонтрагенту.Заголовок = НСтр("ru = 'Сальдо Дт'");
				СальдоКонечноеПоКонтрагенту = -СальдоКонечное;
			Иначе
				Элементы.СальдоКонечноеПоКонтрагенту.Заголовок = НСтр("ru = 'Сальдо'");
				СальдоКонечноеПоКонтрагенту = 0;
			КонецЕсли;
			
		ИначеЕсли Объект.ОстатокНаНачало < 0 Тогда
			Элементы.СальдоНачальноеПоКонтрагенту.Заголовок = НСтр("ru = 'Сальдо Дт'");
			СальдоНачальноеПоКонтрагенту = -Объект.ОстатокНаНачало;
			
			СальдоКонечное = СальдоНачальноеПоКонтрагенту + ДебетПоКонтрагенту - КредитПоКонтрагенту;
			
			Если СальдоКонечное > 0 Тогда
				Элементы.СальдоКонечноеПоКонтрагенту.Заголовок = НСтр("ru = 'Сальдо Дт'");
				СальдоКонечноеПоКонтрагенту = СальдоКонечное;
			ИначеЕсли СальдоКонечное < 0 Тогда
				Элементы.СальдоКонечноеПоКонтрагенту.Заголовок = НСтр("ru = 'Сальдо Кт'");
				СальдоКонечноеПоКонтрагенту = -СальдоКонечное;
			Иначе
				Элементы.СальдоКонечноеПоКонтрагенту.Заголовок = НСтр("ru = 'Сальдо'");
				СальдоКонечноеПоКонтрагенту = 0;
			КонецЕсли;
			
		Иначе
			Элементы.СальдоНачальноеПоКонтрагенту.Заголовок = НСтр("ru = 'Сальдо'");
			СальдоНачальноеПоКонтрагенту = 0;
			
			СальдоКонечное = ДебетПоКонтрагенту - КредитПоКонтрагенту;
			
			Если СальдоКонечное > 0 Тогда
				Элементы.СальдоКонечноеПоКонтрагенту.Заголовок = НСтр("ru = 'Сальдо Дт'");
				СальдоКонечноеПоКонтрагенту = СальдоКонечное;
			ИначеЕсли СальдоКонечное < 0 Тогда
				Элементы.СальдоКонечноеПоКонтрагенту.Заголовок = НСтр("ru = 'Сальдо Кт'");
				СальдоКонечноеПоКонтрагенту = -СальдоКонечное;
			Иначе
				Элементы.СальдоКонечноеПоКонтрагенту.Заголовок = НСтр("ru = 'Сальдо'");
				СальдоКонечноеПоКонтрагенту = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Проверяет корректность введенных дат начала и окончания.
//
&НаКлиенте
Процедура ПроверитьКорректностьУказанныхДат(Дата)

	Если Объект.ДатаНачала > Объект.ДатаОкончания Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Дата начала периода не может быть больше даты окончания.'"));
		
		Если Дата = "ДатаНачала" Тогда
			Объект.ДатаНачала = Дата("00010101");	
		Иначе
			Объект.ДатаОкончания = Дата("00010101");
		КонецЕсли;
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
