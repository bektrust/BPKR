
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ДатаНачала") И Параметры.Свойство("ДатаОкончания") Тогда
		ДатаНачала 		= Параметры.ДатаНачала;
		ДатаОкончания 	= Параметры.ДатаОкончания;
	Иначе
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"МониторОС", 
			"Дата");
		Если ЗначениеЗаполнено(Значение) Тогда
			Дата = Значение;
		Иначе
			Дата = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"МониторОС", 
			"ДатаНачала");
		Если ЗначениеЗаполнено(Значение) Тогда
			ДатаНачала = Значение;
		Иначе
			ДатаНачала = НачалоГода(Дата);
		КонецЕсли;
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"МониторОС", 
			"ДатаОкончания");
		Если ЗначениеЗаполнено(Значение) Тогда
			ДатаОкончания = Значение;
		Иначе
			ДатаОкончания = НачалоГода(Дата);
		КонецЕсли;		
		
	КонецЕсли;
	
	Если Параметры.Свойство("Организация") Тогда 
		Организация = Параметры.Организация;
	Иначе                            
		Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	КонецЕсли;
	
	ЗаполнитьТаблицуРасшифровкиПоСобытиямОСНаСервере();
	ЗаполнитьНастройки();
	
	ДобавитьПорядок(ВыработкаОС.Порядок);
	ДобавитьПорядок(ДвижениеОСНУ.Порядок);
	ДобавитьПорядок(ЗемельныйНалог.Порядок);
	ДобавитьПорядок(МестонахождениеОС.Порядок);
	//ДобавитьПорядок(НалоговаяАмортизация.Порядок);
	//ДобавитьПорядок(ПараметрыРасчетаЗемельногоНалога.Порядок);
	ДобавитьПорядок(ПараметрыУчетаОС.Порядок);
	ДобавитьПорядок(ПродажиОсновныхСредств.Порядок);
	ДобавитьПорядок(СведенияОбИмуществе.Порядок);
	ДобавитьПорядок(СведенияПоНалогуНаИмущество.Порядок);
	ДобавитьПорядок(СобытияОС.Порядок);
	ДобавитьПорядок(СоставОС.Порядок);
	ДобавитьПорядок(СостоянияОС.Порядок);

	// Налог на имущество
	ЗадатьПериодПриСозданииНаСервере();
	ФормированиеНалогаНаИмущество();
	
	УстановитьПараметрыДинамическихСписков();
	ЗаполнитьТаблицуПроверки();

	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ИмяПредыдущейСтраницы = "СтраницаСвод";
	
	УстановитьОтборНаСписокДокументовМодернизации();
	УстановитьОтборНаРасшифровку();
	УстановитьОтборНаСписокДокументовМодернизации();	
	ОбновитьПодвалыЗакладок();
	ПодключитьОбработчикОжидания("ОбновитьОтборДинамическихСписков", 0.2, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если НЕ ЗавершениеРаботы Тогда
		СохранитьНастройки();	
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРеквизитовШапки

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Отказ = Ложь;
	
	ПроверитьПериод(Отказ);
	
	Если НЕ Отказ Тогда
		УстановитьПараметрыДинамическихСписков();
		ОбновитьПодвалыЗакладок();
		
		ФормированиеНалогаНаИмущество();
		ЗаполнитьТаблицуРасшифровкиПоСобытиямОСНаСервере();	
		УстановитьОтборНаРасшифровку();
		УстановитьВидимостьДоступностьЭлементов();
		
		ЗаполнитьНастройки(Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	Отказ = Ложь;
	
	ПроверитьПериод(Отказ);
	
	Если НЕ Отказ Тогда
		Сформировать(Неопределено);
		//УстановитьПараметрыДинамическихСписков();
		//ОбновитьПодвалыЗакладок();

		//ЗаполнитьТаблицуРасшифровкиПоСобытиямОСНаСервере();
		//УстановитьОтборНаРасшифровку();
		//УстановитьВидимостьДоступностьЭлементов();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	Отказ = Ложь;
	
	ПроверитьПериод(Отказ);
	
	Если НЕ Отказ Тогда
		Сформировать(Неопределено);
		//УстановитьПараметрыДинамическихСписков();
		//ОбновитьПодвалыЗакладок();
		//
		//ЗаполнитьТаблицуРасшифровкиПоСобытиямОСНаСервере();		
		//УстановитьОтборНаРасшифровку();	
		//
		//Дата = ДатаОкончания;
		//ЗадатьПериодПриСозданииНаСервере();
		//ФормированиеНалогаНаИмущество();
		//
		//УстановитьВидимостьДоступностьЭлементов();
		//
		//ЗаполнитьНастройки(Истина);
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении флажка ВключатьЗакрытиеМесяца.
//
&НаКлиенте
Процедура ВключатьЗакрытиеМесяцаПриИзменении(Элемент)	
	РасшифровкаПоСобытиямОС.Очистить();
	ЗаполнитьТаблицуРасшифровкиПоСобытиямОСНаСервере();
	УстановитьОтборНаРасшифровку();
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении флажка ТолькоЗакрытиеМесяца.
//
&НаКлиенте
Процедура ТолькоЗакрытиеМесяцаПриИзменении(Элемент)
	РасшифровкаПоСобытиямОС.Очистить();
	ЗаполнитьТаблицуРасшифровкиПоСобытиямОСНаСервере();
	УстановитьОтборНаРасшифровку();
	УстановитьВидимостьДоступностьЭлементов();
	
	РассчитатьИтогАмортизацииЗаМесяц(Новый Структура("ОсновноеСредство", ОсновноеСредство));
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеДокументыПриИзменении(Элемент)
	
	УстановитьОтборНаРасшифровку();	
	УстановитьВидимостьДоступностьЭлементов();	
КонецПроцедуры

&НаКлиенте
Процедура ОсновноеСредствоПриИзменении(Элемент)
	УстановитьОтбор();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОтборов

// Процедура - обработчик события ПриИзменении поля ввода ОтборГруппаНУ.
//
&НаКлиенте
Процедура ОтборГруппаНУПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("ОбновитьОтборДинамическихСписков", 0.2, Истина);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОтборСчетБУ.
//
&НаКлиенте
Процедура ОтборСчетБУПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("ОбновитьОтборДинамическихСписков", 0.2, Истина);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОтборПодразделение.
//
&НаКлиенте
Процедура ОтборПодразделениеПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("ОбновитьОтборДинамическихСписков", 0.2, Истина);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОтборМОЛ.
//
&НаКлиенте
Процедура ОтборМОЛПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("ОбновитьОтборДинамическихСписков", 0.2, Истина);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОтборСостояние.
//
&НаКлиенте
Процедура ОтборСостояниеПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("ОбновитьОтборДинамическихСписков", 0.2, Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикСобытийЭлементаСтраницыОбработки

&НаКлиенте
Процедура СтраницыОбработкиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УстановитьПериоды();
	
	Страница = Элементы.СтраницыОбработки.ТекущаяСтраница.Имя;
	Если Страница = "СтраницаСвод" И ИмяПредыдущейСтраницы = "СтраницаНалогНаИмущество" 
		И ДатаРасчетаНИИзменилась Тогда
		
		ДатаРасчетаНИИзменилась = Ложь;
		
		УстановитьПараметрыДинамическихСписков();
		ОбновитьПодвалыЗакладок();
		//ФормированиеНалогаНаИмущество();
		ЗаполнитьТаблицуРасшифровкиПоСобытиямОСНаСервере();
		УстановитьОтборНаРасшифровку();
		УстановитьОтборНаСписокДокументовМодернизации();
		УстановитьВидимостьДоступностьЭлементов();
		ЗаполнитьТаблицуПроверки();		
		
	ИначеЕсли Страница = "СтраницаРасчетАмортизации" Тогда
		СтрокаТаблицы = Элементы.СписокОС.ТекущиеДанные;	
		Если СтрокаТаблицы = Неопределено Тогда
			ПараметрыРасчетаАмортизации.Очистить();
			Возврат;
		Иначе
			ЗаполнитьТаблицуРасчетаАмортизации(СтрокаТаблицы.ОсновноеСредство);
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяПредыдущейСтраницы = Страница;
	
	УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокОС

&НаКлиенте
Процедура СписокОСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОсновноеСредство = Элементы.СписокОС.ТекущиеДанные.ОсновноеСредство;
	ПараметрыФормы 	= Новый Структура("Ключ", ОсновноеСредство);
	ОткрытьФорму("Справочник.ОсновныеСредства.Форма.ФормаЭлемента", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОСПриАктивизацииСтроки(Элемент)
	ТекущиеДанныеСписокОС = Элементы.СписокОС.ТекущиеДанные;
	
	Если ТекущиеДанныеСписокОС = Неопределено Тогда
		ОсновноеСредство 				= Неопределено;
		НадписьСобытиеИДата				= "";
		НадписьМетодИзноса				= "";
		НадписьПервоначальнаяСтоимость	= "";
		НадписьНакопленныйИзнос 		= "";
		НадписьБазаАмортизации			= "";             
	Иначе 		
		ОсновноеСредство 				= ТекущиеДанныеСписокОС.ОсновноеСредство;
		НадписьСобытиеИДата				= СтрШаблон(НСтр("ru = 'Событие: %1;  ВЭ: %2'"), ТекущиеДанныеСписокОС.Событие,
															Формат(ТекущиеДанныеСписокОС.ПериодСобытия, "ДЛФ=D"));											
		НадписьМетодИзноса				= СтрШаблон(НСтр("ru = 'Метод износа: %1'"), ТекущиеДанныеСписокОС.МетодИзноса);
		НадписьПервоначальнаяСтоимость	= СтрШаблон(НСтр("ru = 'Первоначальная стоимость: %1'"), ТекущиеДанныеСписокОС.ПервоначальнаяСтоимость);
		НадписьНакопленныйИзнос 		= СтрШаблон(НСтр("ru = 'Накопленный износ: %1'"), ?(ТекущиеДанныеСписокОС.СуммаАмортизация < 0, 
													-ТекущиеДанныеСписокОС.СуммаАмортизация, ТекущиеДанныеСписокОС.СуммаАмортизация));
		НадписьБазаАмортизации			= СтрШаблон(НСтр("ru = 'База амортизации: %1'"), ТекущиеДанныеСписокОС.БазаАмортизации);
	КонецЕсли;	
	
	УстановитьОтборНаРасшифровку();
	УстановитьВидимостьДоступностьЭлементов();
	УстановитьОтбор();
	
	ПодключитьОбработчикОжидания("ОбновитьОтборДинамическихСписков", 0.2, Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаПоСобытиямОС

&НаКлиенте
Процедура РасшифровкаПоСобытиямОСПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборНаСписокДокументовМодернизации();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПоСобытиямОСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СсылкаДокумента = Элементы.РасшифровкаПоСобытиямОС.ТекущиеДанные.Документ;
	НазваниеДокумента = ПолучитьНазваниеДокумента(СсылкаДокумента);
	ПараметрыФормы 	= Новый Структура("Ключ", СсылкаДокумента);
	ОткрытьФорму("Документ." + НазваниеДокумента + ".ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокДокументовМодернизации

&НаКлиенте
Процедура СписокДокументовМодернизацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СсылкаДокумента = Элементы.СписокДокументовМодернизации.ТекущиеДанные.Документ;
	НазваниеДокумента = ПолучитьНазваниеДокумента(СсылкаДокумента);
	ПараметрыФормы 	= Новый Структура("Ключ", СсылкаДокумента);
	ОткрытьФорму("Документ." + НазваниеДокумента + ".ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокОСТранспорт

&НаКлиенте
Процедура СписокОСТранспортПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.СписокОСТранспорт.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Отбор = Новый Структура();
		Отбор.Вставить("ОсновноеСредство", ТекущиеДанные.ОсновноеСредство);
		
		СписокПараметровТранспорт.Очистить();
		МассивСтрок = Объект.Транспорт.НайтиСтроки(Отбор);
		
		Если МассивСтрок.Количество() > 0 Тогда		
			СтрокаТабличнойЧасти = МассивСтрок[0];
			
			СтрокаТаблицы = СписокПараметровТранспорт.Добавить();
			СтрокаТаблицы.Параметр = "Группа имущества";
			СтрокаТаблицы.Значение = СтрокаТабличнойЧасти.ГруппаИмущества;			
			
			СтрокаТаблицы = СписокПараметровТранспорт.Добавить();
			СтрокаТаблицы.Параметр = "Дата ввода";
			СтрокаТаблицы.Значение = Формат(СтрокаТабличнойЧасти.ДатаВводаВЭксплуатацию, "ДЛФ=D");
			
			СтрокаТаблицы = СписокПараметровТранспорт.Добавить();
			СтрокаТаблицы.Параметр = "Начисление с даты";
			СтрокаТаблицы.Значение = Формат(СтрокаТабличнойЧасти.ДатаНачисленияНалогаНаИмущество, "ДЛФ=D");
			
			СтрокаТаблицы = СписокПараметровТранспорт.Добавить();
			СтрокаТаблицы.Параметр = "Выбытие";
			СтрокаТаблицы.Значение = Формат(СтрокаТабличнойЧасти.ДатаВыбытия, "ДЛФ=D");
			
			СтрокаТаблицы = СписокПараметровТранспорт.Добавить();
			СтрокаТаблицы.Параметр = "Лет эксплуатации";
			СтрокаТаблицы.Значение = Формат(СтрокаТабличнойЧасти.КоличествоЛетЭксплуатации, "ЧГ=0");
			
			СтрокаТаблицы = СписокПараметровТранспорт.Добавить();
			СтрокаТаблицы.Параметр = "Вид транспорта";
			СтрокаТаблицы.Значение = СтрокаТабличнойЧасти.ВидТранспорта;
			
			СтрокаТаблицы = СписокПараметровТранспорт.Добавить();
			СтрокаТаблицы.Параметр = "Ставка за см3, сом";
			СтрокаТаблицы.Значение = СтрокаТабличнойЧасти.Ставка;
			
			СтрокаТаблицы = СписокПараметровТранспорт.Добавить();
			СтрокаТаблицы.Параметр = "Объем двигателя, см3";
			СтрокаТаблицы.Значение = СтрокаТабличнойЧасти.ОбъемДвигателя;
			
			СтрокаТаблицы = СписокПараметровТранспорт.Добавить();
			СтрокаТаблицы.Параметр = "Балансовая стоимость";
			СтрокаТаблицы.Значение = СтрокаТабличнойЧасти.БалансоваяСтоимость;			
			
			СтрокаТаблицы = СписокПараметровТранспорт.Добавить();
			СтрокаТаблицы.Параметр = "Категория";
			СтрокаТаблицы.Значение = СтрокаТабличнойЧасти.ВидТранспортаКатегорияАБВ;
			
			СтрокаТаблицы = СписокПараметровТранспорт.Добавить();
			СтрокаТаблицы.Параметр = "Налог";
			СтрокаТаблицы.Значение = СтрокаТабличнойЧасти.СуммаНалога;
		КонецЕсли;	
		
		Элементы.СписокДокументовТранспорт.ОтборСтрок = Новый ФиксированнаяСтруктура("ОсновноеСредство", ТекущиеДанные.ОсновноеСредство);
		
	Иначе	
		Элементы.СписокДокументовТранспорт.ОтборСтрок = Новый ФиксированнаяСтруктура("ОсновноеСредство", ПредопределенноеЗначение("Справочник.ОсновныеСредства.ПустаяСсылка"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокОСТранспортВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОсновноеСредство = Элементы.СписокОСТранспорт.ТекущиеДанные.ОсновноеСредство;
	ПараметрыФормы 	= Новый Структура("Ключ", ОсновноеСредство);
	ОткрытьФорму("Справочник.ОсновныеСредства.Форма.ФормаЭлемента", ПараметрыФормы);	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокДокументовТранспорт

&НаКлиенте
Процедура СписокДокументовТранспортВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СсылкаДокумента = Элементы.СписокДокументовТранспорт.ТекущиеДанные.Документ;
	НазваниеДокумента = ПолучитьНазваниеДокумента(СсылкаДокумента);
	ПараметрыФормы 	= Новый Структура("Ключ", СсылкаДокумента);
	ОткрытьФорму("Документ." + НазваниеДокумента + ".ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокОСНедвижимость

&НаКлиенте
Процедура СписокОСНедвижимостьПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.СписокОСНедвижимость.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Отбор = Новый Структура();
		Отбор.Вставить("ОсновноеСредство", ТекущиеДанные.ОсновноеСредство);
		
		СписокПараметровНедвижимость.Очистить();
		МассивСтрок = Объект.Недвижимость.НайтиСтроки(Отбор);
		
		Если МассивСтрок.Количество() > 0 Тогда		
			СтрокаТабличнойЧасти = МассивСтрок[0];
			
			СтрокаТаблицы = СписокПараметровНедвижимость.Добавить();
			СтрокаТаблицы.Параметр = "Группа имущества";
			СтрокаТаблицы.Значение = СтрокаТабличнойЧасти.ГруппаИмущества;
			
			СтрокаТаблицы = СписокПараметровНедвижимость.Добавить();
			СтрокаТаблицы.Параметр = "Дата ввода";
			СтрокаТаблицы.Значение = Формат(СтрокаТабличнойЧасти.ДатаВводаВЭксплуатацию, "ДЛФ=D");
			
			СтрокаТаблицы = СписокПараметровНедвижимость.Добавить();
			СтрокаТаблицы.Параметр = "Начисление с даты";
			СтрокаТаблицы.Значение = Формат(СтрокаТабличнойЧасти.ДатаНачисленияНалогаНаИмущество, "ДЛФ=D");
			
			СтрокаТаблицы = СписокПараметровНедвижимость.Добавить();
			СтрокаТаблицы.Параметр = "Выбытие";
			СтрокаТаблицы.Значение = Формат(СтрокаТабличнойЧасти.ДатаВыбытия, "ДЛФ=D");
			
			СтрокаТаблицы = СписокПараметровНедвижимость.Добавить();
			СтрокаТаблицы.Параметр = "Общая площадь";
			СтрокаТаблицы.Значение = СтрокаТабличнойЧасти.ОбщаяПлощадь;
			
			СтрокаТаблицы = СписокПараметровНедвижимость.Добавить();
			СтрокаТаблицы.Параметр = "Лет эксплуатации";
			СтрокаТаблицы.Значение = Формат(СтрокаТабличнойЧасти.КоличествоЛетЭксплуатации, "ЧГ=0");
			
			СтрокаТаблицы = СписокПараметровНедвижимость.Добавить();
			СтрокаТаблицы.Параметр = "Материал стен";
			СтрокаТаблицы.Значение = СтрокаТабличнойЧасти.МатериалСтен;
				
			СтрокаТаблицы = СписокПараметровНедвижимость.Добавить();
			СтрокаТаблицы.Параметр = "Оценочная (налогооблагаемая) стоимость за 1 кв.м";
			СтрокаТаблицы.Значение = СтрокаТабличнойЧасти.ОценочнаяСтоимость;
			
			СтрокаТаблицы = СписокПараметровНедвижимость.Добавить();
			СтрокаТаблицы.Параметр = "Кр";
			СтрокаТаблицы.Значение = СтрокаТабличнойЧасти.Кр;
			
			СтрокаТаблицы = СписокПараметровНедвижимость.Добавить();
			СтрокаТаблицы.Параметр = "Кз";
			СтрокаТаблицы.Значение = СтрокаТабличнойЧасти.Кз;
			
			СтрокаТаблицы = СписокПараметровНедвижимость.Добавить();
			СтрокаТаблицы.Параметр = "Ко";
			СтрокаТаблицы.Значение = СтрокаТабличнойЧасти.Ко;
			
			СтрокаТаблицы = СписокПараметровНедвижимость.Добавить();
			СтрокаТаблицы.Параметр = "Количество месяцев эксплуатации";
			СтрокаТаблицы.Значение = СтрокаТабличнойЧасти.КоличествоМесяцевЭксплуатации;
			
			СтрокаТаблицы = СписокПараметровНедвижимость.Добавить();
			СтрокаТаблицы.Параметр = "Стоимость";
			СтрокаТаблицы.Значение = СтрокаТабличнойЧасти.СтоимостьНУ;
			
			СтрокаТаблицы = СписокПараметровНедвижимость.Добавить();
			СтрокаТаблицы.Параметр = "Ставка";
			СтрокаТаблицы.Значение = СтрокаТабличнойЧасти.Ставка;
			
			СтрокаТаблицы = СписокПараметровНедвижимость.Добавить();
			СтрокаТаблицы.Параметр = "Налог на имущество";
			СтрокаТаблицы.Значение = СтрокаТабличнойЧасти.СуммаНалога;
		КонецЕсли;	
		
		Элементы.СписокДокументовНедвижимость.ОтборСтрок = Новый ФиксированнаяСтруктура("ОсновноеСредство", ТекущиеДанные.ОсновноеСредство);
		
	Иначе	
		Элементы.СписокДокументовНедвижимость.ОтборСтрок = Новый ФиксированнаяСтруктура("ОсновноеСредство", ПредопределенноеЗначение("Справочник.ОсновныеСредства.ПустаяСсылка"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокОСНедвижимостьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОсновноеСредство = Элементы.СписокОСНедвижимость.ТекущиеДанные.ОсновноеСредство;
	ПараметрыФормы 	= Новый Структура("Ключ", ОсновноеСредство);
	ОткрытьФорму("Справочник.ОсновныеСредства.Форма.ФормаЭлемента", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокДокументовНедвижимость

&НаКлиенте
Процедура СписокДокументовНедвижимостьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СсылкаДокумента = Элементы.СписокДокументовНедвижимость.ТекущиеДанные.Документ;
	НазваниеДокумента = ПолучитьНазваниеДокумента(СсылкаДокумента);
	ПараметрыФормы 	= Новый Структура("Ключ", СсылкаДокумента);
	ОткрытьФорму("Документ." + НазваниеДокумента + ".ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПерепровестиДокументы(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросПерепровестиДокументы", ЭтотОбъект, Параметры);
	ТекстВопроса = НСтр("ru = 'Документы будут перепроведены. Продолжить?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	Отказ = Ложь;
	
	ПроверитьПериод(Отказ);
	
	Если НЕ Отказ Тогда
		УстановитьПараметрыДинамическихСписков();
		ОбновитьПодвалыЗакладок();
		ФормированиеНалогаНаИмущество();
		ЗаполнитьТаблицуРасшифровкиПоСобытиямОСНаСервере();
		УстановитьОтборНаРасшифровку();
		УстановитьОтборНаСписокДокументовМодернизации();
		УстановитьВидимостьДоступностьЭлементов();
		ЗаполнитьТаблицуПроверки();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРасшифровку(Команда)
	
	Если ПоказатьРезультатПерепроведения Тогда
		ПоказатьРезультатПерепроведения = Ложь;
		Элементы.ПоказатьРасшифровку.Заголовок = "Показать результат перепроведения";
	Иначе
		ПоказатьРезультатПерепроведения = Истина;
		Элементы.ПоказатьРасшифровку.Заголовок = "Показать расшифровку";
	КонецЕсли;	
	
	УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетВедомостьВыбытияОС(Команда)
	
	ОтборыОтчета = Новый Массив;

	ТекущиеДанные = Элементы.СписокОС.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ОтборПоОС = Новый Структура;
		ОтборПоОС.Вставить("Поле",         "ОсновноеСредство");
		ОтборПоОС.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
		ОтборПоОС.Вставить("Значение",     ТекущиеДанные.ОсновноеСредство);
		
		ОтборыОтчета.Добавить(ОтборПоОС);	                                    
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Подразделение) Тогда 
			ОтборПоПодразделению = Новый Структура;
			ОтборПоПодразделению.Вставить("Поле",         "Подразделение");
			ОтборПоПодразделению.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
			ОтборПоПодразделению.Вставить("Значение",     ТекущиеДанные.Подразделение);
			
			ОтборыОтчета.Добавить(ОтборПоПодразделению);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.МОЛ) Тогда 
			ОтборПоМОЛ = Новый Структура;
			ОтборПоМОЛ.Вставить("Поле",         "МОЛ");
			ОтборПоМОЛ.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
			ОтборПоМОЛ.Вставить("Значение",     ТекущиеДанные.МОЛ);
			
			ОтборыОтчета.Добавить(ОтборПоМОЛ);
		КонецЕсли;
	КонецЕсли;
		
	ОткрытьОтчет("Отчет.ВедомостьВыбытияОС.Форма",,ОтборыОтчета,,,, ДатаНачала, КонецДня(ДатаОкончания));
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетВедомостьПередачиОС(Команда)
	
	стПериод = Новый СтандартныйПериод;
	стПериод.ДатаНачала = ДатаНачала;
	стПериод.ДатаОкончания = КонецДня(ДатаОкончания);
	
	ПользовательскиеНастройки = УстановитьПользовательскиеНастройкиОтчета("ВедомостьПередачиОС",Новый Структура("СтПериод", стПериод));
	
	УсловияОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Организация) Тогда 
		УсловияОтбора.Вставить("Организация", Организация);
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура("ПользовательскиеНастройки, Отбор, СформироватьПриОткрытии", ПользовательскиеНастройки, УсловияОтбора, Истина);
	ОткрытьФорму("Отчет.ВедомостьПередачиОС.Форма", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетВедомостьПеремещенияОС(Команда)
	
	стПериод = Новый СтандартныйПериод;
	стПериод.ДатаНачала = ДатаНачала;
	стПериод.ДатаОкончания = КонецДня(ДатаОкончания);
	
	ПользовательскиеНастройки = УстановитьПользовательскиеНастройкиОтчета("ВедомостьПеремещенияОС",Новый Структура("СтПериод", стПериод));
	
	УсловияОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Организация) Тогда 
		УсловияОтбора.Вставить("Организация", Организация);
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура("ПользовательскиеНастройки, Отбор, СформироватьПриОткрытии", ПользовательскиеНастройки, УсловияОтбора, Истина);
	ОткрытьФорму("Отчет.ВедомостьПеремещенияОС.Форма", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетВедомостьПоАмортизацииОС(Команда)
	
	ОткрытьОтчет("Отчет.ВедомостьПоАмортизацииОС.Форма",,,,,, ДатаНачала, КонецДня(ДатаОкончания));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетВедомостьПоступленияОС(Команда)
	
	ОтборыОтчета = Новый Массив;

	ТекущиеДанные = Элементы.СписокОС.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ОтборПоОС = Новый Структура;
		ОтборПоОС.Вставить("Поле",         "ОсновноеСредство");
		ОтборПоОС.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
		ОтборПоОС.Вставить("Значение",     ТекущиеДанные.ОсновноеСредство);
		
		ОтборыОтчета.Добавить(ОтборПоОС);	                                    
	КонецЕсли;
		
	ОткрытьОтчет("Отчет.ВедомостьПоступленияОС.Форма",,ОтборыОтчета,,,, ДатаНачала, КонецДня(ДатаОкончания));
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетВедомостьПринятияКУчетуОС(Команда)
	
	ОтборыОтчета = Новый Массив;

	ТекущиеДанные = Элементы.СписокОС.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ОтборПоОС = Новый Структура;
		ОтборПоОС.Вставить("Поле",         "ОсновноеСредство");
		ОтборПоОС.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
		ОтборПоОС.Вставить("Значение",     ТекущиеДанные.ОсновноеСредство);
		
		ОтборыОтчета.Добавить(ОтборПоОС);	                                    
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Подразделение) Тогда 
			ОтборПоПодразделению = Новый Структура;
			ОтборПоПодразделению.Вставить("Поле",         "ОсновноеСредство.Подразделение");
			ОтборПоПодразделению.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
			ОтборПоПодразделению.Вставить("Значение",     ТекущиеДанные.Подразделение);
			
			ОтборыОтчета.Добавить(ОтборПоПодразделению);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.МОЛ) Тогда 
			ОтборПоМОЛ = Новый Структура;
			ОтборПоМОЛ.Вставить("Поле",         "ОсновноеСредство.МОЛ");
			ОтборПоМОЛ.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
			ОтборПоМОЛ.Вставить("Значение",     ТекущиеДанные.МОЛ);
			
			ОтборыОтчета.Добавить(ОтборПоМОЛ);
		КонецЕсли;
	КонецЕсли;
		
	ОткрытьОтчет("Отчет.ВедомостьПринятияКУчетуОС.Форма",,ОтборыОтчета,,,, ДатаНачала, КонецДня(ДатаОкончания));
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетВедомостьОС(Команда)
	
	ОтборыОтчета = Новый Массив;

	ТекущиеДанные = Элементы.СписокОС.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ОтборПоОС = Новый Структура;
		ОтборПоОС.Вставить("Поле",         "ОсновноеСредство");
		ОтборПоОС.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
		ОтборПоОС.Вставить("Значение",     ТекущиеДанные.ОсновноеСредство);
		
		ОтборыОтчета.Добавить(ОтборПоОС);	                                    
	КонецЕсли;
		
	ОткрытьОтчет("Отчет.ВедомостьОС.Форма",,ОтборыОтчета,,,, ДатаНачала, КонецДня(ДатаОкончания));
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетЖурналОС(Команда)
	
	стПериод = Новый СтандартныйПериод;
	стПериод.ДатаНачала = ДатаНачала;
	стПериод.ДатаОкончания = КонецДня(ДатаОкончания);
	
	ПользовательскиеНастройки = УстановитьПользовательскиеНастройкиОтчета("ЖурналОС",Новый Структура("СтПериод", стПериод));
	
	УсловияОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Организация) Тогда 
		УсловияОтбора.Вставить("Организация", Организация);
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура("ПользовательскиеНастройки, Отбор, СформироватьПриОткрытии", ПользовательскиеНастройки, УсловияОтбора, Истина);
	ОткрытьФорму("Отчет.ЖурналОС.Форма", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетИтоговаяВедомостьПоГруппамОСЗаМесяц(Команда)
	
	стПериод = Новый СтандартныйПериод;
	стПериод.ДатаНачала = ДатаНачала;
	стПериод.ДатаОкончания = КонецДня(ДатаОкончания);
	
	ПользовательскиеНастройки = УстановитьПользовательскиеНастройкиОтчета("ИтоговаяВедомостьПоГруппамОСЗаМесяц",Новый Структура("СтПериод", стПериод));
	
	УсловияОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Организация) Тогда 
		УсловияОтбора.Вставить("Организация", Организация);
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура("ПользовательскиеНастройки, Отбор, СформироватьПриОткрытии", ПользовательскиеНастройки, УсловияОтбора, Истина);
	ОткрытьФорму("Отчет.ИтоговаяВедомостьПоГруппамОСЗаМесяц.Форма", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетОборотнаяВедомостьОС(Команда)
	
	ОтборыОтчета = Новый Массив;

	ТекущиеДанные = Элементы.СписокОС.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ОтборПоОС = Новый Структура;
		ОтборПоОС.Вставить("Поле",         "ОсновноеСредство");
		ОтборПоОС.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
		ОтборПоОС.Вставить("Значение",     ТекущиеДанные.ОсновноеСредство);
		
		ОтборыОтчета.Добавить(ОтборПоОС);	                                    
	КонецЕсли;
		
	ОткрытьОтчет("Отчет.ОборотнаяВедомостьОС.Форма",,ОтборыОтчета,,,, ДатаНачала, КонецДня(ДатаОкончания));
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетОтчетОНаличииОС(Команда)
	
	УсловияОтбора = Новый Структура;
	
	УсловияОтбора.Вставить("ДатаК", ДатаОкончания);	
	
	Если ЗначениеЗаполнено(Организация) Тогда 
		УсловияОтбора.Вставить("Организация", Организация);
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура("Отбор, СформироватьПриОткрытии", УсловияОтбора, Истина);
	ОткрытьФорму("Отчет.ОтчетОНаличииОС.Форма", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетСводПоОС(Команда)
	
	ОтборыОтчета = Новый Массив;

	ТекущиеДанные = Элементы.СписокОС.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ОтборПоОС = Новый Структура;
		ОтборПоОС.Вставить("Поле",         "ОсновноеСредство");
		ОтборПоОС.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
		ОтборПоОС.Вставить("Значение",     ТекущиеДанные.ОсновноеСредство);
		
		ОтборыОтчета.Добавить(ОтборПоОС);	                                    
	КонецЕсли;
		
	ОткрытьОтчет("Отчет.СводПоОС.Форма",,ОтборыОтчета,,,, ДатаНачала, КонецДня(ДатаОкончания));
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРегистрСтавкиНалогаНаИмущество(Команда)
	
	ОткрытьФорму("РегистрСведений.СтавкиНалогаНаИмущество.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСправочникВидыТранспорта(Команда)
	
	ОткрытьФорму("Справочник.ВидыТранспортаНалогНаИмущество.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСправочникВидыМатериаловСтен(Команда)
	
	ОткрытьФорму("Справочник.ВидыМатериаловСтенНалогНаИмущество.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСправочникРегиональныеКоэффициенты(Команда)
	
	ОткрытьФорму("Справочник.РегиональныеКоэффициентыНалогНаИмущество.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСправочникЗональныеКоэффициенты(Команда)
	
	ОткрытьФорму("Справочник.ЗональныеКоэффициенты.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСправочникОтраслевыеКоэффициенты(Команда)
	
	ОткрытьФорму("Справочник.ОтраслевыеКоэффициентыНалогНаИмущество.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРегистрСведенияОбИмуществе(Команда)
	
	ОткрытьФорму("РегистрСведений.СведенияОбИмуществе.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРегистрСведенияОТранспорте(Команда)
	
	ОткрытьФорму("РегистрСведений.СведенияОТранспорте.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСправочникГруппыИмущества(Команда)

	ОткрытьФорму("Справочник.ГруппыИмущества.ФормаСписка");

КонецПроцедуры

&НаКлиенте
Процедура ОсновноеСредство(Команда)
	
	ОткрытьФорму("Справочник.ОсновныеСредства.Форма.ФормаЭлемента", Новый Структура("Ключ", ОсновноеСредство));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОтветНаВопросПерепровестиДокументы(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПоказатьРезультатПерепроведения = Истина;
		ПоказатьКомандуРасшифровки = Истина;
		ПараметрыКоманды = Новый Структура;
		ПараметрыКоманды.Вставить("МассивСсылок", ДокументыДляОбработки());
		РезультатВыполнения = ПерепровестиДокументыНаСервере(ПараметрыКоманды);
		ПараметрыОбработчикаОжидания = Новый Структура();
		
		Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда		
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
		КонецЕсли;
		
		// Установить видимость и доступность элементов формы
		УстановитьВидимостьДоступностьЭлементов();
	КонецЕсли;                                    	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость и доступность элементов.
//
&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()
	
	Элементы.ПерепровестиДокументы.Видимость = НЕ ПоказатьРезультатПерепроведения;
	Элементы.РасшифровкаПоСобытиямОС.Видимость = НЕ ПоказатьРезультатПерепроведения;
	Элементы.Результат.Видимость = ПоказатьРезультатПерепроведения;
	Элементы.СостояниеПрогресса.Видимость = ПоказатьРезультатПерепроведения;
	Элементы.ТолькоЗакрытиеМесяца.Видимость = ВключатьЗакрытиеМесяца;
	Элементы.ПоказатьРасшифровку.Видимость = ПоказатьКомандуРасшифровки;
	Элементы.РасшифровкаПоСобытиямОСМОЛ.Видимость = Константы.ФункциональнаяОпцияУчетДвиженияОСПоМОЛ.Получить();
	Элементы.РасшифровкаПоСобытиямОСПодразделение.Видимость = Константы.ФункциональнаяОпцияУчетДвиженияОСПоПодразделениям.Получить();
	
	Страница = Элементы.СтраницыОбработки.ТекущаяСтраница.Имя;
	Элементы.ПериодМонитора.Видимость = Ложь;
	
	Если Страница = "СтраницаСвод" Тогда
		
		Элементы.ДатаНачала.Видимость 	 = Истина;
		Элементы.ДатаОкончания.Видимость = Истина;
		
	ИначеЕсли Страница = "СтраницаДокументы" Тогда
		
		Элементы.ДатаНачала.Видимость 	 = Ложь;
		Элементы.ДатаОкончания.Видимость = Ложь;
		
	ИначеЕсли Страница = "СтраницаНалогНаИмущество" Тогда
		
		Элементы.ДатаНачала.Видимость 	  = Ложь;
		Элементы.ДатаОкончания.Видимость  = Ложь;
		Элементы.ПериодМонитора.Видимость = Истина;
		
	ИначеЕсли Страница = "СтраницаАмортизацияОСЗаПериод" Тогда
		
		Элементы.ДатаНачала.Видимость 	 = Истина;
		Элементы.ДатаОкончания.Видимость = Истина;
		
	ИначеЕсли Страница = "СтраницаРегистры" Тогда
		
		Элементы.ДатаНачала.Видимость 	 = Ложь;
		Элементы.ДатаОкончания.Видимость = Ложь;
		
	ИначеЕсли Страница = "СтраницаСводПоСчетам" Тогда
		
		Элементы.ДатаНачала.Видимость 	 = Истина;
		Элементы.ДатаОкончания.Видимость = Истина;		
	КонецЕсли;	
	
	Если ОсновноеСредство = ПредопределенноеЗначение("Справочник.ОсновныеСредства.ПустаяСсылка") Тогда	
		Элементы.ФормаОсновноеСредство.Видимость = Ложь;
		Элементы.ФормаОсновноеСредство.Заголовок = "";
	Иначе	
		Элементы.ФормаОсновноеСредство.Видимость = Истина;
		Элементы.ФормаОсновноеСредство.Заголовок = СтрШаблон(НСтр("ru = 'Текущее ОС: %1'"), ОсновноеСредство);
	КонецЕсли;	                                   
КонецПроцедуры 

&НаКлиенте
Процедура УстановитьПериоды()
	Страница = Элементы.СтраницыОбработки.ТекущаяСтраница.Имя;
	
	//Если Страница = "СтраницаСвод" И ИмяПредыдущейСтраницы = "СтраницаНалогНаИмущество" Тогда
	//	ДатаНачала 		= НачалоГода(Дата);
	//	ДатаОкончания 	= КонецМесяца(Дата);			
	//ИначеЕсли Страница = "СтраницаНалогНаИмущество" И ИмяПредыдущейСтраницы = "СтраницаСвод" Тогда		
	//    Дата = ДатаОкончания;
	//	ЗадатьПериодПриСозданииНаСервере();
	//	ФормированиеНалогаНаИмущество();
	//КонецЕсли;	
	
	Если Страница = "СтраницаНалогНаИмущество" Тогда
		Если НЕ Дата = ДатаОкончания Тогда
			Дата = ДатаОкончания;
		КонецЕсли;
	    Если НЕ ДатаНачала 	= НачалоГода(Дата) Тогда
			ДатаНачала 	= НачалоГода(Дата);
		КонецЕсли;
		Если НЕ ДатаОкончания 	= КонецМесяца(Дата) Тогда
			ДатаОкончания 	= КонецМесяца(Дата);
		КонецЕсли;

		ЗадатьПериодПриСозданииНаСервере();
		//ФормированиеНалогаНаИмущество();
	КонецЕсли;
	
	Если ИмяПредыдущейСтраницы = "СтраницаНалогНаИмущество" Тогда
	    Если НЕ ДатаНачала 	= НачалоГода(Дата) Тогда
			ДатаНачала 	= НачалоГода(Дата);
		КонецЕсли;
		Если НЕ ДатаОкончания 	= КонецМесяца(Дата) Тогда
			ДатаОкончания 	= КонецМесяца(Дата);
		КонецЕсли;			
	КонецЕсли;	

КонецПроцедуры // 

// Процедура заполнения ТЧ "РасшифровкиПоСобытиямОС".
//
&НаСервере
Процедура ЗаполнитьТаблицуРасшифровкиПоСобытиямОСНаСервере()

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	УчетнаяПолитикаОрганизаций.НачислениеАмортизацииОСПоМесяцам КАК НачислениеАмортизацииОСПоМесяцам,
		|	УчетнаяПолитикаОрганизаций.Период КАК Период
		|ПОМЕСТИТЬ ВременнаяТаблицаУчетнаяПолитика
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
		|ГДЕ
		|	УчетнаяПолитикаОрганизаций.Организация = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПараметрыУчетаОС.Период КАК Период,
		|	ПараметрыУчетаОС.Регистратор КАК Регистратор,
		|	ПараметрыУчетаОС.Организация КАК Организация,
		|	ПараметрыУчетаОС.СчетУчета КАК СчетУчета,
		|	ПараметрыУчетаОС.СчетУчета.ПарныйСчет КАК СчетУчетаПарныйСчет,
		|	ПараметрыУчетаОС.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
		|	ПараметрыУчетаОС.СрокСлужбы КАК СрокСлужбы,
		|	ПараметрыУчетаОС.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
		|	ПараметрыУчетаОС.СпособОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизации,
		|	ПараметрыУчетаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ПараметрыУчетаОС.СтоимостьДляРасчетаАмортизации КАК БазаАмортизации,
		|	ПараметрыУчетаОС.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость,
		|	ПараметрыУчетаОС.ОбъемПродукции КАК ОбъемПродукции
		|ПОМЕСТИТЬ ВременнаяТаблицаПараметрыУчетаОСНаДатуОкончания
		|ИЗ
		|	РегистрСведений.ПараметрыУчетаОС КАК ПараметрыУчетаОС
		|ГДЕ
		|	ПараметрыУчетаОС.Организация = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОбороты.Период КАК Период,
		|	ХозрасчетныйОстаткиИОбороты.Регистратор КАК Регистратор,
		|	ХозрасчетныйОстаткиИОбороты.Организация КАК Организация,
		|	ХозрасчетныйОстаткиИОбороты.КорСубконто1 КАК ОсновноеСредство,
		|	0 КАК Выработка
		|ПОМЕСТИТЬ ВременнаяТаблицаХозрасчетныйОсновнаяТаблица
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			,
		|			,
		|			Регистратор,
		|			,
		|			,
		|			Организация = &Организация
		|				И КорСубконто1 В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ПараметрыУчетаОС.ОсновноеСредство
		|					ИЗ
		|						ВременнаяТаблицаПараметрыУчетаОСНаДатуОкончания КАК ПараметрыУчетаОС),
		|			НЕ КорСчет.Временный
		|					И КорСчет.ПарныйСчет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|				ИЛИ КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Земля),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства)) КАК ХозрасчетныйОстаткиИОбороты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаПараметровУчетаОС.Период,
		|	ТаблицаПараметровУчетаОС.Регистратор,
		|	ТаблицаПараметровУчетаОС.Организация,
		|	ТаблицаПараметровУчетаОС.ОсновноеСредство,
		|	0
		|ИЗ
		|	ВременнаяТаблицаПараметрыУчетаОСНаДатуОкончания КАК ТаблицаПараметровУчетаОС
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СобытияОС.Период,
		|	СобытияОС.Регистратор,
		|	СобытияОС.Организация,
		|	СобытияОС.ОсновноеСредство,
		|	0
		|ИЗ
		|	РегистрСведений.СобытияОС КАК СобытияОС
		|ГДЕ
		|	СобытияОС.Событие = ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Перемещение)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВыработкаОСОбороты.ПериодДень,
		|	ВыработкаОСОбороты.Регистратор,
		|	ВыработкаОСОбороты.Организация,
		|	ВыработкаОСОбороты.ОсновноеСредство,
		|	ВыработкаОСОбороты.КоличествоОборот
		|ИЗ
		|	РегистрНакопления.ВыработкаОС.Обороты(, , Авто, ) КАК ВыработкаОСОбороты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИнвентаризацияОС.Ссылка.Дата,
		|	ИнвентаризацияОС.Ссылка,
		|	ИнвентаризацияОС.Ссылка.Организация,
		|	ИнвентаризацияОС.ОсновноеСредство,
		|	0
		|ИЗ
		|	Документ.ИнвентаризацияОС.ОС КАК ИнвентаризацияОС
		|ГДЕ
		|	НЕ ИнвентаризацияОС.Ссылка.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаХозрасчетныйОсновнаяТаблица.Регистратор КАК Регистратор,
		|	ВременнаяТаблицаХозрасчетныйОсновнаяТаблица.ОсновноеСредство КАК ОсновноеСредство,
		|	МАКСИМУМ(ВременнаяТаблицаХозрасчетныйОсновнаяТаблица.Период) КАК Период,
		|	МАКСИМУМ(ВременнаяТаблицаХозрасчетныйОсновнаяТаблица.Организация) КАК Организация,
		|	МАКСИМУМ(ВременнаяТаблицаХозрасчетныйОсновнаяТаблица.Выработка) КАК Выработка
		|ПОМЕСТИТЬ ВременнаяТаблицаХозрасчетныйГотоваяОсновнаяТаблица
		|ИЗ
		|	ВременнаяТаблицаХозрасчетныйОсновнаяТаблица КАК ВременнаяТаблицаХозрасчетныйОсновнаяТаблица
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаХозрасчетныйОсновнаяТаблица.Регистратор,
		|	ВременнаяТаблицаХозрасчетныйОсновнаяТаблица.ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОбороты.Период КАК Период,
		|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК ОсновноеСредство,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК НакопленныйИзнос
		|ПОМЕСТИТЬ ВременнаяТаблицаХозрасчетныйНакопленныйИзнос
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			,
		|			,
		|			Регистратор,
		|			Счет В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					ПараметрыУчетаОС.СчетУчетаПарныйСчет
		|				ИЗ
		|					ВременнаяТаблицаПараметрыУчетаОСНаДатуОкончания КАК ПараметрыУчетаОС),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
		|			Организация = &Организация
		|				И Субконто1 В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ПараметрыУчетаОС.ОсновноеСредство
		|					ИЗ
		|						ВременнаяТаблицаПараметрыУчетаОСНаДатуОкончания КАК ПараметрыУчетаОС),
		|			,
		|			) КАК ХозрасчетныйОстаткиИОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОбороты.Период КАК Период,
		|	ХозрасчетныйОстаткиИОбороты.Регистратор КАК Регистратор,
		|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК ОсновноеСредство,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК Амортизация
		|ПОМЕСТИТЬ ВременнаяТаблицаХозрасчетныйАмортизация
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			,
		|			,
		|			Регистратор,
		|			Счет В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					ПараметрыУчетаОС.СчетУчетаПарныйСчет
		|				ИЗ
		|					ВременнаяТаблицаПараметрыУчетаОСНаДатуОкончания КАК ПараметрыУчетаОС),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
		|			Организация = &Организация
		|				И Субконто1 В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ПараметрыУчетаОС.ОсновноеСредство
		|					ИЗ
		|						ВременнаяТаблицаПараметрыУчетаОСНаДатуОкончания КАК ПараметрыУчетаОС),
		|			,
		|			) КАК ХозрасчетныйОстаткиИОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПараметрыУчетаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ПараметрыУчетаОС.Период КАК Период
		|ПОМЕСТИТЬ ВременнаяТаблицаДатаПринятияКУчетуОС
		|ИЗ
		|	ВременнаяТаблицаПараметрыУчетаОСНаДатуОкончания КАК ПараметрыУчетаОС
		|ГДЕ
		|	(ПараметрыУчетаОС.Регистратор ССЫЛКА Документ.ПринятиеКУчетуОС
		|			ИЛИ ПараметрыУчетаОС.Регистратор ССЫЛКА Документ.ВводНачальныхОстатков
		|			ИЛИ ПараметрыУчетаОС.Регистратор ССЫЛКА Документ.МодернизацияОС)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОсновнаяТаблица.Период КАК Период,
		|	ХозрасчетныйОсновнаяТаблица.Регистратор КАК Регистратор,
		|	ХозрасчетныйОсновнаяТаблица.Организация КАК Организация,
		|	ХозрасчетныйОсновнаяТаблица.ОсновноеСредство КАК ОсновноеСредство,
		|	ХозрасчетныйОсновнаяТаблица.Выработка КАК Выработка,
		|	СУММА(ХозрасчетныйНакопленныйИзнос.НакопленныйИзнос) КАК НакопленныйИзнос,
		|	МАКСИМУМ(ЕСТЬNULL(ВременнаяТаблицаХозрасчетныйАмортизация.Амортизация, 0)) КАК Амортизация
		|ПОМЕСТИТЬ ВременнаяТаблицаДанныеНакопленнымИзносом
		|ИЗ
		|	ВременнаяТаблицаХозрасчетныйГотоваяОсновнаяТаблица КАК ХозрасчетныйОсновнаяТаблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаХозрасчетныйНакопленныйИзнос КАК ХозрасчетныйНакопленныйИзнос
		|		ПО ХозрасчетныйОсновнаяТаблица.ОсновноеСредство = ХозрасчетныйНакопленныйИзнос.ОсновноеСредство
		|			И ХозрасчетныйОсновнаяТаблица.Период >= ХозрасчетныйНакопленныйИзнос.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаХозрасчетныйАмортизация КАК ВременнаяТаблицаХозрасчетныйАмортизация
		|		ПО ХозрасчетныйОсновнаяТаблица.ОсновноеСредство = ВременнаяТаблицаХозрасчетныйАмортизация.ОсновноеСредство
		|			И ХозрасчетныйОсновнаяТаблица.Регистратор = ВременнаяТаблицаХозрасчетныйАмортизация.Регистратор
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОсновнаяТаблица.Период,
		|	ХозрасчетныйОсновнаяТаблица.Регистратор,
		|	ХозрасчетныйОсновнаяТаблица.Организация,
		|	ХозрасчетныйОсновнаяТаблица.ОсновноеСредство,
		|	ХозрасчетныйОсновнаяТаблица.Выработка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаДанныеНакопленнымИзносом.Период КАК Период,
		|	ВременнаяТаблицаДанныеНакопленнымИзносом.Регистратор КАК Регистратор,
		|	ВременнаяТаблицаДанныеНакопленнымИзносом.Организация КАК Организация,
		|	ВременнаяТаблицаДанныеНакопленнымИзносом.ОсновноеСредство КАК ОсновноеСредство,
		|	ВременнаяТаблицаДанныеНакопленнымИзносом.Выработка КАК Выработка,
		|	ВременнаяТаблицаДанныеНакопленнымИзносом.НакопленныйИзнос КАК НакопленныйИзнос,
		|	ВременнаяТаблицаДанныеНакопленнымИзносом.Амортизация КАК Амортизация,
		|	МАКСИМУМ(УчетнаяПолитика.Период) КАК ПериодУП,
		|	МАКСИМУМ(ДатаПринятияКУчетуОС.Период) КАК ДатаПринятияОС
		|ПОМЕСТИТЬ ВременнаяТаблицаДанныеСПериодами
		|ИЗ
		|	ВременнаяТаблицаДанныеНакопленнымИзносом КАК ВременнаяТаблицаДанныеНакопленнымИзносом
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаУчетнаяПолитика КАК УчетнаяПолитика
		|		ПО ВременнаяТаблицаДанныеНакопленнымИзносом.Период >= УчетнаяПолитика.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаДатаПринятияКУчетуОС КАК ДатаПринятияКУчетуОС
		|		ПО (ВЫБОР
		|				КОГДА ВременнаяТаблицаДанныеНакопленнымИзносом.Регистратор ССЫЛКА Документ.МодернизацияОС
		|					ТОГДА ВременнаяТаблицаДанныеНакопленнымИзносом.Период >= ДОБАВИТЬКДАТЕ(ДатаПринятияКУчетуОС.Период, ДЕНЬ, 1)
		|				ИНАЧЕ ВременнаяТаблицаДанныеНакопленнымИзносом.Период >= ДатаПринятияКУчетуОС.Период
		|			КОНЕЦ)
		|			И ВременнаяТаблицаДанныеНакопленнымИзносом.ОсновноеСредство = ДатаПринятияКУчетуОС.ОсновноеСредство
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаДанныеНакопленнымИзносом.Период,
		|	ВременнаяТаблицаДанныеНакопленнымИзносом.Регистратор,
		|	ВременнаяТаблицаДанныеНакопленнымИзносом.Организация,
		|	ВременнаяТаблицаДанныеНакопленнымИзносом.ОсновноеСредство,
		|	ВременнаяТаблицаДанныеНакопленнымИзносом.Выработка,
		|	ВременнаяТаблицаДанныеНакопленнымИзносом.НакопленныйИзнос,
		|	ВременнаяТаблицаДанныеНакопленнымИзносом.Амортизация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МестонахождениеОС.Период КАК Период,
		|	МестонахождениеОС.Организация КАК Организация,
		|	МестонахождениеОС.ОсновноеСредство КАК ОсновноеСредство,
		|	МестонахождениеОС.МОЛ КАК МОЛ,
		|	МестонахождениеОС.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВременнаяТаблицаМестонахождениеОС
		|ИЗ
		|	РегистрСведений.МестонахождениеОС КАК МестонахождениеОС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ТаблицаДанных.Регистратор ССЫЛКА Документ.ЗакрытиеМесяца
		|			ТОГДА 2
		|		ИНАЧЕ 1
		|	КОНЕЦ Порядок,
		|	ТаблицаДанных.Период КАК Период,
		|	ТаблицаДанных.Организация КАК Организация,
		|	ТаблицаДанных.Регистратор КАК Документ,
		|	ТаблицаДанных.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаДанных.Выработка КАК Выработка,
		|	СобытияОС.Событие КАК Событие,
		|	ТаблицаДанных.НакопленныйИзнос КАК НакопленныйИзнос,
		|	ТаблицаДанных.Амортизация КАК Амортизация,
		|	ЕСТЬNULL(ТаблицаДанных.ДатаПринятияОС, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаПринятияОС,
		|	УчетнаяПолитика.НачислениеАмортизацииОСПоМесяцам КАК НачислениеАмортизацииОСПоМесяцам,
		|	МАКСИМУМ(ПараметрыУчетаОС.Период) КАК ПериодПараметровУчета,
		|	МАКСИМУМ(МестонахождениеОС.Период) КАК ПериодМестонахождениеОС
		|ПОМЕСТИТЬ ВременнаяТаблицаДанныеОС
		|ИЗ
		|	ВременнаяТаблицаДанныеСПериодами КАК ТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаУчетнаяПолитика КАК УчетнаяПолитика
		|		ПО ТаблицаДанных.ПериодУП = УчетнаяПолитика.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаПараметрыУчетаОСНаДатуОкончания КАК ПараметрыУчетаОС
		|		ПО ТаблицаДанных.ОсновноеСредство = ПараметрыУчетаОС.ОсновноеСредство
		|			И ТаблицаДанных.Период >= ПараметрыУчетаОС.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобытияОС КАК СобытияОС
		|		ПО ТаблицаДанных.Регистратор = СобытияОС.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаМестонахождениеОС КАК МестонахождениеОС
		|		ПО ТаблицаДанных.Организация = МестонахождениеОС.Организация
		|			И ТаблицаДанных.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство
		|			И ТаблицаДанных.Период >= МестонахождениеОС.Период
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ВключатьЗМ
		|					И &ТолькоЗМ
		|				ТОГДА ТаблицаДанных.Регистратор ССЫЛКА Документ.ЗакрытиеМесяца
		|			КОГДА &ВключатьЗМ
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ НЕ ТаблицаДанных.Регистратор ССЫЛКА Документ.ЗакрытиеМесяца
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДанных.Регистратор,
		|	ТаблицаДанных.Организация,
		|	ТаблицаДанных.ОсновноеСредство,
		|	ТаблицаДанных.Выработка,
		|	ТаблицаДанных.НакопленныйИзнос,
		|	ТаблицаДанных.Амортизация,
		|	УчетнаяПолитика.НачислениеАмортизацииОСПоМесяцам,
		|	ТаблицаДанных.ДатаПринятияОС,
		|	ТаблицаДанных.Период,
		|	СобытияОС.Событие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДанных.Период КАК Дата,
		|	ТаблицаДанных.Документ КАК Документ,
		|	ТаблицаДанных.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаДанных.Событие КАК Событие,
		|	ТаблицаДанных.Выработка КАК Выработка,
		|	ЕСТЬNULL(ПараметрыУчетаОС.ПервоначальнаяСтоимость, 0) КАК ПервоначальнаяСтоимость,
		|	ЕСТЬNULL(ТаблицаДанных.НакопленныйИзнос, 0) КАК НакопленныйИзнос,
		|	ЕСТЬNULL(ТаблицаДанных.Амортизация, 0) КАК Амортизация,
		|	МестонахождениеОС.МОЛ КАК МОЛ,
		|	МестонахождениеОС.Подразделение КАК Подразделение,
		|	ПараметрыУчетаОС.СчетУчета КАК Счет,
		|	ПараметрыУчетаОС.СчетУчетаПарныйСчет КАК СчетНачисленияАмортизации,
		|	ПараметрыУчетаОС.СрокСлужбы КАК СрокСлужбы,
		|	ПараметрыУчетаОС.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
		|	ПараметрыУчетаОС.СпособОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизации,
		|	ПараметрыУчетаОС.БазаАмортизации КАК БазаАмортизации,
		|	ПараметрыУчетаОС.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость,
		|	ПараметрыУчетаОС.ОбъемПродукции КАК Объем,
		|	ТаблицаДанных.ДатаПринятияОС КАК ДатаПринятияОС,
		|	ТаблицаДанных.НачислениеАмортизацииОСПоМесяцам КАК НачислениеАмортизацииОСПоМесяцам
		|ИЗ
		|	ВременнаяТаблицаДанныеОС КАК ТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаПараметрыУчетаОСНаДатуОкончания КАК ПараметрыУчетаОС
		|		ПО ТаблицаДанных.ОсновноеСредство = ПараметрыУчетаОС.ОсновноеСредство
		|			И ТаблицаДанных.ПериодПараметровУчета = ПараметрыУчетаОС.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаМестонахождениеОС КАК МестонахождениеОС
		|		ПО ТаблицаДанных.Организация = МестонахождениеОС.Организация
		|			И ТаблицаДанных.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство
		|			И ТаблицаДанных.ПериодМестонахождениеОС = МестонахождениеОС.Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	ТаблицаДанных.Порядок";
	Запрос.УстановитьПараметр("ДатаОкончания", 	КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("ДатаНачала", 	НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("ВключатьЗМ", 	ВключатьЗакрытиеМесяца);
	Запрос.УстановитьПараметр("ТолькоЗМ", 		ТолькоЗакрытиеМесяца);
	
	РасшифровкаПоСобытиямОС.Очистить();
	СписокДокументовМодернизации.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать(); 
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаТаблицы = РасшифровкаПоСобытиямОС.Добавить();
		
		Если Тип("ДокументСсылка.МодернизацияОС") = ТипЗнч(Выборка.Документ) Тогда	
			ЗаполнитьДанныеПоСуммеМодернизации(Выборка.Документ);		
		КонецЕсли;	
			
		Отбор = Новый Структура();
		Отбор.Вставить("Документ", Выборка.Документ);
		
		Если РасшифровкаПоСобытиямОС.НайтиСтроки(Отбор).Количество() <> 0 Тогда
			СтрокаТаблицы.ДокументПовторяется = Истина;	
		КонецЕсли;	
			
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);		
	КонецЦикла;	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьДанныеПоСуммеМодернизации(ДокументМодернизации)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОбороты.Регистратор КАК Документ,
		|	ХозрасчетныйОстаткиИОбороты.ПериодДень КАК Дата,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстаток КАК Сумма,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.Регистратор ССЫЛКА Документ.МодернизацияОС
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Модернизация
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
		|			,
		|			&Период,
		|			Авто,
		|			,
		|			Счет = &Счет,
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
		|			Организация = &Организация
		|				И Субконто1 = &ОсновноеСредство) КАК ХозрасчетныйОстаткиИОбороты
		|ГДЕ
		|	ХозрасчетныйОстаткиИОбороты.Регистратор <> &Документ";
	Запрос.УстановитьПараметр("Организация", 		ДокументМодернизации.Организация);
	Запрос.УстановитьПараметр("ОсновноеСредство", 	ДокументМодернизации.ОсновноеСредство);
	Запрос.УстановитьПараметр("Период", 			ДокументМодернизации.Дата);
	Запрос.УстановитьПараметр("Документ", 			ДокументМодернизации);
	Запрос.УстановитьПараметр("Счет", 				ДокументМодернизации.СчетУчетаМодернизации);
	
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	
	Отбор = Новый Структура();
	Отбор.Вставить("Модернизация", Истина);
	
	МассивСтрок = ТаблицаДокументов.НайтиСтроки(Отбор);
	ДатаПоследнейМодернизации = Дата(1, 1, 1);
	
	Для Каждого СтрокаМассива Из МассивСтрок Цикл
		Если ДатаПоследнейМодернизации < СтрокаМассива.Дата Тогда
			ДатаПоследнейМодернизации = СтрокаМассива.Дата;	
		КонецЕсли;	
	КонецЦикла;	
	
	Для Каждого СтрокаТаблицы Из ТаблицаДокументов Цикл	
		
		Если ДатаПоследнейМодернизации <= СтрокаТаблицы.Дата Тогда
			
			Если Тип("ДокументСсылка.МодернизацияОС") <> ТипЗнч(СтрокаТаблицы.Документ)
				И ЗначениеЗаполнено(СтрокаТаблицы.Документ) Тогда
			
				СтрокаТаблицыМод = СписокДокументовМодернизации.Добавить();
				
				СтрокаТаблицыМод.Документ 				= СтрокаТаблицы.Документ;
				СтрокаТаблицыМод.Дата 					= СтрокаТаблицы.Дата;
				СтрокаТаблицыМод.Сумма 					= СтрокаТаблицы.Сумма;
				СтрокаТаблицыМод.ДокументМодернизации 	= ДокументМодернизации;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Процедура установки значений параметров динамических списков.
//
// Параметры:
//	ИзменилосьОС - Булево - проверка изменения значения реквизита "ОсновноеСредство".
//
&НаСервере
Процедура УстановитьПараметрыДинамическихСписков()
	
	// СписокОС
	СписокОС.Параметры.УстановитьЗначениеПараметра("НачалоПериода", НачалоГода(ДатаНачала));
	СписокОС.Параметры.УстановитьЗначениеПараметра("КонецПериода", ДатаОкончания);
	СписокОС.Параметры.УстановитьЗначениеПараметра("Организация", Организация);
	
	СчетаУчетаАмортизацииОС = БухгалтерскийУчетСервер.СчетаУчетаНакопленнойАмортизацииОсновныхСредств();
	СчетаУчетаАмортизацииНМА = БухгалтерскийУчетСервер.СчетаУчетаНакопленнойАмортизацииНематериальныхАктивов();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУчетаАмортизацииОС, СчетаУчетаАмортизацииНМА); 
	СписокОС.Параметры.УстановитьЗначениеПараметра("СписокСчетовУчетаАмортизации", СчетаУчетаАмортизацииОС);
	
	// СводПоСчетам
	СводПоСчетам.Параметры.УстановитьЗначениеПараметра("ДатаНачала", ДатаНачала);
	СводПоСчетам.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", КонецДня(ДатаОкончания));
	СводПоСчетам.Параметры.УстановитьЗначениеПараметра("Организация", Организация);
	
	// АмортизацияПоОС
	АмортизацияПоОС.Параметры.УстановитьЗначениеПараметра("ДатаНачала", ДатаНачала);
	АмортизацияПоОС.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", КонецДня(ДатаОкончания));
	АмортизацияПоОС.Параметры.УстановитьЗначениеПараметра("Организация", Организация);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументыНалогаНаИмущество()
	
	МассивОСТранспорт = Новый Массив();	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Транспорт Цикл
		МассивОСТранспорт.Добавить(СтрокаТабличнойЧасти.ОсновноеСредство);
	КонецЦикла;
	
	МассивОСНедвижимость = Новый Массив();
	Для Каждого СтрокаТабличнойЧасти Из Объект.Недвижимость Цикл
		МассивОСНедвижимость.Добавить(СтрокаТабличнойЧасти.ОсновноеСредство);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =	
		"ВЫБРАТЬ
		|	ЗакрытиеМесяца.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВременнаяТаблицаЗакрытияМесяца
		|ИЗ
		|	Документ.ЗакрытиеМесяца КАК ЗакрытиеМесяца
		|ГДЕ
		|	ЗакрытиеМесяца.Организация = &Организация
		|	И ЗакрытиеМесяца.Дата МЕЖДУ НачалоПериода(&НачалоПериода, ГОД) И КонецПериода(&КонецПериода, ГОД)
		|	И (ЗакрытиеМесяца.Транспорт.ОсновноеСредство В (&МассивОСТранспорт)
		|			ИЛИ ЗакрытиеМесяца.Недвижимость.ОсновноеСредство В (&МассивОСНедвижимость))
		|	И МЕСЯЦ(ЗакрытиеМесяца.Дата) = 12
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВыработкаОСОбороты.Регистратор КАК Регистратор,
		|	ВыработкаОСОбороты.ПериодСекунда КАК Дата,
		|	ВыработкаОСОбороты.ОсновноеСредство КАК ОсновноеСредство
		|ПОМЕСТИТЬ ВременнаяТаблицаДокументы
		|ИЗ
		|	РегистрНакопления.ВыработкаОС.Обороты(
		|			,
		|			,
		|			Авто,
		|			Организация = &Организация
		|				И (ОсновноеСредство В (&МассивОСТранспорт)
		|					ИЛИ ОсновноеСредство В (&МассивОСНедвижимость))) КАК ВыработкаОСОбороты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗемельныйНалогОбороты.Регистратор,
		|	ЗемельныйНалогОбороты.ПериодСекунда,
		|	ЗемельныйНалогОбороты.ОсновноеСредство
		|ИЗ
		|	РегистрНакопления.ЗемельныйНалог.Обороты(
		|			,
		|			,
		|			Авто,
		|			Организация = &Организация
		|				И (ОсновноеСредство В (&МассивОСТранспорт)
		|					ИЛИ ОсновноеСредство В (&МассивОСНедвижимость))) КАК ЗемельныйНалогОбороты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СобытияОС.Регистратор,
		|	СобытияОС.Период,
		|	СобытияОС.ОсновноеСредство
		|ИЗ
		|	РегистрСведений.СобытияОС КАК СобытияОС
		|ГДЕ
		|	СобытияОС.Организация = &Организация
		|	И (СобытияОС.ОсновноеСредство В (&МассивОСТранспорт)
		|			ИЛИ СобытияОС.ОсновноеСредство В (&МассивОСНедвижимость))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СоставОС.Регистратор,
		|	СоставОС.Период,
		|	СоставОС.ОсновноеСредство
		|ИЗ
		|	РегистрСведений.СоставОС КАК СоставОС
		|ГДЕ
		|	(СоставОС.ОсновноеСредство В (&МассивОСТранспорт)
		|			ИЛИ СоставОС.ОсновноеСредство В (&МассивОСНедвижимость))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИнвентаризацияОСОС.Ссылка,
		|	ИнвентаризацияОСОС.Ссылка.Дата,
		|	ИнвентаризацияОСОС.ОсновноеСредство
		|ИЗ
		|	Документ.ИнвентаризацияОС.ОС КАК ИнвентаризацияОСОС
		|ГДЕ
		|	ИнвентаризацияОСОС.Ссылка.Организация = &Организация
		|	И (ИнвентаризацияОСОС.ОсновноеСредство В (&МассивОСТранспорт)
		|			ИЛИ ИнвентаризацияОСОС.ОсновноеСредство В (&МассивОСНедвижимость))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗакрытиеМесяцаТранспорт.Ссылка,
		|	ЗакрытиеМесяцаТранспорт.Ссылка.Дата,
		|	ЗакрытиеМесяцаТранспорт.ОсновноеСредство
		|ИЗ
		|	Документ.ЗакрытиеМесяца.Транспорт КАК ЗакрытиеМесяцаТранспорт
		|ГДЕ
		|	ЗакрытиеМесяцаТранспорт.Ссылка В
		|			(ВЫБРАТЬ
		|				ВременнаяТаблицаЗакрытияМесяца.Ссылка
		|			ИЗ
		|				ВременнаяТаблицаЗакрытияМесяца)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗакрытиеМесяцаНедвижимость.Ссылка,
		|	ЗакрытиеМесяцаНедвижимость.Ссылка.Дата,
		|	ЗакрытиеМесяцаНедвижимость.ОсновноеСредство
		|ИЗ
		|	Документ.ЗакрытиеМесяца.Недвижимость КАК ЗакрытиеМесяцаНедвижимость
		|ГДЕ
		|	ЗакрытиеМесяцаНедвижимость.Ссылка В
		|			(ВЫБРАТЬ
		|				ВременнаяТаблицаЗакрытияМесяца.Ссылка
		|			ИЗ
		|				ВременнаяТаблицаЗакрытияМесяца)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВременнаяТаблицаДокументы.Регистратор КАК Документ,
		|	ВременнаяТаблицаДокументы.Дата КАК Дата,
		|	ВременнаяТаблицаДокументы.ОсновноеСредство КАК ОсновноеСредство
		|ИЗ
		|	ВременнаяТаблицаДокументы КАК ВременнаяТаблицаДокументы
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
	Запрос.УстановитьПараметр("НачалоПериода", 			НачалоГода(Дата));	
	Запрос.УстановитьПараметр("КонецПериода", 			КонецГода(Дата));
	Запрос.УстановитьПараметр("Организация", 			Организация);
	Запрос.УстановитьПараметр("МассивОСТранспорт", 		МассивОСТранспорт);
	Запрос.УстановитьПараметр("МассивОСНедвижимость", 	МассивОСНедвижимость);
	
	СписокДокументовТранспорт.Очистить();
	СписокДокументовНедвижимость.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если МассивОСТранспорт.Найти(Выборка.ОсновноеСредство) <> Неопределено Тогда	
			СтрокаТаблицы = СписокДокументовТранспорт.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
		КонецЕсли;
		
		Если МассивОСНедвижимость.Найти(Выборка.ОсновноеСредство) <> Неопределено Тогда	
			СтрокаТаблицы = СписокДокументовНедвижимость.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПодвалыЗакладок()

	// Свод
	Схема = Элементы.СписокОС.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = Элементы.СписокОС.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаСпискаОС = ПроцессорВывода.Вывести(ПроцессорКомпоновки);	

	СводОсПервоначальнаяСтоимостьИтог = ТаблицаСпискаОС.Итог("ПервоначальнаяСтоимость");
	
	// Ведомость ОС
	Схема = Элементы.АмортизацияПоОС.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = Элементы.АмортизацияПоОС.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаАмортизацияПоОС = ПроцессорВывода.Вывести(ПроцессорКомпоновки);	

	АмортизацияПоОССтоимостьБУНаНачалоИтог 	= ТаблицаАмортизацияПоОС.Итог("СтоимостьБУНаНачало");
	АмортизацияПоОСИзносНаНачалоИтог 		= ТаблицаАмортизацияПоОС.Итог("ИзносНаНачало");
	АмортизацияПоОССтоимостьБУПриходИтог 	= ТаблицаАмортизацияПоОС.Итог("СтоимостьБУПриход");
	АмортизацияПоОСИзносРасходИтог 			= ТаблицаАмортизацияПоОС.Итог("ИзносРасход");
	АмортизацияПоОССтоимостьБУРасходИтог 	= ТаблицаАмортизацияПоОС.Итог("СтоимостьБУРасход");
	АмортизацияПоОСИзносПриходИтог 			= ТаблицаАмортизацияПоОС.Итог("ИзносПриход");
	АмортизацияПоОССтоимостьБУНаКонецИтог 	= ТаблицаАмортизацияПоОС.Итог("СтоимостьБУНаКонец");
	АмортизацияПоОСИзносНаКонецИтог 		= ТаблицаАмортизацияПоОС.Итог("ИзносНаКонец");
	
	// Свод по счетам
	Схема = Элементы.СводПоСчетам.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = Элементы.СводПоСчетам.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаСводПоСчетам = ПроцессорВывода.Вывести(ПроцессорКомпоновки);	

	СводПоСчетамПервоначальнаяСтоимостьИтог 		= ТаблицаСводПоСчетам.Итог("ПервоначальнаяСтоимость");
	СводПоСчетамИзносНаНачалоИтог 					= ТаблицаСводПоСчетам.Итог("ИзносНаНачало");
	СводПоСчетамПервоначальнаяСтоимостьПриходИтог 	= ТаблицаСводПоСчетам.Итог("ПервоначальнаяСтоимостьПриход");
	СводПоСчетамИзносРасходИтог 					= ТаблицаСводПоСчетам.Итог("ИзносРасход");
	СводПоСчетамПервоначальнаяСтоимостьРасходИтог 	= ТаблицаСводПоСчетам.Итог("ПервоначальнаяСтоимостьРасход");
	СводПоСчетамИзносПриходИтог 					= ТаблицаСводПоСчетам.Итог("ИзносПриход");
	СводПоСчетамПервоначальнаяСтоимостьНаКонецИтог 	= ТаблицаСводПоСчетам.Итог("ПервоначальнаяСтоимостьНаКонец");
	СводПоСчетамИзносНаКонецИтог 					= ТаблицаСводПоСчетам.Итог("ИзносНаКонец");
	СводПоСчетамИзносЗаПериодИтог 					= ТаблицаСводПоСчетам.Итог("ИзносЗаПериод");
КонецПроцедуры

&НаСервере
Процедура ФормированиеНалогаНаИмущество()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗакрытиеМесяцаАмортизацияОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ЗакрытиеМесяцаАмортизацияОС.Сумма КАК Сумма
		|ИЗ
		|	Документ.ЗакрытиеМесяца.АмортизацияОС КАК ЗакрытиеМесяцаАмортизацияОС
		|ГДЕ
		|	КонецПериода(ЗакрытиеМесяцаАмортизацияОС.Ссылка.Дата, МЕСЯЦ) = КонецПериода(&Дата, МЕСЯЦ)
		|	И ЗакрытиеМесяцаАмортизацияОС.Ссылка.Проведен";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	
	АмортизацияОС =Запрос.Выполнить().Выгрузить();
	
	//
	НомерМесяца = Месяц(Дата);
	Если НомерМесяца = 12 Тогда
		НачалоПериода = НачалоГода(Дата);
	Иначе
	    НачалоПериода = НачалоМесяца(Дата);
	КонецЕсли;
	
	МассивРезультатов = Документы.ЗакрытиеМесяца.ПолучитьДанныеПоНалогуНаИмущество(Организация, НачалоПериода, КонецМесяца(Дата));
	
	Объект.Недвижимость.Очистить();
	Объект.Транспорт.Очистить();

	// Недвижимость.
	Выборка = МассивРезультатов[8].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Стоимость = 0;
		СуммаНалога = 0;
		
		// Проверка заполнения показателей.
		ТекстСообщения = "";
		Если Выборка.ОбщаяПлощадь = 0 Тогда 
			ТекстСообщения = НСтр("ru = 'Расчет налога на имущество. Общая площадь равна 0. Основное средство ""%1"".'");
		ИначеЕсли Выборка.ОценочнаяСтоимость = 0 Тогда 
			ТекстСообщения = НСтр("ru = 'Расчет налога на имущество. Оценочная стоимость равна 0. Основное средство ""%1"".'");
		ИначеЕсли Выборка.РегиональныйКоэффициент = 0 Тогда 
			ТекстСообщения = НСтр("ru = 'Расчет налога на имущество. Региональный Коэффициент равен 0. Основное средство ""%1"".'");
		ИначеЕсли Выборка.ЗональныйКоэффициент = 0 Тогда 
			ТекстСообщения = НСтр("ru = 'Расчет налога на имущество. Зональный Коэффициент равен 0. Основное средство ""%1"".'");
		ИначеЕсли Выборка.ОтраслевойКоэффициент = 0 Тогда 
			ТекстСообщения = НСтр("ru = 'Расчет налога на имущество. Отраслевой Коэффициент равен 0. Основное средство ""%1"".'");
		ИначеЕсли Выборка.Ставка = 0 Тогда 
			ТекстСообщения = НСтр("ru = 'Расчет налога на имущество. Ставка налога на имущество равна 0. Основное средство ""%1"".'");
		//ИначеЕсли Выборка.КоличествоМесяцевЭксплуатации = 0 Тогда 
		//	// Не ошибка. Снято с учета в первом месяце года.
		//	Продолжить;	
		Иначе 
			Стоимость = Выборка.ОбщаяПлощадь * Выборка.ОценочнаяСтоимость * Выборка.РегиональныйКоэффициент * Выборка.ЗональныйКоэффициент * Выборка.ОтраслевойКоэффициент;
			СуммаНалога = Выборка.КоличествоМесяцевЭксплуатации / 12 * (Стоимость * Выборка.Ставка / 100);
		КонецЕсли;	
		
		Если НЕ ТекстСообщения = "" Тогда 
			ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.ОсновноеСредствоНаименование);
			//ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстСообщения, Неопределено);
		КонецЕсли;	
		
		Если Выборка.ДатаНачисленияНалогаНаИмущество > КонецМесяца(Дата) Тогда
		 	СуммаНалога = 0;
		КонецЕсли;
		
		СтрокаТабличнойЧасти = Объект.Недвижимость.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
		СтрокаТабличнойЧасти.Кр = Выборка.РегиональныйКоэффициент;
		СтрокаТабличнойЧасти.Кз = Выборка.ЗональныйКоэффициент;
		СтрокаТабличнойЧасти.Ко = Выборка.ОтраслевойКоэффициент;
		СтрокаТабличнойЧасти.СуммаНалога = СуммаНалога;
		СтрокаТабличнойЧасти.СтоимостьНУ = Стоимость;
	КонецЦикла; 
	
	// Транспорт.
	Выборка = МассивРезультатов[16].Выбрать();
	
	НесамоходныеТС = Справочники.ВидыТранспортаНалогНаИмущество.НайтиПоНаименованию("Несамоходные");
	ДругиеТС = Справочники.ВидыТранспортаНалогНаИмущество.НайтиПоНаименованию("Другие");
	
	Пока Выборка.Следующий() Цикл
		СуммаНалога = 0;
		БалансоваяСтоимость = 0;
		
		// Проверка заполнения показателей.
		ТекстСообщения = "";	
		
		Если Выборка.ВидТранспорта = НесамоходныеТС ИЛИ Выборка.ВидТранспорта = ДругиеТС Тогда
			
			СтрокаТабличнойЧасти = АмортизацияОС.Найти(Выборка.ОсновноеСредство, "ОсновноеСредство");
			
			Если СтрокаТабличнойЧасти <> Неопределено Тогда
				БалансоваяСтоимость = Выборка.ПервоначальнаяСтоимость - Выборка.НакопленныйИзнос - СтрокаТабличнойЧасти.Сумма;				
			Иначе
				БалансоваяСтоимость = Выборка.ПервоначальнаяСтоимость - Выборка.НакопленныйИзнос;
			КонецЕсли;
			
		Иначе		
			Если Выборка.ОбъемДвигателя = 0 Тогда 
				ТекстСообщения = НСтр("ru = 'Расчет налога на имущество. Объем двигателя равен 0. Основное средство ""%1"".'");
			ИначеЕсли Выборка.ОценочнаяСтоимость = 0 Тогда 
				ТекстСообщения = НСтр("ru = 'Расчет налога на имущество. Оценочная стоимость равна 0. Основное средство ""%1"".'");	
			Иначе
				СуммаНалога = Выборка.ОбъемДвигателя * Выборка.ОценочнаяСтоимость;
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ГруппаИмущества = Справочники.ГруппыИмущества.ГИ4с Тогда
			Результат = Выборка.ОбъемДвигателя * Выборка.Ставка * Выборка.КорректировочныйКоэффициент * Выборка.СтавкаНалогаНаИмущество / 100;
		ИначеЕсли Выборка.ГруппаИмущества = Справочники.ГруппыИмущества.ГИ4нс Тогда
			Результат = БалансоваяСтоимость * Выборка.СтавкаНалогаНаИмущество / 100; 
		КонецЕсли;
		
		Если Выборка.ДатаНачисленияНалогаНаИмущество > КонецМесяца(Дата) Тогда
		 	СуммаНалога = 0;
		КонецЕсли;		
		
		Если НЕ ТекстСообщения = "" Тогда 
			ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.ОсновноеСредствоНаименование);
			//ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстСообщения, Неопределено);
		КонецЕсли;	
		
		СтрокаТабличнойЧасти = Объект.Транспорт.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
		СтрокаТабличнойЧасти.БалансоваяСтоимость = БалансоваяСтоимость;
		СтрокаТабличнойЧасти.СуммаНалога = СуммаНалога;
	КонецЦикла;
	
	СписокОСТранспорт.Загрузить(Объект.Транспорт.Выгрузить());
	СписокОСНедвижимость.Загрузить(Объект.Недвижимость.Выгрузить());
	
	СписокОСТранспорт.Сортировать("ОсновноеСредство");
	СписокОСНедвижимость.Сортировать("ОсновноеСредство");
	
	СуммаНалогаНаИмущество = Объект.Транспорт.Итог("СуммаНалога") + Объект.Недвижимость.Итог("СуммаНалога");
	
	ЗаполнитьДокументыНалогаНаИмущество();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборНаРасшифровку()

	РасшифровкаПоСобытиямОСНакопленныйИзносИтог 		= 0;
	РасшифровкаПоСобытиямОСПервоначальнаяСтоимостьИтог 	= 0;
	
	Если ОсновноеСредство = Неопределено ИЛИ ПоказатьВсеДокументы Тогда
		СтруктураОтбора = Новый ФиксированнаяСтруктура("ДокументПовторяется", Ложь);
		РассчитатьИтогАмортизацииЗаМесяц(Новый Структура("ДокументПовторяется", Ложь));
		
	ИначеЕсли ОсновноеСредство = Неопределено Тогда
		СтруктураОтбора = Неопределено;
		РасшифровкаПоСобытиямОСНакопленныйИзносИтог 		= РасшифровкаПоСобытиямОС.Итог("НакопленныйИзнос");
		РасшифровкаПоСобытиямОСПервоначальнаяСтоимостьИтог 	= РасшифровкаПоСобытиямОС.Итог("ПервоначальнаяСтоимость");
		
	Иначе
		СтруктураОтбора = Новый ФиксированнаяСтруктура("ОсновноеСредство", ОсновноеСредство);
		РассчитатьИтогАмортизацииЗаМесяц(Новый Структура("ОсновноеСредство", ОсновноеСредство));
		
		Для Каждого СтрокаТаблицы Из РасшифровкаПоСобытиямОС Цикл
			Если СтрокаТаблицы.ОсновноеСредство = ОсновноеСредство Тогда
				РасшифровкаПоСобытиямОСНакопленныйИзносИтог 		= РасшифровкаПоСобытиямОСНакопленныйИзносИтог + СтрокаТаблицы.НакопленныйИзнос;
				РасшифровкаПоСобытиямОСПервоначальнаяСтоимостьИтог 	= РасшифровкаПоСобытиямОСПервоначальнаяСтоимостьИтог + СтрокаТаблицы.ПервоначальнаяСтоимость;	
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	

	Элементы.РасшифровкаПоСобытиямОС.ОтборСтрок = СтруктураОтбора;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборНаСписокДокументовМодернизации()

	СтрокаТаблицы = Элементы.РасшифровкаПоСобытиямОС.ТекущиеДанные;	
	
	Если СтрокаТаблицы = Неопределено Тогда
		
		Элементы.СписокДокументовМодернизации.ОтборСтрок = Новый ФиксированнаяСтруктура("ДокументМодернизации", ПредопределенноеЗначение("Документ.МодернизацияОС.ПустаяСсылка"));
		
	Иначе	
		Если Тип("ДокументСсылка.МодернизацияОС") = ТипЗнч(СтрокаТаблицы.Документ) Тогда
			Элементы.СписокДокументовМодернизации.ОтборСтрок = Новый ФиксированнаяСтруктура("ДокументМодернизации", СтрокаТаблицы.Документ);			
		Иначе
			Элементы.СписокДокументовМодернизации.ОтборСтрок = Новый ФиксированнаяСтруктура("ДокументМодернизации", ПредопределенноеЗначение("Документ.МодернизацияОС.ПустаяСсылка"));			
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

// Процедура обновляет динамические списки
//
&НаКлиенте
Процедура ОбновитьОтборДинамическихСписков()

	// СписокОС
	ИмяПоля = "СчетУчета";
	Если ЗначениеЗаполнено(ОтборСчетУчета) Тогда 
		МассивЭлементов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(СписокОС.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, ИмяПоля);
		Если МассивЭлементов.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(СписокОС.КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
				ИмяПоля, ВидСравненияКомпоновкиДанных.Равно, ОтборСчетУчета);
		Иначе
			ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(СписокОС.КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
				ИмяПоля,, ОтборСчетУчета, ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
	Иначе 
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокОС, ИмяПоля);
	КонецЕсли;	
	
	ИмяПоля = "Подразделение";
	Если ЗначениеЗаполнено(ОтборПодразделение) Тогда 
		МассивЭлементов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(СписокОС.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, ИмяПоля);
		Если МассивЭлементов.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(СписокОС.КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
				ИмяПоля, ВидСравненияКомпоновкиДанных.Равно, ОтборПодразделение);
		Иначе
			ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(СписокОС.КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
				ИмяПоля,, ОтборПодразделение, ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
	Иначе 
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокОС, ИмяПоля);
	КонецЕсли;	
	
	ИмяПоля = "МОЛ";
	Если ЗначениеЗаполнено(ОтборМОЛ) Тогда 
		МассивЭлементов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(СписокОС.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, ИмяПоля);
		Если МассивЭлементов.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(СписокОС.КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
				ИмяПоля, ВидСравненияКомпоновкиДанных.Равно, ОтборМОЛ);
		Иначе
			ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(СписокОС.КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
				ИмяПоля,, ОтборМОЛ, ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
	Иначе 
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокОС, ИмяПоля);
	КонецЕсли;	

	ИмяПоля = "Состояние";
	Если ЗначениеЗаполнено(ОтборСостояние) Тогда 
		МассивЭлементов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(СписокОС.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, ИмяПоля);
		Если МассивЭлементов.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(СписокОС.КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
				ИмяПоля, ВидСравненияКомпоновкиДанных.Равно, ОтборСостояние);
		Иначе
			ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(СписокОС.КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
				ИмяПоля,, ОтборСостояние, ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
	Иначе 
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокОС, ИмяПоля);
	КонецЕсли;	
	
	ИмяПоля = "ГруппаНУ";
	Если ЗначениеЗаполнено(ОтборГруппаНУ) Тогда 
		МассивЭлементов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(СписокОС.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, ИмяПоля);
		Если МассивЭлементов.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(СписокОС.КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
				ИмяПоля, ВидСравненияКомпоновкиДанных.Равно, ОтборГруппаНУ);
		Иначе
			ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(СписокОС.КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
				ИмяПоля,, ОтборГруппаНУ, ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
	Иначе 
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокОС, ИмяПоля);
	КонецЕсли;	
	
	// Регистры
	ИмяПоля = "ОсновноеСредство";
	
	ОбновитьПодвалыЗакладок();
КонецПроцедуры

// Функция получения ссылок документов.
//
// Параметры:
//	Ссылка - ДокументСсылка - ссылка на выбранный документ.
//
// Возвращаемое значение:
//	Имя - Строка - название документа.
//
&НаСервере
Функция ПолучитьНазваниеДокумента(Ссылка)
	
	Возврат Ссылка.Метаданные().Имя

КонецФункции

&НаКлиенте
Процедура РассчитатьИтогАмортизацииЗаМесяц(СтруктураПоиска)

	МассивСтрок = РасшифровкаПоСобытиямОС.НайтиСтроки(СтруктураПоиска);
	
	ИтогАмортизацияЗаМесяц = 0;
	
	Для Каждого СтрокаМассива Из МассивСтрок Цикл			
		ИтогАмортизацияЗаМесяц = ИтогАмортизацияЗаМесяц + СтрокаМассива.Амортизация;			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция УстановитьПользовательскиеНастройкиОтчета(ТипОтчета, СтруктураПараметров)
    ОтчетОбъект = Отчеты[ТипОтчета].Создать();
    
    ПользовательскиеНастройки = ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки;
    Для Каждого ЭлПараметр  Из СтруктураПараметров Цикл
        Для Каждого ПараметрСКД Из ПользовательскиеНастройки.Элементы Цикл
            Если ТипЗнч(ПараметрСКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда  
                Если строка(ПараметрСКД.Параметр) = ЭлПараметр.Ключ Тогда 
                    ПараметрСКД.Значение = ЭлПараметр.Значение;
                    ПараметрСКД.Использование = Истина;
                КонецЕсли;
            КонецЕсли;
        КонецЦикла;    
    КонецЦикла;
        
    Возврат ПользовательскиеНастройки;
КонецФункции

&НаКлиенте
Процедура ОткрытьОтчет(Отчет, ГруппировкаОтчета = Неопределено, 
	Отборы = Неопределено, РеквизитыОтчета = Неопределено, Показатели = Неопределено, КлючВарианта = Неопределено, 
	НачалоПериода = Неопределено, КонецПериода = Неопределено)
	
	ПользовательскиеНастройки = ПользовательскиеНастройкиДляРасшифровки(НачалоПериода, КонецПериода);
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	
	Если ГруппировкаОтчета <> Неопределено И ТипЗнч(ГруппировкаОтчета) = Тип("Массив") Тогда
		ДополнительныеСвойства.Вставить("Группировка", ГруппировкаОтчета);
	КонецЕсли;
	
	Если ТипЗнч(Отборы) = Тип("Массив") Тогда
		
		НастройкаОтбора = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
		НастройкаОтбора.ИдентификаторПользовательскойНастройки = "Отбор";
		Для Каждого Отбор Из Отборы Цикл
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(НастройкаОтбора, Отбор.Поле, Отбор.Значение, Отбор.ВидСравнения);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(РеквизитыОтчета) = Тип("Структура") Тогда
		Для Каждого РеквизитОтчета Из РеквизитыОтчета Цикл
			ДополнительныеСвойства.Вставить(РеквизитОтчета.Ключ, РеквизитОтчета.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(Показатели) = Тип("Массив") Тогда
		Для Каждого Показатель Из Показатели Цикл
			ДополнительныеСвойства.Вставить(Показатель, Истина);
		КонецЦикла;
	КонецЕсли;
	
	Если КлючВарианта <> Неопределено Тогда
		ДополнительныеСвойства.Вставить("КлючВарианта", КлючВарианта);
	КонецЕсли;
	
	ЗаполняемыеНастройки = Новый Структура();
	ЗаполняемыеНастройки.Вставить("Показатели", Истина);
	ЗаполняемыеНастройки.Вставить("Группировка", Истина);
	ЗаполняемыеНастройки.Вставить("Отбор", Ложь);
	ЗаполняемыеНастройки.Вставить("ВыводимыеДанные", Ложь);

	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("РежимРасшифровки"         , Истина);
	ПараметрыОтчета.Вставить("ВидРасшифровки"           , 2);
	ПараметрыОтчета.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПараметрыОтчета.Вставить("ЗаполняемыеНастройки", ЗаполняемыеНастройки);

	ОткрытьФорму(Отчет, ПараметрыОтчета, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Функция ПользовательскиеНастройкиДляРасшифровки(НачалоПериода = Неопределено, КонецПериода = Неопределено)
	
	// Инициализация пользовательских настроек
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("РежимРасшифровки", Истина);
	ДополнительныеСвойства.Вставить("Период", НачалоПериода);
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ДополнительныеСвойства.Вставить("Организация", Организация);
	КонецЕсли;
	
	Если НачалоПериода <> Неопределено Тогда
		ДополнительныеСвойства.Вставить("НачалоПериода", НачалоПериода);
	КонецЕсли;
	Если КонецПериода <> Неопределено Тогда
		ДополнительныеСвойства.Вставить("КонецПериода", КонецПериода);
	КонецЕсли;
	
	Возврат ПользовательскиеНастройки;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьПериод(Отказ)

	Страница = Элементы.СтраницыОбработки.ТекущаяСтраница.Имя;
	
	Если ДатаНачала > ДатаОкончания
		И (Страница = "СтраницаСвод" 
		ИЛИ Страница = "СтраницаАмортизацияОСЗаПериод" 
		ИЛИ Страница = "СтраницаСводПоСчетам") Тогда
		
		ТекстСообщения = НСтр("ru = 'Дата начала периода не может быть больше даты конца периода.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ДатаНачала",,Отказ);	
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройки(ТолькоДанныеУП = Ложь)

	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаОкончания, Организация);	

	НачислениеАмортизацииОСПоМесяцам = ДанныеУчетнойПолитики.НачислениеАмортизацииОСПоМесяцам;
	МинимумСтоимостиОСДляНУ 		 = ДанныеУчетнойПолитики.МинимумСтоимостиОСДляНУ;
	
	Если НЕ ТолькоДанныеУП Тогда
		УчетДвиженияОСПоПодразделениям	= Константы.ФункциональнаяОпцияУчетДвиженияОСПоПодразделениям.Получить();
		УчетДвиженияОСПоМОЛ				= Константы.ФункциональнаяОпцияУчетДвиженияОСПоМОЛ.Получить();
		ВестиУчетОСПоКомплектам			= Константы.ФункциональнаяОпцияВестиУчетОСПоКомплектам.Получить();
		ВычетНАПриМодернизации			= Константы.ВычетНАПриМодернизации.Получить();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьПорядок(Порядок)

	// ОС
	ЭлементПорядка = Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	ЭлементПорядка.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	ЭлементПорядка.Использование = Истина;
	ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("ОсновноеСредство");
	ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;

	// Период
	ЭлементПорядка = Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	ЭлементПорядка.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	ЭлементПорядка.Использование = Истина;
	ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("Период");
	ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;

КонецПроцедуры 

&НаКлиенте
Процедура УстановитьОтбор()

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ВыработкаОС, "ОсновноеСредство", ОсновноеСредство,,,ЗначениеЗаполнено(ОсновноеСредство)); 
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ДвижениеОСНУ, "ОсновноеСредство", ОсновноеСредство,,,ЗначениеЗаполнено(ОсновноеСредство)); 
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗемельныйНалог, "ОсновноеСредство", ОсновноеСредство,,,ЗначениеЗаполнено(ОсновноеСредство)); 
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(МестонахождениеОС, "ОсновноеСредство", ОсновноеСредство,,,ЗначениеЗаполнено(ОсновноеСредство)); 
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(НалоговаяАмортизация, "ОсновноеСредство", ОсновноеСредство,,,ЗначениеЗаполнено(ОсновноеСредство)); 
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ПараметрыРасчетаЗемельногоНалога, "ОсновноеСредство", ОсновноеСредство,,,ЗначениеЗаполнено(ОсновноеСредство)); 
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ПараметрыУчетаОС, "ОсновноеСредство", ОсновноеСредство,,,ЗначениеЗаполнено(ОсновноеСредство)); 
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ПродажиОсновныхСредств, "ОсновноеСредство", ОсновноеСредство,,,ЗначениеЗаполнено(ОсновноеСредство)); 
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СведенияОбИмуществе, "ОсновноеСредство", ОсновноеСредство,,,ЗначениеЗаполнено(ОсновноеСредство));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СведенияОТранспорте, "ОсновноеСредство", ОсновноеСредство,,,ЗначениеЗаполнено(ОсновноеСредство));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СведенияПоНалогуНаИмущество, "ОсновноеСредство", ОсновноеСредство,,,ЗначениеЗаполнено(ОсновноеСредство)); 
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СобытияОС, "ОсновноеСредство", ОсновноеСредство,,,ЗначениеЗаполнено(ОсновноеСредство)); 
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СоставОС, "ОсновноеСредство", ОсновноеСредство,,,ЗначениеЗаполнено(ОсновноеСредство)); 
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СостоянияОС, "ОсновноеСредство", ОсновноеСредство,,,ЗначениеЗаполнено(ОсновноеСредство)); 
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьТаблицуПроверки()
	Проверки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостоянияОССрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
		|	СостоянияОССрезПоследних.Период КАК Период
		|ПОМЕСТИТЬ ВременнаяТаблицаСостоянияОсновныхСредств
		|ИЗ
		|	РегистрСведений.СостоянияОС.СрезПоследних(&НачалоПериода, Организация = &Организация) КАК СостоянияОССрезПоследних
		|ГДЕ
		|	СостоянияОССрезПоследних.Состояние В (ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.Поступило), ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.ПринятоКУчету))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СостоянияОССрезПервых.ОсновноеСредство,
		|	СостоянияОССрезПервых.Период
		|ИЗ
		|	РегистрСведений.СостоянияОС.СрезПервых(&НачалоПериода, Организация = &Организация) КАК СостоянияОССрезПервых
		|ГДЕ
		|	СостоянияОССрезПервых.Состояние В (ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.Поступило), ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.ПринятоКУчету))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВременнаяТаблицаСостоянияОсновныхСредств.ОсновноеСредство КАК ОсновноеСредство,
		|	ВременнаяТаблицаСостоянияОсновныхСредств.Период КАК Период
		|ПОМЕСТИТЬ ВременнаяТаблицаОсновныеСредства
		|ИЗ
		|	ВременнаяТаблицаСостоянияОсновныхСредств КАК ВременнаяТаблицаСостоянияОсновныхСредств
		|ГДЕ
		|	ВременнаяТаблицаСостоянияОсновныхСредств.Период <= &КонецПериода
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СведенияОТранспортеСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
		|ПОМЕСТИТЬ ВремннаяТаблицаСведенияОТранспортеСрезПоследних
		|ИЗ
		|	РегистрСведений.СведенияОТранспорте.СрезПоследних(
		|			&КонецПериода,
		|			(Организация = &Организация
		|				ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		|				И ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаОсновныеСредства.ОсновноеСредство КАК ОсновноеСредство
		|					ИЗ
		|						ВременнаяТаблицаОсновныеСредства КАК ВременнаяТаблицаОсновныеСредства)) КАК СведенияОТранспортеСрезПоследних
		|ГДЕ
		|	СведенияОТранспортеСрезПоследних.ГруппаИмущества = ЗНАЧЕНИЕ(Справочник.ГруппыИмущества.ГИ4с)
		|	ИЛИ СведенияОТранспортеСрезПоследних.ГруппаИмущества = ЗНАЧЕНИЕ(Справочник.ГруппыИмущества.ГИ4нс)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СведенияОбИмуществеСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
		|ПОМЕСТИТЬ ВременнаяТаблицаСведенияОбИмуществеСрезПоследних
		|ИЗ
		|	РегистрСведений.СведенияОбИмуществе.СрезПоследних(
		|			&КонецПериода,
		|			(Организация = &Организация
		|				ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		|				И ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаОсновныеСредства.ОсновноеСредство КАК ОсновноеСредство
		|					ИЗ
		|						ВременнаяТаблицаОсновныеСредства КАК ВременнаяТаблицаОсновныеСредства)) КАК СведенияОбИмуществеСрезПоследних
		|ГДЕ
		|	(СведенияОбИмуществеСрезПоследних.ГруппаИмущества = ЗНАЧЕНИЕ(Справочник.ГруппыИмущества.ГИ2)
		|			ИЛИ СведенияОбИмуществеСрезПоследних.ГруппаИмущества = ЗНАЧЕНИЕ(Справочник.ГруппыИмущества.ГИ3))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВремннаяТаблицаСведенияОТранспортеСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
		|ПОМЕСТИТЬ ВременнаяТаблицаГруппы234
		|ИЗ
		|	ВремннаяТаблицаСведенияОТранспортеСрезПоследних КАК ВремннаяТаблицаСведенияОТранспортеСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаСведенияОбИмуществеСрезПоследних.ОсновноеСредство
		|ИЗ
		|	ВременнаяТаблицаСведенияОбИмуществеСрезПоследних КАК ВременнаяТаблицаСведенияОбИмуществеСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СведенияОТранспортеСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
		|ИЗ
		|	РегистрСведений.СведенияОТранспорте.СрезПоследних(
		|			&КонецПериода,
		|			(Организация = &Организация
		|				ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		|				И ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаОсновныеСредства.ОсновноеСредство КАК ОсновноеСредство
		|					ИЗ
		|						ВременнаяТаблицаОсновныеСредства КАК ВременнаяТаблицаОсновныеСредства)) КАК СведенияОТранспортеСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаГруппы234 КАК ВременнаяТаблицаГруппы234
		|		ПО СведенияОТранспортеСрезПоследних.ОсновноеСредство = ВременнаяТаблицаГруппы234.ОсновноеСредство
		|ГДЕ
		|	НЕ ВременнаяТаблицаГруппы234.ОсновноеСредство ЕСТЬ NULL
		|	И (СведенияОТранспортеСрезПоследних.ГруппаИмущества = ЗНАЧЕНИЕ(Справочник.ГруппыИмущества.ГИ4с)
		|	ИЛИ СведенияОТранспортеСрезПоследних.ГруппаИмущества = ЗНАЧЕНИЕ(Справочник.ГруппыИмущества.ГИ4нс))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СведенияОбИмуществеСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
		|ИЗ
		|	РегистрСведений.СведенияОбИмуществе.СрезПоследних(
		|			&КонецПериода,
		|			(Организация = &Организация
		|				ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		|				И ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаОсновныеСредства.ОсновноеСредство КАК ОсновноеСредство
		|					ИЗ
		|						ВременнаяТаблицаОсновныеСредства КАК ВременнаяТаблицаОсновныеСредства)) КАК СведенияОбИмуществеСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаГруппы234 КАК ВременнаяТаблицаГруппы234
		|		ПО СведенияОбИмуществеСрезПоследних.ОсновноеСредство = ВременнаяТаблицаГруппы234.ОсновноеСредство
		|ГДЕ
		|	НЕ ВременнаяТаблицаГруппы234.ОсновноеСредство ЕСТЬ NULL
		|	И НЕ(СведенияОбИмуществеСрезПоследних.ГруппаИмущества = ЗНАЧЕНИЕ(Справочник.ГруппыИмущества.ГИ2)
		|				ИЛИ СведенияОбИмуществеСрезПоследних.ГруппаИмущества = ЗНАЧЕНИЕ(Справочник.ГруппыИмущества.ГИ3))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВременнаяТаблицаОсновныеСредства.ОсновноеСредство КАК ОсновноеСредство
		|ИЗ
		|	ВременнаяТаблицаОсновныеСредства КАК ВременнаяТаблицаОсновныеСредства
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаГруппы234 КАК ВременнаяТаблицаГруппы234
		|		ПО ВременнаяТаблицаОсновныеСредства.ОсновноеСредство = ВременнаяТаблицаГруппы234.ОсновноеСредство
		|ГДЕ
		|	ВременнаяТаблицаОсновныеСредства.Период <= &КонецПериода
		|	И (ВременнаяТаблицаОсновныеСредства.ОсновноеСредство.ДатаВыпуска = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ ВременнаяТаблицаОсновныеСредства.ОсновноеСредство.ДатаВыпуска > ВременнаяТаблицаОсновныеСредства.Период
		|			ИЛИ ВременнаяТаблицаОсновныеСредства.ОсновноеСредство.ДатаВыпуска > &КонецПериода)
		|	И НЕ ВременнаяТаблицаГруппы234.ОсновноеСредство ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПараметрыУчетаОССрезПоследних.ОсновноеСредство КАК ОсновноеСредство
		|ИЗ
		|	РегистрСведений.ПараметрыУчетаОС.СрезПоследних(
		|			&КонецПериода,
		|			(Организация = &Организация
		|				ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		|				И ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаГруппы234.ОсновноеСредство КАК ОсновноеСредство
		|					ИЗ
		|						ВременнаяТаблицаГруппы234 КАК ВременнаяТаблицаГруппы234)) КАК ПараметрыУчетаОССрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОТранспорте.СрезПоследних(
		|				&КонецПериода,
		|				(Организация = &Организация
		|					ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		|					И ОсновноеСредство В
		|						(ВЫБРАТЬ
		|							ВременнаяТаблицаГруппы234.ОсновноеСредство КАК ОсновноеСредство
		|						ИЗ
		|							ВременнаяТаблицаГруппы234 КАК ВременнаяТаблицаГруппы234)) КАК СведенияОТранспортеСрезПоследних
		|		ПО ПараметрыУчетаОССрезПоследних.ОсновноеСредство = СведенияОТранспортеСрезПоследних.ОсновноеСредство
		|ГДЕ
		|	НЕ (СведенияОТранспортеСрезПоследних.ГруппаИмущества = ЗНАЧЕНИЕ(Справочник.ГруппыИмущества.ГИ4с)
		|	ИЛИ СведенияОТранспортеСрезПоследних.ГруппаИмущества = ЗНАЧЕНИЕ(Справочник.ГруппыИмущества.ГИ4нс))
		|	И НЕ ПараметрыУчетаОССрезПоследних.ДатаНачисленияНалогаНаИмущество = ДАТАВРЕМЯ(1, 1, 1)
		|	И НЕ ПараметрыУчетаОССрезПоследних.ДатаНачисленияНалогаНаИмущество = ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(&КонецПериода, ГОД), СЕКУНДА, 1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СостоянияОССрезПоследнихПоступило.ОсновноеСредство КАК ОсновноеСредство
		|ИЗ
		|	РегистрСведений.СостоянияОС.СрезПоследних(
		|			&КонецПериода,
		|			ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаГруппы234.ОсновноеСредство КАК ОсновноеСредство
		|					ИЗ
		|						ВременнаяТаблицаГруппы234 КАК ВременнаяТаблицаГруппы234)
		|				И Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.Поступило)) КАК СостоянияОССрезПоследнихПоступило
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОС.СрезПоследних(
		|				&КонецПериода,
		|				ОсновноеСредство В
		|						(ВЫБРАТЬ
		|							ВременнаяТаблицаГруппы234.ОсновноеСредство КАК ОсновноеСредство
		|						ИЗ
		|							ВременнаяТаблицаГруппы234 КАК ВременнаяТаблицаГруппы234)
		|					И Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.ПринятоКУчету)) КАК СостоянияОССрезПоследнихПринятоКУчету
		|		ПО СостоянияОССрезПоследнихПоступило.ОсновноеСредство = СостоянияОССрезПоследнихПринятоКУчету.ОсновноеСредство
		|ГДЕ
		|	ЕСТЬNULL(СостоянияОССрезПоследнихПоступило.Период, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
		|	И НАЧАЛОПЕРИОДА(СостоянияОССрезПоследнихПоступило.Период, МЕСЯЦ) <> НАЧАЛОПЕРИОДА(ЕСТЬNULL(СостоянияОССрезПоследнихПринятоКУчету.Период, ДАТАВРЕМЯ(1, 1, 1)), МЕСЯЦ)";
	
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("НачалоПериода", 	ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", 	ДатаОкончания);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	// Проверка - ГИ4
	ВыборкаДетальныеЗаписи = РезультатЗапроса[5].Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрокаТаблицыЗначений = Проверки.Добавить();
		СтрокаТаблицыЗначений.ОсновноеСредство = ВыборкаДетальныеЗаписи.ОсновноеСредство;
		СтрокаТаблицыЗначений.Параметр = "Группа имущества";
		СтрокаТаблицыЗначений.ВидОшибки = "Несоответствие ГИ";	
	КонецЦикла;
	
	// Проверка - ГИ2 или ГИ3
	ВыборкаДетальныеЗаписи = РезультатЗапроса[6].Выбрать();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрокаТаблицыЗначений = Проверки.Добавить();
		СтрокаТаблицыЗначений.ОсновноеСредство = ВыборкаДетальныеЗаписи.ОсновноеСредство;
		СтрокаТаблицыЗначений.Параметр = "Группа имущества";
		СтрокаТаблицыЗначений.ВидОшибки = "Несоответствие ГИ";	
	КонецЦикла;
	
	// Проверка - Дата выпуска
	ВыборкаДетальныеЗаписи = РезультатЗапроса[7].Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрокаТаблицыЗначений = Проверки.Добавить();
		СтрокаТаблицыЗначений.ОсновноеСредство = ВыборкаДетальныеЗаписи.ОсновноеСредство;
		СтрокаТаблицыЗначений.Параметр = "Дата выпуска";
		СтрокаТаблицыЗначений.ВидОшибки = "Некорректная дата";	
	КонецЦикла;
	
	// Проверка - Начисление НИ с даты
	ВыборкаДетальныеЗаписи = РезультатЗапроса[8].Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрокаТаблицыЗначений = Проверки.Добавить();
		СтрокаТаблицыЗначений.ОсновноеСредство = ВыборкаДетальныеЗаписи.ОсновноеСредство;
		СтрокаТаблицыЗначений.Параметр = "Начисление НИ с даты";
		СтрокаТаблицыЗначений.ВидОшибки = "Некорректная дата";	
	КонецЦикла;
	
	// Проверка - соответствия месяца принятия к учету месяцу поступления
	ВыборкаДетальныеЗаписи = РезультатЗапроса[9].Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрокаТаблицыЗначений = Проверки.Добавить();
		СтрокаТаблицыЗначений.ОсновноеСредство = ВыборкаДетальныеЗаписи.ОсновноеСредство;
		СтрокаТаблицыЗначений.Параметр = "Дата ввода в эксплуатацию";
		СтрокаТаблицыЗначений.ВидОшибки = "Несоответствие дат поступления и принятия к учету";	
	КонецЦикла;
	
	Проверки.Сортировать("ОсновноеСредство, Параметр");

КонецПроцедуры // ЗаполнитьТаблицуПроверки()

&НаСервере
Процедура СохранитьНастройки()  
		
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("МониторОС", "Дата", Дата);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("МониторОС", "ДатаНачала", ДатаНачала);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("МониторОС", "ДатаОкончания", ДатаОкончания);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуРасчетаАмортизации(ОсновноеСредство)
	Ошибки = Неопределено;
	СпособНачисленияАмортизации = Неопределено;
	ПараметрыРасчетаАмортизации.Очистить();
	
	ТекстыЗапроса = Новый Массив;

	// Дата принятия к учету ОС.
	ТекстЗапроса = 		
		"ВЫБРАТЬ
		|	1 КАК Порядок,
		|	СостоянияОССрезПоследних.Период КАК ПериодПринятоКУчету,
		|	СостоянияОССрезПоследних.ОсновноеСредство КАК ОсновноеСредство
		|ПОМЕСТИТЬ ВременнаяТаблицаСостоянияОС
		|ИЗ
		|	РегистрСведений.СостоянияОС.СрезПоследних(
		|			&КонецПериода,
		|			Организация = &Организация
		|				И ОсновноеСредство В (&МассивОС)
		|				И НЕ Регистратор = &ДокументСсылка) КАК СостоянияОССрезПоследних
		|ГДЕ
		|	СостоянияОССрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.ПринятоКУчету)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// События с ОС- определение что в текущем месяце была модернизация.
	// Если начисление амортизации по дням.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	2 КАК Порядок,
		|	НАЧАЛОПЕРИОДА(СобытияОССрезПоследних.Период, ДЕНЬ) КАК Период,
		|	СобытияОССрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
		|	СобытияОССрезПоследних.Событие КАК СобытиеОС
		|ПОМЕСТИТЬ ТаблицаСобытияОСМодернизация
		|ИЗ
		|	РегистрСведений.СобытияОС.СрезПоследних(
		|			&КонецПериода,
		|			Организация = &Организация
		|				И ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаСостоянияОС.ОсновноеСредство
		|					ИЗ
		|						ВременнаяТаблицаСостоянияОС КАК ВременнаяТаблицаСостоянияОС)
		|				И Событие = ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Модернизация)) КАК СобытияОССрезПоследних
		|ГДЕ
		|	НЕ &НачислениеАмортизацииОСПоМесяцам
		|	И СобытияОССрезПоследних.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Данные по накопленой амортизации.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	3 КАК Порядок,
		|	ХозрасчетныйОстатки.Счет КАК Счет,
		|	ХозрасчетныйОстатки.Субконто1 КАК ОсновноеСредство,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстатки.СуммаОстаток < 0
		|			ТОГДА ХозрасчетныйОстатки.СуммаОстаток * -1
		|		ИНАЧЕ ХозрасчетныйОстатки.СуммаОстаток
		|	КОНЕЦ КАК НакопленныйИзнос
		|ПОМЕСТИТЬ ТаблицаНакопленнаяАмортизация
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&КонецПериода,
		|			Счет В (&СписокСчетовНакопленнойАмортизации),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
		|			Организация = &Организация
		|				И Субконто1 В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаСостоянияОС.ОсновноеСредство
		|					ИЗ
		|						ВременнаяТаблицаСостоянияОС КАК ВременнаяТаблицаСостоянияОС)) КАК ХозрасчетныйОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Параметры расчета амортизации.
	//	*По месяцам, для всех методов - Линейный и по сумме лет
	//	*По дням, для всех методов - Линейный и по сумме лет
	//	*Всегда По месяцам для "метода уменьшаемого остатка"	
	//	*Для производственного метода
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	4 КАК Порядок,
		|	ПараметрыУчетаОССрезПоследних.Период КАК Период,
		|	ПараметрыУчетаОССрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
		|	ПараметрыУчетаОССрезПоследних.ИнвентарныйНомер КАК ИнвентарныйНомер,
		|	ПараметрыУчетаОССрезПоследних.СчетУчета КАК СчетУчета,
		|	ПараметрыУчетаОССрезПоследних.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
		|	ПараметрыУчетаОССрезПоследних.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость,
		|	ПараметрыУчетаОССрезПоследних.СрокСлужбы КАК СрокСлужбы,
		|	ПараметрыУчетаОССрезПоследних.КоэффициентУскорения КАК КоэффициентУскорения,
		|	ПараметрыУчетаОССрезПоследних.ОбъемПродукции КАК ОбъемПродукции,
		|	ПараметрыУчетаОССрезПоследних.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
		|	ПараметрыУчетаОССрезПоследних.СпособОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизации,
		|	ПараметрыУчетаОССрезПоследних.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию,
		|	ПараметрыУчетаОССрезПоследних.СтоимостьДляРасчетаАмортизации КАК СтоимостьДляРасчетаАмортизации,
		|	1 КАК КоэффициентНачислениеАмортизацииОСПоМесяцам
		|ПОМЕСТИТЬ ТаблицаПараметрыУчетаОС
		|ИЗ
		|	РегистрСведений.ПараметрыУчетаОС.СрезПоследних(
		|			&НачалоПериода,
		|			Организация = &Организация
		|				И ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаСостоянияОС.ОсновноеСредство
		|					ИЗ
		|						ВременнаяТаблицаСостоянияОС КАК ВременнаяТаблицаСостоянияОС)) КАК ПараметрыУчетаОССрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСостоянияОС КАК ВременнаяТаблицаСостоянияОС
		|		ПО ПараметрыУчетаОССрезПоследних.ОсновноеСредство = ВременнаяТаблицаСостоянияОС.ОсновноеСредство
		|ГДЕ
		|	&НачислениеАмортизацииОСПоМесяцам
		|	И (ПараметрыУчетаОССрезПоследних.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.Линейный)
		|			ИЛИ ПараметрыУчетаОССрезПоследних.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛет))
		|	И ВременнаяТаблицаСостоянияОС.ПериодПринятоКУчету < &НачалоПериода
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	4,
		|	ПараметрыУчетаОССрезПоследних.Период,
		|	ПараметрыУчетаОССрезПоследних.ОсновноеСредство,
		|	ПараметрыУчетаОССрезПоследних.ИнвентарныйНомер,
		|	ПараметрыУчетаОССрезПоследних.СчетУчета,
		|	ПараметрыУчетаОССрезПоследних.ПервоначальнаяСтоимость,
		|	ПараметрыУчетаОССрезПоследних.ЛиквидационнаяСтоимость,
		|	ПараметрыУчетаОССрезПоследних.СрокСлужбы,
		|	ПараметрыУчетаОССрезПоследних.КоэффициентУскорения,
		|	ПараметрыУчетаОССрезПоследних.ОбъемПродукции,
		|	ПараметрыУчетаОССрезПоследних.СпособНачисленияАмортизации,
		|	ПараметрыУчетаОССрезПоследних.СпособОтраженияРасходовПоАмортизации,
		|	ПараметрыУчетаОССрезПоследних.ДатаВводаВЭксплуатацию,
		|	ПараметрыУчетаОССрезПоследних.СтоимостьДляРасчетаАмортизации,
		|	ВЫБОР
		|		КОГДА НАЧАЛОПЕРИОДА(&КонецПериода, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ПараметрыУчетаОССрезПоследних.ДатаВводаВЭксплуатацию, МЕСЯЦ)
		|			ТОГДА (ДЕНЬ(&КонецПериода) - ДЕНЬ(ПараметрыУчетаОССрезПоследних.ДатаВводаВЭксплуатацию) + 1) / ДЕНЬ(КОНЕЦПЕРИОДА(&КонецПериода, МЕСЯЦ))
		|		КОГДА &КонецПериода = КОНЕЦПЕРИОДА(&КонецПериода, МЕСЯЦ)
		|			ТОГДА 1
		|		ИНАЧЕ (ДЕНЬ(&КонецПериода) - 1) / ДЕНЬ(КОНЕЦПЕРИОДА(&КонецПериода, МЕСЯЦ))
		|	КОНЕЦ
		|ИЗ
		|	РегистрСведений.ПараметрыУчетаОС.СрезПоследних(
		|			&КонецПериода,
		|			Организация = &Организация
		|				И ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаСостоянияОС.ОсновноеСредство
		|					ИЗ
		|						ВременнаяТаблицаСостоянияОС КАК ВременнаяТаблицаСостоянияОС)) КАК ПараметрыУчетаОССрезПоследних
		|ГДЕ
		|	НЕ &НачислениеАмортизацииОСПоМесяцам
		|	И (ПараметрыУчетаОССрезПоследних.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.Линейный)
		|			ИЛИ ПараметрыУчетаОССрезПоследних.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛет))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	4,
		|	ПараметрыУчетаОССрезПоследних.Период,
		|	ПараметрыУчетаОССрезПоследних.ОсновноеСредство,
		|	ПараметрыУчетаОССрезПоследних.ИнвентарныйНомер,
		|	ПараметрыУчетаОССрезПоследних.СчетУчета,
		|	ПараметрыУчетаОССрезПоследних.ПервоначальнаяСтоимость,
		|	ПараметрыУчетаОССрезПоследних.ЛиквидационнаяСтоимость,
		|	ПараметрыУчетаОССрезПоследних.СрокСлужбы,
		|	ПараметрыУчетаОССрезПоследних.КоэффициентУскорения,
		|	ПараметрыУчетаОССрезПоследних.ОбъемПродукции,
		|	ПараметрыУчетаОССрезПоследних.СпособНачисленияАмортизации,
		|	ПараметрыУчетаОССрезПоследних.СпособОтраженияРасходовПоАмортизации,
		|	ПараметрыУчетаОССрезПоследних.ДатаВводаВЭксплуатацию,
		|	ПараметрыУчетаОССрезПоследних.СтоимостьДляРасчетаАмортизации,
		|	1
		|ИЗ
		|	РегистрСведений.ПараметрыУчетаОС.СрезПоследних(
		|			&КонецПериода,
		|			Организация = &Организация
		|				И ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаСостоянияОС.ОсновноеСредство
		|					ИЗ
		|						ВременнаяТаблицаСостоянияОС КАК ВременнаяТаблицаСостоянияОС)) КАК ПараметрыУчетаОССрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСостоянияОС КАК ВременнаяТаблицаСостоянияОС
		|		ПО ПараметрыУчетаОССрезПоследних.ОсновноеСредство = ВременнаяТаблицаСостоянияОС.ОсновноеСредство
		|ГДЕ
		|	ПараметрыУчетаОССрезПоследних.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка)
		|	И ВременнаяТаблицаСостоянияОС.ПериодПринятоКУчету < &НачалоПериода
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	4,
		|	ПараметрыУчетаОССрезПоследних.Период,
		|	ПараметрыУчетаОССрезПоследних.ОсновноеСредство,
		|	ПараметрыУчетаОССрезПоследних.ИнвентарныйНомер,
		|	ПараметрыУчетаОССрезПоследних.СчетУчета,
		|	ПараметрыУчетаОССрезПоследних.ПервоначальнаяСтоимость,
		|	ПараметрыУчетаОССрезПоследних.ЛиквидационнаяСтоимость,
		|	ПараметрыУчетаОССрезПоследних.СрокСлужбы,
		|	ПараметрыУчетаОССрезПоследних.КоэффициентУскорения,
		|	ПараметрыУчетаОССрезПоследних.ОбъемПродукции,
		|	ПараметрыУчетаОССрезПоследних.СпособНачисленияАмортизации,
		|	ПараметрыУчетаОССрезПоследних.СпособОтраженияРасходовПоАмортизации,
		|	ПараметрыУчетаОССрезПоследних.ДатаВводаВЭксплуатацию,
		|	ПараметрыУчетаОССрезПоследних.СтоимостьДляРасчетаАмортизации,
		|	1
		|ИЗ
		|	РегистрСведений.ПараметрыУчетаОС.СрезПоследних(
		|			&КонецПериода,
		|			Организация = &Организация
		|				И ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаСостоянияОС.ОсновноеСредство
		|					ИЗ
		|						ВременнаяТаблицаСостоянияОС КАК ВременнаяТаблицаСостоянияОС)) КАК ПараметрыУчетаОССрезПоследних
		|ГДЕ
		|	ПараметрыУчетаОССрезПоследних.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.Производственный)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПараметрыУчетаОС.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации
		|ИЗ
		|	ТаблицаПараметрыУчетаОС КАК ТаблицаПараметрыУчетаОС";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	Запрос = Новый Запрос;
	//Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос.УстановитьПараметр("ДокументСсылка", Неопределено);
	Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", ДатаОкончания);
	Запрос.УстановитьПараметр("Организация", Организация);

	МассивОС = Новый Массив;
	МассивОС.Добавить(ОсновноеСредство);
	Запрос.УстановитьПараметр("МассивОС", МассивОС);
	
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(Дата, Организация);
	Запрос.УстановитьПараметр("НачислениеАмортизацииОСПоМесяцам", ДанныеУчетнойПолитики.НачислениеАмортизацииОСПоМесяцам); 
	
	СчетаУчетаАмортизацииОС = БухгалтерскийУчетСервер.СчетаУчетаНакопленнойАмортизацииОсновныхСредств();
	СчетаУчетаАмортизацииНМА = БухгалтерскийУчетСервер.СчетаУчетаНакопленнойАмортизацииНематериальныхАктивов();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУчетаАмортизацииОС, СчетаУчетаАмортизацииНМА); 
	Запрос.УстановитьПараметр("СписокСчетовНакопленнойАмортизации", СчетаУчетаАмортизацииОС);	
	
	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		СпособНачисленияАмортизации = Выборка.СпособНачисленияАмортизации;
	КонецЕсли;
	
	Если СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Производственный Тогда
		
		ТекстыЗапроса = Новый Массив;

		// Данные по выработке.
		// Если амортизация по дням, то выработка зависит от модернизации.
		// Если амортизация по месяцам, то выработка за месяц.
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	5 КАК Порядок,
			|	ВыработкаОСОбороты.ОсновноеСредство КАК ОсновноеСредство,
			|	ВыработкаОСОбороты.КоличествоОборот КАК Количество
			|ПОМЕСТИТЬ ТаблицаВыработкаОС
			|ИЗ
			|	РегистрНакопления.ВыработкаОС.Обороты(&НачалоПериода, &КонецПериода, Авто, Организация = &Организация) КАК ВыработкаОСОбороты
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСобытияОСМодернизация КАК ТаблицаСобытияОСМодернизация
			|		ПО ВыработкаОСОбороты.ОсновноеСредство = ТаблицаСобытияОСМодернизация.ОсновноеСредство
			|ГДЕ
			|	ТаблицаСобытияОСМодернизация.ОсновноеСредство ЕСТЬ NULL
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	5,
			|	ВыработкаОСОбороты.ОсновноеСредство,
			|	СУММА(ВыработкаОСОбороты.КоличествоОборот)
			|ИЗ
			|	РегистрНакопления.ВыработкаОС.Обороты(&НачалоПериода, &КонецПериода, Авто, Организация = &Организация) КАК ВыработкаОСОбороты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСобытияОСМодернизация КАК ТаблицаСобытияОСМодернизация
			|		ПО ВыработкаОСОбороты.ОсновноеСредство = ТаблицаСобытияОСМодернизация.ОсновноеСредство
			|			И ВыработкаОСОбороты.ПериодДень >= ТаблицаСобытияОСМодернизация.Период
			|
			|СГРУППИРОВАТЬ ПО
			|	ВыработкаОСОбороты.ОсновноеСредство
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ОсновноеСредство";
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
		// Результирующий запрос.
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТаблицаПараметрыУчетаОС.ОсновноеСредство КАК ОсновноеСредство,
			|	ТаблицаПараметрыУчетаОС.ОсновноеСредство.Наименование КАК ОсновноеСредствоНаименование,
			|	ТаблицаПараметрыУчетаОС.ИнвентарныйНомер КАК ИнвентарныйНомер,
			|	ТаблицаПараметрыУчетаОС.СчетУчета КАК СчетУчета,
			|	ТаблицаПараметрыУчетаОС.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию,
			|	ТаблицаПараметрыУчетаОС.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
			|	ТаблицаПараметрыУчетаОС.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость,
			|	ТаблицаПараметрыУчетаОС.СпособОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизации,
			|	ТаблицаПараметрыУчетаОС.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
			|	ТаблицаПараметрыУчетаОС.СрокСлужбы КАК СрокСлужбы,
			|	ТаблицаПараметрыУчетаОС.КоэффициентНачислениеАмортизацииОСПоМесяцам КАК КоэффициентНачислениеАмортизацииОСПоМесяцам,
			|	&НачислениеАмортизацииОСПоМесяцам КАК НачислениеАмортизацииОСПоМесяцам,
			|	ТаблицаПараметрыУчетаОС.ОбъемПродукции КАК ОбъемПродукции,
			|	ЕСТЬNULL(ТаблицаВыработкаОС.Количество, 0) КАК КоличествоПродукции,
			|	ЕСТЬNULL(ТаблицаНакопленнаяАмортизация.НакопленныйИзнос, 0) КАК НакопленныйИзнос,
			|	ТаблицаПараметрыУчетаОС.СтоимостьДляРасчетаАмортизации КАК СтоимостьДляРасчетаАмортизации,
			|	ВЫБОР
			|		КОГДА ТаблицаПараметрыУчетаОС.КоэффициентУскорения = 0
			|			ТОГДА 2
			|		ИНАЧЕ ТаблицаПараметрыУчетаОС.КоэффициентУскорения
			|	КОНЕЦ КАК КоэффициентУскорения,
			|	ЕСТЬNULL(ТаблицаСобытияОСМодернизация.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаМодернизации
			|ИЗ
			|	ТаблицаПараметрыУчетаОС КАК ТаблицаПараметрыУчетаОС
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаНакопленнаяАмортизация КАК ТаблицаНакопленнаяАмортизация
			|		ПО ТаблицаПараметрыУчетаОС.ОсновноеСредство = ТаблицаНакопленнаяАмортизация.ОсновноеСредство
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаВыработкаОС КАК ТаблицаВыработкаОС
			|		ПО ТаблицаПараметрыУчетаОС.ОсновноеСредство = ТаблицаВыработкаОС.ОсновноеСредство
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСобытияОСМодернизация КАК ТаблицаСобытияОСМодернизация
			|		ПО ТаблицаПараметрыУчетаОС.ОсновноеСредство = ТаблицаСобытияОСМодернизация.ОсновноеСредство
			|
			|УПОРЯДОЧИТЬ ПО
			|	ОсновноеСредствоНаименование";
		ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	Иначе		
		// Результирующий запрос.
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТаблицаПараметрыУчетаОС.ОсновноеСредство КАК ОсновноеСредство,
			|	ТаблицаПараметрыУчетаОС.ОсновноеСредство.Наименование КАК ОсновноеСредствоНаименование,
			|	ТаблицаПараметрыУчетаОС.ИнвентарныйНомер КАК ИнвентарныйНомер,
			|	ТаблицаПараметрыУчетаОС.СчетУчета КАК СчетУчета,
			|	ТаблицаПараметрыУчетаОС.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию,
			|	ТаблицаПараметрыУчетаОС.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
			|	ТаблицаПараметрыУчетаОС.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость,
			|	ТаблицаПараметрыУчетаОС.СпособОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизации,
			|	ТаблицаПараметрыУчетаОС.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
			|	ТаблицаПараметрыУчетаОС.СрокСлужбы КАК СрокСлужбы,
			|	ТаблицаПараметрыУчетаОС.КоэффициентНачислениеАмортизацииОСПоМесяцам КАК КоэффициентНачислениеАмортизацииОСПоМесяцам,
			|	&НачислениеАмортизацииОСПоМесяцам КАК НачислениеАмортизацииОСПоМесяцам,
			|	ТаблицаПараметрыУчетаОС.ОбъемПродукции КАК ОбъемПродукции,
			|	ЕСТЬNULL(ТаблицаНакопленнаяАмортизация.НакопленныйИзнос, 0) КАК НакопленныйИзнос,
			|	ТаблицаПараметрыУчетаОС.СтоимостьДляРасчетаАмортизации КАК СтоимостьДляРасчетаАмортизации,
			|	ВЫБОР
			|		КОГДА ТаблицаПараметрыУчетаОС.КоэффициентУскорения = 0
			|			ТОГДА 2
			|		ИНАЧЕ ТаблицаПараметрыУчетаОС.КоэффициентУскорения
			|	КОНЕЦ КАК КоэффициентУскорения,
			|	ЕСТЬNULL(ТаблицаСобытияОСМодернизация.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаМодернизации
			|ИЗ
			|	ТаблицаПараметрыУчетаОС КАК ТаблицаПараметрыУчетаОС
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаНакопленнаяАмортизация КАК ТаблицаНакопленнаяАмортизация
			|		ПО ТаблицаПараметрыУчетаОС.ОсновноеСредство = ТаблицаНакопленнаяАмортизация.ОсновноеСредство
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСобытияОСМодернизация КАК ТаблицаСобытияОСМодернизация
			|		ПО ТаблицаПараметрыУчетаОС.ОсновноеСредство = ТаблицаСобытияОСМодернизация.ОсновноеСредство
			|
			|УПОРЯДОЧИТЬ ПО
			|	ОсновноеСредствоНаименование";
		ТекстыЗапроса.Добавить(ТекстЗапроса);
			
	КонецЕсли;
	
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		СуммаАмортизации = 0;
		ТекстСообщения = "";		
		СрокСлужбы = Выборка.СрокСлужбы;
		
		СтрокаТабличнойЧасти = ПараметрыРасчетаАмортизации.Добавить();
		СтрокаТабличнойЧасти.Параметр = "Основное средство";
		СтрокаТабличнойЧасти.Формула = "";
		СтрокаТабличнойЧасти.Значение = Выборка.ОсновноеСредство;
		
		СтрокаТабличнойЧасти = ПараметрыРасчетаАмортизации.Добавить();
		СтрокаТабличнойЧасти.Параметр = "Способ начисления амортизации";
		СтрокаТабличнойЧасти.Формула = "";
		СтрокаТабличнойЧасти.Значение = Выборка.СпособНачисленияАмортизации;		
		
		// Линейный. (ПервоначальнаяСтоимость - ЛиквидационнаяСтоимость) / СрокСлужбы *
		// КоэффициентНачислениеАмортизацииОСПоМесяцам(только в месяце прима в остальных = 1).
		Если Выборка.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Линейный Тогда
			СтрокаТабличнойЧасти = ПараметрыРасчетаАмортизации.Добавить();
			СтрокаТабличнойЧасти.Параметр = "Срок службы";
			СтрокаТабличнойЧасти.Формула = "";
			СтрокаТабличнойЧасти.Значение = Выборка.СрокСлужбы;
			
			Если СрокСлужбы = 0 Тогда 
				СтрокаТабличнойЧасти = ПараметрыРасчетаАмортизации.Добавить();
				СтрокаТабличнойЧасти.Параметр = "Срок службы";
				СтрокаТабличнойЧасти.Формула = "Срок службы равен 0.";
				СтрокаТабличнойЧасти.Значение = Выборка.СрокСлужбы;
				
			Иначе 
				СтрокаТабличнойЧасти = ПараметрыРасчетаАмортизации.Добавить();
				СтрокаТабличнойЧасти.Параметр = "Стоимость для расчета амортизации";
				СтрокаТабличнойЧасти.Формула = "";
				СтрокаТабличнойЧасти.Значение = Выборка.СтоимостьДляРасчетаАмортизации;
				
				СтрокаТабличнойЧасти = ПараметрыРасчетаАмортизации.Добавить();
				СтрокаТабличнойЧасти.Параметр = "Коэфф. начисление амортизации ОС по месяцам";
				СтрокаТабличнойЧасти.Формула = "";
				СтрокаТабличнойЧасти.Значение = Выборка.КоэффициентНачислениеАмортизацииОСПоМесяцам;
				
				Если НЕ ЗначениеЗаполнено(Выборка.ДатаМодернизации) Тогда 				
					СуммаАмортизации = (Выборка.СтоимостьДляРасчетаАмортизации) / Выборка.СрокСлужбы * Выборка.КоэффициентНачислениеАмортизацииОСПоМесяцам;
					Формула = "СтоимостьДляРасчетаАмортизации / СрокСлужбы * КоэффициентНачислениеАмортизацииОСПоМесяцам";
																																															  
				Иначе
					КоличествоДнейВМесяце = День(ДатаОкончания);
					КоличествоДнейМодернизации = День(Выборка.ДатаМодернизации);
					ОставшеесяКоличествоДнейВМесяце = КоличествоДнейВМесяце - КоличествоДнейМодернизации + 1;
					
					СтрокаТабличнойЧасти = ПараметрыРасчетаАмортизации.Добавить();
					СтрокаТабличнойЧасти.Параметр = "Количество дней в месяце";
					СтрокаТабличнойЧасти.Формула = "";
					СтрокаТабличнойЧасти.Значение = КоличествоДнейВМесяце;
					
					СтрокаТабличнойЧасти = ПараметрыРасчетаАмортизации.Добавить();
					СтрокаТабличнойЧасти.Параметр = "Количество дней модернизации";
					СтрокаТабличнойЧасти.Формула = "";
					СтрокаТабличнойЧасти.Значение = КоличествоДнейМодернизации;
					
					СтрокаТабличнойЧасти = ПараметрыРасчетаАмортизации.Добавить();
					СтрокаТабличнойЧасти.Параметр = "Оставшееся количество дней в месяце";
					СтрокаТабличнойЧасти.Формула = "КоличествоДнейВМесяце - КоличествоДнейМодернизации + 1";
					СтрокаТабличнойЧасти.Значение = ОставшеесяКоличествоДнейВМесяце;
					
					СуммаАмортизации = ((Выборка.СтоимостьДляРасчетаАмортизации) / Выборка.СрокСлужбы)
										/ КоличествоДнейВМесяце * ОставшеесяКоличествоДнейВМесяце 
										* Выборка.КоэффициентНачислениеАмортизацииОСПоМесяцам;
					Формула = "СтоимостьДляРасчетаАмортизации) / СрокСлужбы) / КоличествоДнейВМесяце * ОставшеесяКоличествоДнейВМесяце * КоэффициентНачислениеАмортизацииОСПоМесяцам"										
				КонецЕсли;	
			КонецЕсли;
			
		// Производственный. ПервоначальнаяСтоимость * КоличествоПродукции / ОбъемПродукции.
		ИначеЕсли Выборка.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Производственный Тогда
			Если Выборка.ОбъемПродукции = 0 Тогда
				СтрокаТабличнойЧасти = ПараметрыРасчетаАмортизации.Добавить();
				СтрокаТабличнойЧасти.Параметр = "Объем продукции";
				СтрокаТабличнойЧасти.Формула = "Объем продукции равен 0.";
				СтрокаТабличнойЧасти.Значение = Выборка.ОбъемПродукции;
				
				СуммаАмортизации = 0;
				
			ИначеЕсли Выборка.КоличествоПродукции = 0 Тогда
				СтрокаТабличнойЧасти = ПараметрыРасчетаАмортизации.Добавить();
				СтрокаТабличнойЧасти.Параметр = "Количество продукции";
				СтрокаТабличнойЧасти.Формула = "Количество продукции равно 0.";
				СтрокаТабличнойЧасти.Значение = Выборка.КоличествоПродукции;
				
				СуммаАмортизации = 0;
				
			Иначе
				СтрокаТабличнойЧасти = ПараметрыРасчетаАмортизации.Добавить();
				СтрокаТабличнойЧасти.Параметр = "Количество продукции";
				СтрокаТабличнойЧасти.Формула = "Количество продукции равно 0.";
				СтрокаТабличнойЧасти.Значение = Выборка.КоличествоПродукции;
				
				СуммаАмортизации = Выборка.СтоимостьДляРасчетаАмортизации * Выборка.КоличествоПродукции / Выборка.ОбъемПродукции;
			КонецЕсли;
			
			Формула = "СтоимостьДляРасчетаАмортизации * КоличествоПродукции / ОбъемПродукции";		
				
		// Уменьшаемого остатка	(ускоренный). (ПервоначальнаяСтоимость - НакопленныйИзносЗаТекущийГод) / СрокСлужбы * КоэффициентУскорения.
		ИначеЕсли Выборка.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда
			Если СрокСлужбы = 0 Тогда 			
				СтрокаТабличнойЧасти = ПараметрыРасчетаАмортизации.Добавить();
				СтрокаТабличнойЧасти.Параметр = "Срок службы";
				СтрокаТабличнойЧасти.Формула = "Срок службы равен 0.";
				СтрокаТабличнойЧасти.Значение = Выборка.СрокСлужбы;
				
				СуммаАмортизации = 0;
				
			ИначеЕсли Выборка.КоэффициентУскорения = 0 Тогда
				СтрокаТабличнойЧасти = ПараметрыРасчетаАмортизации.Добавить();
				СтрокаТабличнойЧасти.Параметр = "Коэффициент ускорения";
				СтрокаТабличнойЧасти.Формула = "Коэффициент ускорения равен 0.";
				СтрокаТабличнойЧасти.Значение = Выборка.КоэффициентУскорения;
				
				СуммаАмортизации = 0;
				
			Иначе 
				// Накопленная амортизация за расчетный год.
				НакопленныйИзносНаНачалоРасчетногоГода = 0;
				
				РасчетнаяДата = Макс(Выборка.ДатаМодернизации, Выборка.ДатаВводаВЭксплуатацию);
				
				// Добавление к периоду отстатка полных лет.
				КоличествоЛет = Год(ДатаОкончания) - Год(РасчетнаяДата);
				КоличествоМесяцев = Месяц(ДатаОкончания) - Месяц(РасчетнаяДата);
				КоличествоПолныхЛет = Цел((КоличествоЛет * 12 + КоличествоМесяцев) / 12);
				НачалоРасчетногоПериода = ДобавитьМесяц(РасчетнаяДата, КоличествоПолныхЛет * 12);
				
				ТекстЗапроса =
					"ВЫБРАТЬ
					|	ЕСТЬNULL(ВЫБОР
					|			КОГДА ХозрасчетныйОстаткиНаНачалоГода.СуммаОстаток < 0
					|				ТОГДА ХозрасчетныйОстаткиНаНачалоГода.СуммаОстаток * -1
					|			ИНАЧЕ ХозрасчетныйОстаткиНаНачалоГода.СуммаОстаток
					|		КОНЕЦ, 0) КАК НакопленныйИзносНаНачалоРасчетногоГода
					|ИЗ
					|	РегистрБухгалтерии.Хозрасчетный.Остатки(
					|			&Период,
					|			Счет В (&СписокСчетовНакопленнойАмортизации),
					|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
					|			Организация = &Организация
					|				И Субконто1 = &ОсновноеСредство) КАК ХозрасчетныйОстаткиНаНачалоГода";
				Запрос = Новый Запрос(ТекстЗапроса);
				Запрос.УстановитьПараметр("ОсновноеСредство", Выборка.ОсновноеСредство);
				Запрос.УстановитьПараметр("Период", НачалоРасчетногоПериода);
				Запрос.УстановитьПараметр("КоличествоЛет", КоличествоЛет);
				Запрос.УстановитьПараметр("Организация", Организация);
				Запрос.УстановитьПараметр("СписокСчетовНакопленнойАмортизации", СчетаУчетаАмортизацииОС);
				РезультатЗапроса = Запрос.Выполнить();
				ВыборкаУменьшаемогоОстатка = РезультатЗапроса.Выбрать();
				Если ВыборкаУменьшаемогоОстатка.Следующий() Тогда 
					НакопленныйИзносНаНачалоРасчетногоГода = ВыборкаУменьшаемогоОстатка.НакопленныйИзносНаНачалоРасчетногоГода;
				КонецЕсли;	
								
				СтрокаТабличнойЧасти = ПараметрыРасчетаАмортизации.Добавить();
				СтрокаТабличнойЧасти.Параметр = "Дата модернизации";
				СтрокаТабличнойЧасти.Формула = "";
				СтрокаТабличнойЧасти.Значение = Выборка.ДатаМодернизации;
				
				СтрокаТабличнойЧасти = ПараметрыРасчетаАмортизации.Добавить();
				СтрокаТабличнойЧасти.Параметр = "Дата ввода в эксплуатацию";
				СтрокаТабличнойЧасти.Формула = "";
				СтрокаТабличнойЧасти.Значение = Выборка.ДатаВводаВЭксплуатацию;
				
				СтрокаТабличнойЧасти = ПараметрыРасчетаАмортизации.Добавить();
				СтрокаТабличнойЧасти.Параметр = "Расчетная дата";
				СтрокаТабличнойЧасти.Формула = "Большее значение из ДатаМодернизации и ДатаВводаВЭксплуатацию";
				СтрокаТабличнойЧасти.Значение = РасчетнаяДата;
				
				СтрокаТабличнойЧасти = ПараметрыРасчетаАмортизации.Добавить();
				СтрокаТабличнойЧасти.Параметр = "Количество лет";
				СтрокаТабличнойЧасти.Формула = "Год от ДатаПо - год от РасчетнаяДата";
				СтрокаТабличнойЧасти.Значение = КоличествоЛет;
				
				СтрокаТабличнойЧасти = ПараметрыРасчетаАмортизации.Добавить();
				СтрокаТабличнойЧасти.Параметр = "Количество месяцев";
				СтрокаТабличнойЧасти.Формула = "Месяц от ДатаПо - месяц от РасчетнаяДата";
				СтрокаТабличнойЧасти.Значение = КоличествоМесяцев;
				
				СтрокаТабличнойЧасти = ПараметрыРасчетаАмортизации.Добавить();
				СтрокаТабличнойЧасти.Параметр = "Количество полных лет";
				СтрокаТабличнойЧасти.Формула = "Целое от (КоличествоЛет * 12 + КоличествоМесяцев) / 12";
				СтрокаТабличнойЧасти.Значение = КоличествоПолныхЛет;
				
				СтрокаТабличнойЧасти = ПараметрыРасчетаАмортизации.Добавить();
				СтрокаТабличнойЧасти.Параметр = "Начало расчетного периода";
				СтрокаТабличнойЧасти.Формула = "ДобавитьМесяц(РасчетнаяДата, КоличествоПолныхЛет * 12)";
				СтрокаТабличнойЧасти.Значение = НачалоРасчетногоПериода;
				
				СтрокаТабличнойЧасти = ПараметрыРасчетаАмортизации.Добавить();
				СтрокаТабличнойЧасти.Параметр = "Накопленный износ на начало расчетного года";
				СтрокаТабличнойЧасти.Формула = "ДобавитьМесяц(РасчетнаяДата, КоличествоПолныхЛет * 12)";
				СтрокаТабличнойЧасти.Значение = НакопленныйИзносНаНачалоРасчетногоГода;
								
				// Ликвидационная стоимость участвует в расчете только в последний год.
				КоличествоЦелыхЛет = Цел(Выборка.СрокСлужбы / 12);
				ПериодНачалаПоследнегоГода = ДобавитьМесяц(РасчетнаяДата, КоличествоЦелыхЛет * 12);
				
				СтрокаТабличнойЧасти = ПараметрыРасчетаАмортизации.Добавить();
				СтрокаТабличнойЧасти.Параметр = "Количество целых лет";
				СтрокаТабличнойЧасти.Формула = "Целое от СрокСлужбы / 12";
				СтрокаТабличнойЧасти.Значение = КоличествоЦелыхЛет;

				СтрокаТабличнойЧасти = ПараметрыРасчетаАмортизации.Добавить();
				СтрокаТабличнойЧасти.Параметр = "Период начала последнего года";
				СтрокаТабличнойЧасти.Формула = "ДобавитьМесяц(РасчетнаяДата, КоличествоЦелыхЛет * 12)";
				СтрокаТабличнойЧасти.Значение = ПериодНачалаПоследнегоГода;
								
				СтрокаТабличнойЧасти = ПараметрыРасчетаАмортизации.Добавить();
				СтрокаТабличнойЧасти.Параметр = "Условие расчета амортизации";
				СтрокаТабличнойЧасти.Формула = "ДатаПо < ПериодНачалаПоследнегоГода";
				СтрокаТабличнойЧасти.Значение = ДатаОкончания < ПериодНачалаПоследнегоГода;
				
				Если ДатаОкончания < ПериодНачалаПоследнегоГода Тогда 
					СтрокаТабличнойЧасти = ПараметрыРасчетаАмортизации.Добавить();
					СтрокаТабличнойЧасти.Параметр = "Первоначальная стоимость";
					СтрокаТабличнойЧасти.Формула = "";
					СтрокаТабличнойЧасти.Значение = Выборка.ПервоначальнаяСтоимость;
					
					СтрокаТабличнойЧасти = ПараметрыРасчетаАмортизации.Добавить();
					СтрокаТабличнойЧасти.Параметр = "Срок службы";
					СтрокаТабличнойЧасти.Формула = "";
					СтрокаТабличнойЧасти.Значение = Выборка.СрокСлужбы;
					
					СтрокаТабличнойЧасти = ПараметрыРасчетаАмортизации.Добавить();
					СтрокаТабличнойЧасти.Параметр = "Коэффициент ускорения";
					СтрокаТабличнойЧасти.Формула = "";
					СтрокаТабличнойЧасти.Значение = Выборка.КоэффициентУскорения;
					
			 		СуммаАмортизации = (Выборка.ПервоначальнаяСтоимость - НакопленныйИзносНаНачалоРасчетногоГода) / Выборка.СрокСлужбы * Выборка.КоэффициентУскорения;
					Формула = "(ПервоначальнаяСтоимость - НакопленныйИзносНаНачалоРасчетногоГода) / СрокСлужбы * КоэффициентУскорения";
				Иначе
					СтрокаТабличнойЧасти = ПараметрыРасчетаАмортизации.Добавить();
					СтрокаТабличнойЧасти.Параметр = "Стоимость для расчета амортизации";
					СтрокаТабличнойЧасти.Формула = "";
					СтрокаТабличнойЧасти.Значение = Выборка.СтоимостьДляРасчетаАмортизации;
					
			 		СуммаАмортизации = (Выборка.СтоимостьДляРасчетаАмортизации - НакопленныйИзносНаНачалоРасчетногоГода) / 12;
					Формула = "(СтоимостьДляРасчетаАмортизации - НакопленныйИзносНаНачалоРасчетногоГода) / 12";
				КонецЕсли;	

			КонецЕсли;	
				
		// По сумме чисел лет.
		ИначеЕсли Выборка.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛет Тогда
				
			// Расчет года использования.
			ДатаВводаВЭксплуатацию = НачалоМесяца(ДобавитьМесяц(Выборка.ДатаВводаВЭксплуатацию, 1)); 
			ГодИспользования = Год(ДатаОкончания) - Год(ДатаВводаВЭксплуатацию);
			ГодовщинаНачалаИспользования = Дата(Год(ДатаОкончания), Месяц(ДатаВводаВЭксплуатацию), День(ДатаВводаВЭксплуатацию));
				
			Если КонецМесяца(ДатаОкончания) >= КонецМесяца(ГодовщинаНачалаИспользования) Тогда
				ГодИспользования = ГодИспользования + 1;
			КонецЕсли;    
				
			ГодИспользования = Макс(ГодИспользования, 1);
			
			// Расчет числа лет.			
			ЧислоЛет = Цел(Макс(1, Выборка.СрокСлужбы / 12));
			СуммаЧислеЛет = 0;
			
			// Формула суммы чисел от 1 до N.
			// S = (N + 1) * N / 2.
			СуммаЧислеЛет = (ЧислоЛет + 1) * ЧислоЛет / 2;
			
			ПроцентГодовойАмортизации = Макс((ЧислоЛет - ГодИспользования + 1), 1) / СуммаЧислеЛет;
			СуммаГодовойАмортизации	= Выборка.СтоимостьДляРасчетаАмортизации * ПроцентГодовойАмортизации;
			СуммаАмортизации = СуммаГодовойАмортизации / 12;
			
			// вывод в таблицу
			СтрокаТабличнойЧасти = ПараметрыРасчетаАмортизации.Добавить();
			СтрокаТабличнойЧасти.Параметр = "Стоимость для расчета амортизации";
			СтрокаТабличнойЧасти.Формула = "";
			СтрокаТабличнойЧасти.Значение = Выборка.СтоимостьДляРасчетаАмортизации;
			
			СтрокаТабличнойЧасти = ПараметрыРасчетаАмортизации.Добавить();
			СтрокаТабличнойЧасти.Параметр = "Год использования";
			СтрокаТабличнойЧасти.Формула = "";
			СтрокаТабличнойЧасти.Значение = ГодИспользования;
			
			СтрокаТабличнойЧасти = ПараметрыРасчетаАмортизации.Добавить();
			СтрокаТабличнойЧасти.Параметр = "Число лет";
			СтрокаТабличнойЧасти.Формула = "Цел(Макс(1, Выборка.СрокСлужбы / 12))";
			СтрокаТабличнойЧасти.Значение = ЧислоЛет;
			
			СтрокаТабличнойЧасти = ПараметрыРасчетаАмортизации.Добавить();
			СтрокаТабличнойЧасти.Параметр = "Сумма числе лет";
			СтрокаТабличнойЧасти.Формула = "(ЧислоЛет + 1) * ЧислоЛет / 2";
			СтрокаТабличнойЧасти.Значение = СуммаЧислеЛет;
			
			СтрокаТабличнойЧасти = ПараметрыРасчетаАмортизации.Добавить();
			СтрокаТабличнойЧасти.Параметр = "Процент годовой амортизации";
			СтрокаТабличнойЧасти.Формула = "Макс((ЧислоЛет - ГодИспользования + 1), 1) / СуммаЧислеЛет";
			СтрокаТабличнойЧасти.Значение = ПроцентГодовойАмортизации;
			
			СтрокаТабличнойЧасти = ПараметрыРасчетаАмортизации.Добавить();
			СтрокаТабличнойЧасти.Параметр = "Сумма годовой аАмортизации";
			СтрокаТабличнойЧасти.Формула = "СтоимостьДляРасчетаАмортизации * ПроцентГодовойАмортизации";
			СтрокаТабличнойЧасти.Значение = СуммаГодовойАмортизации;
			
			Формула = "СуммаГодовойАмортизации / 12";
			
		КонецЕсли;
		
		Если НЕ ТекстСообщения = "" Тогда 
			ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.ОсновноеСредствоНаименование);
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстСообщения, Неопределено);
		КонецЕсли;	
		
		// Корректировка суммы амортизации с учетом накопленного износа.
		ДоступнаяСуммаАмортизации = Выборка.ПервоначальнаяСтоимость - Выборка.ЛиквидационнаяСтоимость - Выборка.НакопленныйИзнос;
		Если ДоступнаяСуммаАмортизации <= 0 Тогда 
			СуммаАмортизацииОкончательно = 0;
		ИначеЕсли ДоступнаяСуммаАмортизации < СуммаАмортизации Тогда 
			СуммаАмортизацииОкончательно = ДоступнаяСуммаАмортизации;
		Иначе
			СуммаАмортизацииОкончательно = СуммаАмортизации;
		КонецЕсли;	
		
		СтрокаТабличнойЧасти = ПараметрыРасчетаАмортизации.Добавить();
		СтрокаТабличнойЧасти.Параметр = "АО за месяц расчетная";
		СтрокаТабличнойЧасти.Формула = "";
		СтрокаТабличнойЧасти.Значение = СуммаАмортизации;
		
		СтрокаТабличнойЧасти = ПараметрыРасчетаАмортизации.Добавить();
		СтрокаТабличнойЧасти.Параметр = "Первоначальная стоимость";
		СтрокаТабличнойЧасти.Формула = "";
		СтрокаТабличнойЧасти.Значение = Выборка.ПервоначальнаяСтоимость;
		
		СтрокаТабличнойЧасти = ПараметрыРасчетаАмортизации.Добавить();
		СтрокаТабличнойЧасти.Параметр = "Ликвидационная стоимость";
		СтрокаТабличнойЧасти.Формула = "";
		СтрокаТабличнойЧасти.Значение = Выборка.ЛиквидационнаяСтоимость;
		
		СтрокаТабличнойЧасти = ПараметрыРасчетаАмортизации.Добавить();
		СтрокаТабличнойЧасти.Параметр = "Накопленный износ";
		СтрокаТабличнойЧасти.Формула = "";
		СтрокаТабличнойЧасти.Значение = Выборка.НакопленныйИзнос;
		
		СтрокаТабличнойЧасти = ПараметрыРасчетаАмортизации.Добавить();
		СтрокаТабличнойЧасти.Параметр = "Доступная сумма амортизации";
		СтрокаТабличнойЧасти.Формула = "ПервоначальнаяСтоимость - ЛиквидационнаяСтоимость - НакопленныйИзнос";
		СтрокаТабличнойЧасти.Значение = ДоступнаяСуммаАмортизации;
				
		СтрокаТабличнойЧасти = ПараметрыРасчетаАмортизации.Добавить();
		СтрокаТабличнойЧасти.Параметр = "Амортизация за месяц";
		СтрокаТабличнойЧасти.Формула = Формула;
		СтрокаТабличнойЧасти.Значение = СуммаАмортизацииОкончательно;
			
	КонецЕсли;	
		
КонецПроцедуры // ()

#КонецОбласти

#Область РедактированиеМесяцаСтрокой

&НаКлиенте
Процедура ПериодМонитораПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Дата", "МесяцСтрокой", Модифицированность);
	ФормированиеНалогаНаИмущество();
	ДатаРасчетаНИИзменилась = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПериодМонитораНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ПериодМонитораНачалоВыбораЗавершение", ЭтотОбъект);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Дата", "МесяцСтрокой",, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПериодМонитораРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Дата", "МесяцСтрокой", Направление, Модифицированность);
	ДатаРасчетаНИИзменилась = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПериодМонитораАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПериодМонитораОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПериодМонитораНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт

	ФормированиеНалогаНаИмущество();	
	ДатаРасчетаНИИзменилась = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗадатьПериодПриСозданииНаСервере()

	Дата = ДатаОкончания;
	
	Если Месяц(Дата) = 1 Тогда
		Месяц = "Январь ";
	ИначеЕсли Месяц(Дата) = 2 Тогда
		Месяц = "Февраль ";
	ИначеЕсли Месяц(Дата) = 3 Тогда
		Месяц = "Март ";
	ИначеЕсли Месяц(Дата) = 4 Тогда
		Месяц = "Апрель ";
	ИначеЕсли Месяц(Дата) = 5 Тогда
		Месяц = "Май ";
	ИначеЕсли Месяц(Дата) = 6 Тогда
		Месяц = "Июнь ";
	ИначеЕсли Месяц(Дата) = 7 Тогда
		Месяц = "Июль ";
	ИначеЕсли Месяц(Дата) = 8 Тогда
		Месяц = "Август ";
	ИначеЕсли Месяц(Дата) = 9 Тогда
		Месяц = "Сентябрь ";
	ИначеЕсли Месяц(Дата) = 10 Тогда
		Месяц = "Октябрь ";
	ИначеЕсли Месяц(Дата) = 11 Тогда
		Месяц = "Ноябрь ";
	Иначе
		Месяц = "Декабрь ";
	КонецЕсли;	

	МесяцСтрокой = Месяц + Формат(Год(Дата), "ЧГ=0");
КонецПроцедуры

#КонецОбласти

#Область ФоновоеЗаданиеПерепровестиДокументы

// Функция получения ссылок документов.
//
// Возвращаемое значение:
//	МассивСсылок - Массив - Массив ссылок документов.
//
&НаСервере
Функция ДокументыДляОбработки()

	РасшифровкаПоСобытиямОС.Сортировать("Дата Возр");
	МассивСсылок = Новый Массив;
	Для каждого СтрокаТаблицы Из РасшифровкаПоСобытиямОС Цикл
		Если ТипЗнч(СтрокаТаблицы.Документ) <> Тип("ДокументСсылка.ИнвентаризацияОС") Тогда 
			МассивСсылок.Добавить(СтрокаТаблицы.Документ);
		КонецЕсли;
	КонецЦикла;

	Возврат МассивСсылок;	

КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			СостояниеПрогресса = 100;
			ЗагрузитьПодготовленныеДанные();
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		Иначе
			ДанныеПрогресса = ПолучитьИзВременногоХранилища(АдресХранилищаПрогресса);
			СостояниеПрогресса = ДанныеПрогресса;
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;	
КонецПроцедуры

// Функция перепроведения документов.
//
// Параметры:
//	ПараметрыКоманды - Структура - параметры.
//
// Возвращаемое значение:
//	РезультатВыполнения - Структура - результат выполнения перепроведения.
//
&НаСервере
Функция ПерепровестиДокументыНаСервере(ПараметрыКоманды)
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	АдресРасшифровки = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	АдресХранилищаПрогресса = ПоместитьВоВременноеХранилище(, УникальныйИдентификатор);
	ПараметрыКоманды.Вставить("АдресРасшифровки", АдресРасшифровки);
	ПараметрыКоманды.Вставить("АдресХранилищаПрогресса", АдресХранилищаПрогресса);
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Обработки.МониторОС.ПерепровестиДокументы",
		ПараметрыКоманды,
		СтрШаблон(НСтр("ru = 'Перепроведение документов: %1'"), Заголовок));
	
	АдресХранилища       = РезультатВыполнения.АдресХранилища;
	ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
КонецФункции

// Процедура вывода информации о перепроведении в табличный документ.
//
&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	Результат         = РезультатВыполнения.Результат;
	
	ИдентификаторЗадания = Неопределено;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
КонецФункции

&НаКлиенте
Процедура АмортизацияПоОСПриАктивизацииСтроки(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти
