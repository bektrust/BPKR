#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ФормированиеТБ

Функция ИмяРеквизитаПредставленияНоменклатуры(НастройкиПрайсЛиста)
	
	ИмяРеквизита = "Наименование";
	
	ПредставлениеНоменклатуры = НастройкиПрайсЛиста.ПредставлениеНоменклатуры;
	
	СтрокаПредставления = ПредставлениеНоменклатуры.Найти("НаименованиеПолное", "РеквизитНоменклатуры");
	Если СтрокаПредставления.Использование Тогда
		
		Возврат СтрокаПредставления["РеквизитНоменклатуры"];
		
	КонецЕсли;
	
	СтрокаПредставления = ПредставлениеНоменклатуры.Найти("Комментарий", "РеквизитНоменклатуры");
	Если СтрокаПредставления.Использование Тогда
		
		Возврат СтрокаПредставления["РеквизитНоменклатуры"];
		
	КонецЕсли;
	
	Возврат ИмяРеквизита;
	
КонецФункции

Функция ЗаполнитьРасшифровкуЦены(НастройкиПрайсЛиста, ТипЦен = Неопределено, Номенклатура = Неопределено, ЕдиницаИзмерения = Неопределено, Цена = Неопределено)
	
	СтруктураРасшифровки = Новый Структура;
	СтруктураРасшифровки.Вставить("ТипЦен",				ТипЦен);
	СтруктураРасшифровки.Вставить("Номенклатура",		Номенклатура);	
	СтруктураРасшифровки.Вставить("ЕдиницаИзмерения",	ЕдиницаИзмерения);
	СтруктураРасшифровки.Вставить("Цена",				Цена);
	
	Возврат СтруктураРасшифровки;
	
КонецФункции

Процедура ВывестиГруппуВТабличныйДокументПолотно(ГруппаИерархии, КоллекцияСтрок, НастройкиПрайсЛиста, ТабличныйДокумент)
	
	ОбластьГруппа		= НастройкиПрайсЛиста.ОбластьГруппа;
	ОбластьСтрока		= НастройкиПрайсЛиста.ОбластьСтрока;
	ВыводитьКартинки	= НастройкиПрайсЛиста.ВыводитьКартинки;
	
	ЗначенияПараметров = Новый Структура;
	
	Если ГруппаИерархии <> Неопределено Тогда
		ПредставлениеГруппы = ?(ЗначениеЗаполнено(ГруппаИерархии), ГруппаИерархии, НСтр("ru = '<...>'"));
		ЗначенияПараметров.Вставить("ПредставлениеГруппы", ПредставлениеГруппы);
		ОбластьГруппа.Параметры.Заполнить(ЗначенияПараметров);
		ТабличныйДокумент.Вывести(ОбластьГруппа);
	КонецЕсли;	
	
	ТабличныйДокумент.НачатьГруппуСтрок();
	
	Для каждого Строка Из КоллекцияСтрок Цикл
		
		Если Строка.ЭтоГруппа = Неопределено Тогда
			
			ВывестиГруппуВТабличныйДокументПолотно(Строка.ПредставлениеГруппыВИерархии, Строка.Строки, НастройкиПрайсЛиста, ТабличныйДокумент);
			Продолжить;
			
		КонецЕсли;
		
		ОбластьСтрока.Параметры.Заполнить(Строка);
		
		// :::Картинка
		Если ВыводитьКартинки Тогда
			
			Если ЗначениеЗаполнено(Строка.Картинка) Тогда
				                                                             
				ДанныеКартинки = РаботаСФайлами.ДвоичныеДанныеФайла(Строка.Картинка);
				Если ЗначениеЗаполнено(ДанныеКартинки) Тогда
					
					ОбластьСтрока.Область("Картинка").Картинка = Новый Картинка(ДанныеКартинки);
					
				КонецЕсли;
				
			Иначе
				
				ОбластьСтрока.Область("Картинка").Картинка = Неопределено;
				
			КонецЕсли;
			
			ОбластьСтрока.Параметры.Картинка = ""; // Что-бы под картинкой не выглядывал текст...
			
		КонецЕсли;
		
		// :::Вывод остатков
		Если НастройкиПрайсЛиста.СвободныйОстаток Тогда

			ОбластьСтрока.Параметры.СвободныйОстаток = Формат(Строка.СвободныйОстаток, "ЧЦ=15; ЧДЦ=1");
			
		КонецЕсли;
		
		// :::Расшифровки
		ЗначенияПараметров.Очистить();
		НоменклатураСсылка	= Строка.НоменклатураСсылка;
		
		Для каждого СтрокаТипЦены Из НастройкиПрайсЛиста.ТаблицаВидовЦен Цикл
			
			Ключ = "СтруктураРасшифровки" + СтрокаТипЦены.НомерСтроки;
			
			СтруктураРасшифровки = ЗаполнитьРасшифровкуЦены(НастройкиПрайсЛиста, СтрокаТипЦены.ТипЦен, НоменклатураСсылка, 
				Строка["ЕдиницаЦена_" + СтрокаТипЦены.НомерСтроки], Строка["Цена_" + СтрокаТипЦены.НомерСтроки]);
			
			ЗначенияПараметров.Вставить(Ключ, СтруктураРасшифровки);
			
		КонецЦикла;
		
		ОбластьСтрока.Параметры.Заполнить(ЗначенияПараметров);
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
	ТабличныйДокумент.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

Процедура ВывестиГруппуВТабличныйДокументДвеКолонки(ГруппаИерархии, КоллекцияСтрок, НастройкиПрайсЛиста, ТабличныйДокумент)
	
	ИмяРеквизитаПредставленияНоменклатуры	= ИмяРеквизитаПредставленияНоменклатуры(НастройкиПрайсЛиста);
	
	ОбластьГруппа		= НастройкиПрайсЛиста.ОбластьГруппа;
	ОбластьСтрока		= НастройкиПрайсЛиста.ОбластьСтрока;
	
	ЗначенияПараметров = Новый Структура;
	
	ПредставлениеГруппы = ?(ЗначениеЗаполнено(ГруппаИерархии), ГруппаИерархии, НСтр("ru = '<...>'"));
	ЗначенияПараметров.Вставить("ПредставлениеГруппы", ПредставлениеГруппы);
	ОбластьГруппа.Параметры.Заполнить(ЗначенияПараметров);
	ТабличныйДокумент.Вывести(ОбластьГруппа);
	
	ТабличныйДокумент.НачатьГруппуСтрок();
	
	ЗначенияПараметров.Очистить();
	ПерваяКолонка = Истина;
	Для каждого Строка Из КоллекцияСтрок Цикл
		
		Если Строка.ЭтоГруппа = Неопределено Тогда
			
			Если ЗначенияПараметров.Количество() > 0 Тогда
				
				ОбластьСтрока.Параметры.Заполнить(ЗначенияПараметров);
				ТабличныйДокумент.Вывести(ОбластьСтрока);
				ЗначенияПараметров.Очистить();
				
			КонецЕсли;
			
			ВывестиГруппуВТабличныйДокументДвеКолонки(Строка.ПредставлениеГруппыВИерархии, Строка.Строки, НастройкиПрайсЛиста, ТабличныйДокумент);
			Продолжить;
			
		КонецЕсли;
		
		Если ПерваяКолонка Тогда
			
			ЗначенияПараметров.Вставить("НоменклатураСсылка", 		Строка.НоменклатураСсылка);
			ЗначенияПараметров.Вставить("Код", 						Строка.НоменклатураСсылка.Код);
			ЗначенияПараметров.Вставить("ПредставлениеНоменклатуры",Строка[ИмяРеквизитаПредставленияНоменклатуры]);
			ЗначенияПараметров.Вставить("ЕдиницаИзмерения", 		Строка.ЕдиницаЦена_1);
			ЗначенияПараметров.Вставить("Цена", 					Строка.Цена_1);
			
			СтруктураРасшифровки = ЗаполнитьРасшифровкуЦены(НастройкиПрайсЛиста, НастройкиПрайсЛиста.ТипЦены, Строка.НоменклатураСсылка, Строка.ЕдиницаЦена_1, Строка.Цена_1);
			ЗначенияПараметров.Вставить("СтруктураРасшифровки", СтруктураРасшифровки);
			
			ЗначенияПараметров.Вставить("НоменклатураСсылка1", 		Неопределено);
			ЗначенияПараметров.Вставить("Код1", 					Неопределено);
			ЗначенияПараметров.Вставить("ПредставлениеНоменклатуры1",Неопределено);
			ЗначенияПараметров.Вставить("ЕдиницаИзмерения1", 		Неопределено);
			ЗначенияПараметров.Вставить("Цена1", 					Неопределено);
			ЗначенияПараметров.Вставить("СтруктураРасшифровки1", 	Неопределено);
			
		Иначе
			
			ЗначенияПараметров.НоменклатураСсылка1			= Строка.НоменклатураСсылка;
			ЗначенияПараметров.Код1							= Строка.НоменклатураСсылка.Код;
			ЗначенияПараметров.ПредставлениеНоменклатуры1	= Строка[ИмяРеквизитаПредставленияНоменклатуры];
			ЗначенияПараметров.ЕдиницаИзмерения1			= Строка.ЕдиницаЦена_1;
			ЗначенияПараметров.Цена1						= Строка.Цена_1;
			
			СтруктураРасшифровки = ЗаполнитьРасшифровкуЦены(НастройкиПрайсЛиста, НастройкиПрайсЛиста.ТипЦены, Строка.НоменклатураСсылка, Строка.ЕдиницаЦена_1, Строка.Цена_1);
			ЗначенияПараметров.Вставить("СтруктураРасшифровки1", СтруктураРасшифровки);
			
			ОбластьСтрока.Параметры.Заполнить(ЗначенияПараметров);
			ТабличныйДокумент.Вывести(ОбластьСтрока);
			ЗначенияПараметров.Очистить();
			
		КонецЕсли;
		
		ПерваяКолонка = НЕ ПерваяКолонка;
		
	КонецЦикла;
	
	Если ЗначенияПараметров.Количество() > 0 Тогда
		
		ОбластьСтрока.Параметры.Заполнить(ЗначенияПараметров);
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		ЗначенияПараметров.Очистить();
		
	КонецЕсли;
	
	ТабличныйДокумент.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

Процедура ВывестиГруппуВТабличныйДокументДиафильм(ГруппаИерархии, КоллекцияСтрок, НастройкиПрайсЛиста, ТабличныйДокумент)
	
	ИмяРеквизитаПредставленияНоменклатуры	= ИмяРеквизитаПредставленияНоменклатуры(НастройкиПрайсЛиста);
	
	ОбластьГруппа				= НастройкиПрайсЛиста.ОбластьГруппа;
	ОбластьСлайдДетали			= НастройкиПрайсЛиста.ОбластьСлайдДетали;
	ОбластьОтступВертикальный	= НастройкиПрайсЛиста.ОбластьОтступВертикальный;
	ОбластьОтступГоризонтальный	= НастройкиПрайсЛиста.ОбластьОтступГоризонтальный;
	КоличествоКолонок			= НастройкиПрайсЛиста.КоличествоКолонок;
	
	ОбластьОтступВертикальный.Область("R2").ВысотаСтроки = НастройкиПрайсЛиста.КартинкаВысота;
	
	ЗначенияПараметров = Новый Структура;
	
	ПредставлениеГруппы = ?(ЗначениеЗаполнено(ГруппаИерархии), ГруппаИерархии, НСтр("ru = '<...>'"));
	ЗначенияПараметров.Вставить("ПредставлениеГруппы", ПредставлениеГруппы);
	ОбластьГруппа.Параметры.Заполнить(ЗначенияПараметров);
	ТабличныйДокумент.Вывести(ОбластьГруппа);
	
	ТабличныйДокумент.НачатьГруппуСтрок();
	
	ЗначенияПараметров.Очистить();
	Колонка = 0;
	Для каждого Строка Из КоллекцияСтрок Цикл
		
		Если Строка.ЭтоГруппа = Неопределено Тогда
			
			ВывестиГруппуВТабличныйДокументДиафильм(Строка.ПредставлениеГруппыВИерархии, Строка.Строки, НастройкиПрайсЛиста, ТабличныйДокумент);
			Продолжить;
			
		КонецЕсли;
		
		Колонка = Колонка + 1;
		
		ЗначенияПараметров.Очистить();
		ЗначенияПараметров.Вставить("НоменклатураСсылка",		Строка.НоменклатураСсылка);
		ЗначенияПараметров.Вставить("Код",						Строка.НоменклатураСсылка.Код);
		ЗначенияПараметров.Вставить("ПредставлениеНоменклатуры",Строка[ИмяРеквизитаПредставленияНоменклатуры]);
		
		ЦенаЕдиницаИзмерения = ?(ЗначениеЗаполнено(Строка.Цена_1), Строка(Формат(Строка.Цена_1, "ЧЦ=15; ЧДЦ=2")) + " " + Строка(НастройкиПрайсЛиста.Валюта) + "\" + Строка(Строка.ЕдиницаЦена_1), "");
		ЗначенияПараметров.Вставить("ЦенаЕдиницаИзмерения", ЦенаЕдиницаИзмерения);
		
		ОбластьСлайдДетали.Параметры.Заполнить(ЗначенияПараметров);
		
		Если Колонка = 1 Тогда
			
			ТабличныйДокумент.Вывести(ОбластьОтступВертикальный);
			
			// :::Картинка
			Если ЗначениеЗаполнено(Строка.Картинка) Тогда
				
				ДанныеКартинки = РаботаСФайлами.ДвоичныеДанныеФайла(Строка.Картинка);
				Если ЗначениеЗаполнено(ДанныеКартинки) Тогда
					
					ОбластьСлайдДетали.Область("Картинка").Картинка = Новый Картинка(ДанныеКартинки);
					
				КонецЕсли;
				
			Иначе
				
				ОбластьСлайдДетали.Область("Картинка").Картинка = БиблиотекаКартинок.ЗапланированнаяИдея;
				
			КонецЕсли;
			
			ОбластьЯчеекСКартинкой = ТабличныйДокумент.Присоединить(ОбластьСлайдДетали);
			ОбластьЯчеекСКартинкой.ШиринаКолонки = НастройкиПрайсЛиста.КартинкаШирина;
			
		Иначе
			
			// :::Картинка
			Если ЗначениеЗаполнено(Строка.Картинка) Тогда
				
				ДанныеКартинки = РаботаСФайлами.ДвоичныеДанныеФайла(Строка.Картинка);
				Если ЗначениеЗаполнено(ДанныеКартинки) Тогда
					
					ОбластьСлайдДетали.Область("Картинка").Картинка = Новый Картинка(ДанныеКартинки);
					
				КонецЕсли;
				
			Иначе
				
				ОбластьСлайдДетали.Область("Картинка").Картинка = БиблиотекаКартинок.ЗапланированнаяИдея;
				
			КонецЕсли;
			
			ТабличныйДокумент.Присоединить(ОбластьОтступВертикальный);
			ОбластьЯчеекСКартинкой = ТабличныйДокумент.Присоединить(ОбластьСлайдДетали);
			ОбластьЯчеекСКартинкой.ШиринаКолонки = НастройкиПрайсЛиста.КартинкаШирина;
			
			Если Колонка = КоличествоКолонок Тогда
				
				Колонка = 0;
				ТабличныйДокумент.Вывести(ОбластьОтступГоризонтальный);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

Процедура ДобавитьЛинииОбласти(ВыделениеОбласти, ЛинияЯчейки)
	
	ВыделениеОбласти.ГраницаСверху = ЛинияЯчейки;
	ВыделениеОбласти.ГраницаСлева = ЛинияЯчейки;
	ВыделениеОбласти.ГраницаСправа = ЛинияЯчейки;
	ВыделениеОбласти.ГраницаСнизу = ЛинияЯчейки;
	
КонецПроцедуры

Функция СоздатьОбластьШапка(НастройкиПрайсЛиста, ТабличныйДокумент, МакетПолотно)
	
	// Старт. Без этого рудимента перестает работать ширина колонок в табличном документе
	ВыделениеОбласти = ТабличныйДокумент.Область(1, 1, 1, 1);
	ВыделениеОбласти.Объединить();
	// Финиш. Без этого рудимента перестает работать ширина колонок в табличном документе
	
	ОбластьШапка	= МакетПолотно.ПолучитьОбласть("Шапка");
	ТаблицаВидовЦен = НастройкиПрайсЛиста.ТаблицаВидовЦен;
	ЛинияЯчейки		= Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	
	НомерКолонки = 1;
	Для каждого Строка Из НастройкиПрайсЛиста.ПредставлениеНоменклатуры Цикл
		
		Если Строка.Использование Тогда
			
			НомерКолонки			= НомерКолонки + 1;
			ВыделениеОбласти		= ОбластьШапка.Область(1, НомерКолонки, 1, НомерКолонки);
			ВыделениеОбласти.Текст	= Строка.РеквизитПредставление;
			ВыделениеОбласти.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			ВыделениеОбласти.Цветфона= ЦветаСтиля.ЦветНедоступногоТекста;
			
			ДобавитьЛинииОбласти(ВыделениеОбласти, ЛинияЯчейки);
			
			ТабличныйДокумент.Область(1, НомерКолонки, 1, НомерКолонки).ШиринаКолонки = Строка.Ширина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоЦен = ТаблицаВидовЦен.Количество();
	Для ИндексЦены = 1 По КоличествоЦен Цикл
		
		ТабличныйДокумент.Область(1, НомерКолонки+1, 1, НомерКолонки+1).ШиринаКолонки = 3; // ед. измерения
		ТабличныйДокумент.Область(1, НомерКолонки+2, 1, НомерКолонки+2).ШиринаКолонки = 7; // цена
		
		ВыделениеОбласти = ОбластьШапка.Область(1, НомерКолонки+1, 1, НомерКолонки+2);
		ВыделениеОбласти.Объединить();
		ВыделениеОбласти.Текст = ?(НастройкиПрайсЛиста.НазваниеЦеныПредставлением, Строка(ТаблицаВидовЦен[ИндексЦены - 1].ТипЦен), НСтр("ru = 'Цена '") + ИндексЦены);
		ВыделениеОбласти.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		ВыделениеОбласти.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		ВыделениеОбласти.Цветфона = ЦветаСтиля.ЦветНедоступногоТекста;
		
		ДобавитьЛинииОбласти(ВыделениеОбласти, ЛинияЯчейки);
		
		НомерКолонки = НомерКолонки + 2;
		
	КонецЦикла;
	
	Возврат ОбластьШапка;
	
КонецФункции

Функция СоздатьОбластьСтрока(НастройкиПрайсЛиста, МакетПолотно)
	
	ОбластьСтрока	= МакетПолотно.ПолучитьОбласть("Строка");
	ТаблицаВидовЦен = НастройкиПрайсЛиста.ТаблицаВидовЦен;
	ЛинияЯчейки		= Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Точечная, 1);
	
	НомерКолонки = 1;
	Для каждого Строка Из НастройкиПрайсЛиста.ПредставлениеНоменклатуры Цикл
		
		Если Строка.Использование Тогда
			
			НомерКолонки				= НомерКолонки + 1;
			ВыделениеОбласти			= ОбластьСтрока.Область(1, НомерКолонки, 1, НомерКолонки);
			ВыделениеОбласти.Заполнение	= ТипЗаполненияОбластиТабличногоДокумента.Параметр;
			ВыделениеОбласти.Параметр	= Строка.РеквизитНоменклатуры;
			ВыделениеОбласти.ПараметрРасшифровки = Строка.ПараметрРасшифровки;
			ВыделениеОбласти.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			
			ДобавитьЛинииОбласти(ВыделениеОбласти, ЛинияЯчейки);
			
			Если Строка.РеквизитНоменклатуры = "Картинка" Тогда
				
				ВыделениеОбласти.Имя = "Картинка";
				ВыделениеОбласти.ВысотаСтроки = НастройкиПрайсЛиста.КартинкаВысота;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоЦен = ТаблицаВидовЦен.Количество();
	Для ИндексаЦены = 1 По КоличествоЦен Цикл
		
		НомерКолонки = НомерКолонки + 1;
		ВыделениеОбласти 			= ОбластьСтрока.Область(1, НомерКолонки, 1, НомерКолонки);
		ВыделениеОбласти.Заполнение	= ТипЗаполненияОбластиТабличногоДокумента.Параметр;
		ВыделениеОбласти.Параметр	= "ЕдиницаЦена_" + Строка(ИндексаЦены);
		ВыделениеОбласти.ПараметрРасшифровки = "СтруктураРасшифровки" + Строка(ИндексаЦены);
		
		ДобавитьЛинииОбласти(ВыделениеОбласти, ЛинияЯчейки);
		
		НомерКолонки = НомерКолонки + 1;
		ВыделениеОбласти 			= ОбластьСтрока.Область(1, НомерКолонки, 1, НомерКолонки);
		ВыделениеОбласти.Заполнение	= ТипЗаполненияОбластиТабличногоДокумента.Параметр;
		ВыделениеОбласти.Параметр	= "Цена_" + Строка(ИндексаЦены);
		ВыделениеОбласти.ПараметрРасшифровки = "СтруктураРасшифровки" + Строка(ИндексаЦены);
		ВыделениеОбласти.Формат		=  "ЧЦ=15; ЧДЦ=2";
		
		ДобавитьЛинииОбласти(ВыделениеОбласти, ЛинияЯчейки);
		
	КонецЦикла;
	
	Возврат ОбластьСтрока;
	
КонецФункции

Процедура ЗаполнитьВВидеПолотноИерархияНоменклатуры(НастройкиПрайсЛиста, ТабличныйДокумент, ДеревоИерархии)
	
	ТабличныйДокумент	= Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ФормированиеПрайсЛистов_Полотно";
	
	ТабличныйДокумент.Область(1, 1, 1, 1).ШиринаКолонки = 2;
	
	МакетПолотно		= ПолучитьМакет("ПФ_MXL_Полотно");
	
	ОбластьЗаголовок	= МакетПолотно.ПолучитьОбласть("Заголовок");
	ОбластьВалюта		= МакетПолотно.ПолучитьОбласть("Валюта");
	ОбластьКИ			= МакетПолотно.ПолучитьОбласть("КИ");
	ОбластьШапка		= СоздатьОбластьШапка(НастройкиПрайсЛиста, ТабличныйДокумент, МакетПолотно);
	ОбластьГруппа		= МакетПолотно.ПолучитьОбласть("Группа");
	ОбластьСтрока		= СоздатьОбластьСтрока(НастройкиПрайсЛиста, МакетПолотно);
	ОбластьФормирование	= МакетПолотно.ПолучитьОбласть("ДатаФормирования");
	ОбластьОписание 	= МакетПолотно.ПолучитьОбласть("Описание");
	
	ЗначенияПараметров	= Новый Структура;
	
	ЗначенияПараметров.Вставить("Заголовок", НастройкиПрайсЛиста.Наименование);
	ОбластьЗаголовок.Параметры.Заполнить(ЗначенияПараметров);
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
			
	ЗначенияПараметров.Очистить();
	ЗначенияПараметров.Вставить("ОписаниеВалюты", НСтр("ru = 'Валюта: '") + НастройкиПрайсЛиста.Валюта);
	Если ЗначениеЗаполнено(НастройкиПрайсЛиста.Валюта) 
		И НастройкиПрайсЛиста.Валюта <> ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
		
		ДатаРасчетаКурсаВалюты = ?(ЗначениеЗаполнено(НастройкиПрайсЛиста.ДатаРасчетаКурсаВалюты), НастройкиПрайсЛиста.ДатаРасчетаКурсаВалюты, ТекущаяДатаСеанса());
		КурсыВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НастройкиПрайсЛиста.Валюта, ДатаРасчетаКурсаВалюты);
		
		ЗначенияПараметров.ОписаниеВалюты = ЗначенияПараметров.ОписаниеВалюты + НСтр("ru = ', курс '") + КурсыВалюты.Курс;
		Если КурсыВалюты.Кратность <> 1 Тогда
			
			ЗначенияПараметров.ОписаниеВалюты = ЗначенияПараметров.ОписаниеВалюты + НСтр("ru = ', кратность '") + КурсыВалюты.Кратность;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбластьВалюта.Параметры.Заполнить(ЗначенияПараметров);
	ТабличныйДокумент.Вывести(ОбластьВалюта);
	
	Если НастройкиПрайсЛиста.ВыводитьКонтактнуюИнформацию Тогда
		
		СведенияОбОрганизации = БухгалтерскийУчетСервер.ПолучитьСведенияОбОрганизации(НастройкиПрайсЛиста.Организация, НастройкиПрайсЛиста.ДатаФормирования);

		ЗначенияПараметров.Очистить();
		ЗначенияПараметров.Вставить("Организация",	НСтр("ru = 'Организация: '") + НастройкиПрайсЛиста.Организация);
		ЗначенияПараметров.Вставить("Адрес", 		НСтр("ru = 'Адрес: '") + СведенияОбОрганизации.АдрФакт);
		ЗначенияПараметров.Вставить("Телефон", 		НСтр("ru = 'Телефон, факс: '") + СведенияОбОрганизации.Тел + ", " + СведенияОбОрганизации.Факс);
		ЗначенияПараметров.Вставить("Email", 		НСтр("ru = 'E-mail: '") + СведенияОбОрганизации.Email);
		
		ОбластьКИ.Параметры.Заполнить(ЗначенияПараметров);
		ТабличныйДокумент.Вывести(ОбластьКИ);
		
	КонецЕсли;
	
	Если НастройкиПрайсЛиста.ВыводитьДатуФормирования Тогда
		
		ЗначенияПараметров.Очистить();
		ДатаФормирования = НСтр("ru = 'Сформирован '") + Формат(НастройкиПрайсЛиста.ДатаФормирования, "ДЛФ=DD");
		ЗначенияПараметров.Вставить("ДатаФормирования", ДатаФормирования);
		ОбластьФормирование.Параметры.Заполнить(ЗначенияПараметров);
		ТабличныйДокумент.Вывести(ОбластьФормирование);
		
	КонецЕсли;
	
	ОбластьШапка.Параметры.Заполнить(ЗначенияПараметров);
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	НастройкиПрайсЛиста.Вставить("ОбластьГруппа", ОбластьГруппа);
	НастройкиПрайсЛиста.Вставить("ОбластьСтрока", ОбластьСтрока);
	ВывестиГруппуВТабличныйДокументПолотно(Неопределено, ДеревоИерархии.Строки, НастройкиПрайсЛиста, ТабличныйДокумент);
	
	Если НастройкиПрайсЛиста.ВыводитьКартинки Тогда
		
		ТабличныйДокумент.Область("C2").ШиринаКолонки = НастройкиПрайсЛиста.КартинкаШирина;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(НастройкиПрайсЛиста.Описание) Тогда
		
		ЗначенияПараметров.Очистить();
		ЗначенияПараметров.Вставить("Описание", НастройкиПрайсЛиста.Описание);
		ОбластьОписание.Параметры.Заполнить(ЗначенияПараметров);
		ТабличныйДокумент.Вывести(ОбластьОписание);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьВВидеДвеКолонкиИерархияНоменклатуры(НастройкиПрайсЛиста, ТабличныйДокумент, ДеревоИерархии)
	
	ТабличныйДокумент	= Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ФормированиеПрайсЛистов_ДвеКолонки";
	
	ТабличныйДокумент.Область(1, 1, 1, 1).ШиринаКолонки = 2;
	
	МакетДвеКолонки		= ПолучитьМакет("ПФ_MXL_ДвеКолонки");
	
	ОбластьЗаголовок	= МакетДвеКолонки.ПолучитьОбласть("Заголовок");
	ОбластьВалюта		= МакетДвеКолонки.ПолучитьОбласть("Валюта");
	ОбластьКИ			= МакетДвеКолонки.ПолучитьОбласть("КИ");
	ОбластьФормирование	= МакетДвеКолонки.ПолучитьОбласть("ДатаФормирования");
	ОбластьШапка		= МакетДвеКолонки.ПолучитьОбласть("Шапка");
	ОбластьГруппа		= МакетДвеКолонки.ПолучитьОбласть("Группа");
	ОбластьСтрока		= МакетДвеКолонки.ПолучитьОбласть("Строка");
	ОбластьОписание		= МакетДвеКолонки.ПолучитьОбласть("Описание");
	
	ЗначенияПараметров	= Новый Структура;
	
	ЗначенияПараметров.Вставить("Заголовок", НастройкиПрайсЛиста.Наименование);
	ОбластьЗаголовок.Параметры.Заполнить(ЗначенияПараметров);
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
	ЗначенияПараметров.Очистить();
	ЗначенияПараметров.Вставить("ОписаниеВалюты", НСтр("ru = 'Валюта: '") + НастройкиПрайсЛиста.Валюта);
	Если ЗначениеЗаполнено(НастройкиПрайсЛиста.Валюта) 
		И НастройкиПрайсЛиста.Валюта <> ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
		
		ДатаРасчетаКурсаВалюты = ?(ЗначениеЗаполнено(НастройкиПрайсЛиста.ДатаРасчетаКурсаВалюты), НастройкиПрайсЛиста.ДатаРасчетаКурсаВалюты, ТекущаяДатаСеанса());
		КурсыВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НастройкиПрайсЛиста.Валюта, ДатаРасчетаКурсаВалюты);
		
		ЗначенияПараметров.ОписаниеВалюты = ЗначенияПараметров.ОписаниеВалюты + НСтр("ru = ', курс '") + КурсыВалюты.Курс;
		Если КурсыВалюты.Кратность <> 1 Тогда
			
			ЗначенияПараметров.ОписаниеВалюты = ЗначенияПараметров.ОписаниеВалюты + НСтр("ru = ', кратность '") + КурсыВалюты.Кратность;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбластьВалюта.Параметры.Заполнить(ЗначенияПараметров);
	ТабличныйДокумент.Вывести(ОбластьВалюта);
	
	Если НастройкиПрайсЛиста.ВыводитьКонтактнуюИнформацию Тогда
		
		СведенияОбОрганизации = БухгалтерскийУчетСервер.ПолучитьСведенияОбОрганизации(НастройкиПрайсЛиста.Организация, НастройкиПрайсЛиста.ДатаФормирования);

		ЗначенияПараметров.Очистить();
		ЗначенияПараметров.Вставить("Организация",	НСтр("ru = 'Организация: '") + НастройкиПрайсЛиста.Организация);
		ЗначенияПараметров.Вставить("Адрес", 		НСтр("ru = 'Адрес: '") + СведенияОбОрганизации.АдрФакт);
		ЗначенияПараметров.Вставить("Телефон", 		НСтр("ru = 'Телефон, факс: '") + СведенияОбОрганизации.Тел + ", " + СведенияОбОрганизации.Факс);
		ЗначенияПараметров.Вставить("Email", 		НСтр("ru = 'E-mail: '") + СведенияОбОрганизации.Email);
		
		ОбластьКИ.Параметры.Заполнить(ЗначенияПараметров);
		ТабличныйДокумент.Вывести(ОбластьКИ);
		
	КонецЕсли;
	
	Если НастройкиПрайсЛиста.ВыводитьДатуФормирования Тогда
		
		ЗначенияПараметров.Очистить();
		ДатаФормирования = НСтр("ru = 'Сформирован '") + Формат(НастройкиПрайсЛиста.ДатаФормирования, "ДЛФ=DD");
		ЗначенияПараметров.Вставить("ДатаФормирования", ДатаФормирования);
		ОбластьФормирование.Параметры.Заполнить(ЗначенияПараметров);
		ТабличныйДокумент.Вывести(ОбластьФормирование);
		
	КонецЕсли;
	
	ЗначенияПараметров.Очистить();
	ЗаголовокЦена = Нстр(" ru='Цена'");
	Если НастройкиПрайсЛиста.НазваниеЦеныПредставлением Тогда
		
		ЗаголовокЦена = Строка(НастройкиПрайсЛиста.ТипЦены);
		
	КонецЕсли;
	ЗначенияПараметров.Вставить("ЗаголовокЦена", ЗаголовокЦена);
	ОбластьШапка.Параметры.Заполнить(ЗначенияПараметров);
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	НастройкиПрайсЛиста.Вставить("ОбластьГруппа", ОбластьГруппа);
	НастройкиПрайсЛиста.Вставить("ОбластьСтрока", ОбластьСтрока);
	ВывестиГруппуВТабличныйДокументДвеКолонки(Неопределено, ДеревоИерархии.Строки, НастройкиПрайсЛиста, ТабличныйДокумент);
	
	Если НЕ ПустаяСтрока(НастройкиПрайсЛиста.Описание) Тогда
		
		ЗначенияПараметров.Очистить();
		ЗначенияПараметров.Вставить("Описание", НастройкиПрайсЛиста.Описание);
		ОбластьОписание.Параметры.Заполнить(ЗначенияПараметров);
		ТабличныйДокумент.Вывести(ОбластьОписание);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьВВидеДиафильмИерархияНоменклатуры(НастройкиПрайсЛиста, ТабличныйДокумент, ДеревоИерархии)
	
	ТабличныйДокумент	= Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ФормированиеПрайсЛистов_Диафильм";
	
	ТабличныйДокумент.Область(1, 1, 1, 1).ШиринаКолонки = 2;
	
	МакетДиафильм			= ПолучитьМакет("ПФ_MXL_Диафильм");
	
	ОбластьЗаголовок		= МакетДиафильм.ПолучитьОбласть("Заголовок");
	ОбластьВалюта			= МакетДиафильм.ПолучитьОбласть("Валюта");
	ОбластьКИ				= МакетДиафильм.ПолучитьОбласть("КИ");
	ОбластьФормирование		= МакетДиафильм.ПолучитьОбласть("ДатаФормирования");
	ОбластьГруппа			= МакетДиафильм.ПолучитьОбласть("Группа");
	
	ОбластьСлайдДетали		= МакетДиафильм.ПолучитьОбласть("Слайд|Детали");
	ОбластьОтступВертикальный = МакетДиафильм.ПолучитьОбласть("ОтступВертикальный|Детали");
	ОбластьОтступГоризонтальный = МакетДиафильм.ПолучитьОбласть("Слайд|ОтступГоризонтальный");
	ОбластьОписание			= МакетДиафильм.ПолучитьОбласть("Описание");
	
	ЗначенияПараметров	= Новый Структура;
	
	ЗначенияПараметров.Вставить("Заголовок", НастройкиПрайсЛиста.Наименование);
	ОбластьЗаголовок.Параметры.Заполнить(ЗначенияПараметров);
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
	ЗначенияПараметров.Очистить();
	ЗначенияПараметров.Вставить("ОписаниеВалюты", НСтр("ru = 'Валюта: '") + НастройкиПрайсЛиста.Валюта);
	Если ЗначениеЗаполнено(НастройкиПрайсЛиста.Валюта) 
		И НастройкиПрайсЛиста.Валюта <> ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
		
		ДатаРасчетаКурсаВалюты = ?(ЗначениеЗаполнено(НастройкиПрайсЛиста.ДатаРасчетаКурсаВалюты), НастройкиПрайсЛиста.ДатаРасчетаКурсаВалюты, ТекущаяДатаСеанса());
		КурсыВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НастройкиПрайсЛиста.Валюта, ДатаРасчетаКурсаВалюты);
		
		ЗначенияПараметров.ОписаниеВалюты = ЗначенияПараметров.ОписаниеВалюты + НСтр("ru = ', курс '") + КурсыВалюты.Курс;
		Если КурсыВалюты.Кратность <> 1 Тогда
			
			ЗначенияПараметров.ОписаниеВалюты = ЗначенияПараметров.ОписаниеВалюты + НСтр("ru = ', кратность '") + КурсыВалюты.Кратность;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбластьВалюта.Параметры.Заполнить(ЗначенияПараметров);
	ТабличныйДокумент.Вывести(ОбластьВалюта);
	
	Если НастройкиПрайсЛиста.ВыводитьКонтактнуюИнформацию Тогда
		
		СведенияОбОрганизации = БухгалтерскийУчетСервер.ПолучитьСведенияОбОрганизации(НастройкиПрайсЛиста.Организация, НастройкиПрайсЛиста.ДатаФормирования);

		ЗначенияПараметров.Очистить();
		ЗначенияПараметров.Вставить("Организация",	НСтр("ru = 'Организация: '") + НастройкиПрайсЛиста.Организация);
		ЗначенияПараметров.Вставить("Адрес", 		НСтр("ru = 'Адрес: '") + СведенияОбОрганизации.АдрФакт);
		ЗначенияПараметров.Вставить("Телефон", 		НСтр("ru = 'Телефон, факс: '") + СведенияОбОрганизации.Тел + ", " + СведенияОбОрганизации.Факс);
		ЗначенияПараметров.Вставить("Email", 		НСтр("ru = 'E-mail: '") + СведенияОбОрганизации.Email);
		
		ОбластьКИ.Параметры.Заполнить(ЗначенияПараметров);
		ТабличныйДокумент.Вывести(ОбластьКИ);
		
	КонецЕсли;
	
	Если НастройкиПрайсЛиста.ВыводитьДатуФормирования Тогда
		
		ЗначенияПараметров.Очистить();
		ДатаФормирования = НСтр("ru = 'Сформирован '") + Формат(НастройкиПрайсЛиста.ДатаФормирования, "ДЛФ=DD");
		ЗначенияПараметров.Вставить("ДатаФормирования", ДатаФормирования);
		ОбластьФормирование.Параметры.Заполнить(ЗначенияПараметров);
		ТабличныйДокумент.Вывести(ОбластьФормирование);
		
	КонецЕсли;
	
	ЗначенияПараметров.Очистить();
	
	НастройкиПрайсЛиста.Вставить("ОбластьГруппа", ОбластьГруппа);
	НастройкиПрайсЛиста.Вставить("ОбластьСлайдДетали", ОбластьСлайдДетали);
	НастройкиПрайсЛиста.Вставить("ОбластьОтступВертикальный", ОбластьОтступВертикальный);
	НастройкиПрайсЛиста.Вставить("ОбластьОтступГоризонтальный", ОбластьОтступГоризонтальный);
	
	ВывестиГруппуВТабличныйДокументДиафильм(Справочники.Номенклатура.ПустаяСсылка(), ДеревоИерархии.Строки, НастройкиПрайсЛиста, ТабличныйДокумент);
	
	Если НЕ ПустаяСтрока(НастройкиПрайсЛиста.Описание) Тогда
		
		ЗначенияПараметров.Очистить();
		ЗначенияПараметров.Вставить("Описание", НастройкиПрайсЛиста.Описание);
		ОбластьОписание.Параметры.Заполнить(ЗначенияПараметров);
		ТабличныйДокумент.Вывести(ОбластьОписание);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыборкаДанных

Процедура ПолучитьЭлементыИИерархиюНоменклатуры(НастройкиПрайсЛиста, ДеревоИерархии)
	
	ДеревоИерархии = Новый ДеревоЗначений;
	
	// 1. Получим СКД
	ИмяСхемыКД = "ИерархияНоменклатуры";
	СхемаКомпоновкиДанных = ПолучитьМакет(ИмяСхемыКД);
	
	// 2. создаем настройки для схемы 
	НастройкиКомпоновкиДанных = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	// 2.1 установим значения параметров
	ПараметрКД = СхемаКомпоновкиДанных.Параметры.Найти("МассивВидовЦен");
	
	Если НастройкиПрайсЛиста.ПечатьПрайсЛиста = Перечисления.ВариантыПечатиПрайсЛиста.Полотно Тогда
		ПараметрКД.Значение = НастройкиПрайсЛиста.ТаблицаВидовЦен.ВыгрузитьКолонку("ТипЦен");
	Иначе
		Массив = Новый Массив();
		Массив.Добавить(НастройкиПрайсЛиста.ТипЦены);
		ПараметрКД.Значение = Массив;
	КонецЕсли;	
	
	ПараметрКД = СхемаКомпоновкиДанных.Параметры.Найти("ПрайсЛист");
	ПараметрКД.Значение = НастройкиПрайсЛиста.ПрайсЛист;
	
	ПараметрКД = СхемаКомпоновкиДанных.Параметры.Найти("Период");
	ПараметрКД.Значение = НастройкиПрайсЛиста.ДатаФормирования;
	
	ПараметрКД = СхемаКомпоновкиДанных.Параметры.Найти("Организация");
	ПараметрКД.Значение = НастройкиПрайсЛиста.Организация;
	
	Если НастройкиПрайсЛиста.Номенклатура.Количество() > 0 Тогда
		
		ПараметрКД = СхемаКомпоновкиДанных.Параметры.Найти("МассивПапок");
		ПараметрКД.Значение = НастройкиПрайсЛиста.Номенклатура;
		
	Иначе
		
		ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Запрос;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И СпрНоменклатура.Ссылка В ИЕРАРХИИ(&МассивПапок)", "");
		СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Запрос = ТекстЗапроса;
		
	КонецЕсли;
	
	Если НастройкиПрайсЛиста.ВыводитьНоменклатуруБезЦен Тогда
		
		ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Запрос;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЕстьЗаписиСЦенами.ЕстьЗаписи", "Истина");
		СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Запрос = ТекстЗапроса;
		
	КонецЕсли;
	
	// 2.2 установим значения отборов
	Если НастройкиПрайсЛиста.ФормироватьПоНаличию Тогда
		
		НастройкиКомпоновкиДанных.Отбор.Элементы.Получить(0).Использование = Истина;
		
	КонецЕсли;
	
	// 3. готовим макет 
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// 4. исполняем макет 
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет);
	ПроцессорКомпоновки.Сбросить();
	
	// 5. выводим результат 
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ДеревоИерархии);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПолучитьТаблицуЦен(НастройкиПрайсЛиста, ТаблицаЦен)
	
	Валюта = НастройкиПрайсЛиста.Валюта;
	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		
		Валюта = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		
	КонецЕсли;
	
	ДатаРасчетаКурсаВалюты = НастройкиПрайсЛиста.ДатаРасчетаКурсаВалюты;
	Если НЕ ЗначениеЗаполнено(ДатаРасчетаКурсаВалюты) Тогда
		
		ДатаРасчетаКурсаВалюты = ТекущаяДатаСеанса();
		
	КонецЕсли;
	
	ДанныеКурсаВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, ДатаРасчетаКурсаВалюты);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РСЦены.ТипЦен КАК ТипЦен,
	|	РСЦены.Номенклатура КАК НоменклатураСсылка,
	|	"""" КАК Характеристика,
	|	РСЦены.ТипЦен.ПорядокОкругления КАК ПорядокОкругления,
	|	РСЦены.ТипЦен.ОкруглятьВБольшуюСторону КАК ОкруглятьВБольшуюСторону,
	|	ВЫБОР
	|		КОГДА РСЦены.Валюта = &Валюта
	|			ТОГДА РСЦены.Цена
	|		ИНАЧЕ ЕСТЬNULL(РСЦены.Цена * КурсВалютыВидаЦен.Курс * &КратностьВалютыПЛ / (&КурсВалютыПЛ * КурсВалютыВидаЦен.Кратность), 0)
	|	КОНЕЦ КАК Цена,
	|	РСЦены.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ТипЦен В (&МассивВидовЦен)) КАК РСЦены
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаРасчетаКурсаВалюты, ) КАК КурсВалютыВидаЦен
	|		ПО РСЦены.Валюта = КурсВалютыВидаЦен.Валюта";
	
	Если НастройкиПрайсЛиста.ПечатьПрайсЛиста = Перечисления.ВариантыПечатиПрайсЛиста.Полотно Тогда
		Запрос.УстановитьПараметр("МассивВидовЦен",	НастройкиПрайсЛиста.ТаблицаВидовЦен.ВыгрузитьКолонку("ТипЦен"));
	Иначе
		Массив = Новый Массив();
		Массив.Добавить(НастройкиПрайсЛиста.ТипЦены);
		Запрос.УстановитьПараметр("МассивВидовЦен",	Массив);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаРасчетаКурсаВалюты", ДатаРасчетаКурсаВалюты);
	Запрос.УстановитьПараметр("Валюта", 			Валюта);
	Запрос.УстановитьПараметр("КурсВалютыПЛ",		ДанныеКурсаВалюты.Курс);
	Запрос.УстановитьПараметр("КратностьВалютыПЛ",	ДанныеКурсаВалюты.Кратность);
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокумент(НастройкиПрайсЛиста, ТабличныйДокумент, ДеревоИерархии)
	
	Если НастройкиПрайсЛиста.ПечатьПрайсЛиста = Перечисления.ВариантыПечатиПрайсЛиста.Полотно Тогда
		
		ЗаполнитьВВидеПолотноИерархияНоменклатуры(НастройкиПрайсЛиста, ТабличныйДокумент, ДеревоИерархии);
		
	ИначеЕсли НастройкиПрайсЛиста.ПечатьПрайсЛиста = Перечисления.ВариантыПечатиПрайсЛиста.ДвеКолонки Тогда
		
		ЗаполнитьВВидеДвеКолонкиИерархияНоменклатуры(НастройкиПрайсЛиста, ТабличныйДокумент, ДеревоИерархии);
		
	ИначеЕсли НастройкиПрайсЛиста.ПечатьПрайсЛиста = Перечисления.ВариантыПечатиПрайсЛиста.Диафильм Тогда
		
		ЗаполнитьВВидеДиафильмИерархияНоменклатуры(НастройкиПрайсЛиста, ТабличныйДокумент, ДеревоИерархии);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПЛ(СтруктураПараметров, ФоновоеЗаданиеАдресХранилища = "") Экспорт
	Перем ПрайсЛист, НастройкиПрайсЛиста;
	
	Если НЕ СтруктураПараметров.Свойство("ПрайсЛист", ПрайсЛист) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПрочитатьНастройкиПрайсЛиста(ПрайсЛист, НастройкиПрайсЛиста);
	ПостроитьПрайсЛист(НастройкиПрайсЛиста, ТабличныйДокумент);
	ПоместитьВоВременноеХранилище(ТабличныйДокумент, ФоновоеЗаданиеАдресХранилища);
	
КонецПроцедуры

Процедура ПрочитатьНастройкиПрайсЛиста(ПрайсЛист, НастройкиПрайсЛиста)
	
	НастройкиПрайсЛиста = Новый Структура;
	НастройкиПрайсЛиста.Вставить("ПрайсЛист",					 ПрайсЛист.Ссылка);
	НастройкиПрайсЛиста.Вставить("Наименование",				 ПрайсЛист.Наименование);
	НастройкиПрайсЛиста.Вставить("ПечатьПрайсЛиста",			 ПрайсЛист.ПечатьПрайсЛиста);
	НастройкиПрайсЛиста.Вставить("Валюта",						 ПрайсЛист.Валюта);
	НастройкиПрайсЛиста.Вставить("ДатаРасчетаКурсаВалюты",		 ПрайсЛист.ДатаРасчетаКурсаВалюты);
	НастройкиПрайсЛиста.Вставить("Организация",					 ПрайсЛист.Организация);
	НастройкиПрайсЛиста.Вставить("Номенклатура",				 ПрайсЛист.Номенклатура.ВыгрузитьКолонку("Номенклатура"));
	НастройкиПрайсЛиста.Вставить("ПредставлениеНоменклатуры", 	 ПрайсЛист.ПредставлениеНоменклатуры);
	НастройкиПрайсЛиста.Вставить("ВыводитьКонтактнуюИнформацию", ПрайсЛист.ВыводитьКонтактнуюИнформацию);
	НастройкиПрайсЛиста.Вставить("НазваниеЦеныПредставлением", 	 ПрайсЛист.НазваниеЦеныПредставлением);
	НастройкиПрайсЛиста.Вставить("ТипЦены", 					 ПрайсЛист.ТипЦены);
	Если ПрайсЛист.ТипыЦен.Количество() = 0 Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ 0 КАК НомерСтроки, ТипыЦен.Ссылка КАК ТипЦен ИЗ Справочник.ТипыЦенНоменклатуры КАК ТипыЦен");
		НастройкиПрайсЛиста.Вставить("ТаблицаВидовЦен", Запрос.Выполнить().Выгрузить());
		
		Для Счетчик = 1 По НастройкиПрайсЛиста.ТаблицаВидовЦен.Количество() Цикл
			
			НастройкиПрайсЛиста.ТаблицаВидовЦен[Счетчик - 1].НомерСтроки = Счетчик;
			
		КонецЦикла;
		
	Иначе
		
		НастройкиПрайсЛиста.Вставить("ТаблицаВидовЦен", ПрайсЛист.ТипыЦен.Выгрузить());
		
	КонецЕсли;
	
	НастройкиПрайсЛиста.Вставить("ФормироватьПоНаличию", ПрайсЛист.ФормироватьПоНаличию);
	НастройкиПрайсЛиста.Вставить("ВыводитьНоменклатуруБезЦен", ПрайсЛист.ВыводитьНоменклатуруБезЦен);
	
	ВыводитьКартинки = (ПрайсЛист.ПредставлениеНоменклатуры.НайтиСтроки(Новый Структура("Использование, РеквизитНоменклатуры", Истина, "Картинка")).Количество() > 0);
	НастройкиПрайсЛиста.Вставить("ВыводитьКартинки", ВыводитьКартинки);
	
	СвободныйОстаток = (ПрайсЛист.ПредставлениеНоменклатуры.НайтиСтроки(Новый Структура("Использование, РеквизитНоменклатуры", Истина, "СвободныйОстаток")).Количество() > 0);
	НастройкиПрайсЛиста.Вставить("СвободныйОстаток", 		СвободныйОстаток);
	НастройкиПрайсЛиста.Вставить("ВыводитьДатуФормирования",ПрайсЛист.ВыводитьДатуФормирования);
	НастройкиПрайсЛиста.Вставить("ДатаФормирования",		?(ЗначениеЗаполнено(ПрайсЛист.ДатаФормирования), ПрайсЛист.ДатаФормирования, ТекущаяДатаСеанса()));
	НастройкиПрайсЛиста.Вставить("Описание",				ПрайсЛист.Описание);
	НастройкиПрайсЛиста.Вставить("КоличествоКолонок",		ПрайсЛист.КоличествоКолонок);
	НастройкиПрайсЛиста.Вставить("КартинкаШирина",			ПрайсЛист.КартинкаШирина);
	НастройкиПрайсЛиста.Вставить("КартинкаВысота",			ПрайсЛист.КартинкаВысота);
	
КонецПроцедуры

Процедура ТранспонированиеТаблиц(НастройкиПрайсЛиста, ДеревоИерархии, ТаблицаЦен) 
	
	ИменаКолонок	= Новый Соответствие;
	
	Если НастройкиПрайсЛиста.ПечатьПрайсЛиста = Перечисления.ВариантыПечатиПрайсЛиста.Полотно Тогда
		ТаблицаВидовЦен = НастройкиПрайсЛиста.ТаблицаВидовЦен;
		
		РазмерТаблицы 	= ТаблицаВидовЦен.Количество();
		Для ИндексСтроки = 1 По РазмерТаблицы Цикл
			
			Строка = ТаблицаВидовЦен[ИндексСтроки - 1];
			
			НоваяКолонка = ДеревоИерархии.Колонки.Добавить("Цена_" + ИндексСтроки);
			НоваяКолонка.Заголовок = Строка.ТипЦен.Наименование;
			
			НоваяКолонка = ДеревоИерархии.Колонки.Добавить("ЕдиницаЦена_" + ИндексСтроки);
			
			ИменаКолонок.Вставить(Строка.ТипЦен.Ссылка, "Цена_" + ИндексСтроки);
			
		КонецЦикла;
		
	Иначе
		НоваяКолонка = ДеревоИерархии.Колонки.Добавить("Цена_1");
		НоваяКолонка.Заголовок = НастройкиПрайсЛиста.ТипЦены.Наименование;
			
		НоваяКолонка = ДеревоИерархии.Колонки.Добавить("ЕдиницаЦена_1");
			
		ИменаКолонок.Вставить(НастройкиПрайсЛиста.ТипЦены.Ссылка, "Цена_1");			
	КонецЕсли;
			
	ОтборПоТаблице = Новый Структура;
	
	Для каждого Строка Из ТаблицаЦен Цикл
		
		ОтборПоТаблице.Очистить();
		ОтборПоТаблице.Вставить("НоменклатураСсылка", Строка.НоменклатураСсылка);
		
		РезультатПоиска = ДеревоИерархии.Строки.НайтиСтроки(ОтборПоТаблице, Истина);
		Если РезультатПоиска.Количество() > 0 Тогда
			
			РезультатПоиска[0][ИменаКолонок[Строка.ТипЦен.Ссылка]] = Ценообразование.ОкруглитьЦену(Строка.Цена, Строка.ПорядокОкругления, Строка.ОкруглятьВБольшуюСторону);
			РезультатПоиска[0]["Единица" + ИменаКолонок[Строка.ТипЦен.Ссылка]] = Строка.ЕдиницаИзмерения;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПостроитьПрайсЛист(НастройкиПрайсЛиста, ТабличныйДокумент)
	Перем ДеревоИерархии, ТаблицаЦен;
	
	ПолучитьЭлементыИИерархиюНоменклатуры(НастройкиПрайсЛиста, ДеревоИерархии);
	ПолучитьТаблицуЦен(НастройкиПрайсЛиста, ТаблицаЦен);
	ТранспонированиеТаблиц(НастройкиПрайсЛиста, ДеревоИерархии, ТаблицаЦен);
	
	ЗаполнитьТабличныйДокумент(НастройкиПрайсЛиста, ТабличныйДокумент, ДеревоИерархии);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли