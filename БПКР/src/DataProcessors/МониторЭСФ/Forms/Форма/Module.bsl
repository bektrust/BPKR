
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Объект.Организация.Пустая() Тогда 
		Объект.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Объект.НачалоПериода) Тогда 
		Объект.НачалоПериода = НачалоМесяца(ТекущаяДатаСеанса());	
		Объект.КонецПериода = КонецМесяца(Объект.НачалоПериода);	
	КонецЕсли;
	
	Элементы.ФормаИзменитьВидимостьСпискаГруппКонтрагентов.Пометка = Истина;
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	
	ЗаполнитьТаблицуКонтрагенты();
	ЗаполнитьТаблицуДокументы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("ПодключаемыйЗаполнитьТаблицуДокументы", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("ПодключаемыйЗаполнитьТаблицуДокументы", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	//УстановитьОтборДоговоров();
	ПодключитьОбработчикОжидания("ПодключаемыйЗаполнитьТаблицуДокументы", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВидЭСФПриИзменении(Элемент)
	
	УстановитьВидимостьДоступностьЭлементов();

	ПодключитьОбработчикОжидания("ПодключаемыйЗаполнитьТаблицуКонтрагенты", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭСФПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("ПодключаемыйЗаполнитьТаблицуДокументы", 0.1, Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицФормы

&НаКлиенте
Процедура СписокГруппКонтрагентовИерархияПриАктивизацииСтроки(Элемент)

	ОпределитьТекущуюГруппу();	
	ПодключитьОбработчикОжидания("ПодключаемыйЗаполнитьТаблицуКонтрагенты", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКонтрагентыПометкаПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("ПодключаемыйЗаполнитьТаблицуДокументы", 0.1, Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", Объект.НачалоПериода, Объект.КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидимостьСпискаГруппКонтрагентов(Команда)
	
	Элементы.ФормаИзменитьВидимостьСпискаГруппКонтрагентов.Пометка = НЕ Элементы.ФормаИзменитьВидимостьСпискаГруппКонтрагентов.Пометка;

	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	
	ОпределитьТекущуюГруппу();

	ПодключитьОбработчикОжидания("ПодключаемыйЗаполнитьТаблицуКонтрагенты", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиТаблицаКонтрагенты(Команда)
	
	УстановкаСнятиеФлажков("ТаблицаКонтрагенты", Ложь);
	ПодключитьОбработчикОжидания("ПодключаемыйЗаполнитьТаблицуДокументы", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиТаблицаКонтрагенты(Команда)
	
	УстановкаСнятиеФлажков("ТаблицаКонтрагенты", Истина);
	ПодключитьОбработчикОжидания("ПодключаемыйЗаполнитьТаблицуДокументы", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиТаблицаДокументы(Команда)
	
	УстановкаСнятиеФлажков("ТаблицаДокументыБезЭСФ", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиТаблицаДокументы(Команда)
	
	УстановкаСнятиеФлажков("ТаблицаДокументыБезЭСФ", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиТаблицаДокументыСЭСФ(Команда)
	
	УстановкаСнятиеФлажков("ТаблицаДокументыСЭСФ", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиТаблицаДокументыСЭСФ(Команда)
	
	УстановкаСнятиеФлажков("ТаблицаДокументыСЭСФ", Истина);
	
КонецПроцедуры

//&НаКлиенте
//Процедура СнятьФлажкиТаблицаДокументыЭСФ(Команда)
//	
//	УстановкаСнятиеФлажков("ТаблицаДокументыЭСФ", Ложь);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура УстановитьФлажкиТаблицаДокументыЭСФ(Команда)
//	
//	УстановкаСнятиеФлажков("ТаблицаДокументыЭСФ", Истина);
//	
//КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭСФ(Команда)
	
	Отказ = Ложь;
	
	МассивСсылок = Новый Массив;
	Для Каждого СтрокаТабличнойЧасти Из Объект.ТаблицаДокументыБезЭСФ Цикл 
		Если СтрокаТабличнойЧасти.Пометка Тогда 
			МассивСсылок.Добавить(СтрокаТабличнойЧасти.Документ);
		КонецЕсли;	
	КонецЦикла;		
	
	Если МассивСсылок.Количество() = 0 Тогда 
		ТекстСообщения = НСтр("ru = 'Не выбраны документы для создания ЭСФ.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.ТаблицаДокументыБезЭСФ",, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросСоздатьЭСФ", ЭтотОбъект, Новый Структура("МассивСсылок", МассивСсылок));
	ТекстВопроса = НСтр("ru = 'Будут созданы документы ЭСФ. Продолжить?'");

	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВЭлектроннойФорме(Команда)
	
	Отказ = Ложь;
	
	МассивСсылок = Новый Массив;
	Для Каждого СтрокаТабличнойЧасти Из Объект.ТаблицаДокументыСЭСФ Цикл 
		Если СтрокаТабличнойЧасти.Пометка Тогда 
			МассивСсылок.Добавить(СтрокаТабличнойЧасти.ДокументЭСФ);
		КонецЕсли;	
	КонецЦикла;		
	
	Если МассивСсылок.Количество() = 0 Тогда 
		ТекстСообщения = НСтр("ru = 'Не выбраны документы для сохранения в файл.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.ТаблицаДокументыСЭСФ",, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ТребуетсяНастройкаАвторизацияИнтернетПоддержки() Тогда
		ТекстВопроса = НСтр("ru='Для сохранения документа в электронной форме
			|необходимо подключиться к Интернет-поддержке пользователей.
			|Подключиться сейчас?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриПодключенииИнтернетПоддержки", ЭтотОбъект, Новый Структура("МассивСсылок", МассивСсылок));
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Подключиться'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
	Иначе
		ПродолжитьСохранение(МассивСсылок);
	КонецЕсли;
КонецПроцедуры

//&НаКлиенте
//Процедура СоздатьНаОснованииПоступлениеТоваровУслуг(Команда)
//	Отказ = Ложь;
//	
//	МассивСсылок = Новый Массив;
//	Для Каждого СтрокаТабличнойЧасти Из Объект.ТаблицаДокументыЭСФ Цикл 
//		Если СтрокаТабличнойЧасти.Пометка Тогда 
//			МассивСсылок.Добавить(СтрокаТабличнойЧасти.ДокументЭСФ);
//		КонецЕсли;	
//	КонецЦикла;		
//	
//	Если МассивСсылок.Количество() = 0 Тогда 
//		ТекстСообщения = НСтр("ru = 'Не выбраны документы для создания документов на основании.'");
//		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.ТаблицаДокументыЭСФ",, Отказ);
//	КонецЕсли;
//	
//	Если Отказ Тогда 
//		Возврат;
//	КонецЕсли;	
//	
//	ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросСоздатьНаОснованииПоступлениеТоваровУслуг", ЭтотОбъект, Новый Структура("МассивСсылок", МассивСсылок));
//	ТекстВопроса = НСтр("ru = 'Будут созданы документы ""Поступления товаров и услуг"" на основании выбранных документов ЭСФ. Продолжить?'");

//	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
//КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;                                       
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, РезультатВыбора, "НачалоПериода,КонецПериода");
	ПодключитьОбработчикОжидания("ПодключаемыйЗаполнитьТаблицуКонтрагенты", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветНаВопросСоздатьЭСФ(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Прогресс = 0;
		Шаг = 100 / ДополнительныеПараметры.МассивСсылок.Количество();
		Для Каждого Документ Из ДополнительныеПараметры.МассивСсылок Цикл 
			Состояние(НСтр("ru = 'Обработка ЭСФ'"), Прогресс, Документ); 
			СоздатьЭСФНаСервере(Документ);			
			Прогресс = Прогресс + Шаг;
		КонецЦикла;
		
		Состояние(НСтр("ru = 'Обработка ЭСФ'"), Прогресс); 

		ПодключитьОбработчикОжидания("ПодключаемыйЗаполнитьТаблицуДокументы", 0.1, Истина);
		
		ТекстОповещения = НСтр("ru = 'Обработка ЭСФ'");
		ТекстПояснения = НСтр("ru = 'Документы ЭСФ сформированы'");
		ПоказатьОповещениеПользователя(
			ТекстОповещения,
			, 
			ТекстПояснения, 
			БиблиотекаКартинок.Успешно32);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветНаВопросСоздатьНаОснованииПоступлениеТоваровУслуг(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Прогресс = 0;
		Шаг = 100 / ДополнительныеПараметры.МассивСсылок.Количество();
		Для Каждого Документ Из ДополнительныеПараметры.МассивСсылок Цикл 
			Состояние(НСтр("ru = 'Обработка ЭСФ'"), Прогресс, Документ); 
			СоздатьНаОснованииПоступлениеТоваровУслугНаСервере(Документ);			
			Прогресс = Прогресс + Шаг;
		КонецЦикла;
		
		Состояние(НСтр("ru = 'Обработка ЭСФ'"), Прогресс); 

		ПодключитьОбработчикОжидания("ПодключаемыйЗаполнитьТаблицуДокументы", 0.1, Истина);
		
		ТекстОповещения = НСтр("ru = 'Обработка ЭСФ'");
		ТекстПояснения = НСтр("ru = 'Документы на основании сформированы'");
		ПоказатьОповещениеПользователя(
			ТекстОповещения,
			, 
			ТекстПояснения, 
			БиблиотекаКартинок.Успешно32);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПроводник(ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ПолноеИмяФайла) Тогда 
		ФайловаяСистемаКлиент.ОткрытьПроводник(ДополнительныеПараметры.ПолноеИмяФайла);
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
// Процедура устанавливает видимость и доступность элементов.
//
Процедура УстановитьВидимостьДоступностьЭлементов()
	
	Если Объект.ВидЭСФ = 0 Тогда 
		Элементы.ТаблицаДокументыСЭСФСохранитьВЭлектроннойФорме.Видимость = Истина;
		Элементы.ТаблицаДокументыСЭСФПометка.Видимость = Истина;
		//Элементы.ТаблицаДокументыЭСФ.Видимость = Ложь;
	Иначе 
		Элементы.ТаблицаДокументыСЭСФСохранитьВЭлектроннойФорме.Видимость = Ложь;
		Элементы.ТаблицаДокументыСЭСФПометка.Видимость = Ложь;
		//Элементы.ТаблицаДокументыЭСФ.Видимость = Истина;
	КонецЕсли;	
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокГруппКонтрагентовИерархия", "Видимость", Элементы.ФормаИзменитьВидимостьСпискаГруппКонтрагентов.Пометка);
КонецПроцедуры // УстановитьВидимостьДоступностьЭлементов()

&НаКлиенте
Процедура ОпределитьТекущуюГруппу()

	СтрокаТабличнойЧасти = Элементы.СписокГруппКонтрагентовИерархия.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		ТекущаяГруппа = Неопределено;
	Иначе 	
		ТекущаяГруппа = СтрокаТабличнойЧасти.Ссылка;
	КонецЕсли;

КонецПроцедуры // ОпределитьТекущуюГруппу()

&НаКлиенте
Процедура УстановкаСнятиеФлажков(ИмяТаблицы, Установка)
	Для Каждого СтрокаТабличнойЧасти Из Объект[ИмяТаблицы] Цикл		
		СтрокаТабличнойЧасти.Пометка = Установка;	
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПодключаемыйЗаполнитьТаблицуКонтрагенты()
	
	Объект.ТаблицаКонтрагенты.Очистить();
	ЗаполнитьТаблицуКонтрагенты();                                                     	
	
	ПодключитьОбработчикОжидания("ПодключаемыйЗаполнитьТаблицуДокументы", 0.1, Истина);
	
КонецПроцедуры // ПодключаемыйЗаполнитьТаблицуКонтрагенты()

&НаКлиенте
Процедура ПодключаемыйЗаполнитьТаблицуДокументы()
	Объект.ТаблицаДокументыБезЭСФ.Очистить();
	Объект.ТаблицаДокументыСЭСФ.Очистить();
	ЗаполнитьТаблицуДокументы();
КонецПроцедуры // ПодключаемыйЗаполнитьТаблицуДокументы()

&НаСервере
Процедура ЗаполнитьТаблицуКонтрагенты()

	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Контрагент
		|ПОМЕСТИТЬ ВременнаяТаблицаКонтрагенты
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка В ИЕРАРХИИ(&ТекущаяГруппа)
		|	И НЕ Контрагенты.ЭтоГруппа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Субконто1 КАК Контрагент,
		|	ХозрасчетныйОбороты.Субконто2 КАК ДоговорКонтрагента
		|ПОМЕСТИТЬ ВременнаяТаблицаДанныеУчета
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			,
		|			&ВидыСубконто,
		|			Организация = &Организация
		|				И Субконто1 В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаКонтрагенты.Контрагент КАК Контрагент
		|					ИЗ
		|						ВременнаяТаблицаКонтрагенты КАК ВременнаяТаблицаКонтрагенты),
		|			,
		|			) КАК ХозрасчетныйОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВременнаяТаблицаДанныеУчета.Контрагент КАК Контрагент
		|ИЗ
		|	ВременнаяТаблицаДанныеУчета КАК ВременнаяТаблицаДанныеУчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВременнаяТаблицаДанныеУчета.Контрагент КАК Контрагент,
		|	ВременнаяТаблицаДанныеУчета.ДоговорКонтрагента КАК ДоговорКонтрагента
		|ИЗ
		|	ВременнаяТаблицаДанныеУчета КАК ВременнаяТаблицаДанныеУчета";
	
	Если Не ЗначениеЗаполнено(ТекущаяГруппа) Тогда 
		 ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Контрагенты.Ссылка В ИЕРАРХИИ(&ТекущаяГруппа)", "Истина");	  
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТекущаяГруппа", ТекущаяГруппа);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", Объект.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Объект.КонецПериода));
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Контрагент.
	Если НЕ МассивРезультатов[2].Пустой() Тогда 
		Объект.ТаблицаКонтрагенты.Загрузить(МассивРезультатов[2].Выгрузить());
	КонецЕсли;	
	
КонецПроцедуры // ЗаполнитьТаблицуКонтрагенты()

&НаСервере
Процедура ЗаполнитьТаблицуДокументы()

	// 1. Все документы
	// 2. Документы без ЭСФ
	// 3. Документы с ЭСФ
	// 4. Документы ЭСФ без основания
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Организация КАК Организация,
		|	РеализацияТоваровУслуг.Ссылка КАК Документ,
		|	РеализацияТоваровУслуг.ДокументОснование КАК ДокументОснование,
		|	ДанныеПервичныхДокументов.Дата КАК ДатаДокумента,
		|	ДанныеПервичныхДокументов.СуммаДокумента КАК СуммаДокумента,
		|	ДанныеПервичныхДокументов.ВалютаДокумента КАК ВалютаДокумента
		|ПОМЕСТИТЬ ВременнаяТаблицаДокументы
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
		|		ПО РеализацияТоваровУслуг.Организация = ДанныеПервичныхДокументов.Организация
		|			И РеализацияТоваровУслуг.Ссылка = ДанныеПервичныхДокументов.Документ
		|ГДЕ
		|	&ВидЭСФ = 0
		|	И РеализацияТоваровУслуг.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И РеализацияТоваровУслуг.Контрагент В(&МассивКонтрагентов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВозвратТоваровОтПокупателя.Организация,
		|	ВозвратТоваровОтПокупателя.Ссылка,
		|	ВозвратТоваровОтПокупателя.ДокументОснование,
		|	ДанныеПервичныхДокументов.Дата,
		|	ДанныеПервичныхДокументов.СуммаДокумента,
		|	ДанныеПервичныхДокументов.ВалютаДокумента
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
		|		ПО ВозвратТоваровОтПокупателя.Организация = ДанныеПервичныхДокументов.Организация
		|			И ВозвратТоваровОтПокупателя.Ссылка = ДанныеПервичныхДокументов.Документ
		|ГДЕ
		|	&ВидЭСФ = 0
		|	И ВозвратТоваровОтПокупателя.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ВозвратТоваровОтПокупателя.Контрагент В(&МассивКонтрагентов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияУслугПоПереработке.Организация,
		|	РеализацияУслугПоПереработке.Ссылка,
		|	НЕОПРЕДЕЛЕНО,
		|	ДанныеПервичныхДокументов.Дата,
		|	ДанныеПервичныхДокументов.СуммаДокумента,
		|	ДанныеПервичныхДокументов.ВалютаДокумента
		|ИЗ
		|	Документ.РеализацияУслугПоПереработке КАК РеализацияУслугПоПереработке
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
		|		ПО РеализацияУслугПоПереработке.Организация = ДанныеПервичныхДокументов.Организация
		|			И РеализацияУслугПоПереработке.Ссылка = ДанныеПервичныхДокументов.Документ
		|ГДЕ
		|	&ВидЭСФ = 0
		|	И РеализацияУслугПоПереработке.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И РеализацияУслугПоПереработке.Контрагент В(&МассивКонтрагентов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	АктОбОказанииПроизводственныхУслуг.Организация,
		|	АктОбОказанииПроизводственныхУслуг.Ссылка,
		|	НЕОПРЕДЕЛЕНО,
		|	ДанныеПервичныхДокументов.Дата,
		|	ДанныеПервичныхДокументов.СуммаДокумента,
		|	ДанныеПервичныхДокументов.ВалютаДокумента
		|ИЗ
		|	Документ.АктОбОказанииПроизводственныхУслуг КАК АктОбОказанииПроизводственныхУслуг
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
		|		ПО АктОбОказанииПроизводственныхУслуг.Организация = ДанныеПервичныхДокументов.Организация
		|			И АктОбОказанииПроизводственныхУслуг.Ссылка = ДанныеПервичныхДокументов.Документ
		|ГДЕ
		|	&ВидЭСФ = 0
		|	И АктОбОказанииПроизводственныхУслуг.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И АктОбОказанииПроизводственныхУслуг.Контрагент В(&МассивКонтрагентов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КорректировкаСтоимостиРеализации.Организация,
		|	КорректировкаСтоимостиРеализации.Ссылка,
		|	КорректировкаСтоимостиРеализации.ДокументОснование,
		|	ДанныеПервичныхДокументов.Дата,
		|	ДанныеПервичныхДокументов.СуммаДокумента,
		|	ДанныеПервичныхДокументов.ВалютаДокумента
		|ИЗ
		|	Документ.КорректировкаСтоимостиРеализации КАК КорректировкаСтоимостиРеализации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
		|		ПО КорректировкаСтоимостиРеализации.Организация = ДанныеПервичныхДокументов.Организация
		|			И КорректировкаСтоимостиРеализации.Ссылка = ДанныеПервичныхДокументов.Документ
		|ГДЕ
		|	&ВидЭСФ = 0
		|	И КорректировкаСтоимостиРеализации.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И КорректировкаСтоимостиРеализации.Контрагент В(&МассивКонтрагентов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.Организация,
		|	ПоступлениеТоваровУслуг.Ссылка,
		|	ПоступлениеТоваровУслуг.ДокументОснование,
		|	ДанныеПервичныхДокументов.Дата,
		|	ДанныеПервичныхДокументов.СуммаДокумента,
		|	ДанныеПервичныхДокументов.ВалютаДокумента
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
		|		ПО ПоступлениеТоваровУслуг.Организация = ДанныеПервичныхДокументов.Организация
		|			И ПоступлениеТоваровУслуг.Ссылка = ДанныеПервичныхДокументов.Документ
		|ГДЕ
		|	&ВидЭСФ = 1
		|	И ПоступлениеТоваровУслуг.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ПоступлениеТоваровУслуг.Контрагент В(&МассивКонтрагентов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВозвратТоваровПоставщику.Организация,
		|	ВозвратТоваровПоставщику.Ссылка,
		|	ВозвратТоваровПоставщику.ДокументОснование,
		|	ДанныеПервичныхДокументов.Дата,
		|	ДанныеПервичныхДокументов.СуммаДокумента,
		|	ДанныеПервичныхДокументов.ВалютаДокумента
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
		|		ПО ВозвратТоваровПоставщику.Организация = ДанныеПервичныхДокументов.Организация
		|			И ВозвратТоваровПоставщику.Ссылка = ДанныеПервичныхДокументов.Документ
		|ГДЕ
		|	&ВидЭСФ = 1
		|	И ВозвратТоваровПоставщику.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ВозвратТоваровПоставщику.Контрагент В(&МассивКонтрагентов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДополнительныеРасходы.Организация,
		|	ДополнительныеРасходы.Ссылка,
		|	ДополнительныеРасходы.ДокументОснование,
		|	ДанныеПервичныхДокументов.Дата,
		|	ДанныеПервичныхДокументов.СуммаДокумента,
		|	ДанныеПервичныхДокументов.ВалютаДокумента
		|ИЗ
		|	Документ.ДополнительныеРасходы КАК ДополнительныеРасходы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
		|		ПО ДополнительныеРасходы.Организация = ДанныеПервичныхДокументов.Организация
		|			И ДополнительныеРасходы.Ссылка = ДанныеПервичныхДокументов.Документ
		|ГДЕ
		|	&ВидЭСФ = 1
		|	И ДополнительныеРасходы.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ДополнительныеРасходы.Контрагент В(&МассивКонтрагентов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КорректировкаСтоимостиПоступления.Организация,
		|	КорректировкаСтоимостиПоступления.Ссылка,
		|	КорректировкаСтоимостиПоступления.ДокументОснование,
		|	ДанныеПервичныхДокументов.Дата,
		|	ДанныеПервичныхДокументов.СуммаДокумента,
		|	ДанныеПервичныхДокументов.ВалютаДокумента
		|ИЗ
		|	Документ.КорректировкаСтоимостиПоступления КАК КорректировкаСтоимостиПоступления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
		|		ПО КорректировкаСтоимостиПоступления.Организация = ДанныеПервичныхДокументов.Организация
		|			И КорректировкаСтоимостиПоступления.Ссылка = ДанныеПервичныхДокументов.Документ
		|ГДЕ
		|	&ВидЭСФ = 1
		|	И КорректировкаСтоимостиПоступления.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И КорректировкаСтоимостиПоступления.Контрагент В(&МассивКонтрагентов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КорректировкаСтоимостиДополнительныхРасходов.Организация,
		|	КорректировкаСтоимостиДополнительныхРасходов.Ссылка,
		|	КорректировкаСтоимостиДополнительныхРасходов.ДокументОснование,
		|	ДанныеПервичныхДокументов.Дата,
		|	ДанныеПервичныхДокументов.СуммаДокумента,
		|	ДанныеПервичныхДокументов.ВалютаДокумента
		|ИЗ
		|	Документ.КорректировкаСтоимостиДополнительныхРасходов КАК КорректировкаСтоимостиДополнительныхРасходов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
		|		ПО КорректировкаСтоимостиДополнительныхРасходов.Организация = ДанныеПервичныхДокументов.Организация
		|			И КорректировкаСтоимостиДополнительныхРасходов.Ссылка = ДанныеПервичныхДокументов.Документ
		|ГДЕ
		|	&ВидЭСФ = 1
		|	И КорректировкаСтоимостиДополнительныхРасходов.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И КорректировкаСтоимостиДополнительныхРасходов.Контрагент В(&МассивКонтрагентов)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	Документ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВременнаяТаблицаДокументы.Документ КАК Документ,
		|	ВременнаяТаблицаДокументы.ДатаДокумента КАК ДатаДокумента,
		|	ВременнаяТаблицаДокументы.СуммаДокумента КАК СуммаДокумента,
		|	ВременнаяТаблицаДокументы.ВалютаДокумента КАК ВалютаДокумента
		|ИЗ
		|	ВременнаяТаблицаДокументы КАК ВременнаяТаблицаДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбЭСФ КАК СведенияОбЭСФ
		|		ПО ВременнаяТаблицаДокументы.Организация = СведенияОбЭСФ.Организация
		|			И ВременнаяТаблицаДокументы.Документ = СведенияОбЭСФ.ДокументОснование
		|ГДЕ
		|	СведенияОбЭСФ.Регистратор ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВременнаяТаблицаДокументы.ДатаДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВременнаяТаблицаДокументы.Документ КАК Документ,
		|	СведенияОбЭСФ.Регистратор КАК ДокументЭСФ,
		|	СведенияОбЭСФ.НомерЭСФ КАК НомерЭСФ,
		|	ВременнаяТаблицаДокументы.ДатаДокумента КАК ДатаДокумента
		|ИЗ
		|	ВременнаяТаблицаДокументы КАК ВременнаяТаблицаДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбЭСФ КАК СведенияОбЭСФ
		|		ПО ВременнаяТаблицаДокументы.Организация = СведенияОбЭСФ.Организация
		|			И ВременнаяТаблицаДокументы.Документ = СведенияОбЭСФ.ДокументОснование
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &СостояниеЭСФ = 1
		|				ТОГДА НЕ СведенияОбЭСФ.НомерЭСФ = """"
		|			КОГДА &СостояниеЭСФ = 2
		|				ТОГДА СведенияОбЭСФ.НомерЭСФ = """"
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	ЭлектронныйСчетФактураПолученный.Ссылка КАК ДокументЭСФ,
		//|	ЭлектронныйСчетФактураПолученный.НомерЭСФ КАК НомерЭСФ,
		//|	ЭлектронныйСчетФактураПолученный.Дата КАК Дата
		//|ИЗ
		//|	Документ.ЭлектронныйСчетФактураПолученный КАК ЭлектронныйСчетФактураПолученный
		//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		//|		ПО ЭлектронныйСчетФактураПолученный.Ссылка = ПоступлениеТоваровУслуг.ДокументОснование
		//|ГДЕ
		//|	ЭлектронныйСчетФактураПолученный.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		//|	И ПоступлениеТоваровУслуг.Ссылка ЕСТЬ NULL
		//|	И ЭлектронныйСчетФактураПолученный.Контрагент В(&МассивКонтрагентов)
		//|
		//|УПОРЯДОЧИТЬ ПО
		//|	Дата";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", Объект.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Объект.КонецПериода));
	Запрос.УстановитьПараметр("ВидЭСФ", Объект.ВидЭСФ);
	Запрос.УстановитьПараметр("СостояниеЭСФ", Объект.СостояниеЭСФ);
	МассивКонтрагентов = Новый Массив;
	Для Каждого СтрокаТабличнойЧасти Из Объект.ТаблицаКонтрагенты Цикл 
		Если СтрокаТабличнойЧасти.Пометка Тогда 
			МассивКонтрагентов.Добавить(СтрокаТабличнойЧасти.Контрагент);	
		КонецЕсли;
	КонецЦикла;	
	Запрос.УстановитьПараметр("МассивКонтрагентов", МассивКонтрагентов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Объект.ТаблицаДокументыБезЭСФ.Загрузить(МассивРезультатов[1].Выгрузить());
	Объект.ТаблицаДокументыСЭСФ.Загрузить(МассивРезультатов[2].Выгрузить());
	//Объект.ТаблицаДокументыЭСФ.Загрузить(МассивРезультатов[3].Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЭСФНаСервере(ДокументОснование)
	
	НачатьТранзакцию();
	
	Попытка
		
		Если Объект.ВидЭСФ = 0 Тогда 
			ДокументОбъект = Документы.ЭлектронныйСчетФактураВыписанный.СоздатьДокумент();
		Иначе 
			ДокументОбъект = Документы.ЭлектронныйСчетФактураПолученный.СоздатьДокумент();
		КонецЕсли;
		
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.Заполнить(ДокументОснование);
		ДокументОбъект.Комментарий = СтрШаблон(НСтр("ru = 'Автоматическое создание документа. %1'"), ТекущаяДатаСеанса());
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, Истина, Истина, РежимЗаписиДокумента.Проведение);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстСообщения = НСтр("ru='Не удалось завершить создание документа.
			|Техническая информация об ошибке: %1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить создание документа по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьНаОснованииПоступлениеТоваровУслугНаСервере(ДокументОснование)
	
	НачатьТранзакцию();
	
	Попытка
		
		ДокументОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.Заполнить(ДокументОснование);
		ДокументОбъект.Комментарий = СтрШаблон(НСтр("ru = 'Автоматическое создание документа. %1'"), ТекущаяДатаСеанса());
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, Истина, Истина, РежимЗаписиДокумента.Проведение);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстСообщения = НСтр("ru='Не удалось завершить создание документа.
			|Техническая информация об ошибке: %1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить создание документа по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

#Область ИнтернетПоддержка

&НаСервере
Функция ТребуетсяНастройкаАвторизацияИнтернетПоддержки()
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
		Возврат Не МодульИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура ПриПодключенииИнтернетПоддержки(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПодключенияИнтернетПоддержки", ЭтотОбъект, ДополнительныеПараметры);
		МодульИнтернетПоддержкаПользователейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтернетПоддержкаПользователейКлиент");
		МодульИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОписаниеОповещения, ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияИнтернетПоддержки(Результат, ДополнительныеПараметры) Экспорт
	Если Не (ТипЗнч(Результат) = Тип("Структура")
		И ЗначениеЗаполнено(Результат.Логин)) Тогда
		Возврат;
	КонецЕсли;
	
	ПродолжитьСохранение(ДополнительныеПараметры.МассивСсылок);	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеДокументаВЭлектронномФормате

&НаКлиенте
Процедура ПродолжитьСохранение(МассивСсылок)
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Укажите путь для сохранения файла'");
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ДиалогОткрытияФайлаЗавершение", ЭтотОбъект, Новый Структура("МассивСсылок", МассивСсылок));
	ДиалогОткрытияФайла.Показать(Оповещение);

КонецПроцедуры // ПродолжитьСохранение()

&НаКлиенте
Процедура ДиалогОткрытияФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы <> Неопределено И ВыбранныеФайлы.Количество() > 0 Тогда
		Попытка
			ПараметрыФайлаXML = Новый Структура();
			ПараметрыФайлаXML.Вставить("МассивСсылок", ДополнительныеПараметры.МассивСсылок);
			ПараметрыФайлаXML.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
			
			СтруктураДанных = ДанныеФайлаXML(ПараметрыФайлаXML);
			
			Если СтруктураДанных = Неопределено Тогда
				Возврат;	
			КонецЕсли;	
			
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось завершить формирование файла.
				|Техническая информация об ошибке: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецПопытки;	
		
		// Формирование имени файла.
		КаталогФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ВыбранныеФайлы[0]);
		ИмяФайла = СтруктураДанных.ИмяФайла;
		ПолноеИмяФайла = КаталогФайла + ИмяФайла;
		
		// Сохранение файла.
		Двоичное = ПолучитьИзВременногоХранилища(СтруктураДанных.АдресВременногоХранилища);
		Двоичное.Записать(ПолноеИмяФайла);	
		
		ТекстОповещения = НСтр("ru = 'Файл сформирован'");
		ТекстПояснения = ИмяФайла;
		ПоказатьОповещениеПользователя(
			ТекстОповещения, 
			Новый ОписаниеОповещения("ОткрытьПроводник", ЭтотОбъект, Новый Структура("ПолноеИмяФайла", ПолноеИмяФайла)), 
			ТекстПояснения, 
			БиблиотекаКартинок.Информация32);
	КонецЕсли;	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеФайлаXML(ПараметрыФайлаXML)
	Возврат Документы.ЭлектронныйСчетФактураВыписанный.ФормированиеФайлаXML(ПараметрыФайлаXML);		
КонецФункции

#КонецОбласти

#КонецОбласти
