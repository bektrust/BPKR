///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// ИнтернетПоддержкаПользователей.РаботаСКлассификаторами

// См. РаботаСКлассификаторамиПереопределяемый.ПриДобавленииКлассификаторов
Процедура ПриДобавленииКлассификаторов(Классификаторы) Экспорт
	
	Описание = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКлассификаторами") Тогда
		МодульРаботаСКлассификаторами = ОбщегоНазначения.ОбщийМодуль("РаботаСКлассификаторами");
		Описание = МодульРаботаСКлассификаторами.ОписаниеКлассификатора();
	КонецЕсли;
	Если Описание = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Описание.Идентификатор = ИдентификаторКлассификатора();
	Описание.Наименование = НСтр("ru = 'Общероссийский классификатор валют'");
	Описание.ОбновлятьАвтоматически = Истина;
	Описание.ОбщиеДанные = Истина;
	Описание.ОбработкаРазделенныхДанных = Ложь;
	Описание.СохранятьФайлВКэш = Истина;
	
	Классификаторы.Добавить(Описание);
	
КонецПроцедуры

// См. РаботаСКлассификаторамиПереопределяемый.ПриЗагрузкеКлассификатора.
Процедура ПриЗагрузкеКлассификатора(Идентификатор, Версия, Адрес, Обработан, ДополнительныеПараметры) Экспорт
	
	Если Идентификатор <> ИдентификаторКлассификатора() Тогда
		Возврат;
	КонецЕсли;
	
	Обработан = Истина;
	
КонецПроцедуры

// Конец ИнтернетПоддержкаПользователей.РаботаСКлассификаторами

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляет в справочник валют валюты из классификатора.
//
// Параметры:
//   Коды - Массив - цифровые коды добавляемых валют.
//
// Возвращаемое значение:
//   Массив, СправочникСсылка.Валюты - ссылки созданных валют.
//
Функция ДобавитьВалютыПоКоду(Знач Коды) Экспорт
	
	Результат = Новый Массив;
	КлассификаторТаблица = КлассификаторВалют();

	Для каждого Код Из Коды Цикл
		ЗаписьОКВ = КлассификаторТаблица.Найти(Код, "Code"); 
		Если ЗаписьОКВ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВалютаСсылка = Справочники.Валюты.НайтиПоКоду(ЗаписьОКВ.Code);
		Если ВалютаСсылка.Пустая() Тогда
			НоваяСтрока = Справочники.Валюты.СоздатьЭлемент();
			НоваяСтрока.Код = ЗаписьОКВ.Code;
			НоваяСтрока.Наименование = ЗаписьОКВ.CodeSymbol;
			НоваяСтрока.НаименованиеПолное = ЗаписьОКВ.Name;
			Если ЗаписьОКВ.RBCLoading Тогда
				НоваяСтрока.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета;
			Иначе
				НоваяСтрока.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.РучнойВвод;
			КонецЕсли;
			НоваяСтрока.ПараметрыПрописи = ЗаписьОКВ.NumerationItemOptions;
			НоваяСтрока.Записать();
			Результат.Добавить(НоваяСтрока.Ссылка);
		Иначе
			Результат.Добавить(ВалютаСсылка);
		КонецЕсли
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

// Загружает курсы валют на текущую дату.
//
// Параметры:
//  ПараметрыЗагрузки - Структура:
//   * НачалоПериода - Дата - начало периода загрузки;
//   * КонецПериода - Дата - конец периода загрузки;
//   * СписокВалют - ТаблицаЗначений:
//     ** Валюта - СправочникСсылка.Валюты
//     ** КодВалюты - Строка
//  АдресРезультата - Строка - адрес во временном хранилище для помещения результатов загрузки.
//
Процедура ЗагрузитьАктуальныйКурс(ПараметрыЗагрузки = Неопределено, АдресРезультата = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ЗагрузкаКурсовВалют);
	
	ИмяСобытия = ИмяСобытияЖурналаРегистрации();
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Начата регламентная загрузка курсов валют'"));
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	ПриЗагрузкеВозниклиОшибки = Ложь;
	
	Если ПараметрыЗагрузки = Неопределено Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Валюты.Ссылка КАК Валюта,
		|	Валюты.Код КАК КодВалюты,
		|	МАКСИМУМ(ЕСТЬNULL(КурсыВалют.Период, &НачалоГода)) КАК ДатаКурса
		|ИЗ
		|	Справочник.Валюты КАК Валюты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
		|		ПО (КурсыВалют.Валюта = Валюты.Ссылка)
		|ГДЕ
		|	Валюты.СпособУстановкиКурса = ЗНАЧЕНИЕ(Перечисление.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета)
		|	И НЕ Валюты.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	Валюты.Ссылка,
		|	Валюты.Код";
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("НачалоГода", НачалоГода(ТекущаяДатаСеанса()));
		Выборка = Запрос.Выполнить().Выбрать();
		
		КонецПериода = ТекущаяДата;
		Пока Выборка.Следующий() Цикл
			НачалоПериода = ?(Выборка.ДатаКурса = '198001010000', НачалоГода(ДобавитьМесяц(ТекущаяДата, -12)), Выборка.ДатаКурса + 60*60*24);
			СписокВалют = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка);
			ЗагрузитьКурсыВалютПоПараметрам(СписокВалют, НачалоПериода, КонецПериода, ПриЗагрузкеВозниклиОшибки);
		КонецЦикла;
	Иначе
		Результат = ЗагрузитьКурсыВалютПоПараметрам(ПараметрыЗагрузки.СписокВалют,
			ПараметрыЗагрузки.НачалоПериода, ПараметрыЗагрузки.КонецПериода, ПриЗагрузкеВозниклиОшибки);
	КонецЕсли;
		
	Если АдресРезультата <> Неопределено Тогда
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	КонецЕсли;

	Если ПриЗагрузкеВозниклиОшибки Тогда
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,
			НСтр("ru = 'Во время регламентной загрузки курсов валют возникли ошибки'"));
		Если ПараметрыЗагрузки = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Загрузка курсов не выполнена.'");
		КонецЕсли;
	Иначе
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация,,,
			НСтр("ru = 'Завершена регламентная загрузка курсов валют.'"));
	КонецЕсли;
	
КонецПроцедуры

// Возвращает список разрешений для загрузки классификатора банков с сайта 1С.
//
// Параметры:
//  Разрешения - Массив - коллекция разрешений.
//
Процедура ДобавитьРазрешения(Разрешения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ИспользоватьАльтернативныйСервер = Константы.ИспользоватьАльтернативныйСерверДляЗагрузкиКурсовВалют.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	МодульРаботаВБезопасномРежиме = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежиме");
	
	Если ИспользоватьАльтернативныйСервер Тогда
		Протокол = "HTTP";
		Адрес = "cbrates.rbc.ru";
		Порт = Неопределено;
		Описание = НСтр("ru = 'Загрузка курсов валют с сайта РБК.'");
		Разрешения.Добавить( 
			МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(Протокол, Адрес, Порт, Описание));
	Иначе
		Протокол = "HTTPS";
		Адрес = "currencyrates.1c.ru";
		Порт = Неопределено;
		Описание = НСтр("ru = 'Загрузка курсов валют с сайта 1С.'");
		Разрешения.Добавить( 
			МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(Протокол, Адрес, Порт, Описание));
	КонецЕсли;
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// БПКР
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "2.4.1.1";
	//Обработчик.Процедура = "Обработки.ЗагрузкаКурсовВалют.ОтключитьЗагрузкуКурсаВалюты643ИзИнтернета";
	//Обработчик.РежимВыполнения = "Отложенно";
	//Обработчик.Идентификатор = Новый УникальныйИдентификатор("dc79c561-8657-4852-bbc5-38ced6996fff");
	//Обработчик.Комментарий = НСтр("ru = 'Отключает ошибочно включенную загрузку курсов валюты ""Российский рубль (643)"" из интернета.'");
	//Обработчик.ОчередьОтложеннойОбработки = 1;
	//Обработчик.ПроцедураЗаполненияДанныхОбновления = "Обработки.ЗагрузкаКурсовВалют.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	//Обработчик.ЧитаемыеОбъекты      = "Справочник.Валюты";
	//Обработчик.ИзменяемыеОбъекты    = "Справочник.Валюты";
	// Конец БПКР
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "2.4.1.1";
		Обработчик.Процедура = "Обработки.ЗагрузкаКурсовВалют.УстановитьРасписаниеРегламентногоЗадания";
		Обработчик.РежимВыполнения = "Оперативно";
		Обработчик.НачальноеЗаполнение = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Регистрирует на плане обмена ОбновлениеИнформационнойБазы объекты,
// которые необходимо обновить на новую версию.
//
// Параметры:
//  Параметры - Структура - служебный параметр для передачи в процедуру ОбновлениеИнформационнойБазы.ОтметитьКОбработке.
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Валюты.Ссылка
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	Валюты.Код = ""643""
	|	И Валюты.СпособУстановкиКурса = ЗНАЧЕНИЕ(Перечисление.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Результат = Запрос.Выполнить().Выгрузить();
	МассивСсылок = Результат.ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, МассивСсылок);
	
КонецПроцедуры

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	Зависимость = Настройки.Добавить();
	Зависимость.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ЗагрузкаКурсовВалют;
	Зависимость.ДоступноВМоделиСервиса = Ложь;
	Зависимость.ДоступноВАвтономномРабочемМесте = Ложь;
КонецПроцедуры

// Процедура для загрузки курсов валют по определенному периоду.
//
// Параметры:
//   Валюты		- Массив из Структура:
//    * КодВалюты - Число - числовой код валюты.
//    * Валюта - СправочникСсылка.Валюты
//   НачалоПериодаЗагрузки	- Дата - начало периода загрузки курсов.
//   ОкончаниеПериодаЗагрузки	- Дата - окончание периода загрузки курсов.
//
// Возвращаемое значение:
//   Массив из Структура:
//    Валюта - СправочникСсылка.Валюты - загружаемая валюта.
//    СтатусОперации - Булево - завершилась ли загрузка успешно.
//    Сообщение - Строка - текст сообщения об ошибке или поясняющее сообщение.
//
Функция ЗагрузитьКурсыВалютПоПараметрам(Знач Валюты, Знач НачалоПериодаЗагрузки, Знач ОкончаниеПериодаЗагрузки, ПриЗагрузкеВозниклиОшибки = Ложь)
	
	СостояниеЗагрузки = Новый Массив;
	
	ПараметрыПолучения = Неопределено;
	ИмяФайлаДневногоКурса = Формат(ОкончаниеПериодаЗагрузки, "ДФ=/yyyy/MM/dd");
	
	УстановитьПривилегированныйРежим(Истина);
	ИспользоватьАльтернативныйСервер = Константы.ИспользоватьАльтернативныйСерверДляЗагрузкиКурсовВалют.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ИспользоватьАльтернативныйСервер Тогда
		// БПКР
		Возврат ЗагрузитьКурсыВалютПоПараметрамНБК(Валюты, НачалоПериодаЗагрузки, ОкончаниеПериодаЗагрузки,	ПриЗагрузкеВозниклиОшибки);
		// Конец БПКР

		//@skip-warning
		СерверИсточник = "http://cbrates.rbc.ru";
		Если НачалоПериодаЗагрузки = ОкончаниеПериодаЗагрузки Тогда
			ШаблонИмениФайла = СерверИсточник + "/tsv/%1" + ИмяФайлаДневногоКурса + ".tsv";
		Иначе
			ШаблонИмениФайла = СерверИсточник + "/tsv/cb/%1.tsv";
		КонецЕсли;
	Иначе
		СерверИсточник = "https://currencyrates.1c.ru/exchangerate/v1";
		Если НачалоПериодаЗагрузки = ОкончаниеПериодаЗагрузки Тогда
			ШаблонИмениФайла = СерверИсточник + "/%1" + ИмяФайлаДневногоКурса + ".tsv";
		Иначе
			ШаблонИмениФайла = СерверИсточник + "/%1.tsv";
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		ПараметрыПолучения = ПараметрыАутентификацииНаСайте();
		УстановитьПривилегированныйРежим(Ложь);
		
		// БПКР
		СерверИсточник = "https://fresh.1c-cloud.kg/a/ak/hs/currencyrates/exchangerate/v1";
		Если НачалоПериодаЗагрузки = ОкончаниеПериодаЗагрузки Тогда
			ШаблонИмениФайла = СерверИсточник + "/%1" + ИмяФайлаДневногоКурса;
		Иначе
			ШаблонИмениФайла = СерверИсточник + "/%1";
		КонецЕсли;
		РаботаСКонтрагентамиБП.ДополнитьПараметрыПолученияДаннымиСтатистики(ПараметрыПолучения);
		// Конец БПКР
	КонецЕсли;
	
	ВалютыЗагружаемыеИзИнтернета = ВалютыЗагружаемыеИзИнтернета();
	
	Для Каждого Валюта Из Валюты Цикл
		Если ВалютыЗагружаемыеИзИнтернета.Найти(Валюта.Валюта) = Неопределено Тогда
			ПриЗагрузкеВозниклиОшибки = Истина;
			СтатусОперации = Ложь;
			ПоясняющееСообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Невозможно получить файл данных с курсами валюты %2 (код %1):
					|Курсы данной валюты не предоставляются.'"),
				Валюта.КодВалюты,
				Валюта.Валюта);
				
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ПоясняющееСообщение);
		Иначе
			ФайлНаВебСервере = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениФайла, Валюта.КодВалюты);
			Результат = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(ФайлНаВебСервере, ПараметрыПолучения);
			
			Если Результат.Статус Тогда
				ПоясняющееСообщение = ЗагрузитьКурсВалютыИзФайла(Валюта.Валюта, Результат.Путь, НачалоПериодаЗагрузки, ОкончаниеПериодаЗагрузки) + Символы.ПС;
				УдалитьФайлы(Результат.Путь);
				СтатусОперации = ПустаяСтрока(ПоясняющееСообщение);
			Иначе
				Если НачалоПериодаЗагрузки = ОкончаниеПериодаЗагрузки И НачалоПериодаЗагрузки > ТекущаяДатаСеанса() Тогда
					ПоясняющееСообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось загрузить курс валюты %2 (код %1) на %3.
							|Курсы валют на будущие даты не предоставляются.
							|Доступны курсы на текущую дату и история курсов.'"),
						Валюта.КодВалюты,
						Валюта.Валюта,
						Формат(НачалоПериодаЗагрузки, "ДЛФ=D;"));
				Иначе
					ПоясняющееСообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Невозможно получить файл данных с курсами валюты %2 (код %1):
							|%3
							|Возможно, нет доступа к веб-сайту с курсами валют, либо указана несуществующая валюта.'"),
						Валюта.КодВалюты,
						Валюта.Валюта,
						Результат.СообщениеОбОшибке);
				КонецЕсли;
				СтатусОперации = Ложь;
				ПриЗагрузкеВозниклиОшибки = Истина;
			КонецЕсли;
		КонецЕсли;
		СостояниеЗагрузки.Добавить(Новый Структура("Валюта,СтатусОперации,Сообщение", Валюта.Валюта, СтатусОперации, ПоясняющееСообщение));
		
	КонецЦикла;
	
	Возврат СостояниеЗагрузки;
	
КонецФункции

// Загружает информацию о курсе валюты Валюта из файла ПутьКФайлу в регистр
// сведений курсов валют. При этом файл с курсами разбирается, и записываются
// только те данные, которые удовлетворяют периоду (НачалоПериодаЗагрузки, ОкончаниеПериодаЗагрузки).
//
Функция ЗагрузитьКурсВалютыИзФайла(Знач Валюта, Знач ПутьКФайлу, Знач НачалоПериодаЗагрузки, Знач ОкончаниеПериодаЗагрузки)
	
	ЧислоЗагружаемыхДнейВсего = 1 + (ОкончаниеПериодаЗагрузки - НачалоПериодаЗагрузки) / ( 24 * 60 * 60);
	
	// БПКР
	// Для не основных валют курсы НБКР предоставляет только 1 раз в неделю.
	НаименованиеВалюты = Валюта.Наименование;
	Если НЕ (НаименованиеВалюты = "USD"
		Или НаименованиеВалюты = "EUR"
		Или НаименованиеВалюты = "RUB"
		Или НаименованиеВалюты = "KZT") Тогда 
		
		ЧислоЗагружаемыхДнейВсего = Макс(Цел(ЧислоЗагружаемыхДнейВсего / 7), 1);
	КонецЕсли;	
	// Конец БПКР
	
	ЧислоЗагруженныхДней = 0;
	
	Если ЭтоАдресВременногоХранилища(ПутьКФайлу) Тогда
		ИмяФайла = ПолучитьИмяВременногоФайла();
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ПутьКФайлу); // ДвоичныеДанные
		ДвоичныеДанные.Записать(ИмяФайла);
	Иначе
		ИмяФайла = ПутьКФайлу;
	КонецЕсли;
	
	Текст = Новый ТекстовыйДокумент();
	Текст.Прочитать(ИмяФайла, КодировкаТекста.ANSI);
	
	ЗагружаемыеДаты = Новый Соответствие;
	
	ДатаЗапрета = Неопределено;
	Для НомерСтроки = 1 По Текст.КоличествоСтрок() Цикл
		
		Стр = Текст.ПолучитьСтроку(НомерСтроки);
		Если (Стр = "") ИЛИ (СтрНайти(Стр, Символы.Таб) = 0) Тогда
			Продолжить;
		КонецЕсли;
		
		ЧастиСтроки = СтрРазделить(Стр, Символы.Таб, Истина);
		
		Если НачалоПериодаЗагрузки = ОкончаниеПериодаЗагрузки Тогда
			ДатаКурса = ОкончаниеПериодаЗагрузки;
			Кратность = Число(ЧастиСтроки[0]);
			Курс = КурсИзСтроки(ЧастиСтроки[1]);
		Иначе
			ДатаКурсаСтр = ЧастиСтроки[0];
			ДатаКурса = Дата(Лев(ДатаКурсаСтр,4), Сред(ДатаКурсаСтр,5,2), Сред(ДатаКурсаСтр,7,2));
			Кратность = Число(ЧастиСтроки[1]);
			Курс = КурсИзСтроки(ЧастиСтроки[2]);
		КонецЕсли;
		
		Если ДатаКурса > ОкончаниеПериодаЗагрузки Тогда
			Прервать;
		КонецЕсли;
		
		Если ДатаКурса < НачалоПериодаЗагрузки Тогда 
			Продолжить;
		КонецЕсли;
		
		ЗагружаемыеДаты.Вставить(ДатаКурса, Истина);
		
		НаборЗаписей = РегистрыСведений.КурсыВалют.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Валюта.Установить(Валюта);
		НаборЗаписей.Отбор.Период.Установить(ДатаКурса);
		Запись = НаборЗаписей.Добавить();
		Запись.Валюта = Валюта;
		Запись.Период = ДатаКурса;
		Запись.Курс = Курс;
		Запись.Кратность = Кратность;
		
		Записывать = Истина;
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДатыЗапретаИзменения") Тогда
			МодульДатыЗапретаИзмененияСлужебный = ОбщегоНазначения.ОбщийМодуль("ДатыЗапретаИзмененияСлужебный");
			Если МодульДатыЗапретаИзмененияСлужебный.ЗапретИзмененияПроверяется(Метаданные.РегистрыСведений.КурсыВалют) Тогда
				МодульДатыЗапретаИзменения = ОбщегоНазначения.ОбщийМодуль("ДатыЗапретаИзменения");
				Записывать = Не МодульДатыЗапретаИзменения.ИзменениеЗапрещено(НаборЗаписей);
				Если Не Записывать Тогда
					Если ДатаЗапрета = Неопределено Тогда
						ДатаЗапрета = ДатаКурса;
					Иначе
						ДатаЗапрета = Макс(ДатаЗапрета, ДатаКурса);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Записывать Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
		
		ЧислоЗагруженныхДней = ЧислоЗагруженныхДней + 1;
	КонецЦикла;
	
	Если ЭтоАдресВременногоХранилища(ПутьКФайлу) Тогда
		УдалитьФайлы(ИмяФайла);
		УдалитьИзВременногоХранилища(ПутьКФайлу);
	КонецЕсли;
	
	ПояснениеОЗагрузке = "";
	Если ЧислоЗагружаемыхДнейВсего <> ЧислоЗагруженныхДней Тогда
		Если ЧислоЗагруженныхДней = 0 Тогда
			ПояснениеОЗагрузке = НСтр("ru = 'Курсы валюты %1 (%2) не загружены.
				|Нет сведений о курсе за указанный период.'");
		Иначе
			ПропущенныеДаты = Новый Массив;
			
			КоличествоСекундВСутках = 24 * 60 * 60;
			Для Индекс = 0 По ЧислоЗагружаемыхДнейВсего - 1 Цикл
				Дата = ОкончаниеПериодаЗагрузки - Индекс * КоличествоСекундВСутках;
				Если ЗагружаемыеДаты[Дата] <> Истина Тогда
					ПропущенныеДаты.Добавить(Формат(Дата, "ДЛФ=D;"));
				КонецЕсли;
			КонецЦикла;
			
			ПояснениеОЗагрузке = НСтр("ru = 'Загружены не все курсы по валюте %1 (%2).'") + Символы.ПС 
				+  ПояснениеПоПропущеннымДатам(ПропущенныеДаты);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПояснениеОЗагрузке) Тогда
		ПояснениеОЗагрузке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПояснениеОЗагрузке, Валюта.Наименование, Валюта.Код);
	КонецЕсли;
	
	Если ДатаЗапрета <> Неопределено Тогда
		ПояснениеОЗагрузке = ПояснениеОЗагрузке + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Загрузка курсов валюты %1(%2) ограничена датой запрета изменений %3.
			|Курсы запрещенного периода были пропущены при загрузке.'"), Валюта.Наименование, Валюта.Код, Формат(ДатаЗапрета, "ДЛФ=D"));
	КонецЕсли;
	
	ПояснениеОЗагрузке = СокрЛП(ПояснениеОЗагрузке);
	
	СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
	СписокОшибок = Новый Массив;
	Для Каждого СообщениеПользователю Из СообщенияПользователю Цикл
		СписокОшибок.Добавить(СообщениеПользователю.Текст);
	КонецЦикла;
	СписокОшибок = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СписокОшибок);
	ПояснениеОЗагрузке = ПояснениеОЗагрузке + ?(ПустаяСтрока(ПояснениеОЗагрузке), "", Символы.ПС) + СтрСоединить(СписокОшибок, Символы.ПС);
	
	Возврат ПояснениеОЗагрузке;
	
КонецФункции

Функция ПояснениеПоПропущеннымДатам(ПропущенныеДаты);
	
	Результат = "";
	
	Если ПропущенныеДаты.Количество() = 1 Тогда
		Результат =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отсутствует курс на %1.'"), СтрСоединить(ПропущенныеДаты));
	ИначеЕсли ПропущенныеДаты.Количество() <=5 Тогда
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отсутствуют курсы на %1.'"), СтрСоединить(ПропущенныеДаты, ", "));
	Иначе 
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отсутствуют курсы на %1, %2, %3 и другие даты (всего %4).'"), 
			ПропущенныеДаты[0],
			ПропущенныеДаты[1],
			ПропущенныеДаты[2],
			ПропущенныеДаты.Количество());
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Предназначена для преобразования формата чисел, используемого в файле курсов валюты.
// Работает в любой локализации, не поддерживает отрицательные числа.
//
Функция КурсИзСтроки(Знач Строка)
	
	Строка = СокрЛП(Строка);
	ЧастиСтроки = СтрРазделить(Строка, ".", Истина);
	
	Если Строка = "" Или ЧастиСтроки.Количество() > 2 Тогда
		ВызватьИсключение НСтр("ru = 'Преобразование значения к типу Число не может быть выполнено.'");
	КонецЕсли;
	
	ДлинаДробнойЧасти = 0;
	Если ЧастиСтроки.Количество() > 1 Тогда
		ДлинаДробнойЧасти = СтрДлина(ЧастиСтроки[1]);
	КонецЕсли;
	
	Строка = СтрСоединить(ЧастиСтроки, "");
	Результат = 0;
	Если Строка <> "" Тогда
		Результат = Число(Строка) / Pow(10, ДлинаДробнойЧасти);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьСуммуПрописью(СуммаЧислом, Валюта, ВыводитьСуммуБезКопеек = Ложь, Знач КодЯзыка = Неопределено) Экспорт
	
	ПараметрыПрописи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Валюта, "ПараметрыПрописи", , КодЯзыка);
	Возврат СуммаПрописью(СуммаЧислом, ПараметрыПрописи, ВыводитьСуммуБезКопеек, КодЯзыка);
	
КонецФункции

Функция СуммаПрописью(СуммаЧислом, ПараметрыПрописи, ВыводитьСуммуБезДробнойЧасти = Ложь, Знач КодЯзыка = Неопределено)
	
	Если Не ЗначениеЗаполнено(КодЯзыка) Тогда
		КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	КонецЕсли;
	
	Сумма = ?(СуммаЧислом < 0, -СуммаЧислом, СуммаЧислом);
	Результат = ЧислоПрописью(Сумма, "L=" + КодЯзыка + ";ДП=Ложь", ПараметрыПрописи); // АПК:1297 АПК:1357
	Если ВыводитьСуммуБезДробнойЧасти И Цел(Сумма) = Сумма Тогда
		Результат = Лев(Результат, СтрНайти(Результат, "0") - 1);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

// Отключает у валюты 643 загрузку из интернета.
Процедура ОтключитьЗагрузкуКурсаВалюты643ИзИнтернета(Параметры) Экспорт
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, "Справочник.Валюты");
	Пока Выборка.Следующий() Цикл
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.Валюты");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
		
		НачатьТранзакцию();
		Попытка
			Блокировка.Заблокировать();
			
			Валюта = Выборка.Ссылка.ПолучитьОбъект();
			Валюта.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.РучнойВвод;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Валюта);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, "Справочник.Валюты");
КонецПроцедуры

Процедура УстановитьРасписаниеРегламентногоЗадания() Экспорт
	
	ГенераторСлучайныхЧисел = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
	Задержка = ГенераторСлучайныхЧисел.СлучайноеЧисло(0, 21600); // С 0 до 6 часов утра.
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ПериодПовтораДней = 1;
	Расписание.ПериодНедель = 1;
	Расписание.ВремяНачала = '00010101000000' + Задержка;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Расписание", Расписание);
	ПараметрыЗадания.Вставить("ИнтервалПовтораПриАварийномЗавершении", 600);
	ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 10);
	
	УстановитьПараметрыРегламентногоЗадания(ПараметрыЗадания);
	
КонецПроцедуры

Процедура УстановитьПараметрыРегламентногоЗадания(ИзменяемыеПараметры)
	РегламентныеЗаданияСервер.УстановитьПараметрыРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ЗагрузкаКурсовВалют, ИзменяемыеПараметры);
КонецПроцедуры

Функция ПараметрыАутентификацииНаСайте()
	Результат = Новый Структура;
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
		ДанныеАутентификации = МодульИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		Если ДанныеАутентификации <> Неопределено Тогда
			Результат.Вставить("Пользователь", ДанныеАутентификации.Логин);
			Результат.Вставить("Пароль", ДанныеАутентификации.Пароль);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ВалютыЗагружаемыеИзИнтернета() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Валюты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	НЕ Валюты.ПометкаУдаления
	|	И Валюты.СпособУстановкиКурса = ЗНАЧЕНИЕ(Перечисление.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета)
	|	И Валюты.Код В(&ЗагружаемыеПоКлассификатору)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ЗагружаемыеПоКлассификатору", КодыВалютЗагружаемыхИзИнтернета());
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Результат;
	
КонецФункции

Функция КодыВалютЗагружаемыхИзИнтернета() Экспорт
	
	КлассификаторТаблица = КлассификаторВалют();
	
	НайденныеСтроки = КлассификаторТаблица.НайтиСтроки(Новый Структура("RBCLoading", "истина"));
	ЗагружаемыеПоКлассификатору = КлассификаторТаблица.Скопировать(НайденныеСтроки, "Code").ВыгрузитьКолонку("Code");
	
	Возврат ЗагружаемыеПоКлассификатору;
	
КонецФункции

Функция ИмяСобытияЖурналаРегистрации()
	Возврат НСтр("ru = 'Валюты.Загрузка курсов валют'", ОбщегоНазначения.КодОсновногоЯзыка());
КонецФункции

// См. ИнтеграцияПодсистемБСП.ПриИзмененииДанныхАутентификацииИнтернетПоддержки.
Процедура ПриИзмененииДанныхАутентификацииИнтернетПоддержки(ДанныеПользователя) Экспорт
	УстановитьПараметрыРегламентногоЗадания(Новый Структура("Использование", ДанныеПользователя <> Неопределено));
КонецПроцедуры

Функция ИдентификаторКлассификатора()
	
	Возврат "Currencies";
	
КонецФункции

Функция КлассификаторВалют() Экспорт
	
	КлассификаторXML = Неопределено;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКлассификаторами") Тогда
		ИдентификаторКлассификатора = ИдентификаторКлассификатора();
		
		МодульРаботаСКлассификаторами = ОбщегоНазначения.ОбщийМодуль("РаботаСКлассификаторами");
		Идентификаторы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторКлассификатора);
		Результат = МодульРаботаСКлассификаторами.ПолучитьФайлыКлассификаторов(Идентификаторы);
		
		Если ПустаяСтрока(Результат.КодОшибки) И Результат.ДанныеКлассификаторов <> Неопределено Тогда
			ОписаниеКлассификатора = Результат.ДанныеКлассификаторов.Найти(ИдентификаторКлассификатора, "Идентификатор");
			Если ОписаниеКлассификатора <> Неопределено Тогда
				ДвоичныеДанные = ПолучитьИзВременногоХранилища(ОписаниеКлассификатора.АдресФайла);
				
				ПотокВПамяти = Новый ПотокВПамяти;
				ЗаписьДанных = Новый ЗаписьДанных(ПотокВПамяти);
				ЗаписьДанных.Записать(ДвоичныеДанные);
				ЗаписьДанных.Закрыть();
				ПотокВПамяти.Перейти(0, ПозицияВПотоке.Начало);
				
				ЧтениеТекста = Новый ЧтениеТекста(ПотокВПамяти);
				КлассификаторXML = ЧтениеТекста.Прочитать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если КлассификаторXML = Неопределено Тогда
		УстановитьПривилегированныйРежим(Истина);
		КлассификаторXML = ПолучитьМакет("ОбщероссийскийКлассификаторВалют").ПолучитьТекст();
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Результат = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
	Результат.Индексы.Добавить("Code");
	Результат.Индексы.Добавить("RBCLoading");
	
	Возврат Результат;
	
КонецФункции

// Устанавливает признак загрузки курсов из интернета по данным классификатора.
Процедура ПреобразованиеСвязейВалют() Экспорт
	
	КлассификаторXML = Обработки["ЗагрузкаКурсовВалют"].ПолучитьМакет("ОбщероссийскийКлассификаторВалют").ПолучитьТекст();
	КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
	КлассификаторТаблица.Индексы.Добавить("Code");
	
	Выборка = Справочники.Валюты.Выбрать();
	Пока Выборка.Следующий()  Цикл
		Валюта = Выборка.ПолучитьОбъект();
		НайденнаяСтрока = КлассификаторТаблица.Найти(Валюта.Код, "Code");
		Если НайденнаяСтрока <> Неопределено И НайденнаяСтрока.RBCLoading = "истина" Тогда
			Валюта.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Валюта);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ОбновитьФорматХраненияПрописи() Экспорт
	
	ВыборкаВалют = Справочники.Валюты.Выбрать();
	
	Пока ВыборкаВалют.Следующий() Цикл
		Объект = ВыборкаВалют.ПолучитьОбъект();
		СтрокаПараметров = СтрЗаменить(Объект.ПараметрыПрописи, ",", Символы.ПС);
		Род1 = НРег(Лев(СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 4)), 1));
		Род2 = НРег(Лев(СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 8)), 1));
		Объект.ПараметрыПрописи = 
					  СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 1)) + ", "
					+ СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 2)) + ", "
					+ СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 3)) + ", "
					+ Род1 + ", "
					+ СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 5)) + ", "
					+ СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 6)) + ", "
					+ СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 7)) + ", "
					+ Род2 + ", "
					+ СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 9));
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыЗагрузкиКурсовВалютССайтаНБКР_БПКР

// Следует использовать Функцию ЗагрузитьКурсыВалютПоПараметрам.
//
Функция ЗагрузитьКурсыВалютПоПараметрамНБК(Валюты, НачалоПериодаЗагрузки, ОкончаниеПериодаЗагрузки,	ПриЗагрузкеВозниклиОшибки)     	
	
	СостояниеЗагрузки = Новый Массив;
	ПриЗагрузкеВозниклиОшибки = Ложь;
	СерверИсточник = "https://nbkr.kg";
	ПрефиксИмениФайла = Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMdd");

	// На сайте www.nbkr.kg для основных валют создаются отдельные файлы 
	// необходимо разделить Валюты на основные и все остальные. 
	МассивОсновныхВалют   = Новый Массив;  //USD, EUR, RUB, KZT
	МассивНеОсновныхВалют = Новый Массив; 	
	
	Для каждого Валюта Из Валюты Цикл
		Если Валюта.КодВалюты = "840"    // USD 
		    ИЛИ Валюта.КодВалюты = "978" // EUR
		    ИЛИ Валюта.КодВалюты = "643" // RUB
		    ИЛИ Валюта.КодВалюты = "398" // KZT
		Тогда
			МассивОсновныхВалют.Добавить(Валюта)
		ИначеЕсли Валюта.КодВалюты = "417" Тогда // KGS
			Продолжить;
		Иначе 	
			МассивНеОсновныхВалют.Добавить(Валюта);
		КонецЕсли;
	КонецЦикла;
	
	// На сайте www.nbkr.kg выкладыются XML файлы с последними значениями курсов валют
	// необходимо определиться с выбором файлов для загрузки. 
	Если НачалоПериодаЗагрузки = НачалоДня(ОкончаниеПериодаЗагрузки) 
		И НачалоПериодаЗагрузки = НачалоДня(ТекущаяДата()) Тогда
		
		// Загрузка курсов валют из XML файла daily.xml
		Если МассивОсновныхВалют.Количество() > 0 Тогда			
			ЗагрузитьЕжедневныеКурсыОсновныхВалютИзXMLФайла(СерверИсточник, ОкончаниеПериодаЗагрузки, ПриЗагрузкеВозниклиОшибки, ПрефиксИмениФайла, СостояниеЗагрузки);
		КонецЕсли;
		
		// Загрузка курсов валют из XML файла weekly.xml
		Если МассивНеОсновныхВалют.Количество() > 0 Тогда 			
			ЗагрузитьЕженедельныеКурсыНеОсновныхВалютИзXMLФайла(СерверИсточник, ОкончаниеПериодаЗагрузки, ПриЗагрузкеВозниклиОшибки, ПрефиксИмениФайла, СостояниеЗагрузки);
		КонецЕсли;
	Иначе
		// Загрузка курсов валют из EXCEL файла dailyrus.xls
		Если МассивОсновныхВалют.Количество() > 0 Тогда 			 			
			ЗагрузитьЕжедневныеКурсыОсновныхВалютИзEXCELФайла(СерверИсточник, МассивОсновныхВалют, 
				НачалоПериодаЗагрузки, ОкончаниеПериодаЗагрузки, ПриЗагрузкеВозниклиОшибки, ПрефиксИмениФайла, СостояниеЗагрузки);
		КонецЕсли;
		
		// Загрузка курсов валют из EXCEL файла allvalsrus.xls
		Если МассивНеОсновныхВалют.Количество() > 0 Тогда
			ЗагрузитьЕженедельныеКурсыНеОсновныхВалютИзEXCELФайла(СерверИсточник, МассивНеОсновныхВалют, 
				НачалоПериодаЗагрузки, ОкончаниеПериодаЗагрузки, ПриЗагрузкеВозниклиОшибки, ПрефиксИмениФайла, СостояниеЗагрузки);
		КонецЕсли;
	КонецЕсли;     	
	
	// Проанализировать файлы и удалить старые.
	ПутьДляСохранения = КаталогВременныхФайлов();
	НайденныеФайлы = НайтиФайлы(ПутьДляСохранения + "nbkr", "*.*");
	Для Каждого НайденныйФайл Из НайденныеФайлы Цикл 
		Если НЕ Лев(НайденныйФайл.ИмяБезРасширения, 8) = ПрефиксИмениФайла Тогда 
			 УдалитьФайлы(НайденныйФайл.ПолноеИмя);
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат СостояниеЗагрузки;	
КонецФункции

// Загрузка ежедневных курсов основных валют из XML файла daily.xml
// Пример ежедневного XML файла курсов основных валют с сайта НБКР >>
// ------------------------------------------------------------------
//<CurrencyRates Name="Daily Exchange Rates" Date="13.01.2015">
//	<Currency ISOCode="USD">
//		<Nominal>1</Nominal>
//		<Value>59,2000</Value>
//	</Currency>
//	<Currency ISOCode="EUR">
//		<Nominal>1</Nominal>
//		<Value>69,9507</Value>
//	</Currency>
//	<Currency ISOCode="KZT">
//		<Nominal>1</Nominal>
//		<Value>0,3225</Value>
//	</Currency>
//	<Currency ISOCode="RUB">
//		<Nominal>1</Nominal>
//		<Value>0,9436</Value>
//	</Currency>
//</CurrencyRates>
// ------------------------------------------------------------------
// -
Процедура ЗагрузитьЕжедневныеКурсыОсновныхВалютИзXMLФайла(СерверИсточник, ДатаКурса, ПриЗагрузкеВозниклиОшибки, ПрефиксИмениФайла, СостояниеЗагрузки)
	
	// Подготовка параметров.
	ПараметрыПолучения = Новый Структура;
	ПутьДляСохранения = КаталогВременныхФайлов();
	СоздатьКаталог(ПутьДляСохранения + "nbkr");
	ПутьДляСохранения = ПутьДляСохранения + "nbkr" + "\" + ПрефиксИмениФайла + "_" + "daily.xml";
	ПараметрыПолучения.Вставить("ПутьДляСохранения", ПутьДляСохранения);
	
	// Проверим, возможно файл сегодня уже загружали.
	НайденныеФайлы = НайтиФайлы(ПутьДляСохранения);
	Если НайденныеФайлы.Количество() = 0 Тогда
		URL = СерверИсточник + "/XML/daily.xml";   
		
		#Если Клиент Тогда
			Результат = ПолучениеФайловИзИнтернетаКлиент.СкачатьФайлНаКлиенте(URL, ПараметрыПолучения);
		#Иначе
			Результат = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(URL, ПараметрыПолучения);
		#КонецЕсли 
	Иначе
		Результат = Новый Структура("Статус, Путь", Истина, ПутьДляСохранения);	
	КонецЕсли;	
	
	Если НЕ Результат.Статус Тогда
		ПоясняющееСообщение = СтрШаблон(
				НСтр("ru = 'Невозможно получить файл данных с курсами валюты:
				|%1
				|Возможно, нет доступа к веб сайту с курсами валют, либо указана несуществующая валюта.'"),
				Результат.СообщениеОбОшибке);
		СтатусОперации = Ложь;
		ПриЗагрузкеВозниклиОшибки = Истина;
		
		СостояниеЗагрузки.Добавить(Новый Структура("Валюта,СтатусОперации,Сообщение","Основные валюты", СтатусОперации, ПоясняющееСообщение));
		Возврат;
	КонецЕсли;
	
	РегистрКурсыВалют = РегистрыСведений.КурсыВалют;

	Попытка
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(Результат.Путь);
		
		Пока ЧтениеXML.Прочитать() Цикл
			
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Имя = ЧтениеXML.Имя;								
			КонецЕсли;
			
			// Если на сайте НБКР не актуальные курсы на сегодня тогда "прерываем" чтение
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И Имя = "CurrencyRates" Тогда
				ДатаКурсовXML = ЧтениеXML.ПолучитьАтрибут("Date");
				Если Число(Сред(ДатаКурсовXML,1,2)) <> День(ДатаКурса) Тогда
					ДатаКурса = СтроковыеФункцииКлиентСервер.СтрокаВДату(ДатаКурсовXML);
				КонецЕсли;         				
				
			//Валюта	
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И Имя = "Currency" Тогда 
				
				НаименованиеВалюты = ЧтениеXML.ПолучитьАтрибут("ISOCode");
				Валюта = Справочники.Валюты.НайтиПоНаименованию(НаименованиеВалюты);
				
				Если Валюта <> Справочники.Валюты.ПустаяСсылка() 
					И Валюта.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета Тогда
					
					ЗаписыватьВалюту = Истина;
				Иначе
					ЗаписыватьВалюту = Ложь;
				КонецЕсли;
				
			//Кратность	
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст И Имя = "Nominal" Тогда
				
				Кратность = КурсИзСтрокиНБКР(ЧтениеXML.Значение);
				
			//Курс	
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст И Имя = "Value" Тогда 				

				Курс = КурсИзСтрокиНБКР(ЧтениеXML.Значение);
				
				// Записываем в РС: КурсыВалют				
				Если ЗаписыватьВалюту Тогда
					ЗаписьКурсовВалют = РегистрКурсыВалют.СоздатьМенеджерЗаписи();
					
					ЗаписьКурсовВалют.Валюта    = Валюта;
					ЗаписьКурсовВалют.Период    = ДатаКурса;
					ЗаписьКурсовВалют.Курс      = Курс;
					ЗаписьКурсовВалют.Кратность = Кратность;
					ЗаписьКурсовВалют.Записать(); 
				КонецЕсли;              			
				
			КонецЕсли;
		КонецЦикла;	
		
		ЧтениеXML.Закрыть();	
		
	Исключение
		ПоясняющееСообщение = СтрШаблон(НСтр("ru = 'Ошибка чтения XML файла с курсами валют: %1.'"), Результат.СообщениеОбОшибке);
		СтатусОперации = Ложь;
		ПриЗагрузкеВозниклиОшибки = Истина;
		
		СостояниеЗагрузки.Добавить(Новый Структура("Валюта,СтатусОперации,Сообщение","Основные валюты", СтатусОперации, ПоясняющееСообщение));
	КонецПопытки;
	
	// Не удаляем файл, так как может быть повторная загрузка в этот день.
	// файлы будут проанализированы и удалены только старые.
	УдалитьФайлы(Результат.Путь);
КонецПроцедуры

// Загрузка ежедневных курсов не основных валют из XML файла daily.xml
// Пример еженедельного XML файла курсов НЕ основных валют с сайта НБКР >>
// -----------------------------------------------------------------------
//<CurrencyRates Name="Weekly Exchange Rates" Date="10.01.2015">
//	<Currency ISOCode="GBP">
//		<Nominal>1</Nominal>
//		<ValidFor>7</ValidFor>
//		<Value>89,0450</Value>
//	</Currency>
//	<Currency ISOCode="DKK">
//		<Nominal>1</Nominal>
//		<ValidFor>7</ValidFor>
//		<Value>9,3463</Value>
//	</Currency>
//	<Currency ISOCode="INR">
//		<Nominal>1</Nominal>
//		<ValidFor>7</ValidFor>
//		<Value>0,9451</Value>
//	</Currency>
//	<Currency ISOCode="CAD">
//		<Nominal>1</Nominal>
//		<ValidFor>7</ValidFor>
//	<Value>49,7634</Value>
//	</Currency>
//</CurrencyRates> 
// -----------------------------------------------------------------------
// -
Процедура ЗагрузитьЕженедельныеКурсыНеОсновныхВалютИзXMLФайла(СерверИсточник, ДатаКурса, ПриЗагрузкеВозниклиОшибки, ПрефиксИмениФайла, СостояниеЗагрузки)
	
	// Подготовка параметров.
	ПараметрыПолучения = Новый Структура;
	ПутьДляСохранения = КаталогВременныхФайлов();
	СоздатьКаталог(ПутьДляСохранения + "nbkr");
	ПутьДляСохранения = ПутьДляСохранения + "nbkr" + "\" + ПрефиксИмениФайла + "_" + "weekly.xml";
	ПараметрыПолучения.Вставить("ПутьДляСохранения", ПутьДляСохранения);
	
	// Проверим, возможно файл сегодня уже загружали.
	НайденныеФайлы = НайтиФайлы(ПутьДляСохранения);
	Если НайденныеФайлы.Количество() = 0 Тогда
		URL = СерверИсточник + "/XML/weekly.xml";   
		
		#Если Клиент Тогда
			Результат = ПолучениеФайловИзИнтернетаКлиент.СкачатьФайлНаКлиенте(URL, ПараметрыПолучения);
		#Иначе
			Результат = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(URL, ПараметрыПолучения);
		#КонецЕсли 
	Иначе
		Результат = Новый Структура("Статус, Путь", Истина, ПутьДляСохранения);	
	КонецЕсли;	
	
	Если НЕ Результат.Статус Тогда
		ПоясняющееСообщение = СтрШаблон(
				НСтр("ru = 'Невозможно получить файл данных с курсами валюты:
				|%1
				|Возможно, нет доступа к веб сайту с курсами валют, либо указана несуществующая валюта.'"),
				Результат.СообщениеОбОшибке);
		СтатусОперации = Ложь;
		ПриЗагрузкеВозниклиОшибки = Истина;
		
		СостояниеЗагрузки.Добавить(Новый Структура("Валюта,СтатусОперации,Сообщение","Не основные валюты", СтатусОперации, ПоясняющееСообщение));
		Возврат;
	КонецЕсли;
	
	РегистрКурсыВалют = РегистрыСведений.КурсыВалют;

	Попытка
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(Результат.Путь);
		
		Пока ЧтениеXML.Прочитать() Цикл
			
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Имя = ЧтениеXML.Имя;								
			КонецЕсли;
			
			// Если на сайте НБКР не актуальные курсы на сегодня тогда "прерываем" чтение
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И Имя = "CurrencyRates" Тогда
				ДатаКурсовXML = ЧтениеXML.ПолучитьАтрибут("Date");
				ДатаКурса = СтроковыеФункцииКлиентСервер.СтрокаВДату(ДатаКурсовXML);
				
			//Валюта	
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И Имя = "Currency" Тогда 
				
				НаименованиеВалюты = ЧтениеXML.ПолучитьАтрибут("ISOCode");
				Валюта = Справочники.Валюты.НайтиПоНаименованию(НаименованиеВалюты);
				
				Если Валюта <> Справочники.Валюты.ПустаяСсылка() 
					И Валюта.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета Тогда
					
					ЗаписыватьВалюту = Истина;
				Иначе
					ЗаписыватьВалюту = Ложь;
				КонецЕсли;  				
				
			//Кратность	
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст И Имя = "Nominal" Тогда
				
				Кратность = КурсИзСтрокиНБКР(ЧтениеXML.Значение);
				
			//Курс	
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст И Имя = "Value" Тогда 				

				Курс = КурсИзСтрокиНБКР(ЧтениеXML.Значение);
				
				// Записываем в РС: КурсыВалют				
				Если ЗаписыватьВалюту Тогда
					ЗаписьКурсовВалют = РегистрКурсыВалют.СоздатьМенеджерЗаписи();
					
					ЗаписьКурсовВалют.Валюта    = Валюта;
					ЗаписьКурсовВалют.Период    = ДатаКурса;
					ЗаписьКурсовВалют.Курс      = Курс;
					ЗаписьКурсовВалют.Кратность = Кратность;
					ЗаписьКурсовВалют.Записать(); 					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
		
		ЧтениеXML.Закрыть();	
		
	Исключение
		ПоясняющееСообщение = СтрШаблон(НСтр("ru = 'Ошибка чтения XML файла с курсами валют: %1.'"), Результат.СообщениеОбОшибке);
		СтатусОперации = Ложь;
		ПриЗагрузкеВозниклиОшибки = Истина;
		
		СостояниеЗагрузки.Добавить(Новый Структура("Валюта,СтатусОперации,Сообщение","Основные валюты", СтатусОперации, ПоясняющееСообщение));
	КонецПопытки;
	
	// Не удаляем файл, так как может быть повторная загрузка в этот день.
	// файлы будут проанализированы и удалены только старые.
	УдалитьФайлы(Результат.Путь);
КонецПроцедуры

// Загрузка ежедневных курсов основных валют из EXCEL файла: dailyrus.xls
//
Процедура ЗагрузитьЕжедневныеКурсыОсновныхВалютИзEXCELФайла(СерверИсточник, 
		МассивВалют, 
		Знач НачалоПериодаЗагрузки, 
		Знач ОкончаниеПериодаЗагрузки, 
		ПриЗагрузкеВозниклиОшибки,
		ПрефиксИмениФайла,
		СостояниеЗагрузки)
		
	// Подготовка параметров.
	ПараметрыПолучения = Новый Структура;
	ПутьДляСохранения = КаталогВременныхФайлов();
	СоздатьКаталог(ПутьДляСохранения + "nbkr");
	ПутьДляСохранения = ПутьДляСохранения + "nbkr" + "\" + ПрефиксИмениФайла + "_" + "dailyrus.xls";
	ПараметрыПолучения.Вставить("ПутьДляСохранения", ПутьДляСохранения);
	
	// Проверим, возможно файл сегодня уже загружали.
	НайденныеФайлы = НайтиФайлы(ПутьДляСохранения);
	Если НайденныеФайлы.Количество() = 0 Тогда 	
		URL = СерверИсточник + "/EXCEL/dailyrus.xls";   
		Результат = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(URL, ПараметрыПолучения);
	Иначе
		Результат = Новый Структура("Статус, Путь", Истина, ПутьДляСохранения);	
	КонецЕсли;	

	Если НЕ Результат.Статус Тогда
		ПоясняющееСообщение = СтрШаблон(
				НСтр("ru = 'Невозможно получить файл данных с курсами валют.
				|%1
				|Возможно, нет доступа к веб сайту с курсами валют.'"),
				Результат.СообщениеОбОшибке);
		СтатусОперации = Ложь;
		ПриЗагрузкеВозниклиОшибки = Истина;
		
		СостояниеЗагрузки.Добавить(Новый Структура("Валюта,СтатусОперации,Сообщение","Основные валюты", СтатусОперации, ПоясняющееСообщение));
		Возврат;
	КонецЕсли; 
	
	// Файл разбит по годам		
	Для Каждого Валюта Из МассивВалют Цикл
		НачалоПериода = НачалоПериодаЗагрузки;
		Пока Год(НачалоПериода) <= Год(ОкончаниеПериодаЗагрузки) Цикл
			ПоясняющееСообщение = ЗагрузитьКурсВалютыИзФайлаНБК(Валюта, Результат.Путь, НачалоПериода, ОкончаниеПериодаЗагрузки, ПриЗагрузкеВозниклиОшибки);		
			
			Если ПриЗагрузкеВозниклиОшибки Тогда 
				СтатусОперации = Ложь;
			Иначе 			
				СтатусОперации = ПустаяСтрока(ПоясняющееСообщение);
			КонецЕсли;
			
			НачалоПериода = НачалоГода(ДобавитьМесяц(НачалоПериода, 12));
			
			СостояниеЗагрузки.Добавить(Новый Структура("Валюта,СтатусОперации,Сообщение", Валюта.Валюта, СтатусОперации, ПоясняющееСообщение));
		КонецЦикла;			
	КонецЦикла; 
		 
	// Не удаляем файл, так как может быть повторная загрузка в этот день.
	// файлы будут проанализированы и удалены только старые.
	УдалитьФайлы(Результат.Путь);
КонецПроцедуры

// Загрузка ежедневных курсов не основных валют из EXCEL файла: allvalsrus.xls
//
Процедура ЗагрузитьЕженедельныеКурсыНеОсновныхВалютИзEXCELФайла(СерверИсточник, 
		МассивВалют, 
		Знач НачалоПериодаЗагрузки, 
		Знач ОкончаниеПериодаЗагрузки, 
		ПриЗагрузкеВозниклиОшибки,
		ПрефиксИмениФайла,
		СостояниеЗагрузки)
		
	// Подготовка параметров.
	ПараметрыПолучения = Новый Структура;
	ПутьДляСохранения = КаталогВременныхФайлов();
	СоздатьКаталог(ПутьДляСохранения + "nbkr");
	ПутьДляСохранения = ПутьДляСохранения + "nbkr" + "\" + ПрефиксИмениФайла + "_" + "allvalsrus.xls";
	ПараметрыПолучения.Вставить("ПутьДляСохранения", ПутьДляСохранения);
	
	// Проверим, возможно файл сегодня уже загружали.
	НайденныеФайлы = НайтиФайлы(ПутьДляСохранения);
	Если НайденныеФайлы.Количество() = 0 Тогда 	
		URL = СерверИсточник + "/EXCEL/allvalsrus.xls"; 	
		Результат = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(URL, ПараметрыПолучения);
	Иначе 
		Результат = Новый Структура("Статус, Путь", Истина, ПутьДляСохранения);	
	КонецЕсли;	
	
	Если НЕ Результат.Статус Тогда
		ПоясняющееСообщение = СтрШаблон(
				НСтр("ru = 'Невозможно получить файл данных с курсами валют.
				|%1
				|Возможно, нет доступа к веб сайту с курсами валют.'"),
				Результат.СообщениеОбОшибке);
		СтатусОперации = Ложь;
		ПриЗагрузкеВозниклиОшибки = Истина;
		
		СостояниеЗагрузки.Добавить(Новый Структура("Валюта,СтатусОперации,Сообщение","Основные валюты", СтатусОперации, ПоясняющееСообщение));
		Возврат;
	КонецЕсли; 
	
	// Файл разбит по годам		
	Для Каждого Валюта Из МассивВалют Цикл
		НачалоПериода = НачалоПериодаЗагрузки;
		Пока Год(НачалоПериода) <= Год(ОкончаниеПериодаЗагрузки) Цикл
			ПоясняющееСообщение = ЗагрузитьКурсВалютыИзФайлаНБК(Валюта, Результат.Путь, НачалоПериода, ОкончаниеПериодаЗагрузки, ПриЗагрузкеВозниклиОшибки, Ложь);		
			
			Если ПриЗагрузкеВозниклиОшибки Тогда 
				СтатусОперации = Ложь;
			Иначе 			
				СтатусОперации = ПустаяСтрока(ПоясняющееСообщение);
			КонецЕсли;
			
			НачалоПериода = НачалоГода(ДобавитьМесяц(НачалоПериода, 12));
			
			СостояниеЗагрузки.Добавить(Новый Структура("Валюта,СтатусОперации,Сообщение", Валюта.Валюта, СтатусОперации, ПоясняющееСообщение));
		КонецЦикла;			
	КонецЦикла; 
		 
	// Не удаляем файл, так как может быть повторная загрузка в этот день.
	// файлы будут проанализированы и удалены только старые.
	УдалитьФайлы(Результат.Путь);
КонецПроцедуры    

// Загружает информацию о курсе валюты Валюта из файла ПутьКФайлу в регистр
// сведений курсов валют. При этом файл с курсами разбирается, и записываются
// только те данные, которые удовлетворяют периоду (НачалоПериодаЗагрузки, ОкончаниеПериодаЗагрузки).
//
Функция ЗагрузитьКурсВалютыИзФайлаНБК(Знач Валюта, Знач ПутьКФайлу, Знач НачалоПериодаЗагрузки, Знач ОкончаниеПериодаЗагрузки, ПриЗагрузкеВозниклиОшибки, Основные = Истина) Экспорт
	
	Если Основные Тогда 
		// Для основных валют 1 раз в день
		ЧислоЗагружаемыхДнейВсего = 1 + (ОкончаниеПериодаЗагрузки - НачалоПериодаЗагрузки) / ( 24 * 60 * 60);	
	Иначе 	
		// Для дополнительных валют без расчета
		ЧислоЗагружаемыхДнейВсего = 1;	
	КонецЕсли;	

	ЧислоЗагруженныхДней = 0;

	ИмяОбласти = "_" + Формат(Год(НачалоПериодаЗагрузки), "ЧГ=0");
	
	// Чтение файла
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Попытка
		ТабличныйДокумент.Прочитать(ПутьКФайлу);
	Исключение
		ПриЗагрузкеВозниклиОшибки = Истина;
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Невозможно прочитать файл данных с курсами валюты (%1 - %2).
				|Возможно, проблемы с Microsoft Excel.'"),
			Валюта.КодВалюты,
			Валюта.Валюта);
	КонецПопытки;
	
	// Получение области
	Попытка
		ТекущаяОбласть = ТабличныйДокумент.ПолучитьОбласть(ИмяОбласти); 
	Исключение
		ПриЗагрузкеВозниклиОшибки = Истина;
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Невозможно прочитать файл данных с курсами валюты (%1 - %2).
				|Возможно, за указанный период нет курсов валют на сайте nbkr.kg.'"),
			Валюта.КодВалюты,
			Валюта.Валюта);
	КонецПопытки;
	
	КонечнаяКолонка = ТекущаяОбласть.ПолучитьОбласть().ШиринаТаблицы;
	КодВалюты = Валюта.КодВалюты;
	СимвольныйКод = СимвольныйКодВалютыПоКоду(КодВалюты);
	ДатаЗапрета = Неопределено;
	
	// Обход строк со второй колонки, первая всегда дата	
	Для НомерКолонки = 2 По КонечнаяКолонка Цикл
		Если СимвольныйКод = Неопределено Тогда 
			Прервать;
		КонецЕсли;	
		
		Для НомерСтроки = 1 По ТекущаяОбласть.ВысотаТаблицы Цикл 
			Область = ТекущаяОбласть.ПолучитьОбласть("R" + НомерСтроки + "C" + НомерКолонки);
			Текст = СокрЛП(Область.ТекущаяОбласть.Текст);
			Если НЕ ЗначениеЗаполнено(Текст) Тогда 
				Прервать;
			КонецЕсли;	
			
			// Определение валюты
			Если НомерСтроки = 1 Тогда 
				Если СтрНайти(Текст, СимвольныйКод) = 0 Тогда
					Прервать;
				КонецЕсли;
				
				// Определение кратности
				Если СтрДлина(Текст) = 3 Тогда 
					КратностьСтр = "1";
				Иначе
					// Символьный код в конце наименования
					КратностьСтр = СокрЛП(СтрЗаменить(Текст, СимвольныйКод, "")); 
					КратностьСтр = КурсИзСтрокиНБКР(КратностьСтр);
					Если КратностьСтр = Неопределено Тогда 
						КратностьСтр = "1";
					КонецЕсли;	
				КонецЕсли;
				Продолжить; // переход к загрузке
			КонецЕсли;
			
			// Определение периода
			Область = ТекущаяОбласть.ПолучитьОбласть("R" + НомерСтроки + "C1");
			ДатаКурсаСтр = СокрЛП(Область.ТекущаяОбласть.Текст);
			
			// Определение курса
			Область = ТекущаяОбласть.ПолучитьОбласть("R" + НомерСтроки + "C" + НомерКолонки);
			КурсСтр = СтрЗаменить(СокрЛП(Область.ТекущаяОбласть.Текст), ",", "");
			Курс = КурсИзСтрокиНБКР(КурсСтр);
			Кратность = КурсИзСтрокиНБКР(КратностьСтр);
			
			Если НЕ ЗначениеЗаполнено(Курс) Тогда 
				Продолжить;
			КонецЕсли;	
			
			Если НачалоПериодаЗагрузки = ОкончаниеПериодаЗагрузки Тогда
				ДатаКурса = ОкончаниеПериодаЗагрузки;
			Иначе
				ДатаКурсаСтр = ДатаКурсаСтр;
				ДатаКурса = Дата("20" + Прав(ДатаКурсаСтр,2), Сред(ДатаКурсаСтр,4,2), Лев(ДатаКурсаСтр,2));
			КонецЕсли;
			
			Если ДатаКурса > ОкончаниеПериодаЗагрузки Тогда
				Прервать;
			КонецЕсли;
			
			Если ДатаКурса < НачалоПериодаЗагрузки Тогда 
				Продолжить;
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.КурсыВалют.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Валюта.Установить(Валюта.Валюта);
			НаборЗаписей.Отбор.Период.Установить(ДатаКурса);
			Запись = НаборЗаписей.Добавить();
			Запись.Валюта = Валюта.Валюта;
			Запись.Период = ДатаКурса;
			Запись.Курс = Курс;
			Запись.Кратность = Кратность;
			
			Записывать = Истина;
			Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДатыЗапретаИзменения") Тогда
				МодульДатыЗапретаИзмененияСлужебный = ОбщегоНазначения.ОбщийМодуль("ДатыЗапретаИзмененияСлужебный");
				Если МодульДатыЗапретаИзмененияСлужебный.ЗапретИзмененияПроверяется(Метаданные.РегистрыСведений.КурсыВалют) Тогда
					МодульДатыЗапретаИзменения = ОбщегоНазначения.ОбщийМодуль("ДатыЗапретаИзменения");
					Записывать = Не МодульДатыЗапретаИзменения.ИзменениеЗапрещено(НаборЗаписей);
					Если Не Записывать Тогда
						Если ДатаЗапрета = Неопределено Тогда
							ДатаЗапрета = ДатаКурса;
						Иначе
							ДатаЗапрета = Макс(ДатаЗапрета, ДатаКурса);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если Записывать Тогда
				НаборЗаписей.Записать();
			КонецЕсли;
			
			ЧислоЗагруженныхДней = ЧислоЗагруженныхДней + 1;
		КонецЦикла;	
	КонецЦикла;	
	
	ТабличныйДокумент = Неопределено;
	
	ПояснениеОЗагрузке = "";
	Если ЧислоЗагружаемыхДнейВсего > ЧислоЗагруженныхДней Тогда
		Если ЧислоЗагруженныхДней = 0 Тогда
			ПояснениеОЗагрузке = НСтр("ru = 'Курсы валюты %1 (%2) не загружены.
				|Нет сведение о курсе за указанный период.'");
		Иначе
			ПояснениеОЗагрузке = НСтр("ru = 'Загружены не все курсы по валюте %1 (%2).'");
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПояснениеОЗагрузке) Тогда
		ПояснениеОЗагрузке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПояснениеОЗагрузке, Валюта.Валюта, Валюта.КодВалюты);
	КонецЕсли;
	
	Если ДатаЗапрета <> Неопределено Тогда
		ПояснениеОЗагрузке = ПояснениеОЗагрузке + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Загрузка курсов валюты %1(%2) ограничена датой запрета изменений %3.
			|Курсы запрещенного периода были пропущены при загрузке.'"), Валюта.Валюта, Валюта.КодВалюты, Формат(ДатаЗапрета, "ДЛФ=D"));
	КонецЕсли;
	
	ПояснениеОЗагрузке = СокрЛП(ПояснениеОЗагрузке);
	
	СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
	СписокОшибок = Новый Массив;
	Для Каждого СообщениеПользователю Из СообщенияПользователю Цикл
		СписокОшибок.Добавить(СообщениеПользователю.Текст);
	КонецЦикла;
	СписокОшибок = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СписокОшибок);
	ПояснениеОЗагрузке = ПояснениеОЗагрузке + ?(ПустаяСтрока(ПояснениеОЗагрузке), "", Символы.ПС) + СтрСоединить(СписокОшибок, Символы.ПС);
	
	Возврат ПояснениеОЗагрузке;
КонецФункции

// Функция - Символьный код валюты по коду
//
// Параметры:
//  КодВалюты	 - Строка - код валюты
// 
// Возвращаемое значение:
//  Строка - Символьный код валюты
//
Функция СимвольныйКодВалютыПоКоду(КодВалюты)

	КлассификаторXML = Обработки["ЗагрузкаКурсовВалют"].ПолучитьМакет("ОбщероссийскийКлассификаторВалют").ПолучитьТекст();
	КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
	КлассификаторТаблица.Индексы.Добавить("Code");
	
	НайденнаяСтрока = КлассификаторТаблица.Найти(КодВалюты, "Code");
	Если НайденнаяСтрока <> Неопределено Тогда
		Возврат НайденнаяСтрока.CodeSymbol;	
	КонецЕсли;

	Возврат Неопределено;
КонецФункции // ИмяВалютыПоКоду()

// Предназначена для преобразования формата чисел, используемого в файле курсов валюты.
// Работает в любой локализации, не поддерживает отрицательные числа.
Функция КурсИзСтрокиНБКР(Знач Строка)
	
	Строка = СокрЛП(Строка);
	Строка = СтрЗаменить(Строка, ",", ".");
	ЧастиСтрокиМассив = СтрРазделить(Строка, ".", Истина);
	ЧастиСтроки = Новый Массив;
	
	// Удаление пустых частей.
	Для Каждого ЧастьСтроки Из ЧастиСтрокиМассив Цикл 
		Если ЗначениеЗаполнено(ЧастьСтроки) Тогда 	
			ЧастиСтроки.Добавить(ЧастьСтроки);	
		КонецЕсли;	
	КонецЦикла;	
	
	Если Строка = "" Или ЧастиСтроки.Количество() > 2 Тогда
		ВызватьИсключение НСтр("ru = 'Преобразование значения к типу Число не может быть выполнено.'");
	КонецЕсли;
	
	ДлинаДробнойЧасти = 0;
	Если ЧастиСтроки.Количество() > 1 Тогда
		ДлинаДробнойЧасти = СтрДлина(ЧастиСтроки[1]);
	КонецЕсли;
	
	Строка = СтрСоединить(ЧастиСтроки, "");
	Результат = 0;
	Если Строка <> "" Тогда
		Результат = Число(Строка) / Pow(10, ДлинаДробнойЧасти);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли