#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("СтруктураДанных") Тогда
		//Если Параметры.СтруктураДанных.Свойство("ГруппаНУ") Тогда
		// 	Объект.ГруппаНУ = Параметры.СтруктураДанных.ГруппаНУ;
		//КонецЕсли;
		//
		//Если Параметры.СтруктураДанных.Свойство("ОсновноеСредство") Тогда
		// 	Объект.ОсновноеСредство = Параметры.СтруктураДанных.ОсновноеСредство;
		//КонецЕсли;	
		
		Если Параметры.СтруктураДанных.Свойство("Организация") Тогда
		 	Объект.Организация = Параметры.СтруктураДанных.Организация;
		Иначе
			Объект.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");		
		КонецЕсли;
		
		Если Параметры.СтруктураДанных.Свойство("Дата") Тогда
		 	Объект.Дата = Параметры.СтруктураДанных.Дата;
		Иначе
			Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				"МониторНалогаНаПрибыль", 
				"Дата");
			Если ЗначениеЗаполнено(Значение) Тогда
				Объект.Дата = Значение;
			Иначе
				Объект.Дата = НачалоГода(ТекущаяДата());
			КонецЕсли;			
		КонецЕсли;
		
		Если Параметры.СтруктураДанных.Свойство("ИмяТабличнойЧасти") И Параметры.СтруктураДанных.ИмяТабличнойЧасти = "НалоговаяВыверка" Тогда
		 	ИмяАктивнойЗакладки = "НалоговаяВыверка";
		Иначе
			ИмяАктивнойЗакладки = "НалоговаяАмортизация";	
		КонецЕсли;		
	
	Иначе
		Объект.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		//Объект.Дата = НачалоГода(ТекущаяДата());
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"МониторНалогаНаПрибыль", 
			"Дата");
		Если ЗначениеЗаполнено(Значение) Тогда
			Объект.Дата = Значение;
		Иначе
			Объект.Дата = НачалоГода(ТекущаяДата());
		КонецЕсли;		
	    ИмяАктивнойЗакладки = "НалоговаяАмортизация";
	КонецЕсли;

	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(Объект.Дата, Объект.Организация);
	ПараметрыДокументаЗакрытиеМесяца = ПараметрыДокументаЗакрытиеМесяца(Объект.Дата);
	ЗаполнитьЗначенияСвойств(Объект, ПараметрыДокументаЗакрытиеМесяца, "ПредельнаяНормаНаРемонтОС, МинимальнаяСтоимостьГруппыОС");
	
	ЗаполнитьДанныеМонитора();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если НЕ ЗавершениеРаботы Тогда
		СохранитьНастройки();	
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьТабличныеЧасти(Команда)
	ОчиститьТабличныеЧасти();
	ПараметрыДокументаЗакрытиеМесяца = ПараметрыДокументаЗакрытиеМесяца(Объект.Дата);	
	ЗаполнитьТабличныеЧастиНалоговойАмортизации();	
	ЗаполнитьТабличныеЧастиЕдинойНалоговойДекларации();
	ЗаполнитьТабличныеЧастиПоНалоговойВыверке();
	ЗаполнитьСверку();
	
	Если ЗначениеЗаполнено(Объект.НастройкаЕНД) Тогда
		ПроверитьНастройкиЕНД();
	КонецЕсли;	
	
	УстановитьПараметрыДинамическихСписков();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(Объект.Дата, Объект.Организация);
	
	ЗаполнитьНастройки();
	УстановитьПараметрыДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	Объект.Дата = НачалоМесяца(Объект.Дата);
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(Объект.Дата, Объект.Организация);
	
	ОчиститьТабличныеЧасти();
	ЗаполнитьДанныеМонитора();
КонецПроцедуры

&НаКлиенте
Процедура ВсеСтрокиРасшифровкиЕНДПриИзменении(Элемент)
	//Если ВсеСтрокиРасшифровкиЕНД Тогда
	// 	Элементы.ЕдинаяНалоговаяДекларацияРасшифровка.ОтборСтрок = Неопределено;
	//Иначе
	//	БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "ЕдинаяНалоговаяДекларацияРасшифровка");
	//КонецЕсли;
	//Если ВсеСтрокиРасшифровкиЕНД Тогда
	// 	Элементы.ЕдинаяНалоговаяДекларацияРасшифровка.ОтборСтрок = Неопределено;
	//Иначе
	//	БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "ЕдинаяНалоговаяДекларацияРасшифровка");
	//КонецЕсли;
	УстановитьУсловноеОформление();
	ЗаполнитьТабличныеЧастиЕдинойНалоговойДекларации();
	ЗаполнитьСверку();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличныхЧастейФормы

&НаКлиенте
Процедура НалоговаяВыверкаИтоги01ПриАктивизацииСтроки(Элемент)
	СтрокаТабличнойЧасти = Элементы.НалоговаяВыверкаИтоги01.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Элементы.НалоговаяВыверка01.ОтборСтрок = Неопределено;	
	Иначе
		Элементы.НалоговаяВыверка01.ОтборСтрок = Новый ФиксированнаяСтруктура("Счет", СтрокаТабличнойЧасти.Счет);
	КонецЕсли;		 
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяВыверкаИтоги02ПриАктивизацииСтроки(Элемент)
	СтрокаТабличнойЧасти = Элементы.НалоговаяВыверкаИтоги02.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Элементы.НалоговаяВыверка02.ОтборСтрок = Неопределено;	
	Иначе
		Элементы.НалоговаяВыверка02.ОтборСтрок = Новый ФиксированнаяСтруктура("Счет", СтрокаТабличнойЧасти.Счет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяВыверкаИтоги04ПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.НалоговаяВыверкаИтоги04.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Элементы.НалоговаяВыверка04.ОтборСтрок = Неопределено;	
	Иначе
		Элементы.НалоговаяВыверка04.ОтборСтрок = Новый ФиксированнаяСтруктура("Счет", СтрокаТабличнойЧасти.Счет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяВыверкаИтоги05ПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.НалоговаяВыверкаИтоги05.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Элементы.НалоговаяВыверка05.ОтборСтрок = Неопределено;	
	Иначе
		Элементы.НалоговаяВыверка05.ОтборСтрок = Новый ФиксированнаяСтруктура("Счет", СтрокаТабличнойЧасти.Счет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяВыверкаИтоги11ПриАктивизацииСтроки(Элемент)
	СтрокаТабличнойЧасти = Элементы.НалоговаяВыверкаИтоги11.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Элементы.НалоговаяВыверка11.ОтборСтрок = Неопределено;	
	Иначе
		Элементы.НалоговаяВыверка11.ОтборСтрок = Новый ФиксированнаяСтруктура("СчетДт, СчетКт", СтрокаТабличнойЧасти.СчетДт, СтрокаТабличнойЧасти.СчетКт);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяВыверкаИтоги13ПриАктивизацииСтроки(Элемент)
	СтрокаТабличнойЧасти = Элементы.НалоговаяВыверкаИтоги13.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Элементы.НалоговаяВыверка13.ОтборСтрок = Неопределено;	
	Иначе
		Элементы.НалоговаяВыверка13.ОтборСтрок = Новый ФиксированнаяСтруктура("Счет", СтрокаТабличнойЧасти.Счет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяВыверкаИтоги19ПриАктивизацииСтроки(Элемент)
	СтрокаТабличнойЧасти = Элементы.НалоговаяВыверкаИтоги19.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Элементы.НалоговаяВыверка19.ОтборСтрок = Неопределено;	
	Иначе
		Элементы.НалоговаяВыверка19.ОтборСтрок = Новый ФиксированнаяСтруктура("Счет", СтрокаТабличнойЧасти.Счет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СверкаСЕНДПриАктивизацииСтроки(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.СверкаСЕНД.ТекущиеДанные;
	
	Элементы.СверкаСЕНДРасшифровка.ОтборСтрок = Новый ФиксированнаяСтруктура("Счет", СтрокаТабличнойЧасти.Счет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдинаяНалоговаяДекларацияРасшифровкаПоДокументамПередНачаломИзменения(Элемент, Отказ)
	ПоказатьЗначение(, Элемент.ТекущиеДанные.Регистратор);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура установки значений параметров динамических списков.
//
// Параметры:
//	ИзменилосьОС - Булево - проверка изменения значения реквизита "ОсновноеСредство".
//
&НаКлиенте
Процедура УстановитьПараметрыДинамическихСписков()
	
	// РасшифровкаЕНД
	ЕдинаяНалоговаяДекларацияРасшифровкаПоДокументам.Параметры.УстановитьЗначениеПараметра("НачалоПериода", НачалоГода(Объект.Дата));
	ЕдинаяНалоговаяДекларацияРасшифровкаПоДокументам.Параметры.УстановитьЗначениеПараметра("КонецПериода", КонецГода(Объект.Дата));
	ЕдинаяНалоговаяДекларацияРасшифровкаПоДокументам.Параметры.УстановитьЗначениеПараметра("Организация", Объект.Организация);
	
	
	//СтрокаТабличнойЧасти = Элементы.ЕдинаяНалоговаяДекларацияСтрокиОтчета.ТекущиеДанные;
	//Если СтрокаТабличнойЧасти = Неопределено Тогда
	//	ЕдинаяНалоговаяДекларацияРасшифровкаПоДокументам.Параметры.УстановитьЗначениеПараметра("СчетаРасшифровки", "");
	//	Возврат;
	//КонецЕсли;
	
	МассивСчетов = Новый Массив;
	СтрокаТабличнойЧасти = Элементы.ЕдинаяНалоговаяДекларацияРасшифровка.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		ЕдинаяНалоговаяДекларацияРасшифровкаПоДокументам.Параметры.УстановитьЗначениеПараметра("СчетаРасшифровки", "");
		Возврат;
	Иначе
		МассивСчетов.Добавить(СтрокаТабличнойЧасти.СчетУчета);
	КонецЕсли;
	
	
	//МассивСчетов = Новый Массив;	
	//СтруктураОтбора = Новый Структура;
	//СтруктураОтбора.Вставить("КодСтроки", СтрокаТабличнойЧасти.КодСтроки);
	//СтрокиРасшифровки = Объект.ЕдинаяНалоговаяДекларацияРасшифровка.НайтиСтроки(СтруктураОтбора);	
	//Для каждого Элемент Из СтрокиРасшифровки Цикл
	//	МассивСчетов.Добавить(Элемент.СчетУчета);	
	//КонецЦикла;
	
	ЕдинаяНалоговаяДекларацияРасшифровкаПоДокументам.Параметры.УстановитьЗначениеПараметра("СчетаРасшифровки", МассивСчетов);
	
КонецПроцедуры

// Процедура настройки условного оформления форм и динамических списков .
//
&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// Таблица РасшифровкаОборотов.
	Если НЕ ВсеСтрокиРасшифровкиЕНД Тогда 
		Элемент = УсловноеОформление.Элементы.Добавить();

		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ЕдинаяНалоговаяДекларацияСтрокиОтчетаКодСтроки");
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ЕдинаяНалоговаяДекларацияСтрокиОтчетаНаименованиеСтроки");
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ЕдинаяНалоговаяДекларацияСтрокиОтчетаСумма");
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЕдинаяНалоговаяДекларацияСтрокиОтчета.Сумма");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = 0;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);				
	КонецЕсли;	

	// Таблица НалоговаяВыверка.
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НалоговаяВыверкаКодСтроки");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НалоговаяВыверкаНаименованиеСтроки");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НалоговаяВыверкаСумма");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НалоговаяВыверкаДоходы");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НалоговаяВыверкаРасходы");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НалоговаяВыверкаДокумент");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НалоговаяВыверка.ИзменитьЦветФона");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.БыстрыеОтборыФонГруппы);
	
	// Таблица Сверка с ЕНД.
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СверкаСЕНДНомерСтроки");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СверкаСЕНДСчет");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СверкаСЕНДСчетНаименование");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СверкаСЕНДСуммаНВ");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СверкаСЕНДСуммаЕНД");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СверкаСЕНДОтклонение");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СверкаСЕНД.ИзменитьЦветФона");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.АльтернативныйЦветФонаПоля);
	
КонецПроцедуры

// Процедура - рассчитать налоговую амортизацию в мониторе.
//
&НаСервере
Процедура ЗаполнитьТабличныеЧастиНалоговойАмортизации()
	// Суммы поступления и выбытия
	ТекстЗапроса = РасчетНалогаНаПрибыльСервер.ТекстЗапросаПоРасчетуНалоговойАмортизацииВМонитореНП();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Организация", 		Объект.Организация);
	Запрос.УстановитьПараметр("НачалоПрошлогоГода", НачалоГода(НачалоГода(Объект.Дата)-1));
	Запрос.УстановитьПараметр("НачалоГода", 		НачалоГода(Объект.Дата));
	Запрос.УстановитьПараметр("КонецГода", 			КонецГода(Объект.Дата));
	//Запрос.УстановитьПараметр("ГруппаНУ", 			Объект.ГруппаНУ);
	//Запрос.УстановитьПараметр("ОсновноеСредство", 	Объект.ОсновноеСредство);	
	Запрос.УстановитьПараметр("ГруппаНУ", Справочники.ГруппыНалоговогоУчетаОС.ПустаяСсылка());
	Запрос.УстановитьПараметр("ОсновноеСредство", Справочники.ОсновныеСредства.ПустаяСсылка());
	Запрос.УстановитьПараметр("МинимумСтоимостиОСДляНУ", ДанныеУчетнойПолитики.МинимумСтоимостиОСДляНУ);
	
	МассивСчетовЗатратНаРемонтОС = Новый Массив();
	МассивСчетовЗатратНаРемонтОС.Добавить(ПланыСчетов.Хозрасчетный.ЗатратыНаРемонтИОбслуживаниеОсновныхСредств); // 7160
	МассивСчетовЗатратНаРемонтОС.Добавить(ПланыСчетов.Хозрасчетный.РемонтИОбслуживаниеОсновныхСредств); // 8110
	Запрос.УстановитьПараметр("СчетаЗатратНаРемонтОС",	МассивСчетовЗатратНаРемонтОС);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.СуммаПоступления <> 0 ИЛИ Выборка.СуммаПоступленияНУ <> 0 Тогда
			НоваяСтрока = Объект.НалоговаяАмортизацияПоступление.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);		
		ИначеЕсли Выборка.СуммаВыбытия <> 0 ИЛИ Выборка.СуммаВыбытияНУ <> 0 Тогда
			НоваяСтрока = Объект.НалоговаяАмортизацияВыбытие.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		ИначеЕсли Выборка.ЗатратыНаРемонт <> 0 Тогда
			НоваяСтрока = Объект.НалоговаяАмортизацияЗатратыНаРемонт.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);		
		КонецЕсли;
			
	КонецЦикла;
	
	ЗаполнитьНалоговаяАмортизацияЗакрытиеМесяца();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНалоговаяАмортизацияЗакрытиеМесяца()
	
	ТекстЗапроса = РасчетНалогаНаПрибыльСервер.ТекстЗапросаПоРасчетуНалоговойАмортизацииВДокументеЗакрытиеМесяца();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("НачалоПрошлогоГода", НачалоГода(НачалоГода(Объект.Дата)-1));
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода(Объект.Дата));
	Запрос.УстановитьПараметр("КонецГода", КонецГода(Объект.Дата));
	Запрос.УстановитьПараметр("ГруппаНУ", Справочники.ГруппыНалоговогоУчетаОС.ПустаяСсылка());
	Запрос.УстановитьПараметр("ОсновноеСредство", Справочники.ОсновныеСредства.ПустаяСсылка());
	Запрос.УстановитьПараметр("МинимумСтоимостиОСДляНУ", ДанныеУчетнойПолитики.МинимумСтоимостиОСДляНУ);
	//Запрос.УстановитьПараметр("ГруппаНУ", 			Объект.ГруппаНУ);
	//Запрос.УстановитьПараметр("ОсновноеСредство", 	Объект.ОсновноеСредство);
	
	МассивСчетовЗатратНаРемонтОС = Новый Массив();
	МассивСчетовЗатратНаРемонтОС.Добавить(ПланыСчетов.Хозрасчетный.ЗатратыНаРемонтИОбслуживаниеОсновныхСредств); // 7160
	МассивСчетовЗатратНаРемонтОС.Добавить(ПланыСчетов.Хозрасчетный.РемонтИОбслуживаниеОсновныхСредств); // 8110
	Запрос.УстановитьПараметр("СчетаЗатратНаРемонтОС",	МассивСчетовЗатратНаРемонтОС);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	КомментарийПоНалоговойАмортизации = "";
		
	// Заполнение налоговой амортизации.
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СтрокаТабличнойЧасти = Объект.НалоговаяАмортизация.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаДетальныеЗаписи);
		
		СтрокаТабличнойЧасти.БалансоваяСтоимостьНаНачалоГода = ВыборкаДетальныеЗаписи.БалансоваяСтоимостьНаКонецПрошлыйГод - ВыборкаДетальныеЗаписи.АмортизацияЗаПрошлыйГод;
		
		// Норма на ремонт 15%, если не укладываемся, то превышение идет на увеличение балансовой стоимости.
		Если НЕ ВыборкаДетальныеЗаписи.ЗатратыНаРемонт = 0 Тогда 
			СтрокаТабличнойЧасти.НормаНаРемонт = СтрокаТабличнойЧасти.БалансоваяСтоимостьНаНачалоГода * Объект.ПредельнаяНормаНаРемонтОС / 100;	
		КонецЕсли;			
		
		// Превышение нормы на ремонт.
		Если ВыборкаДетальныеЗаписи.ЗатратыНаРемонт > СтрокаТабличнойЧасти.НормаНаРемонт Тогда 
			СтрокаТабличнойЧасти.ПревышениеНормыНаРемонт = ВыборкаДетальныеЗаписи.ЗатратыНаРемонт - СтрокаТабличнойЧасти.НормаНаРемонт;	
		КонецЕсли;
		
		// Балансовая стоимость группы расчетная.
		СтрокаТабличнойЧасти.БалансоваяСтоимостьНаКонецГода = СтрокаТабличнойЧасти.БалансоваяСтоимостьНаНачалоГода
			+ ВыборкаДетальныеЗаписи.СуммаПоступленияНУ
			+ ВыборкаДетальныеЗаписи.СуммаПоступленияОстатокПрошлыйГод
			- ВыборкаДетальныеЗаписи.СуммаВыбытияНУ
			- ВыборкаДетальныеЗаписи.СуммаВыбытияОстатокПрошлыйГод
			+ СтрокаТабличнойЧасти.ПревышениеНормыНаРемонт;
	                                  		
		СтрокаТабличнойЧасти.БалансоваяСтоимостьИтого = СтрокаТабличнойЧасти.БалансоваяСтоимостьНаКонецГода;
				
		// Проверяем ОС группы 5 больше 20 лет, находящихся на учете.
		СтрокаТабличнойЧасти.КоличествоЛетЭксплуатации = 0;	
		Если ВыборкаДетальныеЗаписи.ГруппаНУ = Справочники.ГруппыНалоговогоУчетаОС.Группа5
			И НЕ ВыборкаДетальныеЗаписи.КоличествоВГруппах = 0 Тогда 
			
			// Проверка указания даты принятия к учету.
			Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ДатаВводаВЭксплуатацию) 
				И ВыборкаДетальныеЗаписи.СуммаВыбытияОстатокПрошлыйГод = 0 Тогда 				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Для ОС ""%1"" не указана дата принятия к учету.'"), ВыборкаДетальныеЗаписи.ОсновноеСредство.Наименование);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			// Расчет количества лет эксплуатации.
			СтрокаТабличнойЧасти.КоличествоЛетЭксплуатации = Год(Объект.Дата) - Год(ВыборкаДетальныеЗаписи.ДатаВводаВЭксплуатацию);	
			
			// Проверка заполнения базы для расчета прямолинейной амортизации.
			БазаПрямолинейнойАмортизацииПрошлыйГод = 0;
			Если СтрокаТабличнойЧасти.КоличествоЛетЭксплуатации > 20 
				И ВыборкаДетальныеЗаписи.БазаПрямолинейнойАмортизацииПрошлыйГод = 0 Тогда 
				БазаПрямолинейнойАмортизацииПрошлыйГод = СтрокаТабличнойЧасти.БалансоваяСтоимостьНаНачалоГода;
			КонецЕсли;		
			
			// БазаПрямолинейнойАмортизации = База прошлого года + СуммаПоступления + ПревышениеЗатратНаРемонт
			СтрокаТабличнойЧасти.БазаПрямолинейнойАмортизации = БазаПрямолинейнойАмортизацииПрошлыйГод
				+ ВыборкаДетальныеЗаписи.СуммаПоступления
				+ СтрокаТабличнойЧасти.ПревышениеНормыНаРемонт;
		КонецЕсли;			
		
		КомментарийПоНалоговойАмортизации = "";
		
		// Расчет амортизации и вычетов.
		// Проверка балансовой стоимости меньше нуля
		Если СтрокаТабличнойЧасти.БалансоваяСтоимостьНаКонецГода < 0 Тогда 
						
			СтрокаТабличнойЧасти.УвеличениеСОД = - СтрокаТабличнойЧасти.БалансоваяСтоимостьНаКонецГода;			
			СтрокаТабличнойЧасти.БалансоваяСтоимостьИтого = 0;
			СтрокаТабличнойЧасти.Амортизация = 0;
			
			ДобавитьКомментарийПоНалоговойАмортизации("КомментарийНА_1", КомментарийПоНалоговойАмортизации, СтрокаТабличнойЧасти, ВыборкаДетальныеЗаписи);
			
		// Проверка балансовой стоимости на меньше 100 РП.
		ИначеЕсли СтрокаТабличнойЧасти.БалансоваяСтоимостьНаКонецГода < Объект.МинимальнаяСтоимостьГруппыОС Тогда 
			
			СтрокаТабличнойЧасти.ВычетМеньше100РП = СтрокаТабличнойЧасти.БалансоваяСтоимостьНаКонецГода;			
			СтрокаТабличнойЧасти.БалансоваяСтоимостьИтого = 0;			
			СтрокаТабличнойЧасти.Амортизация = СтрокаТабличнойЧасти.БалансоваяСтоимостьНаКонецГода;
			
			ДобавитьКомментарийПоНалоговойАмортизации("КомментарийНА_2", КомментарийПоНалоговойАмортизации, СтрокаТабличнойЧасти, ВыборкаДетальныеЗаписи);
			
		// Проверка на нулевое количество группы.
		ИначеЕсли ВыборкаДетальныеЗаписи.КоличествоВГруппах = 0 
			И НЕ СтрокаТабличнойЧасти.ГруппаНУ = Справочники.ГруппыНалоговогоУчетаОС.Группа5 Тогда 
			
			ДобавитьКомментарийПоНалоговойАмортизации("КомментарийНА_3", КомментарийПоНалоговойАмортизации, СтрокаТабличнойЧасти, ВыборкаДетальныеЗаписи);
			
			СтрокаТабличнойЧасти.Амортизация = СтрокаТабличнойЧасти.БалансоваяСтоимостьНаКонецГода;			
			СтрокаТабличнойЧасти.БалансоваяСтоимостьИтого = 0;			
			
		// Проверка на нулевое количество ОС группы 5.
		ИначеЕсли НЕ СтрокаТабличнойЧасти.ОсновноеСредство.Пустая()
			И ВыборкаДетальныеЗаписи.КоличествоВГруппах = 0 Тогда
			
			ДобавитьКомментарийПоНалоговойАмортизации("КомментарийНА_3", КомментарийПоНалоговойАмортизации, СтрокаТабличнойЧасти, ВыборкаДетальныеЗаписи);
			
			СтрокаТабличнойЧасти.Амортизация = СтрокаТабличнойЧасти.БалансоваяСтоимостьНаКонецГода;			
			СтрокаТабличнойЧасти.БалансоваяСтоимостьИтого = 0;			
			
		// Расчет амортизация для ОС группы 5.
		ИначеЕсли СтрокаТабличнойЧасти.КоличествоЛетЭксплуатации > 20 Тогда 
			СтрокаТабличнойЧасти.Амортизация = СтрокаТабличнойЧасти.БазаПрямолинейнойАмортизации * ВыборкаДетальныеЗаписи.НормаАмортизацииДополнительная / 100;
			
		// Обычный расчет.	
		Иначе
			СтрокаТабличнойЧасти.Амортизация = СтрокаТабличнойЧасти.БалансоваяСтоимостьНаКонецГода * СтрокаТабличнойЧасти.НормаАмортизации / 100;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.УвеличениеСтоимости = ВыборкаДетальныеЗаписи.СуммаПоступления;
		СтрокаТабличнойЧасти.УвеличениеСтоимостиНУ = ВыборкаДетальныеЗаписи.СуммаПоступленияНУ;
		СтрокаТабличнойЧасти.ПоступлениеПрошлыйГод = ВыборкаДетальныеЗаписи.СуммаПоступленияОстатокПрошлыйГод;
		СтрокаТабличнойЧасти.ВыбытиеПрошлыйГод = ВыборкаДетальныеЗаписи.СуммаВыбытияОстатокПрошлыйГод;
		
		СтрокаТабличнойЧасти.ПоступлениеБудущийГод = СтрокаТабличнойЧасти.УвеличениеСтоимости - СтрокаТабличнойЧасти.УвеличениеСтоимостиНУ;
		СтрокаТабличнойЧасти.ВыбытиеБудущийГод = СтрокаТабличнойЧасти.СуммаВыбытия - СтрокаТабличнойЧасти.СуммаВыбытияНУ;
	
		СтрокаТабличнойЧасти.Комментарий = КомментарийПоНалоговойАмортизации;
		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомментарийПоНалоговойАмортизации(ВидКомментария, КомментарийПоНалоговойАмортизации, СтрокаТабличнойЧасти, ВыборкаДетальныеЗаписи)
	Строка = "";
	Если ВидКомментария = "КомментарийНА_1" Тогда
		Строка = СтрШаблон(НСтр("ru = 'Балансовая стоимость = %1, т.е. меньше 0. Налоговая амортизация = 0, Увеличение СОД = %2, Балансовая стоимость = 0'"), 
					СтрокаТабличнойЧасти.БалансоваяСтоимостьНаКонецГода,
					СтрокаТабличнойЧасти.УвеличениеСОД);
	    Строка = Строка + Символы.ПС;
		
	ИначеЕсли ВидКомментария = "КомментарийНА_2" Тогда
		Строка = СтрШаблон(НСтр("ru = 'Балансовая стоимость = %1, т.е. меньше мин. стоимости группы ОС %2. Налоговая амортизация = %1, Балансовая стоимость = 0'"), 					
					СтрокаТабличнойЧасти.БалансоваяСтоимостьНаКонецГода,
					Объект.МинимальнаяСтоимостьГруппыОС);
	    Строка = Строка + Символы.ПС;	
				
	ИначеЕсли ВидКомментария = "КомментарийНА_3" Тогда
		Строка = СтрШаблон(НСтр("ru = 'Количество ОС = 0. Налоговая амортизация = %1, Балансовая стоимость = 0'"), 
					СтрокаТабличнойЧасти.БалансоваяСтоимостьНаКонецГода);
	    Строка = Строка + Символы.ПС;
						
	//ИначеЕсли ВидКомментария = "КомментарийНА_4" Тогда
	//	Строка = СтрШаблон(НСтр("ru = 'Балансовая стоимость итого = 0, Сумма выбытия = %1'"), 
	//				СтрокаТабличнойЧасти.СуммаВыбытия);
	//    Строка = Строка + Символы.ПС;		
		
	КонецЕсли;
	
	КомментарийПоНалоговойАмортизации = КомментарийПоНалоговойАмортизации + Строка;	

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыДокументаЗакрытиеМесяца(Дата)
	Параметры = Новый Структура();
	Параметры.Вставить("ЕстьДокументЗакрытиеМесяца",	 			Ложь);
	Параметры.Вставить("Ссылка", 									Неопределено);
	Параметры.Вставить("ПредельнаяНормаНаРемонтОС", 				0);
	Параметры.Вставить("МинимальнаяСтоимостьГруппыОС", 				0);
	Параметры.Вставить("НеФормироватьПроводкиПоОтсроченнымАктивам", Ложь);
	Параметры.Вставить("НеФормироватьПроводкиПоОтсроченнымАктивам", Ложь);
	Параметры.Вставить("СуммаРасходовНаККМ", 						0);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИСТИНА КАК ЕстьДокументЗакрытиеМесяца,
		|	ЗакрытиеМесяца.Ссылка КАК Ссылка,
		|	ЗакрытиеМесяца.ПредельнаяНормаНаРемонтОС КАК ПредельнаяНормаНаРемонтОС,
		|	ЗакрытиеМесяца.МинимальнаяСтоимостьГруппыОС КАК МинимальнаяСтоимостьГруппыОС,
		|	ЗакрытиеМесяца.НеФормироватьОтсроченныеПроводки КАК НеФормироватьПроводкиПоОтсроченнымАктивам,
		|	ЗакрытиеМесяца.СуммаРасходовНаККМ КАК СуммаРасходовНаККМ
		|ИЗ
		|	Документ.ЗакрытиеМесяца КАК ЗакрытиеМесяца
		|ГДЕ
		|	ЗакрытиеМесяца.Дата = КОНЕЦПЕРИОДА(&Дата, ГОД)
		|	И ЗакрытиеМесяца.Проведен";
			
	Запрос.УстановитьПараметр("Дата", КонецГода(Дата));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Параметры, ВыборкаДетальныеЗаписи);
	КонецЕсли;
	
	Возврат Параметры; 	

КонецФункции // ЕстьДокументЗакрытиеМесяца()

// Процедура - рассчитать налоговую амортизацию в мониторе.
//
&НаСервере
Процедура ЗаполнитьТабличныеЧастиПоНалоговойВыверке()
	Если НЕ ПараметрыДокументаЗакрытиеМесяца.ЕстьДокументЗакрытиеМесяца Тогда
		СтрокаСообщения = СтрШаблон(НСтр("ru = 'Нет проведенного документа ""Закрытие месяца"" на дату %1. Расшифровка по налоговй выверке не может быть показана.'"), Формат(Объект.Дата, "ДЛФ=D"));
		ОбщегоНазначения.СообщитьПользователю(СтрокаСообщения);
		Возврат;
	КонецЕсли;
	ДокументЗакрытиеМесяца = ПараметрыДокументаЗакрытиеМесяца.Ссылка;
	
	ТекстЗапроса = РасчетНалогаНаПрибыльСервер.ТекстЗапросаПоРасчетуНалоговойВыверки();
	
	СчетаУчетаИсключения = Новый Массив;
	СчетаУчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.РасходыНаАмортизациюОсновныхСредств);	
	
	// 1. Получение суммы доходов.
	// 2. Получение суммы раходов.
	// 3. Получение суммы постоянной разницы доходы.
	// 4. Получение суммы постоянной разницы расходы.
	// 5. Получение суммы амортизации ОС.
	// 6. Получение суммы временной разницы (расходы - доходы).
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(Объект.Дата));
	Запрос.УстановитьПараметр("КонецПериода", КонецГода(Объект.Дата));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("СчетаУчетаИсключения", СчетаУчетаИсключения);	
	// для получения данных из РС ПлатежиПоНалогуНаПрибыль 
	Запрос.УстановитьПараметр("Период3кв", НачалоКвартала(КонецГода(Объект.Дата))-1);
	Запрос.УстановитьПараметр("ТекущийГод", Год(Объект.Дата));

	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();             
	
	// Суммы КР – доходы/расходы
	СуммаДоходы 	= 0;
	СуммаРасходы 	= 0;	
	Если НЕ МассивРезультатовЗапроса[8].Пустой() Тогда 
		ВыборкаДетальныхЗаписей = МассивРезультатовЗапроса[8].Выбрать();
		Пока ВыборкаДетальныхЗаписей.Следующий() Цикл
			СтрокаНалоговойВыверки = Объект.НалоговаяВыверка19.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНалоговойВыверки, ВыборкаДетальныхЗаписей);
			СтрокаНалоговойВыверки.Доходы = ВыборкаДетальныхЗаписей.Сумма;
			СуммаДоходы = СуммаДоходы + СтрокаНалоговойВыверки.Доходы;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ МассивРезультатовЗапроса[9].Пустой() Тогда 
		ВыборкаДетальныхЗаписей = МассивРезультатовЗапроса[9].Выбрать();
		Пока ВыборкаДетальныхЗаписей.Следующий() Цикл
			СтрокаНалоговойВыверки = Объект.НалоговаяВыверка19.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНалоговойВыверки, ВыборкаДетальныхЗаписей);
			СтрокаНалоговойВыверки.Расходы = ВыборкаДетальныхЗаписей.Сумма;
			СуммаРасходы = СуммаРасходы + СтрокаНалоговойВыверки.Расходы;
		КонецЦикла;		
	КонецЕсли;
	
	ТаблицаЗначений = Объект.НалоговаяВыверка19.Выгрузить(,"Счет,Сумма,Доходы,Расходы");		
	ТаблицаЗначений.Свернуть("Счет", "Сумма,Доходы,Расходы");
	ТаблицаЗначений.Сортировать("Счет");
	Объект.НалоговаяВыверкаИтоги19.Загрузить(ТаблицаЗначений);
	
	// Превышение КР
	Если СуммаДоходы - СуммаРасходы > 0 Тогда
		СуммаДоходыПревышение = СуммаДоходы - СуммаРасходы;
		СуммаРасходыПревышение = 0;
	Иначе
		СуммаДоходыПревышение = 0;
		СуммаРасходыПревышение = СуммаРасходы - СуммаДоходы;
	КонецЕсли;	
	
	// 1. Доходы по бухгалтерскому учету.
	СуммаДоходыБУ = 0;
	Если НЕ МассивРезультатовЗапроса[0].Пустой() Тогда 
		ВыборкаДетальныхЗаписей = МассивРезультатовЗапроса[0].Выбрать();
		Пока ВыборкаДетальныхЗаписей.Следующий() Цикл
			СтрокаНалоговойВыверки = Объект.НалоговаяВыверка01.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНалоговойВыверки, ВыборкаДетальныхЗаписей);
		КонецЦикла;
		
		СуммаДоходыБУ = Объект.НалоговаяВыверка01.Итог("Сумма");
		
		ТаблицаЗначений = Объект.НалоговаяВыверка01.Выгрузить(,"Счет,Сумма");		
		ТаблицаЗначений.Свернуть("Счет", "Сумма");
		ТаблицаЗначений.Сортировать("Счет");
		Объект.НалоговаяВыверкаИтоги01.Загрузить(ТаблицаЗначений);
	КонецЕсли;	
	
	// 2. Расходы по бухгалтерскому учету.
	СуммаРасходыБУ = 0;
	Если НЕ МассивРезультатовЗапроса[1].Пустой() Тогда 
		ВыборкаДетальныхЗаписей = МассивРезультатовЗапроса[1].Выбрать();
		Пока ВыборкаДетальныхЗаписей.Следующий() Цикл
			СтрокаНалоговойВыверки = Объект.НалоговаяВыверка02.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНалоговойВыверки, ВыборкаДетальныхЗаписей);
		КонецЦикла;
		
		СуммаРасходыБУ = Объект.НалоговаяВыверка02.Итог("Сумма");
		
		ТаблицаЗначений = Объект.НалоговаяВыверка02.Выгрузить(,"Счет,Сумма");		
		ТаблицаЗначений.Свернуть("Счет", "Сумма");
		ТаблицаЗначений.Сортировать("Счет");
		Объект.НалоговаяВыверкаИтоги02.Загрузить(ТаблицаЗначений);		
	КонецЕсли;
	
	// 3. Прибыль до налогобложения.
	СуммаПрибыльДоНалогов		= СуммаДоходыБУ - СуммаРасходыБУ;	
	
	// 4. Постоянные разницы - доходы.	
	СуммаПостоянныеРазницыДоходы = 0;
	Если НЕ МассивРезультатовЗапроса[2].Пустой() Тогда 
		ВыборкаДетальныхЗаписей = МассивРезультатовЗапроса[2].Выбрать();
		Пока ВыборкаДетальныхЗаписей.Следующий() Цикл
			СтрокаНалоговойВыверки = Объект.НалоговаяВыверка04.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНалоговойВыверки, ВыборкаДетальныхЗаписей);
		КонецЦикла;

		СуммаПостоянныеРазницыДоходы = Объект.НалоговаяВыверка04.Итог("Сумма");
		
		ТаблицаЗначений = Объект.НалоговаяВыверка04.Выгрузить(,"Счет,Сумма");		
		ТаблицаЗначений.Свернуть("Счет", "Сумма");
		ТаблицаЗначений.Сортировать("Счет");
		Объект.НалоговаяВыверкаИтоги04.Загрузить(ТаблицаЗначений);		
	КонецЕсли;	
	
	// 5. Постоянные разницы - расходы.
	СуммаПостоянныеРазницыРасходы = 0;
	Если НЕ МассивРезультатовЗапроса[3].Пустой() Тогда 
		ВыборкаДетальныхЗаписей = МассивРезультатовЗапроса[3].Выбрать();
		Пока ВыборкаДетальныхЗаписей.Следующий() Цикл
			СтрокаНалоговойВыверки = Объект.НалоговаяВыверка05.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНалоговойВыверки, ВыборкаДетальныхЗаписей);
		КонецЦикла;
		
		СуммаПостоянныеРазницыРасходы = Объект.НалоговаяВыверка05.Итог("Сумма");
		
		ТаблицаЗначений = Объект.НалоговаяВыверка05.Выгрузить(,"Счет,Сумма");		
		ТаблицаЗначений.Свернуть("Счет", "Сумма");
		ТаблицаЗначений.Сортировать("Счет");
		Объект.НалоговаяВыверкаИтоги05.Загрузить(ТаблицаЗначений);		
	КонецЕсли;

	// 6. Постоянные разницы.
	//СуммаПостоянныеРазницы						= -(СуммаПостоянныеРазницыДоходы - СуммаПостоянныеРазницыРасходы);
	
	// 7. Прибыль с учетом постоянных разниц.
	//СуммаПрибыльСУчетомПостоянныхРазниц			= СуммаПрибыльДоНалогов + СуммаПостоянныеРазницы;
	
	// 8. Расходы по налогу на прибыль (справочно).
	//СтавкаНалогаНаПрибыль = СтавкаНалогаНаПрибыль;
	//РасходыПоНалогуНаПрибыль = 0;
	//Если СуммаПрибыльСУчетомПостоянныхРазниц > 0 Тогда 
	//	РасходыПоНалогуНаПрибыль			= Окр(СуммаПрибыльСУчетомПостоянныхРазниц * СтавкаНалогаНаПрибыль / 100,0);
	//КонецЕсли;
	
	// 9. Временные разницы.
	
	// 10. Доход от выбытия ОС.		
	Для каждого СтрокаТаблицыНА Из ДокументЗакрытиеМесяца.НалоговаяАмортизация Цикл
		Если СтрокаТаблицыНА.УвеличениеСОД > 0 Тогда
		 	СтрокаТабличнойЧасти = Объект.НалоговаяВыверка10.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТаблицыНА);
		    СтрокаТабличнойЧасти.Сумма = СтрокаТаблицыНА.УвеличениеСОД;
		КонецЕсли;
		
	КонецЦикла;
		
	// 11. Амортизация бухгалтерская.	
	СуммаАмортизацияОСБУ = 0;
	СуммаАмортизацияОСБУ_Уменьшение = 0;
	Если НЕ МассивРезультатовЗапроса[4].Пустой() Тогда 
		ВыборкаДетальныхЗаписей = МассивРезультатовЗапроса[4].Выбрать();
		Пока ВыборкаДетальныхЗаписей.Следующий() Цикл
			СтрокаНалоговойВыверки = Объект.НалоговаяВыверка11.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНалоговойВыверки, ВыборкаДетальныхЗаписей);
			СуммаАмортизацияОСБУ = СуммаАмортизацияОСБУ + ВыборкаДетальныхЗаписей.Сумма;
			Если НЕ ВыборкаДетальныхЗаписей.СчетДтВременный Тогда
			    СуммаАмортизацияОСБУ_Уменьшение = СуммаАмортизацияОСБУ_Уменьшение + ВыборкаДетальныхЗаписей.Сумма;
				СтрокаНалоговойВыверки.СуммаУменьшение = ВыборкаДетальныхЗаписей.Сумма;
			КонецЕсли;			
		КонецЦикла;		
		ТаблицаЗначений = Объект.НалоговаяВыверка11.Выгрузить(,"СчетДт, СчетКт,Сумма, СуммаУменьшение");		
		ТаблицаЗначений.Свернуть("СчетДт, СчетКт", "Сумма, СуммаУменьшение");
		ТаблицаЗначений.Сортировать("СчетКт, СчетДт");
		Объект.НалоговаяВыверкаИтоги11.Загрузить(ТаблицаЗначений);		
	КонецЕсли;	
	
	// 12. Амортизация налоговая.
	СуммаАмортизацияОСНУ = ДокументЗакрытиеМесяца.НалоговаяАмортизация.Итог("Амортизация");
	ПревышениеНормыНаРемонт = ДокументЗакрытиеМесяца.НалоговаяАмортизация.Итог("ПревышениеНормыНаРемонт");
	
	// 13. Прочие временные разницы.  - Расшифрока
	//СуммаВременныеРазницы = 0;
	Если НЕ МассивРезультатовЗапроса[5].Пустой() Тогда 
		ВыборкаДетальныхЗаписей = МассивРезультатовЗапроса[5].Выбрать();
		Пока ВыборкаДетальныхЗаписей.Следующий() Цикл
			СтрокаНалоговойВыверки = Объект.НалоговаяВыверка13.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНалоговойВыверки, ВыборкаДетальныхЗаписей);
			СтрокаНалоговойВыверки.Наименование = ВыборкаДетальныхЗаписей.Счет.Наименование;
			//СуммаВременныеРазницы = ВыборкаДетальныхЗаписей.Сумма;
		КонецЦикла;
		//СуммаВременныеРазницы = Объект.НалоговаяВыверка13.Итог("Сумма");		
		ТаблицаЗначений = Объект.НалоговаяВыверка13.Выгрузить(,"Счет,Наименование,Сумма,Доходы,Расходы");		
		ТаблицаЗначений.Свернуть("Счет,Наименование", "Сумма,Доходы,Расходы");
		ТаблицаЗначений.Сортировать("Счет");
		Объект.НалоговаяВыверкаИтоги13.Загрузить(ТаблицаЗначений);		
	КонецЕсли;
	
	// Превышение нормы на ремонт
	Если ПревышениеНормыНаРемонт > 0 Тогда
		СтрокаНалоговойВыверки = Объект.НалоговаяВыверкаИтоги13.Добавить();
		СтрокаНалоговойВыверки.Наименование = "Превышение нормы на ремонт";
		СтрокаНалоговойВыверки.Сумма = ПревышениеНормыНаРемонт;
		СтрокаНалоговойВыверки.Доходы = ПревышениеНормыНаРемонт;
		
		СтрокаНалоговойВыверки = Объект.НалоговаяВыверка13.Добавить();
		СтрокаНалоговойВыверки.Документ = ДокументЗакрытиеМесяца;
		СтрокаНалоговойВыверки.Сумма = ПревышениеНормыНаРемонт;
		СтрокаНалоговойВыверки.Доходы = ПревышениеНормыНаРемонт;
		СтрокаНалоговойВыверки.Наименование = "Превышение нормы на ремонт";		
	КонецЕсли;

	// 13 Прочие временные разницы - доходы/расходы.
	СуммаВР_ПрочиеДоходы = 0;
	СуммаВР_ПрочиеРасходы = 0;	
	Если НЕ МассивРезультатовЗапроса[6].Пустой() Тогда 
		ВыборкаДетальныхЗаписей = МассивРезультатовЗапроса[6].Выбрать();
		ВыборкаДетальныхЗаписей.Следующий();
		СуммаВР_ПрочиеДоходы = ВыборкаДетальныхЗаписей.Сумма;
	КонецЕсли;
	Если НЕ МассивРезультатовЗапроса[7].Пустой() Тогда 
		ВыборкаДетальныхЗаписей = МассивРезультатовЗапроса[7].Выбрать();
		ВыборкаДетальныхЗаписей.Следующий();
		СуммаВР_ПрочиеРасходы = ВыборкаДетальныхЗаписей.Сумма;
	КонецЕсли;	
	
	// 21. СуммаТекущийРасчетНалогаНаПрибыль
	СуммаТекущийРасчетНалогаНаПрибыль = 0;
	Если НЕ МассивРезультатовЗапроса[17].Пустой() Тогда 
		ВыборкаДетальныхЗаписей = МассивРезультатовЗапроса[17].Выбрать();
		ВыборкаДетальныхЗаписей.Следующий();
		СуммаТекущийРасчетНалогаНаПрибыль = ВыборкаДетальныхЗаписей.Сумма;
	КонецЕсли;         
	
	// 22. СуммаУбытокПодлежащийПереносу
	СуммаУбытокПодлежащийПереносу = 0;
	Если НЕ МассивРезультатовЗапроса[18].Пустой() Тогда 
		ВыборкаДетальныхЗаписей = МассивРезультатовЗапроса[18].Выбрать();
		ВыборкаДетальныхЗаписей.Следующий();
		СуммаУбытокПодлежащийПереносу = ВыборкаДетальныхЗаписей.Сумма;
	КонецЕсли;
	
	// 1. Доходы по бухгалтерскому учету.
	СтрокаНалоговойВыверки 						= Объект.НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.КодСтроки            = "1";
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Доходы по бухучету'");
	СтрокаНалоговойВыверки.Сумма				= СуммаДоходыБУ;
	
	// 2. Расходы по бухгалтерскому учету.
	СтрокаНалоговойВыверки 						= Объект.НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.КодСтроки              = "2";
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Расходы по бухучету'");
	СтрокаНалоговойВыверки.Сумма				= СуммаРасходыБУ;
	
	// 3. Прибыль до налогообложения.
	СтрокаНалоговойВыверки 						= Объект.НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.КодСтроки            = "3";
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Прибыль до налогообложения по бухучету (Стр1 - Стр2)'");
	СуммаПрибыльДоНалогов						= СуммаДоходыБУ - СуммаРасходыБУ;
	СтрокаНалоговойВыверки.Сумма				= СуммаПрибыльДоНалогов;
	
	// 4. Постоянные разницы - доходы.
	СтрокаНалоговойВыверки 						= Объект.НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.КодСтроки            = "4";
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Постоянные разницы - доходы'");
	СтрокаНалоговойВыверки.Сумма				= СуммаПостоянныеРазницыДоходы;
	//СтрокаНалоговойВыверки.Доходы           	= СуммаПостоянныеРазницыДоходы;
	
	// 5. Постоянные разницы - расходы.
	СтрокаНалоговойВыверки 						= Объект.НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.КодСтроки            = "5";
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Постоянные разницы - расходы'");
	СтрокаНалоговойВыверки.Сумма				= СуммаПостоянныеРазницыРасходы;
	//СтрокаНалоговойВыверки.Расходы          	= СуммаПостоянныеРазницыРасходы;
	
	// 6. Постоянные разницы.
	СтрокаНалоговойВыверки 						= Объект.НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.КодСтроки            = "6";
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Постоянные разницы (Стр5 - Стр4)'");
	СуммаПостоянныеРазницы						= СуммаПостоянныеРазницыРасходы - СуммаПостоянныеРазницыДоходы;
	СтрокаНалоговойВыверки.Сумма				= СуммаПостоянныеРазницы;
	
	// 7. Прибыль с учетом постоянных разниц.
	СтрокаНалоговойВыверки 						= Объект.НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.КодСтроки            = "7";
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Прибыль с учетом ПР (Стр3 + Стр6)'");
	СуммаПрибыльСУчетомПостоянныхРазниц			= СуммаПрибыльДоНалогов + СуммаПостоянныеРазницы;
	СтрокаНалоговойВыверки.Сумма				= СуммаПрибыльСУчетомПостоянныхРазниц;
	
	// 8. Расходы по налогу на прибыль (справочно).
	СтрокаНалоговойВыверки 						= Объект.НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.КодСтроки            = "8";
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Расходы по НП (справочно: по ставке Стр16 от Стр7 с округл. до целых)'");
	
	СтавкаНалогаНаПрибыль = ДанныеУчетнойПолитики.СтавкаНалогаНаПрибыль;
	СтрокаНалоговойВыверки.Сумма = 0;
	Если СуммаПрибыльСУчетомПостоянныхРазниц > 0 Тогда 
		СтрокаНалоговойВыверки.Сумма			= Окр(СуммаПрибыльСУчетомПостоянныхРазниц * СтавкаНалогаНаПрибыль / 100,0);
	КонецЕсли;
	
	// 9. Временные разницы.
	СтрокаНалоговойВыверки 						= Объект.НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.КодСтроки            = "9";
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'ВРЕМЕННЫЕ РАЗНИЦЫ:'");	
		
	// 10. Доход от выбытия ОС.
	СтрокаНалоговойВыверки 						= Объект.НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.КодСтроки            = "10";
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Доход от выбытия ОС (отрицательная стоимость категорий ОС)'");
	СуммаДоходОтВыбытияОС						= ?(Объект.НалоговаяАмортизация.Итог("УвеличениеСОД") < 0, 0, Объект.НалоговаяАмортизация.Итог("УвеличениеСОД"));
	СтрокаНалоговойВыверки.Сумма				= СуммаДоходОтВыбытияОС;
	
	// 11. Амортизация бухгалтерская.
	СтрокаНалоговойВыверки 						= Объект.НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.КодСтроки            = "11";
	Если СуммаАмортизацияОСБУ_Уменьшение = 0 Тогда
		СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Амортизация бухгалтерская'");
	Иначе	
	    СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Амортизация бухгалтерская уменьшение'");
	КонецЕсли;	
	СтрокаНалоговойВыверки.Сумма				= СуммаАмортизацияОСБУ - СуммаАмортизацияОСБУ_Уменьшение;
	
	// 12. Амортизация налоговая.
	СтрокаНалоговойВыверки 						= Объект.НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.КодСтроки            = "12";
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Амортизация налоговая'");
	СуммаАмортизацияОСНУ						= Объект.НалоговаяАмортизация.Итог("Амортизация");
	СтрокаНалоговойВыверки.Сумма				= -СуммаАмортизацияОСНУ;
	
	// 13. Прочие временные разницы.
	СтрокаНалоговойВыверки 						= Объект.НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.КодСтроки            = "13";
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Прочие временные разницы (ВР)'");
	ПрочиеВР					 				= СуммаВР_ПрочиеРасходы - СуммаВР_ПрочиеДоходы + ПревышениеНормыНаРемонт;
	СтрокаНалоговойВыверки.Сумма 				= ПрочиеВР;
					
	// 14. Итого временные разницы.
	СтрокаНалоговойВыверки 						= Объект.НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.КодСтроки            = "14";
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Итого временные разницы (Стр10 + Стр11 - Стр12 + Стр13)'");
	СуммаИтогоВременныеРазницы					= СуммаДоходОтВыбытияОС + СуммаАмортизацияОСБУ - СуммаАмортизацияОСБУ_Уменьшение - СуммаАмортизацияОСНУ + ПрочиеВР;
	СтрокаНалоговойВыверки.Сумма				= СуммаИтогоВременныеРазницы;
	
	// 15. Убытки прошлых лет
	СтрокаНалоговойВыверки 						= Объект.НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.КодСтроки            = "15";
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Убыток прошлых лет'");
	СтрокаНалоговойВыверки.Сумма 				= СуммаУбытокПодлежащийПереносу;

	// 16. Налогооблагаемая прибыль.
	СтрокаНалоговойВыверки 						= Объект.НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.КодСтроки            = "16";
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Налогооблагаемая прибыль (Стр3 + Стр6 + Стр14 - Стр15)'");
	СуммаНалогооблагаемаяПрибыль				= СуммаПрибыльДоНалогов + СуммаПостоянныеРазницы + СуммаИтогоВременныеРазницы - СуммаУбытокПодлежащийПереносу;
	СтрокаНалоговойВыверки.Сумма				= СуммаНалогооблагаемаяПрибыль;
	
	// 17. Ставка налога.
	СтрокаНалоговойВыверки 						= Объект.НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.КодСтроки            = "17";
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Ставка налога'");
	СтрокаНалоговойВыверки.Сумма				= СтавкаНалогаНаПрибыль;
	
	// 18. Сумма налога на прибыль
	СтрокаНалоговойВыверки 						= Объект.НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.КодСтроки            = "18";
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Сумма налога на прибыль до вычета расходов на ККМ(по ставке Стр17 от Стр16)'");		
	СуммаНалогНаПрибыльДоВычетаРасходовНаККМ = 0;
	Если СуммаНалогооблагаемаяПрибыль > 0 Тогда 
		СуммаНалогНаПрибыльДоВычетаРасходовНаККМ = СуммаНалогооблагаемаяПрибыль * СтавкаНалогаНаПрибыль / 100;
	КонецЕсли;	
	СтрокаНалоговойВыверки.Сумма				= СуммаНалогНаПрибыльДоВычетаРасходовНаККМ; // СуммаНалогНаПрибыль;
	
	// 19. Расходы на ККМ.
	СтрокаНалоговойВыверки 						= Объект.НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.КодСтроки            = "19";
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Расходы на ККМ'");
	СтрокаНалоговойВыверки.Сумма				= ПараметрыДокументаЗакрытиеМесяца.СуммаРасходовНаККМ;
	
	// 20. Сумма налога на прибыль (Стр18 - Стр19).
	СтрокаНалоговойВыверки 						= Объект.НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.КодСтроки            = "20";
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Сумма налога на прибыль'");
	СуммаНалогНаПрибыль 						= СуммаНалогНаПрибыльДоВычетаРасходовНаККМ - ПараметрыДокументаЗакрытиеМесяца.СуммаРасходовНаККМ;
	СтрокаНалоговойВыверки.Сумма				= СуммаНалогНаПрибыль;
	
	// 21. Предварительно начисленный налог на прибыль.
	СтрокаНалоговойВыверки 						= Объект.НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.КодСтроки            = "21";
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Предварительно начисленный налог на прибыль'");
	СтрокаНалоговойВыверки.Сумма				= СуммаТекущийРасчетНалогаНаПрибыль;
	
	// 22. Предварительно начисленный налог на прибыль (Стр 20 - Стр 21).
	СтрокаНалоговойВыверки 						= Объект.НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.КодСтроки            = "22";
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Сумма налога на прибыль к уплате'");
	СтрокаНалоговойВыверки.Сумма				= СуммаНалогНаПрибыль - СуммаТекущийРасчетНалогаНаПрибыль;
	
	
	// 17.1. СВЕРКА
	СтрокаНалоговойВыверки 						= Объект.НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.КодСтроки            = "";
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Сверка НВ И ЕНД'");
	СтрокаНалоговойВыверки.ИзменитьЦветФона		= Истина;
	
	// 23. Доходы/расходы по бухгалтерскому учету.
	СтрокаНалоговойВыверки 						= Объект.НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.КодСтроки            = "23";
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Доходы/расходы по бухучету'");
	СтрокаНалоговойВыверки.Доходы           	= СуммаДоходыБУ;
	СтрокаНалоговойВыверки.Расходы          	= СуммаРасходыБУ;
	СтрокаНалоговойВыверки.ИзменитьЦветФона		= Истина;
	                                                                   
	//// 19. Минус КР.
	//СтрокаНалоговойВыверки 						= Объект.НалоговаяВыверка.Добавить();
	//СтрокаНалоговойВыверки.КодСтроки            = "19";
	//СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Минус КР'");
	//СтрокаНалоговойВыверки.Доходы           	= СуммаДоходы_2_1_минус;
	//СтрокаНалоговойВыверки.Расходы          	= СуммаРасходы_2_1_минус;	
	
	// 24. Минус КР
	СтрокаНалоговойВыверки 						= Объект.НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.КодСтроки            = "24";
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Курсовые разницы (См. закладку ""Строка 24"")'");	
	СтрокаНалоговойВыверки.Доходы				= -СуммаДоходы;
	СтрокаНалоговойВыверки.Расходы				= -СуммаРасходы;
	СтрокаНалоговойВыверки.ИзменитьЦветФона		= Истина;
	
	// 25. Превышение КР.
	СтрокаНалоговойВыверки 						= Объект.НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.КодСтроки            = "25";
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Превышение КР'");
	//СтрокаНалоговойВыверки.Доходы           	= СуммаДоходы_2_1;
	//СтрокаНалоговойВыверки.Расходы          	= СуммаРасходы_2_1;	
	СтрокаНалоговойВыверки.Доходы           	= СуммаДоходыПревышение;
	СтрокаНалоговойВыверки.Расходы          	= СуммаРасходыПревышение;	
	СтрокаНалоговойВыверки.ИзменитьЦветФона		= Истина;
	
	// 26. ПР - доходы/расходы.
	СтрокаНалоговойВыверки 						= Объект.НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.КодСтроки            = "26";
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Постоянные разницы (См. закладки ""Строка 4"" и ""Строка 5"")'");
	СтрокаНалоговойВыверки.Доходы           	= -СуммаПостоянныеРазницыДоходы;
	СтрокаНалоговойВыверки.Расходы          	= -СуммаПостоянныеРазницыРасходы;
	СтрокаНалоговойВыверки.ИзменитьЦветФона		= Истина;
			
	// 27. Доход от выбытия ОС.
	СтрокаНалоговойВыверки 						= Объект.НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.КодСтроки            = "27";
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Доход от выбытия ОС (См. закладку ""Налоговая амортизация"", Увеличение СОД)'");
	СтрокаНалоговойВыверки.Доходы           	= СуммаДоходОтВыбытияОС;
	СтрокаНалоговойВыверки.ИзменитьЦветФона		= Истина;
	
	// 28. Амортизация бухгалтерская.
	СтрокаНалоговойВыверки 						= Объект.НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.КодСтроки            = "28";
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Амортизация бухгалтерская уменьшение (См. закладку ""Строка 11"")'");
	Если СуммаАмортизацияОСБУ_Уменьшение = 0 Тогда
		СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Амортизация бухгалтерская (См. закладку ""Строка 11"")'");
	Иначе	
	    СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Амортизация бухгалтерская уменьшение (См. закладку ""Строка 11"")'");
	КонецЕсли;	
	СтрокаНалоговойВыверки.Расходы           	= -(СуммаАмортизацияОСБУ - СуммаАмортизацияОСБУ_Уменьшение);
	СтрокаНалоговойВыверки.ИзменитьЦветФона		= Истина;
	
	// 29. Амортизация налоговая.
	СтрокаНалоговойВыверки 						= Объект.НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.КодСтроки            = "29";
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Амортизация налоговая (См. закладку ""Налоговая амортизация"", Амортизация)'");
	СтрокаНалоговойВыверки.Расходы          	= СуммаАмортизацияОСНУ;	
	СтрокаНалоговойВыверки.ИзменитьЦветФона		= Истина;

	// 30 Превышение затрат на ремонт ОС ВР.
	СтрокаНалоговойВыверки 						= Объект.НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.КодСтроки            = "30";
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Превышение затрат на ремонт ОС ВР (См. закладку ""Налоговая амортизация"", Превышение нормы на ремонт)'");	
	СтрокаНалоговойВыверки.Расходы				= -ПревышениеНормыНаРемонт;	
	СтрокаНалоговойВыверки.ИзменитьЦветФона		= Истина;
	
	// 31 Прочие доходы/расходы ВР.
	СтрокаНалоговойВыверки 						= Объект.НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.КодСтроки            = "31";
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Прочие ВР (См. закладку ""Строка 13"")'");
	СтрокаНалоговойВыверки.Доходы				= -СуммаВР_ПрочиеДоходы;	
	СтрокаНалоговойВыверки.Расходы				= -СуммаВР_ПрочиеРасходы;
	СтрокаНалоговойВыверки.ИзменитьЦветФона		= Истина;
	
	// 32. Итого
	СтрокаНалоговойВыверки 						= Объект.НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.КодСтроки            = "32";
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Итого'");
	СтрокаНалоговойВыверки.ИзменитьЦветФона		= Истина;
	
	ПараметрыОтбора = Новый Структура("КодСтроки", "050");
	Строки = Объект.ЕдинаяНалоговаяДекларацияОсновнаяФормаОтчета.НайтиСтроки(ПараметрыОтбора);
	Если Строки.Количество() = 0 Тогда
		Сумма050 = 0;
	Иначе
	    Сумма050 = Строки[0].Сумма;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("КодСтроки", "051");
	Строки = Объект.ЕдинаяНалоговаяДекларацияОсновнаяФормаОтчета.НайтиСтроки(ПараметрыОтбора);
	Если Строки.Количество() = 0 Тогда
		Сумма051 = 0;
	Иначе
	    Сумма051 = Строки[0].Сумма;
	КонецЕсли;
	
	
	
	//СтрокаНалоговойВыверки.Доходы				= Сумма050 - (Объект.НалоговаяВыверка.Итог("Доходы")  - СуммаВР_Доходы);	
	//СтрокаНалоговойВыверки.Расходы				= Сумма051 - (Объект.НалоговаяВыверка.Итог("Расходы") - СуммаВР_Расходы);
	
	СтрокаНалоговойВыверки.Доходы				=  (Объект.НалоговаяВыверка.Итог("Доходы")); //  - СуммаВР_Доходы);	
	СтрокаНалоговойВыверки.Расходы				= (Объект.НалоговаяВыверка.Итог("Расходы")); // - СуммаВР_Расходы);
	СуммаОтклонениеДоходы 	= Сумма050 - СтрокаНалоговойВыверки.Доходы;
	СуммаОтклонениеРасходы 	= Сумма051 - СтрокаНалоговойВыверки.Расходы;
	Если СуммаОтклонениеДоходы = СуммаОтклонениеРасходы Тогда
		СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Итого (Расхождений нет)'");
	Иначе
		СтрокаНалоговойВыверки.НаименованиеСтроки 	= СтрШаблон(НСтр("ru = 'Итого. Расхождения доходы: %1, расходы: %2'"), СуммаОтклонениеДоходы, СуммаОтклонениеРасходы);
	КонецЕсли;
	
	
	// Строка разделитель (пустая)
	СтрокаНалоговойВыверки = Объект.НалоговаяВыверка.Добавить();
	
	// 33 Проверка сумм 163 ЕНД и 27 НВ
	СтрокиДекларации = Объект.ЕдинаяНалоговаяДекларацияСтрокиОтчета.НайтиСтроки(Новый Структура("КодСтроки", "163"));
	
	Если СтрокиДекларации.Количество() > 0 Тогда
		Сумма = СтрокиДекларации[0].Сумма;
	Иначе
		Сумма = 0;
	КонецЕсли;	
	
	РезультатПроверки = ?(Сумма = СуммаДоходОтВыбытияОС, НСтр("ru = ' (соответствует)'"), НСтр("ru = ' (не соответствует)'"));
	
	СтрокаНалоговойВыверки 						= Объект.НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.КодСтроки            = "33";
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= СтрШаблон(НСтр("ru = 'Строка 163 ЕНД  должна быть равна строке 27 НВ %1'"), РезультатПроверки);
	СтрокаНалоговойВыверки.Доходы				= Сумма;	
	СтрокаНалоговойВыверки.Расходы				= СуммаДоходОтВыбытияОС;
	СтрокаНалоговойВыверки.ИзменитьЦветФона		= Истина;
	
	// 34 Проверка сумм 255 ЕНД и 29 НВ
	СтрокиДекларации = Объект.ЕдинаяНалоговаяДекларацияСтрокиОтчета.НайтиСтроки(Новый Структура("КодСтроки", "255"));
	
	Если СтрокиДекларации.Количество() > 0 Тогда
		Сумма = СтрокиДекларации[0].Сумма;
	Иначе
		Сумма = 0;
	КонецЕсли;	
	
	РезультатПроверки = ?(Сумма = СуммаАмортизацияОСНУ, НСтр("ru = ' (соответствует)'"), НСтр("ru = ' (не соответствует)'"));
	
	СтрокаНалоговойВыверки 						= Объект.НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.КодСтроки            = "34";
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= СтрШаблон(НСтр("ru = 'Строка 255 ЕНД должна быть равна строке 29 НВ %1'"), РезультатПроверки);
	СтрокаНалоговойВыверки.Доходы				= Сумма;	
	СтрокаНалоговойВыверки.Расходы				= СуммаАмортизацияОСНУ;
	СтрокаНалоговойВыверки.ИзменитьЦветФона		= Истина;
	
	// 35 Проверка сумм 256 ЕНД минус 30 НВ и суммы затрат на ремонт РС "Налоговая амортизация"
	СтрокиДекларации = Объект.ЕдинаяНалоговаяДекларацияСтрокиОтчета.НайтиСтроки(Новый Структура("КодСтроки", "256"));
	
	Если СтрокиДекларации.Количество() > 0 Тогда
		Сумма = СтрокиДекларации[0].Сумма - (-ПревышениеНормыНаРемонт);
	Иначе
		Сумма = ПревышениеНормыНаРемонт;
	КонецЕсли;	
	
	Если НЕ МассивРезультатовЗапроса[10].Пустой() Тогда 
		Выборка = МассивРезультатовЗапроса[10].Выбрать();
		Выборка.Следующий();
		СуммаЗатрат = Выборка.СуммаЗатрат;
	Иначе
		СуммаЗатрат = 0;
	КонецЕсли;
	
	РезультатПроверки = ?(Сумма = СуммаЗатрат, НСтр("ru = ' (соответствует)'"), НСтр("ru = ' (не соответствует)'"));
	
	СтрокаНалоговойВыверки 						= Объект.НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.КодСтроки            = "35";
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= СтрШаблон(НСтр("ru = 'Строка 256 ЕНД минус строка 30 НВ должна быть равна сумма затрат на ремонт регистра ""Налоговая амортизация"" %1'"), РезультатПроверки);
	СтрокаНалоговойВыверки.Доходы				= Сумма;	
	СтрокаНалоговойВыверки.Расходы				= СуммаЗатрат;
	СтрокаНалоговойВыверки.ИзменитьЦветФона		= Истина;
	
	// 36 Проверка сумм 154/298а ЕНД и 24 НВ
	СтрокиДекларации = Объект.ЕдинаяНалоговаяДекларацияСтрокиОтчета.НайтиСтроки(Новый Структура("КодСтроки", "154"));
	
	Если СтрокиДекларации.Количество() > 0 Тогда
		Сумма154 = СтрокиДекларации[0].Сумма;
	Иначе
		Сумма154 = 0;
	КонецЕсли;
	
	СтрокиДекларации = Объект.ЕдинаяНалоговаяДекларацияСтрокиОтчета.НайтиСтроки(Новый Структура("КодСтроки", "298а"));

	Если СтрокиДекларации.Количество() > 0 Тогда
		Сумма298а = СтрокиДекларации[0].Сумма;
	Иначе
		Сумма298а = 0;
	КонецЕсли;		
	
	Сумма = ?(Сумма154 = 0, Сумма298а, Сумма154);	
	Сумма19НВ = ?(Сумма154 = 0, -(СуммаДоходы - СуммаРасходы), -(СуммаРасходы - СуммаДоходы));
	
	РезультатПроверки = ?(Сумма = Сумма19НВ, НСтр("ru = ' (соответствует)'"), НСтр("ru = ' (не соответствует)'"));
	
	СтрокаНалоговойВыверки 						= Объект.НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.КодСтроки            = "36";
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= СтрШаблон(НСтр("ru = 'Строка 154 и 298а не должны быть обе ненулевыми. Если строка 154 не ноль, то она равна Доходы – Расходы сроки 24 НВ. Если строка 298а не ноль, то она равна Расходы – Доходы строки 24 НВ %1'"), РезультатПроверки);
	СтрокаНалоговойВыверки.Доходы				= Сумма;	
	СтрокаНалоговойВыверки.Расходы				= Сумма19НВ;
	СтрокаНалоговойВыверки.ИзменитьЦветФона		= Истина;
	
	// 37 (и далее 38, 39...) Проверка документов
	НомерСтроки = 37;
	
	Если НЕ МассивРезультатовЗапроса[16].Пустой() Тогда 
		Выборка = МассивРезультатовЗапроса[16].Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтрокаНалоговойВыверки 						= Объект.НалоговаяВыверка.Добавить();
			СтрокаНалоговойВыверки.КодСтроки            = Строка(НомерСтроки);
			СтрокаНалоговойВыверки.НаименованиеСтроки 	= СтрШаблон(НСтр("ru = 'Документ с проводкой по счету %1, у которого указано ОС либо не принятое к учету, либо не имеющее группы НУ'"), Выборка.СчетКод);
			СтрокаНалоговойВыверки.Документ				= Выборка.Документ;	
			СтрокаНалоговойВыверки.Сумма				= Выборка.Сумма;
			СтрокаНалоговойВыверки.ИзменитьЦветФона		= Истина;
			
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличныеЧасти()
	Объект.ЕдинаяНалоговаяДекларацияСтрокиОтчета.Очистить();
	Объект.ЕдинаяНалоговаяДекларацияРасшифровка.Очистить();
	Объект.ЕдинаяНалоговаяДекларацияПриложение1.Очистить();
	Объект.ЕдинаяНалоговаяДекларацияПриложение2.Очистить();
	Объект.ЕдинаяНалоговаяДекларацияОсновнаяФормаОтчета.Очистить();
	
	Объект.НалоговаяАмортизацияПоступление.Очистить();
	Объект.НалоговаяАмортизацияВыбытие.Очистить();
	Объект.НалоговаяАмортизацияЗатратыНаРемонт.Очистить();
	Объект.НалоговаяАмортизация.Очистить();

	Объект.НалоговаяВыверка.Очистить();
	Объект.НалоговаяВыверка01.Очистить();
	Объект.НалоговаяВыверка02.Очистить();
	Объект.НалоговаяВыверка04.Очистить();
	Объект.НалоговаяВыверка05.Очистить();
	Объект.НалоговаяВыверка10.Очистить();
	Объект.НалоговаяВыверка11.Очистить();
	Объект.НалоговаяВыверка13.Очистить();
	Объект.НалоговаяВыверка19.Очистить();
	Объект.НалоговаяВыверкаИтоги01.Очистить();
	Объект.НалоговаяВыверкаИтоги02.Очистить();
	Объект.НалоговаяВыверкаИтоги04.Очистить();
	Объект.НалоговаяВыверкаИтоги05.Очистить();
	Объект.НалоговаяВыверкаИтоги11.Очистить();
	Объект.НалоговаяВыверкаИтоги13.Очистить();
	Объект.НалоговаяВыверкаИтоги19.Очистить();
	
КонецПроцедуры // ОчиститьТабличныеЧасти()

&НаСервере
Процедура ЗаполнитьТабличныеЧастиЕдинойНалоговойДекларации()
	Если ЗначениеЗаполнено(Объект.НастройкаЕНД) Тогда
		ЗаполнитьНомераПроходовЕдинойНалоговойДекларации();
		РассчитатьЕдинуюНалоговуюДекларацию();
		ЗаполнитьОсновнуюФормуЕдинойНалоговойДекларации();
	КонецЕсли;

КонецПроцедуры

// Процедура проставляет номера проходов взависимости от групп.
//
&НаСервере
Процедура ЗаполнитьНомераПроходовЕдинойНалоговойДекларации()
	
	Объект.ЕдинаяНалоговаяДекларацияСтрокиОтчета.Загрузить(Объект.НастройкаЕНД.СтрокиОтчета.Выгрузить());
	
	// Таблица групп.
	ТаблицаСтрокиОтчетаГруппы = Объект.ЕдинаяНалоговаяДекларацияСтрокиОтчета.Выгрузить();
	ТаблицаСтрокиОтчетаГруппы.Свернуть("Группа");
	ТаблицаСтрокиОтчетаГруппы.Индексы.Добавить("Группа");
	
	// Удалени пустых строк.
	НайденныеСтроки = ТаблицаСтрокиОтчетаГруппы.НайтиСтроки(Новый Структура("Группа", ""));
	Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл 
		ТаблицаСтрокиОтчетаГруппы.Удалить(СтрокаТаблицы);
	КонецЦикла;	
	
	// Добавление колонки "Проход".
	ТаблицаСтрокиОтчетаГруппы.Колонки.Добавить("Проход");
	// Всем группам присваивается уровень 1.
	ТаблицаСтрокиОтчетаГруппы.ЗаполнитьЗначения(1, "Проход");
	
	// Формирование номеров проходов.
	// Глубина вложенности 19.
	Глубина = 1;
	Пока Глубина < 20 Цикл
		// Признак пустой группы.
		ГруппаПустая = Истина;
		
		Для Каждого СтрокаТаблицы Из ТаблицаСтрокиОтчетаГруппы Цикл
			Если СтрокаТаблицы.Проход = Глубина Тогда
				// Поиск всех строк по совпадению кода строки и группы.
				НайденныеСтроки = Объект.ЕдинаяНалоговаяДекларацияСтрокиОтчета.НайтиСтроки(Новый Структура("КодСтроки", СтрокаТаблицы.Группа));
				
				// Обход всех строк, "пренадлежащих" текущей группе.
				Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл 
					НайденнаяСтрока = ТаблицаСтрокиОтчетаГруппы.Найти(СтрокаТабличнойЧасти.Группа, "Группа");
					// Увеличение глубины вхождения.
					Если НЕ НайденнаяСтрока = Неопределено Тогда				
						НайденнаяСтрока.Проход = Глубина + 1;
						ГруппаПустая = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		Если ГруппаПустая Тогда
			Прервать;
		КонецЕсли;
		Глубина = Глубина + 1;
	КонецЦикла;
	
	// Заполнить номера проходов.
	Для Каждого СтрокаТабличнойЧасти Из Объект.ЕдинаяНалоговаяДекларацияСтрокиОтчета Цикл
		СтрокаТабличнойЧасти.Проход = 0;
		СтрокаТаблицы = ТаблицаСтрокиОтчетаГруппы.Найти(СтрокаТабличнойЧасти.КодСтроки, "Группа");
		Если НЕ СтрокаТаблицы = Неопределено Тогда 
			СтрокаТабличнойЧасти.Проход = СтрокаТаблицы.Проход;	
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура РассчитатьЕдинуюНалоговуюДекларацию()

	// В формулах могут присутствовать: ОборотыДтКт, ОборотыДт, ОборотыКт.
	
	// 1. Настройки строк.
	// 2. Строки отчета.
	// 3. Обороты.
	// 4. Данные РС "Налоговая амортизация".
	// 5. Применение формулы.
	// 6. Применение корректировки НУ.
	// 7. Применение знака.
	// 8. Применение округления.
	// 9. Строки отчета.
	// 10. Расшифровка.
	// 11. Количество проходов.
	
	ТекстыЗапроса = Новый Массив;

	// Настройки строк.
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	1 КАК Порядок,
		|	НастройкиСтрок.КодСтроки КАК КодСтроки,
		|	НастройкиСтрок.СчетУчета КАК СчетУчета,
		|	НастройкиСтрок.Знак КАК Знак,
		|	НастройкиСтрок.Формула КАК Формула,
		|	НастройкиСтрок.КлючСвязи КАК КлючСвязи
		|ПОМЕСТИТЬ ВременнаяТаблицаНастройкиСтрок
		|ИЗ
		|	&НастройкиСтрок КАК НастройкиСтрок
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетУчета";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Строки отчета.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	2 КАК Порядок,
		|	СтрокиОтчета.КодСтроки КАК КодСтроки,
		|	СтрокиОтчета.НаименованиеСтроки КАК НаименованиеСтроки,
		|	СтрокиОтчета.ЭтоЗаголовок КАК ЭтоЗаголовок,
		|	СтрокиОтчета.Группа КАК Группа,
		|	СтрокиОтчета.ЗнакГруппы КАК ЗнакГруппы,
		|	СтрокиОтчета.Неотрицательное КАК Неотрицательное,
		|	СтрокиОтчета.Проход КАК Проход,
		|	СтрокиОтчета.КлючСвязи КАК КлючСвязи
		|ПОМЕСТИТЬ ВременнаяТаблицаОтчет
		|ИЗ
		|	&СтрокиОтчета КАК СтрокиОтчета";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
		
	// Обороты.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	3 КАК Порядок,
		|	ХозрасчетныйОборотыДтКт.СчетДт КАК СчетУчета,
		|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборотДт,
		|	0 КАК СуммаОборотКт
		|ПОМЕСТИТЬ ВременнаяТаблицаОбороты
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			СчетДТ В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					ВременнаяТаблицаНастройкиСтрок.СчетУчета КАК СчетУчета
		|				ИЗ
		|					ВременнаяТаблицаНастройкиСтрок КАК ВременнаяТаблицаНастройкиСтрок),
		|			,
		|			НЕ СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СводДоходовИРасходов)
		|				И НЕ СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НераспределеннаяПрибыль),
		|			,
		|			Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	3,
		|	ХозрасчетныйОборотыДтКт.СчетКт,
		|	0,
		|	ХозрасчетныйОборотыДтКт.СуммаОборот
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			НЕ СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СводДоходовИРасходов)
		|				И НЕ СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НераспределеннаяПрибыль),
		|			,
		|			СчетКТ В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					ВременнаяТаблицаНастройкиСтрок.СчетУчета КАК СчетУчета
		|				ИЗ
		|					ВременнаяТаблицаНастройкиСтрок КАК ВременнаяТаблицаНастройкиСтрок),
		|			,
		|			Организация = &Организация) КАК ХозрасчетныйОборотыДтКт";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Для строки 163.
	// ОТРИЦАТЕЛЬНЫЕ СУММЫ НАЛОГОВОГО РАСЧЕТА ПО ГРУППЕ АМОРТИЗИРОВАННЫХ АКТИВОВ НА КОНЕЦ НАЛОГОВОГО ПЕРИОДА.
	// Сумма берется из РС "Налоговая амортизация" - Увеличение СОД.
	// Для строки 255.
	// СУММЫ АМОРТИЗАЦИОННЫХ НАЧИСЛЕНИ.
	// Сумма берется из РС "Налоговая амортизация" - Амортизация за год.
	// Для строки 256.
	// РАСХОДЫ НА РЕМОНТ.
	// Сумма берется из РС "Налоговая амортизация" - Норма на ремонт.
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	4 КАК Порядок,
		|	СУММА(НалоговаяАмортизация.УвеличениеСОД) КАК СуммаУвеличениеСОД,
		|	СУММА(НалоговаяАмортизация.ЗатратыНаРемонт - НалоговаяАмортизация.ПревышениеЗатратНаРемонт) КАК ЗатратыНаРемонт,
		|	СУММА(НалоговаяАмортизация.АмортизацияЗаГод) КАК СуммаАмортизацияЗаГод
		|ПОМЕСТИТЬ ВременнаяТаблицаДанныеНалоговойАмортизации
		|ИЗ
		|	РегистрСведений.НалоговаяАмортизация КАК НалоговаяАмортизация
		|ГДЕ
		|	НалоговаяАмортизация.Организация = &Организация
		|	И НалоговаяАмортизация.Год МЕЖДУ &НачалоПериода И &КонецПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	4 КАК Порядок,
		|	""163"" КАК КодСтроки,
		|	НалоговаяАмортизация.СуммаУвеличениеСОД КАК СуммаПоДаннымУправленческогоУчета
		|ПОМЕСТИТЬ ВременнаяТаблицаНалоговаяАмортизация
		|ИЗ
		|	ВременнаяТаблицаДанныеНалоговойАмортизации КАК НалоговаяАмортизация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	4,
		|	""255"",
		|	НалоговаяАмортизация.СуммаАмортизацияЗаГод
		|ИЗ
		|	ВременнаяТаблицаДанныеНалоговойАмортизации КАК НалоговаяАмортизация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	4,
		|	""256"",
		|	НалоговаяАмортизация.ЗатратыНаРемонт
		|ИЗ
		|	ВременнаяТаблицаДанныеНалоговойАмортизации КАК НалоговаяАмортизация";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Применение формулы.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	5 КАК Порядок,
		|	ВременнаяТаблицаНастройкиСтрок.КодСтроки КАК КодСтроки,
		|	ВременнаяТаблицаНастройкиСтрок.Знак КАК Знак,
		|	ВременнаяТаблицаНастройкиСтрок.СчетУчета КАК СчетУчета,
		|	ВременнаяТаблицаНастройкиСтрок.Формула КАК Формула,
		|	СУММА(ВЫБОР
		|			КОГДА ВременнаяТаблицаНастройкиСтрок.Формула = ЗНАЧЕНИЕ(Перечисление.Формулы.ОборотыДт)
		|				ТОГДА ЕСТЬNULL(ВременнаяТаблицаОбороты.СуммаОборотДт, 0)
		|			КОГДА ВременнаяТаблицаНастройкиСтрок.Формула = ЗНАЧЕНИЕ(Перечисление.Формулы.ОборотыКт)
		|				ТОГДА ЕСТЬNULL(ВременнаяТаблицаОбороты.СуммаОборотКт, 0)
		|			КОГДА ВременнаяТаблицаНастройкиСтрок.Формула = ЗНАЧЕНИЕ(Перечисление.Формулы.ОборотыДтКт)
		|					И ВременнаяТаблицаНастройкиСтрок.СчетУчета.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
		|				ТОГДА ЕСТЬNULL(ВременнаяТаблицаОбороты.СуммаОборотДт, 0) - ЕСТЬNULL(ВременнаяТаблицаОбороты.СуммаОборотКт, 0)
		|			КОГДА ВременнаяТаблицаНастройкиСтрок.Формула = ЗНАЧЕНИЕ(Перечисление.Формулы.ОборотыДтКт)
		|					И ВременнаяТаблицаНастройкиСтрок.СчетУчета.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
		|				ТОГДА ЕСТЬNULL(ВременнаяТаблицаОбороты.СуммаОборотКт, 0) - ЕСТЬNULL(ВременнаяТаблицаОбороты.СуммаОборотДт, 0)
		|			КОГДА ВременнаяТаблицаНастройкиСтрок.Формула = ЗНАЧЕНИЕ(Перечисление.Формулы.ОсобаяФормула)
		|					И ВременнаяТаблицаНастройкиСтрок.КодСтроки = ""163""
		|				ТОГДА ЕСТЬNULL(ВременнаяТаблицаНалоговаяАмортизация.СуммаПоДаннымУправленческогоУчета, 0)
		|			КОГДА ВременнаяТаблицаНастройкиСтрок.Формула = ЗНАЧЕНИЕ(Перечисление.Формулы.ОсобаяФормула)
		|					И ВременнаяТаблицаНастройкиСтрок.КодСтроки = ""255""
		|				ТОГДА ЕСТЬNULL(ВременнаяТаблицаНалоговаяАмортизация.СуммаПоДаннымУправленческогоУчета, 0)
		|			КОГДА ВременнаяТаблицаНастройкиСтрок.Формула = ЗНАЧЕНИЕ(Перечисление.Формулы.ОсобаяФормула)
		|					И ВременнаяТаблицаНастройкиСтрок.КодСтроки = ""256""
		|				ТОГДА ЕСТЬNULL(ВременнаяТаблицаНалоговаяАмортизация.СуммаПоДаннымУправленческогоУчета, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Сумма
		|ПОМЕСТИТЬ ВременнаяТаблицаРасчеты
		|ИЗ
		|	ВременнаяТаблицаНастройкиСтрок КАК ВременнаяТаблицаНастройкиСтрок
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОбороты КАК ВременнаяТаблицаОбороты
		|		ПО ВременнаяТаблицаНастройкиСтрок.СчетУчета = ВременнаяТаблицаОбороты.СчетУчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаНалоговаяАмортизация КАК ВременнаяТаблицаНалоговаяАмортизация
		|		ПО ВременнаяТаблицаНастройкиСтрок.КодСтроки = ВременнаяТаблицаНалоговаяАмортизация.КодСтроки
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаНастройкиСтрок.КодСтроки,
		|	ВременнаяТаблицаНастройкиСтрок.Знак,
		|	ВременнаяТаблицаНастройкиСтрок.СчетУчета,
		|	ВременнаяТаблицаНастройкиСтрок.Формула";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Применение корректировки НУ.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	6 КАК Порядок,
		|	ВременнаяТаблицаРасчеты.КодСтроки КАК КодСтроки,
		|	ВременнаяТаблицаРасчеты.Знак КАК Знак,
		|	ВременнаяТаблицаРасчеты.СчетУчета КАК СчетУчета,
		|	ВременнаяТаблицаРасчеты.Формула КАК Формула,
		|	ВременнаяТаблицаРасчеты.Сумма - ЕСТЬNULL(КорректировкиНУОбороты.СуммаОборот, 0) КАК Сумма,
		|	ЕСТЬNULL(КорректировкиНУОбороты.СуммаОборот, 0) КАК СуммаКорректировки
		|ПОМЕСТИТЬ ВременнаяТаблицаРасчетыКорректировка
		|ИЗ
		|	ВременнаяТаблицаРасчеты КАК ВременнаяТаблицаРасчеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КорректировкиНУ.Обороты(
		|				&НачалоПериода,
		|				&КонецПериода,
		|				,
		|				Организация = &Организация
		|					И Счет В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							ВременнаяТаблицаНастройкиСтрок.СчетУчета КАК СчетУчета
		|						ИЗ
		|							ВременнаяТаблицаНастройкиСтрок КАК ВременнаяТаблицаНастройкиСтрок)) КАК КорректировкиНУОбороты
		|		ПО ВременнаяТаблицаРасчеты.СчетУчета = КорректировкиНУОбороты.Счет";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Применение знака.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	7 КАК Порядок,
		|	ВременнаяТаблицаРасчетыКорректировка.КодСтроки КАК КодСтроки,
		|	ВременнаяТаблицаРасчетыКорректировка.СчетУчета КАК СчетУчета,
		|	ВременнаяТаблицаРасчетыКорректировка.Формула КАК Формула,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаРасчетыКорректировка.Знак = ЗНАЧЕНИЕ(Перечисление.ПлюсМинус.Минус)
		|			ТОГДА -ВременнаяТаблицаРасчетыКорректировка.Сумма
		|		ИНАЧЕ ВременнаяТаблицаРасчетыКорректировка.Сумма
		|	КОНЕЦ КАК Сумма
		|ПОМЕСТИТЬ ВременнаяТаблицаРасчетыЗнак
		|ИЗ
		|	ВременнаяТаблицаРасчетыКорректировка КАК ВременнаяТаблицаРасчетыКорректировка";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Применение округления.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	8 КАК Порядок,
		|	ВременнаяТаблицаРасчетыЗнак.КодСтроки КАК КодСтроки,
		|	СУММА(ВЫБОР
		|			КОГДА &ЕдиницаОтчета = ""Целые сомы""
		|				ТОГДА ВЫРАЗИТЬ(ВременнаяТаблицаРасчетыЗнак.Сумма КАК ЧИСЛО(15, 0))
		|			КОГДА &ЕдиницаОтчета = ""Тысячи сомов""
		|				ТОГДА ВЫРАЗИТЬ(ВременнаяТаблицаРасчетыЗнак.Сумма / 1000 КАК ЧИСЛО(15, 0))
		|			КОГДА &ЕдиницаОтчета = ""Тысячи сомов/2""
		|				ТОГДА ВЫРАЗИТЬ(ВременнаяТаблицаРасчетыЗнак.Сумма / 1000 КАК ЧИСЛО(15, 2))
		|			КОГДА &ЕдиницаОтчета = ""Тысячи сомов/1""
		|				ТОГДА ВЫРАЗИТЬ(ВременнаяТаблицаРасчетыЗнак.Сумма / 1000 КАК ЧИСЛО(15, 1))
		|			ИНАЧЕ ВременнаяТаблицаРасчетыЗнак.Сумма
		|		КОНЕЦ) КАК Сумма
		|ПОМЕСТИТЬ ВременнаяТаблицаГруппировкаПоСтроке
		|ИЗ
		|	ВременнаяТаблицаРасчетыЗнак КАК ВременнаяТаблицаРасчетыЗнак
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаРасчетыЗнак.КодСтроки";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Строки отчета.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	9 КАК Порядок,
		|	ВременнаяТаблицаОтчет.КодСтроки КАК КодСтроки,
		|	ВременнаяТаблицаОтчет.НаименованиеСтроки КАК НаименованиеСтроки,
		|	ВременнаяТаблицаОтчет.ЭтоЗаголовок КАК ЭтоЗаголовок,
		|	ВременнаяТаблицаОтчет.Группа КАК Группа,
		|	ВременнаяТаблицаОтчет.ЗнакГруппы КАК ЗнакГруппы,
		|	ВременнаяТаблицаОтчет.Неотрицательное КАК Неотрицательное,
		|	ВременнаяТаблицаОтчет.Проход КАК Проход,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаОтчет.ЗнакГруппы = ЗНАЧЕНИЕ(Перечисление.ПлюсМинус.Минус)
		|			ТОГДА -ЕСТЬNULL(ВременнаяТаблицаГруппировкаПоСтроке.Сумма, 0)
		|		ИНАЧЕ ЕСТЬNULL(ВременнаяТаблицаГруппировкаПоСтроке.Сумма, 0)
		|	КОНЕЦ КАК Сумма,
		|	ВременнаяТаблицаОтчет.КлючСвязи КАК КлючСвязи
		|ИЗ
		|	ВременнаяТаблицаОтчет КАК ВременнаяТаблицаОтчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаГруппировкаПоСтроке КАК ВременнаяТаблицаГруппировкаПоСтроке
		|		ПО ВременнаяТаблицаОтчет.КодСтроки = ВременнаяТаблицаГруппировкаПоСтроке.КодСтроки";
		//|ГДЕ
		//|	(НЕ &ВсеСтрокиРасшифровкиЕНД
		//|				И ВЫБОР
		//|					КОГДА ВременнаяТаблицаОтчет.ЗнакГруппы = ЗНАЧЕНИЕ(Перечисление.ПлюсМинус.Минус)
		//|						ТОГДА -ЕСТЬNULL(ВременнаяТаблицаГруппировкаПоСтроке.Сумма, 0)
		//|					ИНАЧЕ ЕСТЬNULL(ВременнаяТаблицаГруппировкаПоСтроке.Сумма, 0)
		//|				КОНЕЦ <> 0
		//|			ИЛИ &ВсеСтрокиРасшифровкиЕНД)";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
		
	// Расшифровка.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	10 КАК Порядок,
		|	ВременнаяТаблицаНастройкиСтрок.КодСтроки КАК КодСтроки,
		|	ВременнаяТаблицаНастройкиСтрок.СчетУчета КАК СчетУчета,
		|	ВременнаяТаблицаНастройкиСтрок.Формула КАК Формула,
		|	ВременнаяТаблицаРасчетыЗнак.Сумма КАК Итого,
		|	ВременнаяТаблицаРасчеты.Сумма КАК Сумма,
		|	ВременнаяТаблицаРасчетыКорректировка.СуммаКорректировки КАК СуммаКорректировкиНУ,
		|	ВременнаяТаблицаНастройкиСтрок.КлючСвязи КАК КлючСвязи
		|ИЗ
		|	ВременнаяТаблицаНастройкиСтрок КАК ВременнаяТаблицаНастройкиСтрок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаРасчетыЗнак КАК ВременнаяТаблицаРасчетыЗнак
		|		ПО ВременнаяТаблицаНастройкиСтрок.КодСтроки = ВременнаяТаблицаРасчетыЗнак.КодСтроки
		|			И ВременнаяТаблицаНастройкиСтрок.СчетУчета = ВременнаяТаблицаРасчетыЗнак.СчетУчета
		|			И ВременнаяТаблицаНастройкиСтрок.Формула = ВременнаяТаблицаРасчетыЗнак.Формула
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаРасчеты КАК ВременнаяТаблицаРасчеты
		|		ПО ВременнаяТаблицаНастройкиСтрок.КодСтроки = ВременнаяТаблицаРасчеты.КодСтроки
		|			И ВременнаяТаблицаНастройкиСтрок.СчетУчета = ВременнаяТаблицаРасчеты.СчетУчета
		|			И ВременнаяТаблицаНастройкиСтрок.Формула = ВременнаяТаблицаРасчеты.Формула
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаРасчетыКорректировка КАК ВременнаяТаблицаРасчетыКорректировка
		|		ПО ВременнаяТаблицаНастройкиСтрок.КодСтроки = ВременнаяТаблицаРасчетыКорректировка.КодСтроки
		|			И ВременнаяТаблицаНастройкиСтрок.СчетУчета = ВременнаяТаблицаРасчетыКорректировка.СчетУчета
		|			И ВременнаяТаблицаНастройкиСтрок.Формула = ВременнаяТаблицаРасчетыКорректировка.Формула";		
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Количество проходов.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	11 КАК Порядок,
		|	МАКСИМУМ(ВременнаяТаблицаОтчет.Проход) КАК КоличествоПроходов
		|ИЗ
		|	ВременнаяТаблицаОтчет КАК ВременнаяТаблицаОтчет";
	ТекстыЗапроса.Добавить(ТекстЗапроса);

	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("НастройкиСтрок", Объект.НастройкаЕНД.НастройкиСтрок.Выгрузить());
	Запрос.УстановитьПараметр("СтрокиОтчета", Объект.ЕдинаяНалоговаяДекларацияСтрокиОтчета.Выгрузить());

	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(Объект.Дата));
	Запрос.УстановитьПараметр("КонецПериода", КонецГода(Объект.Дата));
	//Запрос.УстановитьПараметр("ЕдиницаОтчета", Объект.ЕдиницаОтчета);
	Запрос.УстановитьПараметр("ЕдиницаОтчета", "");
	Запрос.УстановитьПараметр("ВсеСтрокиРасшифровкиЕНД", ВсеСтрокиРасшифровкиЕНД);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Объект.ЕдинаяНалоговаяДекларацияСтрокиОтчета.Загрузить(РезультатЗапроса[9].Выгрузить());
	Объект.ЕдинаяНалоговаяДекларацияРасшифровка.Загрузить(РезультатЗапроса[10].Выгрузить());
		
	КоличествоПроходов = 0;
	Если НЕ РезультатЗапроса[11].Пустой() Тогда 
		Выборка = РезультатЗапроса[11].Выбрать();
		Выборка.Следующий();
		КоличествоПроходов = Выборка.КоличествоПроходов;
	КонецЕсли;	
	
	// Расчет групповых строк.
	Глубина = 1;
	Пока Глубина <= КоличествоПроходов Цикл
		// Выгрузка производится в цикле, чтобы учесть всю глубину вхождения.
		ТаблицаСтрокиОтчета = Объект.ЕдинаяНалоговаяДекларацияСтрокиОтчета.Выгрузить();
		
		Для Каждого СтрокаТаблицы Из ТаблицаСтрокиОтчета Цикл
			Если СтрокаТаблицы.Неотрицательное И СтрокаТаблицы.Сумма < 0 Тогда
				СтрокаТаблицы.Сумма = 0;	
			КонецЕсли;	
		КонецЦикла;
		
		ТаблицаСтрокиОтчета.Свернуть("Группа","Сумма");
		
		// Перенос групповых Сумм из Таблицы в ТЧ СтрокиОтчета.
		Для Каждого СтрокаТабличнойЧасти Из Объект.ЕдинаяНалоговаяДекларацияСтрокиОтчета Цикл
			
			// Применение условия знака строки.
			Если СтрокаТабличнойЧасти.Неотрицательное
				И СтрокаТабличнойЧасти.Сумма < 0 Тогда 
				СтрокаТабличнойЧасти.Сумма = 0;
			КонецЕсли;	
			
			Если СтрокаТабличнойЧасти.Проход = Глубина 
				И НЕ СтрокаТабличнойЧасти.КодСтроки = "" Тогда 
				СтрокаТаблицы = ТаблицаСтрокиОтчета.Найти(СтрокаТабличнойЧасти.КодСтроки, "Группа");
				
				Если СтрокаТаблицы = Неопределено Тогда 
					СтрокаТабличнойЧасти.Сумма = 0;
				Иначе
					СтрокаТабличнойЧасти.Сумма = СтрокаТаблицы.Сумма;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Глубина = Глубина + 1;
	КонецЦикла;
	
	ЗаполнитьПриложенияЕдинойНалоговойДекларации();
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьПриложенияЕдинойНалоговойДекларации()
	Для каждого СтрокаТабличнойЧасти Из Объект.ЕдинаяНалоговаяДекларацияСтрокиОтчета Цикл
		Если СтрокаТабличнойЧасти.КодСтроки = "" 
			И СтрокаТабличнойЧасти.Группа = "1" 
			И СтрокаТабличнойЧасти.ЭтоЗаголовок Тогда
			СтрокаПриложения1 = Объект.ЕдинаяНалоговаяДекларацияПриложение1.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПриложения1, СтрокаТабличнойЧасти);			
		ИначеЕсли СтрокаТабличнойЧасти.КодСтроки = "" 
			И СтрокаТабличнойЧасти.Группа = "2" 
			И СтрокаТабличнойЧасти.ЭтоЗаголовок Тогда
			СтрокаПриложения2 = Объект.ЕдинаяНалоговаяДекларацияПриложение2.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПриложения2, СтрокаТабличнойЧасти);			
		ИначеЕсли СтрокаТабличнойЧасти.КодСтроки < "250" Тогда
			СтрокаПриложения1 = Объект.ЕдинаяНалоговаяДекларацияПриложение1.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПриложения1, СтрокаТабличнойЧасти);		
		ИначеЕсли СтрокаТабличнойЧасти.КодСтроки >= "250" 
			И СтрокаТабличнойЧасти.КодСтроки < "450" Тогда
			СтрокаПриложения2 = Объект.ЕдинаяНалоговаяДекларацияПриложение2.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПриложения2, СтрокаТабличнойЧасти);
		КонецЕсли;
			
	КонецЦикла;	

КонецПроцедуры // ЗаполнитьПриложенияЕдинойНалоговойДекларации()

&НаКлиенте
Процедура ЕдинаяНалоговаяДекларацияСтрокиОтчетаПриАктивизацииСтроки(Элемент)
	//Если НЕ ВсеСтрокиРасшифровкиЕНД Тогда
		БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "ЕдинаяНалоговаяДекларацияРасшифровка");
	//КонецЕсли;		
	УстановитьПараметрыДинамическихСписков();
	
	СтрокаЕдинаяНалоговаяДекларацияСтрокиОтчета = Элементы.ЕдинаяНалоговаяДекларацияСтрокиОтчета.ТекущиеДанные;
	Если НЕ СтрокаЕдинаяНалоговаяДекларацияСтрокиОтчета = Неопределено 
		И ЗначениеЗаполнено(СтрокаЕдинаяНалоговаяДекларацияСтрокиОтчета.КодСтроки) Тогда
		ОтборСтрок = Новый Структура;
		ОтборСтрок.Вставить("КодСтроки", СтрокаЕдинаяНалоговаяДекларацияСтрокиОтчета.КодСтроки);		
	 	МассивСтрок = Объект.ЕдинаяНалоговаяДекларацияРасшифровка.НайтиСтроки(ОтборСтрок);
		НомерСтрокиРасшифровки = 0;
		Если МассивСтрок.Количество() > 0 Тогда
		 	НомерСтрокиРасшифровки = МассивСтрок[0].НомерСтроки - 1;
		КонецЕсли;
		
		Элементы.ЕдинаяНалоговаяДекларацияРасшифровка.ТекущаяСтрока = НомерСтрокиРасшифровки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдинаяНалоговаяДекларацияРасшифровкаПриАктивизацииСтроки(Элемент)
	УстановитьПараметрыДинамическихСписков();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитНастройкаЕНД()
	Объект.НастройкаЕНД = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕдинаяНалоговаяДекларация.Настройка КАК НастройкаЕНД
		|ИЗ
		|	Документ.ЕдинаяНалоговаяДекларация КАК ЕдинаяНалоговаяДекларация
		|ГДЕ
		|	ЕдинаяНалоговаяДекларация.НачалоПериода = НАЧАЛОПЕРИОДА(&Дата, ГОД)
		|	И НЕ ЕдинаяНалоговаяДекларация.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Объект.НастройкаЕНД = ВыборкаДетальныеЗаписи.НастройкаЕНД;
	КонецЦикла;

КонецПроцедуры // НастройкаЕНД()

&НаСервере
Процедура ЗаполнитьОсновнуюФормуЕдинойНалоговойДекларации()
	
	// Яч050
	СтрокаТабличнойЧасти = Объект.ЕдинаяНалоговаяДекларацияОсновнаяФормаОтчета.Добавить();
	СтрокаТабличнойЧасти.КодСтроки = "050";
	СтрокаТабличнойЧасти.НаименованиеСтроки = "СОВОКУПНЫЙ ГОДОВОЙ ДОХОД (переносится показатель ячейки 199 приложения 1 (FORM STI -101-001))";
	Отбор = Новый Структура("КодСтроки", "199");
	СтрокиСвода = Объект.ЕдинаяНалоговаяДекларацияСтрокиОтчета.НайтиСтроки(Отбор);
	Сумма050 = 0;
	Если СтрокиСвода.Количество() > 0 Тогда
		Сумма050 = СтрокиСвода[0].Сумма;
		СтрокаТабличнойЧасти.Сумма = Сумма050;		
	КонецЕсли;
	
	// Яч051
	СтрокаТабличнойЧасти = Объект.ЕдинаяНалоговаяДекларацияОсновнаяФормаОтчета.Добавить();
	СтрокаТабличнойЧасти.КодСтроки = "051";
	СтрокаТабличнойЧасти.НаименованиеСтроки = "РАСХОДЫ, ПОДЛЕЖАЩИЕ ВЫЧЕТУ (переносится показатель ячейки 299 приложения 2 (FORM STI -101-002)";
	Отбор = Новый Структура("КодСтроки", "299");
	СтрокиСвода = Объект.ЕдинаяНалоговаяДекларацияСтрокиОтчета.НайтиСтроки(Отбор);
	Сумма051 = 0;
	Если СтрокиСвода.Количество() > 0 Тогда
		Сумма051 = СтрокиСвода[0].Сумма;
		СтрокаТабличнойЧасти.Сумма = Сумма051;
	КонецЕсли;	
		
	// Яч052
	СтрокаТабличнойЧасти = Объект.ЕдинаяНалоговаяДекларацияОсновнаяФормаОтчета.Добавить();
	СтрокаТабличнойЧасти.КодСтроки = "052";
	СтрокаТабличнойЧасти.НаименованиеСтроки = "ПРИБЫЛЬ (УБЫТОК) (=050-051)";
	Сумма052 = Сумма050 - Сумма051;
	СтрокаТабличнойЧасти.Сумма = Сумма052;
	
	// Яч053
	СтрокаТабличнойЧасти = Объект.ЕдинаяНалоговаяДекларацияОсновнаяФормаОтчета.Добавить();
	СтрокаТабличнойЧасти.КодСтроки = "053";
	СтрокаТабличнойЧасти.НаименованиеСтроки = "ПРИБЫЛЬ, ОСВОБОЖДЕННАЯ ОТ НАЛОГА (переносится показатель ячейки 499 приложения 4 (FORM STI -101-004)";
	Отбор = Новый Структура("КодСтроки", "499");
	СтрокиСвода = Объект.ЕдинаяНалоговаяДекларацияСтрокиОтчета.НайтиСтроки(Отбор);
	Сумма053 = 0;
	Если СтрокиСвода.Количество() > 0 Тогда
		Сумма053 = СтрокиСвода[0].Сумма;
		СтрокаТабличнойЧасти.Сумма = Сумма053;		
	КонецЕсли;	
	
	// Яч054
	СтрокаТабличнойЧасти = Объект.ЕдинаяНалоговаяДекларацияОсновнаяФормаОтчета.Добавить();
	СтрокаТабличнойЧасти.КодСтроки = "054";
	СтрокаТабличнойЧасти.НаименованиеСтроки = "ПРИБЫЛЬ (-)/УБЫТОК(+), ПЕРЕДАННАЯ/ЫЙ ОТ ДЕЯТЕЛЬНОСТИ ПРОСТОГО ТОВАРИЩЕСТВА (переносится показатель ячейки 963 приложения 9 (FORM STI -101-009)";
	Отбор = Новый Структура("КодСтроки", "963");
	СтрокиСвода = Объект.ЕдинаяНалоговаяДекларацияСтрокиОтчета.НайтиСтроки(Отбор);
	Сумма054 = 0;
	Если СтрокиСвода.Количество() > 0 Тогда
		Сумма054 = СтрокиСвода[0].Сумма;
		СтрокаТабличнойЧасти.Сумма = Сумма054;		
	КонецЕсли;
	
	// Яч055
	СтрокаТабличнойЧасти = Объект.ЕдинаяНалоговаяДекларацияОсновнаяФормаОтчета.Добавить();
	СтрокаТабличнойЧасти.КодСтроки = "055";
	СтрокаТабличнойЧасти.НаименованиеСтроки = "ПРИБЫЛЬ (+)/(УБЫТОК)(-), ПОЛУЧЕННАЯ/ЫЙ ОТ ДЕЯТЕЛЬНОСТИ ПРОСТОГО ТОВАРИЩЕСТВА (заполняется участником, не ведущим учет простого товарищества)";
	
	// Яч056
	СтрокаТабличнойЧасти = Объект.ЕдинаяНалоговаяДекларацияОсновнаяФормаОтчета.Добавить();
	СтрокаТабличнойЧасти.КодСтроки = "056";
	СтрокаТабличнойЧасти.НаименованиеСтроки = "УБЫТОК, ПОДЛЕЖАЩИЙ ПЕРЕНОСУ";

	// Яч057
	СтрокаТабличнойЧасти = Объект.ЕдинаяНалоговаяДекларацияОсновнаяФормаОтчета.Добавить();
	СтрокаТабличнойЧасти.КодСтроки = "057";
	СтрокаТабличнойЧасти.НаименованиеСтроки = "УМЕНЬШЕНИЕ НАЛОГООБЛАГАЕМОЙ ПРИБЫЛИ ГОРНОДОБЫВАЮЩЕЙ ОРГАНИЗАЦИИ В СВЯЗИ С РЕЗЕРВИРОВАНИЕМ ЕЕ В СПЕЦИАЛЬНЫЙ ФОНД ПРЕДПРИЯТИЯ";	
	
	// Яч058
	СтрокаТабличнойЧасти = Объект.ЕдинаяНалоговаяДекларацияОсновнаяФормаОтчета.Добавить();
	СтрокаТабличнойЧасти.КодСтроки = "058";
	СтрокаТабличнойЧасти.НаименованиеСтроки = "НАЛОГООБЛАГАЕМАЯ ПРИБЫЛЬ(+)/УБЫТОК(-) (= 052-053-054+055-056-057)";
	Сумма058 = Сумма052 - Сумма053 - Сумма054;
	СтрокаТабличнойЧасти.Сумма = Сумма058;	

	Если Сумма058 < 0 Тогда
		// Яч059
		СтрокаТабличнойЧасти = Объект.ЕдинаяНалоговаяДекларацияОсновнаяФормаОтчета.Добавить();
		СтрокаТабличнойЧасти.КодСтроки = "059";
		СтрокаТабличнойЧасти.НаименованиеСтроки = "УБЫТОК";
		СтрокаТабличнойЧасти.Сумма = Сумма058;		
		
		// Яч060
		СтрокаТабличнойЧасти = Объект.ЕдинаяНалоговаяДекларацияОсновнаяФормаОтчета.Добавить();
		СтрокаТабличнойЧасти.КодСтроки = "060";
		СтрокаТабличнойЧасти.НаименованиеСтроки = "СТАВКА НАЛОГА";
		
		// Яч061
		СтрокаТабличнойЧасти = Объект.ЕдинаяНалоговаяДекларацияОсновнаяФормаОтчета.Добавить();
		СтрокаТабличнойЧасти.КодСтроки = "061";
		СтрокаТабличнойЧасти.НаименованиеСтроки = "СУММА НАЛОГОВОГО ОБЯЗАТЕЛЬСТВА (= 058*060/100)";
		
		// Яч062
		СтрокаТабличнойЧасти = Объект.ЕдинаяНалоговаяДекларацияОсновнаяФормаОтчета.Добавить();
		СтрокаТабличнойЧасти.КодСтроки = "062";
		СтрокаТабличнойЧасти.НаименованиеСтроки = "НАЧИСЛЕННАЯ ПРЕДВАРИТЕЛЬНАЯ СУММА НАЛОГА НА ПРИБЫЛЬ";
		
		// Яч063
		СтрокаТабличнойЧасти = Объект.ЕдинаяНалоговаяДекларацияОсновнаяФормаОтчета.Добавить();
		СтрокаТабличнойЧасти.КодСтроки = "063";
		СтрокаТабличнойЧасти.НаименованиеСтроки = "СУММА НАЛОГА, УПЛАЧЕННОГО В ИНОСТРАННОМ ГОСУДАРСТВЕ И ПОДЛЕЖАЩАЯ ЗАЧЕТУ";
				
		// Яч064
		СтрокаТабличнойЧасти = Объект.ЕдинаяНалоговаяДекларацияОсновнаяФормаОтчета.Добавить();
		СтрокаТабличнойЧасти.КодСтроки = "064";
		СтрокаТабличнойЧасти.НаименованиеСтроки = "СУММА СПЕЦИАЛЬНОГО ФОНДА , НЕ ИСПОЛЬЗОВАННАЯ ПО НАЗНАЧЕНИЮ В ТЕЧЕНИЕ 5 ЛЕТ (переносится показатель ячейки 964 приложения 9 (FORM STI -101-009)";		
		
		// Яч065
		СтрокаТабличнойЧасти = Объект.ЕдинаяНалоговаяДекларацияОсновнаяФормаОтчета.Добавить();
		СтрокаТабличнойЧасти.КодСтроки = "065";
		СтрокаТабличнойЧасти.НаименованиеСтроки = "ОСТАТОК (= 061-062-063+064)";		
		
		// Яч066
		СтрокаТабличнойЧасти = Объект.ЕдинаяНалоговаяДекларацияОсновнаяФормаОтчета.Добавить();
		СтрокаТабличнойЧасти.КодСтроки = "066";
		СтрокаТабличнойЧасти.НаименованиеСтроки = "НАЛОГ К ВОЗВРАТУ";		
		
		// Яч067
		СтрокаТабличнойЧасти = Объект.ЕдинаяНалоговаяДекларацияОсновнаяФормаОтчета.Добавить();
		СтрокаТабличнойЧасти.КодСтроки = "067";
		СтрокаТабличнойЧасти.НаименованиеСтроки = "НАЛОГ К УПЛАТЕ";		
		
	Иначе
		СтавкаНалогаНаПрибыль = БухгалтерскийУчетСервер.ПолучитьДанныеУчетнойПолитикиОрганизаций(КонецГода(Объект.Дата), Объект.Организация).СтавкаНалогаНаПрибыль;	
		
		// Яч060
		СтрокаТабличнойЧасти = Объект.ЕдинаяНалоговаяДекларацияОсновнаяФормаОтчета.Добавить();
		СтрокаТабличнойЧасти.КодСтроки = "060";
		СтрокаТабличнойЧасти.НаименованиеСтроки = "СТАВКА НАЛОГА";
		СтрокаТабличнойЧасти.Сумма = СтавкаНалогаНаПрибыль;	
		
		// Яч061
		СтрокаТабличнойЧасти = Объект.ЕдинаяНалоговаяДекларацияОсновнаяФормаОтчета.Добавить();
		СтрокаТабличнойЧасти.КодСтроки = "061";
		СтрокаТабличнойЧасти.НаименованиеСтроки = "СУММА НАЛОГОВОГО ОБЯЗАТЕЛЬСТВА (= 058*060/100)";
		Сумма061 = Сумма058 * СтавкаНалогаНаПрибыль / 100;
		СтрокаТабличнойЧасти.Сумма = Сумма061;
		
		// Яч062
		СтрокаТабличнойЧасти = Объект.ЕдинаяНалоговаяДекларацияОсновнаяФормаОтчета.Добавить();
		СтрокаТабличнойЧасти.КодСтроки = "062";
		СтрокаТабличнойЧасти.НаименованиеСтроки = "НАЧИСЛЕННАЯ ПРЕДВАРИТЕЛЬНАЯ СУММА НАЛОГА НА ПРИБЫЛЬ";
		
		// Яч063
		СтрокаТабличнойЧасти = Объект.ЕдинаяНалоговаяДекларацияОсновнаяФормаОтчета.Добавить();
		СтрокаТабличнойЧасти.КодСтроки = "063";
		СтрокаТабличнойЧасти.НаименованиеСтроки = "СУММА НАЛОГА, УПЛАЧЕННОГО В ИНОСТРАННОМ ГОСУДАРСТВЕ И ПОДЛЕЖАЩАЯ ЗАЧЕТУ";
				
		// Яч064
		СтрокаТабличнойЧасти = Объект.ЕдинаяНалоговаяДекларацияОсновнаяФормаОтчета.Добавить();
		СтрокаТабличнойЧасти.КодСтроки = "064";
		СтрокаТабличнойЧасти.НаименованиеСтроки = "СУММА СПЕЦИАЛЬНОГО ФОНДА , НЕ ИСПОЛЬЗОВАННАЯ ПО НАЗНАЧЕНИЮ В ТЕЧЕНИЕ 5 ЛЕТ (переносится показатель ячейки 964 приложения 9 (FORM STI -101-009)";		
		
		// Яч065
		СтрокаТабличнойЧасти = Объект.ЕдинаяНалоговаяДекларацияОсновнаяФормаОтчета.Добавить();
		СтрокаТабличнойЧасти.КодСтроки = "065";
		СтрокаТабличнойЧасти.НаименованиеСтроки = "ОСТАТОК (= 061-062-063+064)";		
		СтрокаТабличнойЧасти.Сумма = Сумма061;
		
		// Яч066
		СтрокаТабличнойЧасти = Объект.ЕдинаяНалоговаяДекларацияОсновнаяФормаОтчета.Добавить();
		СтрокаТабличнойЧасти.КодСтроки = "066";
		СтрокаТабличнойЧасти.НаименованиеСтроки = "НАЛОГ К ВОЗВРАТУ";		
		
		// Яч067
		СтрокаТабличнойЧасти = Объект.ЕдинаяНалоговаяДекларацияОсновнаяФормаОтчета.Добавить();
		СтрокаТабличнойЧасти.КодСтроки = "067";
		СтрокаТабличнойЧасти.НаименованиеСтроки = "НАЛОГ К УПЛАТЕ";		
		СтрокаТабличнойЧасти.Сумма = Сумма061;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьОсновнуюФормуЕдинойНалоговойДекларации()

&НаСервере
Процедура ЗаполнитьНастройки()

	ПлательщикНП 					 = ДанныеУчетнойПолитики.ПлательщикНП;
	МинимумСтоимостиОСДляНУ 		 = ДанныеУчетнойПолитики.МинимумСтоимостиОСДляНУ;

	ПараметрыДокумента = ПараметрыДокументаЗакрытиеМесяца(Объект.Дата);
	
	Объект.ПредельнаяНормаНаРемонтОС 			= ПараметрыДокумента.ПредельнаяНормаНаРемонтОС;
	Объект.МинимальнаяСтоимостьГруппыОС 		= ПараметрыДокумента.МинимальнаяСтоимостьГруппыОС;
	НеФормироватьПроводкиПоОтсроченнымАктивам 	= ПараметрыДокумента.НеФормироватьПроводкиПоОтсроченнымАктивам;
КонецПроцедуры

&НаСервере
Процедура ПроверитьНастройкиЕНД()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиСтрок.КодСтроки КАК КодСтроки,
		|	НастройкиСтрок.СчетУчета КАК СчетУчета,
		|	НастройкиСтрок.Формула КАК Формула,
		|	НастройкиСтрок.Знак КАК Знак,
		|	СтрокиОтчета.Неотрицательное КАК Неотрицательное
		|ПОМЕСТИТЬ ВременнаяТаблицаНастройкиСтрок
		|ИЗ
		|	Справочник.НастройкиНалоговойДекларации.НастройкиСтрок КАК НастройкиСтрок
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиНалоговойДекларации.СтрокиОтчета КАК СтрокиОтчета
		|		ПО НастройкиСтрок.Ссылка = СтрокиОтчета.Ссылка
		|			И НастройкиСтрок.КлючСвязи = СтрокиОтчета.КлючСвязи
		|ГДЕ
		|	НастройкиСтрок.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетУчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаНастройкиСтрок.КодСтроки КАК КодСтроки,
		|	ВременнаяТаблицаНастройкиСтрок.СчетУчета КАК Счет,
		|	ВременнаяТаблицаНастройкиСтрок.СчетУчета.Представление КАК ПредставлениеСчета,
		|	ВременнаяТаблицаНастройкиСтрок.Формула КАК Формула,
		|	ВременнаяТаблицаНастройкиСтрок.Знак КАК Знак,
		|	ВременнаяТаблицаНастройкиСтрок.Неотрицательное КАК Неотрицательное
		|ИЗ
		|	ВременнаяТаблицаНастройкиСтрок КАК ВременнаяТаблицаНастройкиСтрок
		|
		|УПОРЯДОЧИТЬ ПО
		|	Счет
		|АВТОУПОРЯДОЧИВАНИЕ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет,
		|	Хозрасчетный.Представление КАК ПредставлениеСчета,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ВременнаяТаблицаНастройкиСтрок.СчетУчета ЕСТЬ NULL
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ) КАК СчетУчаствуетВНастройке,
		|	КОЛИЧЕСТВО(ВЫБОР
		|			КОГДА ВременнаяТаблицаНастройкиСтрок.СчетУчета ЕСТЬ NULL
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ) КАК КоличествоИспользованияСчета
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаНастройкиСтрок КАК ВременнаяТаблицаНастройкиСтрок
		|		ПО Хозрасчетный.Ссылка = ВременнаяТаблицаНастройкиСтрок.СчетУчета
		|ГДЕ
		|	Хозрасчетный.Временный
		|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
		|
		|СГРУППИРОВАТЬ ПО
		|	Хозрасчетный.Ссылка,
		|	Хозрасчетный.Представление
		|
		|УПОРЯДОЧИТЬ ПО
		|	Счет
		|АВТОУПОРЯДОЧИВАНИЕ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ХозрасчетныйОбороты.Счет КАК Счет,
		|	ХозрасчетныйОбороты.Счет.Представление КАК ПредставлениеСчета
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			НАЧАЛОПЕРИОДА(&Дата, ГОД),
		|			КОНЕЦПЕРИОДА(&Дата, ГОД),
		|			,
		|			Счет.Временный
		|				И НЕ Счет В
		|						(ВЫБРАТЬ
		|							ВременнаяТаблицаНастройкиСтрок.СчетУчета КАК СчетУчета
		|						ИЗ
		|							ВременнаяТаблицаНастройкиСтрок КАК ВременнаяТаблицаНастройкиСтрок),
		|			,
		|			,
		|			,
		|			) КАК ХозрасчетныйОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	Счет";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.НастройкаЕНД);
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаНастройкиСтрок 	= МассивРезультатов[1].Выбрать();
	ВыборкаВременныеСчета 	= МассивРезультатов[2].Выбрать();
	ВыборкаВременныеСчетаОтсутствуютВНастройках = МассивРезультатов[3].Выбрать();
	
	ТаблицаПроверок1.Очистить();
	ТаблицаПроверок2.Очистить();
	ТаблицаПроверок3.Очистить();
	ТаблицаПроверок4.Очистить();
	
	Пока ВыборкаВременныеСчета.Следующий() Цикл
		
		Если НЕ ВыборкаВременныеСчета.СчетУчаствуетВНастройке 
			И ВыборкаВременныеСчета.Счет <> ПланыСчетов.Хозрасчетный.ПрочиеДоходыОтНеоперационнойДеятельности 
			И ВыборкаВременныеСчета.Счет <> ПланыСчетов.Хозрасчетный.РасходыПоВыбытиюАктивов
			И ВыборкаВременныеСчета.Счет <> ПланыСчетов.Хозрасчетный.РасходыДоходыПоНалогуНаПрибыль
			И ВыборкаВременныеСчета.Счет <> ПланыСчетов.Хозрасчетный.РасходыНаАмортизациюОсновныхСредств 
			И ВыборкаВременныеСчета.Счет <> ПланыСчетов.Хозрасчетный.ЗатратыНаАмортизациюОсновныхПроизводственныхСредств
			И ВыборкаВременныеСчета.Счет <> ПланыСчетов.Хозрасчетный.РемонтИОбслуживаниеОсновныхСредств
			И ВыборкаВременныеСчета.Счет <> ПланыСчетов.Хозрасчетный.ЗатратыНаРемонтИОбслуживаниеОсновныхСредств Тогда
			
			СтрокаТаблицы = ТаблицаПроверок1.Добавить();
			СтрокаТаблицы.ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Счет %1 не задействован'"), ВыборкаВременныеСчета.ПредставлениеСчета);
			
		ИначеЕсли ВыборкаВременныеСчета.СчетУчаствуетВНастройке 
			И (ВыборкаВременныеСчета.Счет = ПланыСчетов.Хозрасчетный.ПрочиеДоходыОтНеоперационнойДеятельности 
			ИЛИ ВыборкаВременныеСчета.Счет = ПланыСчетов.Хозрасчетный.РасходыПоВыбытиюАктивов
			ИЛИ ВыборкаВременныеСчета.Счет = ПланыСчетов.Хозрасчетный.РасходыДоходыПоНалогуНаПрибыль
			ИЛИ ВыборкаВременныеСчета.Счет = ПланыСчетов.Хозрасчетный.РасходыНаАмортизациюОсновныхСредств 
			ИЛИ ВыборкаВременныеСчета.Счет = ПланыСчетов.Хозрасчетный.ЗатратыНаАмортизациюОсновныхПроизводственныхСредств
			ИЛИ ВыборкаВременныеСчета.Счет = ПланыСчетов.Хозрасчетный.РемонтИОбслуживаниеОсновныхСредств
			ИЛИ ВыборкаВременныеСчета.Счет = ПланыСчетов.Хозрасчетный.ЗатратыНаРемонтИОбслуживаниеОсновныхСредств) Тогда
			
			СтрокаТаблицы = ТаблицаПроверок1.Добавить();
			СтрокаТаблицы.ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Счет %1 задействован, но является исключением'"), 
									ВыборкаВременныеСчета.ПредставлениеСчета);
		КонецЕсли;	
		
		Если ВыборкаВременныеСчета.КоличествоИспользованияСчета > 1 Тогда
			
			СписокСтрок = "";
			СчетИсключения = Ложь;
			Отбор = Новый Структура("Счет", ВыборкаВременныеСчета.Счет);
			
			Пока ВыборкаНастройкиСтрок.НайтиСледующий(Отбор) Цикл
				
				Если ВыборкаВременныеСчета.Счет = ПланыСчетов.Хозрасчетный.ДоходыОтОперационныхКурсовыхРазниц
					ИЛИ ВыборкаВременныеСчета.Счет = ПланыСчетов.Хозрасчетный.УбыткиОтОперационныхКурсовыхРазниц
					ИЛИ ВыборкаВременныеСчета.Счет = ПланыСчетов.Хозрасчетный.ДоходОтКурсовыхРазницПоОперациямВИностраннойВалюте
					ИЛИ ВыборкаВременныеСчета.Счет = ПланыСчетов.Хозрасчетный.УбыткиОтКурсовыхРазницПоОперациямВИностраннойВалюте Тогда
					
 					Если ВыборкаНастройкиСтрок.КодСтроки = "154" ИЛИ ВыборкаНастройкиСтрок.КодСтроки = "298а" Тогда
						Продолжить;	
					КонецЕсли;	
					
					Если СписокСтрок = "" Тогда
						СписокСтрок = ВыборкаНастройкиСтрок.КодСтроки; 		
					Иначе
						СписокСтрок = СписокСтрок + ", " + ВыборкаНастройкиСтрок.КодСтроки;
					КонецЕсли;
					
					СчетИсключения = Истина;
					
				Иначе
					Если СписокСтрок = "" Тогда
						СписокСтрок = ВыборкаНастройкиСтрок.КодСтроки; 		
					Иначе
						СписокСтрок = СписокСтрок + ", " + ВыборкаНастройкиСтрок.КодСтроки;
					КонецЕсли;
				КонецЕсли;	
				
			КонецЦикла;
			
			ВыборкаНастройкиСтрок.Сбросить();
			
			Если СчетИсключения И СписокСтрок <> "" Тогда
				СтрокаТаблицы = ТаблицаПроверок2.Добавить();
				СтрокаТаблицы.ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Счет %1 должен быть только в строках 154 или 298а, но указан еще в строках %2'"), 
												ВыборкаВременныеСчета.ПредставлениеСчета, СписокСтрок);	
												
			ИначеЕсли СписокСтрок <> "" Тогда
				СтрокаТаблицы = ТаблицаПроверок2.Добавить();
				СтрокаТаблицы.ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Счет %1 указан в строках %2'"), 
												ВыборкаВременныеСчета.ПредставлениеСчета, СписокСтрок);
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	
	// Выбираем временные счета, по которым были обороты, но по ним нет настройки в настройках строк ЕНД
	Пока ВыборкаВременныеСчетаОтсутствуютВНастройках.Следующий() Цикл
		Если ВыборкаВременныеСчетаОтсутствуютВНастройках.Счет <> ПланыСчетов.Хозрасчетный.ПрочиеДоходыОтНеоперационнойДеятельности 
			И ВыборкаВременныеСчетаОтсутствуютВНастройках.Счет <> ПланыСчетов.Хозрасчетный.РасходыПоВыбытиюАктивов
			И ВыборкаВременныеСчетаОтсутствуютВНастройках.Счет <> ПланыСчетов.Хозрасчетный.РасходыДоходыПоНалогуНаПрибыль
			И ВыборкаВременныеСчетаОтсутствуютВНастройках.Счет <> ПланыСчетов.Хозрасчетный.РасходыНаАмортизациюОсновныхСредств 
			И ВыборкаВременныеСчетаОтсутствуютВНастройках.Счет <> ПланыСчетов.Хозрасчетный.ЗатратыНаАмортизациюОсновныхПроизводственныхСредств
			И ВыборкаВременныеСчетаОтсутствуютВНастройках.Счет <> ПланыСчетов.Хозрасчетный.РемонтИОбслуживаниеОсновныхСредств
			И ВыборкаВременныеСчетаОтсутствуютВНастройках.Счет <> ПланыСчетов.Хозрасчетный.ЗатратыНаРемонтИОбслуживаниеОсновныхСредств Тогда		
			СтрокаТаблицы = ТаблицаПроверок1.Добавить();
			СтрокаТаблицы.ОписаниеОшибки = СтрШаблон(НСтр("ru = 'По временному счету %1 есть обороты, но он не указан в настройках.'"), 
									ВыборкаВременныеСчетаОтсутствуютВНастройках.ПредставлениеСчета);
		КонецЕсли;
	КонецЦикла;
	
	Строка154_ПроверенаНаНеотрицательность  = Ложь;
	Строка298а_ПроверенаНаНеотрицательность = Ложь;
	
	Пока ВыборкаНастройкиСтрок.Следующий() Цикл
		
		Если ВыборкаНастройкиСтрок.КодСтроки = "163" 
			ИЛИ ВыборкаНастройкиСтрок.КодСтроки = "255" 
			ИЛИ ВыборкаНастройкиСтрок.КодСтроки = "256" Тогда
			
			Если ВыборкаНастройкиСтрок.Формула <> Перечисления.Формулы.ОсобаяФормула Тогда
				СтрокаТаблицы = ТаблицаПроверок3.Добавить();
				СтрокаТаблицы.ОписаниеОшибки = СтрШаблон(НСтр("ru = 'В строке %1 указана формула %2'"), 
												ВыборкаНастройкиСтрок.ПредставлениеСчета, 
												ВыборкаНастройкиСтрок.Формула);	
			КонецЕсли;			
		Иначе	
			Если ВыборкаНастройкиСтрок.Формула <> Перечисления.Формулы.ОборотыДтКт Тогда
				СтрокаТаблицы = ТаблицаПроверок3.Добавить();
				СтрокаТаблицы.ОписаниеОшибки = СтрШаблон(НСтр("ru = 'В строке %1 указана формула %2'"), 
												ВыборкаНастройкиСтрок.ПредставлениеСчета, 
												ВыборкаНастройкиСтрок.Формула);	
			КонецЕсли;	
		КонецЕсли;
		
		Если ВыборкаНастройкиСтрок.КодСтроки = "154"
			И (ВыборкаНастройкиСтрок.Счет = ПланыСчетов.Хозрасчетный.УбыткиОтОперационныхКурсовыхРазниц
			ИЛИ ВыборкаНастройкиСтрок.Счет = ПланыСчетов.Хозрасчетный.УбыткиОтКурсовыхРазницПоОперациямВИностраннойВалюте)
			И ВыборкаНастройкиСтрок.Знак <> Перечисления.ПлюсМинус.Минус Тогда
			
			СтрокаТаблицы = ТаблицаПроверок4.Добавить();
			СтрокаТаблицы.ОписаниеОшибки = СтрШаблон(НСтр("ru = 'В строке 154 у счета %1 в поле ""Знак"" должен быть ""Минус""'"), 
											ВыборкаНастройкиСтрок.ПредставлениеСчета);
		
		ИначеЕсли ВыборкаНастройкиСтрок.КодСтроки = "298а"
			И (ВыборкаНастройкиСтрок.Счет = ПланыСчетов.Хозрасчетный.ДоходыОтОперационныхКурсовыхРазниц
			ИЛИ ВыборкаНастройкиСтрок.Счет = ПланыСчетов.Хозрасчетный.ДоходОтКурсовыхРазницПоОперациямВИностраннойВалюте)
			И ВыборкаНастройкиСтрок.Знак <> Перечисления.ПлюсМинус.Минус Тогда	
		
			СтрокаТаблицы = ТаблицаПроверок4.Добавить();
			СтрокаТаблицы.ОписаниеОшибки = СтрШаблон(НСтр("ru = 'В строке 298а у счета %1 в поле ""Знак"" должен быть ""Минус""'"), 
											ВыборкаНастройкиСтрок.ПредставлениеСчета);
			
		ИначеЕсли ВыборкаНастройкиСтрок.Счет = ПланыСчетов.Хозрасчетный.ДоходыОтОперационныхКурсовыхРазниц
			ИЛИ ВыборкаНастройкиСтрок.Счет = ПланыСчетов.Хозрасчетный.УбыткиОтОперационныхКурсовыхРазниц
			ИЛИ ВыборкаНастройкиСтрок.Счет = ПланыСчетов.Хозрасчетный.ДоходОтКурсовыхРазницПоОперациямВИностраннойВалюте
			ИЛИ ВыборкаНастройкиСтрок.Счет = ПланыСчетов.Хозрасчетный.УбыткиОтКурсовыхРазницПоОперациямВИностраннойВалюте Тогда
			
			Если ВыборкаНастройкиСтрок.КодСтроки <> "154" И ВыборкаНастройкиСтрок.КодСтроки <> "298а" Тогда
				СтрокаТаблицы = ТаблицаПроверок4.Добавить();
				СтрокаТаблицы.ОписаниеОшибки = СтрШаблон(НСтр("ru = 'В строке %1 указан счет %2'"), 
												ВыборкаНастройкиСтрок.КодСтроки, 
												ВыборкаНастройкиСтрок.ПредставлениеСчета);	
			КонецЕсли;	
		КонецЕсли;
		
		Если ВыборкаНастройкиСтрок.КодСтроки = "154" И НЕ ВыборкаНастройкиСтрок.Неотрицательное 
			И НЕ Строка154_ПроверенаНаНеотрицательность Тогда
			
			СтрокаТаблицы = ТаблицаПроверок4.Добавить();
			СтрокаТаблицы.ОписаниеОшибки = НСтр("ru = 'В строке 154 не установлена настройка ""Неотрицательный""'");
			Строка154_ПроверенаНаНеотрицательность = Истина;
			
		ИначеЕсли ВыборкаНастройкиСтрок.КодСтроки = "298а" И НЕ ВыборкаНастройкиСтрок.Неотрицательное 
			И НЕ Строка298а_ПроверенаНаНеотрицательность Тогда
			
			СтрокаТаблицы = ТаблицаПроверок4.Добавить();
			СтрокаТаблицы.ОписаниеОшибки = НСтр("ru = 'В строке 298а не установлена настройка ""Неотрицательный""'");
			Строка298а_ПроверенаНаНеотрицательность = Истина;	
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСверку()

	Объект.СверкаСЕНД.Очистить();
	Объект.СверкаСЕНДРасшифровка.Очистить();
	
	Отбор = Новый Структура("СчетУчета", Неопределено);
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.НалоговаяВыверкаИтоги01 Цикл
		НоваяСтрокаТабличнойЧасти = Объект.СверкаСЕНД.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
		НоваяСтрокаТабличнойЧасти.Счет = СтрокаТабличнойЧасти.Счет;
		НоваяСтрокаТабличнойЧасти.СуммаНВ = СтрокаТабличнойЧасти.Сумма;
		
		Отбор.СчетУчета = СтрокаТабличнойЧасти.Счет;
		НайденныеСтроки = Объект.ЕдинаяНалоговаяДекларацияРасшифровка.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			НоваяСтрокаТабличнойЧасти.СуммаЕНД = НайденныеСтроки[0].Сумма;	
		КонецЕсли;	
		
		НоваяСтрокаТабличнойЧасти.Отклонение = НоваяСтрокаТабличнойЧасти.СуммаНВ - НоваяСтрокаТабличнойЧасти.СуммаЕНД;
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.НалоговаяВыверка01 Цикл
		НоваяСтрокаТабличнойЧасти = Объект.СверкаСЕНДРасшифровка.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.НалоговаяВыверкаИтоги02 Цикл
		НоваяСтрокаТабличнойЧасти = Объект.СверкаСЕНД.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
		НоваяСтрокаТабличнойЧасти.Счет = СтрокаТабличнойЧасти.Счет;
		НоваяСтрокаТабличнойЧасти.СуммаНВ = СтрокаТабличнойЧасти.Сумма;
		
		Отбор.СчетУчета = СтрокаТабличнойЧасти.Счет;
		НайденныеСтроки = Объект.ЕдинаяНалоговаяДекларацияРасшифровка.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			НоваяСтрокаТабличнойЧасти.СуммаЕНД = НайденныеСтроки[0].Сумма;	
		КонецЕсли;	
		
		НоваяСтрокаТабличнойЧасти.Отклонение = НоваяСтрокаТабличнойЧасти.СуммаНВ - НоваяСтрокаТабличнойЧасти.СуммаЕНД;
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.НалоговаяВыверка02 Цикл
		НоваяСтрокаТабличнойЧасти = Объект.СверкаСЕНДРасшифровка.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
	КонецЦикла;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.СверкаСЕНД Цикл
		Если СтрокаТабличнойЧасти.Счет = ПланыСчетов.Хозрасчетный.ПрочиеДоходыОтНеоперационнойДеятельности 
			ИЛИ СтрокаТабличнойЧасти.Счет = ПланыСчетов.Хозрасчетный.РасходыПоВыбытиюАктивов
			ИЛИ СтрокаТабличнойЧасти.Счет = ПланыСчетов.Хозрасчетный.РасходыДоходыПоНалогуНаПрибыль
			ИЛИ СтрокаТабличнойЧасти.Счет = ПланыСчетов.Хозрасчетный.РасходыНаАмортизациюОсновныхСредств 
			ИЛИ СтрокаТабличнойЧасти.Счет = ПланыСчетов.Хозрасчетный.ЗатратыНаАмортизациюОсновныхПроизводственныхСредств
			ИЛИ СтрокаТабличнойЧасти.Счет = ПланыСчетов.Хозрасчетный.РемонтИОбслуживаниеОсновныхСредств
			ИЛИ СтрокаТабличнойЧасти.Счет = ПланыСчетов.Хозрасчетный.ЗатратыНаРемонтИОбслуживаниеОсновныхСредств Тогда
			
			СтрокаТабличнойЧасти.ИзменитьЦветФона = Истина;
		Иначе
			СтрокаТабличнойЧасти.ИзменитьЦветФона = Ложь;
		КонецЕсли;	
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()  
		
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("МониторНалогаНаПрибыль", "Дата", Объект.Дата);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеМонитора()
	ЗаполнитьНастройки();
	
	// Должен быть именно такой вызов процедур, как сделано ниже:
	
	// 1. Налоговая Амортизация
	ЗаполнитьТабличныеЧастиНалоговойАмортизации();	
	
	// 2. ЕНД
	ЗаполнитьРеквизитНастройкаЕНД();
	ИмяТабличнойЧасти = "ЕдинаяНалоговаяДекларацияСтрокиОтчета";
	ЗаполнитьТабличныеЧастиЕдинойНалоговойДекларации();
	
	// 3. Налоговая выверка
	ЗаполнитьТабличныеЧастиПоНалоговойВыверке();
	
	УстановитьУсловноеОформление();
	
	// 4. Сверка ЕНД с НВ
	ЗаполнитьСверку();	

КонецПроцедуры

#КонецОбласти
