
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)	
	
	ЕдиницаШт = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("шт");
	
	Если ЕдиницаШт = Неопределено Тогда
		ЕдиницаШт = Справочники.КлассификаторЕдиницИзмерения.НайтиПоРеквизиту("НаименованиеПолное", "Штука");	
	КонецЕсли;	
	
	Если ЕдиницаШт <> Неопределено И ЕдиницаШт <> Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка() Тогда
		ЕдиницаИзмеренияДляУслуг = ЕдиницаШт.Наименование; 	
	КонецЕсли;	
	
	РазмерПорции = 100000;
	
	Объект.РегистрацияИзмененийНоменклатурыЭСФ = Константы.РегистрацияИзмененийНоменклатурыЭСФ.Получить();
	
	Если Объект.РегистрацияИзмененийНоменклатурыЭСФ Тогда
		УзелСинхронизацияЭСФ = ПланыОбмена.СинхронизацияЭСФ.УзелПланаОбменаСинхронизацияЭСФ();
	КонецЕсли;	
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВыгружаемыеДанныеПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗначенийВключитьПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоЗначений.ТекущиеДанные;
	
	// Поле "Включить" имеет три значения 0(выключен), 1(Включен) и 2(когда в группе часть подчиненных элементов включена).
	// Пользователь может только включить или выключить, т.е. пользуется только значениями 0 и 1.
	// Поэтому когда после значения 1 ставится значение 2, автоматические идет замена на значение 0.
	Если ТекущиеДанные.Включить = 2 Тогда
		ТекущиеДанные.Включить = 0;
	КонецЕсли;
	
	УстановитьПометкиПодчиненных(ТекущиеДанные.Код);
	УстановитьПометкиРодителей(ТекущиеДанные.Код);
	
	Коллекция = Объект.ДеревоЗначений.ПолучитьЭлементы();
	РазвернутьСернутьВетки(Коллекция);
	
	// Вернем положение текущей строки.
	КоллекцияЭлементовДерева = Объект.ДеревоЗначений.ПолучитьЭлементы();
	ИдентификаторСтроки = 0;
	ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("Ссылка", ИдентификаторСтроки, КоллекцияЭлементовДерева, ТекущиеДанные.Ссылка, Ложь);
	Элементы.ДеревоЗначений.ТекущаяСтрока = ИдентификаторСтроки;
КонецПроцедуры

&НаКлиенте
Процедура ИмяКаталогаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Укажите каталог выгрузки'");
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ОбработатьНачалоВыбораФайлаВыгрузка", ЭтотОбъект, Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла)));
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовДереваЗначений

&НаКлиенте
Процедура ДеревоЗначенийПередРазворачиванием(Элемент, Строка, Отказ)
	
	ТекущиеДанные = Элементы.ДеревоЗначений.ДанныеСтроки(Строка);
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.ВеткаРазвернута = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗначенийПередСворачиванием(Элемент, Строка, Отказ)
	
	ТекущиеДанные = Элементы.ДеревоЗначений.ДанныеСтроки(Строка);
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.ВеткаРазвернута = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КнопкаНазадНажатие(Команда)
	ОтработатьНажатиеКнопкиНазадИлиДалее("Назад");
КонецПроцедуры

&НаКлиенте
Процедура КнопкаДалееНажатие(Команда)
	ОтработатьНажатиеКнопкиНазадИлиДалее("Далее");
КонецПроцедуры

&НаКлиенте
Процедура КнопкаСнятьФлажки(Команда)
	
	СнятьУстановитьВсеФлажки(0);
	Коллекция = Объект.ДеревоЗначений.ПолучитьЭлементы();
	РазвернутьСернутьВетки(Коллекция);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаУстановитьФлажки(Команда)
	
	СнятьУстановитьВсеФлажки(1);
	Коллекция = Объект.ДеревоЗначений.ПолучитьЭлементы();
	РазвернутьСернутьВетки(Коллекция);
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоИзмененные(Команда)
	
	Если ЗначениеЗаполнено(УзелСинхронизацияЭСФ) Тогда
		// Снятие флажков
		СнятьУстановитьВсеФлажки(0);
		Коллекция = Объект.ДеревоЗначений.ПолучитьЭлементы();
		РазвернутьСернутьВетки(Коллекция);
		
		ОтметитьТолькоИзмененнуюНоменклатуру();	
	Иначе
		ТекстСообщения = НСтр("ru = 'Не найден объект (узел плана обмена) для регистрации изменений номенклатуры.
										|Попробуйте снять и заново установить настройку ""Проверка номенклатуры"" в ""Настройки"" - ""Параметры учета""'");				
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьПометкиПодчиненных(Код)
    
	ДеревоЗначений = ДанныеФормыВЗначение(Объект.ДеревоЗначений, Тип("ДеревоЗначений"));
	
	ПараметрыОтбора = Новый Структура("Код", Код);
	РедактируемыеСтроки = ДеревоЗначений.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
	
	Для Каждого РедактируемаяСтрока ИЗ РедактируемыеСтроки Цикл
		Если РедактируемаяСтрока <> Неопределено Тогда
			ОбработатьЗначенияСтрокДерева(РедактируемаяСтрока, ДеревоЗначений, РедактируемаяСтрока.Включить);
		КонецЕсли;		
	КонецЦикла;
	
	ЗначениеВДанныеФормы(ДеревоЗначений, Объект.ДеревоЗначений);

КонецПроцедуры

&НаСервере
Процедура УстановитьПометкиРодителей(Код)
	
	ДеревоЗначений = ДанныеФормыВЗначение(Объект.ДеревоЗначений, Тип("ДеревоЗначений"));
	
	ПараметрыОтбора = Новый Структура("Код", Код);
	РедактируемыеСтроки = ДеревоЗначений.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
	
	Для Каждого РедактируемаяСтрока ИЗ РедактируемыеСтроки Цикл
		Если РедактируемаяСтрока <> Неопределено Тогда
			Если РедактируемаяСтрока.Родитель <> Неопределено Тогда
				УстановитьЗначениеСтрокиРодителя(РедактируемаяСтрока.Родитель, ДеревоЗначений);
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;

	ЗначениеВДанныеФормы(ДеревоЗначений, Объект.ДеревоЗначений);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьЗначениеСтрокиРодителя(ВеткаРодителя, ДеревоЗначений)
	
	НайденыВключенные	= Ложь;
	НайденыВыключенные	= Ложь;

	Для Каждого СтрокаДерева ИЗ ВеткаРодителя.Строки Цикл		
		
		Если СтрокаДерева.Включить = 0 Тогда
			НайденыВыключенные	= Истина;
		ИначеЕсли СтрокаДерева.Включить = 1 Тогда
			НайденыВключенные	= Истина;
		ИначеЕсли СтрокаДерева.Включить = 2 Тогда
			НайденыВыключенные	= Истина;
			НайденыВключенные	= Истина;
		КонецЕсли; 
		
		Если НайденыВключенные И НайденыВыключенные Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НайденыВключенные И НайденыВыключенные Тогда
		Включить = 2;
	ИначеЕсли НайденыВключенные И (Не НайденыВыключенные) Тогда
		Включить = 1;
	ИначеЕсли (Не НайденыВключенные) И НайденыВыключенные Тогда
		Включить = 0;
	ИначеЕсли (Не НайденыВключенные) И (Не НайденыВыключенные) Тогда
		Включить = 2;
	КонецЕсли;
	
	ВеткаРодителя.Включить = Включить;
	
	// Заполнение ветки верхнего уровня.
	Если ВеткаРодителя.Родитель <> Неопределено Тогда
		УстановитьЗначениеСтрокиРодителя(ВеткаРодителя.Родитель, ДеревоЗначений);
	КонецЕсли;
	
КонецПроцедуры

// Процедура читает строки дерева значений и делает с данными строк необходимые действия.
//
// Параметры:
//	СтрокаДереваГруппа - СтрокаДереваЗначений - строка дерева значений.
//	ДеревоЗначений - ДеревоЗначений - дерево значений.
//	Включить - Число - число 0(выключено), 1(включено) или 2(используется в головных строках в случаях, 
//						когда часть подчиненных строк включена) для указания в подчиненных(головных) строках.
//	ЗаполнитьСписки - Булево - признак необходимости заполнить списки значений для последующей выгрузки данных в Excel файл.
//		
&НаСервере
Процедура ОбработатьЗначенияСтрокДерева(СтрокаДереваГруппа, ДеревоЗначений, 
	Включить = Неопределено, ЗаполнитьСписки = Ложь, ПорцияВыбранныеУслуги = Неопределено, ПорцияВыбранныеТовары = Неопределено, ПорцияБанковскиеСчета = Неопределено, ПорцияВыбранныеКонтрагенты = Неопределено) Экспорт
	
	// Если в строке СтрокаДереваГруппа содержится элемент, то его необходимо поместить в таблицу для выгрузки в Excel,
	// а затем обходить по циклу подчиненные строки.
	Если ЗаполнитьСписки И НЕ СтрокаДереваГруппа.ЭтоГруппа Тогда		
		ЗаполнитьСтрокуСписка(СтрокаДереваГруппа, ПорцияВыбранныеУслуги, ПорцияВыбранныеТовары, ПорцияБанковскиеСчета, ПорцияВыбранныеКонтрагенты);
	КонецЕсли;
	
	РазмерПорцииКонтрагенты = 100;

	// Обход подчиненных строк
	Для Каждого СтрокаДерева Из СтрокаДереваГруппа.Строки Цикл
		
		// Пропуск не выбранных строк при заполнении списков.
		Если ЗаполнитьСписки
			И СтрокаДерева.Включить = 0 Тогда 
			Продолжить;
		КонецЕсли;	
		
		Код = СтрокаДерева.Код;	
		Если ЗначениеЗаполнено(Код) Тогда
			ПараметрыОтбора = Новый Структура("Код", Код);
			РедактируемыеСтроки = ДеревоЗначений.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
			Для Каждого РедактируемаяСтрока Из РедактируемыеСтроки Цикл
				Если РедактируемаяСтрока <> Неопределено Тогда
					Если Не ЗаполнитьСписки Тогда 
						РедактируемаяСтрока.Включить = ?(Включить = Неопределено, СтрокаДерева.Включить, Включить);
					
					ИначеЕсли ЗаполнитьСписки И НЕ РедактируемаяСтрока.ЭтоГруппа Тогда
						// Контроль заполнения порции.
						Если ПорцияВыбранныеУслуги.Количество() = РазмерПорции Тогда 
							СтрокаТаблицы = ТаблицаВыбранныеУслуги.Добавить();
							СтрокаТаблицы.Порция.ЗагрузитьЗначения(ПорцияВыбранныеУслуги);
							ПорцияВыбранныеУслуги = Новый Массив;
						КонецЕсли;	
						// Контроль заполнения порции.
						Если ПорцияВыбранныеТовары.Количество() = РазмерПорции Тогда 
							СтрокаТаблицы = ТаблицаВыбранныеТовары.Добавить();
							СтрокаТаблицы.Порция.ЗагрузитьЗначения(ПорцияВыбранныеТовары);
							ПорцияВыбранныеТовары = Новый Массив;
						КонецЕсли;	
						// Контроль заполнения порции.
						Если ПорцияБанковскиеСчета.Количество() = РазмерПорции Тогда 
							СтрокаТаблицы = ТаблицаБанковскиеСчета.Добавить();
							СтрокаТаблицы.Порция.ЗагрузитьЗначения(ПорцияБанковскиеСчета);
							ПорцияБанковскиеСчета = Новый Массив;
						КонецЕсли;	
						// Контроль заполнения порции.
						Если ПорцияВыбранныеКонтрагенты.Количество() = РазмерПорцииКонтрагенты Тогда 
							СтрокаТаблицы = ТаблицаВыбранныеКонтрагенты.Добавить();
							СтрокаТаблицы.Порция.ЗагрузитьЗначения(ПорцияВыбранныеКонтрагенты);
							ПорцияВыбранныеКонтрагенты = Новый Массив;
						КонецЕсли;	
						
						ЗаполнитьСтрокуСписка(РедактируемаяСтрока, ПорцияВыбранныеУслуги, ПорцияВыбранныеТовары, ПорцияБанковскиеСчета, ПорцияВыбранныеКонтрагенты);	
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;	
		Если СтрокаДерева.Строки.Количество() <> 0 Тогда
			ОбработатьЗначенияСтрокДерева(СтрокаДерева, ДеревоЗначений, Включить, ЗаполнитьСписки, ПорцияВыбранныеУслуги, ПорцияВыбранныеТовары, ПорцияБанковскиеСчета, ПорцияВыбранныеКонтрагенты);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуСписка(СтрокаДерева, ПорцияВыбранныеУслуги, ПорцияВыбранныеТовары, ПорцияБанковскиеСчета, ПорцияВыбранныеКонтрагенты)
	Если ВыгружаемыеДанные = "Номенклатура" 
		И СтрокаДерева.Включить = 1 Тогда
		Если СтрокаДерева.Услуга Тогда
			ПорцияВыбранныеУслуги.Добавить(СтрокаДерева.Ссылка);
		Иначе
			ПорцияВыбранныеТовары.Добавить(СтрокаДерева.Ссылка);
		КонецЕсли;
	ИначеЕсли ВыгружаемыеДанные = "БанковскиеСчета" 
		И СтрокаДерева.Включить = 1 Тогда
		ПорцияБанковскиеСчета.Добавить(СтрокаДерева.Ссылка);
	ИначеЕсли  ВыгружаемыеДанные = "Покупатели"
		И СтрокаДерева.Включить = 1 Тогда
		ПорцияВыбранныеКонтрагенты.Добавить(СтрокаДерева.Ссылка);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСернутьВетки(Коллекция, УстановитьПоУмолчанию = Ложь)
	
	Если НЕ УстановитьПоУмолчанию Тогда
		Для Каждого Строка ИЗ Коллекция Цикл
			Если Строка.ВеткаРазвернута Тогда
				Элементы.ДеревоЗначений.Развернуть(Строка.ПолучитьИдентификатор());
				ПодКоллекция = Строка.ПолучитьЭлементы();
				РазвернутьСернутьВетки(ПодКоллекция);		
			КонецЕсли;		
		КонецЦикла;
	Иначе
		Для Каждого Строка ИЗ Коллекция Цикл
			Строка.ВеткаРазвернута = Ложь;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтработатьНажатиеКнопкиНазадИлиДалее(ИмяКоманды)

	ТекущаяСтраница = Элементы.Страницы.ТекущаяСтраница;
	Страницы = Элементы.Страницы.ПодчиненныеЭлементы;
	
	Если ИмяКоманды = "Далее" Тогда	
		
		Если ТекущаяСтраница = Страницы.СтраницаВыборКаталога Тогда
			
			Отказ = Ложь;
			
			Если НЕ ЗначениеЗаполнено(ВыгружаемыеДанные) Тогда
				ТекстСообщения = НСтр("ru = 'Не выбраны ""Выгружаемые данные"".'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ВыгружаемыеДанные",,Отказ);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ИмяКаталога) Тогда
				ТекстСообщения = НСтр("ru = 'Не выбраны каталог для выгрузки файла.'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ИмяКаталога",,Отказ);
			КонецЕсли;
				
			Если Не Отказ Тогда	
				Элементы.Страницы.ТекущаяСтраница = Страницы.СтраницаВыгрузкаExcel;
				ЗаполнитьДеревоЗначений();
			КонецЕсли;
			
		Иначе
			Состояние(НСтр("ru = 'Выгрузка'"),, НСтр("ru = 'Подготовка таблиц'"));
			ЗаполнитьТаблицыДанныхВыгрузки();		
			
			КоличествоВПорции = ТаблицаВыбранныеУслуги.Количество();
			Если КоличествоВПорции > 0 Тогда				
				Если ЕдиницаИзмеренияДляУслуг = "" Тогда
					ТекстСообщения = НСтр("ru = 'Для выгрузки услуг в базе должна быть создана единица измерения ""шт"".'");
					ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);	
					Возврат;
				КонецЕсли;	
				
				НомерФайла = 1;

				Прогресс = 0;
				ШагПрогресса = 100 / КоличествоВПорции;
				Состояние(НСтр("ru = 'Выгрузка'"), Прогресс, НСтр("ru = 'Сохранение услуг'"));
				
				Для Каждого СтрокаТаблицы Из ТаблицаВыбранныеУслуги Цикл
					СформироватьФайлExcel("Услуги", СтрокаТаблицы.Порция, НомерФайла);
					НомерФайла = НомерФайла + 1;
					
					Прогресс = Прогресс + ШагПрогресса;
					Состояние(НСтр("ru = 'Выгрузка'"), Прогресс, НСтр("ru = 'Сохранение услуг'"));
					
					Если Объект.РегистрацияИзмененийНоменклатурыЭСФ
						И ЗначениеЗаполнено(УзелСинхронизацияЭСФ)
						И НЕ СписокВыгруженнойНоменклатуры.Количество() = 0 Тогда
						УдалитьРегистрациюИзмененийНоменклатуры();				
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;
			
			КоличествоВПорции = ТаблицаВыбранныеТовары.Количество();
			Если КоличествоВПорции > 0 Тогда
				НомерФайла = 1;
				
				Прогресс = 0;
				ШагПрогресса = 100 / КоличествоВПорции;
				Состояние(НСтр("ru = 'Выгрузка'"), Прогресс, НСтр("ru = 'Сохранение товаров'"));
				
				Для Каждого СтрокаТаблицы Из ТаблицаВыбранныеТовары Цикл
					СформироватьФайлExcel("Номенклатура", СтрокаТаблицы.Порция, НомерФайла);
					НомерФайла = НомерФайла + 1;
					
					Прогресс = Прогресс + ШагПрогресса;
					Состояние(НСтр("ru = 'Выгрузка'"), Прогресс, НСтр("ru = 'Сохранение товаров'"));
					
					Если Объект.РегистрацияИзмененийНоменклатурыЭСФ
						И ЗначениеЗаполнено(УзелСинхронизацияЭСФ)
						И НЕ СписокВыгруженнойНоменклатуры.Количество() = 0 Тогда
						УдалитьРегистрациюИзмененийНоменклатуры();				
					КонецЕсли;
				КонецЦикла;	
				
				
			КонецЕсли;
			
			КоличествоВПорции = ТаблицаБанковскиеСчета.Количество();
			Если КоличествоВПорции > 0 Тогда
				НомерФайла = 1;
				
				Прогресс = 0;
				ШагПрогресса = 100 / КоличествоВПорции;
				Состояние(НСтр("ru = 'Выгрузка'"), Прогресс, НСтр("ru = 'Сохранение банковских счетов'"));
				
				Для Каждого СтрокаТаблицы Из ТаблицаБанковскиеСчета Цикл
					СформироватьФайлExcel("БанковскиеСчета", СтрокаТаблицы.Порция, НомерФайла);
					НомерФайла = НомерФайла + 1;
					
					Прогресс = Прогресс + ШагПрогресса;
					Состояние(НСтр("ru = 'Выгрузка'"), Прогресс, НСтр("ru = 'Сохранение банковских счетов'"));
				КонецЦикла;	
			КонецЕсли;	
			
			КоличествоВПорции = ТаблицаВыбранныеКонтрагенты.Количество();
			Если КоличествоВПорции > 0 Тогда
				НомерФайла = 1;
				
				Прогресс = 0;
				ШагПрогресса = 100 / КоличествоВПорции;
				Состояние(НСтр("ru = 'Выгрузка'"), Прогресс, НСтр("ru = 'Сохранение ИНН контрагентов'"));
				
				Для Каждого СтрокаТаблицы Из ТаблицаВыбранныеКонтрагенты Цикл
					СформироватьФайлExcel("Покупатели", СтрокаТаблицы.Порция, НомерФайла);
					НомерФайла = НомерФайла + 1;
					
					Прогресс = Прогресс + ШагПрогресса;
					Состояние(НСтр("ru = 'Выгрузка'"), Прогресс, НСтр("ru = 'Сохранение ИНН контрагентов'"));
				КонецЦикла;	
			КонецЕсли;	
			
		КонецЕсли;
		
	Иначе
		Если ТекущаяСтраница = Страницы.СтраницаВыгрузкаExcel Тогда
			Элементы.Страницы.ТекущаяСтраница = Страницы.СтраницаВыборКаталога;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()

	ТекущаяСтраница = Элементы.Страницы.ТекущаяСтраница;
	Страницы = Элементы.Страницы.ПодчиненныеЭлементы;
	
	Элементы.КнопкаНазад.Доступность = ТекущаяСтраница = Страницы.СтраницаВыгрузкаExcel;
	
	Если ТекущаяСтраница = Страницы.СтраницаВыгрузкаExcel Тогда
		Элементы.КнопкаДалее.Заголовок = НСтр("ru = 'Выгрузить'");
	Иначе
		Элементы.КнопкаДалее.Заголовок = НСтр("ru = 'Далее'");
	КонецЕсли;
	
	Если ВыгружаемыеДанные = "БанковскиеСчета" Тогда 
		Элементы.ДеревоЗначенийВладелецБанковскогоСчета.Видимость = Истина;
		Элементы.ВыгружатьТолькоОсновныеСчета.Видимость = Истина;
	Иначе 
		Элементы.ДеревоЗначенийВладелецБанковскогоСчета.Видимость = Ложь;
		Элементы.ВыгружатьТолькоОсновныеСчета.Видимость = Ложь;
	КонецЕсли;	
	
	Элементы.ТолькоИзмененные.Видимость 		= Объект.РегистрацияИзмененийНоменклатурыЭСФ;	
	Элементы.ДеревоЗначенийКод.Видимость 		= ВыгружаемыеДанные = "Номенклатура";
	Элементы.ДеревоЗначенийАртикул.Видимость 	= ВыгружаемыеДанные = "Номенклатура";
	Элементы.ДеревоЗначенийКодТНВЭД.Видимость 	= ВыгружаемыеДанные = "Номенклатура";
	Элементы.ДеревоЗначенийКодГКЭД.Видимость 	= ВыгружаемыеДанные = "Номенклатура";
	
	Элементы.ДеревоЗначенийИНН.Видимость 		= ВыгружаемыеДанные = "Покупатели";	

КонецПроцедуры

&НаСервере
Процедура ОтметитьТолькоИзмененнуюНоменклатуру()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НоменклатураИзменения.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура.Изменения КАК НоменклатураИзменения
		|ГДЕ
		|	НоменклатураИзменения.Узел = &Узел";	
	Запрос.УстановитьПараметр("Узел", УзелСинхронизацияЭСФ);
	                                         
	КоллекцияДеревоЗначений = РеквизитФормыВЗначение("Объект.ДеревоЗначений", Тип("ДеревоЗначений"));
	
	ОбработатьСтрокиДереваЗначений(КоллекцияДеревоЗначений, КоллекцияДеревоЗначений.Строки, 
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	ЗначениеВРеквизитФормы(КоллекцияДеревоЗначений, "Объект.ДеревоЗначений");
КонецПроцедуры

&НаСервере
Процедура ОбработатьСтрокиДереваЗначений(КоллекцияДеревоЗначений, СтрокиДереваЗначений, МассивНоменклатуры)

	Для Каждого СтрокаДерева Из СтрокиДереваЗначений Цикл	
		
		Если НЕ МассивНоменклатуры.Найти(СтрокаДерева.Ссылка) = Неопределено Тогда
			СтрокаДерева.Включить = 1;		
			
			Если СтрокаДерева.Родитель <> Неопределено Тогда
				УстановитьЗначениеСтрокиРодителя(СтрокаДерева.Родитель, КоллекцияДеревоЗначений);
			КонецЕсли;
		КонецЕсли;	
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ОбработатьСтрокиДереваЗначений(КоллекцияДеревоЗначений, СтрокаДерева.Строки, МассивНоменклатуры)	
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура УдалитьРегистрациюИзмененийНоменклатуры()

	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаСписка Из СписокВыгруженнойНоменклатуры Цикл
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелСинхронизацияЭСФ, СтрокаСписка.Значение);	
	КонецЦикла;	
	
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоЗначений()

	Если ВыгружаемыеДанные = "Номенклатура" Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Номенклатура.Ссылка КАК Ссылка,
			|	Номенклатура.Код КАК Код,
			|	Номенклатура.Услуга КАК Услуга,
			|	Номенклатура.ЭтоГруппа КАК ЭтоГруппа,
			|	Номенклатура.Артикул КАК Артикул,
			|	Номенклатура.КодТНВЭД КАК КодТНВЭД,
			|	Номенклатура.КодГКЭД КАК КодГКЭД,
			|	1 КАК Включить
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	НЕ Номенклатура.ПометкаУдаления
			|
			|УПОРЯДОЧИТЬ ПО
			|	Номенклатура.Наименование ИЕРАРХИЯ";
		
	ИначеЕсли ВыгружаемыеДанные = "БанковскиеСчета" Тогда
		Если ВыгружатьТолькоОсновныеСчета Тогда 
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ДоговорыКонтрагентов.Владелец КАК Владелец
				|ПОМЕСТИТЬ ВременнаяТаблицаКонтрагенты
				|ИЗ
				|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
				|ГДЕ
				|	ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Владелец
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	БанковскиеСчета.Ссылка КАК Ссылка,
				|	БанковскиеСчета.Владелец КАК ВладелецБанковскогоСчета,
				|	ЛОЖЬ КАК ЭтоГруппа,
				|	1 КАК Включить
				|ИЗ
				|	Справочник.Контрагенты КАК Контрагенты
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
				|		ПО Контрагенты.ОсновнойБанковскийСчет = БанковскиеСчета.Ссылка
				|ГДЕ
				|	НЕ БанковскиеСчета.ПометкаУдаления
				|	И Контрагенты.Ссылка В
				|			(ВЫБРАТЬ
				|				ВременнаяТаблицаКонтрагенты.Владелец КАК Владелец
				|			ИЗ
				|				ВременнаяТаблицаКонтрагенты КАК ВременнаяТаблицаКонтрагенты)
				|	И НЕ БанковскиеСчета.ВАрхиве
				|
				|УПОРЯДОЧИТЬ ПО
				|	БанковскиеСчета.НомерСчета";
		Иначе 	
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ДоговорыКонтрагентов.Владелец КАК Владелец
				|ПОМЕСТИТЬ ВременнаяТаблицаКонтрагенты
				|ИЗ
				|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
				|ГДЕ
				|	ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Владелец
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	БанковскиеСчета.Ссылка КАК Ссылка,
				|	БанковскиеСчета.Владелец КАК ВладелецБанковскогоСчета,
				|	ЛОЖЬ КАК ЭтоГруппа,
				|	1 КАК Включить
				|ИЗ
				|	Справочник.БанковскиеСчета КАК БанковскиеСчета
				|ГДЕ
				|	НЕ БанковскиеСчета.ПометкаУдаления
				|	И БанковскиеСчета.Владелец В
				|			(ВЫБРАТЬ
				|				ВременнаяТаблицаКонтрагенты.Владелец КАК Владелец
				|			ИЗ
				|				ВременнаяТаблицаКонтрагенты КАК ВременнаяТаблицаКонтрагенты)
				|	И НЕ БанковскиеСчета.ВАрхиве
				|
				|УПОРЯДОЧИТЬ ПО
				|	БанковскиеСчета.НомерСчета";
		КонецЕсли;
		
	ИначеЕсли ВыгружаемыеДанные = "Покупатели" Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДоговорыКонтрагентов.Владелец КАК Ссылка,
			|	ДоговорыКонтрагентов.Владелец.ИНН КАК ИНН,
			|	ЛОЖЬ КАК ЭтоГруппа,
			|	1 КАК Включить
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|ГДЕ
			|	ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
			|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДоговорыКонтрагентов.Владелец.Наименование
			|АВТОУПОРЯДОЧИВАНИЕ";
		
	КонецЕсли;
	
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ЗначениеВДанныеФормы(Дерево, Объект.ДеревоЗначений);
	
КонецПроцедуры

&НаСервере
Процедура СнятьУстановитьВсеФлажки(Включить)
    
	ДеревоЗначений = ДанныеФормыВЗначение(Объект.ДеревоЗначений, Тип("ДеревоЗначений"));
	
	Для Каждого РедактируемаяСтрока ИЗ ДеревоЗначений.Строки Цикл
		РедактируемаяСтрока.Включить = Включить;
		ОбработатьЗначенияСтрокДерева(РедактируемаяСтрока, ДеревоЗначений, Включить);		
	КонецЦикла;
	
	ЗначениеВДанныеФормы(ДеревоЗначений, Объект.ДеревоЗначений);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицыДанныхВыгрузки()
	
	ТаблицаВыбранныеУслуги.Очистить();
	ТаблицаВыбранныеТовары.Очистить();
	ТаблицаБанковскиеСчета.Очистить();
	ТаблицаВыбранныеКонтрагенты.Очистить();
	
	ДеревоЗначений = ДанныеФормыВЗначение(Объект.ДеревоЗначений, Тип("ДеревоЗначений"));
	
	// Выгрузку делим на порции.
	ПорцияВыбранныеУслуги = Новый Массив;
	ПорцияВыбранныеТовары = Новый Массив;
	ПорцияБанковскиеСчета = Новый Массив;
	ПорцияВыбранныеКонтрагенты = Новый Массив;
	РазмерПорцииКонтрагенты = 100;
	
	Для Каждого РедактируемаяСтрока Из ДеревоЗначений.Строки Цикл
		
		// Пропуск не выбранных строк.
		Если РедактируемаяСтрока.Включить = 0 Тогда 
			Продолжить;
		КонецЕсли;	
		
		ОбработатьЗначенияСтрокДерева(РедактируемаяСтрока, ДеревоЗначений,, Истина, ПорцияВыбранныеУслуги, ПорцияВыбранныеТовары, ПорцияБанковскиеСчета, ПорцияВыбранныеКонтрагенты);
		
		// Контроль заполнения порции.
		Если ПорцияВыбранныеУслуги.Количество() = РазмерПорции Тогда 
			СтрокаТаблицы = ТаблицаВыбранныеУслуги.Добавить();
			СтрокаТаблицы.Порция.ЗагрузитьЗначения(ПорцияВыбранныеУслуги);
			ПорцияВыбранныеУслуги = Новый Массив;
		КонецЕсли;
		// Контроль заполнения порции.
		Если ПорцияВыбранныеТовары.Количество() = РазмерПорции Тогда 
			СтрокаТаблицы = ТаблицаВыбранныеТовары.Добавить();
			СтрокаТаблицы.Порция.ЗагрузитьЗначения(ПорцияВыбранныеТовары);
			ПорцияВыбранныеТовары = Новый Массив;
		КонецЕсли;	
		// Контроль заполнения порции.
		Если ПорцияБанковскиеСчета.Количество() = РазмерПорции Тогда 
			СтрокаТаблицы = ТаблицаБанковскиеСчета.Добавить();
			СтрокаТаблицы.Порция.ЗагрузитьЗначения(ПорцияБанковскиеСчета);
			ПорцияБанковскиеСчета = Новый Массив;
		КонецЕсли;	
		// Контроль заполнения порции.
		Если ПорцияВыбранныеКонтрагенты.Количество() = РазмерПорцииКонтрагенты Тогда 
			СтрокаТаблицы = ТаблицаВыбранныеКонтрагенты.Добавить();
			СтрокаТаблицы.Порция.ЗагрузитьЗначения(ПорцияВыбранныеКонтрагенты);
			ПорцияВыбранныеКонтрагенты = Новый Массив;
		КонецЕсли;	
	КонецЦикла;
	
	// Заполнение остатков выборки.
	Если ПорцияВыбранныеУслуги.Количество() > 0 Тогда 
		СтрокаТаблицы = ТаблицаВыбранныеУслуги.Добавить();
		СтрокаТаблицы.Порция.ЗагрузитьЗначения(ПорцияВыбранныеУслуги);
		ПорцияВыбранныеУслуги = Неопределено;
	КонецЕсли;	
	Если ПорцияВыбранныеТовары.Количество() > 0 Тогда 
		СтрокаТаблицы = ТаблицаВыбранныеТовары.Добавить();
		СтрокаТаблицы.Порция.ЗагрузитьЗначения(ПорцияВыбранныеТовары);
		ПорцияВыбранныеТовары = Неопределено;
	КонецЕсли;	
	Если ПорцияБанковскиеСчета.Количество() > 0 Тогда 
		СтрокаТаблицы = ТаблицаБанковскиеСчета.Добавить();
		СтрокаТаблицы.Порция.ЗагрузитьЗначения(ПорцияБанковскиеСчета);
		ПорцияБанковскиеСчета = Неопределено;
	КонецЕсли;	
	Если ПорцияВыбранныеКонтрагенты.Количество() > 0 Тогда 
		СтрокаТаблицы = ТаблицаВыбранныеКонтрагенты.Добавить();
		СтрокаТаблицы.Порция.ЗагрузитьЗначения(ПорцияВыбранныеКонтрагенты);
		ПорцияВыбранныеКонтрагенты = Неопределено;
	КонецЕсли;	

	ЗначениеВДанныеФормы(ДеревоЗначений, Объект.ДеревоЗначений);

КонецПроцедуры

&НаКлиенте
Процедура СформироватьФайлExcel(ТипВыгрузки, Порция, НомерФайла)

	#Если МобильныйКлиент Тогда
		Возврат;
	#КонецЕсли
	
	Отказ = Ложь;
	
	ТабличныйДокумент = ПолучитьТабличныйДокумент(ТипВыгрузки, Отказ, Порция);
	
	Если Отказ Тогда
		ТекстОповещения = НСтр("ru = 'Формирование файла отменено.'");
		ПоказатьОповещениеПользователя(ТекстОповещения,,,БиблиотекаКартинок.Информация32); 
		СписокВыгруженнойНоменклатуры.Очистить();
		Возврат;
	КонецЕсли;	
		
	ИмяКаталога = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяКаталога);
	
	// Открытие приложения Excel
	Попытка
		Excel = Новый COMОбъект("Excel.Application");
		Excel.AutomationSecurity = 3; // msoAutomationSecurityForceDisable = 3 отключение исполнение макросов.
	Исключение
		СписокВыгруженнойНоменклатуры.Очистить();
		ВызватьИсключение НСтр("ru = 'Не удалось подключить COM-объект Excel.
			|Вероятные причины:
			| - На сервере не установлен Microsoft Office;
			| - У пользователя недостаточно прав на создание COM-объектов;
			| - Включен контроль учетных записей Windows;
			| - Операционная система не из семейства Windows.
			|
			|Техническая информация:
			|'") + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Excel.Visible = 0;
	Excel.DisplayAlerts = 0;
	Excel.DefaultSaveFormat = 51;
	
	Расширение = "xlsx";
	ТипФайла = ТипФайлаТабличногоДокумента.XLSX;
	
	// Проверка версии
	ВерсияExcel = Лев(Excel.Version, Найти(Excel.Version,".") -1);
	Если ВерсияExcel < "16" Тогда
		ТекстСообщения = НСтр("ru = 'Используется устаревшая версия Excel.
			|Рекомендуется установить версию Excel не меньше, чем Excel 2007.
			|(Для администратора: Для корректрой работы необходима версия Application 16 и выше).'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);	
	КонецЕсли;

	// Сохранение во временных файлах
	#Если ВебКлиент Тогда
		Если ТипВыгрузки = "Номенклатура" Тогда
			ИмяТемпФайла = ИмяКаталога + "Выгрузка номенклатуры." + Расширение;
			
		ИначеЕсли ТипВыгрузки = "Услуги" Тогда
			ИмяТемпФайла = ИмяКаталога + "Выгрузка услуг." + Расширение;
			
		ИначеЕсли ТипВыгрузки = "БанковскиеСчета" Тогда
			ИмяТемпФайла = ИмяКаталога + "Выгрузка банковские счета." + Расширение;
			
		ИначеЕсли ТипВыгрузки = "Покупатели" Тогда
			ИмяТемпФайла = ИмяКаталога + "Выгрузка ИНН покупателей." + Расширение;
		КонецЕсли;	
	#Иначе
		ИмяТемпФайла = ПолучитьИмяВременногоФайла("." + Расширение);
	#КонецЕсли
	
	ТабличныйДокумент.Записать(ИмяТемпФайла, ТипФайла);
	
	// Добавление общей книги
	ОбщаяКнигаExcel = Excel.Application.Workbooks.Add();
	ОбщаяКнигаExcel.Activate();

	// Открытие временной книги
	ВременнаяКнигаExcel = Excel.WorkBooks.Open(ИмяТемпФайла);
	// Чтение первого листа
	ЛистСДанными = ВременнаяКнигаExcel.Sheets(1);
	ЛистСДанными.Select();
	// Копирование в общую книгу
	ЛистСДанными.Copy(ОбщаяКнигаExcel.Sheets(1));
	
	// Закрытие временной книги
	ВременнаяКнигаExcel.Close(0);
	ВременнаяКнигаExcel = Неопределено;
	ЛистСДанными = Неопределено;
	
	// Имя файла
	Если ТипВыгрузки = "Номенклатура" Тогда
		ПолноеИмяФайла = СтрШаблон("%1goods%2.%3", ИмяКаталога, НомерФайла, Расширение);
	ИначеЕсли ТипВыгрузки = "Услуги" Тогда
		ПолноеИмяФайла = СтрШаблон("%1services%2.%3", ИмяКаталога, НомерФайла, Расширение);
	ИначеЕсли ТипВыгрузки = "БанковскиеСчета" Тогда
		ПолноеИмяФайла = СтрШаблон("%1bankAccounts%2.%3", ИмяКаталога, НомерФайла, Расширение);
	ИначеЕсли ТипВыгрузки = "Покупатели" Тогда
		ПолноеИмяФайла = СтрШаблон("%1buyers%2.%3", ИмяКаталога, НомерФайла, Расширение);		
	КонецЕсли;	
	
	// Сохранение общей книги
	ОбщаяКнигаExcel.SaveCopyAs(ПолноеИмяФайла);
	ОбщаяКнигаExcel.Close();
	ОбщаяКнигаExcel = Неопределено;
		
	// Закрытие приложения
	Excel.Quit();	
	Excel = Неопределено;
	
	ТекстОповещения = НСтр("ru = 'Файл успешно сформирован'");
	ТекстПояснения = ПолноеИмяФайла;
	ПоказатьОповещениеПользователя(
		ТекстОповещения, 
		Новый ОписаниеОповещения("ОткрытьПроводник", ЭтотОбъект, Новый Структура("ПолноеИмяФайла", ПолноеИмяФайла)), 
		ТекстПояснения, 
		БиблиотекаКартинок.Информация32);
	
	// Удаление временных файлов
	УдалитьФайлы(ИмяТемпФайла);	
КонецПроцедуры

&НаСервере
Функция ПолучитьТабличныйДокумент(ТипВыгрузки, Отказ, Порция)

	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Макет = Обработка.ПолучитьМакет("ПФ_MXL_ДанныеСправочников");
	
	Если ТипВыгрузки = "Номенклатура" Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаНоменклатура");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаНоменклатура");
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Номенклатура.Ссылка КАК Ссылка,
			|	Номенклатура.Наименование КАК Наименование,
			|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(150)) КАК НаименованиеПолное,
			|	Номенклатура.Ссылка.ЕдиницаИзмерения КАК ЕдИзм,
			|	Номенклатура.КодТНВЭД.Представление КАК ТНВЭД
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Ссылка В(&МассивСсылок)
			|	И НЕ Номенклатура.ПометкаУдаления";
		Запрос.УстановитьПараметр("МассивСсылок", Порция);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл			
			Если НЕ ЗначениеЗаполнено(Выборка.ТНВЭД) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнен ТН ВЭД в номенклатуре ""%1"".'"), Выборка.Наименование);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка,,,Отказ);	
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Выборка.ЕдИзм) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнена единица измерения в номенклатуре ""%1"".'"), Выборка.Наименование);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка,,,Отказ);	
			КонецЕсли;
			
			Если Отказ Тогда
				Продолжить;					
			КонецЕсли;
			
			ОбластьМакета.Параметры.Заполнить(Выборка);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Если Объект.РегистрацияИзмененийНоменклатурыЭСФ Тогда
				СписокВыгруженнойНоменклатуры.Добавить(Выборка.Ссылка);	
			КонецЕсли;	
		КонецЦикла;
		
	ИначеЕсли ТипВыгрузки = "Услуги" Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаУслуги");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаУслуги");
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Номенклатура.Ссылка КАК Ссылка,
			|	Номенклатура.Наименование КАК Наименование,
			|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(150)) КАК НаименованиеПолное,
			|	Номенклатура.КодГКЭД.Представление КАК ГКЭД
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Ссылка В(&МассивСсылок)
			|	И НЕ Номенклатура.ПометкаУдаления";
		Запрос.УстановитьПараметр("МассивСсылок", Порция);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Отказ = Ложь;

		Пока Выборка.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(Выборка.ГКЭД) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнен ГКЭД в услуге ""%1"".'"), Выборка.Наименование);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка,,, Отказ);
			КонецЕсли;	
			
			Если Отказ Тогда
				Продолжить;					
			КонецЕсли;

			ОбластьМакета.Параметры.Заполнить(Выборка);
			ОбластьМакета.Параметры.ЕдИзм = ЕдиницаИзмеренияДляУслуг;
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Если Объект.РегистрацияИзмененийНоменклатурыЭСФ Тогда
				СписокВыгруженнойНоменклатуры.Добавить(Выборка.Ссылка);	
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипВыгрузки = "БанковскиеСчета" Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаБанковскийСчет");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаБанковскийСчет");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	БанковскиеСчета.Владелец КАК ВладелецБанковскогоСчета,
			|	БанковскиеСчета.Владелец.Наименование КАК НаименованиеКонтрагента,
			|	БанковскиеСчета.Владелец.ИНН КАК ИНН,
			|	БанковскиеСчета.Наименование КАК Наименование,
			|	БанковскиеСчета.НомерСчета КАК НомерСчета,
			|	БанковскиеСчета.Банк.Код КАК БИКБанка,
			|	БанковскиеСчета.ВалютаДенежныхСредств.Код КАК КодВалюты
			|ИЗ
			|	Справочник.БанковскиеСчета КАК БанковскиеСчета
			|ГДЕ
			|	БанковскиеСчета.Ссылка В(&МассивСсылок)
			|	И НЕ БанковскиеСчета.ПометкаУдаления";
		Запрос.УстановитьПараметр("МассивСсылок", Порция);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Отказ = Ложь;
		
		Пока Выборка.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(Выборка.ИНН) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'У владельца(контрагента) ""%1"" банковского счета ""%2"" не заполнен ИНН.'"), 
													Выборка.НаименованиеКонтрагента, Выборка.Наименование);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Выборка.ВладелецБанковскогоСчета,,, Отказ);
			КонецЕсли;
			
			Если Отказ Тогда
				Продолжить;					
			КонецЕсли;	
			
			ОбластьМакета.Параметры.Заполнить(Выборка);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЦикла;	
		
	ИначеЕсли ТипВыгрузки = "Покупатели" Тогда
		
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаПокупатели");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Контрагенты.Ссылка КАК Ссылка,
			|	Контрагенты.Наименование КАК Наименование,
			|	Контрагенты.ИНН КАК ИНН
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.Ссылка В(&МассивСсылок)
			|	И НЕ Контрагенты.ПометкаУдаления";

		Запрос.УстановитьПараметр("МассивСсылок", Порция);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Отказ = Ложь;
		
		Пока Выборка.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(Выборка.ИНН) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'У контрагента ""%1"" не заполнен ИНН.'"), Выборка.Наименование);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка,,, Отказ);
			КонецЕсли;
			
			Если Отказ Тогда
				Продолжить;					
			КонецЕсли;	
			
			ОбластьМакета.Параметры.Заполнить(Выборка);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЦикла;	

	КонецЕсли;	

	Возврат ТабличныйДокумент;
КонецФункции

&НаКлиенте
Процедура ОбработатьНачалоВыбораФайлаВыгрузка(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ИмяКаталога = ДиалогВыбораФайла.Каталог;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПроводник(ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ПолноеИмяФайла) Тогда 
		ФайловаяСистемаКлиент.ОткрытьПроводник(ДополнительныеПараметры.ПолноеИмяФайла);
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти
