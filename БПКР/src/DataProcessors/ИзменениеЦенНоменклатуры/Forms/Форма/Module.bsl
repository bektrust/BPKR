
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ Параметры.Свойство("АдресХранилищаТовары") 
		Или НЕ ЗначениеЗаполнено(Параметры.АдресХранилищаТовары) Тогда
		ТекстСообщения = НСтр("ru = 'Непосредственное открытие обработки изменения таблицы товаров не предусмотрено. 
		|Для открытия обработки воспользуйтесь командой ""Изменить"" в форме документа Установка цен номенклатуры'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	// заполним реквизиты формы из переданных параметров
	СписокСвойств = "АдресХранилищаТовары, ДокументДата, ДокументОрганизация";
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры, СписокСвойств);
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(Параметры.АдресХранилищаТовары);
	Объект.Товары.Загрузить(ТаблицаТоваров);
	
	ПорядокОкругленияПоУмолчанию = Перечисления.ПорядкиОкругления.Окр0_01;
	ПеренестиВДокумент = Ложь;

	СформироватьСписокДействий(Элементы.ТекущееДействие.СписокВыбора);
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ФормаЗакрыта = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ФормаЗакрыта Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ФормаЗакрыта И Модифицированность И НЕ ПеренестиВДокумент И Объект.Товары.Количество() > 0 Тогда
		
		Режим =  РежимДиалогаВопрос.ДаНетОтмена;
		ТекстВопроса = НСтр("ru = 'Перенести изменения в документ?'");
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Отказ", Отказ);
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПередЗакрытием", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ПриЗакрытииФормыНаСервере();

	Если ПеренестиВДокумент Тогда
		
		ПараметрОповещения = Новый Структура;
		ПараметрОповещения.Вставить("ИдентификаторВызывающейФормы", 					ВладелецФормы.УникальныйИдентификатор);
		ПараметрОповещения.Вставить("АдресОбработаннойТабличнойЧастиТоварыВХранилище", 	АдресХранилищаТовары);
		Оповестить("ОбработанаТабличнаяЧастьТовары", ПараметрОповещения, ВладелецФормы);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода ТекущееДействие.
//
&НаКлиенте
Процедура ТекущееДействиеПриИзменении(Элемент)
	ПриИзмененииТекущегоДействия();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	
	ПеренестиВДокумент = Истина;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьБезПереноса(Команда)

	Модифицированность = Ложь;
	ПеренестиВДокумент = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	
	Если ТекущееДействие = "УстановитьЦеныПоТипу" Тогда     
		
		Если НЕ ЗначениеЗаполнено(ВариантЗначенияТипЦенНоменклатуры) Тогда
			ТекстСообщения = НСтр("ru = 'Не указан тип цен номенклатуры'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ВариантЗначенияТипЦенНоменклатуры");
			Возврат;
		КонецЕсли;
		
		УстановитьЦеныПоТипу(ВариантЗначенияТипЦенНоменклатуры);
		
	ИначеЕсли ТекущееДействие = "ИзменитьЦеныНаПроцент" Тогда    
		
		Если НЕ ЗначениеЗаполнено(ВариантЗначенияЧислоПроцент) Тогда
			ТекстСообщения = НСтр("ru = 'Не указан процент'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ВариантЗначенияЧислоПроцент");
			Возврат;
		КонецЕсли;
		
		ИзменитьЦенуНаПроцент(ВариантЗначенияЧислоПроцент);
		
	ИначеЕсли ТекущееДействие = "ОкруглитьЦеныДо" Тогда
		
		Если НЕ ЗначениеЗаполнено(ВариантЗначенияПорядокОкругления) Тогда
			ТекстСообщения = НСтр("ru = 'Не указан порядок округления'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ВариантЗначенияПорядокОкругления");
			Возврат;
		КонецЕсли;
		
		ОкруглитьЦену(ВариантЗначенияПорядокОкругления);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Действие указано не верно.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ТекущееДействие");
		Возврат;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		СтрокаТабличнойЧасти.Пометка = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		СтрокаТабличнойЧасти.Пометка = Истина;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий
&НаКлиенте
Процедура ПослеЗакрытияВопросаПередЗакрытием(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		ПеренестиВДокумент = Истина;
		ФормаЗакрыта = Истина;
		Закрыть();
	ИначеЕсли  Результат = КодВозвратаДиалога.Нет Тогда
		ФормаЗакрыта = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СформироватьСписокДействий(СписокДействий)
	
	// Заполним список возможных действий с табличной частью.
	СписокДействий.Очистить();
	
	СписокДействий.Добавить("УстановитьЦеныПоТипу", 				НСтр("ru = 'Установить цены по типу цен'"));
	СписокДействий.Добавить("ИзменитьЦеныНаПроцент",				НСтр("ru = 'Изменить цены на процент'"));
	СписокДействий.Добавить("ОкруглитьЦеныДо", 						НСтр("ru = 'Округлить цены до'"));

	ТекущееДействие = Элементы.ТекущееДействие.СписокВыбора[0].Значение;

КонецПроцедуры 

&НаСервере
Процедура ПриЗакрытииФормыНаСервере()
	Если ПеренестиВДокумент Тогда
		ТаблицаТовары = Объект.Товары.Выгрузить();
		ПоместитьВоВременноеХранилище(ТаблицаТовары, АдресХранилищаТовары);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииТекущегоДействия()
	
	Если ТекущееДействие = "УстановитьЦеныПоТипу" Тогда       
		
		Элементы.ГруппаСтраницыПоляВводаВариантаЗначения.ТекущаяСтраница = Элементы.ГруппаПолеВводаВариантаЗначенияТипЦенНоменклатуры;
		//Элементы.ГруппаСтраницыПодсказки.ТекущаяСтраница = Элементы.ГруппаПодсказкаПрименить;
		//ВариантЗначенияТипЦенНоменклатуры = ДокументТипЦен;
	ИначеЕсли ТекущееДействие = "ИзменитьЦеныНаПроцент" Тогда       
		
		Элементы.ГруппаСтраницыПоляВводаВариантаЗначения.ТекущаяСтраница = Элементы.ГруппаПолеВводаВариантаЗначенияЧислоПроцент;
		//Элементы.ГруппаСтраницыПодсказки.ТекущаяСтраница = Элементы.ГруппаПодсказкаПрименить;
		ВариантЗначенияЧислоПроцент = Неопределено;
		
	ИначеЕсли ТекущееДействие = "ОкруглитьЦеныДо" Тогда
		
		Элементы.ГруппаСтраницыПоляВводаВариантаЗначения.ТекущаяСтраница = Элементы.ГруппаПолеВводаВариантаЗначенияПорядокОкругления;
		//Элементы.ГруппаСтраницыПодсказки.ТекущаяСтраница = Элементы.ГруппаПодсказкаПрименить;
		ВариантЗначенияПорядокОкругления = ПорядокОкругленияПоУмолчанию;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьЦеныПоТипу(УстанавливаемыйТипЦен)
	
	Если НЕ ЗначениеЗаполнено(УстанавливаемыйТипЦен) Тогда
		Возврат;
	КонецЕсли; 
	
	ВалютаРегламентированногоУчета 	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

	//	Получим цены нужного типа
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивНоменклатуры", 	Объект.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("Организация", 			ДокументОрганизация);
	Запрос.УстановитьПараметр("ТипЦен", 				УстанавливаемыйТипЦен);
	Запрос.УстановитьПараметр("ДатаЦен", 				ДокументДата);
	Запрос.УстановитьПараметр("ВалютаЦенПоУмолчанию", 	ВалютаРегламентированногоУчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Валюта, &ВалютаЦенПоУмолчанию) КАК Валюта,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ДатаЦен,
	|				Номенклатура В (&МассивНоменклатуры)
	|					И Организация = &Организация
	|					И ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО (ЦеныНоменклатурыСрезПоследних.Номенклатура = СправочникНоменклатура.Ссылка)
	|ГДЕ
	|	СправочникНоменклатура.Ссылка В(&МассивНоменклатуры)";

	ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();
	
	// Найдем у данной номенклатуры значение цены выбранного типа.
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
		Если СтрокаТабличнойЧасти.Пометка Тогда
			// Сбросим выборку для последующего поиска.
			ВыборкаИзЗапроса.Сбросить();
			
			// Ищем в выборке номенклатуру.
			Если ВыборкаИзЗапроса.НайтиСледующий(СтрокаТабличнойЧасти.Номенклатура, "Номенклатура")  Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,ВыборкаИзЗапроса);
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры  

&НаСервере
Процедура ОкруглитьЦену(ПорядокОкругленияЦены)

	Если НЕ ЗначениеЗаполнено(ПорядокОкругленияЦены) Тогда
		Возврат;
	КонецЕсли; 

	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда
			СтрокаТабличнойЧасти.Цена = Ценообразование.ОкруглитьЦену(СтрокаТабличнойЧасти.Цена, ПорядокОкругленияЦены, Истина);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ИзменитьЦенуНаПроцент(ПроцентИзменения)

	Если НЕ ЗначениеЗаполнено(ПроцентИзменения) Тогда
		Возврат;
	КонецЕсли; 

	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда
			СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * (100 + ПроцентИзменения) / 100;
		КонецЕсли;
	КонецЦикла; 

КонецПроцедуры 

#КонецОбласти
