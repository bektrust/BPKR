#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОтборПериодРегистрации = НачалоМесяца(ТекущаяДатаСеанса());
	МесяцСтрокой = Формат(ОтборПериодРегистрации, "ДФ='MMMM yyyy'");	
	
	ОтборОрганизация = ПолучитьОрганизациюПоУмолчанию();
	
	ПолучитьДанныеУчетнойПолитикиПоПерсоналу();
	
	УчетЗаработнойПлатыВВалюте = ПолучитьФункциональнуюОпцию("УчетЗаработнойПлатыВВалюте");
	
	ПриказыКадровые.Параметры.УстановитьЗначениеПараметра("ФизЛицо", Справочники.ФизическиеЛица.ПустаяСсылка());	
	СписокВыплаты.Параметры.УстановитьЗначениеПараметра("НачалоПериода", НачалоМесяца(ОтборПериодРегистрации) - 1);
	СписокВыплаты.Параметры.УстановитьЗначениеПараметра("КонецПериода", КонецМесяца(ОтборПериодРегистрации) + 1);	
	
	ДобавитьПорядок(Сотрудники.Порядок);
	ДобавитьПорядок(СотрудникиПоТрудовымСоглашениям.Порядок);
	ДобавитьПорядок(ПлановыеНачисленияНачало.Порядок);
	ДобавитьПорядок(ПлановыеНачисленияОкончание.Порядок);
	ДобавитьПорядок(ПлановыеУдержанияНачало.Порядок);
	ДобавитьПорядок(ПлановыеУдержанияОкончание.Порядок);
	ДобавитьПорядок(ПоощренияИВзыскания.Порядок);
	ДобавитьПорядок(СтатусыСотрудников.Порядок);
	ДобавитьПорядок(СтажиСотрудников.Порядок);
	ДобавитьПорядок(ВыплаченнаяЗарплата.Порядок);
	ДобавитьПорядок(ПодоходныйНалог.Порядок);
	ДобавитьПорядок(СоциальныйФонд.Порядок);
	ДобавитьПорядок(Начисления.Порядок);
	ДобавитьПорядок(Удержания.Порядок);
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьПараметрыДинамическихСписков();
	СформироватьРасшифровкуРасчета();
	ОбновитьВидимостьДанныхРасчета();
	СформироватьТаблицуСписокСотрудников();
	УстановитьОтборНаСписокСотрудников();
	ЗаполнитьЗакладкуНастройки();
	УстановитьВидимостьДоступностьЭлементов();

	СписокСотрудников.Сортировать("ФизЛицо, ТабельныйНомер");
КонецПроцедуры

// Процедура - обработчик события формы "ПриЗагрузкеДанныхИзНастроекНаСервере".
//
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОтборПериодРегистрации 	= Настройки.Получить("ОтборПериодРегистрации"); 
	
	Если НЕ ЗначениеЗаполнено(ОтборПериодРегистрации) Тогда 
		ОтборПериодРегистрации = ТекущаяДатаСеанса();
	КонецЕсли;	
	
	МесяцСтрокой = Формат(ОтборПериодРегистрации, "ДФ='MMMM yyyy'");
	
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода ОтборПодразделение.
//
&НаКлиенте
Процедура ОтборПодразделениеПриИзменении(Элемент)
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСотрудники;
	УстановитьПараметрыДинамическихСписков();
	ОбновитьВидимостьДанныхРасчета();
	УстановитьОтборНаСписокСотрудников();
КонецПроцедуры

&НаКлиенте
Процедура СортировкаПоТабельномуНомеруПриИзменении(Элемент)
	
	Если СортировкаПоТабельномуНомеру Тогда
		Сортировка = "ТабельныйНомер, ФизЛицо";
	Иначе
		Сортировка = "ФизЛицо, ТабельныйНомер";		
	КонецЕсли;
	
	СписокСотрудников.Сортировать(Сортировка);
КонецПроцедуры

&НаКлиенте
Процедура ВсеСотрудникиПриИзменении(Элемент)
	
	УстановитьПараметрыДинамическихСписков();
	ОбновитьВидимостьДанныхРасчета();	
	УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ОтборОрганизация) Тогда
		ОтборОрганизация = ПолучитьОрганизациюПоУмолчанию();
		
		ТекстСообщения = НСтр("ru = 'Организация не может быть пустой.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;	
	
	ПолучитьДанныеУчетнойПолитикиПоПерсоналу();
	
	УстановитьПараметрыДинамическихСписков();
	СформироватьРасшифровкуРасчета();
	ОбновитьВидимостьДанныхРасчета();
	УстановитьВидимостьДоступностьЭлементов();
	ЗаполнитьЗакладкуНастройки();
КонецПроцедуры

&НаКлиенте
Процедура ПоследующиеМесяцыПриИзменении(Элемент)
	УстановитьПараметрыДинамическихСписков();
	ОбновитьВидимостьДанныхРасчета();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокСотрудников

// Процедура - обработчик события ПриАктивизацииСтроки ТЧ СписокСотрудников 
//
&НаКлиенте
Процедура СписокСотрудниковПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ОтборФизЛицо = Элемент.ТекущиеДанные.ФизЛицо;
		
		УстановитьПараметрыДинамическихСписков();
		ОбновитьВидимостьДанныхРасчета();		
		СформироватьЗаголовок();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПриказыКадровые

&НаКлиенте
Процедура ПриказыКадровыеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СсылкаДокумента = Элементы.ПриказыКадровые.ТекущиеДанные.Регистратор;
	НазваниеДокумента = ПолучитьНазваниеДокумента(СсылкаДокумента);
	ПараметрыФормы 	= Новый Структура("Ключ", СсылкаДокумента);
	ОткрытьФорму("Документ." + НазваниеДокумента + ".ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументы

&НаКлиенте
Процедура СписокДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СсылкаДокумента = Элементы.СписокДокументы.ТекущиеДанные.Документ;
	НазваниеДокумента = ПолучитьНазваниеДокумента(СсылкаДокумента);
	ПараметрыФормы 	= Новый Структура("Ключ", СсылкаДокумента);
	ОткрытьФорму("Документ." + НазваниеДокумента + ".ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокПлановыеНачисленияУдержания

&НаКлиенте
Процедура СписокПлановыеНачисленияУдержанияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СсылкаДокумента = Элементы.СписокПлановыеНачисленияУдержания.ТекущиеДанные.РегистраторНачало;
	НазваниеДокумента = ПолучитьНазваниеДокумента(СсылкаДокумента);
	ПараметрыФормы 	= Новый Структура("Ключ", СсылкаДокумента);
	ОткрытьФорму("Документ." + НазваниеДокумента + ".ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры

#КонецОбласти

//#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокНачисленияУдержания

//&НаКлиенте
//Процедура СписокНачисленияУдержанияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
//	
//	СсылкаДокумента = Элементы.СписокНачисленияУдержания.ТекущиеДанные.Регистратор;
//	НазваниеДокумента = ПолучитьНазваниеДокумента(СсылкаДокумента);
//	ПараметрыФормы 	= Новый Структура("Ключ", СсылкаДокумента);
//	ОткрытьФорму("Документ." + НазваниеДокумента + ".ФормаОбъекта", ПараметрыФормы);
//КонецПроцедуры

//#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокВыплаты

&НаКлиенте
Процедура СписокВыплатыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СсылкаДокумента = Элементы.СписокВыплаты.ТекущиеДанные.Регистратор;
	НазваниеДокумента = ПолучитьНазваниеДокумента(СсылкаДокумента);
	ПараметрыФормы 	= Новый Структура("Ключ", СсылкаДокумента);
	ОткрытьФорму("Документ." + НазваниеДокумента + ".ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокПодоходныйНалог

&НаКлиенте
Процедура СписокПодоходныйНалогПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элементы.СписокПодоходныйНалог.ТекущиеДанные;
	
	Если ТекущаяСтрока <> Неопределено И Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя = "ГруппаПодоходныйНалог" Тогда
		
		УстановитьПараметрыДинамическихСписков(ТекущаяСтрока.ФизЛицо);	
		
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокСоциальныйФонд

&НаКлиенте
Процедура СписокСоциальныйФондПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элементы.СписокСоциальныйФонд.ТекущиеДанные;
	
	Если ТекущаяСтрока <> Неопределено И Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя = "ГруппаСоциальныйФонд" Тогда
		
		УстановитьПараметрыДинамическихСписков(ТекущаяСтрока.ФизЛицо);	
		
	КонецЕсли;		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокРасчетныеЛистки

&НаКлиенте
Процедура СписокРасчетныеЛисткиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СсылкаДокумента = Элементы.СписокРасчетныеЛистки.ТекущиеДанные.Документ;
	НазваниеДокумента = ПолучитьНазваниеДокумента(СсылкаДокумента);
	ПараметрыФормы 	= Новый Структура("Ключ", СсылкаДокумента);
	ОткрытьФорму("Документ." + НазваниеДокумента + ".ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сформировать(Команда)
	
	УстановитьПараметрыДинамическихСписков();
	СформироватьРасшифровкуРасчета();
	ОбновитьВидимостьДанныхРасчета();
	СформироватьТаблицуСписокСотрудников();
	УстановитьОтборНаСписокСотрудников();
	ЗаполнитьЗакладкуНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерепровестиДокументы(Команда)
	ПоказатьРезультатПерепроведения = Истина;
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("МассивСсылок", ДокументыДляОбработки());
	РезультатВыполнения = ПерепровестиДокументыНаСервере(ПараметрыКоманды);
	ПараметрыОбработчикаОжидания = Новый Структура();
	
	Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	КонецЕсли;
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТаблицуРасшифровка(Команда)
	ПоказатьРезультатПерепроведения = Ложь;
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяПолитикаПоПерсоналу(Команда)
	ОткрытьФорму("РегистрСведений.УчетнаяПолитикаПоПерсоналу.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокПределов(Команда)
	ОткрытьФорму("РегистрСведений.ПределыПоПодразделениям.Форма.ФормаСписка");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ВводМесяцаОбработкаВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	УстановитьПараметрыДинамическихСписков();
	СформироватьРасшифровкуРасчета();
	ОбновитьВидимостьДанныхРасчета();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость и доступность элементов.
//
&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()	
	
	Элементы.ПриказыКадровые.Видимость = НЕ ПоказатьРезультатПерепроведения;
	
	Элементы.Результат.Видимость = ПоказатьРезультатПерепроведения;
	Элементы.СостояниеПрогресса.Видимость = ПоказатьРезультатПерепроведения;
	Элементы.ПоказатьТаблицуДокументов.Видимость = ПоказатьРезультатПерепроведения;
	
	ПННарастающимИтогом = НЕ ДанныеУчетнойПолитикиПоПерсоналу.РасчетПНБезНакопления;
	                                                              
	Элементы.СписокПодоходныйНалогНачисленоНГ.Видимость 		= ПННарастающимИтогом;
	Элементы.СписокПодоходныйНалогОблагаемыйДоходНГ.Видимость 	= ПННарастающимИтогом;
	Элементы.СписокПодоходныйНалогПФРНГ.Видимость 				= ПННарастающимИтогом;
	Элементы.СписокПодоходныйНалогГНПФРНГ.Видимость 			= ПННарастающимИтогом;
	Элементы.СписокПодоходныйНалогПИВНГ.Видимость 				= ПННарастающимИтогом;
	Элементы.СписокПодоходныйНалогМРДНГ.Видимость 				= ПННарастающимИтогом;
	Элементы.СписокПодоходныйНалогОДПННГ.Видимость 				= ПННарастающимИтогом;
	Элементы.СписокПодоходныйНалогПННГ.Видимость 				= ПННарастающимИтогом;
	Элементы.СписокПодоходныйНалогДПННГ.Видимость 				= ПННарастающимИтогом;
	
	Элементы.ДекорацияСотрудникПодоходныйНалог.Видимость 		= НЕ ВсеСотрудники;
	Элементы.СписокПодоходныйНалогМесяц.Видимость 				= НЕ ВсеСотрудники;
	Элементы.СписокПодоходныйНалогФизЛицо.Видимость 			= ВсеСотрудники;
	
	Элементы.ДекорацияСотрудникСоцотчисления.Видимость 			= НЕ ВсеСотрудники;
	Элементы.СписокСоциальныйФондМесяц.Видимость 				= НЕ ВсеСотрудники;
	Элементы.СписокСоциальныйФондФизЛицо.Видимость 				= ВсеСотрудники;
	
	Элементы.ПриказыКадровыеВалюта.Видимость 						= УчетЗаработнойПлатыВВалюте;
	Элементы.ПриказыКадровыеКурс.Видимость 							= УчетЗаработнойПлатыВВалюте;
	Элементы.ПриказыКадровыеРезультат.Видимость 					= УчетЗаработнойПлатыВВалюте;
	Элементы.СписокПлановыеНачисленияУдержанияВалюта.Видимость 		= УчетЗаработнойПлатыВВалюте;
	//Элементы.СписокПлановыеНачисленияУдержанияКурс.Видимость 		= УчетЗаработнойПлатыВВалюте;
	//Элементы.СписокПлановыеНачисленияУдержанияРезультат.Видимость 	= УчетЗаработнойПлатыВВалюте;
	
	Если ПННарастающимИтогом Тогда
		Элементы.ДекорацияРасчетПН.Заголовок = "Расчет ПН с накоплением";	
	Иначе
		Элементы.ДекорацияРасчетПН.Заголовок = "Расчет ПН без накоплением";
	КонецЕсли;
	
	Элементы.ОткрытьСписокПределов.Видимость = ПределыПоПодразделениям;

	Элементы.ТаблицаРасшифровкаРасчетПредыдущиеМесяцы.Видимость = НЕ ДанныеУчетнойПолитикиПоПерсоналу.РасчетПНБезНакопления;
	Элементы.ТаблицаРасшифровкаРасчетСНовогоГода.Видимость = НЕ ДанныеУчетнойПолитикиПоПерсоналу.РасчетПНБезНакопления;
	Элементы.ТаблицаРасшифровкаРасчетПорядок.Видимость = НЕ ДанныеУчетнойПолитикиПоПерсоналу.РасчетПНБезНакопления;
КонецПроцедуры 

&НаКлиенте
Процедура УстановитьПараметрыДинамическихСписков(ФизЛицоДляВидовНачислений = Неопределено)	
	
	НачалоПериода = НачалоМесяца(ОтборПериодРегистрации);
	КонецПериода  = КонецМесяца(ОтборПериодРегистрации);
	
	// Виды начислений
	Если ФизЛицоДляВидовНачислений <> Неопределено Тогда	
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокВидовНачисления, "КонецПериода", 	КонецПериода);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокВидовНачисления, "Организация", 	ОтборОрганизация);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокВидовНачисления, "ФизЛицо", 		ФизЛицоДляВидовНачислений);		
		Возврат;
	ИначеЕсли НЕ ВсеСотрудники Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокВидовНачисления, "КонецПериода", 	КонецПериода);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокВидовНачисления, "Организация", 	ОтборОрганизация);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокВидовНачисления, "ФизЛицо", 		ОтборФизЛицо);
	КонецЕсли;
	
	Элементы.СписокВидовНачисления.Обновить();
	
	// Приказы
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПриказыКадровые, "ФизЛицо", 		 ОтборФизЛицо);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПриказыКадровые, "Организация", 	 ОтборОрганизация);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПриказыКадровые, "Подразделение", ОтборПодразделение);
	
	Элементы.ПриказыКадровые.Обновить();
	
	// ПНУ
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПлановыеНачисленияУдержания, "НачалоПериода", 	НачалоПериода);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПлановыеНачисленияУдержания, "КонецПериода", 	КонецПериода);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПлановыеНачисленияУдержания, "Организация", 	 ОтборОрганизация);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПлановыеНачисленияУдержания, "ФизЛицо", 		ОтборФизЛицо);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПлановыеНачисленияУдержания, "Подразделение", 	ОтборПодразделение);
	
	Элементы.СписокПлановыеНачисленияУдержания.Обновить();
	
	// Выплаты
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокВыплаты, "НачалоПериода", 	НачалоПериода);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокВыплаты, "КонецПериода", 	КонецПериода);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокВыплаты, "Организация", 	ОтборОрганизация);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокВыплаты, "ФизЛицо", 		ОтборФизЛицо);
	
	Элементы.СписокВыплаты.Обновить();
	
	//// НиУ
	//ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНачисленияУдержания, "НачалоПериода", 	НачалоПериода);
	//ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНачисленияУдержания, "КонецПериода", 	КонецПериода);
	//ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНачисленияУдержания, "Организация", 	ОтборОрганизация);
	//ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНачисленияУдержания, "ФизЛицо", 		ОтборФизЛицо);
	//ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНачисленияУдержания, "Подразделение", 	ОтборПодразделение);
	
	// Подоходный налог
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПодоходныйНалог, "НачалоГода", 	НачалоГода(НачалоПериода));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПодоходныйНалог, "КонецПериода", 	КонецПериода);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПодоходныйНалог, "Организация", 	ОтборОрганизация);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПодоходныйНалог, "ВсеСотрудники", 	ВсеСотрудники);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПодоходныйНалог, "Месяц", 			ОтборПериодРегистрации);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПодоходныйНалог, "ФизЛицо", 		
									?(ВсеСотрудники, ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка"), ОтборФизЛицо));
									
	Элементы.СписокПодоходныйНалог.Обновить();									
									
	// Документы
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокДокументы, "НачалоПериода", 	НачалоПериода);
	ИзменитьТекстЗапросаДокументыСписок();
	Если ПоследующиеМесяцы Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокДокументы, "КонецПериода", 	ТекущаяДата());
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокДокументы, "КонецПериода", 	КонецПериода);
	КонецЕсли;	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокДокументы, "Организация", 		ОтборОрганизация);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокДокументы, "ФизЛицо", 		
									?(ВсеСотрудники, ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка"), ОтборФизЛицо));
									
	Элементы.СписокДокументы.Обновить();									
									
	// Социальный фонд
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокСоциальныйФонд, "НачалоГода", 		НачалоГода(НачалоПериода));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокСоциальныйФонд, "КонецПериода", 	КонецПериода);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокСоциальныйФонд, "Организация", 	ОтборОрганизация);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокСоциальныйФонд, "ВсеСотрудники", 	ВсеСотрудники);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокСоциальныйФонд, "Месяц", 			ОтборПериодРегистрации);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокСоциальныйФонд, "ФизЛицо", 		
									?(ВсеСотрудники, ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка"), ОтборФизЛицо));
									
	Элементы.СписокСоциальныйФонд.Обновить();									
									
	//// Неявки
	//ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНеявки, "НачалоПериода", НачалоПериода);
	//ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНеявки, "КонецПериода", КонецПериода);
	//ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНеявки, "Организация", ОтборОрганизация);
	//ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНеявки, "ФизЛицо", ОтборФизЛицо);
	//ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНеявки, "Подразделение", ОтборПодразделение);
	//
	//Элементы.СписокНеявки.Обновить();
	
	// Ведомости
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Ведомости, "НачалоПериода", НачалоПериода);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Ведомости, "КонецПериода", КонецПериода);
	
	Элементы.Ведомости.Обновить();
	
	// Расчетный листок
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокРасчетныеЛистки, "НачалоПериода", 	НачалоПериода);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокРасчетныеЛистки, "КонецПериода", 	КонецПериода);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокРасчетныеЛистки, "Организация", 	ОтборОрганизация);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокРасчетныеЛистки, "ФизЛицо", 		ОтборФизЛицо);
	
	Элементы.СписокРасчетныеЛистки.Обновить();
	
	Если ЗначениеЗаполнено(ОтборФизЛицо) Тогда
		СтруктураПериода = Новый Структура();
		СтруктураПериода.Вставить("НачалоПериода", НачалоПериода);
		СтруктураПериода.Вставить("КонецПериода", КонецПериода);
		
		ОбновитьПодвалыЗакладок();
		РассчитатьСальдоРасчетногоЛистка(СтруктураПериода);
	КонецЕсли;
	
	УстановитьОтбор();
	
КонецПроцедуры // УстановитьПараметрыДинамическихСписков()

&НаКлиенте
Процедура ОбновитьВидимостьДанныхРасчета()

	Элементы.СписокНачисленияРасшифровка.ОтборСтрок = Новый ФиксированнаяСтруктура("ФизЛицо, ТекущийМесяц", ОтборФизЛицо, Истина);
	Элементы.СписокСтавкиРасшифровка.ОтборСтрок 	= Новый ФиксированнаяСтруктура("ФизЛицо", ОтборФизЛицо, Истина);
	Элементы.ТаблицаРасшифровкаРасчет.ОтборСтрок 	= Новый ФиксированнаяСтруктура("ФизЛицо", ОтборФизЛицо, Истина);
	
	Отбор = Новый Структура();
	Отбор.Вставить("ФизЛицо", 		ОтборФизЛицо);
	Отбор.Вставить("ТекущийМесяц", 	Истина);
	
	МассивСтрок = СписокНачисленияРасшифровка.НайтиСтроки(Отбор);
	
	РасшифровкаНачисленияИтог 	= 0;
	РасшифровкаДопДоходИтог 	= 0;
	РасшифровкаОДПНИтог 		= 0;
	РасшифровкаОДСФВычИтог 		= 0;
	РасшифровкаОДСФИтог 		= 0;
	
	Для Каждого СтрокаМассива Из МассивСтрок Цикл		
		РасшифровкаНачисленияИтог 	= РасшифровкаНачисленияИтог + СтрокаМассива.Начислено;
		РасшифровкаДопДоходИтог 	= РасшифровкаДопДоходИтог 	+ СтрокаМассива.ДопДоход;
		РасшифровкаОДПНИтог 		= РасшифровкаОДПНИтог 		+ СтрокаМассива.ОДПН;
		РасшифровкаОДСФВычИтог 		= РасшифровкаОДСФВычИтог 	+ СтрокаМассива.ОДСФВыч;
		РасшифровкаОДСФИтог 		= РасшифровкаОДСФИтог 		+ СтрокаМассива.ОДСФ;	
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура СформироватьРасшифровкуРасчета()

	РасчетПНБезНакопления = БухгалтерскийУчетСервер.ПолучитьДанныеУчетнойПолитикиПоПерсоналу(ОтборПериодРегистрации, ОтборОрганизация).РасчетПНБезНакопления;
	
	// Заполнение начислений
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ФизЛицо КАК ФизЛицо,
		|	Начисления.ВидРасчета КАК ВидРасчета,
		|	ЛОЖЬ КАК ТекущийМесяц,
		|	ВЫБОР
		|		КОГДА Начисления.ВидРасчета.ОблагаетсяПН
		|			ТОГДА Начисления.Результат
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОДПН,
		|	ВЫБОР
		|		КОГДА Начисления.ВидРасчета.ОблагаетсяСФ
		|			ТОГДА Начисления.Результат
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОДСФ,
		|	ВЫБОР
		|		КОГДА Начисления.ВидРасчета.ОблагаетсяПН
		|				И Начисления.ВидРасчета.ОблагаетсяСФ
		|			ТОГДА Начисления.Результат
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОДСФВыч,
		|	0 КАК ДопДоход,
		|	ВЫБОР
		|		КОГДА Начисления.ВидРасчета.ДополнительныйДоход
		|			ТОГДА 0
		|		ИНАЧЕ Начисления.Результат
		|	КОНЕЦ КАК Начислено
		|ИЗ
		|	РегистрРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.ПериодРегистрации МЕЖДУ &ДатаНачалаГода И &ДатаПредыдущегоМесяца
		|	И Начисления.Организация = &Организация
		//|	И НЕ &РасчетПНБезНакопления
		|	И МЕСЯЦ(&ДатаПредыдущегоМесяца) <> 12
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Начисления.ФизЛицо КАК ФизЛицо,
		|	Начисления.ВидРасчета КАК ВидРасчета,
		|	ИСТИНА КАК ТекущийМесяц,
		|	ВЫБОР
		|		КОГДА Начисления.ВидРасчета.ОблагаетсяПН
		|			ТОГДА Начисления.Результат
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОДПН,
		|	ВЫБОР
		|		КОГДА Начисления.ВидРасчета.ОблагаетсяСФ
		|			ТОГДА Начисления.Результат
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОДСФ,
		|	ВЫБОР
		|		КОГДА Начисления.ВидРасчета.ОблагаетсяПН
		|				И Начисления.ВидРасчета.ОблагаетсяСФ
		|			ТОГДА Начисления.Результат
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОДСФВыч,
		|	ВЫБОР
		|		КОГДА Начисления.ВидРасчета.ДополнительныйДоход
		|			ТОГДА Начисления.Результат
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ДопДоход,
		|	ВЫБОР
		|		КОГДА Начисления.ВидРасчета.ДополнительныйДоход
		|			ТОГДА 0
		|		ИНАЧЕ Начисления.Результат
		|	КОНЕЦ КАК Начислено
		|ИЗ
		|	РегистрРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.ПериодРегистрации = &ДатаТекущегоМесяца
		|	И Начисления.Организация = &Организация";	
	Запрос.УстановитьПараметр("Организация", 			ОтборОрганизация);
	Запрос.УстановитьПараметр("ДатаТекущегоМесяца", 	НачалоМесяца(ОтборПериодРегистрации));
	Запрос.УстановитьПараметр("ДатаПредыдущегоМесяца", 	НачалоМесяца(ОтборПериодРегистрации) - 1);
	Запрос.УстановитьПараметр("ДатаНачалаГода", 		НачалоГода(ОтборПериодРегистрации));
	//Запрос.УстановитьПараметр("РасчетПНБезНакопления",	РасчетПНБезНакопления);
	
	МассивФизЛиц = Новый Массив();
	
	СписокНачисленияРасшифровка.Очистить();
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = СписокНачисленияРасшифровка.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
		
		Если Выборка.ТекущийМесяц И МассивФизЛиц.Найти(Выборка.ФизЛицо) = Неопределено Тогда
			МассивФизЛиц.Добавить(Выборка.ФизЛицо);	
		КонецЕсли;	
	КонецЦикла;	
	
	// Заполнение ставок
	// 1. Срез последних по РС "Статуты сотрудников".
	// 2. Срез последних по РС "Ставки налогов заработной платы" по физ лицам из 1 пункта.
	// 3. Срез последних по РС "Учетная политика по персоналу" соединенная с 1 пунктом, 
	//		чтобы к каждому физ лицу присоединить данные учетной политики.
	// 4. Получение ставок и других настроек (из учет. полит.).
	// 5. Получение всех вычетов по физ лицам.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатусыСотрудниковСрезПоследних.ФизЛицо КАК ФизЛицо,
		|	СтатусыСотрудниковСрезПоследних.Статус КАК Статус,
		|	СтатусыСотрудниковСрезПоследних.ДопВычет КАК ДопВычет,
		|	СтатусыСотрудниковСрезПоследних.Период КАК Период
		|ПОМЕСТИТЬ ВременнаяТаблицаСтатус
		|ИЗ
		|	РегистрСведений.СтатусыСотрудников.СрезПоследних(&КонецПериода, Организация = &Организация) КАК СтатусыСотрудниковСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаСтатус.ФизЛицо КАК ФизЛицо,
		|	СтавкиНалоговЗаработнойПлатыСрезПоследних.Статус КАК Статус,
		|	СтавкиНалоговЗаработнойПлатыСрезПоследних.СтавкаПФР КАК СтавкаПФР,
		|	СтавкиНалоговЗаработнойПлатыСрезПоследних.СтавкаГНПФР КАК СтавкаГНПФР,
		|	СтавкиНалоговЗаработнойПлатыСрезПоследних.СтавкаПН КАК СтавкаПН,
		|	СтавкиНалоговЗаработнойПлатыСрезПоследних.СтавкаПФФ КАК СтавкаПФФ,
		|	СтавкиНалоговЗаработнойПлатыСрезПоследних.СтавкаМСФ КАК СтавкаМСФ,
		|	СтавкиНалоговЗаработнойПлатыСрезПоследних.СтавкаФОТФ КАК СтавкаФОТФ,
		|	СтавкиНалоговЗаработнойПлатыСрезПоследних.Вычеты КАК Вычеты
		|ПОМЕСТИТЬ ВременнаяТаблицаСтавки
		|ИЗ
		|	ВременнаяТаблицаСтатус КАК ВременнаяТаблицаСтатус
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНалоговЗаработнойПлаты.СрезПоследних(
		|				&КонецПериода,
		|				Статус В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаСтатус.Статус
		|					ИЗ
		|						ВременнаяТаблицаСтатус КАК ВременнаяТаблицаСтатус)) КАК СтавкиНалоговЗаработнойПлатыСрезПоследних
		|		ПО ВременнаяТаблицаСтатус.Статус = СтавкиНалоговЗаработнойПлатыСрезПоследних.Статус
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаСтатус.ФизЛицо КАК ФизЛицо,
		|	УчетнаяПолитикаПоПерсоналуСрезПоследних.ПределыПоПодразделениям КАК ПределыПоПодразделениям,
		|	УчетнаяПолитикаПоПерсоналуСрезПоследних.МинимальныйРасчетныйДоход КАК МинимальныйРасчетныйДоход,
		|	УчетнаяПолитикаПоПерсоналуСрезПоследних.ДоплатаПНЗаСчетФирмы КАК ДоплатаПНЗаСчетФирмы,
		|	УчетнаяПолитикаПоПерсоналуСрезПоследних.СреднемесячнаяЗПСФ КАК СреднемесячнаяЗПСФ,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА (ВЫРАЗИТЬ(УчетнаяПолитикаПоПерсоналуСрезПоследних.ПроцентОтСЗПСФ / 100 КАК ЧИСЛО(5, 2))) >= 1
		|				ТОГДА ПОДСТРОКА(""0123456789"", 1 + (ВЫРАЗИТЬ(УчетнаяПолитикаПоПерсоналуСрезПоследних.ПроцентОтСЗПСФ / 100 - 0.5 КАК ЧИСЛО(14, 0))) - (ВЫРАЗИТЬ(УчетнаяПолитикаПоПерсоналуСрезПоследних.ПроцентОтСЗПСФ / 1000 - 0.5 КАК ЧИСЛО(14, 0))) * 10, 1) 
		|					+ ПОДСТРОКА(""0123456789"", 1 + (ВЫРАЗИТЬ(УчетнаяПолитикаПоПерсоналуСрезПоследних.ПроцентОтСЗПСФ / 10 - 0.5 КАК ЧИСЛО(14, 0))) - (ВЫРАЗИТЬ(УчетнаяПолитикаПоПерсоналуСрезПоследних.ПроцентОтСЗПСФ / 100 - 0.5 КАК ЧИСЛО(14, 0))) * 10, 1) 
		|					+ ПОДСТРОКА(""0123456789"", 1 + УчетнаяПолитикаПоПерсоналуСрезПоследних.ПроцентОтСЗПСФ - (ВЫРАЗИТЬ(УчетнаяПолитикаПоПерсоналуСрезПоследних.ПроцентОтСЗПСФ / 10 - 0.5 КАК ЧИСЛО(14, 0))) * 10, 1) 
		|					+ ""."" 
		|					+ ПОДСТРОКА(""0123456789"", 1 + (ВЫРАЗИТЬ(УчетнаяПолитикаПоПерсоналуСрезПоследних.ПроцентОтСЗПСФ / 0.1 - 0.5 КАК ЧИСЛО(14, 0))) - (ВЫРАЗИТЬ(УчетнаяПолитикаПоПерсоналуСрезПоследних.ПроцентОтСЗПСФ / 1 - 0.5 КАК ЧИСЛО(14, 0))) * 10, 1) 
		|					+ ПОДСТРОКА(""0123456789"", 1 + (ВЫРАЗИТЬ(УчетнаяПолитикаПоПерсоналуСрезПоследних.ПроцентОтСЗПСФ / 0.01 - 0.5 КАК ЧИСЛО(14, 0))) - (ВЫРАЗИТЬ(УчетнаяПолитикаПоПерсоналуСрезПоследних.ПроцентОтСЗПСФ / 0.1 - 0.5 КАК ЧИСЛО(14, 0))) * 10, 1)
		|			КОГДА (ВЫРАЗИТЬ(УчетнаяПолитикаПоПерсоналуСрезПоследних.ПроцентОтСЗПСФ / 10 КАК ЧИСЛО(5, 2))) >= 1
		|				ТОГДА ПОДСТРОКА(""0123456789"", 1 + (ВЫРАЗИТЬ(УчетнаяПолитикаПоПерсоналуСрезПоследних.ПроцентОтСЗПСФ / 10 - 0.5 КАК ЧИСЛО(14, 0))) - (ВЫРАЗИТЬ(УчетнаяПолитикаПоПерсоналуСрезПоследних.ПроцентОтСЗПСФ / 100 - 0.5 КАК ЧИСЛО(14, 0))) * 10, 1) 
		|					+ ПОДСТРОКА(""0123456789"", 1 + УчетнаяПолитикаПоПерсоналуСрезПоследних.ПроцентОтСЗПСФ - (ВЫРАЗИТЬ(УчетнаяПолитикаПоПерсоналуСрезПоследних.ПроцентОтСЗПСФ / 10 - 0.5 КАК ЧИСЛО(14, 0))) * 10, 1) 
		|					+ ""."" 
		|					+ ПОДСТРОКА(""0123456789"", 1 + (ВЫРАЗИТЬ(УчетнаяПолитикаПоПерсоналуСрезПоследних.ПроцентОтСЗПСФ / 0.1 - 0.5 КАК ЧИСЛО(14, 0))) - (ВЫРАЗИТЬ(УчетнаяПолитикаПоПерсоналуСрезПоследних.ПроцентОтСЗПСФ / 1 - 0.5 КАК ЧИСЛО(14, 0))) * 10, 1) 
		|					+ ПОДСТРОКА(""0123456789"", 1 + (ВЫРАЗИТЬ(УчетнаяПолитикаПоПерсоналуСрезПоследних.ПроцентОтСЗПСФ / 0.01 - 0.5 КАК ЧИСЛО(14, 0))) - (ВЫРАЗИТЬ(УчетнаяПолитикаПоПерсоналуСрезПоследних.ПроцентОтСЗПСФ / 0.1 - 0.5 КАК ЧИСЛО(14, 0))) * 10, 1)
		|			ИНАЧЕ ПОДСТРОКА(""0123456789"", 1 + УчетнаяПолитикаПоПерсоналуСрезПоследних.ПроцентОтСЗПСФ - (ВЫРАЗИТЬ(УчетнаяПолитикаПоПерсоналуСрезПоследних.ПроцентОтСЗПСФ / 10 - 0.5 КАК ЧИСЛО(14, 0))) * 10, 1) 
		|					+ ""."" 
		|					+ ПОДСТРОКА(""0123456789"", 1 + (ВЫРАЗИТЬ(УчетнаяПолитикаПоПерсоналуСрезПоследних.ПроцентОтСЗПСФ / 0.1 - 0.5 КАК ЧИСЛО(14, 0))) - (ВЫРАЗИТЬ(УчетнаяПолитикаПоПерсоналуСрезПоследних.ПроцентОтСЗПСФ / 1 - 0.5 КАК ЧИСЛО(14, 0))) * 10, 1) 
		|					+ ПОДСТРОКА(""0123456789"", 1 + (ВЫРАЗИТЬ(УчетнаяПолитикаПоПерсоналуСрезПоследних.ПроцентОтСЗПСФ / 0.01 - 0.5 КАК ЧИСЛО(14, 0))) - (ВЫРАЗИТЬ(УчетнаяПолитикаПоПерсоналуСрезПоследних.ПроцентОтСЗПСФ / 0.1 - 0.5 КАК ЧИСЛО(14, 0))) * 10, 1)
		|		КОНЕЦ КАК СТРОКА(10)) КАК ПроцентОтСЗПСФ
		|ПОМЕСТИТЬ ВременнаяТаблицаУПП
		|ИЗ
		|	ВременнаяТаблицаСтатус КАК ВременнаяТаблицаСтатус
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоПерсоналу.СрезПоследних(&КонецПериода, Организация = &Организация) КАК УчетнаяПолитикаПоПерсоналуСрезПоследних
		|		ПО ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|   СотрудникиКонецПериода.ФизЛицо КАК ФизЛицо,
		|   ПределыПоПодразделениямСрезПоследних.МинимальныйРасчетныйДоход КАК МинимальныйРасчетныйДоход,
		|   ПределыПоПодразделениямСрезПоследних.СреднемесячнаяЗПСФ КАК СреднемесячнаяЗПСФ
		|ПОМЕСТИТЬ ВременнаяТаблицаПределыПоПодразделениям
		|ИЗ
		|	РегистрСведений.Сотрудники.СрезПоследних(&КонецПериода, Организация = &Организация И ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ ВременнаяТаблицаСтатус)) КАК СотрудникиКонецПериода 
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПределыПоПодразделениям.СрезПоследних(&КонецПериода) КАК ПределыПоПодразделениямСрезПоследних
		|		ПО СотрудникиКонецПериода.Подразделение = ПределыПоПодразделениямСрезПоследних.Подразделение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""Ставка ПФР, %"" КАК Параметр,
		|	ВременнаяТаблицаСтавки.СтавкаПФР КАК Значение,
		|	ВременнаяТаблицаСтавки.ФизЛицо КАК ФизЛицо
		|ИЗ
		|	ВременнаяТаблицаСтавки КАК ВременнаяТаблицаСтавки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Ставка ГНПФР, %"",
		|	ВременнаяТаблицаСтавки.СтавкаГНПФР,
		|	ВременнаяТаблицаСтавки.ФизЛицо
		|ИЗ
		|	ВременнаяТаблицаСтавки КАК ВременнаяТаблицаСтавки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Ставка ПН, %"",
		|	ВременнаяТаблицаСтавки.СтавкаПН,
		|	ВременнаяТаблицаСтавки.ФизЛицо
		|ИЗ
		|	ВременнаяТаблицаСтавки КАК ВременнаяТаблицаСтавки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Ставка ПФФ, %"",
		|	ВременнаяТаблицаСтавки.СтавкаПФФ,
		|	ВременнаяТаблицаСтавки.ФизЛицо
		|ИЗ
		|	ВременнаяТаблицаСтавки КАК ВременнаяТаблицаСтавки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Ставка МСФ, %"",
		|	ВременнаяТаблицаСтавки.СтавкаМСФ,
		|	ВременнаяТаблицаСтавки.ФизЛицо
		|ИЗ
		|	ВременнаяТаблицаСтавки КАК ВременнаяТаблицаСтавки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Ставка ФОТФ"",
		|	ВременнаяТаблицаСтавки.СтавкаФОТФ,
		|	ВременнаяТаблицаСтавки.ФизЛицо
		|ИЗ
		|	ВременнаяТаблицаСтавки КАК ВременнаяТаблицаСтавки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""МРД"",
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаУПП.ПределыПоПодразделениям
		|			ТОГДА ЕСТЬNULL(ВременнаяТаблицаПределыПоПодразделениям.МинимальныйРасчетныйДоход, 0)
		|		ИНАЧЕ ЕСТЬNULL(ВременнаяТаблицаУПП.МинимальныйРасчетныйДоход, 0)
		|	КОНЕЦ,
		|	ВременнаяТаблицаУПП.ФизЛицо
		|ИЗ
		|	ВременнаяТаблицаУПП КАК ВременнаяТаблицаУПП
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаПределыПоПодразделениям
		|		ПО ВременнаяТаблицаУПП.ФизЛицо = ВременнаяТаблицаПределыПоПодразделениям.ФизЛицо
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Доплата ПНФ"",
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаУПП.ДоплатаПНЗаСчетФирмы
		|			ТОГДА ""Да""
		|		ИНАЧЕ ""Нет""
		|	КОНЕЦ,
		|	ВременнаяТаблицаУПП.ФизЛицо
		|ИЗ
		|	ВременнаяТаблицаУПП КАК ВременнаяТаблицаУПП
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаУПП.ПределыПоПодразделениям
		|			ТОГДА ""СЗП ""
		|		ИНАЧЕ ""СЗП "" + ВременнаяТаблицаУПП.ПроцентОтСЗПСФ + ""%""
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаУПП.ПределыПоПодразделениям
		|			ТОГДА ЕСТЬNULL(ВременнаяТаблицаПределыПоПодразделениям.СреднемесячнаяЗПСФ, 0)
		|		ИНАЧЕ ВременнаяТаблицаУПП.СреднемесячнаяЗПСФ
		|	КОНЕЦ,
		|	ВременнаяТаблицаУПП.ФизЛицо
		|ИЗ
		|	ВременнаяТаблицаУПП КАК ВременнаяТаблицаУПП
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаПределыПоПодразделениям
		|		ПО ВременнаяТаблицаУПП.ФизЛицо = ВременнаяТаблицаПределыПоПодразделениям.ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаСтатус.ФизЛицо КАК ФизЛицо,
		|	ВЫБОР
		|		КОГДА ДЕНЬ(КОНЕЦПЕРИОДА(ВременнаяТаблицаСтатус.Период, МЕСЯЦ)) - ДЕНЬ(ВременнаяТаблицаСтатус.Период) + 1 >= 15
		|			ТОГДА МЕСЯЦ(&КонецПериода) - МЕСЯЦ(ВременнаяТаблицаСтатус.Период)
		|		ИНАЧЕ МЕСЯЦ(&КонецПериода) - МЕСЯЦ(ВременнаяТаблицаСтатус.Период) - 1
		|	КОНЕЦ КАК КоличествоПредыдущихМесяцевВычетов,
		|	(ВременнаяТаблицаСтатус.ДопВычет + ЕСТЬNULL(ВременнаяТаблицаСтавки.Вычеты, 0)) * 100 КАК Вычеты
		|ИЗ
		|	ВременнаяТаблицаСтатус КАК ВременнаяТаблицаСтатус
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСтавки КАК ВременнаяТаблицаСтавки
		|		ПО ВременнаяТаблицаСтатус.ФизЛицо = ВременнаяТаблицаСтавки.ФизЛицо
		|			И ВременнаяТаблицаСтатус.Статус = ВременнаяТаблицаСтавки.Статус";	
	Запрос.УстановитьПараметр("КонецПериода", 	КонецМесяца(ОтборПериодРегистрации));
	Запрос.УстановитьПараметр("Организация", 	ОтборОрганизация);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СписокСтавкиРасшифровка.Загрузить(МассивРезультатов[4].Выгрузить());
	
	ТаблицаВычеты = МассивРезультатов[5].Выгрузить();
	
	МесяцЧислом = Месяц(ОтборПериодРегистрации);
	
	Если МесяцЧислом = 1 Тогда
		Месяц = "Январь";
		
	ИначеЕсли МесяцЧислом = 2 Тогда
		Месяц = "Февраль";
		
	ИначеЕсли МесяцЧислом = 3 Тогда
		Месяц = "Март";
		
	ИначеЕсли МесяцЧислом = 4 Тогда
		Месяц = "Апрель";
		
	ИначеЕсли МесяцЧислом = 5 Тогда
		Месяц = "Май";
		
	ИначеЕсли МесяцЧислом = 6 Тогда
		Месяц = "Июнь";
		
	ИначеЕсли МесяцЧислом = 7 Тогда
		Месяц = "Июль";
		
	ИначеЕсли МесяцЧислом = 8 Тогда
		Месяц = "Август";
		
	ИначеЕсли МесяцЧислом = 9 Тогда
		Месяц = "Сентябрь";
		
	ИначеЕсли МесяцЧислом = 10 Тогда
		Месяц = "Октябрь";
		
	ИначеЕсли МесяцЧислом = 11 Тогда
		Месяц = "Ноябрь";
		
	Иначе
		Месяц = "Декабрь";
	КонецЕсли;
	
	// Заполнение расчета
	// Если расчет ПН с накоплением и месяц не январь, то расчитываются колонки ПредыдущиеМесяцы и СНачалагода
	СчитатьСНачалаГода = НЕ РасчетПНБезНакопления И Месяц <> 1;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НалогиПоЗаработнойПлатеОбороты.ФизЛицо КАК ФизЛицо,
		|	НалогиПоЗаработнойПлатеОбороты.ВидНалога КАК ВидНалога,
		|	НалогиПоЗаработнойПлатеОбороты.СуммаОборот КАК Сумма
		|ИЗ
		|	РегистрНакопления.НалогиПоЗаработнойПлате.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			Организация = &Организация
		|				И (ВидНалога = ЗНАЧЕНИЕ(ПланВидовРасчета.ВидыНалогов.ПФР)
		|					ИЛИ ВидНалога = ЗНАЧЕНИЕ(ПланВидовРасчета.ВидыНалогов.ГНПФР))) КАК НалогиПоЗаработнойПлатеОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПодоходныйНалогОбороты.ФизЛицо КАК ФизЛицо,
		|	ПодоходныйНалогОбороты.ПНОборот КАК ПН,
		|	ПодоходныйНалогОбороты.МРДОборот КАК МРД
		|ИЗ
		|	РегистрНакопления.ПодоходныйНалог.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация) КАК ПодоходныйНалогОбороты";	
	Запрос.УстановитьПараметр("НачалоПериода", 	НачалоГода(ОтборПериодРегистрации));
	Запрос.УстановитьПараметр("КонецПериода", 	НачалоМесяца(ОтборПериодРегистрации) - 1);
	Запрос.УстановитьПараметр("Организация", 	ОтборОрганизация);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	                                                  
	ТаблицаНалоговПредыдущихМесяцев = МассивРезультатов[0].Выгрузить();
	ТаблицаПНПредыдущихМесяцев 		= МассивРезультатов[1].Выгрузить();
	
	Элементы.ТаблицаРасшифровкаРасчетЗаМесяц.Заголовок = "За месяц (" + Месяц + ")";
	
	ТаблицаРасшифровкаРасчет.Очистить();
	
	Для Каждого ФизЛицо Из МассивФизЛиц Цикл
		Отбор = Новый Структура();
		Отбор.Вставить("ФизЛицо", ФизЛицо);
		
		МассивСтрокНачисления = СписокНачисленияРасшифровка.НайтиСтроки(Отбор);
		
		НачисленияИтогЗаМесяц 	= 0;
		ДопДоходИтогЗаМесяц 	= 0;
		ОДПНИтогЗаМесяц 		= 0;
		ОДСФВычИтогЗаМесяц 		= 0;
		ОДСФИтогЗаМесяц 		= 0;
		
		НачисленияИтогПредыдущиеМесяцы 	= 0;
		ДопДоходИтогПредыдущиеМесяцы 	= 0;
		ОДПНИтогПредыдущиеМесяцы 		= 0;
		ОДСФВычИтогПредыдущиеМесяцы 	= 0;
		ОДСФИтогПредыдущиеМесяцы 		= 0;	
		
		Для Каждого СтрокаМассива Из МассивСтрокНачисления Цикл
			
			Если СтрокаМассива.ТекущийМесяц Тогда
				НачисленияИтогЗаМесяц 	= НачисленияИтогЗаМесяц + СтрокаМассива.Начислено;
				ДопДоходИтогЗаМесяц 	= ДопДоходИтогЗаМесяц 	+ СтрокаМассива.ДопДоход;
				ОДПНИтогЗаМесяц 		= ОДПНИтогЗаМесяц 		+ СтрокаМассива.ОДПН;
				ОДСФВычИтогЗаМесяц 		= ОДСФВычИтогЗаМесяц 	+ СтрокаМассива.ОДСФВыч;
				ОДСФИтогЗаМесяц 		= ОДСФИтогЗаМесяц 		+ СтрокаМассива.ОДСФ;	
			Иначе
				Если СчитатьСНачалаГода Тогда
					НачисленияИтогПредыдущиеМесяцы 	= НачисленияИтогПредыдущиеМесяцы + СтрокаМассива.Начислено;
					ДопДоходИтогПредыдущиеМесяцы 	= ДопДоходИтогПредыдущиеМесяцы 	+ СтрокаМассива.ДопДоход;
					ОДПНИтогПредыдущиеМесяцы 		= ОДПНИтогПредыдущиеМесяцы 		+ СтрокаМассива.ОДПН;
					ОДСФВычИтогПредыдущиеМесяцы 	= ОДСФВычИтогПредыдущиеМесяцы 	+ СтрокаМассива.ОДСФВыч;
					ОДСФИтогПредыдущиеМесяцы 		= ОДСФИтогПредыдущиеМесяцы 		+ СтрокаМассива.ОДСФ;
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;
		
		МассивСтрокСтавки = СписокСтавкиРасшифровка.НайтиСтроки(Отбор);
		
		СтавкаПФР 	= 0;
		СтавкаГНПФР = 0;
		СтавкаПН 	= 0;
		СтавкаПФФ 	= 0;
		СтавкаМСФ 	= 0;
		СтавкаФОТФ 	= 0;
		МРД 		= 0;
		ДоплатаПНФ 	= Ложь;
		СЗП 		= 0;
		
		Для Каждого СтрокаМассива Из МассивСтрокСтавки Цикл
			
			Если СтрНайти(СтрокаМассива.Параметр, "Ставка ПФР") <> 0 Тогда
				СтавкаПФР = СтрокаМассива.Значение;
				
			ИначеЕсли СтрНайти(СтрокаМассива.Параметр, "Ставка ГНПФР") <> 0 Тогда
				СтавкаГНПФР = СтрокаМассива.Значение;	
				
			ИначеЕсли СтрНайти(СтрокаМассива.Параметр, "Ставка ПН") <> 0 Тогда
				СтавкаПН = СтрокаМассива.Значение;
				
			ИначеЕсли СтрНайти(СтрокаМассива.Параметр, "Ставка ПФФ") <> 0 Тогда
				СтавкаПФФ = СтрокаМассива.Значение;
				
			ИначеЕсли СтрНайти(СтрокаМассива.Параметр, "Ставка МСФ") <> 0 Тогда
				СтавкаМСФ = СтрокаМассива.Значение;
				
			ИначеЕсли СтрНайти(СтрокаМассива.Параметр, "Ставка ФОТФ") <> 0 Тогда
				СтавкаФОТФ = СтрокаМассива.Значение;
				
			ИначеЕсли СтрНайти(СтрокаМассива.Параметр, "МРД") <> 0 Тогда
				МРД = СтрокаМассива.Значение;	
				
			ИначеЕсли СтрНайти(СтрокаМассива.Параметр, "Доплата") <> 0 Тогда
				ДоплатаПНФ = ?(ВРЕГ(СтрокаМассива.Значение) = "ДА", Истина, Ложь);	
				
			ИначеЕсли СтрНайти(СтрокаМассива.Параметр, "СЗП") <> 0 Тогда
				СЗП = СтрокаМассива.Значение;
			КонецЕсли;	
		КонецЦикла;	
		
		// Начислено (Все начисления за месяц) 
		СтрокаТаблицы = ТаблицаРасшифровкаРасчет.Добавить();
		СтрокаТаблицы.Параметр 			= НСтр("ru = 'Начислено'");
		СтрокаТаблицы.ЗаМесяц 			= НачисленияИтогЗаМесяц;
		
		Если СчитатьСНачалаГода Тогда
			СтрокаТаблицы.ПредыдущиеМесяцы = НачисленияИтогПредыдущиеМесяцы;
		Иначе
			СтрокаТаблицы.ПредыдущиеМесяцы = 0;
		КонецЕсли;
		
		СтрокаТаблицы.СНачалаГода 		= НачисленияИтогЗаМесяц + НачисленияИтогПредыдущиеМесяцы;
		СтрокаТаблицы.Порядок			= НСтр("ru = 'М > Г'");
		СтрокаТаблицы.Комментарий		= НСтр("ru = 'Все начисления за месяц'");
		СтрокаТаблицы.ФизЛицо			= ФизЛицо;
		
		// ОДПН (Начисления, облагаемые ПН)
		СтрокаТаблицы = ТаблицаРасшифровкаРасчет.Добавить();
		СтрокаТаблицы.Параметр 			= НСтр("ru = 'ОДПН'");
		СтрокаТаблицы.ЗаМесяц 			= ОДПНИтогЗаМесяц;
		
		Если СчитатьСНачалаГода Тогда
			СтрокаТаблицы.ПредыдущиеМесяцы = ОДПНИтогПредыдущиеМесяцы;
		Иначе
			СтрокаТаблицы.ПредыдущиеМесяцы = 0;
		КонецЕсли;
		
		СтрокаТаблицы.СНачалаГода 		= ОДПНИтогЗаМесяц + ОДПНИтогПредыдущиеМесяцы;
		СтрокаТаблицы.Порядок			= НСтр("ru = 'М > Г'");
		СтрокаТаблицы.Комментарий		= НСтр("ru = 'Начисления, облагаемые ПН'");
		СтрокаТаблицы.ФизЛицо			= ФизЛицо;
		
		// ОДСФ (Начисления, облагаемые СФ)
		СтрокаТаблицы = ТаблицаРасшифровкаРасчет.Добавить();
		СтрокаТаблицы.Параметр 			= НСтр("ru = 'ОДСФ'");
		СтрокаТаблицы.ЗаМесяц 			= ОДСФИтогЗаМесяц;
		
		Если СчитатьСНачалаГода Тогда
			СтрокаТаблицы.ПредыдущиеМесяцы = ОДСФИтогПредыдущиеМесяцы;
		Иначе
			СтрокаТаблицы.ПредыдущиеМесяцы = 0;	
		КонецЕсли;
		
		СтрокаТаблицы.СНачалаГода 		= ОДСФИтогЗаМесяц + ОДСФИтогПредыдущиеМесяцы;
		СтрокаТаблицы.Порядок			= НСтр("ru = 'М > Г'");
		СтрокаТаблицы.Комментарий		= НСтр("ru = 'Начисления, облагаемые СФ'");
		СтрокаТаблицы.ФизЛицо			= ФизЛицо;
		
		Если СчитатьСНачалаГода Тогда
			Отбор.Вставить("ВидНалога", ПланыВидовРасчета.ВидыНалогов.ПФР);
			МассивСтрокНалоги = ТаблицаНалоговПредыдущихМесяцев.НайтиСтроки(Отбор);
			
			Если МассивСтрокНалоги.Количество() > 0 Тогда
				ПФРПредыдущиеМесяцы = МассивСтрокНалоги[0].Сумма;	
			Иначе	
				ПФРПредыдущиеМесяцы = 0;
			КонецЕсли;
		КонецЕсли;	
		
		// ПФР (ПФР с работника (ставка ПФР от ОДСФ))
		СтрокаТаблицы = ТаблицаРасшифровкаРасчет.Добавить();
		СтрокаТаблицы.Параметр 			= НСтр("ru = 'ПФР'");
		
		ПФРЗаМесяц 						= Окр(ОДСФИтогЗаМесяц * СтавкаПФР / 100, 2);
		СтрокаТаблицы.ЗаМесяц 			= ПФРЗаМесяц;
		
		Если СчитатьСНачалаГода Тогда
			СтрокаТаблицы.ПредыдущиеМесяцы = ПФРПредыдущиеМесяцы;
		Иначе
			СтрокаТаблицы.ПредыдущиеМесяцы = 0;	
		КонецЕсли;
		
		СтрокаТаблицы.СНачалаГода 		= СтрокаТаблицы.ЗаМесяц + СтрокаТаблицы.ПредыдущиеМесяцы;
		СтрокаТаблицы.Порядок			= НСтр("ru = 'М > Г'");
		СтрокаТаблицы.Проводки			= НСтр("ru = '3520-3531'");
		СтрокаТаблицы.Комментарий		= НСтр("ru = 'ПФР с работника (ставка ПФР от ОДСФ)'");
		СтрокаТаблицы.ФизЛицо			= ФизЛицо;
		
		Если СчитатьСНачалаГода Тогда
			Отбор.ВидНалога = ПланыВидовРасчета.ВидыНалогов.ГНПФР;
			МассивСтрокНалоги = ТаблицаНалоговПредыдущихМесяцев.НайтиСтроки(Отбор);
			
			Если МассивСтрокНалоги.Количество() > 0 Тогда
				ГНПФРПредыдущиеМесяцы = МассивСтрокНалоги[0].Сумма;	
			Иначе	
				ГНПФРПредыдущиеМесяцы = 0;
			КонецЕсли;
		КонецЕсли;
		
		// ГНПФР (ГНПФР с работника (ставка ГНПФР от ОДСФ))
		СтрокаТаблицы = ТаблицаРасшифровкаРасчет.Добавить();
		СтрокаТаблицы.Параметр 			= НСтр("ru = 'ГНПФР'");
		
		ГНПФРЗаМесяц					= Окр(ОДСФИтогЗаМесяц * СтавкаГНПФР / 100, 2);
		СтрокаТаблицы.ЗаМесяц 			= ГНПФРЗаМесяц;
		
		Если СчитатьСНачалаГода Тогда
			СтрокаТаблицы.ПредыдущиеМесяцы = ГНПФРПредыдущиеМесяцы;
		Иначе
			СтрокаТаблицы.ПредыдущиеМесяцы = 0;	
		КонецЕсли;
		
		СтрокаТаблицы.СНачалаГода 		= СтрокаТаблицы.ЗаМесяц + СтрокаТаблицы.ПредыдущиеМесяцы;
		СтрокаТаблицы.Порядок			= НСтр("ru = 'М > Г'");
		СтрокаТаблицы.Проводки			= НСтр("ru = '3520-3534'");
		СтрокаТаблицы.Комментарий		= НСтр("ru = 'ГНПФР с работника (ставка ГНПФР от ОДСФ)'");
		СтрокаТаблицы.ФизЛицо			= ФизЛицо;
		
		// ОДСФ выч (ОДСФ для расчета вычетов (не вх. ОДПН=0))
		СтрокаТаблицы = ТаблицаРасшифровкаРасчет.Добавить();
		СтрокаТаблицы.Параметр 			= НСтр("ru = 'ОДСФ выч'");
		СтрокаТаблицы.ЗаМесяц 			= ОДСФВычИтогЗаМесяц;
		СтрокаТаблицы.Комментарий		= НСтр("ru = 'ОДСФ для расчета вычетов (не вх. ОДПН=0)'");
		СтрокаТаблицы.ФизЛицо			= ФизЛицо;
		
		// Вычеты СФ (Вычеты СФ (ставка ПФР от ОДСФВыч))
		СтрокаТаблицы = ТаблицаРасшифровкаРасчет.Добавить();
		СтрокаТаблицы.Параметр 			= НСтр("ru = 'Вычеты СФ'");
		СтрокаТаблицы.ЗаМесяц 			= Окр(ОДСФВычИтогЗаМесяц * (СтавкаПФР + СтавкаГНПФР) / 100, 2);
		
		ВычетыСФПредыдущиеМесяцы = Окр(ОДСФВычИтогПредыдущиеМесяцы * (СтавкаПФР + СтавкаГНПФР) / 100, 2);
		ВычетыСФСНачалаГода		 = СтрокаТаблицы.ЗаМесяц + ВычетыСФПредыдущиеМесяцы;
			
		Если СчитатьСНачалаГода Тогда
			СтрокаТаблицы.ПредыдущиеМесяцы = ВычетыСФПредыдущиеМесяцы;
		Иначе
			СтрокаТаблицы.ПредыдущиеМесяцы = 0;	
		КонецЕсли;
		
		СтрокаТаблицы.СНачалаГода 		= ВычетыСФСНачалаГода;
		СтрокаТаблицы.Порядок			= НСтр("ru = 'М > Г'");
		СтрокаТаблицы.Комментарий		= НСтр("ru = 'Вычеты СФ (ставка ПФР от ОДСФВыч)'");
		СтрокаТаблицы.ФизЛицо			= ФизЛицо;
		
		Отбор = Новый Структура();
		Отбор.Вставить("ФизЛицо", ФизЛицо);
		
		МассивСтрокВычеты = ТаблицаВычеты.НайтиСтроки(Отбор);
		
		Если МассивСтрокВычеты.Количество() > 0 Тогда
			Вычеты = МассивСтрокВычеты[0].Вычеты;
			Если СчитатьСНачалаГода Тогда
				ВычетыПредудихМесяцев = МассивСтрокВычеты[0].КоличествоПредыдущихМесяцевВычетов * Вычеты;
			Иначе
				ВычетыПредудихМесяцев = 0;	
			КонецЕсли;
		Иначе	
			Вычеты = 0;
			ВычетыПредудихМесяцев = 0;
		КонецЕсли;	
		
		// Вычеты/перс (Персональные вычеты (по статусу и ижд))
		СтрокаТаблицы = ТаблицаРасшифровкаРасчет.Добавить();
		СтрокаТаблицы.Параметр 			= НСтр("ru = 'Вычеты/перс'");
		СтрокаТаблицы.ЗаМесяц 			= Вычеты;
		
		Если СчитатьСНачалаГода Тогда
			СтрокаТаблицы.ПредыдущиеМесяцы 	= ВычетыПредудихМесяцев;
		Иначе
			СтрокаТаблицы.ПредыдущиеМесяцы = 0;	
		КонецЕсли;
		
		СтрокаТаблицы.СНачалаГода 		= ВычетыПредудихМесяцев + Вычеты;
		СтрокаТаблицы.Порядок			= НСтр("ru = 'М > Г'");
		СтрокаТаблицы.Комментарий		= НСтр("ru = 'Персональные вычеты (по статусу и ижд)'");
		СтрокаТаблицы.ФизЛицо			= ФизЛицо;
		
		// БПН (База ПН: ОДПН – ВычетыСФ – Вычеты/перс)
		СтрокаТаблицы = ТаблицаРасшифровкаРасчет.Добавить();
		СтрокаТаблицы.Параметр 			= НСтр("ru = 'БПН'");
		
		Если СчитатьСНачалаГода Тогда
			БПНПредыдущиеМесяцы = ОДПНИтогПредыдущиеМесяцы - ВычетыСФПредыдущиеМесяцы - ВычетыПредудихМесяцев;
			СтрокаТаблицы.ПредыдущиеМесяцы = БПНПредыдущиеМесяцы;
		Иначе
			БПНПредыдущиеМесяцы = 0;
			СтрокаТаблицы.ПредыдущиеМесяцы = 0;
		КонецЕсли;
		
		БПНСНачалаГода = (ОДПНИтогЗаМесяц + ОДПНИтогПредыдущиеМесяцы) - ВычетыСФСНачалаГода - (ВычетыПредудихМесяцев + Вычеты);
		
		СтрокаТаблицы.СНачалаГода 		= БПНСНачалаГода;
		СтрокаТаблицы.ЗаМесяц 			= БПНСНачалаГода - СтрокаТаблицы.ПредыдущиеМесяцы;
		СтрокаТаблицы.Порядок			= НСтр("ru = 'Г > М'");
		СтрокаТаблицы.Комментарий		= НСтр("ru = 'База ПН: ОДПН – ВычетыСФ – Вычеты/перс'");
		СтрокаТаблицы.ФизЛицо			= ФизЛицо;
		
		Отбор = Новый Структура();
		Отбор.Вставить("ФизЛицо", ФизЛицо);
		
		МассивСтрокПН = ТаблицаПНПредыдущихМесяцев.НайтиСтроки(Отбор);
		
		Если МассивСтрокПН.Количество() > 0 Тогда
			СуммаПНПредудихМесяцев  = МассивСтрокПН[0].ПН;
			СуммаМРДПредудихМесяцев = МассивСтрокПН[0].МРД;
		Иначе	
			СуммаПНПредудихМесяцев  = 0;
			СуммаМРДПредудихМесяцев = 0;
		КонецЕсли;
		
		// ПН (ПННГ: ставка ПН от БПН)
		СтрокаТаблицы = ТаблицаРасшифровкаРасчет.Добавить();
		СтрокаТаблицы.Параметр 			= НСтр("ru = 'ПН'");
		
		Если СчитатьСНачалаГода Тогда
			СтрокаТаблицы.ПредыдущиеМесяцы = СуммаПНПредудихМесяцев;
		Иначе
			СтрокаТаблицы.ПредыдущиеМесяцы = 0;
		КонецЕсли;
		
		ПНСНачалаГода					= Окр(БПНСНачалаГода * СтавкаПН / 100,2);
		СтрокаТаблицы.СНачалаГода 		= ПНСНачалаГода;
		
		ПНЗаМесяц						= СтрокаТаблицы.СНачалаГода - СтрокаТаблицы.ПредыдущиеМесяцы;
		СтрокаТаблицы.ЗаМесяц 			= ПНЗаМесяц;
		СтрокаТаблицы.Порядок			= НСтр("ru = 'Г > М'");
		СтрокаТаблицы.Проводки			= НСтр("ru = '3520-3420'");
		СтрокаТаблицы.Комментарий		= ?(ДанныеУчетнойПолитикиПоПерсоналу.РасчетПНБезНакопления, 
											НСтр("ru = 'ПН: ставка ПН от БПН'"), 
											НСтр("ru = 'ПННГ: ставка ПН от БПН'"));
		СтрокаТаблицы.ФизЛицо			= ФизЛицо;
		
		// МРД (Мин. Расчетный доход из УПП)
		СтрокаТаблицы = ТаблицаРасшифровкаРасчет.Добавить();
		СтрокаТаблицы.Параметр 			= НСтр("ru = 'МРД'");
		
		Если СчитатьСНачалаГода Тогда
			СтрокаТаблицы.ПредыдущиеМесяцы = СуммаМРДПредудихМесяцев;
		Иначе
			СтрокаТаблицы.ПредыдущиеМесяцы = 0;
		КонецЕсли;
		
		СтрокаТаблицы.СНачалаГода 		= СуммаМРДПредудихМесяцев + МРД;
		СтрокаТаблицы.Комментарий		= НСтр("ru = 'Мин. Расчетный доход из УПП'");
		СтрокаТаблицы.ФизЛицо			= ФизЛицо;
		
		// БПН итг (База ПН итоговая: максимум из БПН и МРД)
		СтрокаТаблицы = ТаблицаРасшифровкаРасчет.Добавить();
		СтрокаТаблицы.Параметр 			= НСтр("ru = 'БПН итг'");
		
		Если СчитатьСНачалаГода Тогда
			БПНИтгПредыдущиеМесяцы = Макс(БПНПредыдущиеМесяцы, СуммаМРДПредудихМесяцев);
			СтрокаТаблицы.ПредыдущиеМесяцы = БПНИтгПредыдущиеМесяцы;
		Иначе
			БПНИтгПредыдущиеМесяцы = 0;
			СтрокаТаблицы.ПредыдущиеМесяцы = 0;
		КонецЕсли;
		
		БПНИтгСНачалаГода 				= Макс(БПНСНачалаГода, СуммаМРДПредудихМесяцев + МРД);
		СтрокаТаблицы.СНачалаГода 		= БПНИтгСНачалаГода;
		СтрокаТаблицы.Комментарий		= НСтр("ru = 'База ПН итоговая: максимум из БПН и МРД'");
		СтрокаТаблицы.ФизЛицо			= ФизЛицо;
		
		// ПН итг (Ставка ПН от БПН итг)
		СтрокаТаблицы = ТаблицаРасшифровкаРасчет.Добавить();
		СтрокаТаблицы.Параметр 			= НСтр("ru = 'ПН итг'");
		
		Если СчитатьСНачалаГода Тогда
			ПНИтгПредыдущиеМесяцы = Окр(БПНИтгПредыдущиеМесяцы * СтавкаПН / 100, 2);
			СтрокаТаблицы.ПредыдущиеМесяцы = ПНИтгПредыдущиеМесяцы;
		Иначе
			ПНИтгПредыдущиеМесяцы = 0;
			СтрокаТаблицы.ПредыдущиеМесяцы = 0;
		КонецЕсли;
		
		ПНИтгСНачалаГода				= Окр(БПНИтгСНачалаГода * СтавкаПН / 100, 2);
		СтрокаТаблицы.СНачалаГода 		= ПНИтгСНачалаГода;
		СтрокаТаблицы.ЗаМесяц 			= СтрокаТаблицы.СНачалаГода - СтрокаТаблицы.ПредыдущиеМесяцы;
		СтрокаТаблицы.Порядок			= НСтр("ru = 'Г > М'");
		СтрокаТаблицы.Комментарий		= НСтр("ru = 'Ставка ПН от БПН итг'");
		СтрокаТаблицы.ФизЛицо			= ФизЛицо;
		
		// ПН доп (Доплата ПН: Пнитг - ПН)
		СтрокаТаблицы = ТаблицаРасшифровкаРасчет.Добавить();
		СтрокаТаблицы.Параметр 			= НСтр("ru = 'ПН доп'");
		
		Если СчитатьСНачалаГода Тогда
			СтрокаТаблицы.ПредыдущиеМесяцы = ПНИтгПредыдущиеМесяцы - СуммаПНПредудихМесяцев;
		Иначе
			СтрокаТаблицы.ПредыдущиеМесяцы = 0;
		КонецЕсли;
		
		СтрокаТаблицы.СНачалаГода 		= ПНИтгСНачалаГода - ПНСНачалаГода;
		
		ПНДопЗаМесяц					= СтрокаТаблицы.СНачалаГода - СтрокаТаблицы.ПредыдущиеМесяцы;
		СтрокаТаблицы.ЗаМесяц 			= ПНДопЗаМесяц;
		СтрокаТаблицы.Порядок			= НСтр("ru = 'Г > М'");
		СтрокаТаблицы.Проводки			= НСтр("ru = '8490-3420'");
		СтрокаТаблицы.Комментарий		= НСтр("ru = 'Доплата ПН: Пнитг - ПН'");
		СтрокаТаблицы.ФизЛицо			= ФизЛицо;
		
		// К выплате (Нач-СФР-ПН-ПНдоп (если доплПН. за счет раб))
		СтрокаТаблицы = ТаблицаРасшифровкаРасчет.Добавить();		
		СтрокаТаблицы.Параметр 		= НСтр("ru = 'К выплате'");
		СтрокаТаблицы.ЗаМесяц 		= НачисленияИтогЗаМесяц - ПФРЗаМесяц - ГНПФРЗаМесяц - ПНЗаМесяц - ?(ДоплатаПНФ, 0, ПНДопЗаМесяц);
		СтрокаТаблицы.Комментарий	= НСтр("ru = 'Нач-СФР-ПН-ПНдоп (если доплПН. за счет раб)'");
		СтрокаТаблицы.ФизЛицо		= ФизЛицо;
		
		// ПФФ (ПФ с фирмы: ставка ПФФ от ОДСФ)
		СтрокаТаблицы = ТаблицаРасшифровкаРасчет.Добавить();		
		СтрокаТаблицы.Параметр 		= НСтр("ru = 'ПФФ'");
		ПФФ							= Окр(ОДСФИтогЗаМесяц * СтавкаПФФ / 100, 2);
		СтрокаТаблицы.ЗаМесяц 		= ПФФ;
		СтрокаТаблицы.Комментарий	= НСтр("ru = 'ПФ с фирмы: ставка ПФФ от ОДСФ'");
		СтрокаТаблицы.ФизЛицо		= ФизЛицо;
		
		// МСФ (МСФ с фирмы: ставка МСФ от ОДСФ)
		СтрокаТаблицы = ТаблицаРасшифровкаРасчет.Добавить();		
		СтрокаТаблицы.Параметр 		= НСтр("ru = 'МСФ'");
		МСФ							= Окр(ОДСФИтогЗаМесяц * СтавкаМСФ / 100, 2);
		СтрокаТаблицы.ЗаМесяц 		= МСФ;
		СтрокаТаблицы.Комментарий	= НСтр("ru = 'МСФ с фирмы: ставка МСФ от ОДСФ'");
		СтрокаТаблицы.ФизЛицо		= ФизЛицо;
		
		// ФОТФ (ФОТФ с фирмы: ставка ФОТФ от ОДСФ)
		СтрокаТаблицы = ТаблицаРасшифровкаРасчет.Добавить();		
		СтрокаТаблицы.Параметр 		= НСтр("ru = 'ФОТФ'");
		ФОТФ						= Окр(ОДСФИтогЗаМесяц * СтавкаФОТФ / 100, 2);
		СтрокаТаблицы.ЗаМесяц 		= ФОТФ;
		СтрокаТаблицы.Комментарий	= НСтр("ru = 'ФОТФ с фирмы: ставка ФОТФ от ОДСФ'");
		СтрокаТаблицы.ФизЛицо		= ФизЛицо;
		
		// БСФ итг (База СФ итоговая: макс из ОДСФ и СЗП 40%)
		СтрокаТаблицы = ТаблицаРасшифровкаРасчет.Добавить();		
		СтрокаТаблицы.Параметр 		= НСтр("ru = 'БСФ итг'");		
		БСФИтг						= Макс(ОДСФИтогЗаМесяц, СЗП);
		СтрокаТаблицы.ЗаМесяц 		= БСФИтг;
		СтрокаТаблицы.Комментарий	= НСтр("ru = 'База СФ итоговая: макс из ОДСФ и СЗП 40%'");
		СтрокаТаблицы.ФизЛицо		= ФизЛицо;
		
		// ПФФ итг (ПФФ итоговая: ставка ПФФ от БСФ итг)
		СтрокаТаблицы = ТаблицаРасшифровкаРасчет.Добавить();		
		СтрокаТаблицы.Параметр 		= НСтр("ru = 'ПФФ итг'");
		ПФФИтг						= Окр(БСФИтг * СтавкаПФФ / 100, 2);
		СтрокаТаблицы.ЗаМесяц 		= ПФФИтг;
		СтрокаТаблицы.Комментарий	= НСтр("ru = 'ПФФ итоговая: ставка ПФФ от БСФ итг'");
		СтрокаТаблицы.ФизЛицо		= ФизЛицо;
		
		// МСФ итг (МСФ итоговая: ставка МСФ от БСФ итг)
		СтрокаТаблицы = ТаблицаРасшифровкаРасчет.Добавить();		
		СтрокаТаблицы.Параметр 		= НСтр("ru = 'МСФ итг'");
		МСФитг						= Окр(БСФИтг * СтавкаМСФ / 100, 2);
		СтрокаТаблицы.ЗаМесяц 		= МСФитг;
		СтрокаТаблицы.Комментарий	= НСтр("ru = 'МСФ итоговая: ставка МСФ от БСФ итг'");
		СтрокаТаблицы.ФизЛицо		= ФизЛицо;
		
		// ФОТФ итг (ФОТФ итоговая: ставка ФОТФ от БСФ итг)
		СтрокаТаблицы = ТаблицаРасшифровкаРасчет.Добавить();		
		СтрокаТаблицы.Параметр 		= НСтр("ru = 'ФОТФ итг'");
		ФОТФитг						= Окр(БСФИтг * СтавкаФОТФ / 100, 2);
		СтрокаТаблицы.ЗаМесяц 		= ФОТФитг;
		СтрокаТаблицы.Комментарий	= НСтр("ru = 'ФОТФ итоговая: ставка ФОТФ от БСФ итг'");
		СтрокаТаблицы.ФизЛицо		= ФизЛицо;
		
		// ПФФ корр (Корректировка: ПФФ итг - ПФФ)
		СтрокаТаблицы = ТаблицаРасшифровкаРасчет.Добавить();		
		СтрокаТаблицы.Параметр 		= НСтр("ru = 'ПФФ корр'");
		СтрокаТаблицы.ЗаМесяц 		= ПФФИтг - ПФФ;
		СтрокаТаблицы.Комментарий	= НСтр("ru = 'Корректировка: ПФФ итг - ПФФ'");
		СтрокаТаблицы.ФизЛицо		= ФизЛицо;
		
		// МСФ корр (Корректировка: МСФ итг - МСФ)
		СтрокаТаблицы = ТаблицаРасшифровкаРасчет.Добавить();		
		СтрокаТаблицы.Параметр 		= НСтр("ru = 'МСФ корр'");
		СтрокаТаблицы.ЗаМесяц 		= МСФитг - МСФ;
		СтрокаТаблицы.Комментарий	= НСтр("ru = 'Корректировка: МСФ итг - МСФ'");
		СтрокаТаблицы.ФизЛицо		= ФизЛицо;
		
		// ФОТФ корр (Корректировка: ФОТФ итг - ФОТФ)
		СтрокаТаблицы = ТаблицаРасшифровкаРасчет.Добавить();		
		СтрокаТаблицы.Параметр 		= НСтр("ru = 'ФОТФ корр'");
		СтрокаТаблицы.ЗаМесяц 		= ФОТФитг - ФОТФ;
		СтрокаТаблицы.Комментарий	= НСтр("ru = 'Корректировка: ФОТФ итг - ФОТФ'");
		СтрокаТаблицы.ФизЛицо		= ФизЛицо;
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТекстЗапросаДокументыСписок()
	Если ПоследующиеМесяцы Тогда
		СписокДокументы.ТекстЗапроса = СтрЗаменить(СписокДокументы.ТекстЗапроса, "Дата = &КонецПериода", "Дата >= КонецПериода(&НачалоПериода, Месяц)");
		СписокДокументы.ТекстЗапроса = СтрЗаменить(СписокДокументы.ТекстЗапроса, "ПериодРегистрации = &НачалоПериода", "ПериодРегистрации >= &НачалоПериода");
	Иначе
		СписокДокументы.ТекстЗапроса = СтрЗаменить(СписокДокументы.ТекстЗапроса, "Дата >= КонецПериода(&НачалоПериода, Месяц)", "Дата = &КонецПериода");
		СписокДокументы.ТекстЗапроса = СтрЗаменить(СписокДокументы.ТекстЗапроса, "ПериодРегистрации >= &НачалоПериода", "ПериодРегистрации = &НачалоПериода");
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура СформироватьЗаголовок()

	Заголовок = СтрШаблон(НСтр("ru = 'Монитор заработной платы. Сотрудник: %1'"), Строка(ОтборФизЛицо));	

КонецПроцедуры // СформироватьЗаголовок()

&НаСервере
Процедура СформироватьТаблицуСписокСотрудников()
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиСрезПоследних.ФизЛицо КАК ФизЛицо
		|ПОМЕСТИТЬ ВременнаяТаблицаУволенныеНаНачалоПериода
		|ИЗ
		|	РегистрСведений.Сотрудники.СрезПоследних(ДОБАВИТЬКДАТЕ(&НачалоПериода, Секунда, -1), Организация = &Организация) КАК СотрудникиСрезПоследних
		|ГДЕ
		|	СотрудникиСрезПоследних.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПлановыеНачисленияНачалоСрезПоследних.Период КАК Период,
		|	ПлановыеНачисленияНачалоСрезПоследних.Регистратор КАК Регистратор,
		|	ПлановыеНачисленияНачалоСрезПоследних.ФизЛицо КАК ФизЛицо
		|ПОМЕСТИТЬ ВременнаяТаблицаПлановыеНачисленияНачало
		|ИЗ
		|	РегистрСведений.ПлановыеНачисленияНачало.СрезПоследних(&КонецПериода, Регистратор ССЫЛКА Документ.КадровоеПеремещение) КАК ПлановыеНачисленияНачалоСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(СотрудникиПоТрудовымСоглашениям.ФизЛицо.Код) КАК ТабельныйНомер,
		|	СотрудникиПоТрудовымСоглашениям.ФизЛицо КАК ФизЛицо,
		|	МАКСИМУМ(СотрудникиПоТрудовымСоглашениям.ФизЛицо.Наименование) КАК ФизЛицоНаименование,
		|	МАКСИМУМ(СотрудникиПоТрудовымСоглашениям.Должность) КАК Должность,
		|	МАКСИМУМ(СотрудникиПоТрудовымСоглашениям.Подразделение) КАК Подразделение,
		|	МАКСИМУМ(СотрудникиПоТрудовымСоглашениям.ВидСобытия) КАК ВидСобытия,
		|	МАКСИМУМ(СотрудникиПоТрудовымСоглашениям.ГрафикРаботы) КАК ГрафикРаботы
		|ПОМЕСТИТЬ ВременнаяТаблицаСотрудникиПоТрудовымСоглашениям
		|ИЗ
		|	РегистрСведений.СотрудникиПоТрудовымСоглашениям КАК СотрудникиПоТрудовымСоглашениям
		|ГДЕ
		|	СотрудникиПоТрудовымСоглашениям.Организация = &Организация
		|	И СотрудникиПоТрудовымСоглашениям.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиПоТрудовымСоглашениям.ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СотрудникиСрезПоследних.ФизЛицо.Код КАК ТабельныйНомер,
		|	СотрудникиСрезПоследних.ФизЛицо КАК ФизЛицо,
		|	СотрудникиСрезПоследних.ФизЛицо.Наименование КАК ФизЛицоНаименование,
		|	СотрудникиСрезПоследних.Должность КАК Должность,
		|	СотрудникиСрезПоследних.Подразделение КАК Подразделение,
		|	ЕСТЬNULL(ПлановыеНачисленияНачало.Регистратор, СотрудникиСрезПоследних.Регистратор) КАК Регистратор,
		|	ВЫБОР
		|		КОГДА ПлановыеНачисленияНачало.Регистратор ЕСТЬ NULL
		|			ТОГДА СотрудникиСрезПоследних.ВидСобытия
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Перемещение)
		|	КОНЕЦ КАК ВидСобытия,
		|	СотрудникиСрезПоследних.ГрафикРаботы КАК ГрафикРаботы
		|ИЗ
		|	РегистрСведений.Сотрудники.СрезПоследних(
		|			&КонецПериода,
		|			Организация = &Организация
		|				И НЕ ФизЛицо В
		|						(ВЫБРАТЬ
		|							ТаблицаСотрудники.ФизЛицо
		|						ИЗ
		|							ВременнаяТаблицаУволенныеНаНачалоПериода КАК ТаблицаСотрудники)) КАК СотрудникиСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаПлановыеНачисленияНачало КАК ПлановыеНачисленияНачало
		|		ПО СотрудникиСрезПоследних.ФизЛицо = ПлановыеНачисленияНачало.ФизЛицо
		|			И СотрудникиСрезПоследних.Период < ПлановыеНачисленияНачало.Период
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СотрудникиПоТрудовымСоглашениям.ТабельныйНомер,
		|	СотрудникиПоТрудовымСоглашениям.ФизЛицо,
		|	СотрудникиПоТрудовымСоглашениям.ФизЛицоНаименование,
		|	СотрудникиПоТрудовымСоглашениям.Должность,
		|	СотрудникиПоТрудовымСоглашениям.Подразделение,
		|	НЕОПРЕДЕЛЕНО,
		|	СотрудникиПоТрудовымСоглашениям.ВидСобытия,
		|	СотрудникиПоТрудовымСоглашениям.ГрафикРаботы
		|ИЗ
		|	ВременнаяТаблицаСотрудникиПоТрудовымСоглашениям КАК СотрудникиПоТрудовымСоглашениям";		
	Запрос.УстановитьПараметр("НачалоПериода", 	НачалоМесяца(ОтборПериодРегистрации));
	Запрос.УстановитьПараметр("КонецПериода", 	КонецМесяца(ОтборПериодРегистрации));
	Запрос.УстановитьПараметр("Организация", 	ОтборОрганизация);
	РезультатЗапроса = Запрос.Выполнить();
	СписокСотрудников.Загрузить(РезультатЗапроса.Выгрузить());
КонецПроцедуры

&НаСервере
Процедура ОбновитьПодвалыЗакладок()

	// Свод
	// Итоги по расчетному листку
	Схема = Элементы.СписокРасчетныеЛистки.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = Элементы.СписокРасчетныеЛистки.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаСписокРасчетныеЛистки = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Если ТаблицаСписокРасчетныеЛистки.Количество() = 0 Тогда
		НачисленияИтог 	= 0;
		УдержанияИтог 	= 0;
		ДопдоходИтог	= 0;
	Иначе	
		НачисленияИтог 	= ТаблицаСписокРасчетныеЛистки.Итог("Начислено");
		УдержанияИтог 	= ТаблицаСписокРасчетныеЛистки.Итог("Удержано");
		ДопдоходИтог	= ТаблицаСписокРасчетныеЛистки.Итог("Допдоход");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РассчитатьСальдоРасчетногоЛистка(СтруктураПериода)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиСрезПоследних.ФизЛицо КАК ФизЛицо,
		|	МАКСИМУМ(ЕСТЬNULL(ДолгНаКонец.СуммаОстатокДт, 0) * -1 + ЕСТЬNULL(ДолгНаКонец.СуммаОстатокКт, 0)) КАК СальдоНаКонец,
		|	МАКСИМУМ(ЕСТЬNULL(ДолгНаНачало.СуммаОстатокДт, 0) * -1 + ЕСТЬNULL(ДолгНаНачало.СуммаОстатокКт, 0)) КАК СальдоНаНачало
		|ИЗ
		|	РегистрСведений.Сотрудники.СрезПоследних(
		|			&КонецПериода,
		|			Организация = &Организация
		|				И ФизЛицо = &ФизЛицо) КАК СотрудникиСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
		|				&НачалоПериода,
		|				Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НачисленнаяЗаработнаяПлата),
		|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СотрудникиОрганизаций),
		|				Организация = &Организация
		|					И Субконто1 = &ФизЛицо) КАК ДолгНаНачало
		|		ПО СотрудникиСрезПоследних.Организация = ДолгНаНачало.Организация
		|			И СотрудникиСрезПоследних.ФизЛицо = ДолгНаНачало.Субконто1
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
		|				ДОБАВИТЬКДАТЕ(&КонецПериода, СЕКУНДА, 1),
		|				Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НачисленнаяЗаработнаяПлата),
		|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СотрудникиОрганизаций),
		|				Организация = &Организация
		|					И Субконто1 = &ФизЛицо) КАК ДолгНаКонец
		|		ПО СотрудникиСрезПоследних.Организация = ДолгНаКонец.Организация
		|			И СотрудникиСрезПоследних.ФизЛицо = ДолгНаКонец.Субконто1
		|
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиСрезПоследних.ФизЛицо";	
	Запрос.УстановитьПараметр("КонецПериода", 	СтруктураПериода.КонецПериода);
	Запрос.УстановитьПараметр("НачалоПериода", 	СтруктураПериода.НачалоПериода);
	Запрос.УстановитьПараметр("Организация", 	ОтборОрганизация);
	Запрос.УстановитьПараметр("ФизЛицо", 		ОтборФизЛицо);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда	
		Если Выборка.СальдоНаНачало < 0 Тогда
			СальдоНаНачалоПоРасчетномуЛистку = СтрШаблон(НСтр("ru = 'Долг за работником на начало месяца: %1'"), Формат(Выборка.СальдоНаНачало * (-1), "ЧЦ=15; ЧДЦ=2"));
		Иначе	
			СальдоНаНачалоПоРасчетномуЛистку = СтрШаблон(НСтр("ru = 'Долг за организацией на начало месяца: %1'"), Формат(Выборка.СальдоНаНачало, "ЧЦ=15; ЧДЦ=2"));
		КонецЕсли; 
		
		Если Выборка.СальдоНаКонец < 0 Тогда
			СальдоНаКонецПоРасчетномуЛистку = СтрШаблон(НСтр("ru = 'Долг за работником на конец месяца: %1'"), Формат(Выборка.СальдоНаКонец * (-1), "ЧЦ=15; ЧДЦ=2"));
		Иначе	
			СальдоНаКонецПоРасчетномуЛистку = СтрШаблон(НСтр("ru = 'Долг за организацией на конец месяца: %1'"), Формат(Выборка.СальдоНаКонец, "ЧЦ=15; ЧДЦ=2"));
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборНаСписокСотрудников()

	СтруктураОтбора = Неопределено;
	МассивЗаполнения = Новый Массив();
	СтрокаКолонокФиксированнойСтруктуры = "";
	
	Если ЗначениеЗаполнено(ОтборПодразделение) Тогда
		Если СтрокаКолонокФиксированнойСтруктуры = "" Тогда
			СтрокаКолонокФиксированнойСтруктуры = "Подразделение";
		Иначе
			СтрокаКолонокФиксированнойСтруктуры = СтрокаКолонокФиксированнойСтруктуры + ", Подразделение";
		КонецЕсли;	
		МассивЗаполнения.Добавить(ОтборПодразделение);
	КонецЕсли;
	
	
	Если МассивЗаполнения.Количество() = 1 Тогда
		СтруктураОтбора = Новый ФиксированнаяСтруктура(СтрокаКолонокФиксированнойСтруктуры, МассивЗаполнения[0]);
		
	ИначеЕсли МассивЗаполнения.Количество() = 2 Тогда
		СтруктураОтбора = Новый ФиксированнаяСтруктура(СтрокаКолонокФиксированнойСтруктуры, 
									МассивЗаполнения[0],
									МассивЗаполнения[1]);
	КонецЕсли;	
		
	Элементы.СписокСотрудников.ОтборСтрок = СтруктураОтбора;	
КонецПроцедуры

&НаСервере
Функция ПолучитьОрганизациюПоУмолчанию()

	Возврат Справочники.Организации.ОрганизацияПоУмолчанию();	

КонецФункции // ПолучитьОрганизациюПоУмолчанию()

&НаСервере
Процедура ПолучитьДанныеУчетнойПолитикиПоПерсоналу()

	ДанныеУчетнойПолитикиПоПерсоналу = БухгалтерскийУчетСервер.ПолучитьДанныеУчетнойПолитикиПоПерсоналу(ОтборПериодРегистрации, ОтборОрганизация);	

КонецПроцедуры

// Функция получения ссылок документов.
//
// Параметры:
//	Ссылка - ДокументСсылка - ссылка на выбранный документ.
//
// Возвращаемое значение:
//	Имя - Строка - название документа.
//
&НаСервереБезКонтекста
Функция ПолучитьНазваниеДокумента(Ссылка)
	
	Возврат Ссылка.Метаданные().Имя

КонецФункции

&НаСервере
Процедура ДобавитьПорядок(Порядок)

	// ФизЛицо
	ЭлементПорядка = Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	ЭлементПорядка.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	ЭлементПорядка.Использование = Истина;
	ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("ФизЛицо");
	ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;

	// Период
	ЭлементПорядка = Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	ЭлементПорядка.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	ЭлементПорядка.Использование = Истина;
	ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("Период");
	ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;

КонецПроцедуры 

&НаКлиенте
Процедура УстановитьОтбор()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Сотрудники, "ФизЛицо", ОтборФизЛицо,,,ЗначениеЗаполнено(ОтборФизЛицо)); 
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СотрудникиПоТрудовымСоглашениям, "ФизЛицо", ОтборФизЛицо,,,ЗначениеЗаполнено(ОтборФизЛицо)); 
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ПлановыеНачисленияНачало, "ФизЛицо", ОтборФизЛицо,,,ЗначениеЗаполнено(ОтборФизЛицо)); 
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ПлановыеНачисленияОкончание, "ФизЛицо", ОтборФизЛицо,,,ЗначениеЗаполнено(ОтборФизЛицо)); 
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ПлановыеУдержанияНачало, "ФизЛицо", ОтборФизЛицо,,,ЗначениеЗаполнено(ОтборФизЛицо)); 
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ПлановыеУдержанияОкончание, "ФизЛицо", ОтборФизЛицо,,,ЗначениеЗаполнено(ОтборФизЛицо)); 
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ПоощренияИВзыскания, "ФизЛицо", ОтборФизЛицо,,,ЗначениеЗаполнено(ОтборФизЛицо)); 
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СтатусыСотрудников, "ФизЛицо", ОтборФизЛицо,,,ЗначениеЗаполнено(ОтборФизЛицо));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СтажиСотрудников, "ФизЛицо", ОтборФизЛицо,,,ЗначениеЗаполнено(ОтборФизЛицо)); 
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ВыплаченнаяЗарплата, "ФизЛицо", ОтборФизЛицо,,,ЗначениеЗаполнено(ОтборФизЛицо)); 
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ПодоходныйНалог, "ФизЛицо", ОтборФизЛицо,,,ЗначениеЗаполнено(ОтборФизЛицо)); 
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СоциальныйФонд, "ФизЛицо", ОтборФизЛицо,,,ЗначениеЗаполнено(ОтборФизЛицо)); 
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Начисления, "ФизЛицо", ОтборФизЛицо,,,ЗначениеЗаполнено(ОтборФизЛицо)); 
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Удержания, "ФизЛицо", ОтборФизЛицо,,,ЗначениеЗаполнено(ОтборФизЛицо)); 
	
	Элементы.ДекорацияИмяСотрудника.Заголовок = ОтборФизЛицо;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗакладкуНастройки()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетнаяПолитикаПоПерсоналуСрезПоследних.Период КАК Период,
		|	УчетнаяПолитикаПоПерсоналуСрезПоследних.Организация КАК Организация,
		|	УчетнаяПолитикаПоПерсоналуСрезПоследних.ПределыПоПодразделениям КАК ПределыПоПодразделениям,
		|	УчетнаяПолитикаПоПерсоналуСрезПоследних.ВозвратОтрицательнойСуммой КАК ВозвратОтрицательнойСуммой,
		|	УчетнаяПолитикаПоПерсоналуСрезПоследних.ДатаОграниченияНачисленияГНПФМужчины КАК ДатаОграниченияНачисленияГНПФМужчины,
		|	УчетнаяПолитикаПоПерсоналуСрезПоследних.ДатаОграниченияНачисленияГНПФЖенщины КАК ДатаОграниченияНачисленияГНПФЖенщины,
		|	УчетнаяПолитикаПоПерсоналуСрезПоследних.МинимальныйРасчетныйДоход КАК МинимальныйРасчетныйДоход,
		|	УчетнаяПолитикаПоПерсоналуСрезПоследних.ДоплатаПНЗаСчетФирмы КАК ДоплатаПНЗаСчетФирмы,
		|	УчетнаяПолитикаПоПерсоналуСрезПоследних.СчетУчетаРасходовПоДоплатеПН КАК СчетУчетаРасходовПоДоплатеПН,
		|	УчетнаяПолитикаПоПерсоналуСрезПоследних.СтатьяПоДоплатеПН КАК СтатьяПоДоплатеПН,
		|	УчетнаяПолитикаПоПерсоналуСрезПоследних.СчетУчетаРасчетовПФФ КАК СчетУчетаРасчетовПФФ,
		|	УчетнаяПолитикаПоПерсоналуСрезПоследних.СчетУчетаРасчетовМСФ КАК СчетУчетаРасчетовМСФ,
		|	УчетнаяПолитикаПоПерсоналуСрезПоследних.СчетУчетаРасчетовФОТФ КАК СчетУчетаРасчетовФОТФ,
		|	УчетнаяПолитикаПоПерсоналуСрезПоследних.СчетУчетаРасчетовПФР КАК СчетУчетаРасчетовПФР,
		|	УчетнаяПолитикаПоПерсоналуСрезПоследних.СчетУчетаРасчетовГНПФР КАК СчетУчетаРасчетовГНПФР,
		|	УчетнаяПолитикаПоПерсоналуСрезПоследних.СреднемесячнаяЗПСФ КАК СреднемесячнаяЗПСФ,
		|	УчетнаяПолитикаПоПерсоналуСрезПоследних.ПроцентОтСЗПСФ КАК ПроцентОтСЗПСФ,
		|	УчетнаяПолитикаПоПерсоналуСрезПоследних.СчетУчетаРасходовПоКорректировкеСФ КАК СчетУчетаРасходовПоКорректировкеСФ,
		|	УчетнаяПолитикаПоПерсоналуСрезПоследних.СтатьяПоКорректировкеСФ КАК СтатьяПоКорректировкеСФ,
		|	УчетнаяПолитикаПоПерсоналуСрезПоследних.КоличествоСотрудниковДляОтчетаСФ КАК КоличествоСотрудниковДляОтчетаСФ,
		|	УчетнаяПолитикаПоПерсоналуСрезПоследних.СтавкаПрофВзнос КАК СтавкаПрофВзнос,
		|	УчетнаяПолитикаПоПерсоналуСрезПоследних.СчетУчетаРасчетовПрофВзнос КАК СчетУчетаРасчетовПрофВзнос,
		|	УчетнаяПолитикаПоПерсоналуСрезПоследних.ПрофВзносЗаВычетомПН КАК ПрофВзносЗаВычетомПН,
		|	УчетнаяПолитикаПоПерсоналуСрезПоследних.ПрофВзносЗаВычетомПФРИГНПФР КАК ПрофВзносЗаВычетомПФРИГНПФР,
		|	УчетнаяПолитикаПоПерсоналуСрезПоследних.ВидУдержанияПоПрофВзнос КАК ВидУдержанияПоПрофВзнос,
		|	УчетнаяПолитикаПоПерсоналуСрезПоследних.СчетУчетаШтрафыПениНеустойкиСФ КАК СчетУчетаШтрафыПениНеустойкиСФ,
		|	УчетнаяПолитикаПоПерсоналуСрезПоследних.СчетУчетаПоПНДляПрочихФизическихЛиц КАК СчетУчетаПоПНДляПрочихФизическихЛиц,
		|	УчетнаяПолитикаПоПерсоналуСрезПоследних.РасчетПНБезНакопления КАК РасчетПНБезНакопления
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаПоПерсоналу.СрезПоследних(&Период, Организация = &Организация) КАК УчетнаяПолитикаПоПерсоналуСрезПоследних";	
	Запрос.УстановитьПараметр("Организация", ОтборОрганизация);
	Запрос.УстановитьПараметр("Период", КонецМесяца(ОтборПериодРегистрации));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ПериодНастройки 		= Выборка.Период;
		ОрганизацияНастройки 	= Выборка.Организация;
		СреднемесячнаяЗПСумма 	= Выборка.СреднемесячнаяЗПСФ;
		СреднемесячнаяЗППроцент = Выборка.ПроцентОтСЗПСФ;
		СтавкаКорпОтчислений	= Выборка.СтавкаПрофВзнос;
		
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Выборка);
		
	Иначе	
		ТекстСообщения = НСтр("ru = 'Не найдена учетная политика для указанных периода и организации. Закладка ""Настройки"" не заполнена.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КурсыВалютЗаработнаяПлата.Период КАК Период,
		|	КурсыВалютЗаработнаяПлата.Валюта КАК Валюта,
		|	КурсыВалютЗаработнаяПлата.Курс КАК Курс,
		|	КурсыВалютЗаработнаяПлата.Кратность КАК Кратность
		|ИЗ
		|	РегистрСведений.КурсыВалютЗаработнаяПлата КАК КурсыВалютЗаработнаяПлата";
	
	КурсыВалютЗаработнаяПлата.Загрузить(Запрос.Выполнить().Выгрузить());
	
	УчетЗПВВалюте 							= Константы.ФункциональнаяОпцияУчетЗаработнойПлатыВВалюте.Получить();
	ВестиШтатноеРасписание 					= Константы.ФункциональнаяОпцияВестиШтатноеРасписание.Получить();
	КонтрольСоответствияШтатномуРасписанию 	= Константы.ВвестиКонтрольЗапретаСтавкиПоШтатномуРасписанию.Получить();
КонецПроцедуры

#КонецОбласти

#Область РедактированиеМесяцаСтрокой

&НаКлиенте
Процедура ПериодРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОповещениеЗавершения = Новый ОписаниеОповещения("ВводМесяцаОбработкаВыбораЗавершение", ЭтаФорма);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "ОтборПериодРегистрации", "МесяцСтрокой",,ОповещениеЗавершения);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ПериодРегистрации.
//
&НаКлиенте
Процедура ПериодРегистрацииПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "ОтборПериодРегистрации", "МесяцСтрокой", Модифицированность);
	
	ПолучитьДанныеУчетнойПолитикиПоПерсоналу();
	
	УстановитьПараметрыДинамическихСписков();
	СформироватьРасшифровкуРасчета();
	ОбновитьВидимостьДанныхРасчета();
	УстановитьВидимостьДоступностьЭлементов();
	СформироватьТаблицуСписокСотрудников();
	УстановитьОтборНаСписокСотрудников();
	ЗаполнитьЗакладкуНастройки();
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "ОтборПериодРегистрации", "МесяцСтрокой", Направление, Модифицированность);
	УстановитьПараметрыДинамическихСписков();
	СформироватьРасшифровкуРасчета();
	ОбновитьВидимостьДанныхРасчета();
КонецПроцедуры

&НаКлиенте
// Процедура обработчик события очистки данных поля ПериодРегистрации
//
Процедура ПериодРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	ОтборПериодРегистрации = Неопределено;
	УстановитьПараметрыДинамическихСписков();
	СформироватьРасшифровкуРасчета();
	ОбновитьВидимостьДанныхРасчета();
	
КонецПроцедуры //ОтборПериодРегистрацииОчистка()

&НаКлиенте
Процедура ПериодРегистрацииАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ФоновоеЗаданиеПерепровестиДокументы

&НаСервере
Функция ДокументыДляОбработки()

	Схема = Элементы.ПриказыКадровые.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = Элементы.ПриказыКадровые.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаКадровыхПриказов = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	МассивСсылок = Новый Массив;

	Для Каждого СтрокаТаблицыЗначений Из ТаблицаКадровыхПриказов Цикл
		МассивСсылок.Добавить(СтрокаТаблицыЗначений.Регистратор);
	КонецЦикла;
	
	Возврат МассивСсылок;	

КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			СостояниеПрогресса = 100;
			ЗагрузитьПодготовленныеДанные();
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		Иначе
			ДанныеПрогресса = ПолучитьИзВременногоХранилища(АдресХранилищаПрогресса);
			СостояниеПрогресса = ДанныеПрогресса;
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;	
КонецПроцедуры

&НаСервере
Функция ПерепровестиДокументыНаСервере(ПараметрыКоманды)
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	АдресРасшифровки = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	АдресХранилищаПрогресса = ПоместитьВоВременноеХранилище(, УникальныйИдентификатор);
	ПараметрыКоманды.Вставить("АдресРасшифровки", АдресРасшифровки);
	ПараметрыКоманды.Вставить("АдресХранилищаПрогресса", АдресХранилищаПрогресса);
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Обработки.МониторЗаработнойПлаты.ПерепровестиДокументы",
		ПараметрыКоманды,
		СтрШаблон(НСтр("ru = 'Перепроведение документов: %1'"), Заголовок));
	
	АдресХранилища       = РезультатВыполнения.АдресХранилища;
	ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	Результат         = РезультатВыполнения.Результат;
	
	ИдентификаторЗадания = Неопределено;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
КонецФункции

#КонецОбласти
