
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если Параметры.Свойство("Организация") Тогда		
		Объект.Организация = Параметры.Организация;
		
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = Организация;	
		КонецЕсли;	
		
		ДатаНачала 		= Параметры.ДатаНачала;
		ДатаОкончания 	= Параметры.ДатаОкончания;
		
		ПерейтиНаАвансы = Параметры.ПерейтиНаАвансы;
		
	Иначе		
		Объект.Организация = Организация;
		
		// Установка реквизитов формы.
		ДатаОбработки = ТекущаяДатаСеанса();
		ДатаНачала 	  = НачалоМесяца(ДатаОбработки);
		ДатаОкончания  = КонецМесяца(ДатаОбработки);
	КонецЕсли;
	
	УстановитьПараметрыДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьДоступностьЭлементов();	
	
	НаименованиеПредыдущейСтраницы = Элементы.ГруппаСтраницыКонтрагенты.ТекущаяСтраница.Имя;
	
	Если НЕ Объект.ПоПодотчетникам Тогда
		Объект.ОбороткаКонтрагенты.Очистить();
		Объект.ОбороткаДоговоры.Очистить();
		
		СформироватьНаСервере();
	КонецЕсли;	
	
	СтрокаТабличнойЧастиОК = Элементы.ОбороткаКонтрагенты.ТекущиеДанные;
	Если СтрокаТабличнойЧастиОК <> Неопределено Тогда
		ТекущийКонтрагент = СтрокаТабличнойЧастиОК.Контрагент;
	КонецЕсли;
	
	СтрокаТабличнойЧастиОД = Элементы.ОбороткаДоговоры.ТекущиеДанные;
	Если СтрокаТабличнойЧастиОД <> Неопределено Тогда
		ТекущийДоговор = СтрокаТабличнойЧастиОД.Договор;
	КонецЕсли;
	
	УстановитьОтборы();
	УстановитьЗаголовокОтборКонтрагентДоговор();
	
	УстановитьЗаголовокЗакрывающаяПроводка();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		
		ДатаОкончания = КонецМесяца(ДатаНачала);
		
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			
			Объект.ОбороткаКонтрагенты.Очистить();
			Объект.ОбороткаДоговоры.Очистить();	
			СформироватьНаСервере();
			
			УстановитьОтборы();
			УстановитьВидимостьДоступностьЭлементов();	
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
			
		Объект.ОбороткаКонтрагенты.Очистить();
		Объект.ОбороткаДоговоры.Очистить();	
		СформироватьНаСервере();
		
		УстановитьОтборы();
		УстановитьВидимостьДоступностьЭлементов();	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) И ЗначениеЗаполнено(Объект.Организация) Тогда
		
		Объект.ОбороткаКонтрагенты.Очистить();
		Объект.ОбороткаДоговоры.Очистить();
		СформироватьНаСервере();
		
		УстановитьОтборы();
		УстановитьВидимостьДоступностьЭлементов();	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеАвансыПриИзменении(Элемент)
	УстановитьОтборНаАвансы();		
КонецПроцедуры

&НаКлиенте
Процедура ПоПодотчетникамПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиОбороткаКонтрагенты

&НаКлиенте
Процедура ОбороткаКонтрагентыПриАктивизацииСтроки(Элемент)
	ИмяТабличнойЧасти = "ОбороткаКонтрагенты";
	БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ОбороткаДоговоры");
	
	СтрокаТабличнойЧасти = Элементы.ОбороткаКонтрагенты.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		ТекущийКонтрагент = СтрокаТабличнойЧасти.Контрагент;
		
		УстановитьОтборНаАвансы();
		УстановитьЗаголовокОтборКонтрагентДоговор();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбороткаКонтрагентыПередУдалением(Элемент, Отказ)
	ИмяТабличнойЧасти = "ОбороткаКонтрагенты";
	БухгалтерскийУчетКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтотОбъект, "ОбороткаДоговоры");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиОбороткаДоговоры

&НаКлиенте
Процедура ОборотыДоговораПриАктивизацииСтроки(Элемент)
	СтрокаТабличнойЧасти = Элементы.ОбороткаДоговоры.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		Отказ = Ложь;
	
		ПроверитьЗаполнениеОрганизации(Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ТекущийДоговор = СтрокаТабличнойЧасти.Договор;
		УстановитьОтборы();
		УстановитьЗаголовокОтборКонтрагентДоговор();
		УстановитьЗаголовокЗакрывающаяПроводка();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиАвансы

&НаКлиенте
Процедура АвансыПриАктивизацииСтроки(Элемент)
	ИмяТабличнойЧасти = "Авансы";
	БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ОперацииАвансов");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовДинамическогоСпискаСписокПодотчетники

&НаКлиенте
Процедура СписокПодотчетникиПриАктивизацииСтроки(Элемент)
	ТекущиеДанныеСписокПодотчетники = Элементы.СписокПодотчетники.ТекущиеДанные;
	Если ТекущиеДанныеСписокПодотчетники <> Неопределено Тогда
		ТекущийПодотчетник = ТекущиеДанныеСписокПодотчетники.Подотчетник;
	КонецЕсли;
	
	ПолучитьСписокСчетовПодотчетника();
	УстановитьОтборДинамическихСписковПоПодотчетникам();
	УстановитьОтборНаРасшифровкуПоСчетамПодотчетников();
	СФормироватьСписокДокументовПоПодотчетнику();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиРасшифровкаПоСчетамПодотчетников

&НаКлиенте
Процедура РасшифровкаПоСчетамПодотчетниковПриАктивизацииСтроки(Элемент)	
	ПолучитьСписокСчетовПодотчетника();
	УстановитьОтборДинамическихСписковПоПодотчетникам();
	СФормироватьСписокДокументовПоПодотчетнику();
	ПроверитьПарныеСчета(Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сформировать(Команда)
	
	Отказ = Ложь;
	
	ПроверитьЗаполнениеОрганизации(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	Объект.ОбороткаКонтрагенты.Очистить();
	Объект.ОбороткаДоговоры.Очистить();
	СформироватьНаСервере();
	
	УстановитьОтборы();
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПоДокументам(Команда)
	
	СтрокаТабличнойЧасти = Элементы.Проверки.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Выделите строку в табличной части.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	Иначе	
		МассивДокументов = ПолучитьРасшифровкуПоДокументам(СтрокаТабличнойЧасти.Контрагент);
		
		Если МассивДокументов.Количество() = 0 Тогда		
			ТекстСообщения = НСтр("ru = 'За выбранный период по контрагенту нет документов с ошибками, проверьте предыдущие периоды.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
		Иначе
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("МассивДокументов", МассивДокументов);
			
			ОткрытьФорму("Обработка.МониторРасчетов.Форма.ФормаРасшифровкиПоДокументам",ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьВидимостьДоступностьЭлементов()
	Если ВСомах Тогда
		Элементы.ОбороткаСчетаДоговорыВалюта.Видимость = Ложь;
		Элементы.ОборотыДоговораВалюта.Видимость = Ложь;
		Элементы.РасшифровкаПоСчетамПодотчетниковВалюта.Видимость = Ложь;
		Элементы.СписокРасшифровкаДоЗакрытияМесяцаПодотчетникиВалюта.Видимость = Ложь;
		Элементы.СписокРасшифровкаПослеЗакрытияМесяцаПодотчетникиВалюта.Видимость = Ложь;
	Иначе
		Элементы.ОбороткаСчетаДоговорыВалюта.Видимость = Истина;
		Элементы.ОборотыДоговораВалюта.Видимость = Истина;
		Элементы.РасшифровкаПоСчетамПодотчетниковВалюта.Видимость = Истина;
		Элементы.СписокРасшифровкаДоЗакрытияМесяцаПодотчетникиВалюта.Видимость = Истина;
		Элементы.СписокРасшифровкаПослеЗакрытияМесяцаПодотчетникиВалюта.Видимость = Истина;		
	КонецЕсли;
	
	Если Объект.ПоПодотчетникам Тогда
		Элементы.ГруппаСтраницаПодотчетники.Видимость 	= Истина;
		Элементы.ГруппаСтраницаКонтрагенты.Видимость 	= Ложь;	
	Иначе
		Элементы.ГруппаСтраницаПодотчетники.Видимость 	= Ложь;
	    Элементы.ГруппаСтраницаКонтрагенты.Видимость 	= Истина;			
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеОрганизации(Отказ)

	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда	
		ТекстСообщения = НСтр("ru = 'Необходимо заполнить организацию.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.Организация",,Отказ);
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Процедура СформироватьРасшифровкуПоСчетам()
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	Запрос = Новый Запрос;	
	Запрос.Текст =
		// 1. Счета с субконто "Контрагент" и "Договор".
		// 2. Остатки по тем же счетам (1 пункт), кроме 1549.
		// 3. Обороты по тем же счетам (1 пункт), кроме 1549.
		// 4. Соединение данных 2 и 3 пункта.
		// 5. Левое присоединения 2 и 3 пункта к 1.
		// 6. Наложение отборов на результат 4 пункта.
		// 7. Выбираются все данные из 5 пункта, с условием что обороты равны 0 в случае если это док. "Закрытие месяца"
		//		год и месяца которого равен году и месяца даты окончания.
		// 8. Выбираются данные из 7 пункта + группировка + порядок.
		// 9. Выбираются все данные из 5 пункта + группировка + порядок.
		// 10.  Выбираются данные из 3 пункта с условием: регистратор = док. "Закрытие месяца" и сумма оборот > 0.
		// 11. Проверка существует ли проведенное закрытие месяца в месяце даты окончания.
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет,
		|	Хозрасчетный.Вид КАК ВидСчета
		|ПОМЕСТИТЬ ВременнаяТаблицаСчета
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.ВидыСубконто.ВидСубконто В(&ВидыСубконто)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК Счет,
		|	ХозрасчетныйОстатки.Субконто2 КАК Договор,
		|	ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт КАК СуммаОстатокДт,
		|	ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт КАК СуммаОстатокКт
		|ПОМЕСТИТЬ ВременнаяТаблицаХозрасчетныйОстатки
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ДатаОстатков,
		|			Счет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНаАвансы),
		|			&ВидыСубконто,
		|			Организация = &Организация) КАК ХозрасчетныйОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Счет КАК Счет,
		|	ХозрасчетныйОбороты.КорСчет КАК КорСчет,
		|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
		|	ХозрасчетныйОбороты.Период КАК Период,
		|	ХозрасчетныйОбороты.Субконто2 КАК Договор,
		|	ХозрасчетныйОбороты.ВалютнаяСуммаОборот КАК СуммаОборот,
		|	ХозрасчетныйОбороты.ВалютнаяСуммаОборотДт КАК СуммаОборотДт,
		|	ХозрасчетныйОбороты.ВалютнаяСуммаОборотКт КАК СуммаОборотКт
		|ПОМЕСТИТЬ ВременнаяТаблицаХозрасчетныйОбороты
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&ДатаНачала,
		|			&ДатаОкончания,
		|			Регистратор,
		|			Счет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНаАвансы),
		|			&ВидыСубконто,
		|			Организация = &Организация) КАК ХозрасчетныйОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстатки.Счет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|			ТОГДА ХозрасчетныйОстатки.Счет 
		|		ИНАЧЕ ХозрасчетныйОбороты.Счет
		|	КОНЕЦ КАК Счет,
		|   ВЫБОР
		|		КОГДА ХозрасчетныйОстатки.Договор <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|			ТОГДА ХозрасчетныйОстатки.Договор
		|		КОГДА ХозрасчетныйОбороты.Договор <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|			ТОГДА ХозрасчетныйОбороты.Договор
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Договор,
		|   ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаОстатокДт,
		|   ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаОстатокКт,
		|   ХозрасчетныйОбороты.Регистратор КАК Регистратор,
		|   ХозрасчетныйОбороты.Период КАК Период,
		|   ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
		|   ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт
		|ПОМЕСТИТЬ ВременнаяТаблицаДанныеДоговоровХозрасчетный
		|ИЗ	
		|	ВременнаяТаблицаХозрасчетныйОстатки КАК ХозрасчетныйОстатки
		|   ПОЛНОЕ СОЕДИНЕНИЕ ВременнаяТаблицаХозрасчетныйОбороты КАК ХозрасчетныйОбороты
		|   	ПО ХозрасчетныйОстатки.Счет = ХозрасчетныйОбороты.Счет
		|			И ХозрасчетныйОстатки.Договор = ХозрасчетныйОбороты.Договор 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаСчета.Счет КАК Счет,
		|	ВременнаяТаблицаСчета.ВидСчета КАК ВидСчета,
		|	ДанныеДоговоровХозрасчетный.Регистратор КАК Регистратор,
		|	ДанныеДоговоровХозрасчетный.Период КАК Период,
		|	ДанныеДоговоровХозрасчетный.Договор КАК Договор,
		|	ЕСТЬNULL(ДанныеДоговоровХозрасчетный.СуммаОборотДт, 0) КАК СуммаОборотДт,
		|	ЕСТЬNULL(ДанныеДоговоровХозрасчетный.СуммаОборотКт, 0) КАК СуммаОборотКт,
		|	ЕСТЬNULL(ДанныеДоговоровХозрасчетный.СуммаОстатокДт, 0) КАК СуммаОстатокДт,
		|	ЕСТЬNULL(ДанныеДоговоровХозрасчетный.СуммаОстатокКт, 0) КАК СуммаОстатокКт
		|ПОМЕСТИТЬ ВременнаяТаблицаНачальныеДанные
		|ИЗ
		|	ВременнаяТаблицаСчета КАК ВременнаяТаблицаСчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаДанныеДоговоровХозрасчетный КАК ДанныеДоговоровХозрасчетный
		|		ПО ВременнаяТаблицаСчета.Счет = ДанныеДоговоровХозрасчетный.Счет 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаНачальныеДанные.Счет КАК Счет,
		|	ВременнаяТаблицаНачальныеДанные.ВидСчета КАК ВидСчета,
		|	ЕСТЬNULL(ВременнаяТаблицаНачальныеДанные.Регистратор, НЕОПРЕДЕЛЕНО) КАК Регистратор,
		|	ЕСТЬNULL(ВременнаяТаблицаНачальныеДанные.Период, ДАТАВРЕМЯ(1,1,1,0,0,0)) КАК Период,
		|	ВременнаяТаблицаНачальныеДанные.Договор КАК Договор,
		|	ВременнаяТаблицаНачальныеДанные.СуммаОборотДт КАК СуммаОборотДт,
		|	ВременнаяТаблицаНачальныеДанные.СуммаОборотКт КАК СуммаОборотКт,
		|	ВременнаяТаблицаНачальныеДанные.СуммаОстатокДт КАК СуммаОстатокДт,
		|	ВременнаяТаблицаНачальныеДанные.СуммаОстатокКт КАК СуммаОстатокКт
		|ПОМЕСТИТЬ ВременнаяТаблицаГотовыеДанные
		|ИЗ
		|	ВременнаяТаблицаНачальныеДанные КАК ВременнаяТаблицаНачальныеДанные
		|ГДЕ
		|	(ВременнаяТаблицаНачальныеДанные.СуммаОборотДт <> 0
		|			ИЛИ ВременнаяТаблицаНачальныеДанные.СуммаОборотКт <> 0
		|			ИЛИ ВременнаяТаблицаНачальныеДанные.СуммаОстатокДт <> 0
		|			ИЛИ ВременнаяТаблицаНачальныеДанные.СуммаОстатокКт <> 0)  
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаГотовыеДанные.Счет КАК Счет,
		|	ВременнаяТаблицаГотовыеДанные.Договор КАК Договор,
		|	ВременнаяТаблицаГотовыеДанные.ВидСчета КАК ВидСчета,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаГотовыеДанные.Регистратор <> НЕОПРЕДЕЛЕНО 
		|			ТОГДА
		|				ВЫБОР
		|					КОГДА ВременнаяТаблицаГотовыеДанные.Регистратор ССЫЛКА Документ.ЗакрытиеМесяца
		|							И ГОД(ВременнаяТаблицаГотовыеДанные.Период) = ГОД(&ДатаОкончания)
		|							И МЕСЯЦ(ВременнаяТаблицаГотовыеДанные.Период) = МЕСЯЦ(&ДатаОкончания)
		|						ТОГДА 0
		|					ИНАЧЕ ВременнаяТаблицаГотовыеДанные.СуммаОборотДт
		|				КОНЕЦ
		|		ИНАЧЕ ВременнаяТаблицаГотовыеДанные.СуммаОборотДт
		|	КОНЕЦ КАК ОборотыДт,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаГотовыеДанные.Регистратор <> НЕОПРЕДЕЛЕНО 
		|			ТОГДА
		|				ВЫБОР
		|					КОГДА ВременнаяТаблицаГотовыеДанные.Регистратор ССЫЛКА Документ.ЗакрытиеМесяца
		|							И ГОД(ВременнаяТаблицаГотовыеДанные.Период) = ГОД(&ДатаОкончания)
		|							И МЕСЯЦ(ВременнаяТаблицаГотовыеДанные.Период) = МЕСЯЦ(&ДатаОкончания)
		|						ТОГДА 0
		|					ИНАЧЕ ВременнаяТаблицаГотовыеДанные.СуммаОборотКт
		|				КОНЕЦ
		|		ИНАЧЕ ВременнаяТаблицаГотовыеДанные.СуммаОборотКт
		|	КОНЕЦ КАК ОборотыКт,
		|	ВременнаяТаблицаГотовыеДанные.СуммаОстатокДт КАК СальдоНДт,
		|	ВременнаяТаблицаГотовыеДанные.СуммаОстатокКт КАК СальдоНКт
		|ПОМЕСТИТЬ ВременнаяТаблицаДоЗакрытияМесяца
		|ИЗ
		|	ВременнаяТаблицаГотовыеДанные КАК ВременнаяТаблицаГотовыеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаДоЗакрытияМесяца.Счет КАК Счет,
		|	ВременнаяТаблицаДоЗакрытияМесяца.Договор КАК Договор,
		|	МАКСИМУМ(ВременнаяТаблицаДоЗакрытияМесяца.ВидСчета) КАК ВидСчета,
		|	СУММА(ВременнаяТаблицаДоЗакрытияМесяца.ОборотыДт) КАК ОборотыДт,
		|	СУММА(ВременнаяТаблицаДоЗакрытияМесяца.ОборотыКт) КАК ОборотыКт,
		|	МАКСИМУМ(ВременнаяТаблицаДоЗакрытияМесяца.СальдоНДт) КАК СальдоНДт,
		|	МАКСИМУМ(ВременнаяТаблицаДоЗакрытияМесяца.СальдоНКт) КАК СальдоНКт
		|ИЗ
		|	ВременнаяТаблицаДоЗакрытияМесяца КАК ВременнаяТаблицаДоЗакрытияМесяца
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаДоЗакрытияМесяца.Договор,
		|	ВременнаяТаблицаДоЗакрытияМесяца.Счет
		|
		|УПОРЯДОЧИТЬ ПО
		|	Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаГотовыеДанные.Счет КАК Счет,
		|	ВременнаяТаблицаГотовыеДанные.Договор КАК Договор,
		|	МАКСИМУМ(ВременнаяТаблицаГотовыеДанные.ВидСчета) КАК ВидСчета,
		|	СУММА(ВременнаяТаблицаГотовыеДанные.СуммаОборотДт) КАК ОборотыДт,
		|	СУММА(ВременнаяТаблицаГотовыеДанные.СуммаОборотКт) КАК ОборотыКт,
		|	МАКСИМУМ(ВременнаяТаблицаГотовыеДанные.СуммаОстатокДт) КАК СальдоНДт,
		|	МАКСИМУМ(ВременнаяТаблицаГотовыеДанные.СуммаОстатокКт) КАК СальдоНКт
		|ИЗ
		|	ВременнаяТаблицаГотовыеДанные КАК ВременнаяТаблицаГотовыеДанные
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаГотовыеДанные.Договор,
		|	ВременнаяТаблицаГотовыеДанные.Счет
		|
		|УПОРЯДОЧИТЬ ПО
		|	Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаХозрасчетныйОбороты.Счет КАК Счет,
		|	ВременнаяТаблицаХозрасчетныйОбороты.КорСчет КАК КорСчет,
		|	ВременнаяТаблицаХозрасчетныйОбороты.Договор КАК Договор,
		|	СУММА(ВременнаяТаблицаХозрасчетныйОбороты.СуммаОборот) КАК Сумма
		|ИЗ
		|	ВременнаяТаблицаХозрасчетныйОбороты КАК ВременнаяТаблицаХозрасчетныйОбороты
		|ГДЕ
		|	ВременнаяТаблицаХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ЗакрытиеМесяца
		|	И ВременнаяТаблицаХозрасчетныйОбороты.СуммаОборот > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаХозрасчетныйОбороты.Договор,
		|	ВременнаяТаблицаХозрасчетныйОбороты.Счет,
		|	ВременнаяТаблицаХозрасчетныйОбороты.КорСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗакрытиеМесяца.Ссылка КАК Документ
		|ИЗ
		|	Документ.ЗакрытиеМесяца КАК ЗакрытиеМесяца
		|ГДЕ
		|   ЗакрытиеМесяца.Проведен
		|	И ГОД(ЗакрытиеМесяца.Дата) = ГОД(&ДатаОкончания)
		|	И МЕСЯЦ(ЗакрытиеМесяца.Дата) = МЕСЯЦ(&ДатаОкончания)";	
	Запрос.УстановитьПараметр("ДатаНачала",		НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания",	КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("ДатаОстатков",	НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ВидыСубконто",	ВидыСубконто);
	Запрос.УстановитьПараметр("Организация",	Объект.Организация);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Объект.РасшифровкаПоСчетам.Очистить();                       
	Объект.РасшифровкаДоЗакрытияМесяца.Очистить();
	
	ВыборкаДоЗакрытия = Результат[7].Выбрать();
	ВыборкаПослеЗакрытия = Результат[8].Выбрать();
	ВыборкаЗакрывающиеПроводки = Результат[9].Выбрать();
	ЗакрытияМесяцаНет = Результат[10].Выбрать().Количество() = 0;
	
	// Заполнения данных до закрытия месяца с Расчетом сальдо конечного.
	Пока ВыборкаДоЗакрытия.Следующий() Цикл
		
		// Проверка наличия начальных и оборотных сумм.
		Если ВыборкаДоЗакрытия.СальдоНДт <> 0 ИЛИ ВыборкаДоЗакрытия.СальдоНКт <> 0
			ИЛИ ВыборкаДоЗакрытия.ОборотыДт <> 0 ИЛИ ВыборкаДоЗакрытия.ОборотыКт <> 0 Тогда
			
			СтрокаТабличнойЧасти = Объект.РасшифровкаДоЗакрытияМесяца.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаДоЗакрытия);
			
			// Расчет остатка.
			Если ВыборкаДоЗакрытия.ВидСчета = ВидСчета.Активный Тогда
				Остаток = ВыборкаДоЗакрытия.СальдоНДт + ВыборкаДоЗакрытия.ОборотыДт
							- ВыборкаДоЗакрытия.СальдоНКт - ВыборкаДоЗакрытия.ОборотыКт;
								
				Если Остаток > 0 Тогда
					Если ВыборкаДоЗакрытия.СальдоНКт < 0 Тогда
						СтрокаТабличнойЧасти.СальдоККт = -Остаток;
					Иначе
						СтрокаТабличнойЧасти.СальдоКДт = Остаток;
					КонецЕсли;
				Иначе
					Если ВыборкаДоЗакрытия.СальдоНДт < 0 Тогда
						СтрокаТабличнойЧасти.СальдоКДт = Остаток;	
					Иначе
						СтрокаТабличнойЧасти.СальдоККт = -Остаток;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Остаток = ВыборкаДоЗакрытия.СальдоНКт + ВыборкаДоЗакрытия.ОборотыКт
							- ВыборкаДоЗакрытия.СальдоНДт - ВыборкаДоЗакрытия.ОборотыДт;		
				
				Если Остаток > 0 Тогда
					Если ВыборкаДоЗакрытия.СальдоНДт < 0 Тогда
						СтрокаТабличнойЧасти.СальдоКДт = -Остаток;
					Иначе
						СтрокаТабличнойЧасти.СальдоККт = Остаток;
					КонецЕсли;
				Иначе
					Если ВыборкаДоЗакрытия.СальдоНКт > 0 Тогда
						СтрокаТабличнойЧасти.СальдоККт = Остаток;	
					Иначе
						СтрокаТабличнойЧасти.СальдоКДт = -Остаток;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	 
	Если ЗакрытияМесяцаНет Тогда
		ТаблицаПарныхСчетов = ПолучитьДанныеЗакрытияПарныхСчетов();	
		ТаблицаПарныхСчетов.Колонки.Добавить("ИспользованиеДт",,"ИспользованиеДт");
		ТаблицаПарныхСчетов.Колонки.Добавить("ИспользованиеКт",,"ИспользованиеКт");
		Элементы.РасшифровкаПоСчетамСчет.Заголовок = "Будет после закрытия";
	Иначе
		Элементы.РасшифровкаПоСчетамСчет.Заголовок = "После закрытия";
	КонецЕсли;
	
	// Заполнения данных после закрытия месяца с Расчетом сальдо конечного.
	// В случае если проведенного документа закрытия месяца в месяце даты окончания нет,
	// то проводится закрытие парных счетов и эти данные учитываются при Расчетах.
	Пока ВыборкаПослеЗакрытия.Следующий() Цикл
		СтрокаТабличнойЧасти = Объект.РасшифровкаПоСчетам.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаПослеЗакрытия); 
		
		Если ВыборкаПослеЗакрытия.ВидСчета = ВидСчета.Активный Тогда
			
			Если ЗакрытияМесяцаНет Тогда 
				СтрокаТаблицыЗначений = ТаблицаПарныхСчетов.Найти(ВыборкаПослеЗакрытия.Договор, "Субконто2");
				
				Если СтрокаТаблицыЗначений <> Неопределено Тогда			
					Если СтрокаТаблицыЗначений.СчетДт = СтрокаТабличнойЧасти.Счет Тогда
						СтрокаТабличнойЧасти.ОборотыДт = СтрокаТабличнойЧасти.ОборотыДт + СтрокаТаблицыЗначений.ВалютнаяСумма;
						СтрокаТаблицыЗначений.ИспользованиеДт = Истина;
						
					ИначеЕсли СтрокаТаблицыЗначений.СчетКт = СтрокаТабличнойЧасти.Счет Тогда
						СтрокаТабличнойЧасти.ОборотыКт = СтрокаТабличнойЧасти.ОборотыКт + СтрокаТаблицыЗначений.ВалютнаяСумма;
						СтрокаТаблицыЗначений.ИспользованиеКт = Истина;
					КонецЕсли;					
				КонецЕсли;
			КонецЕсли;
			
			Остаток = СтрокаТабличнойЧасти.СальдоНДт + СтрокаТабличнойЧасти.ОборотыДт
						- СтрокаТабличнойЧасти.СальдоНКт - СтрокаТабличнойЧасти.ОборотыКт;
						
			Если Остаток > 0 Тогда
				Если ВыборкаДоЗакрытия.СальдоНКт < 0 Тогда
					СтрокаТабличнойЧасти.СальдоККт = -Остаток;
				Иначе
					СтрокаТабличнойЧасти.СальдоКДт = Остаток;
				КонецЕсли;
			Иначе
				Если ВыборкаДоЗакрытия.СальдоНДт < 0 Тогда
					СтрокаТабличнойЧасти.СальдоКДт = Остаток;	
				Иначе
					СтрокаТабличнойЧасти.СальдоККт = -Остаток;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Если ЗакрытияМесяцаНет Тогда
				СтрокаТаблицыЗначений = ТаблицаПарныхСчетов.Найти(ВыборкаПослеЗакрытия.Договор, "Субконто2");
				
				Если СтрокаТаблицыЗначений <> Неопределено Тогда			
					Если СтрокаТаблицыЗначений.СчетДт = СтрокаТабличнойЧасти.Счет Тогда
						СтрокаТабличнойЧасти.ОборотыДт = СтрокаТабличнойЧасти.ОборотыДт + СтрокаТаблицыЗначений.ВалютнаяСумма;
						СтрокаТаблицыЗначений.ИспользованиеДт = Истина;
						
					ИначеЕсли СтрокаТаблицыЗначений.СчетКт = СтрокаТабличнойЧасти.Счет Тогда
						СтрокаТабличнойЧасти.ОборотыКт = СтрокаТабличнойЧасти.ОборотыКт + СтрокаТаблицыЗначений.ВалютнаяСумма;
						СтрокаТаблицыЗначений.ИспользованиеКт = Истина;
					КонецЕсли;					
				КонецЕсли;
			КонецЕсли;
			
			Остаток = СтрокаТабличнойЧасти.СальдоНКт + СтрокаТабличнойЧасти.ОборотыКт
						- СтрокаТабличнойЧасти.СальдоНДт - СтрокаТабличнойЧасти.ОборотыДт;
						
			Если Остаток > 0 Тогда
				Если ВыборкаДоЗакрытия.СальдоНДт < 0 Тогда
					СтрокаТабличнойЧасти.СальдоКДт = -Остаток;
				Иначе
					СтрокаТабличнойЧасти.СальдоККт = Остаток;
				КонецЕсли;
			Иначе
				Если ВыборкаДоЗакрытия.СальдоНКт > 0 Тогда
					СтрокаТабличнойЧасти.СальдоККт = Остаток;	
				Иначе
					СтрокаТабличнойЧасти.СальдоКДт = -Остаток;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	// Если какие либо данные из закрытия парных счетов небыли учтены выше,
	// то они выводятся отдельно.
	Если ЗакрытияМесяцаНет Тогда
		СтруктураОтбораДт = Новый Структура();
		СтруктураОтбораДт.Вставить("ИспользованиеДт", Неопределено);
		
		МассивНеиспользованныхДанныхПоДт = ТаблицаПарныхСчетов.НайтиСтроки(СтруктураОтбораДт);
		
		Для Каждого СтрокаМассива Из МассивНеиспользованныхДанныхПоДт Цикл
			СтрокаТабличнойЧасти = Объект.РасшифровкаПоСчетам.Добавить();
			СтрокаТабличнойЧасти.Счет = СтрокаМассива.СчетДт;
			СтрокаТабличнойЧасти.Договор = СтрокаМассива.Субконто2;
			
			Если СтрокаМассива.ВидСчетаДт = ВидСчета.Активный Тогда
				СтрокаТабличнойЧасти.ОборотыДт = СтрокаМассива.ВалютнаяСумма;
				СтрокаТабличнойЧасти.СальдоКДт = СтрокаМассива.ВалютнаяСумма;
			Иначе
				СтрокаТабличнойЧасти.ОборотыКт = СтрокаМассива.ВалютнаяСумма;
				СтрокаТабличнойЧасти.СальдоККт = СтрокаМассива.ВалютнаяСумма;
			КонецЕсли;	
		КонецЦикла;
		
		СтруктураОтбораКт = Новый Структура();
		СтруктураОтбораКт.Вставить("ИспользованиеКт", Неопределено);
		
		МассивНеиспользованныхДанныхПоКт = ТаблицаПарныхСчетов.НайтиСтроки(СтруктураОтбораКт);
		
		Для Каждого СтрокаМассива Из МассивНеиспользованныхДанныхПоКт Цикл
			СтрокаТабличнойЧасти = Объект.РасшифровкаПоСчетам.Добавить();
			СтрокаТабличнойЧасти.Счет = СтрокаМассива.СчетКт;
			СтрокаТабличнойЧасти.Договор = СтрокаМассива.Субконто2;
			
			Если СтрокаМассива.ВидСчетаКт = ВидСчета.Пассивный Тогда
				СтрокаТабличнойЧасти.ОборотыКт = СтрокаМассива.ВалютнаяСумма;
				СтрокаТабличнойЧасти.СальдоККт = СтрокаМассива.ВалютнаяСумма;
			Иначе
				СтрокаТабличнойЧасти.ОборотыДт = СтрокаМассива.ВалютнаяСумма;
				СтрокаТабличнойЧасти.СальдоКДт = СтрокаМассива.ВалютнаяСумма;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
	Пока ВыборкаЗакрывающиеПроводки.Следующий() Цикл
		СтрокаТабличнойЧасти = Объект.ЗакрывающиеПроводки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаЗакрывающиеПроводки);	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеЗакрытияПарныхСчетов()
	
	// 1. Список активных счетов, с заполненным парным счетом (только Контрагенты и договоры) 
	// 2. Список парных счетов (пассивные)
	// 3. Остатки по активным счетам
	// 4. Остатки по пассивным счетам
	// 5. Соединение активных и пассивных остатков
	// 6. Таблица для заполнения	
	
	ТекстЗапроса =
		// Список активных счетов
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК АктивныйСчетУчета
		|ПОМЕСТИТЬ ВременнаяТаблицаСписокАктивныхПарныхСчетов
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
		|	И НЕ Хозрасчетный.ПарныйСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|	И Хозрасчетный.ВидыСубконто.ВидСубконто В(&ВидыСубконто)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		// Список парных счетов
		|ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК ПассивныйСчетУчета
		|ПОМЕСТИТЬ ВременнаяТаблицаСписокПассивныхПарныхСчетов
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
		|	И НЕ Хозрасчетный.ПарныйСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|	И Хозрасчетный.ВидыСубконто.ВидСубконто В(&ВидыСубконто)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		// Остатки по активным сетам
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК СчетАктивный,
		|	ХозрасчетныйОстатки.Субконто1,
		|	ХозрасчетныйОстатки.Субконто2,
		|	СУММА(ХозрасчетныйОстатки.СуммаОстатокДт) КАК СальдоАктивный,
		|	СУММА(ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт) КАК ВалютноеСальдоАктивный,
		|	ХозрасчетныйОстатки.Валюта КАК Валюта
		|ПОМЕСТИТЬ ВременнаяТаблицаСальдоАктивныхСчетов
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&МоментВремени,
		|			Счет В
		|				(ВЫБРАТЬ
		|					ВременнаяТаблицаСписокАктивныхПарныхСчетов.АктивныйСчетУчета
		|				ИЗ
		|					ВременнаяТаблицаСписокАктивныхПарныхСчетов КАК ВременнаяТаблицаСписокАктивныхПарныхСчетов),
		|			&ВидыСубконто,
		|			Организация = &Организация) КАК ХозрасчетныйОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОстатки.Счет,
		|	ХозрасчетныйОстатки.Субконто1,
		|	ХозрасчетныйОстатки.Субконто2,
		|	ХозрасчетныйОстатки.Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		// Остатки по пассивным счетам
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК СчетПассивный,
		|	ХозрасчетныйОстатки.Субконто1,
		|	ХозрасчетныйОстатки.Субконто2,
		|	СУММА(ХозрасчетныйОстатки.СуммаОстатокКт) КАК СальдоПассивный,
		|	СУММА(ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт) КАК ВалютноеСальдоПассивный,
		|	ХозрасчетныйОстатки.Валюта КАК Валюта
		|ПОМЕСТИТЬ ВременнаяТаблицаСальдоПассивныхСчетов
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&МоментВремени,
		|			Счет В
		|				(ВЫБРАТЬ
		|					ВременнаяТаблицаСписокПассивныхПарныхСчетов.ПассивныйСчетУчета
		|				ИЗ
		|					ВременнаяТаблицаСписокПассивныхПарныхСчетов КАК ВременнаяТаблицаСписокПассивныхПарныхСчетов),
		|			&ВидыСубконто,
		|			Организация = &Организация) КАК ХозрасчетныйОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОстатки.Счет,
		|	ХозрасчетныйОстатки.Субконто1,
		|	ХозрасчетныйОстатки.Субконто2,
		|	ХозрасчетныйОстатки.Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		// Соединение остатков
		|ВЫБРАТЬ
		|	ВременнаяТаблицаСальдоАктивныхСчетов.СчетАктивный КАК СчетАктивный,
		|	ВременнаяТаблицаСальдоАктивныхСчетов.Субконто1 КАК Субконто1,
		|	ВременнаяТаблицаСальдоАктивныхСчетов.Субконто2 КАК Субконто2,
		|	ВременнаяТаблицаСальдоАктивныхСчетов.Валюта КАК Валюта,
		|	СУММА(ВременнаяТаблицаСальдоАктивныхСчетов.СальдоАктивный) КАК СальдоАктивный,
		|	СУММА(ВременнаяТаблицаСальдоАктивныхСчетов.ВалютноеСальдоАктивный) КАК ВалютноеСальдоАктивный,
		|	ВременнаяТаблицаСальдоПассивныхСчетов.СчетПассивный КАК СчетПассивный,
		|	СУММА(ВременнаяТаблицаСальдоПассивныхСчетов.СальдоПассивный) КАК СальдоПассивный,
		|	СУММА(ВременнаяТаблицаСальдоПассивныхСчетов.ВалютноеСальдоПассивный) КАК ВалютноеСальдоПассивный
		|ПОМЕСТИТЬ ВременнаяТаблицаСальдоСводПарСчетов
		|ИЗ
		|	ВременнаяТаблицаСальдоАктивныхСчетов КАК ВременнаяТаблицаСальдоАктивныхСчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСальдоПассивныхСчетов КАК ВременнаяТаблицаСальдоПассивныхСчетов
		|		ПО ВременнаяТаблицаСальдоАктивныхСчетов.Субконто1 = ВременнаяТаблицаСальдоПассивныхСчетов.Субконто1
		|			И ВременнаяТаблицаСальдоАктивныхСчетов.Субконто2 = ВременнаяТаблицаСальдоПассивныхСчетов.Субконто2
		|			И ВременнаяТаблицаСальдоАктивныхСчетов.Валюта = ВременнаяТаблицаСальдоПассивныхСчетов.Валюта
		|			И (ВременнаяТаблицаСальдоАктивныхСчетов.СальдоАктивный <> 0)
		|			И (ВременнаяТаблицаСальдоПассивныхСчетов.СальдоПассивный <> 0)
		|			И ВременнаяТаблицаСальдоАктивныхСчетов.СчетАктивный.ПарныйСчет = ВременнаяТаблицаСальдоПассивныхСчетов.СчетПассивный
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаСальдоАктивныхСчетов.СчетАктивный,
		|	ВременнаяТаблицаСальдоПассивныхСчетов.СчетПассивный,
		|	ВременнаяТаблицаСальдоАктивныхСчетов.Субконто1,
		|	ВременнаяТаблицаСальдоАктивныхСчетов.Субконто2,
		|	ВременнаяТаблицаСальдоАктивныхСчетов.Валюта
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		// Остатки (отрицательные) есть только по активным
		|ВЫБРАТЬ
		|	ВременнаяТаблицаСальдоАктивныхСчетов.СчетАктивный,
		|	ВременнаяТаблицаСальдоАктивныхСчетов.Субконто1,
		|	ВременнаяТаблицаСальдоАктивныхСчетов.Субконто2,
		|	ВременнаяТаблицаСальдоАктивныхСчетов.Валюта,
		|	СУММА(ВременнаяТаблицаСальдоАктивныхСчетов.СальдоАктивный),
		|	СУММА(ВременнаяТаблицаСальдоАктивныхСчетов.ВалютноеСальдоАктивный),
		|	ВременнаяТаблицаСальдоАктивныхСчетов.СчетАктивный.ПарныйСчет,
		|	СУММА(0),
		|	СУММА(0)
		|ИЗ
		|	ВременнаяТаблицаСальдоАктивныхСчетов КАК ВременнаяТаблицаСальдоАктивныхСчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСальдоПассивныхСчетов КАК ВременнаяТаблицаСальдоПассивныхСчетов
		|		ПО ВременнаяТаблицаСальдоАктивныхСчетов.Субконто1 = ВременнаяТаблицаСальдоПассивныхСчетов.Субконто1
		|			И ВременнаяТаблицаСальдоАктивныхСчетов.Субконто2 = ВременнаяТаблицаСальдоПассивныхСчетов.Субконто2
		|			И ВременнаяТаблицаСальдоАктивныхСчетов.Валюта = ВременнаяТаблицаСальдоПассивныхСчетов.Валюта
		|			И ВременнаяТаблицаСальдоАктивныхСчетов.СчетАктивный.ПарныйСчет = ВременнаяТаблицаСальдоПассивныхСчетов.СчетПассивный
		|ГДЕ
		|	ВременнаяТаблицаСальдоАктивныхСчетов.СальдоАктивный < 0
		|	И ВременнаяТаблицаСальдоПассивныхСчетов.СчетПассивный ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаСальдоАктивныхСчетов.СчетАктивный,
		|	ВременнаяТаблицаСальдоАктивныхСчетов.Субконто1,
		|	ВременнаяТаблицаСальдоАктивныхСчетов.Субконто2,
		|	ВременнаяТаблицаСальдоАктивныхСчетов.Валюта,
		|	ВременнаяТаблицаСальдоАктивныхСчетов.СчетАктивный.ПарныйСчет
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		// Остатки (отрицательные) есть только по пассивным
		|ВЫБРАТЬ
		|	ВременнаяТаблицаСальдоПассивныхСчетов.СчетПассивный.ПарныйСчет,
		|	ВременнаяТаблицаСальдоПассивныхСчетов.Субконто1,
		|	ВременнаяТаблицаСальдоПассивныхСчетов.Субконто2,
		|	ВременнаяТаблицаСальдоПассивныхСчетов.Валюта,
		|	СУММА(0),
		|	СУММА(0),
		|	ВременнаяТаблицаСальдоПассивныхСчетов.СчетПассивный,
		|	СУММА(ВременнаяТаблицаСальдоПассивныхСчетов.СальдоПассивный),
		|	СУММА(ВременнаяТаблицаСальдоПассивныхСчетов.ВалютноеСальдоПассивный)
		|ИЗ
		|	ВременнаяТаблицаСальдоПассивныхСчетов КАК ВременнаяТаблицаСальдоПассивныхСчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСальдоАктивныхСчетов КАК ВременнаяТаблицаСальдоАктивныхСчетов
		|		ПО ВременнаяТаблицаСальдоПассивныхСчетов.Субконто1 = ВременнаяТаблицаСальдоАктивныхСчетов.Субконто1
		|			И ВременнаяТаблицаСальдоПассивныхСчетов.Субконто2 = ВременнаяТаблицаСальдоАктивныхСчетов.Субконто2
		|			И ВременнаяТаблицаСальдоПассивныхСчетов.Валюта = ВременнаяТаблицаСальдоАктивныхСчетов.Валюта
		|			И ВременнаяТаблицаСальдоПассивныхСчетов.СчетПассивный.ПарныйСчет = ВременнаяТаблицаСальдоАктивныхСчетов.СчетАктивный
		|ГДЕ
		|	ВременнаяТаблицаСальдоПассивныхСчетов.СальдоПассивный < 0
		|	И ВременнаяТаблицаСальдоАктивныхСчетов.СчетАктивный ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаСальдоПассивныхСчетов.СчетПассивный,
		|	ВременнаяТаблицаСальдоПассивныхСчетов.Субконто1,
		|	ВременнаяТаблицаСальдоПассивныхСчетов.Субконто2,
		|	ВременнаяТаблицаСальдоПассивныхСчетов.Валюта,
		|	ВременнаяТаблицаСальдоПассивныхСчетов.СчетПассивный.ПарныйСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		// Определение проводки и сумм
		|ВЫБРАТЬ
		|	ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный КАК СальдоАктивный,
		|	ВременнаяТаблицаСальдоСводПарСчетов.ВалютноеСальдоАктивный КАК СальдоАктивныйВалютное,
		|	ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный КАК СальдоПассивный,
		|	ВременнаяТаблицаСальдоСводПарСчетов.ВалютноеСальдоПассивный КАК СальдоПассивныйВалютное,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный > 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный > 0
		|			ТОГДА ВременнаяТаблицаСальдоСводПарСчетов.СчетПассивный
		|		ИНАЧЕ ВременнаяТаблицаСальдоСводПарСчетов.СчетАктивный
		|	КОНЕЦ КАК СчетДт,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный > 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный > 0
		|			ТОГДА ВременнаяТаблицаСальдоСводПарСчетов.СчетПассивный.Вид
		|		ИНАЧЕ ВременнаяТаблицаСальдоСводПарСчетов.СчетАктивный.Вид
		|	КОНЕЦ КАК ВидСчетаДт,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный > 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный > 0
		|			ТОГДА ВременнаяТаблицаСальдоСводПарСчетов.СчетАктивный
		|		ИНАЧЕ ВременнаяТаблицаСальдоСводПарСчетов.СчетПассивный
		|	КОНЕЦ КАК СчетКт,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный > 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный > 0
		|			ТОГДА ВременнаяТаблицаСальдоСводПарСчетов.СчетАктивный.Вид
		|		ИНАЧЕ ВременнаяТаблицаСальдоСводПарСчетов.СчетПассивный.Вид
		|	КОНЕЦ КАК ВидСчетаКт,
		|	ВременнаяТаблицаСальдоСводПарСчетов.Субконто1 КАК Субконто1,
		|	ВременнаяТаблицаСальдоСводПарСчетов.Субконто2 КАК Субконто2,
		|	ВременнаяТаблицаСальдоСводПарСчетов.Валюта КАК Валюта,
		|	НЕОПРЕДЕЛЕНО КАК Субконто3,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный >= 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный < 0
		|			ТОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный * -1
		|		КОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный < 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный >= 0
		|			ТОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный * -1
		|		КОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный > 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный > 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный >= ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный
		|			ТОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный
		|		КОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный > 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный > 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный < ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный
		|			ТОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный
		|		КОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный < 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный < 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный >= ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный
		|			ТОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный * -1
		|		КОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный < 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный < 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный < ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный
		|			ТОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный * -1
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный >= 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный < 0
		|			ТОГДА ВременнаяТаблицаСальдоСводПарСчетов.ВалютноеСальдоПассивный * -1
		|		КОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный < 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный >= 0
		|			ТОГДА ВременнаяТаблицаСальдоСводПарСчетов.ВалютноеСальдоАктивный * -1
		|		КОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный > 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный > 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный >= ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный
		|			ТОГДА ВременнаяТаблицаСальдоСводПарСчетов.ВалютноеСальдоПассивный
		|		КОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный > 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный > 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный < ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный
		|			ТОГДА ВременнаяТаблицаСальдоСводПарСчетов.ВалютноеСальдоАктивный
		|		КОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный < 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный < 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный >= ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный
		|			ТОГДА ВременнаяТаблицаСальдоСводПарСчетов.ВалютноеСальдоПассивный * -1
		|		КОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный < 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный < 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный < ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный
		|			ТОГДА ВременнаяТаблицаСальдоСводПарСчетов.ВалютноеСальдоАктивный * -1
		|	КОНЕЦ КАК ВалютнаяСумма
		|ИЗ
		|	ВременнаяТаблицаСальдоСводПарСчетов КАК ВременнаяТаблицаСальдоСводПарСчетов
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВЫРАЗИТЬ(ВременнаяТаблицаСальдоСводПарСчетов.Субконто1 КАК Справочник.Контрагенты).Наименование,
		|	ВЫРАЗИТЬ(ВременнаяТаблицаСальдоСводПарСчетов.Субконто2 КАК Справочник.ДоговорыКонтрагентов).Наименование";
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МоментВремени", 	ДатаОкончания + 1); 
	Запрос.УстановитьПараметр("Период", 		ДатаОкончания);
	Запрос.УстановитьПараметр("Организация", 	Объект.Организация);
	Запрос.УстановитьПараметр("ВидыСубконто", 	ВидыСубконто);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции 

&НаСервере
Процедура ПроверкаДоговоров()

	КодДоговора = Неопределено;

	Счетчик = 0;

	ТаблицаЗначений = Новый ТаблицаЗначений;		
	ТаблицаЗначений.Колонки.Добавить("Контрагент");
	ТаблицаЗначений.Колонки.Добавить("Договор");
	ТаблицаЗначений.Колонки.Добавить("Счет");
	ТаблицаЗначений.Колонки.Добавить("Содержание");
	ТаблицаЗначений.Колонки.Добавить("Регистратор");
	
	Для каждого СтрокаТабличнойЧасти Из Объект.ОбороткаСчетаДоговоры Цикл 
		Если Не СтрокаТабличнойЧасти.Контрагент = СтрокаТабличнойЧасти.Договор.Владелец Тогда 
			//ТекстСообщения =  СтрШаблон(НСтр("ru = 'В строке %1.  Данному контрагенту: %2 не соответствует текущий договор: %3 .'"),СтрокаТабличнойЧасти.НомерСтроки,СтрокаТабличнойЧасти.Контрагент,СтрокаТабличнойЧасти.Договор);
			//БухгалтерскийУчетСервер.СообщитьОбОшибке(СтрокаТабличнойЧасти.Договор, ТекстСообщения);
			СтрокаТаблицы = ТаблицаЗначений.Добавить();
			СтрокаТаблицы.Контрагент = СтрокаТабличнойЧасти.Контрагент;
			СтрокаТаблицы.Договор = СтрокаТабличнойЧасти.Договор;
			СтрокаТаблицы.Счет = СтрокаТабличнойЧасти.Счет;
			СтрокаТаблицы.Содержание = НСтр("ru = 'Контрагенту не соответствует текущий договор.'");
			СтрокаТаблицы.Регистратор = СтрокаТабличнойЧасти.Регистратор;
			
		КонецЕсли;
		// Проверка количества счетов у договора. Если > 2, то Содержание = "Количество счетов для данного договора > 2."
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.КодДоговора) Тогда
			Продолжить;
		КонецЕсли;
		Если КодДоговора = СтрокаТабличнойЧасти.КодДоговора Тогда
			Счетчик = Счетчик + 1;
			КонтрагентПред = СтрокаТабличнойЧасти.Контрагент;
			ДоговорПред = СтрокаТабличнойЧасти.Договор;
			СчетПред = СтрокаТабличнойЧасти.Счет;
		КонецЕсли;
		Если КодДоговора <> СтрокаТабличнойЧасти.КодДоговора И Счетчик > 1 Тогда
			СтрокаТаблицы = ТаблицаЗначений.Добавить();
			СтрокаТаблицы.Контрагент = КонтрагентПред;
			СтрокаТаблицы.Договор = ДоговорПред;
			СтрокаТаблицы.Счет = СчетПред;
			СтрокаТаблицы.Содержание = НСтр("ru = 'Количество счетов для данного договора больше двух.'");
			Счетчик = 0;
		ИначеЕсли КодДоговора <> СтрокаТабличнойЧасти.КодДоговора И Счетчик = 1 Тогда
			Счетчик = 0;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.КодДоговора) Тогда
			КодДоговора = СтрокаТабличнойЧасти.КодДоговора;
		КонецЕсли;
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Владелец КАК Владелец,
		|	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
		|	ДоговорыКонтрагентов.Наименование КАК Наименование
		|ПОМЕСТИТЬ ВременнаяТаблицаДоговоры
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаДоговоры1.Владелец КАК Контрагент,
		|	МАКСИМУМ(ВременнаяТаблицаДоговоры1.Ссылка) КАК Договор,
		|	ВременнаяТаблицаДоговоры1.Наименование КАК НаименованиеДоговора
		|ИЗ
		|	ВременнаяТаблицаДоговоры КАК ВременнаяТаблицаДоговоры1
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаДоговоры КАК ВременнаяТаблицаДоговоры2
		|		ПО ВременнаяТаблицаДоговоры1.Владелец = ВременнаяТаблицаДоговоры2.Владелец
		|			И ВременнаяТаблицаДоговоры1.Ссылка <> ВременнаяТаблицаДоговоры2.Ссылка
		|			И ВременнаяТаблицаДоговоры1.Наименование = ВременнаяТаблицаДоговоры2.Наименование
		|ГДЕ
		|	НЕ ВременнаяТаблицаДоговоры2.Владелец ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаДоговоры1.Владелец,
		|	ВременнаяТаблицаДоговоры1.Наименование";	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл	
		СтрокаТаблицы = ТаблицаЗначений.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
		СтрокаТаблицы.Содержание = НСтр("ru = 'У контрагента есть договоры с одинаковыми наименованиями.'");
	КонецЦикла;
	
	Объект.Проверки.Загрузить(ТаблицаЗначений);
КонецПроцедуры

&НаСервере
Процедура СформироватьНаСервере()
	
	СформироватьОбороткаСчетаДоговоры();
	ЗаполнитьТаблицыОбороткаКонтрагентыОбороткаДоговоры();
	СформироватьРасшифровкуПоСчетам();
	СформироватьРасшифровкаПоСчетамПодотчетников();
	СформироватьАвансы();
	ПроверкаДоговоров();	

КонецПроцедуры

&НаСервере
Процедура СформироватьОбороткаСчетаДоговоры()
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	Запрос = Новый Запрос;	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
		|	ВЫРАЗИТЬ(ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Справочник.Контрагенты).Наименование КАК КонтрагентНаименование,
		|	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Договор,
		|	ВЫРАЗИТЬ(ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Справочник.ДоговорыКонтрагентов).Наименование КАК ДоговорНаименование,
		|	ХозрасчетныйОстаткиИОбороты.Субконто2.Код КАК КодДоговора,
		|	ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДоговора КАК ВидДоговора,
		|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
		|	ХозрасчетныйОстаткиИОбороты.Валюта.Наименование КАК Валюта,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.Валюта = &ВалютаРегламентированногоУчета
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт
		|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокДт
		|	КОНЕЦ КАК СальдоНДт,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.Валюта = &ВалютаРегламентированногоУчета
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт
		|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокКт
		|	КОНЕЦ КАК СальдоНКт,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.Валюта = &ВалютаРегламентированногоУчета
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотДт
		|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаОборотДт
		|	КОНЕЦ КАК ОборотыДт,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.Валюта = &ВалютаРегламентированногоУчета
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотКт
		|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаОборотКт
		|	КОНЕЦ КАК ОборотыКт,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.Валюта = &ВалютаРегламентированногоУчета
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт
		|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокДт
		|	КОНЕЦ КАК СальдоКДт,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.Валюта = &ВалютаРегламентированногоУчета
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт
		|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокКт
		|	КОНЕЦ КАК СальдоККт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, , , Счет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНААвансы), &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	КонтрагентНаименование,
		|	ДоговорНаименование,
		|	Счет";	
	Запрос.УстановитьПараметр("ДатаНачала",		НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания",	КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("ВидыСубконто",	ВидыСубконто);
	Запрос.УстановитьПараметр("Организация",	Объект.Организация);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",	ВалютаРегламентированногоУчета);
	
	Результат 	= Запрос.Выполнить();
	ТЗ			= Результат.Выгрузить();
	Если ВСомах Тогда
		ПараметрыОтбора = Новый Структура("Валюта","KGS");
		ТЗНов = ТЗ.Скопировать(ПараметрыОтбора);
	Иначе
		ТЗНов = ТЗ;
	КонецЕсли;
		
	Объект.ОбороткаСчетаДоговоры.Загрузить(ТЗНов);
КонецПроцедуры

&НаСервере
Процедура СформироватьРасшифровкаПоСчетамПодотчетников()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗакрытиеМесяца.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВременнаяТаблицаДокументЗМ
		|ИЗ
		|	Документ.ЗакрытиеМесяца КАК ЗакрытиеМесяца
		|ГДЕ
		|	ЗакрытиеМесяца.Дата = &ДатаОкончания
		|	И ЗакрытиеМесяца.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйВидыСубконто.Ссылка КАК Счет,
		|	ХозрасчетныйВидыСубконто.Ссылка.Код КАК ПолеСортировкиПоСчету
		|ПОМЕСТИТЬ ВременнаяТаблицаАктивныеСчета
		|ИЗ
		|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
		|ГДЕ
		|	ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СотрудникиОрганизаций)
		|	И ХозрасчетныйВидыСубконто.Ссылка.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
		|	И НЕ ХозрасчетныйВидыСубконто.Ссылка.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйВидыСубконто.Ссылка КАК Счет,
		|	ХозрасчетныйВидыСубконто.Ссылка.Код КАК ПолеСортировкиПоСчету
		|ПОМЕСТИТЬ ВременнаяТаблицаПассивныеСчета
		|ИЗ
		|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
		|ГДЕ
		|	ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СотрудникиОрганизаций)
		|	И ХозрасчетныйВидыСубконто.Ссылка.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
		|	И НЕ ХозрасчетныйВидыСубконто.Ссылка.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаАктивныеСчета.Счет КАК Счет,
		|	ВременнаяТаблицаАктивныеСчета.ПолеСортировкиПоСчету КАК ПолеСортировкиПоСчету
		|ПОМЕСТИТЬ ВременнаяТаблицаСписокСчетов
		|ИЗ
		|	ВременнаяТаблицаАктивныеСчета КАК ВременнаяТаблицаАктивныеСчета
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаПассивныеСчета.Счет,
		|	ВременнаяТаблицаПассивныеСчета.ПолеСортировкиПоСчету
		|ИЗ
		|	ВременнаяТаблицаПассивныеСчета КАК ВременнаяТаблицаПассивныеСчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Справочник.ФизическиеЛица) КАК Подотчетник,
		|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
		|	ХозрасчетныйОстаткиИОбороты.Счет.ПарныйСчет КАК ПарныйСчет,
		|	ЕСТЬNULL(ВременнаяТаблицаСписокСчетов.ПолеСортировкиПоСчету, """") КАК ПолеСортировкиПоСчету,
		|	ХозрасчетныйОстаткиИОбороты.Валюта КАК Валюта,
		|	ВЫБОР
		|		КОГДА &ВСомах
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт
		|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокДт
		|	КОНЕЦ КАК СальдоНДт,
		|	ВЫБОР
		|		КОГДА &ВСомах
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт
		|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокКт
		|	КОНЕЦ КАК СальдоНКт,
		|	ВЫБОР
		|		КОГДА &ВСомах
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотДт
		|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаОборотДт
		|	КОНЕЦ КАК ОборотыДт,
		|	ВЫБОР
		|		КОГДА &ВСомах
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотКт
		|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаОборотКт
		|	КОНЕЦ КАК ОборотыКт,
		|	ВЫБОР
		|		КОГДА &ВСомах
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт
		|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокДт
		|	КОНЕЦ КАК СальдоКДт,
		|	ВЫБОР
		|		КОГДА &ВСомах
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт
		|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокКт
		|	КОНЕЦ КАК СальдоККт
		|ПОМЕСТИТЬ ВременнаяТаблицаОстаткиИОбороты
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
		|			&ДатаНачала,
		|			&ДатаОкончания,
		|			Авто,
		|			,
		|			Счет В
		|				(ВЫБРАТЬ
		|					ВременнаяТаблицаСписокСчетов.Счет КАК Счет
		|				ИЗ
		|					ВременнаяТаблицаСписокСчетов КАК ВременнаяТаблицаСписокСчетов),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СотрудникиОрганизаций),
		|			Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСписокСчетов КАК ВременнаяТаблицаСписокСчетов
		|		ПО ХозрасчетныйОстаткиИОбороты.Счет = ВременнаяТаблицаСписокСчетов.Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаОстаткиИОбороты.Подотчетник КАК Подотчетник,
		|	ВременнаяТаблицаОстаткиИОбороты.Счет КАК Счет,
		|	ВременнаяТаблицаОстаткиИОбороты.ПарныйСчет КАК ПарныйСчет,
		|	ВременнаяТаблицаОстаткиИОбороты.Валюта КАК Валюта,
		|	ВременнаяТаблицаОстаткиИОбороты.СальдоНДт КАК СальдоНачДт,
		|	ВременнаяТаблицаОстаткиИОбороты.СальдоНКт КАК СальдоНачКт,
		|	ВременнаяТаблицаОстаткиИОбороты.ОборотыДт КАК ОборотыДт,
		|	ВременнаяТаблицаОстаткиИОбороты.ОборотыКт КАК ОборотыКт,
		|	ВременнаяТаблицаОстаткиИОбороты.СальдоКДт КАК СальдоКонДт,
		|	ВременнаяТаблицаОстаткиИОбороты.СальдоККт КАК СальдоКонКт
		|ИЗ
		|	ВременнаяТаблицаОстаткиИОбороты КАК ВременнаяТаблицаОстаткиИОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	Подотчетник,
		|	ВременнаяТаблицаОстаткиИОбороты.ПолеСортировкиПоСчету,
		|	Валюта";	
	Запрос.УстановитьПараметр("ВСомах", 		ВСомах);
	Запрос.УстановитьПараметр("ДатаНачала", 	ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", 	ДатаОкончания);
	Запрос.УстановитьПараметр("Организация", 	Объект.Организация);
	
	ТаблицаДанныхПодотчетников = Запрос.Выполнить().Выгрузить();
	
	Отбор = Новый Структура();
	Отбор.Вставить("Подотчетник", 	Неопределено);
	Отбор.Вставить("Счет", 			Неопределено);
	Отбор.Вставить("Валюта", 		Неопределено);
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанныхПодотчетников Цикл
		
		Отбор.Подотчетник 	= СтрокаТаблицы.Подотчетник;
		Отбор.Счет 			= СтрокаТаблицы.Счет;
		Отбор.Валюта 		= СтрокаТаблицы.Валюта;
		
		Если Объект.РасшифровкаПоСчетамПодотчетников.НайтиСтроки(Отбор).Количество() = 0 Тогда
			СтрокаТабличнойЧасти = Объект.РасшифровкаПоСчетамПодотчетников.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТаблицы);
			
			Отбор.Подотчетник 	= СтрокаТаблицы.Подотчетник;
			Отбор.Счет 			= СтрокаТаблицы.ПарныйСчет;
			Отбор.Валюта 		= СтрокаТаблицы.Валюта;
			
			НайденныеСтроки = ТаблицаДанныхПодотчетников.НайтиСтроки(Отбор);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				СтрокаТабличнойЧасти = Объект.РасшифровкаПоСчетамПодотчетников.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, НайденныеСтроки[0]);	
			КонецЕсли;	
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборНаРасшифровкуПоСчетамПодотчетников()

	Элементы.РасшифровкаПоСчетамПодотчетников.ОтборСтрок = Новый ФиксированнаяСтруктура("Подотчетник", ТекущийПодотчетник);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицыОбороткаКонтрагентыОбороткаДоговоры()
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		
	Запрос = Новый Запрос;	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Контрагент,
		|	ВЫРАЗИТЬ(ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Справочник.Контрагенты).Наименование КАК КонтрагентНаименование,
		|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Договор,
		|	ВЫРАЗИТЬ(ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Справочник.ДоговорыКонтрагентов).Наименование КАК ДоговорНаименование,
		|	ХозрасчетныйОстаткиИОбороты.Субконто1.Код КАК КодДоговора,
		|	ХозрасчетныйОстаткиИОбороты.Субконто1.ВидДоговора КАК ВидДоговора,
		|	ХозрасчетныйОстаткиИОбороты.Валюта КАК Валюта,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.Валюта = &ВалютаРегламентированногоУчета
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт
		|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокДт
		|	КОНЕЦ КАК СальдоНДт,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.Валюта = &ВалютаРегламентированногоУчета
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт
		|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокКт
		|	КОНЕЦ КАК СальдоНКт,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.Валюта = &ВалютаРегламентированногоУчета
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотДт
		|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаОборотДт
		|	КОНЕЦ КАК ОборотыДт,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.Валюта = &ВалютаРегламентированногоУчета
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотКт
		|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаОборотКт
		|	КОНЕЦ КАК ОборотыКт,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.Валюта = &ВалютаРегламентированногоУчета
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт
		|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокДт
		|	КОНЕЦ КАК СальдоКДт,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.Валюта = &ВалютаРегламентированногоУчета
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт
		|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокКт
		|	КОНЕЦ КАК СальдоККт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, , , Счет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНААвансы), &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ВСомах
		|				ТОГДА ХозрасчетныйОстаткиИОбороты.Валюта = &ВалютаРегламентированногоУчета
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И (ВЫБОР
		|				КОГДА ХозрасчетныйОстаткиИОбороты.Валюта = &ВалютаРегламентированногоУчета
		|					ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт
		|				ИНАЧЕ ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокДт
		|			КОНЕЦ <> 0
		|			ИЛИ ВЫБОР
		|				КОГДА ХозрасчетныйОстаткиИОбороты.Валюта = &ВалютаРегламентированногоУчета
		|					ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт
		|				ИНАЧЕ ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокКт
		|			КОНЕЦ <> 0
		|			ИЛИ ВЫБОР
		|				КОГДА ХозрасчетныйОстаткиИОбороты.Валюта = &ВалютаРегламентированногоУчета
		|					ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотДт
		|				ИНАЧЕ ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаОборотДт
		|			КОНЕЦ <> 0
		|			ИЛИ ВЫБОР
		|				КОГДА ХозрасчетныйОстаткиИОбороты.Валюта = &ВалютаРегламентированногоУчета
		|					ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотКт
		|				ИНАЧЕ ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаОборотКт
		|			КОНЕЦ <> 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	КонтрагентНаименование,
		|	ДоговорНаименование
		|ИТОГИ ПО
		|	Контрагент";	
	Запрос.УстановитьПараметр("НачалоПериода",					ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода",					КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("ВидыСубконто",					ВидыСубконто);
	Запрос.УстановитьПараметр("Организация",					Объект.Организация);
	Запрос.УстановитьПараметр("ВСомах",							ВСомах);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",	ВалютаРегламентированногоУчета);
	
	ВыборкаКонтрагенты 	= Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	КлючСвязи = 1;
	
	Пока ВыборкаКонтрагенты.Следующий() Цикл		
		СтрокаТабличнойЧасти = Объект.ОбороткаКонтрагенты.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаКонтрагенты);
		СтрокаТабличнойЧасти.КлючСвязи	= КлючСвязи;
		
		ВыборкаДоговоры = ВыборкаКонтрагенты.Выбрать();
		Пока ВыборкаДоговоры.Следующий() Цикл
			СтрокаТабличнойЧасти = Объект.ОбороткаДоговоры.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаДоговоры);
			СтрокаТабличнойЧасти.КлючСвязи = КлючСвязи;
		КонецЦикла;	
		
		КлючСвязи = КлючСвязи + 1;
	КонецЦикла;		
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыКонтрагентыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = Элементы.ГруппаОперации Тогда 
		
		Если НаименованиеПредыдущейСтраницы = "ГруппаДоговоры" Тогда
			СтрокаТабличнойЧасти = Элементы.ОбороткаДоговоры.ТекущиеДанные;
			ДобавитьСчет = Ложь;
		Иначе
			СтрокаТабличнойЧасти = Элементы.ОбороткаСчетаДоговоры.ТекущиеДанные;
			ДобавитьСчет = Истина;
		КонецЕсли;	
			
		Если СтрокаТабличнойЧасти = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Договор", 	СтрокаТабличнойЧасти.Договор);
		ДополнительныеПараметры.Вставить("ОборотКт", 	СтрокаТабличнойЧасти.ОборотыКт);
		ДополнительныеПараметры.Вставить("ОборотДт", 	СтрокаТабличнойЧасти.ОборотыДт);
		ДополнительныеПараметры.Вставить("СальдоНДт", 	СтрокаТабличнойЧасти.СальдоНДт);
		ДополнительныеПараметры.Вставить("СальдоНКт", 	СтрокаТабличнойЧасти.СальдоНКт);
		
		Если ДобавитьСчет Тогда
			ДополнительныеПараметры.Вставить("Счет", 	СтрокаТабличнойЧасти.Счет);	
		КонецЕсли;	

		СформироватьОперации(ДополнительныеПараметры);	
	КонецЕсли;

	Если Элементы.ГруппаСтраницыКонтрагенты.ТекущаяСтраница.Имя = "ГруппаДоговоры" 
		ИЛИ Элементы.ГруппаСтраницыКонтрагенты.ТекущаяСтраница.Имя = "ГруппаСчетДоговор" Тогда
		НаименованиеПредыдущейСтраницы = Элементы.ГруппаСтраницыКонтрагенты.ТекущаяСтраница.Имя;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СформироватьОперации(ДополнительныеПараметры)
		
	Запрос = Новый Запрос;	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Период КАК Дата,
		|	ХозрасчетныйОбороты.Счет КАК СчетДт,
		|	ХозрасчетныйОбороты.КорСчет КАК СчетКт,
		|	ХозрасчетныйОбороты.Регистратор КАК Документ,
		|	ХозрасчетныйОбороты.ВалютнаяСуммаОборотДт КАК ОборотыДт,
		|	0 КАК ОборотыКт
		|ПОМЕСТИТЬ ВременнаяТаблицаОбороты
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Регистратор,
		|			Счет = &Счет,
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры),
		|			Организация = &Организация
		|				И Субконто1 = &Договор,
		|			,
		|			) КАК ХозрасчетныйОбороты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Период,
		|	ХозрасчетныйОбороты.КорСчет,
		|	ХозрасчетныйОбороты.Счет,
		|	ХозрасчетныйОбороты.Регистратор,
		|	0,
		|	ХозрасчетныйОбороты.ВалютнаяСуммаОборотКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Регистратор,
		|			Счет = &Счет,
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры),
		|			Организация = &Организация
		|				И Субконто1 = &Договор,
		|			,
		|			) КАК ХозрасчетныйОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаОбороты.Дата КАК Дата,
		|	ВременнаяТаблицаОбороты.СчетДт КАК СчетДт,
		|	ВременнаяТаблицаОбороты.СчетКт КАК СчетКт,
		|	ВременнаяТаблицаОбороты.Документ КАК Документ,
		|	СУММА(ВременнаяТаблицаОбороты.ОборотыДт) КАК ОборотыДт,
		|	СУММА(ВременнаяТаблицаОбороты.ОборотыКт) КАК ОборотыКт
		|ИЗ
		|	ВременнаяТаблицаОбороты КАК ВременнаяТаблицаОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаОбороты.Дата,
		|	ВременнаяТаблицаОбороты.СчетДт,
		|	ВременнаяТаблицаОбороты.СчетКт,
		|	ВременнаяТаблицаОбороты.Документ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Документ";
	Запрос.УстановитьПараметр("НачалоПериода", 	НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("КонецПериода", 	КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("Организация", 	Объект.Организация);
	Запрос.УстановитьПараметр("Договор", 		ДополнительныеПараметры.Договор);
	
	Если ДополнительныеПараметры.Свойство("Счет") Тогда
		Запрос.УстановитьПараметр("Счет", ДополнительныеПараметры.Счет);
		
		Если ДополнительныеПараметры.Счет.Вид = ВидСчета.Пассивный Тогда
			СальдоТекущее = ДополнительныеПараметры.СальдоНКт - ДополнительныеПараметры.СальдоНДт;
		Иначе
			СальдоТекущее = ДополнительныеПараметры.СальдоНДт - ДополнительныеПараметры.СальдоНКт;
		КонецЕсли;	
			
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Счет = &Счет", "Счет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНААвансы)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КорСчет = &Счет", "КорСчет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНААвансы)");
		
		СальдоТекущее = ДополнительныеПараметры.СальдоНДт - ДополнительныеПараметры.СальдоНКт;
	КонецЕсли;	
	
	Объект.Операции.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаТабличнойЧасти = Объект.Операции.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
		
		СальдоТекущее = СальдоТекущее + Выборка.ОборотыДт - Выборка.ОборотыКт; 
		
		СтрокаТабличнойЧасти.СальдоТекущее = СальдоТекущее;
	КонецЦикла;		
КонецПроцедуры

&НаСервере
Процедура СформироватьАвансы()
	
	Объект.Авансы.Очистить();
	Объект.ОперацииАвансов.Очистить();
	
	// 1. Данные из РН "АвансыДоотгрузка" с отбором по организации (временная таблица).
	// 2. Документы аванса с суммой и датой из 1 пакета.
	// 3. Все данные из 1 пакета.
	// 4. Документы аванса, которые имеют остатки.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АвансыДоотгрузка.Период КАК Период,
		|	АвансыДоотгрузка.ДокументА КАК ДокументАванса,
		|	АвансыДоотгрузка.Сумма КАК Сумма,
		|	АвансыДоотгрузка.ДокументОтгрузки КАК ДокументОтгрузки,
		|	АвансыДоотгрузка.НомерСтроки КАК НомерСтроки,
		|	АвансыДоотгрузка.Контрагент КАК Контрагент,
		|	АвансыДоотгрузка.Договор КАК Договор
		|ПОМЕСТИТЬ ВременнаяТаблицаАвансыДоотгрузка
		|ИЗ
		|	РегистрНакопления.АвансыДоотгрузкаРасшифровка КАК АвансыДоотгрузка
		|ГДЕ
		|	АвансыДоотгрузка.Организация = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаАвансыДоотгрузка.ДокументАванса КАК Документ,
		|	МАКСИМУМ(ВременнаяТаблицаАвансыДоотгрузка.Период) КАК Дата,
		|	МАКСИМУМ(ВременнаяТаблицаАвансыДоотгрузка.Сумма) КАК Сумма,
		|	МАКСИМУМ(ВременнаяТаблицаАвансыДоотгрузка.Контрагент) КАК Контрагент,
		|	МАКСИМУМ(ВременнаяТаблицаАвансыДоотгрузка.Договор) КАК Договор
		|ИЗ
		|	ВременнаяТаблицаАвансыДоотгрузка КАК ВременнаяТаблицаАвансыДоотгрузка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаАвансыДоотгрузка.ДокументАванса
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаАвансыДоотгрузка.ДокументАванса КАК ДокументАванса,
		|	ВременнаяТаблицаАвансыДоотгрузка.Период КАК Дата,
		|	ВременнаяТаблицаАвансыДоотгрузка.Сумма КАК Сумма,
		|	ВременнаяТаблицаАвансыДоотгрузка.ДокументОтгрузки КАК ДокументОтгрузки,
		|	ВременнаяТаблицаАвансыДоотгрузка.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВременнаяТаблицаАвансыДоотгрузка КАК ВременнаяТаблицаАвансыДоотгрузка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументАванса,
		|	Дата,
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АвансыДоотгрузкаОстатки.ДокументА КАК ДокументАванса
		|ИЗ
		|	РегистрНакопления.АвансыДоотгрузка.Остатки(, Организация = &Организация) КАК АвансыДоотгрузкаОстатки";	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаАвансы = МассивРезультатов[1].Выбрать();
	
	ВыборкаРасшифровка = МассивРезультатов[2].Выбрать();
	
	ТаблицаНепогашенныхАвансов = МассивРезультатов[3].Выгрузить();
	ТаблицаНепогашенныхАвансов.Индексы.Добавить("ДокументАванса");
	
	КлючСвязи = 1;
	
	Пока ВыборкаАвансы.Следующий() Цикл	
		// Создание строки в ТЧ "Авансы".
		СтрокаТабличнойЧасти = Объект.Авансы.Добавить();	
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаАвансы);
		СтрокаТабличнойЧасти.КлючСвязи = КлючСвязи;
		
		// Проверка является ли данный документ аванса погашенным.
		РезультатПоиска = ТаблицаНепогашенныхАвансов.Найти(ВыборкаАвансы.Документ, "ДокументАванса");
		
		// Если результат поиска не пустой то устанавливается в "Истина" реквизит "Неотгружен" строки ТЧ "Авансы".
		Если РезультатПоиска <> Неопределено Тогда
			СтрокаТабличнойЧасти.Неотгружен = Истина;	
		КонецЕсли;
		
		// Создание строки в ТЧ "ОперацииАвансов".
		СтрокаТабличнойЧасти = Объект.ОперацииАвансов.Добавить();
		
		СтрокаТабличнойЧасти.Документ		= ВыборкаАвансы.Документ;
		СтрокаТабличнойЧасти.Дата 			= ВыборкаАвансы.Дата;
		СтрокаТабличнойЧасти.СуммаОстаток 	= ВыборкаАвансы.Сумма;
		СтрокаТабличнойЧасти.Уровень 		= 1;
		СтрокаТабличнойЧасти.КлючСвязи 		= КлючСвязи;
		
		КлючСвязи = КлючСвязи + 1;
	КонецЦикла;

	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("Документ", Неопределено);	
	
	ТекущийАванс 	 = Неопределено;
	ТекущаяСумма 	 = 0;
	ТекущийКлючСвязи = 0;
	
	Пока ВыборкаРасшифровка.Следующий() Цикл
		
		// Если документа отгрузки нет, то это строка образования самого аванса,
		// а данная строка уже создана в предшествующем цикле.
		Если ВыборкаРасшифровка.ДокументОтгрузки = Неопределено Тогда
			Продолжить;			
		КонецЕсли;	
		
		// Поиск строки с указанным документом аванса, чтобы получить
		// сумму аванса и ключ связи.
		Если ТекущийАванс <> ВыборкаРасшифровка.ДокументАванса Тогда
			СтруктураПоиска.Документ = ВыборкаРасшифровка.ДокументАванса;	
			МассивСтрок = Объект.ОперацииАвансов.НайтиСтроки(СтруктураПоиска);	
			СтрокаМассива  = МассивСтрок[0];
			
			ТекущийАванс 	 = СтрокаМассива.Документ;
			ТекущаяСумма 	 = СтрокаМассива.СуммаОстаток;
			ТекущийКлючСвязи = СтрокаМассива.КлючСвязи;
		КонецЕсли;
		
		СтрокаТабличнойЧасти = Объект.ОперацииАвансов.Добавить();
		СтрокаТабличнойЧасти.Дата 				= ВыборкаРасшифровка.Дата; 
		СтрокаТабличнойЧасти.Документ		 	= ВыборкаРасшифровка.ДокументОтгрузки;
		СтрокаТабличнойЧасти.СуммаОтгрузка 		= ВыборкаРасшифровка.Сумма;
		СтрокаТабличнойЧасти.СуммаОстаток 		= ТекущаяСумма - ВыборкаРасшифровка.Сумма;		
		СтрокаТабличнойЧасти.Уровень 			= 2;
		СтрокаТабличнойЧасти.КлючСвязи 			= ТекущийКлючСвязи;
		
		ТекущаяСумма = СтрокаТабличнойЧасти.СуммаОстаток;
	КонецЦикла;
	
	Объект.ОперацииАвансов.Сортировать("Уровень");
КонецПроцедуры

&НаСервере
Функция ПолучитьРасшифровкуПоДокументам(Контрагент)

	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	Запрос = Новый Запрос;	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Регистратор КАК Документ,
		|	ХозрасчетныйОбороты.Субконто1 КАК Контрагент,
		|	ХозрасчетныйОбороты.Субконто2 КАК Договор
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&ДатаНачала,
		|			&ДатаОкончания,
		|			Авто,
		|			Счет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНаАвансы),
		|			&ВидыСубконто,
		|			Организация = &Организация
		|				И Субконто1 = &Контрагент,
		|			,
		|			) КАК ХозрасчетныйОбороты";	
	Запрос.УстановитьПараметр("ДатаНачала",		НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания",	КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("ВидыСубконто",	ВидыСубконто);
	Запрос.УстановитьПараметр("Организация",	Объект.Организация);
	Запрос.УстановитьПараметр("Контрагент",		Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Массив = Новый Массив();
	
	Пока Выборка.Следующий() Цикл
	
		Если Выборка.Контрагент <> Выборка.Договор.Владелец Тогда
			
			Массив.Добавить(Выборка.Документ);
			
		КонецЕсли;	
	
	КонецЦикла;
	
	Возврат Массив;
КонецФункции // ПолучитьРасшифровкуПоДокументам()

&НаКлиенте
Процедура УстановитьОтборНаАвансы()
	
	СтруктураОтбора = Неопределено;
	СтруктураОтбораНайти = Неопределено;
	
	// Отбор по контрагенту, договору и галочке "Показывать все авансы".
	Если ТекущийКонтрагент <> ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка")
		И ТекущийДоговор <> ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка")
		И НЕ Объект.ПоказатьВсеАвансы Тогда
		
		СтруктураОтбора = Новый ФиксированнаяСтруктура("Неотгружен, Контрагент, Договор", Истина, ТекущийКонтрагент, ТекущийДоговор);
		СтруктураОтбораНайти = Новый Структура("Неотгружен, Контрагент, Договор", Истина, ТекущийКонтрагент, ТекущийДоговор);
		
	// Отбор по контрагенту и галочке "Показывать все авансы".
	ИначеЕсли ТекущийКонтрагент <> ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка")
		И НЕ Объект.ПоказатьВсеАвансы Тогда
		
		СтруктураОтбора = Новый ФиксированнаяСтруктура("Неотгружен, Контрагент", Истина, ТекущийКонтрагент);
		СтруктураОтбораНайти = Новый Структура("Неотгружен, Контрагент", Истина, ТекущийКонтрагент);
		
	// Отбор по договору и галочке "Показывать все авансы".
	ИначеЕсли ТекущийДоговор <> ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка")
		И НЕ Объект.ПоказатьВсеАвансы Тогда	
		
		СтруктураОтбора = Новый ФиксированнаяСтруктура("Неотгружен, Договор", Истина, ТекущийДоговор);
		СтруктураОтбораНайти = Новый Структура("Неотгружен, Договор", Истина, ТекущийДоговор);
		
	// Отбор по контрагенту и договору.
	ИначеЕсли ТекущийКонтрагент <> ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка")
		И ТекущийДоговор <> ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка") Тогда
		
		СтруктураОтбора = Новый ФиксированнаяСтруктура("Контрагент, Договор", ТекущийКонтрагент, ТекущийДоговор);
		СтруктураОтбораНайти = Новый Структура("Контрагент, Договор", ТекущийКонтрагент, ТекущийДоговор);
		
	// Отбор по контрагенту.
	ИначеЕсли ТекущийКонтрагент <> ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка") Тогда
		
		СтруктураОтбора = Новый ФиксированнаяСтруктура("Контрагент", ТекущийКонтрагент);
		СтруктураОтбораНайти = Новый Структура("Контрагент", ТекущийКонтрагент);
		
	// Отбор по договору.
	ИначеЕсли ТекущийДоговор <> ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка") Тогда
		
		СтруктураОтбора = Новый ФиксированнаяСтруктура("Договор", ТекущийДоговор);
		СтруктураОтбораНайти = Новый Структура("Договор", ТекущийДоговор);
		
	// Устанавливаем отбор по пустому контрагенту, чтобы не отображалась ни одна строка.
	Иначе
		СтруктураОтбора = Новый ФиксированнаяСтруктура("Контрагент", ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
		СтруктураОтбораНайти = Новый Структура("Контрагент", ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
	КонецЕсли;
	
	Элементы.Авансы.ОтборСтрок = СтруктураОтбора;
	
	Если Объект.Авансы.НайтиСтроки(СтруктураОтбораНайти).Количество() = 0 Тогда
		Элементы.ОперацииАвансов.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", 0);	
	КонецЕсли;	
КонецПроцедуры //УстановитьОтборНаПодчиненнуюТабличнуюЧасть()

&НаКлиенте
Процедура УстановитьОтборНаРасшифровкуДоговора()

	СтруктураОтбора = Неопределено;
	
	Если ТекущийДоговор <> ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка") Тогда	
		СтруктураОтбора = Новый ФиксированнаяСтруктура("Договор", ТекущийДоговор);
	Иначе
		СтруктураОтбора = Новый ФиксированнаяСтруктура("Договор", ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка"));
	КонецЕсли;
	
	Элементы.РасшифровкаПоСчетам.ОтборСтрок = СтруктураОтбора;
	Элементы.РасшифровкаДоЗакрытияМесяца.ОтборСтрок = СтруктураОтбора;
	
	ПроверитьПарныеСчета();
	
КонецПроцедуры

// Проверка счетов табличных частей на отсутсвие пары
//
&НаСервере
Процедура ПроверитьПарныеСчета(ПоПодотчетникам = Ложь)

	Если ПоПодотчетникам Тогда
		
		Элементы.ПредупреждениеПарныеСчетаПоПодотчетникам.Видимость = ОтборСписокСчетовПодотчетника.Количество() = 1;
		
	Иначе
		ЕстьОшибка = Ложь;
		
		СтруктураОтбора = Неопределено;
		
		СтруктураОтбора = Новый Структура("Договор", ТекущийДоговор);
		
		РасшифровкаДоЗакрытияМесяца = Объект.РасшифровкаДоЗакрытияМесяца.НайтиСтроки(СтруктураОтбора);
		Если РасшифровкаДоЗакрытияМесяца.Количество() = 2 Тогда
			Счет = Неопределено;
			Для Каждого СтрокаТабличнойЧасти Из РасшифровкаДоЗакрытияМесяца Цикл
				Если Счет = Неопределено Тогда
					Счет = СтрокаТабличнойЧасти.Счет;
				ИначеЕсли Счет <> СтрокаТабличнойЧасти.Счет.ПарныйСчет Тогда
					ЕстьОшибка = Истина;	
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли РасшифровкаДоЗакрытияМесяца.Количество() > 2 Тогда 
			ЕстьОшибка = Истина;
		КонецЕсли;
		
		РасшифровкаПоСчетам = Объект.РасшифровкаПоСчетам.НайтиСтроки(СтруктураОтбора);
		Если РасшифровкаПоСчетам.Количество() = 2 Тогда
			Счет = Неопределено;
			Для Каждого СтрокаТабличнойЧасти Из РасшифровкаПоСчетам Цикл
				Если Счет = Неопределено Тогда
					Счет = СтрокаТабличнойЧасти.Счет;
				ИначеЕсли Счет <> СтрокаТабличнойЧасти.Счет.ПарныйСчет Тогда
					ЕстьОшибка = Истина;	
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли РасшифровкаПоСчетам.Количество() > 2 Тогда 
			ЕстьОшибка = Истина;
		КонецЕсли;
		
		Элементы.ПредупреждениеПарныеСчета.Видимость = ЕстьОшибка;
	КонецЕсли;
КонецПроцедуры // ПроверитьСчетаНаПару()

&НаКлиенте
Процедура УстановитьЗаголовокОтборКонтрагентДоговор()

	ТекстЗаголовка = "";
	
	Если ТекущийКонтрагент <> ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка")
		И ТекущийДоговор <> ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка") Тогда
		ТекстЗаголовка = СтрШаблон(НСтр("ru = 'Контрагент: %1; Договор: %2'"), ТекущийКонтрагент, ТекущийДоговор);
		
	ИначеЕсли ТекущийКонтрагент <> ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка") Тогда
		ТекстЗаголовка = СтрШаблон(НСтр("ru = 'Контрагент: %1'"), ТекущийКонтрагент);	
	
	ИначеЕсли ТекущийДоговор <> ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка") Тогда		
		ТекстЗаголовка = СтрШаблон(НСтр("ru = 'Договор: %1'"), ТекущийДоговор);					
	КонецЕсли;

	ОтборКонтрагентДоговор = ТекстЗаголовка;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокЗакрывающаяПроводка()

	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Договор", ТекущийДоговор);
	
	МассивСтрок = Объект.ЗакрывающиеПроводки.НайтиСтроки(СтруктураОтбора);
	
	Если Месяц(ДатаНачала) = Месяц(ДатаОкончания) И МассивСтрок.Количество() > 0 Тогда
		СтрокаМассива = МассивСтрок[0];
		
		ТекстЗаголовка = СтрШаблон(НСтр("ru = 'Закрывающая проводка: %1 - %2 на сумму %3'"),
									СтрокаМассива.Счет, 
									СтрокаМассива.КорСчет, 
									СтрокаМассива.Сумма);
						
		ЗакрывающаяПроводка = ТекстЗаголовка;
	Иначе
		ЗакрывающаяПроводка = "";
	КонецЕсли;	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МассивСчетовДляОтбора(Счет)
	МассивСчетов = Новый Массив;
	Если ЗначениеЗаполнено(Счет) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	&Счет КАК Счет
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВЫРАЗИТЬ(&Счет КАК ПланСчетов.Хозрасчетный).ПарныйСчет
			|ГДЕ
			|	НЕ ВЫРАЗИТЬ(&Счет КАК ПланСчетов.Хозрасчетный).ПарныйСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)";
		
		Запрос.УстановитьПараметр("Счет", Счет);
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			МассивСчетов.Добавить(ВыборкаДетальныеЗаписи.Счет);
		КонецЦикла;

	КонецЕсли;
	
	Возврат МассивСчетов;
	
КонецФункции 

&НаКлиенте
Процедура УстановитьОтборы()
	
	Если Объект.ПоПодотчетникам Тогда
		УстановитьПараметрыДинамическихСписков();
		ПроверитьПарныеСчета(Истина);
	Иначе
		УстановитьОтборНаАвансы();
		УстановитьОтборНаРасшифровкуДоговора();
	КонецЕсли;	
КонецПроцедуры // УстановитьОтборы()

&НаКлиенте
Процедура УстановитьОтборДинамическихСписковПоПодотчетникам()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРасшифровкаДоЗакрытияМесяцаПодотчетники, "Подотчетник", ТекущийПодотчетник,,,ЗначениеЗаполнено(ТекущийПодотчетник));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРасшифровкаДоЗакрытияМесяцаПодотчетники, "Счет", ОтборСписокСчетовПодотчетника,ВидСравненияКомпоновкиДанных.ВСписке,,ОтборСписокСчетовПодотчетника.Количество()); 
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРасшифровкаПослеЗакрытияМесяцаПодотчетники, "Подотчетник", ТекущийПодотчетник,,,ЗначениеЗаполнено(ТекущийПодотчетник));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРасшифровкаПослеЗакрытияМесяцаПодотчетники, "Счет", ОтборСписокСчетовПодотчетника,ВидСравненияКомпоновкиДанных.ВСписке,,ОтборСписокСчетовПодотчетника.Количество()); 
КонецПроцедуры // 

// Процедура установки значений параметров динамических списков.
//
// Параметры:
//	ИзменилосьОС - Булево - проверка изменения значения реквизита "ОсновноеСредство".
//
&НаСервере
Процедура УстановитьПараметрыДинамическихСписков()
	
	// СписокПодотчетники
	СписокПодотчетники.Параметры.УстановитьЗначениеПараметра("ДатаНачала", НачалоДня(ДатаНачала));
	СписокПодотчетники.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", КонецДня(ДатаОкончания));
	СписокПодотчетники.Параметры.УстановитьЗначениеПараметра("Организация", Объект.Организация);	
	
	// СписокРасшифровкаПослеЗакрытияМесяцаПодотчетники
	СписокРасшифровкаПослеЗакрытияМесяцаПодотчетники.Параметры.УстановитьЗначениеПараметра("ДатаНачала", НачалоДня(ДатаНачала));
	СписокРасшифровкаПослеЗакрытияМесяцаПодотчетники.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", КонецДня(ДатаОкончания));
	СписокРасшифровкаПослеЗакрытияМесяцаПодотчетники.Параметры.УстановитьЗначениеПараметра("Организация", Объект.Организация);
	СписокРасшифровкаПослеЗакрытияМесяцаПодотчетники.Параметры.УстановитьЗначениеПараметра("ВСомах", ВСомах);

	// СписокРасшифровкаДоЗакрытияМесяцаПодотчетники
	СписокРасшифровкаДоЗакрытияМесяцаПодотчетники.Параметры.УстановитьЗначениеПараметра("ДатаНачала", НачалоДня(ДатаНачала));
	СписокРасшифровкаДоЗакрытияМесяцаПодотчетники.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", КонецДня(ДатаОкончания));
	СписокРасшифровкаДоЗакрытияМесяцаПодотчетники.Параметры.УстановитьЗначениеПараметра("Организация", Объект.Организация);
	СписокРасшифровкаДоЗакрытияМесяцаПодотчетники.Параметры.УстановитьЗначениеПараметра("ВСомах", ВСомах);
		
КонецПроцедуры

&НаСервере
Процедура СФормироватьСписокДокументовПоПодотчетнику()	
	// Заполнение ТЧ ОперацииПодотчетника
	Объект.ОперацииПодотчетника.Очистить();
	
	// Сальдо на начало
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&Дата,
		|			Счет В (&МассивСчетов),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СотрудникиОрганизаций),
		|			Организация = &Организация
		|				И Субконто1 = &Подотчетник) КАК ХозрасчетныйОстатки";
	
	Запрос.УстановитьПараметр("Дата", 			НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("МассивСчетов", 	ОтборСписокСчетовПодотчетника.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("Организация", 	Объект.Организация);
	Запрос.УстановитьПараметр("Подотчетник", 	ТекущийПодотчетник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СальдоНаНачало = 0;
	СальдоНаКонец = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СальдоНаНачало = ВыборкаДетальныеЗаписи.СуммаОстаток;
	КонецЦикла;
	
	СтрокаТабличнойЧасти = Объект.ОперацииПодотчетника.Добавить();
	СтрокаТабличнойЧасти.Документ = "Сальдо на начало";
	Если СальдоНаНачало < 0 Тогда
		СтрокаТабличнойЧасти.ОборотыКтСом = -СальдоНаНачало;
	ИначеЕсли СальдоНаНачало > 0 Тогда
		СтрокаТабличнойЧасти.ОборотыДтСом = СальдоНаНачало;
	КонецЕсли;
	СальдоНаКонец = СальдоНаНачало;
	
	// Обороты
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОборотыДтКт.ПериодСекунда КАК Дата,
		|	ХозрасчетныйОборотыДтКт.СчетДт КАК СчетДт,
		|	ХозрасчетныйОборотыДтКт.СчетКт КАК СчетКт,
		|	ХозрасчетныйОборотыДтКт.Регистратор КАК Документ,
		|	ХозрасчетныйОборотыДтКт.ВалютнаяСуммаОборотДт КАК ОборотыДтВал,
		|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК ОборотыДтСом,
		//|	ХозрасчетныйОборотыДтКт.ВалютнаяСуммаОборотКт КАК ОборотыКтВал,
		//|	ВЫБОР
		//|		КОГДА ХозрасчетныйОборотыДтКт.СуммаОборот < 0
		//|			ТОГДА -ХозрасчетныйОборотыДтКт.СуммаОборот
		//|		ИНАЧЕ 0
		//|	КОНЕЦ КАК ОборотыКтСом
		|	0 КАК ОборотыКтВал,
		|	0 КАК ОборотыКтСом		
		|ПОМЕСТИТЬ ВременнаяТаблицаПроводки
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		|			&ДатаНачала,
		|			&ДатаОкончания,
		|			Авто,
		|			СчетДт В (&МассивСчетов),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СотрудникиОрганизаций),
		|			НЕ СчетКт В (&МассивСчетов),
		|			,
		|			Организация = &Организация
		|				И СубконтоДт1 = &Подотчетник) КАК ХозрасчетныйОборотыДтКт
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОборотыДтКт.ПериодСекунда,
		|	ХозрасчетныйОборотыДтКт.СчетДт,
		|	ХозрасчетныйОборотыДтКт.СчетКт,
		|	ХозрасчетныйОборотыДтКт.Регистратор,
		//|	ХозрасчетныйОборотыДтКт.ВалютнаяСуммаОборотДт,
		//|	ВЫБОР
		//|		КОГДА ХозрасчетныйОборотыДтКт.СуммаОборот > 0
		//|			ТОГДА ХозрасчетныйОборотыДтКт.СуммаОборот
		//|		ИНАЧЕ 0
		//|	КОНЕЦ,
		|	0,
		|	0,		
		|	ХозрасчетныйОборотыДтКт.ВалютнаяСуммаОборотКт,
		|	ХозрасчетныйОборотыДтКт.СуммаОборот
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		|			&ДатаНачала,
		|			&ДатаОкончания,
		|			Авто,
		|			НЕ СчетДт В (&МассивСчетов),
		|			,
		|			СчетКт В (&МассивСчетов),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СотрудникиОрганизаций),
		|			Организация = &Организация
		|				И СубконтоКт1 = &Подотчетник) КАК ХозрасчетныйОборотыДтКт
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаПроводки.Дата КАК Дата,
		|	ВременнаяТаблицаПроводки.СчетДт КАК СчетДт,
		|	ВременнаяТаблицаПроводки.СчетКт КАК СчетКт,
		|	ВременнаяТаблицаПроводки.Документ КАК Документ,
		|	ВременнаяТаблицаПроводки.ОборотыДтВал КАК ОборотыДтВал,
		|	ВременнаяТаблицаПроводки.ОборотыДтСом КАК ОборотыДтСом,
		|	ВременнаяТаблицаПроводки.ОборотыКтВал КАК ОборотыКтВал,
		|	ВременнаяТаблицаПроводки.ОборотыКтСом КАК ОборотыКтСом
		|ИЗ
		|	ВременнаяТаблицаПроводки КАК ВременнаяТаблицаПроводки
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	СчетДт,
		|	СчетКт";
	
	Запрос.УстановитьПараметр("ДатаНачала", 	НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания", 	КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("МассивСчетов", 	ОтборСписокСчетовПодотчетника.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("Организация", 	Объект.Организация);
	Запрос.УстановитьПараметр("Подотчетник", 	ТекущийПодотчетник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрокаТабличнойЧасти = Объект.ОперацииПодотчетника.Добавить();	
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаДетальныеЗаписи);
		СальдоНаКонец = СальдоНаКонец + (ВыборкаДетальныеЗаписи.ОборотыДтСом - ВыборкаДетальныеЗаписи.ОборотыКтСом); 
		СтрокаТабличнойЧасти.СальдоТек = СальдоНаКонец;
	КонецЦикла;
	
	// Сальдо на конец
	СтрокаТабличнойЧасти = Объект.ОперацииПодотчетника.Добавить();
	СтрокаТабличнойЧасти.Документ = "Сальдо на конец";
	Если СальдоНаКонец < 0 Тогда
		СтрокаТабличнойЧасти.ОборотыКтСом = -СальдоНаКонец;
	ИначеЕсли СальдоНаНачало > 0 Тогда
		СтрокаТабличнойЧасти.ОборотыДтСом = СальдоНаКонец;
	КонецЕсли;
	
	
	
	
	
	

	

КонецПроцедуры // СФоримроватьСписокДокументовПоПодотчетнику()

&НаКлиенте
Процедура ПолучитьСписокСчетовПодотчетника()
	ТекущиеДанныеРасшифровкаПоСчетамПодотчетников = Элементы.РасшифровкаПоСчетамПодотчетников.ТекущиеДанные;
	Если ТекущиеДанныеРасшифровкаПоСчетамПодотчетников = Неопределено Тогда
	 	Счет = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка");
	Иначе	
	    Счет = ТекущиеДанныеРасшифровкаПоСчетамПодотчетников.Счет;
	КонецЕсли;	
	МассивСчетов = МассивСчетовДляОтбора(Счет);
	ОтборСписокСчетовПодотчетника.ЗагрузитьЗначения(МассивСчетов);
КонецПроцедуры

#КонецОбласти
