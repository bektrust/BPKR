#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Дата = ТекущаяДатаСеанса();
	ДатаНачала = НачалоМесяца(Дата);
	ДатаОкончания = КонецМесяца(Дата);

	ОсновнойТекстЗапросаСпискаТМЗ_Главный = СписокТМЗ_Главный.ТекстЗапроса;
	ОсновнойТекстЗапросаСпискаМБП_Главный = СписокМБП_Главный.ТекстЗапроса;
	ОтборОрганизация = ПолучитьОрганизациюПоУмолчанию();
	
	Если Параметры.КлючНазначенияИспользования = "ЗапускМонитораИзДокумента" Тогда
		ОтборНоменклатура = Параметры.Номенклатура;
		ОтборОрганизация = Параметры.Организация;
		СформироватьТабличныйДокументИзДокумента(Параметры.СтруктураДанных);
		ЗапускМонитораИзДокумента = Истина;	
	КонецЕсли;
	
	ОтборПартионныйУчет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаНачала, ОтборОрганизация).СпособОценкиТМЗ = Перечисления.СпособыОценки.ФИФО;
	
	Если ОтборПартионныйУчет Тогда
		Элементы.ДекорацияПартионныйУчет.Заголовок = НСтр("ru = 'Учет по ФИФО'");
	Иначе
		Элементы.ДекорацияПартионныйУчет.Заголовок = НСтр("ru = 'Учет по СВЦ'");
	КонецЕсли;
	
	УстановитьУсловноеОформление();

КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Первый раз заполняется список выбора для того, чтобы без ошибок отработало восстановление настроек.
	ЗаполнитьСписокВыбора();
	
	Если Не ЗапускМонитораИзДокумента Тогда
		ВосстановитьНастройки();		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПервыйУровень) И НЕ ЗначениеЗаполнено(ВторойУровень) Тогда
		
		ПервыйУровень = "Счет";	
		ВторойУровень = "Склад";
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ПервыйУровень) И ЗначениеЗаполнено(ВторойУровень) Тогда
		
		Если ВторойУровень = "Счет" Тогда
			ПервыйУровень = "Склад";
		Иначе
			ПервыйУровень = "Счет";
		КонецЕсли;	
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ВторойУровень) И ЗначениеЗаполнено(ПервыйУровень) Тогда	
		
		Если ПервыйУровень = "Счет" Тогда
			ВторойУровень = "Склад";
		Иначе
			ВторойУровень = "Счет";
		КонецЕсли;
	КонецЕсли;	
	
	// Второй раз заполняется список выбора для того, чтобы ограничить выбор, после восстановления значений из настроек.
	ЗаполнитьСписокВыбора();
	УстановитьЗначенияГруппировок();
	УстановитьОтборыСписокТМЗ_Главный();
	УстановитьОтборыСписокМБП_Главный();
	УстановитьОтборыСписокДокументов();
	УстановитьОтборыСписокДокументовМБП();
	УстановитьПараметрыДинамическихСписков();
	ЗаполнитьСписокДокументов();
	ЗаполнитьСписокДокументовМБП();
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПередЗакрытием.
//
&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ ЗавершениеРаботы Тогда
		СохранитьНастройки();	
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	ДатаОкончания = КонецМесяца(ДатаНачала);
	
	КорректностьДат = ПроверитьКорректностьУказаныхДат();	
	
	Если КорректностьДат Тогда
		ОтборПартионныйУчет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаНачала, ОтборОрганизация).СпособОценкиТМЗ = ПредопределенноеЗначение("Перечисление.СпособыОценки.ФИФО");
		
		Если ОтборПартионныйУчет Тогда
			Элементы.ДекорацияПартионныйУчет.Заголовок = НСтр("ru = 'Ведется партионный учет'");
		Иначе
			Элементы.ДекорацияПартионныйУчет.Заголовок = НСтр("ru = 'Ведется учет по средней'");
		КонецЕсли;
		
		УстановитьВидимостьДоступностьЭлементов();
		
		УстановитьПараметрыДинамическихСписков(Истина);
		ЗаполнитьСписокДокументов();
		ЗаполнитьСписокДокументовМБП();
		УстановитьОтборыСписокДокументов();
		УстановитьОтборыСписокДокументовМБП();
		
		Если ЗначениеЗаполнено(ПервыйУровень) И ЗначениеЗаполнено(ВторойУровень) Тогда
			ЗаполнитьСписокОбороты();
			ЗаполнитьРасшифровкуОборотов();
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	КорректностьДат = ПроверитьКорректностьУказаныхДат();	
	
	Если КорректностьДат Тогда
		УстановитьПараметрыДинамическихСписков(Истина);
		ЗаполнитьСписокДокументов();
		ЗаполнитьСписокДокументовМБП();
		Если ЗначениеЗаполнено(ПервыйУровень) И ЗначениеЗаполнено(ВторойУровень) Тогда
			ЗаполнитьСписокОбороты();
			ЗаполнитьРасшифровкуОборотов();
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьПоПартиямПриИзменении(Элемент)
	УстановитьПараметрыДинамическихСписков();
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ПервыйУровеньПриИзменении(Элемент)
	ЗаполнитьСписокВыбора();
		
	Если ПервыйУровень = "Счет" И НЕ ЗначениеЗаполнено(ВторойУровень) Тогда
		ВторойУровень = "Склад";
		
	ИначеЕсли ПервыйУровень <> "Счет" И ЗначениеЗаполнено(ПервыйУровень) И НЕ ЗначениеЗаполнено(ВторойУровень) Тогда
		ВторойУровень = "Счет";
	КонецЕсли;	
	
	ЗаполнитьСписокВыбора();
	
	Если ЗначениеЗаполнено(ПервыйУровень) И ЗначениеЗаполнено(ВторойУровень) Тогда
		ЗаполнитьСписокОбороты();
		ЗаполнитьРасшифровкуОборотов();
	Иначе
		ОчиститьСписокОборотыИРасшифровку();
	КонецЕсли;
	
	УстановитьЗначенияГруппировок();
	УстановитьОтборыСписокТМЗ_Главный();
	УстановитьОтборыСписокМБП_Главный();
	УстановитьОтборыСписокДокументов();
	УстановитьОтборыСписокДокументовМБП();
	УстановитьПараметрыДинамическихСписков();
	ЗаполнитьСписокДокументов();
	ЗаполнитьСписокДокументовМБП();
	УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВторойУровеньПриИзменении(Элемент)
	ЗаполнитьСписокВыбора();
	
	Если ВторойУровень = "Счет" И НЕ ЗначениеЗаполнено(ПервыйУровень) Тогда
		ПервыйУровень = "Склад";
		
	ИначеЕсли ВторойУровень <> "Счет" И ЗначениеЗаполнено(ВторойУровень) И НЕ ЗначениеЗаполнено(ПервыйУровень) Тогда
		ПервыйУровень = "Счет";
	КонецЕсли;
	
	ЗаполнитьСписокВыбора();
	
	Если ЗначениеЗаполнено(ПервыйУровень) И ЗначениеЗаполнено(ВторойУровень) Тогда
		ЗаполнитьСписокОбороты();
		ЗаполнитьРасшифровкуОборотов();
	Иначе
		ОчиститьСписокОборотыИРасшифровку();
	КонецЕсли;
	
	УстановитьЗначенияГруппировок();
	УстановитьОтборыСписокТМЗ_Главный();
	УстановитьОтборыСписокМБП_Главный();
	УстановитьОтборыСписокДокументов();
	УстановитьОтборыСписокДокументовМБП();
	УстановитьПараметрыДинамическихСписков();
	ЗаполнитьСписокДокументов();
	ЗаполнитьСписокДокументовМБП();
	УстановитьВидимостьДоступностьЭлементов();

КонецПроцедуры

&НаКлиенте
Процедура ТретийУровеньПриИзменении(Элемент)
	ЗаполнитьСписокВыбора();
	
	Если ВторойУровень = "Счет" И НЕ ЗначениеЗаполнено(ПервыйУровень) Тогда
		ПервыйУровень = "Склад";
		
	ИначеЕсли ВторойУровень <> "Счет" И ЗначениеЗаполнено(ВторойУровень) И НЕ ЗначениеЗаполнено(ПервыйУровень) Тогда
		ПервыйУровень = "Счет";
	КонецЕсли;
	
	ЗаполнитьСписокВыбора();
	
	Если ЗначениеЗаполнено(ПервыйУровень) И ЗначениеЗаполнено(ВторойУровень) Тогда
		ЗаполнитьСписокОбороты();
		ЗаполнитьРасшифровкуОборотов();
	Иначе
		ОчиститьСписокОборотыИРасшифровку();
	КонецЕсли;
	
	УстановитьЗначенияГруппировок();
	УстановитьОтборыСписокТМЗ_Главный();
	УстановитьОтборыСписокМБП_Главный();
	УстановитьОтборыСписокДокументов();
	УстановитьОтборыСписокДокументовМБП();
	УстановитьПараметрыДинамическихСписков();
	ЗаполнитьСписокДокументов();
	ЗаполнитьСписокДокументовМБП();
	УстановитьВидимостьДоступностьЭлементов();

КонецПроцедуры

&НаКлиенте
Процедура СтраницыОбработкиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элементы.СтраницыОбработки.ТекущаяСтраница.Имя = "СтраницаСводы" Тогда
		ОбновитьДанные = Ложь;     
		
		Если ЗначениеЗаполнено(ОтборНоменклатура) Тогда
			ТекущаяНоменклатура = ОтборНоменклатура;
			ОбновитьДанные = Истина;
			
		Иначе
			ТекущаяСтрока = Элементы.СписокТМЗ_Главный.ТекущиеДанные;
				
			Если ТекущаяСтрока = Неопределено Тогда
				ТекущаяНоменклатура = Неопределено;
				
				ОчиститьСписокОборотыИРасшифровку();
				
			Иначе
				ТекущаяНоменклатура = ТекущаяСтрока.Номенклатура;
				ОбновитьДанные = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ОбновитьДанные И ЗначениеЗаполнено(ПервыйУровень) И ЗначениеЗаполнено(ВторойУровень) Тогда
			ЗаполнитьСписокОбороты();
			ЗаполнитьРасшифровкуОборотов();	
		КонецЕсли;
		
		Элементы.ДекорацияТекущаяНоменклатура.Заголовок = ТекущаяНоменклатура;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокТМЗ

&НаКлиенте
Процедура СписокТМЗПриАктивизацииСтроки(Элемент)
	ТекущаяСтрока = Элементы.СписокТМЗ_Главный.ТекущиеДанные;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущаяНоменклатура = ТекущаяСтрока.Номенклатура;
		
		Если ТекущаяСтрока.Свойство("Партия") Тогда
			Партия = ТекущаяСтрока.Партия;
		Иначе
			Партия = Неопределено;
		КонецЕсли;	
		
		Если ТекущаяСтрока.Свойство("Склад") Тогда
			Склад = ТекущаяСтрока.Склад;
		Иначе
			Склад = Неопределено;
		КонецЕсли;
		
		Если ТекущаяСтрока.Свойство("Счет") Тогда
			Счет = ТекущаяСтрока.Счет;
		Иначе
			Счет = Неопределено;
		КонецЕсли;
		
		Если ТекущаяСтрока <> Неопределено Тогда
			УстановитьОтборыСписокДокументов(Партия, ТекущаяСтрока.Номенклатура, Счет, Склад);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокМБП_ГлавныйПриАктивизацииСтроки(Элемент)
	ТекущаяСтрока = Элементы.СписокМБП_Главный.ТекущиеДанные;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущаяНоменклатура = ТекущаяСтрока.Номенклатура;
		
		Если ТекущаяСтрока.Свойство("Партия") Тогда
			Партия = ТекущаяСтрока.Партия;
		Иначе
			Партия = Неопределено;
		КонецЕсли;	
		
		Если ТекущаяСтрока.Свойство("Склад") Тогда
			Склад = ТекущаяСтрока.Склад;
		Иначе
			Склад = Неопределено;
		КонецЕсли;
		
		Если ТекущаяСтрока.Свойство("Счет") Тогда
			Счет = ТекущаяСтрока.Счет;
		Иначе
			Счет = Неопределено;
		КонецЕсли;
		
		Если ТекущаяСтрока <> Неопределено Тогда
			УстановитьОтборыСписокДокументовМБП(Партия, ТекущаяСтрока.Номенклатура, Счет, Склад);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокОбороты

&НаКлиенте
Процедура СписокОборотыПриАктивизацииСтроки(Элемент)
	
	Счет 	= Неопределено;
	Склад 	= Неопределено;
	Партия 	= Неопределено;
	Уровень	= 0;
	
	ТекущаяСтрока = Элементы.СписокОбороты.ТекущиеДанные;	
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Счет) Тогда
		Счет = ТекущаяСтрока.Счет;
		
		Если ПервыйУровень = "Счет" Тогда
			Уровень = 1;	
		ИначеЕсли ВторойУровень = "Счет" Тогда
			Уровень = 2;	
		Иначе
			Уровень = 3;	
		КонецЕсли;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Склад) Тогда
		Склад = ТекущаяСтрока.Склад;
		
		Если ПервыйУровень = "Склад" Тогда
			Уровень = 1;	
		ИначеЕсли ВторойУровень = "Склад" Тогда
			Уровень = 2;	
		Иначе
			Уровень = 3;	
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Партия) Тогда
		Партия = ТекущаяСтрока.Партия;
		
		Если ПервыйУровень = "Партия" Тогда
			Уровень = 1;	
		ИначеЕсли ВторойУровень = "Партия" Тогда
			Уровень = 2;	
		Иначе
			Уровень = 3;	
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяСтрока = ТекущаяСтрока.ПолучитьРодителя();
	
	Если ТекущаяСтрока <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Счет) Тогда
			Счет = ТекущаяСтрока.Счет;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Склад) Тогда
			Склад = ТекущаяСтрока.Склад;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Партия) Тогда
			Партия = ТекущаяСтрока.Партия;
		КонецЕсли;	
		
		ТекущаяСтрока = ТекущаяСтрока.ПолучитьРодителя();
		
		Если ТекущаяСтрока <> Неопределено Тогда
			
			Если ЗначениеЗаполнено(ТекущаяСтрока.Счет) Тогда
				Счет = ТекущаяСтрока.Счет;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекущаяСтрока.Склад) Тогда
				Склад = ТекущаяСтрока.Склад;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекущаяСтрока.Партия) Тогда
				Партия = ТекущаяСтрока.Партия;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьОтборыНаРасшифровкуОборотов(Счет, Склад, Партия, Уровень);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	УстановитьЗначенияГруппировок();
	УстановитьПараметрыДинамическихСписков();
	ЗаполнитьСписокДокументов();
	ЗаполнитьСписокДокументовМБП();
	Если ЗначениеЗаполнено(ПервыйУровень) И ЗначениеЗаполнено(ВторойУровень) Тогда
		ЗаполнитьСписокОбороты();
		ЗаполнитьРасшифровкуОборотов();
	КонецЕсли;
	
	УстановитьОтборыСписокТМЗ_Главный();
	УстановитьОтборыСписокМБП_Главный();
	УстановитьОтборыСписокДокументов();
	УстановитьОтборыСписокДокументовМБП();
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ПерепровестиДокументы(Команда)
	ПоказатьРезультатПерепроведения = Истина;
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("МассивСсылок", ДокументыДляОбработки());
	РезультатВыполнения = ПерепровестиДокументыНаСервере(ПараметрыКоманды);
	ПараметрыОбработчикаОжидания = Новый Структура();
	
	Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	КонецЕсли;
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТаблицуРасшифровкаПоСобытиямОС(Команда)
	ПоказатьРезультатПерепроведения = Ложь;
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетМатериальнаяВедомость(Команда)
	
	стПериод = Новый СтандартныйПериод;
	стПериод.ДатаНачала = ДатаНачала;
	стПериод.ДатаОкончания = КонецДня(ДатаОкончания);
	
	ПользовательскиеНастройки = УстановитьПользовательскиеНастройкиОтчета("МатериальнаяВедомость",Новый Структура("СтПериод", стПериод));
	
	УсловияОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(ОтборСчет) Тогда 
		УсловияОтбора.Вставить("Счет", ОтборСчет);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда 
		УсловияОтбора.Вставить("Организация", ОтборОрганизация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборНоменклатура) Тогда 
		УсловияОтбора.Вставить("Номенклатура", ОтборНоменклатура);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборСклад) Тогда 
		УсловияОтбора.Вставить("Склад", ОтборСклад);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ПользовательскиеНастройки, Отбор, СформироватьПриОткрытии", ПользовательскиеНастройки, УсловияОтбора, Истина);
	ОткрытьФорму("Отчет.МатериальнаяВедомость.Форма", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетКонтрольОтрицательныхОстатков(Команда)
				 
	ОткрытьОтчет("Отчет.КонтрольОтрицательныхОстатков.Форма",,,,,, ДатаНачала, КонецДня(ДатаОкончания));
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетОборотноСальдоваяВедомостьПоСчету(Команда)
	
	РеквизитыОтчета = Новый Структура;
	РеквизитыОтчета.Вставить("Счет", ОтборСчет);
	
	ОткрытьОтчет("Отчет.ОборотноСальдоваяВедомостьПоСчету.Форма",,, РеквизитыОтчета,,, ДатаНачала, КонецДня(ДатаОкончания));
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетОборотноСальдоваяВедомостьПоТоварам(Команда)
	
	стПериод = Новый СтандартныйПериод;
	стПериод.ДатаНачала = ДатаНачала;
	стПериод.ДатаОкончания = КонецДня(ДатаОкончания);
	
	ПользовательскиеНастройки = УстановитьПользовательскиеНастройкиОтчета("ОборотноСальдоваяВедомостьПоТоварам",Новый Структура("СтПериод", стПериод));
	
	УсловияОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(ОтборСчет) Тогда 
		УсловияОтбора.Вставить("Счет", ОтборСчет);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда 
		УсловияОтбора.Вставить("Организация", ОтборОрганизация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборНоменклатура) Тогда 
		УсловияОтбора.Вставить("Субконто1", ОтборНоменклатура);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборСклад) Тогда 
		УсловияОтбора.Вставить("Субконто2", ОтборСклад);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ПользовательскиеНастройки, Отбор, СформироватьПриОткрытии", ПользовательскиеНастройки, УсловияОтбора, Истина);
	ОткрытьФорму("Отчет.ОборотноСальдоваяВедомостьПоТоварам.Форма", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетОстаткиТоваров(Команда)

	ОтборыОтчета = Новый Массив;

	Если ЗначениеЗаполнено(ОтборСчет) Тогда 
		ОтбораПоСчету = Новый Структура;
		ОтбораПоСчету.Вставить("Поле",         "Счет");
		ОтбораПоСчету.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
		ОтбораПоСчету.Вставить("Значение",     ОтборСчет);
		
		ОтборыОтчета.Добавить(ОтбораПоСчету);
	КонецЕсли;	                                    
	
	Если ЗначениеЗаполнено(ОтборНоменклатура) Тогда 
		ОтбораПоНоменклатуре = Новый Структура;
		ОтбораПоНоменклатуре.Вставить("Поле",         "Номенклатура");
		ОтбораПоНоменклатуре.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
		ОтбораПоНоменклатуре.Вставить("Значение",     ОтборНоменклатура);
		
		ОтборыОтчета.Добавить(ОтбораПоНоменклатуре);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборСклад) Тогда 
		ОтбораПоСкладу = Новый Структура;
		ОтбораПоСкладу.Вставить("Поле",         "Склад");
		ОтбораПоСкладу.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
		ОтбораПоСкладу.Вставить("Значение",     ОтборСклад);
		
		ОтборыОтчета.Добавить(ОтбораПоСкладу);
	КонецЕсли;

	ОткрытьОтчет("Отчет.ОстаткиТоваров.Форма",,ОтборыОтчета,,,, ДатаНачала, КонецДня(ДатаНачала));
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетСводПоТоварам(Команда)
	
	ОтборыОтчета = Новый Массив;

	Если ЗначениеЗаполнено(ОтборСчет) Тогда 
		ОтбораПоСчету = Новый Структура;
		ОтбораПоСчету.Вставить("Поле",         "Счет");
		ОтбораПоСчету.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
		ОтбораПоСчету.Вставить("Значение",     ОтборСчет);
		
		ОтборыОтчета.Добавить(ОтбораПоСчету);
	КонецЕсли;	                                    
	
	Если ЗначениеЗаполнено(ОтборНоменклатура) Тогда 
		ОтбораПоНоменклатуре = Новый Структура;
		ОтбораПоНоменклатуре.Вставить("Поле",         "Номенклатура");
		ОтбораПоНоменклатуре.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
		ОтбораПоНоменклатуре.Вставить("Значение",     ОтборНоменклатура);
		
		ОтборыОтчета.Добавить(ОтбораПоНоменклатуре);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборСклад) Тогда 
		ОтбораПоСкладу = Новый Структура;
		ОтбораПоСкладу.Вставить("Поле",         "Склад");
		ОтбораПоСкладу.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
		ОтбораПоСкладу.Вставить("Значение",     ОтборСклад);
		
		ОтборыОтчета.Добавить(ОтбораПоСкладу);
	КонецЕсли;

	ОткрытьОтчет("Отчет.СводПоТоварам.Форма",,ОтборыОтчета,,,, ДатаНачала, КонецДня(ДатаНачала));
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость и доступность элементов.
//
&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()	
	
	Элементы.ПерепровестиДокументы.Видимость 		= НЕ ПоказатьРезультатПерепроведения;
	Элементы.СписокДокументов.Видимость 			= НЕ ПоказатьРезультатПерепроведения;
	
	Элементы.Результат.Видимость 					= ПоказатьРезультатПерепроведения;
	Элементы.СостояниеПрогресса.Видимость 			= ПоказатьРезультатПерепроведения;
	Элементы.ПоказатьТаблицуДокументов.Видимость 	= ПоказатьРезультатПерепроведения;
	Элементы.СтраницаДокумент.Видимость 			= ЗапускМонитораИзДокумента;
	
	Элементы.СписокТМЗ_ГлавныйПартия.Видимость 		= ОтборПартионныйУчет И НЕ СвернутьПоПартиям;	
	Элементы.СписокТМЗ_ГлавныйСклад.Видимость 		= НЕ СвернутьПоСкладам;
	Элементы.СписокТМЗ_ГлавныйСчет.Видимость 		= НЕ СвернутьПоСчетам;
	
	Элементы.СписокМБП_ГлавныйПартия.Видимость 		= ОтборПартионныйУчет И НЕ СвернутьПоПартиям;	
	Элементы.СписокМБП_ГлавныйСклад.Видимость 		= НЕ СвернутьПоСкладам;
	Элементы.СписокМБП_ГлавныйСчет.Видимость 		= НЕ СвернутьПоСчетам;
	
	Элементы.СвернутьПоПартиям.Видимость			= ОтборПартионныйУчет;
	Элементы.ТретийУровень.Видимость				= ОтборПартионныйУчет;
	
	Элементы.СписокОборотыСклад.Видимость			= Ложь;
	Элементы.СписокОборотыСклад1.Видимость			= Ложь;
	Элементы.СписокОборотыСклад2.Видимость			= Ложь;
	Элементы.СписокОборотыСчет.Видимость			= Ложь;
	Элементы.СписокОборотыСчет1.Видимость			= Ложь;
	Элементы.СписокОборотыСчет2.Видимость			= Ложь;
	Элементы.СписокОборотыПартия.Видимость			= Ложь;
	Элементы.СписокОборотыПартия1.Видимость			= Ложь;
	Элементы.СписокОборотыПартия2.Видимость			= Ложь;

	Элементы.РасшифровкаОборотовПартия.Видимость		= ОтборПартионныйУчет;
	Элементы.РасшифровкаОборотовСчетДт.Видимость		= ПервыйУровень <> "Счет";
	Элементы.РасшифровкаОборотовСчетКт.Видимость		= ПервыйУровень <> "Счет";
	Элементы.РасшифровкаОборотовСкладКуда.Видимость 	= ПервыйУровень <> "Склад";
	Элементы.РасшифровкаОборотовСкладОткуда.Видимость 	= ПервыйУровень <> "Склад";
	
	Если ЗначениеЗаполнено(ПервыйУровень) ИЛИ ЗначениеЗаполнено(ВторойУровень) Тогда
		
		Если ПервыйУровень = "Счет" Тогда			
			Элементы.СписокОборотыСчет.Видимость = Истина;
			
			Если ВторойУровень = "Склад" Тогда				
				Элементы.СписокОборотыСклад1.Видимость = Истина;	
				
				Если ОтборПартионныйУчет Тогда
					Элементы.СписокОборотыПартия2.Видимость	= Истина;	
				КонецЕсли;	
				
			ИначеЕсли ВторойУровень = "Партия" Тогда
				Элементы.СписокОборотыПартия1.Видимость = Истина;
				Элементы.СписокОборотыСклад2.Видимость	= Истина;
			КонецЕсли;	
			
		ИначеЕсли ПервыйУровень = "Склад" Тогда
			Элементы.СписокОборотыСклад.Видимость = Истина;
			
			Если ВторойУровень = "Счет" Тогда				
				Элементы.СписокОборотыСчет1.Видимость = Истина;	
				
				Если ОтборПартионныйУчет Тогда
					Элементы.СписокОборотыПартия2.Видимость	= Истина;	
				КонецЕсли;	
				
			ИначеЕсли ВторойУровень = "Партия" Тогда
				Элементы.СписокОборотыПартия1.Видимость = Истина;
				Элементы.СписокОборотыСчет2.Видимость	= Истина;
			КонецЕсли;
			
		ИначеЕсли ПервыйУровень = "Партия" Тогда	
			Элементы.СписокОборотыПартия.Видимость = Истина;
			
			Если ВторойУровень = "Счет" Тогда				
				Элементы.СписокОборотыСчет1.Видимость = Истина;
				Элементы.СписокОборотыСклад2.Видимость	= Истина;	
				
			ИначеЕсли ВторойУровень = "Склад" Тогда
				Элементы.СписокОборотыСклад1.Видимость = Истина;
				Элементы.СписокОборотыСчет2.Видимость	= Истина;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры 

// Процедура настройки условного оформления форм и динамических списков .
//
&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// Таблица РасшифровкаОборотов.
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("РасшифровкаОборотов");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РасшифровкаОборотов.Документ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ОтборЭлемента.ПравоеЗначение = "Отпуск";

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветАкцента);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборыСписокТМЗ_Главный()
	СписокТМЗ_Главный.Отбор.Элементы.Очистить();
	
	Если ЗначениеЗаполнено(ОтборНоменклатура) Тогда
		ЭлементОтбора = СписокТМЗ_Главный.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = ОтборНоменклатура;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
		ЭлементОтбора = СписокТМЗ_Главный.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = ОтборОрганизация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборСклад) Тогда
		ЭлементОтбора = СписокТМЗ_Главный.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Склад");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = ОтборСклад;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборСчет) Тогда
		ЭлементОтбора = СписокТМЗ_Главный.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Счет");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = ОтборСчет;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборыСписокМБП_Главный()
	СписокМБП_Главный.Отбор.Элементы.Очистить();
	
	Если ЗначениеЗаполнено(ОтборНоменклатура) Тогда
		ЭлементОтбора = СписокМБП_Главный.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = ОтборНоменклатура;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
		ЭлементОтбора = СписокМБП_Главный.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = ОтборОрганизация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборСклад) Тогда
		ЭлементОтбора = СписокМБП_Главный.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Склад");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = ОтборСклад;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборСчет) Тогда
		ЭлементОтбора = СписокМБП_Главный.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Счет");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = ОтборСчет;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборыСписокДокументов(Партия = Неопределено, Номенклатура = Неопределено, Счет = Неопределено, Склад = Неопределено)
	
	СтрокаОтбора = "";
	МассивОтбора = Новый Массив();
	
	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда		
		СтрокаОтбора = "Организация";
		МассивОтбора.Добавить(ОтборОрганизация);	
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ОтборСчет) Тогда
		Если СтрокаОтбора = "" Тогда
			СтрокаОтбора = "Счет";
		Иначе
			СтрокаОтбора = СтрокаОтбора + ",Счет";
		КонецЕсли;
		
		МассивОтбора.Добавить(ОтборСчет);
		
	ИначеЕсли Счет <> Неопределено Тогда
		Если СтрокаОтбора = "" Тогда
			СтрокаОтбора = "Счет";
		Иначе
			СтрокаОтбора = СтрокаОтбора + ",Счет";
		КонецЕсли;
		
		МассивОтбора.Добавить(Счет);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборНоменклатура) Тогда
		Если СтрокаОтбора = "" Тогда
			СтрокаОтбора = "Номенклатура";
		Иначе
			СтрокаОтбора = СтрокаОтбора + ",Номенклатура";
		КонецЕсли;
		
		МассивОтбора.Добавить(ОтборНоменклатура);
		
	ИначеЕсли Номенклатура <> Неопределено Тогда
		Если СтрокаОтбора = "" Тогда
			СтрокаОтбора = "Номенклатура";
		Иначе
			СтрокаОтбора = СтрокаОтбора + ",Номенклатура";
		КонецЕсли;
		
		МассивОтбора.Добавить(Номенклатура);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборСклад) Тогда
		Если СтрокаОтбора = "" Тогда
			СтрокаОтбора = "Склад";
		Иначе
			СтрокаОтбора = СтрокаОтбора + ",Склад";
		КонецЕсли;
		
		МассивОтбора.Добавить(ОтборСклад);
		
	ИначеЕсли Склад <> Неопределено Тогда
		Если СтрокаОтбора = "" Тогда
			СтрокаОтбора = "Склад";
		Иначе
			СтрокаОтбора = СтрокаОтбора + ",Склад";
		КонецЕсли;
		
		МассивОтбора.Добавить(Склад);
	КонецЕсли;
	
	Если ОтборПартионныйУчет И Партия <> Неопределено Тогда
		Если СтрокаОтбора = "" Тогда
			СтрокаОтбора = "Партия";
		Иначе
			СтрокаОтбора = СтрокаОтбора + ",Партия";
		КонецЕсли;
		
		МассивОтбора.Добавить(Партия);	
	КонецЕсли;	
	
	СтруктураОтбора = Неопределено;
	
	Если МассивОтбора.Количество() = 1 Тогда
		СтруктураОтбора = Новый ФиксированнаяСтруктура(СтрокаОтбора, МассивОтбора[0]);
		
	ИначеЕсли МассивОтбора.Количество() = 2 Тогда
		СтруктураОтбора = Новый ФиксированнаяСтруктура(СтрокаОтбора, 
									МассивОтбора[0],
									МассивОтбора[1]);
									
	ИначеЕсли МассивОтбора.Количество() = 3 Тогда
		СтруктураОтбора = Новый ФиксированнаяСтруктура(СтрокаОтбора, 
									МассивОтбора[0],
									МассивОтбора[1],
									МассивОтбора[2]);
									
	ИначеЕсли МассивОтбора.Количество() = 4 Тогда
		СтруктураОтбора = Новый ФиксированнаяСтруктура(СтрокаОтбора, 
									МассивОтбора[0],
									МассивОтбора[1],
									МассивОтбора[2],
									МассивОтбора[3]);
									
	ИначеЕсли МассивОтбора.Количество() = 5 Тогда
		СтруктураОтбора = Новый ФиксированнаяСтруктура(СтрокаОтбора, 
									МассивОтбора[0],
									МассивОтбора[1],
									МассивОтбора[2],
									МассивОтбора[3],
									МассивОтбора[4]);
	КонецЕсли;
	
	Элементы.СписокДокументов.ОтборСтрок = СтруктураОтбора;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборыСписокДокументовМБП(Партия = Неопределено, Номенклатура = Неопределено, Счет = Неопределено, Склад = Неопределено)
	
	СтрокаОтбора = "";
	МассивОтбора = Новый Массив();
	
	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда		
		СтрокаОтбора = "Организация";
		МассивОтбора.Добавить(ОтборОрганизация);	
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ОтборСчет) Тогда
		Если СтрокаОтбора = "" Тогда
			СтрокаОтбора = "Счет";
		Иначе
			СтрокаОтбора = СтрокаОтбора + ",Счет";
		КонецЕсли;
		
		МассивОтбора.Добавить(ОтборСчет);
		
	ИначеЕсли Счет <> Неопределено Тогда
		Если СтрокаОтбора = "" Тогда
			СтрокаОтбора = "Счет";
		Иначе
			СтрокаОтбора = СтрокаОтбора + ",Счет";
		КонецЕсли;
		
		МассивОтбора.Добавить(Счет);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборНоменклатура) Тогда
		Если СтрокаОтбора = "" Тогда
			СтрокаОтбора = "Номенклатура";
		Иначе
			СтрокаОтбора = СтрокаОтбора + ",Номенклатура";
		КонецЕсли;
		
		МассивОтбора.Добавить(ОтборНоменклатура);
		
	ИначеЕсли Номенклатура <> Неопределено Тогда
		Если СтрокаОтбора = "" Тогда
			СтрокаОтбора = "Номенклатура";
		Иначе
			СтрокаОтбора = СтрокаОтбора + ",Номенклатура";
		КонецЕсли;
		
		МассивОтбора.Добавить(Номенклатура);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборСклад) Тогда
		Если СтрокаОтбора = "" Тогда
			СтрокаОтбора = "Склад";
		Иначе
			СтрокаОтбора = СтрокаОтбора + ",Склад";
		КонецЕсли;
		
		МассивОтбора.Добавить(ОтборСклад);
		
	ИначеЕсли Склад <> Неопределено Тогда
		Если СтрокаОтбора = "" Тогда
			СтрокаОтбора = "Склад";
		Иначе
			СтрокаОтбора = СтрокаОтбора + ",Склад";
		КонецЕсли;
		
		МассивОтбора.Добавить(Склад);
	КонецЕсли;
	
	Если ОтборПартионныйУчет И Партия <> Неопределено Тогда
		Если СтрокаОтбора = "" Тогда
			СтрокаОтбора = "Партия";
		Иначе
			СтрокаОтбора = СтрокаОтбора + ",Партия";
		КонецЕсли;
		
		МассивОтбора.Добавить(Партия);	
	КонецЕсли;	
	
	СтруктураОтбора = Неопределено;
	
	Если МассивОтбора.Количество() = 1 Тогда
		СтруктураОтбора = Новый ФиксированнаяСтруктура(СтрокаОтбора, МассивОтбора[0]);
		
	ИначеЕсли МассивОтбора.Количество() = 2 Тогда
		СтруктураОтбора = Новый ФиксированнаяСтруктура(СтрокаОтбора, 
									МассивОтбора[0],
									МассивОтбора[1]);
									
	ИначеЕсли МассивОтбора.Количество() = 3 Тогда
		СтруктураОтбора = Новый ФиксированнаяСтруктура(СтрокаОтбора, 
									МассивОтбора[0],
									МассивОтбора[1],
									МассивОтбора[2]);
									
	ИначеЕсли МассивОтбора.Количество() = 4 Тогда
		СтруктураОтбора = Новый ФиксированнаяСтруктура(СтрокаОтбора, 
									МассивОтбора[0],
									МассивОтбора[1],
									МассивОтбора[2],
									МассивОтбора[3]);
									
	ИначеЕсли МассивОтбора.Количество() = 5 Тогда
		СтруктураОтбора = Новый ФиксированнаяСтруктура(СтрокаОтбора, 
									МассивОтбора[0],
									МассивОтбора[1],
									МассивОтбора[2],
									МассивОтбора[3],
									МассивОтбора[4]);
	КонецЕсли;
	
	Элементы.СписокДокументовМБП.ОтборСтрок = СтруктураОтбора;
КонецПроцедуры

&НаСервере
Процедура СформироватьТабличныйДокументИзДокумента(СтруктураДанных)
	ТабличныйДокументРасшифровка.Очистить();
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.СформироватьТабличныйДокументМониторИзДокумента(ТабличныйДокументРасшифровка, СтруктураДанных);	

КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыДинамическихСписков(ИзменилсяПериод = Ложь)

	// Номенклатура
	СписокТМЗ_Главный.ТекстЗапроса = ОсновнойТекстЗапросаСпискаТМЗ_Главный;
	
	Если НЕ ОтборПартионныйУчет ИЛИ СвернутьПоПартиям Тогда
		СписокТМЗ_Главный.ТекстЗапроса = СтрЗаменить(СписокТМЗ_Главный.ТекстЗапроса, "ХозрасчетныйОстаткиИОбороты.Субконто3 КАК Партия,", "");
	КонецЕсли;	
	
	Если СвернутьПоСкладам Тогда
		СписокТМЗ_Главный.ТекстЗапроса = СтрЗаменить(СписокТМЗ_Главный.ТекстЗапроса, "ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Партия,", "");	
	КонецЕсли;	
	
	Если СвернутьПоСчетам Тогда      //ПервыйУровень = "Склад" И ВторойУровень = ""
		СписокТМЗ_Главный.ТекстЗапроса = СтрЗаменить(СписокТМЗ_Главный.ТекстЗапроса, "ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,", "");	
	КонецЕсли;
	
	СписокТМЗ_Главный.Параметры.УстановитьЗначениеПараметра("ДатаНачала", 		ДатаНачала);
	СписокТМЗ_Главный.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", 	КонецДня(ДатаОкончания));
	
	Если НЕ ИзменилсяПериод Тогда
		ВидыСубконто = Новый Массив;
		ВидыСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура"));	
		ВидыСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады"));
		Если ОтборПартионныйУчет Тогда
			ВидыСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии"));		
		КонецЕсли;
		
		СписокТМЗ_Главный.Параметры.УстановитьЗначениеПараметра("ВидыСубконто", ВидыСубконто);	
	КонецЕсли;
	
	Если ПервыйУровень = "Склад" Тогда
		СписокТМЗ_Главный.ТекстЗапроса = СтрЗаменить(СписокТМЗ_Главный.ТекстЗапроса, 
			"	Номенклатура.Наименование,
			|	Склад,
			|	Счет", 
			"	Склад,
			|	Счет,
			|	Номенклатура.Наименование");
	ИначеЕсли ПервыйУровень = "Счет" Тогда
		СписокТМЗ_Главный.ТекстЗапроса = СтрЗаменить(СписокТМЗ_Главный.ТекстЗапроса, 
			"	Номенклатура.Наименование,
			|	Склад,
			|	Счет", 
			"	Счет,
			|	Склад,
			|	Номенклатура.Наименование");
	КонецЕсли;
	// очистка полей сортировки
	СписокТМЗ_Главный.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[1].Элементы.Очистить();
	
	// МБП
	СписокМБП_Главный.ТекстЗапроса = ОсновнойТекстЗапросаСпискаМБП_Главный;
	
	Если НЕ ОтборПартионныйУчет ИЛИ СвернутьПоПартиям Тогда
		СписокМБП_Главный.ТекстЗапроса = СтрЗаменить(СписокМБП_Главный.ТекстЗапроса, "ХозрасчетныйОстаткиИОбороты.Субконто3 КАК Партия,", "");
	КонецЕсли;	
	
	Если СвернутьПоСкладам Тогда
		СписокМБП_Главный.ТекстЗапроса = СтрЗаменить(СписокМБП_Главный.ТекстЗапроса, "ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Партия,", "");	
	КонецЕсли;	
	
	Если СвернутьПоСчетам Тогда      //ПервыйУровень = "Склад" И ВторойУровень = ""
		СписокМБП_Главный.ТекстЗапроса = СтрЗаменить(СписокМБП_Главный.ТекстЗапроса, "ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,", "");	
	КонецЕсли;
	
	СчетаУчетаМБП = БухгалтерскийУчетПовтИсп.СчетаУчетаМБП();
	
	СписокМБП_Главный.Параметры.УстановитьЗначениеПараметра("МассивСчетовМБП", 	СчетаУчетаМБП);
	СписокМБП_Главный.Параметры.УстановитьЗначениеПараметра("ДатаНачала", 		ДатаНачала);
	СписокМБП_Главный.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", 	КонецДня(ДатаОкончания));
	
	Если НЕ ИзменилсяПериод Тогда
		ВидыСубконто = Новый Массив;
		ВидыСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура"));	
		ВидыСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Местонахождение"));
		Если ОтборПартионныйУчет Тогда
			ВидыСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии"));		
		КонецЕсли;
		
		СписокМБП_Главный.Параметры.УстановитьЗначениеПараметра("ВидыСубконто", ВидыСубконто);	
	КонецЕсли;
	
	Если ПервыйУровень = "Склад" Тогда
		СписокМБП_Главный.ТекстЗапроса = СтрЗаменить(СписокМБП_Главный.ТекстЗапроса, 
			"	Номенклатура.Наименование,
			|	Склад,
			|	Счет", 
			"	Склад,
			|	Счет,
			|	Номенклатура.Наименование");
	ИначеЕсли ПервыйУровень = "Счет" Тогда
		СписокМБП_Главный.ТекстЗапроса = СтрЗаменить(СписокМБП_Главный.ТекстЗапроса, 
			"	Номенклатура.Наименование,
			|	Склад,
			|	Счет", 
			"	Счет,
			|	Склад,
			|	Номенклатура.Наименование");
	КонецЕсли;
	
	// очистка полей сортировки
	СписокМБП_Главный.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[1].Элементы.Очистить();
	
КонецПроцедуры

// Функция проверки корректности введенных дат начала и окончания.
//
// Возвращаемое значение:
//	Ложь/Истина - Булево - признак правильности введенных дат.
//
&НаКлиенте
Функция ПроверитьКорректностьУказаныхДат()

	Если ДатаНачала > ДатаОкончания Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Дата начала периода не может быть больше даты окончания.'"));
		ДатаНачала = ДатаОкончания;
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	

КонецФункции

&НаСервере
Процедура ЗаполнитьСписокДокументов()

	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура"));	
	ВидыСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады"));
	Если ОтборПартионныйУчет Тогда
		ВидыСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии"));		
	КонецЕсли;	
		
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОбороты.Организация КАК Организация,
		|	НЕОПРЕДЕЛЕНО КАК Дата,
		|	""Остаток"" КАК Документ,
		|	НЕОПРЕДЕЛЕНО КАК Цена,			
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Склад,
		|	ХозрасчетныйОстаткиИОбороты.Субконто3 КАК Партия,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоПриход,
		|	НЕОПРЕДЕЛЕНО КАК СуммаПриход,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоРасход,
		|	НЕОПРЕДЕЛЕНО КАК СуммаРасход,
		|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,		
		|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстаток СуммаОстаток,
		|	ХозрасчетныйОстаткиИОбороты.КоличествоНачальныйОстаток КАК КоличествоОстаток,
		|	НЕОПРЕДЕЛЕНО КАК КорСклад
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
		|								&ДатаНачала, 
		|								&ДатаОкончания, 
		|								, 
		|								, 
		|								, 
		|								&ВидыСубконто) КАК ХозрасчетныйОстаткиИОбороты
		|		ПО (Номенклатура.Ссылка = (ВЫРАЗИТЬ(ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Справочник.Номенклатура)))
		|ГДЕ
		|	НЕ Номенклатура.ЭтоГруппа
		|	И НЕ Номенклатура.Услуга
		|	И (ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстаток <> 0
		|			ИЛИ ХозрасчетныйОстаткиИОбороты.КоличествоНачальныйОстаток <> 0)
	    |
	    |ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОбороты.Организация КАК Организация,
		|	ХозрасчетныйОстаткиИОбороты.ПериодСекунда КАК Дата,
		|	ХозрасчетныйОстаткиИОбороты.Регистратор КАК Документ,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.КоличествоКонечныйОстаток <> 0
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстаток / ХозрасчетныйОстаткиИОбороты.КоличествоКонечныйОстаток
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Цена,
		|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Номенклатура,
		|	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Склад,
		|	ХозрасчетныйОстаткиИОбороты.Субконто3 КАК Партия,
		|	ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт КАК КоличествоПриход,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК СуммаПриход,
		|	ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт КАК КоличествоРасход,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК СуммаРасход,
		|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстаток КАК СуммаОстаток,
		|	ХозрасчетныйОстаткиИОбороты.КоличествоКонечныйОстаток КАК КоличествоОстаток,
		|	ХозрасчетныйОбороты.КорСубконто2
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
		|			&ДатаНачала,
		|			&ДатаОкончания,
		|			Авто,
		|			Движения,
		|			,
		|			&ВидыСубконто) КАК ХозрасчетныйОстаткиИОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНачала, &ДатаОкончания, Авто, , &ВидыСубконто, , , &ВидыСубконто) КАК ХозрасчетныйОбороты
		|		ПО ХозрасчетныйОстаткиИОбороты.Регистратор = ХозрасчетныйОбороты.Регистратор
		|			И ХозрасчетныйОстаткиИОбороты.Субконто1 = ХозрасчетныйОбороты.Субконто1
		|			И ХозрасчетныйОстаткиИОбороты.Субконто2 = ХозрасчетныйОбороты.Субконто2
		|			И ХозрасчетныйОстаткиИОбороты.Субконто3 = ХозрасчетныйОбороты.Субконто3
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
	Если НЕ ОтборПартионныйУчет Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ХозрасчетныйОстаткиИОбороты.Субконто3 КАК Партия,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ХозрасчетныйОстаткиИОбороты.Субконто3 = ХозрасчетныйОбороты.Субконто3", "");
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаНачала", 	ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", 	ДатаОкончания);
	Запрос.УстановитьПараметр("ВидыСубконто", 	ВидыСубконто);
	
	СписокДокументов.Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДокументовМБП()

	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура"));	
	ВидыСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Местонахождение"));
	Если ОтборПартионныйУчет Тогда
		ВидыСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии"));		
	КонецЕсли;	
		
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОбороты.Организация КАК Организация,
		|	НЕОПРЕДЕЛЕНО КАК Дата,
		|	""Остаток"" КАК Документ,
		|	НЕОПРЕДЕЛЕНО КАК Цена,
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Склад,
		|	ХозрасчетныйОстаткиИОбороты.Субконто3 КАК Партия,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоПриход,
		|	НЕОПРЕДЕЛЕНО КАК СуммаПриход,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоРасход,
		|	НЕОПРЕДЕЛЕНО КАК СуммаРасход,
		|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
		|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстаток КАК СуммаОстаток,
		|	ХозрасчетныйОстаткиИОбороты.КоличествоНачальныйОстаток КАК КоличествоОстаток,
		|	НЕОПРЕДЕЛЕНО КАК КорСклад
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, , , Счет В (&МассивСчетовМБП), &ВидыСубконто, ) КАК ХозрасчетныйОстаткиИОбороты
		|		ПО (Номенклатура.Ссылка = (ВЫРАЗИТЬ(ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Справочник.Номенклатура)))
		|ГДЕ
		|	НЕ Номенклатура.ЭтоГруппа
		|	И НЕ Номенклатура.Услуга
		|	И (ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстаток <> 0
		|			ИЛИ ХозрасчетныйОстаткиИОбороты.КоличествоНачальныйОстаток <> 0)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОбороты.Организация,
		|	ХозрасчетныйОстаткиИОбороты.ПериодСекунда,
		|	ХозрасчетныйОстаткиИОбороты.Регистратор,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.КоличествоКонечныйОстаток <> 0
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстаток / ХозрасчетныйОстаткиИОбороты.КоличествоКонечныйОстаток
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ХозрасчетныйОстаткиИОбороты.Субконто1,
		|	ХозрасчетныйОстаткиИОбороты.Субконто2,
		|	ХозрасчетныйОстаткиИОбороты.Субконто3 КАК Партия,
		|	ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт,
		|	ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт,
		|	ХозрасчетныйОстаткиИОбороты.Счет,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстаток,
		|	ХозрасчетныйОстаткиИОбороты.КоличествоКонечныйОстаток,
		|	ХозрасчетныйОбороты.КорСубконто2
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, Авто, Движения, Счет В (&МассивСчетовМБП), &ВидыСубконто, ) КАК ХозрасчетныйОстаткиИОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНачала, &ДатаОкончания, Авто, Счет В (&МассивСчетовМБП), &ВидыСубконто, , КорСчет В (&МассивСчетовМБП), &ВидыСубконто) КАК ХозрасчетныйОбороты
		|		ПО ХозрасчетныйОстаткиИОбороты.Регистратор = ХозрасчетныйОбороты.Регистратор
		|			И ХозрасчетныйОстаткиИОбороты.Субконто1 = ХозрасчетныйОбороты.Субконто1
		|			И ХозрасчетныйОстаткиИОбороты.Субконто2 = ХозрасчетныйОбороты.Субконто2
		|			И ХозрасчетныйОстаткиИОбороты.Субконто3 = ХозрасчетныйОбороты.Субконто3
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
	Если НЕ ОтборПартионныйУчет Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ХозрасчетныйОстаткиИОбороты.Субконто3 КАК Партия,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ХозрасчетныйОстаткиИОбороты.Субконто3 = ХозрасчетныйОбороты.Субконто3", "");
	КонецЕсли;
	
	СчетаУчетаМБП = БухгалтерскийУчетПовтИсп.СчетаУчетаМБП();
	
	Запрос.УстановитьПараметр("МассивСчетовМБП",СчетаУчетаМБП);
	Запрос.УстановитьПараметр("ДатаНачала", 	ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", 	КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("ВидыСубконто", 	ВидыСубконто);
	//ОбщегоНазначенияБПСервер.ЗаписатьЗапросВФайлXML(Запрос, "d:\запрос.q1c");
	СписокДокументовМБП.Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокОбороты()
		
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура"));	
	ВидыСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады"));
	Если ОтборПартионныйУчет Тогда
		ВидыСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии"));		
	КонецЕсли;	
	
	ТекстЗапроса = 	
		"ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
		|	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Склад,
		|	ХозрасчетныйОстаткиИОбороты.Субконто3 КАК Партия,
		|	ХозрасчетныйОстаткиИОбороты.КоличествоНачальныйОстаток КАК КоличествоОстатокНачало,
		|	ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт КАК КоличествоПриход,
		|	ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт КАК КоличествоРасход,
		|	ХозрасчетныйОстаткиИОбороты.КоличествоКонечныйОстаток КАК КоличествоОстатокКонец,
		|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстаток КАК СуммаОстатокНачало,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК СуммаПриход,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК СуммаРасход,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстаток КАК СуммаОстатокКонец
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
		|			&ДатаНачала,
		|			&ДатаОкончания,
		|			,
		|			,
		|			,
		|			&ВидыСубконто,
		|			Организация = &Организация
		|				И Субконто1 = &Номенклатура) КАК ХозрасчетныйОстаткиИОбороты";
		
	Если ПервыйУровень = "Счет" Тогда
		Если ВторойУровень = "Склад" Тогда			
			Если ОтборПартионныйУчет Тогда				
				ТекстЗапроса = ТекстЗапроса +
				"
				|ИТОГИ 
				|	СУММА(КоличествоОстатокНачало),
				|	СУММА(КоличествоПриход),
				|	СУММА(КоличествоРасход),
				|	СУММА(КоличествоОстатокКонец),
				|	СУММА(СуммаОстатокНачало),
				|	СУММА(СуммаПриход),
				|	СУММА(СуммаРасход),
				|	СУММА(СуммаОстатокКонец)
				|ПО
				|	Счет,
				|	Склад";				
			Иначе	
				ТекстЗапроса = ТекстЗапроса +
				"
				|ИТОГИ 
				|	СУММА(КоличествоОстатокНачало),
				|	СУММА(КоличествоПриход),
				|	СУММА(КоличествоРасход),
				|	СУММА(КоличествоОстатокКонец),
				|	СУММА(СуммаОстатокНачало),
				|	СУММА(СуммаПриход),
				|	СУММА(СуммаРасход),
				|	СУММА(СуммаОстатокКонец)
				|ПО
				|	Счет";
			КонецЕсли;	
			
		ИначеЕсли ВторойУровень = "Партия" Тогда 
			ТекстЗапроса = ТекстЗапроса +
			"
			|ИТОГИ 
			|	СУММА(КоличествоОстатокНачало),
			|	СУММА(КоличествоПриход),
			|	СУММА(КоличествоРасход),
			|	СУММА(КоличествоОстатокКонец),
			|	СУММА(СуммаОстатокНачало),
			|	СУММА(СуммаПриход),
			|	СУММА(СуммаРасход),
			|	СУММА(СуммаОстатокКонец)
			|ПО
			|	Счет,
			|	Партия";	
		КонецЕсли;	
		
	ИначеЕсли ПервыйУровень = "Склад" Тогда
		Если ВторойУровень = "Счет" Тогда			
			Если ОтборПартионныйУчет Тогда				
				ТекстЗапроса = ТекстЗапроса +
				"
				|ИТОГИ 
				|	СУММА(КоличествоОстатокНачало),
				|	СУММА(КоличествоПриход),
				|	СУММА(КоличествоРасход),
				|	СУММА(КоличествоОстатокКонец),
				|	СУММА(СуммаОстатокНачало),
				|	СУММА(СуммаПриход),
				|	СУММА(СуммаРасход),
				|	СУММА(СуммаОстатокКонец)
				|ПО
				|	Склад,
				|	Счет";				
			Иначе	
				ТекстЗапроса = ТекстЗапроса +
				"
				|ИТОГИ 
				|	СУММА(КоличествоОстатокНачало),
				|	СУММА(КоличествоПриход),
				|	СУММА(КоличествоРасход),
				|	СУММА(КоличествоОстатокКонец),
				|	СУММА(СуммаОстатокНачало),
				|	СУММА(СуммаПриход),
				|	СУММА(СуммаРасход),
				|	СУММА(СуммаОстатокКонец)
				|ПО
				|	Склад";
			КонецЕсли;	
			
		ИначеЕсли ВторойУровень = "Партия" Тогда 
			ТекстЗапроса = ТекстЗапроса +
			"
			|ИТОГИ 
			|	СУММА(КоличествоОстатокНачало),
			|	СУММА(КоличествоПриход),
			|	СУММА(КоличествоРасход),
			|	СУММА(КоличествоОстатокКонец),
			|	СУММА(СуммаОстатокНачало),
			|	СУММА(СуммаПриход),
			|	СУММА(СуммаРасход),
			|	СУММА(СуммаОстатокКонец)
			|ПО
			|	Склад,
			|	Партия";	
		КонецЕсли;
		
	ИначеЕсли ПервыйУровень = "Партия" Тогда
		Если ВторойУровень = "Счет" Тогда							
			ТекстЗапроса = ТекстЗапроса +
			"
			|ИТОГИ 
			|	СУММА(КоличествоОстатокНачало),
			|	СУММА(КоличествоПриход),
			|	СУММА(КоличествоРасход),
			|	СУММА(КоличествоОстатокКонец),
			|	СУММА(СуммаОстатокНачало),
			|	СУММА(СуммаПриход),
			|	СУММА(СуммаРасход),
			|	СУММА(СуммаОстатокКонец)
			|ПО
			|	Партия,
			|	Счет";				
			
		ИначеЕсли ВторойУровень = "Склад" Тогда 
			ТекстЗапроса = ТекстЗапроса +
			"
			|ИТОГИ 
			|	СУММА(КоличествоОстатокНачало),
			|	СУММА(КоличествоПриход),
			|	СУММА(КоличествоРасход),
			|	СУММА(КоличествоОстатокКонец),
			|	СУММА(СуммаОстатокНачало),
			|	СУММА(СуммаПриход),
			|	СУММА(СуммаРасход),
			|	СУММА(СуммаОстатокКонец)
			|ПО
			|	Партия,
			|	Склад";	
		КонецЕсли;	
	КонецЕсли;	
			
	Если НЕ ОтборПартионныйУчет Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ХозрасчетныйОстаткиИОбороты.Субконто3 КАК Партия,", "");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОтборОрганизация) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Организация = &Организация", "");	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И Субконто1 = &Номенклатура", "Субконто1 = &Номенклатура");
	КонецЕсли;	
	
	Запрос = Новый Запрос(ТекстЗапроса);	
	Запрос.УстановитьПараметр("ДатаНачала", 	ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", 	ДатаОкончания);
	Запрос.УстановитьПараметр("ВидыСубконто", 	ВидыСубконто);
	Запрос.УстановитьПараметр("Организация", 	ОтборОрганизация);
	Запрос.УстановитьПараметр("Номенклатура", 	ТекущаяНоменклатура);
	               
	ВыборкаУровень1 = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ДеревоЗначений = РеквизитФормыВЗначение("СписокОбороты");	
	
	ДеревоЗначений.Строки.Очистить();
	РасшифровкаОборотов.Очистить();
	ПустойСклад = Справочники.Склады.ПустаяСсылка();
	ПустойСчет 	= ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	
	СтруктураИтогов = Новый Структура();
	СтруктураИтогов.Вставить("КоличествоОстатокУровень1", 0);
	СтруктураИтогов.Вставить("КоличествоОстатокУровень2", 0);
	СтруктураИтогов.Вставить("СуммаОстатокУровень1", 0);
	СтруктураИтогов.Вставить("СуммаОстатокУровень2", 0);
	
	Пока ВыборкаУровень1.Следующий() Цикл
		
		СтрокаТЗУровень1 = ДеревоЗначений.Строки.Добавить();		
		ЗаполнитьЗначенияСвойств(СтрокаТЗУровень1, ВыборкаУровень1); 
		
		Если ОтборПартионныйУчет Тогда
			ВыборкаУровень2 = ВыборкаУровень1.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаУровень2.Следующий() Цикл		
				СтрокаТЗУровень2 = СтрокаТЗУровень1.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТЗУровень2, ВыборкаУровень2);
				
				Если ПервыйУровень = "Счет" Тогда
					СтрокаТЗУровень2.Счет  = ПустойСчет;
				ИначеЕсли ПервыйУровень = "Склад" Тогда
					СтрокаТЗУровень2.Склад  = ПустойСклад;
				ИначеЕсли ПервыйУровень = "Партия" Тогда
					СтрокаТЗУровень2.Партия  = Неопределено;
				КонецЕсли;
				
				ДетальныеЗаписи = ВыборкаУровень2.Выбрать();
			
				Пока ДетальныеЗаписи.Следующий() Цикл		
					СтрокаТЗУровень3 = СтрокаТЗУровень2.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТЗУровень3, ДетальныеЗаписи);
					
					Если ПервыйУровень = "Счет" Тогда
						СтрокаТЗУровень3.Счет  = ПустойСчет;
					ИначеЕсли ПервыйУровень = "Склад" Тогда
						СтрокаТЗУровень3.Склад  = ПустойСклад;
					ИначеЕсли ПервыйУровень = "Партия" Тогда
						СтрокаТЗУровень3.Партия  = Неопределено;
					КонецЕсли;
					
					Если ВторойУровень = "Счет" Тогда
						СтрокаТЗУровень3.Счет  = ПустойСчет;
					ИначеЕсли ВторойУровень = "Склад" Тогда
						СтрокаТЗУровень3.Склад  = ПустойСклад;
					ИначеЕсли ВторойУровень = "Партия" Тогда
						СтрокаТЗУровень3.Партия  = Неопределено;
					КонецЕсли;
					
					СтрокаТаблицы = РасшифровкаОборотов.Добавить();
					СтрокаТаблицы.Документ			= "Остаток";
					СтрокаТаблицы.СчетДляОтбора		= ?(ЗначениеЗаполнено(ДетальныеЗаписи.Счет), ДетальныеЗаписи.Счет, Неопределено);
					СтрокаТаблицы.СкладДляОтбора	= ?(ЗначениеЗаполнено(ДетальныеЗаписи.Склад), ДетальныеЗаписи.Склад, Неопределено);
					СтрокаТаблицы.ПартияДляОтбора	= ?(ЗначениеЗаполнено(ДетальныеЗаписи.Партия), ДетальныеЗаписи.Партия, Неопределено);
					СтрокаТаблицы.ОстатокКоличество = ДетальныеЗаписи.КоличествоОстатокНачало;
					СтрокаТаблицы.ОстатокСумма 		= ДетальныеЗаписи.СуммаОстатокНачало;
					СтрокаТаблицы.Порядок 			= 1;
					СтрокаТаблицы.Уровень3 			= Истина;
					СтруктураИтогов.КоличествоОстатокУровень1 	= СтруктураИтогов.КоличествоОстатокУровень1 + ДетальныеЗаписи.КоличествоОстатокНачало;
					СтруктураИтогов.КоличествоОстатокУровень2 	= СтруктураИтогов.КоличествоОстатокУровень2 + ДетальныеЗаписи.КоличествоОстатокНачало;
					СтруктураИтогов.СуммаОстатокУровень1		= СтруктураИтогов.СуммаОстатокУровень1 + ДетальныеЗаписи.СуммаОстатокНачало;
					СтруктураИтогов.СуммаОстатокУровень2		= СтруктураИтогов.СуммаОстатокУровень2 + ДетальныеЗаписи.СуммаОстатокНачало;
				КонецЦикла;
				
				СтрокаТаблицы = РасшифровкаОборотов.Добавить();
				СтрокаТаблицы.Документ			= "Остаток";
				СтрокаТаблицы.СчетДляОтбора		= ?(ЗначениеЗаполнено(ВыборкаУровень2.Счет), ВыборкаУровень2.Счет, Неопределено);
				СтрокаТаблицы.СкладДляОтбора	= ?(ЗначениеЗаполнено(ВыборкаУровень2.Склад), ВыборкаУровень2.Склад, Неопределено);
				СтрокаТаблицы.ПартияДляОтбора	= ?(ЗначениеЗаполнено(ВыборкаУровень2.Партия), ВыборкаУровень2.Партия, Неопределено);
				СтрокаТаблицы.ОстатокКоличество = СтруктураИтогов.КоличествоОстатокУровень2;
				СтрокаТаблицы.ОстатокСумма 		= СтруктураИтогов.СуммаОстатокУровень2;
				СтрокаТаблицы.Порядок 			= 1;
				СтрокаТаблицы.Уровень2 			= Истина;
				
				СтруктураИтогов.КоличествоОстатокУровень2 = 0;
				СтруктураИтогов.СуммаОстатокУровень2 = 0;
			КонецЦикла;
			
		Иначе	
			ДетальныеЗаписи = ВыборкаУровень1.Выбрать();
			
			Пока ДетальныеЗаписи.Следующий() Цикл		
				СтрокаТЗУровень2 = СтрокаТЗУровень1.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТЗУровень2, ДетальныеЗаписи);
				
				Если ПервыйУровень = "Счет" Тогда
					СтрокаТЗУровень2.Счет  = ПустойСчет;
				ИначеЕсли ПервыйУровень = "Склад" Тогда
					СтрокаТЗУровень2.Склад  = ПустойСклад;
				КонецЕсли;
				
				СтрокаТаблицы = РасшифровкаОборотов.Добавить();
				СтрокаТаблицы.Документ			= "Остаток";
				СтрокаТаблицы.СчетДляОтбора		= ?(ЗначениеЗаполнено(ДетальныеЗаписи.Счет), ДетальныеЗаписи.Счет, Неопределено);
				СтрокаТаблицы.СкладДляОтбора	= ?(ЗначениеЗаполнено(ДетальныеЗаписи.Склад), ДетальныеЗаписи.Склад, Неопределено);
				СтрокаТаблицы.ОстатокКоличество = ДетальныеЗаписи.КоличествоОстатокНачало;
				СтрокаТаблицы.ОстатокСумма 		= ДетальныеЗаписи.СуммаОстатокНачало;
				СтрокаТаблицы.Порядок 			= 1;
				СтрокаТаблицы.Уровень2 			= Истина;
				СтруктураИтогов.КоличествоОстатокУровень1 	= СтруктураИтогов.КоличествоОстатокУровень1 + ДетальныеЗаписи.КоличествоОстатокНачало;
				СтруктураИтогов.СуммаОстатокУровень1		= СтруктураИтогов.СуммаОстатокУровень1 + ДетальныеЗаписи.СуммаОстатокНачало;	
			КонецЦикла;
		КонецЕсли;	
		
		СтрокаТаблицы = РасшифровкаОборотов.Добавить();
		Если ОтборПартионныйУчет Тогда
			СтрокаТаблицы.ПартияДляОтбора = ?(ЗначениеЗаполнено(ВыборкаУровень1.Партия), ВыборкаУровень1.Партия, Неопределено);
		КонецЕсли;
		СтрокаТаблицы.Документ			= "Остаток";
		СтрокаТаблицы.СчетДляОтбора		= ?(ЗначениеЗаполнено(ВыборкаУровень1.Счет), ВыборкаУровень1.Счет, Неопределено);
		СтрокаТаблицы.СкладДляОтбора	= ?(ЗначениеЗаполнено(ВыборкаУровень1.Склад), ВыборкаУровень1.Склад, Неопределено);
		СтрокаТаблицы.ОстатокКоличество = СтруктураИтогов.КоличествоОстатокУровень1;
		СтрокаТаблицы.ОстатокСумма 		= СтруктураИтогов.СуммаОстатокУровень1;
		СтрокаТаблицы.Порядок 			= 1;
		СтрокаТаблицы.Уровень1 			= Истина;
		
		СтруктураИтогов.КоличествоОстатокУровень1 = 0;
		СтруктураИтогов.СуммаОстатокУровень1 = 0;
	КонецЦикла;	
	
	ЗначениеВРеквизитФормы(ДеревоЗначений, "СписокОбороты");	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРасшифровкуОборотов()

	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура"));	
	ВидыСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады"));
	Если ОтборПартионныйУчет Тогда
		ВидыСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии"));		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Организация КАК Организация,
		|	ХозрасчетныйОбороты.Регистратор КАК Документ,
		|	ХозрасчетныйОбороты.ПериодСекунда КАК Период,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОбороты.КоличествоОборот > 0
		|			ТОГДА ХозрасчетныйОбороты.КоличествоОборот
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Приход,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОбороты.КоличествоОборот > 0
		|			ТОГДА 0
		|		ИНАЧЕ -ХозрасчетныйОбороты.КоличествоОборот
		|	КОНЕЦ КАК Расход,
		|	ХозрасчетныйОстаткиИОбороты.КоличествоКонечныйОстаток КАК ОстатокКоличество,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстаток КАК ОстатокСумма,
		|	ХозрасчетныйОбороты.Субконто3 КАК Партия,
		|	ХозрасчетныйОбороты.Счет КАК СчетДт,
		|	ХозрасчетныйОбороты.КорСчет КАК СчетКт,
		//|	ВЫБОР
		//|		КОГДА ХозрасчетныйОбороты.КоличествоОборот < 0
		//|			ТОГДА ХозрасчетныйОбороты.КорСубконто2
		//|		ИНАЧЕ ХозрасчетныйОбороты.Субконто2
		//|	КОНЕЦ КАК СкладКуда,
		|	ХозрасчетныйОбороты.Субконто2 КАК СкладКуда,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОбороты.КорСубконто2) = ТИП(Справочник.Склады)
		|			ТОГДА ВЫБОР
		|					КОГДА ХозрасчетныйОбороты.КоличествоОборот < 0
		|						ТОГДА ХозрасчетныйОбороты.Субконто2
		|					ИНАЧЕ ХозрасчетныйОбороты.КорСубконто2
		|				КОНЕЦ
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК СкладОткуда,
		|	ИСТИНА КАК Уровень1,
		|	ИСТИНА КАК Уровень2,
		|	ИСТИНА КАК Уровень3,
		|	2 КАК Порядок
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНачала, &ДатаОкончания, Авто, , &ВидыСубконто, Субконто1 = &Номенклатура, , ) КАК ХозрасчетныйОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, Авто, , , &ВидыСубконто, ) КАК ХозрасчетныйОстаткиИОбороты
		|		ПО ХозрасчетныйОбороты.Регистратор = ХозрасчетныйОстаткиИОбороты.Регистратор
		|			И ХозрасчетныйОбороты.Счет = ХозрасчетныйОстаткиИОбороты.Счет
		|			И ХозрасчетныйОбороты.Субконто1 = ХозрасчетныйОстаткиИОбороты.Субконто1
		|			И ХозрасчетныйОбороты.Субконто2 = ХозрасчетныйОстаткиИОбороты.Субконто2
		|			И ХозрасчетныйОбороты.Субконто3 = ХозрасчетныйОстаткиИОбороты.Субконто3
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";

	Если НЕ ОтборПартионныйУчет Тогда	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ХозрасчетныйОбороты.Субконто3 КАК Партия,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ХозрасчетныйОбороты.Субконто3,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ХозрасчетныйОбороты.Субконто3 = ХозрасчетныйОстаткиИОбороты.Субконто3", "");
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ВидыСубконто", 	ВидыСубконто);
	Запрос.УстановитьПараметр("ДатаНачала", 	ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", 	ДатаОкончания);
	Запрос.УстановитьПараметр("Номенклатура", 	ТекущаяНоменклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл		
		СтрокаТаблицы = РасшифровкаОборотов.Добавить();	
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
		
		СтрокаТаблицы.СчетДляОтбора  = Выборка.СчетДт;
		СтрокаТаблицы.СкладДляОтбора = Выборка.СкладКуда;
		Если ОтборПартионныйУчет Тогда
			СтрокаТаблицы.ПартияДляОтбора = Выборка.Партия;	
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбора()

	// Заполнение списка первого уровня.
	Элементы.ПервыйУровень.СписокВыбора.Очистить();
	
	Если ВторойУровень = "Счет" Тогда
		Элементы.ПервыйУровень.СписокВыбора.Добавить("Склад", "Склад");
		
		Если ОтборПартионныйУчет Тогда
			Элементы.ПервыйУровень.СписокВыбора.Добавить("Партия", "Партия");	
		КонецЕсли;
		
	ИначеЕсли ВторойУровень = "Склад" Тогда
		Элементы.ПервыйУровень.СписокВыбора.Добавить("Счет", "Счет");
		
		Если ОтборПартионныйУчет Тогда
			Элементы.ПервыйУровень.СписокВыбора.Добавить("Партия", "Партия");	
		КонецЕсли;
		
	ИначеЕсли ВторойУровень = "Партия" Тогда
		Элементы.ПервыйУровень.СписокВыбора.Добавить("Счет", "Счет");
		Элементы.ПервыйУровень.СписокВыбора.Добавить("Склад", "Склад");
		
	Иначе
		Элементы.ПервыйУровень.СписокВыбора.Добавить("Счет", "Счет");
		Элементы.ПервыйУровень.СписокВыбора.Добавить("Склад", "Склад");
		
		Если ОтборПартионныйУчет Тогда
			Элементы.ПервыйУровень.СписокВыбора.Добавить("Партия", "Партия");	
		КонецЕсли;
	КонецЕсли;	
	
	// Заполнение списка второго уровня.
	Элементы.ВторойУровень.СписокВыбора.Очистить();
	
	Если ПервыйУровень = "Счет" Тогда
		Элементы.ВторойУровень.СписокВыбора.Добавить("Склад", "Склад");
		
		Если ОтборПартионныйУчет Тогда
			Элементы.ВторойУровень.СписокВыбора.Добавить("Партия", "Партия");	
		КонецЕсли;
		
	ИначеЕсли ПервыйУровень = "Склад" Тогда
		Элементы.ВторойУровень.СписокВыбора.Добавить("Счет", "Счет");
		
		Если ОтборПартионныйУчет Тогда
			Элементы.ВторойУровень.СписокВыбора.Добавить("Партия", "Партия");	
		КонецЕсли;
		
	ИначеЕсли ПервыйУровень = "Партия" Тогда
		Элементы.ВторойУровень.СписокВыбора.Добавить("Счет", "Счет");
		Элементы.ВторойУровень.СписокВыбора.Добавить("Склад", "Склад");
		
	Иначе
		Элементы.ВторойУровень.СписокВыбора.Добавить("Счет", "Счет");
		Элементы.ВторойУровень.СписокВыбора.Добавить("Склад", "Склад");
		
		Если ОтборПартионныйУчет Тогда
			Элементы.ВторойУровень.СписокВыбора.Добавить("Партия", "Партия");	
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение списка третьего уровня.
	Элементы.ТретийУровень.СписокВыбора.Очистить();
	
	Если (ПервыйУровень = "Счет" ИЛИ ПервыйУровень = "Склад") И (ВторойУровень = "Счет" ИЛИ ВторойУровень = "Склад") Тогда
		Если ОтборПартионныйУчет Тогда
			Элементы.ТретийУровень.СписокВыбора.Добавить("Партия", "Партия");	
		КонецЕсли;
		
	ИначеЕсли (ПервыйУровень = "Партия" ИЛИ ПервыйУровень = "Склад") И (ВторойУровень = "Партия" ИЛИ ВторойУровень = "Склад") Тогда
		Элементы.ТретийУровень.СписокВыбора.Добавить("Счет", "Счет");	
		
	ИначеЕсли (ПервыйУровень = "Счет" ИЛИ ПервыйУровень = "Партия") И (ВторойУровень = "Счет" ИЛИ ВторойУровень = "Партия") Тогда
		Элементы.ТретийУровень.СписокВыбора.Добавить("Склад", "Склад");	
		
	ИначеЕсли ПервыйУровень = "Счет" И ВторойУровень = "" Тогда
		Элементы.ТретийУровень.СписокВыбора.Добавить("Склад", "Склад");
		Если ОтборПартионныйУчет Тогда
			Элементы.ТретийУровень.СписокВыбора.Добавить("Партия", "Партия");	
		КонецЕсли;
		
	ИначеЕсли ПервыйУровень = "Склад" И ВторойУровень = "" Тогда
		Элементы.ТретийУровень.СписокВыбора.Добавить("Счет", "Счет");	
		Если ОтборПартионныйУчет Тогда
			Элементы.ТретийУровень.СписокВыбора.Добавить("Партия", "Партия");	
		КонецЕсли;
		
	ИначеЕсли ПервыйУровень = "Партия" И ВторойУровень = "" Тогда
		Элементы.ТретийУровень.СписокВыбора.Добавить("Склад", "Склад");	
		Элементы.ТретийУровень.СписокВыбора.Добавить("Счет", "Счет");
		
	Иначе
		Элементы.ТретийУровень.СписокВыбора.Добавить("Счет", "Счет");
		Элементы.ТретийУровень.СписокВыбора.Добавить("Склад", "Склад");
		
		Если ОтборПартионныйУчет Тогда
			Элементы.ТретийУровень.СписокВыбора.Добавить("Партия", "Партия");	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОчиститьСписокОборотыИРасшифровку()
	
	ДеревоЗначений = РеквизитФормыВЗначение("СписокОбороты");
	ДеревоЗначений.Строки.Очистить();
	ЗначениеВРеквизитФормы(ДеревоЗначений, "СписокОбороты");	

	РасшифровкаОборотов.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборыНаРасшифровкуОборотов(Счет, Склад, Партия, Уровень)

	СтруктураОтбора = Неопределено;
	МассивЗаполнения = Новый Массив();
	СтрокаКолонокФиксированнойСтруктуры = "";
	
	Если Счет <> Неопределено Тогда
		СтрокаКолонокФиксированнойСтруктуры = "СчетДляОтбора";
		МассивЗаполнения.Добавить(Счет);
	КонецЕсли;
	
	Если Склад <> Неопределено Тогда
		Если СтрокаКолонокФиксированнойСтруктуры = "" Тогда
			СтрокаКолонокФиксированнойСтруктуры = "СкладДляОтбора";
		Иначе
			СтрокаКолонокФиксированнойСтруктуры = СтрокаКолонокФиксированнойСтруктуры + ", СкладДляОтбора";
		КонецЕсли;	
		МассивЗаполнения.Добавить(Склад);
	КонецЕсли;
	
	Если Партия <> Неопределено Тогда
		Если СтрокаКолонокФиксированнойСтруктуры = "" Тогда
			СтрокаКолонокФиксированнойСтруктуры = "ПартияДляОтбора";
		Иначе
			СтрокаКолонокФиксированнойСтруктуры = СтрокаКолонокФиксированнойСтруктуры + ", ПартияДляОтбора";
		КонецЕсли;	
		МассивЗаполнения.Добавить(Партия);
	КонецЕсли;
	
	Если Уровень = 1 Тогда
		Если СтрокаКолонокФиксированнойСтруктуры = "" Тогда
			СтрокаКолонокФиксированнойСтруктуры = "Уровень1";
		Иначе
			СтрокаКолонокФиксированнойСтруктуры = СтрокаКолонокФиксированнойСтруктуры + ", Уровень1";
		КонецЕсли;	
		МассивЗаполнения.Добавить(Истина);
		
	ИначеЕсли Уровень = 2 Тогда
		Если СтрокаКолонокФиксированнойСтруктуры = "" Тогда
			СтрокаКолонокФиксированнойСтруктуры = "Уровень2";
		Иначе
			СтрокаКолонокФиксированнойСтруктуры = СтрокаКолонокФиксированнойСтруктуры + ", Уровень2";
		КонецЕсли;	
		МассивЗаполнения.Добавить(Истина);
		
	ИначеЕсли Уровень = 3 Тогда
		Если СтрокаКолонокФиксированнойСтруктуры = "" Тогда
			СтрокаКолонокФиксированнойСтруктуры = "Уровень3";
		Иначе
			СтрокаКолонокФиксированнойСтруктуры = СтрокаКолонокФиксированнойСтруктуры + ", Уровень3";
		КонецЕсли;	
		МассивЗаполнения.Добавить(Истина);
	КонецЕсли;
	
	Если МассивЗаполнения.Количество() = 1 Тогда
		СтруктураОтбора = Новый ФиксированнаяСтруктура(СтрокаКолонокФиксированнойСтруктуры, МассивЗаполнения[0]);
		
	ИначеЕсли МассивЗаполнения.Количество() = 2 Тогда
		СтруктураОтбора = Новый ФиксированнаяСтруктура(СтрокаКолонокФиксированнойСтруктуры, 
									МассивЗаполнения[0],
									МассивЗаполнения[1]);
		
	ИначеЕсли МассивЗаполнения.Количество() = 3 Тогда
		СтруктураОтбора = Новый ФиксированнаяСтруктура(СтрокаКолонокФиксированнойСтруктуры, 
									МассивЗаполнения[0],
									МассивЗаполнения[1],
									МассивЗаполнения[2]);
		
	ИначеЕсли МассивЗаполнения.Количество() = 4 Тогда
		СтруктураОтбора = Новый ФиксированнаяСтруктура(СтрокаКолонокФиксированнойСтруктуры, 
									МассивЗаполнения[0],
									МассивЗаполнения[1],
									МассивЗаполнения[2],
									МассивЗаполнения[3]);
	КонецЕсли;	
		
	Элементы.РасшифровкаОборотов.ОтборСтрок = СтруктураОтбора;	
КонецПроцедуры

&НаСервере
Функция ПолучитьОрганизациюПоУмолчанию()

	Возврат Справочники.Организации.ОрганизацияПоУмолчанию();	

КонецФункции // ПолучитьОрганизациюПоУмолчанию()

&НаСервере
Функция УстановитьПользовательскиеНастройкиОтчета(ТипОтчета, СтруктураПараметров)
    ОтчетОбъект = Отчеты[ТипОтчета].Создать();
    
    ПользовательскиеНастройки = ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки;
    Для Каждого ЭлПараметр  Из СтруктураПараметров Цикл
        Для Каждого ПараметрСКД Из ПользовательскиеНастройки.Элементы Цикл
            Если ТипЗнч(ПараметрСКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда  
                Если строка(ПараметрСКД.Параметр) = ЭлПараметр.Ключ Тогда 
                    ПараметрСКД.Значение = ЭлПараметр.Значение;
                    ПараметрСКД.Использование = Истина;
                КонецЕсли;
            КонецЕсли;
        КонецЦикла;    
    КонецЦикла;
        
    Возврат ПользовательскиеНастройки;
КонецФункции

&НаКлиенте
Процедура ОткрытьОтчет(Отчет, ГруппировкаОтчета = Неопределено, 
	Отборы = Неопределено, РеквизитыОтчета = Неопределено, Показатели = Неопределено, КлючВарианта = Неопределено, 
	НачалоПериода = Неопределено, КонецПериода = Неопределено)
	
	ПользовательскиеНастройки = ПользовательскиеНастройкиДляРасшифровки(НачалоПериода, КонецПериода);
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	
	Если ГруппировкаОтчета <> Неопределено И ТипЗнч(ГруппировкаОтчета) = Тип("Массив") Тогда
		ДополнительныеСвойства.Вставить("Группировка", ГруппировкаОтчета);
	КонецЕсли;
	
	Если ТипЗнч(Отборы) = Тип("Массив") Тогда
		
		НастройкаОтбора = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
		НастройкаОтбора.ИдентификаторПользовательскойНастройки = "Отбор";
		Для Каждого Отбор Из Отборы Цикл
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(НастройкаОтбора, Отбор.Поле, Отбор.Значение, Отбор.ВидСравнения);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(РеквизитыОтчета) = Тип("Структура") Тогда
		Для Каждого РеквизитОтчета Из РеквизитыОтчета Цикл
			ДополнительныеСвойства.Вставить(РеквизитОтчета.Ключ, РеквизитОтчета.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(Показатели) = Тип("Массив") Тогда
		Для Каждого Показатель Из Показатели Цикл
			ДополнительныеСвойства.Вставить(Показатель, Истина);
		КонецЦикла;
	КонецЕсли;
	
	Если КлючВарианта <> Неопределено Тогда
		ДополнительныеСвойства.Вставить("КлючВарианта", КлючВарианта);
	КонецЕсли;
	
	ЗаполняемыеНастройки = Новый Структура;
	ЗаполняемыеНастройки.Вставить("Показатели", Истина);
	ЗаполняемыеНастройки.Вставить("Группировка", Истина);
	ЗаполняемыеНастройки.Вставить("Отбор", Ложь);
	ЗаполняемыеНастройки.Вставить("ВыводимыеДанные", Ложь);
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("РежимРасшифровки" , Истина);
	ПараметрыОтчета.Вставить("ВидРасшифровки" , 2);
	ПараметрыОтчета.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПараметрыОтчета.Вставить("ЗаполняемыеНастройки", ЗаполняемыеНастройки);

	ОткрытьФорму(Отчет, ПараметрыОтчета, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Функция ПользовательскиеНастройкиДляРасшифровки(НачалоПериода = Неопределено, КонецПериода = Неопределено)
	
	// Инициализация пользовательских настроек
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("РежимРасшифровки", Истина);
	ДополнительныеСвойства.Вставить("Период", НачалоПериода);
	
	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
		ДополнительныеСвойства.Вставить("Организация", ОтборОрганизация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборСчет) Тогда
		ДополнительныеСвойства.Вставить("Счет", ОтборСчет);
	КонецЕсли;
	
	Если НачалоПериода <> Неопределено Тогда
		ДополнительныеСвойства.Вставить("НачалоПериода", НачалоПериода);
	КонецЕсли;
	Если КонецПериода <> Неопределено Тогда
		ДополнительныеСвойства.Вставить("КонецПериода", КонецПериода);
	КонецЕсли;
	
	Возврат ПользовательскиеНастройки;
	
КонецФункции

&НаСервере
Процедура СохранитьНастройки()  

	Настройки = Новый Соответствие();
	Настройки.Вставить("ОтборНоменклатура", ОтборНоменклатура);
	Настройки.Вставить("ОтборСчет", 		ОтборСчет);
	Настройки.Вставить("ДатаНачала", 		ДатаНачала);
	Настройки.Вставить("ДатаОкончания", 	ДатаОкончания);
	Настройки.Вставить("СвернутьПоПартиям", СвернутьПоПартиям);
	Настройки.Вставить("СвернутьПоСкладам", СвернутьПоСкладам);
	Настройки.Вставить("СвернутьПоСчетам", 	СвернутьПоСчетам);
	Настройки.Вставить("ОтборОрганизация", 	ОтборОрганизация);
	Настройки.Вставить("ОтборСклад", 		ОтборСклад);
	Настройки.Вставить("ПервыйУровень", 	ПервыйУровень);
	Настройки.Вставить("ВторойУровень", 	ВторойУровень);
		
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("МониторНоменклатуры", "НастройкиОбработки", Настройки);
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()

	СтруктураНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("МониторНоменклатуры", "НастройкиОбработки");
	                 
	Если СтруктураНастроек <> Неопределено Тогда		
		ОтборНоменклатура 	= СтруктураНастроек.Получить("ОтборНоменклатура");
		ОтборСчет 			= СтруктураНастроек.Получить("ОтборСчет");
		ДатаНачала 			= СтруктураНастроек.Получить("ДатаНачала");
		ДатаОкончания 		= СтруктураНастроек.Получить("ДатаОкончания");
		СвернутьПоПартиям 	= СтруктураНастроек.Получить("СвернутьПоПартиям");
		СвернутьПоСкладам 	= СтруктураНастроек.Получить("СвернутьПоСкладам");
		СвернутьПоСчетам 	= СтруктураНастроек.Получить("СвернутьПоСчетам");
		ОтборОрганизация 	= СтруктураНастроек.Получить("ОтборОрганизация");
		ОтборСклад 			= СтруктураНастроек.Получить("ОтборСклад");
		
		Если НЕ ОтборПартионныйУчет Тогда
			
			ЗначениеПервыйУровень = СтруктураНастроек.Получить("ПервыйУровень");
			ЗначениеВторойУровень = СтруктураНастроек.Получить("ВторойУровень");
			
			Если ЗначениеПервыйУровень <> "Партия" Тогда
				ПервыйУровень = ЗначениеПервыйУровень;	
			КонецЕсли;	
			
			Если ЗначениеВторойУровень <> "Партия" Тогда
				ВторойУровень = ЗначениеВторойУровень;	
			КонецЕсли;
			
		Иначе
			ПервыйУровень 	= СтруктураНастроек.Получить("ПервыйУровень");
			ВторойУровень 	= СтруктураНастроек.Получить("ВторойУровень");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначенияГруппировок()

	Если ПервыйУровень = "Склад" И ВторойУровень = "" И ТретийУровень = "" Тогда
		СвернутьПоСчетам = Истина;
		СвернутьПоПартиям = Истина;
		СвернутьПоСкладам = Ложь;
		
	ИначеЕсли ПервыйУровень = "Счет" И ВторойУровень = "" И ТретийУровень = "" Тогда
		СвернутьПоСкладам = Истина;
		СвернутьПоПартиям = Истина;
		СвернутьПоСчетам = Ложь;
		
	ИначеЕсли ПервыйУровень = "Партия" И ВторойУровень = "" И ТретийУровень = "" Тогда
		СвернутьПоСкладам = Истина;
		СвернутьПоСчетам = Истина;
		СвернутьПоПартиям = Ложь;
		
	ИначеЕсли ПервыйУровень <> "" И ВторойУровень <> "" И ТретийУровень <> "" Тогда
		СвернутьПоСкладам = Ложь;
		СвернутьПоСчетам = Ложь;
		СвернутьПоПартиям = Ложь;
		
	ИначеЕсли (ПервыйУровень = "Счет" ИЛИ ПервыйУровень = "Склад") И (ВторойУровень = "Склад" ИЛИ ВторойУровень = "Счет") И ТретийУровень = "" Тогда
		СвернутьПоПартиям = Истина;
		СвернутьПоСкладам = Ложь;
		СвернутьПоСчетам = Ложь;
		
	ИначеЕсли (ПервыйУровень = "Партия" ИЛИ ПервыйУровень = "Склад") И (ВторойУровень = "Склад" ИЛИ ВторойУровень = "Партия") И ТретийУровень = "" Тогда
		СвернутьПоСчетам = Истина;
		СвернутьПоСкладам = Ложь;
		СвернутьПоПартиям = Ложь;
		
	ИначеЕсли (ПервыйУровень = "Партия" ИЛИ ПервыйУровень = "Счет") И (ВторойУровень = "Счет" ИЛИ ВторойУровень = "Партия") И ТретийУровень = "" Тогда
		СвернутьПоСкладам = Истина;
		СвернутьПоПартиям = Ложь;
		СвернутьПоСчетам = Ложь;
		
	ИначеЕсли ПервыйУровень = "" И ВторойУровень = "" И ТретийУровень = "" Тогда
		СвернутьПоСкладам = Истина;
		СвернутьПоСчетам = Истина;
		СвернутьПоПартиям = Истина;
		
	КонецЕсли;	

КонецПроцедуры // УстановитьЗначенияГруппировок()


#КонецОбласти

#Область ОбработчикиОтборов

// Процедура - обработчик события ПриИзменении поля ввода ОтборНоменклатура.
//
&НаКлиенте
Процедура ОтборНоменклатураПриИзменении(Элемент)
	УстановитьОтборыСписокТМЗ_Главный();
	УстановитьОтборыСписокМБП_Главный();
	УстановитьОтборыСписокДокументов();
	УстановитьОтборыСписокДокументовМБП();
	
	Если ЗначениеЗаполнено(ОтборНоменклатура) Тогда
		ТекущаяНоменклатура = ОтборНоменклатура;
	Иначе	
		ТекущаяСтрока = Элементы.СписокТМЗ_Главный.ТекущиеДанные;
		
		Если ТекущаяСтрока = Неопределено Тогда
			ТекущаяНоменклатура = Неопределено;	
			
			ОчиститьСтрокиДерева();
			
			РасшифровкаОборотов.Очистить();
		Иначе	
			ТекущаяНоменклатура = ТекущаяСтрока.Номенклатура;	
		КонецЕсли;	
	КонецЕсли;
	
	Если ТекущаяНоменклатура <> Неопределено И ЗначениеЗаполнено(ПервыйУровень) И ЗначениеЗаполнено(ВторойУровень) Тогда
		ЗаполнитьСписокОбороты();
		ЗаполнитьРасшифровкуОборотов();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОчиститьСтрокиДерева()
			ДеревоЗначений = РеквизитФормыВЗначение("СписокОбороты");	
			ДеревоЗначений.Строки.Очистить();
			ЗначениеВРеквизитФормы(ДеревоЗначений, "СписокОбороты");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОтборСклад.
//
&НаКлиенте
Процедура ОтборСкладПриИзменении(Элемент)
	УстановитьОтборыСписокТМЗ_Главный();
	УстановитьОтборыСписокМБП_Главный();
	УстановитьОтборыСписокДокументов();
	УстановитьОтборыСписокДокументовМБП();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОтборСчет.
//
&НаКлиенте
Процедура ОтборСчетПриИзменении(Элемент)
	УстановитьОтборыСписокТМЗ_Главный();
	УстановитьОтборыСписокМБП_Главный();
	УстановитьОтборыСписокДокументов();
	УстановитьОтборыСписокДокументовМБП();
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	Если ОтборОрганизация = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка") Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Организация"" не может быть пустым.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ОтборОрганизация");
		
		ОтборОрганизация = ПолучитьОрганизациюПоУмолчанию();
	КонецЕсли;	
	
	ОтборПартионныйУчет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаНачала, ОтборОрганизация).СпособОценкиТМЗ = ПредопределенноеЗначение("Перечисление.СпособыОценки.ФИФО");
	
	Если ОтборПартионныйУчет Тогда
		Элементы.ДекорацияПартионныйУчет.Заголовок = НСтр("ru = 'ФИФО'");
	Иначе
		Элементы.ДекорацияПартионныйУчет.Заголовок = НСтр("ru = 'СВЦ'");
	КонецЕсли;	
	
	УстановитьВидимостьДоступностьЭлементов();
	
	УстановитьОтборыСписокТМЗ_Главный();
	УстановитьОтборыСписокМБП_Главный();
	УстановитьОтборыСписокДокументов();
	УстановитьОтборыСписокДокументовМБП();
	
	Если ЗначениеЗаполнено(ПервыйУровень) И ЗначениеЗаполнено(ВторойУровень) Тогда
		ЗаполнитьСписокОбороты();
		ЗаполнитьРасшифровкуОборотов();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ФоновоеЗаданиеПерепровестиДокументы

&НаСервере
Функция ДокументыДляОбработки()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Регистратор КАК Документ,
		|	ХозрасчетныйОбороты.ПериодСекунда КАК Дата
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаН, &ДатаК, Авто, , &ВидыСубконто, , , ) КАК ХозрасчетныйОбороты
		|ГДЕ
		|	ХозрасчетныйОбороты.Субконто1 В ИЕРАРХИИ(&Номенклатура)
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОбороты.Регистратор,
		|	ХозрасчетныйОбороты.ПериодСекунда
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура"));	
	ВидыСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады"));
	Запрос.УстановитьПараметр("ВидыСубконто", 	ВидыСубконто);	
	Запрос.УстановитьПараметр("ДатаК", 			ДатаОкончания);
	Запрос.УстановитьПараметр("ДатаН", 			ДатаНачала);
	Запрос.УстановитьПараметр("Номенклатура", 	ОтборНоменклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	МассивСсылок = Новый Массив;

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивСсылок.Добавить(ВыборкаДетальныеЗаписи.Документ);
	КонецЦикла;
	
	Возврат МассивСсылок;	

КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			СостояниеПрогресса = 100;
			ЗагрузитьПодготовленныеДанные();
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		Иначе
			ДанныеПрогресса = ПолучитьИзВременногоХранилища(АдресХранилищаПрогресса);
			СостояниеПрогресса = ДанныеПрогресса;
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;	
КонецПроцедуры

&НаСервере
Функция ПерепровестиДокументыНаСервере(ПараметрыКоманды)
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	АдресРасшифровки = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	АдресХранилищаПрогресса = ПоместитьВоВременноеХранилище(, УникальныйИдентификатор);
	ПараметрыКоманды.Вставить("АдресРасшифровки", АдресРасшифровки);
	ПараметрыКоманды.Вставить("АдресХранилищаПрогресса", АдресХранилищаПрогресса);
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Обработки.МониторНоменклатура.ПерепровестиДокументы",
		ПараметрыКоманды,
		СтрШаблон(НСтр("ru = 'Перепроведение документов: %1'"), Заголовок));
	
	АдресХранилища       = РезультатВыполнения.АдресХранилища;
	ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	Результат         = РезультатВыполнения.Результат;
	
	ИдентификаторЗадания = Неопределено;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
КонецФункции

#КонецОбласти
